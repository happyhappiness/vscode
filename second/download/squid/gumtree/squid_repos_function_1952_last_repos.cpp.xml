<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1952_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Dns<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Init<pos:position pos:line="2" pos:column="10"/></name></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">void<pos:position pos:line="2" pos:column="15"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="16"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">int<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">init<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">DnsSocketA<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">&lt;<pos:position pos:line="6" pos:column="24"/></operator> <literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal> <operator pos:line="6" pos:column="24">&amp;&amp;<pos:position pos:line="6" pos:column="34"/></operator> <name pos:line="6" pos:column="27">DnsSocketB<pos:position pos:line="6" pos:column="37"/></name> <operator pos:line="6" pos:column="38">&lt;<pos:position pos:line="6" pos:column="42"/></operator> <literal type="number" pos:line="6" pos:column="40">0<pos:position pos:line="6" pos:column="41"/></literal></expr>)<pos:position pos:line="6" pos:column="42"/></condition><then pos:line="6" pos:column="42"> <block pos:line="6" pos:column="43">{
        <decl_stmt><decl><type><name><name pos:line="7" pos:column="9">Ip<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">::<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">Address<pos:position pos:line="7" pos:column="20"/></name></name></type> <name pos:line="7" pos:column="21">addrV6<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt> <comment type="line" pos:line="7" pos:column="29">// since we don't want to alter Config.Addrs.udp_* and dont have one of our own.</comment>

        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name><name pos:line="9" pos:column="14">Config<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">.<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">Addrs<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">.<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="27">udp_outgoing<pos:position pos:line="9" pos:column="39"/></name><operator pos:line="9" pos:column="39">.<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="40">isNoAddr<pos:position pos:line="9" pos:column="48"/></name></name><argument_list pos:line="9" pos:column="48">()<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="51"/></condition><then pos:line="9" pos:column="51">
            <block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="13">addrV6<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <name><name pos:line="10" pos:column="22">Config<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">.<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">Addrs<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">.<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">udp_outgoing<pos:position pos:line="10" pos:column="47"/></name></name></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt></block></then>
        <else pos:line="11" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="13">addrV6<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <name><name pos:line="12" pos:column="22">Config<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">.<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="29">Addrs<pos:position pos:line="12" pos:column="34"/></name><operator pos:line="12" pos:column="34">.<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="35">udp_incoming<pos:position pos:line="12" pos:column="47"/></name></name></expr>;<pos:position pos:line="12" pos:column="48"/></expr_stmt></block></else></if>

        <decl_stmt><decl><type><name><name pos:line="14" pos:column="9">Ip<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">::<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">Address<pos:position pos:line="14" pos:column="20"/></name></name></type> <name pos:line="14" pos:column="21">addrV4<pos:position pos:line="14" pos:column="27"/></name> <init pos:line="14" pos:column="28">= <expr><name pos:line="14" pos:column="30">addrV6<pos:position pos:line="14" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="37"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="15" pos:column="9">addrV4<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">.<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">setIPv4<pos:position pos:line="15" pos:column="23"/></name></name><argument_list pos:line="15" pos:column="23">()<pos:position pos:line="15" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">Ip<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">::<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">EnableIpv6<pos:position pos:line="17" pos:column="27"/></name></name> <operator pos:line="17" pos:column="28">&amp;&amp;<pos:position pos:line="17" pos:column="38"/></operator> <call><name><name pos:line="17" pos:column="31">addrV6<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">.<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="38">isIPv6<pos:position pos:line="17" pos:column="44"/></name></name><argument_list pos:line="17" pos:column="44">()<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47"> <block pos:line="17" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">debugs<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><literal type="number" pos:line="18" pos:column="20">78<pos:position pos:line="18" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="24">2<pos:position pos:line="18" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="27">"idnsInit: attempt open DNS socket to: "<pos:position pos:line="18" pos:column="67"/></literal> <operator pos:line="18" pos:column="68">&lt;&lt;<pos:position pos:line="18" pos:column="76"/></operator> <name pos:line="18" pos:column="71">addrV6<pos:position pos:line="18" pos:column="77"/></name></expr></argument>)<pos:position pos:line="18" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">DnsSocketB<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <call><name pos:line="19" pos:column="26">comm_open_listener<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">(<argument><expr><name pos:line="19" pos:column="45">SOCK_DGRAM<pos:position pos:line="19" pos:column="55"/></name></expr></argument>,
                                            <argument><expr><name pos:line="20" pos:column="45">IPPROTO_UDP<pos:position pos:line="20" pos:column="56"/></name></expr></argument>,
                                            <argument><expr><name pos:line="21" pos:column="45">addrV6<pos:position pos:line="21" pos:column="51"/></name></expr></argument>,
                                            <argument><expr><name pos:line="22" pos:column="45">COMM_NONBLOCKING<pos:position pos:line="22" pos:column="61"/></name></expr></argument>,
                                            <argument><expr><literal type="string" pos:line="23" pos:column="45">"DNS Socket IPv6"<pos:position pos:line="23" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name><name pos:line="26" pos:column="13">addrV4<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">.<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">isIPv4<pos:position pos:line="26" pos:column="26"/></name></name><argument_list pos:line="26" pos:column="26">()<pos:position pos:line="26" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="29"/></condition><then pos:line="26" pos:column="29"> <block pos:line="26" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">debugs<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><literal type="number" pos:line="27" pos:column="20">78<pos:position pos:line="27" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="24">2<pos:position pos:line="27" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="27">"idnsInit: attempt open DNS socket to: "<pos:position pos:line="27" pos:column="67"/></literal> <operator pos:line="27" pos:column="68">&lt;&lt;<pos:position pos:line="27" pos:column="76"/></operator> <name pos:line="27" pos:column="71">addrV4<pos:position pos:line="27" pos:column="77"/></name></expr></argument>)<pos:position pos:line="27" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><name pos:line="28" pos:column="13">DnsSocketA<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <call><name pos:line="28" pos:column="26">comm_open_listener<pos:position pos:line="28" pos:column="44"/></name><argument_list pos:line="28" pos:column="44">(<argument><expr><name pos:line="28" pos:column="45">SOCK_DGRAM<pos:position pos:line="28" pos:column="55"/></name></expr></argument>,
                                            <argument><expr><name pos:line="29" pos:column="45">IPPROTO_UDP<pos:position pos:line="29" pos:column="56"/></name></expr></argument>,
                                            <argument><expr><name pos:line="30" pos:column="45">addrV4<pos:position pos:line="30" pos:column="51"/></name></expr></argument>,
                                            <argument><expr><name pos:line="31" pos:column="45">COMM_NONBLOCKING<pos:position pos:line="31" pos:column="61"/></name></expr></argument>,
                                            <argument><expr><literal type="string" pos:line="32" pos:column="45">"DNS Socket IPv4"<pos:position pos:line="32" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>

        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">DnsSocketA<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">&lt;<pos:position pos:line="35" pos:column="28"/></operator> <literal type="number" pos:line="35" pos:column="26">0<pos:position pos:line="35" pos:column="27"/></literal> <operator pos:line="35" pos:column="28">&amp;&amp;<pos:position pos:line="35" pos:column="38"/></operator> <name pos:line="35" pos:column="31">DnsSocketB<pos:position pos:line="35" pos:column="41"/></name> <operator pos:line="35" pos:column="42">&lt;<pos:position pos:line="35" pos:column="46"/></operator> <literal type="number" pos:line="35" pos:column="44">0<pos:position pos:line="35" pos:column="45"/></literal></expr>)<pos:position pos:line="35" pos:column="46"/></condition><then pos:line="35" pos:column="46">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="13">fatal<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><literal type="string" pos:line="36" pos:column="19">"Could not create a DNS socket"<pos:position pos:line="36" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="38" pos:column="9">/* Ouch... we can't call functions using debug from a debug
         * statement. Doing so messes up the internal Debug::level
         */</comment>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">DnsSocketB<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">&gt;=<pos:position pos:line="41" pos:column="29"/></operator> <literal type="number" pos:line="41" pos:column="27">0<pos:position pos:line="41" pos:column="28"/></literal></expr>)<pos:position pos:line="41" pos:column="29"/></condition><then pos:line="41" pos:column="29"> <block pos:line="41" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">comm_local_port<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">DnsSocketB<pos:position pos:line="42" pos:column="39"/></name></expr></argument>)<pos:position pos:line="42" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">debugs<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><literal type="number" pos:line="43" pos:column="20">78<pos:position pos:line="43" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="24">DBG_IMPORTANT<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="39">"DNS Socket created at "<pos:position pos:line="43" pos:column="63"/></literal> <operator pos:line="43" pos:column="64">&lt;&lt;<pos:position pos:line="43" pos:column="72"/></operator> <name pos:line="43" pos:column="67">addrV6<pos:position pos:line="43" pos:column="73"/></name> <operator pos:line="43" pos:column="74">&lt;&lt;<pos:position pos:line="43" pos:column="82"/></operator> <literal type="string" pos:line="43" pos:column="77">", FD "<pos:position pos:line="43" pos:column="84"/></literal> <operator pos:line="43" pos:column="85">&lt;&lt;<pos:position pos:line="43" pos:column="93"/></operator> <name pos:line="43" pos:column="88">DnsSocketB<pos:position pos:line="43" pos:column="98"/></name></expr></argument>)<pos:position pos:line="43" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="100"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">Comm<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">::<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="19">SetSelect<pos:position pos:line="44" pos:column="28"/></name></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">DnsSocketB<pos:position pos:line="44" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="41">COMM_SELECT_READ<pos:position pos:line="44" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="59">idnsRead<pos:position pos:line="44" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="69">NULL<pos:position pos:line="44" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="75">0<pos:position pos:line="44" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="78"/></expr_stmt>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">DnsSocketA<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">&gt;=<pos:position pos:line="46" pos:column="29"/></operator> <literal type="number" pos:line="46" pos:column="27">0<pos:position pos:line="46" pos:column="28"/></literal></expr>)<pos:position pos:line="46" pos:column="29"/></condition><then pos:line="46" pos:column="29"> <block pos:line="46" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">comm_local_port<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">DnsSocketA<pos:position pos:line="47" pos:column="39"/></name></expr></argument>)<pos:position pos:line="47" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">debugs<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><literal type="number" pos:line="48" pos:column="20">78<pos:position pos:line="48" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="24">DBG_IMPORTANT<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="39">"DNS Socket created at "<pos:position pos:line="48" pos:column="63"/></literal> <operator pos:line="48" pos:column="64">&lt;&lt;<pos:position pos:line="48" pos:column="72"/></operator> <name pos:line="48" pos:column="67">addrV4<pos:position pos:line="48" pos:column="73"/></name> <operator pos:line="48" pos:column="74">&lt;&lt;<pos:position pos:line="48" pos:column="82"/></operator> <literal type="string" pos:line="48" pos:column="77">", FD "<pos:position pos:line="48" pos:column="84"/></literal> <operator pos:line="48" pos:column="85">&lt;&lt;<pos:position pos:line="48" pos:column="93"/></operator> <name pos:line="48" pos:column="88">DnsSocketA<pos:position pos:line="48" pos:column="98"/></name></expr></argument>)<pos:position pos:line="48" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="100"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">Comm<pos:position pos:line="49" pos:column="17"/></name><operator pos:line="49" pos:column="17">::<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="19">SetSelect<pos:position pos:line="49" pos:column="28"/></name></name><argument_list pos:line="49" pos:column="28">(<argument><expr><name pos:line="49" pos:column="29">DnsSocketA<pos:position pos:line="49" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="41">COMM_SELECT_READ<pos:position pos:line="49" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="59">idnsRead<pos:position pos:line="49" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="69">NULL<pos:position pos:line="49" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="75">0<pos:position pos:line="49" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="78"/></expr_stmt>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">assert<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><literal type="number" pos:line="53" pos:column="12">0<pos:position pos:line="53" pos:column="13"/></literal> <operator pos:line="53" pos:column="14">==<pos:position pos:line="53" pos:column="16"/></operator> <name pos:line="53" pos:column="17">nns<pos:position pos:line="53" pos:column="20"/></name></expr></argument>)<pos:position pos:line="53" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">idnsAddMDNSNameservers<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">()<pos:position pos:line="54" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="30"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="55" pos:column="5">bool<pos:position pos:line="55" pos:column="9"/></name></type> <name pos:line="55" pos:column="10">nsFound<pos:position pos:line="55" pos:column="17"/></name> <init pos:line="55" pos:column="18">= <expr><call><name pos:line="55" pos:column="20">idnsParseNameservers<pos:position pos:line="55" pos:column="40"/></name><argument_list pos:line="55" pos:column="40">()<pos:position pos:line="55" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="55" pos:column="43"/></decl_stmt>

    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><operator pos:line="57" pos:column="9">!<pos:position pos:line="57" pos:column="10"/></operator><name pos:line="57" pos:column="10">nsFound<pos:position pos:line="57" pos:column="17"/></name></expr>)<pos:position pos:line="57" pos:column="18"/></condition><then pos:line="57" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="9">nsFound<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <call><name pos:line="58" pos:column="19">idnsParseResolvConf<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">()<pos:position pos:line="58" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt></block></then></if>

<cpp:if pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">if<pos:position pos:line="60" pos:column="4"/></cpp:directive> <expr><name pos:line="60" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="60" pos:column="20"/></name></expr></cpp:if>
    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><operator pos:line="61" pos:column="9">!<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">nsFound<pos:position pos:line="61" pos:column="17"/></name></expr>)<pos:position pos:line="61" pos:column="18"/></condition><then pos:line="61" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="9">nsFound<pos:position pos:line="62" pos:column="16"/></name> <operator pos:line="62" pos:column="17">=<pos:position pos:line="62" pos:column="18"/></operator> <call><name pos:line="62" pos:column="19">idnsParseWIN32Registry<pos:position pos:line="62" pos:column="41"/></name><argument_list pos:line="62" pos:column="41">()<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="44"/></expr_stmt></block></then></if>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><operator pos:line="65" pos:column="9">!<pos:position pos:line="65" pos:column="10"/></operator><name pos:line="65" pos:column="10">nsFound<pos:position pos:line="65" pos:column="17"/></name></expr>)<pos:position pos:line="65" pos:column="18"/></condition><then pos:line="65" pos:column="18"> <block pos:line="65" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">debugs<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><literal type="number" pos:line="66" pos:column="16">78<pos:position pos:line="66" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="20">DBG_IMPORTANT<pos:position pos:line="66" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="35">"Warning: Could not find any nameservers. Trying to use localhost"<pos:position pos:line="66" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="103"/></expr_stmt>
<cpp:if pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">if<pos:position pos:line="67" pos:column="4"/></cpp:directive> <expr><name pos:line="67" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="67" pos:column="20"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">debugs<pos:position pos:line="68" pos:column="15"/></name><argument_list pos:line="68" pos:column="15">(<argument><expr><literal type="number" pos:line="68" pos:column="16">78<pos:position pos:line="68" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="20">DBG_IMPORTANT<pos:position pos:line="68" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="35">"Please check your TCP-IP settings or /etc/resolv.conf file"<pos:position pos:line="68" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="97"/></expr_stmt>
<cpp:else pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">else<pos:position pos:line="69" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">debugs<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><literal type="number" pos:line="70" pos:column="16">78<pos:position pos:line="70" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="20">DBG_IMPORTANT<pos:position pos:line="70" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="35">"Please check your /etc/resolv.conf file"<pos:position pos:line="70" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">endif<pos:position pos:line="71" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="73" pos:column="9">debugs<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><literal type="number" pos:line="73" pos:column="16">78<pos:position pos:line="73" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="20">DBG_IMPORTANT<pos:position pos:line="73" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="35">"or use the 'dns_nameservers' option in squid.conf."<pos:position pos:line="73" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="89"/></expr_stmt>
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name><name pos:line="74" pos:column="13">Ip<pos:position pos:line="74" pos:column="15"/></name><operator pos:line="74" pos:column="15">::<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="17">EnableIpv6<pos:position pos:line="74" pos:column="27"/></name></name></expr>)<pos:position pos:line="74" pos:column="28"/></condition><then pos:line="74" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="13">idnsAddNameserver<pos:position pos:line="75" pos:column="30"/></name><argument_list pos:line="75" pos:column="30">(<argument><expr><literal type="string" pos:line="75" pos:column="31">"::1"<pos:position pos:line="75" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="38"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">idnsAddNameserver<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><literal type="string" pos:line="76" pos:column="27">"127.0.0.1"<pos:position pos:line="76" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><operator pos:line="79" pos:column="9">!<pos:position pos:line="79" pos:column="10"/></operator><name pos:line="79" pos:column="10">init<pos:position pos:line="79" pos:column="14"/></name></expr>)<pos:position pos:line="79" pos:column="15"/></condition><then pos:line="79" pos:column="15"> <block pos:line="79" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">memset<pos:position pos:line="80" pos:column="15"/></name><argument_list pos:line="80" pos:column="15">(<argument><expr><name pos:line="80" pos:column="16">RcodeMatrix<pos:position pos:line="80" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="80" pos:column="29">'\0'<pos:position pos:line="80" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="80" pos:column="35">sizeof<argument_list pos:line="80" pos:column="41">(<argument><expr><name pos:line="80" pos:column="42">RcodeMatrix<pos:position pos:line="80" pos:column="53"/></name></expr></argument>)<pos:position pos:line="80" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="80" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name pos:line="81" pos:column="9">idns_lookup_hash<pos:position pos:line="81" pos:column="25"/></name> <operator pos:line="81" pos:column="26">=<pos:position pos:line="81" pos:column="27"/></operator> <call><name pos:line="81" pos:column="28">hash_create<pos:position pos:line="81" pos:column="39"/></name><argument_list pos:line="81" pos:column="39">(<argument><expr><operator pos:line="81" pos:column="40">(<pos:position pos:line="81" pos:column="41"/></operator><name pos:line="81" pos:column="41">HASHCMP<pos:position pos:line="81" pos:column="48"/></name> <operator pos:line="81" pos:column="49">*<pos:position pos:line="81" pos:column="50"/></operator><operator pos:line="81" pos:column="50">)<pos:position pos:line="81" pos:column="51"/></operator> <name pos:line="81" pos:column="52">strcmp<pos:position pos:line="81" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="60">103<pos:position pos:line="81" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="65">hash_string<pos:position pos:line="81" pos:column="76"/></name></expr></argument>)<pos:position pos:line="81" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="82" pos:column="9">++<pos:position pos:line="82" pos:column="11"/></operator><name pos:line="82" pos:column="11">init<pos:position pos:line="82" pos:column="15"/></name></expr>;<pos:position pos:line="82" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>

<cpp:if pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">if<pos:position pos:line="85" pos:column="4"/></cpp:directive> <expr><name pos:line="85" pos:column="5">WHEN_EDNS_RESPONSES_ARE_PARSED<pos:position pos:line="85" pos:column="35"/></name></expr></cpp:if>
    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name><name pos:line="86" pos:column="9">Config<pos:position pos:line="86" pos:column="15"/></name><operator pos:line="86" pos:column="15">.<pos:position pos:line="86" pos:column="16"/></operator><name pos:line="86" pos:column="16">onoff<pos:position pos:line="86" pos:column="21"/></name><operator pos:line="86" pos:column="21">.<pos:position pos:line="86" pos:column="22"/></operator><name pos:line="86" pos:column="22">ignore_unknown_nameservers<pos:position pos:line="86" pos:column="48"/></name></name> <operator pos:line="86" pos:column="49">&amp;&amp;<pos:position pos:line="86" pos:column="59"/></operator> <name pos:line="86" pos:column="52">max_shared_edns<pos:position pos:line="86" pos:column="67"/></name> <operator pos:line="86" pos:column="68">&gt;<pos:position pos:line="86" pos:column="72"/></operator> <literal type="number" pos:line="86" pos:column="70">0<pos:position pos:line="86" pos:column="71"/></literal></expr>)<pos:position pos:line="86" pos:column="72"/></condition><then pos:line="86" pos:column="72"> <block pos:line="86" pos:column="73">{
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">debugs<pos:position pos:line="87" pos:column="15"/></name><argument_list pos:line="87" pos:column="15">(<argument><expr><literal type="number" pos:line="87" pos:column="16">0<pos:position pos:line="87" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="19">DBG_IMPORTANT<pos:position pos:line="87" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="34">"ERROR: cannot negotiate EDNS with unknown nameservers. Disabling"<pos:position pos:line="87" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="102"/></expr_stmt>
        <expr_stmt><expr><name pos:line="88" pos:column="9">max_shared_edns<pos:position pos:line="88" pos:column="24"/></name> <operator pos:line="88" pos:column="25">=<pos:position pos:line="88" pos:column="26"/></operator> <operator pos:line="88" pos:column="27">-<pos:position pos:line="88" pos:column="28"/></operator><literal type="number" pos:line="88" pos:column="28">1<pos:position pos:line="88" pos:column="29"/></literal></expr>;<pos:position pos:line="88" pos:column="30"/></expr_stmt> <comment type="line" pos:line="88" pos:column="31">// disable if we might receive random replies.</comment>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>
<cpp:endif pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">endif<pos:position pos:line="90" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name pos:line="92" pos:column="5">Mgr<pos:position pos:line="92" pos:column="8"/></name><operator pos:line="92" pos:column="8">::<pos:position pos:line="92" pos:column="10"/></operator><name pos:line="92" pos:column="10">RegisterAction<pos:position pos:line="92" pos:column="24"/></name></name><argument_list pos:line="92" pos:column="24">(<argument><expr><literal type="string" pos:line="92" pos:column="25">"idns"<pos:position pos:line="92" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="33">"Internal DNS Statistics"<pos:position pos:line="92" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="92" pos:column="60">idnsStats<pos:position pos:line="92" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="71">0<pos:position pos:line="92" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="74">1<pos:position pos:line="92" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="77"/></expr_stmt>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
