<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4816_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">SwapDir<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">init<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">47<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">2<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="24"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// XXX: SwapDirs aren't refcounted. We make IORequestor calls, which</comment>
    <comment type="line" pos:line="7" pos:column="5">// are refcounted. We up our count once to avoid implicit delete's.</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">RefCountReference<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">Must<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">(<argument><expr><operator pos:line="10" pos:column="10">!<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">map<pos:position pos:line="10" pos:column="14"/></name></expr></argument>)<pos:position pos:line="10" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">map<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <operator pos:line="11" pos:column="11">new<pos:position pos:line="11" pos:column="14"/></operator> <call><name pos:line="11" pos:column="15">DirMap<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">path<pos:position pos:line="11" pos:column="26"/></name></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <name pos:line="13" pos:column="11">char<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">ioModule<pos:position pos:line="13" pos:column="25"/></name> <init pos:line="13" pos:column="26">= <expr><ternary><condition><expr><call><name pos:line="13" pos:column="28">needsDiskStrand<pos:position pos:line="13" pos:column="43"/></name><argument_list pos:line="13" pos:column="43">()<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr> ?<pos:position pos:line="13" pos:column="47"/></condition><then pos:line="13" pos:column="47"> <expr><literal type="string" pos:line="13" pos:column="48">"IpcIo"<pos:position pos:line="13" pos:column="55"/></literal></expr> <pos:position pos:line="13" pos:column="56"/></then><else pos:line="13" pos:column="56">: <expr><literal type="string" pos:line="13" pos:column="58">"Blocking"<pos:position pos:line="13" pos:column="68"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="13" pos:column="69"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<decl><type><name pos:line="14" pos:column="9">DiskIOModule<pos:position pos:line="14" pos:column="21"/></name> <modifier pos:line="14" pos:column="22">*<pos:position pos:line="14" pos:column="23"/></modifier></type><name pos:line="14" pos:column="23">m<pos:position pos:line="14" pos:column="24"/></name> <init pos:line="14" pos:column="25">= <expr><call><name><name pos:line="14" pos:column="27">DiskIOModule<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">::<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="41">Find<pos:position pos:line="14" pos:column="45"/></name></name><argument_list pos:line="14" pos:column="45">(<argument><expr><name pos:line="14" pos:column="46">ioModule<pos:position pos:line="14" pos:column="54"/></name></expr></argument>)<pos:position pos:line="14" pos:column="55"/></argument_list></call></expr></init></decl>)<pos:position pos:line="14" pos:column="56"/></condition><then pos:line="14" pos:column="56"> <block pos:line="14" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">47<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="15" pos:column="19">2<pos:position pos:line="15" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="22">HERE<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">&lt;&lt;<pos:position pos:line="15" pos:column="35"/></operator> <literal type="string" pos:line="15" pos:column="30">"Using DiskIO module: "<pos:position pos:line="15" pos:column="53"/></literal> <operator pos:line="15" pos:column="54">&lt;&lt;<pos:position pos:line="15" pos:column="62"/></operator> <name pos:line="15" pos:column="57">ioModule<pos:position pos:line="15" pos:column="65"/></name></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name pos:line="16" pos:column="9">io<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name><name pos:line="16" pos:column="14">m<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">createStrategy<pos:position pos:line="16" pos:column="31"/></name></name><argument_list pos:line="16" pos:column="31">()<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">io<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">init<pos:position pos:line="17" pos:column="17"/></name></name><argument_list pos:line="17" pos:column="17">()<pos:position pos:line="17" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then> <else pos:line="18" pos:column="7">else <block pos:line="18" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">47<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">DBG_CRITICAL<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"FATAL: Rock store is missing DiskIO module: "<pos:position pos:line="19" pos:column="80"/></literal> <operator pos:line="19" pos:column="81">&lt;&lt;<pos:position pos:line="19" pos:column="89"/></operator>
               <name pos:line="20" pos:column="16">ioModule<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">fatal<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><literal type="string" pos:line="21" pos:column="15">"Rock Store missing a required DiskIO module"<pos:position pos:line="21" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="24" pos:column="5">theFile<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <call><name><name pos:line="24" pos:column="15">io<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">-&gt;<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="19">newFile<pos:position pos:line="24" pos:column="26"/></name></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">filePath<pos:position pos:line="24" pos:column="35"/></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="25" pos:column="5">theFile<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">configure<pos:position pos:line="25" pos:column="23"/></name></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">fileConfig<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="26" pos:column="5">theFile<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">open<pos:position pos:line="26" pos:column="18"/></name></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">O_RDWR<pos:position pos:line="26" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="27">0644<pos:position pos:line="26" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="33">this<pos:position pos:line="26" pos:column="37"/></name></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>

    <comment type="line" pos:line="28" pos:column="5">// Increment early. Otherwise, if one SwapDir finishes rebuild before</comment>
    <comment type="line" pos:line="29" pos:column="5">// others start, storeRebuildComplete() will think the rebuild is over!</comment>
    <comment type="line" pos:line="30" pos:column="5">// TODO: move store_dirs_rebuilding hack to store modules that need it.</comment>
    <expr_stmt><expr><operator pos:line="31" pos:column="5">++<pos:position pos:line="31" pos:column="7"/></operator><name><name pos:line="31" pos:column="7">StoreController<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">::<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">store_dirs_rebuilding<pos:position pos:line="31" pos:column="45"/></name></name></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
