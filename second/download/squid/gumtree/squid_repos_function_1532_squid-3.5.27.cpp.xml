<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1532_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name> <name pos:line="1" pos:column="21">__stdcall<pos:position pos:line="1" pos:column="30"/></name></type>
<name pos:line="2" pos:column="1">ipc_thread_2<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">void<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">in_params<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">x<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">thread_params<pos:position pos:line="6" pos:column="25"/></name></name> <modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier></type><name pos:line="6" pos:column="27">params<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><operator pos:line="6" pos:column="36">(<pos:position pos:line="6" pos:column="37"/></operator>struct <name pos:line="6" pos:column="44">thread_params<pos:position pos:line="6" pos:column="57"/></name> <operator pos:line="6" pos:column="58">*<pos:position pos:line="6" pos:column="59"/></operator><operator pos:line="6" pos:column="59">)<pos:position pos:line="6" pos:column="60"/></operator> <name pos:line="6" pos:column="61">in_params<pos:position pos:line="6" pos:column="70"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="71"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">type<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><name><name pos:line="7" pos:column="16">params<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">-&gt;<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="24">type<pos:position pos:line="7" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">rfd<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name><name pos:line="8" pos:column="15">params<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">-&gt;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="23">rfd<pos:position pos:line="8" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">send_fd<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><name><name pos:line="9" pos:column="19">params<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">send_fd<pos:position pos:line="9" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">prog<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">= <expr><call><name pos:line="10" pos:column="18">xstrdup<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name><name pos:line="10" pos:column="26">params<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">prog<pos:position pos:line="10" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">pid_t<pos:position pos:line="11" pos:column="10"/></name></type> <name pos:line="11" pos:column="11">pid<pos:position pos:line="11" pos:column="14"/></name> <init pos:line="11" pos:column="15">= <expr><name><name pos:line="11" pos:column="17">params<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">-&gt;<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="25">pid<pos:position pos:line="11" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">size_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">bufSz<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><literal type="number" pos:line="12" pos:column="26">8192<pos:position pos:line="12" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">buf2<pos:position pos:line="13" pos:column="15"/></name> <init pos:line="13" pos:column="16">= <expr><operator pos:line="13" pos:column="18">(<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">char<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">*<pos:position pos:line="13" pos:column="25"/></operator><operator pos:line="13" pos:column="25">)<pos:position pos:line="13" pos:column="26"/></operator><call><name pos:line="13" pos:column="26">xcalloc<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><literal type="number" pos:line="13" pos:column="34">1<pos:position pos:line="13" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">bufSz<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="44"/></decl_stmt>

    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init pos:line="15" pos:column="10">;<pos:position pos:line="15" pos:column="11"/></init><condition pos:line="15" pos:column="11">;<pos:position pos:line="15" pos:column="12"/></condition><incr/>)<pos:position pos:line="15" pos:column="13"/></control> <block pos:line="15" pos:column="14">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">type<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">==<pos:position pos:line="16" pos:column="20"/></operator> <name pos:line="16" pos:column="21">IPC_TCP_SOCKET<pos:position pos:line="16" pos:column="35"/></name></expr>)<pos:position pos:line="16" pos:column="36"/></condition><then pos:line="16" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="13">x<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <call><name pos:line="17" pos:column="17">read<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">rfd<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="27">buf2<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="33">bufSz<pos:position pos:line="17" pos:column="38"/></name><operator pos:line="17" pos:column="38">-<pos:position pos:line="17" pos:column="39"/></operator><literal type="number" pos:line="17" pos:column="39">1<pos:position pos:line="17" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt></block></then>
        <else pos:line="18" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="13">x<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <call><name pos:line="19" pos:column="17">recv<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">rfd<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="27">(<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="28">void<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">*<pos:position pos:line="19" pos:column="34"/></operator><operator pos:line="19" pos:column="34">)<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="35">buf2<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="41">bufSz<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">-<pos:position pos:line="19" pos:column="47"/></operator><literal type="number" pos:line="19" pos:column="47">1<pos:position pos:line="19" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="50">0<pos:position pos:line="19" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="53"/></expr_stmt></block></else></if>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">(<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">x<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">&lt;=<pos:position pos:line="21" pos:column="21"/></operator> <literal type="number" pos:line="21" pos:column="19">0<pos:position pos:line="21" pos:column="20"/></literal> <operator pos:line="21" pos:column="21">&amp;&amp;<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="24">type<pos:position pos:line="21" pos:column="28"/></name> <operator pos:line="21" pos:column="29">==<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="32">IPC_TCP_SOCKET<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">)<pos:position pos:line="21" pos:column="47"/></operator> <operator pos:line="21" pos:column="48">||<pos:position pos:line="21" pos:column="50"/></operator>
                <operator pos:line="22" pos:column="17">(<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">x<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">&lt;<pos:position pos:line="22" pos:column="24"/></operator> <literal type="number" pos:line="22" pos:column="22">0<pos:position pos:line="22" pos:column="23"/></literal> <operator pos:line="22" pos:column="24">&amp;&amp;<pos:position pos:line="22" pos:column="34"/></operator> <name pos:line="22" pos:column="27">type<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">==<pos:position pos:line="22" pos:column="34"/></operator> <name pos:line="22" pos:column="35">IPC_UDP_SOCKET<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">)<pos:position pos:line="22" pos:column="50"/></operator></expr>)<pos:position pos:line="22" pos:column="51"/></condition><then pos:line="22" pos:column="51"> <block pos:line="22" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">debugs<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="number" pos:line="23" pos:column="20">54<pos:position pos:line="23" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="24">3<pos:position pos:line="23" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="27">"ipc("<pos:position pos:line="23" pos:column="33"/></literal> <operator pos:line="23" pos:column="34">&lt;&lt;<pos:position pos:line="23" pos:column="42"/></operator> <name pos:line="23" pos:column="37">prog<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">&lt;&lt;<pos:position pos:line="23" pos:column="50"/></operator> <literal type="string" pos:line="23" pos:column="45">","<pos:position pos:line="23" pos:column="48"/></literal> <operator pos:line="23" pos:column="49">&lt;&lt;<pos:position pos:line="23" pos:column="57"/></operator> <name pos:line="23" pos:column="52">pid<pos:position pos:line="23" pos:column="55"/></name> <operator pos:line="23" pos:column="56">&lt;&lt;<pos:position pos:line="23" pos:column="64"/></operator> <literal type="string" pos:line="23" pos:column="59">"): "<pos:position pos:line="23" pos:column="64"/></literal> <operator pos:line="23" pos:column="65">&lt;&lt;<pos:position pos:line="23" pos:column="73"/></operator> <name pos:line="23" pos:column="68">x<pos:position pos:line="23" pos:column="69"/></name> <operator pos:line="23" pos:column="70">&lt;&lt;<pos:position pos:line="23" pos:column="78"/></operator> <literal type="string" pos:line="23" pos:column="73">" bytes read from "<pos:position pos:line="23" pos:column="92"/></literal> <operator pos:line="23" pos:column="93">&lt;&lt;<pos:position pos:line="23" pos:column="101"/></operator> <name pos:line="23" pos:column="96">prog<pos:position pos:line="23" pos:column="100"/></name> <operator pos:line="23" pos:column="101">&lt;&lt;<pos:position pos:line="23" pos:column="109"/></operator> <literal type="string" pos:line="23" pos:column="104">". Exiting..."<pos:position pos:line="23" pos:column="118"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="120"/></expr_stmt>

            <break pos:line="25" pos:column="13">break;<pos:position pos:line="25" pos:column="19"/></break>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="28" pos:column="9">buf2<pos:position pos:line="28" pos:column="13"/></name><index pos:line="28" pos:column="13">[<expr><name pos:line="28" pos:column="14">x<pos:position pos:line="28" pos:column="15"/></name></expr>]<pos:position pos:line="28" pos:column="16"/></index></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <literal type="char" pos:line="28" pos:column="19">'\0'<pos:position pos:line="28" pos:column="23"/></literal></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>

        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">type<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">==<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">IPC_UDP_SOCKET<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">&amp;&amp;<pos:position pos:line="30" pos:column="46"/></operator> <operator pos:line="30" pos:column="39">!<pos:position pos:line="30" pos:column="40"/></operator><call><name pos:line="30" pos:column="40">strcmp<pos:position pos:line="30" pos:column="46"/></name><argument_list pos:line="30" pos:column="46">(<argument><expr><name pos:line="30" pos:column="47">buf2<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">shutdown_string<pos:position pos:line="30" pos:column="68"/></name></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="70"/></condition><then pos:line="30" pos:column="70"> <block pos:line="30" pos:column="71">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">debugs<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><literal type="number" pos:line="31" pos:column="20">54<pos:position pos:line="31" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="24">3<pos:position pos:line="31" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="27">"ipc("<pos:position pos:line="31" pos:column="33"/></literal> <operator pos:line="31" pos:column="34">&lt;&lt;<pos:position pos:line="31" pos:column="42"/></operator> <name pos:line="31" pos:column="37">prog<pos:position pos:line="31" pos:column="41"/></name> <operator pos:line="31" pos:column="42">&lt;&lt;<pos:position pos:line="31" pos:column="50"/></operator> <literal type="string" pos:line="31" pos:column="45">","<pos:position pos:line="31" pos:column="48"/></literal> <operator pos:line="31" pos:column="49">&lt;&lt;<pos:position pos:line="31" pos:column="57"/></operator> <name pos:line="31" pos:column="52">pid<pos:position pos:line="31" pos:column="55"/></name> <operator pos:line="31" pos:column="56">&lt;&lt;<pos:position pos:line="31" pos:column="64"/></operator> <literal type="string" pos:line="31" pos:column="59">"): request for shutdown received. Exiting..."<pos:position pos:line="31" pos:column="105"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="107"/></expr_stmt>
            <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>

        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">x<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">&gt;=<pos:position pos:line="35" pos:column="20"/></operator> <literal type="number" pos:line="35" pos:column="18">2<pos:position pos:line="35" pos:column="19"/></literal></expr>)<pos:position pos:line="35" pos:column="20"/></condition><then pos:line="35" pos:column="20"> <block pos:line="35" pos:column="21">{
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><operator pos:line="36" pos:column="17">(<pos:position pos:line="36" pos:column="18"/></operator><name><name pos:line="36" pos:column="18">buf2<pos:position pos:line="36" pos:column="22"/></name><index pos:line="36" pos:column="22">[<expr><name pos:line="36" pos:column="23">x<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">-<pos:position pos:line="36" pos:column="26"/></operator> <literal type="number" pos:line="36" pos:column="27">1<pos:position pos:line="36" pos:column="28"/></literal></expr>]<pos:position pos:line="36" pos:column="29"/></index></name> <operator pos:line="36" pos:column="30">==<pos:position pos:line="36" pos:column="32"/></operator> <literal type="char" pos:line="36" pos:column="33">'\n'<pos:position pos:line="36" pos:column="37"/></literal><operator pos:line="36" pos:column="37">)<pos:position pos:line="36" pos:column="38"/></operator> <operator pos:line="36" pos:column="39">&amp;&amp;<pos:position pos:line="36" pos:column="49"/></operator> <operator pos:line="36" pos:column="42">(<pos:position pos:line="36" pos:column="43"/></operator><name><name pos:line="36" pos:column="43">buf2<pos:position pos:line="36" pos:column="47"/></name><index pos:line="36" pos:column="47">[<expr><name pos:line="36" pos:column="48">x<pos:position pos:line="36" pos:column="49"/></name> <operator pos:line="36" pos:column="50">-<pos:position pos:line="36" pos:column="51"/></operator> <literal type="number" pos:line="36" pos:column="52">2<pos:position pos:line="36" pos:column="53"/></literal></expr>]<pos:position pos:line="36" pos:column="54"/></index></name> <operator pos:line="36" pos:column="55">==<pos:position pos:line="36" pos:column="57"/></operator> <literal type="char" pos:line="36" pos:column="58">'\r'<pos:position pos:line="36" pos:column="62"/></literal><operator pos:line="36" pos:column="62">)<pos:position pos:line="36" pos:column="63"/></operator></expr>)<pos:position pos:line="36" pos:column="64"/></condition><then pos:line="36" pos:column="64"> <block pos:line="36" pos:column="65">{
                <expr_stmt><expr><name><name pos:line="37" pos:column="17">buf2<pos:position pos:line="37" pos:column="21"/></name><index pos:line="37" pos:column="21">[<expr><name pos:line="37" pos:column="22">x<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">-<pos:position pos:line="37" pos:column="25"/></operator> <literal type="number" pos:line="37" pos:column="26">2<pos:position pos:line="37" pos:column="27"/></literal></expr>]<pos:position pos:line="37" pos:column="28"/></index></name> <operator pos:line="37" pos:column="29">=<pos:position pos:line="37" pos:column="30"/></operator> <literal type="char" pos:line="37" pos:column="31">'\n'<pos:position pos:line="37" pos:column="35"/></literal></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="38" pos:column="17">buf2<pos:position pos:line="38" pos:column="21"/></name><index pos:line="38" pos:column="21">[<expr><name pos:line="38" pos:column="22">x<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">-<pos:position pos:line="38" pos:column="25"/></operator> <literal type="number" pos:line="38" pos:column="26">1<pos:position pos:line="38" pos:column="27"/></literal></expr>]<pos:position pos:line="38" pos:column="28"/></index></name> <operator pos:line="38" pos:column="29">=<pos:position pos:line="38" pos:column="30"/></operator> <literal type="char" pos:line="38" pos:column="31">'\0'<pos:position pos:line="38" pos:column="35"/></literal></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="39" pos:column="17">--<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="19">x<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
            }<pos:position pos:line="40" pos:column="14"/></block></then></if>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="43" pos:column="9">debugs<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><literal type="number" pos:line="43" pos:column="16">54<pos:position pos:line="43" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="20">5<pos:position pos:line="43" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="23">"ipc("<pos:position pos:line="43" pos:column="29"/></literal> <operator pos:line="43" pos:column="30">&lt;&lt;<pos:position pos:line="43" pos:column="38"/></operator> <name pos:line="43" pos:column="33">prog<pos:position pos:line="43" pos:column="37"/></name> <operator pos:line="43" pos:column="38">&lt;&lt;<pos:position pos:line="43" pos:column="46"/></operator> <literal type="string" pos:line="43" pos:column="41">","<pos:position pos:line="43" pos:column="44"/></literal> <operator pos:line="43" pos:column="45">&lt;&lt;<pos:position pos:line="43" pos:column="53"/></operator> <name pos:line="43" pos:column="48">pid<pos:position pos:line="43" pos:column="51"/></name> <operator pos:line="43" pos:column="52">&lt;&lt;<pos:position pos:line="43" pos:column="60"/></operator> <literal type="string" pos:line="43" pos:column="55">"): received from child : "<pos:position pos:line="43" pos:column="82"/></literal> <operator pos:line="43" pos:column="83">&lt;&lt;<pos:position pos:line="43" pos:column="91"/></operator> <call><name pos:line="43" pos:column="86">rfc1738_escape_unescaped<pos:position pos:line="43" pos:column="110"/></name><argument_list pos:line="43" pos:column="110">(<argument><expr><name pos:line="43" pos:column="111">buf2<pos:position pos:line="43" pos:column="115"/></name></expr></argument>)<pos:position pos:line="43" pos:column="116"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="118"/></expr_stmt>

        <expr_stmt><expr><name pos:line="45" pos:column="9">x<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <call><name pos:line="45" pos:column="13">send<pos:position pos:line="45" pos:column="17"/></name><argument_list pos:line="45" pos:column="17">(<argument><expr><name pos:line="45" pos:column="18">send_fd<pos:position pos:line="45" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="27">(<pos:position pos:line="45" pos:column="28"/></operator><specifier pos:line="45" pos:column="28">const<pos:position pos:line="45" pos:column="33"/></specifier> <name pos:line="45" pos:column="34">void<pos:position pos:line="45" pos:column="38"/></name> <operator pos:line="45" pos:column="39">*<pos:position pos:line="45" pos:column="40"/></operator><operator pos:line="45" pos:column="40">)<pos:position pos:line="45" pos:column="41"/></operator><name pos:line="45" pos:column="41">buf2<pos:position pos:line="45" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="47">x<pos:position pos:line="45" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="50">0<pos:position pos:line="45" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>

        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">(<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">x<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">&lt;=<pos:position pos:line="47" pos:column="21"/></operator> <literal type="number" pos:line="47" pos:column="19">0<pos:position pos:line="47" pos:column="20"/></literal> <operator pos:line="47" pos:column="21">&amp;&amp;<pos:position pos:line="47" pos:column="31"/></operator> <name pos:line="47" pos:column="24">type<pos:position pos:line="47" pos:column="28"/></name> <operator pos:line="47" pos:column="29">==<pos:position pos:line="47" pos:column="31"/></operator> <name pos:line="47" pos:column="32">IPC_TCP_SOCKET<pos:position pos:line="47" pos:column="46"/></name><operator pos:line="47" pos:column="46">)<pos:position pos:line="47" pos:column="47"/></operator> <operator pos:line="47" pos:column="48">||<pos:position pos:line="47" pos:column="50"/></operator>
                <operator pos:line="48" pos:column="17">(<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="18">x<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">&lt;<pos:position pos:line="48" pos:column="24"/></operator> <literal type="number" pos:line="48" pos:column="22">0<pos:position pos:line="48" pos:column="23"/></literal> <operator pos:line="48" pos:column="24">&amp;&amp;<pos:position pos:line="48" pos:column="34"/></operator> <name pos:line="48" pos:column="27">type<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">==<pos:position pos:line="48" pos:column="34"/></operator> <name pos:line="48" pos:column="35">IPC_UDP_SOCKET<pos:position pos:line="48" pos:column="49"/></name><operator pos:line="48" pos:column="49">)<pos:position pos:line="48" pos:column="50"/></operator></expr>)<pos:position pos:line="48" pos:column="51"/></condition><then pos:line="48" pos:column="51"> <block pos:line="48" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">debugs<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><literal type="number" pos:line="49" pos:column="20">54<pos:position pos:line="49" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="24">3<pos:position pos:line="49" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="27">"ipc("<pos:position pos:line="49" pos:column="33"/></literal> <operator pos:line="49" pos:column="34">&lt;&lt;<pos:position pos:line="49" pos:column="42"/></operator> <name pos:line="49" pos:column="37">prog<pos:position pos:line="49" pos:column="41"/></name> <operator pos:line="49" pos:column="42">&lt;&lt;<pos:position pos:line="49" pos:column="50"/></operator> <literal type="string" pos:line="49" pos:column="45">","<pos:position pos:line="49" pos:column="48"/></literal> <operator pos:line="49" pos:column="49">&lt;&lt;<pos:position pos:line="49" pos:column="57"/></operator> <name pos:line="49" pos:column="52">pid<pos:position pos:line="49" pos:column="55"/></name> <operator pos:line="49" pos:column="56">&lt;&lt;<pos:position pos:line="49" pos:column="64"/></operator> <literal type="string" pos:line="49" pos:column="59">"): "<pos:position pos:line="49" pos:column="64"/></literal> <operator pos:line="49" pos:column="65">&lt;&lt;<pos:position pos:line="49" pos:column="73"/></operator> <name pos:line="49" pos:column="68">x<pos:position pos:line="49" pos:column="69"/></name> <operator pos:line="49" pos:column="70">&lt;&lt;<pos:position pos:line="49" pos:column="78"/></operator> <literal type="string" pos:line="49" pos:column="73">" bytes sent to parent. Exiting..."<pos:position pos:line="49" pos:column="108"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="110"/></expr_stmt>

            <break pos:line="51" pos:column="13">break;<pos:position pos:line="51" pos:column="19"/></break>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if>
    }<pos:position pos:line="53" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">xfree<pos:position pos:line="55" pos:column="10"/></name><argument_list pos:line="55" pos:column="10">(<argument><expr><name pos:line="55" pos:column="11">prog<pos:position pos:line="55" pos:column="15"/></name></expr></argument>)<pos:position pos:line="55" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">xfree<pos:position pos:line="56" pos:column="10"/></name><argument_list pos:line="56" pos:column="10">(<argument><expr><name pos:line="56" pos:column="11">buf2<pos:position pos:line="56" pos:column="15"/></name></expr></argument>)<pos:position pos:line="56" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="17"/></expr_stmt>
    <return pos:line="57" pos:column="5">return <expr><literal type="number" pos:line="57" pos:column="12">0<pos:position pos:line="57" pos:column="13"/></literal></expr>;<pos:position pos:line="57" pos:column="14"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
