<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3286_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemStore<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">copyFromShm<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">StoreEntry<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">&amp;<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="35">e<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">sfileno<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">index<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="59">const<pos:position pos:line="2" pos:column="64"/></specifier> <name><name pos:line="2" pos:column="65">Ipc<pos:position pos:line="2" pos:column="68"/></name><operator pos:line="2" pos:column="68">::<pos:position pos:line="2" pos:column="70"/></operator><name pos:line="2" pos:column="70">StoreMapAnchor<pos:position pos:line="2" pos:column="84"/></name></name> <modifier pos:line="2" pos:column="85">&amp;<pos:position pos:line="2" pos:column="90"/></modifier></type><name pos:line="2" pos:column="86">anchor<pos:position pos:line="2" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="93"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">20<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">7<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"mem-loading entry "<pos:position pos:line="4" pos:column="39"/></literal> <operator pos:line="4" pos:column="40">&lt;&lt;<pos:position pos:line="4" pos:column="48"/></operator> <name pos:line="4" pos:column="43">index<pos:position pos:line="4" pos:column="48"/></name> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator> <literal type="string" pos:line="4" pos:column="52">" from "<pos:position pos:line="4" pos:column="60"/></literal> <operator pos:line="4" pos:column="61">&lt;&lt;<pos:position pos:line="4" pos:column="69"/></operator> <name><name pos:line="4" pos:column="64">anchor<pos:position pos:line="4" pos:column="70"/></name><operator pos:line="4" pos:column="70">.<pos:position pos:line="4" pos:column="71"/></operator><name pos:line="4" pos:column="71">start<pos:position pos:line="4" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name><name pos:line="5" pos:column="12">e<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">.<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">mem_obj<pos:position pos:line="5" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="23"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// emulate the usual Store code but w/o inapplicable checks and callbacks:</comment>

    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">Ipc<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">::<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">StoreMapSliceId<pos:position pos:line="9" pos:column="25"/></name></name></type> <name pos:line="9" pos:column="26">sid<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><name><name pos:line="9" pos:column="32">anchor<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">.<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="39">start<pos:position pos:line="9" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="45"/></decl_stmt> <comment type="line" pos:line="9" pos:column="46">// optimize: remember the last sid</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">bool<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">wasEof<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><call><name><name pos:line="10" pos:column="19">anchor<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">.<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">complete<pos:position pos:line="10" pos:column="34"/></name></name><argument_list pos:line="10" pos:column="34">()<pos:position pos:line="10" pos:column="36"/></argument_list></call> <operator pos:line="10" pos:column="37">&amp;&amp;<pos:position pos:line="10" pos:column="47"/></operator> <name pos:line="10" pos:column="40">sid<pos:position pos:line="10" pos:column="43"/></name> <operator pos:line="10" pos:column="44">&lt;<pos:position pos:line="10" pos:column="48"/></operator> <literal type="number" pos:line="10" pos:column="46">0<pos:position pos:line="10" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int64_t<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">sliceOffset<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><name pos:line="12" pos:column="12">sid<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">&gt;=<pos:position pos:line="12" pos:column="21"/></operator> <literal type="number" pos:line="12" pos:column="19">0<pos:position pos:line="12" pos:column="20"/></literal></expr>)<pos:position pos:line="12" pos:column="21"/></condition> <block pos:line="12" pos:column="22">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name><name pos:line="13" pos:column="15">Ipc<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">::<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">StoreMapSlice<pos:position pos:line="13" pos:column="33"/></name></name> <modifier pos:line="13" pos:column="34">&amp;<pos:position pos:line="13" pos:column="39"/></modifier></type><name pos:line="13" pos:column="35">slice<pos:position pos:line="13" pos:column="40"/></name> <init pos:line="13" pos:column="41">= <expr><call><name><name pos:line="13" pos:column="43">map<pos:position pos:line="13" pos:column="46"/></name><operator pos:line="13" pos:column="46">-&gt;<pos:position pos:line="13" pos:column="51"/></operator><name pos:line="13" pos:column="48">readableSlice<pos:position pos:line="13" pos:column="61"/></name></name><argument_list pos:line="13" pos:column="61">(<argument><expr><name pos:line="13" pos:column="62">index<pos:position pos:line="13" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="69">sid<pos:position pos:line="13" pos:column="72"/></name></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="74"/></decl_stmt>
        <comment type="line" pos:line="14" pos:column="9">// slice state may change during copying; take snapshots now</comment>
        <expr_stmt><expr><name pos:line="15" pos:column="9">wasEof<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name><name pos:line="15" pos:column="18">anchor<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">.<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">complete<pos:position pos:line="15" pos:column="33"/></name></name><argument_list pos:line="15" pos:column="33">()<pos:position pos:line="15" pos:column="35"/></argument_list></call> <operator pos:line="15" pos:column="36">&amp;&amp;<pos:position pos:line="15" pos:column="46"/></operator> <name><name pos:line="15" pos:column="39">slice<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">.<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="45">next<pos:position pos:line="15" pos:column="49"/></name></name> <operator pos:line="15" pos:column="50">&lt;<pos:position pos:line="15" pos:column="54"/></operator> <literal type="number" pos:line="15" pos:column="52">0<pos:position pos:line="15" pos:column="53"/></literal></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <name><name pos:line="16" pos:column="15">Ipc<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">::<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">StoreMapSlice<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">::<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="35">Size<pos:position pos:line="16" pos:column="39"/></name></name></type> <name pos:line="16" pos:column="40">wasSize<pos:position pos:line="16" pos:column="47"/></name> <init pos:line="16" pos:column="48">= <expr><name><name pos:line="16" pos:column="50">slice<pos:position pos:line="16" pos:column="55"/></name><operator pos:line="16" pos:column="55">.<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="56">size<pos:position pos:line="16" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="16" pos:column="61"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">20<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="20">9<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="23">"entry "<pos:position pos:line="18" pos:column="31"/></literal> <operator pos:line="18" pos:column="32">&lt;&lt;<pos:position pos:line="18" pos:column="40"/></operator> <name pos:line="18" pos:column="35">index<pos:position pos:line="18" pos:column="40"/></name> <operator pos:line="18" pos:column="41">&lt;&lt;<pos:position pos:line="18" pos:column="49"/></operator> <literal type="string" pos:line="18" pos:column="44">" slice "<pos:position pos:line="18" pos:column="53"/></literal> <operator pos:line="18" pos:column="54">&lt;&lt;<pos:position pos:line="18" pos:column="62"/></operator> <name pos:line="18" pos:column="57">sid<pos:position pos:line="18" pos:column="60"/></name> <operator pos:line="18" pos:column="61">&lt;&lt;<pos:position pos:line="18" pos:column="69"/></operator> <literal type="string" pos:line="18" pos:column="64">" eof "<pos:position pos:line="18" pos:column="71"/></literal> <operator pos:line="18" pos:column="72">&lt;&lt;<pos:position pos:line="18" pos:column="80"/></operator>
               <name pos:line="19" pos:column="16">wasEof<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">&lt;&lt;<pos:position pos:line="19" pos:column="31"/></operator> <literal type="string" pos:line="19" pos:column="26">" wasSize "<pos:position pos:line="19" pos:column="37"/></literal> <operator pos:line="19" pos:column="38">&lt;&lt;<pos:position pos:line="19" pos:column="46"/></operator> <name pos:line="19" pos:column="41">wasSize<pos:position pos:line="19" pos:column="48"/></name> <operator pos:line="19" pos:column="49">&lt;&lt;<pos:position pos:line="19" pos:column="57"/></operator> <literal type="string" pos:line="19" pos:column="52">" &lt;= "<pos:position pos:line="19" pos:column="61"/></literal> <operator pos:line="19" pos:column="59">&lt;&lt;<pos:position pos:line="19" pos:column="67"/></operator>
               <name><name pos:line="20" pos:column="16">anchor<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">.<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="23">basics<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">.<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">swap_file_sz<pos:position pos:line="20" pos:column="42"/></name></name> <operator pos:line="20" pos:column="43">&lt;&lt;<pos:position pos:line="20" pos:column="51"/></operator> <literal type="string" pos:line="20" pos:column="46">" sliceOffset "<pos:position pos:line="20" pos:column="61"/></literal> <operator pos:line="20" pos:column="62">&lt;&lt;<pos:position pos:line="20" pos:column="70"/></operator> <name pos:line="20" pos:column="65">sliceOffset<pos:position pos:line="20" pos:column="76"/></name> <operator pos:line="20" pos:column="77">&lt;&lt;<pos:position pos:line="20" pos:column="85"/></operator>
               <literal type="string" pos:line="21" pos:column="16">" mem.endOffset "<pos:position pos:line="21" pos:column="33"/></literal> <operator pos:line="21" pos:column="34">&lt;&lt;<pos:position pos:line="21" pos:column="42"/></operator> <call><name><name pos:line="21" pos:column="37">e<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">.<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">mem_obj<pos:position pos:line="21" pos:column="46"/></name><operator pos:line="21" pos:column="46">-&gt;<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="48">endOffset<pos:position pos:line="21" pos:column="57"/></name></name><argument_list pos:line="21" pos:column="57">()<pos:position pos:line="21" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="61"/></expr_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name><name pos:line="23" pos:column="13">e<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">.<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">mem_obj<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">endOffset<pos:position pos:line="23" pos:column="33"/></name></name><argument_list pos:line="23" pos:column="33">()<pos:position pos:line="23" pos:column="35"/></argument_list></call> <operator pos:line="23" pos:column="36">&lt;<pos:position pos:line="23" pos:column="40"/></operator> <name pos:line="23" pos:column="38">sliceOffset<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">+<pos:position pos:line="23" pos:column="51"/></operator> <name pos:line="23" pos:column="52">wasSize<pos:position pos:line="23" pos:column="59"/></name></expr>)<pos:position pos:line="23" pos:column="60"/></condition><then pos:line="23" pos:column="60"> <block pos:line="23" pos:column="61">{
            <comment type="line" pos:line="24" pos:column="13">// size of the slice data that we already copied</comment>
            <decl_stmt><decl><type><specifier pos:line="25" pos:column="13">const<pos:position pos:line="25" pos:column="18"/></specifier> <name pos:line="25" pos:column="19">size_t<pos:position pos:line="25" pos:column="25"/></name></type> <name pos:line="25" pos:column="26">prefixSize<pos:position pos:line="25" pos:column="36"/></name> <init pos:line="25" pos:column="37">= <expr><call><name><name pos:line="25" pos:column="39">e<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">.<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="41">mem_obj<pos:position pos:line="25" pos:column="48"/></name><operator pos:line="25" pos:column="48">-&gt;<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="50">endOffset<pos:position pos:line="25" pos:column="59"/></name></name><argument_list pos:line="25" pos:column="59">()<pos:position pos:line="25" pos:column="61"/></argument_list></call> <operator pos:line="25" pos:column="62">-<pos:position pos:line="25" pos:column="63"/></operator> <name pos:line="25" pos:column="64">sliceOffset<pos:position pos:line="25" pos:column="75"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="76"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">assert<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">prefixSize<pos:position pos:line="26" pos:column="30"/></name> <operator pos:line="26" pos:column="31">&lt;=<pos:position pos:line="26" pos:column="36"/></operator> <name pos:line="26" pos:column="34">wasSize<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt>

            <decl_stmt><decl><type><specifier pos:line="28" pos:column="13">const<pos:position pos:line="28" pos:column="18"/></specifier> <name><name pos:line="28" pos:column="19">MemStoreMapExtras<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">::<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="38">Item<pos:position pos:line="28" pos:column="42"/></name></name> <modifier pos:line="28" pos:column="43">&amp;<pos:position pos:line="28" pos:column="48"/></modifier></type><name pos:line="28" pos:column="44">extra<pos:position pos:line="28" pos:column="49"/></name> <init pos:line="28" pos:column="50">= <expr><name><name pos:line="28" pos:column="52">extras<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">-&gt;<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="60">items<pos:position pos:line="28" pos:column="65"/></name><index pos:line="28" pos:column="65">[<expr><name pos:line="28" pos:column="66">sid<pos:position pos:line="28" pos:column="69"/></name></expr>]<pos:position pos:line="28" pos:column="70"/></index></name></expr></init></decl>;<pos:position pos:line="28" pos:column="71"/></decl_stmt>

            <decl_stmt><decl><type><name pos:line="30" pos:column="13">char<pos:position pos:line="30" pos:column="17"/></name> <modifier pos:line="30" pos:column="18">*<pos:position pos:line="30" pos:column="19"/></modifier></type><name pos:line="30" pos:column="19">page<pos:position pos:line="30" pos:column="23"/></name> <init pos:line="30" pos:column="24">= <expr><cast type="static" pos:line="30" pos:column="26">static_cast<argument_list type="generic" pos:line="30" pos:column="37">&lt;<argument><expr><name pos:line="30" pos:column="38">char<pos:position pos:line="30" pos:column="42"/></name><operator pos:line="30" pos:column="42">*<pos:position pos:line="30" pos:column="43"/></operator></expr></argument>&gt;<pos:position pos:line="30" pos:column="47"/></argument_list><argument_list pos:line="30" pos:column="44">(<argument><expr><call><name pos:line="30" pos:column="45">PagePointer<pos:position pos:line="30" pos:column="56"/></name><argument_list pos:line="30" pos:column="56">(<argument><expr><name><name pos:line="30" pos:column="57">extra<pos:position pos:line="30" pos:column="62"/></name><operator pos:line="30" pos:column="62">.<pos:position pos:line="30" pos:column="63"/></operator><name pos:line="30" pos:column="63">page<pos:position pos:line="30" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="69"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="30" pos:column="70"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="31" pos:column="13">const<pos:position pos:line="31" pos:column="18"/></specifier> <name pos:line="31" pos:column="19">StoreIOBuffer<pos:position pos:line="31" pos:column="32"/></name></type> <name pos:line="31" pos:column="33">sliceBuf<pos:position pos:line="31" pos:column="41"/></name><argument_list pos:line="31" pos:column="41">(<argument><expr><name pos:line="31" pos:column="42">wasSize<pos:position pos:line="31" pos:column="49"/></name> <operator pos:line="31" pos:column="50">-<pos:position pos:line="31" pos:column="51"/></operator> <name pos:line="31" pos:column="52">prefixSize<pos:position pos:line="31" pos:column="62"/></name></expr></argument>,
                                         <argument><expr><call><name><name pos:line="32" pos:column="42">e<pos:position pos:line="32" pos:column="43"/></name><operator pos:line="32" pos:column="43">.<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="44">mem_obj<pos:position pos:line="32" pos:column="51"/></name><operator pos:line="32" pos:column="51">-&gt;<pos:position pos:line="32" pos:column="56"/></operator><name pos:line="32" pos:column="53">endOffset<pos:position pos:line="32" pos:column="62"/></name></name><argument_list pos:line="32" pos:column="62">()<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr></argument>,
                                         <argument><expr><name pos:line="33" pos:column="42">page<pos:position pos:line="33" pos:column="46"/></name> <operator pos:line="33" pos:column="47">+<pos:position pos:line="33" pos:column="48"/></operator> <name pos:line="33" pos:column="49">prefixSize<pos:position pos:line="33" pos:column="59"/></name></expr></argument>)<pos:position pos:line="33" pos:column="60"/></argument_list></decl>;<pos:position pos:line="33" pos:column="61"/></decl_stmt>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><operator pos:line="34" pos:column="17">!<pos:position pos:line="34" pos:column="18"/></operator><call><name pos:line="34" pos:column="18">copyFromShmSlice<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">e<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="38">sliceBuf<pos:position pos:line="34" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="48">wasEof<pos:position pos:line="34" pos:column="54"/></name></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="56"/></condition><then pos:line="34" pos:column="56">
                <block type="pseudo"><return pos:line="35" pos:column="17">return <expr><literal type="boolean" pos:line="35" pos:column="24">false<pos:position pos:line="35" pos:column="29"/></literal></expr>;<pos:position pos:line="35" pos:column="30"/></return></block></then></if>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">debugs<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><literal type="number" pos:line="36" pos:column="20">20<pos:position pos:line="36" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="24">9<pos:position pos:line="36" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="27">"entry "<pos:position pos:line="36" pos:column="35"/></literal> <operator pos:line="36" pos:column="36">&lt;&lt;<pos:position pos:line="36" pos:column="44"/></operator> <name pos:line="36" pos:column="39">index<pos:position pos:line="36" pos:column="44"/></name> <operator pos:line="36" pos:column="45">&lt;&lt;<pos:position pos:line="36" pos:column="53"/></operator> <literal type="string" pos:line="36" pos:column="48">" copied slice "<pos:position pos:line="36" pos:column="64"/></literal> <operator pos:line="36" pos:column="65">&lt;&lt;<pos:position pos:line="36" pos:column="73"/></operator> <name pos:line="36" pos:column="68">sid<pos:position pos:line="36" pos:column="71"/></name> <operator pos:line="36" pos:column="72">&lt;&lt;<pos:position pos:line="36" pos:column="80"/></operator>
                   <literal type="string" pos:line="37" pos:column="20">" from "<pos:position pos:line="37" pos:column="28"/></literal> <operator pos:line="37" pos:column="29">&lt;&lt;<pos:position pos:line="37" pos:column="37"/></operator> <name><name pos:line="37" pos:column="32">extra<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">.<pos:position pos:line="37" pos:column="38"/></operator><name pos:line="37" pos:column="38">page<pos:position pos:line="37" pos:column="42"/></name></name> <operator pos:line="37" pos:column="43">&lt;&lt;<pos:position pos:line="37" pos:column="51"/></operator> <literal type="char" pos:line="37" pos:column="46">'+'<pos:position pos:line="37" pos:column="49"/></literal> <operator pos:line="37" pos:column="50">&lt;&lt;<pos:position pos:line="37" pos:column="58"/></operator> <name pos:line="37" pos:column="53">prefixSize<pos:position pos:line="37" pos:column="63"/></name></expr></argument>)<pos:position pos:line="37" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="65"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="39" pos:column="9">// else skip a [possibly incomplete] slice that we copied earlier</comment>

        <comment type="line" pos:line="41" pos:column="9">// careful: the slice may have grown _and_ gotten the next slice ID!</comment>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">slice<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">.<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="19">next<pos:position pos:line="42" pos:column="23"/></name></name> <operator pos:line="42" pos:column="24">&gt;=<pos:position pos:line="42" pos:column="29"/></operator> <literal type="number" pos:line="42" pos:column="27">0<pos:position pos:line="42" pos:column="28"/></literal></expr>)<pos:position pos:line="42" pos:column="29"/></condition><then pos:line="42" pos:column="29"> <block pos:line="42" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">assert<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><operator pos:line="43" pos:column="20">!<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="21">wasEof<pos:position pos:line="43" pos:column="27"/></name></expr></argument>)<pos:position pos:line="43" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
            <comment type="line" pos:line="44" pos:column="13">// here we know that slice.size may not change any more</comment>
            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><name pos:line="45" pos:column="17">wasSize<pos:position pos:line="45" pos:column="24"/></name> <operator pos:line="45" pos:column="25">&gt;=<pos:position pos:line="45" pos:column="30"/></operator> <name><name pos:line="45" pos:column="28">slice<pos:position pos:line="45" pos:column="33"/></name><operator pos:line="45" pos:column="33">.<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="34">size<pos:position pos:line="45" pos:column="38"/></name></name></expr>)<pos:position pos:line="45" pos:column="39"/></condition><then pos:line="45" pos:column="39"> <block pos:line="45" pos:column="40">{ <comment type="line" pos:line="45" pos:column="42">// did not grow since we started copying</comment>
                <expr_stmt><expr><name pos:line="46" pos:column="17">sliceOffset<pos:position pos:line="46" pos:column="28"/></name> <operator pos:line="46" pos:column="29">+=<pos:position pos:line="46" pos:column="31"/></operator> <name pos:line="46" pos:column="32">wasSize<pos:position pos:line="46" pos:column="39"/></name></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
                <expr_stmt><expr><name pos:line="47" pos:column="17">sid<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator> <name><name pos:line="47" pos:column="23">slice<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">.<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="29">next<pos:position pos:line="47" pos:column="33"/></name></name></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="48" pos:column="14"/></block></then></if>
        }<pos:position pos:line="49" pos:column="10"/></block></then> <elseif pos:line="49" pos:column="11">else <if pos:line="49" pos:column="16">if <condition pos:line="49" pos:column="19">(<expr><name pos:line="49" pos:column="20">wasSize<pos:position pos:line="49" pos:column="27"/></name> <operator pos:line="49" pos:column="28">&gt;=<pos:position pos:line="49" pos:column="33"/></operator> <name><name pos:line="49" pos:column="31">slice<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">.<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="37">size<pos:position pos:line="49" pos:column="41"/></name></name></expr>)<pos:position pos:line="49" pos:column="42"/></condition><then pos:line="49" pos:column="42"> <block pos:line="49" pos:column="43">{ <comment type="line" pos:line="49" pos:column="45">// did not grow</comment>
            <break pos:line="50" pos:column="13">break;<pos:position pos:line="50" pos:column="19"/></break>
        }<pos:position pos:line="51" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="52" pos:column="6"/></block></while>

    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><operator pos:line="54" pos:column="9">!<pos:position pos:line="54" pos:column="10"/></operator><name pos:line="54" pos:column="10">wasEof<pos:position pos:line="54" pos:column="16"/></name></expr>)<pos:position pos:line="54" pos:column="17"/></condition><then pos:line="54" pos:column="17"> <block pos:line="54" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">debugs<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><literal type="number" pos:line="55" pos:column="16">20<pos:position pos:line="55" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="20">7<pos:position pos:line="55" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="23">"mem-loaded "<pos:position pos:line="55" pos:column="36"/></literal> <operator pos:line="55" pos:column="37">&lt;&lt;<pos:position pos:line="55" pos:column="45"/></operator> <call><name><name pos:line="55" pos:column="40">e<pos:position pos:line="55" pos:column="41"/></name><operator pos:line="55" pos:column="41">.<pos:position pos:line="55" pos:column="42"/></operator><name pos:line="55" pos:column="42">mem_obj<pos:position pos:line="55" pos:column="49"/></name><operator pos:line="55" pos:column="49">-&gt;<pos:position pos:line="55" pos:column="54"/></operator><name pos:line="55" pos:column="51">endOffset<pos:position pos:line="55" pos:column="60"/></name></name><argument_list pos:line="55" pos:column="60">()<pos:position pos:line="55" pos:column="62"/></argument_list></call> <operator pos:line="55" pos:column="63">&lt;&lt;<pos:position pos:line="55" pos:column="71"/></operator> <literal type="char" pos:line="55" pos:column="66">'/'<pos:position pos:line="55" pos:column="69"/></literal> <operator pos:line="55" pos:column="70">&lt;&lt;<pos:position pos:line="55" pos:column="78"/></operator>
               <name><name pos:line="56" pos:column="16">anchor<pos:position pos:line="56" pos:column="22"/></name><operator pos:line="56" pos:column="22">.<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="23">basics<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">.<pos:position pos:line="56" pos:column="30"/></operator><name pos:line="56" pos:column="30">swap_file_sz<pos:position pos:line="56" pos:column="42"/></name></name> <operator pos:line="56" pos:column="43">&lt;&lt;<pos:position pos:line="56" pos:column="51"/></operator> <literal type="string" pos:line="56" pos:column="46">" bytes of "<pos:position pos:line="56" pos:column="58"/></literal> <operator pos:line="56" pos:column="59">&lt;&lt;<pos:position pos:line="56" pos:column="67"/></operator> <name pos:line="56" pos:column="62">e<pos:position pos:line="56" pos:column="63"/></name></expr></argument>)<pos:position pos:line="56" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="65"/></expr_stmt>
        <return pos:line="57" pos:column="9">return <expr><literal type="boolean" pos:line="57" pos:column="16">true<pos:position pos:line="57" pos:column="20"/></literal></expr>;<pos:position pos:line="57" pos:column="21"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">debugs<pos:position pos:line="60" pos:column="11"/></name><argument_list pos:line="60" pos:column="11">(<argument><expr><literal type="number" pos:line="60" pos:column="12">20<pos:position pos:line="60" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="16">7<pos:position pos:line="60" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="19">"mem-loaded all "<pos:position pos:line="60" pos:column="36"/></literal> <operator pos:line="60" pos:column="37">&lt;&lt;<pos:position pos:line="60" pos:column="45"/></operator> <name><name pos:line="60" pos:column="40">e<pos:position pos:line="60" pos:column="41"/></name><operator pos:line="60" pos:column="41">.<pos:position pos:line="60" pos:column="42"/></operator><name pos:line="60" pos:column="42">mem_obj<pos:position pos:line="60" pos:column="49"/></name><operator pos:line="60" pos:column="49">-&gt;<pos:position pos:line="60" pos:column="54"/></operator><name pos:line="60" pos:column="51">object_sz<pos:position pos:line="60" pos:column="60"/></name></name> <operator pos:line="60" pos:column="61">&lt;&lt;<pos:position pos:line="60" pos:column="69"/></operator> <literal type="char" pos:line="60" pos:column="64">'/'<pos:position pos:line="60" pos:column="67"/></literal> <operator pos:line="60" pos:column="68">&lt;&lt;<pos:position pos:line="60" pos:column="76"/></operator>
           <name><name pos:line="61" pos:column="12">anchor<pos:position pos:line="61" pos:column="18"/></name><operator pos:line="61" pos:column="18">.<pos:position pos:line="61" pos:column="19"/></operator><name pos:line="61" pos:column="19">basics<pos:position pos:line="61" pos:column="25"/></name><operator pos:line="61" pos:column="25">.<pos:position pos:line="61" pos:column="26"/></operator><name pos:line="61" pos:column="26">swap_file_sz<pos:position pos:line="61" pos:column="38"/></name></name> <operator pos:line="61" pos:column="39">&lt;&lt;<pos:position pos:line="61" pos:column="47"/></operator> <literal type="string" pos:line="61" pos:column="42">" bytes of "<pos:position pos:line="61" pos:column="54"/></literal> <operator pos:line="61" pos:column="55">&lt;&lt;<pos:position pos:line="61" pos:column="63"/></operator> <name pos:line="61" pos:column="58">e<pos:position pos:line="61" pos:column="59"/></name></expr></argument>)<pos:position pos:line="61" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="61"/></expr_stmt>

    <comment type="line" pos:line="63" pos:column="5">// from StoreEntry::complete()</comment>
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">e<pos:position pos:line="64" pos:column="6"/></name><operator pos:line="64" pos:column="6">.<pos:position pos:line="64" pos:column="7"/></operator><name pos:line="64" pos:column="7">mem_obj<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">-&gt;<pos:position pos:line="64" pos:column="19"/></operator><name pos:line="64" pos:column="16">object_sz<pos:position pos:line="64" pos:column="25"/></name></name> <operator pos:line="64" pos:column="26">=<pos:position pos:line="64" pos:column="27"/></operator> <call><name><name pos:line="64" pos:column="28">e<pos:position pos:line="64" pos:column="29"/></name><operator pos:line="64" pos:column="29">.<pos:position pos:line="64" pos:column="30"/></operator><name pos:line="64" pos:column="30">mem_obj<pos:position pos:line="64" pos:column="37"/></name><operator pos:line="64" pos:column="37">-&gt;<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="39">endOffset<pos:position pos:line="64" pos:column="48"/></name></name><argument_list pos:line="64" pos:column="48">()<pos:position pos:line="64" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="65" pos:column="5">e<pos:position pos:line="65" pos:column="6"/></name><operator pos:line="65" pos:column="6">.<pos:position pos:line="65" pos:column="7"/></operator><name pos:line="65" pos:column="7">store_status<pos:position pos:line="65" pos:column="19"/></name></name> <operator pos:line="65" pos:column="20">=<pos:position pos:line="65" pos:column="21"/></operator> <name pos:line="65" pos:column="22">STORE_OK<pos:position pos:line="65" pos:column="30"/></name></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="66" pos:column="5">e<pos:position pos:line="66" pos:column="6"/></name><operator pos:line="66" pos:column="6">.<pos:position pos:line="66" pos:column="7"/></operator><name pos:line="66" pos:column="7">setMemStatus<pos:position pos:line="66" pos:column="19"/></name></name><argument_list pos:line="66" pos:column="19">(<argument><expr><name pos:line="66" pos:column="20">IN_MEMORY<pos:position pos:line="66" pos:column="29"/></name></expr></argument>)<pos:position pos:line="66" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">assert<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><name><name pos:line="68" pos:column="12">e<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">.<pos:position pos:line="68" pos:column="14"/></operator><name pos:line="68" pos:column="14">mem_obj<pos:position pos:line="68" pos:column="21"/></name><operator pos:line="68" pos:column="21">-&gt;<pos:position pos:line="68" pos:column="26"/></operator><name pos:line="68" pos:column="23">object_sz<pos:position pos:line="68" pos:column="32"/></name></name> <operator pos:line="68" pos:column="33">&gt;=<pos:position pos:line="68" pos:column="38"/></operator> <literal type="number" pos:line="68" pos:column="36">0<pos:position pos:line="68" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">assert<pos:position pos:line="69" pos:column="11"/></name><argument_list pos:line="69" pos:column="11">(<argument><expr><cast type="static" pos:line="69" pos:column="12">static_cast<argument_list type="generic" pos:line="69" pos:column="23">&lt;<argument><expr><name pos:line="69" pos:column="24">uint64_t<pos:position pos:line="69" pos:column="32"/></name></expr></argument>&gt;<pos:position pos:line="69" pos:column="36"/></argument_list><argument_list pos:line="69" pos:column="33">(<argument><expr><name><name pos:line="69" pos:column="34">e<pos:position pos:line="69" pos:column="35"/></name><operator pos:line="69" pos:column="35">.<pos:position pos:line="69" pos:column="36"/></operator><name pos:line="69" pos:column="36">mem_obj<pos:position pos:line="69" pos:column="43"/></name><operator pos:line="69" pos:column="43">-&gt;<pos:position pos:line="69" pos:column="48"/></operator><name pos:line="69" pos:column="45">object_sz<pos:position pos:line="69" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="55"/></argument_list></cast> <operator pos:line="69" pos:column="56">==<pos:position pos:line="69" pos:column="58"/></operator> <name><name pos:line="69" pos:column="59">anchor<pos:position pos:line="69" pos:column="65"/></name><operator pos:line="69" pos:column="65">.<pos:position pos:line="69" pos:column="66"/></operator><name pos:line="69" pos:column="66">basics<pos:position pos:line="69" pos:column="72"/></name><operator pos:line="69" pos:column="72">.<pos:position pos:line="69" pos:column="73"/></operator><name pos:line="69" pos:column="73">swap_file_sz<pos:position pos:line="69" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="87"/></expr_stmt>
    <comment type="line" pos:line="70" pos:column="5">// would be nice to call validLength() here, but it needs e.key</comment>

    <comment type="line" pos:line="72" pos:column="5">// we read the entire response into the local memory; no more need to lock</comment>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">disconnect<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><name pos:line="73" pos:column="16">e<pos:position pos:line="73" pos:column="17"/></name></expr></argument>)<pos:position pos:line="73" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="19"/></expr_stmt>
    <return pos:line="74" pos:column="5">return <expr><literal type="boolean" pos:line="74" pos:column="12">true<pos:position pos:line="74" pos:column="16"/></literal></expr>;<pos:position pos:line="74" pos:column="17"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
