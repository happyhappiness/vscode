<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1130_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">peer_t<pos:position pos:line="1" pos:column="7"/></name></type>
<name pos:line="2" pos:column="1">parseNeighborType<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">s<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name pos:line="4" pos:column="10">strcasecmp<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">(<argument><expr><name pos:line="4" pos:column="21">s<pos:position pos:line="4" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="24">"parent"<pos:position pos:line="4" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="34"/></condition><then pos:line="4" pos:column="34">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">PEER_PARENT<pos:position pos:line="5" pos:column="27"/></name></expr>;<pos:position pos:line="5" pos:column="28"/></return></block></then></if>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><call><name pos:line="7" pos:column="10">strcasecmp<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">s<pos:position pos:line="7" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="24">"neighbor"<pos:position pos:line="7" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="36"/></condition><then pos:line="7" pos:column="36">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><name pos:line="8" pos:column="16">PEER_SIBLING<pos:position pos:line="8" pos:column="28"/></name></expr>;<pos:position pos:line="8" pos:column="29"/></return></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><call><name pos:line="10" pos:column="10">strcasecmp<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">s<pos:position pos:line="10" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="24">"neighbour"<pos:position pos:line="10" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><name pos:line="11" pos:column="16">PEER_SIBLING<pos:position pos:line="11" pos:column="28"/></name></expr>;<pos:position pos:line="11" pos:column="29"/></return></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name pos:line="13" pos:column="10">strcasecmp<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">s<pos:position pos:line="13" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="24">"sibling"<pos:position pos:line="13" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="35"/></condition><then pos:line="13" pos:column="35">
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">PEER_SIBLING<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></return></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><call><name pos:line="16" pos:column="10">strcasecmp<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">s<pos:position pos:line="16" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="24">"multicast"<pos:position pos:line="16" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
        <block type="pseudo"><return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">PEER_MULTICAST<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">debugs<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="number" pos:line="19" pos:column="12">15<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="16">0<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="19">"WARNING: Unknown neighbor type: "<pos:position pos:line="19" pos:column="53"/></literal> <operator pos:line="19" pos:column="54">&lt;&lt;<pos:position pos:line="19" pos:column="62"/></operator> <name pos:line="19" pos:column="57">s<pos:position pos:line="19" pos:column="58"/></name></expr></argument>)<pos:position pos:line="19" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="60"/></expr_stmt>

    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">PEER_SIBLING<pos:position pos:line="21" pos:column="24"/></name></expr>;<pos:position pos:line="21" pos:column="25"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
