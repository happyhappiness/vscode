<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1365_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">icpConnectionShutdown<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">void<pos:position pos:line="2" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">theInIcpConnection<pos:position pos:line="4" pos:column="27"/></name> <operator pos:line="4" pos:column="28">&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="number" pos:line="4" pos:column="30">0<pos:position pos:line="4" pos:column="31"/></literal></expr>)<pos:position pos:line="4" pos:column="32"/></condition><then pos:line="4" pos:column="32">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">theInIcpConnection<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">!=<pos:position pos:line="7" pos:column="30"/></operator> <name pos:line="7" pos:column="31">theOutIcpConnection<pos:position pos:line="7" pos:column="50"/></name></expr>)<pos:position pos:line="7" pos:column="51"/></condition><then pos:line="7" pos:column="51"> <block pos:line="7" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">12<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="20">1<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"FD "<pos:position pos:line="8" pos:column="28"/></literal> <operator pos:line="8" pos:column="29">&lt;&lt;<pos:position pos:line="8" pos:column="37"/></operator> <name pos:line="8" pos:column="32">theInIcpConnection<pos:position pos:line="8" pos:column="50"/></name> <operator pos:line="8" pos:column="51">&lt;&lt;<pos:position pos:line="8" pos:column="59"/></operator> <literal type="string" pos:line="8" pos:column="54">" Closing ICP connection"<pos:position pos:line="8" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">comm_close<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">theInIcpConnection<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="12" pos:column="5">/**
     * Here we set 'theInIcpConnection' to -1 even though the ICP 'in'
     * and 'out' sockets might be just one FD.  This prevents this
     * function from executing repeatedly.  When we are really ready to
     * exit or restart, main will comm_close the 'out' descriptor.
     */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">theInIcpConnection<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <operator pos:line="18" pos:column="26">-<pos:position pos:line="18" pos:column="27"/></operator><literal type="number" pos:line="18" pos:column="27">1<pos:position pos:line="18" pos:column="28"/></literal></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>

    <comment type="block" format="doxygen" pos:line="20" pos:column="5">/**
     * Normally we only write to the outgoing ICP socket, but
     * we also have a read handler there to catch messages sent
     * to that specific interface.  During shutdown, we must
     * disable reading on the outgoing socket.
     */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">assert<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name pos:line="26" pos:column="12">theOutIcpConnection<pos:position pos:line="26" pos:column="31"/></name> <operator pos:line="26" pos:column="32">&gt;<pos:position pos:line="26" pos:column="36"/></operator> <operator pos:line="26" pos:column="34">-<pos:position pos:line="26" pos:column="35"/></operator><literal type="number" pos:line="26" pos:column="35">1<pos:position pos:line="26" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">commSetSelect<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">(<argument><expr><name pos:line="28" pos:column="19">theOutIcpConnection<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">COMM_SELECT_READ<pos:position pos:line="28" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">NULL<pos:position pos:line="28" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="64">NULL<pos:position pos:line="28" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="70">0<pos:position pos:line="28" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="73"/></expr_stmt>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
