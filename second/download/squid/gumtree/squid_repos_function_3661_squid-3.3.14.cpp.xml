<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3661_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">lookup<pos:position pos:line="2" pos:column="7"/></name><parameter_list pos:line="2" pos:column="7">(<parameter><decl><type><specifier pos:line="2" pos:column="8">const<pos:position pos:line="2" pos:column="13"/></specifier> <name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">buf<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">ttl<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><literal type="number" pos:line="4" pos:column="15">0<pos:position pos:line="4" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">retry<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><literal type="number" pos:line="5" pos:column="17">0<pos:position pos:line="5" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">int<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">i<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">ntoabuf<pos:position pos:line="7" pos:column="17"/></name><index pos:line="7" pos:column="17">[<expr><literal type="number" pos:line="7" pos:column="18">256<pos:position pos:line="7" pos:column="21"/></literal></expr>]<pos:position pos:line="7" pos:column="22"/></index></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">addrinfo<pos:position pos:line="8" pos:column="20"/></name></name></type> <name pos:line="8" pos:column="21">hints<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">addrinfo<pos:position pos:line="9" pos:column="20"/></name></name> <modifier pos:line="9" pos:column="21">*<pos:position pos:line="9" pos:column="22"/></modifier></type><name pos:line="9" pos:column="22">AI<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><name pos:line="9" pos:column="27">NULL<pos:position pos:line="9" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">addrinfo<pos:position pos:line="10" pos:column="20"/></name></name> <modifier pos:line="10" pos:column="21">*<pos:position pos:line="10" pos:column="22"/></modifier></type><name pos:line="10" pos:column="22">aiptr<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><name pos:line="10" pos:column="30">NULL<pos:position pos:line="10" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">addrinfo<pos:position pos:line="11" pos:column="20"/></name></name> <modifier pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></modifier></type><name pos:line="11" pos:column="22">prev_addr<pos:position pos:line="11" pos:column="31"/></name> <init pos:line="11" pos:column="32">= <expr><name pos:line="11" pos:column="34">NULL<pos:position pos:line="11" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">res<pos:position pos:line="12" pos:column="12"/></name> <init pos:line="12" pos:column="13">= <expr><literal type="number" pos:line="12" pos:column="15">0<pos:position pos:line="12" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><literal type="number" pos:line="14" pos:column="9">0<pos:position pos:line="14" pos:column="10"/></literal> <operator pos:line="14" pos:column="11">==<pos:position pos:line="14" pos:column="13"/></operator> <call><name pos:line="14" pos:column="14">strcmp<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">buf<pos:position pos:line="14" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="26">"$shutdown"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="9">exit<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><literal type="number" pos:line="15" pos:column="14">0<pos:position pos:line="15" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="17"/></expr_stmt></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><literal type="number" pos:line="17" pos:column="9">0<pos:position pos:line="17" pos:column="10"/></literal> <operator pos:line="17" pos:column="11">==<pos:position pos:line="17" pos:column="13"/></operator> <call><name pos:line="17" pos:column="14">strcmp<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">buf<pos:position pos:line="17" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="26">"$hello"<pos:position pos:line="17" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36"> <block pos:line="17" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">printf<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="string" pos:line="18" pos:column="16">"$alive\n"<pos:position pos:line="18" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="22" pos:column="5">/* check if it's already an IP address in text form. */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">memset<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><operator pos:line="23" pos:column="12">&amp;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="13">hints<pos:position pos:line="23" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="20">'\0'<pos:position pos:line="23" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="26">sizeof<argument_list pos:line="23" pos:column="32">(<argument><expr pos:line="23" pos:column="33">struct <name pos:line="23" pos:column="40">addrinfo<pos:position pos:line="23" pos:column="48"/></name></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">hints<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">.<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="11">ai_family<pos:position pos:line="24" pos:column="20"/></name></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">AF_UNSPEC<pos:position pos:line="24" pos:column="32"/></name></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">hints<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">.<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="11">ai_flags<pos:position pos:line="25" pos:column="19"/></name></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="22">AI_NUMERICHOST<pos:position pos:line="25" pos:column="36"/></name></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt> <comment type="line" pos:line="25" pos:column="38">// only succeed if its numeric.</comment>
    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">const<pos:position pos:line="26" pos:column="10"/></specifier> <name pos:line="26" pos:column="11">bool<pos:position pos:line="26" pos:column="15"/></name></type> <name pos:line="26" pos:column="16">isDomain<pos:position pos:line="26" pos:column="24"/></name> <init pos:line="26" pos:column="25">= <expr><operator pos:line="26" pos:column="27">(<pos:position pos:line="26" pos:column="28"/></operator><call><name pos:line="26" pos:column="28">getaddrinfo<pos:position pos:line="26" pos:column="39"/></name><argument_list pos:line="26" pos:column="39">(<argument><expr><name pos:line="26" pos:column="40">buf<pos:position pos:line="26" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="26" pos:column="44">NULL<pos:position pos:line="26" pos:column="48"/></name></expr></argument>,<argument><expr><operator pos:line="26" pos:column="49">&amp;<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="50">hints<pos:position pos:line="26" pos:column="55"/></name></expr></argument>,<argument><expr><operator pos:line="26" pos:column="56">&amp;<pos:position pos:line="26" pos:column="61"/></operator><name pos:line="26" pos:column="57">AI<pos:position pos:line="26" pos:column="59"/></name></expr></argument>)<pos:position pos:line="26" pos:column="60"/></argument_list></call> <operator pos:line="26" pos:column="61">!=<pos:position pos:line="26" pos:column="63"/></operator> <literal type="number" pos:line="26" pos:column="64">0<pos:position pos:line="26" pos:column="65"/></literal><operator pos:line="26" pos:column="65">)<pos:position pos:line="26" pos:column="66"/></operator></expr></init></decl>;<pos:position pos:line="26" pos:column="67"/></decl_stmt>

    <comment type="line" pos:line="28" pos:column="5">// reset for real lookup</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">AI<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">!=<pos:position pos:line="29" pos:column="14"/></operator> <name pos:line="29" pos:column="15">NULL<pos:position pos:line="29" pos:column="19"/></name></expr>)<pos:position pos:line="29" pos:column="20"/></condition><then pos:line="29" pos:column="20"> <block pos:line="29" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">freeaddrinfo<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">AI<pos:position pos:line="30" pos:column="24"/></name></expr></argument>)<pos:position pos:line="30" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">AI<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <name pos:line="31" pos:column="14">NULL<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="34" pos:column="5">// resolve the address/name</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">memset<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><operator pos:line="35" pos:column="12">&amp;<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="13">hints<pos:position pos:line="35" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="20">'\0'<pos:position pos:line="35" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="26">sizeof<argument_list pos:line="35" pos:column="32">(<argument><expr pos:line="35" pos:column="33">struct <name pos:line="35" pos:column="40">addrinfo<pos:position pos:line="35" pos:column="48"/></name></expr></argument>)<pos:position pos:line="35" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">hints<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">.<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">ai_family<pos:position pos:line="36" pos:column="20"/></name></name> <operator pos:line="36" pos:column="21">=<pos:position pos:line="36" pos:column="22"/></operator> <name pos:line="36" pos:column="23">AF_UNSPEC<pos:position pos:line="36" pos:column="32"/></name></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">hints<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">.<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">ai_flags<pos:position pos:line="37" pos:column="19"/></name></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <name pos:line="37" pos:column="22">AI_CANONNAME<pos:position pos:line="37" pos:column="34"/></name></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
    <for pos:line="38" pos:column="5">for <control pos:line="38" pos:column="9">(<init pos:line="38" pos:column="10">;<pos:position pos:line="38" pos:column="11"/></init><condition pos:line="38" pos:column="11">;<pos:position pos:line="38" pos:column="12"/></condition><incr/>)<pos:position pos:line="38" pos:column="13"/></control> <block pos:line="38" pos:column="14">{
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">AI<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">!=<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">NULL<pos:position pos:line="39" pos:column="23"/></name></expr>)<pos:position pos:line="39" pos:column="24"/></condition><then pos:line="39" pos:column="24"> <block pos:line="39" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">freeaddrinfo<pos:position pos:line="40" pos:column="25"/></name><argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">AI<pos:position pos:line="40" pos:column="28"/></name></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">AI<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <name pos:line="41" pos:column="18">NULL<pos:position pos:line="41" pos:column="22"/></name></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">( <expr><literal type="number" pos:line="44" pos:column="14">0<pos:position pos:line="44" pos:column="15"/></literal> <operator pos:line="44" pos:column="16">==<pos:position pos:line="44" pos:column="18"/></operator> <operator pos:line="44" pos:column="19">(<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="20">res<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <call><name pos:line="44" pos:column="26">getaddrinfo<pos:position pos:line="44" pos:column="37"/></name><argument_list pos:line="44" pos:column="37">(<argument><expr><name pos:line="44" pos:column="38">buf<pos:position pos:line="44" pos:column="41"/></name></expr></argument>,<argument><expr><name pos:line="44" pos:column="42">NULL<pos:position pos:line="44" pos:column="46"/></name></expr></argument>,<argument><expr><operator pos:line="44" pos:column="47">&amp;<pos:position pos:line="44" pos:column="52"/></operator><name pos:line="44" pos:column="48">hints<pos:position pos:line="44" pos:column="53"/></name></expr></argument>,<argument><expr><operator pos:line="44" pos:column="54">&amp;<pos:position pos:line="44" pos:column="59"/></operator><name pos:line="44" pos:column="55">AI<pos:position pos:line="44" pos:column="57"/></name></expr></argument>)<pos:position pos:line="44" pos:column="58"/></argument_list></call><operator pos:line="44" pos:column="58">)<pos:position pos:line="44" pos:column="59"/></operator></expr> )<pos:position pos:line="44" pos:column="61"/></condition><then pos:line="44" pos:column="61">
            <block type="pseudo"><break pos:line="45" pos:column="13">break;<pos:position pos:line="45" pos:column="19"/></break></block></then></if>

        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">res<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">!=<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="20">EAI_AGAIN<pos:position pos:line="47" pos:column="29"/></name></expr>)<pos:position pos:line="47" pos:column="30"/></condition><then pos:line="47" pos:column="30">
            <block type="pseudo"><break pos:line="48" pos:column="13">break;<pos:position pos:line="48" pos:column="19"/></break></block></then></if>

        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">++<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="15">retry<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">==<pos:position pos:line="50" pos:column="23"/></operator> <literal type="number" pos:line="50" pos:column="24">3<pos:position pos:line="50" pos:column="25"/></literal></expr>)<pos:position pos:line="50" pos:column="26"/></condition><then pos:line="50" pos:column="26">
            <block type="pseudo"><break pos:line="51" pos:column="13">break;<pos:position pos:line="51" pos:column="19"/></break></block></then></if>

        <expr_stmt><expr><call><name pos:line="53" pos:column="9">sleep<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><literal type="number" pos:line="53" pos:column="15">1<pos:position pos:line="53" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></for>

    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">isDomain<pos:position pos:line="56" pos:column="17"/></name></expr>)<pos:position pos:line="56" pos:column="18"/></condition><then pos:line="56" pos:column="18"> <block pos:line="56" pos:column="19">{
        <comment type="block" pos:line="57" pos:column="9">/* its a domain name. Use the forward-DNS lookup already done */</comment>

        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">res<pos:position pos:line="59" pos:column="16"/></name> <operator pos:line="59" pos:column="17">==<pos:position pos:line="59" pos:column="19"/></operator> <literal type="number" pos:line="59" pos:column="20">0<pos:position pos:line="59" pos:column="21"/></literal></expr>)<pos:position pos:line="59" pos:column="22"/></condition><then pos:line="59" pos:column="22"> <block pos:line="59" pos:column="23">{
<cpp:if pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">if<pos:position pos:line="60" pos:column="4"/></cpp:directive> <expr><name pos:line="60" pos:column="5">LIBRESOLV_DNS_TTL_HACK<pos:position pos:line="60" pos:column="27"/></name></expr></cpp:if>
            <comment type="block" pos:line="61" pos:column="13">/* DNS TTL handling - bne@CareNet.hu
             * for first try it's a dirty hack, by hacking getanswer
             * to place the ttl in a global variable */</comment>
            <if pos:line="64" pos:column="13">if <condition pos:line="64" pos:column="16">(<expr><name pos:line="64" pos:column="17">_dns_ttl_<pos:position pos:line="64" pos:column="26"/></name> <operator pos:line="64" pos:column="27">&gt;<pos:position pos:line="64" pos:column="31"/></operator> <operator pos:line="64" pos:column="29">-<pos:position pos:line="64" pos:column="30"/></operator><literal type="number" pos:line="64" pos:column="30">1<pos:position pos:line="64" pos:column="31"/></literal></expr>)<pos:position pos:line="64" pos:column="32"/></condition><then pos:line="64" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="17">ttl<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <name pos:line="65" pos:column="23">_dns_ttl_<pos:position pos:line="65" pos:column="32"/></name></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt></block></then></if>
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">printf<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><literal type="string" pos:line="67" pos:column="20">"$addr %d"<pos:position pos:line="67" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="32">ttl<pos:position pos:line="67" pos:column="35"/></name></expr></argument>)<pos:position pos:line="67" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>

            <expr_stmt><expr><name pos:line="69" pos:column="13">i<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <literal type="number" pos:line="69" pos:column="17">0<pos:position pos:line="69" pos:column="18"/></literal></expr>;<pos:position pos:line="69" pos:column="19"/></expr_stmt>
            <expr_stmt><expr><name pos:line="70" pos:column="13">aiptr<pos:position pos:line="70" pos:column="18"/></name> <operator pos:line="70" pos:column="19">=<pos:position pos:line="70" pos:column="20"/></operator> <name pos:line="70" pos:column="21">AI<pos:position pos:line="70" pos:column="23"/></name></expr>;<pos:position pos:line="70" pos:column="24"/></expr_stmt>
            <while pos:line="71" pos:column="13">while <condition pos:line="71" pos:column="19">(<expr><name pos:line="71" pos:column="20">NULL<pos:position pos:line="71" pos:column="24"/></name> <operator pos:line="71" pos:column="25">!=<pos:position pos:line="71" pos:column="27"/></operator> <name pos:line="71" pos:column="28">aiptr<pos:position pos:line="71" pos:column="33"/></name> <operator pos:line="71" pos:column="34">&amp;&amp;<pos:position pos:line="71" pos:column="44"/></operator> <literal type="number" pos:line="71" pos:column="37">32<pos:position pos:line="71" pos:column="39"/></literal> <operator pos:line="71" pos:column="40">&gt;=<pos:position pos:line="71" pos:column="45"/></operator> <name pos:line="71" pos:column="43">i<pos:position pos:line="71" pos:column="44"/></name></expr>)<pos:position pos:line="71" pos:column="45"/></condition> <block pos:line="71" pos:column="46">{
                <expr_stmt><expr><call><name pos:line="72" pos:column="17">memset<pos:position pos:line="72" pos:column="23"/></name><argument_list pos:line="72" pos:column="23">(<argument><expr><name pos:line="72" pos:column="24">ntoabuf<pos:position pos:line="72" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="33">0<pos:position pos:line="72" pos:column="34"/></literal></expr></argument>, <argument><expr><sizeof pos:line="72" pos:column="36">sizeof<argument_list pos:line="72" pos:column="42">(<argument><expr><name pos:line="72" pos:column="43">ntoabuf<pos:position pos:line="72" pos:column="50"/></name></expr></argument>)<pos:position pos:line="72" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="72" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="53"/></expr_stmt>

                <comment type="block" pos:line="74" pos:column="17">/* getaddrinfo given a host has a nasty tendency to return duplicate addr's */</comment>
                <comment type="block" pos:line="75" pos:column="17">/* BUT sorted fortunately, so we can drop most of them easily */</comment>
                <if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">( <expr><name pos:line="76" pos:column="22">prev_addr<pos:position pos:line="76" pos:column="31"/></name> <operator pos:line="76" pos:column="32">&amp;&amp;<pos:position pos:line="76" pos:column="42"/></operator>
                        <name><name pos:line="77" pos:column="25">prev_addr<pos:position pos:line="77" pos:column="34"/></name><operator pos:line="77" pos:column="34">-&gt;<pos:position pos:line="77" pos:column="39"/></operator><name pos:line="77" pos:column="36">ai_family<pos:position pos:line="77" pos:column="45"/></name></name><operator pos:line="77" pos:column="45">==<pos:position pos:line="77" pos:column="47"/></operator><name><name pos:line="77" pos:column="47">aiptr<pos:position pos:line="77" pos:column="52"/></name><operator pos:line="77" pos:column="52">-&gt;<pos:position pos:line="77" pos:column="57"/></operator><name pos:line="77" pos:column="54">ai_family<pos:position pos:line="77" pos:column="63"/></name></name> <operator pos:line="77" pos:column="64">&amp;&amp;<pos:position pos:line="77" pos:column="74"/></operator>
                        <call><name pos:line="78" pos:column="25">memcmp<pos:position pos:line="78" pos:column="31"/></name><argument_list pos:line="78" pos:column="31">(<argument><expr><name><name pos:line="78" pos:column="32">aiptr<pos:position pos:line="78" pos:column="37"/></name><operator pos:line="78" pos:column="37">-&gt;<pos:position pos:line="78" pos:column="42"/></operator><name pos:line="78" pos:column="39">ai_addr<pos:position pos:line="78" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="48">prev_addr<pos:position pos:line="78" pos:column="57"/></name><operator pos:line="78" pos:column="57">-&gt;<pos:position pos:line="78" pos:column="62"/></operator><name pos:line="78" pos:column="59">ai_addr<pos:position pos:line="78" pos:column="66"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="68">aiptr<pos:position pos:line="78" pos:column="73"/></name><operator pos:line="78" pos:column="73">-&gt;<pos:position pos:line="78" pos:column="78"/></operator><name pos:line="78" pos:column="75">ai_addrlen<pos:position pos:line="78" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="86"/></argument_list></call><operator pos:line="78" pos:column="86">==<pos:position pos:line="78" pos:column="88"/></operator><literal type="number" pos:line="78" pos:column="88">0<pos:position pos:line="78" pos:column="89"/></literal></expr>
                   )<pos:position pos:line="79" pos:column="21"/></condition><then pos:line="79" pos:column="21"> <block pos:line="79" pos:column="22">{
                    <expr_stmt><expr><name pos:line="80" pos:column="21">prev_addr<pos:position pos:line="80" pos:column="30"/></name> <operator pos:line="80" pos:column="31">=<pos:position pos:line="80" pos:column="32"/></operator> <name pos:line="80" pos:column="33">aiptr<pos:position pos:line="80" pos:column="38"/></name></expr>;<pos:position pos:line="80" pos:column="39"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="81" pos:column="21">aiptr<pos:position pos:line="81" pos:column="26"/></name> <operator pos:line="81" pos:column="27">=<pos:position pos:line="81" pos:column="28"/></operator> <name><name pos:line="81" pos:column="29">aiptr<pos:position pos:line="81" pos:column="34"/></name><operator pos:line="81" pos:column="34">-&gt;<pos:position pos:line="81" pos:column="39"/></operator><name pos:line="81" pos:column="36">ai_next<pos:position pos:line="81" pos:column="43"/></name></name></expr>;<pos:position pos:line="81" pos:column="44"/></expr_stmt>
                    <continue pos:line="82" pos:column="21">continue;<pos:position pos:line="82" pos:column="30"/></continue>
                }<pos:position pos:line="83" pos:column="18"/></block></then> <else pos:line="83" pos:column="19">else <block pos:line="83" pos:column="24">{
                    <expr_stmt><expr><name pos:line="84" pos:column="21">prev_addr<pos:position pos:line="84" pos:column="30"/></name> <operator pos:line="84" pos:column="31">=<pos:position pos:line="84" pos:column="32"/></operator> <name pos:line="84" pos:column="33">aiptr<pos:position pos:line="84" pos:column="38"/></name></expr>;<pos:position pos:line="84" pos:column="39"/></expr_stmt>
                }<pos:position pos:line="85" pos:column="18"/></block></else></if>

                <comment type="block" pos:line="87" pos:column="17">/* annoying inet_ntop breaks the nice code by requiring the in*_addr */</comment>
                <switch pos:line="88" pos:column="17">switch <condition pos:line="88" pos:column="24">(<expr><name><name pos:line="88" pos:column="25">aiptr<pos:position pos:line="88" pos:column="30"/></name><operator pos:line="88" pos:column="30">-&gt;<pos:position pos:line="88" pos:column="35"/></operator><name pos:line="88" pos:column="32">ai_family<pos:position pos:line="88" pos:column="41"/></name></name></expr>)<pos:position pos:line="88" pos:column="42"/></condition> <block pos:line="88" pos:column="43">{
                <case pos:line="89" pos:column="17">case <expr><name pos:line="89" pos:column="22">AF_INET<pos:position pos:line="89" pos:column="29"/></name></expr>:<pos:position pos:line="89" pos:column="30"/></case>
                    <expr_stmt><expr><call><name pos:line="90" pos:column="21">inet_ntop<pos:position pos:line="90" pos:column="30"/></name><argument_list pos:line="90" pos:column="30">(<argument><expr><name><name pos:line="90" pos:column="31">aiptr<pos:position pos:line="90" pos:column="36"/></name><operator pos:line="90" pos:column="36">-&gt;<pos:position pos:line="90" pos:column="41"/></operator><name pos:line="90" pos:column="38">ai_family<pos:position pos:line="90" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="49">&amp;<pos:position pos:line="90" pos:column="54"/></operator><operator pos:line="90" pos:column="50">(<pos:position pos:line="90" pos:column="51"/></operator><operator pos:line="90" pos:column="51">(<pos:position pos:line="90" pos:column="52"/></operator>struct <name pos:line="90" pos:column="59">sockaddr_in<pos:position pos:line="90" pos:column="70"/></name><operator pos:line="90" pos:column="70">*<pos:position pos:line="90" pos:column="71"/></operator><operator pos:line="90" pos:column="71">)<pos:position pos:line="90" pos:column="72"/></operator><name><name pos:line="90" pos:column="72">aiptr<pos:position pos:line="90" pos:column="77"/></name><operator pos:line="90" pos:column="77">-&gt;<pos:position pos:line="90" pos:column="82"/></operator><name pos:line="90" pos:column="79">ai_addr<pos:position pos:line="90" pos:column="86"/></name></name><operator pos:line="90" pos:column="86">)<pos:position pos:line="90" pos:column="87"/></operator><operator pos:line="90" pos:column="87">-&gt;<pos:position pos:line="90" pos:column="92"/></operator><name pos:line="90" pos:column="89">sin_addr<pos:position pos:line="90" pos:column="97"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="99">ntoabuf<pos:position pos:line="90" pos:column="106"/></name></expr></argument>, <argument><expr><sizeof pos:line="90" pos:column="108">sizeof<argument_list pos:line="90" pos:column="114">(<argument><expr><name pos:line="90" pos:column="115">ntoabuf<pos:position pos:line="90" pos:column="122"/></name></expr></argument>)<pos:position pos:line="90" pos:column="123"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="90" pos:column="124"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="125"/></expr_stmt>
                    <break pos:line="91" pos:column="21">break;<pos:position pos:line="91" pos:column="27"/></break>
                <case pos:line="92" pos:column="17">case <expr><name pos:line="92" pos:column="22">AF_INET6<pos:position pos:line="92" pos:column="30"/></name></expr>:<pos:position pos:line="92" pos:column="31"/></case>
                    <expr_stmt><expr><call><name pos:line="93" pos:column="21">inet_ntop<pos:position pos:line="93" pos:column="30"/></name><argument_list pos:line="93" pos:column="30">(<argument><expr><name><name pos:line="93" pos:column="31">aiptr<pos:position pos:line="93" pos:column="36"/></name><operator pos:line="93" pos:column="36">-&gt;<pos:position pos:line="93" pos:column="41"/></operator><name pos:line="93" pos:column="38">ai_family<pos:position pos:line="93" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="49">&amp;<pos:position pos:line="93" pos:column="54"/></operator><operator pos:line="93" pos:column="50">(<pos:position pos:line="93" pos:column="51"/></operator><operator pos:line="93" pos:column="51">(<pos:position pos:line="93" pos:column="52"/></operator>struct <name pos:line="93" pos:column="59">sockaddr_in6<pos:position pos:line="93" pos:column="71"/></name><operator pos:line="93" pos:column="71">*<pos:position pos:line="93" pos:column="72"/></operator><operator pos:line="93" pos:column="72">)<pos:position pos:line="93" pos:column="73"/></operator><name><name pos:line="93" pos:column="73">aiptr<pos:position pos:line="93" pos:column="78"/></name><operator pos:line="93" pos:column="78">-&gt;<pos:position pos:line="93" pos:column="83"/></operator><name pos:line="93" pos:column="80">ai_addr<pos:position pos:line="93" pos:column="87"/></name></name><operator pos:line="93" pos:column="87">)<pos:position pos:line="93" pos:column="88"/></operator><operator pos:line="93" pos:column="88">-&gt;<pos:position pos:line="93" pos:column="93"/></operator><name pos:line="93" pos:column="90">sin6_addr<pos:position pos:line="93" pos:column="99"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="101">ntoabuf<pos:position pos:line="93" pos:column="108"/></name></expr></argument>, <argument><expr><sizeof pos:line="93" pos:column="110">sizeof<argument_list pos:line="93" pos:column="116">(<argument><expr><name pos:line="93" pos:column="117">ntoabuf<pos:position pos:line="93" pos:column="124"/></name></expr></argument>)<pos:position pos:line="93" pos:column="125"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="93" pos:column="126"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="127"/></expr_stmt>
                    <break pos:line="94" pos:column="21">break;<pos:position pos:line="94" pos:column="27"/></break>
                <default pos:line="95" pos:column="17">default:<pos:position pos:line="95" pos:column="25"/></default>
                    <expr_stmt><expr><name pos:line="96" pos:column="21">aiptr<pos:position pos:line="96" pos:column="26"/></name> <operator pos:line="96" pos:column="27">=<pos:position pos:line="96" pos:column="28"/></operator> <name><name pos:line="96" pos:column="29">aiptr<pos:position pos:line="96" pos:column="34"/></name><operator pos:line="96" pos:column="34">-&gt;<pos:position pos:line="96" pos:column="39"/></operator><name pos:line="96" pos:column="36">ai_next<pos:position pos:line="96" pos:column="43"/></name></name></expr>;<pos:position pos:line="96" pos:column="44"/></expr_stmt>
                    <continue pos:line="97" pos:column="21">continue;<pos:position pos:line="97" pos:column="30"/></continue>
                }<pos:position pos:line="98" pos:column="18"/></block></switch>
                <expr_stmt><expr><call><name pos:line="99" pos:column="17">printf<pos:position pos:line="99" pos:column="23"/></name><argument_list pos:line="99" pos:column="23">(<argument><expr><literal type="string" pos:line="99" pos:column="24">" %s"<pos:position pos:line="99" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="31">ntoabuf<pos:position pos:line="99" pos:column="38"/></name></expr></argument>)<pos:position pos:line="99" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="40"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="100" pos:column="17">++<pos:position pos:line="100" pos:column="19"/></operator><name pos:line="100" pos:column="19">i<pos:position pos:line="100" pos:column="20"/></name></expr>;<pos:position pos:line="100" pos:column="21"/></expr_stmt>
                <expr_stmt><expr><name pos:line="101" pos:column="17">aiptr<pos:position pos:line="101" pos:column="22"/></name> <operator pos:line="101" pos:column="23">=<pos:position pos:line="101" pos:column="24"/></operator> <name><name pos:line="101" pos:column="25">aiptr<pos:position pos:line="101" pos:column="30"/></name><operator pos:line="101" pos:column="30">-&gt;<pos:position pos:line="101" pos:column="35"/></operator><name pos:line="101" pos:column="32">ai_next<pos:position pos:line="101" pos:column="39"/></name></name></expr>;<pos:position pos:line="101" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="102" pos:column="14"/></block></while>

            <expr_stmt><expr><name pos:line="104" pos:column="13">prev_addr<pos:position pos:line="104" pos:column="22"/></name><operator pos:line="104" pos:column="22">=<pos:position pos:line="104" pos:column="23"/></operator><name pos:line="104" pos:column="23">NULL<pos:position pos:line="104" pos:column="27"/></name></expr>;<pos:position pos:line="104" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">printf<pos:position pos:line="105" pos:column="19"/></name><argument_list pos:line="105" pos:column="19">(<argument><expr><literal type="string" pos:line="105" pos:column="20">"\n"<pos:position pos:line="105" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="106" pos:column="10"/></block></then></if>
    }<pos:position pos:line="107" pos:column="6"/></block></then> <else pos:line="107" pos:column="7">else <block pos:line="107" pos:column="12">{ <comment type="block" pos:line="107" pos:column="14">/* its an IPA in text form. perform rDNS */</comment>
        <comment type="block" pos:line="108" pos:column="9">/* You'd expect getaddrinfo given AI_CANONNAME would do a lookup on
         * missing FQDN. But no, it only copies the input string to that
         * position regardless of its content.
         */</comment>
        <if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><name pos:line="112" pos:column="13">NULL<pos:position pos:line="112" pos:column="17"/></name> <operator pos:line="112" pos:column="18">!=<pos:position pos:line="112" pos:column="20"/></operator> <name pos:line="112" pos:column="21">AI<pos:position pos:line="112" pos:column="23"/></name> <operator pos:line="112" pos:column="24">&amp;&amp;<pos:position pos:line="112" pos:column="34"/></operator> <name pos:line="112" pos:column="27">NULL<pos:position pos:line="112" pos:column="31"/></name> <operator pos:line="112" pos:column="32">!=<pos:position pos:line="112" pos:column="34"/></operator> <name><name pos:line="112" pos:column="35">AI<pos:position pos:line="112" pos:column="37"/></name><operator pos:line="112" pos:column="37">-&gt;<pos:position pos:line="112" pos:column="42"/></operator><name pos:line="112" pos:column="39">ai_addr<pos:position pos:line="112" pos:column="46"/></name></name></expr>)<pos:position pos:line="112" pos:column="47"/></condition><then pos:line="112" pos:column="47"> <block pos:line="112" pos:column="48">{
            <for pos:line="113" pos:column="13">for <control pos:line="113" pos:column="17">(<init pos:line="113" pos:column="18">;<pos:position pos:line="113" pos:column="19"/></init><condition pos:line="113" pos:column="19">;<pos:position pos:line="113" pos:column="20"/></condition><incr/>)<pos:position pos:line="113" pos:column="21"/></control> <block pos:line="113" pos:column="22">{
                <if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">( <expr><literal type="number" pos:line="114" pos:column="22">0<pos:position pos:line="114" pos:column="23"/></literal> <operator pos:line="114" pos:column="24">==<pos:position pos:line="114" pos:column="26"/></operator> <operator pos:line="114" pos:column="27">(<pos:position pos:line="114" pos:column="28"/></operator><name pos:line="114" pos:column="28">res<pos:position pos:line="114" pos:column="31"/></name> <operator pos:line="114" pos:column="32">=<pos:position pos:line="114" pos:column="33"/></operator> <call><name pos:line="114" pos:column="34">getnameinfo<pos:position pos:line="114" pos:column="45"/></name><argument_list pos:line="114" pos:column="45">(<argument><expr><name><name pos:line="114" pos:column="46">AI<pos:position pos:line="114" pos:column="48"/></name><operator pos:line="114" pos:column="48">-&gt;<pos:position pos:line="114" pos:column="53"/></operator><name pos:line="114" pos:column="50">ai_addr<pos:position pos:line="114" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="59">AI<pos:position pos:line="114" pos:column="61"/></name><operator pos:line="114" pos:column="61">-&gt;<pos:position pos:line="114" pos:column="66"/></operator><name pos:line="114" pos:column="63">ai_addrlen<pos:position pos:line="114" pos:column="73"/></name></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="75">ntoabuf<pos:position pos:line="114" pos:column="82"/></name></expr></argument>, <argument><expr><sizeof pos:line="114" pos:column="84">sizeof<argument_list pos:line="114" pos:column="90">(<argument><expr><name pos:line="114" pos:column="91">ntoabuf<pos:position pos:line="114" pos:column="98"/></name></expr></argument>)<pos:position pos:line="114" pos:column="99"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="114" pos:column="101">NULL<pos:position pos:line="114" pos:column="105"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="114" pos:column="106">0<pos:position pos:line="114" pos:column="107"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="114" pos:column="108">0<pos:position pos:line="114" pos:column="109"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="110"/></argument_list></call><operator pos:line="114" pos:column="110">)<pos:position pos:line="114" pos:column="111"/></operator></expr> )<pos:position pos:line="114" pos:column="113"/></condition><then pos:line="114" pos:column="113">
                    <block type="pseudo"><break pos:line="115" pos:column="21">break;<pos:position pos:line="115" pos:column="27"/></break></block></then></if>

                <if pos:line="117" pos:column="17">if <condition pos:line="117" pos:column="20">(<expr><name pos:line="117" pos:column="21">res<pos:position pos:line="117" pos:column="24"/></name> <operator pos:line="117" pos:column="25">!=<pos:position pos:line="117" pos:column="27"/></operator> <name pos:line="117" pos:column="28">EAI_AGAIN<pos:position pos:line="117" pos:column="37"/></name></expr>)<pos:position pos:line="117" pos:column="38"/></condition><then pos:line="117" pos:column="38">
                    <block type="pseudo"><break pos:line="118" pos:column="21">break;<pos:position pos:line="118" pos:column="27"/></break></block></then></if>

                <if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><operator pos:line="120" pos:column="21">++<pos:position pos:line="120" pos:column="23"/></operator><name pos:line="120" pos:column="23">retry<pos:position pos:line="120" pos:column="28"/></name> <operator pos:line="120" pos:column="29">==<pos:position pos:line="120" pos:column="31"/></operator> <literal type="number" pos:line="120" pos:column="32">3<pos:position pos:line="120" pos:column="33"/></literal></expr>)<pos:position pos:line="120" pos:column="34"/></condition><then pos:line="120" pos:column="34">
                    <block type="pseudo"><break pos:line="121" pos:column="21">break;<pos:position pos:line="121" pos:column="27"/></break></block></then></if>

                <expr_stmt><expr><call><name pos:line="123" pos:column="17">sleep<pos:position pos:line="123" pos:column="22"/></name><argument_list pos:line="123" pos:column="22">(<argument><expr><literal type="number" pos:line="123" pos:column="23">1<pos:position pos:line="123" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="26"/></expr_stmt>
            }<pos:position pos:line="124" pos:column="14"/></block></for>
        }<pos:position pos:line="125" pos:column="10"/></block></then></if>

        <if pos:line="127" pos:column="9">if <condition pos:line="127" pos:column="12">(<expr><name pos:line="127" pos:column="13">res<pos:position pos:line="127" pos:column="16"/></name> <operator pos:line="127" pos:column="17">==<pos:position pos:line="127" pos:column="19"/></operator> <literal type="number" pos:line="127" pos:column="20">0<pos:position pos:line="127" pos:column="21"/></literal></expr>)<pos:position pos:line="127" pos:column="22"/></condition><then pos:line="127" pos:column="22"> <block pos:line="127" pos:column="23">{
<cpp:if pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">if<pos:position pos:line="128" pos:column="4"/></cpp:directive> <expr><name pos:line="128" pos:column="5">LIBRESOLV_DNS_TTL_HACK<pos:position pos:line="128" pos:column="27"/></name></expr></cpp:if>
            <comment type="block" pos:line="129" pos:column="13">/* DNS TTL handling - bne@CareNet.hu
             * for first try it's a dirty hack, by hacking getanswer
             * to place the ttl in a global variable */</comment>
            <if pos:line="132" pos:column="13">if <condition pos:line="132" pos:column="16">(<expr><name pos:line="132" pos:column="17">_dns_ttl_<pos:position pos:line="132" pos:column="26"/></name> <operator pos:line="132" pos:column="27">&gt;<pos:position pos:line="132" pos:column="31"/></operator> <operator pos:line="132" pos:column="29">-<pos:position pos:line="132" pos:column="30"/></operator><literal type="number" pos:line="132" pos:column="30">1<pos:position pos:line="132" pos:column="31"/></literal></expr>)<pos:position pos:line="132" pos:column="32"/></condition><then pos:line="132" pos:column="32">
                <block type="pseudo"><expr_stmt><expr><name pos:line="133" pos:column="17">ttl<pos:position pos:line="133" pos:column="20"/></name> <operator pos:line="133" pos:column="21">=<pos:position pos:line="133" pos:column="22"/></operator> <name pos:line="133" pos:column="23">_dns_ttl_<pos:position pos:line="133" pos:column="32"/></name></expr>;<pos:position pos:line="133" pos:column="33"/></expr_stmt></block></then></if>
<cpp:endif pos:line="134" pos:column="1">#<cpp:directive pos:line="134" pos:column="2">endif<pos:position pos:line="134" pos:column="7"/></cpp:directive></cpp:endif>

            <expr_stmt><expr><call><name pos:line="136" pos:column="13">printf<pos:position pos:line="136" pos:column="19"/></name><argument_list pos:line="136" pos:column="19">(<argument><expr><literal type="string" pos:line="136" pos:column="20">"$name %d %s\n"<pos:position pos:line="136" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="136" pos:column="37">ttl<pos:position pos:line="136" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="42">ntoabuf<pos:position pos:line="136" pos:column="49"/></name></expr></argument>)<pos:position pos:line="136" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="137" pos:column="10"/></block></then></if>
    }<pos:position pos:line="138" pos:column="6"/></block></else></if>

    <switch pos:line="140" pos:column="5">switch <condition pos:line="140" pos:column="12">(<expr><name pos:line="140" pos:column="13">res<pos:position pos:line="140" pos:column="16"/></name></expr>)<pos:position pos:line="140" pos:column="17"/></condition> <block pos:line="140" pos:column="18">{
    <case pos:line="141" pos:column="5">case <expr><literal type="number" pos:line="141" pos:column="10">0<pos:position pos:line="141" pos:column="11"/></literal></expr>:<pos:position pos:line="141" pos:column="12"/></case>
        <comment type="block" pos:line="142" pos:column="9">/* no error. */</comment>
        <break pos:line="143" pos:column="9">break;<pos:position pos:line="143" pos:column="15"/></break>

    <case pos:line="145" pos:column="5">case <expr><name pos:line="145" pos:column="10">EAI_AGAIN<pos:position pos:line="145" pos:column="19"/></name></expr>:<pos:position pos:line="145" pos:column="20"/></case>
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">printf<pos:position pos:line="146" pos:column="15"/></name><argument_list pos:line="146" pos:column="15">(<argument><expr><literal type="string" pos:line="146" pos:column="16">"$fail Name Server for domain '%s' is unavailable.\n"<pos:position pos:line="146" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="71">buf<pos:position pos:line="146" pos:column="74"/></name></expr></argument>)<pos:position pos:line="146" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="76"/></expr_stmt>
        <break pos:line="147" pos:column="9">break;<pos:position pos:line="147" pos:column="15"/></break>

    <case pos:line="149" pos:column="5">case <expr><name pos:line="149" pos:column="10">EAI_FAIL<pos:position pos:line="149" pos:column="18"/></name></expr>:<pos:position pos:line="149" pos:column="19"/></case>
        <expr_stmt><expr><call><name pos:line="150" pos:column="9">printf<pos:position pos:line="150" pos:column="15"/></name><argument_list pos:line="150" pos:column="15">(<argument><expr><literal type="string" pos:line="150" pos:column="16">"$fail DNS Domain/IP '%s' does not exist: %s.\n"<pos:position pos:line="150" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="66">buf<pos:position pos:line="150" pos:column="69"/></name></expr></argument>, <argument><expr><call><name pos:line="150" pos:column="71">gai_strerror<pos:position pos:line="150" pos:column="83"/></name><argument_list pos:line="150" pos:column="83">(<argument><expr><name pos:line="150" pos:column="84">res<pos:position pos:line="150" pos:column="87"/></name></expr></argument>)<pos:position pos:line="150" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="150" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="90"/></expr_stmt>
        <break pos:line="151" pos:column="9">break;<pos:position pos:line="151" pos:column="15"/></break>

<cpp:if pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">if<pos:position pos:line="153" pos:column="4"/></cpp:directive> <expr><call><name pos:line="153" pos:column="5">defined<pos:position pos:line="153" pos:column="12"/></name><argument_list pos:line="153" pos:column="12">(<argument><expr><name pos:line="153" pos:column="13">EAI_NODATA<pos:position pos:line="153" pos:column="23"/></name></expr></argument>)<pos:position pos:line="153" pos:column="24"/></argument_list></call> <operator pos:line="153" pos:column="25">||<pos:position pos:line="153" pos:column="27"/></operator> <call><name pos:line="153" pos:column="28">defined<pos:position pos:line="153" pos:column="35"/></name><argument_list pos:line="153" pos:column="35">(<argument><expr><name pos:line="153" pos:column="36">EAI_NONAME<pos:position pos:line="153" pos:column="46"/></name></expr></argument>)<pos:position pos:line="153" pos:column="47"/></argument_list></call></expr></cpp:if>
<cpp:if pos:line="154" pos:column="1">#<cpp:directive pos:line="154" pos:column="2">if<pos:position pos:line="154" pos:column="4"/></cpp:directive> <expr><name pos:line="154" pos:column="5">EAI_NODATA<pos:position pos:line="154" pos:column="15"/></name></expr></cpp:if>
        <comment type="block" pos:line="155" pos:column="9">/* deprecated. obsolete on some OS */</comment>
    <case pos:line="156" pos:column="5">case <expr><name pos:line="156" pos:column="10">EAI_NODATA<pos:position pos:line="156" pos:column="20"/></name></expr>:<pos:position pos:line="156" pos:column="21"/></case>
<cpp:endif pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">endif<pos:position pos:line="157" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="158" pos:column="1">#<cpp:directive pos:line="158" pos:column="2">if<pos:position pos:line="158" pos:column="4"/></cpp:directive> <expr><name pos:line="158" pos:column="5">EAI_NONAME<pos:position pos:line="158" pos:column="15"/></name></expr></cpp:if>
    <case pos:line="159" pos:column="5">case <expr><name pos:line="159" pos:column="10">EAI_NONAME<pos:position pos:line="159" pos:column="20"/></name></expr>:<pos:position pos:line="159" pos:column="21"/></case>
<cpp:endif pos:line="160" pos:column="1">#<cpp:directive pos:line="160" pos:column="2">endif<pos:position pos:line="160" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="161" pos:column="9">printf<pos:position pos:line="161" pos:column="15"/></name><argument_list pos:line="161" pos:column="15">(<argument><expr><literal type="string" pos:line="161" pos:column="16">"$fail DNS Domain/IP '%s' exists without any FQDN/IPs: %s.\n"<pos:position pos:line="161" pos:column="77"/></literal></expr></argument>, <argument><expr><name pos:line="161" pos:column="79">buf<pos:position pos:line="161" pos:column="82"/></name></expr></argument>, <argument><expr><call><name pos:line="161" pos:column="84">gai_strerror<pos:position pos:line="161" pos:column="96"/></name><argument_list pos:line="161" pos:column="96">(<argument><expr><name pos:line="161" pos:column="97">res<pos:position pos:line="161" pos:column="100"/></name></expr></argument>)<pos:position pos:line="161" pos:column="101"/></argument_list></call></expr></argument>)<pos:position pos:line="161" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="103"/></expr_stmt>
        <break pos:line="162" pos:column="9">break;<pos:position pos:line="162" pos:column="15"/></break>
<cpp:endif pos:line="163" pos:column="1">#<cpp:directive pos:line="163" pos:column="2">endif<pos:position pos:line="163" pos:column="7"/></cpp:directive></cpp:endif>
    <default pos:line="164" pos:column="5">default:<pos:position pos:line="164" pos:column="13"/></default>
        <expr_stmt><expr><call><name pos:line="165" pos:column="9">printf<pos:position pos:line="165" pos:column="15"/></name><argument_list pos:line="165" pos:column="15">(<argument><expr><literal type="string" pos:line="165" pos:column="16">"$fail A system error occured looking up Domain/IP '%s': %s.\n"<pos:position pos:line="165" pos:column="79"/></literal></expr></argument>, <argument><expr><name pos:line="165" pos:column="81">buf<pos:position pos:line="165" pos:column="84"/></name></expr></argument>, <argument><expr><call><name pos:line="165" pos:column="86">gai_strerror<pos:position pos:line="165" pos:column="98"/></name><argument_list pos:line="165" pos:column="98">(<argument><expr><name pos:line="165" pos:column="99">res<pos:position pos:line="165" pos:column="102"/></name></expr></argument>)<pos:position pos:line="165" pos:column="103"/></argument_list></call></expr></argument>)<pos:position pos:line="165" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="105"/></expr_stmt>
    }<pos:position pos:line="166" pos:column="6"/></block></switch>

    <if pos:line="168" pos:column="5">if <condition pos:line="168" pos:column="8">(<expr><name pos:line="168" pos:column="9">AI<pos:position pos:line="168" pos:column="11"/></name> <operator pos:line="168" pos:column="12">!=<pos:position pos:line="168" pos:column="14"/></operator> <name pos:line="168" pos:column="15">NULL<pos:position pos:line="168" pos:column="19"/></name></expr>)<pos:position pos:line="168" pos:column="20"/></condition><then pos:line="168" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="169" pos:column="9">freeaddrinfo<pos:position pos:line="169" pos:column="21"/></name><argument_list pos:line="169" pos:column="21">(<argument><expr><name pos:line="169" pos:column="22">AI<pos:position pos:line="169" pos:column="24"/></name></expr></argument>)<pos:position pos:line="169" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="26"/></expr_stmt></block></then></if>
}<pos:position pos:line="170" pos:column="2"/></block></function></unit>
