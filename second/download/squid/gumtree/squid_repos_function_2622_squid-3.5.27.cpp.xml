<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2622_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">mail_warranty<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">void<pos:position pos:line="2" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">FILE<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">fp<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name pos:line="4" pos:column="16">NULL<pos:position pos:line="4" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name pos:line="5" pos:column="12">char<pos:position pos:line="5" pos:column="16"/></name></type> <name><name pos:line="5" pos:column="17">command<pos:position pos:line="5" pos:column="24"/></name><index pos:line="5" pos:column="24">[<expr><literal type="number" pos:line="5" pos:column="25">256<pos:position pos:line="5" pos:column="28"/></literal></expr>]<pos:position pos:line="5" pos:column="29"/></index></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/*
     * NP: umask() takes the mask of bits we DONT want set.
     *
     * We want the current user to have read/write access
     * and since this file will be passed to mailsystem,
     * the group and other must have read access.
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">mode_t<pos:position pos:line="14" pos:column="17"/></name></type> <name pos:line="14" pos:column="18">prev_umask<pos:position pos:line="14" pos:column="28"/></name><init pos:line="14" pos:column="28">=<expr><call><name pos:line="14" pos:column="29">umask<pos:position pos:line="14" pos:column="34"/></name><argument_list pos:line="14" pos:column="34">(<argument><expr><name pos:line="14" pos:column="35">S_IXUSR<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">|<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="43">S_IXGRP<pos:position pos:line="14" pos:column="50"/></name><operator pos:line="14" pos:column="50">|<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="51">S_IWGRP<pos:position pos:line="14" pos:column="58"/></name><operator pos:line="14" pos:column="58">|<pos:position pos:line="14" pos:column="59"/></operator><name pos:line="14" pos:column="59">S_IWOTH<pos:position pos:line="14" pos:column="66"/></name><operator pos:line="14" pos:column="66">|<pos:position pos:line="14" pos:column="67"/></operator><name pos:line="14" pos:column="67">S_IXOTH<pos:position pos:line="14" pos:column="74"/></name></expr></argument>)<pos:position pos:line="14" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="76"/></decl_stmt>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">HAVE_MKSTEMP<pos:position pos:line="16" pos:column="17"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">char<pos:position pos:line="17" pos:column="9"/></name></type> <name><name pos:line="17" pos:column="10">filename<pos:position pos:line="17" pos:column="18"/></name><index pos:line="17" pos:column="18">[]<pos:position pos:line="17" pos:column="20"/></index></name> <init pos:line="17" pos:column="21">= <expr><literal type="string" pos:line="17" pos:column="23">"/tmp/squid-XXXXXX"<pos:position pos:line="17" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">tfd<pos:position pos:line="18" pos:column="12"/></name> <init pos:line="18" pos:column="13">= <expr><call><name pos:line="18" pos:column="15">mkstemp<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">filename<pos:position pos:line="18" pos:column="31"/></name></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="33"/></decl_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">tfd<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">&lt;<pos:position pos:line="19" pos:column="17"/></operator> <literal type="number" pos:line="19" pos:column="15">0<pos:position pos:line="19" pos:column="16"/></literal> <operator pos:line="19" pos:column="17">||<pos:position pos:line="19" pos:column="19"/></operator> <operator pos:line="19" pos:column="20">(<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">fp<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <call><name pos:line="19" pos:column="26">fdopen<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">tfd<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="38">"w"<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call><operator pos:line="19" pos:column="42">)<pos:position pos:line="19" pos:column="43"/></operator> <operator pos:line="19" pos:column="44">==<pos:position pos:line="19" pos:column="46"/></operator> <name pos:line="19" pos:column="47">NULL<pos:position pos:line="19" pos:column="51"/></name></expr>)<pos:position pos:line="19" pos:column="52"/></condition><then pos:line="19" pos:column="52"> <block pos:line="19" pos:column="53">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">umask<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name pos:line="20" pos:column="15">prev_umask<pos:position pos:line="20" pos:column="25"/></name></expr></argument>)<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
        <return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
<cpp:else pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">else<pos:position pos:line="23" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">char<pos:position pos:line="24" pos:column="9"/></name> <modifier pos:line="24" pos:column="10">*<pos:position pos:line="24" pos:column="11"/></modifier></type><name pos:line="24" pos:column="11">filename<pos:position pos:line="24" pos:column="19"/></name></decl>;<pos:position pos:line="24" pos:column="20"/></decl_stmt>
    <comment type="line" pos:line="25" pos:column="5">// XXX tempnam is obsolete since POSIX.2008-1</comment>
    <comment type="line" pos:line="26" pos:column="5">// tmpfile is not an option, we want the created files to stick around</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">(<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">filename<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <call><name pos:line="27" pos:column="21">tempnam<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">NULL<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">APP_SHORTNAME<pos:position pos:line="27" pos:column="48"/></name></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call><operator pos:line="27" pos:column="49">)<pos:position pos:line="27" pos:column="50"/></operator> <operator pos:line="27" pos:column="51">==<pos:position pos:line="27" pos:column="53"/></operator> <name pos:line="27" pos:column="54">NULL<pos:position pos:line="27" pos:column="58"/></name> <operator pos:line="27" pos:column="59">||<pos:position pos:line="27" pos:column="61"/></operator>
            <operator pos:line="28" pos:column="13">(<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">fp<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <call><name pos:line="28" pos:column="19">fopen<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">filename<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="35">"w"<pos:position pos:line="28" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call><operator pos:line="28" pos:column="39">)<pos:position pos:line="28" pos:column="40"/></operator> <operator pos:line="28" pos:column="41">==<pos:position pos:line="28" pos:column="43"/></operator> <name pos:line="28" pos:column="44">NULL<pos:position pos:line="28" pos:column="48"/></name></expr>)<pos:position pos:line="28" pos:column="49"/></condition><then pos:line="28" pos:column="49"> <block pos:line="28" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">umask<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><name pos:line="29" pos:column="15">prev_umask<pos:position pos:line="29" pos:column="25"/></name></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
        <return pos:line="30" pos:column="9">return;<pos:position pos:line="30" pos:column="16"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">umask<pos:position pos:line="33" pos:column="10"/></name><argument_list pos:line="33" pos:column="10">(<argument><expr><name pos:line="33" pos:column="11">prev_umask<pos:position pos:line="33" pos:column="21"/></name></expr></argument>)<pos:position pos:line="33" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name><name pos:line="35" pos:column="9">Config<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">.<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">EmailFrom<pos:position pos:line="35" pos:column="25"/></name></name></expr>)<pos:position pos:line="35" pos:column="26"/></condition><then pos:line="35" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="9">fprintf<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><name pos:line="36" pos:column="17">fp<pos:position pos:line="36" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="21">"From: %s\n"<pos:position pos:line="36" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="35">Config<pos:position pos:line="36" pos:column="41"/></name><operator pos:line="36" pos:column="41">.<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="42">EmailFrom<pos:position pos:line="36" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt></block></then>
    <else pos:line="37" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="9">fprintf<pos:position pos:line="38" pos:column="16"/></name><argument_list pos:line="38" pos:column="16">(<argument><expr><name pos:line="38" pos:column="17">fp<pos:position pos:line="38" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="21">"From: %s@%s\n"<pos:position pos:line="38" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="38">APP_SHORTNAME<pos:position pos:line="38" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="53">uniqueHostname<pos:position pos:line="38" pos:column="67"/></name><argument_list pos:line="38" pos:column="67">()<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="71"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">fprintf<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">fp<pos:position pos:line="40" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="17">"To: %s\n"<pos:position pos:line="40" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="29">Config<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">.<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="36">adminEmail<pos:position pos:line="40" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">fprintf<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">fp<pos:position pos:line="41" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="17">"Subject: %s\n"<pos:position pos:line="41" pos:column="32"/></literal></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="34">dead_msg<pos:position pos:line="41" pos:column="42"/></name><argument_list pos:line="41" pos:column="42">()<pos:position pos:line="41" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">fclose<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><name pos:line="42" pos:column="12">fp<pos:position pos:line="42" pos:column="14"/></name></expr></argument>)<pos:position pos:line="42" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="44" pos:column="5">snprintf<pos:position pos:line="44" pos:column="13"/></name><argument_list pos:line="44" pos:column="13">(<argument><expr><name pos:line="44" pos:column="14">command<pos:position pos:line="44" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="23">256<pos:position pos:line="44" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="28">"%s %s &lt; %s"<pos:position pos:line="44" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="42">Config<pos:position pos:line="44" pos:column="48"/></name><operator pos:line="44" pos:column="48">.<pos:position pos:line="44" pos:column="49"/></operator><name pos:line="44" pos:column="49">EmailProgram<pos:position pos:line="44" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="63">Config<pos:position pos:line="44" pos:column="69"/></name><operator pos:line="44" pos:column="69">.<pos:position pos:line="44" pos:column="70"/></operator><name pos:line="44" pos:column="70">adminEmail<pos:position pos:line="44" pos:column="80"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="82">filename<pos:position pos:line="44" pos:column="90"/></name></expr></argument>)<pos:position pos:line="44" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="92"/></expr_stmt>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><call><name pos:line="45" pos:column="9">system<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">command<pos:position pos:line="45" pos:column="23"/></name></expr></argument>)<pos:position pos:line="45" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="25"/></condition><then pos:line="45" pos:column="25"> <block pos:line="45" pos:column="26">{}<pos:position pos:line="45" pos:column="28"/></block></then></if>     <comment type="block" pos:line="45" pos:column="33">/* XXX should avoid system(3) */</comment>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">unlink<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><name pos:line="46" pos:column="12">filename<pos:position pos:line="46" pos:column="20"/></name></expr></argument>)<pos:position pos:line="46" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt>
<cpp:if pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">if<pos:position pos:line="47" pos:column="4"/></cpp:directive> <expr><operator pos:line="47" pos:column="5">!<pos:position pos:line="47" pos:column="6"/></operator><name pos:line="47" pos:column="6">HAVE_MKSTEMP<pos:position pos:line="47" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">xfree<pos:position pos:line="48" pos:column="10"/></name><argument_list pos:line="48" pos:column="10">(<argument><expr><name pos:line="48" pos:column="11">filename<pos:position pos:line="48" pos:column="19"/></name></expr></argument>)<pos:position pos:line="48" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="21"/></expr_stmt> <comment type="line" pos:line="48" pos:column="22">// tempnam() requires us to free its allocation</comment>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
