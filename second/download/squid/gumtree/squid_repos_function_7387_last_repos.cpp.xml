<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7387_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">PeerConnector<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">prepareSocket<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">()<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">83<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="19">serverConnection<pos:position pos:line="4" pos:column="35"/></name><argument_list pos:line="4" pos:column="35">()<pos:position pos:line="4" pos:column="37"/></argument_list></call> <operator pos:line="4" pos:column="38">&lt;&lt;<pos:position pos:line="4" pos:column="46"/></operator> <literal type="string" pos:line="4" pos:column="41">", this="<pos:position pos:line="4" pos:column="50"/></literal> <operator pos:line="4" pos:column="51">&lt;&lt;<pos:position pos:line="4" pos:column="59"/></operator> <operator pos:line="4" pos:column="54">(<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">void<pos:position pos:line="4" pos:column="59"/></name><operator pos:line="4" pos:column="59">*<pos:position pos:line="4" pos:column="60"/></operator><operator pos:line="4" pos:column="60">)<pos:position pos:line="4" pos:column="61"/></operator><name pos:line="4" pos:column="61">this<pos:position pos:line="4" pos:column="65"/></name></expr></argument>)<pos:position pos:line="4" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="67"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><call><name><name pos:line="5" pos:column="10">Comm<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">::<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">IsConnOpen<pos:position pos:line="5" pos:column="26"/></name></name><argument_list pos:line="5" pos:column="26">(<argument><expr><call><name pos:line="5" pos:column="27">serverConnection<pos:position pos:line="5" pos:column="43"/></name><argument_list pos:line="5" pos:column="43">()<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="46"/></argument_list></call> <operator pos:line="5" pos:column="47">||<pos:position pos:line="5" pos:column="49"/></operator> <name><name pos:line="5" pos:column="50">fd_table<pos:position pos:line="5" pos:column="58"/></name><index pos:line="5" pos:column="58">[<expr><call><name pos:line="5" pos:column="59">serverConnection<pos:position pos:line="5" pos:column="75"/></name><argument_list pos:line="5" pos:column="75">()<pos:position pos:line="5" pos:column="77"/></argument_list></call><operator pos:line="5" pos:column="77">-&gt;<pos:position pos:line="5" pos:column="82"/></operator><name pos:line="5" pos:column="79">fd<pos:position pos:line="5" pos:column="81"/></name></expr>]<pos:position pos:line="5" pos:column="82"/></index></name><operator pos:line="5" pos:column="82">.<pos:position pos:line="5" pos:column="83"/></operator><call><name pos:line="5" pos:column="83">closing<pos:position pos:line="5" pos:column="90"/></name><argument_list pos:line="5" pos:column="90">()<pos:position pos:line="5" pos:column="92"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="93"/></condition><then pos:line="5" pos:column="93"> <block pos:line="5" pos:column="94">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">connectionClosed<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><literal type="string" pos:line="6" pos:column="26">"Security::PeerConnector::prepareSocket"<pos:position pos:line="6" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="68"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">83<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">5<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="19">serverConnection<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">()<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>

    <comment type="line" pos:line="12" pos:column="5">// watch for external connection closures</comment>
    <typedef pos:line="13" pos:column="5">typedef <type><name><name pos:line="13" pos:column="13">CommCbMemFunT<pos:position pos:line="13" pos:column="26"/></name><argument_list type="generic" pos:line="13" pos:column="26">&lt;<argument><expr><name><name pos:line="13" pos:column="27">Security<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">::<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">PeerConnector<pos:position pos:line="13" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="52">CommCloseCbParams<pos:position pos:line="13" pos:column="69"/></name></expr></argument>&gt;<pos:position pos:line="13" pos:column="73"/></argument_list></name></type> <name pos:line="13" pos:column="71">Dialer<pos:position pos:line="13" pos:column="77"/></name>;<pos:position pos:line="13" pos:column="78"/></typedef>
    <expr_stmt><expr><name pos:line="14" pos:column="5">closeHandler<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <call><name pos:line="14" pos:column="20">JobCallback<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><literal type="number" pos:line="14" pos:column="32">9<pos:position pos:line="14" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="35">5<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">Dialer<pos:position pos:line="14" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="46">this<pos:position pos:line="14" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="52">Security<pos:position pos:line="14" pos:column="60"/></name><operator pos:line="14" pos:column="60">::<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="62">PeerConnector<pos:position pos:line="14" pos:column="75"/></name><operator pos:line="14" pos:column="75">::<pos:position pos:line="14" pos:column="77"/></operator><name pos:line="14" pos:column="77">commCloseHandler<pos:position pos:line="14" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="95"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">comm_add_close_handler<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><call><name pos:line="15" pos:column="28">serverConnection<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">()<pos:position pos:line="15" pos:column="46"/></argument_list></call><operator pos:line="15" pos:column="46">-&gt;<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="48">fd<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="52">closeHandler<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="66"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><literal type="boolean" pos:line="16" pos:column="12">true<pos:position pos:line="16" pos:column="16"/></literal></expr>;<pos:position pos:line="16" pos:column="17"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
