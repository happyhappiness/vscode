<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1455.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeader<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">addVia<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name><name pos:line="2" pos:column="26">AnyP<pos:position pos:line="2" pos:column="30"/></name><operator pos:line="2" pos:column="30">::<pos:position pos:line="2" pos:column="32"/></operator><name pos:line="2" pos:column="32">ProtocolVersion<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">ver<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">HttpHeader<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">from<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// TODO: do not add Via header for messages where Squid itself</comment>
    <comment type="line" pos:line="5" pos:column="5">// generated the message (i.e., Downloader or ESI) there should be no Via header added at all.</comment>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">Config<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">onoff<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">.<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">via<pos:position pos:line="7" pos:column="25"/></name></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <block pos:line="7" pos:column="27">{
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">SBuf<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">buf<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
        <comment type="line" pos:line="9" pos:column="9">// RFC 7230 section 5.7.1.: protocol-name is omitted when</comment>
        <comment type="line" pos:line="10" pos:column="9">// the received protocol is HTTP.</comment>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">ver<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">protocol<pos:position pos:line="11" pos:column="25"/></name></name> <operator pos:line="11" pos:column="26">&gt;<pos:position pos:line="11" pos:column="30"/></operator> <name><name pos:line="11" pos:column="28">AnyP<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">::<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">PROTO_NONE<pos:position pos:line="11" pos:column="44"/></name></name> <operator pos:line="11" pos:column="45">&amp;&amp;<pos:position pos:line="11" pos:column="55"/></operator> <name><name pos:line="11" pos:column="48">ver<pos:position pos:line="11" pos:column="51"/></name><operator pos:line="11" pos:column="51">.<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="52">protocol<pos:position pos:line="11" pos:column="60"/></name></name> <operator pos:line="11" pos:column="61">&lt;<pos:position pos:line="11" pos:column="65"/></operator> <name><name pos:line="11" pos:column="63">AnyP<pos:position pos:line="11" pos:column="67"/></name><operator pos:line="11" pos:column="67">::<pos:position pos:line="11" pos:column="69"/></operator><name pos:line="11" pos:column="69">PROTO_UNKNOWN<pos:position pos:line="11" pos:column="82"/></name></name> <operator pos:line="11" pos:column="83">&amp;&amp;<pos:position pos:line="11" pos:column="93"/></operator>
                <name><name pos:line="12" pos:column="17">ver<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">.<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">protocol<pos:position pos:line="12" pos:column="29"/></name></name> <operator pos:line="12" pos:column="30">!=<pos:position pos:line="12" pos:column="32"/></operator> <name><name pos:line="12" pos:column="33">AnyP<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">::<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="39">PROTO_HTTP<pos:position pos:line="12" pos:column="49"/></name></name> <operator pos:line="12" pos:column="50">&amp;&amp;<pos:position pos:line="12" pos:column="60"/></operator> <name><name pos:line="12" pos:column="53">ver<pos:position pos:line="12" pos:column="56"/></name><operator pos:line="12" pos:column="56">.<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="57">protocol<pos:position pos:line="12" pos:column="65"/></name></name> <operator pos:line="12" pos:column="66">!=<pos:position pos:line="12" pos:column="68"/></operator> <name><name pos:line="12" pos:column="69">AnyP<pos:position pos:line="12" pos:column="73"/></name><operator pos:line="12" pos:column="73">::<pos:position pos:line="12" pos:column="75"/></operator><name pos:line="12" pos:column="75">PROTO_HTTPS<pos:position pos:line="12" pos:column="86"/></name></name></expr>)<pos:position pos:line="12" pos:column="87"/></condition><then pos:line="12" pos:column="87">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="13" pos:column="13">buf<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">.<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">appendf<pos:position pos:line="13" pos:column="24"/></name></name><argument_list pos:line="13" pos:column="24">(<argument><expr><literal type="string" pos:line="13" pos:column="25">"%s/"<pos:position pos:line="13" pos:column="30"/></literal></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="32">AnyP<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">::<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">ProtocolType_str<pos:position pos:line="13" pos:column="54"/></name><index pos:line="13" pos:column="54">[<expr><name><name pos:line="13" pos:column="55">ver<pos:position pos:line="13" pos:column="58"/></name><operator pos:line="13" pos:column="58">.<pos:position pos:line="13" pos:column="59"/></operator><name pos:line="13" pos:column="59">protocol<pos:position pos:line="13" pos:column="67"/></name></name></expr>]<pos:position pos:line="13" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="70"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="14" pos:column="9">buf<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">.<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">appendf<pos:position pos:line="14" pos:column="20"/></name></name><argument_list pos:line="14" pos:column="20">(<argument><expr><literal type="string" pos:line="14" pos:column="21">"%d.%d %s"<pos:position pos:line="14" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="33">ver<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">.<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">major<pos:position pos:line="14" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="44">ver<pos:position pos:line="14" pos:column="47"/></name><operator pos:line="14" pos:column="47">.<pos:position pos:line="14" pos:column="48"/></operator><name pos:line="14" pos:column="48">minor<pos:position pos:line="14" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="55">ThisCache<pos:position pos:line="14" pos:column="64"/></name></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <name pos:line="15" pos:column="15">HttpHeader<pos:position pos:line="15" pos:column="25"/></name> <modifier pos:line="15" pos:column="26">*<pos:position pos:line="15" pos:column="27"/></modifier></type><name pos:line="15" pos:column="27">hdr<pos:position pos:line="15" pos:column="30"/></name> <init pos:line="15" pos:column="31">= <expr><ternary><condition><expr><name pos:line="15" pos:column="33">from<pos:position pos:line="15" pos:column="37"/></name></expr> ?<pos:position pos:line="15" pos:column="39"/></condition><then pos:line="15" pos:column="39"> <expr><name pos:line="15" pos:column="40">from<pos:position pos:line="15" pos:column="44"/></name></expr> <pos:position pos:line="15" pos:column="45"/></then><else pos:line="15" pos:column="45">: <expr><name pos:line="15" pos:column="47">this<pos:position pos:line="15" pos:column="51"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="15" pos:column="52"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">SBuf<pos:position pos:line="16" pos:column="13"/></name></type> <name pos:line="16" pos:column="14">strVia<pos:position pos:line="16" pos:column="20"/></name> <init pos:line="16" pos:column="21">= <expr><call><name pos:line="16" pos:column="23">StringToSBuf<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><call><name><name pos:line="16" pos:column="36">hdr<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">-&gt;<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="41">getList<pos:position pos:line="16" pos:column="48"/></name></name><argument_list pos:line="16" pos:column="48">(<argument><expr><name><name pos:line="16" pos:column="49">Http<pos:position pos:line="16" pos:column="53"/></name><operator pos:line="16" pos:column="53">::<pos:position pos:line="16" pos:column="55"/></operator><name pos:line="16" pos:column="55">HdrType<pos:position pos:line="16" pos:column="62"/></name><operator pos:line="16" pos:column="62">::<pos:position pos:line="16" pos:column="64"/></operator><name pos:line="16" pos:column="64">VIA<pos:position pos:line="16" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="70"/></decl_stmt>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><call><name><name pos:line="17" pos:column="14">strVia<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">.<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">isEmpty<pos:position pos:line="17" pos:column="28"/></name></name><argument_list pos:line="17" pos:column="28">()<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="18" pos:column="13">strVia<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">.<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">append<pos:position pos:line="18" pos:column="26"/></name></name><argument_list pos:line="18" pos:column="26">(<argument><expr><literal type="string" pos:line="18" pos:column="27">", "<pos:position pos:line="18" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="33">2<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="19" pos:column="9">strVia<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">append<pos:position pos:line="19" pos:column="22"/></name></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">buf<pos:position pos:line="19" pos:column="26"/></name></expr></argument>)<pos:position pos:line="19" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
        <comment type="line" pos:line="20" pos:column="9">// XXX: putStr() still suffers from String size limits</comment>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">Must<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><call><name><name pos:line="21" pos:column="14">strVia<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">.<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="21">length<pos:position pos:line="21" pos:column="27"/></name></name><argument_list pos:line="21" pos:column="27">()<pos:position pos:line="21" pos:column="29"/></argument_list></call> <operator pos:line="21" pos:column="30">&lt;<pos:position pos:line="21" pos:column="34"/></operator> <call><name><name pos:line="21" pos:column="32">String<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">::<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="40">SizeMaxXXX<pos:position pos:line="21" pos:column="50"/></name></name><argument_list pos:line="21" pos:column="50">()<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">delById<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name><name pos:line="22" pos:column="17">Http<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">::<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">HdrType<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">::<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="32">VIA<pos:position pos:line="22" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">putStr<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name><name pos:line="23" pos:column="16">Http<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">::<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">HdrType<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">::<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="31">VIA<pos:position pos:line="23" pos:column="34"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="23" pos:column="36">strVia<pos:position pos:line="23" pos:column="42"/></name><operator pos:line="23" pos:column="42">.<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="43">c_str<pos:position pos:line="23" pos:column="48"/></name></name><argument_list pos:line="23" pos:column="48">()<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
