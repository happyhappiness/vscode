<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3543_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">prepPartialBodyEchoing<pos:position pos:line="1" pos:column="55"/></name></name><parameter_list pos:line="1" pos:column="55">(<parameter><decl><type><name pos:line="1" pos:column="56">uint64_t<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">pos<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><call><name><name pos:line="3" pos:column="10">virginBodySending<pos:position pos:line="3" pos:column="27"/></name><operator pos:line="3" pos:column="27">.<pos:position pos:line="3" pos:column="28"/></operator><name pos:line="3" pos:column="28">active<pos:position pos:line="3" pos:column="34"/></name></name><argument_list pos:line="3" pos:column="34">()<pos:position pos:line="3" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name><name pos:line="4" pos:column="10">virgin<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">.<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">header<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">-&gt;<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="25">body_pipe<pos:position pos:line="4" pos:column="34"/></name></name> <operator pos:line="4" pos:column="35">!=<pos:position pos:line="4" pos:column="37"/></operator> <name pos:line="4" pos:column="38">NULL<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">setOutcome<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">xoPartEcho<pos:position pos:line="6" pos:column="26"/></name></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">93<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">7<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="19">HERE<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">&lt;&lt;<pos:position pos:line="8" pos:column="32"/></operator> <literal type="string" pos:line="8" pos:column="27">"will echo virgin body suffix from "<pos:position pos:line="8" pos:column="63"/></literal> <operator pos:line="8" pos:column="64">&lt;&lt;<pos:position pos:line="8" pos:column="72"/></operator>
           <name><name pos:line="9" pos:column="12">virgin<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">header<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">body_pipe<pos:position pos:line="9" pos:column="36"/></name></name> <operator pos:line="9" pos:column="37">&lt;&lt;<pos:position pos:line="9" pos:column="45"/></operator> <literal type="string" pos:line="9" pos:column="40">" offset "<pos:position pos:line="9" pos:column="50"/></literal> <operator pos:line="9" pos:column="51">&lt;&lt;<pos:position pos:line="9" pos:column="59"/></operator> <name pos:line="9" pos:column="54">pos<pos:position pos:line="9" pos:column="57"/></name></expr></argument> )<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>

    <comment type="line" pos:line="11" pos:column="5">// check that use-original-body=N does not point beyond buffered data</comment>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">uint64_t<pos:position pos:line="12" pos:column="19"/></name></type> <name pos:line="12" pos:column="20">virginDataEnd<pos:position pos:line="12" pos:column="33"/></name> <init pos:line="12" pos:column="34">= <expr><name pos:line="12" pos:column="36">virginConsumed<pos:position pos:line="12" pos:column="50"/></name> <operator pos:line="12" pos:column="51">+<pos:position pos:line="12" pos:column="52"/></operator>
                                   <call><name><name pos:line="13" pos:column="36">virgin<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">.<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="43">body_pipe<pos:position pos:line="13" pos:column="52"/></name><operator pos:line="13" pos:column="52">-&gt;<pos:position pos:line="13" pos:column="57"/></operator><name pos:line="13" pos:column="54">buf<pos:position pos:line="13" pos:column="57"/></name></name><argument_list pos:line="13" pos:column="57">()<pos:position pos:line="13" pos:column="59"/></argument_list></call><operator pos:line="13" pos:column="59">.<pos:position pos:line="13" pos:column="60"/></operator><call><name pos:line="13" pos:column="60">contentSize<pos:position pos:line="13" pos:column="71"/></name><argument_list pos:line="13" pos:column="71">()<pos:position pos:line="13" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="74"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">Must<pos:position pos:line="14" pos:column="9"/></name><argument_list pos:line="14" pos:column="9">(<argument><expr><name pos:line="14" pos:column="10">pos<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">&lt;=<pos:position pos:line="14" pos:column="19"/></operator> <name pos:line="14" pos:column="17">virginDataEnd<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">virginBodySending<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">.<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">progress<pos:position pos:line="15" pos:column="31"/></name></name><argument_list pos:line="15" pos:column="31">(<argument><expr><cast type="static" pos:line="15" pos:column="32">static_cast<argument_list type="generic" pos:line="15" pos:column="43">&lt;<argument><expr><name pos:line="15" pos:column="44">size_t<pos:position pos:line="15" pos:column="50"/></name></expr></argument>&gt;<pos:position pos:line="15" pos:column="54"/></argument_list><argument_list pos:line="15" pos:column="51">(<argument><expr><name pos:line="15" pos:column="52">pos<pos:position pos:line="15" pos:column="55"/></name></expr></argument>)<pos:position pos:line="15" pos:column="56"/></argument_list></cast></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="17" pos:column="5">state<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">.<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">sending<pos:position pos:line="17" pos:column="18"/></name></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <name><name pos:line="17" pos:column="21">State<pos:position pos:line="17" pos:column="26"/></name><operator pos:line="17" pos:column="26">::<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="28">sendingVirgin<pos:position pos:line="17" pos:column="41"/></name></name></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">checkConsuming<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">()<pos:position pos:line="18" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name><name pos:line="20" pos:column="9">virgin<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">.<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">header<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">body_pipe<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">bodySizeKnown<pos:position pos:line="20" pos:column="48"/></name></name><argument_list pos:line="20" pos:column="48">()<pos:position pos:line="20" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="51"/></condition><then pos:line="20" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="21" pos:column="9">adapted<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">.<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">body_pipe<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">-&gt;<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="28">expectProductionEndAfter<pos:position pos:line="21" pos:column="52"/></name></name><argument_list pos:line="21" pos:column="52">(<argument><expr><call><name><name pos:line="21" pos:column="53">virgin<pos:position pos:line="21" pos:column="59"/></name><operator pos:line="21" pos:column="59">.<pos:position pos:line="21" pos:column="60"/></operator><name pos:line="21" pos:column="60">header<pos:position pos:line="21" pos:column="66"/></name><operator pos:line="21" pos:column="66">-&gt;<pos:position pos:line="21" pos:column="71"/></operator><name pos:line="21" pos:column="68">body_pipe<pos:position pos:line="21" pos:column="77"/></name><operator pos:line="21" pos:column="77">-&gt;<pos:position pos:line="21" pos:column="82"/></operator><name pos:line="21" pos:column="79">bodySize<pos:position pos:line="21" pos:column="87"/></name></name><argument_list pos:line="21" pos:column="87">()<pos:position pos:line="21" pos:column="89"/></argument_list></call> <operator pos:line="21" pos:column="90">-<pos:position pos:line="21" pos:column="91"/></operator> <name pos:line="21" pos:column="92">pos<pos:position pos:line="21" pos:column="95"/></name></expr></argument>)<pos:position pos:line="21" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="97"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">debugs<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><literal type="number" pos:line="23" pos:column="12">93<pos:position pos:line="23" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="16">7<pos:position pos:line="23" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="19">HERE<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">&lt;&lt;<pos:position pos:line="23" pos:column="32"/></operator> <literal type="string" pos:line="23" pos:column="27">"will echo virgin body suffix to "<pos:position pos:line="23" pos:column="61"/></literal> <operator pos:line="23" pos:column="62">&lt;&lt;<pos:position pos:line="23" pos:column="70"/></operator>
           <name><name pos:line="24" pos:column="12">adapted<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">.<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">body_pipe<pos:position pos:line="24" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>

    <comment type="line" pos:line="26" pos:column="5">// Start echoing data</comment>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">echoMore<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">()<pos:position pos:line="27" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="16"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
