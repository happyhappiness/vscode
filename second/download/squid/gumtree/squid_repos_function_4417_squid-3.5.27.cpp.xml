<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4417_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Bio<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">sslFeatures<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">get<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">SSL<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">ssl<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">sslVersion<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">=<pos:position pos:line="4" pos:column="17"/></operator> <call><name pos:line="4" pos:column="18">SSL_version<pos:position pos:line="4" pos:column="29"/></name><argument_list pos:line="4" pos:column="29">(<argument><expr><name pos:line="4" pos:column="30">ssl<pos:position pos:line="4" pos:column="33"/></name></expr></argument>)<pos:position pos:line="4" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">83<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">7<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"SSL version: "<pos:position pos:line="5" pos:column="34"/></literal> <operator pos:line="5" pos:column="35">&lt;&lt;<pos:position pos:line="5" pos:column="43"/></operator> <call><name pos:line="5" pos:column="38">SSL_get_version<pos:position pos:line="5" pos:column="53"/></name><argument_list pos:line="5" pos:column="53">(<argument><expr><name pos:line="5" pos:column="54">ssl<pos:position pos:line="5" pos:column="57"/></name></expr></argument>)<pos:position pos:line="5" pos:column="58"/></argument_list></call> <operator pos:line="5" pos:column="59">&lt;&lt;<pos:position pos:line="5" pos:column="67"/></operator> <literal type="string" pos:line="5" pos:column="62">" ("<pos:position pos:line="5" pos:column="66"/></literal> <operator pos:line="5" pos:column="67">&lt;&lt;<pos:position pos:line="5" pos:column="75"/></operator> <name pos:line="5" pos:column="70">sslVersion<pos:position pos:line="5" pos:column="80"/></name> <operator pos:line="5" pos:column="81">&lt;&lt;<pos:position pos:line="5" pos:column="89"/></operator> <literal type="string" pos:line="5" pos:column="84">")"<pos:position pos:line="5" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="89"/></expr_stmt>

<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><call><name pos:line="7" pos:column="5">defined<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><name pos:line="7" pos:column="13">TLSEXT_NAMETYPE_host_name<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr></cpp:if>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">char<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">server<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><call><name pos:line="8" pos:column="30">SSL_get_servername<pos:position pos:line="8" pos:column="48"/></name><argument_list pos:line="8" pos:column="48">(<argument><expr><name pos:line="8" pos:column="49">ssl<pos:position pos:line="8" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="54">TLSEXT_NAMETYPE_host_name<pos:position pos:line="8" pos:column="79"/></name></expr></argument>)<pos:position pos:line="8" pos:column="80"/></argument_list></call></expr></init></decl>)<pos:position pos:line="8" pos:column="81"/></condition><then pos:line="8" pos:column="81">
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">serverName<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">server<pos:position pos:line="9" pos:column="28"/></name></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">83<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">7<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="19">"SNI server name: "<pos:position pos:line="10" pos:column="38"/></literal> <operator pos:line="10" pos:column="39">&lt;&lt;<pos:position pos:line="10" pos:column="47"/></operator> <name pos:line="10" pos:column="42">serverName<pos:position pos:line="10" pos:column="52"/></name></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><operator pos:line="13" pos:column="5">!<pos:position pos:line="13" pos:column="6"/></operator><call><name pos:line="13" pos:column="6">defined<pos:position pos:line="13" pos:column="13"/></name><argument_list pos:line="13" pos:column="13">(<argument><expr><name pos:line="13" pos:column="14">OPENSSL_NO_COMP<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr></cpp:if>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">ssl<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">session<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">-&gt;<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="23">compress_meth<pos:position pos:line="14" pos:column="36"/></name></name></expr>)<pos:position pos:line="14" pos:column="37"/></condition><then pos:line="14" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">compressMethod<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <name><name pos:line="15" pos:column="26">ssl<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">session<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">-&gt;<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="40">compress_meth<pos:position pos:line="15" pos:column="53"/></name></name></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt></block></then>
    <elseif pos:line="16" pos:column="5">else <if pos:line="16" pos:column="10">if <condition pos:line="16" pos:column="13">(<expr><name pos:line="16" pos:column="14">sslVersion<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">&gt;=<pos:position pos:line="16" pos:column="30"/></operator> <literal type="number" pos:line="16" pos:column="28">3<pos:position pos:line="16" pos:column="29"/></literal></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30"> <comment type="line" pos:line="16" pos:column="31">//if it is 3 or newer version then compression is disabled</comment>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="9">compressMethod<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="26">0<pos:position pos:line="18" pos:column="27"/></literal></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt></block></then></if></elseif></if>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">debugs<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="number" pos:line="19" pos:column="12">83<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="16">7<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="19">"SSL compression: "<pos:position pos:line="19" pos:column="38"/></literal> <operator pos:line="19" pos:column="39">&lt;&lt;<pos:position pos:line="19" pos:column="47"/></operator> <name pos:line="19" pos:column="42">compressMethod<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">STACK_OF<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><name pos:line="21" pos:column="14">SSL_CIPHER<pos:position pos:line="21" pos:column="24"/></name></expr></argument>)<pos:position pos:line="21" pos:column="25"/></argument_list></call> <operator pos:line="21" pos:column="26">*<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="28">ciphers<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">=<pos:position pos:line="21" pos:column="37"/></operator> <name pos:line="21" pos:column="38">NULL<pos:position pos:line="21" pos:column="42"/></name></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name><name pos:line="22" pos:column="9">ssl<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">server<pos:position pos:line="22" pos:column="20"/></name></name></expr>)<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="9">ciphers<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name><name pos:line="23" pos:column="19">ssl<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">session<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">-&gt;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="33">ciphers<pos:position pos:line="23" pos:column="40"/></name></name></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt></block></then>
    <else pos:line="24" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="9">ciphers<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <name><name pos:line="25" pos:column="19">ssl<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">-&gt;<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="24">cipher_list<pos:position pos:line="25" pos:column="35"/></name></name></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt></block></else></if>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">ciphers<pos:position pos:line="26" pos:column="16"/></name></expr>)<pos:position pos:line="26" pos:column="17"/></condition><then pos:line="26" pos:column="17"> <block pos:line="26" pos:column="18">{
        <for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><decl><type><name pos:line="27" pos:column="14">int<pos:position pos:line="27" pos:column="17"/></name></type> <name pos:line="27" pos:column="18">i<pos:position pos:line="27" pos:column="19"/></name> <init pos:line="27" pos:column="20">= <expr><literal type="number" pos:line="27" pos:column="22">0<pos:position pos:line="27" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="24"/></init> <condition><expr><name pos:line="27" pos:column="25">i<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">&lt;<pos:position pos:line="27" pos:column="31"/></operator> <call><name pos:line="27" pos:column="29">sk_SSL_CIPHER_num<pos:position pos:line="27" pos:column="46"/></name><argument_list pos:line="27" pos:column="46">(<argument><expr><name pos:line="27" pos:column="47">ciphers<pos:position pos:line="27" pos:column="54"/></name></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="56"/></condition> <incr><expr><operator pos:line="27" pos:column="57">++<pos:position pos:line="27" pos:column="59"/></operator><name pos:line="27" pos:column="59">i<pos:position pos:line="27" pos:column="60"/></name></expr></incr>)<pos:position pos:line="27" pos:column="61"/></control> <block pos:line="27" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="28" pos:column="13">SSL_CIPHER<pos:position pos:line="28" pos:column="23"/></name> <modifier pos:line="28" pos:column="24">*<pos:position pos:line="28" pos:column="25"/></modifier></type><name pos:line="28" pos:column="25">c<pos:position pos:line="28" pos:column="26"/></name> <init pos:line="28" pos:column="27">= <expr><call><name pos:line="28" pos:column="29">sk_SSL_CIPHER_value<pos:position pos:line="28" pos:column="48"/></name><argument_list pos:line="28" pos:column="48">(<argument><expr><name pos:line="28" pos:column="49">ciphers<pos:position pos:line="28" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">i<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="61"/></decl_stmt>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">c<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">!=<pos:position pos:line="29" pos:column="21"/></operator> <name pos:line="29" pos:column="22">NULL<pos:position pos:line="29" pos:column="26"/></name></expr>)<pos:position pos:line="29" pos:column="27"/></condition><then pos:line="29" pos:column="27"> <block pos:line="29" pos:column="28">{
                <if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><call><name><name pos:line="30" pos:column="22">clientRequestedCiphers<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">.<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="45">empty<pos:position pos:line="30" pos:column="50"/></name></name><argument_list pos:line="30" pos:column="50">()<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="31" pos:column="21">clientRequestedCiphers<pos:position pos:line="31" pos:column="43"/></name><operator pos:line="31" pos:column="43">.<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="44">append<pos:position pos:line="31" pos:column="50"/></name></name><argument_list pos:line="31" pos:column="50">(<argument><expr><literal type="string" pos:line="31" pos:column="51">":"<pos:position pos:line="31" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="56"/></expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name pos:line="32" pos:column="17">clientRequestedCiphers<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">.<pos:position pos:line="32" pos:column="40"/></operator><name pos:line="32" pos:column="40">append<pos:position pos:line="32" pos:column="46"/></name></name><argument_list pos:line="32" pos:column="46">(<argument><expr><name><name pos:line="32" pos:column="47">c<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">-&gt;<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="50">name<pos:position pos:line="32" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="56"/></expr_stmt>
            }<pos:position pos:line="33" pos:column="14"/></block></then></if>
        }<pos:position pos:line="34" pos:column="10"/></block></for>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">debugs<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="number" pos:line="36" pos:column="12">83<pos:position pos:line="36" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="16">7<pos:position pos:line="36" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="19">"Ciphers requested by client: "<pos:position pos:line="36" pos:column="50"/></literal> <operator pos:line="36" pos:column="51">&lt;&lt;<pos:position pos:line="36" pos:column="59"/></operator> <name pos:line="36" pos:column="54">clientRequestedCiphers<pos:position pos:line="36" pos:column="76"/></name></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="78"/></expr_stmt>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">sslVersion<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">&gt;=<pos:position pos:line="38" pos:column="25"/></operator><literal type="number" pos:line="38" pos:column="22">3<pos:position pos:line="38" pos:column="23"/></literal> <operator pos:line="38" pos:column="24">&amp;&amp;<pos:position pos:line="38" pos:column="34"/></operator> <name><name pos:line="38" pos:column="27">ssl<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">-&gt;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="32">s3<pos:position pos:line="38" pos:column="34"/></name></name> <operator pos:line="38" pos:column="35">&amp;&amp;<pos:position pos:line="38" pos:column="45"/></operator> <name><name pos:line="38" pos:column="38">ssl<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">-&gt;<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="43">s3<pos:position pos:line="38" pos:column="45"/></name><operator pos:line="38" pos:column="45">-&gt;<pos:position pos:line="38" pos:column="50"/></operator><name pos:line="38" pos:column="47">client_random<pos:position pos:line="38" pos:column="60"/></name><index pos:line="38" pos:column="60">[<expr><literal type="number" pos:line="38" pos:column="61">0<pos:position pos:line="38" pos:column="62"/></literal></expr>]<pos:position pos:line="38" pos:column="63"/></index></name></expr>)<pos:position pos:line="38" pos:column="64"/></condition><then pos:line="38" pos:column="64"> <block pos:line="38" pos:column="65">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">memcpy<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">client_random<pos:position pos:line="39" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="31">ssl<pos:position pos:line="39" pos:column="34"/></name><operator pos:line="39" pos:column="34">-&gt;<pos:position pos:line="39" pos:column="39"/></operator><name pos:line="39" pos:column="36">s3<pos:position pos:line="39" pos:column="38"/></name><operator pos:line="39" pos:column="38">-&gt;<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="40">client_random<pos:position pos:line="39" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="55">SSL3_RANDOM_SIZE<pos:position pos:line="39" pos:column="71"/></name></expr></argument>)<pos:position pos:line="39" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

<cpp:if pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">if<pos:position pos:line="42" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="42" pos:column="5">0<pos:position pos:line="42" pos:column="6"/></literal></expr></cpp:if> <comment type="block" pos:line="42" pos:column="7">/* XXX: OpenSSL 0.9.8k lacks at least some of these tlsext_* fields */</comment>
    <comment type="line" pos:line="43" pos:column="5">//The following extracted for logging purpuses:</comment>
    <comment type="line" pos:line="44" pos:column="5">// TLSEXT_TYPE_ec_point_formats</comment>
    unsigned char *p;
    int len;
    if (ssl-&gt;server) {
        p = ssl-&gt;session-&gt;tlsext_ecpointformatlist;
        len = ssl-&gt;session-&gt;tlsext_ecpointformatlist_length;
    } else {
        p = ssl-&gt;tlsext_ecpointformatlist;
        len = ssl-&gt;tlsext_ecpointformatlist_length;
    }
    if (p) {
        ecPointFormatList = objToString(p, len);
        debugs(83, 7, "tlsExtension ecPointFormatList of length " &lt;&lt; len &lt;&lt; " :" &lt;&lt; ecPointFormatList);
    }

    <comment type="line" pos:line="59" pos:column="5">// TLSEXT_TYPE_elliptic_curves</comment>
    if (ssl-&gt;server) {
        p = ssl-&gt;session-&gt;tlsext_ellipticcurvelist;
        len = ssl-&gt;session-&gt;tlsext_ellipticcurvelist_length;
    } else {
        p = ssl-&gt;tlsext_ellipticcurvelist;
        len = ssl-&gt;tlsext_ellipticcurvelist_length;
    }
    if (p) {
        ellipticCurves = objToString(p, len);
        debugs(83, 7, "tlsExtension ellipticCurveList of length " &lt;&lt;  len &lt;&lt;" :" &lt;&lt; ellipticCurves);
    }
    <comment type="line" pos:line="71" pos:column="5">// TLSEXT_TYPE_opaque_prf_input</comment>
    p = NULL;
    if (ssl-&gt;server) {
        if (ssl-&gt;s3 &amp;&amp;  ssl-&gt;s3-&gt;client_opaque_prf_input) {
            p = (unsigned char *)ssl-&gt;s3-&gt;client_opaque_prf_input;
            len = ssl-&gt;s3-&gt;client_opaque_prf_input_len;
        }
    } else {
        p = (unsigned char *)ssl-&gt;tlsext_opaque_prf_input;
        len = ssl-&gt;tlsext_opaque_prf_input_len;
    }
    if (p) {
        debugs(83, 7, "tlsExtension client-opaque-prf-input of length " &lt;&lt; len);
        opaquePrf = objToString(p, len);
    }
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif<pos:position pos:line="86" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="87" pos:column="5">initialized_<pos:position pos:line="87" pos:column="17"/></name> <operator pos:line="87" pos:column="18">=<pos:position pos:line="87" pos:column="19"/></operator> <literal type="boolean" pos:line="87" pos:column="20">true<pos:position pos:line="87" pos:column="24"/></literal></expr>;<pos:position pos:line="87" pos:column="25"/></expr_stmt>
    <return pos:line="88" pos:column="5">return <expr><literal type="boolean" pos:line="88" pos:column="12">true<pos:position pos:line="88" pos:column="16"/></literal></expr>;<pos:position pos:line="88" pos:column="17"/></return>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
