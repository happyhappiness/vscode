<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_901_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">commUnsetNonBlocking<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">fd<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="4" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">nonblocking<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">FALSE<pos:position pos:line="5" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">ioctlsocket<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">fd<pos:position pos:line="7" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="25">FIONBIO<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="34">(<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="35">unsigned<pos:position pos:line="7" pos:column="43"/></name> <name pos:line="7" pos:column="44">long<pos:position pos:line="7" pos:column="48"/></name> <operator pos:line="7" pos:column="49">*<pos:position pos:line="7" pos:column="50"/></operator><operator pos:line="7" pos:column="50">)<pos:position pos:line="7" pos:column="51"/></operator> <operator pos:line="7" pos:column="52">&amp;<pos:position pos:line="7" pos:column="57"/></operator><name pos:line="7" pos:column="53">nonblocking<pos:position pos:line="7" pos:column="64"/></name></expr></argument>)<pos:position pos:line="7" pos:column="65"/></argument_list></call> <operator pos:line="7" pos:column="66">&lt;<pos:position pos:line="7" pos:column="70"/></operator> <literal type="number" pos:line="7" pos:column="68">0<pos:position pos:line="7" pos:column="69"/></literal></expr>)<pos:position pos:line="7" pos:column="70"/></condition><then pos:line="7" pos:column="70"> <block pos:line="7" pos:column="71">{
<cpp:else pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">else<pos:position pos:line="8" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">flags<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">dummy<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">flags<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <call><name pos:line="12" pos:column="18">fcntl<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">fd<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="28">F_GETFL<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="37">dummy<pos:position pos:line="12" pos:column="42"/></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call><operator pos:line="12" pos:column="43">)<pos:position pos:line="12" pos:column="44"/></operator> <operator pos:line="12" pos:column="45">&lt;<pos:position pos:line="12" pos:column="49"/></operator> <literal type="number" pos:line="12" pos:column="47">0<pos:position pos:line="12" pos:column="48"/></literal></expr>)<pos:position pos:line="12" pos:column="49"/></condition><then pos:line="12" pos:column="49"> <block pos:line="12" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">50<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="20">0<pos:position pos:line="13" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"FD "<pos:position pos:line="13" pos:column="28"/></literal> <operator pos:line="13" pos:column="29">&lt;&lt;<pos:position pos:line="13" pos:column="37"/></operator> <name pos:line="13" pos:column="32">fd<pos:position pos:line="13" pos:column="34"/></name> <operator pos:line="13" pos:column="35">&lt;&lt;<pos:position pos:line="13" pos:column="43"/></operator> <literal type="string" pos:line="13" pos:column="38">": fcntl F_GETFL: "<pos:position pos:line="13" pos:column="57"/></literal> <operator pos:line="13" pos:column="58">&lt;&lt;<pos:position pos:line="13" pos:column="66"/></operator> <call><name pos:line="13" pos:column="61">xstrerror<pos:position pos:line="13" pos:column="70"/></name><argument_list pos:line="13" pos:column="70">()<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="74"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">COMM_ERROR<pos:position pos:line="14" pos:column="26"/></name></expr>;<pos:position pos:line="14" pos:column="27"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">fcntl<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name pos:line="17" pos:column="15">fd<pos:position pos:line="17" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="19">F_SETFL<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="28">flags<pos:position pos:line="17" pos:column="33"/></name> <operator pos:line="17" pos:column="34">&amp;<pos:position pos:line="17" pos:column="39"/></operator> <operator pos:line="17" pos:column="36">(<pos:position pos:line="17" pos:column="37"/></operator><operator pos:line="17" pos:column="37">~<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="38">SQUID_NONBLOCK<pos:position pos:line="17" pos:column="52"/></name><operator pos:line="17" pos:column="52">)<pos:position pos:line="17" pos:column="53"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call> <operator pos:line="17" pos:column="55">&lt;<pos:position pos:line="17" pos:column="59"/></operator> <literal type="number" pos:line="17" pos:column="57">0<pos:position pos:line="17" pos:column="58"/></literal></expr>)<pos:position pos:line="17" pos:column="59"/></condition><then pos:line="17" pos:column="59"> <block pos:line="17" pos:column="60">{
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">50<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="23">"commUnsetNonBlocking: FD "<pos:position pos:line="19" pos:column="50"/></literal> <operator pos:line="19" pos:column="51">&lt;&lt;<pos:position pos:line="19" pos:column="59"/></operator> <name pos:line="19" pos:column="54">fd<pos:position pos:line="19" pos:column="56"/></name> <operator pos:line="19" pos:column="57">&lt;&lt;<pos:position pos:line="19" pos:column="65"/></operator> <literal type="string" pos:line="19" pos:column="60">": "<pos:position pos:line="19" pos:column="64"/></literal> <operator pos:line="19" pos:column="65">&lt;&lt;<pos:position pos:line="19" pos:column="73"/></operator> <call><name pos:line="19" pos:column="68">xstrerror<pos:position pos:line="19" pos:column="77"/></name><argument_list pos:line="19" pos:column="77">()<pos:position pos:line="19" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="81"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">COMM_ERROR<pos:position pos:line="20" pos:column="26"/></name></expr>;<pos:position pos:line="20" pos:column="27"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="23" pos:column="5">fd_table<pos:position pos:line="23" pos:column="13"/></name><index pos:line="23" pos:column="13">[<expr><name pos:line="23" pos:column="14">fd<pos:position pos:line="23" pos:column="16"/></name></expr>]<pos:position pos:line="23" pos:column="17"/></index></name><operator pos:line="23" pos:column="17">.<pos:position pos:line="23" pos:column="18"/></operator><name><name pos:line="23" pos:column="18">flags<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">.<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">nonblocking<pos:position pos:line="23" pos:column="35"/></name></name> <operator pos:line="23" pos:column="36">=<pos:position pos:line="23" pos:column="37"/></operator> <literal type="number" pos:line="23" pos:column="38">0<pos:position pos:line="23" pos:column="39"/></literal></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><literal type="number" pos:line="24" pos:column="12">0<pos:position pos:line="24" pos:column="13"/></literal></expr>;<pos:position pos:line="24" pos:column="14"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></then></if>

<function><type><name pos:line="27" pos:column="1">void<pos:position pos:line="27" pos:column="5"/></name></type>
<name pos:line="28" pos:column="1">commSetCloseOnExec<pos:position pos:line="28" pos:column="19"/></name><parameter_list pos:line="28" pos:column="19">(<parameter><decl><type><name pos:line="28" pos:column="20">int<pos:position pos:line="28" pos:column="23"/></name></type> <name pos:line="28" pos:column="24">fd<pos:position pos:line="28" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="28" pos:column="27"/></parameter_list>
<block pos:line="29" pos:column="1">{
<cpp:ifdef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifdef<pos:position pos:line="30" pos:column="7"/></cpp:directive> <name pos:line="30" pos:column="8">FD_CLOEXEC<pos:position pos:line="30" pos:column="18"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">int<pos:position pos:line="31" pos:column="8"/></name></type> <name pos:line="31" pos:column="9">flags<pos:position pos:line="31" pos:column="14"/></name></decl>;<pos:position pos:line="31" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">int<pos:position pos:line="32" pos:column="8"/></name></type> <name pos:line="32" pos:column="9">dummy<pos:position pos:line="32" pos:column="14"/></name> <init pos:line="32" pos:column="15">= <expr><literal type="number" pos:line="32" pos:column="17">0<pos:position pos:line="32" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="19"/></decl_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">(<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">flags<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <call><name pos:line="34" pos:column="18">fcntl<pos:position pos:line="34" pos:column="23"/></name><argument_list pos:line="34" pos:column="23">(<argument><expr><name pos:line="34" pos:column="24">fd<pos:position pos:line="34" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="28">F_GETFD<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">dummy<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call><operator pos:line="34" pos:column="43">)<pos:position pos:line="34" pos:column="44"/></operator> <operator pos:line="34" pos:column="45">&lt;<pos:position pos:line="34" pos:column="49"/></operator> <literal type="number" pos:line="34" pos:column="47">0<pos:position pos:line="34" pos:column="48"/></literal></expr>)<pos:position pos:line="34" pos:column="49"/></condition><then pos:line="34" pos:column="49"> <block pos:line="34" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">50<pos:position pos:line="35" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="20">0<pos:position pos:line="35" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="23">"FD "<pos:position pos:line="35" pos:column="28"/></literal> <operator pos:line="35" pos:column="29">&lt;&lt;<pos:position pos:line="35" pos:column="37"/></operator> <name pos:line="35" pos:column="32">fd<pos:position pos:line="35" pos:column="34"/></name> <operator pos:line="35" pos:column="35">&lt;&lt;<pos:position pos:line="35" pos:column="43"/></operator> <literal type="string" pos:line="35" pos:column="38">": fcntl F_GETFD: "<pos:position pos:line="35" pos:column="57"/></literal> <operator pos:line="35" pos:column="58">&lt;&lt;<pos:position pos:line="35" pos:column="66"/></operator> <call><name pos:line="35" pos:column="61">xstrerror<pos:position pos:line="35" pos:column="70"/></name><argument_list pos:line="35" pos:column="70">()<pos:position pos:line="35" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="74"/></expr_stmt>
        <return pos:line="36" pos:column="9">return;<pos:position pos:line="36" pos:column="16"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name pos:line="39" pos:column="9">fcntl<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">fd<pos:position pos:line="39" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="19">F_SETFD<pos:position pos:line="39" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="28">flags<pos:position pos:line="39" pos:column="33"/></name> <operator pos:line="39" pos:column="34">|<pos:position pos:line="39" pos:column="35"/></operator> <name pos:line="39" pos:column="36">FD_CLOEXEC<pos:position pos:line="39" pos:column="46"/></name></expr></argument>)<pos:position pos:line="39" pos:column="47"/></argument_list></call> <operator pos:line="39" pos:column="48">&lt;<pos:position pos:line="39" pos:column="52"/></operator> <literal type="number" pos:line="39" pos:column="50">0<pos:position pos:line="39" pos:column="51"/></literal></expr>)<pos:position pos:line="39" pos:column="52"/></condition><then pos:line="39" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="9">debugs<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><literal type="number" pos:line="40" pos:column="16">50<pos:position pos:line="40" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="20">0<pos:position pos:line="40" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="23">"FD "<pos:position pos:line="40" pos:column="28"/></literal> <operator pos:line="40" pos:column="29">&lt;&lt;<pos:position pos:line="40" pos:column="37"/></operator> <name pos:line="40" pos:column="32">fd<pos:position pos:line="40" pos:column="34"/></name> <operator pos:line="40" pos:column="35">&lt;&lt;<pos:position pos:line="40" pos:column="43"/></operator> <literal type="string" pos:line="40" pos:column="38">": set close-on-exec failed: "<pos:position pos:line="40" pos:column="68"/></literal> <operator pos:line="40" pos:column="69">&lt;&lt;<pos:position pos:line="40" pos:column="77"/></operator> <call><name pos:line="40" pos:column="72">xstrerror<pos:position pos:line="40" pos:column="81"/></name><argument_list pos:line="40" pos:column="81">()<pos:position pos:line="40" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="85"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="42" pos:column="5">fd_table<pos:position pos:line="42" pos:column="13"/></name><index pos:line="42" pos:column="13">[<expr><name pos:line="42" pos:column="14">fd<pos:position pos:line="42" pos:column="16"/></name></expr>]<pos:position pos:line="42" pos:column="17"/></index></name><operator pos:line="42" pos:column="17">.<pos:position pos:line="42" pos:column="18"/></operator><name><name pos:line="42" pos:column="18">flags<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">.<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="24">close_on_exec<pos:position pos:line="42" pos:column="37"/></name></name> <operator pos:line="42" pos:column="38">=<pos:position pos:line="42" pos:column="39"/></operator> <literal type="number" pos:line="42" pos:column="40">1<pos:position pos:line="42" pos:column="41"/></literal></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>

<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="45" pos:column="2"/></block></function>

<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">TCP_NODELAY<pos:position pos:line="47" pos:column="19"/></name></cpp:ifdef>
<function><specifier pos:line="48" pos:column="1">static<pos:position pos:line="48" pos:column="7"/></specifier> <type><name pos:line="48" pos:column="8">void<pos:position pos:line="48" pos:column="12"/></name></type>
<name pos:line="49" pos:column="1">commSetTcpNoDelay<pos:position pos:line="49" pos:column="18"/></name><parameter_list pos:line="49" pos:column="18">(<parameter><decl><type><name pos:line="49" pos:column="19">int<pos:position pos:line="49" pos:column="22"/></name></type> <name pos:line="49" pos:column="23">fd<pos:position pos:line="49" pos:column="25"/></name></decl></parameter>)<pos:position pos:line="49" pos:column="26"/></parameter_list>
<block pos:line="50" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">int<pos:position pos:line="51" pos:column="8"/></name></type> <name pos:line="51" pos:column="9">on<pos:position pos:line="51" pos:column="11"/></name> <init pos:line="51" pos:column="12">= <expr><literal type="number" pos:line="51" pos:column="14">1<pos:position pos:line="51" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="51" pos:column="16"/></decl_stmt>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><call><name pos:line="53" pos:column="9">setsockopt<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">fd<pos:position pos:line="53" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="24">IPPROTO_TCP<pos:position pos:line="53" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="37">TCP_NODELAY<pos:position pos:line="53" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="50">(<pos:position pos:line="53" pos:column="51"/></operator><name pos:line="53" pos:column="51">char<pos:position pos:line="53" pos:column="55"/></name> <operator pos:line="53" pos:column="56">*<pos:position pos:line="53" pos:column="57"/></operator><operator pos:line="53" pos:column="57">)<pos:position pos:line="53" pos:column="58"/></operator> <operator pos:line="53" pos:column="59">&amp;<pos:position pos:line="53" pos:column="64"/></operator><name pos:line="53" pos:column="60">on<pos:position pos:line="53" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="64">sizeof<argument_list pos:line="53" pos:column="70">(<argument><expr><name pos:line="53" pos:column="71">on<pos:position pos:line="53" pos:column="73"/></name></expr></argument>)<pos:position pos:line="53" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></call> <operator pos:line="53" pos:column="76">&lt;<pos:position pos:line="53" pos:column="80"/></operator> <literal type="number" pos:line="53" pos:column="78">0<pos:position pos:line="53" pos:column="79"/></literal></expr>)<pos:position pos:line="53" pos:column="80"/></condition><then pos:line="53" pos:column="80">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="9">debugs<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><literal type="number" pos:line="54" pos:column="16">50<pos:position pos:line="54" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="20">DBG_IMPORTANT<pos:position pos:line="54" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="35">"commSetTcpNoDelay: FD "<pos:position pos:line="54" pos:column="59"/></literal> <operator pos:line="54" pos:column="60">&lt;&lt;<pos:position pos:line="54" pos:column="68"/></operator> <name pos:line="54" pos:column="63">fd<pos:position pos:line="54" pos:column="65"/></name> <operator pos:line="54" pos:column="66">&lt;&lt;<pos:position pos:line="54" pos:column="74"/></operator> <literal type="string" pos:line="54" pos:column="69">": "<pos:position pos:line="54" pos:column="73"/></literal> <operator pos:line="54" pos:column="74">&lt;&lt;<pos:position pos:line="54" pos:column="82"/></operator> <call><name pos:line="54" pos:column="77">xstrerror<pos:position pos:line="54" pos:column="86"/></name><argument_list pos:line="54" pos:column="86">()<pos:position pos:line="54" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="90"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="56" pos:column="5">fd_table<pos:position pos:line="56" pos:column="13"/></name><index pos:line="56" pos:column="13">[<expr><name pos:line="56" pos:column="14">fd<pos:position pos:line="56" pos:column="16"/></name></expr>]<pos:position pos:line="56" pos:column="17"/></index></name><operator pos:line="56" pos:column="17">.<pos:position pos:line="56" pos:column="18"/></operator><name><name pos:line="56" pos:column="18">flags<pos:position pos:line="56" pos:column="23"/></name><operator pos:line="56" pos:column="23">.<pos:position pos:line="56" pos:column="24"/></operator><name pos:line="56" pos:column="24">nodelay<pos:position pos:line="56" pos:column="31"/></name></name> <operator pos:line="56" pos:column="32">=<pos:position pos:line="56" pos:column="33"/></operator> <literal type="number" pos:line="56" pos:column="34">1<pos:position pos:line="56" pos:column="35"/></literal></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
}<pos:position pos:line="57" pos:column="2"/></block></function>

<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>

<function><type><name pos:line="61" pos:column="1">void<pos:position pos:line="61" pos:column="5"/></name></type>
<name pos:line="62" pos:column="1">commSetTcpKeepalive<pos:position pos:line="62" pos:column="20"/></name><parameter_list pos:line="62" pos:column="20">(<parameter><decl><type><name pos:line="62" pos:column="21">int<pos:position pos:line="62" pos:column="24"/></name></type> <name pos:line="62" pos:column="25">fd<pos:position pos:line="62" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="62" pos:column="29">int<pos:position pos:line="62" pos:column="32"/></name></type> <name pos:line="62" pos:column="33">idle<pos:position pos:line="62" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="62" pos:column="39">int<pos:position pos:line="62" pos:column="42"/></name></type> <name pos:line="62" pos:column="43">interval<pos:position pos:line="62" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="62" pos:column="53">int<pos:position pos:line="62" pos:column="56"/></name></type> <name pos:line="62" pos:column="57">timeout<pos:position pos:line="62" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="62" pos:column="65"/></parameter_list>
<block pos:line="63" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="64" pos:column="5">int<pos:position pos:line="64" pos:column="8"/></name></type> <name pos:line="64" pos:column="9">on<pos:position pos:line="64" pos:column="11"/></name> <init pos:line="64" pos:column="12">= <expr><literal type="number" pos:line="64" pos:column="14">1<pos:position pos:line="64" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="64" pos:column="16"/></decl_stmt>
<cpp:ifdef pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">ifdef<pos:position pos:line="65" pos:column="7"/></cpp:directive> <name pos:line="65" pos:column="8">TCP_KEEPCNT<pos:position pos:line="65" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><name pos:line="66" pos:column="9">timeout<pos:position pos:line="66" pos:column="16"/></name> <operator pos:line="66" pos:column="17">&amp;&amp;<pos:position pos:line="66" pos:column="27"/></operator> <name pos:line="66" pos:column="20">interval<pos:position pos:line="66" pos:column="28"/></name></expr>)<pos:position pos:line="66" pos:column="29"/></condition><then pos:line="66" pos:column="29"> <block pos:line="66" pos:column="30">{
        <decl_stmt><decl><type><name pos:line="67" pos:column="9">int<pos:position pos:line="67" pos:column="12"/></name></type> <name pos:line="67" pos:column="13">count<pos:position pos:line="67" pos:column="18"/></name> <init pos:line="67" pos:column="19">= <expr><operator pos:line="67" pos:column="21">(<pos:position pos:line="67" pos:column="22"/></operator><name pos:line="67" pos:column="22">timeout<pos:position pos:line="67" pos:column="29"/></name> <operator pos:line="67" pos:column="30">+<pos:position pos:line="67" pos:column="31"/></operator> <name pos:line="67" pos:column="32">interval<pos:position pos:line="67" pos:column="40"/></name> <operator pos:line="67" pos:column="41">-<pos:position pos:line="67" pos:column="42"/></operator> <literal type="number" pos:line="67" pos:column="43">1<pos:position pos:line="67" pos:column="44"/></literal><operator pos:line="67" pos:column="44">)<pos:position pos:line="67" pos:column="45"/></operator> <operator pos:line="67" pos:column="46">/<pos:position pos:line="67" pos:column="47"/></operator> <name pos:line="67" pos:column="48">interval<pos:position pos:line="67" pos:column="56"/></name></expr></init></decl>;<pos:position pos:line="67" pos:column="57"/></decl_stmt>
        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><call><name pos:line="68" pos:column="13">setsockopt<pos:position pos:line="68" pos:column="23"/></name><argument_list pos:line="68" pos:column="23">(<argument><expr><name pos:line="68" pos:column="24">fd<pos:position pos:line="68" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="28">IPPROTO_TCP<pos:position pos:line="68" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="41">TCP_KEEPCNT<pos:position pos:line="68" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="54">&amp;<pos:position pos:line="68" pos:column="59"/></operator><name pos:line="68" pos:column="55">count<pos:position pos:line="68" pos:column="60"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="62">sizeof<argument_list pos:line="68" pos:column="68">(<argument><expr><name pos:line="68" pos:column="69">on<pos:position pos:line="68" pos:column="71"/></name></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="68" pos:column="73"/></argument_list></call> <operator pos:line="68" pos:column="74">&lt;<pos:position pos:line="68" pos:column="78"/></operator> <literal type="number" pos:line="68" pos:column="76">0<pos:position pos:line="68" pos:column="77"/></literal></expr>)<pos:position pos:line="68" pos:column="78"/></condition><then pos:line="68" pos:column="78">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="13">debugs<pos:position pos:line="69" pos:column="19"/></name><argument_list pos:line="69" pos:column="19">(<argument><expr><literal type="number" pos:line="69" pos:column="20">5<pos:position pos:line="69" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="23">DBG_IMPORTANT<pos:position pos:line="69" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="38">"commSetKeepalive: FD "<pos:position pos:line="69" pos:column="61"/></literal> <operator pos:line="69" pos:column="62">&lt;&lt;<pos:position pos:line="69" pos:column="70"/></operator> <name pos:line="69" pos:column="65">fd<pos:position pos:line="69" pos:column="67"/></name> <operator pos:line="69" pos:column="68">&lt;&lt;<pos:position pos:line="69" pos:column="76"/></operator> <literal type="string" pos:line="69" pos:column="71">": "<pos:position pos:line="69" pos:column="75"/></literal> <operator pos:line="69" pos:column="76">&lt;&lt;<pos:position pos:line="69" pos:column="84"/></operator> <call><name pos:line="69" pos:column="79">xstrerror<pos:position pos:line="69" pos:column="88"/></name><argument_list pos:line="69" pos:column="88">()<pos:position pos:line="69" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="69" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="92"/></expr_stmt></block></then></if>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>
<cpp:endif pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">endif<pos:position pos:line="71" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">ifdef<pos:position pos:line="72" pos:column="7"/></cpp:directive> <name pos:line="72" pos:column="8">TCP_KEEPIDLE<pos:position pos:line="72" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">idle<pos:position pos:line="73" pos:column="13"/></name></expr>)<pos:position pos:line="73" pos:column="14"/></condition><then pos:line="73" pos:column="14"> <block pos:line="73" pos:column="15">{
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><call><name pos:line="74" pos:column="13">setsockopt<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name pos:line="74" pos:column="24">fd<pos:position pos:line="74" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="28">IPPROTO_TCP<pos:position pos:line="74" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="41">TCP_KEEPIDLE<pos:position pos:line="74" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="55">&amp;<pos:position pos:line="74" pos:column="60"/></operator><name pos:line="74" pos:column="56">idle<pos:position pos:line="74" pos:column="60"/></name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="62">sizeof<argument_list pos:line="74" pos:column="68">(<argument><expr><name pos:line="74" pos:column="69">on<pos:position pos:line="74" pos:column="71"/></name></expr></argument>)<pos:position pos:line="74" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="73"/></argument_list></call> <operator pos:line="74" pos:column="74">&lt;<pos:position pos:line="74" pos:column="78"/></operator> <literal type="number" pos:line="74" pos:column="76">0<pos:position pos:line="74" pos:column="77"/></literal></expr>)<pos:position pos:line="74" pos:column="78"/></condition><then pos:line="74" pos:column="78">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="13">debugs<pos:position pos:line="75" pos:column="19"/></name><argument_list pos:line="75" pos:column="19">(<argument><expr><literal type="number" pos:line="75" pos:column="20">5<pos:position pos:line="75" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="23">DBG_IMPORTANT<pos:position pos:line="75" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="38">"commSetKeepalive: FD "<pos:position pos:line="75" pos:column="61"/></literal> <operator pos:line="75" pos:column="62">&lt;&lt;<pos:position pos:line="75" pos:column="70"/></operator> <name pos:line="75" pos:column="65">fd<pos:position pos:line="75" pos:column="67"/></name> <operator pos:line="75" pos:column="68">&lt;&lt;<pos:position pos:line="75" pos:column="76"/></operator> <literal type="string" pos:line="75" pos:column="71">": "<pos:position pos:line="75" pos:column="75"/></literal> <operator pos:line="75" pos:column="76">&lt;&lt;<pos:position pos:line="75" pos:column="84"/></operator> <call><name pos:line="75" pos:column="79">xstrerror<pos:position pos:line="75" pos:column="88"/></name><argument_list pos:line="75" pos:column="88">()<pos:position pos:line="75" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="75" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="92"/></expr_stmt></block></then></if>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>
<cpp:endif pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">endif<pos:position pos:line="77" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifdef<pos:position pos:line="78" pos:column="7"/></cpp:directive> <name pos:line="78" pos:column="8">TCP_KEEPINTVL<pos:position pos:line="78" pos:column="21"/></name></cpp:ifdef>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">interval<pos:position pos:line="79" pos:column="17"/></name></expr>)<pos:position pos:line="79" pos:column="18"/></condition><then pos:line="79" pos:column="18"> <block pos:line="79" pos:column="19">{
        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><call><name pos:line="80" pos:column="13">setsockopt<pos:position pos:line="80" pos:column="23"/></name><argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">fd<pos:position pos:line="80" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="28">IPPROTO_TCP<pos:position pos:line="80" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="41">TCP_KEEPINTVL<pos:position pos:line="80" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="56">&amp;<pos:position pos:line="80" pos:column="61"/></operator><name pos:line="80" pos:column="57">interval<pos:position pos:line="80" pos:column="65"/></name></expr></argument>, <argument><expr><sizeof pos:line="80" pos:column="67">sizeof<argument_list pos:line="80" pos:column="73">(<argument><expr><name pos:line="80" pos:column="74">on<pos:position pos:line="80" pos:column="76"/></name></expr></argument>)<pos:position pos:line="80" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="80" pos:column="78"/></argument_list></call> <operator pos:line="80" pos:column="79">&lt;<pos:position pos:line="80" pos:column="83"/></operator> <literal type="number" pos:line="80" pos:column="81">0<pos:position pos:line="80" pos:column="82"/></literal></expr>)<pos:position pos:line="80" pos:column="83"/></condition><then pos:line="80" pos:column="83">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="13">debugs<pos:position pos:line="81" pos:column="19"/></name><argument_list pos:line="81" pos:column="19">(<argument><expr><literal type="number" pos:line="81" pos:column="20">5<pos:position pos:line="81" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="23">DBG_IMPORTANT<pos:position pos:line="81" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="38">"commSetKeepalive: FD "<pos:position pos:line="81" pos:column="61"/></literal> <operator pos:line="81" pos:column="62">&lt;&lt;<pos:position pos:line="81" pos:column="70"/></operator> <name pos:line="81" pos:column="65">fd<pos:position pos:line="81" pos:column="67"/></name> <operator pos:line="81" pos:column="68">&lt;&lt;<pos:position pos:line="81" pos:column="76"/></operator> <literal type="string" pos:line="81" pos:column="71">": "<pos:position pos:line="81" pos:column="75"/></literal> <operator pos:line="81" pos:column="76">&lt;&lt;<pos:position pos:line="81" pos:column="84"/></operator> <call><name pos:line="81" pos:column="79">xstrerror<pos:position pos:line="81" pos:column="88"/></name><argument_list pos:line="81" pos:column="88">()<pos:position pos:line="81" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="81" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="92"/></expr_stmt></block></then></if>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>
<cpp:endif pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">endif<pos:position pos:line="83" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="84" pos:column="5">if <condition pos:line="84" pos:column="8">(<expr><call><name pos:line="84" pos:column="9">setsockopt<pos:position pos:line="84" pos:column="19"/></name><argument_list pos:line="84" pos:column="19">(<argument><expr><name pos:line="84" pos:column="20">fd<pos:position pos:line="84" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="24">SOL_SOCKET<pos:position pos:line="84" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="36">SO_KEEPALIVE<pos:position pos:line="84" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="50">(<pos:position pos:line="84" pos:column="51"/></operator><name pos:line="84" pos:column="51">char<pos:position pos:line="84" pos:column="55"/></name> <operator pos:line="84" pos:column="56">*<pos:position pos:line="84" pos:column="57"/></operator><operator pos:line="84" pos:column="57">)<pos:position pos:line="84" pos:column="58"/></operator> <operator pos:line="84" pos:column="59">&amp;<pos:position pos:line="84" pos:column="64"/></operator><name pos:line="84" pos:column="60">on<pos:position pos:line="84" pos:column="62"/></name></expr></argument>, <argument><expr><sizeof pos:line="84" pos:column="64">sizeof<argument_list pos:line="84" pos:column="70">(<argument><expr><name pos:line="84" pos:column="71">on<pos:position pos:line="84" pos:column="73"/></name></expr></argument>)<pos:position pos:line="84" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="84" pos:column="75"/></argument_list></call> <operator pos:line="84" pos:column="76">&lt;<pos:position pos:line="84" pos:column="80"/></operator> <literal type="number" pos:line="84" pos:column="78">0<pos:position pos:line="84" pos:column="79"/></literal></expr>)<pos:position pos:line="84" pos:column="80"/></condition><then pos:line="84" pos:column="80">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="9">debugs<pos:position pos:line="85" pos:column="15"/></name><argument_list pos:line="85" pos:column="15">(<argument><expr><literal type="number" pos:line="85" pos:column="16">5<pos:position pos:line="85" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="19">DBG_IMPORTANT<pos:position pos:line="85" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="34">"commSetKeepalive: FD "<pos:position pos:line="85" pos:column="57"/></literal> <operator pos:line="85" pos:column="58">&lt;&lt;<pos:position pos:line="85" pos:column="66"/></operator> <name pos:line="85" pos:column="61">fd<pos:position pos:line="85" pos:column="63"/></name> <operator pos:line="85" pos:column="64">&lt;&lt;<pos:position pos:line="85" pos:column="72"/></operator> <literal type="string" pos:line="85" pos:column="67">": "<pos:position pos:line="85" pos:column="71"/></literal> <operator pos:line="85" pos:column="72">&lt;&lt;<pos:position pos:line="85" pos:column="80"/></operator> <call><name pos:line="85" pos:column="75">xstrerror<pos:position pos:line="85" pos:column="84"/></name><argument_list pos:line="85" pos:column="84">()<pos:position pos:line="85" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="88"/></expr_stmt></block></then></if>
}<pos:position pos:line="86" pos:column="2"/></block></function>

<function><type><name pos:line="88" pos:column="1">void<pos:position pos:line="88" pos:column="5"/></name></type>
<name pos:line="89" pos:column="1">comm_init<pos:position pos:line="89" pos:column="10"/></name><parameter_list pos:line="89" pos:column="10">(<parameter><decl><type><name pos:line="89" pos:column="11">void<pos:position pos:line="89" pos:column="15"/></name></type></decl></parameter>)<pos:position pos:line="89" pos:column="16"/></parameter_list>
<block pos:line="90" pos:column="1">{
    <expr_stmt><expr><name pos:line="91" pos:column="5">fd_table<pos:position pos:line="91" pos:column="13"/></name> <operator pos:line="91" pos:column="14">=<pos:position pos:line="91" pos:column="15"/></operator><operator pos:line="91" pos:column="15">(<pos:position pos:line="91" pos:column="16"/></operator><name pos:line="91" pos:column="16">fde<pos:position pos:line="91" pos:column="19"/></name> <operator pos:line="91" pos:column="20">*<pos:position pos:line="91" pos:column="21"/></operator><operator pos:line="91" pos:column="21">)<pos:position pos:line="91" pos:column="22"/></operator> <call><name pos:line="91" pos:column="23">xcalloc<pos:position pos:line="91" pos:column="30"/></name><argument_list pos:line="91" pos:column="30">(<argument><expr><name pos:line="91" pos:column="31">Squid_MaxFD<pos:position pos:line="91" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="91" pos:column="44">sizeof<argument_list pos:line="91" pos:column="50">(<argument><expr><name pos:line="91" pos:column="51">fde<pos:position pos:line="91" pos:column="54"/></name></expr></argument>)<pos:position pos:line="91" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="91" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="92" pos:column="5">fdd_table<pos:position pos:line="92" pos:column="14"/></name> <operator pos:line="92" pos:column="15">=<pos:position pos:line="92" pos:column="16"/></operator> <operator pos:line="92" pos:column="17">(<pos:position pos:line="92" pos:column="18"/></operator><name pos:line="92" pos:column="18">fd_debug_t<pos:position pos:line="92" pos:column="28"/></name> <operator pos:line="92" pos:column="29">*<pos:position pos:line="92" pos:column="30"/></operator><operator pos:line="92" pos:column="30">)<pos:position pos:line="92" pos:column="31"/></operator><call><name pos:line="92" pos:column="31">xcalloc<pos:position pos:line="92" pos:column="38"/></name><argument_list pos:line="92" pos:column="38">(<argument><expr><name pos:line="92" pos:column="39">Squid_MaxFD<pos:position pos:line="92" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="52">sizeof<argument_list pos:line="92" pos:column="58">(<argument><expr><name pos:line="92" pos:column="59">fd_debug_t<pos:position pos:line="92" pos:column="69"/></name></expr></argument>)<pos:position pos:line="92" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="72"/></expr_stmt>

    <comment type="block" pos:line="94" pos:column="5">/* make sure the accept() socket FIFO delay queue exists */</comment>
    <expr_stmt><expr><call><name><name pos:line="95" pos:column="5">Comm<pos:position pos:line="95" pos:column="9"/></name><operator pos:line="95" pos:column="9">::<pos:position pos:line="95" pos:column="11"/></operator><name pos:line="95" pos:column="11">AcceptLimiter<pos:position pos:line="95" pos:column="24"/></name><operator pos:line="95" pos:column="24">::<pos:position pos:line="95" pos:column="26"/></operator><name pos:line="95" pos:column="26">Instance<pos:position pos:line="95" pos:column="34"/></name></name><argument_list pos:line="95" pos:column="34">()<pos:position pos:line="95" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="37"/></expr_stmt>

    <comment type="line" pos:line="97" pos:column="5">// make sure the IO pending callback table exists</comment>
    <expr_stmt><expr><call><name><name pos:line="98" pos:column="5">Comm<pos:position pos:line="98" pos:column="9"/></name><operator pos:line="98" pos:column="9">::<pos:position pos:line="98" pos:column="11"/></operator><name pos:line="98" pos:column="11">CallbackTableInit<pos:position pos:line="98" pos:column="28"/></name></name><argument_list pos:line="98" pos:column="28">()<pos:position pos:line="98" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="100" pos:column="5">/* XXX account fd_table */</comment>
    <comment type="block" pos:line="101" pos:column="5">/* Keep a few file descriptors free so that we don't run out of FD's
     * after accepting a client but before it opens a socket or a file.
     * Since Squid_MaxFD can be as high as several thousand, don't waste them */</comment>
    <expr_stmt><expr><name pos:line="104" pos:column="5">RESERVED_FD<pos:position pos:line="104" pos:column="16"/></name> <operator pos:line="104" pos:column="17">=<pos:position pos:line="104" pos:column="18"/></operator> <call><name pos:line="104" pos:column="19">min<pos:position pos:line="104" pos:column="22"/></name><argument_list pos:line="104" pos:column="22">(<argument><expr><literal type="number" pos:line="104" pos:column="23">100<pos:position pos:line="104" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="28">Squid_MaxFD<pos:position pos:line="104" pos:column="39"/></name> <operator pos:line="104" pos:column="40">/<pos:position pos:line="104" pos:column="41"/></operator> <literal type="number" pos:line="104" pos:column="42">4<pos:position pos:line="104" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><name pos:line="106" pos:column="5">TheHalfClosed<pos:position pos:line="106" pos:column="18"/></name> <operator pos:line="106" pos:column="19">=<pos:position pos:line="106" pos:column="20"/></operator> <operator pos:line="106" pos:column="21">new<pos:position pos:line="106" pos:column="24"/></operator> <name pos:line="106" pos:column="25">DescriptorSet<pos:position pos:line="106" pos:column="38"/></name></expr>;<pos:position pos:line="106" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="108" pos:column="5">/* setup the select loop module */</comment>
    <expr_stmt><expr><call><name><name pos:line="109" pos:column="5">Comm<pos:position pos:line="109" pos:column="9"/></name><operator pos:line="109" pos:column="9">::<pos:position pos:line="109" pos:column="11"/></operator><name pos:line="109" pos:column="11">SelectLoopInit<pos:position pos:line="109" pos:column="25"/></name></name><argument_list pos:line="109" pos:column="25">()<pos:position pos:line="109" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="28"/></expr_stmt>
}<pos:position pos:line="110" pos:column="2"/></block></function>

<function><type><name pos:line="112" pos:column="1">void<pos:position pos:line="112" pos:column="5"/></name></type>
<name pos:line="113" pos:column="1">comm_exit<pos:position pos:line="113" pos:column="10"/></name><parameter_list pos:line="113" pos:column="10">(<parameter><decl><type><name pos:line="113" pos:column="11">void<pos:position pos:line="113" pos:column="15"/></name></type></decl></parameter>)<pos:position pos:line="113" pos:column="16"/></parameter_list>
<block pos:line="114" pos:column="1">{
    <expr_stmt><expr><operator pos:line="115" pos:column="5">delete<pos:position pos:line="115" pos:column="11"/></operator> <name pos:line="115" pos:column="12">TheHalfClosed<pos:position pos:line="115" pos:column="25"/></name></expr>;<pos:position pos:line="115" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="116" pos:column="5">TheHalfClosed<pos:position pos:line="116" pos:column="18"/></name> <operator pos:line="116" pos:column="19">=<pos:position pos:line="116" pos:column="20"/></operator> <name pos:line="116" pos:column="21">NULL<pos:position pos:line="116" pos:column="25"/></name></expr>;<pos:position pos:line="116" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="118" pos:column="5">safe_free<pos:position pos:line="118" pos:column="14"/></name><argument_list pos:line="118" pos:column="14">(<argument><expr><name pos:line="118" pos:column="15">fd_table<pos:position pos:line="118" pos:column="23"/></name></expr></argument>)<pos:position pos:line="118" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">safe_free<pos:position pos:line="119" pos:column="14"/></name><argument_list pos:line="119" pos:column="14">(<argument><expr><name pos:line="119" pos:column="15">fdd_table<pos:position pos:line="119" pos:column="24"/></name></expr></argument>)<pos:position pos:line="119" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="120" pos:column="5">Comm<pos:position pos:line="120" pos:column="9"/></name><operator pos:line="120" pos:column="9">::<pos:position pos:line="120" pos:column="11"/></operator><name pos:line="120" pos:column="11">CallbackTableDestruct<pos:position pos:line="120" pos:column="32"/></name></name><argument_list pos:line="120" pos:column="32">()<pos:position pos:line="120" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="35"/></expr_stmt>
}<pos:position pos:line="121" pos:column="2"/></block></function>

<cpp:if pos:line="123" pos:column="1">#<cpp:directive pos:line="123" pos:column="2">if<pos:position pos:line="123" pos:column="4"/></cpp:directive> <expr><name pos:line="123" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="123" pos:column="20"/></name></expr></cpp:if>
<comment type="line" pos:line="124" pos:column="1">// called when the queue is done waiting for the client bucket to fill</comment>
<function><type><name pos:line="125" pos:column="1">void<pos:position pos:line="125" pos:column="5"/></name></type>
<name pos:line="126" pos:column="1">commHandleWriteHelper<pos:position pos:line="126" pos:column="22"/></name><parameter_list pos:line="126" pos:column="22">(<parameter><decl><type><name pos:line="126" pos:column="23">void<pos:position pos:line="126" pos:column="27"/></name> <modifier pos:line="126" pos:column="28">*<pos:position pos:line="126" pos:column="29"/></modifier></type> <name pos:line="126" pos:column="30">data<pos:position pos:line="126" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="126" pos:column="35"/></parameter_list>
<block pos:line="127" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="128" pos:column="5">CommQuotaQueue<pos:position pos:line="128" pos:column="19"/></name> <modifier pos:line="128" pos:column="20">*<pos:position pos:line="128" pos:column="21"/></modifier></type><name pos:line="128" pos:column="21">queue<pos:position pos:line="128" pos:column="26"/></name> <init pos:line="128" pos:column="27">= <expr><cast type="static" pos:line="128" pos:column="29">static_cast<argument_list type="generic" pos:line="128" pos:column="40">&lt;<argument><expr><name pos:line="128" pos:column="41">CommQuotaQueue<pos:position pos:line="128" pos:column="55"/></name><operator pos:line="128" pos:column="55">*<pos:position pos:line="128" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="128" pos:column="60"/></argument_list><argument_list pos:line="128" pos:column="57">(<argument><expr><name pos:line="128" pos:column="58">data<pos:position pos:line="128" pos:column="62"/></name></expr></argument>)<pos:position pos:line="128" pos:column="63"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="128" pos:column="64"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="129" pos:column="5">assert<pos:position pos:line="129" pos:column="11"/></name><argument_list pos:line="129" pos:column="11">(<argument><expr><name pos:line="129" pos:column="12">queue<pos:position pos:line="129" pos:column="17"/></name></expr></argument>)<pos:position pos:line="129" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="19"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="131" pos:column="5">ClientInfo<pos:position pos:line="131" pos:column="15"/></name> <modifier pos:line="131" pos:column="16">*<pos:position pos:line="131" pos:column="17"/></modifier></type><name pos:line="131" pos:column="17">clientInfo<pos:position pos:line="131" pos:column="27"/></name> <init pos:line="131" pos:column="28">= <expr><name><name pos:line="131" pos:column="30">queue<pos:position pos:line="131" pos:column="35"/></name><operator pos:line="131" pos:column="35">-&gt;<pos:position pos:line="131" pos:column="40"/></operator><name pos:line="131" pos:column="37">clientInfo<pos:position pos:line="131" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="131" pos:column="48"/></decl_stmt>
    <comment type="line" pos:line="132" pos:column="5">// ClientInfo invalidates queue if freed, so if we got here through,</comment>
    <comment type="line" pos:line="133" pos:column="5">// evenAdd cbdata protections, everything should be valid and consistent</comment>
    <expr_stmt><expr><call><name pos:line="134" pos:column="5">assert<pos:position pos:line="134" pos:column="11"/></name><argument_list pos:line="134" pos:column="11">(<argument><expr><name pos:line="134" pos:column="12">clientInfo<pos:position pos:line="134" pos:column="22"/></name></expr></argument>)<pos:position pos:line="134" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="135" pos:column="5">assert<pos:position pos:line="135" pos:column="11"/></name><argument_list pos:line="135" pos:column="11">(<argument><expr><call><name><name pos:line="135" pos:column="12">clientInfo<pos:position pos:line="135" pos:column="22"/></name><operator pos:line="135" pos:column="22">-&gt;<pos:position pos:line="135" pos:column="27"/></operator><name pos:line="135" pos:column="24">hasQueue<pos:position pos:line="135" pos:column="32"/></name></name><argument_list pos:line="135" pos:column="32">()<pos:position pos:line="135" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="135" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="136" pos:column="5">assert<pos:position pos:line="136" pos:column="11"/></name><argument_list pos:line="136" pos:column="11">(<argument><expr><call><name><name pos:line="136" pos:column="12">clientInfo<pos:position pos:line="136" pos:column="22"/></name><operator pos:line="136" pos:column="22">-&gt;<pos:position pos:line="136" pos:column="27"/></operator><name pos:line="136" pos:column="24">hasQueue<pos:position pos:line="136" pos:column="32"/></name></name><argument_list pos:line="136" pos:column="32">(<argument><expr><name pos:line="136" pos:column="33">queue<pos:position pos:line="136" pos:column="38"/></name></expr></argument>)<pos:position pos:line="136" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="136" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="137" pos:column="5">assert<pos:position pos:line="137" pos:column="11"/></name><argument_list pos:line="137" pos:column="11">(<argument><expr><operator pos:line="137" pos:column="12">!<pos:position pos:line="137" pos:column="13"/></operator><name><name pos:line="137" pos:column="13">clientInfo<pos:position pos:line="137" pos:column="23"/></name><operator pos:line="137" pos:column="23">-&gt;<pos:position pos:line="137" pos:column="28"/></operator><name pos:line="137" pos:column="25">selectWaiting<pos:position pos:line="137" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="137" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="138" pos:column="5">assert<pos:position pos:line="138" pos:column="11"/></name><argument_list pos:line="138" pos:column="11">(<argument><expr><name><name pos:line="138" pos:column="12">clientInfo<pos:position pos:line="138" pos:column="22"/></name><operator pos:line="138" pos:column="22">-&gt;<pos:position pos:line="138" pos:column="27"/></operator><name pos:line="138" pos:column="24">eventWaiting<pos:position pos:line="138" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="138" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="139" pos:column="5">clientInfo<pos:position pos:line="139" pos:column="15"/></name><operator pos:line="139" pos:column="15">-&gt;<pos:position pos:line="139" pos:column="20"/></operator><name pos:line="139" pos:column="17">eventWaiting<pos:position pos:line="139" pos:column="29"/></name></name> <operator pos:line="139" pos:column="30">=<pos:position pos:line="139" pos:column="31"/></operator> <literal type="boolean" pos:line="139" pos:column="32">false<pos:position pos:line="139" pos:column="37"/></literal></expr>;<pos:position pos:line="139" pos:column="38"/></expr_stmt>

    <do pos:line="141" pos:column="5">do <block pos:line="141" pos:column="8">{
        <comment type="line" pos:line="142" pos:column="9">// check that the head descriptor is still relevant</comment>
        <decl_stmt><decl><type><specifier pos:line="143" pos:column="9">const<pos:position pos:line="143" pos:column="14"/></specifier> <name pos:line="143" pos:column="15">int<pos:position pos:line="143" pos:column="18"/></name></type> <name pos:line="143" pos:column="19">head<pos:position pos:line="143" pos:column="23"/></name> <init pos:line="143" pos:column="24">= <expr><call><name><name pos:line="143" pos:column="26">clientInfo<pos:position pos:line="143" pos:column="36"/></name><operator pos:line="143" pos:column="36">-&gt;<pos:position pos:line="143" pos:column="41"/></operator><name pos:line="143" pos:column="38">quotaPeekFd<pos:position pos:line="143" pos:column="49"/></name></name><argument_list pos:line="143" pos:column="49">()<pos:position pos:line="143" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="143" pos:column="52"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="144" pos:column="9">Comm<pos:position pos:line="144" pos:column="13"/></name><operator pos:line="144" pos:column="13">::<pos:position pos:line="144" pos:column="15"/></operator><name pos:line="144" pos:column="15">IoCallback<pos:position pos:line="144" pos:column="25"/></name></name> <modifier pos:line="144" pos:column="26">*<pos:position pos:line="144" pos:column="27"/></modifier></type><name pos:line="144" pos:column="27">ccb<pos:position pos:line="144" pos:column="30"/></name> <init pos:line="144" pos:column="31">= <expr><call><name pos:line="144" pos:column="33">COMMIO_FD_WRITECB<pos:position pos:line="144" pos:column="50"/></name><argument_list pos:line="144" pos:column="50">(<argument><expr><name pos:line="144" pos:column="51">head<pos:position pos:line="144" pos:column="55"/></name></expr></argument>)<pos:position pos:line="144" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="144" pos:column="57"/></decl_stmt>

        <if pos:line="146" pos:column="9">if <condition pos:line="146" pos:column="12">(<expr><name><name pos:line="146" pos:column="13">fd_table<pos:position pos:line="146" pos:column="21"/></name><index pos:line="146" pos:column="21">[<expr><name pos:line="146" pos:column="22">head<pos:position pos:line="146" pos:column="26"/></name></expr>]<pos:position pos:line="146" pos:column="27"/></index></name><operator pos:line="146" pos:column="27">.<pos:position pos:line="146" pos:column="28"/></operator><name pos:line="146" pos:column="28">clientInfo<pos:position pos:line="146" pos:column="38"/></name> <operator pos:line="146" pos:column="39">==<pos:position pos:line="146" pos:column="41"/></operator> <name pos:line="146" pos:column="42">clientInfo<pos:position pos:line="146" pos:column="52"/></name> <operator pos:line="146" pos:column="53">&amp;&amp;<pos:position pos:line="146" pos:column="63"/></operator>
                <call><name><name pos:line="147" pos:column="17">clientInfo<pos:position pos:line="147" pos:column="27"/></name><operator pos:line="147" pos:column="27">-&gt;<pos:position pos:line="147" pos:column="32"/></operator><name pos:line="147" pos:column="29">quotaPeekReserv<pos:position pos:line="147" pos:column="44"/></name></name><argument_list pos:line="147" pos:column="44">()<pos:position pos:line="147" pos:column="46"/></argument_list></call> <operator pos:line="147" pos:column="47">==<pos:position pos:line="147" pos:column="49"/></operator> <name><name pos:line="147" pos:column="50">ccb<pos:position pos:line="147" pos:column="53"/></name><operator pos:line="147" pos:column="53">-&gt;<pos:position pos:line="147" pos:column="58"/></operator><name pos:line="147" pos:column="55">quotaQueueReserv<pos:position pos:line="147" pos:column="71"/></name></name> <operator pos:line="147" pos:column="72">&amp;&amp;<pos:position pos:line="147" pos:column="82"/></operator>
                <operator pos:line="148" pos:column="17">!<pos:position pos:line="148" pos:column="18"/></operator><name><name pos:line="148" pos:column="18">fd_table<pos:position pos:line="148" pos:column="26"/></name><index pos:line="148" pos:column="26">[<expr><name pos:line="148" pos:column="27">head<pos:position pos:line="148" pos:column="31"/></name></expr>]<pos:position pos:line="148" pos:column="32"/></index></name><operator pos:line="148" pos:column="32">.<pos:position pos:line="148" pos:column="33"/></operator><call><name pos:line="148" pos:column="33">closing<pos:position pos:line="148" pos:column="40"/></name><argument_list pos:line="148" pos:column="40">()<pos:position pos:line="148" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="148" pos:column="43"/></condition><then pos:line="148" pos:column="43"> <block pos:line="148" pos:column="44">{

            <comment type="line" pos:line="150" pos:column="13">// wait for the head descriptor to become ready for writing</comment>
            <expr_stmt><expr><call><name><name pos:line="151" pos:column="13">Comm<pos:position pos:line="151" pos:column="17"/></name><operator pos:line="151" pos:column="17">::<pos:position pos:line="151" pos:column="19"/></operator><name pos:line="151" pos:column="19">SetSelect<pos:position pos:line="151" pos:column="28"/></name></name><argument_list pos:line="151" pos:column="28">(<argument><expr><name pos:line="151" pos:column="29">head<pos:position pos:line="151" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="35">COMM_SELECT_WRITE<pos:position pos:line="151" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="54">Comm<pos:position pos:line="151" pos:column="58"/></name><operator pos:line="151" pos:column="58">::<pos:position pos:line="151" pos:column="60"/></operator><name pos:line="151" pos:column="60">HandleWrite<pos:position pos:line="151" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="73">ccb<pos:position pos:line="151" pos:column="76"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="151" pos:column="78">0<pos:position pos:line="151" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="151" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="81"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="152" pos:column="13">clientInfo<pos:position pos:line="152" pos:column="23"/></name><operator pos:line="152" pos:column="23">-&gt;<pos:position pos:line="152" pos:column="28"/></operator><name pos:line="152" pos:column="25">selectWaiting<pos:position pos:line="152" pos:column="38"/></name></name> <operator pos:line="152" pos:column="39">=<pos:position pos:line="152" pos:column="40"/></operator> <literal type="boolean" pos:line="152" pos:column="41">true<pos:position pos:line="152" pos:column="45"/></literal></expr>;<pos:position pos:line="152" pos:column="46"/></expr_stmt>
            <return pos:line="153" pos:column="13">return;<pos:position pos:line="153" pos:column="20"/></return>
        }<pos:position pos:line="154" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="156" pos:column="9">clientInfo<pos:position pos:line="156" pos:column="19"/></name><operator pos:line="156" pos:column="19">-&gt;<pos:position pos:line="156" pos:column="24"/></operator><name pos:line="156" pos:column="21">quotaDequeue<pos:position pos:line="156" pos:column="33"/></name></name><argument_list pos:line="156" pos:column="33">()<pos:position pos:line="156" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="36"/></expr_stmt> <comment type="line" pos:line="156" pos:column="37">// remove the no longer relevant descriptor</comment>
        <comment type="line" pos:line="157" pos:column="9">// and continue looking for a relevant one</comment>
    }<pos:position pos:line="158" pos:column="6"/></block> while <condition pos:line="158" pos:column="13">(<expr><call><name><name pos:line="158" pos:column="14">clientInfo<pos:position pos:line="158" pos:column="24"/></name><operator pos:line="158" pos:column="24">-&gt;<pos:position pos:line="158" pos:column="29"/></operator><name pos:line="158" pos:column="26">hasQueue<pos:position pos:line="158" pos:column="34"/></name></name><argument_list pos:line="158" pos:column="34">()<pos:position pos:line="158" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="158" pos:column="37"/></condition>;<pos:position pos:line="158" pos:column="38"/></do>

    <expr_stmt><expr><call><name pos:line="160" pos:column="5">debugs<pos:position pos:line="160" pos:column="11"/></name><argument_list pos:line="160" pos:column="11">(<argument><expr><literal type="number" pos:line="160" pos:column="12">77<pos:position pos:line="160" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="160" pos:column="15">3<pos:position pos:line="160" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="160" pos:column="18">HERE<pos:position pos:line="160" pos:column="22"/></name> <operator pos:line="160" pos:column="23">&lt;&lt;<pos:position pos:line="160" pos:column="31"/></operator> <literal type="string" pos:line="160" pos:column="26">"emptied queue"<pos:position pos:line="160" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="160" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="43"/></expr_stmt>
}<pos:position pos:line="161" pos:column="2"/></block></function>

<function><type><name pos:line="163" pos:column="1">bool<pos:position pos:line="163" pos:column="5"/></name></type>
<name><name pos:line="164" pos:column="1">ClientInfo<pos:position pos:line="164" pos:column="11"/></name><operator pos:line="164" pos:column="11">::<pos:position pos:line="164" pos:column="13"/></operator><name pos:line="164" pos:column="13">hasQueue<pos:position pos:line="164" pos:column="21"/></name></name><parameter_list pos:line="164" pos:column="21">()<pos:position pos:line="164" pos:column="23"/></parameter_list> <specifier pos:line="164" pos:column="24">const<pos:position pos:line="164" pos:column="29"/></specifier>
<block pos:line="165" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="166" pos:column="5">assert<pos:position pos:line="166" pos:column="11"/></name><argument_list pos:line="166" pos:column="11">(<argument><expr><name pos:line="166" pos:column="12">quotaQueue<pos:position pos:line="166" pos:column="22"/></name></expr></argument>)<pos:position pos:line="166" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="24"/></expr_stmt>
    <return pos:line="167" pos:column="5">return <expr><operator pos:line="167" pos:column="12">!<pos:position pos:line="167" pos:column="13"/></operator><call><name><name pos:line="167" pos:column="13">quotaQueue<pos:position pos:line="167" pos:column="23"/></name><operator pos:line="167" pos:column="23">-&gt;<pos:position pos:line="167" pos:column="28"/></operator><name pos:line="167" pos:column="25">empty<pos:position pos:line="167" pos:column="30"/></name></name><argument_list pos:line="167" pos:column="30">()<pos:position pos:line="167" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="33"/></return>
}<pos:position pos:line="168" pos:column="2"/></block></function>

<function><type><name pos:line="170" pos:column="1">bool<pos:position pos:line="170" pos:column="5"/></name></type>
<name><name pos:line="171" pos:column="1">ClientInfo<pos:position pos:line="171" pos:column="11"/></name><operator pos:line="171" pos:column="11">::<pos:position pos:line="171" pos:column="13"/></operator><name pos:line="171" pos:column="13">hasQueue<pos:position pos:line="171" pos:column="21"/></name></name><parameter_list pos:line="171" pos:column="21">(<parameter><decl><type><specifier pos:line="171" pos:column="22">const<pos:position pos:line="171" pos:column="27"/></specifier> <name pos:line="171" pos:column="28">CommQuotaQueue<pos:position pos:line="171" pos:column="42"/></name> <modifier pos:line="171" pos:column="43">*<pos:position pos:line="171" pos:column="44"/></modifier></type><name pos:line="171" pos:column="44">q<pos:position pos:line="171" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="171" pos:column="46"/></parameter_list> <specifier pos:line="171" pos:column="47">const<pos:position pos:line="171" pos:column="52"/></specifier>
<block pos:line="172" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="173" pos:column="5">assert<pos:position pos:line="173" pos:column="11"/></name><argument_list pos:line="173" pos:column="11">(<argument><expr><name pos:line="173" pos:column="12">quotaQueue<pos:position pos:line="173" pos:column="22"/></name></expr></argument>)<pos:position pos:line="173" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="24"/></expr_stmt>
    <return pos:line="174" pos:column="5">return <expr><name pos:line="174" pos:column="12">quotaQueue<pos:position pos:line="174" pos:column="22"/></name> <operator pos:line="174" pos:column="23">==<pos:position pos:line="174" pos:column="25"/></operator> <name pos:line="174" pos:column="26">q<pos:position pos:line="174" pos:column="27"/></name></expr>;<pos:position pos:line="174" pos:column="28"/></return>
}<pos:position pos:line="175" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="177" pos:column="1">/// returns the first descriptor to be dequeued</comment>
<function><type><name pos:line="178" pos:column="1">int<pos:position pos:line="178" pos:column="4"/></name></type>
<name><name pos:line="179" pos:column="1">ClientInfo<pos:position pos:line="179" pos:column="11"/></name><operator pos:line="179" pos:column="11">::<pos:position pos:line="179" pos:column="13"/></operator><name pos:line="179" pos:column="13">quotaPeekFd<pos:position pos:line="179" pos:column="24"/></name></name><parameter_list pos:line="179" pos:column="24">()<pos:position pos:line="179" pos:column="26"/></parameter_list> <specifier pos:line="179" pos:column="27">const<pos:position pos:line="179" pos:column="32"/></specifier>
<block pos:line="180" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="181" pos:column="5">assert<pos:position pos:line="181" pos:column="11"/></name><argument_list pos:line="181" pos:column="11">(<argument><expr><name pos:line="181" pos:column="12">quotaQueue<pos:position pos:line="181" pos:column="22"/></name></expr></argument>)<pos:position pos:line="181" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="24"/></expr_stmt>
    <return pos:line="182" pos:column="5">return <expr><call><name><name pos:line="182" pos:column="12">quotaQueue<pos:position pos:line="182" pos:column="22"/></name><operator pos:line="182" pos:column="22">-&gt;<pos:position pos:line="182" pos:column="27"/></operator><name pos:line="182" pos:column="24">front<pos:position pos:line="182" pos:column="29"/></name></name><argument_list pos:line="182" pos:column="29">()<pos:position pos:line="182" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="32"/></return>
}<pos:position pos:line="183" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="185" pos:column="1">/// returns the reservation ID of the first descriptor to be dequeued</comment>
<function><type><name pos:line="186" pos:column="1">unsigned<pos:position pos:line="186" pos:column="9"/></name> <name pos:line="186" pos:column="10">int<pos:position pos:line="186" pos:column="13"/></name></type>
<name><name pos:line="187" pos:column="1">ClientInfo<pos:position pos:line="187" pos:column="11"/></name><operator pos:line="187" pos:column="11">::<pos:position pos:line="187" pos:column="13"/></operator><name pos:line="187" pos:column="13">quotaPeekReserv<pos:position pos:line="187" pos:column="28"/></name></name><parameter_list pos:line="187" pos:column="28">()<pos:position pos:line="187" pos:column="30"/></parameter_list> <specifier pos:line="187" pos:column="31">const<pos:position pos:line="187" pos:column="36"/></specifier>
<block pos:line="188" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="189" pos:column="5">assert<pos:position pos:line="189" pos:column="11"/></name><argument_list pos:line="189" pos:column="11">(<argument><expr><name pos:line="189" pos:column="12">quotaQueue<pos:position pos:line="189" pos:column="22"/></name></expr></argument>)<pos:position pos:line="189" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="24"/></expr_stmt>
    <return pos:line="190" pos:column="5">return <expr><name><name pos:line="190" pos:column="12">quotaQueue<pos:position pos:line="190" pos:column="22"/></name><operator pos:line="190" pos:column="22">-&gt;<pos:position pos:line="190" pos:column="27"/></operator><name pos:line="190" pos:column="24">outs<pos:position pos:line="190" pos:column="28"/></name></name> <operator pos:line="190" pos:column="29">+<pos:position pos:line="190" pos:column="30"/></operator> <literal type="number" pos:line="190" pos:column="31">1<pos:position pos:line="190" pos:column="32"/></literal></expr>;<pos:position pos:line="190" pos:column="33"/></return>
}<pos:position pos:line="191" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="193" pos:column="1">/// queues a given fd, creating the queue if necessary; returns reservation ID</comment>
<function><type><name pos:line="194" pos:column="1">unsigned<pos:position pos:line="194" pos:column="9"/></name> <name pos:line="194" pos:column="10">int<pos:position pos:line="194" pos:column="13"/></name></type>
<name><name pos:line="195" pos:column="1">ClientInfo<pos:position pos:line="195" pos:column="11"/></name><operator pos:line="195" pos:column="11">::<pos:position pos:line="195" pos:column="13"/></operator><name pos:line="195" pos:column="13">quotaEnqueue<pos:position pos:line="195" pos:column="25"/></name></name><parameter_list pos:line="195" pos:column="25">(<parameter><decl><type><name pos:line="195" pos:column="26">int<pos:position pos:line="195" pos:column="29"/></name></type> <name pos:line="195" pos:column="30">fd<pos:position pos:line="195" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="195" pos:column="33"/></parameter_list>
<block pos:line="196" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="197" pos:column="5">assert<pos:position pos:line="197" pos:column="11"/></name><argument_list pos:line="197" pos:column="11">(<argument><expr><name pos:line="197" pos:column="12">quotaQueue<pos:position pos:line="197" pos:column="22"/></name></expr></argument>)<pos:position pos:line="197" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="24"/></expr_stmt>
    <return pos:line="198" pos:column="5">return <expr><call><name><name pos:line="198" pos:column="12">quotaQueue<pos:position pos:line="198" pos:column="22"/></name><operator pos:line="198" pos:column="22">-&gt;<pos:position pos:line="198" pos:column="27"/></operator><name pos:line="198" pos:column="24">enqueue<pos:position pos:line="198" pos:column="31"/></name></name><argument_list pos:line="198" pos:column="31">(<argument><expr><name pos:line="198" pos:column="32">fd<pos:position pos:line="198" pos:column="34"/></name></expr></argument>)<pos:position pos:line="198" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="36"/></return>
}<pos:position pos:line="199" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="201" pos:column="1">/// removes queue head</comment>
<function><type><name pos:line="202" pos:column="1">void<pos:position pos:line="202" pos:column="5"/></name></type>
<name><name pos:line="203" pos:column="1">ClientInfo<pos:position pos:line="203" pos:column="11"/></name><operator pos:line="203" pos:column="11">::<pos:position pos:line="203" pos:column="13"/></operator><name pos:line="203" pos:column="13">quotaDequeue<pos:position pos:line="203" pos:column="25"/></name></name><parameter_list pos:line="203" pos:column="25">()<pos:position pos:line="203" pos:column="27"/></parameter_list>
<block pos:line="204" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="205" pos:column="5">assert<pos:position pos:line="205" pos:column="11"/></name><argument_list pos:line="205" pos:column="11">(<argument><expr><name pos:line="205" pos:column="12">quotaQueue<pos:position pos:line="205" pos:column="22"/></name></expr></argument>)<pos:position pos:line="205" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="206" pos:column="5">quotaQueue<pos:position pos:line="206" pos:column="15"/></name><operator pos:line="206" pos:column="15">-&gt;<pos:position pos:line="206" pos:column="20"/></operator><name pos:line="206" pos:column="17">dequeue<pos:position pos:line="206" pos:column="24"/></name></name><argument_list pos:line="206" pos:column="24">()<pos:position pos:line="206" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="27"/></expr_stmt>
}<pos:position pos:line="207" pos:column="2"/></block></function>

<function><type><name pos:line="209" pos:column="1">void<pos:position pos:line="209" pos:column="5"/></name></type>
<name><name pos:line="210" pos:column="1">ClientInfo<pos:position pos:line="210" pos:column="11"/></name><operator pos:line="210" pos:column="11">::<pos:position pos:line="210" pos:column="13"/></operator><name pos:line="210" pos:column="13">kickQuotaQueue<pos:position pos:line="210" pos:column="27"/></name></name><parameter_list pos:line="210" pos:column="27">()<pos:position pos:line="210" pos:column="29"/></parameter_list>
<block pos:line="211" pos:column="1">{
    <if pos:line="212" pos:column="5">if <condition pos:line="212" pos:column="8">(<expr><operator pos:line="212" pos:column="9">!<pos:position pos:line="212" pos:column="10"/></operator><name pos:line="212" pos:column="10">eventWaiting<pos:position pos:line="212" pos:column="22"/></name> <operator pos:line="212" pos:column="23">&amp;&amp;<pos:position pos:line="212" pos:column="33"/></operator> <operator pos:line="212" pos:column="26">!<pos:position pos:line="212" pos:column="27"/></operator><name pos:line="212" pos:column="27">selectWaiting<pos:position pos:line="212" pos:column="40"/></name> <operator pos:line="212" pos:column="41">&amp;&amp;<pos:position pos:line="212" pos:column="51"/></operator> <call><name pos:line="212" pos:column="44">hasQueue<pos:position pos:line="212" pos:column="52"/></name><argument_list pos:line="212" pos:column="52">()<pos:position pos:line="212" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="212" pos:column="55"/></condition><then pos:line="212" pos:column="55"> <block pos:line="212" pos:column="56">{
        <comment type="line" pos:line="213" pos:column="9">// wait at least a second if the bucket is empty</comment>
        <decl_stmt><decl><type><specifier pos:line="214" pos:column="9">const<pos:position pos:line="214" pos:column="14"/></specifier> <name pos:line="214" pos:column="15">double<pos:position pos:line="214" pos:column="21"/></name></type> <name pos:line="214" pos:column="22">delay<pos:position pos:line="214" pos:column="27"/></name> <init pos:line="214" pos:column="28">= <expr><ternary><condition><expr><operator pos:line="214" pos:column="30">(<pos:position pos:line="214" pos:column="31"/></operator><name pos:line="214" pos:column="31">bucketSize<pos:position pos:line="214" pos:column="41"/></name> <operator pos:line="214" pos:column="42">&lt;<pos:position pos:line="214" pos:column="46"/></operator> <literal type="number" pos:line="214" pos:column="44">1.0<pos:position pos:line="214" pos:column="47"/></literal><operator pos:line="214" pos:column="47">)<pos:position pos:line="214" pos:column="48"/></operator></expr> ?<pos:position pos:line="214" pos:column="50"/></condition><then pos:line="214" pos:column="50"> <expr><literal type="number" pos:line="214" pos:column="51">1.0<pos:position pos:line="214" pos:column="54"/></literal></expr> <pos:position pos:line="214" pos:column="55"/></then><else pos:line="214" pos:column="55">: <expr><literal type="number" pos:line="214" pos:column="57">0.0<pos:position pos:line="214" pos:column="60"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="214" pos:column="61"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="215" pos:column="9">eventAdd<pos:position pos:line="215" pos:column="17"/></name><argument_list pos:line="215" pos:column="17">(<argument><expr><literal type="string" pos:line="215" pos:column="18">"commHandleWriteHelper"<pos:position pos:line="215" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="215" pos:column="43">&amp;<pos:position pos:line="215" pos:column="48"/></operator><name pos:line="215" pos:column="44">commHandleWriteHelper<pos:position pos:line="215" pos:column="65"/></name></expr></argument>,
                 <argument><expr><name pos:line="216" pos:column="18">quotaQueue<pos:position pos:line="216" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="216" pos:column="30">delay<pos:position pos:line="216" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="216" pos:column="37">0<pos:position pos:line="216" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="216" pos:column="40">true<pos:position pos:line="216" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="216" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name pos:line="217" pos:column="9">eventWaiting<pos:position pos:line="217" pos:column="21"/></name> <operator pos:line="217" pos:column="22">=<pos:position pos:line="217" pos:column="23"/></operator> <literal type="boolean" pos:line="217" pos:column="24">true<pos:position pos:line="217" pos:column="28"/></literal></expr>;<pos:position pos:line="217" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="218" pos:column="6"/></block></then></if>
}<pos:position pos:line="219" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="221" pos:column="1">/// calculates how much to write for a single dequeued client</comment>
<function><type><name pos:line="222" pos:column="1">int<pos:position pos:line="222" pos:column="4"/></name></type>
<name><name pos:line="223" pos:column="1">ClientInfo<pos:position pos:line="223" pos:column="11"/></name><operator pos:line="223" pos:column="11">::<pos:position pos:line="223" pos:column="13"/></operator><name pos:line="223" pos:column="13">quotaForDequed<pos:position pos:line="223" pos:column="27"/></name></name><parameter_list pos:line="223" pos:column="27">()<pos:position pos:line="223" pos:column="29"/></parameter_list>
<block pos:line="224" pos:column="1">{
    <comment type="block" pos:line="225" pos:column="5">/* If we have multiple clients and give full bucketSize to each client then
     * clt1 may often get a lot more because clt1-&gt;clt2 time distance in the
     * select(2) callback order may be a lot smaller than cltN-&gt;clt1 distance.
     * We divide quota evenly to be more fair. */</comment>

    <if pos:line="230" pos:column="5">if <condition pos:line="230" pos:column="8">(<expr><operator pos:line="230" pos:column="9">!<pos:position pos:line="230" pos:column="10"/></operator><name pos:line="230" pos:column="10">rationedCount<pos:position pos:line="230" pos:column="23"/></name></expr>)<pos:position pos:line="230" pos:column="24"/></condition><then pos:line="230" pos:column="24"> <block pos:line="230" pos:column="25">{
        <expr_stmt><expr><name pos:line="231" pos:column="9">rationedCount<pos:position pos:line="231" pos:column="22"/></name> <operator pos:line="231" pos:column="23">=<pos:position pos:line="231" pos:column="24"/></operator> <call><name><name pos:line="231" pos:column="25">quotaQueue<pos:position pos:line="231" pos:column="35"/></name><operator pos:line="231" pos:column="35">-&gt;<pos:position pos:line="231" pos:column="40"/></operator><name pos:line="231" pos:column="37">size<pos:position pos:line="231" pos:column="41"/></name></name><argument_list pos:line="231" pos:column="41">()<pos:position pos:line="231" pos:column="43"/></argument_list></call> <operator pos:line="231" pos:column="44">+<pos:position pos:line="231" pos:column="45"/></operator> <literal type="number" pos:line="231" pos:column="46">1<pos:position pos:line="231" pos:column="47"/></literal></expr>;<pos:position pos:line="231" pos:column="48"/></expr_stmt>

        <comment type="line" pos:line="233" pos:column="9">// The delay in ration recalculation _temporary_ deprives clients from</comment>
        <comment type="line" pos:line="234" pos:column="9">// bytes that should have trickled in while rationedCount was positive.</comment>
        <expr_stmt><expr><call><name pos:line="235" pos:column="9">refillBucket<pos:position pos:line="235" pos:column="21"/></name><argument_list pos:line="235" pos:column="21">()<pos:position pos:line="235" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="24"/></expr_stmt>

        <comment type="line" pos:line="237" pos:column="9">// Rounding errors do not accumulate here, but we round down to avoid</comment>
        <comment type="line" pos:line="238" pos:column="9">// negative bucket sizes after write with rationedCount=1.</comment>
        <expr_stmt><expr><name pos:line="239" pos:column="9">rationedQuota<pos:position pos:line="239" pos:column="22"/></name> <operator pos:line="239" pos:column="23">=<pos:position pos:line="239" pos:column="24"/></operator> <cast type="static" pos:line="239" pos:column="25">static_cast<argument_list type="generic" pos:line="239" pos:column="36">&lt;<argument><expr><name pos:line="239" pos:column="37">int<pos:position pos:line="239" pos:column="40"/></name></expr></argument>&gt;<pos:position pos:line="239" pos:column="44"/></argument_list><argument_list pos:line="239" pos:column="41">(<argument><expr><call><name pos:line="239" pos:column="42">floor<pos:position pos:line="239" pos:column="47"/></name><argument_list pos:line="239" pos:column="47">(<argument><expr><name pos:line="239" pos:column="48">bucketSize<pos:position pos:line="239" pos:column="58"/></name><operator pos:line="239" pos:column="58">/<pos:position pos:line="239" pos:column="59"/></operator><name pos:line="239" pos:column="59">rationedCount<pos:position pos:line="239" pos:column="72"/></name></expr></argument>)<pos:position pos:line="239" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="239" pos:column="74"/></argument_list></cast></expr>;<pos:position pos:line="239" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="240" pos:column="9">debugs<pos:position pos:line="240" pos:column="15"/></name><argument_list pos:line="240" pos:column="15">(<argument><expr><literal type="number" pos:line="240" pos:column="16">77<pos:position pos:line="240" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="240" pos:column="19">5<pos:position pos:line="240" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="240" pos:column="22">HERE<pos:position pos:line="240" pos:column="26"/></name> <operator pos:line="240" pos:column="27">&lt;&lt;<pos:position pos:line="240" pos:column="35"/></operator> <literal type="string" pos:line="240" pos:column="30">"new rationedQuota: "<pos:position pos:line="240" pos:column="51"/></literal> <operator pos:line="240" pos:column="52">&lt;&lt;<pos:position pos:line="240" pos:column="60"/></operator> <name pos:line="240" pos:column="55">rationedQuota<pos:position pos:line="240" pos:column="68"/></name> <operator pos:line="240" pos:column="69">&lt;&lt;<pos:position pos:line="240" pos:column="77"/></operator>
               <literal type="char" pos:line="241" pos:column="16">'*'<pos:position pos:line="241" pos:column="19"/></literal> <operator pos:line="241" pos:column="20">&lt;&lt;<pos:position pos:line="241" pos:column="28"/></operator> <name pos:line="241" pos:column="23">rationedCount<pos:position pos:line="241" pos:column="36"/></name></expr></argument>)<pos:position pos:line="241" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="242" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="244" pos:column="5">--<pos:position pos:line="244" pos:column="7"/></operator><name pos:line="244" pos:column="7">rationedCount<pos:position pos:line="244" pos:column="20"/></name></expr>;<pos:position pos:line="244" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="245" pos:column="5">debugs<pos:position pos:line="245" pos:column="11"/></name><argument_list pos:line="245" pos:column="11">(<argument><expr><literal type="number" pos:line="245" pos:column="12">77<pos:position pos:line="245" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="245" pos:column="15">7<pos:position pos:line="245" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="245" pos:column="18">HERE<pos:position pos:line="245" pos:column="22"/></name> <operator pos:line="245" pos:column="23">&lt;&lt;<pos:position pos:line="245" pos:column="31"/></operator> <literal type="string" pos:line="245" pos:column="26">"rationedQuota: "<pos:position pos:line="245" pos:column="43"/></literal> <operator pos:line="245" pos:column="44">&lt;&lt;<pos:position pos:line="245" pos:column="52"/></operator> <name pos:line="245" pos:column="47">rationedQuota<pos:position pos:line="245" pos:column="60"/></name> <operator pos:line="245" pos:column="61">&lt;&lt;<pos:position pos:line="245" pos:column="69"/></operator>
           <literal type="string" pos:line="246" pos:column="12">" rations remaining: "<pos:position pos:line="246" pos:column="34"/></literal> <operator pos:line="246" pos:column="35">&lt;&lt;<pos:position pos:line="246" pos:column="43"/></operator> <name pos:line="246" pos:column="38">rationedCount<pos:position pos:line="246" pos:column="51"/></name></expr></argument>)<pos:position pos:line="246" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="53"/></expr_stmt>

    <comment type="line" pos:line="248" pos:column="5">// update 'last seen' time to prevent clientdb GC from dropping us</comment>
    <expr_stmt><expr><name pos:line="249" pos:column="5">last_seen<pos:position pos:line="249" pos:column="14"/></name> <operator pos:line="249" pos:column="15">=<pos:position pos:line="249" pos:column="16"/></operator> <name pos:line="249" pos:column="17">squid_curtime<pos:position pos:line="249" pos:column="30"/></name></expr>;<pos:position pos:line="249" pos:column="31"/></expr_stmt>
    <return pos:line="250" pos:column="5">return <expr><name pos:line="250" pos:column="12">rationedQuota<pos:position pos:line="250" pos:column="25"/></name></expr>;<pos:position pos:line="250" pos:column="26"/></return>
}<pos:position pos:line="251" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="253" pos:column="1">///&lt; adds bytes to the quota bucket based on the rate and passed time</comment>
<function><type><name pos:line="254" pos:column="1">void<pos:position pos:line="254" pos:column="5"/></name></type>
<name><name pos:line="255" pos:column="1">ClientInfo<pos:position pos:line="255" pos:column="11"/></name><operator pos:line="255" pos:column="11">::<pos:position pos:line="255" pos:column="13"/></operator><name pos:line="255" pos:column="13">refillBucket<pos:position pos:line="255" pos:column="25"/></name></name><parameter_list pos:line="255" pos:column="25">()<pos:position pos:line="255" pos:column="27"/></parameter_list>
<block pos:line="256" pos:column="1">{
    <comment type="line" pos:line="257" pos:column="5">// all these times are in seconds, with double precision</comment>
    <decl_stmt><decl><type><specifier pos:line="258" pos:column="5">const<pos:position pos:line="258" pos:column="10"/></specifier> <name pos:line="258" pos:column="11">double<pos:position pos:line="258" pos:column="17"/></name></type> <name pos:line="258" pos:column="18">currTime<pos:position pos:line="258" pos:column="26"/></name> <init pos:line="258" pos:column="27">= <expr><name pos:line="258" pos:column="29">current_dtime<pos:position pos:line="258" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="258" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="259" pos:column="5">const<pos:position pos:line="259" pos:column="10"/></specifier> <name pos:line="259" pos:column="11">double<pos:position pos:line="259" pos:column="17"/></name></type> <name pos:line="259" pos:column="18">timePassed<pos:position pos:line="259" pos:column="28"/></name> <init pos:line="259" pos:column="29">= <expr><name pos:line="259" pos:column="31">currTime<pos:position pos:line="259" pos:column="39"/></name> <operator pos:line="259" pos:column="40">-<pos:position pos:line="259" pos:column="41"/></operator> <name pos:line="259" pos:column="42">prevTime<pos:position pos:line="259" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="259" pos:column="51"/></decl_stmt>

    <comment type="line" pos:line="261" pos:column="5">// Calculate allowance for the time passed. Use double to avoid</comment>
    <comment type="line" pos:line="262" pos:column="5">// accumulating rounding errors for small intervals. For example, always</comment>
    <comment type="line" pos:line="263" pos:column="5">// adding 1 byte instead of 1.4 results in 29% bandwidth allocation error.</comment>
    <decl_stmt><decl><type><specifier pos:line="264" pos:column="5">const<pos:position pos:line="264" pos:column="10"/></specifier> <name pos:line="264" pos:column="11">double<pos:position pos:line="264" pos:column="17"/></name></type> <name pos:line="264" pos:column="18">gain<pos:position pos:line="264" pos:column="22"/></name> <init pos:line="264" pos:column="23">= <expr><name pos:line="264" pos:column="25">timePassed<pos:position pos:line="264" pos:column="35"/></name> <operator pos:line="264" pos:column="36">*<pos:position pos:line="264" pos:column="37"/></operator> <name pos:line="264" pos:column="38">writeSpeedLimit<pos:position pos:line="264" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="264" pos:column="54"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="266" pos:column="5">debugs<pos:position pos:line="266" pos:column="11"/></name><argument_list pos:line="266" pos:column="11">(<argument><expr><literal type="number" pos:line="266" pos:column="12">77<pos:position pos:line="266" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="266" pos:column="15">5<pos:position pos:line="266" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="266" pos:column="18">HERE<pos:position pos:line="266" pos:column="22"/></name> <operator pos:line="266" pos:column="23">&lt;&lt;<pos:position pos:line="266" pos:column="31"/></operator> <name pos:line="266" pos:column="26">currTime<pos:position pos:line="266" pos:column="34"/></name> <operator pos:line="266" pos:column="35">&lt;&lt;<pos:position pos:line="266" pos:column="43"/></operator> <literal type="string" pos:line="266" pos:column="38">" clt"<pos:position pos:line="266" pos:column="44"/></literal> <operator pos:line="266" pos:column="45">&lt;&lt;<pos:position pos:line="266" pos:column="53"/></operator> <operator pos:line="266" pos:column="48">(<pos:position pos:line="266" pos:column="49"/></operator><specifier pos:line="266" pos:column="49">const<pos:position pos:line="266" pos:column="54"/></specifier> <name pos:line="266" pos:column="55">char<pos:position pos:line="266" pos:column="59"/></name><operator pos:line="266" pos:column="59">*<pos:position pos:line="266" pos:column="60"/></operator><operator pos:line="266" pos:column="60">)<pos:position pos:line="266" pos:column="61"/></operator><name><name pos:line="266" pos:column="61">hash<pos:position pos:line="266" pos:column="65"/></name><operator pos:line="266" pos:column="65">.<pos:position pos:line="266" pos:column="66"/></operator><name pos:line="266" pos:column="66">key<pos:position pos:line="266" pos:column="69"/></name></name> <operator pos:line="266" pos:column="70">&lt;&lt;<pos:position pos:line="266" pos:column="78"/></operator> <literal type="string" pos:line="266" pos:column="73">": "<pos:position pos:line="266" pos:column="77"/></literal> <operator pos:line="266" pos:column="78">&lt;&lt;<pos:position pos:line="266" pos:column="86"/></operator>
           <name pos:line="267" pos:column="12">bucketSize<pos:position pos:line="267" pos:column="22"/></name> <operator pos:line="267" pos:column="23">&lt;&lt;<pos:position pos:line="267" pos:column="31"/></operator> <literal type="string" pos:line="267" pos:column="26">" + ("<pos:position pos:line="267" pos:column="32"/></literal> <operator pos:line="267" pos:column="33">&lt;&lt;<pos:position pos:line="267" pos:column="41"/></operator> <name pos:line="267" pos:column="36">timePassed<pos:position pos:line="267" pos:column="46"/></name> <operator pos:line="267" pos:column="47">&lt;&lt;<pos:position pos:line="267" pos:column="55"/></operator> <literal type="string" pos:line="267" pos:column="50">" * "<pos:position pos:line="267" pos:column="55"/></literal> <operator pos:line="267" pos:column="56">&lt;&lt;<pos:position pos:line="267" pos:column="64"/></operator> <name pos:line="267" pos:column="59">writeSpeedLimit<pos:position pos:line="267" pos:column="74"/></name> <operator pos:line="267" pos:column="75">&lt;&lt;<pos:position pos:line="267" pos:column="83"/></operator>
           <literal type="string" pos:line="268" pos:column="12">" = "<pos:position pos:line="268" pos:column="17"/></literal> <operator pos:line="268" pos:column="18">&lt;&lt;<pos:position pos:line="268" pos:column="26"/></operator> <name pos:line="268" pos:column="21">gain<pos:position pos:line="268" pos:column="25"/></name> <operator pos:line="268" pos:column="26">&lt;&lt;<pos:position pos:line="268" pos:column="34"/></operator> <literal type="char" pos:line="268" pos:column="29">')'<pos:position pos:line="268" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="268" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="34"/></expr_stmt>

    <comment type="line" pos:line="270" pos:column="5">// to further combat error accumulation during micro updates,</comment>
    <comment type="line" pos:line="271" pos:column="5">// quit before updating time if we cannot add at least one byte</comment>
    <if pos:line="272" pos:column="5">if <condition pos:line="272" pos:column="8">(<expr><name pos:line="272" pos:column="9">gain<pos:position pos:line="272" pos:column="13"/></name> <operator pos:line="272" pos:column="14">&lt;<pos:position pos:line="272" pos:column="18"/></operator> <literal type="number" pos:line="272" pos:column="16">1.0<pos:position pos:line="272" pos:column="19"/></literal></expr>)<pos:position pos:line="272" pos:column="20"/></condition><then pos:line="272" pos:column="20">
        <block type="pseudo"><return pos:line="273" pos:column="9">return;<pos:position pos:line="273" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="275" pos:column="5">prevTime<pos:position pos:line="275" pos:column="13"/></name> <operator pos:line="275" pos:column="14">=<pos:position pos:line="275" pos:column="15"/></operator> <name pos:line="275" pos:column="16">currTime<pos:position pos:line="275" pos:column="24"/></name></expr>;<pos:position pos:line="275" pos:column="25"/></expr_stmt>

    <comment type="line" pos:line="277" pos:column="5">// for "first" connections, drain initial fat before refilling but keep</comment>
    <comment type="line" pos:line="278" pos:column="5">// updating prevTime to avoid bursts after the fat is gone</comment>
    <if pos:line="279" pos:column="5">if <condition pos:line="279" pos:column="8">(<expr><name pos:line="279" pos:column="9">bucketSize<pos:position pos:line="279" pos:column="19"/></name> <operator pos:line="279" pos:column="20">&gt;<pos:position pos:line="279" pos:column="24"/></operator> <name pos:line="279" pos:column="22">bucketSizeLimit<pos:position pos:line="279" pos:column="37"/></name></expr>)<pos:position pos:line="279" pos:column="38"/></condition><then pos:line="279" pos:column="38"> <block pos:line="279" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="280" pos:column="9">debugs<pos:position pos:line="280" pos:column="15"/></name><argument_list pos:line="280" pos:column="15">(<argument><expr><literal type="number" pos:line="280" pos:column="16">77<pos:position pos:line="280" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="280" pos:column="19">4<pos:position pos:line="280" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="280" pos:column="22">HERE<pos:position pos:line="280" pos:column="26"/></name> <operator pos:line="280" pos:column="27">&lt;&lt;<pos:position pos:line="280" pos:column="35"/></operator> <literal type="string" pos:line="280" pos:column="30">"not refilling while draining initial fat"<pos:position pos:line="280" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="280" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="74"/></expr_stmt>
        <return pos:line="281" pos:column="9">return;<pos:position pos:line="281" pos:column="16"/></return>
    }<pos:position pos:line="282" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="284" pos:column="5">bucketSize<pos:position pos:line="284" pos:column="15"/></name> <operator pos:line="284" pos:column="16">+=<pos:position pos:line="284" pos:column="18"/></operator> <name pos:line="284" pos:column="19">gain<pos:position pos:line="284" pos:column="23"/></name></expr>;<pos:position pos:line="284" pos:column="24"/></expr_stmt>

    <comment type="line" pos:line="286" pos:column="5">// obey quota limits</comment>
    <if pos:line="287" pos:column="5">if <condition pos:line="287" pos:column="8">(<expr><name pos:line="287" pos:column="9">bucketSize<pos:position pos:line="287" pos:column="19"/></name> <operator pos:line="287" pos:column="20">&gt;<pos:position pos:line="287" pos:column="24"/></operator> <name pos:line="287" pos:column="22">bucketSizeLimit<pos:position pos:line="287" pos:column="37"/></name></expr>)<pos:position pos:line="287" pos:column="38"/></condition><then pos:line="287" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><name pos:line="288" pos:column="9">bucketSize<pos:position pos:line="288" pos:column="19"/></name> <operator pos:line="288" pos:column="20">=<pos:position pos:line="288" pos:column="21"/></operator> <name pos:line="288" pos:column="22">bucketSizeLimit<pos:position pos:line="288" pos:column="37"/></name></expr>;<pos:position pos:line="288" pos:column="38"/></expr_stmt></block></then></if>
}<pos:position pos:line="289" pos:column="2"/></block></function>

<function><type><name pos:line="291" pos:column="1">void<pos:position pos:line="291" pos:column="5"/></name></type>
<name><name pos:line="292" pos:column="1">ClientInfo<pos:position pos:line="292" pos:column="11"/></name><operator pos:line="292" pos:column="11">::<pos:position pos:line="292" pos:column="13"/></operator><name pos:line="292" pos:column="13">setWriteLimiter<pos:position pos:line="292" pos:column="28"/></name></name><parameter_list pos:line="292" pos:column="28">(<parameter><decl><type><specifier pos:line="292" pos:column="29">const<pos:position pos:line="292" pos:column="34"/></specifier> <name pos:line="292" pos:column="35">int<pos:position pos:line="292" pos:column="38"/></name></type> <name pos:line="292" pos:column="39">aWriteSpeedLimit<pos:position pos:line="292" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="292" pos:column="57">const<pos:position pos:line="292" pos:column="62"/></specifier> <name pos:line="292" pos:column="63">double<pos:position pos:line="292" pos:column="69"/></name></type> <name pos:line="292" pos:column="70">anInitialBurst<pos:position pos:line="292" pos:column="84"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="292" pos:column="86">const<pos:position pos:line="292" pos:column="91"/></specifier> <name pos:line="292" pos:column="92">double<pos:position pos:line="292" pos:column="98"/></name></type> <name pos:line="292" pos:column="99">aHighWatermark<pos:position pos:line="292" pos:column="113"/></name></decl></parameter>)<pos:position pos:line="292" pos:column="114"/></parameter_list>
<block pos:line="293" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="294" pos:column="5">debugs<pos:position pos:line="294" pos:column="11"/></name><argument_list pos:line="294" pos:column="11">(<argument><expr><literal type="number" pos:line="294" pos:column="12">77<pos:position pos:line="294" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="294" pos:column="15">5<pos:position pos:line="294" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="294" pos:column="18">HERE<pos:position pos:line="294" pos:column="22"/></name> <operator pos:line="294" pos:column="23">&lt;&lt;<pos:position pos:line="294" pos:column="31"/></operator> <literal type="string" pos:line="294" pos:column="26">"Write limits for "<pos:position pos:line="294" pos:column="45"/></literal> <operator pos:line="294" pos:column="46">&lt;&lt;<pos:position pos:line="294" pos:column="54"/></operator> <operator pos:line="294" pos:column="49">(<pos:position pos:line="294" pos:column="50"/></operator><specifier pos:line="294" pos:column="50">const<pos:position pos:line="294" pos:column="55"/></specifier> <name pos:line="294" pos:column="56">char<pos:position pos:line="294" pos:column="60"/></name><operator pos:line="294" pos:column="60">*<pos:position pos:line="294" pos:column="61"/></operator><operator pos:line="294" pos:column="61">)<pos:position pos:line="294" pos:column="62"/></operator><name><name pos:line="294" pos:column="62">hash<pos:position pos:line="294" pos:column="66"/></name><operator pos:line="294" pos:column="66">.<pos:position pos:line="294" pos:column="67"/></operator><name pos:line="294" pos:column="67">key<pos:position pos:line="294" pos:column="70"/></name></name> <operator pos:line="294" pos:column="71">&lt;&lt;<pos:position pos:line="294" pos:column="79"/></operator>
           <literal type="string" pos:line="295" pos:column="12">" speed="<pos:position pos:line="295" pos:column="21"/></literal> <operator pos:line="295" pos:column="22">&lt;&lt;<pos:position pos:line="295" pos:column="30"/></operator> <name pos:line="295" pos:column="25">aWriteSpeedLimit<pos:position pos:line="295" pos:column="41"/></name> <operator pos:line="295" pos:column="42">&lt;&lt;<pos:position pos:line="295" pos:column="50"/></operator> <literal type="string" pos:line="295" pos:column="45">" burst="<pos:position pos:line="295" pos:column="54"/></literal> <operator pos:line="295" pos:column="55">&lt;&lt;<pos:position pos:line="295" pos:column="63"/></operator> <name pos:line="295" pos:column="58">anInitialBurst<pos:position pos:line="295" pos:column="72"/></name> <operator pos:line="295" pos:column="73">&lt;&lt;<pos:position pos:line="295" pos:column="81"/></operator>
           <literal type="string" pos:line="296" pos:column="12">" highwatermark="<pos:position pos:line="296" pos:column="29"/></literal> <operator pos:line="296" pos:column="30">&lt;&lt;<pos:position pos:line="296" pos:column="38"/></operator> <name pos:line="296" pos:column="33">aHighWatermark<pos:position pos:line="296" pos:column="47"/></name></expr></argument>)<pos:position pos:line="296" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="49"/></expr_stmt>

    <comment type="line" pos:line="298" pos:column="5">// set or possibly update traffic shaping parameters</comment>
    <expr_stmt><expr><name pos:line="299" pos:column="5">writeLimitingActive<pos:position pos:line="299" pos:column="24"/></name> <operator pos:line="299" pos:column="25">=<pos:position pos:line="299" pos:column="26"/></operator> <literal type="boolean" pos:line="299" pos:column="27">true<pos:position pos:line="299" pos:column="31"/></literal></expr>;<pos:position pos:line="299" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="300" pos:column="5">writeSpeedLimit<pos:position pos:line="300" pos:column="20"/></name> <operator pos:line="300" pos:column="21">=<pos:position pos:line="300" pos:column="22"/></operator> <name pos:line="300" pos:column="23">aWriteSpeedLimit<pos:position pos:line="300" pos:column="39"/></name></expr>;<pos:position pos:line="300" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="301" pos:column="5">bucketSizeLimit<pos:position pos:line="301" pos:column="20"/></name> <operator pos:line="301" pos:column="21">=<pos:position pos:line="301" pos:column="22"/></operator> <name pos:line="301" pos:column="23">aHighWatermark<pos:position pos:line="301" pos:column="37"/></name></expr>;<pos:position pos:line="301" pos:column="38"/></expr_stmt>

    <comment type="line" pos:line="303" pos:column="5">// but some members should only be set once for a newly activated bucket</comment>
    <if pos:line="304" pos:column="5">if <condition pos:line="304" pos:column="8">(<expr><name pos:line="304" pos:column="9">firstTimeConnection<pos:position pos:line="304" pos:column="28"/></name></expr>)<pos:position pos:line="304" pos:column="29"/></condition><then pos:line="304" pos:column="29"> <block pos:line="304" pos:column="30">{
        <expr_stmt><expr><name pos:line="305" pos:column="9">firstTimeConnection<pos:position pos:line="305" pos:column="28"/></name> <operator pos:line="305" pos:column="29">=<pos:position pos:line="305" pos:column="30"/></operator> <literal type="boolean" pos:line="305" pos:column="31">false<pos:position pos:line="305" pos:column="36"/></literal></expr>;<pos:position pos:line="305" pos:column="37"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="307" pos:column="9">assert<pos:position pos:line="307" pos:column="15"/></name><argument_list pos:line="307" pos:column="15">(<argument><expr><operator pos:line="307" pos:column="16">!<pos:position pos:line="307" pos:column="17"/></operator><name pos:line="307" pos:column="17">selectWaiting<pos:position pos:line="307" pos:column="30"/></name></expr></argument>)<pos:position pos:line="307" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="307" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="308" pos:column="9">assert<pos:position pos:line="308" pos:column="15"/></name><argument_list pos:line="308" pos:column="15">(<argument><expr><operator pos:line="308" pos:column="16">!<pos:position pos:line="308" pos:column="17"/></operator><name pos:line="308" pos:column="17">quotaQueue<pos:position pos:line="308" pos:column="27"/></name></expr></argument>)<pos:position pos:line="308" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="309" pos:column="9">quotaQueue<pos:position pos:line="309" pos:column="19"/></name> <operator pos:line="309" pos:column="20">=<pos:position pos:line="309" pos:column="21"/></operator> <operator pos:line="309" pos:column="22">new<pos:position pos:line="309" pos:column="25"/></operator> <call><name pos:line="309" pos:column="26">CommQuotaQueue<pos:position pos:line="309" pos:column="40"/></name><argument_list pos:line="309" pos:column="40">(<argument><expr><name pos:line="309" pos:column="41">this<pos:position pos:line="309" pos:column="45"/></name></expr></argument>)<pos:position pos:line="309" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="309" pos:column="47"/></expr_stmt>

        <expr_stmt><expr><name pos:line="311" pos:column="9">bucketSize<pos:position pos:line="311" pos:column="19"/></name> <operator pos:line="311" pos:column="20">=<pos:position pos:line="311" pos:column="21"/></operator> <name pos:line="311" pos:column="22">anInitialBurst<pos:position pos:line="311" pos:column="36"/></name></expr>;<pos:position pos:line="311" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="312" pos:column="9">prevTime<pos:position pos:line="312" pos:column="17"/></name> <operator pos:line="312" pos:column="18">=<pos:position pos:line="312" pos:column="19"/></operator> <name pos:line="312" pos:column="20">current_dtime<pos:position pos:line="312" pos:column="33"/></name></expr>;<pos:position pos:line="312" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="313" pos:column="6"/></block></then></if>
}<pos:position pos:line="314" pos:column="2"/></block></function>

<constructor><name><name pos:line="316" pos:column="1">CommQuotaQueue<pos:position pos:line="316" pos:column="15"/></name><operator pos:line="316" pos:column="15">::<pos:position pos:line="316" pos:column="17"/></operator><name pos:line="316" pos:column="17">CommQuotaQueue<pos:position pos:line="316" pos:column="31"/></name></name><parameter_list pos:line="316" pos:column="31">(<parameter><decl><type><name pos:line="316" pos:column="32">ClientInfo<pos:position pos:line="316" pos:column="42"/></name> <modifier pos:line="316" pos:column="43">*<pos:position pos:line="316" pos:column="44"/></modifier></type><name pos:line="316" pos:column="44">info<pos:position pos:line="316" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="316" pos:column="49"/></parameter_list><member_init_list pos:line="316" pos:column="49">: <call><name pos:line="316" pos:column="51">clientInfo<pos:position pos:line="316" pos:column="61"/></name><argument_list pos:line="316" pos:column="61">(<argument><expr><name pos:line="316" pos:column="62">info<pos:position pos:line="316" pos:column="66"/></name></expr></argument>)<pos:position pos:line="316" pos:column="67"/></argument_list></call>,
        <call><name pos:line="317" pos:column="9">ins<pos:position pos:line="317" pos:column="12"/></name><argument_list pos:line="317" pos:column="12">(<argument><expr><literal type="number" pos:line="317" pos:column="13">0<pos:position pos:line="317" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="317" pos:column="15"/></argument_list></call>, <call><name pos:line="317" pos:column="17">outs<pos:position pos:line="317" pos:column="21"/></name><argument_list pos:line="317" pos:column="21">(<argument><expr><literal type="number" pos:line="317" pos:column="22">0<pos:position pos:line="317" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="317" pos:column="24"/></argument_list></call>
<pos:position pos:line="317" pos:column="25"/></member_init_list><block pos:line="318" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="319" pos:column="5">assert<pos:position pos:line="319" pos:column="11"/></name><argument_list pos:line="319" pos:column="11">(<argument><expr><name pos:line="319" pos:column="12">clientInfo<pos:position pos:line="319" pos:column="22"/></name></expr></argument>)<pos:position pos:line="319" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="319" pos:column="24"/></expr_stmt>
}<pos:position pos:line="320" pos:column="2"/></block></constructor>

<destructor><name><name pos:line="322" pos:column="1">CommQuotaQueue<pos:position pos:line="322" pos:column="15"/></name><operator pos:line="322" pos:column="15">::<pos:position pos:line="322" pos:column="17"/></operator>~<name pos:line="322" pos:column="18">CommQuotaQueue<pos:position pos:line="322" pos:column="32"/></name></name><parameter_list pos:line="322" pos:column="32">()<pos:position pos:line="322" pos:column="34"/></parameter_list>
<block pos:line="323" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="324" pos:column="5">assert<pos:position pos:line="324" pos:column="11"/></name><argument_list pos:line="324" pos:column="11">(<argument><expr><operator pos:line="324" pos:column="12">!<pos:position pos:line="324" pos:column="13"/></operator><name pos:line="324" pos:column="13">clientInfo<pos:position pos:line="324" pos:column="23"/></name></expr></argument>)<pos:position pos:line="324" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="25"/></expr_stmt> <comment type="line" pos:line="324" pos:column="26">// ClientInfo should clear this before destroying us</comment>
}<pos:position pos:line="325" pos:column="2"/></block></destructor>

<comment type="line" format="doxygen" pos:line="327" pos:column="1">/// places the given fd at the end of the queue; returns reservation ID</comment>
<function><type><name pos:line="328" pos:column="1">unsigned<pos:position pos:line="328" pos:column="9"/></name> <name pos:line="328" pos:column="10">int<pos:position pos:line="328" pos:column="13"/></name></type>
<name><name pos:line="329" pos:column="1">CommQuotaQueue<pos:position pos:line="329" pos:column="15"/></name><operator pos:line="329" pos:column="15">::<pos:position pos:line="329" pos:column="17"/></operator><name pos:line="329" pos:column="17">enqueue<pos:position pos:line="329" pos:column="24"/></name></name><parameter_list pos:line="329" pos:column="24">(<parameter><decl><type><name pos:line="329" pos:column="25">int<pos:position pos:line="329" pos:column="28"/></name></type> <name pos:line="329" pos:column="29">fd<pos:position pos:line="329" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="329" pos:column="32"/></parameter_list>
<block pos:line="330" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="331" pos:column="5">debugs<pos:position pos:line="331" pos:column="11"/></name><argument_list pos:line="331" pos:column="11">(<argument><expr><literal type="number" pos:line="331" pos:column="12">77<pos:position pos:line="331" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="331" pos:column="15">5<pos:position pos:line="331" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="331" pos:column="18">HERE<pos:position pos:line="331" pos:column="22"/></name> <operator pos:line="331" pos:column="23">&lt;&lt;<pos:position pos:line="331" pos:column="31"/></operator> <literal type="string" pos:line="331" pos:column="26">"clt"<pos:position pos:line="331" pos:column="31"/></literal> <operator pos:line="331" pos:column="32">&lt;&lt;<pos:position pos:line="331" pos:column="40"/></operator> <operator pos:line="331" pos:column="35">(<pos:position pos:line="331" pos:column="36"/></operator><specifier pos:line="331" pos:column="36">const<pos:position pos:line="331" pos:column="41"/></specifier> <name pos:line="331" pos:column="42">char<pos:position pos:line="331" pos:column="46"/></name><operator pos:line="331" pos:column="46">*<pos:position pos:line="331" pos:column="47"/></operator><operator pos:line="331" pos:column="47">)<pos:position pos:line="331" pos:column="48"/></operator><name><name pos:line="331" pos:column="48">clientInfo<pos:position pos:line="331" pos:column="58"/></name><operator pos:line="331" pos:column="58">-&gt;<pos:position pos:line="331" pos:column="63"/></operator><name pos:line="331" pos:column="60">hash<pos:position pos:line="331" pos:column="64"/></name><operator pos:line="331" pos:column="64">.<pos:position pos:line="331" pos:column="65"/></operator><name pos:line="331" pos:column="65">key<pos:position pos:line="331" pos:column="68"/></name></name> <operator pos:line="331" pos:column="69">&lt;&lt;<pos:position pos:line="331" pos:column="77"/></operator>
           <literal type="string" pos:line="332" pos:column="12">": FD "<pos:position pos:line="332" pos:column="19"/></literal> <operator pos:line="332" pos:column="20">&lt;&lt;<pos:position pos:line="332" pos:column="28"/></operator> <name pos:line="332" pos:column="23">fd<pos:position pos:line="332" pos:column="25"/></name> <operator pos:line="332" pos:column="26">&lt;&lt;<pos:position pos:line="332" pos:column="34"/></operator> <literal type="string" pos:line="332" pos:column="29">" with qqid"<pos:position pos:line="332" pos:column="41"/></literal> <operator pos:line="332" pos:column="42">&lt;&lt;<pos:position pos:line="332" pos:column="50"/></operator> <operator pos:line="332" pos:column="45">(<pos:position pos:line="332" pos:column="46"/></operator><name pos:line="332" pos:column="46">ins<pos:position pos:line="332" pos:column="49"/></name><operator pos:line="332" pos:column="49">+<pos:position pos:line="332" pos:column="50"/></operator><literal type="number" pos:line="332" pos:column="50">1<pos:position pos:line="332" pos:column="51"/></literal><operator pos:line="332" pos:column="51">)<pos:position pos:line="332" pos:column="52"/></operator> <operator pos:line="332" pos:column="53">&lt;&lt;<pos:position pos:line="332" pos:column="61"/></operator> <literal type="char" pos:line="332" pos:column="56">' '<pos:position pos:line="332" pos:column="59"/></literal> <operator pos:line="332" pos:column="60">&lt;&lt;<pos:position pos:line="332" pos:column="68"/></operator> <call><name><name pos:line="332" pos:column="63">fds<pos:position pos:line="332" pos:column="66"/></name><operator pos:line="332" pos:column="66">.<pos:position pos:line="332" pos:column="67"/></operator><name pos:line="332" pos:column="67">size<pos:position pos:line="332" pos:column="71"/></name></name><argument_list pos:line="332" pos:column="71">()<pos:position pos:line="332" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="332" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="332" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="333" pos:column="5">fds<pos:position pos:line="333" pos:column="8"/></name><operator pos:line="333" pos:column="8">.<pos:position pos:line="333" pos:column="9"/></operator><name pos:line="333" pos:column="9">push_back<pos:position pos:line="333" pos:column="18"/></name></name><argument_list pos:line="333" pos:column="18">(<argument><expr><name pos:line="333" pos:column="19">fd<pos:position pos:line="333" pos:column="21"/></name></expr></argument>)<pos:position pos:line="333" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="333" pos:column="23"/></expr_stmt>
    <return pos:line="334" pos:column="5">return <expr><operator pos:line="334" pos:column="12">++<pos:position pos:line="334" pos:column="14"/></operator><name pos:line="334" pos:column="14">ins<pos:position pos:line="334" pos:column="17"/></name></expr>;<pos:position pos:line="334" pos:column="18"/></return>
}<pos:position pos:line="335" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="337" pos:column="1">/// removes queue head</comment>
<function><type><name pos:line="338" pos:column="1">void<pos:position pos:line="338" pos:column="5"/></name></type>
<name><name pos:line="339" pos:column="1">CommQuotaQueue<pos:position pos:line="339" pos:column="15"/></name><operator pos:line="339" pos:column="15">::<pos:position pos:line="339" pos:column="17"/></operator><name pos:line="339" pos:column="17">dequeue<pos:position pos:line="339" pos:column="24"/></name></name><parameter_list pos:line="339" pos:column="24">()<pos:position pos:line="339" pos:column="26"/></parameter_list>
<block pos:line="340" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="341" pos:column="5">assert<pos:position pos:line="341" pos:column="11"/></name><argument_list pos:line="341" pos:column="11">(<argument><expr><operator pos:line="341" pos:column="12">!<pos:position pos:line="341" pos:column="13"/></operator><call><name><name pos:line="341" pos:column="13">fds<pos:position pos:line="341" pos:column="16"/></name><operator pos:line="341" pos:column="16">.<pos:position pos:line="341" pos:column="17"/></operator><name pos:line="341" pos:column="17">empty<pos:position pos:line="341" pos:column="22"/></name></name><argument_list pos:line="341" pos:column="22">()<pos:position pos:line="341" pos:column="24"/></argument_list></call></expr></argument>)<pos:position pos:line="341" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="341" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="342" pos:column="5">debugs<pos:position pos:line="342" pos:column="11"/></name><argument_list pos:line="342" pos:column="11">(<argument><expr><literal type="number" pos:line="342" pos:column="12">77<pos:position pos:line="342" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="342" pos:column="15">5<pos:position pos:line="342" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="342" pos:column="18">HERE<pos:position pos:line="342" pos:column="22"/></name> <operator pos:line="342" pos:column="23">&lt;&lt;<pos:position pos:line="342" pos:column="31"/></operator> <literal type="string" pos:line="342" pos:column="26">"clt"<pos:position pos:line="342" pos:column="31"/></literal> <operator pos:line="342" pos:column="32">&lt;&lt;<pos:position pos:line="342" pos:column="40"/></operator> <operator pos:line="342" pos:column="35">(<pos:position pos:line="342" pos:column="36"/></operator><specifier pos:line="342" pos:column="36">const<pos:position pos:line="342" pos:column="41"/></specifier> <name pos:line="342" pos:column="42">char<pos:position pos:line="342" pos:column="46"/></name><operator pos:line="342" pos:column="46">*<pos:position pos:line="342" pos:column="47"/></operator><operator pos:line="342" pos:column="47">)<pos:position pos:line="342" pos:column="48"/></operator><name><name pos:line="342" pos:column="48">clientInfo<pos:position pos:line="342" pos:column="58"/></name><operator pos:line="342" pos:column="58">-&gt;<pos:position pos:line="342" pos:column="63"/></operator><name pos:line="342" pos:column="60">hash<pos:position pos:line="342" pos:column="64"/></name><operator pos:line="342" pos:column="64">.<pos:position pos:line="342" pos:column="65"/></operator><name pos:line="342" pos:column="65">key<pos:position pos:line="342" pos:column="68"/></name></name> <operator pos:line="342" pos:column="69">&lt;&lt;<pos:position pos:line="342" pos:column="77"/></operator>
           <literal type="string" pos:line="343" pos:column="12">": FD "<pos:position pos:line="343" pos:column="19"/></literal> <operator pos:line="343" pos:column="20">&lt;&lt;<pos:position pos:line="343" pos:column="28"/></operator> <call><name><name pos:line="343" pos:column="23">fds<pos:position pos:line="343" pos:column="26"/></name><operator pos:line="343" pos:column="26">.<pos:position pos:line="343" pos:column="27"/></operator><name pos:line="343" pos:column="27">front<pos:position pos:line="343" pos:column="32"/></name></name><argument_list pos:line="343" pos:column="32">()<pos:position pos:line="343" pos:column="34"/></argument_list></call> <operator pos:line="343" pos:column="35">&lt;&lt;<pos:position pos:line="343" pos:column="43"/></operator> <literal type="string" pos:line="343" pos:column="38">" with qqid"<pos:position pos:line="343" pos:column="50"/></literal> <operator pos:line="343" pos:column="51">&lt;&lt;<pos:position pos:line="343" pos:column="59"/></operator> <operator pos:line="343" pos:column="54">(<pos:position pos:line="343" pos:column="55"/></operator><name pos:line="343" pos:column="55">outs<pos:position pos:line="343" pos:column="59"/></name><operator pos:line="343" pos:column="59">+<pos:position pos:line="343" pos:column="60"/></operator><literal type="number" pos:line="343" pos:column="60">1<pos:position pos:line="343" pos:column="61"/></literal><operator pos:line="343" pos:column="61">)<pos:position pos:line="343" pos:column="62"/></operator> <operator pos:line="343" pos:column="63">&lt;&lt;<pos:position pos:line="343" pos:column="71"/></operator> <literal type="char" pos:line="343" pos:column="66">' '<pos:position pos:line="343" pos:column="69"/></literal> <operator pos:line="343" pos:column="70">&lt;&lt;<pos:position pos:line="343" pos:column="78"/></operator>
           <call><name><name pos:line="344" pos:column="12">fds<pos:position pos:line="344" pos:column="15"/></name><operator pos:line="344" pos:column="15">.<pos:position pos:line="344" pos:column="16"/></operator><name pos:line="344" pos:column="16">size<pos:position pos:line="344" pos:column="20"/></name></name><argument_list pos:line="344" pos:column="20">()<pos:position pos:line="344" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="344" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="345" pos:column="5">fds<pos:position pos:line="345" pos:column="8"/></name><operator pos:line="345" pos:column="8">.<pos:position pos:line="345" pos:column="9"/></operator><name pos:line="345" pos:column="9">pop_front<pos:position pos:line="345" pos:column="18"/></name></name><argument_list pos:line="345" pos:column="18">()<pos:position pos:line="345" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="345" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="346" pos:column="5">++<pos:position pos:line="346" pos:column="7"/></operator><name pos:line="346" pos:column="7">outs<pos:position pos:line="346" pos:column="11"/></name></expr>;<pos:position pos:line="346" pos:column="12"/></expr_stmt>
}<pos:position pos:line="347" pos:column="2"/></block></function>
<cpp:endif pos:line="348" pos:column="1">#<cpp:directive pos:line="348" pos:column="2">endif<pos:position pos:line="348" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="350" pos:column="1">/*
 * hm, this might be too general-purpose for all the places we'd
 * like to use it.
 */</comment>
<function><type><name pos:line="354" pos:column="1">int<pos:position pos:line="354" pos:column="4"/></name></type>
<name pos:line="355" pos:column="1">ignoreErrno<pos:position pos:line="355" pos:column="12"/></name><parameter_list pos:line="355" pos:column="12">(<parameter><decl><type><name pos:line="355" pos:column="13">int<pos:position pos:line="355" pos:column="16"/></name></type> <name pos:line="355" pos:column="17">ierrno<pos:position pos:line="355" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="355" pos:column="24"/></parameter_list>
<block pos:line="356" pos:column="1">{
    <switch pos:line="357" pos:column="5">switch <condition pos:line="357" pos:column="12">(<expr><name pos:line="357" pos:column="13">ierrno<pos:position pos:line="357" pos:column="19"/></name></expr>)<pos:position pos:line="357" pos:column="20"/></condition> <block pos:line="357" pos:column="21">{

    <case pos:line="359" pos:column="5">case <expr><name pos:line="359" pos:column="10">EINPROGRESS<pos:position pos:line="359" pos:column="21"/></name></expr>:<pos:position pos:line="359" pos:column="22"/></case>

    <case pos:line="361" pos:column="5">case <expr><name pos:line="361" pos:column="10">EWOULDBLOCK<pos:position pos:line="361" pos:column="21"/></name></expr>:<pos:position pos:line="361" pos:column="22"/></case>
<cpp:if pos:line="362" pos:column="1">#<cpp:directive pos:line="362" pos:column="2">if<pos:position pos:line="362" pos:column="4"/></cpp:directive> <expr><name pos:line="362" pos:column="5">EAGAIN<pos:position pos:line="362" pos:column="11"/></name> <operator pos:line="362" pos:column="12">!=<pos:position pos:line="362" pos:column="14"/></operator> <name pos:line="362" pos:column="15">EWOULDBLOCK<pos:position pos:line="362" pos:column="26"/></name></expr></cpp:if>

    <case pos:line="364" pos:column="5">case <expr><name pos:line="364" pos:column="10">EAGAIN<pos:position pos:line="364" pos:column="16"/></name></expr>:<pos:position pos:line="364" pos:column="17"/></case>
<cpp:endif pos:line="365" pos:column="1">#<cpp:directive pos:line="365" pos:column="2">endif<pos:position pos:line="365" pos:column="7"/></cpp:directive></cpp:endif>

    <case pos:line="367" pos:column="5">case <expr><name pos:line="367" pos:column="10">EALREADY<pos:position pos:line="367" pos:column="18"/></name></expr>:<pos:position pos:line="367" pos:column="19"/></case>

    <case pos:line="369" pos:column="5">case <expr><name pos:line="369" pos:column="10">EINTR<pos:position pos:line="369" pos:column="15"/></name></expr>:<pos:position pos:line="369" pos:column="16"/></case>
<cpp:ifdef pos:line="370" pos:column="1">#<cpp:directive pos:line="370" pos:column="2">ifdef<pos:position pos:line="370" pos:column="7"/></cpp:directive> <name pos:line="370" pos:column="8">ERESTART<pos:position pos:line="370" pos:column="16"/></name></cpp:ifdef>

    <case pos:line="372" pos:column="5">case <expr><name pos:line="372" pos:column="10">ERESTART<pos:position pos:line="372" pos:column="18"/></name></expr>:<pos:position pos:line="372" pos:column="19"/></case>
<cpp:endif pos:line="373" pos:column="1">#<cpp:directive pos:line="373" pos:column="2">endif<pos:position pos:line="373" pos:column="7"/></cpp:directive></cpp:endif>

        <return pos:line="375" pos:column="9">return <expr><literal type="number" pos:line="375" pos:column="16">1<pos:position pos:line="375" pos:column="17"/></literal></expr>;<pos:position pos:line="375" pos:column="18"/></return>

    <default pos:line="377" pos:column="5">default:<pos:position pos:line="377" pos:column="13"/></default>
        <return pos:line="378" pos:column="9">return <expr><literal type="number" pos:line="378" pos:column="16">0<pos:position pos:line="378" pos:column="17"/></literal></expr>;<pos:position pos:line="378" pos:column="18"/></return>
    }<pos:position pos:line="379" pos:column="6"/></block></switch>

    <comment type="block" pos:line="381" pos:column="5">/* NOTREACHED */</comment>
}<pos:position pos:line="382" pos:column="2"/></block></function>

<function><type><name pos:line="384" pos:column="1">void<pos:position pos:line="384" pos:column="5"/></name></type>
<name pos:line="385" pos:column="1">commCloseAllSockets<pos:position pos:line="385" pos:column="20"/></name><parameter_list pos:line="385" pos:column="20">(<parameter><decl><type><name pos:line="385" pos:column="21">void<pos:position pos:line="385" pos:column="25"/></name></type></decl></parameter>)<pos:position pos:line="385" pos:column="26"/></parameter_list>
<block pos:line="386" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="387" pos:column="5">int<pos:position pos:line="387" pos:column="8"/></name></type> <name pos:line="387" pos:column="9">fd<pos:position pos:line="387" pos:column="11"/></name></decl>;<pos:position pos:line="387" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="388" pos:column="5">fde<pos:position pos:line="388" pos:column="8"/></name> <modifier pos:line="388" pos:column="9">*<pos:position pos:line="388" pos:column="10"/></modifier></type><name pos:line="388" pos:column="10">F<pos:position pos:line="388" pos:column="11"/></name> <init pos:line="388" pos:column="12">= <expr><name pos:line="388" pos:column="14">NULL<pos:position pos:line="388" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="388" pos:column="19"/></decl_stmt>

    <for pos:line="390" pos:column="5">for <control pos:line="390" pos:column="9">(<init><expr><name pos:line="390" pos:column="10">fd<pos:position pos:line="390" pos:column="12"/></name> <operator pos:line="390" pos:column="13">=<pos:position pos:line="390" pos:column="14"/></operator> <literal type="number" pos:line="390" pos:column="15">0<pos:position pos:line="390" pos:column="16"/></literal></expr>;<pos:position pos:line="390" pos:column="17"/></init> <condition><expr><name pos:line="390" pos:column="18">fd<pos:position pos:line="390" pos:column="20"/></name> <operator pos:line="390" pos:column="21">&lt;=<pos:position pos:line="390" pos:column="26"/></operator> <name pos:line="390" pos:column="24">Biggest_FD<pos:position pos:line="390" pos:column="34"/></name></expr>;<pos:position pos:line="390" pos:column="35"/></condition> <incr><expr><operator pos:line="390" pos:column="36">++<pos:position pos:line="390" pos:column="38"/></operator><name pos:line="390" pos:column="38">fd<pos:position pos:line="390" pos:column="40"/></name></expr></incr>)<pos:position pos:line="390" pos:column="41"/></control> <block pos:line="390" pos:column="42">{
        <expr_stmt><expr><name pos:line="391" pos:column="9">F<pos:position pos:line="391" pos:column="10"/></name> <operator pos:line="391" pos:column="11">=<pos:position pos:line="391" pos:column="12"/></operator> <operator pos:line="391" pos:column="13">&amp;<pos:position pos:line="391" pos:column="18"/></operator><name><name pos:line="391" pos:column="14">fd_table<pos:position pos:line="391" pos:column="22"/></name><index pos:line="391" pos:column="22">[<expr><name pos:line="391" pos:column="23">fd<pos:position pos:line="391" pos:column="25"/></name></expr>]<pos:position pos:line="391" pos:column="26"/></index></name></expr>;<pos:position pos:line="391" pos:column="27"/></expr_stmt>

        <if pos:line="393" pos:column="9">if <condition pos:line="393" pos:column="12">(<expr><operator pos:line="393" pos:column="13">!<pos:position pos:line="393" pos:column="14"/></operator><name><name pos:line="393" pos:column="14">F<pos:position pos:line="393" pos:column="15"/></name><operator pos:line="393" pos:column="15">-&gt;<pos:position pos:line="393" pos:column="20"/></operator><name pos:line="393" pos:column="17">flags<pos:position pos:line="393" pos:column="22"/></name><operator pos:line="393" pos:column="22">.<pos:position pos:line="393" pos:column="23"/></operator><name pos:line="393" pos:column="23">open<pos:position pos:line="393" pos:column="27"/></name></name></expr>)<pos:position pos:line="393" pos:column="28"/></condition><then pos:line="393" pos:column="28">
            <block type="pseudo"><continue pos:line="394" pos:column="13">continue;<pos:position pos:line="394" pos:column="22"/></continue></block></then></if>

        <if pos:line="396" pos:column="9">if <condition pos:line="396" pos:column="12">(<expr><name><name pos:line="396" pos:column="13">F<pos:position pos:line="396" pos:column="14"/></name><operator pos:line="396" pos:column="14">-&gt;<pos:position pos:line="396" pos:column="19"/></operator><name pos:line="396" pos:column="16">type<pos:position pos:line="396" pos:column="20"/></name></name> <operator pos:line="396" pos:column="21">!=<pos:position pos:line="396" pos:column="23"/></operator> <name pos:line="396" pos:column="24">FD_SOCKET<pos:position pos:line="396" pos:column="33"/></name></expr>)<pos:position pos:line="396" pos:column="34"/></condition><then pos:line="396" pos:column="34">
            <block type="pseudo"><continue pos:line="397" pos:column="13">continue;<pos:position pos:line="397" pos:column="22"/></continue></block></then></if>

        <if pos:line="399" pos:column="9">if <condition pos:line="399" pos:column="12">(<expr><name><name pos:line="399" pos:column="13">F<pos:position pos:line="399" pos:column="14"/></name><operator pos:line="399" pos:column="14">-&gt;<pos:position pos:line="399" pos:column="19"/></operator><name pos:line="399" pos:column="16">flags<pos:position pos:line="399" pos:column="21"/></name><operator pos:line="399" pos:column="21">.<pos:position pos:line="399" pos:column="22"/></operator><name pos:line="399" pos:column="22">ipc<pos:position pos:line="399" pos:column="25"/></name></name></expr>)<pos:position pos:line="399" pos:column="26"/></condition><then pos:line="399" pos:column="26">	<comment type="block" pos:line="399" pos:column="33">/* don't close inter-process sockets */</comment>
            <block type="pseudo"><continue pos:line="400" pos:column="13">continue;<pos:position pos:line="400" pos:column="22"/></continue></block></then></if>

        <if pos:line="402" pos:column="9">if <condition pos:line="402" pos:column="12">(<expr><name><name pos:line="402" pos:column="13">F<pos:position pos:line="402" pos:column="14"/></name><operator pos:line="402" pos:column="14">-&gt;<pos:position pos:line="402" pos:column="19"/></operator><name pos:line="402" pos:column="16">timeoutHandler<pos:position pos:line="402" pos:column="30"/></name></name> <operator pos:line="402" pos:column="31">!=<pos:position pos:line="402" pos:column="33"/></operator> <name pos:line="402" pos:column="34">NULL<pos:position pos:line="402" pos:column="38"/></name></expr>)<pos:position pos:line="402" pos:column="39"/></condition><then pos:line="402" pos:column="39"> <block pos:line="402" pos:column="40">{
            <decl_stmt><decl><type><name><name pos:line="403" pos:column="13">AsyncCall<pos:position pos:line="403" pos:column="22"/></name><operator pos:line="403" pos:column="22">::<pos:position pos:line="403" pos:column="24"/></operator><name pos:line="403" pos:column="24">Pointer<pos:position pos:line="403" pos:column="31"/></name></name></type> <name pos:line="403" pos:column="32">callback<pos:position pos:line="403" pos:column="40"/></name> <init pos:line="403" pos:column="41">= <expr><name><name pos:line="403" pos:column="43">F<pos:position pos:line="403" pos:column="44"/></name><operator pos:line="403" pos:column="44">-&gt;<pos:position pos:line="403" pos:column="49"/></operator><name pos:line="403" pos:column="46">timeoutHandler<pos:position pos:line="403" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="403" pos:column="61"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="404" pos:column="13">F<pos:position pos:line="404" pos:column="14"/></name><operator pos:line="404" pos:column="14">-&gt;<pos:position pos:line="404" pos:column="19"/></operator><name pos:line="404" pos:column="16">timeoutHandler<pos:position pos:line="404" pos:column="30"/></name></name> <operator pos:line="404" pos:column="31">=<pos:position pos:line="404" pos:column="32"/></operator> <name pos:line="404" pos:column="33">NULL<pos:position pos:line="404" pos:column="37"/></name></expr>;<pos:position pos:line="404" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="405" pos:column="13">debugs<pos:position pos:line="405" pos:column="19"/></name><argument_list pos:line="405" pos:column="19">(<argument><expr><literal type="number" pos:line="405" pos:column="20">5<pos:position pos:line="405" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="405" pos:column="23">5<pos:position pos:line="405" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="405" pos:column="26">"commCloseAllSockets: FD "<pos:position pos:line="405" pos:column="52"/></literal> <operator pos:line="405" pos:column="53">&lt;&lt;<pos:position pos:line="405" pos:column="61"/></operator> <name pos:line="405" pos:column="56">fd<pos:position pos:line="405" pos:column="58"/></name> <operator pos:line="405" pos:column="59">&lt;&lt;<pos:position pos:line="405" pos:column="67"/></operator> <literal type="string" pos:line="405" pos:column="62">": Calling timeout handler"<pos:position pos:line="405" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="405" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="405" pos:column="91"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="406" pos:column="13">ScheduleCallHere<pos:position pos:line="406" pos:column="29"/></name><argument_list pos:line="406" pos:column="29">(<argument><expr><name pos:line="406" pos:column="30">callback<pos:position pos:line="406" pos:column="38"/></name></expr></argument>)<pos:position pos:line="406" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="406" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="407" pos:column="10"/></block></then> <else pos:line="407" pos:column="11">else <block pos:line="407" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="408" pos:column="13">debugs<pos:position pos:line="408" pos:column="19"/></name><argument_list pos:line="408" pos:column="19">(<argument><expr><literal type="number" pos:line="408" pos:column="20">5<pos:position pos:line="408" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="408" pos:column="23">5<pos:position pos:line="408" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="408" pos:column="26">"commCloseAllSockets: FD "<pos:position pos:line="408" pos:column="52"/></literal> <operator pos:line="408" pos:column="53">&lt;&lt;<pos:position pos:line="408" pos:column="61"/></operator> <name pos:line="408" pos:column="56">fd<pos:position pos:line="408" pos:column="58"/></name> <operator pos:line="408" pos:column="59">&lt;&lt;<pos:position pos:line="408" pos:column="67"/></operator> <literal type="string" pos:line="408" pos:column="62">": calling comm_reset_close()"<pos:position pos:line="408" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="408" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="408" pos:column="94"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="409" pos:column="13">old_comm_reset_close<pos:position pos:line="409" pos:column="33"/></name><argument_list pos:line="409" pos:column="33">(<argument><expr><name pos:line="409" pos:column="34">fd<pos:position pos:line="409" pos:column="36"/></name></expr></argument>)<pos:position pos:line="409" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="409" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="410" pos:column="10"/></block></else></if>
    }<pos:position pos:line="411" pos:column="6"/></block></for>
}<pos:position pos:line="412" pos:column="2"/></block></function>

<function><specifier pos:line="414" pos:column="1">static<pos:position pos:line="414" pos:column="7"/></specifier> <type><name pos:line="414" pos:column="8">bool<pos:position pos:line="414" pos:column="12"/></name></type>
<name pos:line="415" pos:column="1">AlreadyTimedOut<pos:position pos:line="415" pos:column="16"/></name><parameter_list pos:line="415" pos:column="16">(<parameter><decl><type><name pos:line="415" pos:column="17">fde<pos:position pos:line="415" pos:column="20"/></name> <modifier pos:line="415" pos:column="21">*<pos:position pos:line="415" pos:column="22"/></modifier></type><name pos:line="415" pos:column="22">F<pos:position pos:line="415" pos:column="23"/></name></decl></parameter>)<pos:position pos:line="415" pos:column="24"/></parameter_list>
<block pos:line="416" pos:column="1">{
    <if pos:line="417" pos:column="5">if <condition pos:line="417" pos:column="8">(<expr><operator pos:line="417" pos:column="9">!<pos:position pos:line="417" pos:column="10"/></operator><name><name pos:line="417" pos:column="10">F<pos:position pos:line="417" pos:column="11"/></name><operator pos:line="417" pos:column="11">-&gt;<pos:position pos:line="417" pos:column="16"/></operator><name pos:line="417" pos:column="13">flags<pos:position pos:line="417" pos:column="18"/></name><operator pos:line="417" pos:column="18">.<pos:position pos:line="417" pos:column="19"/></operator><name pos:line="417" pos:column="19">open<pos:position pos:line="417" pos:column="23"/></name></name></expr>)<pos:position pos:line="417" pos:column="24"/></condition><then pos:line="417" pos:column="24">
        <block type="pseudo"><return pos:line="418" pos:column="9">return <expr><literal type="boolean" pos:line="418" pos:column="16">true<pos:position pos:line="418" pos:column="20"/></literal></expr>;<pos:position pos:line="418" pos:column="21"/></return></block></then></if>

    <if pos:line="420" pos:column="5">if <condition pos:line="420" pos:column="8">(<expr><name><name pos:line="420" pos:column="9">F<pos:position pos:line="420" pos:column="10"/></name><operator pos:line="420" pos:column="10">-&gt;<pos:position pos:line="420" pos:column="15"/></operator><name pos:line="420" pos:column="12">timeout<pos:position pos:line="420" pos:column="19"/></name></name> <operator pos:line="420" pos:column="20">==<pos:position pos:line="420" pos:column="22"/></operator> <literal type="number" pos:line="420" pos:column="23">0<pos:position pos:line="420" pos:column="24"/></literal></expr>)<pos:position pos:line="420" pos:column="25"/></condition><then pos:line="420" pos:column="25">
        <block type="pseudo"><return pos:line="421" pos:column="9">return <expr><literal type="boolean" pos:line="421" pos:column="16">true<pos:position pos:line="421" pos:column="20"/></literal></expr>;<pos:position pos:line="421" pos:column="21"/></return></block></then></if>

    <if pos:line="423" pos:column="5">if <condition pos:line="423" pos:column="8">(<expr><name><name pos:line="423" pos:column="9">F<pos:position pos:line="423" pos:column="10"/></name><operator pos:line="423" pos:column="10">-&gt;<pos:position pos:line="423" pos:column="15"/></operator><name pos:line="423" pos:column="12">timeout<pos:position pos:line="423" pos:column="19"/></name></name> <operator pos:line="423" pos:column="20">&gt;<pos:position pos:line="423" pos:column="24"/></operator> <name pos:line="423" pos:column="22">squid_curtime<pos:position pos:line="423" pos:column="35"/></name></expr>)<pos:position pos:line="423" pos:column="36"/></condition><then pos:line="423" pos:column="36">
        <block type="pseudo"><return pos:line="424" pos:column="9">return <expr><literal type="boolean" pos:line="424" pos:column="16">true<pos:position pos:line="424" pos:column="20"/></literal></expr>;<pos:position pos:line="424" pos:column="21"/></return></block></then></if>

    <return pos:line="426" pos:column="5">return <expr><literal type="boolean" pos:line="426" pos:column="12">false<pos:position pos:line="426" pos:column="17"/></literal></expr>;<pos:position pos:line="426" pos:column="18"/></return>
}<pos:position pos:line="427" pos:column="2"/></block></function>

<function><specifier pos:line="429" pos:column="1">static<pos:position pos:line="429" pos:column="7"/></specifier> <type><name pos:line="429" pos:column="8">bool<pos:position pos:line="429" pos:column="12"/></name></type>
<name pos:line="430" pos:column="1">writeTimedOut<pos:position pos:line="430" pos:column="14"/></name><parameter_list pos:line="430" pos:column="14">(<parameter><decl><type><name pos:line="430" pos:column="15">int<pos:position pos:line="430" pos:column="18"/></name></type> <name pos:line="430" pos:column="19">fd<pos:position pos:line="430" pos:column="21"/></name></decl></parameter>)<pos:position pos:line="430" pos:column="22"/></parameter_list>
<block pos:line="431" pos:column="1">{
    <if pos:line="432" pos:column="5">if <condition pos:line="432" pos:column="8">(<expr><operator pos:line="432" pos:column="9">!<pos:position pos:line="432" pos:column="10"/></operator><call><name pos:line="432" pos:column="10">COMMIO_FD_WRITECB<pos:position pos:line="432" pos:column="27"/></name><argument_list pos:line="432" pos:column="27">(<argument><expr><name pos:line="432" pos:column="28">fd<pos:position pos:line="432" pos:column="30"/></name></expr></argument>)<pos:position pos:line="432" pos:column="31"/></argument_list></call><operator pos:line="432" pos:column="31">-&gt;<pos:position pos:line="432" pos:column="36"/></operator><call><name pos:line="432" pos:column="33">active<pos:position pos:line="432" pos:column="39"/></name><argument_list pos:line="432" pos:column="39">()<pos:position pos:line="432" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="432" pos:column="42"/></condition><then pos:line="432" pos:column="42">
        <block type="pseudo"><return pos:line="433" pos:column="9">return <expr><literal type="boolean" pos:line="433" pos:column="16">false<pos:position pos:line="433" pos:column="21"/></literal></expr>;<pos:position pos:line="433" pos:column="22"/></return></block></then></if>

    <if pos:line="435" pos:column="5">if <condition pos:line="435" pos:column="8">(<expr><operator pos:line="435" pos:column="9">(<pos:position pos:line="435" pos:column="10"/></operator><name pos:line="435" pos:column="10">squid_curtime<pos:position pos:line="435" pos:column="23"/></name> <operator pos:line="435" pos:column="24">-<pos:position pos:line="435" pos:column="25"/></operator> <name><name pos:line="435" pos:column="26">fd_table<pos:position pos:line="435" pos:column="34"/></name><index pos:line="435" pos:column="34">[<expr><name pos:line="435" pos:column="35">fd<pos:position pos:line="435" pos:column="37"/></name></expr>]<pos:position pos:line="435" pos:column="38"/></index></name><operator pos:line="435" pos:column="38">.<pos:position pos:line="435" pos:column="39"/></operator><name pos:line="435" pos:column="39">writeStart<pos:position pos:line="435" pos:column="49"/></name><operator pos:line="435" pos:column="49">)<pos:position pos:line="435" pos:column="50"/></operator> <operator pos:line="435" pos:column="51">&lt;<pos:position pos:line="435" pos:column="55"/></operator> <name><name pos:line="435" pos:column="53">Config<pos:position pos:line="435" pos:column="59"/></name><operator pos:line="435" pos:column="59">.<pos:position pos:line="435" pos:column="60"/></operator><name pos:line="435" pos:column="60">Timeout<pos:position pos:line="435" pos:column="67"/></name><operator pos:line="435" pos:column="67">.<pos:position pos:line="435" pos:column="68"/></operator><name pos:line="435" pos:column="68">write<pos:position pos:line="435" pos:column="73"/></name></name></expr>)<pos:position pos:line="435" pos:column="74"/></condition><then pos:line="435" pos:column="74">
        <block type="pseudo"><return pos:line="436" pos:column="9">return <expr><literal type="boolean" pos:line="436" pos:column="16">false<pos:position pos:line="436" pos:column="21"/></literal></expr>;<pos:position pos:line="436" pos:column="22"/></return></block></then></if>

    <return pos:line="438" pos:column="5">return <expr><literal type="boolean" pos:line="438" pos:column="12">true<pos:position pos:line="438" pos:column="16"/></literal></expr>;<pos:position pos:line="438" pos:column="17"/></return>
}<pos:position pos:line="439" pos:column="2"/></block></function>

<function><type><name pos:line="441" pos:column="1">void<pos:position pos:line="441" pos:column="5"/></name></type>
<name pos:line="442" pos:column="1">checkTimeouts<pos:position pos:line="442" pos:column="14"/></name><parameter_list pos:line="442" pos:column="14">(<parameter><decl><type><name pos:line="442" pos:column="15">void<pos:position pos:line="442" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="442" pos:column="20"/></parameter_list>
<block pos:line="443" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="444" pos:column="5">int<pos:position pos:line="444" pos:column="8"/></name></type> <name pos:line="444" pos:column="9">fd<pos:position pos:line="444" pos:column="11"/></name></decl>;<pos:position pos:line="444" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="445" pos:column="5">fde<pos:position pos:line="445" pos:column="8"/></name> <modifier pos:line="445" pos:column="9">*<pos:position pos:line="445" pos:column="10"/></modifier></type><name pos:line="445" pos:column="10">F<pos:position pos:line="445" pos:column="11"/></name> <init pos:line="445" pos:column="12">= <expr><name pos:line="445" pos:column="14">NULL<pos:position pos:line="445" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="445" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="446" pos:column="5">AsyncCall<pos:position pos:line="446" pos:column="14"/></name><operator pos:line="446" pos:column="14">::<pos:position pos:line="446" pos:column="16"/></operator><name pos:line="446" pos:column="16">Pointer<pos:position pos:line="446" pos:column="23"/></name></name></type> <name pos:line="446" pos:column="24">callback<pos:position pos:line="446" pos:column="32"/></name></decl>;<pos:position pos:line="446" pos:column="33"/></decl_stmt>

    <for pos:line="448" pos:column="5">for <control pos:line="448" pos:column="9">(<init><expr><name pos:line="448" pos:column="10">fd<pos:position pos:line="448" pos:column="12"/></name> <operator pos:line="448" pos:column="13">=<pos:position pos:line="448" pos:column="14"/></operator> <literal type="number" pos:line="448" pos:column="15">0<pos:position pos:line="448" pos:column="16"/></literal></expr>;<pos:position pos:line="448" pos:column="17"/></init> <condition><expr><name pos:line="448" pos:column="18">fd<pos:position pos:line="448" pos:column="20"/></name> <operator pos:line="448" pos:column="21">&lt;=<pos:position pos:line="448" pos:column="26"/></operator> <name pos:line="448" pos:column="24">Biggest_FD<pos:position pos:line="448" pos:column="34"/></name></expr>;<pos:position pos:line="448" pos:column="35"/></condition> <incr><expr><operator pos:line="448" pos:column="36">++<pos:position pos:line="448" pos:column="38"/></operator><name pos:line="448" pos:column="38">fd<pos:position pos:line="448" pos:column="40"/></name></expr></incr>)<pos:position pos:line="448" pos:column="41"/></control> <block pos:line="448" pos:column="42">{
        <expr_stmt><expr><name pos:line="449" pos:column="9">F<pos:position pos:line="449" pos:column="10"/></name> <operator pos:line="449" pos:column="11">=<pos:position pos:line="449" pos:column="12"/></operator> <operator pos:line="449" pos:column="13">&amp;<pos:position pos:line="449" pos:column="18"/></operator><name><name pos:line="449" pos:column="14">fd_table<pos:position pos:line="449" pos:column="22"/></name><index pos:line="449" pos:column="22">[<expr><name pos:line="449" pos:column="23">fd<pos:position pos:line="449" pos:column="25"/></name></expr>]<pos:position pos:line="449" pos:column="26"/></index></name></expr>;<pos:position pos:line="449" pos:column="27"/></expr_stmt>

        <if pos:line="451" pos:column="9">if <condition pos:line="451" pos:column="12">(<expr><call><name pos:line="451" pos:column="13">writeTimedOut<pos:position pos:line="451" pos:column="26"/></name><argument_list pos:line="451" pos:column="26">(<argument><expr><name pos:line="451" pos:column="27">fd<pos:position pos:line="451" pos:column="29"/></name></expr></argument>)<pos:position pos:line="451" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="451" pos:column="31"/></condition><then pos:line="451" pos:column="31"> <block pos:line="451" pos:column="32">{
            <comment type="line" pos:line="452" pos:column="13">// We have an active write callback and we are timed out</comment>
            <expr_stmt><expr><call><name pos:line="453" pos:column="13">debugs<pos:position pos:line="453" pos:column="19"/></name><argument_list pos:line="453" pos:column="19">(<argument><expr><literal type="number" pos:line="453" pos:column="20">5<pos:position pos:line="453" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="453" pos:column="23">5<pos:position pos:line="453" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="453" pos:column="26">"checkTimeouts: FD "<pos:position pos:line="453" pos:column="46"/></literal> <operator pos:line="453" pos:column="47">&lt;&lt;<pos:position pos:line="453" pos:column="55"/></operator> <name pos:line="453" pos:column="50">fd<pos:position pos:line="453" pos:column="52"/></name> <operator pos:line="453" pos:column="53">&lt;&lt;<pos:position pos:line="453" pos:column="61"/></operator> <literal type="string" pos:line="453" pos:column="56">" auto write timeout"<pos:position pos:line="453" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="453" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="453" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="454" pos:column="13">Comm<pos:position pos:line="454" pos:column="17"/></name><operator pos:line="454" pos:column="17">::<pos:position pos:line="454" pos:column="19"/></operator><name pos:line="454" pos:column="19">SetSelect<pos:position pos:line="454" pos:column="28"/></name></name><argument_list pos:line="454" pos:column="28">(<argument><expr><name pos:line="454" pos:column="29">fd<pos:position pos:line="454" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="454" pos:column="33">COMM_SELECT_WRITE<pos:position pos:line="454" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="454" pos:column="52">NULL<pos:position pos:line="454" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="454" pos:column="58">NULL<pos:position pos:line="454" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="454" pos:column="64">0<pos:position pos:line="454" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="454" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="454" pos:column="67"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="455" pos:column="13">COMMIO_FD_WRITECB<pos:position pos:line="455" pos:column="30"/></name><argument_list pos:line="455" pos:column="30">(<argument><expr><name pos:line="455" pos:column="31">fd<pos:position pos:line="455" pos:column="33"/></name></expr></argument>)<pos:position pos:line="455" pos:column="34"/></argument_list></call><operator pos:line="455" pos:column="34">-&gt;<pos:position pos:line="455" pos:column="39"/></operator><call><name pos:line="455" pos:column="36">finish<pos:position pos:line="455" pos:column="42"/></name><argument_list pos:line="455" pos:column="42">(<argument><expr><name pos:line="455" pos:column="43">COMM_ERROR<pos:position pos:line="455" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="455" pos:column="55">ETIMEDOUT<pos:position pos:line="455" pos:column="64"/></name></expr></argument>)<pos:position pos:line="455" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="455" pos:column="66"/></expr_stmt>
        }<pos:position pos:line="456" pos:column="10"/></block></then> <elseif pos:line="456" pos:column="11">else <if pos:line="456" pos:column="16">if <condition pos:line="456" pos:column="19">(<expr><call><name pos:line="456" pos:column="20">AlreadyTimedOut<pos:position pos:line="456" pos:column="35"/></name><argument_list pos:line="456" pos:column="35">(<argument><expr><name pos:line="456" pos:column="36">F<pos:position pos:line="456" pos:column="37"/></name></expr></argument>)<pos:position pos:line="456" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="456" pos:column="39"/></condition><then pos:line="456" pos:column="39">
            <block type="pseudo"><continue pos:line="457" pos:column="13">continue;<pos:position pos:line="457" pos:column="22"/></continue></block></then></if></elseif></if>

        <expr_stmt><expr><call><name pos:line="459" pos:column="9">debugs<pos:position pos:line="459" pos:column="15"/></name><argument_list pos:line="459" pos:column="15">(<argument><expr><literal type="number" pos:line="459" pos:column="16">5<pos:position pos:line="459" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="459" pos:column="19">5<pos:position pos:line="459" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="459" pos:column="22">"checkTimeouts: FD "<pos:position pos:line="459" pos:column="42"/></literal> <operator pos:line="459" pos:column="43">&lt;&lt;<pos:position pos:line="459" pos:column="51"/></operator> <name pos:line="459" pos:column="46">fd<pos:position pos:line="459" pos:column="48"/></name> <operator pos:line="459" pos:column="49">&lt;&lt;<pos:position pos:line="459" pos:column="57"/></operator> <literal type="string" pos:line="459" pos:column="52">" Expired"<pos:position pos:line="459" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="459" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="459" pos:column="64"/></expr_stmt>

        <if pos:line="461" pos:column="9">if <condition pos:line="461" pos:column="12">(<expr><name><name pos:line="461" pos:column="13">F<pos:position pos:line="461" pos:column="14"/></name><operator pos:line="461" pos:column="14">-&gt;<pos:position pos:line="461" pos:column="19"/></operator><name pos:line="461" pos:column="16">timeoutHandler<pos:position pos:line="461" pos:column="30"/></name></name> <operator pos:line="461" pos:column="31">!=<pos:position pos:line="461" pos:column="33"/></operator> <name pos:line="461" pos:column="34">NULL<pos:position pos:line="461" pos:column="38"/></name></expr>)<pos:position pos:line="461" pos:column="39"/></condition><then pos:line="461" pos:column="39"> <block pos:line="461" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="462" pos:column="13">debugs<pos:position pos:line="462" pos:column="19"/></name><argument_list pos:line="462" pos:column="19">(<argument><expr><literal type="number" pos:line="462" pos:column="20">5<pos:position pos:line="462" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="462" pos:column="23">5<pos:position pos:line="462" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="462" pos:column="26">"checkTimeouts: FD "<pos:position pos:line="462" pos:column="46"/></literal> <operator pos:line="462" pos:column="47">&lt;&lt;<pos:position pos:line="462" pos:column="55"/></operator> <name pos:line="462" pos:column="50">fd<pos:position pos:line="462" pos:column="52"/></name> <operator pos:line="462" pos:column="53">&lt;&lt;<pos:position pos:line="462" pos:column="61"/></operator> <literal type="string" pos:line="462" pos:column="56">": Call timeout handler"<pos:position pos:line="462" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="462" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="462" pos:column="82"/></expr_stmt>
            <expr_stmt><expr><name pos:line="463" pos:column="13">callback<pos:position pos:line="463" pos:column="21"/></name> <operator pos:line="463" pos:column="22">=<pos:position pos:line="463" pos:column="23"/></operator> <name><name pos:line="463" pos:column="24">F<pos:position pos:line="463" pos:column="25"/></name><operator pos:line="463" pos:column="25">-&gt;<pos:position pos:line="463" pos:column="30"/></operator><name pos:line="463" pos:column="27">timeoutHandler<pos:position pos:line="463" pos:column="41"/></name></name></expr>;<pos:position pos:line="463" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="464" pos:column="13">F<pos:position pos:line="464" pos:column="14"/></name><operator pos:line="464" pos:column="14">-&gt;<pos:position pos:line="464" pos:column="19"/></operator><name pos:line="464" pos:column="16">timeoutHandler<pos:position pos:line="464" pos:column="30"/></name></name> <operator pos:line="464" pos:column="31">=<pos:position pos:line="464" pos:column="32"/></operator> <name pos:line="464" pos:column="33">NULL<pos:position pos:line="464" pos:column="37"/></name></expr>;<pos:position pos:line="464" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="465" pos:column="13">ScheduleCallHere<pos:position pos:line="465" pos:column="29"/></name><argument_list pos:line="465" pos:column="29">(<argument><expr><name pos:line="465" pos:column="30">callback<pos:position pos:line="465" pos:column="38"/></name></expr></argument>)<pos:position pos:line="465" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="465" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="466" pos:column="10"/></block></then> <else pos:line="466" pos:column="11">else <block pos:line="466" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="467" pos:column="13">debugs<pos:position pos:line="467" pos:column="19"/></name><argument_list pos:line="467" pos:column="19">(<argument><expr><literal type="number" pos:line="467" pos:column="20">5<pos:position pos:line="467" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="467" pos:column="23">5<pos:position pos:line="467" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="467" pos:column="26">"checkTimeouts: FD "<pos:position pos:line="467" pos:column="46"/></literal> <operator pos:line="467" pos:column="47">&lt;&lt;<pos:position pos:line="467" pos:column="55"/></operator> <name pos:line="467" pos:column="50">fd<pos:position pos:line="467" pos:column="52"/></name> <operator pos:line="467" pos:column="53">&lt;&lt;<pos:position pos:line="467" pos:column="61"/></operator> <literal type="string" pos:line="467" pos:column="56">": Forcing comm_close()"<pos:position pos:line="467" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="467" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="467" pos:column="82"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="468" pos:column="13">comm_close<pos:position pos:line="468" pos:column="23"/></name><argument_list pos:line="468" pos:column="23">(<argument><expr><name pos:line="468" pos:column="24">fd<pos:position pos:line="468" pos:column="26"/></name></expr></argument>)<pos:position pos:line="468" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="468" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="469" pos:column="10"/></block></else></if>
    }<pos:position pos:line="470" pos:column="6"/></block></for>
}<pos:position pos:line="471" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="473" pos:column="1">/// Start waiting for a possibly half-closed connection to close</comment>
<comment type="line" pos:line="474" pos:column="1">// by scheduling a read callback to a monitoring handler that</comment>
<comment type="line" pos:line="475" pos:column="1">// will close the connection on read errors.</comment>
<function><type><name pos:line="476" pos:column="1">void<pos:position pos:line="476" pos:column="5"/></name></type>
<name pos:line="477" pos:column="1">commStartHalfClosedMonitor<pos:position pos:line="477" pos:column="27"/></name><parameter_list pos:line="477" pos:column="27">(<parameter><decl><type><name pos:line="477" pos:column="28">int<pos:position pos:line="477" pos:column="31"/></name></type> <name pos:line="477" pos:column="32">fd<pos:position pos:line="477" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="477" pos:column="35"/></parameter_list>
<block pos:line="478" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="479" pos:column="5">debugs<pos:position pos:line="479" pos:column="11"/></name><argument_list pos:line="479" pos:column="11">(<argument><expr><literal type="number" pos:line="479" pos:column="12">5<pos:position pos:line="479" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="479" pos:column="15">5<pos:position pos:line="479" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="479" pos:column="18">HERE<pos:position pos:line="479" pos:column="22"/></name> <operator pos:line="479" pos:column="23">&lt;&lt;<pos:position pos:line="479" pos:column="31"/></operator> <literal type="string" pos:line="479" pos:column="26">"adding FD "<pos:position pos:line="479" pos:column="38"/></literal> <operator pos:line="479" pos:column="39">&lt;&lt;<pos:position pos:line="479" pos:column="47"/></operator> <name pos:line="479" pos:column="42">fd<pos:position pos:line="479" pos:column="44"/></name> <operator pos:line="479" pos:column="45">&lt;&lt;<pos:position pos:line="479" pos:column="53"/></operator> <literal type="string" pos:line="479" pos:column="48">" to "<pos:position pos:line="479" pos:column="54"/></literal> <operator pos:line="479" pos:column="55">&lt;&lt;<pos:position pos:line="479" pos:column="63"/></operator> <operator pos:line="479" pos:column="58">*<pos:position pos:line="479" pos:column="59"/></operator><name pos:line="479" pos:column="59">TheHalfClosed<pos:position pos:line="479" pos:column="72"/></name></expr></argument>)<pos:position pos:line="479" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="479" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="480" pos:column="5">assert<pos:position pos:line="480" pos:column="11"/></name><argument_list pos:line="480" pos:column="11">(<argument><expr><call><name pos:line="480" pos:column="12">isOpen<pos:position pos:line="480" pos:column="18"/></name><argument_list pos:line="480" pos:column="18">(<argument><expr><name pos:line="480" pos:column="19">fd<pos:position pos:line="480" pos:column="21"/></name></expr></argument>)<pos:position pos:line="480" pos:column="22"/></argument_list></call> <operator pos:line="480" pos:column="23">&amp;&amp;<pos:position pos:line="480" pos:column="33"/></operator> <operator pos:line="480" pos:column="26">!<pos:position pos:line="480" pos:column="27"/></operator><call><name pos:line="480" pos:column="27">commHasHalfClosedMonitor<pos:position pos:line="480" pos:column="51"/></name><argument_list pos:line="480" pos:column="51">(<argument><expr><name pos:line="480" pos:column="52">fd<pos:position pos:line="480" pos:column="54"/></name></expr></argument>)<pos:position pos:line="480" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="480" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="480" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="481" pos:column="5">(<pos:position pos:line="481" pos:column="6"/></operator><name pos:line="481" pos:column="6">void<pos:position pos:line="481" pos:column="10"/></name><operator pos:line="481" pos:column="10">)<pos:position pos:line="481" pos:column="11"/></operator><call><name><name pos:line="481" pos:column="11">TheHalfClosed<pos:position pos:line="481" pos:column="24"/></name><operator pos:line="481" pos:column="24">-&gt;<pos:position pos:line="481" pos:column="29"/></operator><name pos:line="481" pos:column="26">add<pos:position pos:line="481" pos:column="29"/></name></name><argument_list pos:line="481" pos:column="29">(<argument><expr><name pos:line="481" pos:column="30">fd<pos:position pos:line="481" pos:column="32"/></name></expr></argument>)<pos:position pos:line="481" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="481" pos:column="34"/></expr_stmt> <comment type="line" pos:line="481" pos:column="35">// could also assert the result</comment>
    <expr_stmt><expr><call><name pos:line="482" pos:column="5">commPlanHalfClosedCheck<pos:position pos:line="482" pos:column="28"/></name><argument_list pos:line="482" pos:column="28">()<pos:position pos:line="482" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="482" pos:column="31"/></expr_stmt> <comment type="line" pos:line="482" pos:column="32">// may schedule check if we added the first FD</comment>
}<pos:position pos:line="483" pos:column="2"/></block></function>

<function><specifier pos:line="485" pos:column="1">static<pos:position pos:line="485" pos:column="7"/></specifier>
<type><name pos:line="486" pos:column="1">void<pos:position pos:line="486" pos:column="5"/></name></type>
<name pos:line="487" pos:column="1">commPlanHalfClosedCheck<pos:position pos:line="487" pos:column="24"/></name><parameter_list pos:line="487" pos:column="24">()<pos:position pos:line="487" pos:column="26"/></parameter_list>
<block pos:line="488" pos:column="1">{
    <if pos:line="489" pos:column="5">if <condition pos:line="489" pos:column="8">(<expr><operator pos:line="489" pos:column="9">!<pos:position pos:line="489" pos:column="10"/></operator><name pos:line="489" pos:column="10">WillCheckHalfClosed<pos:position pos:line="489" pos:column="29"/></name> <operator pos:line="489" pos:column="30">&amp;&amp;<pos:position pos:line="489" pos:column="40"/></operator> <operator pos:line="489" pos:column="33">!<pos:position pos:line="489" pos:column="34"/></operator><call><name><name pos:line="489" pos:column="34">TheHalfClosed<pos:position pos:line="489" pos:column="47"/></name><operator pos:line="489" pos:column="47">-&gt;<pos:position pos:line="489" pos:column="52"/></operator><name pos:line="489" pos:column="49">empty<pos:position pos:line="489" pos:column="54"/></name></name><argument_list pos:line="489" pos:column="54">()<pos:position pos:line="489" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="489" pos:column="57"/></condition><then pos:line="489" pos:column="57"> <block pos:line="489" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="490" pos:column="9">eventAdd<pos:position pos:line="490" pos:column="17"/></name><argument_list pos:line="490" pos:column="17">(<argument><expr><literal type="string" pos:line="490" pos:column="18">"commHalfClosedCheck"<pos:position pos:line="490" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="490" pos:column="41">&amp;<pos:position pos:line="490" pos:column="46"/></operator><name pos:line="490" pos:column="42">commHalfClosedCheck<pos:position pos:line="490" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="490" pos:column="63">NULL<pos:position pos:line="490" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="490" pos:column="69">1.0<pos:position pos:line="490" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="490" pos:column="74">1<pos:position pos:line="490" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="490" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="490" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><name pos:line="491" pos:column="9">WillCheckHalfClosed<pos:position pos:line="491" pos:column="28"/></name> <operator pos:line="491" pos:column="29">=<pos:position pos:line="491" pos:column="30"/></operator> <literal type="boolean" pos:line="491" pos:column="31">true<pos:position pos:line="491" pos:column="35"/></literal></expr>;<pos:position pos:line="491" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="492" pos:column="6"/></block></then></if>
}<pos:position pos:line="493" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="495" pos:column="1">/// iterates over all descriptors that may need half-closed tests and</comment>
<comment type="line" format="doxygen" pos:line="496" pos:column="1">/// calls comm_read for those that do; re-schedules the check if needed</comment>
<function><specifier pos:line="497" pos:column="1">static<pos:position pos:line="497" pos:column="7"/></specifier>
<type><name pos:line="498" pos:column="1">void<pos:position pos:line="498" pos:column="5"/></name></type>
<name pos:line="499" pos:column="1">commHalfClosedCheck<pos:position pos:line="499" pos:column="20"/></name><parameter_list pos:line="499" pos:column="20">(<parameter><decl><type><name pos:line="499" pos:column="21">void<pos:position pos:line="499" pos:column="25"/></name> <modifier pos:line="499" pos:column="26">*<pos:position pos:line="499" pos:column="27"/></modifier></type></decl></parameter>)<pos:position pos:line="499" pos:column="28"/></parameter_list>
<block pos:line="500" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="501" pos:column="5">debugs<pos:position pos:line="501" pos:column="11"/></name><argument_list pos:line="501" pos:column="11">(<argument><expr><literal type="number" pos:line="501" pos:column="12">5<pos:position pos:line="501" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="501" pos:column="15">5<pos:position pos:line="501" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="501" pos:column="18">HERE<pos:position pos:line="501" pos:column="22"/></name> <operator pos:line="501" pos:column="23">&lt;&lt;<pos:position pos:line="501" pos:column="31"/></operator> <literal type="string" pos:line="501" pos:column="26">"checking "<pos:position pos:line="501" pos:column="37"/></literal> <operator pos:line="501" pos:column="38">&lt;&lt;<pos:position pos:line="501" pos:column="46"/></operator> <operator pos:line="501" pos:column="41">*<pos:position pos:line="501" pos:column="42"/></operator><name pos:line="501" pos:column="42">TheHalfClosed<pos:position pos:line="501" pos:column="55"/></name></expr></argument>)<pos:position pos:line="501" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="501" pos:column="57"/></expr_stmt>

    <typedef pos:line="503" pos:column="5">typedef <type><name><name pos:line="503" pos:column="13">DescriptorSet<pos:position pos:line="503" pos:column="26"/></name><operator pos:line="503" pos:column="26">::<pos:position pos:line="503" pos:column="28"/></operator><name pos:line="503" pos:column="28">const_iterator<pos:position pos:line="503" pos:column="42"/></name></name></type> <name pos:line="503" pos:column="43">DSCI<pos:position pos:line="503" pos:column="47"/></name>;<pos:position pos:line="503" pos:column="48"/></typedef>
    <decl_stmt><decl><type><specifier pos:line="504" pos:column="5">const<pos:position pos:line="504" pos:column="10"/></specifier> <name pos:line="504" pos:column="11">DSCI<pos:position pos:line="504" pos:column="15"/></name></type> <name pos:line="504" pos:column="16">end<pos:position pos:line="504" pos:column="19"/></name> <init pos:line="504" pos:column="20">= <expr><call><name><name pos:line="504" pos:column="22">TheHalfClosed<pos:position pos:line="504" pos:column="35"/></name><operator pos:line="504" pos:column="35">-&gt;<pos:position pos:line="504" pos:column="40"/></operator><name pos:line="504" pos:column="37">end<pos:position pos:line="504" pos:column="40"/></name></name><argument_list pos:line="504" pos:column="40">()<pos:position pos:line="504" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="504" pos:column="43"/></decl_stmt>
    <for pos:line="505" pos:column="5">for <control pos:line="505" pos:column="9">(<init><decl><type><name pos:line="505" pos:column="10">DSCI<pos:position pos:line="505" pos:column="14"/></name></type> <name pos:line="505" pos:column="15">i<pos:position pos:line="505" pos:column="16"/></name> <init pos:line="505" pos:column="17">= <expr><call><name><name pos:line="505" pos:column="19">TheHalfClosed<pos:position pos:line="505" pos:column="32"/></name><operator pos:line="505" pos:column="32">-&gt;<pos:position pos:line="505" pos:column="37"/></operator><name pos:line="505" pos:column="34">begin<pos:position pos:line="505" pos:column="39"/></name></name><argument_list pos:line="505" pos:column="39">()<pos:position pos:line="505" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="505" pos:column="42"/></init> <condition><expr><name pos:line="505" pos:column="43">i<pos:position pos:line="505" pos:column="44"/></name> <operator pos:line="505" pos:column="45">!=<pos:position pos:line="505" pos:column="47"/></operator> <name pos:line="505" pos:column="48">end<pos:position pos:line="505" pos:column="51"/></name></expr>;<pos:position pos:line="505" pos:column="52"/></condition> <incr><expr><operator pos:line="505" pos:column="53">++<pos:position pos:line="505" pos:column="55"/></operator><name pos:line="505" pos:column="55">i<pos:position pos:line="505" pos:column="56"/></name></expr></incr>)<pos:position pos:line="505" pos:column="57"/></control> <block pos:line="505" pos:column="58">{
        <decl_stmt><decl><type><name><name pos:line="506" pos:column="9">Comm<pos:position pos:line="506" pos:column="13"/></name><operator pos:line="506" pos:column="13">::<pos:position pos:line="506" pos:column="15"/></operator><name pos:line="506" pos:column="15">ConnectionPointer<pos:position pos:line="506" pos:column="32"/></name></name></type> <name pos:line="506" pos:column="33">c<pos:position pos:line="506" pos:column="34"/></name> <init pos:line="506" pos:column="35">= <expr><operator pos:line="506" pos:column="37">new<pos:position pos:line="506" pos:column="40"/></operator> <name><name pos:line="506" pos:column="41">Comm<pos:position pos:line="506" pos:column="45"/></name><operator pos:line="506" pos:column="45">::<pos:position pos:line="506" pos:column="47"/></operator><name pos:line="506" pos:column="47">Connection<pos:position pos:line="506" pos:column="57"/></name></name></expr></init></decl>;<pos:position pos:line="506" pos:column="58"/></decl_stmt> <comment type="line" pos:line="506" pos:column="59">// XXX: temporary. make HalfClosed a list of these.</comment>
        <expr_stmt><expr><name><name pos:line="507" pos:column="9">c<pos:position pos:line="507" pos:column="10"/></name><operator pos:line="507" pos:column="10">-&gt;<pos:position pos:line="507" pos:column="15"/></operator><name pos:line="507" pos:column="12">fd<pos:position pos:line="507" pos:column="14"/></name></name> <operator pos:line="507" pos:column="15">=<pos:position pos:line="507" pos:column="16"/></operator> <operator pos:line="507" pos:column="17">*<pos:position pos:line="507" pos:column="18"/></operator><name pos:line="507" pos:column="18">i<pos:position pos:line="507" pos:column="19"/></name></expr>;<pos:position pos:line="507" pos:column="20"/></expr_stmt>
        <if pos:line="508" pos:column="9">if <condition pos:line="508" pos:column="12">(<expr><operator pos:line="508" pos:column="13">!<pos:position pos:line="508" pos:column="14"/></operator><name><name pos:line="508" pos:column="14">fd_table<pos:position pos:line="508" pos:column="22"/></name><index pos:line="508" pos:column="22">[<expr><name><name pos:line="508" pos:column="23">c<pos:position pos:line="508" pos:column="24"/></name><operator pos:line="508" pos:column="24">-&gt;<pos:position pos:line="508" pos:column="29"/></operator><name pos:line="508" pos:column="26">fd<pos:position pos:line="508" pos:column="28"/></name></name></expr>]<pos:position pos:line="508" pos:column="29"/></index></name><operator pos:line="508" pos:column="29">.<pos:position pos:line="508" pos:column="30"/></operator><name pos:line="508" pos:column="30">halfClosedReader<pos:position pos:line="508" pos:column="46"/></name></expr>)<pos:position pos:line="508" pos:column="47"/></condition><then pos:line="508" pos:column="47"> <block pos:line="508" pos:column="48">{ <comment type="line" pos:line="508" pos:column="50">// not reading already</comment>
            <decl_stmt><decl><type><name><name pos:line="509" pos:column="13">AsyncCall<pos:position pos:line="509" pos:column="22"/></name><operator pos:line="509" pos:column="22">::<pos:position pos:line="509" pos:column="24"/></operator><name pos:line="509" pos:column="24">Pointer<pos:position pos:line="509" pos:column="31"/></name></name></type> <name pos:line="509" pos:column="32">call<pos:position pos:line="509" pos:column="36"/></name> <init pos:line="509" pos:column="37">= <expr><call><name pos:line="509" pos:column="39">commCbCall<pos:position pos:line="509" pos:column="49"/></name><argument_list pos:line="509" pos:column="49">(<argument><expr><literal type="number" pos:line="509" pos:column="50">5<pos:position pos:line="509" pos:column="51"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="509" pos:column="52">4<pos:position pos:line="509" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="509" pos:column="55">"commHalfClosedReader"<pos:position pos:line="509" pos:column="77"/></literal></expr></argument>,
                                                 <argument><expr><call><name pos:line="510" pos:column="50">CommIoCbPtrFun<pos:position pos:line="510" pos:column="64"/></name><argument_list pos:line="510" pos:column="64">(<argument><expr><operator pos:line="510" pos:column="65">&amp;<pos:position pos:line="510" pos:column="70"/></operator><name pos:line="510" pos:column="66">commHalfClosedReader<pos:position pos:line="510" pos:column="86"/></name></expr></argument>, <argument><expr><name pos:line="510" pos:column="88">NULL<pos:position pos:line="510" pos:column="92"/></name></expr></argument>)<pos:position pos:line="510" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="510" pos:column="94"/></argument_list></call></expr></init></decl>;<pos:position pos:line="510" pos:column="95"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="511" pos:column="13">comm_read<pos:position pos:line="511" pos:column="22"/></name><argument_list pos:line="511" pos:column="22">(<argument><expr><name pos:line="511" pos:column="23">c<pos:position pos:line="511" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="511" pos:column="26">NULL<pos:position pos:line="511" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="511" pos:column="32">0<pos:position pos:line="511" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="511" pos:column="35">call<pos:position pos:line="511" pos:column="39"/></name></expr></argument>)<pos:position pos:line="511" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="511" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="512" pos:column="13">fd_table<pos:position pos:line="512" pos:column="21"/></name><index pos:line="512" pos:column="21">[<expr><name><name pos:line="512" pos:column="22">c<pos:position pos:line="512" pos:column="23"/></name><operator pos:line="512" pos:column="23">-&gt;<pos:position pos:line="512" pos:column="28"/></operator><name pos:line="512" pos:column="25">fd<pos:position pos:line="512" pos:column="27"/></name></name></expr>]<pos:position pos:line="512" pos:column="28"/></index></name><operator pos:line="512" pos:column="28">.<pos:position pos:line="512" pos:column="29"/></operator><name pos:line="512" pos:column="29">halfClosedReader<pos:position pos:line="512" pos:column="45"/></name> <operator pos:line="512" pos:column="46">=<pos:position pos:line="512" pos:column="47"/></operator> <name pos:line="512" pos:column="48">call<pos:position pos:line="512" pos:column="52"/></name></expr>;<pos:position pos:line="512" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="513" pos:column="10"/></block></then> <else pos:line="513" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="514" pos:column="13">c<pos:position pos:line="514" pos:column="14"/></name><operator pos:line="514" pos:column="14">-&gt;<pos:position pos:line="514" pos:column="19"/></operator><name pos:line="514" pos:column="16">fd<pos:position pos:line="514" pos:column="18"/></name></name> <operator pos:line="514" pos:column="19">=<pos:position pos:line="514" pos:column="20"/></operator> <operator pos:line="514" pos:column="21">-<pos:position pos:line="514" pos:column="22"/></operator><literal type="number" pos:line="514" pos:column="22">1<pos:position pos:line="514" pos:column="23"/></literal></expr>;<pos:position pos:line="514" pos:column="24"/></expr_stmt></block></else></if> <comment type="line" pos:line="514" pos:column="25">// XXX: temporary. prevent c replacement erase closing listed FD</comment>
    }<pos:position pos:line="515" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="517" pos:column="5">WillCheckHalfClosed<pos:position pos:line="517" pos:column="24"/></name> <operator pos:line="517" pos:column="25">=<pos:position pos:line="517" pos:column="26"/></operator> <literal type="boolean" pos:line="517" pos:column="27">false<pos:position pos:line="517" pos:column="32"/></literal></expr>;<pos:position pos:line="517" pos:column="33"/></expr_stmt> <comment type="line" pos:line="517" pos:column="34">// as far as we know</comment>
    <expr_stmt><expr><call><name pos:line="518" pos:column="5">commPlanHalfClosedCheck<pos:position pos:line="518" pos:column="28"/></name><argument_list pos:line="518" pos:column="28">()<pos:position pos:line="518" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="518" pos:column="31"/></expr_stmt> <comment type="line" pos:line="518" pos:column="32">// may need to check again</comment>
}<pos:position pos:line="519" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="521" pos:column="1">/// checks whether we are waiting for possibly half-closed connection to close</comment>
<comment type="line" pos:line="522" pos:column="1">// We are monitoring if the read handler for the fd is the monitoring handler.</comment>
<function><type><name pos:line="523" pos:column="1">bool<pos:position pos:line="523" pos:column="5"/></name></type>
<name pos:line="524" pos:column="1">commHasHalfClosedMonitor<pos:position pos:line="524" pos:column="25"/></name><parameter_list pos:line="524" pos:column="25">(<parameter><decl><type><name pos:line="524" pos:column="26">int<pos:position pos:line="524" pos:column="29"/></name></type> <name pos:line="524" pos:column="30">fd<pos:position pos:line="524" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="524" pos:column="33"/></parameter_list>
<block pos:line="525" pos:column="1">{
    <return pos:line="526" pos:column="5">return <expr><call><name><name pos:line="526" pos:column="12">TheHalfClosed<pos:position pos:line="526" pos:column="25"/></name><operator pos:line="526" pos:column="25">-&gt;<pos:position pos:line="526" pos:column="30"/></operator><name pos:line="526" pos:column="27">has<pos:position pos:line="526" pos:column="30"/></name></name><argument_list pos:line="526" pos:column="30">(<argument><expr><name pos:line="526" pos:column="31">fd<pos:position pos:line="526" pos:column="33"/></name></expr></argument>)<pos:position pos:line="526" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="526" pos:column="35"/></return>
}<pos:position pos:line="527" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="529" pos:column="1">/// stop waiting for possibly half-closed connection to close</comment>
<function><specifier pos:line="530" pos:column="1">static<pos:position pos:line="530" pos:column="7"/></specifier> <type><name pos:line="530" pos:column="8">void<pos:position pos:line="530" pos:column="12"/></name></type>
<name pos:line="531" pos:column="1">commStopHalfClosedMonitor<pos:position pos:line="531" pos:column="26"/></name><parameter_list pos:line="531" pos:column="26">(<parameter><decl><type><name pos:line="531" pos:column="27">int<pos:position pos:line="531" pos:column="30"/></name> <specifier pos:line="531" pos:column="31">const<pos:position pos:line="531" pos:column="36"/></specifier></type> <name pos:line="531" pos:column="37">fd<pos:position pos:line="531" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="531" pos:column="40"/></parameter_list>
<block pos:line="532" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="533" pos:column="5">debugs<pos:position pos:line="533" pos:column="11"/></name><argument_list pos:line="533" pos:column="11">(<argument><expr><literal type="number" pos:line="533" pos:column="12">5<pos:position pos:line="533" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="533" pos:column="15">5<pos:position pos:line="533" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="533" pos:column="18">HERE<pos:position pos:line="533" pos:column="22"/></name> <operator pos:line="533" pos:column="23">&lt;&lt;<pos:position pos:line="533" pos:column="31"/></operator> <literal type="string" pos:line="533" pos:column="26">"removing FD "<pos:position pos:line="533" pos:column="40"/></literal> <operator pos:line="533" pos:column="41">&lt;&lt;<pos:position pos:line="533" pos:column="49"/></operator> <name pos:line="533" pos:column="44">fd<pos:position pos:line="533" pos:column="46"/></name> <operator pos:line="533" pos:column="47">&lt;&lt;<pos:position pos:line="533" pos:column="55"/></operator> <literal type="string" pos:line="533" pos:column="50">" from "<pos:position pos:line="533" pos:column="58"/></literal> <operator pos:line="533" pos:column="59">&lt;&lt;<pos:position pos:line="533" pos:column="67"/></operator> <operator pos:line="533" pos:column="62">*<pos:position pos:line="533" pos:column="63"/></operator><name pos:line="533" pos:column="63">TheHalfClosed<pos:position pos:line="533" pos:column="76"/></name></expr></argument>)<pos:position pos:line="533" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="533" pos:column="78"/></expr_stmt>

    <comment type="line" pos:line="535" pos:column="5">// cancel the read if one was scheduled</comment>
    <decl_stmt><decl><type><name><name pos:line="536" pos:column="5">AsyncCall<pos:position pos:line="536" pos:column="14"/></name><operator pos:line="536" pos:column="14">::<pos:position pos:line="536" pos:column="16"/></operator><name pos:line="536" pos:column="16">Pointer<pos:position pos:line="536" pos:column="23"/></name></name></type> <name pos:line="536" pos:column="24">reader<pos:position pos:line="536" pos:column="30"/></name> <init pos:line="536" pos:column="31">= <expr><name><name pos:line="536" pos:column="33">fd_table<pos:position pos:line="536" pos:column="41"/></name><index pos:line="536" pos:column="41">[<expr><name pos:line="536" pos:column="42">fd<pos:position pos:line="536" pos:column="44"/></name></expr>]<pos:position pos:line="536" pos:column="45"/></index></name><operator pos:line="536" pos:column="45">.<pos:position pos:line="536" pos:column="46"/></operator><name pos:line="536" pos:column="46">halfClosedReader<pos:position pos:line="536" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="536" pos:column="63"/></decl_stmt>
    <if pos:line="537" pos:column="5">if <condition pos:line="537" pos:column="8">(<expr><name pos:line="537" pos:column="9">reader<pos:position pos:line="537" pos:column="15"/></name> <operator pos:line="537" pos:column="16">!=<pos:position pos:line="537" pos:column="18"/></operator> <name pos:line="537" pos:column="19">NULL<pos:position pos:line="537" pos:column="23"/></name></expr>)<pos:position pos:line="537" pos:column="24"/></condition><then pos:line="537" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="538" pos:column="9">comm_read_cancel<pos:position pos:line="538" pos:column="25"/></name><argument_list pos:line="538" pos:column="25">(<argument><expr><name pos:line="538" pos:column="26">fd<pos:position pos:line="538" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="538" pos:column="30">reader<pos:position pos:line="538" pos:column="36"/></name></expr></argument>)<pos:position pos:line="538" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="538" pos:column="38"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="539" pos:column="5">fd_table<pos:position pos:line="539" pos:column="13"/></name><index pos:line="539" pos:column="13">[<expr><name pos:line="539" pos:column="14">fd<pos:position pos:line="539" pos:column="16"/></name></expr>]<pos:position pos:line="539" pos:column="17"/></index></name><operator pos:line="539" pos:column="17">.<pos:position pos:line="539" pos:column="18"/></operator><name pos:line="539" pos:column="18">halfClosedReader<pos:position pos:line="539" pos:column="34"/></name> <operator pos:line="539" pos:column="35">=<pos:position pos:line="539" pos:column="36"/></operator> <name pos:line="539" pos:column="37">NULL<pos:position pos:line="539" pos:column="41"/></name></expr>;<pos:position pos:line="539" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="541" pos:column="5">TheHalfClosed<pos:position pos:line="541" pos:column="18"/></name><operator pos:line="541" pos:column="18">-&gt;<pos:position pos:line="541" pos:column="23"/></operator><name pos:line="541" pos:column="20">del<pos:position pos:line="541" pos:column="23"/></name></name><argument_list pos:line="541" pos:column="23">(<argument><expr><name pos:line="541" pos:column="24">fd<pos:position pos:line="541" pos:column="26"/></name></expr></argument>)<pos:position pos:line="541" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="541" pos:column="28"/></expr_stmt>
}<pos:position pos:line="542" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="544" pos:column="1">/// I/O handler for the possibly half-closed connection monitoring code</comment>
<function><specifier pos:line="545" pos:column="1">static<pos:position pos:line="545" pos:column="7"/></specifier> <type><name pos:line="545" pos:column="8">void<pos:position pos:line="545" pos:column="12"/></name></type>
<name pos:line="546" pos:column="1">commHalfClosedReader<pos:position pos:line="546" pos:column="21"/></name><parameter_list pos:line="546" pos:column="21">(<parameter><decl><type><specifier pos:line="546" pos:column="22">const<pos:position pos:line="546" pos:column="27"/></specifier> <name><name pos:line="546" pos:column="28">Comm<pos:position pos:line="546" pos:column="32"/></name><operator pos:line="546" pos:column="32">::<pos:position pos:line="546" pos:column="34"/></operator><name pos:line="546" pos:column="34">ConnectionPointer<pos:position pos:line="546" pos:column="51"/></name></name> <modifier pos:line="546" pos:column="52">&amp;<pos:position pos:line="546" pos:column="57"/></modifier></type><name pos:line="546" pos:column="53">conn<pos:position pos:line="546" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="546" pos:column="59">char<pos:position pos:line="546" pos:column="63"/></name> <modifier pos:line="546" pos:column="64">*<pos:position pos:line="546" pos:column="65"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="546" pos:column="67">size_t<pos:position pos:line="546" pos:column="73"/></name></type> <name pos:line="546" pos:column="74">size<pos:position pos:line="546" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><name pos:line="546" pos:column="80">comm_err_t<pos:position pos:line="546" pos:column="90"/></name></type> <name pos:line="546" pos:column="91">flag<pos:position pos:line="546" pos:column="95"/></name></decl></parameter>, <parameter><decl><type><name pos:line="546" pos:column="97">int<pos:position pos:line="546" pos:column="100"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="546" pos:column="102">void<pos:position pos:line="546" pos:column="106"/></name> <modifier pos:line="546" pos:column="107">*<pos:position pos:line="546" pos:column="108"/></modifier></type></decl></parameter>)<pos:position pos:line="546" pos:column="109"/></parameter_list>
<block pos:line="547" pos:column="1">{
    <comment type="line" pos:line="548" pos:column="5">// there cannot be more data coming in on half-closed connections</comment>
    <expr_stmt><expr><call><name pos:line="549" pos:column="5">assert<pos:position pos:line="549" pos:column="11"/></name><argument_list pos:line="549" pos:column="11">(<argument><expr><name pos:line="549" pos:column="12">size<pos:position pos:line="549" pos:column="16"/></name> <operator pos:line="549" pos:column="17">==<pos:position pos:line="549" pos:column="19"/></operator> <literal type="number" pos:line="549" pos:column="20">0<pos:position pos:line="549" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="549" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="549" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="550" pos:column="5">assert<pos:position pos:line="550" pos:column="11"/></name><argument_list pos:line="550" pos:column="11">(<argument><expr><name pos:line="550" pos:column="12">conn<pos:position pos:line="550" pos:column="16"/></name> <operator pos:line="550" pos:column="17">!=<pos:position pos:line="550" pos:column="19"/></operator> <name pos:line="550" pos:column="20">NULL<pos:position pos:line="550" pos:column="24"/></name></expr></argument>)<pos:position pos:line="550" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="550" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="551" pos:column="5">assert<pos:position pos:line="551" pos:column="11"/></name><argument_list pos:line="551" pos:column="11">(<argument><expr><call><name pos:line="551" pos:column="12">commHasHalfClosedMonitor<pos:position pos:line="551" pos:column="36"/></name><argument_list pos:line="551" pos:column="36">(<argument><expr><name><name pos:line="551" pos:column="37">conn<pos:position pos:line="551" pos:column="41"/></name><operator pos:line="551" pos:column="41">-&gt;<pos:position pos:line="551" pos:column="46"/></operator><name pos:line="551" pos:column="43">fd<pos:position pos:line="551" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="551" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="551" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="551" pos:column="48"/></expr_stmt> <comment type="line" pos:line="551" pos:column="49">// or we would have canceled the read</comment>

    <expr_stmt><expr><name><name pos:line="553" pos:column="5">fd_table<pos:position pos:line="553" pos:column="13"/></name><index pos:line="553" pos:column="13">[<expr><name><name pos:line="553" pos:column="14">conn<pos:position pos:line="553" pos:column="18"/></name><operator pos:line="553" pos:column="18">-&gt;<pos:position pos:line="553" pos:column="23"/></operator><name pos:line="553" pos:column="20">fd<pos:position pos:line="553" pos:column="22"/></name></name></expr>]<pos:position pos:line="553" pos:column="23"/></index></name><operator pos:line="553" pos:column="23">.<pos:position pos:line="553" pos:column="24"/></operator><name pos:line="553" pos:column="24">halfClosedReader<pos:position pos:line="553" pos:column="40"/></name> <operator pos:line="553" pos:column="41">=<pos:position pos:line="553" pos:column="42"/></operator> <name pos:line="553" pos:column="43">NULL<pos:position pos:line="553" pos:column="47"/></name></expr>;<pos:position pos:line="553" pos:column="48"/></expr_stmt> <comment type="line" pos:line="553" pos:column="49">// done reading, for now</comment>

    <comment type="line" pos:line="555" pos:column="5">// nothing to do if fd is being closed</comment>
    <if pos:line="556" pos:column="5">if <condition pos:line="556" pos:column="8">(<expr><name pos:line="556" pos:column="9">flag<pos:position pos:line="556" pos:column="13"/></name> <operator pos:line="556" pos:column="14">==<pos:position pos:line="556" pos:column="16"/></operator> <name pos:line="556" pos:column="17">COMM_ERR_CLOSING<pos:position pos:line="556" pos:column="33"/></name></expr>)<pos:position pos:line="556" pos:column="34"/></condition><then pos:line="556" pos:column="34">
        <block type="pseudo"><return pos:line="557" pos:column="9">return;<pos:position pos:line="557" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="559" pos:column="5">// if read failed, close the connection</comment>
    <if pos:line="560" pos:column="5">if <condition pos:line="560" pos:column="8">(<expr><name pos:line="560" pos:column="9">flag<pos:position pos:line="560" pos:column="13"/></name> <operator pos:line="560" pos:column="14">!=<pos:position pos:line="560" pos:column="16"/></operator> <name pos:line="560" pos:column="17">COMM_OK<pos:position pos:line="560" pos:column="24"/></name></expr>)<pos:position pos:line="560" pos:column="25"/></condition><then pos:line="560" pos:column="25"> <block pos:line="560" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="561" pos:column="9">debugs<pos:position pos:line="561" pos:column="15"/></name><argument_list pos:line="561" pos:column="15">(<argument><expr><literal type="number" pos:line="561" pos:column="16">5<pos:position pos:line="561" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="561" pos:column="19">3<pos:position pos:line="561" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="561" pos:column="22">HERE<pos:position pos:line="561" pos:column="26"/></name> <operator pos:line="561" pos:column="27">&lt;&lt;<pos:position pos:line="561" pos:column="35"/></operator> <literal type="string" pos:line="561" pos:column="30">"closing "<pos:position pos:line="561" pos:column="40"/></literal> <operator pos:line="561" pos:column="41">&lt;&lt;<pos:position pos:line="561" pos:column="49"/></operator> <name pos:line="561" pos:column="44">conn<pos:position pos:line="561" pos:column="48"/></name></expr></argument>)<pos:position pos:line="561" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="561" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="562" pos:column="9">conn<pos:position pos:line="562" pos:column="13"/></name><operator pos:line="562" pos:column="13">-&gt;<pos:position pos:line="562" pos:column="18"/></operator><name pos:line="562" pos:column="15">close<pos:position pos:line="562" pos:column="20"/></name></name><argument_list pos:line="562" pos:column="20">()<pos:position pos:line="562" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="562" pos:column="23"/></expr_stmt>
        <return pos:line="563" pos:column="9">return;<pos:position pos:line="563" pos:column="16"/></return>
    }<pos:position pos:line="564" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="566" pos:column="5">// continue waiting for close or error</comment>
    <expr_stmt><expr><call><name pos:line="567" pos:column="5">commPlanHalfClosedCheck<pos:position pos:line="567" pos:column="28"/></name><argument_list pos:line="567" pos:column="28">()<pos:position pos:line="567" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="567" pos:column="31"/></expr_stmt> <comment type="line" pos:line="567" pos:column="32">// make sure this fd will be checked again</comment>
}<pos:position pos:line="568" pos:column="2"/></block></function>

<constructor><name><name pos:line="570" pos:column="1">CommRead<pos:position pos:line="570" pos:column="9"/></name><operator pos:line="570" pos:column="9">::<pos:position pos:line="570" pos:column="11"/></operator><name pos:line="570" pos:column="11">CommRead<pos:position pos:line="570" pos:column="19"/></name></name><parameter_list pos:line="570" pos:column="19">()<pos:position pos:line="570" pos:column="21"/></parameter_list> <member_init_list pos:line="570" pos:column="22">: <call><name pos:line="570" pos:column="24">conn<pos:position pos:line="570" pos:column="28"/></name><argument_list pos:line="570" pos:column="28">(<argument><expr><name pos:line="570" pos:column="29">NULL<pos:position pos:line="570" pos:column="33"/></name></expr></argument>)<pos:position pos:line="570" pos:column="34"/></argument_list></call>, <call><name pos:line="570" pos:column="36">buf<pos:position pos:line="570" pos:column="39"/></name><argument_list pos:line="570" pos:column="39">(<argument><expr><name pos:line="570" pos:column="40">NULL<pos:position pos:line="570" pos:column="44"/></name></expr></argument>)<pos:position pos:line="570" pos:column="45"/></argument_list></call>, <call><name pos:line="570" pos:column="47">len<pos:position pos:line="570" pos:column="50"/></name><argument_list pos:line="570" pos:column="50">(<argument><expr><literal type="number" pos:line="570" pos:column="51">0<pos:position pos:line="570" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="570" pos:column="53"/></argument_list></call>, <call><name pos:line="570" pos:column="55">callback<pos:position pos:line="570" pos:column="63"/></name><argument_list pos:line="570" pos:column="63">(<argument><expr><name pos:line="570" pos:column="64">NULL<pos:position pos:line="570" pos:column="68"/></name></expr></argument>)<pos:position pos:line="570" pos:column="69"/></argument_list></call> <pos:position pos:line="570" pos:column="70"/></member_init_list><block pos:line="570" pos:column="70">{}<pos:position pos:line="570" pos:column="72"/></block></constructor>

<constructor><name><name pos:line="572" pos:column="1">CommRead<pos:position pos:line="572" pos:column="9"/></name><operator pos:line="572" pos:column="9">::<pos:position pos:line="572" pos:column="11"/></operator><name pos:line="572" pos:column="11">CommRead<pos:position pos:line="572" pos:column="19"/></name></name><parameter_list pos:line="572" pos:column="19">(<parameter><decl><type><specifier pos:line="572" pos:column="20">const<pos:position pos:line="572" pos:column="25"/></specifier> <name><name pos:line="572" pos:column="26">Comm<pos:position pos:line="572" pos:column="30"/></name><operator pos:line="572" pos:column="30">::<pos:position pos:line="572" pos:column="32"/></operator><name pos:line="572" pos:column="32">ConnectionPointer<pos:position pos:line="572" pos:column="49"/></name></name> <modifier pos:line="572" pos:column="50">&amp;<pos:position pos:line="572" pos:column="55"/></modifier></type><name pos:line="572" pos:column="51">c<pos:position pos:line="572" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="572" pos:column="54">char<pos:position pos:line="572" pos:column="58"/></name> <modifier pos:line="572" pos:column="59">*<pos:position pos:line="572" pos:column="60"/></modifier></type><name pos:line="572" pos:column="60">buf_<pos:position pos:line="572" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="572" pos:column="66">int<pos:position pos:line="572" pos:column="69"/></name></type> <name pos:line="572" pos:column="70">len_<pos:position pos:line="572" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="572" pos:column="76">AsyncCall<pos:position pos:line="572" pos:column="85"/></name><operator pos:line="572" pos:column="85">::<pos:position pos:line="572" pos:column="87"/></operator><name pos:line="572" pos:column="87">Pointer<pos:position pos:line="572" pos:column="94"/></name></name> <modifier pos:line="572" pos:column="95">&amp;<pos:position pos:line="572" pos:column="100"/></modifier></type><name pos:line="572" pos:column="96">callback_<pos:position pos:line="572" pos:column="105"/></name></decl></parameter>)<pos:position pos:line="572" pos:column="106"/></parameter_list>
        <member_init_list pos:line="573" pos:column="9">: <call><name pos:line="573" pos:column="11">conn<pos:position pos:line="573" pos:column="15"/></name><argument_list pos:line="573" pos:column="15">(<argument><expr><name pos:line="573" pos:column="16">c<pos:position pos:line="573" pos:column="17"/></name></expr></argument>)<pos:position pos:line="573" pos:column="18"/></argument_list></call>, <call><name pos:line="573" pos:column="20">buf<pos:position pos:line="573" pos:column="23"/></name><argument_list pos:line="573" pos:column="23">(<argument><expr><name pos:line="573" pos:column="24">buf_<pos:position pos:line="573" pos:column="28"/></name></expr></argument>)<pos:position pos:line="573" pos:column="29"/></argument_list></call>, <call><name pos:line="573" pos:column="31">len<pos:position pos:line="573" pos:column="34"/></name><argument_list pos:line="573" pos:column="34">(<argument><expr><name pos:line="573" pos:column="35">len_<pos:position pos:line="573" pos:column="39"/></name></expr></argument>)<pos:position pos:line="573" pos:column="40"/></argument_list></call>, <call><name pos:line="573" pos:column="42">callback<pos:position pos:line="573" pos:column="50"/></name><argument_list pos:line="573" pos:column="50">(<argument><expr><name pos:line="573" pos:column="51">callback_<pos:position pos:line="573" pos:column="60"/></name></expr></argument>)<pos:position pos:line="573" pos:column="61"/></argument_list></call> <pos:position pos:line="573" pos:column="62"/></member_init_list><block pos:line="573" pos:column="62">{}<pos:position pos:line="573" pos:column="64"/></block></constructor>

<constructor><name><name pos:line="575" pos:column="1">DeferredRead<pos:position pos:line="575" pos:column="13"/></name><operator pos:line="575" pos:column="13">::<pos:position pos:line="575" pos:column="15"/></operator><name pos:line="575" pos:column="15">DeferredRead<pos:position pos:line="575" pos:column="27"/></name></name> <parameter_list pos:line="575" pos:column="28">()<pos:position pos:line="575" pos:column="30"/></parameter_list> <member_init_list pos:line="575" pos:column="31">: <call><name pos:line="575" pos:column="33">theReader<pos:position pos:line="575" pos:column="42"/></name><argument_list pos:line="575" pos:column="42">(<argument><expr><name pos:line="575" pos:column="43">NULL<pos:position pos:line="575" pos:column="47"/></name></expr></argument>)<pos:position pos:line="575" pos:column="48"/></argument_list></call>, <call><name pos:line="575" pos:column="50">theContext<pos:position pos:line="575" pos:column="60"/></name><argument_list pos:line="575" pos:column="60">(<argument><expr><name pos:line="575" pos:column="61">NULL<pos:position pos:line="575" pos:column="65"/></name></expr></argument>)<pos:position pos:line="575" pos:column="66"/></argument_list></call>, <call><name pos:line="575" pos:column="68">theRead<pos:position pos:line="575" pos:column="75"/></name><argument_list pos:line="575" pos:column="75">()<pos:position pos:line="575" pos:column="77"/></argument_list></call>, <call><name pos:line="575" pos:column="79">cancelled<pos:position pos:line="575" pos:column="88"/></name><argument_list pos:line="575" pos:column="88">(<argument><expr><literal type="boolean" pos:line="575" pos:column="89">false<pos:position pos:line="575" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="575" pos:column="95"/></argument_list></call> <pos:position pos:line="575" pos:column="96"/></member_init_list><block pos:line="575" pos:column="96">{}<pos:position pos:line="575" pos:column="98"/></block></constructor>

<constructor><name><name pos:line="577" pos:column="1">DeferredRead<pos:position pos:line="577" pos:column="13"/></name><operator pos:line="577" pos:column="13">::<pos:position pos:line="577" pos:column="15"/></operator><name pos:line="577" pos:column="15">DeferredRead<pos:position pos:line="577" pos:column="27"/></name></name> <parameter_list pos:line="577" pos:column="28">(<parameter><decl><type><name pos:line="577" pos:column="29">DeferrableRead<pos:position pos:line="577" pos:column="43"/></name> <modifier pos:line="577" pos:column="44">*<pos:position pos:line="577" pos:column="45"/></modifier></type><name pos:line="577" pos:column="45">aReader<pos:position pos:line="577" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="577" pos:column="54">void<pos:position pos:line="577" pos:column="58"/></name> <modifier pos:line="577" pos:column="59">*<pos:position pos:line="577" pos:column="60"/></modifier></type><name pos:line="577" pos:column="60">data<pos:position pos:line="577" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="577" pos:column="66">CommRead<pos:position pos:line="577" pos:column="74"/></name> <specifier pos:line="577" pos:column="75">const<pos:position pos:line="577" pos:column="80"/></specifier> <modifier pos:line="577" pos:column="81">&amp;<pos:position pos:line="577" pos:column="86"/></modifier></type><name pos:line="577" pos:column="82">aRead<pos:position pos:line="577" pos:column="87"/></name></decl></parameter>)<pos:position pos:line="577" pos:column="88"/></parameter_list> <member_init_list pos:line="577" pos:column="89">: <call><name pos:line="577" pos:column="91">theReader<pos:position pos:line="577" pos:column="100"/></name><argument_list pos:line="577" pos:column="100">(<argument><expr><name pos:line="577" pos:column="101">aReader<pos:position pos:line="577" pos:column="108"/></name></expr></argument>)<pos:position pos:line="577" pos:column="109"/></argument_list></call>, <call><name pos:line="577" pos:column="111">theContext<pos:position pos:line="577" pos:column="121"/></name> <argument_list pos:line="577" pos:column="122">(<argument><expr><name pos:line="577" pos:column="123">data<pos:position pos:line="577" pos:column="127"/></name></expr></argument>)<pos:position pos:line="577" pos:column="128"/></argument_list></call>, <call><name pos:line="577" pos:column="130">theRead<pos:position pos:line="577" pos:column="137"/></name><argument_list pos:line="577" pos:column="137">(<argument><expr><name pos:line="577" pos:column="138">aRead<pos:position pos:line="577" pos:column="143"/></name></expr></argument>)<pos:position pos:line="577" pos:column="144"/></argument_list></call>, <call><name pos:line="577" pos:column="146">cancelled<pos:position pos:line="577" pos:column="155"/></name><argument_list pos:line="577" pos:column="155">(<argument><expr><literal type="boolean" pos:line="577" pos:column="156">false<pos:position pos:line="577" pos:column="161"/></literal></expr></argument>)<pos:position pos:line="577" pos:column="162"/></argument_list></call> <pos:position pos:line="577" pos:column="163"/></member_init_list><block pos:line="577" pos:column="163">{}<pos:position pos:line="577" pos:column="165"/></block></constructor>

<destructor><name><name pos:line="579" pos:column="1">DeferredReadManager<pos:position pos:line="579" pos:column="20"/></name><operator pos:line="579" pos:column="20">::<pos:position pos:line="579" pos:column="22"/></operator>~<name pos:line="579" pos:column="23">DeferredReadManager<pos:position pos:line="579" pos:column="42"/></name></name><parameter_list pos:line="579" pos:column="42">()<pos:position pos:line="579" pos:column="44"/></parameter_list>
<block pos:line="580" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="581" pos:column="5">flushReads<pos:position pos:line="581" pos:column="15"/></name><argument_list pos:line="581" pos:column="15">()<pos:position pos:line="581" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="581" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="582" pos:column="5">assert<pos:position pos:line="582" pos:column="11"/></name> <argument_list pos:line="582" pos:column="12">(<argument><expr><call><name><name pos:line="582" pos:column="13">deferredReads<pos:position pos:line="582" pos:column="26"/></name><operator pos:line="582" pos:column="26">.<pos:position pos:line="582" pos:column="27"/></operator><name pos:line="582" pos:column="27">empty<pos:position pos:line="582" pos:column="32"/></name></name><argument_list pos:line="582" pos:column="32">()<pos:position pos:line="582" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="582" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="582" pos:column="36"/></expr_stmt>
}<pos:position pos:line="583" pos:column="2"/></block></destructor>

<comment type="block" pos:line="585" pos:column="1">/* explicit instantiation required for some systems */</comment>

<comment type="line" format="doxygen" pos:line="587" pos:column="1">/// \cond AUTODOCS-IGNORE</comment>
<decl_stmt><decl><specifier pos:line="588" pos:column="1">template<pos:position pos:line="588" pos:column="9"/></specifier> <type><name pos:line="588" pos:column="10">cbdata_type<pos:position pos:line="588" pos:column="21"/></name></type> <name><name><name pos:line="588" pos:column="22">CbDataList<pos:position pos:line="588" pos:column="32"/></name><argument_list type="generic" pos:line="588" pos:column="32">&lt;<argument><expr><name pos:line="588" pos:column="33">DeferredRead<pos:position pos:line="588" pos:column="45"/></name></expr></argument>&gt;<pos:position pos:line="588" pos:column="49"/></argument_list></name><operator pos:line="588" pos:column="46">::<pos:position pos:line="588" pos:column="48"/></operator><name pos:line="588" pos:column="48">CBDATA_CbDataList<pos:position pos:line="588" pos:column="65"/></name></name></decl>;<pos:position pos:line="588" pos:column="66"/></decl_stmt>
<comment type="line" format="doxygen" pos:line="589" pos:column="1">/// \endcond</comment>

<function><type><name pos:line="591" pos:column="1">void<pos:position pos:line="591" pos:column="5"/></name></type>
<name><name pos:line="592" pos:column="1">DeferredReadManager<pos:position pos:line="592" pos:column="20"/></name><operator pos:line="592" pos:column="20">::<pos:position pos:line="592" pos:column="22"/></operator><name pos:line="592" pos:column="22">delayRead<pos:position pos:line="592" pos:column="31"/></name></name><parameter_list pos:line="592" pos:column="31">(<parameter><decl><type><name pos:line="592" pos:column="32">DeferredRead<pos:position pos:line="592" pos:column="44"/></name> <specifier pos:line="592" pos:column="45">const<pos:position pos:line="592" pos:column="50"/></specifier> <modifier pos:line="592" pos:column="51">&amp;<pos:position pos:line="592" pos:column="56"/></modifier></type><name pos:line="592" pos:column="52">aRead<pos:position pos:line="592" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="592" pos:column="58"/></parameter_list>
<block pos:line="593" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="594" pos:column="5">debugs<pos:position pos:line="594" pos:column="11"/></name><argument_list pos:line="594" pos:column="11">(<argument><expr><literal type="number" pos:line="594" pos:column="12">5<pos:position pos:line="594" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="594" pos:column="15">3<pos:position pos:line="594" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="594" pos:column="18">"Adding deferred read on "<pos:position pos:line="594" pos:column="44"/></literal> <operator pos:line="594" pos:column="45">&lt;&lt;<pos:position pos:line="594" pos:column="53"/></operator> <name><name pos:line="594" pos:column="48">aRead<pos:position pos:line="594" pos:column="53"/></name><operator pos:line="594" pos:column="53">.<pos:position pos:line="594" pos:column="54"/></operator><name pos:line="594" pos:column="54">theRead<pos:position pos:line="594" pos:column="61"/></name><operator pos:line="594" pos:column="61">.<pos:position pos:line="594" pos:column="62"/></operator><name pos:line="594" pos:column="62">conn<pos:position pos:line="594" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="594" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="594" pos:column="68"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="595" pos:column="5">CbDataList<pos:position pos:line="595" pos:column="15"/></name><argument_list type="generic" pos:line="595" pos:column="15">&lt;<argument><expr><name pos:line="595" pos:column="16">DeferredRead<pos:position pos:line="595" pos:column="28"/></name></expr></argument>&gt;<pos:position pos:line="595" pos:column="32"/></argument_list></name> <modifier pos:line="595" pos:column="30">*<pos:position pos:line="595" pos:column="31"/></modifier></type><name pos:line="595" pos:column="31">temp<pos:position pos:line="595" pos:column="35"/></name> <init pos:line="595" pos:column="36">= <expr><call><name><name pos:line="595" pos:column="38">deferredReads<pos:position pos:line="595" pos:column="51"/></name><operator pos:line="595" pos:column="51">.<pos:position pos:line="595" pos:column="52"/></operator><name pos:line="595" pos:column="52">push_back<pos:position pos:line="595" pos:column="61"/></name></name><argument_list pos:line="595" pos:column="61">(<argument><expr><name pos:line="595" pos:column="62">aRead<pos:position pos:line="595" pos:column="67"/></name></expr></argument>)<pos:position pos:line="595" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="595" pos:column="69"/></decl_stmt>

    <comment type="line" pos:line="597" pos:column="5">// We have to use a global function as a closer and point to temp</comment>
    <comment type="line" pos:line="598" pos:column="5">// instead of "this" because DeferredReadManager is not a job and</comment>
    <comment type="line" pos:line="599" pos:column="5">// is not even cbdata protected</comment>
    <comment type="line" pos:line="600" pos:column="5">// XXX: and yet we use cbdata protection functions on it??</comment>
    <decl_stmt><decl><type><name><name pos:line="601" pos:column="5">AsyncCall<pos:position pos:line="601" pos:column="14"/></name><operator pos:line="601" pos:column="14">::<pos:position pos:line="601" pos:column="16"/></operator><name pos:line="601" pos:column="16">Pointer<pos:position pos:line="601" pos:column="23"/></name></name></type> <name pos:line="601" pos:column="24">closer<pos:position pos:line="601" pos:column="30"/></name> <init pos:line="601" pos:column="31">= <expr><call><name pos:line="601" pos:column="33">commCbCall<pos:position pos:line="601" pos:column="43"/></name><argument_list pos:line="601" pos:column="43">(<argument><expr><literal type="number" pos:line="601" pos:column="44">5<pos:position pos:line="601" pos:column="45"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="601" pos:column="46">4<pos:position pos:line="601" pos:column="47"/></literal></expr></argument>,
                                           <argument><expr><literal type="string" pos:line="602" pos:column="44">"DeferredReadManager::CloseHandler"<pos:position pos:line="602" pos:column="79"/></literal></expr></argument>,
                                           <argument><expr><call><name pos:line="603" pos:column="44">CommCloseCbPtrFun<pos:position pos:line="603" pos:column="61"/></name><argument_list pos:line="603" pos:column="61">(<argument><expr><operator pos:line="603" pos:column="62">&amp;<pos:position pos:line="603" pos:column="67"/></operator><name pos:line="603" pos:column="63">CloseHandler<pos:position pos:line="603" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="603" pos:column="77">temp<pos:position pos:line="603" pos:column="81"/></name></expr></argument>)<pos:position pos:line="603" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="603" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="603" pos:column="84"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="604" pos:column="5">comm_add_close_handler<pos:position pos:line="604" pos:column="27"/></name><argument_list pos:line="604" pos:column="27">(<argument><expr><name><name pos:line="604" pos:column="28">aRead<pos:position pos:line="604" pos:column="33"/></name><operator pos:line="604" pos:column="33">.<pos:position pos:line="604" pos:column="34"/></operator><name pos:line="604" pos:column="34">theRead<pos:position pos:line="604" pos:column="41"/></name><operator pos:line="604" pos:column="41">.<pos:position pos:line="604" pos:column="42"/></operator><name pos:line="604" pos:column="42">conn<pos:position pos:line="604" pos:column="46"/></name><operator pos:line="604" pos:column="46">-&gt;<pos:position pos:line="604" pos:column="51"/></operator><name pos:line="604" pos:column="48">fd<pos:position pos:line="604" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="604" pos:column="52">closer<pos:position pos:line="604" pos:column="58"/></name></expr></argument>)<pos:position pos:line="604" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="604" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="605" pos:column="5">temp<pos:position pos:line="605" pos:column="9"/></name><operator pos:line="605" pos:column="9">-&gt;<pos:position pos:line="605" pos:column="14"/></operator><name pos:line="605" pos:column="11">element<pos:position pos:line="605" pos:column="18"/></name><operator pos:line="605" pos:column="18">.<pos:position pos:line="605" pos:column="19"/></operator><name pos:line="605" pos:column="19">closer<pos:position pos:line="605" pos:column="25"/></name></name> <operator pos:line="605" pos:column="26">=<pos:position pos:line="605" pos:column="27"/></operator> <name pos:line="605" pos:column="28">closer<pos:position pos:line="605" pos:column="34"/></name></expr>;<pos:position pos:line="605" pos:column="35"/></expr_stmt> <comment type="line" pos:line="605" pos:column="36">// remeber so that we can cancel</comment>
}<pos:position pos:line="606" pos:column="2"/></block></function>

<function><type><name pos:line="608" pos:column="1">void<pos:position pos:line="608" pos:column="5"/></name></type>
<name><name pos:line="609" pos:column="1">DeferredReadManager<pos:position pos:line="609" pos:column="20"/></name><operator pos:line="609" pos:column="20">::<pos:position pos:line="609" pos:column="22"/></operator><name pos:line="609" pos:column="22">CloseHandler<pos:position pos:line="609" pos:column="34"/></name></name><parameter_list pos:line="609" pos:column="34">(<parameter><decl><type><specifier pos:line="609" pos:column="35">const<pos:position pos:line="609" pos:column="40"/></specifier> <name pos:line="609" pos:column="41">CommCloseCbParams<pos:position pos:line="609" pos:column="58"/></name> <modifier pos:line="609" pos:column="59">&amp;<pos:position pos:line="609" pos:column="64"/></modifier></type><name pos:line="609" pos:column="60">params<pos:position pos:line="609" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="609" pos:column="67"/></parameter_list>
<block pos:line="610" pos:column="1">{
    <if pos:line="611" pos:column="5">if <condition pos:line="611" pos:column="8">(<expr><operator pos:line="611" pos:column="9">!<pos:position pos:line="611" pos:column="10"/></operator><call><name pos:line="611" pos:column="10">cbdataReferenceValid<pos:position pos:line="611" pos:column="30"/></name><argument_list pos:line="611" pos:column="30">(<argument><expr><name><name pos:line="611" pos:column="31">params<pos:position pos:line="611" pos:column="37"/></name><operator pos:line="611" pos:column="37">.<pos:position pos:line="611" pos:column="38"/></operator><name pos:line="611" pos:column="38">data<pos:position pos:line="611" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="611" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="611" pos:column="44"/></condition><then pos:line="611" pos:column="44">
        <block type="pseudo"><return pos:line="612" pos:column="9">return;<pos:position pos:line="612" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="614" pos:column="5">CbDataList<pos:position pos:line="614" pos:column="15"/></name><argument_list type="generic" pos:line="614" pos:column="15">&lt;<argument><expr><name pos:line="614" pos:column="16">DeferredRead<pos:position pos:line="614" pos:column="28"/></name></expr></argument>&gt;<pos:position pos:line="614" pos:column="32"/></argument_list></name> <modifier pos:line="614" pos:column="30">*<pos:position pos:line="614" pos:column="31"/></modifier></type><name pos:line="614" pos:column="31">temp<pos:position pos:line="614" pos:column="35"/></name> <init pos:line="614" pos:column="36">= <expr><operator pos:line="614" pos:column="38">(<pos:position pos:line="614" pos:column="39"/></operator><name><name pos:line="614" pos:column="39">CbDataList<pos:position pos:line="614" pos:column="49"/></name><argument_list type="generic" pos:line="614" pos:column="49">&lt;<argument><expr><name pos:line="614" pos:column="50">DeferredRead<pos:position pos:line="614" pos:column="62"/></name></expr></argument>&gt;<pos:position pos:line="614" pos:column="66"/></argument_list></name> <operator pos:line="614" pos:column="64">*<pos:position pos:line="614" pos:column="65"/></operator><operator pos:line="614" pos:column="65">)<pos:position pos:line="614" pos:column="66"/></operator><name><name pos:line="614" pos:column="66">params<pos:position pos:line="614" pos:column="72"/></name><operator pos:line="614" pos:column="72">.<pos:position pos:line="614" pos:column="73"/></operator><name pos:line="614" pos:column="73">data<pos:position pos:line="614" pos:column="77"/></name></name></expr></init></decl>;<pos:position pos:line="614" pos:column="78"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="616" pos:column="5">temp<pos:position pos:line="616" pos:column="9"/></name><operator pos:line="616" pos:column="9">-&gt;<pos:position pos:line="616" pos:column="14"/></operator><name pos:line="616" pos:column="11">element<pos:position pos:line="616" pos:column="18"/></name><operator pos:line="616" pos:column="18">.<pos:position pos:line="616" pos:column="19"/></operator><name pos:line="616" pos:column="19">closer<pos:position pos:line="616" pos:column="25"/></name></name> <operator pos:line="616" pos:column="26">=<pos:position pos:line="616" pos:column="27"/></operator> <name pos:line="616" pos:column="28">NULL<pos:position pos:line="616" pos:column="32"/></name></expr>;<pos:position pos:line="616" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="617" pos:column="5">temp<pos:position pos:line="617" pos:column="9"/></name><operator pos:line="617" pos:column="9">-&gt;<pos:position pos:line="617" pos:column="14"/></operator><name pos:line="617" pos:column="11">element<pos:position pos:line="617" pos:column="18"/></name><operator pos:line="617" pos:column="18">.<pos:position pos:line="617" pos:column="19"/></operator><name pos:line="617" pos:column="19">markCancelled<pos:position pos:line="617" pos:column="32"/></name></name><argument_list pos:line="617" pos:column="32">()<pos:position pos:line="617" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="617" pos:column="35"/></expr_stmt>
}<pos:position pos:line="618" pos:column="2"/></block></function>

<function><type><name pos:line="620" pos:column="1">DeferredRead<pos:position pos:line="620" pos:column="13"/></name></type>
<name><name pos:line="621" pos:column="1">DeferredReadManager<pos:position pos:line="621" pos:column="20"/></name><operator pos:line="621" pos:column="20">::<pos:position pos:line="621" pos:column="22"/></operator><name pos:line="621" pos:column="22">popHead<pos:position pos:line="621" pos:column="29"/></name></name><parameter_list pos:line="621" pos:column="29">(<parameter><decl><type><name><name pos:line="621" pos:column="30">CbDataListContainer<pos:position pos:line="621" pos:column="49"/></name><argument_list type="generic" pos:line="621" pos:column="49">&lt;<argument><expr><name pos:line="621" pos:column="50">DeferredRead<pos:position pos:line="621" pos:column="62"/></name></expr></argument>&gt;<pos:position pos:line="621" pos:column="66"/></argument_list></name> <modifier pos:line="621" pos:column="64">&amp;<pos:position pos:line="621" pos:column="69"/></modifier></type><name pos:line="621" pos:column="65">deferredReads<pos:position pos:line="621" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="621" pos:column="79"/></parameter_list>
<block pos:line="622" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="623" pos:column="5">assert<pos:position pos:line="623" pos:column="11"/></name> <argument_list pos:line="623" pos:column="12">(<argument><expr><operator pos:line="623" pos:column="13">!<pos:position pos:line="623" pos:column="14"/></operator><call><name><name pos:line="623" pos:column="14">deferredReads<pos:position pos:line="623" pos:column="27"/></name><operator pos:line="623" pos:column="27">.<pos:position pos:line="623" pos:column="28"/></operator><name pos:line="623" pos:column="28">empty<pos:position pos:line="623" pos:column="33"/></name></name><argument_list pos:line="623" pos:column="33">()<pos:position pos:line="623" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="623" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="623" pos:column="37"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="625" pos:column="5">DeferredRead<pos:position pos:line="625" pos:column="17"/></name> <modifier pos:line="625" pos:column="18">&amp;<pos:position pos:line="625" pos:column="23"/></modifier></type><name pos:line="625" pos:column="19">read<pos:position pos:line="625" pos:column="23"/></name> <init pos:line="625" pos:column="24">= <expr><name><name pos:line="625" pos:column="26">deferredReads<pos:position pos:line="625" pos:column="39"/></name><operator pos:line="625" pos:column="39">.<pos:position pos:line="625" pos:column="40"/></operator><name pos:line="625" pos:column="40">head<pos:position pos:line="625" pos:column="44"/></name><operator pos:line="625" pos:column="44">-&gt;<pos:position pos:line="625" pos:column="49"/></operator><name pos:line="625" pos:column="46">element<pos:position pos:line="625" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="625" pos:column="54"/></decl_stmt>

    <comment type="line" pos:line="627" pos:column="5">// NOTE: at this point the connection has been paused/stalled for an unknown</comment>
    <comment type="line" pos:line="628" pos:column="5">//       amount of time. We must re-validate that it is active and usable.</comment>

    <comment type="line" pos:line="630" pos:column="5">// If the connection has been closed already. Cancel this read.</comment>
    <if pos:line="631" pos:column="5">if <condition pos:line="631" pos:column="8">(<expr><operator pos:line="631" pos:column="9">!<pos:position pos:line="631" pos:column="10"/></operator><call><name><name pos:line="631" pos:column="10">Comm<pos:position pos:line="631" pos:column="14"/></name><operator pos:line="631" pos:column="14">::<pos:position pos:line="631" pos:column="16"/></operator><name pos:line="631" pos:column="16">IsConnOpen<pos:position pos:line="631" pos:column="26"/></name></name><argument_list pos:line="631" pos:column="26">(<argument><expr><name><name pos:line="631" pos:column="27">read<pos:position pos:line="631" pos:column="31"/></name><operator pos:line="631" pos:column="31">.<pos:position pos:line="631" pos:column="32"/></operator><name pos:line="631" pos:column="32">theRead<pos:position pos:line="631" pos:column="39"/></name><operator pos:line="631" pos:column="39">.<pos:position pos:line="631" pos:column="40"/></operator><name pos:line="631" pos:column="40">conn<pos:position pos:line="631" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="631" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="631" pos:column="46"/></condition><then pos:line="631" pos:column="46"> <block pos:line="631" pos:column="47">{
        <if pos:line="632" pos:column="9">if <condition pos:line="632" pos:column="12">(<expr><name><name pos:line="632" pos:column="13">read<pos:position pos:line="632" pos:column="17"/></name><operator pos:line="632" pos:column="17">.<pos:position pos:line="632" pos:column="18"/></operator><name pos:line="632" pos:column="18">closer<pos:position pos:line="632" pos:column="24"/></name></name> <operator pos:line="632" pos:column="25">!=<pos:position pos:line="632" pos:column="27"/></operator> <name pos:line="632" pos:column="28">NULL<pos:position pos:line="632" pos:column="32"/></name></expr>)<pos:position pos:line="632" pos:column="33"/></condition><then pos:line="632" pos:column="33"> <block pos:line="632" pos:column="34">{
            <expr_stmt><expr><call><name><name pos:line="633" pos:column="13">read<pos:position pos:line="633" pos:column="17"/></name><operator pos:line="633" pos:column="17">.<pos:position pos:line="633" pos:column="18"/></operator><name pos:line="633" pos:column="18">closer<pos:position pos:line="633" pos:column="24"/></name><operator pos:line="633" pos:column="24">-&gt;<pos:position pos:line="633" pos:column="29"/></operator><name pos:line="633" pos:column="26">cancel<pos:position pos:line="633" pos:column="32"/></name></name><argument_list pos:line="633" pos:column="32">(<argument><expr><literal type="string" pos:line="633" pos:column="33">"Connection closed before."<pos:position pos:line="633" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="633" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="633" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="634" pos:column="13">read<pos:position pos:line="634" pos:column="17"/></name><operator pos:line="634" pos:column="17">.<pos:position pos:line="634" pos:column="18"/></operator><name pos:line="634" pos:column="18">closer<pos:position pos:line="634" pos:column="24"/></name></name> <operator pos:line="634" pos:column="25">=<pos:position pos:line="634" pos:column="26"/></operator> <name pos:line="634" pos:column="27">NULL<pos:position pos:line="634" pos:column="31"/></name></expr>;<pos:position pos:line="634" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="635" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="636" pos:column="9">read<pos:position pos:line="636" pos:column="13"/></name><operator pos:line="636" pos:column="13">.<pos:position pos:line="636" pos:column="14"/></operator><name pos:line="636" pos:column="14">markCancelled<pos:position pos:line="636" pos:column="27"/></name></name><argument_list pos:line="636" pos:column="27">()<pos:position pos:line="636" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="636" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="637" pos:column="6"/></block></then></if>

    <if pos:line="639" pos:column="5">if <condition pos:line="639" pos:column="8">(<expr><operator pos:line="639" pos:column="9">!<pos:position pos:line="639" pos:column="10"/></operator><name><name pos:line="639" pos:column="10">read<pos:position pos:line="639" pos:column="14"/></name><operator pos:line="639" pos:column="14">.<pos:position pos:line="639" pos:column="15"/></operator><name pos:line="639" pos:column="15">cancelled<pos:position pos:line="639" pos:column="24"/></name></name></expr>)<pos:position pos:line="639" pos:column="25"/></condition><then pos:line="639" pos:column="25"> <block pos:line="639" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="640" pos:column="9">comm_remove_close_handler<pos:position pos:line="640" pos:column="34"/></name><argument_list pos:line="640" pos:column="34">(<argument><expr><name><name pos:line="640" pos:column="35">read<pos:position pos:line="640" pos:column="39"/></name><operator pos:line="640" pos:column="39">.<pos:position pos:line="640" pos:column="40"/></operator><name pos:line="640" pos:column="40">theRead<pos:position pos:line="640" pos:column="47"/></name><operator pos:line="640" pos:column="47">.<pos:position pos:line="640" pos:column="48"/></operator><name pos:line="640" pos:column="48">conn<pos:position pos:line="640" pos:column="52"/></name><operator pos:line="640" pos:column="52">-&gt;<pos:position pos:line="640" pos:column="57"/></operator><name pos:line="640" pos:column="54">fd<pos:position pos:line="640" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="640" pos:column="58">read<pos:position pos:line="640" pos:column="62"/></name><operator pos:line="640" pos:column="62">.<pos:position pos:line="640" pos:column="63"/></operator><name pos:line="640" pos:column="63">closer<pos:position pos:line="640" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="640" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="640" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="641" pos:column="9">read<pos:position pos:line="641" pos:column="13"/></name><operator pos:line="641" pos:column="13">.<pos:position pos:line="641" pos:column="14"/></operator><name pos:line="641" pos:column="14">closer<pos:position pos:line="641" pos:column="20"/></name></name> <operator pos:line="641" pos:column="21">=<pos:position pos:line="641" pos:column="22"/></operator> <name pos:line="641" pos:column="23">NULL<pos:position pos:line="641" pos:column="27"/></name></expr>;<pos:position pos:line="641" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="642" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="644" pos:column="5">DeferredRead<pos:position pos:line="644" pos:column="17"/></name></type> <name pos:line="644" pos:column="18">result<pos:position pos:line="644" pos:column="24"/></name> <init pos:line="644" pos:column="25">= <expr><call><name><name pos:line="644" pos:column="27">deferredReads<pos:position pos:line="644" pos:column="40"/></name><operator pos:line="644" pos:column="40">.<pos:position pos:line="644" pos:column="41"/></operator><name pos:line="644" pos:column="41">pop_front<pos:position pos:line="644" pos:column="50"/></name></name><argument_list pos:line="644" pos:column="50">()<pos:position pos:line="644" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="644" pos:column="53"/></decl_stmt>

    <return pos:line="646" pos:column="5">return <expr><name pos:line="646" pos:column="12">result<pos:position pos:line="646" pos:column="18"/></name></expr>;<pos:position pos:line="646" pos:column="19"/></return>
}<pos:position pos:line="647" pos:column="2"/></block></function>

<function><type><name pos:line="649" pos:column="1">void<pos:position pos:line="649" pos:column="5"/></name></type>
<name><name pos:line="650" pos:column="1">DeferredReadManager<pos:position pos:line="650" pos:column="20"/></name><operator pos:line="650" pos:column="20">::<pos:position pos:line="650" pos:column="22"/></operator><name pos:line="650" pos:column="22">kickReads<pos:position pos:line="650" pos:column="31"/></name></name><parameter_list pos:line="650" pos:column="31">(<parameter><decl><type><name pos:line="650" pos:column="32">int<pos:position pos:line="650" pos:column="35"/></name> <specifier pos:line="650" pos:column="36">const<pos:position pos:line="650" pos:column="41"/></specifier></type> <name pos:line="650" pos:column="42">count<pos:position pos:line="650" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="650" pos:column="48"/></parameter_list>
<block pos:line="651" pos:column="1">{
    <comment type="block" pos:line="652" pos:column="5">/* if we had CbDataList::size() we could consolidate this and flushReads */</comment>

    <if pos:line="654" pos:column="5">if <condition pos:line="654" pos:column="8">(<expr><name pos:line="654" pos:column="9">count<pos:position pos:line="654" pos:column="14"/></name> <operator pos:line="654" pos:column="15">&lt;<pos:position pos:line="654" pos:column="19"/></operator> <literal type="number" pos:line="654" pos:column="17">1<pos:position pos:line="654" pos:column="18"/></literal></expr>)<pos:position pos:line="654" pos:column="19"/></condition><then pos:line="654" pos:column="19"> <block pos:line="654" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="655" pos:column="9">flushReads<pos:position pos:line="655" pos:column="19"/></name><argument_list pos:line="655" pos:column="19">()<pos:position pos:line="655" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="655" pos:column="22"/></expr_stmt>
        <return pos:line="656" pos:column="9">return;<pos:position pos:line="656" pos:column="16"/></return>
    }<pos:position pos:line="657" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="659" pos:column="5">size_t<pos:position pos:line="659" pos:column="11"/></name></type> <name pos:line="659" pos:column="12">remaining<pos:position pos:line="659" pos:column="21"/></name> <init pos:line="659" pos:column="22">= <expr><name pos:line="659" pos:column="24">count<pos:position pos:line="659" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="659" pos:column="30"/></decl_stmt>

    <while pos:line="661" pos:column="5">while <condition pos:line="661" pos:column="11">(<expr><operator pos:line="661" pos:column="12">!<pos:position pos:line="661" pos:column="13"/></operator><call><name><name pos:line="661" pos:column="13">deferredReads<pos:position pos:line="661" pos:column="26"/></name><operator pos:line="661" pos:column="26">.<pos:position pos:line="661" pos:column="27"/></operator><name pos:line="661" pos:column="27">empty<pos:position pos:line="661" pos:column="32"/></name></name><argument_list pos:line="661" pos:column="32">()<pos:position pos:line="661" pos:column="34"/></argument_list></call> <operator pos:line="661" pos:column="35">&amp;&amp;<pos:position pos:line="661" pos:column="45"/></operator> <name pos:line="661" pos:column="38">remaining<pos:position pos:line="661" pos:column="47"/></name></expr>)<pos:position pos:line="661" pos:column="48"/></condition> <block pos:line="661" pos:column="49">{
        <decl_stmt><decl><type><name pos:line="662" pos:column="9">DeferredRead<pos:position pos:line="662" pos:column="21"/></name></type> <name pos:line="662" pos:column="22">aRead<pos:position pos:line="662" pos:column="27"/></name> <init pos:line="662" pos:column="28">= <expr><call><name pos:line="662" pos:column="30">popHead<pos:position pos:line="662" pos:column="37"/></name><argument_list pos:line="662" pos:column="37">(<argument><expr><name pos:line="662" pos:column="38">deferredReads<pos:position pos:line="662" pos:column="51"/></name></expr></argument>)<pos:position pos:line="662" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="662" pos:column="53"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="663" pos:column="9">kickARead<pos:position pos:line="663" pos:column="18"/></name><argument_list pos:line="663" pos:column="18">(<argument><expr><name pos:line="663" pos:column="19">aRead<pos:position pos:line="663" pos:column="24"/></name></expr></argument>)<pos:position pos:line="663" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="663" pos:column="26"/></expr_stmt>

        <if pos:line="665" pos:column="9">if <condition pos:line="665" pos:column="12">(<expr><operator pos:line="665" pos:column="13">!<pos:position pos:line="665" pos:column="14"/></operator><name><name pos:line="665" pos:column="14">aRead<pos:position pos:line="665" pos:column="19"/></name><operator pos:line="665" pos:column="19">.<pos:position pos:line="665" pos:column="20"/></operator><name pos:line="665" pos:column="20">cancelled<pos:position pos:line="665" pos:column="29"/></name></name></expr>)<pos:position pos:line="665" pos:column="30"/></condition><then pos:line="665" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="666" pos:column="13">--<pos:position pos:line="666" pos:column="15"/></operator><name pos:line="666" pos:column="15">remaining<pos:position pos:line="666" pos:column="24"/></name></expr>;<pos:position pos:line="666" pos:column="25"/></expr_stmt></block></then></if>
    }<pos:position pos:line="667" pos:column="6"/></block></while>
}<pos:position pos:line="668" pos:column="2"/></block></function>

<function><type><name pos:line="670" pos:column="1">void<pos:position pos:line="670" pos:column="5"/></name></type>
<name><name pos:line="671" pos:column="1">DeferredReadManager<pos:position pos:line="671" pos:column="20"/></name><operator pos:line="671" pos:column="20">::<pos:position pos:line="671" pos:column="22"/></operator><name pos:line="671" pos:column="22">flushReads<pos:position pos:line="671" pos:column="32"/></name></name><parameter_list pos:line="671" pos:column="32">()<pos:position pos:line="671" pos:column="34"/></parameter_list>
<block pos:line="672" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="673" pos:column="5">CbDataListContainer<pos:position pos:line="673" pos:column="24"/></name><argument_list type="generic" pos:line="673" pos:column="24">&lt;<argument><expr><name pos:line="673" pos:column="25">DeferredRead<pos:position pos:line="673" pos:column="37"/></name></expr></argument>&gt;<pos:position pos:line="673" pos:column="41"/></argument_list></name></type> <name pos:line="673" pos:column="39">reads<pos:position pos:line="673" pos:column="44"/></name></decl>;<pos:position pos:line="673" pos:column="45"/></decl_stmt>
    <expr_stmt><expr><name pos:line="674" pos:column="5">reads<pos:position pos:line="674" pos:column="10"/></name> <operator pos:line="674" pos:column="11">=<pos:position pos:line="674" pos:column="12"/></operator> <name pos:line="674" pos:column="13">deferredReads<pos:position pos:line="674" pos:column="26"/></name></expr>;<pos:position pos:line="674" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="675" pos:column="5">deferredReads<pos:position pos:line="675" pos:column="18"/></name> <operator pos:line="675" pos:column="19">=<pos:position pos:line="675" pos:column="20"/></operator> <call><name><name pos:line="675" pos:column="21">CbDataListContainer<pos:position pos:line="675" pos:column="40"/></name><argument_list type="generic" pos:line="675" pos:column="40">&lt;<argument><expr><name pos:line="675" pos:column="41">DeferredRead<pos:position pos:line="675" pos:column="53"/></name></expr></argument>&gt;<pos:position pos:line="675" pos:column="57"/></argument_list></name><argument_list pos:line="675" pos:column="54">()<pos:position pos:line="675" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="675" pos:column="57"/></expr_stmt>

    <comment type="line" pos:line="677" pos:column="5">// XXX: For fairness this SHOULD randomize the order</comment>
    <while pos:line="678" pos:column="5">while <condition pos:line="678" pos:column="11">(<expr><operator pos:line="678" pos:column="12">!<pos:position pos:line="678" pos:column="13"/></operator><call><name><name pos:line="678" pos:column="13">reads<pos:position pos:line="678" pos:column="18"/></name><operator pos:line="678" pos:column="18">.<pos:position pos:line="678" pos:column="19"/></operator><name pos:line="678" pos:column="19">empty<pos:position pos:line="678" pos:column="24"/></name></name><argument_list pos:line="678" pos:column="24">()<pos:position pos:line="678" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="678" pos:column="27"/></condition> <block pos:line="678" pos:column="28">{
        <decl_stmt><decl><type><name pos:line="679" pos:column="9">DeferredRead<pos:position pos:line="679" pos:column="21"/></name></type> <name pos:line="679" pos:column="22">aRead<pos:position pos:line="679" pos:column="27"/></name> <init pos:line="679" pos:column="28">= <expr><call><name pos:line="679" pos:column="30">popHead<pos:position pos:line="679" pos:column="37"/></name><argument_list pos:line="679" pos:column="37">(<argument><expr><name pos:line="679" pos:column="38">reads<pos:position pos:line="679" pos:column="43"/></name></expr></argument>)<pos:position pos:line="679" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="679" pos:column="45"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="680" pos:column="9">kickARead<pos:position pos:line="680" pos:column="18"/></name><argument_list pos:line="680" pos:column="18">(<argument><expr><name pos:line="680" pos:column="19">aRead<pos:position pos:line="680" pos:column="24"/></name></expr></argument>)<pos:position pos:line="680" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="680" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="681" pos:column="6"/></block></while>
}<pos:position pos:line="682" pos:column="2"/></block></function>

<function><type><name pos:line="684" pos:column="1">void<pos:position pos:line="684" pos:column="5"/></name></type>
<name><name pos:line="685" pos:column="1">DeferredReadManager<pos:position pos:line="685" pos:column="20"/></name><operator pos:line="685" pos:column="20">::<pos:position pos:line="685" pos:column="22"/></operator><name pos:line="685" pos:column="22">kickARead<pos:position pos:line="685" pos:column="31"/></name></name><parameter_list pos:line="685" pos:column="31">(<parameter><decl><type><name pos:line="685" pos:column="32">DeferredRead<pos:position pos:line="685" pos:column="44"/></name> <specifier pos:line="685" pos:column="45">const<pos:position pos:line="685" pos:column="50"/></specifier> <modifier pos:line="685" pos:column="51">&amp;<pos:position pos:line="685" pos:column="56"/></modifier></type><name pos:line="685" pos:column="52">aRead<pos:position pos:line="685" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="685" pos:column="58"/></parameter_list>
<block pos:line="686" pos:column="1">{
    <if pos:line="687" pos:column="5">if <condition pos:line="687" pos:column="8">(<expr><name><name pos:line="687" pos:column="9">aRead<pos:position pos:line="687" pos:column="14"/></name><operator pos:line="687" pos:column="14">.<pos:position pos:line="687" pos:column="15"/></operator><name pos:line="687" pos:column="15">cancelled<pos:position pos:line="687" pos:column="24"/></name></name></expr>)<pos:position pos:line="687" pos:column="25"/></condition><then pos:line="687" pos:column="25">
        <block type="pseudo"><return pos:line="688" pos:column="9">return;<pos:position pos:line="688" pos:column="16"/></return></block></then></if>

    <if pos:line="690" pos:column="5">if <condition pos:line="690" pos:column="8">(<expr><call><name><name pos:line="690" pos:column="9">Comm<pos:position pos:line="690" pos:column="13"/></name><operator pos:line="690" pos:column="13">::<pos:position pos:line="690" pos:column="15"/></operator><name pos:line="690" pos:column="15">IsConnOpen<pos:position pos:line="690" pos:column="25"/></name></name><argument_list pos:line="690" pos:column="25">(<argument><expr><name><name pos:line="690" pos:column="26">aRead<pos:position pos:line="690" pos:column="31"/></name><operator pos:line="690" pos:column="31">.<pos:position pos:line="690" pos:column="32"/></operator><name pos:line="690" pos:column="32">theRead<pos:position pos:line="690" pos:column="39"/></name><operator pos:line="690" pos:column="39">.<pos:position pos:line="690" pos:column="40"/></operator><name pos:line="690" pos:column="40">conn<pos:position pos:line="690" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="690" pos:column="45"/></argument_list></call> <operator pos:line="690" pos:column="46">&amp;&amp;<pos:position pos:line="690" pos:column="56"/></operator> <name><name pos:line="690" pos:column="49">fd_table<pos:position pos:line="690" pos:column="57"/></name><index pos:line="690" pos:column="57">[<expr><name><name pos:line="690" pos:column="58">aRead<pos:position pos:line="690" pos:column="63"/></name><operator pos:line="690" pos:column="63">.<pos:position pos:line="690" pos:column="64"/></operator><name pos:line="690" pos:column="64">theRead<pos:position pos:line="690" pos:column="71"/></name><operator pos:line="690" pos:column="71">.<pos:position pos:line="690" pos:column="72"/></operator><name pos:line="690" pos:column="72">conn<pos:position pos:line="690" pos:column="76"/></name><operator pos:line="690" pos:column="76">-&gt;<pos:position pos:line="690" pos:column="81"/></operator><name pos:line="690" pos:column="78">fd<pos:position pos:line="690" pos:column="80"/></name></name></expr>]<pos:position pos:line="690" pos:column="81"/></index></name><operator pos:line="690" pos:column="81">.<pos:position pos:line="690" pos:column="82"/></operator><call><name pos:line="690" pos:column="82">closing<pos:position pos:line="690" pos:column="89"/></name><argument_list pos:line="690" pos:column="89">()<pos:position pos:line="690" pos:column="91"/></argument_list></call></expr>)<pos:position pos:line="690" pos:column="92"/></condition><then pos:line="690" pos:column="92">
        <block type="pseudo"><return pos:line="691" pos:column="9">return;<pos:position pos:line="691" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="693" pos:column="5">debugs<pos:position pos:line="693" pos:column="11"/></name><argument_list pos:line="693" pos:column="11">(<argument><expr><literal type="number" pos:line="693" pos:column="12">5<pos:position pos:line="693" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="693" pos:column="15">3<pos:position pos:line="693" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="693" pos:column="18">"Kicking deferred read on "<pos:position pos:line="693" pos:column="45"/></literal> <operator pos:line="693" pos:column="46">&lt;&lt;<pos:position pos:line="693" pos:column="54"/></operator> <name><name pos:line="693" pos:column="49">aRead<pos:position pos:line="693" pos:column="54"/></name><operator pos:line="693" pos:column="54">.<pos:position pos:line="693" pos:column="55"/></operator><name pos:line="693" pos:column="55">theRead<pos:position pos:line="693" pos:column="62"/></name><operator pos:line="693" pos:column="62">.<pos:position pos:line="693" pos:column="63"/></operator><name pos:line="693" pos:column="63">conn<pos:position pos:line="693" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="693" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="693" pos:column="69"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="695" pos:column="5">aRead<pos:position pos:line="695" pos:column="10"/></name><operator pos:line="695" pos:column="10">.<pos:position pos:line="695" pos:column="11"/></operator><name pos:line="695" pos:column="11">theReader<pos:position pos:line="695" pos:column="20"/></name></name><argument_list pos:line="695" pos:column="20">(<argument><expr><name><name pos:line="695" pos:column="21">aRead<pos:position pos:line="695" pos:column="26"/></name><operator pos:line="695" pos:column="26">.<pos:position pos:line="695" pos:column="27"/></operator><name pos:line="695" pos:column="27">theContext<pos:position pos:line="695" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="695" pos:column="39">aRead<pos:position pos:line="695" pos:column="44"/></name><operator pos:line="695" pos:column="44">.<pos:position pos:line="695" pos:column="45"/></operator><name pos:line="695" pos:column="45">theRead<pos:position pos:line="695" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="695" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="695" pos:column="54"/></expr_stmt>
}<pos:position pos:line="696" pos:column="2"/></block></function>

<function><type><name pos:line="698" pos:column="1">void<pos:position pos:line="698" pos:column="5"/></name></type>
<name><name pos:line="699" pos:column="1">DeferredRead<pos:position pos:line="699" pos:column="13"/></name><operator pos:line="699" pos:column="13">::<pos:position pos:line="699" pos:column="15"/></operator><name pos:line="699" pos:column="15">markCancelled<pos:position pos:line="699" pos:column="28"/></name></name><parameter_list pos:line="699" pos:column="28">()<pos:position pos:line="699" pos:column="30"/></parameter_list>
<block pos:line="700" pos:column="1">{
    <expr_stmt><expr><name pos:line="701" pos:column="5">cancelled<pos:position pos:line="701" pos:column="14"/></name> <operator pos:line="701" pos:column="15">=<pos:position pos:line="701" pos:column="16"/></operator> <literal type="boolean" pos:line="701" pos:column="17">true<pos:position pos:line="701" pos:column="21"/></literal></expr>;<pos:position pos:line="701" pos:column="22"/></expr_stmt>
}<pos:position pos:line="702" pos:column="2"/></block></function>

<function><type><name pos:line="704" pos:column="1">int<pos:position pos:line="704" pos:column="4"/></name></type>
<name><name pos:line="705" pos:column="1">CommSelectEngine<pos:position pos:line="705" pos:column="17"/></name><operator pos:line="705" pos:column="17">::<pos:position pos:line="705" pos:column="19"/></operator><name pos:line="705" pos:column="19">checkEvents<pos:position pos:line="705" pos:column="30"/></name></name><parameter_list pos:line="705" pos:column="30">(<parameter><decl><type><name pos:line="705" pos:column="31">int<pos:position pos:line="705" pos:column="34"/></name></type> <name pos:line="705" pos:column="35">timeout<pos:position pos:line="705" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="705" pos:column="43"/></parameter_list>
<block pos:line="706" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="707" pos:column="5">static<pos:position pos:line="707" pos:column="11"/></specifier> <type><name pos:line="707" pos:column="12">time_t<pos:position pos:line="707" pos:column="18"/></name></type> <name pos:line="707" pos:column="19">last_timeout<pos:position pos:line="707" pos:column="31"/></name> <init pos:line="707" pos:column="32">= <expr><literal type="number" pos:line="707" pos:column="34">0<pos:position pos:line="707" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="707" pos:column="36"/></decl_stmt>

    <comment type="block" pos:line="709" pos:column="5">/* No, this shouldn't be here. But it shouldn't be in each comm handler. -adrian */</comment>
    <if pos:line="710" pos:column="5">if <condition pos:line="710" pos:column="8">(<expr><name pos:line="710" pos:column="9">squid_curtime<pos:position pos:line="710" pos:column="22"/></name> <operator pos:line="710" pos:column="23">&gt;<pos:position pos:line="710" pos:column="27"/></operator> <name pos:line="710" pos:column="25">last_timeout<pos:position pos:line="710" pos:column="37"/></name></expr>)<pos:position pos:line="710" pos:column="38"/></condition><then pos:line="710" pos:column="38"> <block pos:line="710" pos:column="39">{
        <expr_stmt><expr><name pos:line="711" pos:column="9">last_timeout<pos:position pos:line="711" pos:column="21"/></name> <operator pos:line="711" pos:column="22">=<pos:position pos:line="711" pos:column="23"/></operator> <name pos:line="711" pos:column="24">squid_curtime<pos:position pos:line="711" pos:column="37"/></name></expr>;<pos:position pos:line="711" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="712" pos:column="9">checkTimeouts<pos:position pos:line="712" pos:column="22"/></name><argument_list pos:line="712" pos:column="22">()<pos:position pos:line="712" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="712" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="713" pos:column="6"/></block></then></if>

    <switch pos:line="715" pos:column="5">switch <condition pos:line="715" pos:column="12">(<expr><call><name><name pos:line="715" pos:column="13">Comm<pos:position pos:line="715" pos:column="17"/></name><operator pos:line="715" pos:column="17">::<pos:position pos:line="715" pos:column="19"/></operator><name pos:line="715" pos:column="19">DoSelect<pos:position pos:line="715" pos:column="27"/></name></name><argument_list pos:line="715" pos:column="27">(<argument><expr><name pos:line="715" pos:column="28">timeout<pos:position pos:line="715" pos:column="35"/></name></expr></argument>)<pos:position pos:line="715" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="715" pos:column="37"/></condition> <block pos:line="715" pos:column="38">{

    <case pos:line="717" pos:column="5">case <expr><name pos:line="717" pos:column="10">COMM_OK<pos:position pos:line="717" pos:column="17"/></name></expr>:<pos:position pos:line="717" pos:column="18"/></case>

    <case pos:line="719" pos:column="5">case <expr><name pos:line="719" pos:column="10">COMM_TIMEOUT<pos:position pos:line="719" pos:column="22"/></name></expr>:<pos:position pos:line="719" pos:column="23"/></case>
        <return pos:line="720" pos:column="9">return <expr><literal type="number" pos:line="720" pos:column="16">0<pos:position pos:line="720" pos:column="17"/></literal></expr>;<pos:position pos:line="720" pos:column="18"/></return>

    <case pos:line="722" pos:column="5">case <expr><name pos:line="722" pos:column="10">COMM_IDLE<pos:position pos:line="722" pos:column="19"/></name></expr>:<pos:position pos:line="722" pos:column="20"/></case>

    <case pos:line="724" pos:column="5">case <expr><name pos:line="724" pos:column="10">COMM_SHUTDOWN<pos:position pos:line="724" pos:column="23"/></name></expr>:<pos:position pos:line="724" pos:column="24"/></case>
        <return pos:line="725" pos:column="9">return <expr><name pos:line="725" pos:column="16">EVENT_IDLE<pos:position pos:line="725" pos:column="26"/></name></expr>;<pos:position pos:line="725" pos:column="27"/></return>

    <case pos:line="727" pos:column="5">case <expr><name pos:line="727" pos:column="10">COMM_ERROR<pos:position pos:line="727" pos:column="20"/></name></expr>:<pos:position pos:line="727" pos:column="21"/></case>
        <return pos:line="728" pos:column="9">return <expr><name pos:line="728" pos:column="16">EVENT_ERROR<pos:position pos:line="728" pos:column="27"/></name></expr>;<pos:position pos:line="728" pos:column="28"/></return>

    <default pos:line="730" pos:column="5">default:<pos:position pos:line="730" pos:column="13"/></default>
        <expr_stmt><expr><call><name pos:line="731" pos:column="9">fatal_dump<pos:position pos:line="731" pos:column="19"/></name><argument_list pos:line="731" pos:column="19">(<argument><expr><literal type="string" pos:line="731" pos:column="20">"comm.cc: Internal error -- this should never happen."<pos:position pos:line="731" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="731" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="731" pos:column="76"/></expr_stmt>
        <return pos:line="732" pos:column="9">return <expr><name pos:line="732" pos:column="16">EVENT_ERROR<pos:position pos:line="732" pos:column="27"/></name></expr>;<pos:position pos:line="732" pos:column="28"/></return>
    }<pos:position pos:line="733" pos:column="6"/></block></switch><empty_stmt pos:line="733" pos:column="6">;<pos:position pos:line="733" pos:column="7"/></empty_stmt>
}<pos:position pos:line="734" pos:column="2"/></block></function>

<comment type="line" format="doxygen" pos:line="736" pos:column="1">/// Create a unix-domain socket (UDS) that only supports FD_MSGHDR I/O.</comment>
<function><type><name pos:line="737" pos:column="1">int<pos:position pos:line="737" pos:column="4"/></name></type>
<name pos:line="738" pos:column="1">comm_open_uds<pos:position pos:line="738" pos:column="14"/></name><parameter_list pos:line="738" pos:column="14">(<parameter><decl><type><name pos:line="738" pos:column="15">int<pos:position pos:line="738" pos:column="18"/></name></type> <name pos:line="738" pos:column="19">sock_type<pos:position pos:line="738" pos:column="28"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="739" pos:column="15">int<pos:position pos:line="739" pos:column="18"/></name></type> <name pos:line="739" pos:column="19">proto<pos:position pos:line="739" pos:column="24"/></name></decl></parameter>,
              <parameter><decl><type><name><name pos:line="740" pos:column="15">struct<pos:position pos:line="740" pos:column="21"/></name> <name pos:line="740" pos:column="22">sockaddr_un<pos:position pos:line="740" pos:column="33"/></name></name><modifier pos:line="740" pos:column="33">*<pos:position pos:line="740" pos:column="34"/></modifier></type> <name pos:line="740" pos:column="35">addr<pos:position pos:line="740" pos:column="39"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="741" pos:column="15">int<pos:position pos:line="741" pos:column="18"/></name></type> <name pos:line="741" pos:column="19">flags<pos:position pos:line="741" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="741" pos:column="25"/></parameter_list>
<block pos:line="742" pos:column="1">{
    <comment type="line" pos:line="743" pos:column="5">// TODO: merge with comm_openex() when Ip::Address becomes NetAddress</comment>

    <decl_stmt><decl><type><name pos:line="745" pos:column="5">int<pos:position pos:line="745" pos:column="8"/></name></type> <name pos:line="745" pos:column="9">new_socket<pos:position pos:line="745" pos:column="19"/></name></decl>;<pos:position pos:line="745" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="747" pos:column="5">PROF_start<pos:position pos:line="747" pos:column="15"/></name><argument_list pos:line="747" pos:column="15">(<argument><expr><name pos:line="747" pos:column="16">comm_open<pos:position pos:line="747" pos:column="25"/></name></expr></argument>)<pos:position pos:line="747" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="747" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="748" pos:column="5">/* Create socket for accepting new connections. */</comment>
    <expr_stmt><expr><operator pos:line="749" pos:column="5">++<pos:position pos:line="749" pos:column="7"/></operator> <name><name pos:line="749" pos:column="8">statCounter<pos:position pos:line="749" pos:column="19"/></name><operator pos:line="749" pos:column="19">.<pos:position pos:line="749" pos:column="20"/></operator><name pos:line="749" pos:column="20">syscalls<pos:position pos:line="749" pos:column="28"/></name><operator pos:line="749" pos:column="28">.<pos:position pos:line="749" pos:column="29"/></operator><name pos:line="749" pos:column="29">sock<pos:position pos:line="749" pos:column="33"/></name><operator pos:line="749" pos:column="33">.<pos:position pos:line="749" pos:column="34"/></operator><name pos:line="749" pos:column="34">sockets<pos:position pos:line="749" pos:column="41"/></name></name></expr>;<pos:position pos:line="749" pos:column="42"/></expr_stmt>

    <comment type="block" pos:line="751" pos:column="5">/* Setup the socket addrinfo details for use */</comment>
    <decl_stmt><decl><type><name><name pos:line="752" pos:column="5">struct<pos:position pos:line="752" pos:column="11"/></name> <name pos:line="752" pos:column="12">addrinfo<pos:position pos:line="752" pos:column="20"/></name></name></type> <name pos:line="752" pos:column="21">AI<pos:position pos:line="752" pos:column="23"/></name></decl>;<pos:position pos:line="752" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="753" pos:column="5">AI<pos:position pos:line="753" pos:column="7"/></name><operator pos:line="753" pos:column="7">.<pos:position pos:line="753" pos:column="8"/></operator><name pos:line="753" pos:column="8">ai_flags<pos:position pos:line="753" pos:column="16"/></name></name> <operator pos:line="753" pos:column="17">=<pos:position pos:line="753" pos:column="18"/></operator> <literal type="number" pos:line="753" pos:column="19">0<pos:position pos:line="753" pos:column="20"/></literal></expr>;<pos:position pos:line="753" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="754" pos:column="5">AI<pos:position pos:line="754" pos:column="7"/></name><operator pos:line="754" pos:column="7">.<pos:position pos:line="754" pos:column="8"/></operator><name pos:line="754" pos:column="8">ai_family<pos:position pos:line="754" pos:column="17"/></name></name> <operator pos:line="754" pos:column="18">=<pos:position pos:line="754" pos:column="19"/></operator> <name pos:line="754" pos:column="20">PF_UNIX<pos:position pos:line="754" pos:column="27"/></name></expr>;<pos:position pos:line="754" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="755" pos:column="5">AI<pos:position pos:line="755" pos:column="7"/></name><operator pos:line="755" pos:column="7">.<pos:position pos:line="755" pos:column="8"/></operator><name pos:line="755" pos:column="8">ai_socktype<pos:position pos:line="755" pos:column="19"/></name></name> <operator pos:line="755" pos:column="20">=<pos:position pos:line="755" pos:column="21"/></operator> <name pos:line="755" pos:column="22">sock_type<pos:position pos:line="755" pos:column="31"/></name></expr>;<pos:position pos:line="755" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="756" pos:column="5">AI<pos:position pos:line="756" pos:column="7"/></name><operator pos:line="756" pos:column="7">.<pos:position pos:line="756" pos:column="8"/></operator><name pos:line="756" pos:column="8">ai_protocol<pos:position pos:line="756" pos:column="19"/></name></name> <operator pos:line="756" pos:column="20">=<pos:position pos:line="756" pos:column="21"/></operator> <name pos:line="756" pos:column="22">proto<pos:position pos:line="756" pos:column="27"/></name></expr>;<pos:position pos:line="756" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="757" pos:column="5">AI<pos:position pos:line="757" pos:column="7"/></name><operator pos:line="757" pos:column="7">.<pos:position pos:line="757" pos:column="8"/></operator><name pos:line="757" pos:column="8">ai_addrlen<pos:position pos:line="757" pos:column="18"/></name></name> <operator pos:line="757" pos:column="19">=<pos:position pos:line="757" pos:column="20"/></operator> <call><name pos:line="757" pos:column="21">SUN_LEN<pos:position pos:line="757" pos:column="28"/></name><argument_list pos:line="757" pos:column="28">(<argument><expr><name pos:line="757" pos:column="29">addr<pos:position pos:line="757" pos:column="33"/></name></expr></argument>)<pos:position pos:line="757" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="757" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="758" pos:column="5">AI<pos:position pos:line="758" pos:column="7"/></name><operator pos:line="758" pos:column="7">.<pos:position pos:line="758" pos:column="8"/></operator><name pos:line="758" pos:column="8">ai_addr<pos:position pos:line="758" pos:column="15"/></name></name> <operator pos:line="758" pos:column="16">=<pos:position pos:line="758" pos:column="17"/></operator> <operator pos:line="758" pos:column="18">(<pos:position pos:line="758" pos:column="19"/></operator><name pos:line="758" pos:column="19">sockaddr<pos:position pos:line="758" pos:column="27"/></name><operator pos:line="758" pos:column="27">*<pos:position pos:line="758" pos:column="28"/></operator><operator pos:line="758" pos:column="28">)<pos:position pos:line="758" pos:column="29"/></operator><name pos:line="758" pos:column="29">addr<pos:position pos:line="758" pos:column="33"/></name></expr>;<pos:position pos:line="758" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="759" pos:column="5">AI<pos:position pos:line="759" pos:column="7"/></name><operator pos:line="759" pos:column="7">.<pos:position pos:line="759" pos:column="8"/></operator><name pos:line="759" pos:column="8">ai_canonname<pos:position pos:line="759" pos:column="20"/></name></name> <operator pos:line="759" pos:column="21">=<pos:position pos:line="759" pos:column="22"/></operator> <name pos:line="759" pos:column="23">NULL<pos:position pos:line="759" pos:column="27"/></name></expr>;<pos:position pos:line="759" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="760" pos:column="5">AI<pos:position pos:line="760" pos:column="7"/></name><operator pos:line="760" pos:column="7">.<pos:position pos:line="760" pos:column="8"/></operator><name pos:line="760" pos:column="8">ai_next<pos:position pos:line="760" pos:column="15"/></name></name> <operator pos:line="760" pos:column="16">=<pos:position pos:line="760" pos:column="17"/></operator> <name pos:line="760" pos:column="18">NULL<pos:position pos:line="760" pos:column="22"/></name></expr>;<pos:position pos:line="760" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="762" pos:column="5">debugs<pos:position pos:line="762" pos:column="11"/></name><argument_list pos:line="762" pos:column="11">(<argument><expr><literal type="number" pos:line="762" pos:column="12">50<pos:position pos:line="762" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="762" pos:column="16">3<pos:position pos:line="762" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="762" pos:column="19">HERE<pos:position pos:line="762" pos:column="23"/></name> <operator pos:line="762" pos:column="24">&lt;&lt;<pos:position pos:line="762" pos:column="32"/></operator> <literal type="string" pos:line="762" pos:column="27">"Attempt open socket for: "<pos:position pos:line="762" pos:column="54"/></literal> <operator pos:line="762" pos:column="55">&lt;&lt;<pos:position pos:line="762" pos:column="63"/></operator> <name><name pos:line="762" pos:column="58">addr<pos:position pos:line="762" pos:column="62"/></name><operator pos:line="762" pos:column="62">-&gt;<pos:position pos:line="762" pos:column="67"/></operator><name pos:line="762" pos:column="64">sun_path<pos:position pos:line="762" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="762" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="762" pos:column="74"/></expr_stmt>

    <if pos:line="764" pos:column="5">if <condition pos:line="764" pos:column="8">(<expr><operator pos:line="764" pos:column="9">(<pos:position pos:line="764" pos:column="10"/></operator><name pos:line="764" pos:column="10">new_socket<pos:position pos:line="764" pos:column="20"/></name> <operator pos:line="764" pos:column="21">=<pos:position pos:line="764" pos:column="22"/></operator> <call><name pos:line="764" pos:column="23">socket<pos:position pos:line="764" pos:column="29"/></name><argument_list pos:line="764" pos:column="29">(<argument><expr><name><name pos:line="764" pos:column="30">AI<pos:position pos:line="764" pos:column="32"/></name><operator pos:line="764" pos:column="32">.<pos:position pos:line="764" pos:column="33"/></operator><name pos:line="764" pos:column="33">ai_family<pos:position pos:line="764" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="764" pos:column="44">AI<pos:position pos:line="764" pos:column="46"/></name><operator pos:line="764" pos:column="46">.<pos:position pos:line="764" pos:column="47"/></operator><name pos:line="764" pos:column="47">ai_socktype<pos:position pos:line="764" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="764" pos:column="60">AI<pos:position pos:line="764" pos:column="62"/></name><operator pos:line="764" pos:column="62">.<pos:position pos:line="764" pos:column="63"/></operator><name pos:line="764" pos:column="63">ai_protocol<pos:position pos:line="764" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="764" pos:column="75"/></argument_list></call><operator pos:line="764" pos:column="75">)<pos:position pos:line="764" pos:column="76"/></operator> <operator pos:line="764" pos:column="77">&lt;<pos:position pos:line="764" pos:column="81"/></operator> <literal type="number" pos:line="764" pos:column="79">0<pos:position pos:line="764" pos:column="80"/></literal></expr>)<pos:position pos:line="764" pos:column="81"/></condition><then pos:line="764" pos:column="81"> <block pos:line="764" pos:column="82">{
        <comment type="block" pos:line="765" pos:column="9">/* Increase the number of reserved fd's if calls to socket()
         * are failing because the open file table is full.  This
         * limits the number of simultaneous clients */</comment>

        <if pos:line="769" pos:column="9">if <condition pos:line="769" pos:column="12">(<expr><call><name pos:line="769" pos:column="13">limitError<pos:position pos:line="769" pos:column="23"/></name><argument_list pos:line="769" pos:column="23">(<argument><expr><name pos:line="769" pos:column="24">errno<pos:position pos:line="769" pos:column="29"/></name></expr></argument>)<pos:position pos:line="769" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="769" pos:column="31"/></condition><then pos:line="769" pos:column="31"> <block pos:line="769" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="770" pos:column="13">debugs<pos:position pos:line="770" pos:column="19"/></name><argument_list pos:line="770" pos:column="19">(<argument><expr><literal type="number" pos:line="770" pos:column="20">50<pos:position pos:line="770" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="770" pos:column="24">DBG_IMPORTANT<pos:position pos:line="770" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="770" pos:column="39">HERE<pos:position pos:line="770" pos:column="43"/></name> <operator pos:line="770" pos:column="44">&lt;&lt;<pos:position pos:line="770" pos:column="52"/></operator> <literal type="string" pos:line="770" pos:column="47">"socket failure: "<pos:position pos:line="770" pos:column="65"/></literal> <operator pos:line="770" pos:column="66">&lt;&lt;<pos:position pos:line="770" pos:column="74"/></operator> <call><name pos:line="770" pos:column="69">xstrerror<pos:position pos:line="770" pos:column="78"/></name><argument_list pos:line="770" pos:column="78">()<pos:position pos:line="770" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="770" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="770" pos:column="82"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="771" pos:column="13">fdAdjustReserved<pos:position pos:line="771" pos:column="29"/></name><argument_list pos:line="771" pos:column="29">()<pos:position pos:line="771" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="771" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="772" pos:column="10"/></block></then> <else pos:line="772" pos:column="11">else <block pos:line="772" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="773" pos:column="13">debugs<pos:position pos:line="773" pos:column="19"/></name><argument_list pos:line="773" pos:column="19">(<argument><expr><literal type="number" pos:line="773" pos:column="20">50<pos:position pos:line="773" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="773" pos:column="24">DBG_CRITICAL<pos:position pos:line="773" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="773" pos:column="38">HERE<pos:position pos:line="773" pos:column="42"/></name> <operator pos:line="773" pos:column="43">&lt;&lt;<pos:position pos:line="773" pos:column="51"/></operator> <literal type="string" pos:line="773" pos:column="46">"socket failure: "<pos:position pos:line="773" pos:column="64"/></literal> <operator pos:line="773" pos:column="65">&lt;&lt;<pos:position pos:line="773" pos:column="73"/></operator> <call><name pos:line="773" pos:column="68">xstrerror<pos:position pos:line="773" pos:column="77"/></name><argument_list pos:line="773" pos:column="77">()<pos:position pos:line="773" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="773" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="773" pos:column="81"/></expr_stmt>
        }<pos:position pos:line="774" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name pos:line="776" pos:column="9">PROF_stop<pos:position pos:line="776" pos:column="18"/></name><argument_list pos:line="776" pos:column="18">(<argument><expr><name pos:line="776" pos:column="19">comm_open<pos:position pos:line="776" pos:column="28"/></name></expr></argument>)<pos:position pos:line="776" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="776" pos:column="30"/></expr_stmt>
        <return pos:line="777" pos:column="9">return <expr><operator pos:line="777" pos:column="16">-<pos:position pos:line="777" pos:column="17"/></operator><literal type="number" pos:line="777" pos:column="17">1<pos:position pos:line="777" pos:column="18"/></literal></expr>;<pos:position pos:line="777" pos:column="19"/></return>
    }<pos:position pos:line="778" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="780" pos:column="5">debugs<pos:position pos:line="780" pos:column="11"/></name><argument_list pos:line="780" pos:column="11">(<argument><expr><literal type="number" pos:line="780" pos:column="12">50<pos:position pos:line="780" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="780" pos:column="16">3<pos:position pos:line="780" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="780" pos:column="19">"Opened UDS FD "<pos:position pos:line="780" pos:column="35"/></literal> <operator pos:line="780" pos:column="36">&lt;&lt;<pos:position pos:line="780" pos:column="44"/></operator> <name pos:line="780" pos:column="39">new_socket<pos:position pos:line="780" pos:column="49"/></name> <operator pos:line="780" pos:column="50">&lt;&lt;<pos:position pos:line="780" pos:column="58"/></operator> <literal type="string" pos:line="780" pos:column="53">" : family="<pos:position pos:line="780" pos:column="65"/></literal> <operator pos:line="780" pos:column="66">&lt;&lt;<pos:position pos:line="780" pos:column="74"/></operator> <name><name pos:line="780" pos:column="69">AI<pos:position pos:line="780" pos:column="71"/></name><operator pos:line="780" pos:column="71">.<pos:position pos:line="780" pos:column="72"/></operator><name pos:line="780" pos:column="72">ai_family<pos:position pos:line="780" pos:column="81"/></name></name> <operator pos:line="780" pos:column="82">&lt;&lt;<pos:position pos:line="780" pos:column="90"/></operator> <literal type="string" pos:line="780" pos:column="85">", type="<pos:position pos:line="780" pos:column="94"/></literal> <operator pos:line="780" pos:column="95">&lt;&lt;<pos:position pos:line="780" pos:column="103"/></operator> <name><name pos:line="780" pos:column="98">AI<pos:position pos:line="780" pos:column="100"/></name><operator pos:line="780" pos:column="100">.<pos:position pos:line="780" pos:column="101"/></operator><name pos:line="780" pos:column="101">ai_socktype<pos:position pos:line="780" pos:column="112"/></name></name> <operator pos:line="780" pos:column="113">&lt;&lt;<pos:position pos:line="780" pos:column="121"/></operator> <literal type="string" pos:line="780" pos:column="116">", protocol="<pos:position pos:line="780" pos:column="129"/></literal> <operator pos:line="780" pos:column="130">&lt;&lt;<pos:position pos:line="780" pos:column="138"/></operator> <name><name pos:line="780" pos:column="133">AI<pos:position pos:line="780" pos:column="135"/></name><operator pos:line="780" pos:column="135">.<pos:position pos:line="780" pos:column="136"/></operator><name pos:line="780" pos:column="136">ai_protocol<pos:position pos:line="780" pos:column="147"/></name></name></expr></argument>)<pos:position pos:line="780" pos:column="148"/></argument_list></call></expr>;<pos:position pos:line="780" pos:column="149"/></expr_stmt>

    <comment type="block" pos:line="782" pos:column="5">/* update fdstat */</comment>
    <expr_stmt><expr><call><name pos:line="783" pos:column="5">debugs<pos:position pos:line="783" pos:column="11"/></name><argument_list pos:line="783" pos:column="11">(<argument><expr><literal type="number" pos:line="783" pos:column="12">50<pos:position pos:line="783" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="783" pos:column="16">5<pos:position pos:line="783" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="783" pos:column="19">HERE<pos:position pos:line="783" pos:column="23"/></name> <operator pos:line="783" pos:column="24">&lt;&lt;<pos:position pos:line="783" pos:column="32"/></operator> <literal type="string" pos:line="783" pos:column="27">"FD "<pos:position pos:line="783" pos:column="32"/></literal> <operator pos:line="783" pos:column="33">&lt;&lt;<pos:position pos:line="783" pos:column="41"/></operator> <name pos:line="783" pos:column="36">new_socket<pos:position pos:line="783" pos:column="46"/></name> <operator pos:line="783" pos:column="47">&lt;&lt;<pos:position pos:line="783" pos:column="55"/></operator> <literal type="string" pos:line="783" pos:column="50">" is a new socket"<pos:position pos:line="783" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="783" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="783" pos:column="70"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="785" pos:column="5">assert<pos:position pos:line="785" pos:column="11"/></name><argument_list pos:line="785" pos:column="11">(<argument><expr><operator pos:line="785" pos:column="12">!<pos:position pos:line="785" pos:column="13"/></operator><call><name pos:line="785" pos:column="13">isOpen<pos:position pos:line="785" pos:column="19"/></name><argument_list pos:line="785" pos:column="19">(<argument><expr><name pos:line="785" pos:column="20">new_socket<pos:position pos:line="785" pos:column="30"/></name></expr></argument>)<pos:position pos:line="785" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="785" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="785" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="786" pos:column="5">fd_open<pos:position pos:line="786" pos:column="12"/></name><argument_list pos:line="786" pos:column="12">(<argument><expr><name pos:line="786" pos:column="13">new_socket<pos:position pos:line="786" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="786" pos:column="25">FD_MSGHDR<pos:position pos:line="786" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="786" pos:column="36">NULL<pos:position pos:line="786" pos:column="40"/></name></expr></argument>)<pos:position pos:line="786" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="786" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="788" pos:column="5">fdd_table<pos:position pos:line="788" pos:column="14"/></name><index pos:line="788" pos:column="14">[<expr><name pos:line="788" pos:column="15">new_socket<pos:position pos:line="788" pos:column="25"/></name></expr>]<pos:position pos:line="788" pos:column="26"/></index></name><operator pos:line="788" pos:column="26">.<pos:position pos:line="788" pos:column="27"/></operator><name pos:line="788" pos:column="27">close_file<pos:position pos:line="788" pos:column="37"/></name> <operator pos:line="788" pos:column="38">=<pos:position pos:line="788" pos:column="39"/></operator> <name pos:line="788" pos:column="40">NULL<pos:position pos:line="788" pos:column="44"/></name></expr>;<pos:position pos:line="788" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="790" pos:column="5">fdd_table<pos:position pos:line="790" pos:column="14"/></name><index pos:line="790" pos:column="14">[<expr><name pos:line="790" pos:column="15">new_socket<pos:position pos:line="790" pos:column="25"/></name></expr>]<pos:position pos:line="790" pos:column="26"/></index></name><operator pos:line="790" pos:column="26">.<pos:position pos:line="790" pos:column="27"/></operator><name pos:line="790" pos:column="27">close_line<pos:position pos:line="790" pos:column="37"/></name> <operator pos:line="790" pos:column="38">=<pos:position pos:line="790" pos:column="39"/></operator> <literal type="number" pos:line="790" pos:column="40">0<pos:position pos:line="790" pos:column="41"/></literal></expr>;<pos:position pos:line="790" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="792" pos:column="5">fd_table<pos:position pos:line="792" pos:column="13"/></name><index pos:line="792" pos:column="13">[<expr><name pos:line="792" pos:column="14">new_socket<pos:position pos:line="792" pos:column="24"/></name></expr>]<pos:position pos:line="792" pos:column="25"/></index></name><operator pos:line="792" pos:column="25">.<pos:position pos:line="792" pos:column="26"/></operator><name pos:line="792" pos:column="26">sock_family<pos:position pos:line="792" pos:column="37"/></name> <operator pos:line="792" pos:column="38">=<pos:position pos:line="792" pos:column="39"/></operator> <name><name pos:line="792" pos:column="40">AI<pos:position pos:line="792" pos:column="42"/></name><operator pos:line="792" pos:column="42">.<pos:position pos:line="792" pos:column="43"/></operator><name pos:line="792" pos:column="43">ai_family<pos:position pos:line="792" pos:column="52"/></name></name></expr>;<pos:position pos:line="792" pos:column="53"/></expr_stmt>

    <if pos:line="794" pos:column="5">if <condition pos:line="794" pos:column="8">(<expr><operator pos:line="794" pos:column="9">!<pos:position pos:line="794" pos:column="10"/></operator><operator pos:line="794" pos:column="10">(<pos:position pos:line="794" pos:column="11"/></operator><name pos:line="794" pos:column="11">flags<pos:position pos:line="794" pos:column="16"/></name> <operator pos:line="794" pos:column="17">&amp;<pos:position pos:line="794" pos:column="22"/></operator> <name pos:line="794" pos:column="19">COMM_NOCLOEXEC<pos:position pos:line="794" pos:column="33"/></name><operator pos:line="794" pos:column="33">)<pos:position pos:line="794" pos:column="34"/></operator></expr>)<pos:position pos:line="794" pos:column="35"/></condition><then pos:line="794" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="795" pos:column="9">commSetCloseOnExec<pos:position pos:line="795" pos:column="27"/></name><argument_list pos:line="795" pos:column="27">(<argument><expr><name pos:line="795" pos:column="28">new_socket<pos:position pos:line="795" pos:column="38"/></name></expr></argument>)<pos:position pos:line="795" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="795" pos:column="40"/></expr_stmt></block></then></if>

    <if pos:line="797" pos:column="5">if <condition pos:line="797" pos:column="8">(<expr><name pos:line="797" pos:column="9">flags<pos:position pos:line="797" pos:column="14"/></name> <operator pos:line="797" pos:column="15">&amp;<pos:position pos:line="797" pos:column="20"/></operator> <name pos:line="797" pos:column="17">COMM_REUSEADDR<pos:position pos:line="797" pos:column="31"/></name></expr>)<pos:position pos:line="797" pos:column="32"/></condition><then pos:line="797" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="798" pos:column="9">commSetReuseAddr<pos:position pos:line="798" pos:column="25"/></name><argument_list pos:line="798" pos:column="25">(<argument><expr><name pos:line="798" pos:column="26">new_socket<pos:position pos:line="798" pos:column="36"/></name></expr></argument>)<pos:position pos:line="798" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="798" pos:column="38"/></expr_stmt></block></then></if>

    <if pos:line="800" pos:column="5">if <condition pos:line="800" pos:column="8">(<expr><name pos:line="800" pos:column="9">flags<pos:position pos:line="800" pos:column="14"/></name> <operator pos:line="800" pos:column="15">&amp;<pos:position pos:line="800" pos:column="20"/></operator> <name pos:line="800" pos:column="17">COMM_NONBLOCKING<pos:position pos:line="800" pos:column="33"/></name></expr>)<pos:position pos:line="800" pos:column="34"/></condition><then pos:line="800" pos:column="34"> <block pos:line="800" pos:column="35">{
        <if pos:line="801" pos:column="9">if <condition pos:line="801" pos:column="12">(<expr><call><name pos:line="801" pos:column="13">commSetNonBlocking<pos:position pos:line="801" pos:column="31"/></name><argument_list pos:line="801" pos:column="31">(<argument><expr><name pos:line="801" pos:column="32">new_socket<pos:position pos:line="801" pos:column="42"/></name></expr></argument>)<pos:position pos:line="801" pos:column="43"/></argument_list></call> <operator pos:line="801" pos:column="44">!=<pos:position pos:line="801" pos:column="46"/></operator> <name pos:line="801" pos:column="47">COMM_OK<pos:position pos:line="801" pos:column="54"/></name></expr>)<pos:position pos:line="801" pos:column="55"/></condition><then pos:line="801" pos:column="55"> <block pos:line="801" pos:column="56">{
            <expr_stmt><expr><call><name pos:line="802" pos:column="13">comm_close<pos:position pos:line="802" pos:column="23"/></name><argument_list pos:line="802" pos:column="23">(<argument><expr><name pos:line="802" pos:column="24">new_socket<pos:position pos:line="802" pos:column="34"/></name></expr></argument>)<pos:position pos:line="802" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="802" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="803" pos:column="13">PROF_stop<pos:position pos:line="803" pos:column="22"/></name><argument_list pos:line="803" pos:column="22">(<argument><expr><name pos:line="803" pos:column="23">comm_open<pos:position pos:line="803" pos:column="32"/></name></expr></argument>)<pos:position pos:line="803" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="803" pos:column="34"/></expr_stmt>
            <return pos:line="804" pos:column="13">return <expr><operator pos:line="804" pos:column="20">-<pos:position pos:line="804" pos:column="21"/></operator><literal type="number" pos:line="804" pos:column="21">1<pos:position pos:line="804" pos:column="22"/></literal></expr>;<pos:position pos:line="804" pos:column="23"/></return>
        }<pos:position pos:line="805" pos:column="10"/></block></then></if>
    }<pos:position pos:line="806" pos:column="6"/></block></then></if>

    <if pos:line="808" pos:column="5">if <condition pos:line="808" pos:column="8">(<expr><name pos:line="808" pos:column="9">flags<pos:position pos:line="808" pos:column="14"/></name> <operator pos:line="808" pos:column="15">&amp;<pos:position pos:line="808" pos:column="20"/></operator> <name pos:line="808" pos:column="17">COMM_DOBIND<pos:position pos:line="808" pos:column="28"/></name></expr>)<pos:position pos:line="808" pos:column="29"/></condition><then pos:line="808" pos:column="29"> <block pos:line="808" pos:column="30">{
        <if pos:line="809" pos:column="9">if <condition pos:line="809" pos:column="12">(<expr><call><name pos:line="809" pos:column="13">commBind<pos:position pos:line="809" pos:column="21"/></name><argument_list pos:line="809" pos:column="21">(<argument><expr><name pos:line="809" pos:column="22">new_socket<pos:position pos:line="809" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="809" pos:column="34">AI<pos:position pos:line="809" pos:column="36"/></name></expr></argument>)<pos:position pos:line="809" pos:column="37"/></argument_list></call> <operator pos:line="809" pos:column="38">!=<pos:position pos:line="809" pos:column="40"/></operator> <name pos:line="809" pos:column="41">COMM_OK<pos:position pos:line="809" pos:column="48"/></name></expr>)<pos:position pos:line="809" pos:column="49"/></condition><then pos:line="809" pos:column="49"> <block pos:line="809" pos:column="50">{
            <expr_stmt><expr><call><name pos:line="810" pos:column="13">comm_close<pos:position pos:line="810" pos:column="23"/></name><argument_list pos:line="810" pos:column="23">(<argument><expr><name pos:line="810" pos:column="24">new_socket<pos:position pos:line="810" pos:column="34"/></name></expr></argument>)<pos:position pos:line="810" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="810" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="811" pos:column="13">PROF_stop<pos:position pos:line="811" pos:column="22"/></name><argument_list pos:line="811" pos:column="22">(<argument><expr><name pos:line="811" pos:column="23">comm_open<pos:position pos:line="811" pos:column="32"/></name></expr></argument>)<pos:position pos:line="811" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="811" pos:column="34"/></expr_stmt>
            <return pos:line="812" pos:column="13">return <expr><operator pos:line="812" pos:column="20">-<pos:position pos:line="812" pos:column="21"/></operator><literal type="number" pos:line="812" pos:column="21">1<pos:position pos:line="812" pos:column="22"/></literal></expr>;<pos:position pos:line="812" pos:column="23"/></return>
        }<pos:position pos:line="813" pos:column="10"/></block></then></if>
    }<pos:position pos:line="814" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="816" pos:column="1">#<cpp:directive pos:line="816" pos:column="2">ifdef<pos:position pos:line="816" pos:column="7"/></cpp:directive> <name pos:line="816" pos:column="8">TCP_NODELAY<pos:position pos:line="816" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="817" pos:column="5">if <condition pos:line="817" pos:column="8">(<expr><name pos:line="817" pos:column="9">sock_type<pos:position pos:line="817" pos:column="18"/></name> <operator pos:line="817" pos:column="19">==<pos:position pos:line="817" pos:column="21"/></operator> <name pos:line="817" pos:column="22">SOCK_STREAM<pos:position pos:line="817" pos:column="33"/></name></expr>)<pos:position pos:line="817" pos:column="34"/></condition><then pos:line="817" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="818" pos:column="9">commSetTcpNoDelay<pos:position pos:line="818" pos:column="26"/></name><argument_list pos:line="818" pos:column="26">(<argument><expr><name pos:line="818" pos:column="27">new_socket<pos:position pos:line="818" pos:column="37"/></name></expr></argument>)<pos:position pos:line="818" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="818" pos:column="39"/></expr_stmt></block></then></if>

<cpp:endif pos:line="820" pos:column="1">#<cpp:directive pos:line="820" pos:column="2">endif<pos:position pos:line="820" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="822" pos:column="5">if <condition pos:line="822" pos:column="8">(<expr><name><name pos:line="822" pos:column="9">Config<pos:position pos:line="822" pos:column="15"/></name><operator pos:line="822" pos:column="15">.<pos:position pos:line="822" pos:column="16"/></operator><name pos:line="822" pos:column="16">tcpRcvBufsz<pos:position pos:line="822" pos:column="27"/></name></name> <operator pos:line="822" pos:column="28">&gt;<pos:position pos:line="822" pos:column="32"/></operator> <literal type="number" pos:line="822" pos:column="30">0<pos:position pos:line="822" pos:column="31"/></literal> <operator pos:line="822" pos:column="32">&amp;&amp;<pos:position pos:line="822" pos:column="42"/></operator> <name pos:line="822" pos:column="35">sock_type<pos:position pos:line="822" pos:column="44"/></name> <operator pos:line="822" pos:column="45">==<pos:position pos:line="822" pos:column="47"/></operator> <name pos:line="822" pos:column="48">SOCK_STREAM<pos:position pos:line="822" pos:column="59"/></name></expr>)<pos:position pos:line="822" pos:column="60"/></condition><then pos:line="822" pos:column="60">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="823" pos:column="9">commSetTcpRcvbuf<pos:position pos:line="823" pos:column="25"/></name><argument_list pos:line="823" pos:column="25">(<argument><expr><name pos:line="823" pos:column="26">new_socket<pos:position pos:line="823" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="823" pos:column="38">Config<pos:position pos:line="823" pos:column="44"/></name><operator pos:line="823" pos:column="44">.<pos:position pos:line="823" pos:column="45"/></operator><name pos:line="823" pos:column="45">tcpRcvBufsz<pos:position pos:line="823" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="823" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="823" pos:column="58"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="825" pos:column="5">PROF_stop<pos:position pos:line="825" pos:column="14"/></name><argument_list pos:line="825" pos:column="14">(<argument><expr><name pos:line="825" pos:column="15">comm_open<pos:position pos:line="825" pos:column="24"/></name></expr></argument>)<pos:position pos:line="825" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="825" pos:column="26"/></expr_stmt>

    <return pos:line="827" pos:column="5">return <expr><name pos:line="827" pos:column="12">new_socket<pos:position pos:line="827" pos:column="22"/></name></expr>;<pos:position pos:line="827" pos:column="23"/></return>
}<pos:position pos:line="828" pos:column="2"/></block></function></block></function></unit>
