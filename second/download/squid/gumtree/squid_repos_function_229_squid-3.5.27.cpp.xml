<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_229_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">StringSplit<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">char<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">In_Str<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">chr<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">Out_Str<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">size_t<pos:position pos:line="2" pos:column="58"/></name></type> <name pos:line="2" pos:column="59">Out_Sz<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">(<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">In_Str<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">==<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="20">NULL<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">)<pos:position pos:line="4" pos:column="25"/></operator> <operator pos:line="4" pos:column="26">||<pos:position pos:line="4" pos:column="28"/></operator> <operator pos:line="4" pos:column="29">(<pos:position pos:line="4" pos:column="30"/></operator><name pos:line="4" pos:column="30">Out_Str<pos:position pos:line="4" pos:column="37"/></name> <operator pos:line="4" pos:column="38">==<pos:position pos:line="4" pos:column="40"/></operator> <name pos:line="4" pos:column="41">NULL<pos:position pos:line="4" pos:column="45"/></name><operator pos:line="4" pos:column="45">)<pos:position pos:line="4" pos:column="46"/></operator></expr>)<pos:position pos:line="4" pos:column="47"/></condition><then pos:line="4" pos:column="47">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><operator pos:line="5" pos:column="16">(<pos:position pos:line="5" pos:column="17"/></operator><operator pos:line="5" pos:column="17">-<pos:position pos:line="5" pos:column="18"/></operator><literal type="number" pos:line="5" pos:column="18">1<pos:position pos:line="5" pos:column="19"/></literal><operator pos:line="5" pos:column="19">)<pos:position pos:line="5" pos:column="20"/></operator></expr>;<pos:position pos:line="5" pos:column="21"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">size_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">In_Len<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><call><name pos:line="7" pos:column="21">strlen<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">In_Str<pos:position pos:line="7" pos:column="34"/></name></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call> <operator pos:line="7" pos:column="36">+<pos:position pos:line="7" pos:column="37"/></operator> <literal type="number" pos:line="7" pos:column="38">1<pos:position pos:line="7" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>

    <comment type="line" pos:line="9" pos:column="5">// find the char delimiter position...</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">p<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><name pos:line="10" pos:column="15">In_Str<pos:position pos:line="10" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <while pos:line="11" pos:column="5">while <condition pos:line="11" pos:column="11">(<expr><operator pos:line="11" pos:column="12">*<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">p<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">!=<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">chr<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">&amp;&amp;<pos:position pos:line="11" pos:column="32"/></operator> <operator pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">p<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">!=<pos:position pos:line="11" pos:column="30"/></operator> <literal type="char" pos:line="11" pos:column="31">'\0'<pos:position pos:line="11" pos:column="35"/></literal> <operator pos:line="11" pos:column="36">&amp;&amp;<pos:position pos:line="11" pos:column="46"/></operator> <operator pos:line="11" pos:column="39">(<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="40">In_Str<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">+<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="47">In_Len<pos:position pos:line="11" pos:column="53"/></name><operator pos:line="11" pos:column="53">)<pos:position pos:line="11" pos:column="54"/></operator> <operator pos:line="11" pos:column="55">&gt;<pos:position pos:line="11" pos:column="59"/></operator> <name pos:line="11" pos:column="57">p<pos:position pos:line="11" pos:column="58"/></name></expr>)<pos:position pos:line="11" pos:column="59"/></condition> <block pos:line="11" pos:column="60">{
        <expr_stmt><expr><operator pos:line="12" pos:column="9">++<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">p<pos:position pos:line="12" pos:column="12"/></name></expr>;<pos:position pos:line="12" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></while>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">size_t<pos:position pos:line="15" pos:column="11"/></name></type> <name pos:line="15" pos:column="12">i<pos:position pos:line="15" pos:column="13"/></name> <init pos:line="15" pos:column="14">= <expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">p<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">-<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">In_Str<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">)<pos:position pos:line="15" pos:column="26"/></operator></expr></init></decl>;<pos:position pos:line="15" pos:column="27"/></decl_stmt>

    <comment type="line" pos:line="17" pos:column="5">// token to big for the output buffer</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">i<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">&gt;=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="14">Out_Sz<pos:position pos:line="18" pos:column="20"/></name></expr>)<pos:position pos:line="18" pos:column="21"/></condition><then pos:line="18" pos:column="21">
        <block type="pseudo"><return pos:line="19" pos:column="9">return <expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><operator pos:line="19" pos:column="17">-<pos:position pos:line="19" pos:column="18"/></operator><literal type="number" pos:line="19" pos:column="18">2<pos:position pos:line="19" pos:column="19"/></literal><operator pos:line="19" pos:column="19">)<pos:position pos:line="19" pos:column="20"/></operator></expr>;<pos:position pos:line="19" pos:column="21"/></return></block></then></if>

    <comment type="line" pos:line="21" pos:column="5">// wipe the unused Out_Obj area</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">memset<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name pos:line="22" pos:column="12">Out_Str<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">+<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">i<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="23">0<pos:position pos:line="22" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="26">Out_Sz<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">-<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="33">i<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>
    <comment type="line" pos:line="23" pos:column="5">// copy token from In_Str to Out_Str</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">memcpy<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">Out_Str<pos:position pos:line="24" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="21">In_Str<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">i<pos:position pos:line="24" pos:column="30"/></name></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>

    <comment type="line" pos:line="26" pos:column="5">// omit the delimiter</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">*<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">p<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">==<pos:position pos:line="27" pos:column="14"/></operator> <name pos:line="27" pos:column="15">chr<pos:position pos:line="27" pos:column="18"/></name></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19"> <block pos:line="27" pos:column="20">{
        <expr_stmt><expr><operator pos:line="28" pos:column="9">++<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">p<pos:position pos:line="28" pos:column="12"/></name></expr>;<pos:position pos:line="28" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="29" pos:column="9">++<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">i<pos:position pos:line="29" pos:column="12"/></name></expr>;<pos:position pos:line="29" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then> <else pos:line="30" pos:column="7">else <block pos:line="30" pos:column="12">{
        <comment type="line" pos:line="31" pos:column="9">// chr not found (or \0 found first). Wipe whole input buffer.</comment>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">memset<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">In_Str<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="24">0<pos:position pos:line="32" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="27">In_Len<pos:position pos:line="32" pos:column="33"/></name></expr></argument>)<pos:position pos:line="32" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
<comment type="line" pos:line="33" pos:column="1">//        return (-3);</comment>
<comment type="line" pos:line="34" pos:column="1">// Returning &lt;0 breaks current ConvertIP() code for last object</comment>
        <return pos:line="35" pos:column="9">return <expr><operator pos:line="35" pos:column="16">(<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">i<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">)<pos:position pos:line="35" pos:column="19"/></operator></expr>;<pos:position pos:line="35" pos:column="20"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></else></if>

    <comment type="line" pos:line="38" pos:column="5">// move the unused In_Str forward</comment>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">memmove<pos:position pos:line="39" pos:column="12"/></name><argument_list pos:line="39" pos:column="12">(<argument><expr><name pos:line="39" pos:column="13">In_Str<pos:position pos:line="39" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="21">p<pos:position pos:line="39" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="24">In_Len<pos:position pos:line="39" pos:column="30"/></name><operator pos:line="39" pos:column="30">-<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="31">i<pos:position pos:line="39" pos:column="32"/></name></expr></argument>)<pos:position pos:line="39" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
    <comment type="line" pos:line="40" pos:column="5">// wipe the end of In_Str</comment>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">memset<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><name pos:line="41" pos:column="12">In_Str<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">+<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">In_Len<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">-<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="26">i<pos:position pos:line="41" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="29">0<pos:position pos:line="41" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="32">i<pos:position pos:line="41" pos:column="33"/></name></expr></argument>)<pos:position pos:line="41" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt>
    <return pos:line="42" pos:column="5">return <expr><operator pos:line="42" pos:column="12">(<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="13">i<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">-<pos:position pos:line="42" pos:column="15"/></operator><literal type="number" pos:line="42" pos:column="15">1<pos:position pos:line="42" pos:column="16"/></literal><operator pos:line="42" pos:column="16">)<pos:position pos:line="42" pos:column="17"/></operator></expr>;<pos:position pos:line="42" pos:column="18"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
