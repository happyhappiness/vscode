<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_546_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">struct<pos:position pos:line="1" pos:column="14"/></name> <name pos:line="1" pos:column="15">node<pos:position pos:line="1" pos:column="19"/></name></name> <modifier pos:line="1" pos:column="20">*<pos:position pos:line="1" pos:column="21"/></modifier></type>
<name pos:line="2" pos:column="1">parse_objecttype<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">register<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">FILE<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">fp<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">name<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list> <block pos:line="2" pos:column="49">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">register<pos:position pos:line="3" pos:column="13"/></specifier> <name pos:line="3" pos:column="14">int<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">type<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">token<pos:position pos:line="4" pos:column="15"/></name><index pos:line="4" pos:column="15">[<expr><literal type="number" pos:line="4" pos:column="16">64<pos:position pos:line="4" pos:column="18"/></literal></expr>]<pos:position pos:line="4" pos:column="19"/></index></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">count<pos:position pos:line="5" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="16">length<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">subid<pos:position pos:line="6" pos:column="17"/></name></name></type> <name><name pos:line="6" pos:column="18">SubOid<pos:position pos:line="6" pos:column="24"/></name><index pos:line="6" pos:column="24">[<expr><literal type="number" pos:line="6" pos:column="25">32<pos:position pos:line="6" pos:column="27"/></literal></expr>]<pos:position pos:line="6" pos:column="28"/></index></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">syntax<pos:position pos:line="7" pos:column="16"/></name><index pos:line="7" pos:column="16">[<expr><literal type="number" pos:line="7" pos:column="17">64<pos:position pos:line="7" pos:column="19"/></literal></expr>]<pos:position pos:line="7" pos:column="20"/></index></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">nexttype<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name></type> <name><name pos:line="9" pos:column="10">nexttoken<pos:position pos:line="9" pos:column="19"/></name><index pos:line="9" pos:column="19">[<expr><literal type="number" pos:line="9" pos:column="20">64<pos:position pos:line="9" pos:column="22"/></literal></expr>]<pos:position pos:line="9" pos:column="23"/></index></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">register<pos:position pos:line="10" pos:column="13"/></specifier> <name><name pos:line="10" pos:column="14">struct<pos:position pos:line="10" pos:column="20"/></name> <name pos:line="10" pos:column="21">node<pos:position pos:line="10" pos:column="25"/></name></name> <modifier pos:line="10" pos:column="26">*<pos:position pos:line="10" pos:column="27"/></modifier></type><name pos:line="10" pos:column="27">np<pos:position pos:line="10" pos:column="29"/></name> <init pos:line="10" pos:column="30">= <expr><name pos:line="10" pos:column="32">NULL<pos:position pos:line="10" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">register<pos:position pos:line="11" pos:column="13"/></specifier> <name><name pos:line="11" pos:column="14">struct<pos:position pos:line="11" pos:column="20"/></name> <name pos:line="11" pos:column="21">enum_list<pos:position pos:line="11" pos:column="30"/></name></name> <modifier pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></modifier></type><name pos:line="11" pos:column="32">ep<pos:position pos:line="11" pos:column="34"/></name> <init pos:line="11" pos:column="35">= <expr><name pos:line="11" pos:column="37">NULL<pos:position pos:line="11" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">type<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <call><name pos:line="13" pos:column="12">get_token<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">fp<pos:position pos:line="13" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="26">token<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">type<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">!=<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">SYNTAX<pos:position pos:line="14" pos:column="23"/></name></expr>)<pos:position pos:line="14" pos:column="24"/></condition><then pos:line="14" pos:column="24"> <block pos:line="14" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">print_error<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><literal type="string" pos:line="15" pos:column="21">"Bad format for OBJECT TYPE"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">token<pos:position pos:line="15" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="58">type<pos:position pos:line="15" pos:column="62"/></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="64"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="18" pos:column="5">np<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <operator pos:line="18" pos:column="10">(<pos:position pos:line="18" pos:column="11"/></operator>struct <name pos:line="18" pos:column="18">node<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">*<pos:position pos:line="18" pos:column="24"/></operator><operator pos:line="18" pos:column="24">)<pos:position pos:line="18" pos:column="25"/></operator> <call><name pos:line="18" pos:column="26">xmalloc<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><sizeof pos:line="18" pos:column="34">sizeof<argument_list pos:line="18" pos:column="40">(<argument><expr pos:line="18" pos:column="41">struct <name pos:line="18" pos:column="48">node<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">np<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">-&gt;<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="9">next<pos:position pos:line="19" pos:column="13"/></name></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <literal type="number" pos:line="19" pos:column="16">0<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">np<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">-&gt;<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="9">enums<pos:position pos:line="20" pos:column="14"/></name></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <literal type="number" pos:line="20" pos:column="17">0<pos:position pos:line="20" pos:column="18"/></literal></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">type<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">=<pos:position pos:line="21" pos:column="11"/></operator> <call><name pos:line="21" pos:column="12">get_token<pos:position pos:line="21" pos:column="21"/></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">fp<pos:position pos:line="21" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="26">token<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">nexttype<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <call><name pos:line="22" pos:column="16">get_token<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">fp<pos:position pos:line="22" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="30">nexttoken<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">np<pos:position pos:line="23" pos:column="7"/></name><operator pos:line="23" pos:column="7">-&gt;<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="9">type<pos:position pos:line="23" pos:column="13"/></name></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <name pos:line="23" pos:column="16">type<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>
    <switch pos:line="24" pos:column="5">switch <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">type<pos:position pos:line="24" pos:column="17"/></name></expr>)<pos:position pos:line="24" pos:column="18"/></condition> <block pos:line="24" pos:column="19">{
    <case pos:line="25" pos:column="5">case <expr><name pos:line="25" pos:column="10">SEQUENCE<pos:position pos:line="25" pos:column="18"/></name></expr>:<pos:position pos:line="25" pos:column="19"/></case>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">strcpy<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">syntax<pos:position pos:line="26" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="24">token<pos:position pos:line="26" pos:column="29"/></name></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">nexttype<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">==<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">OF<pos:position pos:line="27" pos:column="27"/></name></expr>)<pos:position pos:line="27" pos:column="28"/></condition><then pos:line="27" pos:column="28"> <block pos:line="27" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">strcat<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">syntax<pos:position pos:line="28" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="28">" "<pos:position pos:line="28" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">strcat<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">syntax<pos:position pos:line="29" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="28">nexttoken<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="30" pos:column="13">nexttype<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator> <call><name pos:line="30" pos:column="24">get_token<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">fp<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">nexttoken<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">strcat<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">syntax<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="28">" "<pos:position pos:line="31" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">strcat<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">syntax<pos:position pos:line="32" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="28">nexttoken<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">nexttype<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <call><name pos:line="33" pos:column="24">get_token<pos:position pos:line="33" pos:column="33"/></name><argument_list pos:line="33" pos:column="33">(<argument><expr><name pos:line="33" pos:column="34">fp<pos:position pos:line="33" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="38">nexttoken<pos:position pos:line="33" pos:column="47"/></name></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
        <break pos:line="35" pos:column="9">break;<pos:position pos:line="35" pos:column="15"/></break>
    <case pos:line="36" pos:column="5">case <expr><name pos:line="36" pos:column="10">INTEGER<pos:position pos:line="36" pos:column="17"/></name></expr>:<pos:position pos:line="36" pos:column="18"/></case>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">strcpy<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">syntax<pos:position pos:line="37" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="24">token<pos:position pos:line="37" pos:column="29"/></name></expr></argument>)<pos:position pos:line="37" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">nexttype<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">==<pos:position pos:line="38" pos:column="24"/></operator> <name pos:line="38" pos:column="25">LEFTBRACKET<pos:position pos:line="38" pos:column="36"/></name></expr>)<pos:position pos:line="38" pos:column="37"/></condition><then pos:line="38" pos:column="37"> <block pos:line="38" pos:column="38">{
            <comment type="block" pos:line="39" pos:column="13">/* if there is an enumeration list, parse it */</comment>
            <while pos:line="40" pos:column="13">while <condition pos:line="40" pos:column="19">(<expr><operator pos:line="40" pos:column="20">(<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="21">type<pos:position pos:line="40" pos:column="25"/></name> <operator pos:line="40" pos:column="26">=<pos:position pos:line="40" pos:column="27"/></operator> <call><name pos:line="40" pos:column="28">get_token<pos:position pos:line="40" pos:column="37"/></name><argument_list pos:line="40" pos:column="37">(<argument><expr><name pos:line="40" pos:column="38">fp<pos:position pos:line="40" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="42">token<pos:position pos:line="40" pos:column="47"/></name></expr></argument>)<pos:position pos:line="40" pos:column="48"/></argument_list></call><operator pos:line="40" pos:column="48">)<pos:position pos:line="40" pos:column="49"/></operator> <operator pos:line="40" pos:column="50">!=<pos:position pos:line="40" pos:column="52"/></operator> <name pos:line="40" pos:column="53">ENDOFFILE<pos:position pos:line="40" pos:column="62"/></name></expr>)<pos:position pos:line="40" pos:column="63"/></condition> <block pos:line="40" pos:column="64">{
                <if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">type<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">==<pos:position pos:line="41" pos:column="28"/></operator> <name pos:line="41" pos:column="29">RIGHTBRACKET<pos:position pos:line="41" pos:column="41"/></name></expr>)<pos:position pos:line="41" pos:column="42"/></condition><then pos:line="41" pos:column="42">
                    <block type="pseudo"><break pos:line="42" pos:column="21">break;<pos:position pos:line="42" pos:column="27"/></break></block></then></if>
                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">type<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">==<pos:position pos:line="43" pos:column="28"/></operator> <name pos:line="43" pos:column="29">LABEL<pos:position pos:line="43" pos:column="34"/></name></expr>)<pos:position pos:line="43" pos:column="35"/></condition><then pos:line="43" pos:column="35"> <block pos:line="43" pos:column="36">{
                    <comment type="block" pos:line="44" pos:column="21">/* this is an enumerated label */</comment>
                    <if pos:line="45" pos:column="21">if <condition pos:line="45" pos:column="24">(<expr><name><name pos:line="45" pos:column="25">np<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">-&gt;<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="29">enums<pos:position pos:line="45" pos:column="34"/></name></name> <operator pos:line="45" pos:column="35">==<pos:position pos:line="45" pos:column="37"/></operator> <literal type="number" pos:line="45" pos:column="38">0<pos:position pos:line="45" pos:column="39"/></literal></expr>)<pos:position pos:line="45" pos:column="40"/></condition><then pos:line="45" pos:column="40"> <block pos:line="45" pos:column="41">{
                        <expr_stmt><expr><name pos:line="46" pos:column="25">ep<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">=<pos:position pos:line="46" pos:column="29"/></operator> <name><name pos:line="46" pos:column="30">np<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">-&gt;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="34">enums<pos:position pos:line="46" pos:column="39"/></name></name> <operator pos:line="46" pos:column="40">=<pos:position pos:line="46" pos:column="41"/></operator> <operator pos:line="46" pos:column="42">(<pos:position pos:line="46" pos:column="43"/></operator>struct <name pos:line="46" pos:column="50">enum_list<pos:position pos:line="46" pos:column="59"/></name> <operator pos:line="46" pos:column="60">*<pos:position pos:line="46" pos:column="61"/></operator><operator pos:line="46" pos:column="61">)<pos:position pos:line="46" pos:column="62"/></operator>
                                         <call><name pos:line="47" pos:column="42">xmalloc<pos:position pos:line="47" pos:column="49"/></name><argument_list pos:line="47" pos:column="49">(<argument><expr><sizeof pos:line="47" pos:column="50">sizeof<argument_list pos:line="47" pos:column="56">(<argument><expr pos:line="47" pos:column="57">struct <name pos:line="47" pos:column="64">enum_list<pos:position pos:line="47" pos:column="73"/></name></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="47" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="76"/></expr_stmt>
                    }<pos:position pos:line="48" pos:column="22"/></block></then> <else pos:line="48" pos:column="23">else <block pos:line="48" pos:column="28">{
                        <expr_stmt><expr><name><name pos:line="49" pos:column="25">ep<pos:position pos:line="49" pos:column="27"/></name><operator pos:line="49" pos:column="27">-&gt;<pos:position pos:line="49" pos:column="32"/></operator><name pos:line="49" pos:column="29">next<pos:position pos:line="49" pos:column="33"/></name></name> <operator pos:line="49" pos:column="34">=<pos:position pos:line="49" pos:column="35"/></operator> <operator pos:line="49" pos:column="36">(<pos:position pos:line="49" pos:column="37"/></operator>struct <name pos:line="49" pos:column="44">enum_list<pos:position pos:line="49" pos:column="53"/></name> <operator pos:line="49" pos:column="54">*<pos:position pos:line="49" pos:column="55"/></operator><operator pos:line="49" pos:column="55">)<pos:position pos:line="49" pos:column="56"/></operator>
                                   <call><name pos:line="50" pos:column="36">xmalloc<pos:position pos:line="50" pos:column="43"/></name><argument_list pos:line="50" pos:column="43">(<argument><expr><sizeof pos:line="50" pos:column="44">sizeof<argument_list pos:line="50" pos:column="50">(<argument><expr pos:line="50" pos:column="51">struct <name pos:line="50" pos:column="58">enum_list<pos:position pos:line="50" pos:column="67"/></name></expr></argument>)<pos:position pos:line="50" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="70"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="51" pos:column="25">ep<pos:position pos:line="51" pos:column="27"/></name> <operator pos:line="51" pos:column="28">=<pos:position pos:line="51" pos:column="29"/></operator> <name><name pos:line="51" pos:column="30">ep<pos:position pos:line="51" pos:column="32"/></name><operator pos:line="51" pos:column="32">-&gt;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="34">next<pos:position pos:line="51" pos:column="38"/></name></name></expr>;<pos:position pos:line="51" pos:column="39"/></expr_stmt>
                    }<pos:position pos:line="52" pos:column="22"/></block></else></if>
                    <expr_stmt><expr><name><name pos:line="53" pos:column="21">ep<pos:position pos:line="53" pos:column="23"/></name><operator pos:line="53" pos:column="23">-&gt;<pos:position pos:line="53" pos:column="28"/></operator><name pos:line="53" pos:column="25">next<pos:position pos:line="53" pos:column="29"/></name></name> <operator pos:line="53" pos:column="30">=<pos:position pos:line="53" pos:column="31"/></operator> <literal type="number" pos:line="53" pos:column="32">0<pos:position pos:line="53" pos:column="33"/></literal></expr>;<pos:position pos:line="53" pos:column="34"/></expr_stmt>
                    <comment type="block" pos:line="54" pos:column="21">/* a reasonable approximation for the length */</comment>
                    <expr_stmt><expr><name><name pos:line="55" pos:column="21">ep<pos:position pos:line="55" pos:column="23"/></name><operator pos:line="55" pos:column="23">-&gt;<pos:position pos:line="55" pos:column="28"/></operator><name pos:line="55" pos:column="25">label<pos:position pos:line="55" pos:column="30"/></name></name> <operator pos:line="55" pos:column="31">=<pos:position pos:line="55" pos:column="32"/></operator> <operator pos:line="55" pos:column="33">(<pos:position pos:line="55" pos:column="34"/></operator><name pos:line="55" pos:column="34">char<pos:position pos:line="55" pos:column="38"/></name> <operator pos:line="55" pos:column="39">*<pos:position pos:line="55" pos:column="40"/></operator><operator pos:line="55" pos:column="40">)<pos:position pos:line="55" pos:column="41"/></operator> <call><name pos:line="55" pos:column="42">xmalloc<pos:position pos:line="55" pos:column="49"/></name><argument_list pos:line="55" pos:column="49">(<argument><expr><operator pos:line="55" pos:column="50">(<pos:position pos:line="55" pos:column="51"/></operator><name pos:line="55" pos:column="51">unsigned<pos:position pos:line="55" pos:column="59"/></name><operator pos:line="55" pos:column="59">)<pos:position pos:line="55" pos:column="60"/></operator> <call><name pos:line="55" pos:column="61">strlen<pos:position pos:line="55" pos:column="67"/></name><argument_list pos:line="55" pos:column="67">(<argument><expr><name pos:line="55" pos:column="68">token<pos:position pos:line="55" pos:column="73"/></name></expr></argument>)<pos:position pos:line="55" pos:column="74"/></argument_list></call> <operator pos:line="55" pos:column="75">+<pos:position pos:line="55" pos:column="76"/></operator> <literal type="number" pos:line="55" pos:column="77">1<pos:position pos:line="55" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="80"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="56" pos:column="21">strcpy<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><name><name pos:line="56" pos:column="28">ep<pos:position pos:line="56" pos:column="30"/></name><operator pos:line="56" pos:column="30">-&gt;<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="32">label<pos:position pos:line="56" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="39">token<pos:position pos:line="56" pos:column="44"/></name></expr></argument>)<pos:position pos:line="56" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="46"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="57" pos:column="21">type<pos:position pos:line="57" pos:column="25"/></name> <operator pos:line="57" pos:column="26">=<pos:position pos:line="57" pos:column="27"/></operator> <call><name pos:line="57" pos:column="28">get_token<pos:position pos:line="57" pos:column="37"/></name><argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">fp<pos:position pos:line="57" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="42">token<pos:position pos:line="57" pos:column="47"/></name></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt>
                    <if pos:line="58" pos:column="21">if <condition pos:line="58" pos:column="24">(<expr><name pos:line="58" pos:column="25">type<pos:position pos:line="58" pos:column="29"/></name> <operator pos:line="58" pos:column="30">!=<pos:position pos:line="58" pos:column="32"/></operator> <name pos:line="58" pos:column="33">LEFTPAREN<pos:position pos:line="58" pos:column="42"/></name></expr>)<pos:position pos:line="58" pos:column="43"/></condition><then pos:line="58" pos:column="43"> <block pos:line="58" pos:column="44">{
                        <expr_stmt><expr><call><name pos:line="59" pos:column="25">print_error<pos:position pos:line="59" pos:column="36"/></name><argument_list pos:line="59" pos:column="36">(<argument><expr><literal type="string" pos:line="59" pos:column="37">"Expected \"(\""<pos:position pos:line="59" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="55">token<pos:position pos:line="59" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="62">type<pos:position pos:line="59" pos:column="66"/></name></expr></argument>)<pos:position pos:line="59" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="68"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="60" pos:column="25">free_node<pos:position pos:line="60" pos:column="34"/></name><argument_list pos:line="60" pos:column="34">(<argument><expr><name pos:line="60" pos:column="35">np<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>
                        <return pos:line="61" pos:column="25">return <expr><literal type="number" pos:line="61" pos:column="32">0<pos:position pos:line="61" pos:column="33"/></literal></expr>;<pos:position pos:line="61" pos:column="34"/></return>
                    }<pos:position pos:line="62" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><name pos:line="63" pos:column="21">type<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">=<pos:position pos:line="63" pos:column="27"/></operator> <call><name pos:line="63" pos:column="28">get_token<pos:position pos:line="63" pos:column="37"/></name><argument_list pos:line="63" pos:column="37">(<argument><expr><name pos:line="63" pos:column="38">fp<pos:position pos:line="63" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="42">token<pos:position pos:line="63" pos:column="47"/></name></expr></argument>)<pos:position pos:line="63" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="49"/></expr_stmt>
                    <if pos:line="64" pos:column="21">if <condition pos:line="64" pos:column="24">(<expr><name pos:line="64" pos:column="25">type<pos:position pos:line="64" pos:column="29"/></name> <operator pos:line="64" pos:column="30">!=<pos:position pos:line="64" pos:column="32"/></operator> <name pos:line="64" pos:column="33">NUMBER<pos:position pos:line="64" pos:column="39"/></name></expr>)<pos:position pos:line="64" pos:column="40"/></condition><then pos:line="64" pos:column="40"> <block pos:line="64" pos:column="41">{
                        <expr_stmt><expr><call><name pos:line="65" pos:column="25">print_error<pos:position pos:line="65" pos:column="36"/></name><argument_list pos:line="65" pos:column="36">(<argument><expr><literal type="string" pos:line="65" pos:column="37">"Expected integer"<pos:position pos:line="65" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="57">token<pos:position pos:line="65" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="64">type<pos:position pos:line="65" pos:column="68"/></name></expr></argument>)<pos:position pos:line="65" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="70"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="66" pos:column="25">free_node<pos:position pos:line="66" pos:column="34"/></name><argument_list pos:line="66" pos:column="34">(<argument><expr><name pos:line="66" pos:column="35">np<pos:position pos:line="66" pos:column="37"/></name></expr></argument>)<pos:position pos:line="66" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="39"/></expr_stmt>
                        <return pos:line="67" pos:column="25">return <expr><literal type="number" pos:line="67" pos:column="32">0<pos:position pos:line="67" pos:column="33"/></literal></expr>;<pos:position pos:line="67" pos:column="34"/></return>
                    }<pos:position pos:line="68" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><name><name pos:line="69" pos:column="21">ep<pos:position pos:line="69" pos:column="23"/></name><operator pos:line="69" pos:column="23">-&gt;<pos:position pos:line="69" pos:column="28"/></operator><name pos:line="69" pos:column="25">value<pos:position pos:line="69" pos:column="30"/></name></name> <operator pos:line="69" pos:column="31">=<pos:position pos:line="69" pos:column="32"/></operator> <call><name pos:line="69" pos:column="33">atoi<pos:position pos:line="69" pos:column="37"/></name><argument_list pos:line="69" pos:column="37">(<argument><expr><name pos:line="69" pos:column="38">token<pos:position pos:line="69" pos:column="43"/></name></expr></argument>)<pos:position pos:line="69" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="45"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="70" pos:column="21">type<pos:position pos:line="70" pos:column="25"/></name> <operator pos:line="70" pos:column="26">=<pos:position pos:line="70" pos:column="27"/></operator> <call><name pos:line="70" pos:column="28">get_token<pos:position pos:line="70" pos:column="37"/></name><argument_list pos:line="70" pos:column="37">(<argument><expr><name pos:line="70" pos:column="38">fp<pos:position pos:line="70" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="42">token<pos:position pos:line="70" pos:column="47"/></name></expr></argument>)<pos:position pos:line="70" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="49"/></expr_stmt>
                    <if pos:line="71" pos:column="21">if <condition pos:line="71" pos:column="24">(<expr><name pos:line="71" pos:column="25">type<pos:position pos:line="71" pos:column="29"/></name> <operator pos:line="71" pos:column="30">!=<pos:position pos:line="71" pos:column="32"/></operator> <name pos:line="71" pos:column="33">RIGHTPAREN<pos:position pos:line="71" pos:column="43"/></name></expr>)<pos:position pos:line="71" pos:column="44"/></condition><then pos:line="71" pos:column="44"> <block pos:line="71" pos:column="45">{
                        <expr_stmt><expr><call><name pos:line="72" pos:column="25">print_error<pos:position pos:line="72" pos:column="36"/></name><argument_list pos:line="72" pos:column="36">(<argument><expr><literal type="string" pos:line="72" pos:column="37">"Expected \")\""<pos:position pos:line="72" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="55">token<pos:position pos:line="72" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="62">type<pos:position pos:line="72" pos:column="66"/></name></expr></argument>)<pos:position pos:line="72" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="68"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="73" pos:column="25">free_node<pos:position pos:line="73" pos:column="34"/></name><argument_list pos:line="73" pos:column="34">(<argument><expr><name pos:line="73" pos:column="35">np<pos:position pos:line="73" pos:column="37"/></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="39"/></expr_stmt>
                        <return pos:line="74" pos:column="25">return <expr><literal type="number" pos:line="74" pos:column="32">0<pos:position pos:line="74" pos:column="33"/></literal></expr>;<pos:position pos:line="74" pos:column="34"/></return>
                    }<pos:position pos:line="75" pos:column="22"/></block></then></if>
                }<pos:position pos:line="76" pos:column="18"/></block></then></if>
            }<pos:position pos:line="77" pos:column="14"/></block></while>
            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><name pos:line="78" pos:column="17">type<pos:position pos:line="78" pos:column="21"/></name> <operator pos:line="78" pos:column="22">==<pos:position pos:line="78" pos:column="24"/></operator> <name pos:line="78" pos:column="25">ENDOFFILE<pos:position pos:line="78" pos:column="34"/></name></expr>)<pos:position pos:line="78" pos:column="35"/></condition><then pos:line="78" pos:column="35"> <block pos:line="78" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="79" pos:column="17">print_error<pos:position pos:line="79" pos:column="28"/></name><argument_list pos:line="79" pos:column="28">(<argument><expr><literal type="string" pos:line="79" pos:column="29">"Expected \"}\""<pos:position pos:line="79" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="47">token<pos:position pos:line="79" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="54">type<pos:position pos:line="79" pos:column="58"/></name></expr></argument>)<pos:position pos:line="79" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="60"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="80" pos:column="17">free_node<pos:position pos:line="80" pos:column="26"/></name><argument_list pos:line="80" pos:column="26">(<argument><expr><name pos:line="80" pos:column="27">np<pos:position pos:line="80" pos:column="29"/></name></expr></argument>)<pos:position pos:line="80" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="31"/></expr_stmt>
                <return pos:line="81" pos:column="17">return <expr><literal type="number" pos:line="81" pos:column="24">0<pos:position pos:line="81" pos:column="25"/></literal></expr>;<pos:position pos:line="81" pos:column="26"/></return>
            }<pos:position pos:line="82" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="83" pos:column="13">nexttype<pos:position pos:line="83" pos:column="21"/></name> <operator pos:line="83" pos:column="22">=<pos:position pos:line="83" pos:column="23"/></operator> <call><name pos:line="83" pos:column="24">get_token<pos:position pos:line="83" pos:column="33"/></name><argument_list pos:line="83" pos:column="33">(<argument><expr><name pos:line="83" pos:column="34">fp<pos:position pos:line="83" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="38">nexttoken<pos:position pos:line="83" pos:column="47"/></name></expr></argument>)<pos:position pos:line="83" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="84" pos:column="10"/></block></then> <elseif pos:line="84" pos:column="11">else <if pos:line="84" pos:column="16">if <condition pos:line="84" pos:column="19">(<expr><name pos:line="84" pos:column="20">nexttype<pos:position pos:line="84" pos:column="28"/></name> <operator pos:line="84" pos:column="29">==<pos:position pos:line="84" pos:column="31"/></operator> <name pos:line="84" pos:column="32">LEFTPAREN<pos:position pos:line="84" pos:column="41"/></name></expr>)<pos:position pos:line="84" pos:column="42"/></condition><then pos:line="84" pos:column="42"> <block pos:line="84" pos:column="43">{
            <comment type="block" pos:line="85" pos:column="13">/* ignore the "constrained integer" for now */</comment>
            <expr_stmt><expr><name pos:line="86" pos:column="13">nexttype<pos:position pos:line="86" pos:column="21"/></name> <operator pos:line="86" pos:column="22">=<pos:position pos:line="86" pos:column="23"/></operator> <call><name pos:line="86" pos:column="24">get_token<pos:position pos:line="86" pos:column="33"/></name><argument_list pos:line="86" pos:column="33">(<argument><expr><name pos:line="86" pos:column="34">fp<pos:position pos:line="86" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="38">nexttoken<pos:position pos:line="86" pos:column="47"/></name></expr></argument>)<pos:position pos:line="86" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="87" pos:column="13">nexttype<pos:position pos:line="87" pos:column="21"/></name> <operator pos:line="87" pos:column="22">=<pos:position pos:line="87" pos:column="23"/></operator> <call><name pos:line="87" pos:column="24">get_token<pos:position pos:line="87" pos:column="33"/></name><argument_list pos:line="87" pos:column="33">(<argument><expr><name pos:line="87" pos:column="34">fp<pos:position pos:line="87" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="38">nexttoken<pos:position pos:line="87" pos:column="47"/></name></expr></argument>)<pos:position pos:line="87" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="88" pos:column="13">nexttype<pos:position pos:line="88" pos:column="21"/></name> <operator pos:line="88" pos:column="22">=<pos:position pos:line="88" pos:column="23"/></operator> <call><name pos:line="88" pos:column="24">get_token<pos:position pos:line="88" pos:column="33"/></name><argument_list pos:line="88" pos:column="33">(<argument><expr><name pos:line="88" pos:column="34">fp<pos:position pos:line="88" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="38">nexttoken<pos:position pos:line="88" pos:column="47"/></name></expr></argument>)<pos:position pos:line="88" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="89" pos:column="10"/></block></then></if></elseif></if>
        <break pos:line="90" pos:column="9">break;<pos:position pos:line="90" pos:column="15"/></break>
    <case pos:line="91" pos:column="5">case <expr><name pos:line="91" pos:column="10">OBJID<pos:position pos:line="91" pos:column="15"/></name></expr>:<pos:position pos:line="91" pos:column="16"/></case>
    <case pos:line="92" pos:column="5">case <expr><name pos:line="92" pos:column="10">OCTETSTR<pos:position pos:line="92" pos:column="18"/></name></expr>:<pos:position pos:line="92" pos:column="19"/></case>
    <case pos:line="93" pos:column="5">case <expr><name pos:line="93" pos:column="10">NETADDR<pos:position pos:line="93" pos:column="17"/></name></expr>:<pos:position pos:line="93" pos:column="18"/></case>
    <case pos:line="94" pos:column="5">case <expr><name pos:line="94" pos:column="10">IPADDR<pos:position pos:line="94" pos:column="16"/></name></expr>:<pos:position pos:line="94" pos:column="17"/></case>
    <case pos:line="95" pos:column="5">case <expr><name pos:line="95" pos:column="10">COUNTER<pos:position pos:line="95" pos:column="17"/></name></expr>:<pos:position pos:line="95" pos:column="18"/></case>
    <case pos:line="96" pos:column="5">case <expr><name pos:line="96" pos:column="10">GAUGE<pos:position pos:line="96" pos:column="15"/></name></expr>:<pos:position pos:line="96" pos:column="16"/></case>
    <case pos:line="97" pos:column="5">case <expr><name pos:line="97" pos:column="10">TIMETICKS<pos:position pos:line="97" pos:column="19"/></name></expr>:<pos:position pos:line="97" pos:column="20"/></case>
    <case pos:line="98" pos:column="5">case <expr><name pos:line="98" pos:column="10">SNMP_OPAQUE<pos:position pos:line="98" pos:column="21"/></name></expr>:<pos:position pos:line="98" pos:column="22"/></case>
    <case pos:line="99" pos:column="5">case <expr><name pos:line="99" pos:column="10">NUL<pos:position pos:line="99" pos:column="13"/></name></expr>:<pos:position pos:line="99" pos:column="14"/></case>
    <case pos:line="100" pos:column="5">case <expr><name pos:line="100" pos:column="10">LABEL<pos:position pos:line="100" pos:column="15"/></name></expr>:<pos:position pos:line="100" pos:column="16"/></case>
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">strcpy<pos:position pos:line="101" pos:column="15"/></name><argument_list pos:line="101" pos:column="15">(<argument><expr><name pos:line="101" pos:column="16">syntax<pos:position pos:line="101" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="24">token<pos:position pos:line="101" pos:column="29"/></name></expr></argument>)<pos:position pos:line="101" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="31"/></expr_stmt>
        <break pos:line="102" pos:column="9">break;<pos:position pos:line="102" pos:column="15"/></break>
    <default pos:line="103" pos:column="5">default:<pos:position pos:line="103" pos:column="13"/></default>
        <expr_stmt><expr><call><name pos:line="104" pos:column="9">print_error<pos:position pos:line="104" pos:column="20"/></name><argument_list pos:line="104" pos:column="20">(<argument><expr><literal type="string" pos:line="104" pos:column="21">"Bad syntax"<pos:position pos:line="104" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="35">token<pos:position pos:line="104" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="42">type<pos:position pos:line="104" pos:column="46"/></name></expr></argument>)<pos:position pos:line="104" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="105" pos:column="9">free_node<pos:position pos:line="105" pos:column="18"/></name><argument_list pos:line="105" pos:column="18">(<argument><expr><name pos:line="105" pos:column="19">np<pos:position pos:line="105" pos:column="21"/></name></expr></argument>)<pos:position pos:line="105" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="23"/></expr_stmt>
        <return pos:line="106" pos:column="9">return <expr><literal type="number" pos:line="106" pos:column="16">0<pos:position pos:line="106" pos:column="17"/></literal></expr>;<pos:position pos:line="106" pos:column="18"/></return>
    }<pos:position pos:line="107" pos:column="6"/></block></switch>
    <if pos:line="108" pos:column="5">if <condition pos:line="108" pos:column="8">(<expr><name pos:line="108" pos:column="9">nexttype<pos:position pos:line="108" pos:column="17"/></name> <operator pos:line="108" pos:column="18">!=<pos:position pos:line="108" pos:column="20"/></operator> <name pos:line="108" pos:column="21">ACCESS<pos:position pos:line="108" pos:column="27"/></name></expr>)<pos:position pos:line="108" pos:column="28"/></condition><then pos:line="108" pos:column="28"> <block pos:line="108" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">print_error<pos:position pos:line="109" pos:column="20"/></name><argument_list pos:line="109" pos:column="20">(<argument><expr><literal type="string" pos:line="109" pos:column="21">"Should be ACCESS"<pos:position pos:line="109" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="41">nexttoken<pos:position pos:line="109" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="52">nexttype<pos:position pos:line="109" pos:column="60"/></name></expr></argument>)<pos:position pos:line="109" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="110" pos:column="9">free_node<pos:position pos:line="110" pos:column="18"/></name><argument_list pos:line="110" pos:column="18">(<argument><expr><name pos:line="110" pos:column="19">np<pos:position pos:line="110" pos:column="21"/></name></expr></argument>)<pos:position pos:line="110" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="23"/></expr_stmt>
        <return pos:line="111" pos:column="9">return <expr><literal type="number" pos:line="111" pos:column="16">0<pos:position pos:line="111" pos:column="17"/></literal></expr>;<pos:position pos:line="111" pos:column="18"/></return>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="113" pos:column="5">type<pos:position pos:line="113" pos:column="9"/></name> <operator pos:line="113" pos:column="10">=<pos:position pos:line="113" pos:column="11"/></operator> <call><name pos:line="113" pos:column="12">get_token<pos:position pos:line="113" pos:column="21"/></name><argument_list pos:line="113" pos:column="21">(<argument><expr><name pos:line="113" pos:column="22">fp<pos:position pos:line="113" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="26">token<pos:position pos:line="113" pos:column="31"/></name></expr></argument>)<pos:position pos:line="113" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="33"/></expr_stmt>
    <if pos:line="114" pos:column="5">if <condition pos:line="114" pos:column="8">(<expr><name pos:line="114" pos:column="9">type<pos:position pos:line="114" pos:column="13"/></name> <operator pos:line="114" pos:column="14">!=<pos:position pos:line="114" pos:column="16"/></operator> <name pos:line="114" pos:column="17">READONLY<pos:position pos:line="114" pos:column="25"/></name> <operator pos:line="114" pos:column="26">&amp;&amp;<pos:position pos:line="114" pos:column="36"/></operator> <name pos:line="114" pos:column="29">type<pos:position pos:line="114" pos:column="33"/></name> <operator pos:line="114" pos:column="34">!=<pos:position pos:line="114" pos:column="36"/></operator> <name pos:line="114" pos:column="37">READWRITE<pos:position pos:line="114" pos:column="46"/></name> <operator pos:line="114" pos:column="47">&amp;&amp;<pos:position pos:line="114" pos:column="57"/></operator> <name pos:line="114" pos:column="50">type<pos:position pos:line="114" pos:column="54"/></name> <operator pos:line="114" pos:column="55">!=<pos:position pos:line="114" pos:column="57"/></operator> <name pos:line="114" pos:column="58">WRITEONLY<pos:position pos:line="114" pos:column="67"/></name>
            <operator pos:line="115" pos:column="13">&amp;&amp;<pos:position pos:line="115" pos:column="23"/></operator> <name pos:line="115" pos:column="16">type<pos:position pos:line="115" pos:column="20"/></name> <operator pos:line="115" pos:column="21">!=<pos:position pos:line="115" pos:column="23"/></operator> <name pos:line="115" pos:column="24">NOACCESS<pos:position pos:line="115" pos:column="32"/></name></expr>)<pos:position pos:line="115" pos:column="33"/></condition><then pos:line="115" pos:column="33"> <block pos:line="115" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="116" pos:column="9">print_error<pos:position pos:line="116" pos:column="20"/></name><argument_list pos:line="116" pos:column="20">(<argument><expr><literal type="string" pos:line="116" pos:column="21">"Bad access type"<pos:position pos:line="116" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="40">nexttoken<pos:position pos:line="116" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="51">nexttype<pos:position pos:line="116" pos:column="59"/></name></expr></argument>)<pos:position pos:line="116" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="117" pos:column="9">free_node<pos:position pos:line="117" pos:column="18"/></name><argument_list pos:line="117" pos:column="18">(<argument><expr><name pos:line="117" pos:column="19">np<pos:position pos:line="117" pos:column="21"/></name></expr></argument>)<pos:position pos:line="117" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="23"/></expr_stmt>
        <return pos:line="118" pos:column="9">return <expr><literal type="number" pos:line="118" pos:column="16">0<pos:position pos:line="118" pos:column="17"/></literal></expr>;<pos:position pos:line="118" pos:column="18"/></return>
    }<pos:position pos:line="119" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="120" pos:column="5">type<pos:position pos:line="120" pos:column="9"/></name> <operator pos:line="120" pos:column="10">=<pos:position pos:line="120" pos:column="11"/></operator> <call><name pos:line="120" pos:column="12">get_token<pos:position pos:line="120" pos:column="21"/></name><argument_list pos:line="120" pos:column="21">(<argument><expr><name pos:line="120" pos:column="22">fp<pos:position pos:line="120" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="26">token<pos:position pos:line="120" pos:column="31"/></name></expr></argument>)<pos:position pos:line="120" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="33"/></expr_stmt>
    <if pos:line="121" pos:column="5">if <condition pos:line="121" pos:column="8">(<expr><name pos:line="121" pos:column="9">type<pos:position pos:line="121" pos:column="13"/></name> <operator pos:line="121" pos:column="14">!=<pos:position pos:line="121" pos:column="16"/></operator> <name pos:line="121" pos:column="17">SNMP_STATUS<pos:position pos:line="121" pos:column="28"/></name></expr>)<pos:position pos:line="121" pos:column="29"/></condition><then pos:line="121" pos:column="29"> <block pos:line="121" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="122" pos:column="9">print_error<pos:position pos:line="122" pos:column="20"/></name><argument_list pos:line="122" pos:column="20">(<argument><expr><literal type="string" pos:line="122" pos:column="21">"Should be STATUS"<pos:position pos:line="122" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="41">token<pos:position pos:line="122" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="48">nexttype<pos:position pos:line="122" pos:column="56"/></name></expr></argument>)<pos:position pos:line="122" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">free_node<pos:position pos:line="123" pos:column="18"/></name><argument_list pos:line="123" pos:column="18">(<argument><expr><name pos:line="123" pos:column="19">np<pos:position pos:line="123" pos:column="21"/></name></expr></argument>)<pos:position pos:line="123" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="23"/></expr_stmt>
        <return pos:line="124" pos:column="9">return <expr><literal type="number" pos:line="124" pos:column="16">0<pos:position pos:line="124" pos:column="17"/></literal></expr>;<pos:position pos:line="124" pos:column="18"/></return>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="126" pos:column="5">type<pos:position pos:line="126" pos:column="9"/></name> <operator pos:line="126" pos:column="10">=<pos:position pos:line="126" pos:column="11"/></operator> <call><name pos:line="126" pos:column="12">get_token<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><name pos:line="126" pos:column="22">fp<pos:position pos:line="126" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="26">token<pos:position pos:line="126" pos:column="31"/></name></expr></argument>)<pos:position pos:line="126" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="33"/></expr_stmt>
    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">(<expr><name pos:line="127" pos:column="9">type<pos:position pos:line="127" pos:column="13"/></name> <operator pos:line="127" pos:column="14">!=<pos:position pos:line="127" pos:column="16"/></operator> <name pos:line="127" pos:column="17">MANDATORY<pos:position pos:line="127" pos:column="26"/></name> <operator pos:line="127" pos:column="27">&amp;&amp;<pos:position pos:line="127" pos:column="37"/></operator> <name pos:line="127" pos:column="30">type<pos:position pos:line="127" pos:column="34"/></name> <operator pos:line="127" pos:column="35">!=<pos:position pos:line="127" pos:column="37"/></operator> <name pos:line="127" pos:column="38">SNMP_OPTIONAL<pos:position pos:line="127" pos:column="51"/></name> <operator pos:line="127" pos:column="52">&amp;&amp;<pos:position pos:line="127" pos:column="62"/></operator> <name pos:line="127" pos:column="55">type<pos:position pos:line="127" pos:column="59"/></name> <operator pos:line="127" pos:column="60">!=<pos:position pos:line="127" pos:column="62"/></operator> <name pos:line="127" pos:column="63">OBSOLETE<pos:position pos:line="127" pos:column="71"/></name> <operator pos:line="127" pos:column="72">&amp;&amp;<pos:position pos:line="127" pos:column="82"/></operator> <name pos:line="127" pos:column="75">type<pos:position pos:line="127" pos:column="79"/></name> <operator pos:line="127" pos:column="80">!=<pos:position pos:line="127" pos:column="82"/></operator> <name pos:line="127" pos:column="83">RECOMMENDED<pos:position pos:line="127" pos:column="94"/></name></expr>)<pos:position pos:line="127" pos:column="95"/></condition><then pos:line="127" pos:column="95"> <block pos:line="127" pos:column="96">{
        <expr_stmt><expr><call><name pos:line="128" pos:column="9">print_error<pos:position pos:line="128" pos:column="20"/></name><argument_list pos:line="128" pos:column="20">(<argument><expr><literal type="string" pos:line="128" pos:column="21">"Bad status"<pos:position pos:line="128" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="128" pos:column="35">token<pos:position pos:line="128" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="42">type<pos:position pos:line="128" pos:column="46"/></name></expr></argument>)<pos:position pos:line="128" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="129" pos:column="9">free_node<pos:position pos:line="129" pos:column="18"/></name><argument_list pos:line="129" pos:column="18">(<argument><expr><name pos:line="129" pos:column="19">np<pos:position pos:line="129" pos:column="21"/></name></expr></argument>)<pos:position pos:line="129" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="23"/></expr_stmt>
        <return pos:line="130" pos:column="9">return <expr><literal type="number" pos:line="130" pos:column="16">0<pos:position pos:line="130" pos:column="17"/></literal></expr>;<pos:position pos:line="130" pos:column="18"/></return>
    }<pos:position pos:line="131" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="132" pos:column="5">/* Fetch next token.  Either:
     *
     * -&gt; EQUALS (Old MIB format)
     * -&gt; DESCRIPTION, INDEX (New MIB format)
     */</comment>
    <expr_stmt><expr><name pos:line="137" pos:column="5">type<pos:position pos:line="137" pos:column="9"/></name> <operator pos:line="137" pos:column="10">=<pos:position pos:line="137" pos:column="11"/></operator> <call><name pos:line="137" pos:column="12">get_token<pos:position pos:line="137" pos:column="21"/></name><argument_list pos:line="137" pos:column="21">(<argument><expr><name pos:line="137" pos:column="22">fp<pos:position pos:line="137" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="26">token<pos:position pos:line="137" pos:column="31"/></name></expr></argument>)<pos:position pos:line="137" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="33"/></expr_stmt>
    <if pos:line="138" pos:column="5">if <condition pos:line="138" pos:column="8">(<expr><operator pos:line="138" pos:column="9">(<pos:position pos:line="138" pos:column="10"/></operator><name pos:line="138" pos:column="10">type<pos:position pos:line="138" pos:column="14"/></name> <operator pos:line="138" pos:column="15">!=<pos:position pos:line="138" pos:column="17"/></operator> <name pos:line="138" pos:column="18">DESCRIPTION<pos:position pos:line="138" pos:column="29"/></name><operator pos:line="138" pos:column="29">)<pos:position pos:line="138" pos:column="30"/></operator> <operator pos:line="138" pos:column="31">&amp;&amp;<pos:position pos:line="138" pos:column="41"/></operator> <operator pos:line="138" pos:column="34">(<pos:position pos:line="138" pos:column="35"/></operator><name pos:line="138" pos:column="35">type<pos:position pos:line="138" pos:column="39"/></name> <operator pos:line="138" pos:column="40">!=<pos:position pos:line="138" pos:column="42"/></operator> <name pos:line="138" pos:column="43">INDEX<pos:position pos:line="138" pos:column="48"/></name><operator pos:line="138" pos:column="48">)<pos:position pos:line="138" pos:column="49"/></operator> <operator pos:line="138" pos:column="50">&amp;&amp;<pos:position pos:line="138" pos:column="60"/></operator> <operator pos:line="138" pos:column="53">(<pos:position pos:line="138" pos:column="54"/></operator><name pos:line="138" pos:column="54">type<pos:position pos:line="138" pos:column="58"/></name> <operator pos:line="138" pos:column="59">!=<pos:position pos:line="138" pos:column="61"/></operator> <name pos:line="138" pos:column="62">EQUALS<pos:position pos:line="138" pos:column="68"/></name><operator pos:line="138" pos:column="68">)<pos:position pos:line="138" pos:column="69"/></operator></expr>)<pos:position pos:line="138" pos:column="70"/></condition><then pos:line="138" pos:column="70"> <block pos:line="138" pos:column="71">{
        <expr_stmt><expr><call><name pos:line="139" pos:column="9">print_error<pos:position pos:line="139" pos:column="20"/></name><argument_list pos:line="139" pos:column="20">(<argument><expr><literal type="string" pos:line="139" pos:column="21">"Should be DESCRIPTION, INDEX, or EQUALS"<pos:position pos:line="139" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="64">token<pos:position pos:line="139" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="71">nexttype<pos:position pos:line="139" pos:column="79"/></name></expr></argument>)<pos:position pos:line="139" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="140" pos:column="9">free_node<pos:position pos:line="140" pos:column="18"/></name><argument_list pos:line="140" pos:column="18">(<argument><expr><name pos:line="140" pos:column="19">np<pos:position pos:line="140" pos:column="21"/></name></expr></argument>)<pos:position pos:line="140" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="23"/></expr_stmt>
        <return pos:line="141" pos:column="9">return <expr><literal type="number" pos:line="141" pos:column="16">0<pos:position pos:line="141" pos:column="17"/></literal></expr>;<pos:position pos:line="141" pos:column="18"/></return>
    }<pos:position pos:line="142" pos:column="6"/></block></then></if>
    <if pos:line="143" pos:column="5">if <condition pos:line="143" pos:column="8">(<expr><name pos:line="143" pos:column="9">type<pos:position pos:line="143" pos:column="13"/></name> <operator pos:line="143" pos:column="14">==<pos:position pos:line="143" pos:column="16"/></operator> <name pos:line="143" pos:column="17">DESCRIPTION<pos:position pos:line="143" pos:column="28"/></name></expr>)<pos:position pos:line="143" pos:column="29"/></condition><then pos:line="143" pos:column="29"> <block pos:line="143" pos:column="30">{

        <expr_stmt><expr><name pos:line="145" pos:column="9">type<pos:position pos:line="145" pos:column="13"/></name> <operator pos:line="145" pos:column="14">=<pos:position pos:line="145" pos:column="15"/></operator> <call><name pos:line="145" pos:column="16">get_token<pos:position pos:line="145" pos:column="25"/></name><argument_list pos:line="145" pos:column="25">(<argument><expr><name pos:line="145" pos:column="26">fp<pos:position pos:line="145" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="30">token<pos:position pos:line="145" pos:column="35"/></name></expr></argument>)<pos:position pos:line="145" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="37"/></expr_stmt>
        <if pos:line="146" pos:column="9">if <condition pos:line="146" pos:column="12">(<expr><name pos:line="146" pos:column="13">type<pos:position pos:line="146" pos:column="17"/></name> <operator pos:line="146" pos:column="18">!=<pos:position pos:line="146" pos:column="20"/></operator> <name pos:line="146" pos:column="21">QUOTE<pos:position pos:line="146" pos:column="26"/></name></expr>)<pos:position pos:line="146" pos:column="27"/></condition><then pos:line="146" pos:column="27"> <block pos:line="146" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="147" pos:column="13">print_error<pos:position pos:line="147" pos:column="24"/></name><argument_list pos:line="147" pos:column="24">(<argument><expr><literal type="string" pos:line="147" pos:column="25">"Should be Description open quote"<pos:position pos:line="147" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="147" pos:column="61">token<pos:position pos:line="147" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="68">nexttype<pos:position pos:line="147" pos:column="76"/></name></expr></argument>)<pos:position pos:line="147" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="78"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="148" pos:column="13">free_node<pos:position pos:line="148" pos:column="22"/></name><argument_list pos:line="148" pos:column="22">(<argument><expr><name pos:line="148" pos:column="23">np<pos:position pos:line="148" pos:column="25"/></name></expr></argument>)<pos:position pos:line="148" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="27"/></expr_stmt>
            <return pos:line="149" pos:column="13">return <expr><literal type="number" pos:line="149" pos:column="20">0<pos:position pos:line="149" pos:column="21"/></literal></expr>;<pos:position pos:line="149" pos:column="22"/></return>
        }<pos:position pos:line="150" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="151" pos:column="9">/* Fetch description string */</comment>
        <block pos:line="152" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">int<pos:position pos:line="153" pos:column="16"/></name></type> <name pos:line="153" pos:column="17">ReadChar<pos:position pos:line="153" pos:column="25"/></name></decl>;<pos:position pos:line="153" pos:column="26"/></decl_stmt>

            <expr_stmt><expr><name pos:line="155" pos:column="13">ReadChar<pos:position pos:line="155" pos:column="21"/></name> <operator pos:line="155" pos:column="22">=<pos:position pos:line="155" pos:column="23"/></operator> <name pos:line="155" pos:column="24">last<pos:position pos:line="155" pos:column="28"/></name></expr>;<pos:position pos:line="155" pos:column="29"/></expr_stmt>
            <comment type="block" pos:line="156" pos:column="13">/* skip everything until closing quote */</comment>
            <while pos:line="157" pos:column="13">while <condition pos:line="157" pos:column="19">(<expr><operator pos:line="157" pos:column="20">(<pos:position pos:line="157" pos:column="21"/></operator><name pos:line="157" pos:column="21">ReadChar<pos:position pos:line="157" pos:column="29"/></name> <operator pos:line="157" pos:column="30">!=<pos:position pos:line="157" pos:column="32"/></operator> <literal type="char" pos:line="157" pos:column="33">'"'<pos:position pos:line="157" pos:column="36"/></literal><operator pos:line="157" pos:column="36">)<pos:position pos:line="157" pos:column="37"/></operator> <operator pos:line="157" pos:column="38">&amp;&amp;<pos:position pos:line="157" pos:column="48"/></operator> <operator pos:line="157" pos:column="41">(<pos:position pos:line="157" pos:column="42"/></operator><name pos:line="157" pos:column="42">ReadChar<pos:position pos:line="157" pos:column="50"/></name> <operator pos:line="157" pos:column="51">!=<pos:position pos:line="157" pos:column="53"/></operator> <operator pos:line="157" pos:column="54">-<pos:position pos:line="157" pos:column="55"/></operator><literal type="number" pos:line="157" pos:column="55">1<pos:position pos:line="157" pos:column="56"/></literal><operator pos:line="157" pos:column="56">)<pos:position pos:line="157" pos:column="57"/></operator></expr>)<pos:position pos:line="157" pos:column="58"/></condition> <block pos:line="157" pos:column="59">{
                <expr_stmt><expr><name pos:line="158" pos:column="17">ReadChar<pos:position pos:line="158" pos:column="25"/></name> <operator pos:line="158" pos:column="26">=<pos:position pos:line="158" pos:column="27"/></operator> <call><name pos:line="158" pos:column="28">getc<pos:position pos:line="158" pos:column="32"/></name><argument_list pos:line="158" pos:column="32">(<argument><expr><name pos:line="158" pos:column="33">fp<pos:position pos:line="158" pos:column="35"/></name></expr></argument>)<pos:position pos:line="158" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="37"/></expr_stmt>
                <if pos:line="159" pos:column="17">if <condition pos:line="159" pos:column="20">(<expr><name pos:line="159" pos:column="21">ReadChar<pos:position pos:line="159" pos:column="29"/></name> <operator pos:line="159" pos:column="30">==<pos:position pos:line="159" pos:column="32"/></operator> <literal type="char" pos:line="159" pos:column="33">'\n'<pos:position pos:line="159" pos:column="37"/></literal></expr>)<pos:position pos:line="159" pos:column="38"/></condition><then pos:line="159" pos:column="38">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="160" pos:column="21">Line<pos:position pos:line="160" pos:column="25"/></name><operator pos:line="160" pos:column="25">++<pos:position pos:line="160" pos:column="27"/></operator></expr>;<pos:position pos:line="160" pos:column="28"/></expr_stmt></block></then></if>
            }<pos:position pos:line="161" pos:column="14"/></block></while>
            <expr_stmt><expr><name pos:line="162" pos:column="13">last<pos:position pos:line="162" pos:column="17"/></name> <operator pos:line="162" pos:column="18">=<pos:position pos:line="162" pos:column="19"/></operator> <literal type="char" pos:line="162" pos:column="20">' '<pos:position pos:line="162" pos:column="23"/></literal></expr>;<pos:position pos:line="162" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="163" pos:column="10"/></block>
        <comment type="block" pos:line="164" pos:column="9">/* ASSERT:  Done with description. */</comment>
        <expr_stmt><expr><name pos:line="165" pos:column="9">type<pos:position pos:line="165" pos:column="13"/></name> <operator pos:line="165" pos:column="14">=<pos:position pos:line="165" pos:column="15"/></operator> <call><name pos:line="165" pos:column="16">get_token<pos:position pos:line="165" pos:column="25"/></name><argument_list pos:line="165" pos:column="25">(<argument><expr><name pos:line="165" pos:column="26">fp<pos:position pos:line="165" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="30">token<pos:position pos:line="165" pos:column="35"/></name></expr></argument>)<pos:position pos:line="165" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="166" pos:column="6"/></block></then></if>
    <if pos:line="167" pos:column="5">if <condition pos:line="167" pos:column="8">(<expr><operator pos:line="167" pos:column="9">(<pos:position pos:line="167" pos:column="10"/></operator><name pos:line="167" pos:column="10">type<pos:position pos:line="167" pos:column="14"/></name> <operator pos:line="167" pos:column="15">!=<pos:position pos:line="167" pos:column="17"/></operator> <name pos:line="167" pos:column="18">INDEX<pos:position pos:line="167" pos:column="23"/></name><operator pos:line="167" pos:column="23">)<pos:position pos:line="167" pos:column="24"/></operator> <operator pos:line="167" pos:column="25">&amp;&amp;<pos:position pos:line="167" pos:column="35"/></operator> <operator pos:line="167" pos:column="28">(<pos:position pos:line="167" pos:column="29"/></operator><name pos:line="167" pos:column="29">type<pos:position pos:line="167" pos:column="33"/></name> <operator pos:line="167" pos:column="34">!=<pos:position pos:line="167" pos:column="36"/></operator> <name pos:line="167" pos:column="37">EQUALS<pos:position pos:line="167" pos:column="43"/></name><operator pos:line="167" pos:column="43">)<pos:position pos:line="167" pos:column="44"/></operator></expr>)<pos:position pos:line="167" pos:column="45"/></condition><then pos:line="167" pos:column="45"> <block pos:line="167" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="168" pos:column="9">print_error<pos:position pos:line="168" pos:column="20"/></name><argument_list pos:line="168" pos:column="20">(<argument><expr><literal type="string" pos:line="168" pos:column="21">"Should be INDEX, or EQUALS"<pos:position pos:line="168" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="168" pos:column="51">token<pos:position pos:line="168" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="58">nexttype<pos:position pos:line="168" pos:column="66"/></name></expr></argument>)<pos:position pos:line="168" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="169" pos:column="9">free_node<pos:position pos:line="169" pos:column="18"/></name><argument_list pos:line="169" pos:column="18">(<argument><expr><name pos:line="169" pos:column="19">np<pos:position pos:line="169" pos:column="21"/></name></expr></argument>)<pos:position pos:line="169" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="23"/></expr_stmt>
        <return pos:line="170" pos:column="9">return <expr><literal type="number" pos:line="170" pos:column="16">0<pos:position pos:line="170" pos:column="17"/></literal></expr>;<pos:position pos:line="170" pos:column="18"/></return>
    }<pos:position pos:line="171" pos:column="6"/></block></then></if>
    <if pos:line="172" pos:column="5">if <condition pos:line="172" pos:column="8">(<expr><name pos:line="172" pos:column="9">type<pos:position pos:line="172" pos:column="13"/></name> <operator pos:line="172" pos:column="14">==<pos:position pos:line="172" pos:column="16"/></operator> <name pos:line="172" pos:column="17">INDEX<pos:position pos:line="172" pos:column="22"/></name></expr>)<pos:position pos:line="172" pos:column="23"/></condition><then pos:line="172" pos:column="23"> <block pos:line="172" pos:column="24">{

        <comment type="block" pos:line="174" pos:column="9">/* Scarf INDEX */</comment>

        <expr_stmt><expr><name pos:line="176" pos:column="9">type<pos:position pos:line="176" pos:column="13"/></name> <operator pos:line="176" pos:column="14">=<pos:position pos:line="176" pos:column="15"/></operator> <call><name pos:line="176" pos:column="16">get_token<pos:position pos:line="176" pos:column="25"/></name><argument_list pos:line="176" pos:column="25">(<argument><expr><name pos:line="176" pos:column="26">fp<pos:position pos:line="176" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="30">token<pos:position pos:line="176" pos:column="35"/></name></expr></argument>)<pos:position pos:line="176" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="37"/></expr_stmt>
        <if pos:line="177" pos:column="9">if <condition pos:line="177" pos:column="12">(<expr><name pos:line="177" pos:column="13">type<pos:position pos:line="177" pos:column="17"/></name> <operator pos:line="177" pos:column="18">!=<pos:position pos:line="177" pos:column="20"/></operator> <name pos:line="177" pos:column="21">LEFTBRACKET<pos:position pos:line="177" pos:column="32"/></name></expr>)<pos:position pos:line="177" pos:column="33"/></condition><then pos:line="177" pos:column="33"> <block pos:line="177" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="178" pos:column="13">print_error<pos:position pos:line="178" pos:column="24"/></name><argument_list pos:line="178" pos:column="24">(<argument><expr><literal type="string" pos:line="178" pos:column="25">"Should be INDEX left brace"<pos:position pos:line="178" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="178" pos:column="55">token<pos:position pos:line="178" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="62">type<pos:position pos:line="178" pos:column="66"/></name></expr></argument>)<pos:position pos:line="178" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="68"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="179" pos:column="13">free_node<pos:position pos:line="179" pos:column="22"/></name><argument_list pos:line="179" pos:column="22">(<argument><expr><name pos:line="179" pos:column="23">np<pos:position pos:line="179" pos:column="25"/></name></expr></argument>)<pos:position pos:line="179" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="27"/></expr_stmt>
            <return pos:line="180" pos:column="13">return <expr><literal type="number" pos:line="180" pos:column="20">0<pos:position pos:line="180" pos:column="21"/></literal></expr>;<pos:position pos:line="180" pos:column="22"/></return>
        }<pos:position pos:line="181" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="182" pos:column="9">/* Fetch description string */</comment>
        <block pos:line="183" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="184" pos:column="13">int<pos:position pos:line="184" pos:column="16"/></name></type> <name pos:line="184" pos:column="17">ReadChar<pos:position pos:line="184" pos:column="25"/></name></decl>;<pos:position pos:line="184" pos:column="26"/></decl_stmt>

            <expr_stmt><expr><name pos:line="186" pos:column="13">ReadChar<pos:position pos:line="186" pos:column="21"/></name> <operator pos:line="186" pos:column="22">=<pos:position pos:line="186" pos:column="23"/></operator> <name pos:line="186" pos:column="24">last<pos:position pos:line="186" pos:column="28"/></name></expr>;<pos:position pos:line="186" pos:column="29"/></expr_stmt>
            <comment type="block" pos:line="187" pos:column="13">/* skip everything until closing quote */</comment>
            <while pos:line="188" pos:column="13">while <condition pos:line="188" pos:column="19">(<expr><operator pos:line="188" pos:column="20">(<pos:position pos:line="188" pos:column="21"/></operator><name pos:line="188" pos:column="21">ReadChar<pos:position pos:line="188" pos:column="29"/></name> <operator pos:line="188" pos:column="30">!=<pos:position pos:line="188" pos:column="32"/></operator> <literal type="char" pos:line="188" pos:column="33">'}'<pos:position pos:line="188" pos:column="36"/></literal><operator pos:line="188" pos:column="36">)<pos:position pos:line="188" pos:column="37"/></operator> <operator pos:line="188" pos:column="38">&amp;&amp;<pos:position pos:line="188" pos:column="48"/></operator> <operator pos:line="188" pos:column="41">(<pos:position pos:line="188" pos:column="42"/></operator><name pos:line="188" pos:column="42">ReadChar<pos:position pos:line="188" pos:column="50"/></name> <operator pos:line="188" pos:column="51">!=<pos:position pos:line="188" pos:column="53"/></operator> <operator pos:line="188" pos:column="54">-<pos:position pos:line="188" pos:column="55"/></operator><literal type="number" pos:line="188" pos:column="55">1<pos:position pos:line="188" pos:column="56"/></literal><operator pos:line="188" pos:column="56">)<pos:position pos:line="188" pos:column="57"/></operator></expr>)<pos:position pos:line="188" pos:column="58"/></condition> <block pos:line="188" pos:column="59">{
                <expr_stmt><expr><name pos:line="189" pos:column="17">ReadChar<pos:position pos:line="189" pos:column="25"/></name> <operator pos:line="189" pos:column="26">=<pos:position pos:line="189" pos:column="27"/></operator> <call><name pos:line="189" pos:column="28">getc<pos:position pos:line="189" pos:column="32"/></name><argument_list pos:line="189" pos:column="32">(<argument><expr><name pos:line="189" pos:column="33">fp<pos:position pos:line="189" pos:column="35"/></name></expr></argument>)<pos:position pos:line="189" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="37"/></expr_stmt>
                <if pos:line="190" pos:column="17">if <condition pos:line="190" pos:column="20">(<expr><name pos:line="190" pos:column="21">ReadChar<pos:position pos:line="190" pos:column="29"/></name> <operator pos:line="190" pos:column="30">==<pos:position pos:line="190" pos:column="32"/></operator> <literal type="char" pos:line="190" pos:column="33">'\n'<pos:position pos:line="190" pos:column="37"/></literal></expr>)<pos:position pos:line="190" pos:column="38"/></condition><then pos:line="190" pos:column="38">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="191" pos:column="21">Line<pos:position pos:line="191" pos:column="25"/></name><operator pos:line="191" pos:column="25">++<pos:position pos:line="191" pos:column="27"/></operator></expr>;<pos:position pos:line="191" pos:column="28"/></expr_stmt></block></then></if>
            }<pos:position pos:line="192" pos:column="14"/></block></while>
            <expr_stmt><expr><name pos:line="193" pos:column="13">last<pos:position pos:line="193" pos:column="17"/></name> <operator pos:line="193" pos:column="18">=<pos:position pos:line="193" pos:column="19"/></operator> <literal type="char" pos:line="193" pos:column="20">' '<pos:position pos:line="193" pos:column="23"/></literal></expr>;<pos:position pos:line="193" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="194" pos:column="10"/></block>
        <comment type="block" pos:line="195" pos:column="9">/* ASSERT:  Done with INDEX. */</comment>
        <expr_stmt><expr><name pos:line="196" pos:column="9">type<pos:position pos:line="196" pos:column="13"/></name> <operator pos:line="196" pos:column="14">=<pos:position pos:line="196" pos:column="15"/></operator> <call><name pos:line="196" pos:column="16">get_token<pos:position pos:line="196" pos:column="25"/></name><argument_list pos:line="196" pos:column="25">(<argument><expr><name pos:line="196" pos:column="26">fp<pos:position pos:line="196" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="196" pos:column="30">token<pos:position pos:line="196" pos:column="35"/></name></expr></argument>)<pos:position pos:line="196" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="197" pos:column="6"/></block></then></if>
    <if pos:line="198" pos:column="5">if <condition pos:line="198" pos:column="8">(<expr><name pos:line="198" pos:column="9">type<pos:position pos:line="198" pos:column="13"/></name> <operator pos:line="198" pos:column="14">!=<pos:position pos:line="198" pos:column="16"/></operator> <name pos:line="198" pos:column="17">EQUALS<pos:position pos:line="198" pos:column="23"/></name></expr>)<pos:position pos:line="198" pos:column="24"/></condition><then pos:line="198" pos:column="24"> <block pos:line="198" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="199" pos:column="9">print_error<pos:position pos:line="199" pos:column="20"/></name><argument_list pos:line="199" pos:column="20">(<argument><expr><literal type="string" pos:line="199" pos:column="21">"Bad format"<pos:position pos:line="199" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="199" pos:column="35">token<pos:position pos:line="199" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="199" pos:column="42">type<pos:position pos:line="199" pos:column="46"/></name></expr></argument>)<pos:position pos:line="199" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="200" pos:column="9">free_node<pos:position pos:line="200" pos:column="18"/></name><argument_list pos:line="200" pos:column="18">(<argument><expr><name pos:line="200" pos:column="19">np<pos:position pos:line="200" pos:column="21"/></name></expr></argument>)<pos:position pos:line="200" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="23"/></expr_stmt>
        <return pos:line="201" pos:column="9">return <expr><literal type="number" pos:line="201" pos:column="16">0<pos:position pos:line="201" pos:column="17"/></literal></expr>;<pos:position pos:line="201" pos:column="18"/></return>
    }<pos:position pos:line="202" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="203" pos:column="5">length<pos:position pos:line="203" pos:column="11"/></name> <operator pos:line="203" pos:column="12">=<pos:position pos:line="203" pos:column="13"/></operator> <call><name pos:line="203" pos:column="14">getoid<pos:position pos:line="203" pos:column="20"/></name><argument_list pos:line="203" pos:column="20">(<argument><expr><name pos:line="203" pos:column="21">fp<pos:position pos:line="203" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="203" pos:column="25">SubOid<pos:position pos:line="203" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="203" pos:column="33">32<pos:position pos:line="203" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="37"/></expr_stmt>
    <if pos:line="204" pos:column="5">if <condition pos:line="204" pos:column="8">(<expr><name pos:line="204" pos:column="9">length<pos:position pos:line="204" pos:column="15"/></name> <operator pos:line="204" pos:column="16">&gt;<pos:position pos:line="204" pos:column="20"/></operator> <literal type="number" pos:line="204" pos:column="18">1<pos:position pos:line="204" pos:column="19"/></literal> <operator pos:line="204" pos:column="20">&amp;&amp;<pos:position pos:line="204" pos:column="30"/></operator> <name pos:line="204" pos:column="23">length<pos:position pos:line="204" pos:column="29"/></name> <operator pos:line="204" pos:column="30">&lt;=<pos:position pos:line="204" pos:column="35"/></operator> <literal type="number" pos:line="204" pos:column="33">32<pos:position pos:line="204" pos:column="35"/></literal></expr>)<pos:position pos:line="204" pos:column="36"/></condition><then pos:line="204" pos:column="36"> <block pos:line="204" pos:column="37">{
        <comment type="block" pos:line="205" pos:column="9">/* just take the last pair in the oid list */</comment>
        <if pos:line="206" pos:column="9">if <condition pos:line="206" pos:column="12">(<expr><name><name pos:line="206" pos:column="13">SubOid<pos:position pos:line="206" pos:column="19"/></name><index pos:line="206" pos:column="19">[<expr><name pos:line="206" pos:column="20">length<pos:position pos:line="206" pos:column="26"/></name> <operator pos:line="206" pos:column="27">-<pos:position pos:line="206" pos:column="28"/></operator> <literal type="number" pos:line="206" pos:column="29">2<pos:position pos:line="206" pos:column="30"/></literal></expr>]<pos:position pos:line="206" pos:column="31"/></index></name><operator pos:line="206" pos:column="31">.<pos:position pos:line="206" pos:column="32"/></operator><name pos:line="206" pos:column="32">label<pos:position pos:line="206" pos:column="37"/></name></expr>)<pos:position pos:line="206" pos:column="38"/></condition><then pos:line="206" pos:column="38"> <block pos:line="206" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="207" pos:column="13">strncpy<pos:position pos:line="207" pos:column="20"/></name><argument_list pos:line="207" pos:column="20">(<argument><expr><name><name pos:line="207" pos:column="21">np<pos:position pos:line="207" pos:column="23"/></name><operator pos:line="207" pos:column="23">-&gt;<pos:position pos:line="207" pos:column="28"/></operator><name pos:line="207" pos:column="25">parent<pos:position pos:line="207" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="207" pos:column="33">SubOid<pos:position pos:line="207" pos:column="39"/></name><index pos:line="207" pos:column="39">[<expr><name pos:line="207" pos:column="40">length<pos:position pos:line="207" pos:column="46"/></name> <operator pos:line="207" pos:column="47">-<pos:position pos:line="207" pos:column="48"/></operator> <literal type="number" pos:line="207" pos:column="49">2<pos:position pos:line="207" pos:column="50"/></literal></expr>]<pos:position pos:line="207" pos:column="51"/></index></name><operator pos:line="207" pos:column="51">.<pos:position pos:line="207" pos:column="52"/></operator><name pos:line="207" pos:column="52">label<pos:position pos:line="207" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="207" pos:column="59">64<pos:position pos:line="207" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="207" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="63"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="208" pos:column="13">np<pos:position pos:line="208" pos:column="15"/></name><operator pos:line="208" pos:column="15">-&gt;<pos:position pos:line="208" pos:column="20"/></operator><name pos:line="208" pos:column="17">parent<pos:position pos:line="208" pos:column="23"/></name><index pos:line="208" pos:column="23">[<expr><literal type="number" pos:line="208" pos:column="24">63<pos:position pos:line="208" pos:column="26"/></literal></expr>]<pos:position pos:line="208" pos:column="27"/></index></name> <operator pos:line="208" pos:column="28">=<pos:position pos:line="208" pos:column="29"/></operator> <literal type="char" pos:line="208" pos:column="30">'\0'<pos:position pos:line="208" pos:column="34"/></literal></expr>;<pos:position pos:line="208" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="209" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="210" pos:column="9">strncpy<pos:position pos:line="210" pos:column="16"/></name><argument_list pos:line="210" pos:column="16">(<argument><expr><name><name pos:line="210" pos:column="17">np<pos:position pos:line="210" pos:column="19"/></name><operator pos:line="210" pos:column="19">-&gt;<pos:position pos:line="210" pos:column="24"/></operator><name pos:line="210" pos:column="21">label<pos:position pos:line="210" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="210" pos:column="28">name<pos:position pos:line="210" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="210" pos:column="34">sizeof<argument_list pos:line="210" pos:column="40">(<argument><expr><name><name pos:line="210" pos:column="41">np<pos:position pos:line="210" pos:column="43"/></name><operator pos:line="210" pos:column="43">-&gt;<pos:position pos:line="210" pos:column="48"/></operator><name pos:line="210" pos:column="45">label<pos:position pos:line="210" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="210" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="210" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="211" pos:column="9">np<pos:position pos:line="211" pos:column="11"/></name><operator pos:line="211" pos:column="11">-&gt;<pos:position pos:line="211" pos:column="16"/></operator><name pos:line="211" pos:column="13">label<pos:position pos:line="211" pos:column="18"/></name><index pos:line="211" pos:column="18">[<expr><sizeof pos:line="211" pos:column="19">sizeof<argument_list pos:line="211" pos:column="25">(<argument><expr><name><name pos:line="211" pos:column="26">np<pos:position pos:line="211" pos:column="28"/></name><operator pos:line="211" pos:column="28">-&gt;<pos:position pos:line="211" pos:column="33"/></operator><name pos:line="211" pos:column="30">label<pos:position pos:line="211" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="211" pos:column="36"/></argument_list></sizeof> <operator pos:line="211" pos:column="37">-<pos:position pos:line="211" pos:column="38"/></operator> <literal type="number" pos:line="211" pos:column="39">1<pos:position pos:line="211" pos:column="40"/></literal></expr>]<pos:position pos:line="211" pos:column="41"/></index></name> <operator pos:line="211" pos:column="42">=<pos:position pos:line="211" pos:column="43"/></operator> <literal type="char" pos:line="211" pos:column="44">'\0'<pos:position pos:line="211" pos:column="48"/></literal></expr>;<pos:position pos:line="211" pos:column="49"/></expr_stmt>
        <if pos:line="212" pos:column="9">if <condition pos:line="212" pos:column="12">(<expr><name><name pos:line="212" pos:column="13">SubOid<pos:position pos:line="212" pos:column="19"/></name><index pos:line="212" pos:column="19">[<expr><name pos:line="212" pos:column="20">length<pos:position pos:line="212" pos:column="26"/></name> <operator pos:line="212" pos:column="27">-<pos:position pos:line="212" pos:column="28"/></operator> <literal type="number" pos:line="212" pos:column="29">1<pos:position pos:line="212" pos:column="30"/></literal></expr>]<pos:position pos:line="212" pos:column="31"/></index></name><operator pos:line="212" pos:column="31">.<pos:position pos:line="212" pos:column="32"/></operator><name pos:line="212" pos:column="32">subid<pos:position pos:line="212" pos:column="37"/></name> <operator pos:line="212" pos:column="38">!=<pos:position pos:line="212" pos:column="40"/></operator> <operator pos:line="212" pos:column="41">-<pos:position pos:line="212" pos:column="42"/></operator><literal type="number" pos:line="212" pos:column="42">1<pos:position pos:line="212" pos:column="43"/></literal></expr>)<pos:position pos:line="212" pos:column="44"/></condition><then pos:line="212" pos:column="44">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="213" pos:column="13">np<pos:position pos:line="213" pos:column="15"/></name><operator pos:line="213" pos:column="15">-&gt;<pos:position pos:line="213" pos:column="20"/></operator><name pos:line="213" pos:column="17">subid<pos:position pos:line="213" pos:column="22"/></name></name> <operator pos:line="213" pos:column="23">=<pos:position pos:line="213" pos:column="24"/></operator> <name><name pos:line="213" pos:column="25">SubOid<pos:position pos:line="213" pos:column="31"/></name><index pos:line="213" pos:column="31">[<expr><name pos:line="213" pos:column="32">length<pos:position pos:line="213" pos:column="38"/></name> <operator pos:line="213" pos:column="39">-<pos:position pos:line="213" pos:column="40"/></operator> <literal type="number" pos:line="213" pos:column="41">1<pos:position pos:line="213" pos:column="42"/></literal></expr>]<pos:position pos:line="213" pos:column="43"/></index></name><operator pos:line="213" pos:column="43">.<pos:position pos:line="213" pos:column="44"/></operator><name pos:line="213" pos:column="44">subid<pos:position pos:line="213" pos:column="49"/></name></expr>;<pos:position pos:line="213" pos:column="50"/></expr_stmt></block></then>
        <else pos:line="214" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="215" pos:column="13">print_error<pos:position pos:line="215" pos:column="24"/></name><argument_list pos:line="215" pos:column="24">(<argument><expr><literal type="string" pos:line="215" pos:column="25">"Warning: This entry is pretty silly"<pos:position pos:line="215" pos:column="62"/></literal></expr></argument>, <argument><expr><name><name pos:line="215" pos:column="64">np<pos:position pos:line="215" pos:column="66"/></name><operator pos:line="215" pos:column="66">-&gt;<pos:position pos:line="215" pos:column="71"/></operator><name pos:line="215" pos:column="68">label<pos:position pos:line="215" pos:column="73"/></name></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="75">type<pos:position pos:line="215" pos:column="79"/></name></expr></argument>)<pos:position pos:line="215" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="81"/></expr_stmt></block></else></if>
    }<pos:position pos:line="216" pos:column="6"/></block></then> <else pos:line="216" pos:column="7">else <block pos:line="216" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="217" pos:column="9">print_error<pos:position pos:line="217" pos:column="20"/></name><argument_list pos:line="217" pos:column="20">(<argument><expr><literal type="string" pos:line="217" pos:column="21">"No end to oid"<pos:position pos:line="217" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="217" pos:column="38">(<pos:position pos:line="217" pos:column="39"/></operator><name pos:line="217" pos:column="39">char<pos:position pos:line="217" pos:column="43"/></name> <operator pos:line="217" pos:column="44">*<pos:position pos:line="217" pos:column="45"/></operator><operator pos:line="217" pos:column="45">)<pos:position pos:line="217" pos:column="46"/></operator> <name pos:line="217" pos:column="47">NULL<pos:position pos:line="217" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="217" pos:column="53">type<pos:position pos:line="217" pos:column="57"/></name></expr></argument>)<pos:position pos:line="217" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="218" pos:column="9">free_node<pos:position pos:line="218" pos:column="18"/></name><argument_list pos:line="218" pos:column="18">(<argument><expr><name pos:line="218" pos:column="19">np<pos:position pos:line="218" pos:column="21"/></name></expr></argument>)<pos:position pos:line="218" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="219" pos:column="9">np<pos:position pos:line="219" pos:column="11"/></name> <operator pos:line="219" pos:column="12">=<pos:position pos:line="219" pos:column="13"/></operator> <literal type="number" pos:line="219" pos:column="14">0<pos:position pos:line="219" pos:column="15"/></literal></expr>;<pos:position pos:line="219" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="220" pos:column="6"/></block></else></if>
    <comment type="block" pos:line="221" pos:column="5">/* free oid array */</comment>
    <for pos:line="222" pos:column="5">for <control pos:line="222" pos:column="9">(<init><expr><name pos:line="222" pos:column="10">count<pos:position pos:line="222" pos:column="15"/></name> <operator pos:line="222" pos:column="16">=<pos:position pos:line="222" pos:column="17"/></operator> <literal type="number" pos:line="222" pos:column="18">0<pos:position pos:line="222" pos:column="19"/></literal></expr>;<pos:position pos:line="222" pos:column="20"/></init> <condition><expr><name pos:line="222" pos:column="21">count<pos:position pos:line="222" pos:column="26"/></name> <operator pos:line="222" pos:column="27">&lt;<pos:position pos:line="222" pos:column="31"/></operator> <name pos:line="222" pos:column="29">length<pos:position pos:line="222" pos:column="35"/></name></expr>;<pos:position pos:line="222" pos:column="36"/></condition> <incr><expr><name pos:line="222" pos:column="37">count<pos:position pos:line="222" pos:column="42"/></name><operator pos:line="222" pos:column="42">++<pos:position pos:line="222" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="222" pos:column="45"/></control> <block pos:line="222" pos:column="46">{
        <if pos:line="223" pos:column="9">if <condition pos:line="223" pos:column="12">(<expr><name><name pos:line="223" pos:column="13">SubOid<pos:position pos:line="223" pos:column="19"/></name><index pos:line="223" pos:column="19">[<expr><name pos:line="223" pos:column="20">count<pos:position pos:line="223" pos:column="25"/></name></expr>]<pos:position pos:line="223" pos:column="26"/></index></name><operator pos:line="223" pos:column="26">.<pos:position pos:line="223" pos:column="27"/></operator><name pos:line="223" pos:column="27">label<pos:position pos:line="223" pos:column="32"/></name></expr>)<pos:position pos:line="223" pos:column="33"/></condition><then pos:line="223" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="224" pos:column="13">xfree<pos:position pos:line="224" pos:column="18"/></name><argument_list pos:line="224" pos:column="18">(<argument><expr><name><name pos:line="224" pos:column="19">SubOid<pos:position pos:line="224" pos:column="25"/></name><index pos:line="224" pos:column="25">[<expr><name pos:line="224" pos:column="26">count<pos:position pos:line="224" pos:column="31"/></name></expr>]<pos:position pos:line="224" pos:column="32"/></index></name><operator pos:line="224" pos:column="32">.<pos:position pos:line="224" pos:column="33"/></operator><name pos:line="224" pos:column="33">label<pos:position pos:line="224" pos:column="38"/></name></expr></argument>)<pos:position pos:line="224" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="40"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name><name pos:line="225" pos:column="9">SubOid<pos:position pos:line="225" pos:column="15"/></name><index pos:line="225" pos:column="15">[<expr><name pos:line="225" pos:column="16">count<pos:position pos:line="225" pos:column="21"/></name></expr>]<pos:position pos:line="225" pos:column="22"/></index></name><operator pos:line="225" pos:column="22">.<pos:position pos:line="225" pos:column="23"/></operator><name pos:line="225" pos:column="23">label<pos:position pos:line="225" pos:column="28"/></name> <operator pos:line="225" pos:column="29">=<pos:position pos:line="225" pos:column="30"/></operator> <literal type="number" pos:line="225" pos:column="31">0<pos:position pos:line="225" pos:column="32"/></literal></expr>;<pos:position pos:line="225" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="226" pos:column="6"/></block></for>
    <return pos:line="227" pos:column="5">return <expr><name pos:line="227" pos:column="12">np<pos:position pos:line="227" pos:column="14"/></name></expr>;<pos:position pos:line="227" pos:column="15"/></return>
}<pos:position pos:line="228" pos:column="2"/></block></function></unit>
