<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2495_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">append<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name> <specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">buf<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">int<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">len<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">mem_obj<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">!=<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">len<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">&gt;=<pos:position pos:line="5" pos:column="21"/></operator> <literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">store_status<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">==<pos:position pos:line="6" pos:column="27"/></operator> <name pos:line="6" pos:column="28">STORE_PENDING<pos:position pos:line="6" pos:column="41"/></name></expr></argument>)<pos:position pos:line="6" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="43"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">StoreIOBuffer<pos:position pos:line="8" pos:column="18"/></name></type> <name pos:line="8" pos:column="19">tempBuffer<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">tempBuffer<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">.<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">data<pos:position pos:line="9" pos:column="20"/></name></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <operator pos:line="9" pos:column="23">(<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="24">char<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></operator><operator pos:line="9" pos:column="30">)<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">buf<pos:position pos:line="9" pos:column="34"/></name></expr>;<pos:position pos:line="9" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">tempBuffer<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">length<pos:position pos:line="10" pos:column="22"/></name></name> <operator pos:line="10" pos:column="23">=<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">len<pos:position pos:line="10" pos:column="28"/></name></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
    <comment type="block" pos:line="11" pos:column="5">/*
     * XXX sigh, offset might be &lt; 0 here, but it gets "corrected"
     * later.  This offset crap is such a mess.
     */</comment>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">tempBuffer<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">.<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">offset<pos:position pos:line="15" pos:column="22"/></name></name> <operator pos:line="15" pos:column="23">=<pos:position pos:line="15" pos:column="24"/></operator> <call><name><name pos:line="15" pos:column="25">mem_obj<pos:position pos:line="15" pos:column="32"/></name><operator pos:line="15" pos:column="32">-&gt;<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="34">endOffset<pos:position pos:line="15" pos:column="43"/></name></name><argument_list pos:line="15" pos:column="43">()<pos:position pos:line="15" pos:column="45"/></argument_list></call> <operator pos:line="15" pos:column="46">-<pos:position pos:line="15" pos:column="47"/></operator> <operator pos:line="15" pos:column="48">(<pos:position pos:line="15" pos:column="49"/></operator><ternary><condition><expr><call><name pos:line="15" pos:column="49">getReply<pos:position pos:line="15" pos:column="57"/></name><argument_list pos:line="15" pos:column="57">()<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr> ?<pos:position pos:line="15" pos:column="61"/></condition><then pos:line="15" pos:column="61"> <expr><call><name pos:line="15" pos:column="62">getReply<pos:position pos:line="15" pos:column="70"/></name><argument_list pos:line="15" pos:column="70">()<pos:position pos:line="15" pos:column="72"/></argument_list></call><operator pos:line="15" pos:column="72">-&gt;<pos:position pos:line="15" pos:column="77"/></operator><name pos:line="15" pos:column="74">hdr_sz<pos:position pos:line="15" pos:column="80"/></name></expr> <pos:position pos:line="15" pos:column="81"/></then><else pos:line="15" pos:column="81">: <expr><literal type="number" pos:line="15" pos:column="83">0<pos:position pos:line="15" pos:column="84"/></literal></expr></else></ternary><operator pos:line="15" pos:column="84">)<pos:position pos:line="15" pos:column="85"/></operator></expr>;<pos:position pos:line="15" pos:column="86"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">write<pos:position pos:line="16" pos:column="10"/></name><argument_list pos:line="16" pos:column="10">(<argument><expr><name pos:line="16" pos:column="11">tempBuffer<pos:position pos:line="16" pos:column="21"/></name></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
