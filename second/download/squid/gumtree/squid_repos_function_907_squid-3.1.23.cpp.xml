<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_907_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_write<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">int<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">fd<pos:position pos:line="2" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">buf<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">int<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">size<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="47">AsyncCall<pos:position pos:line="2" pos:column="56"/></name><operator pos:line="2" pos:column="56">::<pos:position pos:line="2" pos:column="58"/></operator><name pos:line="2" pos:column="58">Pointer<pos:position pos:line="2" pos:column="65"/></name></name> <modifier pos:line="2" pos:column="66">&amp;<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="67">callback<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="77">FREE<pos:position pos:line="2" pos:column="81"/></name> <modifier pos:line="2" pos:column="82">*<pos:position pos:line="2" pos:column="83"/></modifier></type> <name pos:line="2" pos:column="84">free_func<pos:position pos:line="2" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="94"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">5<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="18">"comm_write: FD "<pos:position pos:line="4" pos:column="35"/></literal> <operator pos:line="4" pos:column="36">&lt;&lt;<pos:position pos:line="4" pos:column="44"/></operator> <name pos:line="4" pos:column="39">fd<pos:position pos:line="4" pos:column="41"/></name> <operator pos:line="4" pos:column="42">&lt;&lt;<pos:position pos:line="4" pos:column="50"/></operator> <literal type="string" pos:line="4" pos:column="45">": sz "<pos:position pos:line="4" pos:column="52"/></literal> <operator pos:line="4" pos:column="53">&lt;&lt;<pos:position pos:line="4" pos:column="61"/></operator> <name pos:line="4" pos:column="56">size<pos:position pos:line="4" pos:column="60"/></name> <operator pos:line="4" pos:column="61">&lt;&lt;<pos:position pos:line="4" pos:column="69"/></operator> <literal type="string" pos:line="4" pos:column="64">": asynCall "<pos:position pos:line="4" pos:column="77"/></literal> <operator pos:line="4" pos:column="78">&lt;&lt;<pos:position pos:line="4" pos:column="86"/></operator> <name pos:line="4" pos:column="81">callback<pos:position pos:line="4" pos:column="89"/></name></expr></argument>)<pos:position pos:line="4" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="91"/></expr_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* Make sure we are open, not closing, and not writing */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><call><name pos:line="7" pos:column="12">isOpen<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><name pos:line="7" pos:column="19">fd<pos:position pos:line="7" pos:column="21"/></name></expr></argument>)<pos:position pos:line="7" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><operator pos:line="8" pos:column="12">!<pos:position pos:line="8" pos:column="13"/></operator><name><name pos:line="8" pos:column="13">fd_table<pos:position pos:line="8" pos:column="21"/></name><index pos:line="8" pos:column="21">[<expr><name pos:line="8" pos:column="22">fd<pos:position pos:line="8" pos:column="24"/></name></expr>]<pos:position pos:line="8" pos:column="25"/></index></name><operator pos:line="8" pos:column="25">.<pos:position pos:line="8" pos:column="26"/></operator><call><name pos:line="8" pos:column="26">closing<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">()<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">comm_io_callback_t<pos:position pos:line="9" pos:column="23"/></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">ccb<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><call><name pos:line="9" pos:column="31">COMMIO_FD_WRITECB<pos:position pos:line="9" pos:column="48"/></name><argument_list pos:line="9" pos:column="48">(<argument><expr><name pos:line="9" pos:column="49">fd<pos:position pos:line="9" pos:column="51"/></name></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><operator pos:line="10" pos:column="12">!<pos:position pos:line="10" pos:column="13"/></operator><call><name><name pos:line="10" pos:column="13">ccb<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">active<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">()<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Queue the write */</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">commio_set_callback<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">fd<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="29">IOCB_WRITE<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">ccb<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="46">callback<pos:position pos:line="13" pos:column="54"/></name></expr></argument>,
                        <argument><expr><operator pos:line="14" pos:column="25">(<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">char<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">*<pos:position pos:line="14" pos:column="32"/></operator><operator pos:line="14" pos:column="32">)<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="33">buf<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">free_func<pos:position pos:line="14" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="49">size<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">commSetSelect<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">fd<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="23">COMM_SELECT_WRITE<pos:position pos:line="15" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="42">commHandleWrite<pos:position pos:line="15" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="59">ccb<pos:position pos:line="15" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="64">0<pos:position pos:line="15" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
