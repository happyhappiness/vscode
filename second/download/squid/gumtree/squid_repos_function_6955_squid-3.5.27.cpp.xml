<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6955_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">StoreMap<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">forgetWritingEntry<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><name pos:line="2" pos:column="35">sfileno<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">fileno<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">Anchor<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">&amp;<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="13">inode<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name pos:line="4" pos:column="21">anchorAt<pos:position pos:line="4" pos:column="29"/></name><argument_list pos:line="4" pos:column="29">(<argument><expr><name pos:line="4" pos:column="30">fileno<pos:position pos:line="4" pos:column="36"/></name></expr></argument>)<pos:position pos:line="4" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><call><name><name pos:line="6" pos:column="12">inode<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">.<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">writing<pos:position pos:line="6" pos:column="25"/></name></name><argument_list pos:line="6" pos:column="25">()<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>

    <comment type="line" pos:line="8" pos:column="5">// we do not iterate slices because we were told to forget about</comment>
    <comment type="line" pos:line="9" pos:column="5">// them; the caller is responsible for freeing them (most likely</comment>
    <comment type="line" pos:line="10" pos:column="5">// our slice list is incomplete or has holes)</comment>

    <expr_stmt><expr><name><name pos:line="12" pos:column="5">inode<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">.<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">waitingToBeFreed<pos:position pos:line="12" pos:column="27"/></name></name> <operator pos:line="12" pos:column="28">=<pos:position pos:line="12" pos:column="29"/></operator> <literal type="boolean" pos:line="12" pos:column="30">false<pos:position pos:line="12" pos:column="35"/></literal></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">inode<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">.<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">rewind<pos:position pos:line="13" pos:column="17"/></name></name><argument_list pos:line="13" pos:column="17">()<pos:position pos:line="13" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">inode<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">.<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">lock<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">.<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">unlockExclusive<pos:position pos:line="15" pos:column="31"/></name></name><argument_list pos:line="15" pos:column="31">()<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="16" pos:column="5">--<pos:position pos:line="16" pos:column="7"/></operator><name><name pos:line="16" pos:column="7">anchors<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">-&gt;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="16">count<pos:position pos:line="16" pos:column="21"/></name></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">debugs<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><literal type="number" pos:line="18" pos:column="12">54<pos:position pos:line="18" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="16">8<pos:position pos:line="18" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="19">"closed entry "<pos:position pos:line="18" pos:column="34"/></literal> <operator pos:line="18" pos:column="35">&lt;&lt;<pos:position pos:line="18" pos:column="43"/></operator> <name pos:line="18" pos:column="38">fileno<pos:position pos:line="18" pos:column="44"/></name> <operator pos:line="18" pos:column="45">&lt;&lt;<pos:position pos:line="18" pos:column="53"/></operator> <literal type="string" pos:line="18" pos:column="48">" for writing "<pos:position pos:line="18" pos:column="63"/></literal> <operator pos:line="18" pos:column="64">&lt;&lt;<pos:position pos:line="18" pos:column="72"/></operator> <name pos:line="18" pos:column="67">path<pos:position pos:line="18" pos:column="71"/></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="73"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
