<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3110_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">storeRebuildKeepEntry<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">StoreEntry<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">&amp;<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="41">tmpe<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier> <name pos:line="2" pos:column="53">cache_key<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">key<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="69">StoreRebuildData<pos:position pos:line="2" pos:column="85"/></name> <modifier pos:line="2" pos:column="86">&amp;<pos:position pos:line="2" pos:column="91"/></modifier></type><name pos:line="2" pos:column="87">stats<pos:position pos:line="2" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="93"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* this needs to become
     * 1) unpack url
     * 2) make synthetic request with headers ?? or otherwise search
     * for a matching object in the store
     * TODO FIXME change to new async api
     * TODO FIXME I think there is a race condition here with the
     * async api :
     * store A reads in object foo, searchs for it, and finds nothing.
     * store B reads in object foo, searchs for it, finds nothing.
     * store A gets called back with nothing, so registers the object
     * store B gets called back with nothing, so registers the object,
     * which will conflict when the in core index gets around to scanning
     * store B.
     *
     * this suggests that rather than searching for duplicates, the
     * index rebuild should just assume its the most recent accurate
     * store entry and whoever indexes the stores handles duplicates.
     */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<decl><type><name pos:line="22" pos:column="9">StoreEntry<pos:position pos:line="22" pos:column="19"/></name> <modifier pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></modifier></type><name pos:line="22" pos:column="21">e<pos:position pos:line="22" pos:column="22"/></name> <init pos:line="22" pos:column="23">= <expr><call><name><name pos:line="22" pos:column="25">Store<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">::<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="32">Root<pos:position pos:line="22" pos:column="36"/></name></name><argument_list pos:line="22" pos:column="36">()<pos:position pos:line="22" pos:column="38"/></argument_list></call><operator pos:line="22" pos:column="38">.<pos:position pos:line="22" pos:column="39"/></operator><call><name pos:line="22" pos:column="39">get<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">key<pos:position pos:line="22" pos:column="46"/></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr></init></decl>)<pos:position pos:line="22" pos:column="48"/></condition><then pos:line="22" pos:column="48"> <block pos:line="22" pos:column="49">{

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">e<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">-&gt;<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="16">lastref<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">&gt;=<pos:position pos:line="24" pos:column="29"/></operator> <name><name pos:line="24" pos:column="27">tmpe<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">.<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="32">lastref<pos:position pos:line="24" pos:column="39"/></name></name></expr>)<pos:position pos:line="24" pos:column="40"/></condition><then pos:line="24" pos:column="40"> <block pos:line="24" pos:column="41">{
            <comment type="block" pos:line="25" pos:column="13">/* key already exists, old entry is newer */</comment>
            <comment type="block" pos:line="26" pos:column="13">/* keep old, ignore new */</comment>
            <expr_stmt><expr><operator pos:line="27" pos:column="13">++<pos:position pos:line="27" pos:column="15"/></operator><name><name pos:line="27" pos:column="15">stats<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">.<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="21">dupcount<pos:position pos:line="27" pos:column="29"/></name></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>

            <comment type="line" pos:line="29" pos:column="13">// For some stores, get() creates/unpacks a store entry. Signal</comment>
            <comment type="line" pos:line="30" pos:column="13">// such stores that we will no longer use the get() result:</comment>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">e<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">-&gt;<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="16">lock<pos:position pos:line="31" pos:column="20"/></name></name><argument_list pos:line="31" pos:column="20">(<argument><expr><literal type="string" pos:line="31" pos:column="21">"storeRebuildKeepEntry"<pos:position pos:line="31" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="46"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">e<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">unlock<pos:position pos:line="32" pos:column="22"/></name></name><argument_list pos:line="32" pos:column="22">(<argument><expr><literal type="string" pos:line="32" pos:column="23">"storeRebuildKeepEntry"<pos:position pos:line="32" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>

            <return pos:line="34" pos:column="13">return <expr><literal type="boolean" pos:line="34" pos:column="20">false<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></return>
        }<pos:position pos:line="35" pos:column="10"/></block></then> <else pos:line="35" pos:column="11">else <block pos:line="35" pos:column="16">{
            <comment type="block" pos:line="36" pos:column="13">/* URL already exists, this swapfile not being used */</comment>
            <comment type="block" pos:line="37" pos:column="13">/* junk old, load new */</comment>
            <expr_stmt><expr><call><name><name pos:line="38" pos:column="13">e<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">-&gt;<pos:position pos:line="38" pos:column="19"/></operator><name pos:line="38" pos:column="16">release<pos:position pos:line="38" pos:column="23"/></name></name><argument_list pos:line="38" pos:column="23">()<pos:position pos:line="38" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="26"/></expr_stmt>   <comment type="block" pos:line="38" pos:column="29">/* release old entry */</comment>
            <expr_stmt><expr><operator pos:line="39" pos:column="13">++<pos:position pos:line="39" pos:column="15"/></operator><name><name pos:line="39" pos:column="15">stats<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">.<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="21">dupcount<pos:position pos:line="39" pos:column="29"/></name></name></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></else></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <return pos:line="43" pos:column="5">return <expr><literal type="boolean" pos:line="43" pos:column="12">true<pos:position pos:line="43" pos:column="16"/></literal></expr>;<pos:position pos:line="43" pos:column="17"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
