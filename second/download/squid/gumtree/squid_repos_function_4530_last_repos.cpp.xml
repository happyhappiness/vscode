<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4530_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int64_t<pos:position pos:line="1" pos:column="8"/></name></type>
<name><name pos:line="2" pos:column="1">Store<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">Disks<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">accumulateMore<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">StoreEntry<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">&amp;<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="48">entry<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list> <specifier pos:line="2" pos:column="55">const<pos:position pos:line="2" pos:column="60"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <specifier pos:line="4" pos:column="11">auto<pos:position pos:line="4" pos:column="15"/></specifier></type> <name pos:line="4" pos:column="16">accumulated<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><call><name><name pos:line="4" pos:column="30">entry<pos:position pos:line="4" pos:column="35"/></name><operator pos:line="4" pos:column="35">.<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">mem_obj<pos:position pos:line="4" pos:column="43"/></name><operator pos:line="4" pos:column="43">-&gt;<pos:position pos:line="4" pos:column="48"/></operator><name pos:line="4" pos:column="45">availableForSwapOut<pos:position pos:line="4" pos:column="64"/></name></name><argument_list pos:line="4" pos:column="64">()<pos:position pos:line="4" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="67"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/*
     * Keep accumulating more bytes until the set of disks eligible to accept
     * the entry becomes stable, and, hence, accumulating more is not going to
     * affect the cache_dir selection. A stable set is usually reached
     * immediately (or soon) because most configurations either do not use
     * cache_dirs with explicit min-size/max-size limits or use the same
     * max-size limit for all cache_dirs (and low min-size limits).
     */</comment>

    <comment type="line" pos:line="15" pos:column="5">// Can the set of min-size cache_dirs accepting this entry change?</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">accumulated<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">&lt;<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="23">largestMinimumObjectSize<pos:position pos:line="16" pos:column="47"/></name></expr>)<pos:position pos:line="16" pos:column="48"/></condition><then pos:line="16" pos:column="48">
        <block type="pseudo"><return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">largestMinimumObjectSize<pos:position pos:line="17" pos:column="40"/></name> <operator pos:line="17" pos:column="41">-<pos:position pos:line="17" pos:column="42"/></operator> <name pos:line="17" pos:column="43">accumulated<pos:position pos:line="17" pos:column="54"/></name></expr>;<pos:position pos:line="17" pos:column="55"/></return></block></then></if>

    <comment type="line" pos:line="19" pos:column="5">// Can the set of max-size cache_dirs accepting this entry change</comment>
    <comment type="line" pos:line="20" pos:column="5">// (other than when the entry exceeds the largest maximum; see below)?</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">accumulated<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">&lt;=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="24">secondLargestMaximumObjectSize<pos:position pos:line="21" pos:column="54"/></name></expr>)<pos:position pos:line="21" pos:column="55"/></condition><then pos:line="21" pos:column="55">
        <block type="pseudo"><return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">secondLargestMaximumObjectSize<pos:position pos:line="22" pos:column="46"/></name> <operator pos:line="22" pos:column="47">-<pos:position pos:line="22" pos:column="48"/></operator> <name pos:line="22" pos:column="49">accumulated<pos:position pos:line="22" pos:column="60"/></name> <operator pos:line="22" pos:column="61">+<pos:position pos:line="22" pos:column="62"/></operator> <literal type="number" pos:line="22" pos:column="63">1<pos:position pos:line="22" pos:column="64"/></literal></expr>;<pos:position pos:line="22" pos:column="65"/></return></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/*
     * Checking largestMaximumObjectSize instead eliminates the risk of starting
     * to swap out an entry that later grows too big, but also implies huge
     * accumulation in most environments. Accumulating huge entries not only
     * consumes lots of RAM but also creates a burst of doPages() write requests
     * that overwhelm the disk. To avoid these problems, we take the risk and
     * allow swap out now. The disk will quit swapping out if the entry
     * eventually grows too big for its selected cache_dir.
     */</comment>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">debugs<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="number" pos:line="33" pos:column="12">20<pos:position pos:line="33" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="16">3<pos:position pos:line="33" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="19">"no: "<pos:position pos:line="33" pos:column="25"/></literal> <operator pos:line="33" pos:column="26">&lt;&lt;<pos:position pos:line="33" pos:column="34"/></operator> <name pos:line="33" pos:column="29">accumulated<pos:position pos:line="33" pos:column="40"/></name> <operator pos:line="33" pos:column="41">&lt;&lt;<pos:position pos:line="33" pos:column="49"/></operator> <literal type="char" pos:line="33" pos:column="44">'&gt;'<pos:position pos:line="33" pos:column="50"/></literal> <operator pos:line="33" pos:column="48">&lt;&lt;<pos:position pos:line="33" pos:column="56"/></operator>
           <name pos:line="34" pos:column="12">secondLargestMaximumObjectSize<pos:position pos:line="34" pos:column="42"/></name> <operator pos:line="34" pos:column="43">&lt;&lt;<pos:position pos:line="34" pos:column="51"/></operator> <literal type="char" pos:line="34" pos:column="46">','<pos:position pos:line="34" pos:column="49"/></literal> <operator pos:line="34" pos:column="50">&lt;&lt;<pos:position pos:line="34" pos:column="58"/></operator> <name pos:line="34" pos:column="53">largestMinimumObjectSize<pos:position pos:line="34" pos:column="77"/></name></expr></argument>)<pos:position pos:line="34" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="79"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><literal type="number" pos:line="35" pos:column="12">0<pos:position pos:line="35" pos:column="13"/></literal></expr>;<pos:position pos:line="35" pos:column="14"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
