<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6587_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">xmalloc_find_leaks<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">void<pos:position pos:line="2" pos:column="24"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">B<pos:position pos:line="4" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="12">I<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">leak_sum<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>

    <decl_stmt><decl><specifier pos:line="7" pos:column="5">extern<pos:position pos:line="7" pos:column="11"/></specifier> <type><name pos:line="7" pos:column="12">void<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">_etext<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">fprintf<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">stderr<pos:position pos:line="8" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="21">"----- Memory map ----\n"<pos:position pos:line="8" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">xmalloc_scan_region<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><operator pos:line="9" pos:column="25">&amp;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="26">_etext<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="34">(<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="35">void<pos:position pos:line="9" pos:column="39"/></name> <operator pos:line="9" pos:column="40">*<pos:position pos:line="9" pos:column="41"/></operator><operator pos:line="9" pos:column="41">)<pos:position pos:line="9" pos:column="42"/></operator> <call><name pos:line="9" pos:column="43">sbrk<pos:position pos:line="9" pos:column="47"/></name><argument_list pos:line="9" pos:column="47">(<argument><expr><literal type="number" pos:line="9" pos:column="48">0<pos:position pos:line="9" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call> <operator pos:line="9" pos:column="51">-<pos:position pos:line="9" pos:column="52"/></operator> <operator pos:line="9" pos:column="53">(<pos:position pos:line="9" pos:column="54"/></operator><name pos:line="9" pos:column="54">void<pos:position pos:line="9" pos:column="58"/></name> <operator pos:line="9" pos:column="59">*<pos:position pos:line="9" pos:column="60"/></operator><operator pos:line="9" pos:column="60">)<pos:position pos:line="9" pos:column="61"/></operator> <operator pos:line="9" pos:column="62">&amp;<pos:position pos:line="9" pos:column="67"/></operator><name pos:line="9" pos:column="63">_etext<pos:position pos:line="9" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="71">0<pos:position pos:line="9" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="74"/></expr_stmt>

    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><expr><name pos:line="11" pos:column="10">B<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <literal type="number" pos:line="11" pos:column="14">0<pos:position pos:line="11" pos:column="15"/></literal></expr>;<pos:position pos:line="11" pos:column="16"/></init> <condition><expr><name pos:line="11" pos:column="17">B<pos:position pos:line="11" pos:column="18"/></name> <operator pos:line="11" pos:column="19">&lt;<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="21">DBG_ARRY_BKTS<pos:position pos:line="11" pos:column="34"/></name></expr>;<pos:position pos:line="11" pos:column="35"/></condition> <incr><expr><operator pos:line="11" pos:column="36">++<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">B<pos:position pos:line="11" pos:column="39"/></name></expr></incr>)<pos:position pos:line="11" pos:column="40"/></control> <block pos:line="11" pos:column="41">{
        <for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init><expr><name pos:line="12" pos:column="14">I<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>;<pos:position pos:line="12" pos:column="20"/></init> <condition><expr><name pos:line="12" pos:column="21">I<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;<pos:position pos:line="12" pos:column="27"/></operator> <name pos:line="12" pos:column="25">DBG_ARRY_SZ<pos:position pos:line="12" pos:column="36"/></name></expr>;<pos:position pos:line="12" pos:column="37"/></condition> <incr><expr><operator pos:line="12" pos:column="38">++<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="40">I<pos:position pos:line="12" pos:column="41"/></name></expr></incr>)<pos:position pos:line="12" pos:column="42"/></control> <block pos:line="12" pos:column="43">{
            <if pos:line="13" pos:column="13">if <condition pos:line="13" pos:column="16">(<expr><name><name pos:line="13" pos:column="17">malloc_ptrs<pos:position pos:line="13" pos:column="28"/></name><index pos:line="13" pos:column="28">[<expr><name pos:line="13" pos:column="29">B<pos:position pos:line="13" pos:column="30"/></name></expr>]<pos:position pos:line="13" pos:column="31"/></index><index pos:line="13" pos:column="31">[<expr><name pos:line="13" pos:column="32">I<pos:position pos:line="13" pos:column="33"/></name></expr>]<pos:position pos:line="13" pos:column="34"/></index></name> <operator pos:line="13" pos:column="35">&amp;&amp;<pos:position pos:line="13" pos:column="45"/></operator> <name><name pos:line="13" pos:column="38">malloc_refs<pos:position pos:line="13" pos:column="49"/></name><index pos:line="13" pos:column="49">[<expr><name pos:line="13" pos:column="50">B<pos:position pos:line="13" pos:column="51"/></name></expr>]<pos:position pos:line="13" pos:column="52"/></index><index pos:line="13" pos:column="52">[<expr><name pos:line="13" pos:column="53">I<pos:position pos:line="13" pos:column="54"/></name></expr>]<pos:position pos:line="13" pos:column="55"/></index></name> <operator pos:line="13" pos:column="56">==<pos:position pos:line="13" pos:column="58"/></operator> <literal type="number" pos:line="13" pos:column="59">0<pos:position pos:line="13" pos:column="60"/></literal></expr>)<pos:position pos:line="13" pos:column="61"/></condition><then pos:line="13" pos:column="61"> <block pos:line="13" pos:column="62">{
                <comment type="block" pos:line="14" pos:column="17">/* Found a leak... */</comment>
                <expr_stmt><expr><call><name pos:line="15" pos:column="17">fprintf<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">stderr<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="33">"Leak found: %p"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="51">malloc_ptrs<pos:position pos:line="15" pos:column="62"/></name><index pos:line="15" pos:column="62">[<expr><name pos:line="15" pos:column="63">B<pos:position pos:line="15" pos:column="64"/></name></expr>]<pos:position pos:line="15" pos:column="65"/></index><index pos:line="15" pos:column="65">[<expr><name pos:line="15" pos:column="66">I<pos:position pos:line="15" pos:column="67"/></name></expr>]<pos:position pos:line="15" pos:column="68"/></index></name></expr></argument>)<pos:position pos:line="15" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="70"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="16" pos:column="17">fprintf<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">stderr<pos:position pos:line="16" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="33">" %s"<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="40">malloc_file<pos:position pos:line="16" pos:column="51"/></name><index pos:line="16" pos:column="51">[<expr><name pos:line="16" pos:column="52">B<pos:position pos:line="16" pos:column="53"/></name></expr>]<pos:position pos:line="16" pos:column="54"/></index><index pos:line="16" pos:column="54">[<expr><name pos:line="16" pos:column="55">I<pos:position pos:line="16" pos:column="56"/></name></expr>]<pos:position pos:line="16" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="59"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="17" pos:column="17">fprintf<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">stderr<pos:position pos:line="17" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="33">":%d"<pos:position pos:line="17" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="40">malloc_line<pos:position pos:line="17" pos:column="51"/></name><index pos:line="17" pos:column="51">[<expr><name pos:line="17" pos:column="52">B<pos:position pos:line="17" pos:column="53"/></name></expr>]<pos:position pos:line="17" pos:column="54"/></index><index pos:line="17" pos:column="54">[<expr><name pos:line="17" pos:column="55">I<pos:position pos:line="17" pos:column="56"/></name></expr>]<pos:position pos:line="17" pos:column="57"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="18" pos:column="17">fprintf<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">stderr<pos:position pos:line="18" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="33">" size %d"<pos:position pos:line="18" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="45">malloc_size<pos:position pos:line="18" pos:column="56"/></name><index pos:line="18" pos:column="56">[<expr><name pos:line="18" pos:column="57">B<pos:position pos:line="18" pos:column="58"/></name></expr>]<pos:position pos:line="18" pos:column="59"/></index><index pos:line="18" pos:column="59">[<expr><name pos:line="18" pos:column="60">I<pos:position pos:line="18" pos:column="61"/></name></expr>]<pos:position pos:line="18" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="64"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="19" pos:column="17">fprintf<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">stderr<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="33">" allocation %d\n"<pos:position pos:line="19" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="53">malloc_count<pos:position pos:line="19" pos:column="65"/></name><index pos:line="19" pos:column="65">[<expr><name pos:line="19" pos:column="66">B<pos:position pos:line="19" pos:column="67"/></name></expr>]<pos:position pos:line="19" pos:column="68"/></index><index pos:line="19" pos:column="68">[<expr><name pos:line="19" pos:column="69">I<pos:position pos:line="19" pos:column="70"/></name></expr>]<pos:position pos:line="19" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="73"/></expr_stmt>
                <expr_stmt><expr><name pos:line="20" pos:column="17">leak_sum<pos:position pos:line="20" pos:column="25"/></name> <operator pos:line="20" pos:column="26">+=<pos:position pos:line="20" pos:column="28"/></operator> <name><name pos:line="20" pos:column="29">malloc_size<pos:position pos:line="20" pos:column="40"/></name><index pos:line="20" pos:column="40">[<expr><name pos:line="20" pos:column="41">B<pos:position pos:line="20" pos:column="42"/></name></expr>]<pos:position pos:line="20" pos:column="43"/></index><index pos:line="20" pos:column="43">[<expr><name pos:line="20" pos:column="44">I<pos:position pos:line="20" pos:column="45"/></name></expr>]<pos:position pos:line="20" pos:column="46"/></index></name></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="21" pos:column="14"/></block></then></if>
        }<pos:position pos:line="22" pos:column="10"/></block></for>
    }<pos:position pos:line="23" pos:column="6"/></block></for>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">leak_sum<pos:position pos:line="25" pos:column="17"/></name></expr>)<pos:position pos:line="25" pos:column="18"/></condition><then pos:line="25" pos:column="18"> <block pos:line="25" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">fprintf<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">stderr<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="25">"Total leaked memory: %d\n"<pos:position pos:line="26" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="54">leak_sum<pos:position pos:line="26" pos:column="62"/></name></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then> <else pos:line="27" pos:column="7">else <block pos:line="27" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">fprintf<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">stderr<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="25">"No memory leaks detected\n"<pos:position pos:line="28" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">fprintf<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name pos:line="31" pos:column="13">stderr<pos:position pos:line="31" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="21">"----------------------\n"<pos:position pos:line="31" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="49"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
