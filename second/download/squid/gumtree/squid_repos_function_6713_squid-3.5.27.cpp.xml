<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6713_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">esiSequence<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">provideData<pos:position pos:line="2" pos:column="25"/></name></name> <parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name><name pos:line="2" pos:column="27">ESISegment<pos:position pos:line="2" pos:column="37"/></name><operator pos:line="2" pos:column="37">::<pos:position pos:line="2" pos:column="39"/></operator><name pos:line="2" pos:column="39">Pointer<pos:position pos:line="2" pos:column="46"/></name></name></type> <name pos:line="2" pos:column="47">data<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">ESIElement<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">source<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">ESIElement<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">::<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">Pointer<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">lockthis<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><name pos:line="4" pos:column="36">this<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">processing<pos:position pos:line="6" pos:column="19"/></name></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">86<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">5<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="23">"esiSequence::provideData: "<pos:position pos:line="7" pos:column="51"/></literal> <operator pos:line="7" pos:column="52">&lt;&lt;<pos:position pos:line="7" pos:column="60"/></operator> <name pos:line="7" pos:column="55">this<pos:position pos:line="7" pos:column="59"/></name> <operator pos:line="7" pos:column="60">&lt;&lt;<pos:position pos:line="7" pos:column="68"/></operator> <literal type="string" pos:line="7" pos:column="63">" data provided during processing"<pos:position pos:line="7" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="99"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">86<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">5<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="19">"esiSequence::provideData "<pos:position pos:line="8" pos:column="46"/></literal> <operator pos:line="8" pos:column="47">&lt;&lt;<pos:position pos:line="8" pos:column="55"/></operator> <name pos:line="8" pos:column="50">this<pos:position pos:line="8" pos:column="54"/></name> <operator pos:line="8" pos:column="55">&lt;&lt;<pos:position pos:line="8" pos:column="63"/></operator> <literal type="string" pos:line="8" pos:column="58">" "<pos:position pos:line="8" pos:column="61"/></literal> <operator pos:line="8" pos:column="62">&lt;&lt;<pos:position pos:line="8" pos:column="70"/></operator> <call><name><name pos:line="8" pos:column="65">data<pos:position pos:line="8" pos:column="69"/></name><operator pos:line="8" pos:column="69">.<pos:position pos:line="8" pos:column="70"/></operator><name pos:line="8" pos:column="70">getRaw<pos:position pos:line="8" pos:column="76"/></name></name><argument_list pos:line="8" pos:column="76">()<pos:position pos:line="8" pos:column="78"/></argument_list></call> <operator pos:line="8" pos:column="79">&lt;&lt;<pos:position pos:line="8" pos:column="87"/></operator> <literal type="string" pos:line="8" pos:column="82">" "<pos:position pos:line="8" pos:column="85"/></literal> <operator pos:line="8" pos:column="86">&lt;&lt;<pos:position pos:line="8" pos:column="94"/></operator> <name pos:line="8" pos:column="89">source<pos:position pos:line="8" pos:column="95"/></name></expr></argument>)<pos:position pos:line="8" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="97"/></expr_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* when data is provided, the element *must* be completed */</comment>
    <comment type="block" pos:line="11" pos:column="5">/* XXX: when the callback model is complete,
     * we can introduce 'finished'. And then this rule can be
     * relaxed
     */</comment>
    <comment type="block" pos:line="15" pos:column="5">/* find the index */</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">index<pos:position pos:line="16" pos:column="14"/></name> <init pos:line="16" pos:column="15">= <expr><call><name pos:line="16" pos:column="17">elementIndex<pos:position pos:line="16" pos:column="29"/></name> <argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">source<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="39"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name> <argument_list pos:line="18" pos:column="12">(<argument><expr><name pos:line="18" pos:column="13">index<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&gt;=<pos:position pos:line="18" pos:column="24"/></operator> <literal type="number" pos:line="18" pos:column="22">0<pos:position pos:line="18" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* remove the current node */</comment>
    <expr_stmt><expr><call><name><name pos:line="21" pos:column="5">elements<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">.<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">setNULL<pos:position pos:line="21" pos:column="21"/></name></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">index<pos:position pos:line="21" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="29">index<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">+<pos:position pos:line="21" pos:column="35"/></operator><literal type="number" pos:line="21" pos:column="35">1<pos:position pos:line="21" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* create a literal */</comment>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">esiLiteral<pos:position pos:line="24" pos:column="15"/></name> <modifier pos:line="24" pos:column="16">*<pos:position pos:line="24" pos:column="17"/></modifier></type><name pos:line="24" pos:column="17">temp<pos:position pos:line="24" pos:column="21"/></name> <init pos:line="24" pos:column="22">= <expr><operator pos:line="24" pos:column="24">new<pos:position pos:line="24" pos:column="27"/></operator> <call><name pos:line="24" pos:column="28">esiLiteral<pos:position pos:line="24" pos:column="38"/></name> <argument_list pos:line="24" pos:column="39">(<argument><expr><name pos:line="24" pos:column="40">data<pos:position pos:line="24" pos:column="44"/></name></expr></argument>)<pos:position pos:line="24" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="46"/></decl_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* insert the literal */</comment>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">elements<pos:position pos:line="27" pos:column="13"/></name><index pos:line="27" pos:column="13">[<expr><name pos:line="27" pos:column="14">index<pos:position pos:line="27" pos:column="19"/></name></expr>]<pos:position pos:line="27" pos:column="20"/></index></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">temp<pos:position pos:line="27" pos:column="27"/></name></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* XXX: TODO push any pushable data upwards */</comment>
    <comment type="block" pos:line="30" pos:column="5">/* fail() not done */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">processing<pos:position pos:line="31" pos:column="19"/></name></expr>)<pos:position pos:line="31" pos:column="20"/></condition><then pos:line="31" pos:column="20">
        <block type="pseudo"><return pos:line="32" pos:column="9">return;<pos:position pos:line="32" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">assert<pos:position pos:line="34" pos:column="11"/></name> <argument_list pos:line="34" pos:column="12">(<argument><expr><call><name pos:line="34" pos:column="13">process<pos:position pos:line="34" pos:column="20"/></name> <argument_list pos:line="34" pos:column="21">(<argument><expr><name><name pos:line="34" pos:column="22">flags<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">.<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="28">dovars<pos:position pos:line="34" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="35"/></argument_list></call> <operator pos:line="34" pos:column="36">!=<pos:position pos:line="34" pos:column="38"/></operator> <name pos:line="34" pos:column="39">ESI_PROCESS_FAILED<pos:position pos:line="34" pos:column="57"/></name></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="59"/></expr_stmt>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
