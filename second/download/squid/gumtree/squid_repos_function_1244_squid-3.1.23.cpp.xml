<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1244_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">EventScheduler<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">cancel<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">EVH<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type> <name pos:line="2" pos:column="30">func<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">void<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">arg<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ev_entry<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier><modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">E<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ev_entry<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">event<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><expr><name pos:line="7" pos:column="10">E<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <operator pos:line="7" pos:column="14">&amp;<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="15">tasks<pos:position pos:line="7" pos:column="20"/></name></expr>;<pos:position pos:line="7" pos:column="21"/></init> <condition><expr><operator pos:line="7" pos:column="22">(<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">event<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">=<pos:position pos:line="7" pos:column="30"/></operator> <operator pos:line="7" pos:column="31">*<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">E<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">)<pos:position pos:line="7" pos:column="34"/></operator> <operator pos:line="7" pos:column="35">!=<pos:position pos:line="7" pos:column="37"/></operator> <name pos:line="7" pos:column="38">NULL<pos:position pos:line="7" pos:column="42"/></name></expr>;<pos:position pos:line="7" pos:column="43"/></condition> <incr><expr><name pos:line="7" pos:column="44">E<pos:position pos:line="7" pos:column="45"/></name> <operator pos:line="7" pos:column="46">=<pos:position pos:line="7" pos:column="47"/></operator> <operator pos:line="7" pos:column="48">&amp;<pos:position pos:line="7" pos:column="53"/></operator><name><operator pos:line="7" pos:column="49">(<pos:position pos:line="7" pos:column="50"/></operator><operator pos:line="7" pos:column="50">*<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="51">E<pos:position pos:line="7" pos:column="52"/></name><operator pos:line="7" pos:column="52">)<pos:position pos:line="7" pos:column="53"/></operator><operator pos:line="7" pos:column="53">-&gt;<pos:position pos:line="7" pos:column="58"/></operator><name pos:line="7" pos:column="55">next<pos:position pos:line="7" pos:column="59"/></name></name></expr></incr>)<pos:position pos:line="7" pos:column="60"/></control> <block pos:line="7" pos:column="61">{
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">event<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">func<pos:position pos:line="8" pos:column="24"/></name></name> <operator pos:line="8" pos:column="25">!=<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="28">func<pos:position pos:line="8" pos:column="32"/></name></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33">
            <block type="pseudo"><continue pos:line="9" pos:column="13">continue;<pos:position pos:line="9" pos:column="22"/></continue></block></then></if>

        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">arg<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&amp;&amp;<pos:position pos:line="11" pos:column="27"/></operator> <name><name pos:line="11" pos:column="20">event<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">-&gt;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="27">arg<pos:position pos:line="11" pos:column="30"/></name></name> <operator pos:line="11" pos:column="31">!=<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="34">arg<pos:position pos:line="11" pos:column="37"/></name></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38">
            <block type="pseudo"><continue pos:line="12" pos:column="13">continue;<pos:position pos:line="12" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><operator pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">E<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <name><name pos:line="14" pos:column="14">event<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">next<pos:position pos:line="14" pos:column="25"/></name></name></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="16" pos:column="9">delete<pos:position pos:line="16" pos:column="15"/></operator> <name pos:line="16" pos:column="16">event<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">arg<pos:position pos:line="18" pos:column="16"/></name></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17">
            <block type="pseudo"><return pos:line="19" pos:column="13">return;<pos:position pos:line="19" pos:column="20"/></return></block></then></if>
        <comment type="block" pos:line="20" pos:column="9">/*
         * DPW 2007-04-12
         * Since this method may now delete multiple events (when
         * arg is NULL) it no longer returns after a deletion and
         * we have a potential NULL pointer problem.  If we just
         * deleted the last event in the list then *E is now equal
         * to NULL.  We need to break here or else we'll get a NULL
         * pointer dereference in the last clause of the for loop.
         */</comment>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">NULL<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">==<pos:position pos:line="29" pos:column="20"/></operator> <operator pos:line="29" pos:column="21">*<pos:position pos:line="29" pos:column="22"/></operator><name pos:line="29" pos:column="22">E<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24">
            <block type="pseudo"><break pos:line="30" pos:column="13">break;<pos:position pos:line="30" pos:column="19"/></break></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></for>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">arg<pos:position pos:line="33" pos:column="12"/></name></expr>)<pos:position pos:line="33" pos:column="13"/></condition><then pos:line="33" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">debug_trap<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="string" pos:line="34" pos:column="20">"eventDelete: event not found"<pos:position pos:line="34" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="52"/></expr_stmt></block></then></if>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
