<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3029_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">store_client_t<pos:position pos:line="1" pos:column="15"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">storeClientType<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">()<pos:position pos:line="2" pos:column="30"/></parameter_list> <specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* The needed offset isn't in memory
     * XXX TODO: this is wrong for range requests
     * as the needed offset may *not* be 0, AND
     * offset 0 in the memory object is the HTTP headers.
     */</comment>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">mem_obj<pos:position pos:line="10" pos:column="19"/></name></expr></argument>)<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">mem_obj<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">inmem_lo<pos:position pos:line="12" pos:column="26"/></name></name></expr>)<pos:position pos:line="12" pos:column="27"/></condition><then pos:line="12" pos:column="27">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">STORE_DISK_CLIENT<pos:position pos:line="13" pos:column="33"/></name></expr>;<pos:position pos:line="13" pos:column="34"/></return></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">EBIT_TEST<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">flags<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="26">ENTRY_ABORTED<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="41"/></condition><then pos:line="15" pos:column="41"> <block pos:line="15" pos:column="42">{
        <comment type="block" pos:line="16" pos:column="9">/* I don't think we should be adding clients to aborted entries */</comment>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">20<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="20">DBG_IMPORTANT<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="35">"storeClientType: adding to ENTRY_ABORTED entry"<pos:position pos:line="17" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="85"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">STORE_MEM_CLIENT<pos:position pos:line="18" pos:column="32"/></name></expr>;<pos:position pos:line="18" pos:column="33"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">store_status<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">==<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">STORE_OK<pos:position pos:line="21" pos:column="33"/></name></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
        <comment type="block" pos:line="22" pos:column="9">/* the object has completed. */</comment>

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">mem_obj<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">-&gt;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="22">inmem_lo<pos:position pos:line="24" pos:column="30"/></name></name> <operator pos:line="24" pos:column="31">==<pos:position pos:line="24" pos:column="33"/></operator> <literal type="number" pos:line="24" pos:column="34">0<pos:position pos:line="24" pos:column="35"/></literal> <operator pos:line="24" pos:column="36">&amp;&amp;<pos:position pos:line="24" pos:column="46"/></operator> <operator pos:line="24" pos:column="39">!<pos:position pos:line="24" pos:column="40"/></operator><call><name pos:line="24" pos:column="40">isEmpty<pos:position pos:line="24" pos:column="47"/></name><argument_list pos:line="24" pos:column="47">()<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="50"/></condition><then pos:line="24" pos:column="50"> <block pos:line="24" pos:column="51">{
            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name pos:line="25" pos:column="17">swap_status<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">==<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="32">SWAPOUT_DONE<pos:position pos:line="25" pos:column="44"/></name></expr>)<pos:position pos:line="25" pos:column="45"/></condition><then pos:line="25" pos:column="45"> <block pos:line="25" pos:column="46">{
                <expr_stmt><expr><call><name pos:line="26" pos:column="17">debugs<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><literal type="number" pos:line="26" pos:column="24">20<pos:position pos:line="26" pos:column="26"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="26" pos:column="27">7<pos:position pos:line="26" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="30">HERE<pos:position pos:line="26" pos:column="34"/></name> <operator pos:line="26" pos:column="35">&lt;&lt;<pos:position pos:line="26" pos:column="43"/></operator> <name pos:line="26" pos:column="38">mem_obj<pos:position pos:line="26" pos:column="45"/></name> <operator pos:line="26" pos:column="46">&lt;&lt;<pos:position pos:line="26" pos:column="54"/></operator> <literal type="string" pos:line="26" pos:column="49">" lo: "<pos:position pos:line="26" pos:column="56"/></literal> <operator pos:line="26" pos:column="57">&lt;&lt;<pos:position pos:line="26" pos:column="65"/></operator> <name><name pos:line="26" pos:column="60">mem_obj<pos:position pos:line="26" pos:column="67"/></name><operator pos:line="26" pos:column="67">-&gt;<pos:position pos:line="26" pos:column="72"/></operator><name pos:line="26" pos:column="69">inmem_lo<pos:position pos:line="26" pos:column="77"/></name></name> <operator pos:line="26" pos:column="78">&lt;&lt;<pos:position pos:line="26" pos:column="86"/></operator> <literal type="string" pos:line="26" pos:column="81">" hi: "<pos:position pos:line="26" pos:column="88"/></literal> <operator pos:line="26" pos:column="89">&lt;&lt;<pos:position pos:line="26" pos:column="97"/></operator> <call><name><name pos:line="26" pos:column="92">mem_obj<pos:position pos:line="26" pos:column="99"/></name><operator pos:line="26" pos:column="99">-&gt;<pos:position pos:line="26" pos:column="104"/></operator><name pos:line="26" pos:column="101">endOffset<pos:position pos:line="26" pos:column="110"/></name></name><argument_list pos:line="26" pos:column="110">()<pos:position pos:line="26" pos:column="112"/></argument_list></call> <operator pos:line="26" pos:column="113">&lt;&lt;<pos:position pos:line="26" pos:column="121"/></operator> <literal type="string" pos:line="26" pos:column="116">" size: "<pos:position pos:line="26" pos:column="125"/></literal> <operator pos:line="26" pos:column="126">&lt;&lt;<pos:position pos:line="26" pos:column="134"/></operator> <name><name pos:line="26" pos:column="129">mem_obj<pos:position pos:line="26" pos:column="136"/></name><operator pos:line="26" pos:column="136">-&gt;<pos:position pos:line="26" pos:column="141"/></operator><name pos:line="26" pos:column="138">object_sz<pos:position pos:line="26" pos:column="147"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="148"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="149"/></expr_stmt>
                <if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><call><name><name pos:line="27" pos:column="21">mem_obj<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">endOffset<pos:position pos:line="27" pos:column="39"/></name></name><argument_list pos:line="27" pos:column="39">()<pos:position pos:line="27" pos:column="41"/></argument_list></call> <operator pos:line="27" pos:column="42">==<pos:position pos:line="27" pos:column="44"/></operator> <name><name pos:line="27" pos:column="45">mem_obj<pos:position pos:line="27" pos:column="52"/></name><operator pos:line="27" pos:column="52">-&gt;<pos:position pos:line="27" pos:column="57"/></operator><name pos:line="27" pos:column="54">object_sz<pos:position pos:line="27" pos:column="63"/></name></name></expr>)<pos:position pos:line="27" pos:column="64"/></condition><then pos:line="27" pos:column="64"> <block pos:line="27" pos:column="65">{
                    <comment type="block" pos:line="28" pos:column="21">/* hot object fully swapped in (XXX: or swapped out?) */</comment>
                    <return pos:line="29" pos:column="21">return <expr><name pos:line="29" pos:column="28">STORE_MEM_CLIENT<pos:position pos:line="29" pos:column="44"/></name></expr>;<pos:position pos:line="29" pos:column="45"/></return>
                }<pos:position pos:line="30" pos:column="18"/></block></then></if>
            }<pos:position pos:line="31" pos:column="14"/></block></then> <else pos:line="31" pos:column="15">else <block pos:line="31" pos:column="20">{
                <comment type="block" pos:line="32" pos:column="17">/* Memory-only, or currently being swapped out */</comment>
                <return pos:line="33" pos:column="17">return <expr><name pos:line="33" pos:column="24">STORE_MEM_CLIENT<pos:position pos:line="33" pos:column="40"/></name></expr>;<pos:position pos:line="33" pos:column="41"/></return>
            }<pos:position pos:line="34" pos:column="14"/></block></else></if>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>
        <return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">STORE_DISK_CLIENT<pos:position pos:line="36" pos:column="33"/></name></expr>;<pos:position pos:line="36" pos:column="34"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="39" pos:column="5">/* here and past, entry is STORE_PENDING */</comment>
    <comment type="block" pos:line="40" pos:column="5">/*
     * If this is the first client, let it be the mem client
     */</comment>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name><name pos:line="43" pos:column="9">mem_obj<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">-&gt;<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="18">nclients<pos:position pos:line="43" pos:column="26"/></name></name> <operator pos:line="43" pos:column="27">==<pos:position pos:line="43" pos:column="29"/></operator> <literal type="number" pos:line="43" pos:column="30">1<pos:position pos:line="43" pos:column="31"/></literal></expr>)<pos:position pos:line="43" pos:column="32"/></condition><then pos:line="43" pos:column="32">
        <block type="pseudo"><return pos:line="44" pos:column="9">return <expr><name pos:line="44" pos:column="16">STORE_MEM_CLIENT<pos:position pos:line="44" pos:column="32"/></name></expr>;<pos:position pos:line="44" pos:column="33"/></return></block></then></if>

    <comment type="block" pos:line="46" pos:column="5">/*
     * If there is no disk file to open yet, we must make this a
     * mem client.  If we can't open the swapin file before writing
     * to the client, there is no guarantee that we will be able
     * to open it later when we really need it.
     */</comment>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">swap_status<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">==<pos:position pos:line="52" pos:column="23"/></operator> <name pos:line="52" pos:column="24">SWAPOUT_NONE<pos:position pos:line="52" pos:column="36"/></name></expr>)<pos:position pos:line="52" pos:column="37"/></condition><then pos:line="52" pos:column="37">
        <block type="pseudo"><return pos:line="53" pos:column="9">return <expr><name pos:line="53" pos:column="16">STORE_MEM_CLIENT<pos:position pos:line="53" pos:column="32"/></name></expr>;<pos:position pos:line="53" pos:column="33"/></return></block></then></if>

    <comment type="block" pos:line="55" pos:column="5">/*
     * otherwise, make subsequent clients read from disk so they
     * can not delay the first, and vice-versa.
     */</comment>
    <return pos:line="59" pos:column="5">return <expr><name pos:line="59" pos:column="12">STORE_DISK_CLIENT<pos:position pos:line="59" pos:column="29"/></name></expr>;<pos:position pos:line="59" pos:column="30"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
