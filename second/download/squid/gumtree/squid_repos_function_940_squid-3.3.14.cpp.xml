<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_940_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">double<pos:position pos:line="1" pos:column="7"/></name></type>
<name pos:line="2" pos:column="1">xatof<pos:position pos:line="2" pos:column="6"/></name><parameter_list pos:line="2" pos:column="6">(<parameter><decl><type><specifier pos:line="2" pos:column="7">const<pos:position pos:line="2" pos:column="12"/></specifier> <name pos:line="2" pos:column="13">char<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name pos:line="2" pos:column="19">token<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">end<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><name pos:line="4" pos:column="17">NULL<pos:position pos:line="4" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">double<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">ret<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><call><name pos:line="5" pos:column="18">strtod<pos:position pos:line="5" pos:column="24"/></name><argument_list pos:line="5" pos:column="24">(<argument><expr><name pos:line="5" pos:column="25">token<pos:position pos:line="5" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="32">&amp;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="33">end<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">ret<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">==<pos:position pos:line="7" pos:column="15"/></operator> <literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal> <operator pos:line="7" pos:column="18">&amp;&amp;<pos:position pos:line="7" pos:column="28"/></operator> <name pos:line="7" pos:column="21">end<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">==<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="28">token<pos:position pos:line="7" pos:column="33"/></name></expr>)<pos:position pos:line="7" pos:column="34"/></condition><then pos:line="7" pos:column="34"> <block pos:line="7" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="19">DBG_PARSE_NOTE<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">DBG_IMPORTANT<pos:position pos:line="8" pos:column="47"/></name></expr></argument>)<pos:position pos:line="8" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="50">"ERROR: No digits were found in the input value '"<pos:position pos:line="8" pos:column="100"/></literal> <operator pos:line="8" pos:column="101">&lt;&lt;<pos:position pos:line="8" pos:column="109"/></operator> <name pos:line="8" pos:column="104">token<pos:position pos:line="8" pos:column="109"/></name> <operator pos:line="8" pos:column="110">&lt;&lt;<pos:position pos:line="8" pos:column="118"/></operator> <literal type="string" pos:line="8" pos:column="113">"'."<pos:position pos:line="8" pos:column="117"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="119"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">self_destruct<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">()<pos:position pos:line="9" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">end<pos:position pos:line="12" pos:column="13"/></name></expr>)<pos:position pos:line="12" pos:column="14"/></condition><then pos:line="12" pos:column="14"> <block pos:line="12" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="19">DBG_PARSE_NOTE<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name pos:line="13" pos:column="34">DBG_IMPORTANT<pos:position pos:line="13" pos:column="47"/></name></expr></argument>)<pos:position pos:line="13" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="50">"ERROR: Invalid value: '"<pos:position pos:line="13" pos:column="75"/></literal> <operator pos:line="13" pos:column="76">&lt;&lt;<pos:position pos:line="13" pos:column="84"/></operator> <name pos:line="13" pos:column="79">token<pos:position pos:line="13" pos:column="84"/></name> <operator pos:line="13" pos:column="85">&lt;&lt;<pos:position pos:line="13" pos:column="93"/></operator> <literal type="string" pos:line="13" pos:column="88">"' is supposed to be a number."<pos:position pos:line="13" pos:column="119"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="121"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">self_destruct<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">()<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">ret<pos:position pos:line="17" pos:column="15"/></name></expr>;<pos:position pos:line="17" pos:column="16"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
