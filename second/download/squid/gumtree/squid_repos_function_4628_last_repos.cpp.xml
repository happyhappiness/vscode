<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4628_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">handleDataReply<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">HttpReply<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">reply<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">StoreIOBuffer<pos:position pos:line="2" pos:column="67"/></name></type> <name pos:line="2" pos:column="68">data<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">reply<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">!=<pos:position pos:line="4" pos:column="17"/></operator> <name pos:line="4" pos:column="18">NULL<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&amp;&amp;<pos:position pos:line="4" pos:column="33"/></operator> <call><name><name pos:line="4" pos:column="26">reply<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">-&gt;<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="33">sline<pos:position pos:line="4" pos:column="38"/></name><operator pos:line="4" pos:column="38">.<pos:position pos:line="4" pos:column="39"/></operator><name pos:line="4" pos:column="39">status<pos:position pos:line="4" pos:column="45"/></name></name><argument_list pos:line="4" pos:column="45">()<pos:position pos:line="4" pos:column="47"/></argument_list></call> <operator pos:line="4" pos:column="48">!=<pos:position pos:line="4" pos:column="50"/></operator> <name><name pos:line="4" pos:column="51">Http<pos:position pos:line="4" pos:column="55"/></name><operator pos:line="4" pos:column="55">::<pos:position pos:line="4" pos:column="57"/></operator><name pos:line="4" pos:column="57">scOkay<pos:position pos:line="4" pos:column="63"/></name></name></expr>)<pos:position pos:line="4" pos:column="64"/></condition><then pos:line="4" pos:column="64"> <block pos:line="4" pos:column="65">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">writeForwardedReply<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">reply<pos:position pos:line="5" pos:column="34"/></name></expr></argument>)<pos:position pos:line="5" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="36"/></expr_stmt>
        <if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name><name pos:line="6" pos:column="13">Comm<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">::<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">IsConnOpen<pos:position pos:line="6" pos:column="29"/></name></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">dataConn<pos:position pos:line="6" pos:column="38"/></name></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="40"/></condition><then pos:line="6" pos:column="40"> <block pos:line="6" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="7" pos:column="13">debugs<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><literal type="number" pos:line="7" pos:column="20">33<pos:position pos:line="7" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="24">3<pos:position pos:line="7" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="27">"closing "<pos:position pos:line="7" pos:column="37"/></literal> <operator pos:line="7" pos:column="38">&lt;&lt;<pos:position pos:line="7" pos:column="46"/></operator> <name pos:line="7" pos:column="41">dataConn<pos:position pos:line="7" pos:column="49"/></name> <operator pos:line="7" pos:column="50">&lt;&lt;<pos:position pos:line="7" pos:column="58"/></operator> <literal type="string" pos:line="7" pos:column="53">" on KO reply"<pos:position pos:line="7" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="8" pos:column="13">closeDataConnection<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">()<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="9" pos:column="10"/></block></then></if>
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">dataConn<pos:position pos:line="13" pos:column="18"/></name></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19"> <block pos:line="13" pos:column="20">{
        <comment type="line" pos:line="14" pos:column="9">// We got STREAM_COMPLETE (or error) and closed the client data conn.</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">33<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="20">3<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="23">"ignoring FTP srv data response after clt data closure"<pos:position pos:line="15" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="80"/></expr_stmt>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><call><name pos:line="19" pos:column="10">checkDataConnPost<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">()<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <block pos:line="19" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">writeCustomReply<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><literal type="number" pos:line="20" pos:column="26">425<pos:position pos:line="20" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="31">"Data connection is not established."<pos:position pos:line="20" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">closeDataConnection<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">()<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">debugs<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><literal type="number" pos:line="25" pos:column="12">33<pos:position pos:line="25" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="16">7<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="19">data<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">.<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">length<pos:position pos:line="25" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">data<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">.<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">length<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">&lt;=<pos:position pos:line="27" pos:column="26"/></operator> <literal type="number" pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></literal></expr>)<pos:position pos:line="27" pos:column="26"/></condition><then pos:line="27" pos:column="26"> <block pos:line="27" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">replyDataWritingCheckpoint<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">()<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt> <comment type="line" pos:line="28" pos:column="39">// skip the actual write call</comment>
        <return pos:line="29" pos:column="9">return;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="32" pos:column="5">MemBuf<pos:position pos:line="32" pos:column="11"/></name></type> <name pos:line="32" pos:column="12">mb<pos:position pos:line="32" pos:column="14"/></name></decl>;<pos:position pos:line="32" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">mb<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">.<pos:position pos:line="33" pos:column="8"/></operator><name pos:line="33" pos:column="8">init<pos:position pos:line="33" pos:column="12"/></name></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name><name pos:line="33" pos:column="13">data<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">.<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">length<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">+<pos:position pos:line="33" pos:column="26"/></operator> <literal type="number" pos:line="33" pos:column="27">1<pos:position pos:line="33" pos:column="28"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="30">data<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">.<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="35">length<pos:position pos:line="33" pos:column="41"/></name></name> <operator pos:line="33" pos:column="42">+<pos:position pos:line="33" pos:column="43"/></operator> <literal type="number" pos:line="33" pos:column="44">1<pos:position pos:line="33" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="34" pos:column="5">mb<pos:position pos:line="34" pos:column="7"/></name><operator pos:line="34" pos:column="7">.<pos:position pos:line="34" pos:column="8"/></operator><name pos:line="34" pos:column="8">append<pos:position pos:line="34" pos:column="14"/></name></name><argument_list pos:line="34" pos:column="14">(<argument><expr><name><name pos:line="34" pos:column="15">data<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">.<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">data<pos:position pos:line="34" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="26">data<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">.<pos:position pos:line="34" pos:column="31"/></operator><name pos:line="34" pos:column="31">length<pos:position pos:line="34" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>

    <typedef pos:line="36" pos:column="5">typedef <type><name><name pos:line="36" pos:column="13">CommCbMemFunT<pos:position pos:line="36" pos:column="26"/></name><argument_list type="generic" pos:line="36" pos:column="26">&lt;<argument><expr><name pos:line="36" pos:column="27">Server<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">CommIoCbParams<pos:position pos:line="36" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="36" pos:column="53"/></argument_list></name></type> <name pos:line="36" pos:column="51">Dialer<pos:position pos:line="36" pos:column="57"/></name>;<pos:position pos:line="36" pos:column="58"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="37" pos:column="5">AsyncCall<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">::<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">Pointer<pos:position pos:line="37" pos:column="23"/></name></name></type> <name pos:line="37" pos:column="24">call<pos:position pos:line="37" pos:column="28"/></name> <init pos:line="37" pos:column="29">= <expr><call><name pos:line="37" pos:column="31">JobCallback<pos:position pos:line="37" pos:column="42"/></name><argument_list pos:line="37" pos:column="42">(<argument><expr><literal type="number" pos:line="37" pos:column="43">33<pos:position pos:line="37" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="47">5<pos:position pos:line="37" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="50">Dialer<pos:position pos:line="37" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="58">this<pos:position pos:line="37" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="64">Ftp<pos:position pos:line="37" pos:column="67"/></name><operator pos:line="37" pos:column="67">::<pos:position pos:line="37" pos:column="69"/></operator><name pos:line="37" pos:column="69">Server<pos:position pos:line="37" pos:column="75"/></name><operator pos:line="37" pos:column="75">::<pos:position pos:line="37" pos:column="77"/></operator><name pos:line="37" pos:column="77">wroteReplyData<pos:position pos:line="37" pos:column="91"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="92"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="93"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="38" pos:column="5">Comm<pos:position pos:line="38" pos:column="9"/></name><operator pos:line="38" pos:column="9">::<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="11">Write<pos:position pos:line="38" pos:column="16"/></name></name><argument_list pos:line="38" pos:column="16">(<argument><expr><name pos:line="38" pos:column="17">dataConn<pos:position pos:line="38" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="27">&amp;<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="28">mb<pos:position pos:line="38" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="32">call<pos:position pos:line="38" pos:column="36"/></name></expr></argument>)<pos:position pos:line="38" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">pipeline<pos:position pos:line="40" pos:column="13"/></name><operator pos:line="40" pos:column="13">.<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="14">front<pos:position pos:line="40" pos:column="19"/></name></name><argument_list pos:line="40" pos:column="19">()<pos:position pos:line="40" pos:column="21"/></argument_list></call><operator pos:line="40" pos:column="21">-&gt;<pos:position pos:line="40" pos:column="26"/></operator><call><name pos:line="40" pos:column="23">noteSentBodyBytes<pos:position pos:line="40" pos:column="40"/></name><argument_list pos:line="40" pos:column="40">(<argument><expr><name><name pos:line="40" pos:column="41">data<pos:position pos:line="40" pos:column="45"/></name><operator pos:line="40" pos:column="45">.<pos:position pos:line="40" pos:column="46"/></operator><name pos:line="40" pos:column="46">length<pos:position pos:line="40" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
