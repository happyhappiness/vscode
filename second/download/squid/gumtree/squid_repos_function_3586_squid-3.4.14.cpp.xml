<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3586_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">err_type<pos:position pos:line="1" pos:column="9"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">handleChunkedRequestBody<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">(<parameter><decl><type><name pos:line="2" pos:column="41">size_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">putSize<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">33<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">7<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"chunked from "<pos:position pos:line="4" pos:column="41"/></literal> <operator pos:line="4" pos:column="42">&lt;&lt;<pos:position pos:line="4" pos:column="50"/></operator> <name pos:line="4" pos:column="45">clientConnection<pos:position pos:line="4" pos:column="61"/></name> <operator pos:line="4" pos:column="62">&lt;&lt;<pos:position pos:line="4" pos:column="70"/></operator> <literal type="string" pos:line="4" pos:column="65">": "<pos:position pos:line="4" pos:column="69"/></literal> <operator pos:line="4" pos:column="70">&lt;&lt;<pos:position pos:line="4" pos:column="78"/></operator> <name><name pos:line="4" pos:column="73">in<pos:position pos:line="4" pos:column="75"/></name><operator pos:line="4" pos:column="75">.<pos:position pos:line="4" pos:column="76"/></operator><name pos:line="4" pos:column="76">notYetUsed<pos:position pos:line="4" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="88"/></expr_stmt>

    <try pos:line="6" pos:column="5">try <block pos:line="6" pos:column="9">{ <comment type="line" pos:line="6" pos:column="11">// the parser will throw on errors</comment>

        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name><name pos:line="8" pos:column="14">in<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">.<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">notYetUsed<pos:position pos:line="8" pos:column="27"/></name></name></expr>)<pos:position pos:line="8" pos:column="28"/></condition><then pos:line="8" pos:column="28"> <comment type="line" pos:line="8" pos:column="29">// nothing to do (MemBuf::init requires this check)</comment>
            <block type="pseudo"><return pos:line="9" pos:column="13">return <expr><name pos:line="9" pos:column="20">ERR_NONE<pos:position pos:line="9" pos:column="28"/></name></expr>;<pos:position pos:line="9" pos:column="29"/></return></block></then></if>

        <decl_stmt><decl><type><name pos:line="11" pos:column="9">MemBuf<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">raw<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt> <comment type="line" pos:line="11" pos:column="21">// ChunkedCodingParser only works with MemBufs</comment>
        <comment type="line" pos:line="12" pos:column="9">// add one because MemBuf will assert if it cannot 0-terminate</comment>
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">raw<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">.<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">init<pos:position pos:line="13" pos:column="17"/></name></name><argument_list pos:line="13" pos:column="17">(<argument><expr><name><name pos:line="13" pos:column="18">in<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">.<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">notYetUsed<pos:position pos:line="13" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="13" pos:column="33">in<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">.<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="36">notYetUsed<pos:position pos:line="13" pos:column="46"/></name></name><operator pos:line="13" pos:column="46">+<pos:position pos:line="13" pos:column="47"/></operator><literal type="number" pos:line="13" pos:column="47">1<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="14" pos:column="9">raw<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">.<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">append<pos:position pos:line="14" pos:column="19"/></name></name><argument_list pos:line="14" pos:column="19">(<argument><expr><name><name pos:line="14" pos:column="20">in<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">.<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">buf<pos:position pos:line="14" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="28">in<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">.<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="31">notYetUsed<pos:position pos:line="14" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>

        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <name pos:line="16" pos:column="15">mb_size_t<pos:position pos:line="16" pos:column="24"/></name></type> <name pos:line="16" pos:column="25">wasContentSize<pos:position pos:line="16" pos:column="39"/></name> <init pos:line="16" pos:column="40">= <expr><call><name><name pos:line="16" pos:column="42">raw<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">.<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">contentSize<pos:position pos:line="16" pos:column="57"/></name></name><argument_list pos:line="16" pos:column="57">()<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="60"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">BodyPipeCheckout<pos:position pos:line="17" pos:column="25"/></name></type> <name pos:line="17" pos:column="26">bpc<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><operator pos:line="17" pos:column="30">*<pos:position pos:line="17" pos:column="31"/></operator><name pos:line="17" pos:column="31">bodyPipe<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></decl>;<pos:position pos:line="17" pos:column="41"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">const<pos:position pos:line="18" pos:column="14"/></specifier> <name pos:line="18" pos:column="15">bool<pos:position pos:line="18" pos:column="19"/></name></type> <name pos:line="18" pos:column="20">parsed<pos:position pos:line="18" pos:column="26"/></name> <init pos:line="18" pos:column="27">= <expr><call><name><name pos:line="18" pos:column="29">in<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">.<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="32">bodyParser<pos:position pos:line="18" pos:column="42"/></name><operator pos:line="18" pos:column="42">-&gt;<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="44">parse<pos:position pos:line="18" pos:column="49"/></name></name><argument_list pos:line="18" pos:column="49">(<argument><expr><operator pos:line="18" pos:column="50">&amp;<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="51">raw<pos:position pos:line="18" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="56">&amp;<pos:position pos:line="18" pos:column="61"/></operator><name><name pos:line="18" pos:column="57">bpc<pos:position pos:line="18" pos:column="60"/></name><operator pos:line="18" pos:column="60">.<pos:position pos:line="18" pos:column="61"/></operator><name pos:line="18" pos:column="61">buf<pos:position pos:line="18" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="66"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="19" pos:column="9">bpc<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">.<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">checkIn<pos:position pos:line="19" pos:column="20"/></name></name><argument_list pos:line="19" pos:column="20">()<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">putSize<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <name pos:line="20" pos:column="19">wasContentSize<pos:position pos:line="20" pos:column="33"/></name> <operator pos:line="20" pos:column="34">-<pos:position pos:line="20" pos:column="35"/></operator> <call><name><name pos:line="20" pos:column="36">raw<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">.<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="40">contentSize<pos:position pos:line="20" pos:column="51"/></name></name><argument_list pos:line="20" pos:column="51">()<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="54"/></expr_stmt>

        <comment type="line" pos:line="22" pos:column="9">// dechunk then check: the size limit applies to _dechunked_ content</comment>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">clientIsRequestBodyTooLargeForPolicy<pos:position pos:line="23" pos:column="49"/></name><argument_list pos:line="23" pos:column="49">(<argument><expr><call><name><name pos:line="23" pos:column="50">bodyPipe<pos:position pos:line="23" pos:column="58"/></name><operator pos:line="23" pos:column="58">-&gt;<pos:position pos:line="23" pos:column="63"/></operator><name pos:line="23" pos:column="60">producedSize<pos:position pos:line="23" pos:column="72"/></name></name><argument_list pos:line="23" pos:column="72">()<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="76"/></condition><then pos:line="23" pos:column="76">
            <block type="pseudo"><return pos:line="24" pos:column="13">return <expr><name pos:line="24" pos:column="20">ERR_TOO_BIG<pos:position pos:line="24" pos:column="31"/></name></expr>;<pos:position pos:line="24" pos:column="32"/></return></block></then></if>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">parsed<pos:position pos:line="26" pos:column="19"/></name></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20"> <block pos:line="26" pos:column="21">{
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">finishDechunkingRequest<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><literal type="boolean" pos:line="27" pos:column="37">true<pos:position pos:line="27" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">Must<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><operator pos:line="28" pos:column="18">!<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="19">bodyPipe<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
            <return pos:line="29" pos:column="13">return <expr><name pos:line="29" pos:column="20">ERR_NONE<pos:position pos:line="29" pos:column="28"/></name></expr>;<pos:position pos:line="29" pos:column="29"/></return> <comment type="line" pos:line="29" pos:column="30">// nil bodyPipe implies body end for the caller</comment>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="32" pos:column="9">// if chunk parser needs data, then the body pipe must need it too</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">Must<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><operator pos:line="33" pos:column="14">!<pos:position pos:line="33" pos:column="15"/></operator><call><name><name pos:line="33" pos:column="15">in<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">.<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">bodyParser<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">-&gt;<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="30">needsMoreData<pos:position pos:line="33" pos:column="43"/></name></name><argument_list pos:line="33" pos:column="43">()<pos:position pos:line="33" pos:column="45"/></argument_list></call> <operator pos:line="33" pos:column="46">||<pos:position pos:line="33" pos:column="48"/></operator> <call><name><name pos:line="33" pos:column="49">bodyPipe<pos:position pos:line="33" pos:column="57"/></name><operator pos:line="33" pos:column="57">-&gt;<pos:position pos:line="33" pos:column="62"/></operator><name pos:line="33" pos:column="59">mayNeedMoreData<pos:position pos:line="33" pos:column="74"/></name></name><argument_list pos:line="33" pos:column="74">()<pos:position pos:line="33" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="78"/></expr_stmt>

        <comment type="line" pos:line="35" pos:column="9">// if parser needs more space and we can consume nothing, we will stall</comment>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">Must<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><operator pos:line="36" pos:column="14">!<pos:position pos:line="36" pos:column="15"/></operator><call><name><name pos:line="36" pos:column="15">in<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">.<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="18">bodyParser<pos:position pos:line="36" pos:column="28"/></name><operator pos:line="36" pos:column="28">-&gt;<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="30">needsMoreSpace<pos:position pos:line="36" pos:column="44"/></name></name><argument_list pos:line="36" pos:column="44">()<pos:position pos:line="36" pos:column="46"/></argument_list></call> <operator pos:line="36" pos:column="47">||<pos:position pos:line="36" pos:column="49"/></operator> <call><name><name pos:line="36" pos:column="50">bodyPipe<pos:position pos:line="36" pos:column="58"/></name><operator pos:line="36" pos:column="58">-&gt;<pos:position pos:line="36" pos:column="63"/></operator><name pos:line="36" pos:column="60">buf<pos:position pos:line="36" pos:column="63"/></name></name><argument_list pos:line="36" pos:column="63">()<pos:position pos:line="36" pos:column="65"/></argument_list></call><operator pos:line="36" pos:column="65">.<pos:position pos:line="36" pos:column="66"/></operator><call><name pos:line="36" pos:column="66">hasContent<pos:position pos:line="36" pos:column="76"/></name><argument_list pos:line="36" pos:column="76">()<pos:position pos:line="36" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block> <catch pos:line="37" pos:column="7">catch <parameter_list pos:line="37" pos:column="13">(<parameter><decl><type><modifier pos:line="37" pos:column="14">...<pos:position pos:line="37" pos:column="17"/></modifier></type></decl></parameter>)<pos:position pos:line="37" pos:column="18"/></parameter_list> <block pos:line="37" pos:column="19">{ <comment type="line" pos:line="37" pos:column="21">// TODO: be more specific</comment>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">debugs<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="number" pos:line="38" pos:column="16">33<pos:position pos:line="38" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="20">3<pos:position pos:line="38" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="23">HERE<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">&lt;&lt;<pos:position pos:line="38" pos:column="36"/></operator> <literal type="string" pos:line="38" pos:column="31">"malformed chunks"<pos:position pos:line="38" pos:column="49"/></literal> <operator pos:line="38" pos:column="50">&lt;&lt;<pos:position pos:line="38" pos:column="58"/></operator> <call><name><name pos:line="38" pos:column="53">bodyPipe<pos:position pos:line="38" pos:column="61"/></name><operator pos:line="38" pos:column="61">-&gt;<pos:position pos:line="38" pos:column="66"/></operator><name pos:line="38" pos:column="63">status<pos:position pos:line="38" pos:column="69"/></name></name><argument_list pos:line="38" pos:column="69">()<pos:position pos:line="38" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="73"/></expr_stmt>
        <return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">ERR_INVALID_REQ<pos:position pos:line="39" pos:column="31"/></name></expr>;<pos:position pos:line="39" pos:column="32"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></catch></try>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">debugs<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><literal type="number" pos:line="42" pos:column="12">33<pos:position pos:line="42" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="16">7<pos:position pos:line="42" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="19">HERE<pos:position pos:line="42" pos:column="23"/></name> <operator pos:line="42" pos:column="24">&lt;&lt;<pos:position pos:line="42" pos:column="32"/></operator> <literal type="string" pos:line="42" pos:column="27">"need more chunked data"<pos:position pos:line="42" pos:column="51"/></literal> <operator pos:line="42" pos:column="52">&lt;&lt;<pos:position pos:line="42" pos:column="60"/></operator> <operator pos:line="42" pos:column="55">*<pos:position pos:line="42" pos:column="56"/></operator><call><name><name pos:line="42" pos:column="56">bodyPipe<pos:position pos:line="42" pos:column="64"/></name><operator pos:line="42" pos:column="64">-&gt;<pos:position pos:line="42" pos:column="69"/></operator><name pos:line="42" pos:column="66">status<pos:position pos:line="42" pos:column="72"/></name></name><argument_list pos:line="42" pos:column="72">()<pos:position pos:line="42" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="76"/></expr_stmt>
    <return pos:line="43" pos:column="5">return <expr><name pos:line="43" pos:column="12">ERR_NONE<pos:position pos:line="43" pos:column="20"/></name></expr>;<pos:position pos:line="43" pos:column="21"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
