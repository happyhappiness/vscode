<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3139_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrRange<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">packInto<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">Packable<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type> <name pos:line="2" pos:column="35">packer<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list> <specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">const_iterator<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">pos<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><call><name pos:line="4" pos:column="26">begin<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">()<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>

    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><name pos:line="6" pos:column="12">pos<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">!=<pos:position pos:line="6" pos:column="18"/></operator> <call><name pos:line="6" pos:column="19">end<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">()<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="25"/></condition> <block pos:line="6" pos:column="26">{
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">pos<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">!=<pos:position pos:line="7" pos:column="19"/></operator> <call><name pos:line="7" pos:column="20">begin<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">()<pos:position pos:line="7" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="8" pos:column="13">packer<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">append<pos:position pos:line="8" pos:column="27"/></name></name><argument_list pos:line="8" pos:column="27">(<argument><expr><literal type="string" pos:line="8" pos:column="28">","<pos:position pos:line="8" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="33">1<pos:position pos:line="8" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><operator pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">pos<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">)<pos:position pos:line="10" pos:column="15"/></operator><operator pos:line="10" pos:column="15">-&gt;<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="17">packInto<pos:position pos:line="10" pos:column="25"/></name></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">packer<pos:position pos:line="10" pos:column="32"/></name></expr></argument>)<pos:position pos:line="10" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="12" pos:column="9">++<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">pos<pos:position pos:line="12" pos:column="14"/></name></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></while>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
