<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2189_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">httpMaybeRemovePublic<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">StoreEntry<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">e<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="39">Http<pos:position pos:line="2" pos:column="43"/></name><operator pos:line="2" pos:column="43">::<pos:position pos:line="2" pos:column="45"/></operator><name pos:line="2" pos:column="45">StatusCode<pos:position pos:line="2" pos:column="55"/></name></name></type> <name pos:line="2" pos:column="56">status<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">remove<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">forbidden<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><literal type="number" pos:line="5" pos:column="21">0<pos:position pos:line="5" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>

    <comment type="line" pos:line="7" pos:column="5">// If the incoming response already goes into a public entry, then there is</comment>
    <comment type="line" pos:line="8" pos:column="5">// nothing to remove. This protects ready-for-collapsing entries as well.</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name pos:line="9" pos:column="10">EBIT_TEST<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name><name pos:line="9" pos:column="20">e<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">flags<pos:position pos:line="9" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="30">KEY_PRIVATE<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43">
        <block type="pseudo"><return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="12" pos:column="5">// If the new/incoming response cannot be stored, then it does not</comment>
    <comment type="line" pos:line="13" pos:column="5">// compete with the old stored response for the public key, and the</comment>
    <comment type="line" pos:line="14" pos:column="5">// old stored response should be left as is.</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">e<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">mem_obj<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">request<pos:position pos:line="15" pos:column="28"/></name></name> <operator pos:line="15" pos:column="29">&amp;&amp;<pos:position pos:line="15" pos:column="39"/></operator> <operator pos:line="15" pos:column="32">!<pos:position pos:line="15" pos:column="33"/></operator><name><name pos:line="15" pos:column="33">e<pos:position pos:line="15" pos:column="34"/></name><operator pos:line="15" pos:column="34">-&gt;<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="36">mem_obj<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">request<pos:position pos:line="15" pos:column="52"/></name><operator pos:line="15" pos:column="52">-&gt;<pos:position pos:line="15" pos:column="57"/></operator><name pos:line="15" pos:column="54">flags<pos:position pos:line="15" pos:column="59"/></name><operator pos:line="15" pos:column="59">.<pos:position pos:line="15" pos:column="60"/></operator><name pos:line="15" pos:column="60">cachable<pos:position pos:line="15" pos:column="68"/></name></name></expr>)<pos:position pos:line="15" pos:column="69"/></condition><then pos:line="15" pos:column="69">
        <block type="pseudo"><return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return></block></then></if>

    <switch pos:line="18" pos:column="5">switch <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">status<pos:position pos:line="18" pos:column="19"/></name></expr>)<pos:position pos:line="18" pos:column="20"/></condition> <block pos:line="18" pos:column="21">{

    <case pos:line="20" pos:column="5">case <expr><name><name pos:line="20" pos:column="10">Http<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">::<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">scOkay<pos:position pos:line="20" pos:column="22"/></name></name></expr>:<pos:position pos:line="20" pos:column="23"/></case>

    <case pos:line="22" pos:column="5">case <expr><name><name pos:line="22" pos:column="10">Http<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">::<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">scNonAuthoritativeInformation<pos:position pos:line="22" pos:column="45"/></name></name></expr>:<pos:position pos:line="22" pos:column="46"/></case>

    <case pos:line="24" pos:column="5">case <expr><name><name pos:line="24" pos:column="10">Http<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">::<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">scMultipleChoices<pos:position pos:line="24" pos:column="33"/></name></name></expr>:<pos:position pos:line="24" pos:column="34"/></case>

    <case pos:line="26" pos:column="5">case <expr><name><name pos:line="26" pos:column="10">Http<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">::<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">scMovedPermanently<pos:position pos:line="26" pos:column="34"/></name></name></expr>:<pos:position pos:line="26" pos:column="35"/></case>

    <case pos:line="28" pos:column="5">case <expr><name><name pos:line="28" pos:column="10">Http<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">::<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">scFound<pos:position pos:line="28" pos:column="23"/></name></name></expr>:<pos:position pos:line="28" pos:column="24"/></case>

    <case pos:line="30" pos:column="5">case <expr><name><name pos:line="30" pos:column="10">Http<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">::<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">scSeeOther<pos:position pos:line="30" pos:column="26"/></name></name></expr>:<pos:position pos:line="30" pos:column="27"/></case>

    <case pos:line="32" pos:column="5">case <expr><name><name pos:line="32" pos:column="10">Http<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">::<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">scGone<pos:position pos:line="32" pos:column="22"/></name></name></expr>:<pos:position pos:line="32" pos:column="23"/></case>

    <case pos:line="34" pos:column="5">case <expr><name><name pos:line="34" pos:column="10">Http<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">::<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="16">scNotFound<pos:position pos:line="34" pos:column="26"/></name></name></expr>:<pos:position pos:line="34" pos:column="27"/></case>
        <expr_stmt><expr><name pos:line="35" pos:column="9">remove<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <literal type="number" pos:line="35" pos:column="18">1<pos:position pos:line="35" pos:column="19"/></literal></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>

        <break pos:line="37" pos:column="9">break;<pos:position pos:line="37" pos:column="15"/></break>

    <case pos:line="39" pos:column="5">case <expr><name><name pos:line="39" pos:column="10">Http<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">::<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="16">scForbidden<pos:position pos:line="39" pos:column="27"/></name></name></expr>:<pos:position pos:line="39" pos:column="28"/></case>

    <case pos:line="41" pos:column="5">case <expr><name><name pos:line="41" pos:column="10">Http<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">::<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="16">scMethodNotAllowed<pos:position pos:line="41" pos:column="34"/></name></name></expr>:<pos:position pos:line="41" pos:column="35"/></case>
        <expr_stmt><expr><name pos:line="42" pos:column="9">forbidden<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <literal type="number" pos:line="42" pos:column="21">1<pos:position pos:line="42" pos:column="22"/></literal></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>

        <break pos:line="44" pos:column="9">break;<pos:position pos:line="44" pos:column="15"/></break>

<cpp:if pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">if<pos:position pos:line="46" pos:column="4"/></cpp:directive> <expr><name pos:line="46" pos:column="5">WORK_IN_PROGRESS<pos:position pos:line="46" pos:column="21"/></name></expr></cpp:if>

    <case pos:line="48" pos:column="5">case <expr><name><name pos:line="48" pos:column="10">Http<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">::<pos:position pos:line="48" pos:column="16"/></operator><name pos:line="48" pos:column="16">scUnauthorized<pos:position pos:line="48" pos:column="30"/></name></name></expr>:<pos:position pos:line="48" pos:column="31"/></case>
        <expr_stmt><expr><name pos:line="49" pos:column="9">forbidden<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <literal type="number" pos:line="49" pos:column="21">1<pos:position pos:line="49" pos:column="22"/></literal></expr>;<pos:position pos:line="49" pos:column="23"/></expr_stmt>

        <break pos:line="51" pos:column="9">break;<pos:position pos:line="51" pos:column="15"/></break>

<cpp:endif pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">endif<pos:position pos:line="53" pos:column="7"/></cpp:directive></cpp:endif>

    <default pos:line="55" pos:column="5">default:<pos:position pos:line="55" pos:column="13"/></default>
<cpp:if pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">if<pos:position pos:line="56" pos:column="4"/></cpp:directive> <expr><name pos:line="56" pos:column="5">QUESTIONABLE<pos:position pos:line="56" pos:column="17"/></name></expr></cpp:if>
        <comment type="block" pos:line="57" pos:column="9">/*
         * Any 2xx response should eject previously cached entities...
         */</comment>

        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">status<pos:position pos:line="61" pos:column="19"/></name> <operator pos:line="61" pos:column="20">&gt;=<pos:position pos:line="61" pos:column="25"/></operator> <literal type="number" pos:line="61" pos:column="23">200<pos:position pos:line="61" pos:column="26"/></literal> <operator pos:line="61" pos:column="27">&amp;&amp;<pos:position pos:line="61" pos:column="37"/></operator> <name pos:line="61" pos:column="30">status<pos:position pos:line="61" pos:column="36"/></name> <operator pos:line="61" pos:column="37">&lt;<pos:position pos:line="61" pos:column="41"/></operator> <literal type="number" pos:line="61" pos:column="39">300<pos:position pos:line="61" pos:column="42"/></literal></expr>)<pos:position pos:line="61" pos:column="43"/></condition><then pos:line="61" pos:column="43">
            <block type="pseudo"><expr_stmt><expr><name pos:line="62" pos:column="13">remove<pos:position pos:line="62" pos:column="19"/></name> <operator pos:line="62" pos:column="20">=<pos:position pos:line="62" pos:column="21"/></operator> <literal type="number" pos:line="62" pos:column="22">1<pos:position pos:line="62" pos:column="23"/></literal></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt></block></then></if>

<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>

        <break pos:line="66" pos:column="9">break;<pos:position pos:line="66" pos:column="15"/></break>
    }<pos:position pos:line="67" pos:column="6"/></block></switch>

    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><operator pos:line="69" pos:column="9">!<pos:position pos:line="69" pos:column="10"/></operator><name pos:line="69" pos:column="10">remove<pos:position pos:line="69" pos:column="16"/></name> <operator pos:line="69" pos:column="17">&amp;&amp;<pos:position pos:line="69" pos:column="27"/></operator> <operator pos:line="69" pos:column="20">!<pos:position pos:line="69" pos:column="21"/></operator><name pos:line="69" pos:column="21">forbidden<pos:position pos:line="69" pos:column="30"/></name></expr>)<pos:position pos:line="69" pos:column="31"/></condition><then pos:line="69" pos:column="31">
        <block type="pseudo"><return pos:line="70" pos:column="9">return;<pos:position pos:line="70" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="72" pos:column="5">StoreEntry<pos:position pos:line="72" pos:column="15"/></name> <modifier pos:line="72" pos:column="16">*<pos:position pos:line="72" pos:column="17"/></modifier></type><name pos:line="72" pos:column="17">pe<pos:position pos:line="72" pos:column="19"/></name> <init pos:line="72" pos:column="20">= <expr><call><name pos:line="72" pos:column="22">findPreviouslyCachedEntry<pos:position pos:line="72" pos:column="47"/></name><argument_list pos:line="72" pos:column="47">(<argument><expr><name pos:line="72" pos:column="48">e<pos:position pos:line="72" pos:column="49"/></name></expr></argument>)<pos:position pos:line="72" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="72" pos:column="51"/></decl_stmt>

    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><name pos:line="74" pos:column="9">pe<pos:position pos:line="74" pos:column="11"/></name> <operator pos:line="74" pos:column="12">!=<pos:position pos:line="74" pos:column="14"/></operator> <name pos:line="74" pos:column="15">NULL<pos:position pos:line="74" pos:column="19"/></name></expr>)<pos:position pos:line="74" pos:column="20"/></condition><then pos:line="74" pos:column="20"> <block pos:line="74" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">assert<pos:position pos:line="75" pos:column="15"/></name><argument_list pos:line="75" pos:column="15">(<argument><expr><name pos:line="75" pos:column="16">e<pos:position pos:line="75" pos:column="17"/></name> <operator pos:line="75" pos:column="18">!=<pos:position pos:line="75" pos:column="20"/></operator> <name pos:line="75" pos:column="21">pe<pos:position pos:line="75" pos:column="23"/></name></expr></argument>)<pos:position pos:line="75" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="25"/></expr_stmt>
<cpp:if pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">if<pos:position pos:line="76" pos:column="4"/></cpp:directive> <expr><name pos:line="76" pos:column="5">USE_HTCP<pos:position pos:line="76" pos:column="13"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">neighborsHtcpClear<pos:position pos:line="77" pos:column="27"/></name><argument_list pos:line="77" pos:column="27">(<argument><expr><name pos:line="77" pos:column="28">e<pos:position pos:line="77" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="31">NULL<pos:position pos:line="77" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="37">e<pos:position pos:line="77" pos:column="38"/></name><operator pos:line="77" pos:column="38">-&gt;<pos:position pos:line="77" pos:column="43"/></operator><name pos:line="77" pos:column="40">mem_obj<pos:position pos:line="77" pos:column="47"/></name><operator pos:line="77" pos:column="47">-&gt;<pos:position pos:line="77" pos:column="52"/></operator><name pos:line="77" pos:column="49">request<pos:position pos:line="77" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="77" pos:column="58">e<pos:position pos:line="77" pos:column="59"/></name><operator pos:line="77" pos:column="59">-&gt;<pos:position pos:line="77" pos:column="64"/></operator><name pos:line="77" pos:column="61">mem_obj<pos:position pos:line="77" pos:column="68"/></name><operator pos:line="77" pos:column="68">-&gt;<pos:position pos:line="77" pos:column="73"/></operator><name pos:line="77" pos:column="70">method<pos:position pos:line="77" pos:column="76"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="78">HTCP_CLR_INVALIDATION<pos:position pos:line="77" pos:column="99"/></name></expr></argument>)<pos:position pos:line="77" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="101"/></expr_stmt>
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name><name pos:line="79" pos:column="9">pe<pos:position pos:line="79" pos:column="11"/></name><operator pos:line="79" pos:column="11">-&gt;<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="13">release<pos:position pos:line="79" pos:column="20"/></name></name><argument_list pos:line="79" pos:column="20">()<pos:position pos:line="79" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="82" pos:column="5">/** \par
     * Also remove any cached HEAD response in case the object has
     * changed.
     */</comment>
    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name><name pos:line="86" pos:column="9">e<pos:position pos:line="86" pos:column="10"/></name><operator pos:line="86" pos:column="10">-&gt;<pos:position pos:line="86" pos:column="15"/></operator><name pos:line="86" pos:column="12">mem_obj<pos:position pos:line="86" pos:column="19"/></name><operator pos:line="86" pos:column="19">-&gt;<pos:position pos:line="86" pos:column="24"/></operator><name pos:line="86" pos:column="21">request<pos:position pos:line="86" pos:column="28"/></name></name></expr>)<pos:position pos:line="86" pos:column="29"/></condition><then pos:line="86" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="9">pe<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">=<pos:position pos:line="87" pos:column="13"/></operator> <call><name pos:line="87" pos:column="14">storeGetPublicByRequestMethod<pos:position pos:line="87" pos:column="43"/></name><argument_list pos:line="87" pos:column="43">(<argument><expr><name><name pos:line="87" pos:column="44">e<pos:position pos:line="87" pos:column="45"/></name><operator pos:line="87" pos:column="45">-&gt;<pos:position pos:line="87" pos:column="50"/></operator><name pos:line="87" pos:column="47">mem_obj<pos:position pos:line="87" pos:column="54"/></name><operator pos:line="87" pos:column="54">-&gt;<pos:position pos:line="87" pos:column="59"/></operator><name pos:line="87" pos:column="56">request<pos:position pos:line="87" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="65">Http<pos:position pos:line="87" pos:column="69"/></name><operator pos:line="87" pos:column="69">::<pos:position pos:line="87" pos:column="71"/></operator><name pos:line="87" pos:column="71">METHOD_HEAD<pos:position pos:line="87" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="84"/></expr_stmt></block></then>
    <else pos:line="88" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="9">pe<pos:position pos:line="89" pos:column="11"/></name> <operator pos:line="89" pos:column="12">=<pos:position pos:line="89" pos:column="13"/></operator> <call><name pos:line="89" pos:column="14">storeGetPublic<pos:position pos:line="89" pos:column="28"/></name><argument_list pos:line="89" pos:column="28">(<argument><expr><call><name><name pos:line="89" pos:column="29">e<pos:position pos:line="89" pos:column="30"/></name><operator pos:line="89" pos:column="30">-&gt;<pos:position pos:line="89" pos:column="35"/></operator><name pos:line="89" pos:column="32">mem_obj<pos:position pos:line="89" pos:column="39"/></name><operator pos:line="89" pos:column="39">-&gt;<pos:position pos:line="89" pos:column="44"/></operator><name pos:line="89" pos:column="41">storeId<pos:position pos:line="89" pos:column="48"/></name></name><argument_list pos:line="89" pos:column="48">()<pos:position pos:line="89" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="52">Http<pos:position pos:line="89" pos:column="56"/></name><operator pos:line="89" pos:column="56">::<pos:position pos:line="89" pos:column="58"/></operator><name pos:line="89" pos:column="58">METHOD_HEAD<pos:position pos:line="89" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="71"/></expr_stmt></block></else></if>

    <if pos:line="91" pos:column="5">if <condition pos:line="91" pos:column="8">(<expr><name pos:line="91" pos:column="9">pe<pos:position pos:line="91" pos:column="11"/></name> <operator pos:line="91" pos:column="12">!=<pos:position pos:line="91" pos:column="14"/></operator> <name pos:line="91" pos:column="15">NULL<pos:position pos:line="91" pos:column="19"/></name></expr>)<pos:position pos:line="91" pos:column="20"/></condition><then pos:line="91" pos:column="20"> <block pos:line="91" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">assert<pos:position pos:line="92" pos:column="15"/></name><argument_list pos:line="92" pos:column="15">(<argument><expr><name pos:line="92" pos:column="16">e<pos:position pos:line="92" pos:column="17"/></name> <operator pos:line="92" pos:column="18">!=<pos:position pos:line="92" pos:column="20"/></operator> <name pos:line="92" pos:column="21">pe<pos:position pos:line="92" pos:column="23"/></name></expr></argument>)<pos:position pos:line="92" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="25"/></expr_stmt>
<cpp:if pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">if<pos:position pos:line="93" pos:column="4"/></cpp:directive> <expr><name pos:line="93" pos:column="5">USE_HTCP<pos:position pos:line="93" pos:column="13"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="94" pos:column="9">neighborsHtcpClear<pos:position pos:line="94" pos:column="27"/></name><argument_list pos:line="94" pos:column="27">(<argument><expr><name pos:line="94" pos:column="28">e<pos:position pos:line="94" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="31">NULL<pos:position pos:line="94" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="37">e<pos:position pos:line="94" pos:column="38"/></name><operator pos:line="94" pos:column="38">-&gt;<pos:position pos:line="94" pos:column="43"/></operator><name pos:line="94" pos:column="40">mem_obj<pos:position pos:line="94" pos:column="47"/></name><operator pos:line="94" pos:column="47">-&gt;<pos:position pos:line="94" pos:column="52"/></operator><name pos:line="94" pos:column="49">request<pos:position pos:line="94" pos:column="56"/></name></name></expr></argument>, <argument><expr><call><name pos:line="94" pos:column="58">HttpRequestMethod<pos:position pos:line="94" pos:column="75"/></name><argument_list pos:line="94" pos:column="75">(<argument><expr><name><name pos:line="94" pos:column="76">Http<pos:position pos:line="94" pos:column="80"/></name><operator pos:line="94" pos:column="80">::<pos:position pos:line="94" pos:column="82"/></operator><name pos:line="94" pos:column="82">METHOD_HEAD<pos:position pos:line="94" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="94"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="94" pos:column="96">HTCP_CLR_INVALIDATION<pos:position pos:line="94" pos:column="117"/></name></expr></argument>)<pos:position pos:line="94" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="119"/></expr_stmt>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name><name pos:line="96" pos:column="9">pe<pos:position pos:line="96" pos:column="11"/></name><operator pos:line="96" pos:column="11">-&gt;<pos:position pos:line="96" pos:column="16"/></operator><name pos:line="96" pos:column="13">release<pos:position pos:line="96" pos:column="20"/></name></name><argument_list pos:line="96" pos:column="20">()<pos:position pos:line="96" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
