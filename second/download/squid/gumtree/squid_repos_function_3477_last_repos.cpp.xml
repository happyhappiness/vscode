<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3477_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">updateHistory<pos:position pos:line="2" pos:column="44"/></name></name><parameter_list pos:line="2" pos:column="44">(<parameter><decl><type><name pos:line="2" pos:column="45">HttpMsg<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">adapted<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">theMaster<pos:position pos:line="4" pos:column="19"/></name></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20"> <comment type="line" pos:line="4" pos:column="21">// all updates rely on being able to query the adapter</comment>
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">HttpRequest<pos:position pos:line="7" pos:column="22"/></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">request<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><cast type="dynamic" pos:line="7" pos:column="34">dynamic_cast<argument_list type="generic" pos:line="7" pos:column="46">&lt;<argument><expr><specifier pos:line="7" pos:column="47">const<pos:position pos:line="7" pos:column="52"/></specifier> <name pos:line="7" pos:column="53">HttpRequest<pos:position pos:line="7" pos:column="64"/></name><operator pos:line="7" pos:column="64">*<pos:position pos:line="7" pos:column="65"/></operator></expr></argument>&gt;<pos:position pos:line="7" pos:column="69"/></argument_list><argument_list pos:line="7" pos:column="66">(<argument><expr><ternary><condition><expr><name pos:line="7" pos:column="67">theCauseRep<pos:position pos:line="7" pos:column="78"/></name></expr> ?<pos:position pos:line="7" pos:column="80"/></condition><then pos:line="7" pos:column="80">
                                 <expr><call><name><name pos:line="8" pos:column="34">theCauseRep<pos:position pos:line="8" pos:column="45"/></name><operator pos:line="8" pos:column="45">-&gt;<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="47">raw<pos:position pos:line="8" pos:column="50"/></name></name><argument_list pos:line="8" pos:column="50">()<pos:position pos:line="8" pos:column="52"/></argument_list></call><operator pos:line="8" pos:column="52">.<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="53">header<pos:position pos:line="8" pos:column="59"/></name></expr> <pos:position pos:line="8" pos:column="60"/></then><else pos:line="8" pos:column="60">: <expr><call><name><name pos:line="8" pos:column="62">theVirginRep<pos:position pos:line="8" pos:column="74"/></name><operator pos:line="8" pos:column="74">.<pos:position pos:line="8" pos:column="75"/></operator><name pos:line="8" pos:column="75">raw<pos:position pos:line="8" pos:column="78"/></name></name><argument_list pos:line="8" pos:column="78">()<pos:position pos:line="8" pos:column="80"/></argument_list></call><operator pos:line="8" pos:column="80">.<pos:position pos:line="8" pos:column="81"/></operator><name pos:line="8" pos:column="81">header<pos:position pos:line="8" pos:column="87"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="8" pos:column="88"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="8" pos:column="89"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">Must<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">request<pos:position pos:line="9" pos:column="17"/></name></expr></argument>)<pos:position pos:line="9" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt>

    <comment type="line" pos:line="11" pos:column="5">// TODO: move common ICAP/eCAP logic to Adaptation::Xaction or similar</comment>
    <comment type="line" pos:line="12" pos:column="5">// TODO: optimize Area-to-String conversion</comment>

    <comment type="line" pos:line="14" pos:column="5">// update the cross-transactional database if needed</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <name pos:line="15" pos:column="15">char<pos:position pos:line="15" pos:column="19"/></name> <modifier pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></modifier></type><name pos:line="15" pos:column="21">xxNameStr<pos:position pos:line="15" pos:column="30"/></name> <init pos:line="15" pos:column="31">= <expr><name><name pos:line="15" pos:column="33">Adaptation<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">::<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="45">Config<pos:position pos:line="15" pos:column="51"/></name><operator pos:line="15" pos:column="51">::<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="53">masterx_shared_name<pos:position pos:line="15" pos:column="72"/></name></name></expr></init></decl>)<pos:position pos:line="15" pos:column="73"/></condition><then pos:line="15" pos:column="73"> <block pos:line="15" pos:column="74">{
        <decl_stmt><decl><type><name><name pos:line="16" pos:column="9">Adaptation<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">::<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="21">History<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">::<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="30">Pointer<pos:position pos:line="16" pos:column="37"/></name></name></type> <name pos:line="16" pos:column="38">ah<pos:position pos:line="16" pos:column="40"/></name> <init pos:line="16" pos:column="41">= <expr><call><name><name pos:line="16" pos:column="43">request<pos:position pos:line="16" pos:column="50"/></name><operator pos:line="16" pos:column="50">-&gt;<pos:position pos:line="16" pos:column="55"/></operator><name pos:line="16" pos:column="52">adaptHistory<pos:position pos:line="16" pos:column="64"/></name></name><argument_list pos:line="16" pos:column="64">(<argument><expr><literal type="boolean" pos:line="16" pos:column="65">true<pos:position pos:line="16" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="71"/></decl_stmt>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">ah<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">!=<pos:position pos:line="17" pos:column="18"/></operator> <name pos:line="17" pos:column="19">NULL<pos:position pos:line="17" pos:column="23"/></name></expr>)<pos:position pos:line="17" pos:column="24"/></condition><then pos:line="17" pos:column="24"> <block pos:line="17" pos:column="25">{
            <decl_stmt><decl><type><name><name pos:line="18" pos:column="13">libecap<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">::<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">Name<pos:position pos:line="18" pos:column="26"/></name></name></type> <name pos:line="18" pos:column="27">xxName<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">xxNameStr<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></decl>;<pos:position pos:line="18" pos:column="45"/></decl_stmt> <comment type="line" pos:line="18" pos:column="46">// TODO: optimize?</comment>
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<decl><type><specifier pos:line="19" pos:column="17">const<pos:position pos:line="19" pos:column="22"/></specifier> <name><name pos:line="19" pos:column="23">libecap<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">::<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="32">Area<pos:position pos:line="19" pos:column="36"/></name></name></type> <name pos:line="19" pos:column="37">val<pos:position pos:line="19" pos:column="40"/></name> <init pos:line="19" pos:column="41">= <expr><call><name><name pos:line="19" pos:column="43">theMaster<pos:position pos:line="19" pos:column="52"/></name><operator pos:line="19" pos:column="52">-&gt;<pos:position pos:line="19" pos:column="57"/></operator><name pos:line="19" pos:column="54">option<pos:position pos:line="19" pos:column="60"/></name></name><argument_list pos:line="19" pos:column="60">(<argument><expr><name pos:line="19" pos:column="61">xxName<pos:position pos:line="19" pos:column="67"/></name></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call></expr></init></decl>)<pos:position pos:line="19" pos:column="69"/></condition><then pos:line="19" pos:column="69">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="20" pos:column="17">ah<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">updateXxRecord<pos:position pos:line="20" pos:column="35"/></name></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">xxNameStr<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><call><name><name pos:line="20" pos:column="47">val<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">.<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="51">toString<pos:position pos:line="20" pos:column="59"/></name></name><argument_list pos:line="20" pos:column="59">()<pos:position pos:line="20" pos:column="61"/></argument_list></call><operator pos:line="20" pos:column="61">.<pos:position pos:line="20" pos:column="62"/></operator><call><name pos:line="20" pos:column="62">c_str<pos:position pos:line="20" pos:column="67"/></name><argument_list pos:line="20" pos:column="67">()<pos:position pos:line="20" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="71"/></expr_stmt></block></then></if>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="24" pos:column="5">// update the adaptation plan if needed</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><call><name pos:line="25" pos:column="9">service<pos:position pos:line="25" pos:column="16"/></name><argument_list pos:line="25" pos:column="16">()<pos:position pos:line="25" pos:column="18"/></argument_list></call><operator pos:line="25" pos:column="18">.<pos:position pos:line="25" pos:column="19"/></operator><call><name pos:line="25" pos:column="19">cfg<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">()<pos:position pos:line="25" pos:column="24"/></argument_list></call><operator pos:line="25" pos:column="24">.<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="25">routing<pos:position pos:line="25" pos:column="32"/></name></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33"> <block pos:line="25" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">String<pos:position pos:line="26" pos:column="15"/></name></type> <name pos:line="26" pos:column="16">services<pos:position pos:line="26" pos:column="24"/></name></decl>;<pos:position pos:line="26" pos:column="25"/></decl_stmt>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<decl><type><specifier pos:line="27" pos:column="13">const<pos:position pos:line="27" pos:column="18"/></specifier> <name><name pos:line="27" pos:column="19">libecap<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">::<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">Area<pos:position pos:line="27" pos:column="32"/></name></name></type> <name pos:line="27" pos:column="33">services<pos:position pos:line="27" pos:column="41"/></name> <init pos:line="27" pos:column="42">= <expr><call><name><name pos:line="27" pos:column="44">theMaster<pos:position pos:line="27" pos:column="53"/></name><operator pos:line="27" pos:column="53">-&gt;<pos:position pos:line="27" pos:column="58"/></operator><name pos:line="27" pos:column="55">option<pos:position pos:line="27" pos:column="61"/></name></name><argument_list pos:line="27" pos:column="61">(<argument><expr><name><name pos:line="27" pos:column="62">libecap<pos:position pos:line="27" pos:column="69"/></name><operator pos:line="27" pos:column="69">::<pos:position pos:line="27" pos:column="71"/></operator><name pos:line="27" pos:column="71">metaNextServices<pos:position pos:line="27" pos:column="87"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="88"/></argument_list></call></expr></init></decl>)<pos:position pos:line="27" pos:column="89"/></condition><then pos:line="27" pos:column="89"> <block pos:line="27" pos:column="90">{
            <decl_stmt><decl><type><name><name pos:line="28" pos:column="13">Adaptation<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">::<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">History<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">::<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="34">Pointer<pos:position pos:line="28" pos:column="41"/></name></name></type> <name pos:line="28" pos:column="42">ah<pos:position pos:line="28" pos:column="44"/></name> <init pos:line="28" pos:column="45">= <expr><call><name><name pos:line="28" pos:column="47">request<pos:position pos:line="28" pos:column="54"/></name><operator pos:line="28" pos:column="54">-&gt;<pos:position pos:line="28" pos:column="59"/></operator><name pos:line="28" pos:column="56">adaptHistory<pos:position pos:line="28" pos:column="68"/></name></name><argument_list pos:line="28" pos:column="68">(<argument><expr><literal type="boolean" pos:line="28" pos:column="69">true<pos:position pos:line="28" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="75"/></decl_stmt>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">ah<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">!=<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="23">NULL<pos:position pos:line="29" pos:column="27"/></name></expr>)<pos:position pos:line="29" pos:column="28"/></condition><then pos:line="29" pos:column="28">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="30" pos:column="17">ah<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">-&gt;<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="21">updateNextServices<pos:position pos:line="30" pos:column="39"/></name></name><argument_list pos:line="30" pos:column="39">(<argument><expr><call><name><name pos:line="30" pos:column="40">services<pos:position pos:line="30" pos:column="48"/></name><operator pos:line="30" pos:column="48">.<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="49">toString<pos:position pos:line="30" pos:column="57"/></name></name><argument_list pos:line="30" pos:column="57">()<pos:position pos:line="30" pos:column="59"/></argument_list></call><operator pos:line="30" pos:column="59">.<pos:position pos:line="30" pos:column="60"/></operator><call><name pos:line="30" pos:column="60">c_str<pos:position pos:line="30" pos:column="65"/></name><argument_list pos:line="30" pos:column="65">()<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="69"/></expr_stmt></block></then></if>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if> <comment type="line" pos:line="32" pos:column="7">// TODO: else warn (occasionally!) if we got libecap::metaNextServices</comment>

    <comment type="line" pos:line="34" pos:column="5">// Store received meta headers for adapt::&lt;last_h logformat code use.</comment>
    <comment type="line" pos:line="35" pos:column="5">// If we already have stored headers from a previous adaptation transaction</comment>
    <comment type="line" pos:line="36" pos:column="5">// related to the same master transction, they will be replaced.</comment>
    <decl_stmt><decl><type><name><name pos:line="37" pos:column="5">Adaptation<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">::<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">History<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">::<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="26">Pointer<pos:position pos:line="37" pos:column="33"/></name></name></type> <name pos:line="37" pos:column="34">ah<pos:position pos:line="37" pos:column="36"/></name> <init pos:line="37" pos:column="37">= <expr><call><name><name pos:line="37" pos:column="39">request<pos:position pos:line="37" pos:column="46"/></name><operator pos:line="37" pos:column="46">-&gt;<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="48">adaptLogHistory<pos:position pos:line="37" pos:column="63"/></name></name><argument_list pos:line="37" pos:column="63">()<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="66"/></decl_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">ah<pos:position pos:line="38" pos:column="11"/></name> <operator pos:line="38" pos:column="12">!=<pos:position pos:line="38" pos:column="14"/></operator> <name pos:line="38" pos:column="15">NULL<pos:position pos:line="38" pos:column="19"/></name></expr>)<pos:position pos:line="38" pos:column="20"/></condition><then pos:line="38" pos:column="20"> <block pos:line="38" pos:column="21">{
        <decl_stmt><decl><type><name pos:line="39" pos:column="9">HttpHeader<pos:position pos:line="39" pos:column="19"/></name></type> <name pos:line="39" pos:column="20">meta<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">hoReply<pos:position pos:line="39" pos:column="32"/></name></expr></argument>)<pos:position pos:line="39" pos:column="33"/></argument_list></decl>;<pos:position pos:line="39" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">OptionsExtractor<pos:position pos:line="40" pos:column="25"/></name></type> <name pos:line="40" pos:column="26">extractor<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name pos:line="40" pos:column="36">meta<pos:position pos:line="40" pos:column="40"/></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></decl>;<pos:position pos:line="40" pos:column="42"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="41" pos:column="9">theMaster<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">-&gt;<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="20">visitEachOption<pos:position pos:line="41" pos:column="35"/></name></name><argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">extractor<pos:position pos:line="41" pos:column="45"/></name></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="42" pos:column="9">ah<pos:position pos:line="42" pos:column="11"/></name><operator pos:line="42" pos:column="11">-&gt;<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="13">recordMeta<pos:position pos:line="42" pos:column="23"/></name></name><argument_list pos:line="42" pos:column="23">(<argument><expr><operator pos:line="42" pos:column="24">&amp;<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="25">meta<pos:position pos:line="42" pos:column="29"/></name></expr></argument>)<pos:position pos:line="42" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="45" pos:column="5">// Add just-created history to the adapted/cloned request that lacks it.</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<decl><type><name pos:line="46" pos:column="9">HttpRequest<pos:position pos:line="46" pos:column="20"/></name> <modifier pos:line="46" pos:column="21">*<pos:position pos:line="46" pos:column="22"/></modifier></type><name pos:line="46" pos:column="22">adaptedReq<pos:position pos:line="46" pos:column="32"/></name> <init pos:line="46" pos:column="33">= <expr><cast type="dynamic" pos:line="46" pos:column="35">dynamic_cast<argument_list type="generic" pos:line="46" pos:column="47">&lt;<argument><expr><name pos:line="46" pos:column="48">HttpRequest<pos:position pos:line="46" pos:column="59"/></name><operator pos:line="46" pos:column="59">*<pos:position pos:line="46" pos:column="60"/></operator></expr></argument>&gt;<pos:position pos:line="46" pos:column="64"/></argument_list><argument_list pos:line="46" pos:column="61">(<argument><expr><name pos:line="46" pos:column="62">adapted<pos:position pos:line="46" pos:column="69"/></name></expr></argument>)<pos:position pos:line="46" pos:column="70"/></argument_list></cast></expr></init></decl>)<pos:position pos:line="46" pos:column="71"/></condition><then pos:line="46" pos:column="71">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="47" pos:column="9">adaptedReq<pos:position pos:line="47" pos:column="19"/></name><operator pos:line="47" pos:column="19">-&gt;<pos:position pos:line="47" pos:column="24"/></operator><name pos:line="47" pos:column="21">adaptHistoryImport<pos:position pos:line="47" pos:column="39"/></name></name><argument_list pos:line="47" pos:column="39">(<argument><expr><operator pos:line="47" pos:column="40">*<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="41">request<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt></block></then></if>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
