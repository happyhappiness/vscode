<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4867_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">startWriting<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">()<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">theFile<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">!=<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><call><name><name pos:line="5" pos:column="13">theBuf<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">.<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">isNull<pos:position pos:line="5" pos:column="26"/></name></name><argument_list pos:line="5" pos:column="26">()<pos:position pos:line="5" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// TODO: if DiskIO module is mmap-based, we should be writing whole pages</comment>
    <comment type="line" pos:line="8" pos:column="5">// to avoid triggering read-page;new_head+old_tail;write-page overheads</comment>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">79<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">5<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="19">HERE<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&lt;&lt;<pos:position pos:line="10" pos:column="32"/></operator> <name pos:line="10" pos:column="27">swap_filen<pos:position pos:line="10" pos:column="37"/></name> <operator pos:line="10" pos:column="38">&lt;&lt;<pos:position pos:line="10" pos:column="46"/></operator> <literal type="string" pos:line="10" pos:column="41">" at "<pos:position pos:line="10" pos:column="47"/></literal> <operator pos:line="10" pos:column="48">&lt;&lt;<pos:position pos:line="10" pos:column="56"/></operator> <name pos:line="10" pos:column="51">diskOffset<pos:position pos:line="10" pos:column="61"/></name> <operator pos:line="10" pos:column="62">&lt;&lt;<pos:position pos:line="10" pos:column="70"/></operator> <literal type="char" pos:line="10" pos:column="65">'+'<pos:position pos:line="10" pos:column="68"/></literal> <operator pos:line="10" pos:column="69">&lt;&lt;<pos:position pos:line="10" pos:column="77"/></operator>
           <call><name><name pos:line="11" pos:column="12">theBuf<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">.<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="19">contentSize<pos:position pos:line="11" pos:column="30"/></name></name><argument_list pos:line="11" pos:column="30">()<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><call><name><name pos:line="13" pos:column="12">theBuf<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">contentSize<pos:position pos:line="13" pos:column="30"/></name></name><argument_list pos:line="13" pos:column="30">()<pos:position pos:line="13" pos:column="32"/></argument_list></call> <operator pos:line="13" pos:column="33">&lt;=<pos:position pos:line="13" pos:column="38"/></operator> <name pos:line="13" pos:column="36">slotSize<pos:position pos:line="13" pos:column="44"/></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
    <comment type="line" pos:line="14" pos:column="5">// theFile-&gt;write may call writeCompleted immediatelly</comment>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">theFile<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">write<pos:position pos:line="15" pos:column="19"/></name></name><argument_list pos:line="15" pos:column="19">(<argument><expr><operator pos:line="15" pos:column="20">new<pos:position pos:line="15" pos:column="23"/></operator> <call><name pos:line="15" pos:column="24">WriteRequest<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><call><name><operator pos:line="15" pos:column="37">::<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">WriteRequest<pos:position pos:line="15" pos:column="51"/></name></name><argument_list pos:line="15" pos:column="51">(<argument><expr><call><name><name pos:line="15" pos:column="52">theBuf<pos:position pos:line="15" pos:column="58"/></name><operator pos:line="15" pos:column="58">.<pos:position pos:line="15" pos:column="59"/></operator><name pos:line="15" pos:column="59">content<pos:position pos:line="15" pos:column="66"/></name></name><argument_list pos:line="15" pos:column="66">()<pos:position pos:line="15" pos:column="68"/></argument_list></call></expr></argument>,
                                    <argument><expr><name pos:line="16" pos:column="37">diskOffset<pos:position pos:line="16" pos:column="47"/></name></expr></argument>, <argument><expr><call><name><name pos:line="16" pos:column="49">theBuf<pos:position pos:line="16" pos:column="55"/></name><operator pos:line="16" pos:column="55">.<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="56">contentSize<pos:position pos:line="16" pos:column="67"/></name></name><argument_list pos:line="16" pos:column="67">()<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="16" pos:column="71">theBuf<pos:position pos:line="16" pos:column="77"/></name><operator pos:line="16" pos:column="77">.<pos:position pos:line="16" pos:column="78"/></operator><name pos:line="16" pos:column="78">freeFunc<pos:position pos:line="16" pos:column="86"/></name></name><argument_list pos:line="16" pos:column="86">()<pos:position pos:line="16" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="89"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="91">this<pos:position pos:line="16" pos:column="95"/></name></expr></argument>)<pos:position pos:line="16" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="98"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
