<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1209_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">GoIntoBackground<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">()<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">pid_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">pid<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">(<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">pid<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">=<pos:position pos:line="5" pos:column="15"/></operator> <call><name pos:line="5" pos:column="16">fork<pos:position pos:line="5" pos:column="20"/></name><argument_list pos:line="5" pos:column="20">()<pos:position pos:line="5" pos:column="22"/></argument_list></call><operator pos:line="5" pos:column="22">)<pos:position pos:line="5" pos:column="23"/></operator> <operator pos:line="5" pos:column="24">&lt;<pos:position pos:line="5" pos:column="28"/></operator> <literal type="number" pos:line="5" pos:column="26">0<pos:position pos:line="5" pos:column="27"/></literal></expr>)<pos:position pos:line="5" pos:column="28"/></condition><then pos:line="5" pos:column="28"> <block pos:line="5" pos:column="29">{
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">xerrno<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name pos:line="6" pos:column="22">errno<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">syslog<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">LOG_ALERT<pos:position pos:line="7" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="27">"fork failed: %s"<pos:position pos:line="7" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="46">xstrerr<pos:position pos:line="7" pos:column="53"/></name><argument_list pos:line="7" pos:column="53">(<argument><expr><name pos:line="7" pos:column="54">xerrno<pos:position pos:line="7" pos:column="60"/></name></expr></argument>)<pos:position pos:line="7" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="63"/></expr_stmt>
        <comment type="line" pos:line="8" pos:column="9">// continue anyway, mimicking --foreground mode (XXX?)</comment>
    }<pos:position pos:line="9" pos:column="6"/></block></then> <elseif pos:line="9" pos:column="7">else <if pos:line="9" pos:column="12">if <condition pos:line="9" pos:column="15">(<expr><name pos:line="9" pos:column="16">pid<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">&gt;<pos:position pos:line="9" pos:column="24"/></operator> <literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24"> <block pos:line="9" pos:column="25">{
        <comment type="line" pos:line="10" pos:column="9">// parent</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">exit<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><name pos:line="11" pos:column="14">EXIT_SUCCESS<pos:position pos:line="11" pos:column="26"/></name></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if></elseif></if>
    <comment type="line" pos:line="13" pos:column="5">// child, running as a background daemon (or a failed-to-fork parent)</comment>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
