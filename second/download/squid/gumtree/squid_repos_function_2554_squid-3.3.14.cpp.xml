<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2554_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FtpStateData<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">ftpAcceptDataConnection<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">(<parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">CommAcceptCbParams<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">&amp;<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="65">io<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">9<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="24"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">EBIT_TEST<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name><name pos:line="6" pos:column="19">entry<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">-&gt;<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="26">flags<pos:position pos:line="6" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="33">ENTRY_ABORTED<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="48"/></condition><then pos:line="6" pos:column="48"> <block pos:line="6" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">abortTransaction<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><literal type="string" pos:line="7" pos:column="26">"entry aborted when accepting data conn"<pos:position pos:line="7" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">data<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">.<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">listenConn<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">close<pos:position pos:line="8" pos:column="31"/></name></name><argument_list pos:line="8" pos:column="31">()<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">data<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">.<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">listenConn<pos:position pos:line="9" pos:column="24"/></name></name> <operator pos:line="9" pos:column="25">=<pos:position pos:line="9" pos:column="26"/></operator> <name pos:line="9" pos:column="27">NULL<pos:position pos:line="9" pos:column="31"/></name></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">io<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">.<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="12">flag<pos:position pos:line="13" pos:column="16"/></name></name> <operator pos:line="13" pos:column="17">!=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">COMM_OK<pos:position pos:line="13" pos:column="27"/></name></expr>)<pos:position pos:line="13" pos:column="28"/></condition><then pos:line="13" pos:column="28"> <block pos:line="13" pos:column="29">{
        <expr_stmt><expr><call><name><name pos:line="14" pos:column="9">data<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">.<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">listenConn<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">close<pos:position pos:line="14" pos:column="31"/></name></name><argument_list pos:line="14" pos:column="31">()<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">data<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">.<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">listenConn<pos:position pos:line="15" pos:column="24"/></name></name> <operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="27">NULL<pos:position pos:line="15" pos:column="31"/></name></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">9<pos:position pos:line="16" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="19">DBG_IMPORTANT<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="34">"FTP AcceptDataConnection: "<pos:position pos:line="16" pos:column="62"/></literal> <operator pos:line="16" pos:column="63">&lt;&lt;<pos:position pos:line="16" pos:column="71"/></operator> <name><name pos:line="16" pos:column="66">io<pos:position pos:line="16" pos:column="68"/></name><operator pos:line="16" pos:column="68">.<pos:position pos:line="16" pos:column="69"/></operator><name pos:line="16" pos:column="69">conn<pos:position pos:line="16" pos:column="73"/></name></name> <operator pos:line="16" pos:column="74">&lt;&lt;<pos:position pos:line="16" pos:column="82"/></operator> <literal type="string" pos:line="16" pos:column="77">": "<pos:position pos:line="16" pos:column="81"/></literal> <operator pos:line="16" pos:column="82">&lt;&lt;<pos:position pos:line="16" pos:column="90"/></operator> <call><name pos:line="16" pos:column="85">xstrerr<pos:position pos:line="16" pos:column="92"/></name><argument_list pos:line="16" pos:column="92">(<argument><expr><name><name pos:line="16" pos:column="93">io<pos:position pos:line="16" pos:column="95"/></name><operator pos:line="16" pos:column="95">.<pos:position pos:line="16" pos:column="96"/></operator><name pos:line="16" pos:column="96">xerrno<pos:position pos:line="16" pos:column="102"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="103"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="105"/></expr_stmt>
        <comment type="block" format="doxygen" pos:line="17" pos:column="9">/** \todo Need to send error message on control channel*/</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">ftpFail<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">this<pos:position pos:line="18" pos:column="21"/></name></expr></argument>)<pos:position pos:line="18" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="22" pos:column="5">/* data listening conn is no longer even open. abort. */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><call><name><name pos:line="23" pos:column="10">Comm<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">::<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="16">IsConnOpen<pos:position pos:line="23" pos:column="26"/></name></name><argument_list pos:line="23" pos:column="26">(<argument><expr><name><name pos:line="23" pos:column="27">data<pos:position pos:line="23" pos:column="31"/></name><operator pos:line="23" pos:column="31">.<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">listenConn<pos:position pos:line="23" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="44"/></condition><then pos:line="23" pos:column="44"> <block pos:line="23" pos:column="45">{
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">data<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">.<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">listenConn<pos:position pos:line="24" pos:column="24"/></name></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">NULL<pos:position pos:line="24" pos:column="31"/></name></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt> <comment type="line" pos:line="24" pos:column="33">// ensure that it's cleared and not just closed.</comment>
        <return pos:line="25" pos:column="9">return;<pos:position pos:line="25" pos:column="16"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="28" pos:column="5">/* data listening conn is no longer even open. abort. */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">!<pos:position pos:line="29" pos:column="10"/></operator><call><name><name pos:line="29" pos:column="10">Comm<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">::<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">IsConnOpen<pos:position pos:line="29" pos:column="26"/></name></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name><name pos:line="29" pos:column="27">data<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">.<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">conn<pos:position pos:line="29" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="38"/></condition><then pos:line="29" pos:column="38"> <block pos:line="29" pos:column="39">{
        <expr_stmt><expr><call><name><name pos:line="30" pos:column="9">data<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">.<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">clear<pos:position pos:line="30" pos:column="19"/></name></name><argument_list pos:line="30" pos:column="19">()<pos:position pos:line="30" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt> <comment type="line" pos:line="30" pos:column="23">// ensure that it's cleared and not just closed.</comment>
        <return pos:line="31" pos:column="9">return;<pos:position pos:line="31" pos:column="16"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="34" pos:column="5">/** \par
     * When squid.conf ftp_sanitycheck is enabled, check the new connection is actually being
     * made by the remote client which is connected to the FTP control socket.
     * Or the one which we were told to listen for by control channel messages (may differ under NAT).
     * This prevents third-party hacks, but also third-party load balancing handshakes.
     */</comment>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name><name pos:line="40" pos:column="9">Config<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">.<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="16">Ftp<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">.<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="20">sanitycheck<pos:position pos:line="40" pos:column="31"/></name></name></expr>)<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32"> <block pos:line="40" pos:column="33">{
        <comment type="line" pos:line="41" pos:column="9">// accept if either our data or ctrl connection is talking to this remote peer.</comment>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">data<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">.<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">conn<pos:position pos:line="42" pos:column="22"/></name><operator pos:line="42" pos:column="22">-&gt;<pos:position pos:line="42" pos:column="27"/></operator><name pos:line="42" pos:column="24">remote<pos:position pos:line="42" pos:column="30"/></name></name> <operator pos:line="42" pos:column="31">!=<pos:position pos:line="42" pos:column="33"/></operator> <name><name pos:line="42" pos:column="34">io<pos:position pos:line="42" pos:column="36"/></name><operator pos:line="42" pos:column="36">.<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="37">conn<pos:position pos:line="42" pos:column="41"/></name><operator pos:line="42" pos:column="41">-&gt;<pos:position pos:line="42" pos:column="46"/></operator><name pos:line="42" pos:column="43">remote<pos:position pos:line="42" pos:column="49"/></name></name> <operator pos:line="42" pos:column="50">&amp;&amp;<pos:position pos:line="42" pos:column="60"/></operator> <name><name pos:line="42" pos:column="53">ctrl<pos:position pos:line="42" pos:column="57"/></name><operator pos:line="42" pos:column="57">.<pos:position pos:line="42" pos:column="58"/></operator><name pos:line="42" pos:column="58">conn<pos:position pos:line="42" pos:column="62"/></name><operator pos:line="42" pos:column="62">-&gt;<pos:position pos:line="42" pos:column="67"/></operator><name pos:line="42" pos:column="64">remote<pos:position pos:line="42" pos:column="70"/></name></name> <operator pos:line="42" pos:column="71">!=<pos:position pos:line="42" pos:column="73"/></operator> <name><name pos:line="42" pos:column="74">io<pos:position pos:line="42" pos:column="76"/></name><operator pos:line="42" pos:column="76">.<pos:position pos:line="42" pos:column="77"/></operator><name pos:line="42" pos:column="77">conn<pos:position pos:line="42" pos:column="81"/></name><operator pos:line="42" pos:column="81">-&gt;<pos:position pos:line="42" pos:column="86"/></operator><name pos:line="42" pos:column="83">remote<pos:position pos:line="42" pos:column="89"/></name></name></expr>)<pos:position pos:line="42" pos:column="90"/></condition><then pos:line="42" pos:column="90"> <block pos:line="42" pos:column="91">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">debugs<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><literal type="number" pos:line="43" pos:column="20">9<pos:position pos:line="43" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="23">DBG_IMPORTANT<pos:position pos:line="43" pos:column="36"/></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="44" pos:column="20">"FTP data connection from unexpected server ("<pos:position pos:line="44" pos:column="66"/></literal> <operator pos:line="44" pos:column="67">&lt;&lt;<pos:position pos:line="44" pos:column="75"/></operator>
                   <name><name pos:line="45" pos:column="20">io<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">.<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">conn<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">-&gt;<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="29">remote<pos:position pos:line="45" pos:column="35"/></name></name> <operator pos:line="45" pos:column="36">&lt;&lt;<pos:position pos:line="45" pos:column="44"/></operator> <literal type="string" pos:line="45" pos:column="39">"), expecting "<pos:position pos:line="45" pos:column="54"/></literal> <operator pos:line="45" pos:column="55">&lt;&lt;<pos:position pos:line="45" pos:column="63"/></operator>
                   <name><name pos:line="46" pos:column="20">data<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">.<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="25">conn<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">-&gt;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="31">remote<pos:position pos:line="46" pos:column="37"/></name></name> <operator pos:line="46" pos:column="38">&lt;&lt;<pos:position pos:line="46" pos:column="46"/></operator> <literal type="string" pos:line="46" pos:column="41">" or "<pos:position pos:line="46" pos:column="47"/></literal> <operator pos:line="46" pos:column="48">&lt;&lt;<pos:position pos:line="46" pos:column="56"/></operator> <name><name pos:line="46" pos:column="51">ctrl<pos:position pos:line="46" pos:column="55"/></name><operator pos:line="46" pos:column="55">.<pos:position pos:line="46" pos:column="56"/></operator><name pos:line="46" pos:column="56">conn<pos:position pos:line="46" pos:column="60"/></name><operator pos:line="46" pos:column="60">-&gt;<pos:position pos:line="46" pos:column="65"/></operator><name pos:line="46" pos:column="62">remote<pos:position pos:line="46" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="70"/></expr_stmt>

            <comment type="block" pos:line="48" pos:column="13">/* close the bad sources connection down ASAP. */</comment>
            <expr_stmt><expr><call><name><name pos:line="49" pos:column="13">io<pos:position pos:line="49" pos:column="15"/></name><operator pos:line="49" pos:column="15">.<pos:position pos:line="49" pos:column="16"/></operator><name pos:line="49" pos:column="16">conn<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">-&gt;<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="22">close<pos:position pos:line="49" pos:column="27"/></name></name><argument_list pos:line="49" pos:column="27">()<pos:position pos:line="49" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>

            <comment type="block" pos:line="51" pos:column="13">/* drop the bad connection (io) by ignoring the attempt. */</comment>
            <return pos:line="52" pos:column="13">return;<pos:position pos:line="52" pos:column="20"/></return>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="56" pos:column="5">/** On COMM_OK start using the accepted data socket and discard the temporary listen socket. */</comment>
    <expr_stmt><expr><call><name><name pos:line="57" pos:column="5">data<pos:position pos:line="57" pos:column="9"/></name><operator pos:line="57" pos:column="9">.<pos:position pos:line="57" pos:column="10"/></operator><name pos:line="57" pos:column="10">close<pos:position pos:line="57" pos:column="15"/></name></name><argument_list pos:line="57" pos:column="15">()<pos:position pos:line="57" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="58" pos:column="5">data<pos:position pos:line="58" pos:column="9"/></name><operator pos:line="58" pos:column="9">.<pos:position pos:line="58" pos:column="10"/></operator><name pos:line="58" pos:column="10">opened<pos:position pos:line="58" pos:column="16"/></name></name><argument_list pos:line="58" pos:column="16">(<argument><expr><name><name pos:line="58" pos:column="17">io<pos:position pos:line="58" pos:column="19"/></name><operator pos:line="58" pos:column="19">.<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="20">conn<pos:position pos:line="58" pos:column="24"/></name></name></expr></argument>, <argument><expr><call><name pos:line="58" pos:column="26">dataCloser<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">()<pos:position pos:line="58" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="58" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="40"/></expr_stmt>
    <decl_stmt><decl><specifier pos:line="59" pos:column="5">static<pos:position pos:line="59" pos:column="11"/></specifier> <type><name pos:line="59" pos:column="12">char<pos:position pos:line="59" pos:column="16"/></name></type> <name><name pos:line="59" pos:column="17">ntoapeer<pos:position pos:line="59" pos:column="25"/></name><index pos:line="59" pos:column="25">[<expr><name pos:line="59" pos:column="26">MAX_IPSTRLEN<pos:position pos:line="59" pos:column="38"/></name></expr>]<pos:position pos:line="59" pos:column="39"/></index></name></decl>;<pos:position pos:line="59" pos:column="40"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="60" pos:column="5">io<pos:position pos:line="60" pos:column="7"/></name><operator pos:line="60" pos:column="7">.<pos:position pos:line="60" pos:column="8"/></operator><name pos:line="60" pos:column="8">conn<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">-&gt;<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="14">remote<pos:position pos:line="60" pos:column="20"/></name><operator pos:line="60" pos:column="20">.<pos:position pos:line="60" pos:column="21"/></operator><name pos:line="60" pos:column="21">NtoA<pos:position pos:line="60" pos:column="25"/></name></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">ntoapeer<pos:position pos:line="60" pos:column="34"/></name></expr></argument>,<argument><expr><sizeof pos:line="60" pos:column="35">sizeof<argument_list pos:line="60" pos:column="41">(<argument><expr><name pos:line="60" pos:column="42">ntoapeer<pos:position pos:line="60" pos:column="50"/></name></expr></argument>)<pos:position pos:line="60" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">data<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">.<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">host<pos:position pos:line="61" pos:column="14"/></name></name> <operator pos:line="61" pos:column="15">=<pos:position pos:line="61" pos:column="16"/></operator> <call><name pos:line="61" pos:column="17">xstrdup<pos:position pos:line="61" pos:column="24"/></name><argument_list pos:line="61" pos:column="24">(<argument><expr><name pos:line="61" pos:column="25">ntoapeer<pos:position pos:line="61" pos:column="33"/></name></expr></argument>)<pos:position pos:line="61" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="63" pos:column="5">debugs<pos:position pos:line="63" pos:column="11"/></name><argument_list pos:line="63" pos:column="11">(<argument><expr><literal type="number" pos:line="63" pos:column="12">9<pos:position pos:line="63" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="15">3<pos:position pos:line="63" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="18">HERE<pos:position pos:line="63" pos:column="22"/></name> <operator pos:line="63" pos:column="23">&lt;&lt;<pos:position pos:line="63" pos:column="31"/></operator> <literal type="string" pos:line="63" pos:column="26">"Connected data socket on "<pos:position pos:line="63" pos:column="53"/></literal> <operator pos:line="63" pos:column="54">&lt;&lt;<pos:position pos:line="63" pos:column="62"/></operator>
           <name><name pos:line="64" pos:column="12">io<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">.<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="15">conn<pos:position pos:line="64" pos:column="19"/></name></name> <operator pos:line="64" pos:column="20">&lt;&lt;<pos:position pos:line="64" pos:column="28"/></operator> <literal type="string" pos:line="64" pos:column="23">". FD table says: "<pos:position pos:line="64" pos:column="42"/></literal> <operator pos:line="64" pos:column="43">&lt;&lt;<pos:position pos:line="64" pos:column="51"/></operator>
           <literal type="string" pos:line="65" pos:column="12">"ctrl-peer= "<pos:position pos:line="65" pos:column="25"/></literal> <operator pos:line="65" pos:column="26">&lt;&lt;<pos:position pos:line="65" pos:column="34"/></operator> <name><name pos:line="65" pos:column="29">fd_table<pos:position pos:line="65" pos:column="37"/></name><index pos:line="65" pos:column="37">[<expr><name><name pos:line="65" pos:column="38">ctrl<pos:position pos:line="65" pos:column="42"/></name><operator pos:line="65" pos:column="42">.<pos:position pos:line="65" pos:column="43"/></operator><name pos:line="65" pos:column="43">conn<pos:position pos:line="65" pos:column="47"/></name><operator pos:line="65" pos:column="47">-&gt;<pos:position pos:line="65" pos:column="52"/></operator><name pos:line="65" pos:column="49">fd<pos:position pos:line="65" pos:column="51"/></name></name></expr>]<pos:position pos:line="65" pos:column="52"/></index></name><operator pos:line="65" pos:column="52">.<pos:position pos:line="65" pos:column="53"/></operator><name pos:line="65" pos:column="53">ipaddr<pos:position pos:line="65" pos:column="59"/></name> <operator pos:line="65" pos:column="60">&lt;&lt;<pos:position pos:line="65" pos:column="68"/></operator> <literal type="string" pos:line="65" pos:column="63">", "<pos:position pos:line="65" pos:column="67"/></literal> <operator pos:line="65" pos:column="68">&lt;&lt;<pos:position pos:line="65" pos:column="76"/></operator>
           <literal type="string" pos:line="66" pos:column="12">"data-peer= "<pos:position pos:line="66" pos:column="25"/></literal> <operator pos:line="66" pos:column="26">&lt;&lt;<pos:position pos:line="66" pos:column="34"/></operator> <name><name pos:line="66" pos:column="29">fd_table<pos:position pos:line="66" pos:column="37"/></name><index pos:line="66" pos:column="37">[<expr><name><name pos:line="66" pos:column="38">data<pos:position pos:line="66" pos:column="42"/></name><operator pos:line="66" pos:column="42">.<pos:position pos:line="66" pos:column="43"/></operator><name pos:line="66" pos:column="43">conn<pos:position pos:line="66" pos:column="47"/></name><operator pos:line="66" pos:column="47">-&gt;<pos:position pos:line="66" pos:column="52"/></operator><name pos:line="66" pos:column="49">fd<pos:position pos:line="66" pos:column="51"/></name></name></expr>]<pos:position pos:line="66" pos:column="52"/></index></name><operator pos:line="66" pos:column="52">.<pos:position pos:line="66" pos:column="53"/></operator><name pos:line="66" pos:column="53">ipaddr<pos:position pos:line="66" pos:column="59"/></name></expr></argument>)<pos:position pos:line="66" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="61"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">assert<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><call><name pos:line="68" pos:column="12">haveControlChannel<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><literal type="string" pos:line="68" pos:column="31">"ftpAcceptDataConnection"<pos:position pos:line="68" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">assert<pos:position pos:line="69" pos:column="11"/></name><argument_list pos:line="69" pos:column="11">(<argument><expr><name><name pos:line="69" pos:column="12">ctrl<pos:position pos:line="69" pos:column="16"/></name><operator pos:line="69" pos:column="16">.<pos:position pos:line="69" pos:column="17"/></operator><name pos:line="69" pos:column="17">message<pos:position pos:line="69" pos:column="24"/></name></name> <operator pos:line="69" pos:column="25">==<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="28">NULL<pos:position pos:line="69" pos:column="32"/></name></expr></argument>)<pos:position pos:line="69" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="34"/></expr_stmt>

    <comment type="line" pos:line="71" pos:column="5">// Ctrl channel operations will determine what happens to this data connection</comment>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
