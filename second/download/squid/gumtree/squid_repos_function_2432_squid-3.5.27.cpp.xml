<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2432_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">httpHeaderQuoteString<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">raw<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">raw<pos:position pos:line="4" pos:column="15"/></name></expr></argument>)<pos:position pos:line="4" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// TODO: Optimize by appending a sequence of characters instead of a char.</comment>
    <comment type="line" pos:line="7" pos:column="5">// This optimization may be easier with Tokenizer after raw becomes SBuf.</comment>

    <comment type="line" pos:line="9" pos:column="5">// RFC 7230 says a "sender SHOULD NOT generate a quoted-pair in a</comment>
    <comment type="line" pos:line="10" pos:column="5">// quoted-string except where necessary" (i.e., DQUOTE and backslash)</comment>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">bool<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">needInnerQuote<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><literal type="boolean" pos:line="11" pos:column="27">false<pos:position pos:line="11" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>
    <for pos:line="12" pos:column="5">for <control pos:line="12" pos:column="9">(<init><decl><type><specifier pos:line="12" pos:column="10">const<pos:position pos:line="12" pos:column="15"/></specifier> <name pos:line="12" pos:column="16">char<pos:position pos:line="12" pos:column="20"/></name> <modifier pos:line="12" pos:column="21">*<pos:position pos:line="12" pos:column="22"/></modifier></type><name pos:line="12" pos:column="22">s<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name pos:line="12" pos:column="26">raw<pos:position pos:line="12" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="30"/></init> <condition><expr><operator pos:line="12" pos:column="31">!<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="32">needInnerQuote<pos:position pos:line="12" pos:column="46"/></name> <operator pos:line="12" pos:column="47">&amp;&amp;<pos:position pos:line="12" pos:column="57"/></operator>  <operator pos:line="12" pos:column="51">*<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="52">s<pos:position pos:line="12" pos:column="53"/></name></expr>;<pos:position pos:line="12" pos:column="54"/></condition> <incr><expr><operator pos:line="12" pos:column="55">++<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="57">s<pos:position pos:line="12" pos:column="58"/></name></expr></incr>)<pos:position pos:line="12" pos:column="59"/></control>
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">needInnerQuote<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <operator pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">s<pos:position pos:line="13" pos:column="28"/></name> <operator pos:line="13" pos:column="29">==<pos:position pos:line="13" pos:column="31"/></operator> <literal type="char" pos:line="13" pos:column="32">'"'<pos:position pos:line="13" pos:column="35"/></literal> <operator pos:line="13" pos:column="36">||<pos:position pos:line="13" pos:column="38"/></operator> <operator pos:line="13" pos:column="39">*<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="40">s<pos:position pos:line="13" pos:column="41"/></name> <operator pos:line="13" pos:column="42">==<pos:position pos:line="13" pos:column="44"/></operator> <literal type="char" pos:line="13" pos:column="45">'\\'<pos:position pos:line="13" pos:column="49"/></literal></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt></block></for>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">SBuf<pos:position pos:line="15" pos:column="9"/></name></type> <name pos:line="15" pos:column="10">quotedStr<pos:position pos:line="15" pos:column="19"/></name></decl>;<pos:position pos:line="15" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">quotedStr<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">.<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">append<pos:position pos:line="16" pos:column="21"/></name></name><argument_list pos:line="16" pos:column="21">(<argument><expr><literal type="char" pos:line="16" pos:column="22">'"'<pos:position pos:line="16" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">needInnerQuote<pos:position pos:line="18" pos:column="23"/></name></expr>)<pos:position pos:line="18" pos:column="24"/></condition><then pos:line="18" pos:column="24"> <block pos:line="18" pos:column="25">{
        <for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init><decl><type><specifier pos:line="19" pos:column="14">const<pos:position pos:line="19" pos:column="19"/></specifier> <name pos:line="19" pos:column="20">char<pos:position pos:line="19" pos:column="24"/></name> <modifier pos:line="19" pos:column="25">*<pos:position pos:line="19" pos:column="26"/></modifier></type><name pos:line="19" pos:column="26">s<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><name pos:line="19" pos:column="30">raw<pos:position pos:line="19" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="34"/></init> <condition><expr><operator pos:line="19" pos:column="35">*<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="36">s<pos:position pos:line="19" pos:column="37"/></name></expr>;<pos:position pos:line="19" pos:column="38"/></condition> <incr><expr><operator pos:line="19" pos:column="39">++<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="41">s<pos:position pos:line="19" pos:column="42"/></name></expr></incr>)<pos:position pos:line="19" pos:column="43"/></control> <block pos:line="19" pos:column="44">{
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><operator pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">s<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">==<pos:position pos:line="20" pos:column="22"/></operator> <literal type="char" pos:line="20" pos:column="23">'"'<pos:position pos:line="20" pos:column="26"/></literal> <operator pos:line="20" pos:column="27">||<pos:position pos:line="20" pos:column="29"/></operator> <operator pos:line="20" pos:column="30">*<pos:position pos:line="20" pos:column="31"/></operator><name pos:line="20" pos:column="31">s<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">==<pos:position pos:line="20" pos:column="35"/></operator> <literal type="char" pos:line="20" pos:column="36">'\\'<pos:position pos:line="20" pos:column="40"/></literal></expr>)<pos:position pos:line="20" pos:column="41"/></condition><then pos:line="20" pos:column="41">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="21" pos:column="17">quotedStr<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">.<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="27">append<pos:position pos:line="21" pos:column="33"/></name></name><argument_list pos:line="21" pos:column="33">(<argument><expr><literal type="char" pos:line="21" pos:column="34">'\\'<pos:position pos:line="21" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name pos:line="22" pos:column="13">quotedStr<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">.<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">append<pos:position pos:line="22" pos:column="29"/></name></name><argument_list pos:line="22" pos:column="29">(<argument><expr><operator pos:line="22" pos:column="30">*<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="31">s<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></for>
    }<pos:position pos:line="24" pos:column="6"/></block></then> <else pos:line="24" pos:column="7">else <block pos:line="24" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="25" pos:column="9">quotedStr<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">.<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">append<pos:position pos:line="25" pos:column="25"/></name></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">raw<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">quotedStr<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">.<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">append<pos:position pos:line="28" pos:column="21"/></name></name><argument_list pos:line="28" pos:column="21">(<argument><expr><literal type="char" pos:line="28" pos:column="22">'"'<pos:position pos:line="28" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="27"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">quotedStr<pos:position pos:line="29" pos:column="21"/></name></expr>;<pos:position pos:line="29" pos:column="22"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
