<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1463_squid-3.5.27.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">size_type<pos:position pos:line="1" pos:column="16"/></name></name></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">rfind<pos:position pos:line="2" pos:column="12"/></name></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">char<pos:position pos:line="2" pos:column="17"/></name></type> <name pos:line="2" pos:column="18">c<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="21">SBuf<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">size_type<pos:position pos:line="2" pos:column="36"/></name></name></type> <name pos:line="2" pos:column="37">endPos<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list> <specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><operator pos:line="4" pos:column="5">++<pos:position pos:line="4" pos:column="7"/></operator><name><name pos:line="4" pos:column="7">stats<pos:position pos:line="4" pos:column="12"/></name><operator pos:line="4" pos:column="12">.<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">find<pos:position pos:line="4" pos:column="17"/></name></name></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// shortcut: haystack is empty, can't find anything by definition</comment>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">length<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">()<pos:position pos:line="7" pos:column="17"/></argument_list></call> <operator pos:line="7" pos:column="18">==<pos:position pos:line="7" pos:column="20"/></operator> <literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><name pos:line="8" pos:column="16">npos<pos:position pos:line="8" pos:column="20"/></name></expr>;<pos:position pos:line="8" pos:column="21"/></return></block></then></if>

    <comment type="line" pos:line="10" pos:column="5">// on npos input std::string compares last octet of hay</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">endPos<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">==<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">npos<pos:position pos:line="11" pos:column="23"/></name> <operator pos:line="11" pos:column="24">||<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">endPos<pos:position pos:line="11" pos:column="33"/></name> <operator pos:line="11" pos:column="34">&gt;=<pos:position pos:line="11" pos:column="39"/></operator> <call><name pos:line="11" pos:column="37">length<pos:position pos:line="11" pos:column="43"/></name><argument_list pos:line="11" pos:column="43">()<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="46"/></condition><then pos:line="11" pos:column="46"> <block pos:line="11" pos:column="47">{
        <expr_stmt><expr><name pos:line="12" pos:column="9">endPos<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <call><name pos:line="12" pos:column="18">length<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">()<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <comment type="line" pos:line="14" pos:column="9">// NP: off-by-one weirdness:</comment>
        <comment type="line" pos:line="15" pos:column="9">// endPos is an offset ... 0-based</comment>
        <comment type="line" pos:line="16" pos:column="9">// length() is a count ... 1-based</comment>
        <comment type="line" pos:line="17" pos:column="9">// memrhr() requires a 1-based count of space to scan.</comment>
        <expr_stmt><expr><operator pos:line="18" pos:column="9">++<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">endPos<pos:position pos:line="18" pos:column="17"/></name></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></else></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">length<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">()<pos:position pos:line="21" pos:column="17"/></argument_list></call> <operator pos:line="21" pos:column="18">==<pos:position pos:line="21" pos:column="20"/></operator> <literal type="number" pos:line="21" pos:column="21">0<pos:position pos:line="21" pos:column="22"/></literal></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23">
        <block type="pseudo"><return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">endPos<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="24" pos:column="5">const<pos:position pos:line="24" pos:column="10"/></specifier> <name pos:line="24" pos:column="11">void<pos:position pos:line="24" pos:column="15"/></name> <modifier pos:line="24" pos:column="16">*<pos:position pos:line="24" pos:column="17"/></modifier></type><name pos:line="24" pos:column="17">i<pos:position pos:line="24" pos:column="18"/></name> <init pos:line="24" pos:column="19">= <expr><call><name pos:line="24" pos:column="21">memrchr<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><call><name pos:line="24" pos:column="29">buf<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">()<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="24" pos:column="36">(<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="37">int<pos:position pos:line="24" pos:column="40"/></name><operator pos:line="24" pos:column="40">)<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="41">c<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="44">(<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="45">size_type<pos:position pos:line="24" pos:column="54"/></name><operator pos:line="24" pos:column="54">)<pos:position pos:line="24" pos:column="55"/></operator><name pos:line="24" pos:column="55">endPos<pos:position pos:line="24" pos:column="61"/></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="63"/></decl_stmt>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">i<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">==<pos:position pos:line="26" pos:column="13"/></operator> <name pos:line="26" pos:column="14">NULL<pos:position pos:line="26" pos:column="18"/></name></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19">
        <block type="pseudo"><return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">npos<pos:position pos:line="27" pos:column="20"/></name></expr>;<pos:position pos:line="27" pos:column="21"/></return></block></then></if>

    <return pos:line="29" pos:column="5">return <expr><operator pos:line="29" pos:column="12">(<pos:position pos:line="29" pos:column="13"/></operator><cast type="static" pos:line="29" pos:column="13">static_cast<argument_list type="generic" pos:line="29" pos:column="24">&lt;<argument><expr><specifier pos:line="29" pos:column="25">const<pos:position pos:line="29" pos:column="30"/></specifier> <name pos:line="29" pos:column="31">char<pos:position pos:line="29" pos:column="35"/></name> <operator pos:line="29" pos:column="36">*<pos:position pos:line="29" pos:column="37"/></operator></expr></argument>&gt;<pos:position pos:line="29" pos:column="41"/></argument_list><argument_list pos:line="29" pos:column="38">(<argument><expr><name pos:line="29" pos:column="39">i<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></cast><operator pos:line="29" pos:column="41">-<pos:position pos:line="29" pos:column="42"/></operator><call><name pos:line="29" pos:column="42">buf<pos:position pos:line="29" pos:column="45"/></name><argument_list pos:line="29" pos:column="45">()<pos:position pos:line="29" pos:column="47"/></argument_list></call><operator pos:line="29" pos:column="47">)<pos:position pos:line="29" pos:column="48"/></operator></expr>;<pos:position pos:line="29" pos:column="49"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
