<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1420_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">mainInitialize<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">void<pos:position pos:line="2" pos:column="20"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* chroot if configured to run inside chroot */</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">Config<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">.<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">chroot_dir<pos:position pos:line="6" pos:column="26"/></name></name> <operator pos:line="6" pos:column="27">&amp;&amp;<pos:position pos:line="6" pos:column="37"/></operator> <operator pos:line="6" pos:column="30">(<pos:position pos:line="6" pos:column="31"/></operator><call><name pos:line="6" pos:column="31">chroot<pos:position pos:line="6" pos:column="37"/></name><argument_list pos:line="6" pos:column="37">(<argument><expr><name><name pos:line="6" pos:column="38">Config<pos:position pos:line="6" pos:column="44"/></name><operator pos:line="6" pos:column="44">.<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="45">chroot_dir<pos:position pos:line="6" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call> <operator pos:line="6" pos:column="57">!=<pos:position pos:line="6" pos:column="59"/></operator> <literal type="number" pos:line="6" pos:column="60">0<pos:position pos:line="6" pos:column="61"/></literal> <operator pos:line="6" pos:column="62">||<pos:position pos:line="6" pos:column="64"/></operator> <call><name pos:line="6" pos:column="65">chdir<pos:position pos:line="6" pos:column="70"/></name><argument_list pos:line="6" pos:column="70">(<argument><expr><literal type="string" pos:line="6" pos:column="71">"/"<pos:position pos:line="6" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="75"/></argument_list></call> <operator pos:line="6" pos:column="76">!=<pos:position pos:line="6" pos:column="78"/></operator> <literal type="number" pos:line="6" pos:column="79">0<pos:position pos:line="6" pos:column="80"/></literal><operator pos:line="6" pos:column="80">)<pos:position pos:line="6" pos:column="81"/></operator></expr>)<pos:position pos:line="6" pos:column="82"/></condition><then pos:line="6" pos:column="82"> <block pos:line="6" pos:column="83">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">fatal<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><literal type="string" pos:line="7" pos:column="15">"failed to chroot"<pos:position pos:line="7" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">opt_catch_signals<pos:position pos:line="10" pos:column="26"/></name></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27"> <block pos:line="10" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">squid_signal<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">SIGSEGV<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">death<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">SA_NODEFER<pos:position pos:line="11" pos:column="48"/></name> <operator pos:line="11" pos:column="49">|<pos:position pos:line="11" pos:column="50"/></operator> <name pos:line="11" pos:column="51">SA_RESETHAND<pos:position pos:line="11" pos:column="63"/></name></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">squid_signal<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">SIGBUS<pos:position pos:line="12" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="30">death<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="37">SA_NODEFER<pos:position pos:line="12" pos:column="47"/></name> <operator pos:line="12" pos:column="48">|<pos:position pos:line="12" pos:column="49"/></operator> <name pos:line="12" pos:column="50">SA_RESETHAND<pos:position pos:line="12" pos:column="62"/></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">squid_signal<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">SIGPIPE<pos:position pos:line="15" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="27">SIG_IGN<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">SA_RESTART<pos:position pos:line="15" pos:column="46"/></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">squid_signal<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">SIGCHLD<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="27">sig_child<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">SA_NODEFER<pos:position pos:line="16" pos:column="48"/></name> <operator pos:line="16" pos:column="49">|<pos:position pos:line="16" pos:column="50"/></operator> <name pos:line="16" pos:column="51">SA_RESTART<pos:position pos:line="16" pos:column="61"/></name></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="63"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">setEffectiveUser<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">()<pos:position pos:line="18" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">icpPortNumOverride<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">!=<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="31">1<pos:position pos:line="20" pos:column="32"/></literal></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="9">Config<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">.<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">Port<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">.<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="21">icp<pos:position pos:line="21" pos:column="24"/></name></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <operator pos:line="21" pos:column="27">(<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">unsigned<pos:position pos:line="21" pos:column="36"/></name> <name pos:line="21" pos:column="37">short<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">)<pos:position pos:line="21" pos:column="43"/></operator> <name pos:line="21" pos:column="44">icpPortNumOverride<pos:position pos:line="21" pos:column="62"/></name></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">_db_init<pos:position pos:line="23" pos:column="13"/></name><argument_list pos:line="23" pos:column="13">(<argument><expr><name><name pos:line="23" pos:column="14">Debug<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">::<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">cache_log<pos:position pos:line="23" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="32">Debug<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">::<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="39">debugOptions<pos:position pos:line="23" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">fd_open<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><call><name pos:line="25" pos:column="13">fileno<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">debug_log<pos:position pos:line="25" pos:column="29"/></name></expr></argument>)<pos:position pos:line="25" pos:column="30"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="32">FD_LOG<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="40">Debug<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">::<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="47">cache_log<pos:position pos:line="25" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>

<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><name pos:line="27" pos:column="5">MEM_GEN_TRACE<pos:position pos:line="27" pos:column="18"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">log_trace_init<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><literal type="string" pos:line="29" pos:column="20">"/tmp/squid.alloc"<pos:position pos:line="29" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>

<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">debugs<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><literal type="number" pos:line="33" pos:column="12">1<pos:position pos:line="33" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="15">0<pos:position pos:line="33" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="18">"Starting Squid Cache version "<pos:position pos:line="33" pos:column="49"/></literal> <operator pos:line="33" pos:column="50">&lt;&lt;<pos:position pos:line="33" pos:column="58"/></operator> <name pos:line="33" pos:column="53">version_string<pos:position pos:line="33" pos:column="67"/></name> <operator pos:line="33" pos:column="68">&lt;&lt;<pos:position pos:line="33" pos:column="76"/></operator> <literal type="string" pos:line="33" pos:column="71">" for "<pos:position pos:line="33" pos:column="78"/></literal> <operator pos:line="33" pos:column="79">&lt;&lt;<pos:position pos:line="33" pos:column="87"/></operator> <name pos:line="33" pos:column="82">CONFIG_HOST_TYPE<pos:position pos:line="33" pos:column="98"/></name> <operator pos:line="33" pos:column="99">&lt;&lt;<pos:position pos:line="33" pos:column="107"/></operator> <literal type="string" pos:line="33" pos:column="102">"..."<pos:position pos:line="33" pos:column="107"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="109"/></expr_stmt>

<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef<pos:position pos:line="35" pos:column="7"/></cpp:directive> <name pos:line="35" pos:column="8">_SQUID_WIN32_<pos:position pos:line="35" pos:column="21"/></name></cpp:ifdef>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">WIN32_run_mode<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">==<pos:position pos:line="37" pos:column="26"/></operator> <name pos:line="37" pos:column="27">_WIN_SQUID_RUN_MODE_SERVICE<pos:position pos:line="37" pos:column="54"/></name></expr>)<pos:position pos:line="37" pos:column="55"/></condition><then pos:line="37" pos:column="55"> <block pos:line="37" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">debugs<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="number" pos:line="38" pos:column="16">1<pos:position pos:line="38" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="19">0<pos:position pos:line="38" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="22">"Running as "<pos:position pos:line="38" pos:column="35"/></literal> <operator pos:line="38" pos:column="36">&lt;&lt;<pos:position pos:line="38" pos:column="44"/></operator> <name pos:line="38" pos:column="39">WIN32_Service_name<pos:position pos:line="38" pos:column="57"/></name> <operator pos:line="38" pos:column="58">&lt;&lt;<pos:position pos:line="38" pos:column="66"/></operator> <literal type="string" pos:line="38" pos:column="61">" Windows System Service on "<pos:position pos:line="38" pos:column="90"/></literal> <operator pos:line="38" pos:column="91">&lt;&lt;<pos:position pos:line="38" pos:column="99"/></operator> <name pos:line="38" pos:column="94">WIN32_OS_string<pos:position pos:line="38" pos:column="109"/></name></expr></argument>)<pos:position pos:line="38" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="111"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">1<pos:position pos:line="39" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="19">0<pos:position pos:line="39" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="22">"Service command line is: "<pos:position pos:line="39" pos:column="49"/></literal> <operator pos:line="39" pos:column="50">&lt;&lt;<pos:position pos:line="39" pos:column="58"/></operator> <name pos:line="39" pos:column="53">WIN32_Service_Command_Line<pos:position pos:line="39" pos:column="79"/></name></expr></argument>)<pos:position pos:line="39" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then> <else pos:line="40" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="9">debugs<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><literal type="number" pos:line="41" pos:column="16">1<pos:position pos:line="41" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="19">0<pos:position pos:line="41" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="22">"Running on "<pos:position pos:line="41" pos:column="35"/></literal> <operator pos:line="41" pos:column="36">&lt;&lt;<pos:position pos:line="41" pos:column="44"/></operator> <name pos:line="41" pos:column="39">WIN32_OS_string<pos:position pos:line="41" pos:column="54"/></name></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="56"/></expr_stmt></block></else></if>

<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="45" pos:column="5">debugs<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><literal type="number" pos:line="45" pos:column="12">1<pos:position pos:line="45" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="15">1<pos:position pos:line="45" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="18">"Process ID "<pos:position pos:line="45" pos:column="31"/></literal> <operator pos:line="45" pos:column="32">&lt;&lt;<pos:position pos:line="45" pos:column="40"/></operator> <call><name pos:line="45" pos:column="35">getpid<pos:position pos:line="45" pos:column="41"/></name><argument_list pos:line="45" pos:column="41">()<pos:position pos:line="45" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">setSystemLimits<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">()<pos:position pos:line="46" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">debugs<pos:position pos:line="47" pos:column="11"/></name><argument_list pos:line="47" pos:column="11">(<argument><expr><literal type="number" pos:line="47" pos:column="12">1<pos:position pos:line="47" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="15">1<pos:position pos:line="47" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="18">"With "<pos:position pos:line="47" pos:column="25"/></literal> <operator pos:line="47" pos:column="26">&lt;&lt;<pos:position pos:line="47" pos:column="34"/></operator> <name pos:line="47" pos:column="29">Squid_MaxFD<pos:position pos:line="47" pos:column="40"/></name> <operator pos:line="47" pos:column="41">&lt;&lt;<pos:position pos:line="47" pos:column="49"/></operator> <literal type="string" pos:line="47" pos:column="44">" file descriptors available"<pos:position pos:line="47" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="75"/></expr_stmt>

<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="49" pos:column="21"/></name></cpp:ifdef>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">debugs<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><literal type="number" pos:line="51" pos:column="12">1<pos:position pos:line="51" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="15">1<pos:position pos:line="51" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="18">"With "<pos:position pos:line="51" pos:column="25"/></literal> <operator pos:line="51" pos:column="26">&lt;&lt;<pos:position pos:line="51" pos:column="34"/></operator> <call><name pos:line="51" pos:column="29">_getmaxstdio<pos:position pos:line="51" pos:column="41"/></name><argument_list pos:line="51" pos:column="41">()<pos:position pos:line="51" pos:column="43"/></argument_list></call> <operator pos:line="51" pos:column="44">&lt;&lt;<pos:position pos:line="51" pos:column="52"/></operator> <literal type="string" pos:line="51" pos:column="47">" CRT stdio descriptors available"<pos:position pos:line="51" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="83"/></expr_stmt>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">WIN32_Socks_initialized<pos:position pos:line="53" pos:column="32"/></name></expr>)<pos:position pos:line="53" pos:column="33"/></condition><then pos:line="53" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="9">debugs<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><literal type="number" pos:line="54" pos:column="16">1<pos:position pos:line="54" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="19">1<pos:position pos:line="54" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="22">"Windows sockets initialized"<pos:position pos:line="54" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="53"/></expr_stmt></block></then></if>

    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">WIN32_OS_version<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">&gt;<pos:position pos:line="56" pos:column="30"/></operator> <name pos:line="56" pos:column="28">_WIN_OS_WINNT<pos:position pos:line="56" pos:column="41"/></name></expr>)<pos:position pos:line="56" pos:column="42"/></condition><then pos:line="56" pos:column="42"> <block pos:line="56" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">WIN32_IpAddrChangeMonitorInit<pos:position pos:line="57" pos:column="38"/></name><argument_list pos:line="57" pos:column="38">()<pos:position pos:line="57" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><operator pos:line="62" pos:column="9">!<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">configured_once<pos:position pos:line="62" pos:column="25"/></name></expr>)<pos:position pos:line="62" pos:column="26"/></condition><then pos:line="62" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="63" pos:column="9">disk_init<pos:position pos:line="63" pos:column="18"/></name><argument_list pos:line="63" pos:column="18">()<pos:position pos:line="63" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="21"/></expr_stmt></block></then></if>		<comment type="block" pos:line="63" pos:column="33">/* disk_init must go before ipcache_init() */</comment>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">ipcache_init<pos:position pos:line="65" pos:column="17"/></name><argument_list pos:line="65" pos:column="17">()<pos:position pos:line="65" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="67" pos:column="5">fqdncache_init<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">()<pos:position pos:line="67" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">parseEtcHosts<pos:position pos:line="69" pos:column="18"/></name><argument_list pos:line="69" pos:column="18">()<pos:position pos:line="69" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="21"/></expr_stmt>

<cpp:if pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">if<pos:position pos:line="71" pos:column="4"/></cpp:directive> <expr><name pos:line="71" pos:column="5">USE_DNSSERVERS<pos:position pos:line="71" pos:column="19"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="73" pos:column="5">dnsInit<pos:position pos:line="73" pos:column="12"/></name><argument_list pos:line="73" pos:column="12">()<pos:position pos:line="73" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="15"/></expr_stmt>

<cpp:else pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">else<pos:position pos:line="75" pos:column="6"/></cpp:directive></cpp:else>

    <expr_stmt><expr><call><name pos:line="77" pos:column="5">idnsInit<pos:position pos:line="77" pos:column="13"/></name><argument_list pos:line="77" pos:column="13">()<pos:position pos:line="77" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="16"/></expr_stmt>

<cpp:endif pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">endif<pos:position pos:line="79" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="81" pos:column="5">redirectInit<pos:position pos:line="81" pos:column="17"/></name><argument_list pos:line="81" pos:column="17">()<pos:position pos:line="81" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="83" pos:column="5">authenticateInit<pos:position pos:line="83" pos:column="21"/></name><argument_list pos:line="83" pos:column="21">(<argument><expr><operator pos:line="83" pos:column="22">&amp;<pos:position pos:line="83" pos:column="27"/></operator><name><name pos:line="83" pos:column="23">Config<pos:position pos:line="83" pos:column="29"/></name><operator pos:line="83" pos:column="29">.<pos:position pos:line="83" pos:column="30"/></operator><name pos:line="83" pos:column="30">authConfiguration<pos:position pos:line="83" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="49"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="85" pos:column="5">externalAclInit<pos:position pos:line="85" pos:column="20"/></name><argument_list pos:line="85" pos:column="20">()<pos:position pos:line="85" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="87" pos:column="5">useragentOpenLog<pos:position pos:line="87" pos:column="21"/></name><argument_list pos:line="87" pos:column="21">()<pos:position pos:line="87" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="89" pos:column="5">refererOpenLog<pos:position pos:line="89" pos:column="19"/></name><argument_list pos:line="89" pos:column="19">()<pos:position pos:line="89" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="91" pos:column="5">httpHeaderInitModule<pos:position pos:line="91" pos:column="25"/></name><argument_list pos:line="91" pos:column="25">()<pos:position pos:line="91" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="28"/></expr_stmt>	<comment type="block" pos:line="91" pos:column="33">/* must go before any header processing (e.g. the one in errorInitialize) */</comment>

    <expr_stmt><expr><call><name pos:line="93" pos:column="5">httpReplyInitModule<pos:position pos:line="93" pos:column="24"/></name><argument_list pos:line="93" pos:column="24">()<pos:position pos:line="93" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="27"/></expr_stmt>	<comment type="block" pos:line="93" pos:column="33">/* must go before accepting replies */</comment>

    <expr_stmt><expr><call><name pos:line="95" pos:column="5">errorInitialize<pos:position pos:line="95" pos:column="20"/></name><argument_list pos:line="95" pos:column="20">()<pos:position pos:line="95" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="97" pos:column="5">accessLogInit<pos:position pos:line="97" pos:column="18"/></name><argument_list pos:line="97" pos:column="18">()<pos:position pos:line="97" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="21"/></expr_stmt>

<cpp:if pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">if<pos:position pos:line="99" pos:column="4"/></cpp:directive> <expr><name pos:line="99" pos:column="5">ICAP_CLIENT<pos:position pos:line="99" pos:column="16"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="100" pos:column="5">icapLogOpen<pos:position pos:line="100" pos:column="16"/></name><argument_list pos:line="100" pos:column="16">()<pos:position pos:line="100" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="19"/></expr_stmt>
<cpp:endif pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">endif<pos:position pos:line="101" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="103" pos:column="1">#<cpp:directive pos:line="103" pos:column="2">if<pos:position pos:line="103" pos:column="4"/></cpp:directive> <expr><name pos:line="103" pos:column="5">USE_IDENT<pos:position pos:line="103" pos:column="14"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="104" pos:column="5">Ident<pos:position pos:line="104" pos:column="10"/></name><operator pos:line="104" pos:column="10">::<pos:position pos:line="104" pos:column="12"/></operator><name pos:line="104" pos:column="12">Init<pos:position pos:line="104" pos:column="16"/></name></name><argument_list pos:line="104" pos:column="16">()<pos:position pos:line="104" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="19"/></expr_stmt>
<cpp:endif pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">endif<pos:position pos:line="105" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">ifdef<pos:position pos:line="107" pos:column="7"/></cpp:directive> <name pos:line="107" pos:column="8">SQUID_SNMP<pos:position pos:line="107" pos:column="18"/></name></cpp:ifdef>

    <expr_stmt><expr><call><name pos:line="109" pos:column="5">snmpInit<pos:position pos:line="109" pos:column="13"/></name><argument_list pos:line="109" pos:column="13">()<pos:position pos:line="109" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="16"/></expr_stmt>

<cpp:endif pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">endif<pos:position pos:line="111" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">if<pos:position pos:line="112" pos:column="4"/></cpp:directive> <expr><name pos:line="112" pos:column="5">MALLOC_DBG<pos:position pos:line="112" pos:column="15"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="114" pos:column="5">malloc_debug<pos:position pos:line="114" pos:column="17"/></name><argument_list pos:line="114" pos:column="17">(<argument><expr><literal type="number" pos:line="114" pos:column="18">0<pos:position pos:line="114" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="21">malloc_debug_level<pos:position pos:line="114" pos:column="39"/></name></expr></argument>)<pos:position pos:line="114" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="41"/></expr_stmt>

<cpp:endif pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">endif<pos:position pos:line="116" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="118" pos:column="5">if <condition pos:line="118" pos:column="8">(<expr><operator pos:line="118" pos:column="9">!<pos:position pos:line="118" pos:column="10"/></operator><name pos:line="118" pos:column="10">configured_once<pos:position pos:line="118" pos:column="25"/></name></expr>)<pos:position pos:line="118" pos:column="26"/></condition><then pos:line="118" pos:column="26"> <block pos:line="118" pos:column="27">{
<cpp:if pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">if<pos:position pos:line="119" pos:column="4"/></cpp:directive> <expr><name pos:line="119" pos:column="5">USE_UNLINKD<pos:position pos:line="119" pos:column="16"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="120" pos:column="9">unlinkdInit<pos:position pos:line="120" pos:column="20"/></name><argument_list pos:line="120" pos:column="20">()<pos:position pos:line="120" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">endif<pos:position pos:line="121" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="123" pos:column="9">urlInitialize<pos:position pos:line="123" pos:column="22"/></name><argument_list pos:line="123" pos:column="22">()<pos:position pos:line="123" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="124" pos:column="9">statInit<pos:position pos:line="124" pos:column="17"/></name><argument_list pos:line="124" pos:column="17">()<pos:position pos:line="124" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="125" pos:column="9">storeInit<pos:position pos:line="125" pos:column="18"/></name><argument_list pos:line="125" pos:column="18">()<pos:position pos:line="125" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">mainSetCwd<pos:position pos:line="126" pos:column="19"/></name><argument_list pos:line="126" pos:column="19">()<pos:position pos:line="126" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="22"/></expr_stmt>
        <comment type="block" pos:line="127" pos:column="9">/* after this point we want to see the mallinfo() output */</comment>
        <expr_stmt><expr><name pos:line="128" pos:column="9">do_mallinfo<pos:position pos:line="128" pos:column="20"/></name> <operator pos:line="128" pos:column="21">=<pos:position pos:line="128" pos:column="22"/></operator> <literal type="number" pos:line="128" pos:column="23">1<pos:position pos:line="128" pos:column="24"/></literal></expr>;<pos:position pos:line="128" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="129" pos:column="9">mimeInit<pos:position pos:line="129" pos:column="17"/></name><argument_list pos:line="129" pos:column="17">(<argument><expr><name><name pos:line="129" pos:column="18">Config<pos:position pos:line="129" pos:column="24"/></name><operator pos:line="129" pos:column="24">.<pos:position pos:line="129" pos:column="25"/></operator><name pos:line="129" pos:column="25">mimeTablePathname<pos:position pos:line="129" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="130" pos:column="9">refreshInit<pos:position pos:line="130" pos:column="20"/></name><argument_list pos:line="130" pos:column="20">()<pos:position pos:line="130" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="23"/></expr_stmt>
<cpp:if pos:line="131" pos:column="1">#<cpp:directive pos:line="131" pos:column="2">if<pos:position pos:line="131" pos:column="4"/></cpp:directive> <expr><name pos:line="131" pos:column="5">DELAY_POOLS<pos:position pos:line="131" pos:column="16"/></name></expr></cpp:if>

        <expr_stmt><expr><call><name><name pos:line="133" pos:column="9">DelayPools<pos:position pos:line="133" pos:column="19"/></name><operator pos:line="133" pos:column="19">::<pos:position pos:line="133" pos:column="21"/></operator><name pos:line="133" pos:column="21">Init<pos:position pos:line="133" pos:column="25"/></name></name><argument_list pos:line="133" pos:column="25">()<pos:position pos:line="133" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="134" pos:column="1">#<cpp:directive pos:line="134" pos:column="2">endif<pos:position pos:line="134" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name><name pos:line="136" pos:column="9">FwdState<pos:position pos:line="136" pos:column="17"/></name><operator pos:line="136" pos:column="17">::<pos:position pos:line="136" pos:column="19"/></operator><name pos:line="136" pos:column="19">initModule<pos:position pos:line="136" pos:column="29"/></name></name><argument_list pos:line="136" pos:column="29">()<pos:position pos:line="136" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="32"/></expr_stmt>
        <comment type="block" pos:line="137" pos:column="9">/* register the modules in the cache manager menus */</comment>

        <expr_stmt><expr><call><name pos:line="139" pos:column="9">cbdataRegisterWithCacheManager<pos:position pos:line="139" pos:column="39"/></name><argument_list pos:line="139" pos:column="39">()<pos:position pos:line="139" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="42"/></expr_stmt>
        <comment type="block" pos:line="140" pos:column="9">/* These use separate calls so that the comm loops can eventually
         * coexist.
         */</comment>

        <expr_stmt><expr><call><name pos:line="144" pos:column="9">eventInit<pos:position pos:line="144" pos:column="18"/></name><argument_list pos:line="144" pos:column="18">()<pos:position pos:line="144" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="21"/></expr_stmt>

        <comment type="line" pos:line="146" pos:column="9">// TODO: pconn is a good candidate for new-style registration</comment>
        <comment type="line" pos:line="147" pos:column="9">// PconnModule::GetInstance()-&gt;registerWithCacheManager();</comment>
        <comment type="line" pos:line="148" pos:column="9">//   moved to PconnModule::PconnModule()</comment>
    }<pos:position pos:line="149" pos:column="6"/></block></then></if>

<cpp:if pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">if<pos:position pos:line="151" pos:column="4"/></cpp:directive> <expr><name pos:line="151" pos:column="5">USE_WCCP<pos:position pos:line="151" pos:column="13"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="152" pos:column="5">wccpInit<pos:position pos:line="152" pos:column="13"/></name><argument_list pos:line="152" pos:column="13">()<pos:position pos:line="152" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="16"/></expr_stmt>

<cpp:endif pos:line="154" pos:column="1">#<cpp:directive pos:line="154" pos:column="2">endif<pos:position pos:line="154" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="155" pos:column="1">#<cpp:directive pos:line="155" pos:column="2">if<pos:position pos:line="155" pos:column="4"/></cpp:directive> <expr><name pos:line="155" pos:column="5">USE_WCCPv2<pos:position pos:line="155" pos:column="15"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="157" pos:column="5">wccp2Init<pos:position pos:line="157" pos:column="14"/></name><argument_list pos:line="157" pos:column="14">()<pos:position pos:line="157" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="17"/></expr_stmt>

<cpp:endif pos:line="159" pos:column="1">#<cpp:directive pos:line="159" pos:column="2">endif<pos:position pos:line="159" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="161" pos:column="5">serverConnectionsOpen<pos:position pos:line="161" pos:column="26"/></name><argument_list pos:line="161" pos:column="26">()<pos:position pos:line="161" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="163" pos:column="5">neighbors_init<pos:position pos:line="163" pos:column="19"/></name><argument_list pos:line="163" pos:column="19">()<pos:position pos:line="163" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="22"/></expr_stmt>

    <comment type="line" pos:line="165" pos:column="5">// neighborsRegisterWithCacheManager(); //moved to neighbors_init()</comment>

    <if pos:line="167" pos:column="5">if <condition pos:line="167" pos:column="8">(<expr><name><name pos:line="167" pos:column="9">Config<pos:position pos:line="167" pos:column="15"/></name><operator pos:line="167" pos:column="15">.<pos:position pos:line="167" pos:column="16"/></operator><name pos:line="167" pos:column="16">chroot_dir<pos:position pos:line="167" pos:column="26"/></name></name></expr>)<pos:position pos:line="167" pos:column="27"/></condition><then pos:line="167" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="168" pos:column="9">no_suid<pos:position pos:line="168" pos:column="16"/></name><argument_list pos:line="168" pos:column="16">()<pos:position pos:line="168" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="19"/></expr_stmt></block></then></if>

    <if pos:line="170" pos:column="5">if <condition pos:line="170" pos:column="8">(<expr><operator pos:line="170" pos:column="9">!<pos:position pos:line="170" pos:column="10"/></operator><name pos:line="170" pos:column="10">configured_once<pos:position pos:line="170" pos:column="25"/></name></expr>)<pos:position pos:line="170" pos:column="26"/></condition><then pos:line="170" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="171" pos:column="9">writePidFile<pos:position pos:line="171" pos:column="21"/></name><argument_list pos:line="171" pos:column="21">()<pos:position pos:line="171" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="24"/></expr_stmt></block></then></if>		<comment type="block" pos:line="171" pos:column="33">/* write PID file */</comment>

<cpp:ifdef pos:line="173" pos:column="1">#<cpp:directive pos:line="173" pos:column="2">ifdef<pos:position pos:line="173" pos:column="7"/></cpp:directive> <name pos:line="173" pos:column="8">_SQUID_LINUX_THREADS_<pos:position pos:line="173" pos:column="29"/></name></cpp:ifdef>

    <expr_stmt><expr><call><name pos:line="175" pos:column="5">squid_signal<pos:position pos:line="175" pos:column="17"/></name><argument_list pos:line="175" pos:column="17">(<argument><expr><name pos:line="175" pos:column="18">SIGQUIT<pos:position pos:line="175" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="27">rotate_logs<pos:position pos:line="175" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="40">SA_RESTART<pos:position pos:line="175" pos:column="50"/></name></expr></argument>)<pos:position pos:line="175" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="177" pos:column="5">squid_signal<pos:position pos:line="177" pos:column="17"/></name><argument_list pos:line="177" pos:column="17">(<argument><expr><name pos:line="177" pos:column="18">SIGTRAP<pos:position pos:line="177" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="27">sigusr2_handle<pos:position pos:line="177" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="43">SA_RESTART<pos:position pos:line="177" pos:column="53"/></name></expr></argument>)<pos:position pos:line="177" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="55"/></expr_stmt>

<cpp:else pos:line="179" pos:column="1">#<cpp:directive pos:line="179" pos:column="2">else<pos:position pos:line="179" pos:column="6"/></cpp:directive></cpp:else>

    <expr_stmt><expr><call><name pos:line="181" pos:column="5">squid_signal<pos:position pos:line="181" pos:column="17"/></name><argument_list pos:line="181" pos:column="17">(<argument><expr><name pos:line="181" pos:column="18">SIGUSR1<pos:position pos:line="181" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="27">rotate_logs<pos:position pos:line="181" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="40">SA_RESTART<pos:position pos:line="181" pos:column="50"/></name></expr></argument>)<pos:position pos:line="181" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="183" pos:column="5">squid_signal<pos:position pos:line="183" pos:column="17"/></name><argument_list pos:line="183" pos:column="17">(<argument><expr><name pos:line="183" pos:column="18">SIGUSR2<pos:position pos:line="183" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="27">sigusr2_handle<pos:position pos:line="183" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="43">SA_RESTART<pos:position pos:line="183" pos:column="53"/></name></expr></argument>)<pos:position pos:line="183" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="55"/></expr_stmt>

<cpp:endif pos:line="185" pos:column="1">#<cpp:directive pos:line="185" pos:column="2">endif<pos:position pos:line="185" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="187" pos:column="5">squid_signal<pos:position pos:line="187" pos:column="17"/></name><argument_list pos:line="187" pos:column="17">(<argument><expr><name pos:line="187" pos:column="18">SIGHUP<pos:position pos:line="187" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="26">reconfigure<pos:position pos:line="187" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="39">SA_RESTART<pos:position pos:line="187" pos:column="49"/></name></expr></argument>)<pos:position pos:line="187" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="189" pos:column="5">squid_signal<pos:position pos:line="189" pos:column="17"/></name><argument_list pos:line="189" pos:column="17">(<argument><expr><name pos:line="189" pos:column="18">SIGTERM<pos:position pos:line="189" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="27">shut_down<pos:position pos:line="189" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="38">SA_NODEFER<pos:position pos:line="189" pos:column="48"/></name> <operator pos:line="189" pos:column="49">|<pos:position pos:line="189" pos:column="50"/></operator> <name pos:line="189" pos:column="51">SA_RESETHAND<pos:position pos:line="189" pos:column="63"/></name> <operator pos:line="189" pos:column="64">|<pos:position pos:line="189" pos:column="65"/></operator> <name pos:line="189" pos:column="66">SA_RESTART<pos:position pos:line="189" pos:column="76"/></name></expr></argument>)<pos:position pos:line="189" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="78"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="191" pos:column="5">squid_signal<pos:position pos:line="191" pos:column="17"/></name><argument_list pos:line="191" pos:column="17">(<argument><expr><name pos:line="191" pos:column="18">SIGINT<pos:position pos:line="191" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="26">shut_down<pos:position pos:line="191" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="37">SA_NODEFER<pos:position pos:line="191" pos:column="47"/></name> <operator pos:line="191" pos:column="48">|<pos:position pos:line="191" pos:column="49"/></operator> <name pos:line="191" pos:column="50">SA_RESETHAND<pos:position pos:line="191" pos:column="62"/></name> <operator pos:line="191" pos:column="63">|<pos:position pos:line="191" pos:column="64"/></operator> <name pos:line="191" pos:column="65">SA_RESTART<pos:position pos:line="191" pos:column="75"/></name></expr></argument>)<pos:position pos:line="191" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="77"/></expr_stmt>

<cpp:ifdef pos:line="193" pos:column="1">#<cpp:directive pos:line="193" pos:column="2">ifdef<pos:position pos:line="193" pos:column="7"/></cpp:directive> <name pos:line="193" pos:column="8">SIGTTIN<pos:position pos:line="193" pos:column="15"/></name></cpp:ifdef>

    <expr_stmt><expr><call><name pos:line="195" pos:column="5">squid_signal<pos:position pos:line="195" pos:column="17"/></name><argument_list pos:line="195" pos:column="17">(<argument><expr><name pos:line="195" pos:column="18">SIGTTIN<pos:position pos:line="195" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="27">shut_down<pos:position pos:line="195" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="195" pos:column="38">SA_NODEFER<pos:position pos:line="195" pos:column="48"/></name> <operator pos:line="195" pos:column="49">|<pos:position pos:line="195" pos:column="50"/></operator> <name pos:line="195" pos:column="51">SA_RESETHAND<pos:position pos:line="195" pos:column="63"/></name> <operator pos:line="195" pos:column="64">|<pos:position pos:line="195" pos:column="65"/></operator> <name pos:line="195" pos:column="66">SA_RESTART<pos:position pos:line="195" pos:column="76"/></name></expr></argument>)<pos:position pos:line="195" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="78"/></expr_stmt>

<cpp:endif pos:line="197" pos:column="1">#<cpp:directive pos:line="197" pos:column="2">endif<pos:position pos:line="197" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="199" pos:column="5">memCheckInit<pos:position pos:line="199" pos:column="17"/></name><argument_list pos:line="199" pos:column="17">()<pos:position pos:line="199" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="20"/></expr_stmt>

<cpp:if pos:line="201" pos:column="1">#<cpp:directive pos:line="201" pos:column="2">if<pos:position pos:line="201" pos:column="4"/></cpp:directive> <expr><name pos:line="201" pos:column="5">USE_LOADABLE_MODULES<pos:position pos:line="201" pos:column="25"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="202" pos:column="5">LoadableModulesConfigure<pos:position pos:line="202" pos:column="29"/></name><argument_list pos:line="202" pos:column="29">(<argument><expr><name><name pos:line="202" pos:column="30">Config<pos:position pos:line="202" pos:column="36"/></name><operator pos:line="202" pos:column="36">.<pos:position pos:line="202" pos:column="37"/></operator><name pos:line="202" pos:column="37">loadable_module_names<pos:position pos:line="202" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="202" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="203" pos:column="1">#<cpp:directive pos:line="203" pos:column="2">endif<pos:position pos:line="203" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="205" pos:column="1">#<cpp:directive pos:line="205" pos:column="2">if<pos:position pos:line="205" pos:column="4"/></cpp:directive> <expr><name pos:line="205" pos:column="5">USE_ADAPTATION<pos:position pos:line="205" pos:column="19"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="206" pos:column="5">bool<pos:position pos:line="206" pos:column="9"/></name></type> <name pos:line="206" pos:column="10">enableAdaptation<pos:position pos:line="206" pos:column="26"/></name> <init pos:line="206" pos:column="27">= <expr><literal type="boolean" pos:line="206" pos:column="29">false<pos:position pos:line="206" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="206" pos:column="35"/></decl_stmt>

    <comment type="line" pos:line="208" pos:column="5">// We can remove this dependency on specific adaptation mechanisms</comment>
    <comment type="line" pos:line="209" pos:column="5">// if we create a generic Registry of such mechanisms. Should we?</comment>
<cpp:if pos:line="210" pos:column="1">#<cpp:directive pos:line="210" pos:column="2">if<pos:position pos:line="210" pos:column="4"/></cpp:directive> <expr><name pos:line="210" pos:column="5">ICAP_CLIENT<pos:position pos:line="210" pos:column="16"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="211" pos:column="5">Adaptation<pos:position pos:line="211" pos:column="15"/></name><operator pos:line="211" pos:column="15">::<pos:position pos:line="211" pos:column="17"/></operator><name pos:line="211" pos:column="17">Icap<pos:position pos:line="211" pos:column="21"/></name><operator pos:line="211" pos:column="21">::<pos:position pos:line="211" pos:column="23"/></operator><name pos:line="211" pos:column="23">TheConfig<pos:position pos:line="211" pos:column="32"/></name><operator pos:line="211" pos:column="32">.<pos:position pos:line="211" pos:column="33"/></operator><name pos:line="211" pos:column="33">finalize<pos:position pos:line="211" pos:column="41"/></name></name><argument_list pos:line="211" pos:column="41">()<pos:position pos:line="211" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="212" pos:column="5">enableAdaptation<pos:position pos:line="212" pos:column="21"/></name> <operator pos:line="212" pos:column="22">=<pos:position pos:line="212" pos:column="23"/></operator> <name><name pos:line="212" pos:column="24">Adaptation<pos:position pos:line="212" pos:column="34"/></name><operator pos:line="212" pos:column="34">::<pos:position pos:line="212" pos:column="36"/></operator><name pos:line="212" pos:column="36">Icap<pos:position pos:line="212" pos:column="40"/></name><operator pos:line="212" pos:column="40">::<pos:position pos:line="212" pos:column="42"/></operator><name pos:line="212" pos:column="42">TheConfig<pos:position pos:line="212" pos:column="51"/></name><operator pos:line="212" pos:column="51">.<pos:position pos:line="212" pos:column="52"/></operator><name pos:line="212" pos:column="52">onoff<pos:position pos:line="212" pos:column="57"/></name></name> <operator pos:line="212" pos:column="58">||<pos:position pos:line="212" pos:column="60"/></operator> <name pos:line="212" pos:column="61">enableAdaptation<pos:position pos:line="212" pos:column="77"/></name></expr>;<pos:position pos:line="212" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="213" pos:column="1">#<cpp:directive pos:line="213" pos:column="2">endif<pos:position pos:line="213" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="214" pos:column="1">#<cpp:directive pos:line="214" pos:column="2">if<pos:position pos:line="214" pos:column="4"/></cpp:directive> <expr><name pos:line="214" pos:column="5">USE_ECAP<pos:position pos:line="214" pos:column="13"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="215" pos:column="5">Adaptation<pos:position pos:line="215" pos:column="15"/></name><operator pos:line="215" pos:column="15">::<pos:position pos:line="215" pos:column="17"/></operator><name pos:line="215" pos:column="17">Ecap<pos:position pos:line="215" pos:column="21"/></name><operator pos:line="215" pos:column="21">::<pos:position pos:line="215" pos:column="23"/></operator><name pos:line="215" pos:column="23">TheConfig<pos:position pos:line="215" pos:column="32"/></name><operator pos:line="215" pos:column="32">.<pos:position pos:line="215" pos:column="33"/></operator><name pos:line="215" pos:column="33">finalize<pos:position pos:line="215" pos:column="41"/></name></name><argument_list pos:line="215" pos:column="41">()<pos:position pos:line="215" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="44"/></expr_stmt> <comment type="line" pos:line="215" pos:column="45">// must be after we load modules</comment>
    <expr_stmt><expr><name pos:line="216" pos:column="5">enableAdaptation<pos:position pos:line="216" pos:column="21"/></name> <operator pos:line="216" pos:column="22">=<pos:position pos:line="216" pos:column="23"/></operator> <name><name pos:line="216" pos:column="24">Adaptation<pos:position pos:line="216" pos:column="34"/></name><operator pos:line="216" pos:column="34">::<pos:position pos:line="216" pos:column="36"/></operator><name pos:line="216" pos:column="36">Ecap<pos:position pos:line="216" pos:column="40"/></name><operator pos:line="216" pos:column="40">::<pos:position pos:line="216" pos:column="42"/></operator><name pos:line="216" pos:column="42">TheConfig<pos:position pos:line="216" pos:column="51"/></name><operator pos:line="216" pos:column="51">.<pos:position pos:line="216" pos:column="52"/></operator><name pos:line="216" pos:column="52">onoff<pos:position pos:line="216" pos:column="57"/></name></name> <operator pos:line="216" pos:column="58">||<pos:position pos:line="216" pos:column="60"/></operator> <name pos:line="216" pos:column="61">enableAdaptation<pos:position pos:line="216" pos:column="77"/></name></expr>;<pos:position pos:line="216" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="217" pos:column="1">#<cpp:directive pos:line="217" pos:column="2">endif<pos:position pos:line="217" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="line" pos:line="218" pos:column="5">// must be the last adaptation-related finalize</comment>
    <expr_stmt><expr><call><name><name pos:line="219" pos:column="5">Adaptation<pos:position pos:line="219" pos:column="15"/></name><operator pos:line="219" pos:column="15">::<pos:position pos:line="219" pos:column="17"/></operator><name pos:line="219" pos:column="17">Config<pos:position pos:line="219" pos:column="23"/></name><operator pos:line="219" pos:column="23">::<pos:position pos:line="219" pos:column="25"/></operator><name pos:line="219" pos:column="25">Finalize<pos:position pos:line="219" pos:column="33"/></name></name><argument_list pos:line="219" pos:column="33">(<argument><expr><name pos:line="219" pos:column="34">enableAdaptation<pos:position pos:line="219" pos:column="50"/></name></expr></argument>)<pos:position pos:line="219" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="220" pos:column="1">#<cpp:directive pos:line="220" pos:column="2">endif<pos:position pos:line="220" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="222" pos:column="1">#<cpp:directive pos:line="222" pos:column="2">if<pos:position pos:line="222" pos:column="4"/></cpp:directive> <expr><name pos:line="222" pos:column="5">USE_SQUID_ESI<pos:position pos:line="222" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="223" pos:column="5">Esi<pos:position pos:line="223" pos:column="8"/></name><operator pos:line="223" pos:column="8">::<pos:position pos:line="223" pos:column="10"/></operator><name pos:line="223" pos:column="10">Init<pos:position pos:line="223" pos:column="14"/></name></name><argument_list pos:line="223" pos:column="14">()<pos:position pos:line="223" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="224" pos:column="1">#<cpp:directive pos:line="224" pos:column="2">endif<pos:position pos:line="224" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="226" pos:column="5">debugs<pos:position pos:line="226" pos:column="11"/></name><argument_list pos:line="226" pos:column="11">(<argument><expr><literal type="number" pos:line="226" pos:column="12">1<pos:position pos:line="226" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="226" pos:column="15">1<pos:position pos:line="226" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="226" pos:column="18">"Ready to serve requests."<pos:position pos:line="226" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="226" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="46"/></expr_stmt>

    <if pos:line="228" pos:column="5">if <condition pos:line="228" pos:column="8">(<expr><operator pos:line="228" pos:column="9">!<pos:position pos:line="228" pos:column="10"/></operator><name pos:line="228" pos:column="10">configured_once<pos:position pos:line="228" pos:column="25"/></name></expr>)<pos:position pos:line="228" pos:column="26"/></condition><then pos:line="228" pos:column="26"> <block pos:line="228" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="229" pos:column="9">eventAdd<pos:position pos:line="229" pos:column="17"/></name><argument_list pos:line="229" pos:column="17">(<argument><expr><literal type="string" pos:line="229" pos:column="18">"storeMaintain"<pos:position pos:line="229" pos:column="33"/></literal></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="35">Store<pos:position pos:line="229" pos:column="40"/></name><operator pos:line="229" pos:column="40">::<pos:position pos:line="229" pos:column="42"/></operator><name pos:line="229" pos:column="42">Maintain<pos:position pos:line="229" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="229" pos:column="52">NULL<pos:position pos:line="229" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="229" pos:column="58">1.0<pos:position pos:line="229" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="229" pos:column="63">1<pos:position pos:line="229" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="229" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="66"/></expr_stmt>

        <if pos:line="231" pos:column="9">if <condition pos:line="231" pos:column="12">(<expr><name><name pos:line="231" pos:column="13">Config<pos:position pos:line="231" pos:column="19"/></name><operator pos:line="231" pos:column="19">.<pos:position pos:line="231" pos:column="20"/></operator><name pos:line="231" pos:column="20">onoff<pos:position pos:line="231" pos:column="25"/></name><operator pos:line="231" pos:column="25">.<pos:position pos:line="231" pos:column="26"/></operator><name pos:line="231" pos:column="26">announce<pos:position pos:line="231" pos:column="34"/></name></name></expr>)<pos:position pos:line="231" pos:column="35"/></condition><then pos:line="231" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="232" pos:column="13">eventAdd<pos:position pos:line="232" pos:column="21"/></name><argument_list pos:line="232" pos:column="21">(<argument><expr><literal type="string" pos:line="232" pos:column="22">"start_announce"<pos:position pos:line="232" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="232" pos:column="40">start_announce<pos:position pos:line="232" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="232" pos:column="56">NULL<pos:position pos:line="232" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="232" pos:column="62">3600.0<pos:position pos:line="232" pos:column="68"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="232" pos:column="70">1<pos:position pos:line="232" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="232" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="73"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="234" pos:column="9">eventAdd<pos:position pos:line="234" pos:column="17"/></name><argument_list pos:line="234" pos:column="17">(<argument><expr><literal type="string" pos:line="234" pos:column="18">"ipcache_purgelru"<pos:position pos:line="234" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="234" pos:column="38">ipcache_purgelru<pos:position pos:line="234" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="234" pos:column="56">NULL<pos:position pos:line="234" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="234" pos:column="62">10.0<pos:position pos:line="234" pos:column="66"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="234" pos:column="68">1<pos:position pos:line="234" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="234" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="71"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="236" pos:column="9">eventAdd<pos:position pos:line="236" pos:column="17"/></name><argument_list pos:line="236" pos:column="17">(<argument><expr><literal type="string" pos:line="236" pos:column="18">"fqdncache_purgelru"<pos:position pos:line="236" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="236" pos:column="40">fqdncache_purgelru<pos:position pos:line="236" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="236" pos:column="60">NULL<pos:position pos:line="236" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="236" pos:column="66">15.0<pos:position pos:line="236" pos:column="70"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="236" pos:column="72">1<pos:position pos:line="236" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="75"/></expr_stmt>

<cpp:if pos:line="238" pos:column="1">#<cpp:directive pos:line="238" pos:column="2">if<pos:position pos:line="238" pos:column="4"/></cpp:directive> <expr><name pos:line="238" pos:column="5">USE_XPROF_STATS<pos:position pos:line="238" pos:column="20"/></name></expr></cpp:if>

        <expr_stmt><expr><call><name pos:line="240" pos:column="9">eventAdd<pos:position pos:line="240" pos:column="17"/></name><argument_list pos:line="240" pos:column="17">(<argument><expr><literal type="string" pos:line="240" pos:column="18">"cpuProfiling"<pos:position pos:line="240" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="240" pos:column="34">xprof_event<pos:position pos:line="240" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="240" pos:column="47">NULL<pos:position pos:line="240" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="240" pos:column="53">1.0<pos:position pos:line="240" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="240" pos:column="58">1<pos:position pos:line="240" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="240" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="61"/></expr_stmt>

<cpp:endif pos:line="242" pos:column="1">#<cpp:directive pos:line="242" pos:column="2">endif<pos:position pos:line="242" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="244" pos:column="9">eventAdd<pos:position pos:line="244" pos:column="17"/></name><argument_list pos:line="244" pos:column="17">(<argument><expr><literal type="string" pos:line="244" pos:column="18">"memPoolCleanIdlePools"<pos:position pos:line="244" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="244" pos:column="43">Mem<pos:position pos:line="244" pos:column="46"/></name><operator pos:line="244" pos:column="46">::<pos:position pos:line="244" pos:column="48"/></operator><name pos:line="244" pos:column="48">CleanIdlePools<pos:position pos:line="244" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="244" pos:column="64">NULL<pos:position pos:line="244" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="244" pos:column="70">15.0<pos:position pos:line="244" pos:column="74"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="244" pos:column="76">1<pos:position pos:line="244" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="244" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="79"/></expr_stmt>
    }<pos:position pos:line="245" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="247" pos:column="5">configured_once<pos:position pos:line="247" pos:column="20"/></name> <operator pos:line="247" pos:column="21">=<pos:position pos:line="247" pos:column="22"/></operator> <literal type="number" pos:line="247" pos:column="23">1<pos:position pos:line="247" pos:column="24"/></literal></expr>;<pos:position pos:line="247" pos:column="25"/></expr_stmt>
}<pos:position pos:line="248" pos:column="2"/></block></function></unit>
