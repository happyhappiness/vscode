<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3575_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">checkHeaderLimits<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">()<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">in<pos:position pos:line="4" pos:column="11"/></name><operator pos:line="4" pos:column="11">.<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">notYetUsed<pos:position pos:line="4" pos:column="22"/></name></name> <operator pos:line="4" pos:column="23">&lt;<pos:position pos:line="4" pos:column="27"/></operator> <name><name pos:line="4" pos:column="25">Config<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">.<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">maxRequestHeaderSize<pos:position pos:line="4" pos:column="52"/></name></name></expr>)<pos:position pos:line="4" pos:column="53"/></condition><then pos:line="4" pos:column="53">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="5" pos:column="17">// can accumulte more header data</comment>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">33<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">3<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="19">"Request header is too large ("<pos:position pos:line="7" pos:column="50"/></literal> <operator pos:line="7" pos:column="51">&lt;&lt;<pos:position pos:line="7" pos:column="59"/></operator> <name><name pos:line="7" pos:column="54">in<pos:position pos:line="7" pos:column="56"/></name><operator pos:line="7" pos:column="56">.<pos:position pos:line="7" pos:column="57"/></operator><name pos:line="7" pos:column="57">notYetUsed<pos:position pos:line="7" pos:column="67"/></name></name> <operator pos:line="7" pos:column="68">&lt;&lt;<pos:position pos:line="7" pos:column="76"/></operator> <literal type="string" pos:line="7" pos:column="71">" &gt; "<pos:position pos:line="7" pos:column="79"/></literal> <operator pos:line="7" pos:column="77">&lt;&lt;<pos:position pos:line="7" pos:column="85"/></operator>
           <name><name pos:line="8" pos:column="12">Config<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">.<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="19">maxRequestHeaderSize<pos:position pos:line="8" pos:column="39"/></name></name> <operator pos:line="8" pos:column="40">&lt;&lt;<pos:position pos:line="8" pos:column="48"/></operator> <literal type="string" pos:line="8" pos:column="43">" bytes)"<pos:position pos:line="8" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="54"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">ClientSocketContext<pos:position pos:line="10" pos:column="24"/></name> <modifier pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></modifier></type><name pos:line="10" pos:column="26">context<pos:position pos:line="10" pos:column="33"/></name> <init pos:line="10" pos:column="34">= <expr><call><name pos:line="10" pos:column="36">parseHttpRequestAbort<pos:position pos:line="10" pos:column="57"/></name><argument_list pos:line="10" pos:column="57">(<argument><expr><name pos:line="10" pos:column="58">this<pos:position pos:line="10" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="64">"error:request-too-large"<pos:position pos:line="10" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="90"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="91"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">clientStreamNode<pos:position pos:line="11" pos:column="21"/></name> <modifier pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></modifier></type><name pos:line="11" pos:column="23">node<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><call><name><name pos:line="11" pos:column="30">context<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">-&gt;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="39">getClientReplyContext<pos:position pos:line="11" pos:column="60"/></name></name><argument_list pos:line="11" pos:column="60">()<pos:position pos:line="11" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="63"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">clientReplyContext<pos:position pos:line="12" pos:column="23"/></name> <modifier pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></modifier></type><name pos:line="12" pos:column="25">repContext<pos:position pos:line="12" pos:column="35"/></name> <init pos:line="12" pos:column="36">= <expr><cast type="dynamic" pos:line="12" pos:column="38">dynamic_cast<argument_list type="generic" pos:line="12" pos:column="50">&lt;<argument><expr><name pos:line="12" pos:column="51">clientReplyContext<pos:position pos:line="12" pos:column="69"/></name> <operator pos:line="12" pos:column="70">*<pos:position pos:line="12" pos:column="71"/></operator></expr></argument>&gt;<pos:position pos:line="12" pos:column="75"/></argument_list><argument_list pos:line="12" pos:column="72">(<argument><expr><call><name><name pos:line="12" pos:column="73">node<pos:position pos:line="12" pos:column="77"/></name><operator pos:line="12" pos:column="77">-&gt;<pos:position pos:line="12" pos:column="82"/></operator><name pos:line="12" pos:column="79">data<pos:position pos:line="12" pos:column="83"/></name><operator pos:line="12" pos:column="83">.<pos:position pos:line="12" pos:column="84"/></operator><name pos:line="12" pos:column="84">getRaw<pos:position pos:line="12" pos:column="90"/></name></name><argument_list pos:line="12" pos:column="90">()<pos:position pos:line="12" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="93"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="12" pos:column="94"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name> <argument_list pos:line="13" pos:column="12">(<argument><expr><name pos:line="13" pos:column="13">repContext<pos:position pos:line="13" pos:column="23"/></name></expr></argument>)<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">repContext<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">setReplyToError<pos:position pos:line="14" pos:column="32"/></name></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">ERR_TOO_BIG<pos:position pos:line="14" pos:column="44"/></name></expr></argument>,
                                <argument><expr><name><name pos:line="15" pos:column="33">Http<pos:position pos:line="15" pos:column="37"/></name><operator pos:line="15" pos:column="37">::<pos:position pos:line="15" pos:column="39"/></operator><name pos:line="15" pos:column="39">scBadRequest<pos:position pos:line="15" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="53">Http<pos:position pos:line="15" pos:column="57"/></name><operator pos:line="15" pos:column="57">::<pos:position pos:line="15" pos:column="59"/></operator><name pos:line="15" pos:column="59">METHOD_NONE<pos:position pos:line="15" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="72">NULL<pos:position pos:line="15" pos:column="76"/></name></expr></argument>,
                                <argument><expr><name><name pos:line="16" pos:column="33">clientConnection<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">remote<pos:position pos:line="16" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="59">NULL<pos:position pos:line="16" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="65">NULL<pos:position pos:line="16" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="71">NULL<pos:position pos:line="16" pos:column="75"/></name></expr></argument>)<pos:position pos:line="16" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">context<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">registerWithConn<pos:position pos:line="17" pos:column="30"/></name></name><argument_list pos:line="17" pos:column="30">()<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">context<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">pullData<pos:position pos:line="18" pos:column="22"/></name></name><argument_list pos:line="18" pos:column="22">()<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
