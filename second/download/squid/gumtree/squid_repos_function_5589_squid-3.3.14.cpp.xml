<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5589_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">do_open<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">diomsg<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type> <name pos:line="2" pos:column="18">r<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">len<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">buf<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">fd<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">file_state<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">fs<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <comment type="block" pos:line="6" pos:column="5">/*
     * note r-&gt;offset holds open() flags
     */</comment>
    <expr_stmt><expr><name pos:line="9" pos:column="5">fd<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <call><name pos:line="9" pos:column="10">open<pos:position pos:line="9" pos:column="14"/></name><argument_list pos:line="9" pos:column="14">(<argument><expr><name pos:line="9" pos:column="15">buf<pos:position pos:line="9" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="20">r<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">offset<pos:position pos:line="9" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="31">0600<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">fd<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">&lt;<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="14">0<pos:position pos:line="11" pos:column="15"/></literal></expr>)<pos:position pos:line="11" pos:column="16"/></condition><then pos:line="11" pos:column="16"> <block pos:line="11" pos:column="17">{
        <macro><name pos:line="12" pos:column="9">DEBUG<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><literal type="number" pos:line="12" pos:column="15">1<pos:position pos:line="12" pos:column="16"/></literal></argument>)<pos:position pos:line="12" pos:column="17"/></argument_list></macro> <block pos:line="12" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">fprintf<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">stderr<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="29">"%d %s: "<pos:position pos:line="13" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="40">(<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">int<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">)<pos:position pos:line="13" pos:column="45"/></operator> <name pos:line="13" pos:column="46">mypid<pos:position pos:line="13" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="53">buf<pos:position pos:line="13" pos:column="56"/></name></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">perror<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><literal type="string" pos:line="14" pos:column="20">"open"<pos:position pos:line="14" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block>

        <return pos:line="17" pos:column="9">return <expr><operator pos:line="17" pos:column="16">-<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">errno<pos:position pos:line="17" pos:column="22"/></name></expr>;<pos:position pos:line="17" pos:column="23"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="20" pos:column="5">fs<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">=<pos:position pos:line="20" pos:column="9"/></operator> <operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">file_state<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">*<pos:position pos:line="20" pos:column="23"/></operator><operator pos:line="20" pos:column="23">)<pos:position pos:line="20" pos:column="24"/></operator><call><name pos:line="20" pos:column="24">xcalloc<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><literal type="number" pos:line="20" pos:column="32">1<pos:position pos:line="20" pos:column="33"/></literal></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="35">sizeof<argument_list pos:line="20" pos:column="41">(<argument><expr><operator pos:line="20" pos:column="42">*<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="43">fs<pos:position pos:line="20" pos:column="45"/></name></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">fs<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">-&gt;<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="9">id<pos:position pos:line="21" pos:column="11"/></name></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <name><name pos:line="21" pos:column="14">r<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">id<pos:position pos:line="21" pos:column="19"/></name></name></expr>;<pos:position pos:line="21" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">fs<pos:position pos:line="22" pos:column="7"/></name><operator pos:line="22" pos:column="7">-&gt;<pos:position pos:line="22" pos:column="12"/></operator><name pos:line="22" pos:column="9">key<pos:position pos:line="22" pos:column="12"/></name></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <operator pos:line="22" pos:column="15">&amp;<pos:position pos:line="22" pos:column="20"/></operator><name><name pos:line="22" pos:column="16">fs<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">id<pos:position pos:line="22" pos:column="22"/></name></name></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>          <comment type="block" pos:line="22" pos:column="33">/* gack */</comment>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">fs<pos:position pos:line="23" pos:column="7"/></name><operator pos:line="23" pos:column="7">-&gt;<pos:position pos:line="23" pos:column="12"/></operator><name pos:line="23" pos:column="9">fd<pos:position pos:line="23" pos:column="11"/></name></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <name pos:line="23" pos:column="14">fd<pos:position pos:line="23" pos:column="16"/></name></expr>;<pos:position pos:line="23" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">hash_join<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">hash<pos:position pos:line="24" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="21">(<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">hash_link<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">*<pos:position pos:line="24" pos:column="33"/></operator><operator pos:line="24" pos:column="33">)<pos:position pos:line="24" pos:column="34"/></operator> <name pos:line="24" pos:column="35">fs<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
    <macro><name pos:line="25" pos:column="5">DEBUG<pos:position pos:line="25" pos:column="10"/></name><argument_list pos:line="25" pos:column="10">(<argument><literal type="number" pos:line="25" pos:column="11">2<pos:position pos:line="25" pos:column="12"/></literal></argument>)<pos:position pos:line="25" pos:column="13"/></argument_list></macro> <block pos:line="25" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">fprintf<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">stderr<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="25">"%d OPEN  id %d, FD %d, fs %p\n"<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>,
                <argument><expr><operator pos:line="27" pos:column="17">(<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">int<pos:position pos:line="27" pos:column="21"/></name><operator pos:line="27" pos:column="21">)<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">mypid<pos:position pos:line="27" pos:column="28"/></name></expr></argument>,
                <argument><expr><name><name pos:line="28" pos:column="17">fs<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">-&gt;<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="21">id<pos:position pos:line="28" pos:column="23"/></name></name></expr></argument>,
                <argument><expr><name><name pos:line="29" pos:column="17">fs<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">-&gt;<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="21">fd<pos:position pos:line="29" pos:column="23"/></name></name></expr></argument>,
                <argument><expr><name pos:line="30" pos:column="17">fs<pos:position pos:line="30" pos:column="19"/></name></expr></argument>)<pos:position pos:line="30" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">fd<pos:position pos:line="32" pos:column="14"/></name></expr>;<pos:position pos:line="32" pos:column="15"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
