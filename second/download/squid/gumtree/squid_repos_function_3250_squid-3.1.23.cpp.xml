<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3250_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">unlinkdUnlink<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">path<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">MAXPATHLEN<pos:position pos:line="4" pos:column="24"/></name></expr>]<pos:position pos:line="4" pos:column="25"/></index></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">l<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">bytes_written<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="7" pos:column="5">static<pos:position pos:line="7" pos:column="11"/></specifier> <type><name pos:line="7" pos:column="12">int<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">queuelen<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><literal type="number" pos:line="7" pos:column="27">0<pos:position pos:line="7" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">unlinkd_wfd<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">&lt;<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25"> <block pos:line="9" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debug_trap<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><literal type="string" pos:line="10" pos:column="20">"unlinkdUnlink: unlinkd_wfd &lt; 0"<pos:position pos:line="10" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">safeunlink<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">path<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="26">0<pos:position pos:line="11" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/*
     * If the queue length is greater than our limit, then we pause
     * for a small amount of time, hoping that unlinkd has some
     * feedback for us.  Maybe it just needs a slice of the CPU's
     * time.
     */</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">queuelen<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">&gt;=<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="21">UNLINKD_QUEUE_LIMIT<pos:position pos:line="21" pos:column="40"/></name></expr>)<pos:position pos:line="21" pos:column="41"/></condition><then pos:line="21" pos:column="41"> <block pos:line="21" pos:column="42">{
<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if<pos:position pos:line="22" pos:column="4"/></cpp:directive> <expr><call><name pos:line="22" pos:column="5">defined<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name pos:line="22" pos:column="13">USE_EPOLL<pos:position pos:line="22" pos:column="22"/></name></expr></argument>)<pos:position pos:line="22" pos:column="23"/></argument_list></call> <operator pos:line="22" pos:column="24">||<pos:position pos:line="22" pos:column="26"/></operator> <call><name pos:line="22" pos:column="27">defined<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name pos:line="22" pos:column="35">USE_KQUEUE<pos:position pos:line="22" pos:column="45"/></name></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call> <operator pos:line="22" pos:column="47">||<pos:position pos:line="22" pos:column="49"/></operator> <call><name pos:line="22" pos:column="50">defined<pos:position pos:line="22" pos:column="57"/></name><argument_list pos:line="22" pos:column="57">(<argument><expr><name pos:line="22" pos:column="58">USE_DEVPOLL<pos:position pos:line="22" pos:column="69"/></name></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr></cpp:if>
        <comment type="block" pos:line="23" pos:column="9">/*
         * DPW 2007-04-23
         * We can't use fd_set when using epoll() or kqueue().  In
         * these cases we block for 10 ms.
         */</comment>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">xusleep<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><literal type="number" pos:line="28" pos:column="17">10000<pos:position pos:line="28" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
<cpp:else pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">else<pos:position pos:line="29" pos:column="6"/></cpp:directive></cpp:else>
        <comment type="block" pos:line="30" pos:column="9">/*
         * DPW 2007-04-23
         * When we can use select, block for up to 100 ms.
         */</comment>
        <decl_stmt><decl><type><name><name pos:line="34" pos:column="9">struct<pos:position pos:line="34" pos:column="15"/></name> <name pos:line="34" pos:column="16">timeval<pos:position pos:line="34" pos:column="23"/></name></name></type> <name pos:line="34" pos:column="24">to<pos:position pos:line="34" pos:column="26"/></name></decl>;<pos:position pos:line="34" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="35" pos:column="9">fd_set<pos:position pos:line="35" pos:column="15"/></name></type> <name pos:line="35" pos:column="16">R<pos:position pos:line="35" pos:column="17"/></name></decl>;<pos:position pos:line="35" pos:column="18"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">FD_ZERO<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><operator pos:line="36" pos:column="17">&amp;<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="18">R<pos:position pos:line="36" pos:column="19"/></name></expr></argument>)<pos:position pos:line="36" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">FD_SET<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">unlinkd_rfd<pos:position pos:line="37" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="29">&amp;<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="30">R<pos:position pos:line="37" pos:column="31"/></name></expr></argument>)<pos:position pos:line="37" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="38" pos:column="9">to<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">.<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="12">tv_sec<pos:position pos:line="38" pos:column="18"/></name></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <literal type="number" pos:line="38" pos:column="21">0<pos:position pos:line="38" pos:column="22"/></literal></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="39" pos:column="9">to<pos:position pos:line="39" pos:column="11"/></name><operator pos:line="39" pos:column="11">.<pos:position pos:line="39" pos:column="12"/></operator><name pos:line="39" pos:column="12">tv_usec<pos:position pos:line="39" pos:column="19"/></name></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <literal type="number" pos:line="39" pos:column="22">100000<pos:position pos:line="39" pos:column="28"/></literal></expr>;<pos:position pos:line="39" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">select<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">unlinkd_rfd<pos:position pos:line="40" pos:column="27"/></name> <operator pos:line="40" pos:column="28">+<pos:position pos:line="40" pos:column="29"/></operator> <literal type="number" pos:line="40" pos:column="30">1<pos:position pos:line="40" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="40" pos:column="33">&amp;<pos:position pos:line="40" pos:column="38"/></operator><name pos:line="40" pos:column="34">R<pos:position pos:line="40" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="37">NULL<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="43">NULL<pos:position pos:line="40" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="49">&amp;<pos:position pos:line="40" pos:column="54"/></operator><name pos:line="40" pos:column="50">to<pos:position pos:line="40" pos:column="52"/></name></expr></argument>)<pos:position pos:line="40" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">endif<pos:position pos:line="41" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="44" pos:column="5">/*
    * If there is at least one outstanding unlink request, then
    * try to read a response.  If there's nothing to read we'll
    * get an EWOULDBLOCK or whatever.  If we get a response, then
    * decrement the queue size by the number of newlines read.
    */</comment>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">queuelen<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">&gt;<pos:position pos:line="50" pos:column="22"/></operator> <literal type="number" pos:line="50" pos:column="20">0<pos:position pos:line="50" pos:column="21"/></literal></expr>)<pos:position pos:line="50" pos:column="22"/></condition><then pos:line="50" pos:column="22"> <block pos:line="50" pos:column="23">{
        <decl_stmt><decl><type><name pos:line="51" pos:column="9">int<pos:position pos:line="51" pos:column="12"/></name></type> <name pos:line="51" pos:column="13">bytes_read<pos:position pos:line="51" pos:column="23"/></name></decl>;<pos:position pos:line="51" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="52" pos:column="9">int<pos:position pos:line="52" pos:column="12"/></name></type> <name pos:line="52" pos:column="13">i<pos:position pos:line="52" pos:column="14"/></name></decl>;<pos:position pos:line="52" pos:column="15"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="53" pos:column="9">char<pos:position pos:line="53" pos:column="13"/></name></type> <name><name pos:line="53" pos:column="14">rbuf<pos:position pos:line="53" pos:column="18"/></name><index pos:line="53" pos:column="18">[<expr><literal type="number" pos:line="53" pos:column="19">512<pos:position pos:line="53" pos:column="22"/></literal></expr>]<pos:position pos:line="53" pos:column="23"/></index></name></decl>;<pos:position pos:line="53" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><name pos:line="54" pos:column="9">bytes_read<pos:position pos:line="54" pos:column="19"/></name> <operator pos:line="54" pos:column="20">=<pos:position pos:line="54" pos:column="21"/></operator> <call><name pos:line="54" pos:column="22">read<pos:position pos:line="54" pos:column="26"/></name><argument_list pos:line="54" pos:column="26">(<argument><expr><name pos:line="54" pos:column="27">unlinkd_rfd<pos:position pos:line="54" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="40">rbuf<pos:position pos:line="54" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="46">511<pos:position pos:line="54" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="51"/></expr_stmt>

        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">bytes_read<pos:position pos:line="56" pos:column="23"/></name> <operator pos:line="56" pos:column="24">&gt;<pos:position pos:line="56" pos:column="28"/></operator> <literal type="number" pos:line="56" pos:column="26">0<pos:position pos:line="56" pos:column="27"/></literal></expr>)<pos:position pos:line="56" pos:column="28"/></condition><then pos:line="56" pos:column="28"> <block pos:line="56" pos:column="29">{
            <expr_stmt><expr><name><name pos:line="57" pos:column="13">rbuf<pos:position pos:line="57" pos:column="17"/></name><index pos:line="57" pos:column="17">[<expr><name pos:line="57" pos:column="18">bytes_read<pos:position pos:line="57" pos:column="28"/></name></expr>]<pos:position pos:line="57" pos:column="29"/></index></name> <operator pos:line="57" pos:column="30">=<pos:position pos:line="57" pos:column="31"/></operator> <literal type="char" pos:line="57" pos:column="32">'\0'<pos:position pos:line="57" pos:column="36"/></literal></expr>;<pos:position pos:line="57" pos:column="37"/></expr_stmt>

            <for pos:line="59" pos:column="13">for <control pos:line="59" pos:column="17">(<init><expr><name pos:line="59" pos:column="18">i<pos:position pos:line="59" pos:column="19"/></name> <operator pos:line="59" pos:column="20">=<pos:position pos:line="59" pos:column="21"/></operator> <literal type="number" pos:line="59" pos:column="22">0<pos:position pos:line="59" pos:column="23"/></literal></expr>;<pos:position pos:line="59" pos:column="24"/></init> <condition><expr><name pos:line="59" pos:column="25">i<pos:position pos:line="59" pos:column="26"/></name> <operator pos:line="59" pos:column="27">&lt;<pos:position pos:line="59" pos:column="31"/></operator> <name pos:line="59" pos:column="29">bytes_read<pos:position pos:line="59" pos:column="39"/></name></expr>;<pos:position pos:line="59" pos:column="40"/></condition> <incr><expr><name pos:line="59" pos:column="41">i<pos:position pos:line="59" pos:column="42"/></name><operator pos:line="59" pos:column="42">++<pos:position pos:line="59" pos:column="44"/></operator></expr></incr>)<pos:position pos:line="59" pos:column="45"/></control>
                <block type="pseudo"><if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><literal type="char" pos:line="60" pos:column="21">'\n'<pos:position pos:line="60" pos:column="25"/></literal> <operator pos:line="60" pos:column="26">==<pos:position pos:line="60" pos:column="28"/></operator> <name><name pos:line="60" pos:column="29">rbuf<pos:position pos:line="60" pos:column="33"/></name><index pos:line="60" pos:column="33">[<expr><name pos:line="60" pos:column="34">i<pos:position pos:line="60" pos:column="35"/></name></expr>]<pos:position pos:line="60" pos:column="36"/></index></name></expr>)<pos:position pos:line="60" pos:column="37"/></condition><then pos:line="60" pos:column="37">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="21">queuelen<pos:position pos:line="61" pos:column="29"/></name><operator pos:line="61" pos:column="29">--<pos:position pos:line="61" pos:column="31"/></operator></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt></block></then></if></block></for>

            <expr_stmt><expr><call><name pos:line="63" pos:column="13">assert<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><name pos:line="63" pos:column="20">queuelen<pos:position pos:line="63" pos:column="28"/></name> <operator pos:line="63" pos:column="29">&gt;=<pos:position pos:line="63" pos:column="34"/></operator> <literal type="number" pos:line="63" pos:column="32">0<pos:position pos:line="63" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="67" pos:column="5">l<pos:position pos:line="67" pos:column="6"/></name> <operator pos:line="67" pos:column="7">=<pos:position pos:line="67" pos:column="8"/></operator> <call><name pos:line="67" pos:column="9">strlen<pos:position pos:line="67" pos:column="15"/></name><argument_list pos:line="67" pos:column="15">(<argument><expr><name pos:line="67" pos:column="16">path<pos:position pos:line="67" pos:column="20"/></name></expr></argument>)<pos:position pos:line="67" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">assert<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><name pos:line="68" pos:column="12">l<pos:position pos:line="68" pos:column="13"/></name> <operator pos:line="68" pos:column="14">&lt;<pos:position pos:line="68" pos:column="18"/></operator> <name pos:line="68" pos:column="16">MAXPATHLEN<pos:position pos:line="68" pos:column="26"/></name></expr></argument>)<pos:position pos:line="68" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">xstrncpy<pos:position pos:line="69" pos:column="13"/></name><argument_list pos:line="69" pos:column="13">(<argument><expr><name pos:line="69" pos:column="14">buf<pos:position pos:line="69" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="19">path<pos:position pos:line="69" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="25">MAXPATHLEN<pos:position pos:line="69" pos:column="35"/></name></expr></argument>)<pos:position pos:line="69" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">buf<pos:position pos:line="70" pos:column="8"/></name><index pos:line="70" pos:column="8">[<expr><name pos:line="70" pos:column="9">l<pos:position pos:line="70" pos:column="10"/></name><operator pos:line="70" pos:column="10">++<pos:position pos:line="70" pos:column="12"/></operator></expr>]<pos:position pos:line="70" pos:column="13"/></index></name> <operator pos:line="70" pos:column="14">=<pos:position pos:line="70" pos:column="15"/></operator> <literal type="char" pos:line="70" pos:column="16">'\n'<pos:position pos:line="70" pos:column="20"/></literal></expr>;<pos:position pos:line="70" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="71" pos:column="5">bytes_written<pos:position pos:line="71" pos:column="18"/></name> <operator pos:line="71" pos:column="19">=<pos:position pos:line="71" pos:column="20"/></operator> <call><name pos:line="71" pos:column="21">write<pos:position pos:line="71" pos:column="26"/></name><argument_list pos:line="71" pos:column="26">(<argument><expr><name pos:line="71" pos:column="27">unlinkd_wfd<pos:position pos:line="71" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="40">buf<pos:position pos:line="71" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="45">l<pos:position pos:line="71" pos:column="46"/></name></expr></argument>)<pos:position pos:line="71" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="48"/></expr_stmt>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">bytes_written<pos:position pos:line="73" pos:column="22"/></name> <operator pos:line="73" pos:column="23">&lt;<pos:position pos:line="73" pos:column="27"/></operator> <literal type="number" pos:line="73" pos:column="25">0<pos:position pos:line="73" pos:column="26"/></literal></expr>)<pos:position pos:line="73" pos:column="27"/></condition><then pos:line="73" pos:column="27"> <block pos:line="73" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">debugs<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><literal type="number" pos:line="74" pos:column="16">2<pos:position pos:line="74" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="19">1<pos:position pos:line="74" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="22">"unlinkdUnlink: write FD "<pos:position pos:line="74" pos:column="48"/></literal> <operator pos:line="74" pos:column="49">&lt;&lt;<pos:position pos:line="74" pos:column="57"/></operator> <name pos:line="74" pos:column="52">unlinkd_wfd<pos:position pos:line="74" pos:column="63"/></name> <operator pos:line="74" pos:column="64">&lt;&lt;<pos:position pos:line="74" pos:column="72"/></operator> <literal type="string" pos:line="74" pos:column="67">" failed: "<pos:position pos:line="74" pos:column="78"/></literal> <operator pos:line="74" pos:column="79">&lt;&lt;<pos:position pos:line="74" pos:column="87"/></operator> <call><name pos:line="74" pos:column="82">xstrerror<pos:position pos:line="74" pos:column="91"/></name><argument_list pos:line="74" pos:column="91">()<pos:position pos:line="74" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="95"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">safeunlink<pos:position pos:line="75" pos:column="19"/></name><argument_list pos:line="75" pos:column="19">(<argument><expr><name pos:line="75" pos:column="20">path<pos:position pos:line="75" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="26">0<pos:position pos:line="75" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="29"/></expr_stmt>
        <return pos:line="76" pos:column="9">return;<pos:position pos:line="76" pos:column="16"/></return>
    }<pos:position pos:line="77" pos:column="6"/></block></then> <elseif pos:line="77" pos:column="7">else <if pos:line="77" pos:column="12">if <condition pos:line="77" pos:column="15">(<expr><name pos:line="77" pos:column="16">bytes_written<pos:position pos:line="77" pos:column="29"/></name> <operator pos:line="77" pos:column="30">!=<pos:position pos:line="77" pos:column="32"/></operator> <name pos:line="77" pos:column="33">l<pos:position pos:line="77" pos:column="34"/></name></expr>)<pos:position pos:line="77" pos:column="35"/></condition><then pos:line="77" pos:column="35"> <block pos:line="77" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">debugs<pos:position pos:line="78" pos:column="15"/></name><argument_list pos:line="78" pos:column="15">(<argument><expr><literal type="number" pos:line="78" pos:column="16">2<pos:position pos:line="78" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="78" pos:column="19">1<pos:position pos:line="78" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="22">"unlinkdUnlink: FD "<pos:position pos:line="78" pos:column="42"/></literal> <operator pos:line="78" pos:column="43">&lt;&lt;<pos:position pos:line="78" pos:column="51"/></operator> <name pos:line="78" pos:column="46">unlinkd_wfd<pos:position pos:line="78" pos:column="57"/></name> <operator pos:line="78" pos:column="58">&lt;&lt;<pos:position pos:line="78" pos:column="66"/></operator> <literal type="string" pos:line="78" pos:column="61">" only wrote "<pos:position pos:line="78" pos:column="75"/></literal> <operator pos:line="78" pos:column="76">&lt;&lt;<pos:position pos:line="78" pos:column="84"/></operator> <name pos:line="78" pos:column="79">bytes_written<pos:position pos:line="78" pos:column="92"/></name> <operator pos:line="78" pos:column="93">&lt;&lt;<pos:position pos:line="78" pos:column="101"/></operator> <literal type="string" pos:line="78" pos:column="96">" of "<pos:position pos:line="78" pos:column="102"/></literal> <operator pos:line="78" pos:column="103">&lt;&lt;<pos:position pos:line="78" pos:column="111"/></operator> <name pos:line="78" pos:column="106">l<pos:position pos:line="78" pos:column="107"/></name> <operator pos:line="78" pos:column="108">&lt;&lt;<pos:position pos:line="78" pos:column="116"/></operator> <literal type="string" pos:line="78" pos:column="111">" bytes"<pos:position pos:line="78" pos:column="119"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="121"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">safeunlink<pos:position pos:line="79" pos:column="19"/></name><argument_list pos:line="79" pos:column="19">(<argument><expr><name pos:line="79" pos:column="20">path<pos:position pos:line="79" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="26">0<pos:position pos:line="79" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="29"/></expr_stmt>
        <return pos:line="80" pos:column="9">return;<pos:position pos:line="80" pos:column="16"/></return>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name><name pos:line="83" pos:column="5">statCounter<pos:position pos:line="83" pos:column="16"/></name><operator pos:line="83" pos:column="16">.<pos:position pos:line="83" pos:column="17"/></operator><name pos:line="83" pos:column="17">unlink<pos:position pos:line="83" pos:column="23"/></name><operator pos:line="83" pos:column="23">.<pos:position pos:line="83" pos:column="24"/></operator><name pos:line="83" pos:column="24">requests<pos:position pos:line="83" pos:column="32"/></name></name><operator pos:line="83" pos:column="32">++<pos:position pos:line="83" pos:column="34"/></operator></expr>;<pos:position pos:line="83" pos:column="35"/></expr_stmt>
    <comment type="block" pos:line="84" pos:column="5">/*
    * Increment this syscalls counter here, even though the syscall
    * is executed by the helper process.  We try to be consistent
    * in counting unlink operations.
    */</comment>
    <expr_stmt><expr><name><name pos:line="89" pos:column="5">statCounter<pos:position pos:line="89" pos:column="16"/></name><operator pos:line="89" pos:column="16">.<pos:position pos:line="89" pos:column="17"/></operator><name pos:line="89" pos:column="17">syscalls<pos:position pos:line="89" pos:column="25"/></name><operator pos:line="89" pos:column="25">.<pos:position pos:line="89" pos:column="26"/></operator><name pos:line="89" pos:column="26">disk<pos:position pos:line="89" pos:column="30"/></name><operator pos:line="89" pos:column="30">.<pos:position pos:line="89" pos:column="31"/></operator><name pos:line="89" pos:column="31">unlinks<pos:position pos:line="89" pos:column="38"/></name></name><operator pos:line="89" pos:column="38">++<pos:position pos:line="89" pos:column="40"/></operator></expr>;<pos:position pos:line="89" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="90" pos:column="5">queuelen<pos:position pos:line="90" pos:column="13"/></name><operator pos:line="90" pos:column="13">++<pos:position pos:line="90" pos:column="15"/></operator></expr>;<pos:position pos:line="90" pos:column="16"/></expr_stmt>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
