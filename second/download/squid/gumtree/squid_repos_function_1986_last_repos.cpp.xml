<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1986_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">store_client<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">unpackHeader<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">buf<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">ssize_t<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">len<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">xerrno<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><name pos:line="4" pos:column="18">errno<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt> <comment type="line" pos:line="4" pos:column="25">// FIXME: where does errno come from?</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">90<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">3<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"store_client::unpackHeader: len "<pos:position pos:line="5" pos:column="53"/></literal> <operator pos:line="5" pos:column="54">&lt;&lt;<pos:position pos:line="5" pos:column="62"/></operator> <name pos:line="5" pos:column="57">len<pos:position pos:line="5" pos:column="60"/></name> <operator pos:line="5" pos:column="61">&lt;&lt;<pos:position pos:line="5" pos:column="69"/></operator> <literal type="string" pos:line="5" pos:column="64">""<pos:position pos:line="5" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="68"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">len<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">&lt;<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr>)<pos:position pos:line="7" pos:column="17"/></condition><then pos:line="7" pos:column="17"> <block pos:line="7" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">90<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="20">3<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"WARNING: unpack error: "<pos:position pos:line="8" pos:column="48"/></literal> <operator pos:line="8" pos:column="49">&lt;&lt;<pos:position pos:line="8" pos:column="57"/></operator> <call><name pos:line="8" pos:column="52">xstrerr<pos:position pos:line="8" pos:column="59"/></name><argument_list pos:line="8" pos:column="59">(<argument><expr><name pos:line="8" pos:column="60">xerrno<pos:position pos:line="8" pos:column="66"/></name></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="69"/></expr_stmt>
        <return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">false<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">swap_hdr_sz<pos:position pos:line="12" pos:column="20"/></name> <init pos:line="12" pos:column="21">= <expr><literal type="number" pos:line="12" pos:column="23">0<pos:position pos:line="12" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">tlv<pos:position pos:line="13" pos:column="8"/></name> <modifier pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></modifier></type><name pos:line="13" pos:column="10">tlv_list<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><literal type="null" pos:line="13" pos:column="21">nullptr<pos:position pos:line="13" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="29"/></decl_stmt>
    <try pos:line="14" pos:column="5">try <block pos:line="14" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">StoreMetaUnpacker<pos:position pos:line="15" pos:column="26"/></name></type> <name pos:line="15" pos:column="27">aBuilder<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">buf<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="41">len<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="46">&amp;<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="47">swap_hdr_sz<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></decl>;<pos:position pos:line="15" pos:column="60"/></decl_stmt>
        <expr_stmt><expr><name pos:line="16" pos:column="9">tlv_list<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <call><name><name pos:line="16" pos:column="20">aBuilder<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">.<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">createStoreMeta<pos:position pos:line="16" pos:column="44"/></name></name><argument_list pos:line="16" pos:column="44">()<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block> <catch pos:line="17" pos:column="7">catch <parameter_list pos:line="17" pos:column="13">(<parameter><decl><type><specifier pos:line="17" pos:column="14">const<pos:position pos:line="17" pos:column="19"/></specifier> <name><name pos:line="17" pos:column="20">std<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">::<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="25">exception<pos:position pos:line="17" pos:column="34"/></name></name> <modifier pos:line="17" pos:column="35">&amp;<pos:position pos:line="17" pos:column="40"/></modifier></type><name pos:line="17" pos:column="36">e<pos:position pos:line="17" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="17" pos:column="38"/></parameter_list> <block pos:line="17" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">90<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="20">DBG_IMPORTANT<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="35">"WARNING: failed to unpack metadata because "<pos:position pos:line="18" pos:column="80"/></literal> <operator pos:line="18" pos:column="81">&lt;&lt;<pos:position pos:line="18" pos:column="89"/></operator> <call><name><name pos:line="18" pos:column="84">e<pos:position pos:line="18" pos:column="85"/></name><operator pos:line="18" pos:column="85">.<pos:position pos:line="18" pos:column="86"/></operator><name pos:line="18" pos:column="86">what<pos:position pos:line="18" pos:column="90"/></name></name><argument_list pos:line="18" pos:column="90">()<pos:position pos:line="18" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="94"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><literal type="boolean" pos:line="19" pos:column="16">false<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></catch></try>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name pos:line="21" pos:column="12">tlv_list<pos:position pos:line="21" pos:column="20"/></name></expr></argument>)<pos:position pos:line="21" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/*
     * Check the meta data and make sure we got the right object.
     */</comment>
    <for pos:line="26" pos:column="5">for <control pos:line="26" pos:column="9">(<init><decl><type><name pos:line="26" pos:column="10">tlv<pos:position pos:line="26" pos:column="13"/></name> <modifier pos:line="26" pos:column="14">*<pos:position pos:line="26" pos:column="15"/></modifier></type><name pos:line="26" pos:column="15">t<pos:position pos:line="26" pos:column="16"/></name> <init pos:line="26" pos:column="17">= <expr><name pos:line="26" pos:column="19">tlv_list<pos:position pos:line="26" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="28"/></init> <condition><expr><name pos:line="26" pos:column="29">t<pos:position pos:line="26" pos:column="30"/></name></expr>;<pos:position pos:line="26" pos:column="31"/></condition> <incr><expr><name pos:line="26" pos:column="32">t<pos:position pos:line="26" pos:column="33"/></name> <operator pos:line="26" pos:column="34">=<pos:position pos:line="26" pos:column="35"/></operator> <name><name pos:line="26" pos:column="36">t<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">-&gt;<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="39">next<pos:position pos:line="26" pos:column="43"/></name></name></expr></incr>)<pos:position pos:line="26" pos:column="44"/></control> <block pos:line="26" pos:column="45">{
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name><name pos:line="27" pos:column="14">t<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">-&gt;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="17">checkConsistency<pos:position pos:line="27" pos:column="33"/></name></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">entry<pos:position pos:line="27" pos:column="39"/></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="41"/></condition><then pos:line="27" pos:column="41"> <block pos:line="27" pos:column="42">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">storeSwapTLVFree<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">tlv_list<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
            <return pos:line="29" pos:column="13">return <expr><literal type="boolean" pos:line="29" pos:column="20">false<pos:position pos:line="29" pos:column="25"/></literal></expr>;<pos:position pos:line="29" pos:column="26"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">storeSwapTLVFree<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">tlv_list<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">assert<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><name pos:line="35" pos:column="12">swap_hdr_sz<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">&gt;=<pos:position pos:line="35" pos:column="29"/></operator> <literal type="number" pos:line="35" pos:column="27">0<pos:position pos:line="35" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">entry<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">-&gt;<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="12">mem_obj<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">swap_hdr_sz<pos:position pos:line="36" pos:column="32"/></name></name> <operator pos:line="36" pos:column="33">=<pos:position pos:line="36" pos:column="34"/></operator> <name pos:line="36" pos:column="35">swap_hdr_sz<pos:position pos:line="36" pos:column="46"/></name></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name><name pos:line="37" pos:column="9">entry<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">-&gt;<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="16">swap_file_sz<pos:position pos:line="37" pos:column="28"/></name></name> <operator pos:line="37" pos:column="29">&gt;<pos:position pos:line="37" pos:column="33"/></operator> <literal type="number" pos:line="37" pos:column="31">0<pos:position pos:line="37" pos:column="32"/></literal></expr>)<pos:position pos:line="37" pos:column="33"/></condition><then pos:line="37" pos:column="33"> <block pos:line="37" pos:column="34">{ <comment type="line" pos:line="37" pos:column="36">// collapsed hits may not know swap_file_sz</comment>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">assert<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name><name pos:line="38" pos:column="16">entry<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">-&gt;<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="23">swap_file_sz<pos:position pos:line="38" pos:column="35"/></name></name> <operator pos:line="38" pos:column="36">&gt;=<pos:position pos:line="38" pos:column="41"/></operator> <cast type="static" pos:line="38" pos:column="39">static_cast<argument_list type="generic" pos:line="38" pos:column="50">&lt;<argument><expr><name pos:line="38" pos:column="51">uint64_t<pos:position pos:line="38" pos:column="59"/></name></expr></argument>&gt;<pos:position pos:line="38" pos:column="63"/></argument_list><argument_list pos:line="38" pos:column="60">(<argument><expr><name pos:line="38" pos:column="61">swap_hdr_sz<pos:position pos:line="38" pos:column="72"/></name></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></cast></expr></argument>)<pos:position pos:line="38" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="39" pos:column="9">entry<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">-&gt;<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="16">mem_obj<pos:position pos:line="39" pos:column="23"/></name><operator pos:line="39" pos:column="23">-&gt;<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="25">object_sz<pos:position pos:line="39" pos:column="34"/></name></name> <operator pos:line="39" pos:column="35">=<pos:position pos:line="39" pos:column="36"/></operator> <name><name pos:line="39" pos:column="37">entry<pos:position pos:line="39" pos:column="42"/></name><operator pos:line="39" pos:column="42">-&gt;<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="44">swap_file_sz<pos:position pos:line="39" pos:column="56"/></name></name> <operator pos:line="39" pos:column="57">-<pos:position pos:line="39" pos:column="58"/></operator> <name pos:line="39" pos:column="59">swap_hdr_sz<pos:position pos:line="39" pos:column="70"/></name></expr>;<pos:position pos:line="39" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">debugs<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><literal type="number" pos:line="41" pos:column="12">90<pos:position pos:line="41" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="16">5<pos:position pos:line="41" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="19">"store_client::unpackHeader: swap_file_sz="<pos:position pos:line="41" pos:column="62"/></literal> <operator pos:line="41" pos:column="63">&lt;&lt;<pos:position pos:line="41" pos:column="71"/></operator>
           <name><name pos:line="42" pos:column="12">entry<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">-&gt;<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="19">swap_file_sz<pos:position pos:line="42" pos:column="31"/></name></name> <operator pos:line="42" pos:column="32">&lt;&lt;<pos:position pos:line="42" pos:column="40"/></operator> <literal type="string" pos:line="42" pos:column="35">"( "<pos:position pos:line="42" pos:column="39"/></literal> <operator pos:line="42" pos:column="40">&lt;&lt;<pos:position pos:line="42" pos:column="48"/></operator> <name pos:line="42" pos:column="43">swap_hdr_sz<pos:position pos:line="42" pos:column="54"/></name> <operator pos:line="42" pos:column="55">&lt;&lt;<pos:position pos:line="42" pos:column="63"/></operator> <literal type="string" pos:line="42" pos:column="58">" + "<pos:position pos:line="42" pos:column="63"/></literal> <operator pos:line="42" pos:column="64">&lt;&lt;<pos:position pos:line="42" pos:column="72"/></operator>
           <name><name pos:line="43" pos:column="12">entry<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">-&gt;<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="19">mem_obj<pos:position pos:line="43" pos:column="26"/></name><operator pos:line="43" pos:column="26">-&gt;<pos:position pos:line="43" pos:column="31"/></operator><name pos:line="43" pos:column="28">object_sz<pos:position pos:line="43" pos:column="37"/></name></name> <operator pos:line="43" pos:column="38">&lt;&lt;<pos:position pos:line="43" pos:column="46"/></operator> <literal type="string" pos:line="43" pos:column="41">")"<pos:position pos:line="43" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="46"/></expr_stmt>
    <return pos:line="44" pos:column="5">return <expr><literal type="boolean" pos:line="44" pos:column="12">true<pos:position pos:line="44" pos:column="16"/></literal></expr>;<pos:position pos:line="44" pos:column="17"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
