<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6160_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">accessLogLog<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name><name pos:line="2" pos:column="14">AccessLogEntry<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">Pointer<pos:position pos:line="2" pos:column="37"/></name></name> <modifier pos:line="2" pos:column="38">&amp;<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="39">al<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">ACLChecklist<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type> <name pos:line="2" pos:column="58">checklist<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">LogfileStatus<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">!=<pos:position pos:line="4" pos:column="25"/></operator> <name pos:line="4" pos:column="26">LOG_ENABLE<pos:position pos:line="4" pos:column="36"/></name></expr>)<pos:position pos:line="4" pos:column="37"/></condition><then pos:line="4" pos:column="37">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">accessLogLogTo<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><name><name pos:line="7" pos:column="20">Config<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">.<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">Log<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">.<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="31">accesslogs<pos:position pos:line="7" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="43">al<pos:position pos:line="7" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="47">checklist<pos:position pos:line="7" pos:column="56"/></name></expr></argument>)<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="58"/></expr_stmt>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">MULTICAST_MISS_STREAM<pos:position pos:line="8" pos:column="26"/></name></expr></cpp:if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">al<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">-&gt;<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="13">cache<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">code<pos:position pos:line="10" pos:column="23"/></name></name> <operator pos:line="10" pos:column="24">!=<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">LOG_TCP_MISS<pos:position pos:line="10" pos:column="39"/></name></expr>)<pos:position pos:line="10" pos:column="40"/></condition><then pos:line="10" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">void<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">)<pos:position pos:line="11" pos:column="15"/></operator> <literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></expr_stmt></block></then>
    <elseif pos:line="12" pos:column="5">else <if pos:line="12" pos:column="10">if <condition pos:line="12" pos:column="13">(<expr><name><name pos:line="12" pos:column="14">al<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">http<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">.<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">method<pos:position pos:line="12" pos:column="29"/></name></name> <operator pos:line="12" pos:column="30">!=<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="33">METHOD_GET<pos:position pos:line="12" pos:column="43"/></name></expr>)<pos:position pos:line="12" pos:column="44"/></condition><then pos:line="12" pos:column="44">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">void<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">)<pos:position pos:line="13" pos:column="15"/></operator> <literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="14" pos:column="5">else <if pos:line="14" pos:column="10">if <condition pos:line="14" pos:column="13">(<expr><name pos:line="14" pos:column="14">mcast_miss_fd<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&lt;<pos:position pos:line="14" pos:column="32"/></operator> <literal type="number" pos:line="14" pos:column="30">0<pos:position pos:line="14" pos:column="31"/></literal></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">void<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">)<pos:position pos:line="15" pos:column="15"/></operator> <literal type="number" pos:line="15" pos:column="16">0<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></expr_stmt></block></then></if></elseif>
    <else pos:line="16" pos:column="5">else <block pos:line="16" pos:column="10">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">unsigned<pos:position pos:line="17" pos:column="17"/></name> <name pos:line="17" pos:column="18">int<pos:position pos:line="17" pos:column="21"/></name></type> <name><name pos:line="17" pos:column="22">ibuf<pos:position pos:line="17" pos:column="26"/></name><index pos:line="17" pos:column="26">[<expr><literal type="number" pos:line="17" pos:column="27">365<pos:position pos:line="17" pos:column="30"/></literal></expr>]<pos:position pos:line="17" pos:column="31"/></index></name></decl>;<pos:position pos:line="17" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">size_t<pos:position pos:line="18" pos:column="15"/></name></type> <name pos:line="18" pos:column="16">isize<pos:position pos:line="18" pos:column="21"/></name></decl>;<pos:position pos:line="18" pos:column="22"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">xstrncpy<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><operator pos:line="19" pos:column="18">(<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">char<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">*<pos:position pos:line="19" pos:column="25"/></operator><operator pos:line="19" pos:column="25">)<pos:position pos:line="19" pos:column="26"/></operator> <name pos:line="19" pos:column="27">ibuf<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><call><name><name pos:line="19" pos:column="33">al<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">-&gt;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="37">url<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">.<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="41">c_str<pos:position pos:line="19" pos:column="46"/></name></name><argument_list pos:line="19" pos:column="46">()<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="50">364<pos:position pos:line="19" pos:column="53"/></literal> <operator pos:line="19" pos:column="54">*<pos:position pos:line="19" pos:column="55"/></operator> <sizeof pos:line="19" pos:column="56">sizeof<argument_list pos:line="19" pos:column="62">(<argument><expr><name pos:line="19" pos:column="63">int<pos:position pos:line="19" pos:column="66"/></name></expr></argument>)<pos:position pos:line="19" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">isize<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator><operator pos:line="20" pos:column="18">(<pos:position pos:line="20" pos:column="19"/></operator><call><name><name pos:line="20" pos:column="19">al<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">-&gt;<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="23">url<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">.<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="27">length<pos:position pos:line="20" pos:column="33"/></name></name><argument_list pos:line="20" pos:column="33">()<pos:position pos:line="20" pos:column="35"/></argument_list></call> <operator pos:line="20" pos:column="36">+<pos:position pos:line="20" pos:column="37"/></operator> <literal type="number" pos:line="20" pos:column="38">8<pos:position pos:line="20" pos:column="39"/></literal><operator pos:line="20" pos:column="39">)<pos:position pos:line="20" pos:column="40"/></operator> <operator pos:line="20" pos:column="41">/<pos:position pos:line="20" pos:column="42"/></operator> <literal type="number" pos:line="20" pos:column="43">8<pos:position pos:line="20" pos:column="44"/></literal><operator pos:line="20" pos:column="44">)<pos:position pos:line="20" pos:column="45"/></operator> <operator pos:line="20" pos:column="46">*<pos:position pos:line="20" pos:column="47"/></operator> <literal type="number" pos:line="20" pos:column="48">2<pos:position pos:line="20" pos:column="49"/></literal></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>

        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">isize<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">&gt;<pos:position pos:line="22" pos:column="23"/></operator> <literal type="number" pos:line="22" pos:column="21">364<pos:position pos:line="22" pos:column="24"/></literal></expr>)<pos:position pos:line="22" pos:column="25"/></condition><then pos:line="22" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="13">isize<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <literal type="number" pos:line="23" pos:column="21">364<pos:position pos:line="23" pos:column="24"/></literal></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="25" pos:column="9">mcast_encode<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><operator pos:line="25" pos:column="22">(<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">unsigned<pos:position pos:line="25" pos:column="31"/></name> <name pos:line="25" pos:column="32">int<pos:position pos:line="25" pos:column="35"/></name> <operator pos:line="25" pos:column="36">*<pos:position pos:line="25" pos:column="37"/></operator><operator pos:line="25" pos:column="37">)<pos:position pos:line="25" pos:column="38"/></operator> <name pos:line="25" pos:column="39">ibuf<pos:position pos:line="25" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">isize<pos:position pos:line="25" pos:column="50"/></name></expr></argument>,
                     <argument><expr><operator pos:line="26" pos:column="22">(<pos:position pos:line="26" pos:column="23"/></operator><specifier pos:line="26" pos:column="23">const<pos:position pos:line="26" pos:column="28"/></specifier> <name pos:line="26" pos:column="29">unsigned<pos:position pos:line="26" pos:column="37"/></name> <name pos:line="26" pos:column="38">int<pos:position pos:line="26" pos:column="41"/></name> <operator pos:line="26" pos:column="42">*<pos:position pos:line="26" pos:column="43"/></operator><operator pos:line="26" pos:column="43">)<pos:position pos:line="26" pos:column="44"/></operator> <name><name pos:line="26" pos:column="45">Config<pos:position pos:line="26" pos:column="51"/></name><operator pos:line="26" pos:column="51">.<pos:position pos:line="26" pos:column="52"/></operator><name pos:line="26" pos:column="52">mcast_miss<pos:position pos:line="26" pos:column="62"/></name><operator pos:line="26" pos:column="62">.<pos:position pos:line="26" pos:column="63"/></operator><name pos:line="26" pos:column="63">encode_key<pos:position pos:line="26" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="75"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="28" pos:column="9">comm_udp_sendto<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">mcast_miss_fd<pos:position pos:line="28" pos:column="38"/></name></expr></argument>,
                        <argument><expr><operator pos:line="29" pos:column="25">&amp;<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="26">mcast_miss_to<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="41">sizeof<argument_list pos:line="29" pos:column="47">(<argument><expr><name pos:line="29" pos:column="48">mcast_miss_to<pos:position pos:line="29" pos:column="61"/></name></expr></argument>)<pos:position pos:line="29" pos:column="62"/></argument_list></sizeof></expr></argument>,
                        <argument><expr><name pos:line="30" pos:column="25">ibuf<pos:position pos:line="30" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="31">isize<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">*<pos:position pos:line="30" pos:column="38"/></operator> <sizeof pos:line="30" pos:column="39">sizeof<argument_list pos:line="30" pos:column="45">(<argument><expr><name pos:line="30" pos:column="46">int<pos:position pos:line="30" pos:column="49"/></name></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></else></if>

<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
