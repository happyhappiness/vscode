<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_644_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">GetInteger<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">void<pos:position pos:line="2" pos:column="16"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="17"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">token<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><call><name><name pos:line="4" pos:column="19">ConfigParser<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">::<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="33">NextToken<pos:position pos:line="4" pos:column="42"/></name></name><argument_list pos:line="4" pos:column="42">()<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">i<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">token<pos:position pos:line="7" pos:column="15"/></name></expr>)<pos:position pos:line="7" pos:column="16"/></condition><then pos:line="7" pos:column="16"> <block pos:line="7" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">self_destruct<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
        <return pos:line="9" pos:column="9">return <expr><operator pos:line="9" pos:column="16">-<pos:position pos:line="9" pos:column="17"/></operator><literal type="number" pos:line="9" pos:column="17">1<pos:position pos:line="9" pos:column="18"/></literal></expr>;<pos:position pos:line="9" pos:column="19"/></return> <comment type="line" pos:line="9" pos:column="20">// not reachable</comment>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="12" pos:column="5">// The conversion must honor 0 and 0x prefixes, which are important for things like umask</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int64_t<pos:position pos:line="13" pos:column="12"/></name></type> <name pos:line="13" pos:column="13">ret<pos:position pos:line="13" pos:column="16"/></name> <init pos:line="13" pos:column="17">= <expr><call><name pos:line="13" pos:column="19">xatoll<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">token<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="33">0<pos:position pos:line="13" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>

    <expr_stmt><expr><name pos:line="15" pos:column="5">i<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">int<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">)<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">ret<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">ret<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">!=<pos:position pos:line="16" pos:column="15"/></operator> <cast type="static" pos:line="16" pos:column="16">static_cast<argument_list type="generic" pos:line="16" pos:column="27">&lt;<argument><expr><name pos:line="16" pos:column="28">int64_t<pos:position pos:line="16" pos:column="35"/></name></expr></argument>&gt;<pos:position pos:line="16" pos:column="39"/></argument_list><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">i<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></cast></expr>)<pos:position pos:line="16" pos:column="40"/></condition><then pos:line="16" pos:column="40"> <block pos:line="16" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="19">DBG_PARSE_NOTE<pos:position pos:line="17" pos:column="33"/></name><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">DBG_IMPORTANT<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="50">"ERROR: The value '"<pos:position pos:line="17" pos:column="70"/></literal> <operator pos:line="17" pos:column="71">&lt;&lt;<pos:position pos:line="17" pos:column="79"/></operator> <name pos:line="17" pos:column="74">token<pos:position pos:line="17" pos:column="79"/></name> <operator pos:line="17" pos:column="80">&lt;&lt;<pos:position pos:line="17" pos:column="88"/></operator> <literal type="string" pos:line="17" pos:column="83">"' is larger than the type 'int'."<pos:position pos:line="17" pos:column="117"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="119"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">self_destruct<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">()<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">i<pos:position pos:line="21" pos:column="13"/></name></expr>;<pos:position pos:line="21" pos:column="14"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
