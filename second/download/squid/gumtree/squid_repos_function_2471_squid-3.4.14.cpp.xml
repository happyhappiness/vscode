<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2471_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">ipcacheMarkBadAddr<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">name<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name><name pos:line="2" pos:column="44">Ip<pos:position pos:line="2" pos:column="46"/></name><operator pos:line="2" pos:column="46">::<pos:position pos:line="2" pos:column="48"/></operator><name pos:line="2" pos:column="48">Address<pos:position pos:line="2" pos:column="55"/></name></name> <modifier pos:line="2" pos:column="56">&amp;<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="57">addr<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ipcache_entry<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">i<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ipcache_addrs<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">ia<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">k<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

    <comment type="block" format="doxygen" pos:line="8" pos:column="5">/** Does nothing if the domain name does not exist. */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">i<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">ipcache_get<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">name<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call><operator pos:line="9" pos:column="31">)<pos:position pos:line="9" pos:column="32"/></operator> <operator pos:line="9" pos:column="33">==<pos:position pos:line="9" pos:column="35"/></operator> <name pos:line="9" pos:column="36">NULL<pos:position pos:line="9" pos:column="40"/></name></expr>)<pos:position pos:line="9" pos:column="41"/></condition><then pos:line="9" pos:column="41">
        <block type="pseudo"><return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="12" pos:column="5">ia<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <operator pos:line="12" pos:column="10">&amp;<pos:position pos:line="12" pos:column="15"/></operator><name><name pos:line="12" pos:column="11">i<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">addrs<pos:position pos:line="12" pos:column="19"/></name></name></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>

    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><expr><name pos:line="14" pos:column="10">k<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr>;<pos:position pos:line="14" pos:column="16"/></init> <condition><expr><name pos:line="14" pos:column="17">k<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&lt;<pos:position pos:line="14" pos:column="23"/></operator> <operator pos:line="14" pos:column="21">(<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">int<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">)<pos:position pos:line="14" pos:column="26"/></operator> <name><name pos:line="14" pos:column="27">ia<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">-&gt;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="31">count<pos:position pos:line="14" pos:column="36"/></name></name></expr>;<pos:position pos:line="14" pos:column="37"/></condition> <incr><expr><operator pos:line="14" pos:column="38">++<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="40">k<pos:position pos:line="14" pos:column="41"/></name></expr></incr>)<pos:position pos:line="14" pos:column="42"/></control> <block pos:line="14" pos:column="43">{
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">addr<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <name><name pos:line="15" pos:column="21">ia<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">-&gt;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="25">in_addrs<pos:position pos:line="15" pos:column="33"/></name><index pos:line="15" pos:column="33">[<expr><name pos:line="15" pos:column="34">k<pos:position pos:line="15" pos:column="35"/></name></expr>]<pos:position pos:line="15" pos:column="36"/></index></name></expr> )<pos:position pos:line="15" pos:column="38"/></condition><then pos:line="15" pos:column="38">
            <block type="pseudo"><break pos:line="16" pos:column="13">break;<pos:position pos:line="16" pos:column="19"/></break></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></for>

    <comment type="block" format="doxygen" pos:line="19" pos:column="5">/** Does nothing if the IP does not exist for the doamin. */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">k<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">==<pos:position pos:line="20" pos:column="13"/></operator> <operator pos:line="20" pos:column="14">(<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">int<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">)<pos:position pos:line="20" pos:column="19"/></operator> <name><name pos:line="20" pos:column="20">ia<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">count<pos:position pos:line="20" pos:column="29"/></name></name></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30">
        <block type="pseudo"><return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return></block></then></if>

    <comment type="block" format="doxygen" pos:line="23" pos:column="5">/** Marks the given address as BAD */</comment>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">!<pos:position pos:line="24" pos:column="10"/></operator><name><name pos:line="24" pos:column="10">ia<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">-&gt;<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="14">bad_mask<pos:position pos:line="24" pos:column="22"/></name><index pos:line="24" pos:column="22">[<expr><name pos:line="24" pos:column="23">k<pos:position pos:line="24" pos:column="24"/></name></expr>]<pos:position pos:line="24" pos:column="25"/></index></name></expr>)<pos:position pos:line="24" pos:column="26"/></condition><then pos:line="24" pos:column="26"> <block pos:line="24" pos:column="27">{
        <expr_stmt><expr><name><name pos:line="25" pos:column="9">ia<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">bad_mask<pos:position pos:line="25" pos:column="21"/></name><index pos:line="25" pos:column="21">[<expr><name pos:line="25" pos:column="22">k<pos:position pos:line="25" pos:column="23"/></name></expr>]<pos:position pos:line="25" pos:column="24"/></index></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="27">TRUE<pos:position pos:line="25" pos:column="31"/></name></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="26" pos:column="9">++<pos:position pos:line="26" pos:column="11"/></operator><name><name pos:line="26" pos:column="11">ia<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">badcount<pos:position pos:line="26" pos:column="23"/></name></name></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">14<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">2<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"ipcacheMarkBadAddr: "<pos:position pos:line="27" pos:column="45"/></literal> <operator pos:line="27" pos:column="46">&lt;&lt;<pos:position pos:line="27" pos:column="54"/></operator> <name pos:line="27" pos:column="49">name<pos:position pos:line="27" pos:column="53"/></name> <operator pos:line="27" pos:column="54">&lt;&lt;<pos:position pos:line="27" pos:column="62"/></operator> <literal type="string" pos:line="27" pos:column="57">" "<pos:position pos:line="27" pos:column="60"/></literal> <operator pos:line="27" pos:column="61">&lt;&lt;<pos:position pos:line="27" pos:column="69"/></operator> <name pos:line="27" pos:column="64">addr<pos:position pos:line="27" pos:column="68"/></name></expr></argument> )<pos:position pos:line="27" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="30" pos:column="5">/** then calls ipcacheCycleAddr() to advance the current pointer to the next OK address. */</comment>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">ipcacheCycleAddr<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">name<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="28">ia<pos:position pos:line="31" pos:column="30"/></name></expr></argument>)<pos:position pos:line="31" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
