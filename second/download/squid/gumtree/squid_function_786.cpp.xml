<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_786.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">xmalloc_scan_region<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">void<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">start<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">int<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">size<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">depth<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">B<pos:position pos:line="4" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="12">I<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">ptr<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><name pos:line="5" pos:column="17">start<pos:position pos:line="5" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">end<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><name pos:line="6" pos:column="17">ptr<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">+<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">size<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">-<pos:position pos:line="6" pos:column="29"/></operator> <name pos:line="6" pos:column="30">XMALLOC_LEAK_ALIGN<pos:position pos:line="6" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="7" pos:column="5">static<pos:position pos:line="7" pos:column="11"/></specifier> <type><name pos:line="7" pos:column="12">int<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">sum<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>

    <while pos:line="9" pos:column="5">while <condition pos:line="9" pos:column="11">(<expr><name pos:line="9" pos:column="12">ptr<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">&lt;=<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="19">end<pos:position pos:line="9" pos:column="22"/></name></expr>)<pos:position pos:line="9" pos:column="23"/></condition> <block pos:line="9" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">void<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">p<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><operator pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></operator><operator pos:line="10" pos:column="20">(<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">void<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">*<pos:position pos:line="10" pos:column="27"/></operator><operator pos:line="10" pos:column="27">*<pos:position pos:line="10" pos:column="28"/></operator><operator pos:line="10" pos:column="28">)<pos:position pos:line="10" pos:column="29"/></operator> <name pos:line="10" pos:column="30">ptr<pos:position pos:line="10" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="34"/></decl_stmt>

        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">p<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">&amp;&amp;<pos:position pos:line="12" pos:column="25"/></operator> <name pos:line="12" pos:column="18">p<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">!=<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">start<pos:position pos:line="12" pos:column="28"/></name></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29"> <block pos:line="12" pos:column="30">{
            <expr_stmt><expr><name pos:line="13" pos:column="13">B<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">DBG_HASH_BUCKET<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">p<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>

            <for pos:line="15" pos:column="13">for <control pos:line="15" pos:column="17">(<init><expr><name pos:line="15" pos:column="18">I<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">=<pos:position pos:line="15" pos:column="21"/></operator> <literal type="number" pos:line="15" pos:column="22">0<pos:position pos:line="15" pos:column="23"/></literal></expr>;<pos:position pos:line="15" pos:column="24"/></init> <condition><expr><name pos:line="15" pos:column="25">I<pos:position pos:line="15" pos:column="26"/></name> <operator pos:line="15" pos:column="27">&lt;<pos:position pos:line="15" pos:column="31"/></operator> <name pos:line="15" pos:column="29">DBG_ARRY_SZ<pos:position pos:line="15" pos:column="40"/></name></expr>;<pos:position pos:line="15" pos:column="41"/></condition> <incr><expr><operator pos:line="15" pos:column="42">++<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="44">I<pos:position pos:line="15" pos:column="45"/></name></expr></incr>)<pos:position pos:line="15" pos:column="46"/></control> <block pos:line="15" pos:column="47">{
                <if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name><name pos:line="16" pos:column="21">malloc_ptrs<pos:position pos:line="16" pos:column="32"/></name><index pos:line="16" pos:column="32">[<expr><name pos:line="16" pos:column="33">B<pos:position pos:line="16" pos:column="34"/></name></expr>]<pos:position pos:line="16" pos:column="35"/></index><index pos:line="16" pos:column="35">[<expr><name pos:line="16" pos:column="36">I<pos:position pos:line="16" pos:column="37"/></name></expr>]<pos:position pos:line="16" pos:column="38"/></index></name> <operator pos:line="16" pos:column="39">==<pos:position pos:line="16" pos:column="41"/></operator> <name pos:line="16" pos:column="42">p<pos:position pos:line="16" pos:column="43"/></name></expr>)<pos:position pos:line="16" pos:column="44"/></condition><then pos:line="16" pos:column="44"> <block pos:line="16" pos:column="45">{
                    <if pos:line="17" pos:column="21">if <condition pos:line="17" pos:column="24">(<expr><operator pos:line="17" pos:column="25">!<pos:position pos:line="17" pos:column="26"/></operator><name><name pos:line="17" pos:column="26">malloc_refs<pos:position pos:line="17" pos:column="37"/></name><index pos:line="17" pos:column="37">[<expr><name pos:line="17" pos:column="38">B<pos:position pos:line="17" pos:column="39"/></name></expr>]<pos:position pos:line="17" pos:column="40"/></index><index pos:line="17" pos:column="40">[<expr><name pos:line="17" pos:column="41">I<pos:position pos:line="17" pos:column="42"/></name></expr>]<pos:position pos:line="17" pos:column="43"/></index></name><operator pos:line="17" pos:column="43">++<pos:position pos:line="17" pos:column="45"/></operator></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46"> <block pos:line="17" pos:column="47">{
                        <comment type="block" pos:line="18" pos:column="25">/* A new reference */</comment>
                        <expr_stmt><expr><call><name pos:line="19" pos:column="25">fprintf<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">stderr<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="41">"%*s%p %s:%d size %d allocation %d\n"<pos:position pos:line="19" pos:column="78"/></literal></expr></argument>,
                                <argument><expr><name pos:line="20" pos:column="33">depth<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="40">""<pos:position pos:line="20" pos:column="42"/></literal></expr></argument>,
                                <argument><expr><name><name pos:line="21" pos:column="33">malloc_ptrs<pos:position pos:line="21" pos:column="44"/></name><index pos:line="21" pos:column="44">[<expr><name pos:line="21" pos:column="45">B<pos:position pos:line="21" pos:column="46"/></name></expr>]<pos:position pos:line="21" pos:column="47"/></index><index pos:line="21" pos:column="47">[<expr><name pos:line="21" pos:column="48">I<pos:position pos:line="21" pos:column="49"/></name></expr>]<pos:position pos:line="21" pos:column="50"/></index></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="52">malloc_file<pos:position pos:line="21" pos:column="63"/></name><index pos:line="21" pos:column="63">[<expr><name pos:line="21" pos:column="64">B<pos:position pos:line="21" pos:column="65"/></name></expr>]<pos:position pos:line="21" pos:column="66"/></index><index pos:line="21" pos:column="66">[<expr><name pos:line="21" pos:column="67">I<pos:position pos:line="21" pos:column="68"/></name></expr>]<pos:position pos:line="21" pos:column="69"/></index></name></expr></argument>,
                                <argument><expr><name><name pos:line="22" pos:column="33">malloc_line<pos:position pos:line="22" pos:column="44"/></name><index pos:line="22" pos:column="44">[<expr><name pos:line="22" pos:column="45">B<pos:position pos:line="22" pos:column="46"/></name></expr>]<pos:position pos:line="22" pos:column="47"/></index><index pos:line="22" pos:column="47">[<expr><name pos:line="22" pos:column="48">I<pos:position pos:line="22" pos:column="49"/></name></expr>]<pos:position pos:line="22" pos:column="50"/></index></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="52">malloc_size<pos:position pos:line="22" pos:column="63"/></name><index pos:line="22" pos:column="63">[<expr><name pos:line="22" pos:column="64">B<pos:position pos:line="22" pos:column="65"/></name></expr>]<pos:position pos:line="22" pos:column="66"/></index><index pos:line="22" pos:column="66">[<expr><name pos:line="22" pos:column="67">I<pos:position pos:line="22" pos:column="68"/></name></expr>]<pos:position pos:line="22" pos:column="69"/></index></name></expr></argument>,
                                <argument><expr><name><name pos:line="23" pos:column="33">malloc_count<pos:position pos:line="23" pos:column="45"/></name><index pos:line="23" pos:column="45">[<expr><name pos:line="23" pos:column="46">B<pos:position pos:line="23" pos:column="47"/></name></expr>]<pos:position pos:line="23" pos:column="48"/></index><index pos:line="23" pos:column="48">[<expr><name pos:line="23" pos:column="49">I<pos:position pos:line="23" pos:column="50"/></name></expr>]<pos:position pos:line="23" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="24" pos:column="25">sum<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">+=<pos:position pos:line="24" pos:column="31"/></operator> <name><name pos:line="24" pos:column="32">malloc_size<pos:position pos:line="24" pos:column="43"/></name><index pos:line="24" pos:column="43">[<expr><name pos:line="24" pos:column="44">B<pos:position pos:line="24" pos:column="45"/></name></expr>]<pos:position pos:line="24" pos:column="46"/></index><index pos:line="24" pos:column="46">[<expr><name pos:line="24" pos:column="47">I<pos:position pos:line="24" pos:column="48"/></name></expr>]<pos:position pos:line="24" pos:column="49"/></index></name></expr>;<pos:position pos:line="24" pos:column="50"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="25" pos:column="25">xmalloc_scan_region<pos:position pos:line="25" pos:column="44"/></name><argument_list pos:line="25" pos:column="44">(<argument><expr><name><name pos:line="25" pos:column="45">malloc_ptrs<pos:position pos:line="25" pos:column="56"/></name><index pos:line="25" pos:column="56">[<expr><name pos:line="25" pos:column="57">B<pos:position pos:line="25" pos:column="58"/></name></expr>]<pos:position pos:line="25" pos:column="59"/></index><index pos:line="25" pos:column="59">[<expr><name pos:line="25" pos:column="60">I<pos:position pos:line="25" pos:column="61"/></name></expr>]<pos:position pos:line="25" pos:column="62"/></index></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="64">malloc_size<pos:position pos:line="25" pos:column="75"/></name><index pos:line="25" pos:column="75">[<expr><name pos:line="25" pos:column="76">B<pos:position pos:line="25" pos:column="77"/></name></expr>]<pos:position pos:line="25" pos:column="78"/></index><index pos:line="25" pos:column="78">[<expr><name pos:line="25" pos:column="79">I<pos:position pos:line="25" pos:column="80"/></name></expr>]<pos:position pos:line="25" pos:column="81"/></index></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="83">depth<pos:position pos:line="25" pos:column="88"/></name> <operator pos:line="25" pos:column="89">+<pos:position pos:line="25" pos:column="90"/></operator> <literal type="number" pos:line="25" pos:column="91">1<pos:position pos:line="25" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="94"/></expr_stmt>

                        <if pos:line="27" pos:column="25">if <condition pos:line="27" pos:column="28">(<expr><name pos:line="27" pos:column="29">depth<pos:position pos:line="27" pos:column="34"/></name> <operator pos:line="27" pos:column="35">==<pos:position pos:line="27" pos:column="37"/></operator> <literal type="number" pos:line="27" pos:column="38">0<pos:position pos:line="27" pos:column="39"/></literal></expr>)<pos:position pos:line="27" pos:column="40"/></condition><then pos:line="27" pos:column="40"> <block pos:line="27" pos:column="41">{
                            <if pos:line="28" pos:column="29">if <condition pos:line="28" pos:column="32">(<expr><name pos:line="28" pos:column="33">sum<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">!=<pos:position pos:line="28" pos:column="39"/></operator> <name><name pos:line="28" pos:column="40">malloc_size<pos:position pos:line="28" pos:column="51"/></name><index pos:line="28" pos:column="51">[<expr><name pos:line="28" pos:column="52">B<pos:position pos:line="28" pos:column="53"/></name></expr>]<pos:position pos:line="28" pos:column="54"/></index><index pos:line="28" pos:column="54">[<expr><name pos:line="28" pos:column="55">I<pos:position pos:line="28" pos:column="56"/></name></expr>]<pos:position pos:line="28" pos:column="57"/></index></name></expr>)<pos:position pos:line="28" pos:column="58"/></condition><then pos:line="28" pos:column="58">
                                <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="33">fprintf<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name pos:line="29" pos:column="41">stderr<pos:position pos:line="29" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="49">"=== %d bytes\n"<pos:position pos:line="29" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="67">sum<pos:position pos:line="29" pos:column="70"/></name></expr></argument>)<pos:position pos:line="29" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="72"/></expr_stmt></block></then></if>

                            <expr_stmt><expr><name pos:line="31" pos:column="29">sum<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">=<pos:position pos:line="31" pos:column="34"/></operator> <literal type="number" pos:line="31" pos:column="35">0<pos:position pos:line="31" pos:column="36"/></literal></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
                        }<pos:position pos:line="32" pos:column="26"/></block></then></if>

<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><name pos:line="34" pos:column="5">XMALLOC_SHOW_ALL_REFERENCES<pos:position pos:line="34" pos:column="32"/></name></expr></cpp:if>

                    }<pos:position pos:line="36" pos:column="22"/></block></then> <else pos:line="36" pos:column="23">else <block pos:line="36" pos:column="28">{
                        <comment type="block" pos:line="37" pos:column="25">/* We have already scanned this pointer... */</comment>
                        <expr_stmt><expr><call><name pos:line="38" pos:column="25">fprintf<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">stderr<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="41">"%*s%p %s:%d size %d allocation %d ... (%d)\n"<pos:position pos:line="38" pos:column="87"/></literal></expr></argument>,
                                <argument><expr><name pos:line="39" pos:column="33">depth<pos:position pos:line="39" pos:column="38"/></name> <operator pos:line="39" pos:column="39">*<pos:position pos:line="39" pos:column="40"/></operator> <literal type="number" pos:line="39" pos:column="41">2<pos:position pos:line="39" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="44">""<pos:position pos:line="39" pos:column="46"/></literal></expr></argument>,
                                <argument><expr><name><name pos:line="40" pos:column="33">malloc_ptrs<pos:position pos:line="40" pos:column="44"/></name><index pos:line="40" pos:column="44">[<expr><name pos:line="40" pos:column="45">B<pos:position pos:line="40" pos:column="46"/></name></expr>]<pos:position pos:line="40" pos:column="47"/></index><index pos:line="40" pos:column="47">[<expr><name pos:line="40" pos:column="48">I<pos:position pos:line="40" pos:column="49"/></name></expr>]<pos:position pos:line="40" pos:column="50"/></index></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="52">malloc_file<pos:position pos:line="40" pos:column="63"/></name><index pos:line="40" pos:column="63">[<expr><name pos:line="40" pos:column="64">B<pos:position pos:line="40" pos:column="65"/></name></expr>]<pos:position pos:line="40" pos:column="66"/></index><index pos:line="40" pos:column="66">[<expr><name pos:line="40" pos:column="67">I<pos:position pos:line="40" pos:column="68"/></name></expr>]<pos:position pos:line="40" pos:column="69"/></index></name></expr></argument>,
                                <argument><expr><name><name pos:line="41" pos:column="33">malloc_line<pos:position pos:line="41" pos:column="44"/></name><index pos:line="41" pos:column="44">[<expr><name pos:line="41" pos:column="45">B<pos:position pos:line="41" pos:column="46"/></name></expr>]<pos:position pos:line="41" pos:column="47"/></index><index pos:line="41" pos:column="47">[<expr><name pos:line="41" pos:column="48">I<pos:position pos:line="41" pos:column="49"/></name></expr>]<pos:position pos:line="41" pos:column="50"/></index></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="52">malloc_size<pos:position pos:line="41" pos:column="63"/></name><index pos:line="41" pos:column="63">[<expr><name pos:line="41" pos:column="64">B<pos:position pos:line="41" pos:column="65"/></name></expr>]<pos:position pos:line="41" pos:column="66"/></index><index pos:line="41" pos:column="66">[<expr><name pos:line="41" pos:column="67">I<pos:position pos:line="41" pos:column="68"/></name></expr>]<pos:position pos:line="41" pos:column="69"/></index></name></expr></argument>,
                                <argument><expr><name><name pos:line="42" pos:column="33">malloc_count<pos:position pos:line="42" pos:column="45"/></name><index pos:line="42" pos:column="45">[<expr><name pos:line="42" pos:column="46">B<pos:position pos:line="42" pos:column="47"/></name></expr>]<pos:position pos:line="42" pos:column="48"/></index><index pos:line="42" pos:column="48">[<expr><name pos:line="42" pos:column="49">I<pos:position pos:line="42" pos:column="50"/></name></expr>]<pos:position pos:line="42" pos:column="51"/></index></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="53">malloc_refs<pos:position pos:line="42" pos:column="64"/></name><index pos:line="42" pos:column="64">[<expr><name pos:line="42" pos:column="65">B<pos:position pos:line="42" pos:column="66"/></name></expr>]<pos:position pos:line="42" pos:column="67"/></index><index pos:line="42" pos:column="67">[<expr><name pos:line="42" pos:column="68">I<pos:position pos:line="42" pos:column="69"/></name></expr>]<pos:position pos:line="42" pos:column="70"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="72"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>

                    }<pos:position pos:line="45" pos:column="22"/></block></else></if>
                }<pos:position pos:line="46" pos:column="18"/></block></then></if>
            }<pos:position pos:line="47" pos:column="14"/></block></for>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="50" pos:column="9">ptr<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">+=<pos:position pos:line="50" pos:column="15"/></operator> <name pos:line="50" pos:column="16">XMALLOC_LEAK_ALIGN<pos:position pos:line="50" pos:column="34"/></name></expr>;<pos:position pos:line="50" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></while>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
