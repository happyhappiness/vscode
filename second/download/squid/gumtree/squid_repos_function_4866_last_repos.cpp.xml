<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4866_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">StatusLine<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">parse<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">String<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">&amp;<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="39">protoPrefix<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier> <name pos:line="2" pos:column="58">char<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">start<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="71">const<pos:position pos:line="2" pos:column="76"/></specifier> <name pos:line="2" pos:column="77">char<pos:position pos:line="2" pos:column="81"/></name> <modifier pos:line="2" pos:column="82">*<pos:position pos:line="2" pos:column="83"/></modifier></type></decl></parameter> <comment type="block" pos:line="2" pos:column="84">/*end*/</comment>)<pos:position pos:line="2" pos:column="92"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">status_<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">=<pos:position pos:line="4" pos:column="14"/></operator> <name><name pos:line="4" pos:column="15">Http<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">::<pos:position pos:line="4" pos:column="21"/></operator><name pos:line="4" pos:column="21">scInvalidHeader<pos:position pos:line="4" pos:column="36"/></name></name></expr>;<pos:position pos:line="4" pos:column="37"/></expr_stmt>    <comment type="block" pos:line="4" pos:column="41">/* Squid header parsing error */</comment>

    <comment type="line" pos:line="6" pos:column="5">// XXX: HttpMsg::parse() has a similar check but is using</comment>
    <comment type="line" pos:line="7" pos:column="5">// casesensitive comparison (which is required by HTTP errata?)</comment>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name><name pos:line="9" pos:column="9">protoPrefix<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">.<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">cmp<pos:position pos:line="9" pos:column="24"/></name></name><argument_list pos:line="9" pos:column="24">(<argument><expr><literal type="string" pos:line="9" pos:column="25">"ICY"<pos:position pos:line="9" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="32">3<pos:position pos:line="9" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call> <operator pos:line="9" pos:column="35">==<pos:position pos:line="9" pos:column="37"/></operator> <literal type="number" pos:line="9" pos:column="38">0<pos:position pos:line="9" pos:column="39"/></literal></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40"> <block pos:line="9" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">57<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">3<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="23">"Invalid HTTP identifier. Detected ICY protocol istead."<pos:position pos:line="10" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><name pos:line="11" pos:column="9">protocol<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name><name pos:line="11" pos:column="20">AnyP<pos:position pos:line="11" pos:column="24"/></name><operator pos:line="11" pos:column="24">::<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="26">PROTO_ICY<pos:position pos:line="11" pos:column="35"/></name></name></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">start<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">+=<pos:position pos:line="12" pos:column="17"/></operator> <call><name><name pos:line="12" pos:column="18">protoPrefix<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">.<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">size<pos:position pos:line="12" pos:column="34"/></name></name><argument_list pos:line="12" pos:column="34">()<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <elseif pos:line="13" pos:column="7">else <if pos:line="13" pos:column="12">if <condition pos:line="13" pos:column="15">(<expr><call><name><name pos:line="13" pos:column="16">protoPrefix<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">.<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">caseCmp<pos:position pos:line="13" pos:column="35"/></name></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">start<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="43">protoPrefix<pos:position pos:line="13" pos:column="54"/></name><operator pos:line="13" pos:column="54">.<pos:position pos:line="13" pos:column="55"/></operator><name pos:line="13" pos:column="55">size<pos:position pos:line="13" pos:column="59"/></name></name><argument_list pos:line="13" pos:column="59">()<pos:position pos:line="13" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call> <operator pos:line="13" pos:column="63">==<pos:position pos:line="13" pos:column="65"/></operator> <literal type="number" pos:line="13" pos:column="66">0<pos:position pos:line="13" pos:column="67"/></literal></expr>)<pos:position pos:line="13" pos:column="68"/></condition><then pos:line="13" pos:column="68"> <block pos:line="13" pos:column="69">{

        <expr_stmt><expr><name pos:line="15" pos:column="9">start<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">+=<pos:position pos:line="15" pos:column="17"/></operator> <call><name><name pos:line="15" pos:column="18">protoPrefix<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">.<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">size<pos:position pos:line="15" pos:column="34"/></name></name><argument_list pos:line="15" pos:column="34">()<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><call><name pos:line="17" pos:column="14">xisdigit<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><operator pos:line="17" pos:column="23">*<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">start<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
            <block type="pseudo"><return pos:line="18" pos:column="13">return <expr><literal type="boolean" pos:line="18" pos:column="20">false<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></return></block></then></if>

        <comment type="line" pos:line="20" pos:column="9">// XXX: HTTPbis have defined this to be single-digit version numbers. no need to sscanf()</comment>
        <comment type="line" pos:line="21" pos:column="9">// XXX: furthermore, only HTTP/1 will be using ASCII format digits</comment>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">sscanf<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">start<pos:position pos:line="23" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="27">"%d.%d"<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="36">&amp;<pos:position pos:line="23" pos:column="41"/></operator><name><name pos:line="23" pos:column="37">version<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">.<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="45">major<pos:position pos:line="23" pos:column="50"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="52">&amp;<pos:position pos:line="23" pos:column="57"/></operator><name><name pos:line="23" pos:column="53">version<pos:position pos:line="23" pos:column="60"/></name><operator pos:line="23" pos:column="60">.<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="61">minor<pos:position pos:line="23" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call> <operator pos:line="23" pos:column="68">!=<pos:position pos:line="23" pos:column="70"/></operator> <literal type="number" pos:line="23" pos:column="71">2<pos:position pos:line="23" pos:column="72"/></literal></expr>)<pos:position pos:line="23" pos:column="73"/></condition><then pos:line="23" pos:column="73"> <block pos:line="23" pos:column="74">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">debugs<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">(<argument><expr><literal type="number" pos:line="24" pos:column="20">57<pos:position pos:line="24" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="24">7<pos:position pos:line="24" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="27">"Invalid HTTP identifier."<pos:position pos:line="24" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
            <return pos:line="25" pos:column="13">return <expr><literal type="boolean" pos:line="25" pos:column="20">false<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if></elseif> <else pos:line="27" pos:column="7">else
        <block type="pseudo"><return pos:line="28" pos:column="9">return <expr><literal type="boolean" pos:line="28" pos:column="16">false<pos:position pos:line="28" pos:column="21"/></literal></expr>;<pos:position pos:line="28" pos:column="22"/></return></block></else></if>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">!<pos:position pos:line="30" pos:column="10"/></operator><operator pos:line="30" pos:column="10">(<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">start<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <call><name pos:line="30" pos:column="19">strchr<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">start<pos:position pos:line="30" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="30" pos:column="33">' '<pos:position pos:line="30" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call><operator pos:line="30" pos:column="37">)<pos:position pos:line="30" pos:column="38"/></operator></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39">
        <block type="pseudo"><return pos:line="31" pos:column="9">return <expr><literal type="boolean" pos:line="31" pos:column="16">false<pos:position pos:line="31" pos:column="21"/></literal></expr>;<pos:position pos:line="31" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="33" pos:column="5">// XXX: should we be using xstrtoui() or xatoui() ?</comment>
    <expr_stmt><expr><name pos:line="34" pos:column="5">status_<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <cast type="static" pos:line="34" pos:column="15">static_cast<argument_list type="generic" pos:line="34" pos:column="26">&lt;<argument><expr><name><name pos:line="34" pos:column="27">Http<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">::<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="33">StatusCode<pos:position pos:line="34" pos:column="43"/></name></name></expr></argument>&gt;<pos:position pos:line="34" pos:column="47"/></argument_list><argument_list pos:line="34" pos:column="44">(<argument><expr><call><name pos:line="34" pos:column="45">atoi<pos:position pos:line="34" pos:column="49"/></name><argument_list pos:line="34" pos:column="49">(<argument><expr><operator pos:line="34" pos:column="50">++<pos:position pos:line="34" pos:column="52"/></operator><name pos:line="34" pos:column="52">start<pos:position pos:line="34" pos:column="57"/></name></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></cast></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>

    <comment type="line" pos:line="36" pos:column="5">// XXX check if the given 'reason' is the default status string, if not save to reason_</comment>

    <comment type="block" pos:line="38" pos:column="5">/* we ignore 'reason-phrase' */</comment>
    <comment type="block" pos:line="39" pos:column="5">/* Should assert start &lt; end ? */</comment>
    <return pos:line="40" pos:column="5">return <expr><literal type="boolean" pos:line="40" pos:column="12">true<pos:position pos:line="40" pos:column="16"/></literal></expr>;<pos:position pos:line="40" pos:column="17"/></return>            <comment type="block" pos:line="40" pos:column="29">/* success */</comment>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
