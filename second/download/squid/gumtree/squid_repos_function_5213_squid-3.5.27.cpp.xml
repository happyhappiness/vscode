<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5213_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">tryWrite<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">buf<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">size_t<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">size<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">off_t<pos:position pos:line="2" pos:column="60"/></name></type> <name pos:line="2" pos:column="61">coreOff<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">79<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">7<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">swap_filen<pos:position pos:line="4" pos:column="29"/></name> <operator pos:line="4" pos:column="30">&lt;&lt;<pos:position pos:line="4" pos:column="38"/></operator> <literal type="string" pos:line="4" pos:column="33">" writes "<pos:position pos:line="4" pos:column="43"/></literal> <operator pos:line="4" pos:column="44">&lt;&lt;<pos:position pos:line="4" pos:column="52"/></operator> <name pos:line="4" pos:column="47">size<pos:position pos:line="4" pos:column="51"/></name> <operator pos:line="4" pos:column="52">&lt;&lt;<pos:position pos:line="4" pos:column="60"/></operator> <literal type="string" pos:line="4" pos:column="55">" more"<pos:position pos:line="4" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="64"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// either this is the first write or append; we do not support write gaps</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><operator pos:line="7" pos:column="12">!<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">coreOff<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">||<pos:position pos:line="7" pos:column="23"/></operator> <name pos:line="7" pos:column="24">coreOff<pos:position pos:line="7" pos:column="31"/></name> <operator pos:line="7" pos:column="32">==<pos:position pos:line="7" pos:column="34"/></operator> <operator pos:line="7" pos:column="35">-<pos:position pos:line="7" pos:column="36"/></operator><literal type="number" pos:line="7" pos:column="36">1<pos:position pos:line="7" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="39"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// allocate the first slice during the first write</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">coreOff<pos:position pos:line="10" pos:column="17"/></name></expr>)<pos:position pos:line="10" pos:column="18"/></condition><then pos:line="10" pos:column="18"> <block pos:line="10" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">sidCurrent<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">&lt;<pos:position pos:line="11" pos:column="31"/></operator> <literal type="number" pos:line="11" pos:column="29">0<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">sidCurrent<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <call><name pos:line="12" pos:column="22">reserveSlotForWriting<pos:position pos:line="12" pos:column="43"/></name><argument_list pos:line="12" pos:column="43">()<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt> <comment type="line" pos:line="12" pos:column="47">// throws on failures</comment>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">assert<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">sidCurrent<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">&gt;=<pos:position pos:line="13" pos:column="32"/></operator> <literal type="number" pos:line="13" pos:column="30">0<pos:position pos:line="13" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">writeAnchor<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">()<pos:position pos:line="14" pos:column="22"/></argument_list></call><operator pos:line="14" pos:column="22">.<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">start<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">=<pos:position pos:line="14" pos:column="30"/></operator> <name pos:line="14" pos:column="31">sidCurrent<pos:position pos:line="14" pos:column="41"/></name></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="17" pos:column="5">// buffer incoming data in slot buffer and write overflowing or final slots</comment>
    <comment type="line" pos:line="18" pos:column="5">// quit when no data left or we stopped writing on reentrant error</comment>
    <while pos:line="19" pos:column="5">while <condition pos:line="19" pos:column="11">(<expr><name pos:line="19" pos:column="12">size<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">&gt;<pos:position pos:line="19" pos:column="21"/></operator> <literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal> <operator pos:line="19" pos:column="21">&amp;&amp;<pos:position pos:line="19" pos:column="31"/></operator> <name pos:line="19" pos:column="24">theFile<pos:position pos:line="19" pos:column="31"/></name> <operator pos:line="19" pos:column="32">!=<pos:position pos:line="19" pos:column="34"/></operator> <name pos:line="19" pos:column="35">NULL<pos:position pos:line="19" pos:column="39"/></name></expr>)<pos:position pos:line="19" pos:column="40"/></condition> <block pos:line="19" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">assert<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">sidCurrent<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">&gt;=<pos:position pos:line="20" pos:column="32"/></operator> <literal type="number" pos:line="20" pos:column="30">0<pos:position pos:line="20" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="21" pos:column="9">const<pos:position pos:line="21" pos:column="14"/></specifier> <name pos:line="21" pos:column="15">size_t<pos:position pos:line="21" pos:column="21"/></name></type> <name pos:line="21" pos:column="22">processed<pos:position pos:line="21" pos:column="31"/></name> <init pos:line="21" pos:column="32">= <expr><call><name pos:line="21" pos:column="34">writeToBuffer<pos:position pos:line="21" pos:column="47"/></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name pos:line="21" pos:column="48">buf<pos:position pos:line="21" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="53">size<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="59"/></decl_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">buf<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">+=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">processed<pos:position pos:line="22" pos:column="25"/></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">size<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">-=<pos:position pos:line="23" pos:column="16"/></operator> <name pos:line="23" pos:column="17">processed<pos:position pos:line="23" pos:column="26"/></name></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">const<pos:position pos:line="24" pos:column="14"/></specifier> <name pos:line="24" pos:column="15">bool<pos:position pos:line="24" pos:column="19"/></name></type> <name pos:line="24" pos:column="20">overflow<pos:position pos:line="24" pos:column="28"/></name> <init pos:line="24" pos:column="29">= <expr><name pos:line="24" pos:column="31">size<pos:position pos:line="24" pos:column="35"/></name> <operator pos:line="24" pos:column="36">&gt;<pos:position pos:line="24" pos:column="40"/></operator> <literal type="number" pos:line="24" pos:column="38">0<pos:position pos:line="24" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="40"/></decl_stmt>

        <comment type="line" pos:line="26" pos:column="9">// We do not write a full buffer without overflow because</comment>
        <comment type="line" pos:line="27" pos:column="9">// we would not yet know what to set the nextSlot to.</comment>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">overflow<pos:position pos:line="28" pos:column="21"/></name></expr>)<pos:position pos:line="28" pos:column="22"/></condition><then pos:line="28" pos:column="22"> <block pos:line="28" pos:column="23">{
            <decl_stmt><decl><type><specifier pos:line="29" pos:column="13">const<pos:position pos:line="29" pos:column="18"/></specifier> <name pos:line="29" pos:column="19">SlotId<pos:position pos:line="29" pos:column="25"/></name></type> <name pos:line="29" pos:column="26">sidNext<pos:position pos:line="29" pos:column="33"/></name> <init pos:line="29" pos:column="34">= <expr><call><name pos:line="29" pos:column="36">reserveSlotForWriting<pos:position pos:line="29" pos:column="57"/></name><argument_list pos:line="29" pos:column="57">()<pos:position pos:line="29" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="60"/></decl_stmt> <comment type="line" pos:line="29" pos:column="61">// throws</comment>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">assert<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">sidNext<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">&gt;=<pos:position pos:line="30" pos:column="33"/></operator> <literal type="number" pos:line="30" pos:column="31">0<pos:position pos:line="30" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">writeToDisk<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">sidNext<pos:position pos:line="31" pos:column="32"/></name></expr></argument>)<pos:position pos:line="31" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></then> <elseif pos:line="32" pos:column="11">else <if pos:line="32" pos:column="16">if <condition pos:line="32" pos:column="19">(<expr><call><name><name pos:line="32" pos:column="20">Store<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">::<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="27">Root<pos:position pos:line="32" pos:column="31"/></name></name><argument_list pos:line="32" pos:column="31">()<pos:position pos:line="32" pos:column="33"/></argument_list></call><operator pos:line="32" pos:column="33">.<pos:position pos:line="32" pos:column="34"/></operator><call><name pos:line="32" pos:column="34">transientReaders<pos:position pos:line="32" pos:column="50"/></name><argument_list pos:line="32" pos:column="50">(<argument><expr><operator pos:line="32" pos:column="51">*<pos:position pos:line="32" pos:column="52"/></operator><name pos:line="32" pos:column="52">e<pos:position pos:line="32" pos:column="53"/></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="55"/></condition><then pos:line="32" pos:column="55"> <block pos:line="32" pos:column="56">{
            <comment type="line" pos:line="33" pos:column="13">// write partial buffer for all remote hit readers to see</comment>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">writeBufToDisk<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><operator pos:line="34" pos:column="28">-<pos:position pos:line="34" pos:column="29"/></operator><literal type="number" pos:line="34" pos:column="29">1<pos:position pos:line="34" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="34" pos:column="32">false<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="36" pos:column="6"/></block></while>

}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
