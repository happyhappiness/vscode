<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_863_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">comm_openex<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">int<pos:position pos:line="2" pos:column="16"/></name></type> <name pos:line="2" pos:column="17">sock_type<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>,
            <parameter><decl><type><name pos:line="3" pos:column="13">int<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">proto<pos:position pos:line="3" pos:column="22"/></name></decl></parameter>,
            <parameter><decl><type><name pos:line="4" pos:column="13">IpAddress<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">&amp;<pos:position pos:line="4" pos:column="28"/></modifier></type><name pos:line="4" pos:column="24">addr<pos:position pos:line="4" pos:column="28"/></name></decl></parameter>,
            <parameter><decl><type><name pos:line="5" pos:column="13">int<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">flags<pos:position pos:line="5" pos:column="22"/></name></decl></parameter>,
            <parameter><decl><type><name pos:line="6" pos:column="13">unsigned<pos:position pos:line="6" pos:column="21"/></name> <name pos:line="6" pos:column="22">char<pos:position pos:line="6" pos:column="26"/></name></type> <name pos:line="6" pos:column="27">TOS<pos:position pos:line="6" pos:column="30"/></name></decl></parameter>,
            <parameter><decl><type><specifier pos:line="7" pos:column="13">const<pos:position pos:line="7" pos:column="18"/></specifier> <name pos:line="7" pos:column="19">char<pos:position pos:line="7" pos:column="23"/></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">note<pos:position pos:line="7" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="30"/></parameter_list>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">new_socket<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">fde<pos:position pos:line="10" pos:column="8"/></name> <modifier pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></modifier></type><name pos:line="10" pos:column="10">F<pos:position pos:line="10" pos:column="11"/></name> <init pos:line="10" pos:column="12">= <expr><name pos:line="10" pos:column="14">NULL<pos:position pos:line="10" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">tos<pos:position pos:line="11" pos:column="12"/></name> <init pos:line="11" pos:column="13">= <expr><literal type="number" pos:line="11" pos:column="15">0<pos:position pos:line="11" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">struct<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">addrinfo<pos:position pos:line="12" pos:column="20"/></name></name> <modifier pos:line="12" pos:column="21">*<pos:position pos:line="12" pos:column="22"/></modifier></type><name pos:line="12" pos:column="22">AI<pos:position pos:line="12" pos:column="24"/></name> <init pos:line="12" pos:column="25">= <expr><name pos:line="12" pos:column="27">NULL<pos:position pos:line="12" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">PROF_start<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">comm_open<pos:position pos:line="14" pos:column="25"/></name></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="15" pos:column="5">/* Create socket for accepting new connections. */</comment>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">statCounter<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">.<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">syscalls<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">.<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">sock<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">.<pos:position pos:line="16" pos:column="31"/></operator><name pos:line="16" pos:column="31">sockets<pos:position pos:line="16" pos:column="38"/></name></name><operator pos:line="16" pos:column="38">++<pos:position pos:line="16" pos:column="40"/></operator></expr>;<pos:position pos:line="16" pos:column="41"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* Setup the socket addrinfo details for use */</comment>
    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">addr<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">.<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">GetAddrInfo<pos:position pos:line="19" pos:column="21"/></name></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">AI<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">AI<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">-&gt;<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="9">ai_socktype<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">sock_type<pos:position pos:line="20" pos:column="32"/></name></expr>;<pos:position pos:line="20" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">AI<pos:position pos:line="21" pos:column="7"/></name><operator pos:line="21" pos:column="7">-&gt;<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="9">ai_protocol<pos:position pos:line="21" pos:column="20"/></name></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <name pos:line="21" pos:column="23">proto<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">debugs<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><literal type="number" pos:line="23" pos:column="12">50<pos:position pos:line="23" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="16">3<pos:position pos:line="23" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="19">"comm_openex: Attempt open socket for: "<pos:position pos:line="23" pos:column="59"/></literal> <operator pos:line="23" pos:column="60">&lt;&lt;<pos:position pos:line="23" pos:column="68"/></operator> <name pos:line="23" pos:column="63">addr<pos:position pos:line="23" pos:column="67"/></name></expr></argument> )<pos:position pos:line="23" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="70"/></expr_stmt>

    <expr_stmt><expr><name pos:line="25" pos:column="5">new_socket<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <call><name pos:line="25" pos:column="18">socket<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name><name pos:line="25" pos:column="25">AI<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">-&gt;<pos:position pos:line="25" pos:column="32"/></operator><name pos:line="25" pos:column="29">ai_family<pos:position pos:line="25" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="40">AI<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">-&gt;<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="44">ai_socktype<pos:position pos:line="25" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="57">AI<pos:position pos:line="25" pos:column="59"/></name><operator pos:line="25" pos:column="59">-&gt;<pos:position pos:line="25" pos:column="64"/></operator><name pos:line="25" pos:column="61">ai_protocol<pos:position pos:line="25" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="74"/></expr_stmt>

    <comment type="block" pos:line="27" pos:column="5">/* under IPv6 there is the possibility IPv6 is present but disabled. */</comment>
    <comment type="block" pos:line="28" pos:column="5">/* try again as IPv4-native if possible */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">( <expr><name pos:line="29" pos:column="10">new_socket<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">&lt;<pos:position pos:line="29" pos:column="25"/></operator> <literal type="number" pos:line="29" pos:column="23">0<pos:position pos:line="29" pos:column="24"/></literal> <operator pos:line="29" pos:column="25">&amp;&amp;<pos:position pos:line="29" pos:column="35"/></operator> <name><name pos:line="29" pos:column="28">Ip<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">::<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">EnableIpv6<pos:position pos:line="29" pos:column="42"/></name></name> <operator pos:line="29" pos:column="43">&amp;&amp;<pos:position pos:line="29" pos:column="53"/></operator> <call><name><name pos:line="29" pos:column="46">addr<pos:position pos:line="29" pos:column="50"/></name><operator pos:line="29" pos:column="50">.<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="51">IsIPv6<pos:position pos:line="29" pos:column="57"/></name></name><argument_list pos:line="29" pos:column="57">()<pos:position pos:line="29" pos:column="59"/></argument_list></call> <operator pos:line="29" pos:column="60">&amp;&amp;<pos:position pos:line="29" pos:column="70"/></operator> <call><name><name pos:line="29" pos:column="63">addr<pos:position pos:line="29" pos:column="67"/></name><operator pos:line="29" pos:column="67">.<pos:position pos:line="29" pos:column="68"/></operator><name pos:line="29" pos:column="68">SetIPv4<pos:position pos:line="29" pos:column="75"/></name></name><argument_list pos:line="29" pos:column="75">()<pos:position pos:line="29" pos:column="77"/></argument_list></call></expr> )<pos:position pos:line="29" pos:column="79"/></condition><then pos:line="29" pos:column="79"> <block pos:line="29" pos:column="80">{
        <comment type="block" pos:line="30" pos:column="9">/* attempt to open this IPv4-only. */</comment>
        <expr_stmt><expr><call><name><name pos:line="31" pos:column="9">addr<pos:position pos:line="31" pos:column="13"/></name><operator pos:line="31" pos:column="13">.<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">FreeAddrInfo<pos:position pos:line="31" pos:column="26"/></name></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">AI<pos:position pos:line="31" pos:column="29"/></name></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
        <comment type="block" pos:line="32" pos:column="9">/* Setup the socket addrinfo details for use */</comment>
        <expr_stmt><expr><call><name><name pos:line="33" pos:column="9">addr<pos:position pos:line="33" pos:column="13"/></name><operator pos:line="33" pos:column="13">.<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">GetAddrInfo<pos:position pos:line="33" pos:column="25"/></name></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">AI<pos:position pos:line="33" pos:column="28"/></name></expr></argument>)<pos:position pos:line="33" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">AI<pos:position pos:line="34" pos:column="11"/></name><operator pos:line="34" pos:column="11">-&gt;<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="13">ai_socktype<pos:position pos:line="34" pos:column="24"/></name></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <name pos:line="34" pos:column="27">sock_type<pos:position pos:line="34" pos:column="36"/></name></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">AI<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">-&gt;<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="13">ai_protocol<pos:position pos:line="35" pos:column="24"/></name></name> <operator pos:line="35" pos:column="25">=<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">proto<pos:position pos:line="35" pos:column="32"/></name></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">debugs<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><literal type="number" pos:line="36" pos:column="16">50<pos:position pos:line="36" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="20">3<pos:position pos:line="36" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="23">"comm_openex: Attempt fallback open socket for: "<pos:position pos:line="36" pos:column="72"/></literal> <operator pos:line="36" pos:column="73">&lt;&lt;<pos:position pos:line="36" pos:column="81"/></operator> <name pos:line="36" pos:column="76">addr<pos:position pos:line="36" pos:column="80"/></name></expr></argument> )<pos:position pos:line="36" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><name pos:line="37" pos:column="9">new_socket<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">=<pos:position pos:line="37" pos:column="21"/></operator> <call><name pos:line="37" pos:column="22">socket<pos:position pos:line="37" pos:column="28"/></name><argument_list pos:line="37" pos:column="28">(<argument><expr><name><name pos:line="37" pos:column="29">AI<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">-&gt;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="33">ai_family<pos:position pos:line="37" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="44">AI<pos:position pos:line="37" pos:column="46"/></name><operator pos:line="37" pos:column="46">-&gt;<pos:position pos:line="37" pos:column="51"/></operator><name pos:line="37" pos:column="48">ai_socktype<pos:position pos:line="37" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="61">AI<pos:position pos:line="37" pos:column="63"/></name><operator pos:line="37" pos:column="63">-&gt;<pos:position pos:line="37" pos:column="68"/></operator><name pos:line="37" pos:column="65">ai_protocol<pos:position pos:line="37" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">debugs<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="number" pos:line="38" pos:column="16">50<pos:position pos:line="38" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="20">2<pos:position pos:line="38" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="23">HERE<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">&lt;&lt;<pos:position pos:line="38" pos:column="36"/></operator> <literal type="string" pos:line="38" pos:column="31">"attempt open "<pos:position pos:line="38" pos:column="46"/></literal> <operator pos:line="38" pos:column="47">&lt;&lt;<pos:position pos:line="38" pos:column="55"/></operator> <name pos:line="38" pos:column="50">note<pos:position pos:line="38" pos:column="54"/></name> <operator pos:line="38" pos:column="55">&lt;&lt;<pos:position pos:line="38" pos:column="63"/></operator> <literal type="string" pos:line="38" pos:column="58">" socket on: "<pos:position pos:line="38" pos:column="72"/></literal> <operator pos:line="38" pos:column="73">&lt;&lt;<pos:position pos:line="38" pos:column="81"/></operator> <name pos:line="38" pos:column="76">addr<pos:position pos:line="38" pos:column="80"/></name></expr></argument>)<pos:position pos:line="38" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="82"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">new_socket<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">&lt;<pos:position pos:line="41" pos:column="24"/></operator> <literal type="number" pos:line="41" pos:column="22">0<pos:position pos:line="41" pos:column="23"/></literal></expr>)<pos:position pos:line="41" pos:column="24"/></condition><then pos:line="41" pos:column="24"> <block pos:line="41" pos:column="25">{
        <comment type="block" pos:line="42" pos:column="9">/* Increase the number of reserved fd's if calls to socket()
         * are failing because the open file table is full.  This
         * limits the number of simultaneous clients */</comment>

        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">limitError<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><name pos:line="46" pos:column="24">errno<pos:position pos:line="46" pos:column="29"/></name></expr></argument>)<pos:position pos:line="46" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="31"/></condition><then pos:line="46" pos:column="31"> <block pos:line="46" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">debugs<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><literal type="number" pos:line="47" pos:column="20">50<pos:position pos:line="47" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="24">DBG_IMPORTANT<pos:position pos:line="47" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="39">"comm_open: socket failure: "<pos:position pos:line="47" pos:column="68"/></literal> <operator pos:line="47" pos:column="69">&lt;&lt;<pos:position pos:line="47" pos:column="77"/></operator> <call><name pos:line="47" pos:column="72">xstrerror<pos:position pos:line="47" pos:column="81"/></name><argument_list pos:line="47" pos:column="81">()<pos:position pos:line="47" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="85"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">fdAdjustReserved<pos:position pos:line="48" pos:column="29"/></name><argument_list pos:line="48" pos:column="29">()<pos:position pos:line="48" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></then> <else pos:line="49" pos:column="11">else <block pos:line="49" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">debugs<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><literal type="number" pos:line="50" pos:column="20">50<pos:position pos:line="50" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="24">DBG_CRITICAL<pos:position pos:line="50" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="38">"comm_open: socket failure: "<pos:position pos:line="50" pos:column="67"/></literal> <operator pos:line="50" pos:column="68">&lt;&lt;<pos:position pos:line="50" pos:column="76"/></operator> <call><name pos:line="50" pos:column="71">xstrerror<pos:position pos:line="50" pos:column="80"/></name><argument_list pos:line="50" pos:column="80">()<pos:position pos:line="50" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="84"/></expr_stmt>
        }<pos:position pos:line="51" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name><name pos:line="53" pos:column="9">addr<pos:position pos:line="53" pos:column="13"/></name><operator pos:line="53" pos:column="13">.<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">FreeAddrInfo<pos:position pos:line="53" pos:column="26"/></name></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">AI<pos:position pos:line="53" pos:column="29"/></name></expr></argument>)<pos:position pos:line="53" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="55" pos:column="9">PROF_stop<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">comm_open<pos:position pos:line="55" pos:column="28"/></name></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="30"/></expr_stmt>
        <return pos:line="56" pos:column="9">return <expr><operator pos:line="56" pos:column="16">-<pos:position pos:line="56" pos:column="17"/></operator><literal type="number" pos:line="56" pos:column="17">1<pos:position pos:line="56" pos:column="18"/></literal></expr>;<pos:position pos:line="56" pos:column="19"/></return>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="59" pos:column="5">debugs<pos:position pos:line="59" pos:column="11"/></name><argument_list pos:line="59" pos:column="11">(<argument><expr><literal type="number" pos:line="59" pos:column="12">50<pos:position pos:line="59" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="16">3<pos:position pos:line="59" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="19">"comm_openex: Opened socket FD "<pos:position pos:line="59" pos:column="51"/></literal> <operator pos:line="59" pos:column="52">&lt;&lt;<pos:position pos:line="59" pos:column="60"/></operator> <name pos:line="59" pos:column="55">new_socket<pos:position pos:line="59" pos:column="65"/></name> <operator pos:line="59" pos:column="66">&lt;&lt;<pos:position pos:line="59" pos:column="74"/></operator> <literal type="string" pos:line="59" pos:column="69">" : family="<pos:position pos:line="59" pos:column="81"/></literal> <operator pos:line="59" pos:column="82">&lt;&lt;<pos:position pos:line="59" pos:column="90"/></operator> <name><name pos:line="59" pos:column="85">AI<pos:position pos:line="59" pos:column="87"/></name><operator pos:line="59" pos:column="87">-&gt;<pos:position pos:line="59" pos:column="92"/></operator><name pos:line="59" pos:column="89">ai_family<pos:position pos:line="59" pos:column="98"/></name></name> <operator pos:line="59" pos:column="99">&lt;&lt;<pos:position pos:line="59" pos:column="107"/></operator> <literal type="string" pos:line="59" pos:column="102">", type="<pos:position pos:line="59" pos:column="111"/></literal> <operator pos:line="59" pos:column="112">&lt;&lt;<pos:position pos:line="59" pos:column="120"/></operator> <name><name pos:line="59" pos:column="115">AI<pos:position pos:line="59" pos:column="117"/></name><operator pos:line="59" pos:column="117">-&gt;<pos:position pos:line="59" pos:column="122"/></operator><name pos:line="59" pos:column="119">ai_socktype<pos:position pos:line="59" pos:column="130"/></name></name> <operator pos:line="59" pos:column="131">&lt;&lt;<pos:position pos:line="59" pos:column="139"/></operator> <literal type="string" pos:line="59" pos:column="134">", protocol="<pos:position pos:line="59" pos:column="147"/></literal> <operator pos:line="59" pos:column="148">&lt;&lt;<pos:position pos:line="59" pos:column="156"/></operator> <name><name pos:line="59" pos:column="151">AI<pos:position pos:line="59" pos:column="153"/></name><operator pos:line="59" pos:column="153">-&gt;<pos:position pos:line="59" pos:column="158"/></operator><name pos:line="59" pos:column="155">ai_protocol<pos:position pos:line="59" pos:column="166"/></name></name></expr></argument> )<pos:position pos:line="59" pos:column="168"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="169"/></expr_stmt>

    <comment type="block" pos:line="61" pos:column="5">/* set TOS if needed */</comment>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">TOS<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">&amp;&amp;<pos:position pos:line="62" pos:column="23"/></operator> <call><name pos:line="62" pos:column="16">comm_set_tos<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><name pos:line="62" pos:column="29">new_socket<pos:position pos:line="62" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="41">TOS<pos:position pos:line="62" pos:column="44"/></name></expr></argument>)<pos:position pos:line="62" pos:column="45"/></argument_list></call></expr> )<pos:position pos:line="62" pos:column="47"/></condition><then pos:line="62" pos:column="47"> <block pos:line="62" pos:column="48">{
        <expr_stmt><expr><name pos:line="63" pos:column="9">tos<pos:position pos:line="63" pos:column="12"/></name> <operator pos:line="63" pos:column="13">=<pos:position pos:line="63" pos:column="14"/></operator> <name pos:line="63" pos:column="15">TOS<pos:position pos:line="63" pos:column="18"/></name></expr>;<pos:position pos:line="63" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="64" pos:column="9">(<pos:position pos:line="64" pos:column="10"/></operator><name pos:line="64" pos:column="10">void<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">)<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="15">tos<pos:position pos:line="64" pos:column="18"/></name></expr>;<pos:position pos:line="64" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">( <expr><name><name pos:line="67" pos:column="10">Ip<pos:position pos:line="67" pos:column="12"/></name><operator pos:line="67" pos:column="12">::<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">EnableIpv6<pos:position pos:line="67" pos:column="24"/></name></name><operator pos:line="67" pos:column="24">&amp;<pos:position pos:line="67" pos:column="29"/></operator><name pos:line="67" pos:column="25">IPV6_SPECIAL_SPLITSTACK<pos:position pos:line="67" pos:column="48"/></name> <operator pos:line="67" pos:column="49">&amp;&amp;<pos:position pos:line="67" pos:column="59"/></operator> <call><name><name pos:line="67" pos:column="52">addr<pos:position pos:line="67" pos:column="56"/></name><operator pos:line="67" pos:column="56">.<pos:position pos:line="67" pos:column="57"/></operator><name pos:line="67" pos:column="57">IsIPv6<pos:position pos:line="67" pos:column="63"/></name></name><argument_list pos:line="67" pos:column="63">()<pos:position pos:line="67" pos:column="65"/></argument_list></call></expr> )<pos:position pos:line="67" pos:column="67"/></condition><then pos:line="67" pos:column="67">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="68" pos:column="9">comm_set_v6only<pos:position pos:line="68" pos:column="24"/></name><argument_list pos:line="68" pos:column="24">(<argument><expr><name pos:line="68" pos:column="25">new_socket<pos:position pos:line="68" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="37">1<pos:position pos:line="68" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="40"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="70" pos:column="5">/* Windows Vista supports Dual-Sockets. BUT defaults them to V6ONLY. Turn it OFF. */</comment>
    <comment type="block" pos:line="71" pos:column="5">/* Other OS may have this administratively disabled for general use. Same deal. */</comment>
    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">( <expr><name><name pos:line="72" pos:column="10">Ip<pos:position pos:line="72" pos:column="12"/></name><operator pos:line="72" pos:column="12">::<pos:position pos:line="72" pos:column="14"/></operator><name pos:line="72" pos:column="14">EnableIpv6<pos:position pos:line="72" pos:column="24"/></name></name><operator pos:line="72" pos:column="24">&amp;<pos:position pos:line="72" pos:column="29"/></operator><name pos:line="72" pos:column="25">IPV6_SPECIAL_V4MAPPING<pos:position pos:line="72" pos:column="47"/></name> <operator pos:line="72" pos:column="48">&amp;&amp;<pos:position pos:line="72" pos:column="58"/></operator> <call><name><name pos:line="72" pos:column="51">addr<pos:position pos:line="72" pos:column="55"/></name><operator pos:line="72" pos:column="55">.<pos:position pos:line="72" pos:column="56"/></operator><name pos:line="72" pos:column="56">IsIPv6<pos:position pos:line="72" pos:column="62"/></name></name><argument_list pos:line="72" pos:column="62">()<pos:position pos:line="72" pos:column="64"/></argument_list></call></expr> )<pos:position pos:line="72" pos:column="66"/></condition><then pos:line="72" pos:column="66">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="73" pos:column="9">comm_set_v6only<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">new_socket<pos:position pos:line="73" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="37">0<pos:position pos:line="73" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="40"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="75" pos:column="5">/* update fdstat */</comment>
    <expr_stmt><expr><call><name pos:line="76" pos:column="5">debugs<pos:position pos:line="76" pos:column="11"/></name><argument_list pos:line="76" pos:column="11">(<argument><expr><literal type="number" pos:line="76" pos:column="12">5<pos:position pos:line="76" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="15">5<pos:position pos:line="76" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="18">"comm_open: FD "<pos:position pos:line="76" pos:column="34"/></literal> <operator pos:line="76" pos:column="35">&lt;&lt;<pos:position pos:line="76" pos:column="43"/></operator> <name pos:line="76" pos:column="38">new_socket<pos:position pos:line="76" pos:column="48"/></name> <operator pos:line="76" pos:column="49">&lt;&lt;<pos:position pos:line="76" pos:column="57"/></operator> <literal type="string" pos:line="76" pos:column="52">" is a new socket"<pos:position pos:line="76" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="72"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="78" pos:column="5">assert<pos:position pos:line="78" pos:column="11"/></name><argument_list pos:line="78" pos:column="11">(<argument><expr><operator pos:line="78" pos:column="12">!<pos:position pos:line="78" pos:column="13"/></operator><call><name pos:line="78" pos:column="13">isOpen<pos:position pos:line="78" pos:column="19"/></name><argument_list pos:line="78" pos:column="19">(<argument><expr><name pos:line="78" pos:column="20">new_socket<pos:position pos:line="78" pos:column="30"/></name></expr></argument>)<pos:position pos:line="78" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="78" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">fd_open<pos:position pos:line="79" pos:column="12"/></name><argument_list pos:line="79" pos:column="12">(<argument><expr><name pos:line="79" pos:column="13">new_socket<pos:position pos:line="79" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="25">FD_SOCKET<pos:position pos:line="79" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="36">note<pos:position pos:line="79" pos:column="40"/></name></expr></argument>)<pos:position pos:line="79" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="81" pos:column="5">fdd_table<pos:position pos:line="81" pos:column="14"/></name><index pos:line="81" pos:column="14">[<expr><name pos:line="81" pos:column="15">new_socket<pos:position pos:line="81" pos:column="25"/></name></expr>]<pos:position pos:line="81" pos:column="26"/></index></name><operator pos:line="81" pos:column="26">.<pos:position pos:line="81" pos:column="27"/></operator><name pos:line="81" pos:column="27">close_file<pos:position pos:line="81" pos:column="37"/></name> <operator pos:line="81" pos:column="38">=<pos:position pos:line="81" pos:column="39"/></operator> <name pos:line="81" pos:column="40">NULL<pos:position pos:line="81" pos:column="44"/></name></expr>;<pos:position pos:line="81" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="83" pos:column="5">fdd_table<pos:position pos:line="83" pos:column="14"/></name><index pos:line="83" pos:column="14">[<expr><name pos:line="83" pos:column="15">new_socket<pos:position pos:line="83" pos:column="25"/></name></expr>]<pos:position pos:line="83" pos:column="26"/></index></name><operator pos:line="83" pos:column="26">.<pos:position pos:line="83" pos:column="27"/></operator><name pos:line="83" pos:column="27">close_line<pos:position pos:line="83" pos:column="37"/></name> <operator pos:line="83" pos:column="38">=<pos:position pos:line="83" pos:column="39"/></operator> <literal type="number" pos:line="83" pos:column="40">0<pos:position pos:line="83" pos:column="41"/></literal></expr>;<pos:position pos:line="83" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name pos:line="85" pos:column="5">F<pos:position pos:line="85" pos:column="6"/></name> <operator pos:line="85" pos:column="7">=<pos:position pos:line="85" pos:column="8"/></operator> <operator pos:line="85" pos:column="9">&amp;<pos:position pos:line="85" pos:column="14"/></operator><name><name pos:line="85" pos:column="10">fd_table<pos:position pos:line="85" pos:column="18"/></name><index pos:line="85" pos:column="18">[<expr><name pos:line="85" pos:column="19">new_socket<pos:position pos:line="85" pos:column="29"/></name></expr>]<pos:position pos:line="85" pos:column="30"/></index></name></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="87" pos:column="5">F<pos:position pos:line="87" pos:column="6"/></name><operator pos:line="87" pos:column="6">-&gt;<pos:position pos:line="87" pos:column="11"/></operator><name pos:line="87" pos:column="8">local_addr<pos:position pos:line="87" pos:column="18"/></name></name> <operator pos:line="87" pos:column="19">=<pos:position pos:line="87" pos:column="20"/></operator> <name pos:line="87" pos:column="21">addr<pos:position pos:line="87" pos:column="25"/></name></expr>;<pos:position pos:line="87" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="89" pos:column="5">F<pos:position pos:line="89" pos:column="6"/></name><operator pos:line="89" pos:column="6">-&gt;<pos:position pos:line="89" pos:column="11"/></operator><name pos:line="89" pos:column="8">tos<pos:position pos:line="89" pos:column="11"/></name></name> <operator pos:line="89" pos:column="12">=<pos:position pos:line="89" pos:column="13"/></operator> <name pos:line="89" pos:column="14">TOS<pos:position pos:line="89" pos:column="17"/></name></expr>;<pos:position pos:line="89" pos:column="18"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="91" pos:column="5">F<pos:position pos:line="91" pos:column="6"/></name><operator pos:line="91" pos:column="6">-&gt;<pos:position pos:line="91" pos:column="11"/></operator><name pos:line="91" pos:column="8">sock_family<pos:position pos:line="91" pos:column="19"/></name></name> <operator pos:line="91" pos:column="20">=<pos:position pos:line="91" pos:column="21"/></operator> <name><name pos:line="91" pos:column="22">AI<pos:position pos:line="91" pos:column="24"/></name><operator pos:line="91" pos:column="24">-&gt;<pos:position pos:line="91" pos:column="29"/></operator><name pos:line="91" pos:column="26">ai_family<pos:position pos:line="91" pos:column="35"/></name></name></expr>;<pos:position pos:line="91" pos:column="36"/></expr_stmt>

    <if pos:line="93" pos:column="5">if <condition pos:line="93" pos:column="8">(<expr><operator pos:line="93" pos:column="9">!<pos:position pos:line="93" pos:column="10"/></operator><operator pos:line="93" pos:column="10">(<pos:position pos:line="93" pos:column="11"/></operator><name pos:line="93" pos:column="11">flags<pos:position pos:line="93" pos:column="16"/></name> <operator pos:line="93" pos:column="17">&amp;<pos:position pos:line="93" pos:column="22"/></operator> <name pos:line="93" pos:column="19">COMM_NOCLOEXEC<pos:position pos:line="93" pos:column="33"/></name><operator pos:line="93" pos:column="33">)<pos:position pos:line="93" pos:column="34"/></operator></expr>)<pos:position pos:line="93" pos:column="35"/></condition><then pos:line="93" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="94" pos:column="9">commSetCloseOnExec<pos:position pos:line="94" pos:column="27"/></name><argument_list pos:line="94" pos:column="27">(<argument><expr><name pos:line="94" pos:column="28">new_socket<pos:position pos:line="94" pos:column="38"/></name></expr></argument>)<pos:position pos:line="94" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="40"/></expr_stmt></block></then></if>

    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><operator pos:line="96" pos:column="9">(<pos:position pos:line="96" pos:column="10"/></operator><name pos:line="96" pos:column="10">flags<pos:position pos:line="96" pos:column="15"/></name> <operator pos:line="96" pos:column="16">&amp;<pos:position pos:line="96" pos:column="21"/></operator> <name pos:line="96" pos:column="18">COMM_REUSEADDR<pos:position pos:line="96" pos:column="32"/></name><operator pos:line="96" pos:column="32">)<pos:position pos:line="96" pos:column="33"/></operator></expr>)<pos:position pos:line="96" pos:column="34"/></condition><then pos:line="96" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="97" pos:column="9">commSetReuseAddr<pos:position pos:line="97" pos:column="25"/></name><argument_list pos:line="97" pos:column="25">(<argument><expr><name pos:line="97" pos:column="26">new_socket<pos:position pos:line="97" pos:column="36"/></name></expr></argument>)<pos:position pos:line="97" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="38"/></expr_stmt></block></then></if>

    <if pos:line="99" pos:column="5">if <condition pos:line="99" pos:column="8">(<expr><call><name><name pos:line="99" pos:column="9">addr<pos:position pos:line="99" pos:column="13"/></name><operator pos:line="99" pos:column="13">.<pos:position pos:line="99" pos:column="14"/></operator><name pos:line="99" pos:column="14">GetPort<pos:position pos:line="99" pos:column="21"/></name></name><argument_list pos:line="99" pos:column="21">()<pos:position pos:line="99" pos:column="23"/></argument_list></call> <operator pos:line="99" pos:column="24">&gt;<pos:position pos:line="99" pos:column="28"/></operator> <operator pos:line="99" pos:column="26">(<pos:position pos:line="99" pos:column="27"/></operator><name pos:line="99" pos:column="27">unsigned<pos:position pos:line="99" pos:column="35"/></name> <name pos:line="99" pos:column="36">short<pos:position pos:line="99" pos:column="41"/></name><operator pos:line="99" pos:column="41">)<pos:position pos:line="99" pos:column="42"/></operator> <literal type="number" pos:line="99" pos:column="43">0<pos:position pos:line="99" pos:column="44"/></literal></expr>)<pos:position pos:line="99" pos:column="45"/></condition><then pos:line="99" pos:column="45"> <block pos:line="99" pos:column="46">{
<cpp:ifdef pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">ifdef<pos:position pos:line="100" pos:column="7"/></cpp:directive> <name pos:line="100" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="100" pos:column="21"/></name></cpp:ifdef>
        <if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name pos:line="101" pos:column="13">sock_type<pos:position pos:line="101" pos:column="22"/></name> <operator pos:line="101" pos:column="23">!=<pos:position pos:line="101" pos:column="25"/></operator> <name pos:line="101" pos:column="26">SOCK_DGRAM<pos:position pos:line="101" pos:column="36"/></name></expr>)<pos:position pos:line="101" pos:column="37"/></condition><then pos:line="101" pos:column="37">
<cpp:endif pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">endif<pos:position pos:line="102" pos:column="7"/></cpp:directive></cpp:endif>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="13">commSetNoLinger<pos:position pos:line="103" pos:column="28"/></name><argument_list pos:line="103" pos:column="28">(<argument><expr><name pos:line="103" pos:column="29">new_socket<pos:position pos:line="103" pos:column="39"/></name></expr></argument>)<pos:position pos:line="103" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="41"/></expr_stmt></block></then></if>

        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">opt_reuseaddr<pos:position pos:line="105" pos:column="26"/></name></expr>)<pos:position pos:line="105" pos:column="27"/></condition><then pos:line="105" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="106" pos:column="13">commSetReuseAddr<pos:position pos:line="106" pos:column="29"/></name><argument_list pos:line="106" pos:column="29">(<argument><expr><name pos:line="106" pos:column="30">new_socket<pos:position pos:line="106" pos:column="40"/></name></expr></argument>)<pos:position pos:line="106" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="42"/></expr_stmt></block></then></if>
    }<pos:position pos:line="107" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="109" pos:column="5">/* MUST be done before binding or face OS Error: "(99) Cannot assign requested address"... */</comment>
    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><operator pos:line="110" pos:column="9">(<pos:position pos:line="110" pos:column="10"/></operator><name pos:line="110" pos:column="10">flags<pos:position pos:line="110" pos:column="15"/></name> <operator pos:line="110" pos:column="16">&amp;<pos:position pos:line="110" pos:column="21"/></operator> <name pos:line="110" pos:column="18">COMM_TRANSPARENT<pos:position pos:line="110" pos:column="34"/></name><operator pos:line="110" pos:column="34">)<pos:position pos:line="110" pos:column="35"/></operator></expr>)<pos:position pos:line="110" pos:column="36"/></condition><then pos:line="110" pos:column="36"> <block pos:line="110" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="111" pos:column="9">comm_set_transparent<pos:position pos:line="111" pos:column="29"/></name><argument_list pos:line="111" pos:column="29">(<argument><expr><name pos:line="111" pos:column="30">new_socket<pos:position pos:line="111" pos:column="40"/></name></expr></argument>)<pos:position pos:line="111" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if>

    <if pos:line="114" pos:column="5">if <condition pos:line="114" pos:column="8">( <expr><operator pos:line="114" pos:column="10">(<pos:position pos:line="114" pos:column="11"/></operator><name pos:line="114" pos:column="11">flags<pos:position pos:line="114" pos:column="16"/></name> <operator pos:line="114" pos:column="17">&amp;<pos:position pos:line="114" pos:column="22"/></operator> <name pos:line="114" pos:column="19">COMM_DOBIND<pos:position pos:line="114" pos:column="30"/></name><operator pos:line="114" pos:column="30">)<pos:position pos:line="114" pos:column="31"/></operator> <operator pos:line="114" pos:column="32">||<pos:position pos:line="114" pos:column="34"/></operator> <call><name><name pos:line="114" pos:column="35">addr<pos:position pos:line="114" pos:column="39"/></name><operator pos:line="114" pos:column="39">.<pos:position pos:line="114" pos:column="40"/></operator><name pos:line="114" pos:column="40">GetPort<pos:position pos:line="114" pos:column="47"/></name></name><argument_list pos:line="114" pos:column="47">()<pos:position pos:line="114" pos:column="49"/></argument_list></call> <operator pos:line="114" pos:column="50">&gt;<pos:position pos:line="114" pos:column="54"/></operator> <literal type="number" pos:line="114" pos:column="52">0<pos:position pos:line="114" pos:column="53"/></literal> <operator pos:line="114" pos:column="54">||<pos:position pos:line="114" pos:column="56"/></operator> <operator pos:line="114" pos:column="57">!<pos:position pos:line="114" pos:column="58"/></operator><call><name><name pos:line="114" pos:column="58">addr<pos:position pos:line="114" pos:column="62"/></name><operator pos:line="114" pos:column="62">.<pos:position pos:line="114" pos:column="63"/></operator><name pos:line="114" pos:column="63">IsAnyAddr<pos:position pos:line="114" pos:column="72"/></name></name><argument_list pos:line="114" pos:column="72">()<pos:position pos:line="114" pos:column="74"/></argument_list></call></expr> )<pos:position pos:line="114" pos:column="76"/></condition><then pos:line="114" pos:column="76"> <block pos:line="114" pos:column="77">{
        <if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">( <expr><operator pos:line="115" pos:column="14">!<pos:position pos:line="115" pos:column="15"/></operator><operator pos:line="115" pos:column="15">(<pos:position pos:line="115" pos:column="16"/></operator><name pos:line="115" pos:column="16">flags<pos:position pos:line="115" pos:column="21"/></name> <operator pos:line="115" pos:column="22">&amp;<pos:position pos:line="115" pos:column="27"/></operator> <name pos:line="115" pos:column="24">COMM_DOBIND<pos:position pos:line="115" pos:column="35"/></name><operator pos:line="115" pos:column="35">)<pos:position pos:line="115" pos:column="36"/></operator> <operator pos:line="115" pos:column="37">&amp;&amp;<pos:position pos:line="115" pos:column="47"/></operator> <call><name><name pos:line="115" pos:column="40">addr<pos:position pos:line="115" pos:column="44"/></name><operator pos:line="115" pos:column="44">.<pos:position pos:line="115" pos:column="45"/></operator><name pos:line="115" pos:column="45">IsAnyAddr<pos:position pos:line="115" pos:column="54"/></name></name><argument_list pos:line="115" pos:column="54">()<pos:position pos:line="115" pos:column="56"/></argument_list></call></expr> )<pos:position pos:line="115" pos:column="58"/></condition><then pos:line="115" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="116" pos:column="13">debugs<pos:position pos:line="116" pos:column="19"/></name><argument_list pos:line="116" pos:column="19">(<argument><expr><literal type="number" pos:line="116" pos:column="20">5<pos:position pos:line="116" pos:column="21"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="116" pos:column="22">1<pos:position pos:line="116" pos:column="23"/></literal></expr></argument>,<argument><expr><literal type="string" pos:line="116" pos:column="24">"WARNING: Squid is attempting to bind() port "<pos:position pos:line="116" pos:column="70"/></literal> <operator pos:line="116" pos:column="71">&lt;&lt;<pos:position pos:line="116" pos:column="79"/></operator> <name pos:line="116" pos:column="74">addr<pos:position pos:line="116" pos:column="78"/></name> <operator pos:line="116" pos:column="79">&lt;&lt;<pos:position pos:line="116" pos:column="87"/></operator> <literal type="string" pos:line="116" pos:column="82">" without being a listener."<pos:position pos:line="116" pos:column="110"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="112"/></expr_stmt></block></then></if>
        <if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">( <expr><call><name><name pos:line="117" pos:column="14">addr<pos:position pos:line="117" pos:column="18"/></name><operator pos:line="117" pos:column="18">.<pos:position pos:line="117" pos:column="19"/></operator><name pos:line="117" pos:column="19">IsNoAddr<pos:position pos:line="117" pos:column="27"/></name></name><argument_list pos:line="117" pos:column="27">()<pos:position pos:line="117" pos:column="29"/></argument_list></call></expr> )<pos:position pos:line="117" pos:column="31"/></condition><then pos:line="117" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="118" pos:column="13">debugs<pos:position pos:line="118" pos:column="19"/></name><argument_list pos:line="118" pos:column="19">(<argument><expr><literal type="number" pos:line="118" pos:column="20">5<pos:position pos:line="118" pos:column="21"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="118" pos:column="22">0<pos:position pos:line="118" pos:column="23"/></literal></expr></argument>,<argument><expr><literal type="string" pos:line="118" pos:column="24">"CRITICAL: Squid is attempting to bind() port "<pos:position pos:line="118" pos:column="71"/></literal> <operator pos:line="118" pos:column="72">&lt;&lt;<pos:position pos:line="118" pos:column="80"/></operator> <name pos:line="118" pos:column="75">addr<pos:position pos:line="118" pos:column="79"/></name> <operator pos:line="118" pos:column="80">&lt;&lt;<pos:position pos:line="118" pos:column="88"/></operator> <literal type="string" pos:line="118" pos:column="83">"!!"<pos:position pos:line="118" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="89"/></expr_stmt></block></then></if>

        <if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><call><name pos:line="120" pos:column="13">commBind<pos:position pos:line="120" pos:column="21"/></name><argument_list pos:line="120" pos:column="21">(<argument><expr><name pos:line="120" pos:column="22">new_socket<pos:position pos:line="120" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="34">*<pos:position pos:line="120" pos:column="35"/></operator><name pos:line="120" pos:column="35">AI<pos:position pos:line="120" pos:column="37"/></name></expr></argument>)<pos:position pos:line="120" pos:column="38"/></argument_list></call> <operator pos:line="120" pos:column="39">!=<pos:position pos:line="120" pos:column="41"/></operator> <name pos:line="120" pos:column="42">COMM_OK<pos:position pos:line="120" pos:column="49"/></name></expr>)<pos:position pos:line="120" pos:column="50"/></condition><then pos:line="120" pos:column="50"> <block pos:line="120" pos:column="51">{
            <expr_stmt><expr><call><name pos:line="121" pos:column="13">comm_close<pos:position pos:line="121" pos:column="23"/></name><argument_list pos:line="121" pos:column="23">(<argument><expr><name pos:line="121" pos:column="24">new_socket<pos:position pos:line="121" pos:column="34"/></name></expr></argument>)<pos:position pos:line="121" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="122" pos:column="13">addr<pos:position pos:line="122" pos:column="17"/></name><operator pos:line="122" pos:column="17">.<pos:position pos:line="122" pos:column="18"/></operator><name pos:line="122" pos:column="18">FreeAddrInfo<pos:position pos:line="122" pos:column="30"/></name></name><argument_list pos:line="122" pos:column="30">(<argument><expr><name pos:line="122" pos:column="31">AI<pos:position pos:line="122" pos:column="33"/></name></expr></argument>)<pos:position pos:line="122" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="35"/></expr_stmt>
            <return pos:line="123" pos:column="13">return <expr><operator pos:line="123" pos:column="20">-<pos:position pos:line="123" pos:column="21"/></operator><literal type="number" pos:line="123" pos:column="21">1<pos:position pos:line="123" pos:column="22"/></literal></expr>;<pos:position pos:line="123" pos:column="23"/></return>
            <expr_stmt><expr><call><name pos:line="124" pos:column="13">PROF_stop<pos:position pos:line="124" pos:column="22"/></name><argument_list pos:line="124" pos:column="22">(<argument><expr><name pos:line="124" pos:column="23">comm_open<pos:position pos:line="124" pos:column="32"/></name></expr></argument>)<pos:position pos:line="124" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="125" pos:column="10"/></block></then></if>
    }<pos:position pos:line="126" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="128" pos:column="5">addr<pos:position pos:line="128" pos:column="9"/></name><operator pos:line="128" pos:column="9">.<pos:position pos:line="128" pos:column="10"/></operator><name pos:line="128" pos:column="10">FreeAddrInfo<pos:position pos:line="128" pos:column="22"/></name></name><argument_list pos:line="128" pos:column="22">(<argument><expr><name pos:line="128" pos:column="23">AI<pos:position pos:line="128" pos:column="25"/></name></expr></argument>)<pos:position pos:line="128" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="27"/></expr_stmt>

    <if pos:line="130" pos:column="5">if <condition pos:line="130" pos:column="8">(<expr><name pos:line="130" pos:column="9">flags<pos:position pos:line="130" pos:column="14"/></name> <operator pos:line="130" pos:column="15">&amp;<pos:position pos:line="130" pos:column="20"/></operator> <name pos:line="130" pos:column="17">COMM_NONBLOCKING<pos:position pos:line="130" pos:column="33"/></name></expr>)<pos:position pos:line="130" pos:column="34"/></condition><then pos:line="130" pos:column="34">
        <block type="pseudo"><if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><call><name pos:line="131" pos:column="13">commSetNonBlocking<pos:position pos:line="131" pos:column="31"/></name><argument_list pos:line="131" pos:column="31">(<argument><expr><name pos:line="131" pos:column="32">new_socket<pos:position pos:line="131" pos:column="42"/></name></expr></argument>)<pos:position pos:line="131" pos:column="43"/></argument_list></call> <operator pos:line="131" pos:column="44">==<pos:position pos:line="131" pos:column="46"/></operator> <name pos:line="131" pos:column="47">COMM_ERROR<pos:position pos:line="131" pos:column="57"/></name></expr>)<pos:position pos:line="131" pos:column="58"/></condition><then pos:line="131" pos:column="58"> <block pos:line="131" pos:column="59">{
            <return pos:line="132" pos:column="13">return <expr><operator pos:line="132" pos:column="20">-<pos:position pos:line="132" pos:column="21"/></operator><literal type="number" pos:line="132" pos:column="21">1<pos:position pos:line="132" pos:column="22"/></literal></expr>;<pos:position pos:line="132" pos:column="23"/></return>
            <expr_stmt><expr><call><name pos:line="133" pos:column="13">PROF_stop<pos:position pos:line="133" pos:column="22"/></name><argument_list pos:line="133" pos:column="22">(<argument><expr><name pos:line="133" pos:column="23">comm_open<pos:position pos:line="133" pos:column="32"/></name></expr></argument>)<pos:position pos:line="133" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="134" pos:column="10"/></block></then></if></block></then></if>

<cpp:ifdef pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">ifdef<pos:position pos:line="136" pos:column="7"/></cpp:directive> <name pos:line="136" pos:column="8">TCP_NODELAY<pos:position pos:line="136" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="137" pos:column="5">if <condition pos:line="137" pos:column="8">(<expr><name pos:line="137" pos:column="9">sock_type<pos:position pos:line="137" pos:column="18"/></name> <operator pos:line="137" pos:column="19">==<pos:position pos:line="137" pos:column="21"/></operator> <name pos:line="137" pos:column="22">SOCK_STREAM<pos:position pos:line="137" pos:column="33"/></name></expr>)<pos:position pos:line="137" pos:column="34"/></condition><then pos:line="137" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="138" pos:column="9">commSetTcpNoDelay<pos:position pos:line="138" pos:column="26"/></name><argument_list pos:line="138" pos:column="26">(<argument><expr><name pos:line="138" pos:column="27">new_socket<pos:position pos:line="138" pos:column="37"/></name></expr></argument>)<pos:position pos:line="138" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="39"/></expr_stmt></block></then></if>

<cpp:endif pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">endif<pos:position pos:line="140" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="142" pos:column="5">if <condition pos:line="142" pos:column="8">(<expr><name><name pos:line="142" pos:column="9">Config<pos:position pos:line="142" pos:column="15"/></name><operator pos:line="142" pos:column="15">.<pos:position pos:line="142" pos:column="16"/></operator><name pos:line="142" pos:column="16">tcpRcvBufsz<pos:position pos:line="142" pos:column="27"/></name></name> <operator pos:line="142" pos:column="28">&gt;<pos:position pos:line="142" pos:column="32"/></operator> <literal type="number" pos:line="142" pos:column="30">0<pos:position pos:line="142" pos:column="31"/></literal> <operator pos:line="142" pos:column="32">&amp;&amp;<pos:position pos:line="142" pos:column="42"/></operator> <name pos:line="142" pos:column="35">sock_type<pos:position pos:line="142" pos:column="44"/></name> <operator pos:line="142" pos:column="45">==<pos:position pos:line="142" pos:column="47"/></operator> <name pos:line="142" pos:column="48">SOCK_STREAM<pos:position pos:line="142" pos:column="59"/></name></expr>)<pos:position pos:line="142" pos:column="60"/></condition><then pos:line="142" pos:column="60">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="9">commSetTcpRcvbuf<pos:position pos:line="143" pos:column="25"/></name><argument_list pos:line="143" pos:column="25">(<argument><expr><name pos:line="143" pos:column="26">new_socket<pos:position pos:line="143" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="38">Config<pos:position pos:line="143" pos:column="44"/></name><operator pos:line="143" pos:column="44">.<pos:position pos:line="143" pos:column="45"/></operator><name pos:line="143" pos:column="45">tcpRcvBufsz<pos:position pos:line="143" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="58"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="145" pos:column="5">PROF_stop<pos:position pos:line="145" pos:column="14"/></name><argument_list pos:line="145" pos:column="14">(<argument><expr><name pos:line="145" pos:column="15">comm_open<pos:position pos:line="145" pos:column="24"/></name></expr></argument>)<pos:position pos:line="145" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="26"/></expr_stmt>

    <return pos:line="147" pos:column="5">return <expr><name pos:line="147" pos:column="12">new_socket<pos:position pos:line="147" pos:column="22"/></name></expr>;<pos:position pos:line="147" pos:column="23"/></return>
}<pos:position pos:line="148" pos:column="2"/></block></function></unit>
