<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1397_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">swapOutAble<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list> <specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">dlink_node<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">node<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">mem_obj<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">-&gt;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="18">swapout<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">.<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">sio<pos:position pos:line="6" pos:column="29"/></name></name> <operator pos:line="6" pos:column="30">!=<pos:position pos:line="6" pos:column="32"/></operator> <name pos:line="6" pos:column="33">NULL<pos:position pos:line="6" pos:column="37"/></name></expr>)<pos:position pos:line="6" pos:column="38"/></condition><then pos:line="6" pos:column="38">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">true<pos:position pos:line="7" pos:column="20"/></literal></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">mem_obj<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">inmem_lo<pos:position pos:line="9" pos:column="26"/></name></name> <operator pos:line="9" pos:column="27">&gt;<pos:position pos:line="9" pos:column="31"/></operator> <literal type="number" pos:line="9" pos:column="29">0<pos:position pos:line="9" pos:column="30"/></literal></expr>)<pos:position pos:line="9" pos:column="31"/></condition><then pos:line="9" pos:column="31">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return></block></then></if>

    <comment type="block" pos:line="12" pos:column="5">/*
     * If there are DISK clients, we must write to disk
     * even if its not cachable
     * RBC: Surely we should not create disk client on non cacheable objects?
     * therefore this should be an assert?
     * RBC 20030708: We can use disk to avoid mem races, so this shouldn't be
     * an assert.
     */</comment>
    <for pos:line="20" pos:column="5">for <control pos:line="20" pos:column="9">(<init><expr><name pos:line="20" pos:column="10">node<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <name><name pos:line="20" pos:column="17">mem_obj<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">-&gt;<pos:position pos:line="20" pos:column="29"/></operator><name pos:line="20" pos:column="26">clients<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">.<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">head<pos:position pos:line="20" pos:column="38"/></name></name></expr>;<pos:position pos:line="20" pos:column="39"/></init> <condition><expr><name pos:line="20" pos:column="40">node<pos:position pos:line="20" pos:column="44"/></name></expr>;<pos:position pos:line="20" pos:column="45"/></condition> <incr><expr><name pos:line="20" pos:column="46">node<pos:position pos:line="20" pos:column="50"/></name> <operator pos:line="20" pos:column="51">=<pos:position pos:line="20" pos:column="52"/></operator> <name><name pos:line="20" pos:column="53">node<pos:position pos:line="20" pos:column="57"/></name><operator pos:line="20" pos:column="57">-&gt;<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="59">next<pos:position pos:line="20" pos:column="63"/></name></name></expr></incr>)<pos:position pos:line="20" pos:column="64"/></control> <block pos:line="20" pos:column="65">{
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">(<pos:position pos:line="21" pos:column="14"/></operator><operator pos:line="21" pos:column="14">(<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">store_client<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">*<pos:position pos:line="21" pos:column="29"/></operator><operator pos:line="21" pos:column="29">)<pos:position pos:line="21" pos:column="30"/></operator> <name><name pos:line="21" pos:column="31">node<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">data<pos:position pos:line="21" pos:column="41"/></name></name><operator pos:line="21" pos:column="41">)<pos:position pos:line="21" pos:column="42"/></operator><operator pos:line="21" pos:column="42">-&gt;<pos:position pos:line="21" pos:column="47"/></operator><call><name pos:line="21" pos:column="44">getType<pos:position pos:line="21" pos:column="51"/></name><argument_list pos:line="21" pos:column="51">()<pos:position pos:line="21" pos:column="53"/></argument_list></call> <operator pos:line="21" pos:column="54">==<pos:position pos:line="21" pos:column="56"/></operator> <name pos:line="21" pos:column="57">STORE_DISK_CLIENT<pos:position pos:line="21" pos:column="74"/></name></expr>)<pos:position pos:line="21" pos:column="75"/></condition><then pos:line="21" pos:column="75">
            <block type="pseudo"><return pos:line="22" pos:column="13">return <expr><literal type="boolean" pos:line="22" pos:column="20">true<pos:position pos:line="22" pos:column="24"/></literal></expr>;<pos:position pos:line="22" pos:column="25"/></return></block></then></if>
    }<pos:position pos:line="23" pos:column="6"/></block></for>

    <comment type="block" pos:line="25" pos:column="5">/* Don't pollute the disk with icons and other special entries */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">EBIT_TEST<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">flags<pos:position pos:line="26" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="26">ENTRY_SPECIAL<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="41"/></condition><then pos:line="26" pos:column="41">
        <block type="pseudo"><return pos:line="27" pos:column="9">return <expr><literal type="boolean" pos:line="27" pos:column="16">false<pos:position pos:line="27" pos:column="21"/></literal></expr>;<pos:position pos:line="27" pos:column="22"/></return></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">!<pos:position pos:line="29" pos:column="10"/></operator><call><name pos:line="29" pos:column="10">EBIT_TEST<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">flags<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="27">ENTRY_CACHABLE<pos:position pos:line="29" pos:column="41"/></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="43"/></condition><then pos:line="29" pos:column="43">
        <block type="pseudo"><return pos:line="30" pos:column="9">return <expr><literal type="boolean" pos:line="30" pos:column="16">false<pos:position pos:line="30" pos:column="21"/></literal></expr>;<pos:position pos:line="30" pos:column="22"/></return></block></then></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">!<pos:position pos:line="32" pos:column="10"/></operator><call><name><name pos:line="32" pos:column="10">mem_obj<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">-&gt;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="19">isContiguous<pos:position pos:line="32" pos:column="31"/></name></name><argument_list pos:line="32" pos:column="31">()<pos:position pos:line="32" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34">
        <block type="pseudo"><return pos:line="33" pos:column="9">return <expr><literal type="boolean" pos:line="33" pos:column="16">false<pos:position pos:line="33" pos:column="21"/></literal></expr>;<pos:position pos:line="33" pos:column="22"/></return></block></then></if>

    <return pos:line="35" pos:column="5">return <expr><literal type="boolean" pos:line="35" pos:column="12">true<pos:position pos:line="35" pos:column="16"/></literal></expr>;<pos:position pos:line="35" pos:column="17"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
