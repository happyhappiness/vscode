<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2718_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">ConfigParser<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">NextToken<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">token<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name pos:line="4" pos:column="19">NULL<pos:position pos:line="4" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">(<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">token<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">=<pos:position pos:line="5" pos:column="17"/></operator> <call><name><name pos:line="5" pos:column="18">ConfigParser<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">::<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="32">Undo<pos:position pos:line="5" pos:column="36"/></name></name><argument_list pos:line="5" pos:column="36">()<pos:position pos:line="5" pos:column="38"/></argument_list></call><operator pos:line="5" pos:column="38">)<pos:position pos:line="5" pos:column="39"/></operator></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40"> <block pos:line="5" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">3<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="19">6<pos:position pos:line="6" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="22">"TOKEN (undone): "<pos:position pos:line="6" pos:column="40"/></literal> <operator pos:line="6" pos:column="41">&lt;&lt;<pos:position pos:line="6" pos:column="49"/></operator> <name pos:line="6" pos:column="44">token<pos:position pos:line="6" pos:column="49"/></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="51"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">token<pos:position pos:line="7" pos:column="21"/></name></expr>;<pos:position pos:line="7" pos:column="22"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <do pos:line="10" pos:column="5">do <block pos:line="10" pos:column="8">{
        <while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><name pos:line="11" pos:column="16">token<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">==<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">NULL<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">&amp;&amp;<pos:position pos:line="11" pos:column="40"/></operator> <operator pos:line="11" pos:column="33">!<pos:position pos:line="11" pos:column="34"/></operator><call><name><name pos:line="11" pos:column="34">CfgFiles<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">.<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">empty<pos:position pos:line="11" pos:column="48"/></name></name><argument_list pos:line="11" pos:column="48">()<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="51"/></condition> <block pos:line="11" pos:column="52">{
            <decl_stmt><decl><type><name><name pos:line="12" pos:column="13">ConfigParser<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">::<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">CfgFile<pos:position pos:line="12" pos:column="34"/></name></name> <modifier pos:line="12" pos:column="35">*<pos:position pos:line="12" pos:column="36"/></modifier></type><name pos:line="12" pos:column="36">wordfile<pos:position pos:line="12" pos:column="44"/></name> <init pos:line="12" pos:column="45">= <expr><call><name><name pos:line="12" pos:column="47">CfgFiles<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">.<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="56">top<pos:position pos:line="12" pos:column="59"/></name></name><argument_list pos:line="12" pos:column="59">()<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="62"/></decl_stmt>
            <expr_stmt><expr><name pos:line="13" pos:column="13">token<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name><name pos:line="13" pos:column="21">wordfile<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">parse<pos:position pos:line="13" pos:column="36"/></name></name><argument_list pos:line="13" pos:column="36">(<argument><expr><name pos:line="13" pos:column="37">LastTokenType<pos:position pos:line="13" pos:column="50"/></name></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt>
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><operator pos:line="14" pos:column="17">!<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">token<pos:position pos:line="14" pos:column="23"/></name></expr>)<pos:position pos:line="14" pos:column="24"/></condition><then pos:line="14" pos:column="24"> <block pos:line="14" pos:column="25">{
                <expr_stmt><expr><call><name pos:line="15" pos:column="17">assert<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><operator pos:line="15" pos:column="24">!<pos:position pos:line="15" pos:column="25"/></operator><call><name><name pos:line="15" pos:column="25">wordfile<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">-&gt;<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="35">isOpen<pos:position pos:line="15" pos:column="41"/></name></name><argument_list pos:line="15" pos:column="41">()<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="16" pos:column="17">CfgFiles<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">.<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">pop<pos:position pos:line="16" pos:column="29"/></name></name><argument_list pos:line="16" pos:column="29">()<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="17" pos:column="17">debugs<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><literal type="number" pos:line="17" pos:column="24">3<pos:position pos:line="17" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="27">4<pos:position pos:line="17" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="30">"CfgFiles.pop "<pos:position pos:line="17" pos:column="45"/></literal> <operator pos:line="17" pos:column="46">&lt;&lt;<pos:position pos:line="17" pos:column="54"/></operator> <name><name pos:line="17" pos:column="49">wordfile<pos:position pos:line="17" pos:column="57"/></name><operator pos:line="17" pos:column="57">-&gt;<pos:position pos:line="17" pos:column="62"/></operator><name pos:line="17" pos:column="59">filePath<pos:position pos:line="17" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="69"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="18" pos:column="17">delete<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">wordfile<pos:position pos:line="18" pos:column="32"/></name></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="19" pos:column="14"/></block></then></if>
        }<pos:position pos:line="20" pos:column="10"/></block></while>

        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">token<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20">
            <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="13">token<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <call><name pos:line="23" pos:column="21">NextElement<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">LastTokenType<pos:position pos:line="23" pos:column="46"/></name></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt></block></then></if>

        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">token<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">&amp;&amp;<pos:position pos:line="25" pos:column="29"/></operator>  <name pos:line="25" pos:column="23">LastTokenType<pos:position pos:line="25" pos:column="36"/></name> <operator pos:line="25" pos:column="37">==<pos:position pos:line="25" pos:column="39"/></operator> <name><name pos:line="25" pos:column="40">ConfigParser<pos:position pos:line="25" pos:column="52"/></name><operator pos:line="25" pos:column="52">::<pos:position pos:line="25" pos:column="54"/></operator><name pos:line="25" pos:column="54">FunctionParameters<pos:position pos:line="25" pos:column="72"/></name></name></expr>)<pos:position pos:line="25" pos:column="73"/></condition><then pos:line="25" pos:column="73"> <block pos:line="25" pos:column="74">{
            <comment type="line" pos:line="26" pos:column="13">//Disable temporary preview mode, we need to parse function parameters</comment>
            <decl_stmt><decl><type><specifier pos:line="27" pos:column="13">const<pos:position pos:line="27" pos:column="18"/></specifier> <name pos:line="27" pos:column="19">bool<pos:position pos:line="27" pos:column="23"/></name></type> <name pos:line="27" pos:column="24">savePreview<pos:position pos:line="27" pos:column="35"/></name> <init pos:line="27" pos:column="36">= <expr><name><name pos:line="27" pos:column="38">ConfigParser<pos:position pos:line="27" pos:column="50"/></name><operator pos:line="27" pos:column="50">::<pos:position pos:line="27" pos:column="52"/></operator><name pos:line="27" pos:column="52">PreviewMode_<pos:position pos:line="27" pos:column="64"/></name></name></expr></init></decl>;<pos:position pos:line="27" pos:column="65"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="28" pos:column="13">ConfigParser<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">::<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="27">PreviewMode_<pos:position pos:line="28" pos:column="39"/></name></name> <operator pos:line="28" pos:column="40">=<pos:position pos:line="28" pos:column="41"/></operator> <literal type="boolean" pos:line="28" pos:column="42">false<pos:position pos:line="28" pos:column="47"/></literal></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt>

            <decl_stmt><decl><type><name pos:line="30" pos:column="13">char<pos:position pos:line="30" pos:column="17"/></name> <modifier pos:line="30" pos:column="18">*<pos:position pos:line="30" pos:column="19"/></modifier></type><name pos:line="30" pos:column="19">path<pos:position pos:line="30" pos:column="23"/></name> <init pos:line="30" pos:column="24">= <expr><call><name pos:line="30" pos:column="26">NextToken<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">()<pos:position pos:line="30" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="38"/></decl_stmt>
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><name pos:line="31" pos:column="17">LastTokenType<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">!=<pos:position pos:line="31" pos:column="33"/></operator> <name><name pos:line="31" pos:column="34">ConfigParser<pos:position pos:line="31" pos:column="46"/></name><operator pos:line="31" pos:column="46">::<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="48">QuotedToken<pos:position pos:line="31" pos:column="59"/></name></name></expr>)<pos:position pos:line="31" pos:column="60"/></condition><then pos:line="31" pos:column="60"> <block pos:line="31" pos:column="61">{
                <expr_stmt><expr><call><name pos:line="32" pos:column="17">debugs<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><literal type="number" pos:line="32" pos:column="24">3<pos:position pos:line="32" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="27">DBG_CRITICAL<pos:position pos:line="32" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="41">"FATAL: Quoted filename missing: "<pos:position pos:line="32" pos:column="75"/></literal> <operator pos:line="32" pos:column="76">&lt;&lt;<pos:position pos:line="32" pos:column="84"/></operator> <name pos:line="32" pos:column="79">token<pos:position pos:line="32" pos:column="84"/></name></expr></argument>)<pos:position pos:line="32" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="86"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="33" pos:column="17">self_destruct<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">()<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>
                <return pos:line="34" pos:column="17">return <expr><name pos:line="34" pos:column="24">NULL<pos:position pos:line="34" pos:column="28"/></name></expr>;<pos:position pos:line="34" pos:column="29"/></return>
            }<pos:position pos:line="35" pos:column="14"/></block></then></if>

            <comment type="line" pos:line="37" pos:column="13">// The next token in current cfg file line must be a ")"</comment>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">char<pos:position pos:line="38" pos:column="17"/></name> <modifier pos:line="38" pos:column="18">*<pos:position pos:line="38" pos:column="19"/></modifier></type><name pos:line="38" pos:column="19">end<pos:position pos:line="38" pos:column="22"/></name> <init pos:line="38" pos:column="23">= <expr><call><name pos:line="38" pos:column="25">NextToken<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">()<pos:position pos:line="38" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="37"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="39" pos:column="13">ConfigParser<pos:position pos:line="39" pos:column="25"/></name><operator pos:line="39" pos:column="25">::<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="27">PreviewMode_<pos:position pos:line="39" pos:column="39"/></name></name> <operator pos:line="39" pos:column="40">=<pos:position pos:line="39" pos:column="41"/></operator> <name pos:line="39" pos:column="42">savePreview<pos:position pos:line="39" pos:column="53"/></name></expr>;<pos:position pos:line="39" pos:column="54"/></expr_stmt>
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><name pos:line="40" pos:column="17">LastTokenType<pos:position pos:line="40" pos:column="30"/></name> <operator pos:line="40" pos:column="31">!=<pos:position pos:line="40" pos:column="33"/></operator> <name><name pos:line="40" pos:column="34">ConfigParser<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">::<pos:position pos:line="40" pos:column="48"/></operator><name pos:line="40" pos:column="48">SimpleToken<pos:position pos:line="40" pos:column="59"/></name></name> <operator pos:line="40" pos:column="60">||<pos:position pos:line="40" pos:column="62"/></operator> <call><name pos:line="40" pos:column="63">strcmp<pos:position pos:line="40" pos:column="69"/></name><argument_list pos:line="40" pos:column="69">(<argument><expr><name pos:line="40" pos:column="70">end<pos:position pos:line="40" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="75">")"<pos:position pos:line="40" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="79"/></argument_list></call> <operator pos:line="40" pos:column="80">!=<pos:position pos:line="40" pos:column="82"/></operator> <literal type="number" pos:line="40" pos:column="83">0<pos:position pos:line="40" pos:column="84"/></literal></expr>)<pos:position pos:line="40" pos:column="85"/></condition><then pos:line="40" pos:column="85"> <block pos:line="40" pos:column="86">{
                <expr_stmt><expr><call><name pos:line="41" pos:column="17">debugs<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><literal type="number" pos:line="41" pos:column="24">3<pos:position pos:line="41" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="27">DBG_CRITICAL<pos:position pos:line="41" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="41">"FATAL: missing ')' after "<pos:position pos:line="41" pos:column="68"/></literal> <operator pos:line="41" pos:column="69">&lt;&lt;<pos:position pos:line="41" pos:column="77"/></operator> <name pos:line="41" pos:column="72">token<pos:position pos:line="41" pos:column="77"/></name> <operator pos:line="41" pos:column="78">&lt;&lt;<pos:position pos:line="41" pos:column="86"/></operator> <literal type="string" pos:line="41" pos:column="81">"(\""<pos:position pos:line="41" pos:column="86"/></literal> <operator pos:line="41" pos:column="87">&lt;&lt;<pos:position pos:line="41" pos:column="95"/></operator> <name pos:line="41" pos:column="90">path<pos:position pos:line="41" pos:column="94"/></name> <operator pos:line="41" pos:column="95">&lt;&lt;<pos:position pos:line="41" pos:column="103"/></operator> <literal type="string" pos:line="41" pos:column="98">"\""<pos:position pos:line="41" pos:column="102"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="104"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="42" pos:column="17">self_destruct<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">()<pos:position pos:line="42" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>
                <return pos:line="43" pos:column="17">return <expr><name pos:line="43" pos:column="24">NULL<pos:position pos:line="43" pos:column="28"/></name></expr>;<pos:position pos:line="43" pos:column="29"/></return>
            }<pos:position pos:line="44" pos:column="14"/></block></then></if>

            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><call><name><name pos:line="46" pos:column="17">CfgFiles<pos:position pos:line="46" pos:column="25"/></name><operator pos:line="46" pos:column="25">.<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="26">size<pos:position pos:line="46" pos:column="30"/></name></name><argument_list pos:line="46" pos:column="30">()<pos:position pos:line="46" pos:column="32"/></argument_list></call> <operator pos:line="46" pos:column="33">&gt;<pos:position pos:line="46" pos:column="37"/></operator> <literal type="number" pos:line="46" pos:column="35">16<pos:position pos:line="46" pos:column="37"/></literal></expr>)<pos:position pos:line="46" pos:column="38"/></condition><then pos:line="46" pos:column="38"> <block pos:line="46" pos:column="39">{
                <expr_stmt><expr><call><name pos:line="47" pos:column="17">debugs<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><literal type="number" pos:line="47" pos:column="24">3<pos:position pos:line="47" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="27">DBG_CRITICAL<pos:position pos:line="47" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="41">"FATAL: can't open %s for reading parameters: includes are nested too deeply (&gt;16)!\n"<pos:position pos:line="47" pos:column="130"/></literal> <operator pos:line="47" pos:column="128">&lt;&lt;<pos:position pos:line="47" pos:column="136"/></operator> <name pos:line="47" pos:column="131">path<pos:position pos:line="47" pos:column="135"/></name></expr></argument>)<pos:position pos:line="47" pos:column="136"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="137"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="48" pos:column="17">self_destruct<pos:position pos:line="48" pos:column="30"/></name><argument_list pos:line="48" pos:column="30">()<pos:position pos:line="48" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>
                <return pos:line="49" pos:column="17">return <expr><name pos:line="49" pos:column="24">NULL<pos:position pos:line="49" pos:column="28"/></name></expr>;<pos:position pos:line="49" pos:column="29"/></return>
            }<pos:position pos:line="50" pos:column="14"/></block></then></if>

            <decl_stmt><decl><type><name><name pos:line="52" pos:column="13">ConfigParser<pos:position pos:line="52" pos:column="25"/></name><operator pos:line="52" pos:column="25">::<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="27">CfgFile<pos:position pos:line="52" pos:column="34"/></name></name> <modifier pos:line="52" pos:column="35">*<pos:position pos:line="52" pos:column="36"/></modifier></type><name pos:line="52" pos:column="36">wordfile<pos:position pos:line="52" pos:column="44"/></name> <init pos:line="52" pos:column="45">= <expr><operator pos:line="52" pos:column="47">new<pos:position pos:line="52" pos:column="50"/></operator> <call><name><name pos:line="52" pos:column="51">ConfigParser<pos:position pos:line="52" pos:column="63"/></name><operator pos:line="52" pos:column="63">::<pos:position pos:line="52" pos:column="65"/></operator><name pos:line="52" pos:column="65">CfgFile<pos:position pos:line="52" pos:column="72"/></name></name><argument_list pos:line="52" pos:column="72">()<pos:position pos:line="52" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="75"/></decl_stmt>
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><operator pos:line="53" pos:column="17">!<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="18">path<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">||<pos:position pos:line="53" pos:column="25"/></operator> <operator pos:line="53" pos:column="26">!<pos:position pos:line="53" pos:column="27"/></operator><call><name><name pos:line="53" pos:column="27">wordfile<pos:position pos:line="53" pos:column="35"/></name><operator pos:line="53" pos:column="35">-&gt;<pos:position pos:line="53" pos:column="40"/></operator><name pos:line="53" pos:column="37">startParse<pos:position pos:line="53" pos:column="47"/></name></name><argument_list pos:line="53" pos:column="47">(<argument><expr><name pos:line="53" pos:column="48">path<pos:position pos:line="53" pos:column="52"/></name></expr></argument>)<pos:position pos:line="53" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="54"/></condition><then pos:line="53" pos:column="54"> <block pos:line="53" pos:column="55">{
                <expr_stmt><expr><call><name pos:line="54" pos:column="17">debugs<pos:position pos:line="54" pos:column="23"/></name><argument_list pos:line="54" pos:column="23">(<argument><expr><literal type="number" pos:line="54" pos:column="24">3<pos:position pos:line="54" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="27">DBG_CRITICAL<pos:position pos:line="54" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="41">"FATAL: Error opening config file: "<pos:position pos:line="54" pos:column="77"/></literal> <operator pos:line="54" pos:column="78">&lt;&lt;<pos:position pos:line="54" pos:column="86"/></operator> <name pos:line="54" pos:column="81">token<pos:position pos:line="54" pos:column="86"/></name></expr></argument>)<pos:position pos:line="54" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="88"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="55" pos:column="17">delete<pos:position pos:line="55" pos:column="23"/></operator> <name pos:line="55" pos:column="24">wordfile<pos:position pos:line="55" pos:column="32"/></name></expr>;<pos:position pos:line="55" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">self_destruct<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">()<pos:position pos:line="56" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="33"/></expr_stmt>
                <return pos:line="57" pos:column="17">return <expr><name pos:line="57" pos:column="24">NULL<pos:position pos:line="57" pos:column="28"/></name></expr>;<pos:position pos:line="57" pos:column="29"/></return>
            }<pos:position pos:line="58" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name><name pos:line="59" pos:column="13">CfgFiles<pos:position pos:line="59" pos:column="21"/></name><operator pos:line="59" pos:column="21">.<pos:position pos:line="59" pos:column="22"/></operator><name pos:line="59" pos:column="22">push<pos:position pos:line="59" pos:column="26"/></name></name><argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">wordfile<pos:position pos:line="59" pos:column="35"/></name></expr></argument>)<pos:position pos:line="59" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name pos:line="60" pos:column="13">token<pos:position pos:line="60" pos:column="18"/></name> <operator pos:line="60" pos:column="19">=<pos:position pos:line="60" pos:column="20"/></operator> <name pos:line="60" pos:column="21">NULL<pos:position pos:line="60" pos:column="25"/></name></expr>;<pos:position pos:line="60" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block> while <condition pos:line="62" pos:column="13">(<expr><name pos:line="62" pos:column="14">token<pos:position pos:line="62" pos:column="19"/></name> <operator pos:line="62" pos:column="20">==<pos:position pos:line="62" pos:column="22"/></operator> <name pos:line="62" pos:column="23">NULL<pos:position pos:line="62" pos:column="27"/></name> <operator pos:line="62" pos:column="28">&amp;&amp;<pos:position pos:line="62" pos:column="38"/></operator> <operator pos:line="62" pos:column="31">!<pos:position pos:line="62" pos:column="32"/></operator><call><name><name pos:line="62" pos:column="32">CfgFiles<pos:position pos:line="62" pos:column="40"/></name><operator pos:line="62" pos:column="40">.<pos:position pos:line="62" pos:column="41"/></operator><name pos:line="62" pos:column="41">empty<pos:position pos:line="62" pos:column="46"/></name></name><argument_list pos:line="62" pos:column="46">()<pos:position pos:line="62" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="49"/></condition>;<pos:position pos:line="62" pos:column="50"/></do>

    <return pos:line="64" pos:column="5">return <expr><name pos:line="64" pos:column="12">token<pos:position pos:line="64" pos:column="17"/></name></expr>;<pos:position pos:line="64" pos:column="18"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
