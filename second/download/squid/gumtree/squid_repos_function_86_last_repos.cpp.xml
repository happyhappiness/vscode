<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_86_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">isxstring<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">( <parameter><decl><type><specifier pos:line="2" pos:column="12">const<pos:position pos:line="2" pos:column="17"/></specifier> <name pos:line="2" pos:column="18">char<pos:position pos:line="2" pos:column="22"/></name><modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type> <name pos:line="2" pos:column="24">s<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">size_t<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">testlen<pos:position pos:line="2" pos:column="41"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="43"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: test a string for conforming to xdigit</comment>
<comment type="line" pos:line="4" pos:column="1">// paramtr: s (IN): string to test</comment>
<comment type="line" pos:line="5" pos:column="1">//          testlen (IN): length the string must have</comment>
<comment type="line" pos:line="6" pos:column="1">// returns: true, iff strlen(s)==testlen &amp;&amp; all_x_chars(s), false otherwise</comment>
<block pos:line="7" pos:column="1">{
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">( <expr><call><name pos:line="8" pos:column="10">strlen<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><name pos:line="8" pos:column="17">s<pos:position pos:line="8" pos:column="18"/></name></expr></argument>)<pos:position pos:line="8" pos:column="19"/></argument_list></call> <operator pos:line="8" pos:column="20">!=<pos:position pos:line="8" pos:column="22"/></operator> <name pos:line="8" pos:column="23">testlen<pos:position pos:line="8" pos:column="30"/></name></expr> )<pos:position pos:line="8" pos:column="32"/></condition><then pos:line="8" pos:column="32"> <block type="pseudo"><return pos:line="8" pos:column="33">return <expr><literal type="boolean" pos:line="8" pos:column="40">false<pos:position pos:line="8" pos:column="45"/></literal></expr>;<pos:position pos:line="8" pos:column="46"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">size_t<pos:position pos:line="10" pos:column="11"/></name></type> <name pos:line="10" pos:column="12">i<pos:position pos:line="10" pos:column="13"/></name><init pos:line="10" pos:column="13">=<expr><literal type="number" pos:line="10" pos:column="14">0<pos:position pos:line="10" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>
    <while pos:line="11" pos:column="5">while <condition pos:line="11" pos:column="11">( <expr><name pos:line="11" pos:column="13">i<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">&lt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">testlen<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">&amp;&amp;<pos:position pos:line="11" pos:column="33"/></operator> <call><name pos:line="11" pos:column="26">isxdigit<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name><name pos:line="11" pos:column="35">s<pos:position pos:line="11" pos:column="36"/></name><index pos:line="11" pos:column="36">[<expr><name pos:line="11" pos:column="37">i<pos:position pos:line="11" pos:column="38"/></name></expr>]<pos:position pos:line="11" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr> )<pos:position pos:line="11" pos:column="42"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="12" pos:column="9">++<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">i<pos:position pos:line="12" pos:column="12"/></name></expr>;<pos:position pos:line="12" pos:column="13"/></expr_stmt></block></while>
    <return pos:line="13" pos:column="5">return <expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">i<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">==<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">testlen<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">)<pos:position pos:line="13" pos:column="24"/></operator></expr>;<pos:position pos:line="13" pos:column="25"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
