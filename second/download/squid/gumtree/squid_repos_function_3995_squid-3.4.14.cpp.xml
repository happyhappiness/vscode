<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3995_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">start<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">()<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">theMaster<pos:position pos:line="4" pos:column="19"/></name></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">theVirginRep<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">.<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">raw<pos:position pos:line="6" pos:column="26"/></name></name><argument_list pos:line="6" pos:column="26">()<pos:position pos:line="6" pos:column="28"/></argument_list></call><operator pos:line="6" pos:column="28">.<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="29">body_pipe<pos:position pos:line="6" pos:column="38"/></name></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39">
        <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="9">makingVb<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">opNever<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt></block></then></if> <comment type="line" pos:line="7" pos:column="29">// there is nothing to deliver</comment>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">HttpRequest<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">request<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><cast type="dynamic" pos:line="9" pos:column="28">dynamic_cast<argument_list type="generic" pos:line="9" pos:column="40">&lt;<argument><expr><name pos:line="9" pos:column="41">HttpRequest<pos:position pos:line="9" pos:column="52"/></name><operator pos:line="9" pos:column="52">*<pos:position pos:line="9" pos:column="53"/></operator></expr></argument>&gt;<pos:position pos:line="9" pos:column="57"/></argument_list> <argument_list pos:line="9" pos:column="55">(<argument><expr><ternary><condition><expr><name pos:line="9" pos:column="56">theCauseRep<pos:position pos:line="9" pos:column="67"/></name></expr> ?<pos:position pos:line="9" pos:column="69"/></condition><then pos:line="9" pos:column="69">
                           <expr><call><name><name pos:line="10" pos:column="28">theCauseRep<pos:position pos:line="10" pos:column="39"/></name><operator pos:line="10" pos:column="39">-&gt;<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="41">raw<pos:position pos:line="10" pos:column="44"/></name></name><argument_list pos:line="10" pos:column="44">()<pos:position pos:line="10" pos:column="46"/></argument_list></call><operator pos:line="10" pos:column="46">.<pos:position pos:line="10" pos:column="47"/></operator><name pos:line="10" pos:column="47">header<pos:position pos:line="10" pos:column="53"/></name></expr> <pos:position pos:line="10" pos:column="54"/></then><else pos:line="10" pos:column="54">: <expr><call><name><name pos:line="10" pos:column="56">theVirginRep<pos:position pos:line="10" pos:column="68"/></name><operator pos:line="10" pos:column="68">.<pos:position pos:line="10" pos:column="69"/></operator><name pos:line="10" pos:column="69">raw<pos:position pos:line="10" pos:column="72"/></name></name><argument_list pos:line="10" pos:column="72">()<pos:position pos:line="10" pos:column="74"/></argument_list></call><operator pos:line="10" pos:column="74">.<pos:position pos:line="10" pos:column="75"/></operator><name pos:line="10" pos:column="75">header<pos:position pos:line="10" pos:column="81"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="10" pos:column="82"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="10" pos:column="83"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">Must<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><name pos:line="11" pos:column="10">request<pos:position pos:line="11" pos:column="17"/></name></expr></argument>)<pos:position pos:line="11" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">HttpReply<pos:position pos:line="13" pos:column="14"/></name> <modifier pos:line="13" pos:column="15">*<pos:position pos:line="13" pos:column="16"/></modifier></type><name pos:line="13" pos:column="16">reply<pos:position pos:line="13" pos:column="21"/></name> <init pos:line="13" pos:column="22">= <expr><cast type="dynamic" pos:line="13" pos:column="24">dynamic_cast<argument_list type="generic" pos:line="13" pos:column="36">&lt;<argument><expr><name pos:line="13" pos:column="37">HttpReply<pos:position pos:line="13" pos:column="46"/></name><operator pos:line="13" pos:column="46">*<pos:position pos:line="13" pos:column="47"/></operator></expr></argument>&gt;<pos:position pos:line="13" pos:column="51"/></argument_list><argument_list pos:line="13" pos:column="48">(<argument><expr><call><name><name pos:line="13" pos:column="49">theVirginRep<pos:position pos:line="13" pos:column="61"/></name><operator pos:line="13" pos:column="61">.<pos:position pos:line="13" pos:column="62"/></operator><name pos:line="13" pos:column="62">raw<pos:position pos:line="13" pos:column="65"/></name></name><argument_list pos:line="13" pos:column="65">()<pos:position pos:line="13" pos:column="67"/></argument_list></call><operator pos:line="13" pos:column="67">.<pos:position pos:line="13" pos:column="68"/></operator><name pos:line="13" pos:column="68">header<pos:position pos:line="13" pos:column="74"/></name></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="13" pos:column="76"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">Adaptation<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">::<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">History<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">::<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="26">Pointer<pos:position pos:line="15" pos:column="33"/></name></name></type> <name pos:line="15" pos:column="34">ah<pos:position pos:line="15" pos:column="36"/></name> <init pos:line="15" pos:column="37">= <expr><call><name><name pos:line="15" pos:column="39">request<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">-&gt;<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="48">adaptLogHistory<pos:position pos:line="15" pos:column="63"/></name></name><argument_list pos:line="15" pos:column="63">()<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="66"/></decl_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">ah<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">!=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">NULL<pos:position pos:line="16" pos:column="19"/></name></expr>)<pos:position pos:line="16" pos:column="20"/></condition><then pos:line="16" pos:column="20"> <block pos:line="16" pos:column="21">{
        <comment type="line" pos:line="17" pos:column="9">// retrying=false because ecap never retries transactions</comment>
        <expr_stmt><expr><name pos:line="18" pos:column="9">adaptHistoryId<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <call><name><name pos:line="18" pos:column="26">ah<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">recordXactStart<pos:position pos:line="18" pos:column="45"/></name></name><argument_list pos:line="18" pos:column="45">(<argument><expr><call><name pos:line="18" pos:column="46">service<pos:position pos:line="18" pos:column="53"/></name><argument_list pos:line="18" pos:column="53">()<pos:position pos:line="18" pos:column="55"/></argument_list></call><operator pos:line="18" pos:column="55">.<pos:position pos:line="18" pos:column="56"/></operator><call><name pos:line="18" pos:column="56">cfg<pos:position pos:line="18" pos:column="59"/></name><argument_list pos:line="18" pos:column="59">()<pos:position pos:line="18" pos:column="61"/></argument_list></call><operator pos:line="18" pos:column="61">.<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="62">key<pos:position pos:line="18" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="67">current_time<pos:position pos:line="18" pos:column="79"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="18" pos:column="81">false<pos:position pos:line="18" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="88"/></expr_stmt>
        <typedef pos:line="19" pos:column="9">typedef <type><name><name pos:line="19" pos:column="17">Notes<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">::<pos:position pos:line="19" pos:column="24"/></operator><name pos:line="19" pos:column="24">iterator<pos:position pos:line="19" pos:column="32"/></name></name></type> <name pos:line="19" pos:column="33">ACAMLI<pos:position pos:line="19" pos:column="39"/></name>;<pos:position pos:line="19" pos:column="40"/></typedef>
        <for pos:line="20" pos:column="9">for <control pos:line="20" pos:column="13">(<init><decl><type><name pos:line="20" pos:column="14">ACAMLI<pos:position pos:line="20" pos:column="20"/></name></type> <name pos:line="20" pos:column="21">i<pos:position pos:line="20" pos:column="22"/></name> <init pos:line="20" pos:column="23">= <expr><call><name><name pos:line="20" pos:column="25">Adaptation<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">::<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="37">Config<pos:position pos:line="20" pos:column="43"/></name><operator pos:line="20" pos:column="43">::<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="45">metaHeaders<pos:position pos:line="20" pos:column="56"/></name><operator pos:line="20" pos:column="56">.<pos:position pos:line="20" pos:column="57"/></operator><name pos:line="20" pos:column="57">begin<pos:position pos:line="20" pos:column="62"/></name></name><argument_list pos:line="20" pos:column="62">()<pos:position pos:line="20" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="65"/></init> <condition><expr><name pos:line="20" pos:column="66">i<pos:position pos:line="20" pos:column="67"/></name> <operator pos:line="20" pos:column="68">!=<pos:position pos:line="20" pos:column="70"/></operator> <call><name><name pos:line="20" pos:column="71">Adaptation<pos:position pos:line="20" pos:column="81"/></name><operator pos:line="20" pos:column="81">::<pos:position pos:line="20" pos:column="83"/></operator><name pos:line="20" pos:column="83">Config<pos:position pos:line="20" pos:column="89"/></name><operator pos:line="20" pos:column="89">::<pos:position pos:line="20" pos:column="91"/></operator><name pos:line="20" pos:column="91">metaHeaders<pos:position pos:line="20" pos:column="102"/></name><operator pos:line="20" pos:column="102">.<pos:position pos:line="20" pos:column="103"/></operator><name pos:line="20" pos:column="103">end<pos:position pos:line="20" pos:column="106"/></name></name><argument_list pos:line="20" pos:column="106">()<pos:position pos:line="20" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="109"/></condition> <incr><expr><operator pos:line="20" pos:column="110">++<pos:position pos:line="20" pos:column="112"/></operator><name pos:line="20" pos:column="112">i<pos:position pos:line="20" pos:column="113"/></name></expr></incr>)<pos:position pos:line="20" pos:column="114"/></control> <block pos:line="20" pos:column="115">{
            <decl_stmt><decl><type><specifier pos:line="21" pos:column="13">const<pos:position pos:line="21" pos:column="18"/></specifier> <name pos:line="21" pos:column="19">char<pos:position pos:line="21" pos:column="23"/></name> <modifier pos:line="21" pos:column="24">*<pos:position pos:line="21" pos:column="25"/></modifier></type><name pos:line="21" pos:column="25">v<pos:position pos:line="21" pos:column="26"/></name> <init pos:line="21" pos:column="27">= <expr><call><name><operator pos:line="21" pos:column="29">(<pos:position pos:line="21" pos:column="30"/></operator><operator pos:line="21" pos:column="30">*<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="31">i<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">)<pos:position pos:line="21" pos:column="33"/></operator><operator pos:line="21" pos:column="33">-&gt;<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="35">match<pos:position pos:line="21" pos:column="40"/></name></name><argument_list pos:line="21" pos:column="40">(<argument><expr><name pos:line="21" pos:column="41">request<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">reply<pos:position pos:line="21" pos:column="55"/></name></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="57"/></decl_stmt>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name pos:line="22" pos:column="17">v<pos:position pos:line="22" pos:column="18"/></name></expr>)<pos:position pos:line="22" pos:column="19"/></condition><then pos:line="22" pos:column="19"> <block pos:line="22" pos:column="20">{
                <if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name><name pos:line="23" pos:column="21">ah<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">metaHeaders<pos:position pos:line="23" pos:column="36"/></name></name> <operator pos:line="23" pos:column="37">==<pos:position pos:line="23" pos:column="39"/></operator> <name pos:line="23" pos:column="40">NULL<pos:position pos:line="23" pos:column="44"/></name></expr>)<pos:position pos:line="23" pos:column="45"/></condition><then pos:line="23" pos:column="45">
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="24" pos:column="21">ah<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">metaHeaders<pos:position pos:line="24" pos:column="36"/></name></name> <operator pos:line="24" pos:column="37">=<pos:position pos:line="24" pos:column="38"/></operator> <operator pos:line="24" pos:column="39">new<pos:position pos:line="24" pos:column="42"/></operator> <call><name pos:line="24" pos:column="43">NotePairs<pos:position pos:line="24" pos:column="52"/></name><argument_list pos:line="24" pos:column="52">()<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt></block></then></if>
                <if pos:line="25" pos:column="17">if <condition pos:line="25" pos:column="20">(<expr><operator pos:line="25" pos:column="21">!<pos:position pos:line="25" pos:column="22"/></operator><call><name><name pos:line="25" pos:column="22">ah<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">-&gt;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="26">metaHeaders<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">-&gt;<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="39">hasPair<pos:position pos:line="25" pos:column="46"/></name></name><argument_list pos:line="25" pos:column="46">(<argument><expr><call><name><operator pos:line="25" pos:column="47">(<pos:position pos:line="25" pos:column="48"/></operator><operator pos:line="25" pos:column="48">*<pos:position pos:line="25" pos:column="49"/></operator><name pos:line="25" pos:column="49">i<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">)<pos:position pos:line="25" pos:column="51"/></operator><operator pos:line="25" pos:column="51">-&gt;<pos:position pos:line="25" pos:column="56"/></operator><name><name pos:line="25" pos:column="53">key<pos:position pos:line="25" pos:column="56"/></name><operator pos:line="25" pos:column="56">.<pos:position pos:line="25" pos:column="57"/></operator><name pos:line="25" pos:column="57">termedBuf<pos:position pos:line="25" pos:column="66"/></name></name></name><argument_list pos:line="25" pos:column="66">()<pos:position pos:line="25" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="70">v<pos:position pos:line="25" pos:column="71"/></name></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="73"/></condition><then pos:line="25" pos:column="73">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="26" pos:column="21">ah<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">-&gt;<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="25">metaHeaders<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">add<pos:position pos:line="26" pos:column="41"/></name></name><argument_list pos:line="26" pos:column="41">(<argument><expr><call><name><operator pos:line="26" pos:column="42">(<pos:position pos:line="26" pos:column="43"/></operator><operator pos:line="26" pos:column="43">*<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="44">i<pos:position pos:line="26" pos:column="45"/></name><operator pos:line="26" pos:column="45">)<pos:position pos:line="26" pos:column="46"/></operator><operator pos:line="26" pos:column="46">-&gt;<pos:position pos:line="26" pos:column="51"/></operator><name><name pos:line="26" pos:column="48">key<pos:position pos:line="26" pos:column="51"/></name><operator pos:line="26" pos:column="51">.<pos:position pos:line="26" pos:column="52"/></operator><name pos:line="26" pos:column="52">termedBuf<pos:position pos:line="26" pos:column="61"/></name></name></name><argument_list pos:line="26" pos:column="61">()<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="26" pos:column="65">v<pos:position pos:line="26" pos:column="66"/></name></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="68"/></expr_stmt></block></then></if>
            }<pos:position pos:line="27" pos:column="14"/></block></then></if>
        }<pos:position pos:line="28" pos:column="10"/></block></for>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="31" pos:column="5">theMaster<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">-&gt;<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="16">start<pos:position pos:line="31" pos:column="21"/></name></name><argument_list pos:line="31" pos:column="21">()<pos:position pos:line="31" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
