<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6433_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Icmp6<pos:position pos:line="2" pos:column="6"/></name><operator pos:line="2" pos:column="6">::<pos:position pos:line="2" pos:column="8"/></operator><name pos:line="2" pos:column="8">SendEcho<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name><name pos:line="2" pos:column="17">Ip<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">Address<pos:position pos:line="2" pos:column="28"/></name></name> <modifier pos:line="2" pos:column="29">&amp;<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="30">to<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">int<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">opcode<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">payload<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">int<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">len<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">x<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">LOCAL_ARRAY<pos:position pos:line="5" pos:column="16"/></name><argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">char<pos:position pos:line="5" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="23">pkt<pos:position pos:line="5" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="28">MAX_PKT6_SZ<pos:position pos:line="5" pos:column="39"/></name></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="41"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">icmp6_hdr<pos:position pos:line="6" pos:column="21"/></name></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">icmp<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name pos:line="6" pos:column="30">NULL<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">icmpEchoData<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">echo<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><name pos:line="7" pos:column="26">NULL<pos:position pos:line="7" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">addrinfo<pos:position pos:line="8" pos:column="20"/></name></name> <modifier pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></modifier></type><name pos:line="8" pos:column="22">S<pos:position pos:line="8" pos:column="23"/></name> <init pos:line="8" pos:column="24">= <expr><name pos:line="8" pos:column="26">NULL<pos:position pos:line="8" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">size_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">icmp6_pktsize<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">memset<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">pkt<pos:position pos:line="11" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="17">'\0'<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="23">MAX_PKT6_SZ<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">icmp<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator>struct <name pos:line="12" pos:column="20">icmp6_hdr<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">*<pos:position pos:line="12" pos:column="31"/></operator><operator pos:line="12" pos:column="31">)<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="32">pkt<pos:position pos:line="12" pos:column="35"/></name></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="14" pos:column="5">/*
     * cevans - beware signed/unsigned issues in untrusted data from
     * the network!!
     */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">len<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">&lt;<pos:position pos:line="18" pos:column="17"/></operator> <literal type="number" pos:line="18" pos:column="15">0<pos:position pos:line="18" pos:column="16"/></literal></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17"> <block pos:line="18" pos:column="18">{
        <expr_stmt><expr><name pos:line="19" pos:column="9">len<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <literal type="number" pos:line="19" pos:column="15">0<pos:position pos:line="19" pos:column="16"/></literal></expr>;<pos:position pos:line="19" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="22" pos:column="5">// Construct Icmp6 ECHO header</comment>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">icmp<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">-&gt;<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="11">icmp6_type<pos:position pos:line="23" pos:column="21"/></name></name> <operator pos:line="23" pos:column="22">=<pos:position pos:line="23" pos:column="23"/></operator> <name pos:line="23" pos:column="24">ICMP6_ECHO_REQUEST<pos:position pos:line="23" pos:column="42"/></name></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">icmp<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">-&gt;<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="11">icmp6_code<pos:position pos:line="24" pos:column="21"/></name></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <literal type="number" pos:line="24" pos:column="24">0<pos:position pos:line="24" pos:column="25"/></literal></expr>;<pos:position pos:line="24" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">icmp<pos:position pos:line="25" pos:column="9"/></name><operator pos:line="25" pos:column="9">-&gt;<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="11">icmp6_cksum<pos:position pos:line="25" pos:column="22"/></name></name> <operator pos:line="25" pos:column="23">=<pos:position pos:line="25" pos:column="24"/></operator> <literal type="number" pos:line="25" pos:column="25">0<pos:position pos:line="25" pos:column="26"/></literal></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">icmp<pos:position pos:line="26" pos:column="9"/></name><operator pos:line="26" pos:column="9">-&gt;<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="11">icmp6_id<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <name pos:line="26" pos:column="22">icmp_ident<pos:position pos:line="26" pos:column="32"/></name></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">icmp<pos:position pos:line="27" pos:column="9"/></name><operator pos:line="27" pos:column="9">-&gt;<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="11">icmp6_seq<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <operator pos:line="27" pos:column="23">(<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">unsigned<pos:position pos:line="27" pos:column="32"/></name> <name pos:line="27" pos:column="33">short<pos:position pos:line="27" pos:column="38"/></name><operator pos:line="27" pos:column="38">)<pos:position pos:line="27" pos:column="39"/></operator> <name pos:line="27" pos:column="40">icmp_pkts_sent<pos:position pos:line="27" pos:column="54"/></name></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="28" pos:column="5">++<pos:position pos:line="28" pos:column="7"/></operator><name pos:line="28" pos:column="7">icmp_pkts_sent<pos:position pos:line="28" pos:column="21"/></name></expr>;<pos:position pos:line="28" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><name pos:line="30" pos:column="5">icmp6_pktsize<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <sizeof pos:line="30" pos:column="21">sizeof<argument_list pos:line="30" pos:column="27">(<argument><expr pos:line="30" pos:column="28">struct <name pos:line="30" pos:column="35">icmp6_hdr<pos:position pos:line="30" pos:column="44"/></name></expr></argument>)<pos:position pos:line="30" pos:column="45"/></argument_list></sizeof></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt>

    <comment type="line" pos:line="32" pos:column="5">// Fill Icmp6 ECHO data content</comment>
    <expr_stmt><expr><name pos:line="33" pos:column="5">echo<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">=<pos:position pos:line="33" pos:column="11"/></operator> <operator pos:line="33" pos:column="12">(<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="13">icmpEchoData<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">*<pos:position pos:line="33" pos:column="27"/></operator><operator pos:line="33" pos:column="27">)<pos:position pos:line="33" pos:column="28"/></operator> <operator pos:line="33" pos:column="29">(<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">pkt<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">+<pos:position pos:line="33" pos:column="35"/></operator> <sizeof pos:line="33" pos:column="36">sizeof<argument_list pos:line="33" pos:column="42">(<argument><expr><name pos:line="33" pos:column="43">icmp6_hdr<pos:position pos:line="33" pos:column="52"/></name></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></sizeof><operator pos:line="33" pos:column="53">)<pos:position pos:line="33" pos:column="54"/></operator></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">echo<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">opcode<pos:position pos:line="34" pos:column="17"/></name></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <operator pos:line="34" pos:column="20">(<pos:position pos:line="34" pos:column="21"/></operator><name pos:line="34" pos:column="21">unsigned<pos:position pos:line="34" pos:column="29"/></name> <name pos:line="34" pos:column="30">char<pos:position pos:line="34" pos:column="34"/></name><operator pos:line="34" pos:column="34">)<pos:position pos:line="34" pos:column="35"/></operator> <name pos:line="34" pos:column="36">opcode<pos:position pos:line="34" pos:column="42"/></name></expr>;<pos:position pos:line="34" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">memcpy<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><operator pos:line="35" pos:column="12">&amp;<pos:position pos:line="35" pos:column="17"/></operator><name><name pos:line="35" pos:column="13">echo<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">tv<pos:position pos:line="35" pos:column="21"/></name></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="23">&amp;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="24">current_time<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="38">sizeof<argument_list pos:line="35" pos:column="44">(<argument><expr pos:line="35" pos:column="45">struct <name pos:line="35" pos:column="52">timeval<pos:position pos:line="35" pos:column="59"/></name></expr></argument>)<pos:position pos:line="35" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><name pos:line="37" pos:column="5">icmp6_pktsize<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">+=<pos:position pos:line="37" pos:column="21"/></operator> <sizeof pos:line="37" pos:column="22">sizeof<argument_list pos:line="37" pos:column="28">(<argument><expr pos:line="37" pos:column="29">struct <name pos:line="37" pos:column="36">timeval<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></sizeof> <operator pos:line="37" pos:column="45">+<pos:position pos:line="37" pos:column="46"/></operator> <sizeof pos:line="37" pos:column="47">sizeof<argument_list pos:line="37" pos:column="53">(<argument><expr><name pos:line="37" pos:column="54">char<pos:position pos:line="37" pos:column="58"/></name></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></sizeof></expr>;<pos:position pos:line="37" pos:column="60"/></expr_stmt>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">payload<pos:position pos:line="39" pos:column="16"/></name></expr>)<pos:position pos:line="39" pos:column="17"/></condition><then pos:line="39" pos:column="17"> <block pos:line="39" pos:column="18">{
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">len<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">&gt;<pos:position pos:line="40" pos:column="21"/></operator> <name pos:line="40" pos:column="19">MAX_PAYLOAD<pos:position pos:line="40" pos:column="30"/></name></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="13">len<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">MAX_PAYLOAD<pos:position pos:line="41" pos:column="30"/></name></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="43" pos:column="9">memcpy<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name><name pos:line="43" pos:column="16">echo<pos:position pos:line="43" pos:column="20"/></name><operator pos:line="43" pos:column="20">-&gt;<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="22">payload<pos:position pos:line="43" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">payload<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="40">len<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt>

        <expr_stmt><expr><name pos:line="45" pos:column="9">icmp6_pktsize<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">+=<pos:position pos:line="45" pos:column="25"/></operator> <name pos:line="45" pos:column="26">len<pos:position pos:line="45" pos:column="29"/></name></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="48" pos:column="5">icmp<pos:position pos:line="48" pos:column="9"/></name><operator pos:line="48" pos:column="9">-&gt;<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="11">icmp6_cksum<pos:position pos:line="48" pos:column="22"/></name></name> <operator pos:line="48" pos:column="23">=<pos:position pos:line="48" pos:column="24"/></operator> <call><name pos:line="48" pos:column="25">CheckSum<pos:position pos:line="48" pos:column="33"/></name><argument_list pos:line="48" pos:column="33">(<argument><expr><operator pos:line="48" pos:column="34">(<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="35">unsigned<pos:position pos:line="48" pos:column="43"/></name> <name pos:line="48" pos:column="44">short<pos:position pos:line="48" pos:column="49"/></name> <operator pos:line="48" pos:column="50">*<pos:position pos:line="48" pos:column="51"/></operator><operator pos:line="48" pos:column="51">)<pos:position pos:line="48" pos:column="52"/></operator> <name pos:line="48" pos:column="53">icmp<pos:position pos:line="48" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="59">icmp6_pktsize<pos:position pos:line="48" pos:column="72"/></name></expr></argument>)<pos:position pos:line="48" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="74"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="50" pos:column="5">to<pos:position pos:line="50" pos:column="7"/></name><operator pos:line="50" pos:column="7">.<pos:position pos:line="50" pos:column="8"/></operator><name pos:line="50" pos:column="8">getAddrInfo<pos:position pos:line="50" pos:column="19"/></name></name><argument_list pos:line="50" pos:column="19">(<argument><expr><name pos:line="50" pos:column="20">S<pos:position pos:line="50" pos:column="21"/></name></expr></argument>)<pos:position pos:line="50" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="51" pos:column="5">(<pos:position pos:line="51" pos:column="6"/></operator><operator pos:line="51" pos:column="6">(<pos:position pos:line="51" pos:column="7"/></operator><name pos:line="51" pos:column="7">sockaddr_in6<pos:position pos:line="51" pos:column="19"/></name><operator pos:line="51" pos:column="19">*<pos:position pos:line="51" pos:column="20"/></operator><operator pos:line="51" pos:column="20">)<pos:position pos:line="51" pos:column="21"/></operator><name><name pos:line="51" pos:column="21">S<pos:position pos:line="51" pos:column="22"/></name><operator pos:line="51" pos:column="22">-&gt;<pos:position pos:line="51" pos:column="27"/></operator><name pos:line="51" pos:column="24">ai_addr<pos:position pos:line="51" pos:column="31"/></name></name><operator pos:line="51" pos:column="31">)<pos:position pos:line="51" pos:column="32"/></operator><operator pos:line="51" pos:column="32">-&gt;<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="34">sin6_port<pos:position pos:line="51" pos:column="43"/></name> <operator pos:line="51" pos:column="44">=<pos:position pos:line="51" pos:column="45"/></operator> <literal type="number" pos:line="51" pos:column="46">0<pos:position pos:line="51" pos:column="47"/></literal></expr>;<pos:position pos:line="51" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">assert<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><name pos:line="53" pos:column="12">icmp6_pktsize<pos:position pos:line="53" pos:column="25"/></name> <operator pos:line="53" pos:column="26">&lt;=<pos:position pos:line="53" pos:column="31"/></operator> <name pos:line="53" pos:column="29">MAX_PKT6_SZ<pos:position pos:line="53" pos:column="40"/></name></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">debugs<pos:position pos:line="55" pos:column="11"/></name><argument_list pos:line="55" pos:column="11">(<argument><expr><literal type="number" pos:line="55" pos:column="12">42<pos:position pos:line="55" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="16">5<pos:position pos:line="55" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="19">HERE<pos:position pos:line="55" pos:column="23"/></name> <operator pos:line="55" pos:column="24">&lt;&lt;<pos:position pos:line="55" pos:column="32"/></operator> <literal type="string" pos:line="55" pos:column="27">"Send Icmp6 packet to "<pos:position pos:line="55" pos:column="50"/></literal> <operator pos:line="55" pos:column="51">&lt;&lt;<pos:position pos:line="55" pos:column="59"/></operator> <name pos:line="55" pos:column="54">to<pos:position pos:line="55" pos:column="56"/></name> <operator pos:line="55" pos:column="57">&lt;&lt;<pos:position pos:line="55" pos:column="65"/></operator> <literal type="string" pos:line="55" pos:column="60">"."<pos:position pos:line="55" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="65"/></expr_stmt>

    <expr_stmt><expr><name pos:line="57" pos:column="5">x<pos:position pos:line="57" pos:column="6"/></name> <operator pos:line="57" pos:column="7">=<pos:position pos:line="57" pos:column="8"/></operator> <call><name pos:line="57" pos:column="9">sendto<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><name pos:line="57" pos:column="16">icmp_sock<pos:position pos:line="57" pos:column="25"/></name></expr></argument>,
               <argument><expr><operator pos:line="58" pos:column="16">(<pos:position pos:line="58" pos:column="17"/></operator><specifier pos:line="58" pos:column="17">const<pos:position pos:line="58" pos:column="22"/></specifier> <name pos:line="58" pos:column="23">void<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">*<pos:position pos:line="58" pos:column="29"/></operator><operator pos:line="58" pos:column="29">)<pos:position pos:line="58" pos:column="30"/></operator> <name pos:line="58" pos:column="31">pkt<pos:position pos:line="58" pos:column="34"/></name></expr></argument>,
               <argument><expr><name pos:line="59" pos:column="16">icmp6_pktsize<pos:position pos:line="59" pos:column="29"/></name></expr></argument>,
               <argument><expr><literal type="number" pos:line="60" pos:column="16">0<pos:position pos:line="60" pos:column="17"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="61" pos:column="16">S<pos:position pos:line="61" pos:column="17"/></name><operator pos:line="61" pos:column="17">-&gt;<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="19">ai_addr<pos:position pos:line="61" pos:column="26"/></name></name></expr></argument>,
               <argument><expr><name><name pos:line="62" pos:column="16">S<pos:position pos:line="62" pos:column="17"/></name><operator pos:line="62" pos:column="17">-&gt;<pos:position pos:line="62" pos:column="22"/></operator><name pos:line="62" pos:column="19">ai_addrlen<pos:position pos:line="62" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="31"/></expr_stmt>

    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">x<pos:position pos:line="64" pos:column="10"/></name> <operator pos:line="64" pos:column="11">&lt;<pos:position pos:line="64" pos:column="15"/></operator> <literal type="number" pos:line="64" pos:column="13">0<pos:position pos:line="64" pos:column="14"/></literal></expr>)<pos:position pos:line="64" pos:column="15"/></condition><then pos:line="64" pos:column="15"> <block pos:line="64" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">debugs<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><literal type="number" pos:line="65" pos:column="16">42<pos:position pos:line="65" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="20">DBG_IMPORTANT<pos:position pos:line="65" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="35">HERE<pos:position pos:line="65" pos:column="39"/></name> <operator pos:line="65" pos:column="40">&lt;&lt;<pos:position pos:line="65" pos:column="48"/></operator> <literal type="string" pos:line="65" pos:column="43">"Error sending to ICMPv6 packet to "<pos:position pos:line="65" pos:column="79"/></literal> <operator pos:line="65" pos:column="80">&lt;&lt;<pos:position pos:line="65" pos:column="88"/></operator> <name pos:line="65" pos:column="83">to<pos:position pos:line="65" pos:column="85"/></name> <operator pos:line="65" pos:column="86">&lt;&lt;<pos:position pos:line="65" pos:column="94"/></operator> <literal type="string" pos:line="65" pos:column="89">". ERR: "<pos:position pos:line="65" pos:column="98"/></literal> <operator pos:line="65" pos:column="99">&lt;&lt;<pos:position pos:line="65" pos:column="107"/></operator> <call><name pos:line="65" pos:column="102">xstrerror<pos:position pos:line="65" pos:column="111"/></name><argument_list pos:line="65" pos:column="111">()<pos:position pos:line="65" pos:column="113"/></argument_list></call></expr></argument>)<pos:position pos:line="65" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="115"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">debugs<pos:position pos:line="67" pos:column="11"/></name><argument_list pos:line="67" pos:column="11">(<argument><expr><literal type="number" pos:line="67" pos:column="12">42<pos:position pos:line="67" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="67" pos:column="15">9<pos:position pos:line="67" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="18">HERE<pos:position pos:line="67" pos:column="22"/></name> <operator pos:line="67" pos:column="23">&lt;&lt;<pos:position pos:line="67" pos:column="31"/></operator> <literal type="string" pos:line="67" pos:column="26">"x="<pos:position pos:line="67" pos:column="30"/></literal> <operator pos:line="67" pos:column="31">&lt;&lt;<pos:position pos:line="67" pos:column="39"/></operator> <name pos:line="67" pos:column="34">x<pos:position pos:line="67" pos:column="35"/></name></expr></argument>)<pos:position pos:line="67" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="69" pos:column="5">Log<pos:position pos:line="69" pos:column="8"/></name><argument_list pos:line="69" pos:column="8">(<argument><expr><name pos:line="69" pos:column="9">to<pos:position pos:line="69" pos:column="11"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="13">0<pos:position pos:line="69" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="16">NULL<pos:position pos:line="69" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="22">0<pos:position pos:line="69" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="25">0<pos:position pos:line="69" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="70" pos:column="5">Ip<pos:position pos:line="70" pos:column="7"/></name><operator pos:line="70" pos:column="7">::<pos:position pos:line="70" pos:column="9"/></operator><name pos:line="70" pos:column="9">Address<pos:position pos:line="70" pos:column="16"/></name><operator pos:line="70" pos:column="16">::<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="18">FreeAddr<pos:position pos:line="70" pos:column="26"/></name></name><argument_list pos:line="70" pos:column="26">(<argument><expr><name pos:line="70" pos:column="27">S<pos:position pos:line="70" pos:column="28"/></name></expr></argument>)<pos:position pos:line="70" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="30"/></expr_stmt>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
