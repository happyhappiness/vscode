<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1403_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">HttpParser<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">parseRequestFirstLine<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">()<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">second_word<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><operator pos:line="4" pos:column="23">-<pos:position pos:line="4" pos:column="24"/></operator><literal type="number" pos:line="4" pos:column="24">1<pos:position pos:line="4" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt> <comment type="line" pos:line="4" pos:column="27">// track the suspected URI start</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">first_whitespace<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><operator pos:line="5" pos:column="28">-<pos:position pos:line="5" pos:column="29"/></operator><literal type="number" pos:line="5" pos:column="29">1<pos:position pos:line="5" pos:column="30"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="32">last_whitespace<pos:position pos:line="5" pos:column="47"/></name> <init pos:line="5" pos:column="48">= <expr><operator pos:line="5" pos:column="50">-<pos:position pos:line="5" pos:column="51"/></operator><literal type="number" pos:line="5" pos:column="51">1<pos:position pos:line="5" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="53"/></decl_stmt> <comment type="line" pos:line="5" pos:column="54">// track the first and last SP byte</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">line_end<pos:position pos:line="6" pos:column="17"/></name> <init pos:line="6" pos:column="18">= <expr><operator pos:line="6" pos:column="20">-<pos:position pos:line="6" pos:column="21"/></operator><literal type="number" pos:line="6" pos:column="21">1<pos:position pos:line="6" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt> <comment type="line" pos:line="6" pos:column="24">// tracks the last byte BEFORE terminal \r\n or \n sequence</comment>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">74<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">5<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="19">HERE<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">&lt;&lt;<pos:position pos:line="8" pos:column="32"/></operator> <literal type="string" pos:line="8" pos:column="27">"parsing possible request: "<pos:position pos:line="8" pos:column="55"/></literal> <operator pos:line="8" pos:column="56">&lt;&lt;<pos:position pos:line="8" pos:column="64"/></operator> <name pos:line="8" pos:column="59">buf<pos:position pos:line="8" pos:column="62"/></name></expr></argument>)<pos:position pos:line="8" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="64"/></expr_stmt>

    <comment type="line" pos:line="10" pos:column="5">// Single-pass parse: (provided we have the whole line anyways)</comment>

    <expr_stmt><expr><name><name pos:line="12" pos:column="5">req<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">.<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">start<pos:position pos:line="12" pos:column="14"/></name></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <literal type="number" pos:line="12" pos:column="17">0<pos:position pos:line="12" pos:column="18"/></literal></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">Config<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">onoff<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">.<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">relaxed_header_parser<pos:position pos:line="13" pos:column="43"/></name></name></expr>)<pos:position pos:line="13" pos:column="44"/></condition><then pos:line="13" pos:column="44"> <block pos:line="13" pos:column="45">{
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">Config<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">.<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">onoff<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">.<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">relaxed_header_parser<pos:position pos:line="14" pos:column="47"/></name></name> <operator pos:line="14" pos:column="48">&lt;<pos:position pos:line="14" pos:column="52"/></operator> <literal type="number" pos:line="14" pos:column="50">0<pos:position pos:line="14" pos:column="51"/></literal> <operator pos:line="14" pos:column="52">&amp;&amp;<pos:position pos:line="14" pos:column="62"/></operator> <name><name pos:line="14" pos:column="55">buf<pos:position pos:line="14" pos:column="58"/></name><index pos:line="14" pos:column="58">[<expr><name><name pos:line="14" pos:column="59">req<pos:position pos:line="14" pos:column="62"/></name><operator pos:line="14" pos:column="62">.<pos:position pos:line="14" pos:column="63"/></operator><name pos:line="14" pos:column="63">start<pos:position pos:line="14" pos:column="68"/></name></name></expr>]<pos:position pos:line="14" pos:column="69"/></index></name> <operator pos:line="14" pos:column="70">==<pos:position pos:line="14" pos:column="72"/></operator> <literal type="char" pos:line="14" pos:column="73">' '<pos:position pos:line="14" pos:column="76"/></literal></expr>)<pos:position pos:line="14" pos:column="77"/></condition><then pos:line="14" pos:column="77">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="15" pos:column="13">debugs<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="number" pos:line="15" pos:column="20">74<pos:position pos:line="15" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="24">DBG_IMPORTANT<pos:position pos:line="15" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="39">"WARNING: Invalid HTTP Request: "<pos:position pos:line="15" pos:column="72"/></literal> <operator pos:line="15" pos:column="73">&lt;&lt;<pos:position pos:line="15" pos:column="81"/></operator>
                   <literal type="string" pos:line="16" pos:column="20">"Whitespace bytes received ahead of method. "<pos:position pos:line="16" pos:column="65"/></literal> <operator pos:line="16" pos:column="66">&lt;&lt;<pos:position pos:line="16" pos:column="74"/></operator>
                   <literal type="string" pos:line="17" pos:column="20">"Ignored due to relaxed_header_parser."<pos:position pos:line="17" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></expr_stmt></block></then></if>
        <comment type="line" pos:line="18" pos:column="9">// Be tolerant of prefix spaces (other bytes are valid method values)</comment>
        <for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init pos:line="19" pos:column="14">;<pos:position pos:line="19" pos:column="15"/></init> <condition><expr><name><name pos:line="19" pos:column="16">req<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">.<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">start<pos:position pos:line="19" pos:column="25"/></name></name> <operator pos:line="19" pos:column="26">&lt;<pos:position pos:line="19" pos:column="30"/></operator> <name pos:line="19" pos:column="28">bufsiz<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">&amp;&amp;<pos:position pos:line="19" pos:column="45"/></operator> <name><name pos:line="19" pos:column="38">buf<pos:position pos:line="19" pos:column="41"/></name><index pos:line="19" pos:column="41">[<expr><name><name pos:line="19" pos:column="42">req<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">.<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="46">start<pos:position pos:line="19" pos:column="51"/></name></name></expr>]<pos:position pos:line="19" pos:column="52"/></index></name> <operator pos:line="19" pos:column="53">==<pos:position pos:line="19" pos:column="55"/></operator> <literal type="char" pos:line="19" pos:column="56">' '<pos:position pos:line="19" pos:column="59"/></literal></expr>;<pos:position pos:line="19" pos:column="60"/></condition> <incr><expr><operator pos:line="19" pos:column="61">++<pos:position pos:line="19" pos:column="63"/></operator><name><name pos:line="19" pos:column="63">req<pos:position pos:line="19" pos:column="66"/></name><operator pos:line="19" pos:column="66">.<pos:position pos:line="19" pos:column="67"/></operator><name pos:line="19" pos:column="67">start<pos:position pos:line="19" pos:column="72"/></name></name></expr></incr>)<pos:position pos:line="19" pos:column="73"/></control><block type="pseudo"><empty_stmt pos:line="19" pos:column="73">;<pos:position pos:line="19" pos:column="74"/></empty_stmt></block></for>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">req<pos:position pos:line="21" pos:column="8"/></name><operator pos:line="21" pos:column="8">.<pos:position pos:line="21" pos:column="9"/></operator><name pos:line="21" pos:column="9">end<pos:position pos:line="21" pos:column="12"/></name></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <operator pos:line="21" pos:column="15">-<pos:position pos:line="21" pos:column="16"/></operator><literal type="number" pos:line="21" pos:column="16">1<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></expr_stmt>
    <for pos:line="22" pos:column="5">for <control pos:line="22" pos:column="9">(<init><decl><type><name pos:line="22" pos:column="10">int<pos:position pos:line="22" pos:column="13"/></name></type> <name pos:line="22" pos:column="14">i<pos:position pos:line="22" pos:column="15"/></name> <init pos:line="22" pos:column="16">= <expr><literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="20"/></init> <condition><expr><name pos:line="22" pos:column="21">i<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">&lt;<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="25">bufsiz<pos:position pos:line="22" pos:column="31"/></name></expr>;<pos:position pos:line="22" pos:column="32"/></condition> <incr><expr><operator pos:line="22" pos:column="33">++<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">i<pos:position pos:line="22" pos:column="36"/></name></expr></incr>)<pos:position pos:line="22" pos:column="37"/></control> <block pos:line="22" pos:column="38">{
        <comment type="line" pos:line="23" pos:column="9">// track first and last whitespace (SP only)</comment>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">buf<pos:position pos:line="24" pos:column="16"/></name><index pos:line="24" pos:column="16">[<expr><name pos:line="24" pos:column="17">i<pos:position pos:line="24" pos:column="18"/></name></expr>]<pos:position pos:line="24" pos:column="19"/></index></name> <operator pos:line="24" pos:column="20">==<pos:position pos:line="24" pos:column="22"/></operator> <literal type="char" pos:line="24" pos:column="23">' '<pos:position pos:line="24" pos:column="26"/></literal></expr>)<pos:position pos:line="24" pos:column="27"/></condition><then pos:line="24" pos:column="27"> <block pos:line="24" pos:column="28">{
            <expr_stmt><expr><name pos:line="25" pos:column="13">last_whitespace<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">=<pos:position pos:line="25" pos:column="30"/></operator> <name pos:line="25" pos:column="31">i<pos:position pos:line="25" pos:column="32"/></name></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
            <if pos:line="26" pos:column="13">if <condition pos:line="26" pos:column="16">(<expr><name pos:line="26" pos:column="17">first_whitespace<pos:position pos:line="26" pos:column="33"/></name> <operator pos:line="26" pos:column="34">&lt;<pos:position pos:line="26" pos:column="38"/></operator> <name><name pos:line="26" pos:column="36">req<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">.<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">start<pos:position pos:line="26" pos:column="45"/></name></name></expr>)<pos:position pos:line="26" pos:column="46"/></condition><then pos:line="26" pos:column="46">
                <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="17">first_whitespace<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">=<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">i<pos:position pos:line="27" pos:column="37"/></name></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt></block></then></if>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="30" pos:column="9">// track next non-SP/non-HT byte after first_whitespace</comment>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">second_word<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">&lt;<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="27">first_whitespace<pos:position pos:line="31" pos:column="43"/></name> <operator pos:line="31" pos:column="44">&amp;&amp;<pos:position pos:line="31" pos:column="54"/></operator> <name><name pos:line="31" pos:column="47">buf<pos:position pos:line="31" pos:column="50"/></name><index pos:line="31" pos:column="50">[<expr><name pos:line="31" pos:column="51">i<pos:position pos:line="31" pos:column="52"/></name></expr>]<pos:position pos:line="31" pos:column="53"/></index></name> <operator pos:line="31" pos:column="54">!=<pos:position pos:line="31" pos:column="56"/></operator> <literal type="char" pos:line="31" pos:column="57">' '<pos:position pos:line="31" pos:column="60"/></literal> <operator pos:line="31" pos:column="61">&amp;&amp;<pos:position pos:line="31" pos:column="71"/></operator> <name><name pos:line="31" pos:column="64">buf<pos:position pos:line="31" pos:column="67"/></name><index pos:line="31" pos:column="67">[<expr><name pos:line="31" pos:column="68">i<pos:position pos:line="31" pos:column="69"/></name></expr>]<pos:position pos:line="31" pos:column="70"/></index></name> <operator pos:line="31" pos:column="71">!=<pos:position pos:line="31" pos:column="73"/></operator> <literal type="char" pos:line="31" pos:column="74">'\t'<pos:position pos:line="31" pos:column="78"/></literal></expr>)<pos:position pos:line="31" pos:column="79"/></condition><then pos:line="31" pos:column="79"> <block pos:line="31" pos:column="80">{
            <expr_stmt><expr><name pos:line="32" pos:column="13">second_word<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <name pos:line="32" pos:column="27">i<pos:position pos:line="32" pos:column="28"/></name></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="35" pos:column="9">// locate line terminator</comment>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name><name pos:line="36" pos:column="13">buf<pos:position pos:line="36" pos:column="16"/></name><index pos:line="36" pos:column="16">[<expr><name pos:line="36" pos:column="17">i<pos:position pos:line="36" pos:column="18"/></name></expr>]<pos:position pos:line="36" pos:column="19"/></index></name> <operator pos:line="36" pos:column="20">==<pos:position pos:line="36" pos:column="22"/></operator> <literal type="char" pos:line="36" pos:column="23">'\n'<pos:position pos:line="36" pos:column="27"/></literal></expr>)<pos:position pos:line="36" pos:column="28"/></condition><then pos:line="36" pos:column="28"> <block pos:line="36" pos:column="29">{
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">req<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">.<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">end<pos:position pos:line="37" pos:column="20"/></name></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <name pos:line="37" pos:column="23">i<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="38" pos:column="13">line_end<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">=<pos:position pos:line="38" pos:column="23"/></operator> <name pos:line="38" pos:column="24">i<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">-<pos:position pos:line="38" pos:column="27"/></operator> <literal type="number" pos:line="38" pos:column="28">1<pos:position pos:line="38" pos:column="29"/></literal></expr>;<pos:position pos:line="38" pos:column="30"/></expr_stmt>
            <break pos:line="39" pos:column="13">break;<pos:position pos:line="39" pos:column="19"/></break>
        }<pos:position pos:line="40" pos:column="10"/></block></then></if>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">i<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">&lt;<pos:position pos:line="41" pos:column="19"/></operator> <name pos:line="41" pos:column="17">bufsiz<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">-<pos:position pos:line="41" pos:column="25"/></operator> <literal type="number" pos:line="41" pos:column="26">1<pos:position pos:line="41" pos:column="27"/></literal> <operator pos:line="41" pos:column="28">&amp;&amp;<pos:position pos:line="41" pos:column="38"/></operator> <name><name pos:line="41" pos:column="31">buf<pos:position pos:line="41" pos:column="34"/></name><index pos:line="41" pos:column="34">[<expr><name pos:line="41" pos:column="35">i<pos:position pos:line="41" pos:column="36"/></name></expr>]<pos:position pos:line="41" pos:column="37"/></index></name> <operator pos:line="41" pos:column="38">==<pos:position pos:line="41" pos:column="40"/></operator> <literal type="char" pos:line="41" pos:column="41">'\r'<pos:position pos:line="41" pos:column="45"/></literal></expr>)<pos:position pos:line="41" pos:column="46"/></condition><then pos:line="41" pos:column="46"> <block pos:line="41" pos:column="47">{
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><name><name pos:line="42" pos:column="17">Config<pos:position pos:line="42" pos:column="23"/></name><operator pos:line="42" pos:column="23">.<pos:position pos:line="42" pos:column="24"/></operator><name pos:line="42" pos:column="24">onoff<pos:position pos:line="42" pos:column="29"/></name><operator pos:line="42" pos:column="29">.<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">relaxed_header_parser<pos:position pos:line="42" pos:column="51"/></name></name></expr>)<pos:position pos:line="42" pos:column="52"/></condition><then pos:line="42" pos:column="52"> <block pos:line="42" pos:column="53">{
                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name><name pos:line="43" pos:column="21">Config<pos:position pos:line="43" pos:column="27"/></name><operator pos:line="43" pos:column="27">.<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="28">onoff<pos:position pos:line="43" pos:column="33"/></name><operator pos:line="43" pos:column="33">.<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="34">relaxed_header_parser<pos:position pos:line="43" pos:column="55"/></name></name> <operator pos:line="43" pos:column="56">&lt;<pos:position pos:line="43" pos:column="60"/></operator> <literal type="number" pos:line="43" pos:column="58">0<pos:position pos:line="43" pos:column="59"/></literal> <operator pos:line="43" pos:column="60">&amp;&amp;<pos:position pos:line="43" pos:column="70"/></operator> <name><name pos:line="43" pos:column="63">buf<pos:position pos:line="43" pos:column="66"/></name><index pos:line="43" pos:column="66">[<expr><name pos:line="43" pos:column="67">i<pos:position pos:line="43" pos:column="68"/></name> <operator pos:line="43" pos:column="69">+<pos:position pos:line="43" pos:column="70"/></operator> <literal type="number" pos:line="43" pos:column="71">1<pos:position pos:line="43" pos:column="72"/></literal></expr>]<pos:position pos:line="43" pos:column="73"/></index></name> <operator pos:line="43" pos:column="74">==<pos:position pos:line="43" pos:column="76"/></operator> <literal type="char" pos:line="43" pos:column="77">'\r'<pos:position pos:line="43" pos:column="81"/></literal></expr>)<pos:position pos:line="43" pos:column="82"/></condition><then pos:line="43" pos:column="82">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="21">debugs<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><literal type="number" pos:line="44" pos:column="28">74<pos:position pos:line="44" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="32">DBG_IMPORTANT<pos:position pos:line="44" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="47">"WARNING: Invalid HTTP Request: "<pos:position pos:line="44" pos:column="80"/></literal> <operator pos:line="44" pos:column="81">&lt;&lt;<pos:position pos:line="44" pos:column="89"/></operator>
                           <literal type="string" pos:line="45" pos:column="28">"Series of carriage-return bytes received prior to line terminator. "<pos:position pos:line="45" pos:column="97"/></literal> <operator pos:line="45" pos:column="98">&lt;&lt;<pos:position pos:line="45" pos:column="106"/></operator>
                           <literal type="string" pos:line="46" pos:column="28">"Ignored due to relaxed_header_parser."<pos:position pos:line="46" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="69"/></expr_stmt></block></then></if>

                <comment type="line" pos:line="48" pos:column="17">// Be tolerant of invalid multiple \r prior to terminal \n</comment>
                <if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name><name pos:line="49" pos:column="21">buf<pos:position pos:line="49" pos:column="24"/></name><index pos:line="49" pos:column="24">[<expr><name pos:line="49" pos:column="25">i<pos:position pos:line="49" pos:column="26"/></name> <operator pos:line="49" pos:column="27">+<pos:position pos:line="49" pos:column="28"/></operator> <literal type="number" pos:line="49" pos:column="29">1<pos:position pos:line="49" pos:column="30"/></literal></expr>]<pos:position pos:line="49" pos:column="31"/></index></name> <operator pos:line="49" pos:column="32">==<pos:position pos:line="49" pos:column="34"/></operator> <literal type="char" pos:line="49" pos:column="35">'\n'<pos:position pos:line="49" pos:column="39"/></literal> <operator pos:line="49" pos:column="40">||<pos:position pos:line="49" pos:column="42"/></operator> <name><name pos:line="49" pos:column="43">buf<pos:position pos:line="49" pos:column="46"/></name><index pos:line="49" pos:column="46">[<expr><name pos:line="49" pos:column="47">i<pos:position pos:line="49" pos:column="48"/></name> <operator pos:line="49" pos:column="49">+<pos:position pos:line="49" pos:column="50"/></operator> <literal type="number" pos:line="49" pos:column="51">1<pos:position pos:line="49" pos:column="52"/></literal></expr>]<pos:position pos:line="49" pos:column="53"/></index></name> <operator pos:line="49" pos:column="54">==<pos:position pos:line="49" pos:column="56"/></operator> <literal type="char" pos:line="49" pos:column="57">'\r'<pos:position pos:line="49" pos:column="61"/></literal></expr>)<pos:position pos:line="49" pos:column="62"/></condition><then pos:line="49" pos:column="62">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="21">line_end<pos:position pos:line="50" pos:column="29"/></name> <operator pos:line="50" pos:column="30">=<pos:position pos:line="50" pos:column="31"/></operator> <name pos:line="50" pos:column="32">i<pos:position pos:line="50" pos:column="33"/></name> <operator pos:line="50" pos:column="34">-<pos:position pos:line="50" pos:column="35"/></operator> <literal type="number" pos:line="50" pos:column="36">1<pos:position pos:line="50" pos:column="37"/></literal></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt></block></then></if>
                <while pos:line="51" pos:column="17">while <condition pos:line="51" pos:column="23">(<expr><name pos:line="51" pos:column="24">i<pos:position pos:line="51" pos:column="25"/></name> <operator pos:line="51" pos:column="26">&lt;<pos:position pos:line="51" pos:column="30"/></operator> <name pos:line="51" pos:column="28">bufsiz<pos:position pos:line="51" pos:column="34"/></name> <operator pos:line="51" pos:column="35">-<pos:position pos:line="51" pos:column="36"/></operator> <literal type="number" pos:line="51" pos:column="37">1<pos:position pos:line="51" pos:column="38"/></literal> <operator pos:line="51" pos:column="39">&amp;&amp;<pos:position pos:line="51" pos:column="49"/></operator> <name><name pos:line="51" pos:column="42">buf<pos:position pos:line="51" pos:column="45"/></name><index pos:line="51" pos:column="45">[<expr><name pos:line="51" pos:column="46">i<pos:position pos:line="51" pos:column="47"/></name> <operator pos:line="51" pos:column="48">+<pos:position pos:line="51" pos:column="49"/></operator> <literal type="number" pos:line="51" pos:column="50">1<pos:position pos:line="51" pos:column="51"/></literal></expr>]<pos:position pos:line="51" pos:column="52"/></index></name> <operator pos:line="51" pos:column="53">==<pos:position pos:line="51" pos:column="55"/></operator> <literal type="char" pos:line="51" pos:column="56">'\r'<pos:position pos:line="51" pos:column="60"/></literal></expr>)<pos:position pos:line="51" pos:column="61"/></condition>
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="52" pos:column="21">++<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="23">i<pos:position pos:line="52" pos:column="24"/></name></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt></block></while>

                <if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><name><name pos:line="54" pos:column="21">buf<pos:position pos:line="54" pos:column="24"/></name><index pos:line="54" pos:column="24">[<expr><name pos:line="54" pos:column="25">i<pos:position pos:line="54" pos:column="26"/></name> <operator pos:line="54" pos:column="27">+<pos:position pos:line="54" pos:column="28"/></operator> <literal type="number" pos:line="54" pos:column="29">1<pos:position pos:line="54" pos:column="30"/></literal></expr>]<pos:position pos:line="54" pos:column="31"/></index></name> <operator pos:line="54" pos:column="32">==<pos:position pos:line="54" pos:column="34"/></operator> <literal type="char" pos:line="54" pos:column="35">'\n'<pos:position pos:line="54" pos:column="39"/></literal></expr>)<pos:position pos:line="54" pos:column="40"/></condition><then pos:line="54" pos:column="40"> <block pos:line="54" pos:column="41">{
                    <expr_stmt><expr><name><name pos:line="55" pos:column="21">req<pos:position pos:line="55" pos:column="24"/></name><operator pos:line="55" pos:column="24">.<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="25">end<pos:position pos:line="55" pos:column="28"/></name></name> <operator pos:line="55" pos:column="29">=<pos:position pos:line="55" pos:column="30"/></operator> <name pos:line="55" pos:column="31">i<pos:position pos:line="55" pos:column="32"/></name> <operator pos:line="55" pos:column="33">+<pos:position pos:line="55" pos:column="34"/></operator> <literal type="number" pos:line="55" pos:column="35">1<pos:position pos:line="55" pos:column="36"/></literal></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>
                    <break pos:line="56" pos:column="21">break;<pos:position pos:line="56" pos:column="27"/></break>
                }<pos:position pos:line="57" pos:column="18"/></block></then></if>
            }<pos:position pos:line="58" pos:column="14"/></block></then> <else pos:line="58" pos:column="15">else <block pos:line="58" pos:column="20">{
                <if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name><name pos:line="59" pos:column="21">buf<pos:position pos:line="59" pos:column="24"/></name><index pos:line="59" pos:column="24">[<expr><name pos:line="59" pos:column="25">i<pos:position pos:line="59" pos:column="26"/></name> <operator pos:line="59" pos:column="27">+<pos:position pos:line="59" pos:column="28"/></operator> <literal type="number" pos:line="59" pos:column="29">1<pos:position pos:line="59" pos:column="30"/></literal></expr>]<pos:position pos:line="59" pos:column="31"/></index></name> <operator pos:line="59" pos:column="32">==<pos:position pos:line="59" pos:column="34"/></operator> <literal type="char" pos:line="59" pos:column="35">'\n'<pos:position pos:line="59" pos:column="39"/></literal></expr>)<pos:position pos:line="59" pos:column="40"/></condition><then pos:line="59" pos:column="40"> <block pos:line="59" pos:column="41">{
                    <expr_stmt><expr><name><name pos:line="60" pos:column="21">req<pos:position pos:line="60" pos:column="24"/></name><operator pos:line="60" pos:column="24">.<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="25">end<pos:position pos:line="60" pos:column="28"/></name></name> <operator pos:line="60" pos:column="29">=<pos:position pos:line="60" pos:column="30"/></operator> <name pos:line="60" pos:column="31">i<pos:position pos:line="60" pos:column="32"/></name> <operator pos:line="60" pos:column="33">+<pos:position pos:line="60" pos:column="34"/></operator> <literal type="number" pos:line="60" pos:column="35">1<pos:position pos:line="60" pos:column="36"/></literal></expr>;<pos:position pos:line="60" pos:column="37"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="61" pos:column="21">line_end<pos:position pos:line="61" pos:column="29"/></name> <operator pos:line="61" pos:column="30">=<pos:position pos:line="61" pos:column="31"/></operator> <name pos:line="61" pos:column="32">i<pos:position pos:line="61" pos:column="33"/></name> <operator pos:line="61" pos:column="34">-<pos:position pos:line="61" pos:column="35"/></operator> <literal type="number" pos:line="61" pos:column="36">1<pos:position pos:line="61" pos:column="37"/></literal></expr>;<pos:position pos:line="61" pos:column="38"/></expr_stmt>
                    <break pos:line="62" pos:column="21">break;<pos:position pos:line="62" pos:column="27"/></break>
                }<pos:position pos:line="63" pos:column="18"/></block></then></if>
            }<pos:position pos:line="64" pos:column="14"/></block></else></if>

            <comment type="line" pos:line="66" pos:column="13">// RFC 2616 section 5.1</comment>
            <comment type="line" pos:line="67" pos:column="13">// "No CR or LF is allowed except in the final CRLF sequence"</comment>
            <expr_stmt><expr><name pos:line="68" pos:column="13">request_parse_status<pos:position pos:line="68" pos:column="33"/></name> <operator pos:line="68" pos:column="34">=<pos:position pos:line="68" pos:column="35"/></operator> <name><name pos:line="68" pos:column="36">Http<pos:position pos:line="68" pos:column="40"/></name><operator pos:line="68" pos:column="40">::<pos:position pos:line="68" pos:column="42"/></operator><name pos:line="68" pos:column="42">scBadRequest<pos:position pos:line="68" pos:column="54"/></name></name></expr>;<pos:position pos:line="68" pos:column="55"/></expr_stmt>
            <return pos:line="69" pos:column="13">return <expr><operator pos:line="69" pos:column="20">-<pos:position pos:line="69" pos:column="21"/></operator><literal type="number" pos:line="69" pos:column="21">1<pos:position pos:line="69" pos:column="22"/></literal></expr>;<pos:position pos:line="69" pos:column="23"/></return>
        }<pos:position pos:line="70" pos:column="10"/></block></then></if>
    }<pos:position pos:line="71" pos:column="6"/></block></for>
    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name><name pos:line="72" pos:column="9">req<pos:position pos:line="72" pos:column="12"/></name><operator pos:line="72" pos:column="12">.<pos:position pos:line="72" pos:column="13"/></operator><name pos:line="72" pos:column="13">end<pos:position pos:line="72" pos:column="16"/></name></name> <operator pos:line="72" pos:column="17">==<pos:position pos:line="72" pos:column="19"/></operator> <operator pos:line="72" pos:column="20">-<pos:position pos:line="72" pos:column="21"/></operator><literal type="number" pos:line="72" pos:column="21">1<pos:position pos:line="72" pos:column="22"/></literal></expr>)<pos:position pos:line="72" pos:column="23"/></condition><then pos:line="72" pos:column="23"> <block pos:line="72" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">debugs<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><literal type="number" pos:line="73" pos:column="16">74<pos:position pos:line="73" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="20">5<pos:position pos:line="73" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="23">"Parser: retval 0: from "<pos:position pos:line="73" pos:column="48"/></literal> <operator pos:line="73" pos:column="49">&lt;&lt;<pos:position pos:line="73" pos:column="57"/></operator> <name><name pos:line="73" pos:column="52">req<pos:position pos:line="73" pos:column="55"/></name><operator pos:line="73" pos:column="55">.<pos:position pos:line="73" pos:column="56"/></operator><name pos:line="73" pos:column="56">start<pos:position pos:line="73" pos:column="61"/></name></name> <operator pos:line="73" pos:column="62">&lt;&lt;<pos:position pos:line="73" pos:column="70"/></operator>
               <literal type="string" pos:line="74" pos:column="16">"-&gt;"<pos:position pos:line="74" pos:column="23"/></literal> <operator pos:line="74" pos:column="21">&lt;&lt;<pos:position pos:line="74" pos:column="29"/></operator> <name><name pos:line="74" pos:column="24">req<pos:position pos:line="74" pos:column="27"/></name><operator pos:line="74" pos:column="27">.<pos:position pos:line="74" pos:column="28"/></operator><name pos:line="74" pos:column="28">end<pos:position pos:line="74" pos:column="31"/></name></name> <operator pos:line="74" pos:column="32">&lt;&lt;<pos:position pos:line="74" pos:column="40"/></operator> <literal type="string" pos:line="74" pos:column="35">": needs more data to complete first line."<pos:position pos:line="74" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="80"/></expr_stmt>
        <return pos:line="75" pos:column="9">return <expr><literal type="number" pos:line="75" pos:column="16">0<pos:position pos:line="75" pos:column="17"/></literal></expr>;<pos:position pos:line="75" pos:column="18"/></return>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="78" pos:column="5">// NP: we have now seen EOL, more-data (0) cannot occur.</comment>
    <comment type="line" pos:line="79" pos:column="5">//     From here on any failure is -1, success is 1</comment>

    <comment type="line" pos:line="81" pos:column="5">// Input Validation:</comment>

    <comment type="line" pos:line="83" pos:column="5">// Process what we now know about the line structure into field offsets</comment>
    <comment type="line" pos:line="84" pos:column="5">// generating HTTP status for any aborts as we go.</comment>

    <comment type="line" pos:line="86" pos:column="5">// First non-whitespace = beginning of method</comment>
    <if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><name><name pos:line="87" pos:column="9">req<pos:position pos:line="87" pos:column="12"/></name><operator pos:line="87" pos:column="12">.<pos:position pos:line="87" pos:column="13"/></operator><name pos:line="87" pos:column="13">start<pos:position pos:line="87" pos:column="18"/></name></name> <operator pos:line="87" pos:column="19">&gt;<pos:position pos:line="87" pos:column="23"/></operator> <name pos:line="87" pos:column="21">line_end<pos:position pos:line="87" pos:column="29"/></name></expr>)<pos:position pos:line="87" pos:column="30"/></condition><then pos:line="87" pos:column="30"> <block pos:line="87" pos:column="31">{
        <expr_stmt><expr><name pos:line="88" pos:column="9">request_parse_status<pos:position pos:line="88" pos:column="29"/></name> <operator pos:line="88" pos:column="30">=<pos:position pos:line="88" pos:column="31"/></operator> <name><name pos:line="88" pos:column="32">Http<pos:position pos:line="88" pos:column="36"/></name><operator pos:line="88" pos:column="36">::<pos:position pos:line="88" pos:column="38"/></operator><name pos:line="88" pos:column="38">scBadRequest<pos:position pos:line="88" pos:column="50"/></name></name></expr>;<pos:position pos:line="88" pos:column="51"/></expr_stmt>
        <return pos:line="89" pos:column="9">return <expr><operator pos:line="89" pos:column="16">-<pos:position pos:line="89" pos:column="17"/></operator><literal type="number" pos:line="89" pos:column="17">1<pos:position pos:line="89" pos:column="18"/></literal></expr>;<pos:position pos:line="89" pos:column="19"/></return>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">req<pos:position pos:line="91" pos:column="8"/></name><operator pos:line="91" pos:column="8">.<pos:position pos:line="91" pos:column="9"/></operator><name pos:line="91" pos:column="9">m_start<pos:position pos:line="91" pos:column="16"/></name></name> <operator pos:line="91" pos:column="17">=<pos:position pos:line="91" pos:column="18"/></operator> <name><name pos:line="91" pos:column="19">req<pos:position pos:line="91" pos:column="22"/></name><operator pos:line="91" pos:column="22">.<pos:position pos:line="91" pos:column="23"/></operator><name pos:line="91" pos:column="23">start<pos:position pos:line="91" pos:column="28"/></name></name></expr>;<pos:position pos:line="91" pos:column="29"/></expr_stmt>

    <comment type="line" pos:line="93" pos:column="5">// First whitespace = end of method</comment>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><name pos:line="94" pos:column="9">first_whitespace<pos:position pos:line="94" pos:column="25"/></name> <operator pos:line="94" pos:column="26">&gt;<pos:position pos:line="94" pos:column="30"/></operator> <name pos:line="94" pos:column="28">line_end<pos:position pos:line="94" pos:column="36"/></name> <operator pos:line="94" pos:column="37">||<pos:position pos:line="94" pos:column="39"/></operator> <name pos:line="94" pos:column="40">first_whitespace<pos:position pos:line="94" pos:column="56"/></name> <operator pos:line="94" pos:column="57">&lt;<pos:position pos:line="94" pos:column="61"/></operator> <name><name pos:line="94" pos:column="59">req<pos:position pos:line="94" pos:column="62"/></name><operator pos:line="94" pos:column="62">.<pos:position pos:line="94" pos:column="63"/></operator><name pos:line="94" pos:column="63">start<pos:position pos:line="94" pos:column="68"/></name></name></expr>)<pos:position pos:line="94" pos:column="69"/></condition><then pos:line="94" pos:column="69"> <block pos:line="94" pos:column="70">{
        <expr_stmt><expr><name pos:line="95" pos:column="9">request_parse_status<pos:position pos:line="95" pos:column="29"/></name> <operator pos:line="95" pos:column="30">=<pos:position pos:line="95" pos:column="31"/></operator> <name><name pos:line="95" pos:column="32">Http<pos:position pos:line="95" pos:column="36"/></name><operator pos:line="95" pos:column="36">::<pos:position pos:line="95" pos:column="38"/></operator><name pos:line="95" pos:column="38">scBadRequest<pos:position pos:line="95" pos:column="50"/></name></name></expr>;<pos:position pos:line="95" pos:column="51"/></expr_stmt> <comment type="line" pos:line="95" pos:column="52">// no method</comment>
        <return pos:line="96" pos:column="9">return <expr><operator pos:line="96" pos:column="16">-<pos:position pos:line="96" pos:column="17"/></operator><literal type="number" pos:line="96" pos:column="17">1<pos:position pos:line="96" pos:column="18"/></literal></expr>;<pos:position pos:line="96" pos:column="19"/></return>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="98" pos:column="5">req<pos:position pos:line="98" pos:column="8"/></name><operator pos:line="98" pos:column="8">.<pos:position pos:line="98" pos:column="9"/></operator><name pos:line="98" pos:column="9">m_end<pos:position pos:line="98" pos:column="14"/></name></name> <operator pos:line="98" pos:column="15">=<pos:position pos:line="98" pos:column="16"/></operator> <name pos:line="98" pos:column="17">first_whitespace<pos:position pos:line="98" pos:column="33"/></name> <operator pos:line="98" pos:column="34">-<pos:position pos:line="98" pos:column="35"/></operator> <literal type="number" pos:line="98" pos:column="36">1<pos:position pos:line="98" pos:column="37"/></literal></expr>;<pos:position pos:line="98" pos:column="38"/></expr_stmt>
    <if pos:line="99" pos:column="5">if <condition pos:line="99" pos:column="8">(<expr><name><name pos:line="99" pos:column="9">req<pos:position pos:line="99" pos:column="12"/></name><operator pos:line="99" pos:column="12">.<pos:position pos:line="99" pos:column="13"/></operator><name pos:line="99" pos:column="13">m_end<pos:position pos:line="99" pos:column="18"/></name></name> <operator pos:line="99" pos:column="19">&lt;<pos:position pos:line="99" pos:column="23"/></operator> <name><name pos:line="99" pos:column="21">req<pos:position pos:line="99" pos:column="24"/></name><operator pos:line="99" pos:column="24">.<pos:position pos:line="99" pos:column="25"/></operator><name pos:line="99" pos:column="25">m_start<pos:position pos:line="99" pos:column="32"/></name></name></expr>)<pos:position pos:line="99" pos:column="33"/></condition><then pos:line="99" pos:column="33"> <block pos:line="99" pos:column="34">{
        <expr_stmt><expr><name pos:line="100" pos:column="9">request_parse_status<pos:position pos:line="100" pos:column="29"/></name> <operator pos:line="100" pos:column="30">=<pos:position pos:line="100" pos:column="31"/></operator> <name><name pos:line="100" pos:column="32">Http<pos:position pos:line="100" pos:column="36"/></name><operator pos:line="100" pos:column="36">::<pos:position pos:line="100" pos:column="38"/></operator><name pos:line="100" pos:column="38">scBadRequest<pos:position pos:line="100" pos:column="50"/></name></name></expr>;<pos:position pos:line="100" pos:column="51"/></expr_stmt> <comment type="line" pos:line="100" pos:column="52">// missing URI?</comment>
        <return pos:line="101" pos:column="9">return <expr><operator pos:line="101" pos:column="16">-<pos:position pos:line="101" pos:column="17"/></operator><literal type="number" pos:line="101" pos:column="17">1<pos:position pos:line="101" pos:column="18"/></literal></expr>;<pos:position pos:line="101" pos:column="19"/></return>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="104" pos:column="5">// First non-whitespace after first SP = beginning of URL+Version</comment>
    <if pos:line="105" pos:column="5">if <condition pos:line="105" pos:column="8">(<expr><name pos:line="105" pos:column="9">second_word<pos:position pos:line="105" pos:column="20"/></name> <operator pos:line="105" pos:column="21">&gt;<pos:position pos:line="105" pos:column="25"/></operator> <name pos:line="105" pos:column="23">line_end<pos:position pos:line="105" pos:column="31"/></name> <operator pos:line="105" pos:column="32">||<pos:position pos:line="105" pos:column="34"/></operator> <name pos:line="105" pos:column="35">second_word<pos:position pos:line="105" pos:column="46"/></name> <operator pos:line="105" pos:column="47">&lt;<pos:position pos:line="105" pos:column="51"/></operator> <name><name pos:line="105" pos:column="49">req<pos:position pos:line="105" pos:column="52"/></name><operator pos:line="105" pos:column="52">.<pos:position pos:line="105" pos:column="53"/></operator><name pos:line="105" pos:column="53">start<pos:position pos:line="105" pos:column="58"/></name></name></expr>)<pos:position pos:line="105" pos:column="59"/></condition><then pos:line="105" pos:column="59"> <block pos:line="105" pos:column="60">{
        <expr_stmt><expr><name pos:line="106" pos:column="9">request_parse_status<pos:position pos:line="106" pos:column="29"/></name> <operator pos:line="106" pos:column="30">=<pos:position pos:line="106" pos:column="31"/></operator> <name><name pos:line="106" pos:column="32">Http<pos:position pos:line="106" pos:column="36"/></name><operator pos:line="106" pos:column="36">::<pos:position pos:line="106" pos:column="38"/></operator><name pos:line="106" pos:column="38">scBadRequest<pos:position pos:line="106" pos:column="50"/></name></name></expr>;<pos:position pos:line="106" pos:column="51"/></expr_stmt> <comment type="line" pos:line="106" pos:column="52">// missing URI</comment>
        <return pos:line="107" pos:column="9">return <expr><operator pos:line="107" pos:column="16">-<pos:position pos:line="107" pos:column="17"/></operator><literal type="number" pos:line="107" pos:column="17">1<pos:position pos:line="107" pos:column="18"/></literal></expr>;<pos:position pos:line="107" pos:column="19"/></return>
    }<pos:position pos:line="108" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="109" pos:column="5">req<pos:position pos:line="109" pos:column="8"/></name><operator pos:line="109" pos:column="8">.<pos:position pos:line="109" pos:column="9"/></operator><name pos:line="109" pos:column="9">u_start<pos:position pos:line="109" pos:column="16"/></name></name> <operator pos:line="109" pos:column="17">=<pos:position pos:line="109" pos:column="18"/></operator> <name pos:line="109" pos:column="19">second_word<pos:position pos:line="109" pos:column="30"/></name></expr>;<pos:position pos:line="109" pos:column="31"/></expr_stmt>

    <comment type="line" pos:line="111" pos:column="5">// RFC 1945: SP and version following URI are optional, marking version 0.9</comment>
    <comment type="line" pos:line="112" pos:column="5">// we identify this by the last whitespace being earlier than URI start</comment>
    <if pos:line="113" pos:column="5">if <condition pos:line="113" pos:column="8">(<expr><name pos:line="113" pos:column="9">last_whitespace<pos:position pos:line="113" pos:column="24"/></name> <operator pos:line="113" pos:column="25">&lt;<pos:position pos:line="113" pos:column="29"/></operator> <name pos:line="113" pos:column="27">second_word<pos:position pos:line="113" pos:column="38"/></name> <operator pos:line="113" pos:column="39">&amp;&amp;<pos:position pos:line="113" pos:column="49"/></operator> <name pos:line="113" pos:column="42">last_whitespace<pos:position pos:line="113" pos:column="57"/></name> <operator pos:line="113" pos:column="58">&gt;=<pos:position pos:line="113" pos:column="63"/></operator> <name><name pos:line="113" pos:column="61">req<pos:position pos:line="113" pos:column="64"/></name><operator pos:line="113" pos:column="64">.<pos:position pos:line="113" pos:column="65"/></operator><name pos:line="113" pos:column="65">start<pos:position pos:line="113" pos:column="70"/></name></name></expr>)<pos:position pos:line="113" pos:column="71"/></condition><then pos:line="113" pos:column="71"> <block pos:line="113" pos:column="72">{
        <expr_stmt><expr><name><name pos:line="114" pos:column="9">req<pos:position pos:line="114" pos:column="12"/></name><operator pos:line="114" pos:column="12">.<pos:position pos:line="114" pos:column="13"/></operator><name pos:line="114" pos:column="13">v_maj<pos:position pos:line="114" pos:column="18"/></name></name> <operator pos:line="114" pos:column="19">=<pos:position pos:line="114" pos:column="20"/></operator> <literal type="number" pos:line="114" pos:column="21">0<pos:position pos:line="114" pos:column="22"/></literal></expr>;<pos:position pos:line="114" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="115" pos:column="9">req<pos:position pos:line="115" pos:column="12"/></name><operator pos:line="115" pos:column="12">.<pos:position pos:line="115" pos:column="13"/></operator><name pos:line="115" pos:column="13">v_min<pos:position pos:line="115" pos:column="18"/></name></name> <operator pos:line="115" pos:column="19">=<pos:position pos:line="115" pos:column="20"/></operator> <literal type="number" pos:line="115" pos:column="21">9<pos:position pos:line="115" pos:column="22"/></literal></expr>;<pos:position pos:line="115" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="116" pos:column="9">req<pos:position pos:line="116" pos:column="12"/></name><operator pos:line="116" pos:column="12">.<pos:position pos:line="116" pos:column="13"/></operator><name pos:line="116" pos:column="13">u_end<pos:position pos:line="116" pos:column="18"/></name></name> <operator pos:line="116" pos:column="19">=<pos:position pos:line="116" pos:column="20"/></operator> <name pos:line="116" pos:column="21">line_end<pos:position pos:line="116" pos:column="29"/></name></expr>;<pos:position pos:line="116" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="117" pos:column="9">request_parse_status<pos:position pos:line="117" pos:column="29"/></name> <operator pos:line="117" pos:column="30">=<pos:position pos:line="117" pos:column="31"/></operator> <name><name pos:line="117" pos:column="32">Http<pos:position pos:line="117" pos:column="36"/></name><operator pos:line="117" pos:column="36">::<pos:position pos:line="117" pos:column="38"/></operator><name pos:line="117" pos:column="38">scOkay<pos:position pos:line="117" pos:column="44"/></name></name></expr>;<pos:position pos:line="117" pos:column="45"/></expr_stmt> <comment type="line" pos:line="117" pos:column="46">// HTTP/0.9</comment>
        <return pos:line="118" pos:column="9">return <expr><literal type="number" pos:line="118" pos:column="16">1<pos:position pos:line="118" pos:column="17"/></literal></expr>;<pos:position pos:line="118" pos:column="18"/></return>
    }<pos:position pos:line="119" pos:column="6"/></block></then> <else pos:line="119" pos:column="7">else <block pos:line="119" pos:column="12">{
        <comment type="line" pos:line="120" pos:column="9">// otherwise last whitespace is somewhere after end of URI.</comment>
        <expr_stmt><expr><name><name pos:line="121" pos:column="9">req<pos:position pos:line="121" pos:column="12"/></name><operator pos:line="121" pos:column="12">.<pos:position pos:line="121" pos:column="13"/></operator><name pos:line="121" pos:column="13">u_end<pos:position pos:line="121" pos:column="18"/></name></name> <operator pos:line="121" pos:column="19">=<pos:position pos:line="121" pos:column="20"/></operator> <name pos:line="121" pos:column="21">last_whitespace<pos:position pos:line="121" pos:column="36"/></name></expr>;<pos:position pos:line="121" pos:column="37"/></expr_stmt>
        <comment type="line" pos:line="122" pos:column="9">// crop any trailing whitespace in the area we think of as URI</comment>
        <for pos:line="123" pos:column="9">for <control pos:line="123" pos:column="13">(<init pos:line="123" pos:column="14">;<pos:position pos:line="123" pos:column="15"/></init> <condition><expr><name><name pos:line="123" pos:column="16">req<pos:position pos:line="123" pos:column="19"/></name><operator pos:line="123" pos:column="19">.<pos:position pos:line="123" pos:column="20"/></operator><name pos:line="123" pos:column="20">u_end<pos:position pos:line="123" pos:column="25"/></name></name> <operator pos:line="123" pos:column="26">&gt;=<pos:position pos:line="123" pos:column="31"/></operator> <name><name pos:line="123" pos:column="29">req<pos:position pos:line="123" pos:column="32"/></name><operator pos:line="123" pos:column="32">.<pos:position pos:line="123" pos:column="33"/></operator><name pos:line="123" pos:column="33">u_start<pos:position pos:line="123" pos:column="40"/></name></name> <operator pos:line="123" pos:column="41">&amp;&amp;<pos:position pos:line="123" pos:column="51"/></operator> <call><name pos:line="123" pos:column="44">xisspace<pos:position pos:line="123" pos:column="52"/></name><argument_list pos:line="123" pos:column="52">(<argument><expr><name><name pos:line="123" pos:column="53">buf<pos:position pos:line="123" pos:column="56"/></name><index pos:line="123" pos:column="56">[<expr><name><name pos:line="123" pos:column="57">req<pos:position pos:line="123" pos:column="60"/></name><operator pos:line="123" pos:column="60">.<pos:position pos:line="123" pos:column="61"/></operator><name pos:line="123" pos:column="61">u_end<pos:position pos:line="123" pos:column="66"/></name></name></expr>]<pos:position pos:line="123" pos:column="67"/></index></name></expr></argument>)<pos:position pos:line="123" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="69"/></condition> <incr><expr><operator pos:line="123" pos:column="70">--<pos:position pos:line="123" pos:column="72"/></operator><name><name pos:line="123" pos:column="72">req<pos:position pos:line="123" pos:column="75"/></name><operator pos:line="123" pos:column="75">.<pos:position pos:line="123" pos:column="76"/></operator><name pos:line="123" pos:column="76">u_end<pos:position pos:line="123" pos:column="81"/></name></name></expr></incr>)<pos:position pos:line="123" pos:column="82"/></control><block type="pseudo"><empty_stmt pos:line="123" pos:column="82">;<pos:position pos:line="123" pos:column="83"/></empty_stmt></block></for>
    }<pos:position pos:line="124" pos:column="6"/></block></else></if>
    <if pos:line="125" pos:column="5">if <condition pos:line="125" pos:column="8">(<expr><name><name pos:line="125" pos:column="9">req<pos:position pos:line="125" pos:column="12"/></name><operator pos:line="125" pos:column="12">.<pos:position pos:line="125" pos:column="13"/></operator><name pos:line="125" pos:column="13">u_end<pos:position pos:line="125" pos:column="18"/></name></name> <operator pos:line="125" pos:column="19">&lt;<pos:position pos:line="125" pos:column="23"/></operator> <name><name pos:line="125" pos:column="21">req<pos:position pos:line="125" pos:column="24"/></name><operator pos:line="125" pos:column="24">.<pos:position pos:line="125" pos:column="25"/></operator><name pos:line="125" pos:column="25">u_start<pos:position pos:line="125" pos:column="32"/></name></name></expr>)<pos:position pos:line="125" pos:column="33"/></condition><then pos:line="125" pos:column="33"> <block pos:line="125" pos:column="34">{
        <expr_stmt><expr><name pos:line="126" pos:column="9">request_parse_status<pos:position pos:line="126" pos:column="29"/></name> <operator pos:line="126" pos:column="30">=<pos:position pos:line="126" pos:column="31"/></operator> <name><name pos:line="126" pos:column="32">Http<pos:position pos:line="126" pos:column="36"/></name><operator pos:line="126" pos:column="36">::<pos:position pos:line="126" pos:column="38"/></operator><name pos:line="126" pos:column="38">scBadRequest<pos:position pos:line="126" pos:column="50"/></name></name></expr>;<pos:position pos:line="126" pos:column="51"/></expr_stmt> <comment type="line" pos:line="126" pos:column="52">// missing URI</comment>
        <return pos:line="127" pos:column="9">return <expr><operator pos:line="127" pos:column="16">-<pos:position pos:line="127" pos:column="17"/></operator><literal type="number" pos:line="127" pos:column="17">1<pos:position pos:line="127" pos:column="18"/></literal></expr>;<pos:position pos:line="127" pos:column="19"/></return>
    }<pos:position pos:line="128" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="130" pos:column="5">// Last whitespace SP = before start of protocol/version</comment>
    <if pos:line="131" pos:column="5">if <condition pos:line="131" pos:column="8">(<expr><name pos:line="131" pos:column="9">last_whitespace<pos:position pos:line="131" pos:column="24"/></name> <operator pos:line="131" pos:column="25">&gt;=<pos:position pos:line="131" pos:column="30"/></operator> <name pos:line="131" pos:column="28">line_end<pos:position pos:line="131" pos:column="36"/></name></expr>)<pos:position pos:line="131" pos:column="37"/></condition><then pos:line="131" pos:column="37"> <block pos:line="131" pos:column="38">{
        <expr_stmt><expr><name pos:line="132" pos:column="9">request_parse_status<pos:position pos:line="132" pos:column="29"/></name> <operator pos:line="132" pos:column="30">=<pos:position pos:line="132" pos:column="31"/></operator> <name><name pos:line="132" pos:column="32">Http<pos:position pos:line="132" pos:column="36"/></name><operator pos:line="132" pos:column="36">::<pos:position pos:line="132" pos:column="38"/></operator><name pos:line="132" pos:column="38">scBadRequest<pos:position pos:line="132" pos:column="50"/></name></name></expr>;<pos:position pos:line="132" pos:column="51"/></expr_stmt> <comment type="line" pos:line="132" pos:column="52">// missing version</comment>
        <return pos:line="133" pos:column="9">return <expr><operator pos:line="133" pos:column="16">-<pos:position pos:line="133" pos:column="17"/></operator><literal type="number" pos:line="133" pos:column="17">1<pos:position pos:line="133" pos:column="18"/></literal></expr>;<pos:position pos:line="133" pos:column="19"/></return>
    }<pos:position pos:line="134" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="135" pos:column="5">req<pos:position pos:line="135" pos:column="8"/></name><operator pos:line="135" pos:column="8">.<pos:position pos:line="135" pos:column="9"/></operator><name pos:line="135" pos:column="9">v_start<pos:position pos:line="135" pos:column="16"/></name></name> <operator pos:line="135" pos:column="17">=<pos:position pos:line="135" pos:column="18"/></operator> <name pos:line="135" pos:column="19">last_whitespace<pos:position pos:line="135" pos:column="34"/></name> <operator pos:line="135" pos:column="35">+<pos:position pos:line="135" pos:column="36"/></operator> <literal type="number" pos:line="135" pos:column="37">1<pos:position pos:line="135" pos:column="38"/></literal></expr>;<pos:position pos:line="135" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="136" pos:column="5">req<pos:position pos:line="136" pos:column="8"/></name><operator pos:line="136" pos:column="8">.<pos:position pos:line="136" pos:column="9"/></operator><name pos:line="136" pos:column="9">v_end<pos:position pos:line="136" pos:column="14"/></name></name> <operator pos:line="136" pos:column="15">=<pos:position pos:line="136" pos:column="16"/></operator> <name pos:line="136" pos:column="17">line_end<pos:position pos:line="136" pos:column="25"/></name></expr>;<pos:position pos:line="136" pos:column="26"/></expr_stmt>

    <comment type="line" pos:line="138" pos:column="5">// We only accept HTTP protocol requests right now.</comment>
    <comment type="line" pos:line="139" pos:column="5">// TODO: accept other protocols; RFC 2326 (RTSP protocol) etc</comment>
    <if pos:line="140" pos:column="5">if <condition pos:line="140" pos:column="8">(<expr><operator pos:line="140" pos:column="9">(<pos:position pos:line="140" pos:column="10"/></operator><name><name pos:line="140" pos:column="10">req<pos:position pos:line="140" pos:column="13"/></name><operator pos:line="140" pos:column="13">.<pos:position pos:line="140" pos:column="14"/></operator><name pos:line="140" pos:column="14">v_end<pos:position pos:line="140" pos:column="19"/></name></name> <operator pos:line="140" pos:column="20">-<pos:position pos:line="140" pos:column="21"/></operator> <name><name pos:line="140" pos:column="22">req<pos:position pos:line="140" pos:column="25"/></name><operator pos:line="140" pos:column="25">.<pos:position pos:line="140" pos:column="26"/></operator><name pos:line="140" pos:column="26">v_start<pos:position pos:line="140" pos:column="33"/></name></name> <operator pos:line="140" pos:column="34">+<pos:position pos:line="140" pos:column="35"/></operator><literal type="number" pos:line="140" pos:column="35">1<pos:position pos:line="140" pos:column="36"/></literal><operator pos:line="140" pos:column="36">)<pos:position pos:line="140" pos:column="37"/></operator> <operator pos:line="140" pos:column="38">&lt;<pos:position pos:line="140" pos:column="42"/></operator> <literal type="number" pos:line="140" pos:column="40">5<pos:position pos:line="140" pos:column="41"/></literal> <operator pos:line="140" pos:column="42">||<pos:position pos:line="140" pos:column="44"/></operator> <call><name pos:line="140" pos:column="45">strncasecmp<pos:position pos:line="140" pos:column="56"/></name><argument_list pos:line="140" pos:column="56">(<argument><expr><operator pos:line="140" pos:column="57">&amp;<pos:position pos:line="140" pos:column="62"/></operator><name><name pos:line="140" pos:column="58">buf<pos:position pos:line="140" pos:column="61"/></name><index pos:line="140" pos:column="61">[<expr><name><name pos:line="140" pos:column="62">req<pos:position pos:line="140" pos:column="65"/></name><operator pos:line="140" pos:column="65">.<pos:position pos:line="140" pos:column="66"/></operator><name pos:line="140" pos:column="66">v_start<pos:position pos:line="140" pos:column="73"/></name></name></expr>]<pos:position pos:line="140" pos:column="74"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="140" pos:column="76">"HTTP/"<pos:position pos:line="140" pos:column="83"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="140" pos:column="85">5<pos:position pos:line="140" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="87"/></argument_list></call> <operator pos:line="140" pos:column="88">!=<pos:position pos:line="140" pos:column="90"/></operator> <literal type="number" pos:line="140" pos:column="91">0<pos:position pos:line="140" pos:column="92"/></literal></expr>)<pos:position pos:line="140" pos:column="93"/></condition><then pos:line="140" pos:column="93"> <block pos:line="140" pos:column="94">{
<cpp:if pos:line="141" pos:column="1">#<cpp:directive pos:line="141" pos:column="2">if<pos:position pos:line="141" pos:column="4"/></cpp:directive> <expr><name pos:line="141" pos:column="5">USE_HTTP_VIOLATIONS<pos:position pos:line="141" pos:column="24"/></name></expr></cpp:if>
        <comment type="line" pos:line="142" pos:column="9">// being lax; old parser accepted strange versions</comment>
        <comment type="line" pos:line="143" pos:column="9">// there is a LOT of cases which are ambiguous, therefore we cannot use relaxed_header_parser here.</comment>
        <expr_stmt><expr><name><name pos:line="144" pos:column="9">req<pos:position pos:line="144" pos:column="12"/></name><operator pos:line="144" pos:column="12">.<pos:position pos:line="144" pos:column="13"/></operator><name pos:line="144" pos:column="13">v_maj<pos:position pos:line="144" pos:column="18"/></name></name> <operator pos:line="144" pos:column="19">=<pos:position pos:line="144" pos:column="20"/></operator> <literal type="number" pos:line="144" pos:column="21">0<pos:position pos:line="144" pos:column="22"/></literal></expr>;<pos:position pos:line="144" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="145" pos:column="9">req<pos:position pos:line="145" pos:column="12"/></name><operator pos:line="145" pos:column="12">.<pos:position pos:line="145" pos:column="13"/></operator><name pos:line="145" pos:column="13">v_min<pos:position pos:line="145" pos:column="18"/></name></name> <operator pos:line="145" pos:column="19">=<pos:position pos:line="145" pos:column="20"/></operator> <literal type="number" pos:line="145" pos:column="21">9<pos:position pos:line="145" pos:column="22"/></literal></expr>;<pos:position pos:line="145" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="146" pos:column="9">req<pos:position pos:line="146" pos:column="12"/></name><operator pos:line="146" pos:column="12">.<pos:position pos:line="146" pos:column="13"/></operator><name pos:line="146" pos:column="13">u_end<pos:position pos:line="146" pos:column="18"/></name></name> <operator pos:line="146" pos:column="19">=<pos:position pos:line="146" pos:column="20"/></operator> <name pos:line="146" pos:column="21">line_end<pos:position pos:line="146" pos:column="29"/></name></expr>;<pos:position pos:line="146" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="147" pos:column="9">request_parse_status<pos:position pos:line="147" pos:column="29"/></name> <operator pos:line="147" pos:column="30">=<pos:position pos:line="147" pos:column="31"/></operator> <name><name pos:line="147" pos:column="32">Http<pos:position pos:line="147" pos:column="36"/></name><operator pos:line="147" pos:column="36">::<pos:position pos:line="147" pos:column="38"/></operator><name pos:line="147" pos:column="38">scOkay<pos:position pos:line="147" pos:column="44"/></name></name></expr>;<pos:position pos:line="147" pos:column="45"/></expr_stmt> <comment type="line" pos:line="147" pos:column="46">// treat as HTTP/0.9</comment>
        <return pos:line="148" pos:column="9">return <expr><literal type="number" pos:line="148" pos:column="16">1<pos:position pos:line="148" pos:column="17"/></literal></expr>;<pos:position pos:line="148" pos:column="18"/></return>
<cpp:else pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">else<pos:position pos:line="149" pos:column="6"/></cpp:directive></cpp:else>
        <comment type="line" pos:line="150" pos:column="9">// protocol not supported / implemented.</comment>
        <expr_stmt><expr><name pos:line="151" pos:column="9">request_parse_status<pos:position pos:line="151" pos:column="29"/></name> <operator pos:line="151" pos:column="30">=<pos:position pos:line="151" pos:column="31"/></operator> <name><name pos:line="151" pos:column="32">Http<pos:position pos:line="151" pos:column="36"/></name><operator pos:line="151" pos:column="36">::<pos:position pos:line="151" pos:column="38"/></operator><name pos:line="151" pos:column="38">scHttpVersionNotSupported<pos:position pos:line="151" pos:column="63"/></name></name></expr>;<pos:position pos:line="151" pos:column="64"/></expr_stmt>
        <return pos:line="152" pos:column="9">return <expr><operator pos:line="152" pos:column="16">-<pos:position pos:line="152" pos:column="17"/></operator><literal type="number" pos:line="152" pos:column="17">1<pos:position pos:line="152" pos:column="18"/></literal></expr>;<pos:position pos:line="152" pos:column="19"/></return>
<cpp:endif pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">endif<pos:position pos:line="153" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="154" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="156" pos:column="5">int<pos:position pos:line="156" pos:column="8"/></name></type> <name pos:line="156" pos:column="9">i<pos:position pos:line="156" pos:column="10"/></name> <init pos:line="156" pos:column="11">= <expr><name><name pos:line="156" pos:column="13">req<pos:position pos:line="156" pos:column="16"/></name><operator pos:line="156" pos:column="16">.<pos:position pos:line="156" pos:column="17"/></operator><name pos:line="156" pos:column="17">v_start<pos:position pos:line="156" pos:column="24"/></name></name> <operator pos:line="156" pos:column="25">+<pos:position pos:line="156" pos:column="26"/></operator> <sizeof pos:line="156" pos:column="27">sizeof<argument_list pos:line="156" pos:column="33">(<argument><expr><literal type="string" pos:line="156" pos:column="34">"HTTP/"<pos:position pos:line="156" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="42"/></argument_list></sizeof> <operator pos:line="156" pos:column="43">-<pos:position pos:line="156" pos:column="44"/></operator><literal type="number" pos:line="156" pos:column="44">1<pos:position pos:line="156" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="156" pos:column="46"/></decl_stmt>

    <comment type="block" pos:line="158" pos:column="5">/* next should be 1 or more digits */</comment>
    <if pos:line="159" pos:column="5">if <condition pos:line="159" pos:column="8">(<expr><operator pos:line="159" pos:column="9">!<pos:position pos:line="159" pos:column="10"/></operator><call><name pos:line="159" pos:column="10">isdigit<pos:position pos:line="159" pos:column="17"/></name><argument_list pos:line="159" pos:column="17">(<argument><expr><name><name pos:line="159" pos:column="18">buf<pos:position pos:line="159" pos:column="21"/></name><index pos:line="159" pos:column="21">[<expr><name pos:line="159" pos:column="22">i<pos:position pos:line="159" pos:column="23"/></name></expr>]<pos:position pos:line="159" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="159" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="159" pos:column="26"/></condition><then pos:line="159" pos:column="26"> <block pos:line="159" pos:column="27">{
        <expr_stmt><expr><name pos:line="160" pos:column="9">request_parse_status<pos:position pos:line="160" pos:column="29"/></name> <operator pos:line="160" pos:column="30">=<pos:position pos:line="160" pos:column="31"/></operator> <name><name pos:line="160" pos:column="32">Http<pos:position pos:line="160" pos:column="36"/></name><operator pos:line="160" pos:column="36">::<pos:position pos:line="160" pos:column="38"/></operator><name pos:line="160" pos:column="38">scHttpVersionNotSupported<pos:position pos:line="160" pos:column="63"/></name></name></expr>;<pos:position pos:line="160" pos:column="64"/></expr_stmt>
        <return pos:line="161" pos:column="9">return <expr><operator pos:line="161" pos:column="16">-<pos:position pos:line="161" pos:column="17"/></operator><literal type="number" pos:line="161" pos:column="17">1<pos:position pos:line="161" pos:column="18"/></literal></expr>;<pos:position pos:line="161" pos:column="19"/></return>
    }<pos:position pos:line="162" pos:column="6"/></block></then></if>
    <decl_stmt><decl><type><name pos:line="163" pos:column="5">int<pos:position pos:line="163" pos:column="8"/></name></type> <name pos:line="163" pos:column="9">maj<pos:position pos:line="163" pos:column="12"/></name> <init pos:line="163" pos:column="13">= <expr><literal type="number" pos:line="163" pos:column="15">0<pos:position pos:line="163" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="163" pos:column="17"/></decl_stmt>
    <for pos:line="164" pos:column="5">for <control pos:line="164" pos:column="9">(<init pos:line="164" pos:column="10">;<pos:position pos:line="164" pos:column="11"/></init> <condition><expr><name pos:line="164" pos:column="12">i<pos:position pos:line="164" pos:column="13"/></name> <operator pos:line="164" pos:column="14">&lt;=<pos:position pos:line="164" pos:column="19"/></operator> <name pos:line="164" pos:column="17">line_end<pos:position pos:line="164" pos:column="25"/></name> <operator pos:line="164" pos:column="26">&amp;&amp;<pos:position pos:line="164" pos:column="36"/></operator> <operator pos:line="164" pos:column="29">(<pos:position pos:line="164" pos:column="30"/></operator><call><name pos:line="164" pos:column="30">isdigit<pos:position pos:line="164" pos:column="37"/></name><argument_list pos:line="164" pos:column="37">(<argument><expr><name><name pos:line="164" pos:column="38">buf<pos:position pos:line="164" pos:column="41"/></name><index pos:line="164" pos:column="41">[<expr><name pos:line="164" pos:column="42">i<pos:position pos:line="164" pos:column="43"/></name></expr>]<pos:position pos:line="164" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="164" pos:column="45"/></argument_list></call><operator pos:line="164" pos:column="45">)<pos:position pos:line="164" pos:column="46"/></operator> <operator pos:line="164" pos:column="47">&amp;&amp;<pos:position pos:line="164" pos:column="57"/></operator> <name pos:line="164" pos:column="50">maj<pos:position pos:line="164" pos:column="53"/></name> <operator pos:line="164" pos:column="54">&lt;<pos:position pos:line="164" pos:column="58"/></operator> <literal type="number" pos:line="164" pos:column="56">65536<pos:position pos:line="164" pos:column="61"/></literal></expr>;<pos:position pos:line="164" pos:column="62"/></condition> <incr><expr><operator pos:line="164" pos:column="63">++<pos:position pos:line="164" pos:column="65"/></operator><name pos:line="164" pos:column="65">i<pos:position pos:line="164" pos:column="66"/></name></expr></incr>)<pos:position pos:line="164" pos:column="67"/></control> <block pos:line="164" pos:column="68">{
        <expr_stmt><expr><name pos:line="165" pos:column="9">maj<pos:position pos:line="165" pos:column="12"/></name> <operator pos:line="165" pos:column="13">=<pos:position pos:line="165" pos:column="14"/></operator> <name pos:line="165" pos:column="15">maj<pos:position pos:line="165" pos:column="18"/></name> <operator pos:line="165" pos:column="19">*<pos:position pos:line="165" pos:column="20"/></operator> <literal type="number" pos:line="165" pos:column="21">10<pos:position pos:line="165" pos:column="23"/></literal></expr>;<pos:position pos:line="165" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="166" pos:column="9">maj<pos:position pos:line="166" pos:column="12"/></name> <operator pos:line="166" pos:column="13">=<pos:position pos:line="166" pos:column="14"/></operator> <name pos:line="166" pos:column="15">maj<pos:position pos:line="166" pos:column="18"/></name> <operator pos:line="166" pos:column="19">+<pos:position pos:line="166" pos:column="20"/></operator> <operator pos:line="166" pos:column="21">(<pos:position pos:line="166" pos:column="22"/></operator><name><name pos:line="166" pos:column="22">buf<pos:position pos:line="166" pos:column="25"/></name><index pos:line="166" pos:column="25">[<expr><name pos:line="166" pos:column="26">i<pos:position pos:line="166" pos:column="27"/></name></expr>]<pos:position pos:line="166" pos:column="28"/></index></name><operator pos:line="166" pos:column="28">)<pos:position pos:line="166" pos:column="29"/></operator> <operator pos:line="166" pos:column="30">-<pos:position pos:line="166" pos:column="31"/></operator> <literal type="char" pos:line="166" pos:column="32">'0'<pos:position pos:line="166" pos:column="35"/></literal></expr>;<pos:position pos:line="166" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="167" pos:column="6"/></block></for>
    <comment type="line" pos:line="168" pos:column="5">// catch too-big values or missing remainders</comment>
    <if pos:line="169" pos:column="5">if <condition pos:line="169" pos:column="8">(<expr><name pos:line="169" pos:column="9">maj<pos:position pos:line="169" pos:column="12"/></name> <operator pos:line="169" pos:column="13">&gt;=<pos:position pos:line="169" pos:column="18"/></operator> <literal type="number" pos:line="169" pos:column="16">65536<pos:position pos:line="169" pos:column="21"/></literal> <operator pos:line="169" pos:column="22">||<pos:position pos:line="169" pos:column="24"/></operator> <name pos:line="169" pos:column="25">i<pos:position pos:line="169" pos:column="26"/></name> <operator pos:line="169" pos:column="27">&gt;<pos:position pos:line="169" pos:column="31"/></operator> <name pos:line="169" pos:column="29">line_end<pos:position pos:line="169" pos:column="37"/></name></expr>)<pos:position pos:line="169" pos:column="38"/></condition><then pos:line="169" pos:column="38"> <block pos:line="169" pos:column="39">{
        <expr_stmt><expr><name pos:line="170" pos:column="9">request_parse_status<pos:position pos:line="170" pos:column="29"/></name> <operator pos:line="170" pos:column="30">=<pos:position pos:line="170" pos:column="31"/></operator> <name><name pos:line="170" pos:column="32">Http<pos:position pos:line="170" pos:column="36"/></name><operator pos:line="170" pos:column="36">::<pos:position pos:line="170" pos:column="38"/></operator><name pos:line="170" pos:column="38">scHttpVersionNotSupported<pos:position pos:line="170" pos:column="63"/></name></name></expr>;<pos:position pos:line="170" pos:column="64"/></expr_stmt>
        <return pos:line="171" pos:column="9">return <expr><operator pos:line="171" pos:column="16">-<pos:position pos:line="171" pos:column="17"/></operator><literal type="number" pos:line="171" pos:column="17">1<pos:position pos:line="171" pos:column="18"/></literal></expr>;<pos:position pos:line="171" pos:column="19"/></return>
    }<pos:position pos:line="172" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="173" pos:column="5">req<pos:position pos:line="173" pos:column="8"/></name><operator pos:line="173" pos:column="8">.<pos:position pos:line="173" pos:column="9"/></operator><name pos:line="173" pos:column="9">v_maj<pos:position pos:line="173" pos:column="14"/></name></name> <operator pos:line="173" pos:column="15">=<pos:position pos:line="173" pos:column="16"/></operator> <name pos:line="173" pos:column="17">maj<pos:position pos:line="173" pos:column="20"/></name></expr>;<pos:position pos:line="173" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="175" pos:column="5">/* next should be .; we -have- to have this as we have a whole line.. */</comment>
    <if pos:line="176" pos:column="5">if <condition pos:line="176" pos:column="8">(<expr><name><name pos:line="176" pos:column="9">buf<pos:position pos:line="176" pos:column="12"/></name><index pos:line="176" pos:column="12">[<expr><name pos:line="176" pos:column="13">i<pos:position pos:line="176" pos:column="14"/></name></expr>]<pos:position pos:line="176" pos:column="15"/></index></name> <operator pos:line="176" pos:column="16">!=<pos:position pos:line="176" pos:column="18"/></operator> <literal type="char" pos:line="176" pos:column="19">'.'<pos:position pos:line="176" pos:column="22"/></literal></expr>)<pos:position pos:line="176" pos:column="23"/></condition><then pos:line="176" pos:column="23"> <block pos:line="176" pos:column="24">{
        <expr_stmt><expr><name pos:line="177" pos:column="9">request_parse_status<pos:position pos:line="177" pos:column="29"/></name> <operator pos:line="177" pos:column="30">=<pos:position pos:line="177" pos:column="31"/></operator> <name><name pos:line="177" pos:column="32">Http<pos:position pos:line="177" pos:column="36"/></name><operator pos:line="177" pos:column="36">::<pos:position pos:line="177" pos:column="38"/></operator><name pos:line="177" pos:column="38">scHttpVersionNotSupported<pos:position pos:line="177" pos:column="63"/></name></name></expr>;<pos:position pos:line="177" pos:column="64"/></expr_stmt>
        <return pos:line="178" pos:column="9">return <expr><operator pos:line="178" pos:column="16">-<pos:position pos:line="178" pos:column="17"/></operator><literal type="number" pos:line="178" pos:column="17">1<pos:position pos:line="178" pos:column="18"/></literal></expr>;<pos:position pos:line="178" pos:column="19"/></return>
    }<pos:position pos:line="179" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="180" pos:column="5">// catch missing minor part</comment>
    <if pos:line="181" pos:column="5">if <condition pos:line="181" pos:column="8">(<expr><operator pos:line="181" pos:column="9">++<pos:position pos:line="181" pos:column="11"/></operator><name pos:line="181" pos:column="11">i<pos:position pos:line="181" pos:column="12"/></name> <operator pos:line="181" pos:column="13">&gt;<pos:position pos:line="181" pos:column="17"/></operator> <name pos:line="181" pos:column="15">line_end<pos:position pos:line="181" pos:column="23"/></name></expr>)<pos:position pos:line="181" pos:column="24"/></condition><then pos:line="181" pos:column="24"> <block pos:line="181" pos:column="25">{
        <expr_stmt><expr><name pos:line="182" pos:column="9">request_parse_status<pos:position pos:line="182" pos:column="29"/></name> <operator pos:line="182" pos:column="30">=<pos:position pos:line="182" pos:column="31"/></operator> <name><name pos:line="182" pos:column="32">Http<pos:position pos:line="182" pos:column="36"/></name><operator pos:line="182" pos:column="36">::<pos:position pos:line="182" pos:column="38"/></operator><name pos:line="182" pos:column="38">scHttpVersionNotSupported<pos:position pos:line="182" pos:column="63"/></name></name></expr>;<pos:position pos:line="182" pos:column="64"/></expr_stmt>
        <return pos:line="183" pos:column="9">return <expr><operator pos:line="183" pos:column="16">-<pos:position pos:line="183" pos:column="17"/></operator><literal type="number" pos:line="183" pos:column="17">1<pos:position pos:line="183" pos:column="18"/></literal></expr>;<pos:position pos:line="183" pos:column="19"/></return>
    }<pos:position pos:line="184" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="185" pos:column="5">/* next should be one or more digits */</comment>
    <if pos:line="186" pos:column="5">if <condition pos:line="186" pos:column="8">(<expr><operator pos:line="186" pos:column="9">!<pos:position pos:line="186" pos:column="10"/></operator><call><name pos:line="186" pos:column="10">isdigit<pos:position pos:line="186" pos:column="17"/></name><argument_list pos:line="186" pos:column="17">(<argument><expr><name><name pos:line="186" pos:column="18">buf<pos:position pos:line="186" pos:column="21"/></name><index pos:line="186" pos:column="21">[<expr><name pos:line="186" pos:column="22">i<pos:position pos:line="186" pos:column="23"/></name></expr>]<pos:position pos:line="186" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="186" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="186" pos:column="26"/></condition><then pos:line="186" pos:column="26"> <block pos:line="186" pos:column="27">{
        <expr_stmt><expr><name pos:line="187" pos:column="9">request_parse_status<pos:position pos:line="187" pos:column="29"/></name> <operator pos:line="187" pos:column="30">=<pos:position pos:line="187" pos:column="31"/></operator> <name><name pos:line="187" pos:column="32">Http<pos:position pos:line="187" pos:column="36"/></name><operator pos:line="187" pos:column="36">::<pos:position pos:line="187" pos:column="38"/></operator><name pos:line="187" pos:column="38">scHttpVersionNotSupported<pos:position pos:line="187" pos:column="63"/></name></name></expr>;<pos:position pos:line="187" pos:column="64"/></expr_stmt>
        <return pos:line="188" pos:column="9">return <expr><operator pos:line="188" pos:column="16">-<pos:position pos:line="188" pos:column="17"/></operator><literal type="number" pos:line="188" pos:column="17">1<pos:position pos:line="188" pos:column="18"/></literal></expr>;<pos:position pos:line="188" pos:column="19"/></return>
    }<pos:position pos:line="189" pos:column="6"/></block></then></if>
    <decl_stmt><decl><type><name pos:line="190" pos:column="5">int<pos:position pos:line="190" pos:column="8"/></name></type> <name pos:line="190" pos:column="9">min<pos:position pos:line="190" pos:column="12"/></name> <init pos:line="190" pos:column="13">= <expr><literal type="number" pos:line="190" pos:column="15">0<pos:position pos:line="190" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="190" pos:column="17"/></decl_stmt>
    <for pos:line="191" pos:column="5">for <control pos:line="191" pos:column="9">(<init pos:line="191" pos:column="10">;<pos:position pos:line="191" pos:column="11"/></init> <condition><expr><name pos:line="191" pos:column="12">i<pos:position pos:line="191" pos:column="13"/></name> <operator pos:line="191" pos:column="14">&lt;=<pos:position pos:line="191" pos:column="19"/></operator> <name pos:line="191" pos:column="17">line_end<pos:position pos:line="191" pos:column="25"/></name> <operator pos:line="191" pos:column="26">&amp;&amp;<pos:position pos:line="191" pos:column="36"/></operator> <operator pos:line="191" pos:column="29">(<pos:position pos:line="191" pos:column="30"/></operator><call><name pos:line="191" pos:column="30">isdigit<pos:position pos:line="191" pos:column="37"/></name><argument_list pos:line="191" pos:column="37">(<argument><expr><name><name pos:line="191" pos:column="38">buf<pos:position pos:line="191" pos:column="41"/></name><index pos:line="191" pos:column="41">[<expr><name pos:line="191" pos:column="42">i<pos:position pos:line="191" pos:column="43"/></name></expr>]<pos:position pos:line="191" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="191" pos:column="45"/></argument_list></call><operator pos:line="191" pos:column="45">)<pos:position pos:line="191" pos:column="46"/></operator> <operator pos:line="191" pos:column="47">&amp;&amp;<pos:position pos:line="191" pos:column="57"/></operator> <name pos:line="191" pos:column="50">min<pos:position pos:line="191" pos:column="53"/></name> <operator pos:line="191" pos:column="54">&lt;<pos:position pos:line="191" pos:column="58"/></operator> <literal type="number" pos:line="191" pos:column="56">65536<pos:position pos:line="191" pos:column="61"/></literal></expr>;<pos:position pos:line="191" pos:column="62"/></condition> <incr><expr><operator pos:line="191" pos:column="63">++<pos:position pos:line="191" pos:column="65"/></operator><name pos:line="191" pos:column="65">i<pos:position pos:line="191" pos:column="66"/></name></expr></incr>)<pos:position pos:line="191" pos:column="67"/></control> <block pos:line="191" pos:column="68">{
        <expr_stmt><expr><name pos:line="192" pos:column="9">min<pos:position pos:line="192" pos:column="12"/></name> <operator pos:line="192" pos:column="13">=<pos:position pos:line="192" pos:column="14"/></operator> <name pos:line="192" pos:column="15">min<pos:position pos:line="192" pos:column="18"/></name> <operator pos:line="192" pos:column="19">*<pos:position pos:line="192" pos:column="20"/></operator> <literal type="number" pos:line="192" pos:column="21">10<pos:position pos:line="192" pos:column="23"/></literal></expr>;<pos:position pos:line="192" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="193" pos:column="9">min<pos:position pos:line="193" pos:column="12"/></name> <operator pos:line="193" pos:column="13">=<pos:position pos:line="193" pos:column="14"/></operator> <name pos:line="193" pos:column="15">min<pos:position pos:line="193" pos:column="18"/></name> <operator pos:line="193" pos:column="19">+<pos:position pos:line="193" pos:column="20"/></operator> <operator pos:line="193" pos:column="21">(<pos:position pos:line="193" pos:column="22"/></operator><name><name pos:line="193" pos:column="22">buf<pos:position pos:line="193" pos:column="25"/></name><index pos:line="193" pos:column="25">[<expr><name pos:line="193" pos:column="26">i<pos:position pos:line="193" pos:column="27"/></name></expr>]<pos:position pos:line="193" pos:column="28"/></index></name><operator pos:line="193" pos:column="28">)<pos:position pos:line="193" pos:column="29"/></operator> <operator pos:line="193" pos:column="30">-<pos:position pos:line="193" pos:column="31"/></operator> <literal type="char" pos:line="193" pos:column="32">'0'<pos:position pos:line="193" pos:column="35"/></literal></expr>;<pos:position pos:line="193" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="194" pos:column="6"/></block></for>
    <comment type="line" pos:line="195" pos:column="5">// catch too-big values or trailing garbage</comment>
    <if pos:line="196" pos:column="5">if <condition pos:line="196" pos:column="8">(<expr><name pos:line="196" pos:column="9">min<pos:position pos:line="196" pos:column="12"/></name> <operator pos:line="196" pos:column="13">&gt;=<pos:position pos:line="196" pos:column="18"/></operator> <literal type="number" pos:line="196" pos:column="16">65536<pos:position pos:line="196" pos:column="21"/></literal> <operator pos:line="196" pos:column="22">||<pos:position pos:line="196" pos:column="24"/></operator> <name pos:line="196" pos:column="25">i<pos:position pos:line="196" pos:column="26"/></name> <operator pos:line="196" pos:column="27">&lt;<pos:position pos:line="196" pos:column="31"/></operator> <name pos:line="196" pos:column="29">line_end<pos:position pos:line="196" pos:column="37"/></name></expr>)<pos:position pos:line="196" pos:column="38"/></condition><then pos:line="196" pos:column="38"> <block pos:line="196" pos:column="39">{
        <expr_stmt><expr><name pos:line="197" pos:column="9">request_parse_status<pos:position pos:line="197" pos:column="29"/></name> <operator pos:line="197" pos:column="30">=<pos:position pos:line="197" pos:column="31"/></operator> <name><name pos:line="197" pos:column="32">Http<pos:position pos:line="197" pos:column="36"/></name><operator pos:line="197" pos:column="36">::<pos:position pos:line="197" pos:column="38"/></operator><name pos:line="197" pos:column="38">scHttpVersionNotSupported<pos:position pos:line="197" pos:column="63"/></name></name></expr>;<pos:position pos:line="197" pos:column="64"/></expr_stmt>
        <return pos:line="198" pos:column="9">return <expr><operator pos:line="198" pos:column="16">-<pos:position pos:line="198" pos:column="17"/></operator><literal type="number" pos:line="198" pos:column="17">1<pos:position pos:line="198" pos:column="18"/></literal></expr>;<pos:position pos:line="198" pos:column="19"/></return>
    }<pos:position pos:line="199" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="200" pos:column="5">req<pos:position pos:line="200" pos:column="8"/></name><operator pos:line="200" pos:column="8">.<pos:position pos:line="200" pos:column="9"/></operator><name pos:line="200" pos:column="9">v_min<pos:position pos:line="200" pos:column="14"/></name></name> <operator pos:line="200" pos:column="15">=<pos:position pos:line="200" pos:column="16"/></operator> <name pos:line="200" pos:column="17">min<pos:position pos:line="200" pos:column="20"/></name></expr>;<pos:position pos:line="200" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="202" pos:column="5">/*
     * Rightio - we have all the schtuff. Return true; we've got enough.
     */</comment>
    <expr_stmt><expr><name pos:line="205" pos:column="5">request_parse_status<pos:position pos:line="205" pos:column="25"/></name> <operator pos:line="205" pos:column="26">=<pos:position pos:line="205" pos:column="27"/></operator> <name><name pos:line="205" pos:column="28">Http<pos:position pos:line="205" pos:column="32"/></name><operator pos:line="205" pos:column="32">::<pos:position pos:line="205" pos:column="34"/></operator><name pos:line="205" pos:column="34">scOkay<pos:position pos:line="205" pos:column="40"/></name></name></expr>;<pos:position pos:line="205" pos:column="41"/></expr_stmt>
    <return pos:line="206" pos:column="5">return <expr><literal type="number" pos:line="206" pos:column="12">1<pos:position pos:line="206" pos:column="13"/></literal></expr>;<pos:position pos:line="206" pos:column="14"/></return>
}<pos:position pos:line="207" pos:column="2"/></block></function></unit>
