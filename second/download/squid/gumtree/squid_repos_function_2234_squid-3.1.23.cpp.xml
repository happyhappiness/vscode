<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2234_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">idnsRead<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name pos:line="2" pos:column="10">int<pos:position pos:line="2" pos:column="13"/></name></type> <name pos:line="2" pos:column="14">fd<pos:position pos:line="2" pos:column="16"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="18">void<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type><name pos:line="2" pos:column="24">data<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">N<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><operator pos:line="4" pos:column="14">&amp;<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="15">incoming_sockets_accepted<pos:position pos:line="4" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">max<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">INCOMING_DNS_MAX<pos:position pos:line="6" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="7" pos:column="5">static<pos:position pos:line="7" pos:column="11"/></specifier> <type><name pos:line="7" pos:column="12">char<pos:position pos:line="7" pos:column="16"/></name></type> <name><name pos:line="7" pos:column="17">rbuf<pos:position pos:line="7" pos:column="21"/></name><index pos:line="7" pos:column="21">[<expr><name pos:line="7" pos:column="22">SQUID_UDP_SO_RCVBUF<pos:position pos:line="7" pos:column="41"/></name></expr>]<pos:position pos:line="7" pos:column="42"/></index></name></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">ns<pos:position pos:line="8" pos:column="11"/></name></decl>;<pos:position pos:line="8" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">IpAddress<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">from<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">78<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">3<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="19">"idnsRead: starting with FD "<pos:position pos:line="11" pos:column="48"/></literal> <operator pos:line="11" pos:column="49">&lt;&lt;<pos:position pos:line="11" pos:column="57"/></operator> <name pos:line="11" pos:column="52">fd<pos:position pos:line="11" pos:column="54"/></name></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt>

    <comment type="line" pos:line="13" pos:column="5">// Always keep reading. This stops (or at least makes harder) several</comment>
    <comment type="line" pos:line="14" pos:column="5">// attacks on the DNS client.</comment>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">commSetSelect<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">fd<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="23">COMM_SELECT_READ<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="41">idnsRead<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">NULL<pos:position pos:line="15" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="57">0<pos:position pos:line="15" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>

    <comment type="block" pos:line="17" pos:column="5">/* BUG (UNRESOLVED)
     *  two code lines after returning from comm_udprecvfrom()
     *  something overwrites the memory behind the from parameter.
     *  NO matter where in the stack declaration list above it is placed
     *  The cause of this is still unknown, however copying the data appears
     *  to allow it to be passed further without this erasure.
     */</comment>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">IpAddress<pos:position pos:line="24" pos:column="14"/></name></type> <name pos:line="24" pos:column="15">bugbypass<pos:position pos:line="24" pos:column="24"/></name></decl>;<pos:position pos:line="24" pos:column="25"/></decl_stmt>

    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><name pos:line="26" pos:column="12">max<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">--<pos:position pos:line="26" pos:column="17"/></operator></expr>)<pos:position pos:line="26" pos:column="18"/></condition> <block pos:line="26" pos:column="19">{
        <expr_stmt><expr><name pos:line="27" pos:column="9">len<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">comm_udp_recvfrom<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><name pos:line="27" pos:column="33">fd<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">rbuf<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">SQUID_UDP_SO_RCVBUF<pos:position pos:line="27" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="64">0<pos:position pos:line="27" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="67">bugbypass<pos:position pos:line="27" pos:column="76"/></name></expr></argument>)<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="78"/></expr_stmt>

        <expr_stmt><expr><name pos:line="29" pos:column="9">from<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <name pos:line="29" pos:column="16">bugbypass<pos:position pos:line="29" pos:column="25"/></name></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt> <comment type="line" pos:line="29" pos:column="27">// BUG BYPASS. see notes above.</comment>

        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name pos:line="31" pos:column="13">len<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">==<pos:position pos:line="31" pos:column="19"/></operator> <literal type="number" pos:line="31" pos:column="20">0<pos:position pos:line="31" pos:column="21"/></literal></expr>)<pos:position pos:line="31" pos:column="22"/></condition><then pos:line="31" pos:column="22">
            <block type="pseudo"><break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break></block></then></if>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">len<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">&lt;<pos:position pos:line="34" pos:column="21"/></operator> <literal type="number" pos:line="34" pos:column="19">0<pos:position pos:line="34" pos:column="20"/></literal></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21"> <block pos:line="34" pos:column="22">{
            <if pos:line="35" pos:column="13">if <condition pos:line="35" pos:column="16">(<expr><call><name pos:line="35" pos:column="17">ignoreErrno<pos:position pos:line="35" pos:column="28"/></name><argument_list pos:line="35" pos:column="28">(<argument><expr><name pos:line="35" pos:column="29">errno<pos:position pos:line="35" pos:column="34"/></name></expr></argument>)<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="36"/></condition><then pos:line="35" pos:column="36">
                <block type="pseudo"><break pos:line="36" pos:column="17">break;<pos:position pos:line="36" pos:column="23"/></break></block></then></if>

<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef<pos:position pos:line="38" pos:column="7"/></cpp:directive> <name pos:line="38" pos:column="8">_SQUID_LINUX_<pos:position pos:line="38" pos:column="21"/></name></cpp:ifdef>
            <comment type="block" pos:line="39" pos:column="13">/* Some Linux systems seem to set the FD for reading and then
             * return ECONNREFUSED when sendto() fails and generates an ICMP
             * port unreachable message. */</comment>
            <comment type="block" pos:line="42" pos:column="13">/* or maybe an EHOSTUNREACH "No route to host" message */</comment>
            <if pos:line="43" pos:column="13">if <condition pos:line="43" pos:column="16">(<expr><name pos:line="43" pos:column="17">errno<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">!=<pos:position pos:line="43" pos:column="25"/></operator> <name pos:line="43" pos:column="26">ECONNREFUSED<pos:position pos:line="43" pos:column="38"/></name> <operator pos:line="43" pos:column="39">&amp;&amp;<pos:position pos:line="43" pos:column="49"/></operator> <name pos:line="43" pos:column="42">errno<pos:position pos:line="43" pos:column="47"/></name> <operator pos:line="43" pos:column="48">!=<pos:position pos:line="43" pos:column="50"/></operator> <name pos:line="43" pos:column="51">EHOSTUNREACH<pos:position pos:line="43" pos:column="63"/></name></expr>)<pos:position pos:line="43" pos:column="64"/></condition><then pos:line="43" pos:column="64">
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>

                <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="17">debugs<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><literal type="number" pos:line="46" pos:column="24">50<pos:position pos:line="46" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="28">1<pos:position pos:line="46" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="31">"idnsRead: FD "<pos:position pos:line="46" pos:column="46"/></literal> <operator pos:line="46" pos:column="47">&lt;&lt;<pos:position pos:line="46" pos:column="55"/></operator> <name pos:line="46" pos:column="50">fd<pos:position pos:line="46" pos:column="52"/></name> <operator pos:line="46" pos:column="53">&lt;&lt;<pos:position pos:line="46" pos:column="61"/></operator> <literal type="string" pos:line="46" pos:column="56">" recvfrom: "<pos:position pos:line="46" pos:column="69"/></literal> <operator pos:line="46" pos:column="70">&lt;&lt;<pos:position pos:line="46" pos:column="78"/></operator> <call><name pos:line="46" pos:column="73">xstrerror<pos:position pos:line="46" pos:column="82"/></name><argument_list pos:line="46" pos:column="82">()<pos:position pos:line="46" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="86"/></expr_stmt></block></then></if>

            <break pos:line="48" pos:column="13">break;<pos:position pos:line="48" pos:column="19"/></break>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="51" pos:column="9">fd_bytes<pos:position pos:line="51" pos:column="17"/></name><argument_list pos:line="51" pos:column="17">(<argument><expr><name pos:line="51" pos:column="18">fd<pos:position pos:line="51" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="22">len<pos:position pos:line="51" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="27">FD_READ<pos:position pos:line="51" pos:column="34"/></name></expr></argument>)<pos:position pos:line="51" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="36"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="53" pos:column="9">assert<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><name pos:line="53" pos:column="16">N<pos:position pos:line="53" pos:column="17"/></name></expr></argument>)<pos:position pos:line="53" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="54" pos:column="9">(<pos:position pos:line="54" pos:column="10"/></operator><operator pos:line="54" pos:column="10">*<pos:position pos:line="54" pos:column="11"/></operator><name pos:line="54" pos:column="11">N<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">)<pos:position pos:line="54" pos:column="13"/></operator><operator pos:line="54" pos:column="13">++<pos:position pos:line="54" pos:column="15"/></operator></expr>;<pos:position pos:line="54" pos:column="16"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="56" pos:column="9">debugs<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><literal type="number" pos:line="56" pos:column="16">78<pos:position pos:line="56" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="20">3<pos:position pos:line="56" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="23">"idnsRead: FD "<pos:position pos:line="56" pos:column="38"/></literal> <operator pos:line="56" pos:column="39">&lt;&lt;<pos:position pos:line="56" pos:column="47"/></operator> <name pos:line="56" pos:column="42">fd<pos:position pos:line="56" pos:column="44"/></name> <operator pos:line="56" pos:column="45">&lt;&lt;<pos:position pos:line="56" pos:column="53"/></operator> <literal type="string" pos:line="56" pos:column="48">": received "<pos:position pos:line="56" pos:column="61"/></literal> <operator pos:line="56" pos:column="62">&lt;&lt;<pos:position pos:line="56" pos:column="70"/></operator> <name pos:line="56" pos:column="65">len<pos:position pos:line="56" pos:column="68"/></name> <operator pos:line="56" pos:column="69">&lt;&lt;<pos:position pos:line="56" pos:column="77"/></operator> <literal type="string" pos:line="56" pos:column="72">" bytes from "<pos:position pos:line="56" pos:column="86"/></literal> <operator pos:line="56" pos:column="87">&lt;&lt;<pos:position pos:line="56" pos:column="95"/></operator> <name pos:line="56" pos:column="90">from<pos:position pos:line="56" pos:column="94"/></name></expr></argument>)<pos:position pos:line="56" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="96"/></expr_stmt>

        <comment type="block" pos:line="58" pos:column="9">/* BUG: see above. Its here that it becomes apparent that the content of bugbypass is gone. */</comment>
        <expr_stmt><expr><name pos:line="59" pos:column="9">ns<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">=<pos:position pos:line="59" pos:column="13"/></operator> <call><name pos:line="59" pos:column="14">idnsFromKnownNameserver<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name pos:line="59" pos:column="38">from<pos:position pos:line="59" pos:column="42"/></name></expr></argument>)<pos:position pos:line="59" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="44"/></expr_stmt>

        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">ns<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">&gt;=<pos:position pos:line="61" pos:column="21"/></operator> <literal type="number" pos:line="61" pos:column="19">0<pos:position pos:line="61" pos:column="20"/></literal></expr>)<pos:position pos:line="61" pos:column="21"/></condition><then pos:line="61" pos:column="21"> <block pos:line="61" pos:column="22">{
            <expr_stmt><expr><name><name pos:line="62" pos:column="13">nameservers<pos:position pos:line="62" pos:column="24"/></name><index pos:line="62" pos:column="24">[<expr><name pos:line="62" pos:column="25">ns<pos:position pos:line="62" pos:column="27"/></name></expr>]<pos:position pos:line="62" pos:column="28"/></index></name><operator pos:line="62" pos:column="28">.<pos:position pos:line="62" pos:column="29"/></operator><name pos:line="62" pos:column="29">nreplies<pos:position pos:line="62" pos:column="37"/></name><operator pos:line="62" pos:column="37">++<pos:position pos:line="62" pos:column="39"/></operator></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="65" pos:column="9">// Before unknown_nameservers check to avoid flooding cache.log on attacks,</comment>
        <comment type="line" pos:line="66" pos:column="9">// but after the ++ above to keep statistics right.</comment>
        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><operator pos:line="67" pos:column="13">!<pos:position pos:line="67" pos:column="14"/></operator><name><name pos:line="67" pos:column="14">lru_list<pos:position pos:line="67" pos:column="22"/></name><operator pos:line="67" pos:column="22">.<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="23">head<pos:position pos:line="67" pos:column="27"/></name></name></expr>)<pos:position pos:line="67" pos:column="28"/></condition><then pos:line="67" pos:column="28">
            <block type="pseudo"><continue pos:line="68" pos:column="13">continue;<pos:position pos:line="68" pos:column="22"/></continue></block></then></if> <comment type="line" pos:line="68" pos:column="23">// Don't process replies if there is no pending query.</comment>

        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">ns<pos:position pos:line="70" pos:column="15"/></name> <operator pos:line="70" pos:column="16">&lt;<pos:position pos:line="70" pos:column="20"/></operator> <literal type="number" pos:line="70" pos:column="18">0<pos:position pos:line="70" pos:column="19"/></literal> <operator pos:line="70" pos:column="20">&amp;&amp;<pos:position pos:line="70" pos:column="30"/></operator> <name><name pos:line="70" pos:column="23">Config<pos:position pos:line="70" pos:column="29"/></name><operator pos:line="70" pos:column="29">.<pos:position pos:line="70" pos:column="30"/></operator><name pos:line="70" pos:column="30">onoff<pos:position pos:line="70" pos:column="35"/></name><operator pos:line="70" pos:column="35">.<pos:position pos:line="70" pos:column="36"/></operator><name pos:line="70" pos:column="36">ignore_unknown_nameservers<pos:position pos:line="70" pos:column="62"/></name></name></expr>)<pos:position pos:line="70" pos:column="63"/></condition><then pos:line="70" pos:column="63"> <block pos:line="70" pos:column="64">{
            <decl_stmt><decl><specifier pos:line="71" pos:column="13">static<pos:position pos:line="71" pos:column="19"/></specifier> <type><name pos:line="71" pos:column="20">time_t<pos:position pos:line="71" pos:column="26"/></name></type> <name pos:line="71" pos:column="27">last_warning<pos:position pos:line="71" pos:column="39"/></name> <init pos:line="71" pos:column="40">= <expr><literal type="number" pos:line="71" pos:column="42">0<pos:position pos:line="71" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="71" pos:column="44"/></decl_stmt>

            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">(<expr><name pos:line="73" pos:column="17">squid_curtime<pos:position pos:line="73" pos:column="30"/></name> <operator pos:line="73" pos:column="31">-<pos:position pos:line="73" pos:column="32"/></operator> <name pos:line="73" pos:column="33">last_warning<pos:position pos:line="73" pos:column="45"/></name> <operator pos:line="73" pos:column="46">&gt;<pos:position pos:line="73" pos:column="50"/></operator> <literal type="number" pos:line="73" pos:column="48">60<pos:position pos:line="73" pos:column="50"/></literal></expr>)<pos:position pos:line="73" pos:column="51"/></condition><then pos:line="73" pos:column="51"> <block pos:line="73" pos:column="52">{
                <expr_stmt><expr><call><name pos:line="74" pos:column="17">debugs<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><literal type="number" pos:line="74" pos:column="24">78<pos:position pos:line="74" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="28">1<pos:position pos:line="74" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="31">"WARNING: Reply from unknown nameserver "<pos:position pos:line="74" pos:column="72"/></literal> <operator pos:line="74" pos:column="73">&lt;&lt;<pos:position pos:line="74" pos:column="81"/></operator> <name pos:line="74" pos:column="76">from<pos:position pos:line="74" pos:column="80"/></name></expr></argument>)<pos:position pos:line="74" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="82"/></expr_stmt>
                <expr_stmt><expr><name pos:line="75" pos:column="17">last_warning<pos:position pos:line="75" pos:column="29"/></name> <operator pos:line="75" pos:column="30">=<pos:position pos:line="75" pos:column="31"/></operator> <name pos:line="75" pos:column="32">squid_curtime<pos:position pos:line="75" pos:column="45"/></name></expr>;<pos:position pos:line="75" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="76" pos:column="14"/></block></then> <else pos:line="76" pos:column="15">else <block pos:line="76" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="77" pos:column="17">debugs<pos:position pos:line="77" pos:column="23"/></name><argument_list pos:line="77" pos:column="23">(<argument><expr><literal type="number" pos:line="77" pos:column="24">78<pos:position pos:line="77" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="28">1<pos:position pos:line="77" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="31">"WARNING: Reply from unknown nameserver "<pos:position pos:line="77" pos:column="72"/></literal> <operator pos:line="77" pos:column="73">&lt;&lt;<pos:position pos:line="77" pos:column="81"/></operator> <name pos:line="77" pos:column="76">from<pos:position pos:line="77" pos:column="80"/></name> <operator pos:line="77" pos:column="81">&lt;&lt;<pos:position pos:line="77" pos:column="89"/></operator> <literal type="string" pos:line="77" pos:column="84">" (retrying..."<pos:position pos:line="77" pos:column="99"/></literal> <operator pos:line="77" pos:column="100">&lt;&lt;<pos:position pos:line="77" pos:column="108"/></operator>  <operator pos:line="77" pos:column="104">(<pos:position pos:line="77" pos:column="105"/></operator><name pos:line="77" pos:column="105">squid_curtime<pos:position pos:line="77" pos:column="118"/></name><operator pos:line="77" pos:column="118">-<pos:position pos:line="77" pos:column="119"/></operator><name pos:line="77" pos:column="119">last_warning<pos:position pos:line="77" pos:column="131"/></name><operator pos:line="77" pos:column="131">)<pos:position pos:line="77" pos:column="132"/></operator> <operator pos:line="77" pos:column="133">&lt;&lt;<pos:position pos:line="77" pos:column="141"/></operator> <literal type="string" pos:line="77" pos:column="136">"&lt;=60)"<pos:position pos:line="77" pos:column="146"/></literal></expr></argument> )<pos:position pos:line="77" pos:column="145"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="146"/></expr_stmt>
            }<pos:position pos:line="78" pos:column="14"/></block></else></if>
            <continue pos:line="79" pos:column="13">continue;<pos:position pos:line="79" pos:column="22"/></continue>
        }<pos:position pos:line="80" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="82" pos:column="9">idnsGrokReply<pos:position pos:line="82" pos:column="22"/></name><argument_list pos:line="82" pos:column="22">(<argument><expr><name pos:line="82" pos:column="23">rbuf<pos:position pos:line="82" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="29">len<pos:position pos:line="82" pos:column="32"/></name></expr></argument>)<pos:position pos:line="82" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></while>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
