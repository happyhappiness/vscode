<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_720_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parseTimeLine<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">time_msec_t<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type> <name pos:line="2" pos:column="29">tptr<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">units<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,  <parameter><decl><type><name pos:line="2" pos:column="55">bool<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">allowMsec<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,  <parameter><decl><type><name pos:line="2" pos:column="72">bool<pos:position pos:line="2" pos:column="76"/></name></type> <name pos:line="2" pos:column="77">expectMoreArguments<pos:position pos:line="2" pos:column="96"/></name> <init pos:line="2" pos:column="97">= <expr><literal type="boolean" pos:line="2" pos:column="99">false<pos:position pos:line="2" pos:column="104"/></literal></expr></init></decl></parameter>)<pos:position pos:line="2" pos:column="105"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">time_msec_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">u<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name pos:line="4" pos:column="21">parseTimeUnits<pos:position pos:line="4" pos:column="35"/></name><argument_list pos:line="4" pos:column="35">(<argument><expr><name pos:line="4" pos:column="36">units<pos:position pos:line="4" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="43">allowMsec<pos:position pos:line="4" pos:column="52"/></name></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="54"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">u<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">==<pos:position pos:line="5" pos:column="13"/></operator> <literal type="number" pos:line="5" pos:column="14">0<pos:position pos:line="5" pos:column="15"/></literal></expr>)<pos:position pos:line="5" pos:column="16"/></condition><then pos:line="5" pos:column="16"> <block pos:line="5" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">self_destruct<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">()<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt>
        <return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">token<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><call><name><name pos:line="10" pos:column="19">ConfigParser<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">::<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="33">NextToken<pos:position pos:line="10" pos:column="42"/></name></name><argument_list pos:line="10" pos:column="42">()<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="45"/></decl_stmt><empty_stmt pos:line="10" pos:column="45">;<pos:position pos:line="10" pos:column="46"/></empty_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">token<pos:position pos:line="11" pos:column="15"/></name></expr>)<pos:position pos:line="11" pos:column="16"/></condition><then pos:line="11" pos:column="16"> <block pos:line="11" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">self_destruct<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">()<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">double<pos:position pos:line="16" pos:column="11"/></name></type> <name pos:line="16" pos:column="12">d<pos:position pos:line="16" pos:column="13"/></name> <init pos:line="16" pos:column="14">= <expr><call><name pos:line="16" pos:column="16">xatof<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">token<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">time_msec_t<pos:position pos:line="18" pos:column="16"/></name></type> <name pos:line="18" pos:column="17">m<pos:position pos:line="18" pos:column="18"/></name> <init pos:line="18" pos:column="19">= <expr><name pos:line="18" pos:column="21">u<pos:position pos:line="18" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="23"/></decl_stmt> <comment type="block" pos:line="18" pos:column="24">/* default to 'units' if none specified */</comment>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">d<pos:position pos:line="20" pos:column="10"/></name></expr>)<pos:position pos:line="20" pos:column="11"/></condition><then pos:line="20" pos:column="11"> <block pos:line="20" pos:column="12">{
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">(<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">token<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name><name pos:line="21" pos:column="22">ConfigParser<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">::<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="36">PeekAtToken<pos:position pos:line="21" pos:column="47"/></name></name><argument_list pos:line="21" pos:column="47">()<pos:position pos:line="21" pos:column="49"/></argument_list></call><operator pos:line="21" pos:column="49">)<pos:position pos:line="21" pos:column="50"/></operator> <operator pos:line="21" pos:column="51">&amp;&amp;<pos:position pos:line="21" pos:column="61"/></operator> <operator pos:line="21" pos:column="54">(<pos:position pos:line="21" pos:column="55"/></operator><name pos:line="21" pos:column="55">m<pos:position pos:line="21" pos:column="56"/></name> <operator pos:line="21" pos:column="57">=<pos:position pos:line="21" pos:column="58"/></operator> <call><name pos:line="21" pos:column="59">parseTimeUnits<pos:position pos:line="21" pos:column="73"/></name><argument_list pos:line="21" pos:column="73">(<argument><expr><name pos:line="21" pos:column="74">token<pos:position pos:line="21" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="81">allowMsec<pos:position pos:line="21" pos:column="90"/></name></expr></argument>)<pos:position pos:line="21" pos:column="91"/></argument_list></call><operator pos:line="21" pos:column="91">)<pos:position pos:line="21" pos:column="92"/></operator></expr>)<pos:position pos:line="21" pos:column="93"/></condition><then pos:line="21" pos:column="93"> <block pos:line="21" pos:column="94">{
            <expr_stmt><expr><operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">void<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">)<pos:position pos:line="22" pos:column="19"/></operator><call><name><name pos:line="22" pos:column="19">ConfigParser<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">::<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="33">NextToken<pos:position pos:line="22" pos:column="42"/></name></name><argument_list pos:line="22" pos:column="42">()<pos:position pos:line="22" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="45"/></expr_stmt>

        }<pos:position pos:line="24" pos:column="10"/></block></then> <elseif pos:line="24" pos:column="11">else <if pos:line="24" pos:column="16">if <condition pos:line="24" pos:column="19">(<expr><operator pos:line="24" pos:column="20">!<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="21">expectMoreArguments<pos:position pos:line="24" pos:column="40"/></name></expr>)<pos:position pos:line="24" pos:column="41"/></condition><then pos:line="24" pos:column="41"> <block pos:line="24" pos:column="42">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">self_destruct<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">()<pos:position pos:line="25" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>
            <return pos:line="26" pos:column="13">return;<pos:position pos:line="26" pos:column="20"/></return>

        }<pos:position pos:line="28" pos:column="10"/></block></then></if></elseif> <else pos:line="28" pos:column="11">else <block pos:line="28" pos:column="16">{
            <expr_stmt><expr><name pos:line="29" pos:column="13">token<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">NULL<pos:position pos:line="29" pos:column="25"/></name></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt> <comment type="line" pos:line="29" pos:column="27">// show default units if dying below</comment>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">debugs<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><literal type="number" pos:line="30" pos:column="20">3<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="23">DBG_CRITICAL<pos:position pos:line="30" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="37">"WARNING: No units on '"<pos:position pos:line="30" pos:column="61"/></literal> <operator pos:line="30" pos:column="62">&lt;&lt;<pos:position pos:line="30" pos:column="70"/></operator> <name pos:line="30" pos:column="65">config_input_line<pos:position pos:line="30" pos:column="82"/></name> <operator pos:line="30" pos:column="83">&lt;&lt;<pos:position pos:line="30" pos:column="91"/></operator> <literal type="string" pos:line="30" pos:column="86">"', assuming "<pos:position pos:line="30" pos:column="100"/></literal> <operator pos:line="30" pos:column="101">&lt;&lt;<pos:position pos:line="30" pos:column="109"/></operator> <name pos:line="30" pos:column="104">d<pos:position pos:line="30" pos:column="105"/></name> <operator pos:line="30" pos:column="106">&lt;&lt;<pos:position pos:line="30" pos:column="114"/></operator> <literal type="string" pos:line="30" pos:column="109">" "<pos:position pos:line="30" pos:column="112"/></literal> <operator pos:line="30" pos:column="113">&lt;&lt;<pos:position pos:line="30" pos:column="121"/></operator> <name pos:line="30" pos:column="116">units<pos:position pos:line="30" pos:column="121"/></name></expr></argument>)<pos:position pos:line="30" pos:column="122"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="123"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></else></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then> <else pos:line="32" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="9">token<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <name pos:line="33" pos:column="17">NULL<pos:position pos:line="33" pos:column="21"/></name></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt></block></else></if> <comment type="line" pos:line="33" pos:column="23">// show default units if dying below.</comment>

    <expr_stmt><expr><operator pos:line="35" pos:column="5">*<pos:position pos:line="35" pos:column="6"/></operator><name pos:line="35" pos:column="6">tptr<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <cast type="static" pos:line="35" pos:column="13">static_cast<argument_list type="generic" pos:line="35" pos:column="24">&lt;<argument><expr><name pos:line="35" pos:column="25">time_msec_t<pos:position pos:line="35" pos:column="36"/></name></expr></argument>&gt;<pos:position pos:line="35" pos:column="40"/></argument_list><argument_list pos:line="35" pos:column="37">(<argument><expr><name pos:line="35" pos:column="38">m<pos:position pos:line="35" pos:column="39"/></name> <operator pos:line="35" pos:column="40">*<pos:position pos:line="35" pos:column="41"/></operator> <name pos:line="35" pos:column="42">d<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></cast></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><cast type="static" pos:line="37" pos:column="9">static_cast<argument_list type="generic" pos:line="37" pos:column="20">&lt;<argument><expr><name pos:line="37" pos:column="21">double<pos:position pos:line="37" pos:column="27"/></name></expr></argument>&gt;<pos:position pos:line="37" pos:column="31"/></argument_list><argument_list pos:line="37" pos:column="28">(<argument><expr><operator pos:line="37" pos:column="29">*<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">tptr<pos:position pos:line="37" pos:column="34"/></name></expr></argument>)<pos:position pos:line="37" pos:column="35"/></argument_list></cast> <operator pos:line="37" pos:column="36">*<pos:position pos:line="37" pos:column="37"/></operator> <literal type="number" pos:line="37" pos:column="38">2<pos:position pos:line="37" pos:column="39"/></literal> <operator pos:line="37" pos:column="40">!=<pos:position pos:line="37" pos:column="42"/></operator> <name pos:line="37" pos:column="43">m<pos:position pos:line="37" pos:column="44"/></name> <operator pos:line="37" pos:column="45">*<pos:position pos:line="37" pos:column="46"/></operator> <name pos:line="37" pos:column="47">d<pos:position pos:line="37" pos:column="48"/></name> <operator pos:line="37" pos:column="49">*<pos:position pos:line="37" pos:column="50"/></operator> <literal type="number" pos:line="37" pos:column="51">2<pos:position pos:line="37" pos:column="52"/></literal></expr>)<pos:position pos:line="37" pos:column="53"/></condition><then pos:line="37" pos:column="53"> <block pos:line="37" pos:column="54">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">debugs<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="number" pos:line="38" pos:column="16">3<pos:position pos:line="38" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="19">DBG_CRITICAL<pos:position pos:line="38" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="33">"FATAL: Invalid value '"<pos:position pos:line="38" pos:column="57"/></literal> <operator pos:line="38" pos:column="58">&lt;&lt;<pos:position pos:line="38" pos:column="66"/></operator>
               <name pos:line="39" pos:column="16">d<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">&lt;&lt;<pos:position pos:line="39" pos:column="26"/></operator> <literal type="string" pos:line="39" pos:column="21">" "<pos:position pos:line="39" pos:column="24"/></literal> <operator pos:line="39" pos:column="25">&lt;&lt;<pos:position pos:line="39" pos:column="33"/></operator> <operator pos:line="39" pos:column="28">(<pos:position pos:line="39" pos:column="29"/></operator><ternary><condition><expr><name pos:line="39" pos:column="29">token<pos:position pos:line="39" pos:column="34"/></name></expr> ?<pos:position pos:line="39" pos:column="36"/></condition><then pos:line="39" pos:column="36"> <expr><name pos:line="39" pos:column="37">token<pos:position pos:line="39" pos:column="42"/></name></expr> <pos:position pos:line="39" pos:column="43"/></then><else pos:line="39" pos:column="43">: <expr><name pos:line="39" pos:column="45">units<pos:position pos:line="39" pos:column="50"/></name></expr></else></ternary><operator pos:line="39" pos:column="50">)<pos:position pos:line="39" pos:column="51"/></operator> <operator pos:line="39" pos:column="52">&lt;&lt;<pos:position pos:line="39" pos:column="60"/></operator> <literal type="string" pos:line="39" pos:column="55">": integer overflow (time_msec_t)."<pos:position pos:line="39" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="92"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">self_destruct<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">()<pos:position pos:line="40" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
