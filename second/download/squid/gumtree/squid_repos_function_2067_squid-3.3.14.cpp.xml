<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2067_squid-3.3.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">HttpStateData<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">ConnectionStatus<pos:position pos:line="1" pos:column="32"/></name></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">persistentConnStatus<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">()<pos:position pos:line="2" pos:column="38"/></parameter_list> <specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">11<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <name pos:line="4" pos:column="27">serverConnection<pos:position pos:line="4" pos:column="43"/></name> <operator pos:line="4" pos:column="44">&lt;&lt;<pos:position pos:line="4" pos:column="52"/></operator> <literal type="string" pos:line="4" pos:column="47">" eof="<pos:position pos:line="4" pos:column="54"/></literal> <operator pos:line="4" pos:column="55">&lt;&lt;<pos:position pos:line="4" pos:column="63"/></operator> <name pos:line="4" pos:column="58">eof<pos:position pos:line="4" pos:column="61"/></name></expr></argument>)<pos:position pos:line="4" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="63"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">eof<pos:position pos:line="5" pos:column="12"/></name></expr>)<pos:position pos:line="5" pos:column="13"/></condition><then pos:line="5" pos:column="13"> <comment type="line" pos:line="5" pos:column="14">// already reached EOF</comment>
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><name pos:line="6" pos:column="16">COMPLETE_NONPERSISTENT_MSG<pos:position pos:line="6" pos:column="42"/></name></expr>;<pos:position pos:line="6" pos:column="43"/></return></block></then></if>

    <comment type="block" pos:line="8" pos:column="5">/* If server fd is closing (but we have not been notified yet), stop Comm
       I/O to avoid assertions. TODO: Change Comm API to handle callers that
       want more I/O after async closing (usually initiated by others). */</comment>
    <comment type="line" pos:line="11" pos:column="5">// XXX: add canReceive or s/canSend/canTalkToServer/</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><call><name><name pos:line="12" pos:column="10">Comm<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">::<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">IsConnOpen<pos:position pos:line="12" pos:column="26"/></name></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name pos:line="12" pos:column="27">serverConnection<pos:position pos:line="12" pos:column="43"/></name></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="45"/></condition><then pos:line="12" pos:column="45">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">COMPLETE_NONPERSISTENT_MSG<pos:position pos:line="13" pos:column="42"/></name></expr>;<pos:position pos:line="13" pos:column="43"/></return></block></then></if>

    <comment type="block" format="doxygen" pos:line="15" pos:column="5">/** \par
     * In chunked response we do not know the content length but we are absolutely
     * sure about the end of response, so we are calling the statusIfComplete to
     * decide if we can be persistant
     */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">lastChunk<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">&amp;&amp;<pos:position pos:line="20" pos:column="29"/></operator> <name><name pos:line="20" pos:column="22">flags<pos:position pos:line="20" pos:column="27"/></name><operator pos:line="20" pos:column="27">.<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">chunked<pos:position pos:line="20" pos:column="35"/></name></name></expr>)<pos:position pos:line="20" pos:column="36"/></condition><then pos:line="20" pos:column="36">
        <block type="pseudo"><return pos:line="21" pos:column="9">return <expr><call><name pos:line="21" pos:column="16">statusIfComplete<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">()<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="23" pos:column="5">const<pos:position pos:line="23" pos:column="10"/></specifier> <name pos:line="23" pos:column="11">HttpReply<pos:position pos:line="23" pos:column="20"/></name> <modifier pos:line="23" pos:column="21">*<pos:position pos:line="23" pos:column="22"/></modifier></type><name pos:line="23" pos:column="22">vrep<pos:position pos:line="23" pos:column="26"/></name> <init pos:line="23" pos:column="27">= <expr><call><name pos:line="23" pos:column="29">virginReply<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">()<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">debugs<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><literal type="number" pos:line="24" pos:column="12">11<pos:position pos:line="24" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="16">5<pos:position pos:line="24" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="19">"persistentConnStatus: content_length="<pos:position pos:line="24" pos:column="58"/></literal> <operator pos:line="24" pos:column="59">&lt;&lt;<pos:position pos:line="24" pos:column="67"/></operator> <name><name pos:line="24" pos:column="62">vrep<pos:position pos:line="24" pos:column="66"/></name><operator pos:line="24" pos:column="66">-&gt;<pos:position pos:line="24" pos:column="71"/></operator><name pos:line="24" pos:column="68">content_length<pos:position pos:line="24" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="84"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">const<pos:position pos:line="26" pos:column="10"/></specifier> <name pos:line="26" pos:column="11">int64_t<pos:position pos:line="26" pos:column="18"/></name></type> <name pos:line="26" pos:column="19">clen<pos:position pos:line="26" pos:column="23"/></name> <init pos:line="26" pos:column="24">= <expr><call><name><name pos:line="26" pos:column="26">vrep<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">-&gt;<pos:position pos:line="26" pos:column="35"/></operator><name pos:line="26" pos:column="32">bodySize<pos:position pos:line="26" pos:column="40"/></name></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name><name pos:line="26" pos:column="41">request<pos:position pos:line="26" pos:column="48"/></name><operator pos:line="26" pos:column="48">-&gt;<pos:position pos:line="26" pos:column="53"/></operator><name pos:line="26" pos:column="50">method<pos:position pos:line="26" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="58"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">debugs<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><literal type="number" pos:line="28" pos:column="12">11<pos:position pos:line="28" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="16">5<pos:position pos:line="28" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="19">"persistentConnStatus: clen="<pos:position pos:line="28" pos:column="48"/></literal> <operator pos:line="28" pos:column="49">&lt;&lt;<pos:position pos:line="28" pos:column="57"/></operator> <name pos:line="28" pos:column="52">clen<pos:position pos:line="28" pos:column="56"/></name></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/* If the body size is unknown we must wait for EOF */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">clen<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">&lt;<pos:position pos:line="31" pos:column="18"/></operator> <literal type="number" pos:line="31" pos:column="16">0<pos:position pos:line="31" pos:column="17"/></literal></expr>)<pos:position pos:line="31" pos:column="18"/></condition><then pos:line="31" pos:column="18">
        <block type="pseudo"><return pos:line="32" pos:column="9">return <expr><name pos:line="32" pos:column="16">INCOMPLETE_MSG<pos:position pos:line="32" pos:column="30"/></name></expr>;<pos:position pos:line="32" pos:column="31"/></return></block></then></if>

    <comment type="block" format="doxygen" pos:line="34" pos:column="5">/** \par
     * If the body size is known, we must wait until we've gotten all of it. */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">clen<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">&gt;<pos:position pos:line="36" pos:column="18"/></operator> <literal type="number" pos:line="36" pos:column="16">0<pos:position pos:line="36" pos:column="17"/></literal></expr>)<pos:position pos:line="36" pos:column="18"/></condition><then pos:line="36" pos:column="18"> <block pos:line="36" pos:column="19">{
        <comment type="line" pos:line="37" pos:column="9">// old technique:</comment>
        <comment type="line" pos:line="38" pos:column="9">// if (entry-&gt;mem_obj-&gt;endOffset() &lt; vrep-&gt;content_length + vrep-&gt;hdr_sz)</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">const<pos:position pos:line="39" pos:column="14"/></specifier> <name pos:line="39" pos:column="15">int64_t<pos:position pos:line="39" pos:column="22"/></name></type> <name pos:line="39" pos:column="23">body_bytes_read<pos:position pos:line="39" pos:column="38"/></name> <init pos:line="39" pos:column="39">= <expr><name pos:line="39" pos:column="41">reply_bytes_read<pos:position pos:line="39" pos:column="57"/></name> <operator pos:line="39" pos:column="58">-<pos:position pos:line="39" pos:column="59"/></operator> <name pos:line="39" pos:column="60">header_bytes_read<pos:position pos:line="39" pos:column="77"/></name></expr></init></decl>;<pos:position pos:line="39" pos:column="78"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">debugs<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><literal type="number" pos:line="40" pos:column="16">11<pos:position pos:line="40" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="40" pos:column="19">5<pos:position pos:line="40" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="22">"persistentConnStatus: body_bytes_read="<pos:position pos:line="40" pos:column="62"/></literal> <operator pos:line="40" pos:column="63">&lt;&lt;<pos:position pos:line="40" pos:column="71"/></operator>
               <name pos:line="41" pos:column="16">body_bytes_read<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">&lt;&lt;<pos:position pos:line="41" pos:column="40"/></operator> <literal type="string" pos:line="41" pos:column="35">" content_length="<pos:position pos:line="41" pos:column="53"/></literal> <operator pos:line="41" pos:column="54">&lt;&lt;<pos:position pos:line="41" pos:column="62"/></operator> <name><name pos:line="41" pos:column="57">vrep<pos:position pos:line="41" pos:column="61"/></name><operator pos:line="41" pos:column="61">-&gt;<pos:position pos:line="41" pos:column="66"/></operator><name pos:line="41" pos:column="63">content_length<pos:position pos:line="41" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="79"/></expr_stmt>

        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name pos:line="43" pos:column="13">body_bytes_read<pos:position pos:line="43" pos:column="28"/></name> <operator pos:line="43" pos:column="29">&lt;<pos:position pos:line="43" pos:column="33"/></operator> <name><name pos:line="43" pos:column="31">vrep<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">-&gt;<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="37">content_length<pos:position pos:line="43" pos:column="51"/></name></name></expr>)<pos:position pos:line="43" pos:column="52"/></condition><then pos:line="43" pos:column="52">
            <block type="pseudo"><return pos:line="44" pos:column="13">return <expr><name pos:line="44" pos:column="20">INCOMPLETE_MSG<pos:position pos:line="44" pos:column="34"/></name></expr>;<pos:position pos:line="44" pos:column="35"/></return></block></then></if>

        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">body_bytes_truncated<pos:position pos:line="46" pos:column="33"/></name> <operator pos:line="46" pos:column="34">&gt;<pos:position pos:line="46" pos:column="38"/></operator> <literal type="number" pos:line="46" pos:column="36">0<pos:position pos:line="46" pos:column="37"/></literal></expr>)<pos:position pos:line="46" pos:column="38"/></condition><then pos:line="46" pos:column="38"> <comment type="line" pos:line="46" pos:column="39">// already read more than needed</comment>
            <block type="pseudo"><return pos:line="47" pos:column="13">return <expr><name pos:line="47" pos:column="20">COMPLETE_NONPERSISTENT_MSG<pos:position pos:line="47" pos:column="46"/></name></expr>;<pos:position pos:line="47" pos:column="47"/></return></block></then></if> <comment type="line" pos:line="47" pos:column="48">// disable pconns</comment>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <comment type="block" format="doxygen" pos:line="50" pos:column="5">/** \par
     * If there is no message body or we got it all, we can be persistent */</comment>
    <return pos:line="52" pos:column="5">return <expr><call><name pos:line="52" pos:column="12">statusIfComplete<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">()<pos:position pos:line="52" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="31"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
