<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2063_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">uint32_t<pos:position pos:line="1" pos:column="9"/></name></type>
<name><name pos:line="2" pos:column="1">CacheDigest<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">CalcMaskSize<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">uint64_t<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">cap<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">uint8_t<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">bpe<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">uint64_t<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">bitCount<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><operator pos:line="4" pos:column="25">(<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">cap<pos:position pos:line="4" pos:column="29"/></name> <operator pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="32">bpe<pos:position pos:line="4" pos:column="35"/></name><operator pos:line="4" pos:column="35">)<pos:position pos:line="4" pos:column="36"/></operator> <operator pos:line="4" pos:column="37">+<pos:position pos:line="4" pos:column="38"/></operator> <literal type="number" pos:line="4" pos:column="39">7<pos:position pos:line="4" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">bitCount<pos:position pos:line="5" pos:column="20"/></name> <operator pos:line="5" pos:column="21">&lt;<pos:position pos:line="5" pos:column="25"/></operator> <name pos:line="5" pos:column="23">INT_MAX<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="32"/></expr_stmt> <comment type="line" pos:line="5" pos:column="33">// dont 31-bit overflow later</comment>
    <return pos:line="6" pos:column="5">return <expr><cast type="static" pos:line="6" pos:column="12">static_cast<argument_list type="generic" pos:line="6" pos:column="23">&lt;<argument><expr><name pos:line="6" pos:column="24">uint32_t<pos:position pos:line="6" pos:column="32"/></name></expr></argument>&gt;<pos:position pos:line="6" pos:column="36"/></argument_list><argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">bitCount<pos:position pos:line="6" pos:column="42"/></name> <operator pos:line="6" pos:column="43">/<pos:position pos:line="6" pos:column="44"/></operator> <literal type="number" pos:line="6" pos:column="45">8<pos:position pos:line="6" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></cast></expr>;<pos:position pos:line="6" pos:column="48"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
