<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5579_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">comm_check_incoming_select_handlers<pos:position pos:line="2" pos:column="36"/></name><parameter_list pos:line="2" pos:column="36">(<parameter><decl><type><name pos:line="2" pos:column="37">int<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">nfds<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">int<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">fds<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">fd<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">maxfd<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">PF<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">hdl<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><name pos:line="7" pos:column="15">NULL<pos:position pos:line="7" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">fd_set<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">read_mask<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">fd_set<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">write_mask<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">FD_ZERO<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><operator pos:line="10" pos:column="13">&amp;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="14">read_mask<pos:position pos:line="10" pos:column="23"/></name></expr></argument>)<pos:position pos:line="10" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">FD_ZERO<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">(<argument><expr><operator pos:line="11" pos:column="13">&amp;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="14">write_mask<pos:position pos:line="11" pos:column="24"/></name></expr></argument>)<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">incoming_sockets_accepted<pos:position pos:line="12" pos:column="30"/></name> <operator pos:line="12" pos:column="31">=<pos:position pos:line="12" pos:column="32"/></operator> <literal type="number" pos:line="12" pos:column="33">0<pos:position pos:line="12" pos:column="34"/></literal></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>

    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><expr><name pos:line="14" pos:column="10">i<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr>;<pos:position pos:line="14" pos:column="16"/></init> <condition><expr><name pos:line="14" pos:column="17">i<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&lt;<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="21">nfds<pos:position pos:line="14" pos:column="25"/></name></expr>;<pos:position pos:line="14" pos:column="26"/></condition> <incr><expr><operator pos:line="14" pos:column="27">++<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">i<pos:position pos:line="14" pos:column="30"/></name></expr></incr>)<pos:position pos:line="14" pos:column="31"/></control> <block pos:line="14" pos:column="32">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">fd<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name><name pos:line="15" pos:column="14">fds<pos:position pos:line="15" pos:column="17"/></name><index pos:line="15" pos:column="17">[<expr><name pos:line="15" pos:column="18">i<pos:position pos:line="15" pos:column="19"/></name></expr>]<pos:position pos:line="15" pos:column="20"/></index></name></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">fd_table<pos:position pos:line="17" pos:column="21"/></name><index pos:line="17" pos:column="21">[<expr><name pos:line="17" pos:column="22">fd<pos:position pos:line="17" pos:column="24"/></name></expr>]<pos:position pos:line="17" pos:column="25"/></index></name><operator pos:line="17" pos:column="25">.<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">read_handler<pos:position pos:line="17" pos:column="38"/></name></expr>)<pos:position pos:line="17" pos:column="39"/></condition><then pos:line="17" pos:column="39"> <block pos:line="17" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">FD_SET<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">fd<pos:position pos:line="18" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="24">&amp;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="25">read_mask<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>

            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><name pos:line="20" pos:column="17">fd<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">&gt;<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="22">maxfd<pos:position pos:line="20" pos:column="27"/></name></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28">
                <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">maxfd<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">fd<pos:position pos:line="21" pos:column="27"/></name></expr>;<pos:position pos:line="21" pos:column="28"/></expr_stmt></block></then></if>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if>

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">fd_table<pos:position pos:line="24" pos:column="21"/></name><index pos:line="24" pos:column="21">[<expr><name pos:line="24" pos:column="22">fd<pos:position pos:line="24" pos:column="24"/></name></expr>]<pos:position pos:line="24" pos:column="25"/></index></name><operator pos:line="24" pos:column="25">.<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">write_handler<pos:position pos:line="24" pos:column="39"/></name></expr>)<pos:position pos:line="24" pos:column="40"/></condition><then pos:line="24" pos:column="40"> <block pos:line="24" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">FD_SET<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">fd<pos:position pos:line="25" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="24">&amp;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="25">write_mask<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="37"/></expr_stmt>

            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name pos:line="27" pos:column="17">fd<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">&gt;<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="22">maxfd<pos:position pos:line="27" pos:column="27"/></name></expr>)<pos:position pos:line="27" pos:column="28"/></condition><then pos:line="27" pos:column="28">
                <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="17">maxfd<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">fd<pos:position pos:line="28" pos:column="27"/></name></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt></block></then></if>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></for>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">maxfd<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">++<pos:position pos:line="32" pos:column="16"/></operator> <operator pos:line="32" pos:column="17">==<pos:position pos:line="32" pos:column="19"/></operator> <literal type="number" pos:line="32" pos:column="20">0<pos:position pos:line="32" pos:column="21"/></literal></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22">
        <block type="pseudo"><return pos:line="33" pos:column="9">return <expr><operator pos:line="33" pos:column="16">-<pos:position pos:line="33" pos:column="17"/></operator><literal type="number" pos:line="33" pos:column="17">1<pos:position pos:line="33" pos:column="18"/></literal></expr>;<pos:position pos:line="33" pos:column="19"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">getCurrentTime<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">()<pos:position pos:line="35" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="37" pos:column="5">++<pos:position pos:line="37" pos:column="7"/></operator> <name><name pos:line="37" pos:column="8">statCounter<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">.<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">syscalls<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">.<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="29">selects<pos:position pos:line="37" pos:column="36"/></name></name></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name pos:line="39" pos:column="9">select<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">maxfd<pos:position pos:line="39" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="23">&amp;<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="24">read_mask<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="35">&amp;<pos:position pos:line="39" pos:column="40"/></operator><name pos:line="39" pos:column="36">write_mask<pos:position pos:line="39" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="48">NULL<pos:position pos:line="39" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="54">&amp;<pos:position pos:line="39" pos:column="59"/></operator><name pos:line="39" pos:column="55">zero_tv<pos:position pos:line="39" pos:column="62"/></name></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call> <operator pos:line="39" pos:column="64">&lt;<pos:position pos:line="39" pos:column="68"/></operator> <literal type="number" pos:line="39" pos:column="66">1<pos:position pos:line="39" pos:column="67"/></literal></expr>)<pos:position pos:line="39" pos:column="68"/></condition><then pos:line="39" pos:column="68">
        <block type="pseudo"><return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">incoming_sockets_accepted<pos:position pos:line="40" pos:column="41"/></name></expr>;<pos:position pos:line="40" pos:column="42"/></return></block></then></if>

    <for pos:line="42" pos:column="5">for <control pos:line="42" pos:column="9">(<init><expr><name pos:line="42" pos:column="10">i<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">=<pos:position pos:line="42" pos:column="13"/></operator> <literal type="number" pos:line="42" pos:column="14">0<pos:position pos:line="42" pos:column="15"/></literal></expr>;<pos:position pos:line="42" pos:column="16"/></init> <condition><expr><name pos:line="42" pos:column="17">i<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">&lt;<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="21">nfds<pos:position pos:line="42" pos:column="25"/></name></expr>;<pos:position pos:line="42" pos:column="26"/></condition> <incr><expr><operator pos:line="42" pos:column="27">++<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="29">i<pos:position pos:line="42" pos:column="30"/></name></expr></incr>)<pos:position pos:line="42" pos:column="31"/></control> <block pos:line="42" pos:column="32">{
        <expr_stmt><expr><name pos:line="43" pos:column="9">fd<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <name><name pos:line="43" pos:column="14">fds<pos:position pos:line="43" pos:column="17"/></name><index pos:line="43" pos:column="17">[<expr><name pos:line="43" pos:column="18">i<pos:position pos:line="43" pos:column="19"/></name></expr>]<pos:position pos:line="43" pos:column="20"/></index></name></expr>;<pos:position pos:line="43" pos:column="21"/></expr_stmt>

        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">FD_ISSET<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">fd<pos:position pos:line="45" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="26">&amp;<pos:position pos:line="45" pos:column="31"/></operator><name pos:line="45" pos:column="27">read_mask<pos:position pos:line="45" pos:column="36"/></name></expr></argument>)<pos:position pos:line="45" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="38"/></condition><then pos:line="45" pos:column="38"> <block pos:line="45" pos:column="39">{
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><operator pos:line="46" pos:column="17">(<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">hdl<pos:position pos:line="46" pos:column="21"/></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <name><name pos:line="46" pos:column="24">fd_table<pos:position pos:line="46" pos:column="32"/></name><index pos:line="46" pos:column="32">[<expr><name pos:line="46" pos:column="33">fd<pos:position pos:line="46" pos:column="35"/></name></expr>]<pos:position pos:line="46" pos:column="36"/></index></name><operator pos:line="46" pos:column="36">.<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="37">read_handler<pos:position pos:line="46" pos:column="49"/></name><operator pos:line="46" pos:column="49">)<pos:position pos:line="46" pos:column="50"/></operator> <operator pos:line="46" pos:column="51">!=<pos:position pos:line="46" pos:column="53"/></operator> <name pos:line="46" pos:column="54">NULL<pos:position pos:line="46" pos:column="58"/></name></expr>)<pos:position pos:line="46" pos:column="59"/></condition><then pos:line="46" pos:column="59"> <block pos:line="46" pos:column="60">{
                <expr_stmt><expr><name><name pos:line="47" pos:column="17">fd_table<pos:position pos:line="47" pos:column="25"/></name><index pos:line="47" pos:column="25">[<expr><name pos:line="47" pos:column="26">fd<pos:position pos:line="47" pos:column="28"/></name></expr>]<pos:position pos:line="47" pos:column="29"/></index></name><operator pos:line="47" pos:column="29">.<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="30">read_handler<pos:position pos:line="47" pos:column="42"/></name> <operator pos:line="47" pos:column="43">=<pos:position pos:line="47" pos:column="44"/></operator> <name pos:line="47" pos:column="45">NULL<pos:position pos:line="47" pos:column="49"/></name></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="48" pos:column="17">commUpdateReadBits<pos:position pos:line="48" pos:column="35"/></name><argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">fd<pos:position pos:line="48" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="40">NULL<pos:position pos:line="48" pos:column="44"/></name></expr></argument>)<pos:position pos:line="48" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="49" pos:column="17">hdl<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><name pos:line="49" pos:column="21">fd<pos:position pos:line="49" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="25">fd_table<pos:position pos:line="49" pos:column="33"/></name><index pos:line="49" pos:column="33">[<expr><name pos:line="49" pos:column="34">fd<pos:position pos:line="49" pos:column="36"/></name></expr>]<pos:position pos:line="49" pos:column="37"/></index></name><operator pos:line="49" pos:column="37">.<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="38">read_data<pos:position pos:line="49" pos:column="47"/></name></expr></argument>)<pos:position pos:line="49" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="49"/></expr_stmt>
            }<pos:position pos:line="50" pos:column="14"/></block></then> <else pos:line="50" pos:column="15">else <block pos:line="50" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">debugs<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><literal type="number" pos:line="51" pos:column="24">5<pos:position pos:line="51" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="27">DBG_IMPORTANT<pos:position pos:line="51" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="42">"comm_select_incoming: FD "<pos:position pos:line="51" pos:column="69"/></literal> <operator pos:line="51" pos:column="70">&lt;&lt;<pos:position pos:line="51" pos:column="78"/></operator> <name pos:line="51" pos:column="73">fd<pos:position pos:line="51" pos:column="75"/></name> <operator pos:line="51" pos:column="76">&lt;&lt;<pos:position pos:line="51" pos:column="84"/></operator> <literal type="string" pos:line="51" pos:column="79">" NULL read handler"<pos:position pos:line="51" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="101"/></expr_stmt>
            }<pos:position pos:line="52" pos:column="14"/></block></else></if>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>

        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><call><name pos:line="55" pos:column="13">FD_ISSET<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><name pos:line="55" pos:column="22">fd<pos:position pos:line="55" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="26">&amp;<pos:position pos:line="55" pos:column="31"/></operator><name pos:line="55" pos:column="27">write_mask<pos:position pos:line="55" pos:column="37"/></name></expr></argument>)<pos:position pos:line="55" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="39"/></condition><then pos:line="55" pos:column="39"> <block pos:line="55" pos:column="40">{
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><operator pos:line="56" pos:column="17">(<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">hdl<pos:position pos:line="56" pos:column="21"/></name> <operator pos:line="56" pos:column="22">=<pos:position pos:line="56" pos:column="23"/></operator> <name><name pos:line="56" pos:column="24">fd_table<pos:position pos:line="56" pos:column="32"/></name><index pos:line="56" pos:column="32">[<expr><name pos:line="56" pos:column="33">fd<pos:position pos:line="56" pos:column="35"/></name></expr>]<pos:position pos:line="56" pos:column="36"/></index></name><operator pos:line="56" pos:column="36">.<pos:position pos:line="56" pos:column="37"/></operator><name pos:line="56" pos:column="37">write_handler<pos:position pos:line="56" pos:column="50"/></name><operator pos:line="56" pos:column="50">)<pos:position pos:line="56" pos:column="51"/></operator> <operator pos:line="56" pos:column="52">!=<pos:position pos:line="56" pos:column="54"/></operator> <name pos:line="56" pos:column="55">NULL<pos:position pos:line="56" pos:column="59"/></name></expr>)<pos:position pos:line="56" pos:column="60"/></condition><then pos:line="56" pos:column="60"> <block pos:line="56" pos:column="61">{
                <expr_stmt><expr><name><name pos:line="57" pos:column="17">fd_table<pos:position pos:line="57" pos:column="25"/></name><index pos:line="57" pos:column="25">[<expr><name pos:line="57" pos:column="26">fd<pos:position pos:line="57" pos:column="28"/></name></expr>]<pos:position pos:line="57" pos:column="29"/></index></name><operator pos:line="57" pos:column="29">.<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="30">write_handler<pos:position pos:line="57" pos:column="43"/></name> <operator pos:line="57" pos:column="44">=<pos:position pos:line="57" pos:column="45"/></operator> <name pos:line="57" pos:column="46">NULL<pos:position pos:line="57" pos:column="50"/></name></expr>;<pos:position pos:line="57" pos:column="51"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="58" pos:column="17">commUpdateWriteBits<pos:position pos:line="58" pos:column="36"/></name><argument_list pos:line="58" pos:column="36">(<argument><expr><name pos:line="58" pos:column="37">fd<pos:position pos:line="58" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="41">NULL<pos:position pos:line="58" pos:column="45"/></name></expr></argument>)<pos:position pos:line="58" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="47"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="59" pos:column="17">hdl<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><name pos:line="59" pos:column="21">fd<pos:position pos:line="59" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="25">fd_table<pos:position pos:line="59" pos:column="33"/></name><index pos:line="59" pos:column="33">[<expr><name pos:line="59" pos:column="34">fd<pos:position pos:line="59" pos:column="36"/></name></expr>]<pos:position pos:line="59" pos:column="37"/></index></name><operator pos:line="59" pos:column="37">.<pos:position pos:line="59" pos:column="38"/></operator><name pos:line="59" pos:column="38">write_data<pos:position pos:line="59" pos:column="48"/></name></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="50"/></expr_stmt>
            }<pos:position pos:line="60" pos:column="14"/></block></then> <else pos:line="60" pos:column="15">else <block pos:line="60" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="61" pos:column="17">debugs<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><literal type="number" pos:line="61" pos:column="24">5<pos:position pos:line="61" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="27">DBG_IMPORTANT<pos:position pos:line="61" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="42">"comm_select_incoming: FD "<pos:position pos:line="61" pos:column="69"/></literal> <operator pos:line="61" pos:column="70">&lt;&lt;<pos:position pos:line="61" pos:column="78"/></operator> <name pos:line="61" pos:column="73">fd<pos:position pos:line="61" pos:column="75"/></name> <operator pos:line="61" pos:column="76">&lt;&lt;<pos:position pos:line="61" pos:column="84"/></operator> <literal type="string" pos:line="61" pos:column="79">" NULL write handler"<pos:position pos:line="61" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="102"/></expr_stmt>
            }<pos:position pos:line="62" pos:column="14"/></block></else></if>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if>
    }<pos:position pos:line="64" pos:column="6"/></block></for>

    <return pos:line="66" pos:column="5">return <expr><name pos:line="66" pos:column="12">incoming_sockets_accepted<pos:position pos:line="66" pos:column="37"/></name></expr>;<pos:position pos:line="66" pos:column="38"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
