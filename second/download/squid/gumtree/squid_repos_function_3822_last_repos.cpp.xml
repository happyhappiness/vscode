<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3822_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">applyTlsDetailsToSSL<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">SSL<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">ssl<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="32">Security<pos:position pos:line="2" pos:column="40"/></name><operator pos:line="2" pos:column="40">::<pos:position pos:line="2" pos:column="42"/></operator><name pos:line="2" pos:column="42">TlsDetails<pos:position pos:line="2" pos:column="52"/></name><operator pos:line="2" pos:column="52">::<pos:position pos:line="2" pos:column="54"/></operator><name pos:line="2" pos:column="54">Pointer<pos:position pos:line="2" pos:column="61"/></name></name> <specifier pos:line="2" pos:column="62">const<pos:position pos:line="2" pos:column="67"/></specifier> <modifier pos:line="2" pos:column="68">&amp;<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="69">details<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="78">Ssl<pos:position pos:line="2" pos:column="81"/></name><operator pos:line="2" pos:column="81">::<pos:position pos:line="2" pos:column="83"/></operator><name pos:line="2" pos:column="83">BumpMode<pos:position pos:line="2" pos:column="91"/></name></name></type> <name pos:line="2" pos:column="92">bumpMode<pos:position pos:line="2" pos:column="100"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="101"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// To increase the possibility for bumping after peek mode selection or</comment>
    <comment type="line" pos:line="5" pos:column="5">// splicing after stare mode selection it is good to set the</comment>
    <comment type="line" pos:line="6" pos:column="5">// SSL protocol version.</comment>
    <comment type="line" pos:line="7" pos:column="5">// The SSL_set_ssl_method is wrong here because it will restrict the</comment>
    <comment type="line" pos:line="8" pos:column="5">// permitted transport version to be identical to the version used in the</comment>
    <comment type="line" pos:line="9" pos:column="5">// ClientHello message.</comment>
    <comment type="line" pos:line="10" pos:column="5">// For example will prevent comunnicating with a tls1.0 server if the</comment>
    <comment type="line" pos:line="11" pos:column="5">// client sent and tlsv1.2 Hello message.</comment>
<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><call><name pos:line="12" pos:column="5">defined<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">TLSEXT_NAMETYPE_host_name<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr></cpp:if>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name><name pos:line="13" pos:column="10">details<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">serverName<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">.<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">isEmpty<pos:position pos:line="13" pos:column="37"/></name></name><argument_list pos:line="13" pos:column="37">()<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="40"/></condition><then pos:line="13" pos:column="40"> <block pos:line="13" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">SSL_set_tlsext_host_name<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><name pos:line="14" pos:column="34">ssl<pos:position pos:line="14" pos:column="37"/></name></expr></argument>, <argument><expr><call><name><name pos:line="14" pos:column="39">details<pos:position pos:line="14" pos:column="46"/></name><operator pos:line="14" pos:column="46">-&gt;<pos:position pos:line="14" pos:column="51"/></operator><name pos:line="14" pos:column="48">serverName<pos:position pos:line="14" pos:column="58"/></name><operator pos:line="14" pos:column="58">.<pos:position pos:line="14" pos:column="59"/></operator><name pos:line="14" pos:column="59">c_str<pos:position pos:line="14" pos:column="64"/></name></name><argument_list pos:line="14" pos:column="64">()<pos:position pos:line="14" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><call><name><name pos:line="18" pos:column="10">details<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">ciphers<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">.<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="27">empty<pos:position pos:line="18" pos:column="32"/></name></name><argument_list pos:line="18" pos:column="32">()<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="35"/></condition><then pos:line="18" pos:column="35"> <block pos:line="18" pos:column="36">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">SBuf<pos:position pos:line="19" pos:column="13"/></name></type> <name pos:line="19" pos:column="14">strCiphers<pos:position pos:line="19" pos:column="24"/></name></decl>;<pos:position pos:line="19" pos:column="25"/></decl_stmt>
        <for pos:line="20" pos:column="9">for <control pos:line="20" pos:column="13">(<init><decl><type><name pos:line="20" pos:column="14">auto<pos:position pos:line="20" pos:column="18"/></name></type> <name pos:line="20" pos:column="19">cipherId<pos:position pos:line="20" pos:column="27"/></name><range pos:line="20" pos:column="27">: <expr><name><name pos:line="20" pos:column="29">details<pos:position pos:line="20" pos:column="36"/></name><operator pos:line="20" pos:column="36">-&gt;<pos:position pos:line="20" pos:column="41"/></operator><name pos:line="20" pos:column="38">ciphers<pos:position pos:line="20" pos:column="45"/></name></name></expr></range></decl></init>)<pos:position pos:line="20" pos:column="46"/></control> <block pos:line="20" pos:column="47">{
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">unsigned<pos:position pos:line="21" pos:column="21"/></name> <name pos:line="21" pos:column="22">char<pos:position pos:line="21" pos:column="26"/></name></type> <name><name pos:line="21" pos:column="27">cbytes<pos:position pos:line="21" pos:column="33"/></name><index pos:line="21" pos:column="33">[<expr><literal type="number" pos:line="21" pos:column="34">3<pos:position pos:line="21" pos:column="35"/></literal></expr>]<pos:position pos:line="21" pos:column="36"/></index></name></decl>;<pos:position pos:line="21" pos:column="37"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="22" pos:column="13">cbytes<pos:position pos:line="22" pos:column="19"/></name><index pos:line="22" pos:column="19">[<expr><literal type="number" pos:line="22" pos:column="20">0<pos:position pos:line="22" pos:column="21"/></literal></expr>]<pos:position pos:line="22" pos:column="22"/></index></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <operator pos:line="22" pos:column="25">(<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">cipherId<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">&gt;&gt;<pos:position pos:line="22" pos:column="40"/></operator> <literal type="number" pos:line="22" pos:column="38">8<pos:position pos:line="22" pos:column="39"/></literal><operator pos:line="22" pos:column="39">)<pos:position pos:line="22" pos:column="40"/></operator> <operator pos:line="22" pos:column="41">&amp;<pos:position pos:line="22" pos:column="46"/></operator> <literal type="number" pos:line="22" pos:column="43">0xFF<pos:position pos:line="22" pos:column="47"/></literal></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="23" pos:column="13">cbytes<pos:position pos:line="23" pos:column="19"/></name><index pos:line="23" pos:column="19">[<expr><literal type="number" pos:line="23" pos:column="20">1<pos:position pos:line="23" pos:column="21"/></literal></expr>]<pos:position pos:line="23" pos:column="22"/></index></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">cipherId<pos:position pos:line="23" pos:column="33"/></name> <operator pos:line="23" pos:column="34">&amp;<pos:position pos:line="23" pos:column="39"/></operator> <literal type="number" pos:line="23" pos:column="36">0xFF<pos:position pos:line="23" pos:column="40"/></literal></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="24" pos:column="13">cbytes<pos:position pos:line="24" pos:column="19"/></name><index pos:line="24" pos:column="19">[<expr><literal type="number" pos:line="24" pos:column="20">2<pos:position pos:line="24" pos:column="21"/></literal></expr>]<pos:position pos:line="24" pos:column="22"/></index></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <literal type="number" pos:line="24" pos:column="25">0<pos:position pos:line="24" pos:column="26"/></literal></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><name pos:line="25" pos:column="5">HAVE_LIBSSL_SSL_CIPHER_FIND<pos:position pos:line="25" pos:column="32"/></name></expr></cpp:if>
            <decl_stmt><decl><type><specifier pos:line="26" pos:column="13">const<pos:position pos:line="26" pos:column="18"/></specifier> <name pos:line="26" pos:column="19">SSL_CIPHER<pos:position pos:line="26" pos:column="29"/></name> <modifier pos:line="26" pos:column="30">*<pos:position pos:line="26" pos:column="31"/></modifier></type><name pos:line="26" pos:column="31">c<pos:position pos:line="26" pos:column="32"/></name> <init pos:line="26" pos:column="33">= <expr><call><name pos:line="26" pos:column="35">SSL_CIPHER_find<pos:position pos:line="26" pos:column="50"/></name><argument_list pos:line="26" pos:column="50">(<argument><expr><name pos:line="26" pos:column="51">ssl<pos:position pos:line="26" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="56">cbytes<pos:position pos:line="26" pos:column="62"/></name></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="64"/></decl_stmt>
<cpp:else pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">else<pos:position pos:line="27" pos:column="6"/></cpp:directive></cpp:else>
            <decl_stmt><decl><type><specifier pos:line="28" pos:column="13">const<pos:position pos:line="28" pos:column="18"/></specifier> <name pos:line="28" pos:column="19">SSL_METHOD<pos:position pos:line="28" pos:column="29"/></name> <modifier pos:line="28" pos:column="30">*<pos:position pos:line="28" pos:column="31"/></modifier></type><name pos:line="28" pos:column="31">method<pos:position pos:line="28" pos:column="37"/></name> <init pos:line="28" pos:column="38">= <expr><call><name pos:line="28" pos:column="40">SSLv23_method<pos:position pos:line="28" pos:column="53"/></name><argument_list pos:line="28" pos:column="53">()<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="56"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="29" pos:column="13">const<pos:position pos:line="29" pos:column="18"/></specifier> <name pos:line="29" pos:column="19">SSL_CIPHER<pos:position pos:line="29" pos:column="29"/></name> <modifier pos:line="29" pos:column="30">*<pos:position pos:line="29" pos:column="31"/></modifier></type><name pos:line="29" pos:column="31">c<pos:position pos:line="29" pos:column="32"/></name> <init pos:line="29" pos:column="33">= <expr><call><name><name pos:line="29" pos:column="35">method<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">-&gt;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="43">get_cipher_by_char<pos:position pos:line="29" pos:column="61"/></name></name><argument_list pos:line="29" pos:column="61">(<argument><expr><name pos:line="29" pos:column="62">cbytes<pos:position pos:line="29" pos:column="68"/></name></expr></argument>)<pos:position pos:line="29" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="70"/></decl_stmt>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><name pos:line="31" pos:column="17">c<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">!=<pos:position pos:line="31" pos:column="21"/></operator> <name pos:line="31" pos:column="22">NULL<pos:position pos:line="31" pos:column="26"/></name></expr>)<pos:position pos:line="31" pos:column="27"/></condition><then pos:line="31" pos:column="27"> <block pos:line="31" pos:column="28">{
                <if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><operator pos:line="32" pos:column="21">!<pos:position pos:line="32" pos:column="22"/></operator><call><name><name pos:line="32" pos:column="22">strCiphers<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">.<pos:position pos:line="32" pos:column="33"/></operator><name pos:line="32" pos:column="33">isEmpty<pos:position pos:line="32" pos:column="40"/></name></name><argument_list pos:line="32" pos:column="40">()<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="43"/></condition><then pos:line="32" pos:column="43">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="33" pos:column="21">strCiphers<pos:position pos:line="33" pos:column="31"/></name><operator pos:line="33" pos:column="31">.<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="32">append<pos:position pos:line="33" pos:column="38"/></name></name><argument_list pos:line="33" pos:column="38">(<argument><expr><literal type="string" pos:line="33" pos:column="39">":"<pos:position pos:line="33" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name pos:line="34" pos:column="17">strCiphers<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">.<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="28">append<pos:position pos:line="34" pos:column="34"/></name></name><argument_list pos:line="34" pos:column="34">(<argument><expr><call><name pos:line="34" pos:column="35">SSL_CIPHER_get_name<pos:position pos:line="34" pos:column="54"/></name><argument_list pos:line="34" pos:column="54">(<argument><expr><name pos:line="34" pos:column="55">c<pos:position pos:line="34" pos:column="56"/></name></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="59"/></expr_stmt>
            }<pos:position pos:line="35" pos:column="14"/></block></then></if>
        }<pos:position pos:line="36" pos:column="10"/></block></for>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><call><name><name pos:line="37" pos:column="14">strCiphers<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">.<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">isEmpty<pos:position pos:line="37" pos:column="32"/></name></name><argument_list pos:line="37" pos:column="32">()<pos:position pos:line="37" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="35"/></condition><then pos:line="37" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="38" pos:column="13">SSL_set_cipher_list<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">ssl<pos:position pos:line="38" pos:column="36"/></name></expr></argument>, <argument><expr><call><name><name pos:line="38" pos:column="38">strCiphers<pos:position pos:line="38" pos:column="48"/></name><operator pos:line="38" pos:column="48">.<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="49">c_str<pos:position pos:line="38" pos:column="54"/></name></name><argument_list pos:line="38" pos:column="54">()<pos:position pos:line="38" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="58"/></expr_stmt></block></then></if>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

<cpp:if pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">if<pos:position pos:line="41" pos:column="4"/></cpp:directive> <expr><call><name pos:line="41" pos:column="5">defined<pos:position pos:line="41" pos:column="12"/></name><argument_list pos:line="41" pos:column="12">(<argument><expr><name pos:line="41" pos:column="13">SSL_OP_NO_COMPRESSION<pos:position pos:line="41" pos:column="34"/></name></expr></argument>)<pos:position pos:line="41" pos:column="35"/></argument_list></call></expr></cpp:if> <comment type="block" pos:line="41" pos:column="36">/* XXX: OpenSSL 0.9.8k lacks SSL_OP_NO_COMPRESSION */</comment>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><operator pos:line="42" pos:column="9">!<pos:position pos:line="42" pos:column="10"/></operator><name><name pos:line="42" pos:column="10">details<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">-&gt;<pos:position pos:line="42" pos:column="22"/></operator><name pos:line="42" pos:column="19">compressionSupported<pos:position pos:line="42" pos:column="39"/></name></name></expr>)<pos:position pos:line="42" pos:column="40"/></condition><then pos:line="42" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="9">SSL_set_options<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name pos:line="43" pos:column="25">ssl<pos:position pos:line="43" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="30">SSL_OP_NO_COMPRESSION<pos:position pos:line="43" pos:column="51"/></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt></block></then></if>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">if<pos:position pos:line="46" pos:column="4"/></cpp:directive> <expr><call><name pos:line="46" pos:column="5">defined<pos:position pos:line="46" pos:column="12"/></name><argument_list pos:line="46" pos:column="12">(<argument><expr><name pos:line="46" pos:column="13">TLSEXT_STATUSTYPE_ocsp<pos:position pos:line="46" pos:column="35"/></name></expr></argument>)<pos:position pos:line="46" pos:column="36"/></argument_list></call></expr></cpp:if>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name><name pos:line="47" pos:column="9">details<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">-&gt;<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="18">tlsStatusRequest<pos:position pos:line="47" pos:column="34"/></name></name></expr>)<pos:position pos:line="47" pos:column="35"/></condition><then pos:line="47" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="9">SSL_set_tlsext_status_type<pos:position pos:line="48" pos:column="35"/></name><argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">ssl<pos:position pos:line="48" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="41">TLSEXT_STATUSTYPE_ocsp<pos:position pos:line="48" pos:column="63"/></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt></block></then></if>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">if<pos:position pos:line="51" pos:column="4"/></cpp:directive> <expr><call><name pos:line="51" pos:column="5">defined<pos:position pos:line="51" pos:column="12"/></name><argument_list pos:line="51" pos:column="12">(<argument><expr><name pos:line="51" pos:column="13">TLSEXT_TYPE_application_layer_protocol_negotiation<pos:position pos:line="51" pos:column="63"/></name></expr></argument>)<pos:position pos:line="51" pos:column="64"/></argument_list></call></expr></cpp:if>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><operator pos:line="52" pos:column="9">!<pos:position pos:line="52" pos:column="10"/></operator><call><name><name pos:line="52" pos:column="10">details<pos:position pos:line="52" pos:column="17"/></name><operator pos:line="52" pos:column="17">-&gt;<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="19">tlsAppLayerProtoNeg<pos:position pos:line="52" pos:column="38"/></name><operator pos:line="52" pos:column="38">.<pos:position pos:line="52" pos:column="39"/></operator><name pos:line="52" pos:column="39">isEmpty<pos:position pos:line="52" pos:column="46"/></name></name><argument_list pos:line="52" pos:column="46">()<pos:position pos:line="52" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="49"/></condition><then pos:line="52" pos:column="49"> <block pos:line="52" pos:column="50">{
        <if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">bumpMode<pos:position pos:line="53" pos:column="21"/></name> <operator pos:line="53" pos:column="22">==<pos:position pos:line="53" pos:column="24"/></operator> <name><name pos:line="53" pos:column="25">Ssl<pos:position pos:line="53" pos:column="28"/></name><operator pos:line="53" pos:column="28">::<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="30">bumpPeek<pos:position pos:line="53" pos:column="38"/></name></name></expr>)<pos:position pos:line="53" pos:column="39"/></condition><then pos:line="53" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="13">SSL_set_alpn_protos<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">ssl<pos:position pos:line="54" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="38">(<pos:position pos:line="54" pos:column="39"/></operator><specifier pos:line="54" pos:column="39">const<pos:position pos:line="54" pos:column="44"/></specifier> <name pos:line="54" pos:column="45">unsigned<pos:position pos:line="54" pos:column="53"/></name> <name pos:line="54" pos:column="54">char<pos:position pos:line="54" pos:column="58"/></name><operator pos:line="54" pos:column="58">*<pos:position pos:line="54" pos:column="59"/></operator><operator pos:line="54" pos:column="59">)<pos:position pos:line="54" pos:column="60"/></operator><call><name><name pos:line="54" pos:column="60">details<pos:position pos:line="54" pos:column="67"/></name><operator pos:line="54" pos:column="67">-&gt;<pos:position pos:line="54" pos:column="72"/></operator><name pos:line="54" pos:column="69">tlsAppLayerProtoNeg<pos:position pos:line="54" pos:column="88"/></name><operator pos:line="54" pos:column="88">.<pos:position pos:line="54" pos:column="89"/></operator><name pos:line="54" pos:column="89">rawContent<pos:position pos:line="54" pos:column="99"/></name></name><argument_list pos:line="54" pos:column="99">()<pos:position pos:line="54" pos:column="101"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="54" pos:column="103">details<pos:position pos:line="54" pos:column="110"/></name><operator pos:line="54" pos:column="110">-&gt;<pos:position pos:line="54" pos:column="115"/></operator><name pos:line="54" pos:column="112">tlsAppLayerProtoNeg<pos:position pos:line="54" pos:column="131"/></name><operator pos:line="54" pos:column="131">.<pos:position pos:line="54" pos:column="132"/></operator><name pos:line="54" pos:column="132">length<pos:position pos:line="54" pos:column="138"/></name></name><argument_list pos:line="54" pos:column="138">()<pos:position pos:line="54" pos:column="140"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="141"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="142"/></expr_stmt></block></then>
        <else pos:line="55" pos:column="9">else <block pos:line="55" pos:column="14">{
            <decl_stmt><decl><specifier pos:line="56" pos:column="13">static<pos:position pos:line="56" pos:column="19"/></specifier> <type><specifier pos:line="56" pos:column="20">const<pos:position pos:line="56" pos:column="25"/></specifier> <name pos:line="56" pos:column="26">unsigned<pos:position pos:line="56" pos:column="34"/></name> <name pos:line="56" pos:column="35">char<pos:position pos:line="56" pos:column="39"/></name></type> <name><name pos:line="56" pos:column="40">supported_protos<pos:position pos:line="56" pos:column="56"/></name><index pos:line="56" pos:column="56">[]<pos:position pos:line="56" pos:column="58"/></index></name> <init pos:line="56" pos:column="59">= <expr><block pos:line="56" pos:column="61">{<expr><literal type="number" pos:line="56" pos:column="62">8<pos:position pos:line="56" pos:column="63"/></literal></expr>, <expr><literal type="char" pos:line="56" pos:column="65">'h'<pos:position pos:line="56" pos:column="68"/></literal></expr>,<expr><literal type="char" pos:line="56" pos:column="69">'t'<pos:position pos:line="56" pos:column="72"/></literal></expr>,<expr><literal type="char" pos:line="56" pos:column="73">'t'<pos:position pos:line="56" pos:column="76"/></literal></expr>, <expr><literal type="char" pos:line="56" pos:column="78">'p'<pos:position pos:line="56" pos:column="81"/></literal></expr>, <expr><literal type="char" pos:line="56" pos:column="83">'/'<pos:position pos:line="56" pos:column="86"/></literal></expr>, <expr><literal type="char" pos:line="56" pos:column="88">'1'<pos:position pos:line="56" pos:column="91"/></literal></expr>, <expr><literal type="char" pos:line="56" pos:column="93">'.'<pos:position pos:line="56" pos:column="96"/></literal></expr>, <expr><literal type="char" pos:line="56" pos:column="98">'1'<pos:position pos:line="56" pos:column="101"/></literal></expr>}<pos:position pos:line="56" pos:column="102"/></block></expr></init></decl>;<pos:position pos:line="56" pos:column="103"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">SSL_set_alpn_protos<pos:position pos:line="57" pos:column="32"/></name><argument_list pos:line="57" pos:column="32">(<argument><expr><name pos:line="57" pos:column="33">ssl<pos:position pos:line="57" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="38">supported_protos<pos:position pos:line="57" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="56">sizeof<argument_list pos:line="57" pos:column="62">(<argument><expr><name pos:line="57" pos:column="63">supported_protos<pos:position pos:line="57" pos:column="79"/></name></expr></argument>)<pos:position pos:line="57" pos:column="80"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="82"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></else></if>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
