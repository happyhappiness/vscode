<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2381_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">idnsReadVCHeader<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name><name pos:line="2" pos:column="24">Comm<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">ConnectionPointer<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">conn<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">buf<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">size_t<pos:position pos:line="2" pos:column="72"/></name></type> <name pos:line="2" pos:column="73">len<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="78">comm_err_t<pos:position pos:line="2" pos:column="88"/></name></type> <name pos:line="2" pos:column="89">flag<pos:position pos:line="2" pos:column="93"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="95">int<pos:position pos:line="2" pos:column="98"/></name></type> <name pos:line="2" pos:column="99">xerrno<pos:position pos:line="2" pos:column="105"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="107">void<pos:position pos:line="2" pos:column="111"/></name> <modifier pos:line="2" pos:column="112">*<pos:position pos:line="2" pos:column="113"/></modifier></type><name pos:line="2" pos:column="113">data<pos:position pos:line="2" pos:column="117"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="118"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">nsvc<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type> <name pos:line="4" pos:column="12">vc<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><operator pos:line="4" pos:column="17">(<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">nsvc<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></operator><operator pos:line="4" pos:column="24">)<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">data<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">flag<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">==<pos:position pos:line="6" pos:column="16"/></operator> <name pos:line="6" pos:column="17">COMM_ERR_CLOSING<pos:position pos:line="6" pos:column="33"/></name></expr>)<pos:position pos:line="6" pos:column="34"/></condition><then pos:line="6" pos:column="34">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">flag<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">!=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">COMM_OK<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">||<pos:position pos:line="9" pos:column="27"/></operator> <name pos:line="9" pos:column="28">len<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">&lt;=<pos:position pos:line="9" pos:column="37"/></operator> <literal type="number" pos:line="9" pos:column="35">0<pos:position pos:line="9" pos:column="36"/></literal></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37"> <block pos:line="9" pos:column="38">{
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name><name pos:line="10" pos:column="13">Comm<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">::<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">IsConnOpen<pos:position pos:line="10" pos:column="29"/></name></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">conn<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="36"/></condition><then pos:line="10" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="11" pos:column="13">conn<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">-&gt;<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="19">close<pos:position pos:line="11" pos:column="24"/></name></name><argument_list pos:line="11" pos:column="24">()<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt></block></then></if>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="15" pos:column="5">vc<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">-&gt;<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="9">read_msglen<pos:position pos:line="15" pos:column="20"/></name></name> <operator pos:line="15" pos:column="21">+=<pos:position pos:line="15" pos:column="23"/></operator> <name pos:line="15" pos:column="24">len<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">assert<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name><name pos:line="17" pos:column="12">vc<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">read_msglen<pos:position pos:line="17" pos:column="27"/></name></name> <operator pos:line="17" pos:column="28">&lt;=<pos:position pos:line="17" pos:column="33"/></operator> <literal type="number" pos:line="17" pos:column="31">2<pos:position pos:line="17" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">vc<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">read_msglen<pos:position pos:line="19" pos:column="24"/></name></name> <operator pos:line="19" pos:column="25">&lt;<pos:position pos:line="19" pos:column="29"/></operator> <literal type="number" pos:line="19" pos:column="27">2<pos:position pos:line="19" pos:column="28"/></literal></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29"> <block pos:line="19" pos:column="30">{
        <decl_stmt><decl><type><name><name pos:line="20" pos:column="9">AsyncCall<pos:position pos:line="20" pos:column="18"/></name><operator pos:line="20" pos:column="18">::<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">Pointer<pos:position pos:line="20" pos:column="27"/></name></name></type> <name pos:line="20" pos:column="28">call<pos:position pos:line="20" pos:column="32"/></name> <init pos:line="20" pos:column="33">= <expr><call><name pos:line="20" pos:column="35">commCbCall<pos:position pos:line="20" pos:column="45"/></name><argument_list pos:line="20" pos:column="45">(<argument><expr><literal type="number" pos:line="20" pos:column="46">5<pos:position pos:line="20" pos:column="47"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="20" pos:column="48">4<pos:position pos:line="20" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="51">"idnsReadVCHeader"<pos:position pos:line="20" pos:column="69"/></literal></expr></argument>,
                                             <argument><expr><call><name pos:line="21" pos:column="46">CommIoCbPtrFun<pos:position pos:line="21" pos:column="60"/></name><argument_list pos:line="21" pos:column="60">(<argument><expr><name pos:line="21" pos:column="61">idnsReadVCHeader<pos:position pos:line="21" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="79">vc<pos:position pos:line="21" pos:column="81"/></name></expr></argument>)<pos:position pos:line="21" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="84"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">comm_read<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">conn<pos:position pos:line="22" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="25">buf<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">+<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="29">len<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="34">2<pos:position pos:line="22" pos:column="35"/></literal> <operator pos:line="22" pos:column="36">-<pos:position pos:line="22" pos:column="37"/></operator> <name><name pos:line="22" pos:column="38">vc<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">-&gt;<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="42">read_msglen<pos:position pos:line="22" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="55">call<pos:position pos:line="22" pos:column="59"/></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="61"/></expr_stmt>
        <return pos:line="23" pos:column="9">return;<pos:position pos:line="23" pos:column="16"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="26" pos:column="5">vc<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">-&gt;<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="9">read_msglen<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <literal type="number" pos:line="26" pos:column="23">0<pos:position pos:line="26" pos:column="24"/></literal></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="28" pos:column="5">vc<pos:position pos:line="28" pos:column="7"/></name><operator pos:line="28" pos:column="7">-&gt;<pos:position pos:line="28" pos:column="12"/></operator><name pos:line="28" pos:column="9">msglen<pos:position pos:line="28" pos:column="15"/></name></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">ntohs<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><name><name pos:line="28" pos:column="24">vc<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">msglen<pos:position pos:line="28" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">!<pos:position pos:line="30" pos:column="10"/></operator><name><name pos:line="30" pos:column="10">vc<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">msglen<pos:position pos:line="30" pos:column="20"/></name></name></expr>)<pos:position pos:line="30" pos:column="21"/></condition><then pos:line="30" pos:column="21"> <block pos:line="30" pos:column="22">{
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name><name pos:line="31" pos:column="13">Comm<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">::<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="19">IsConnOpen<pos:position pos:line="31" pos:column="29"/></name></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">conn<pos:position pos:line="31" pos:column="34"/></name></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="36"/></condition><then pos:line="31" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="32" pos:column="13">conn<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">-&gt;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="19">close<pos:position pos:line="32" pos:column="24"/></name></name><argument_list pos:line="32" pos:column="24">()<pos:position pos:line="32" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt></block></then></if>
        <return pos:line="33" pos:column="9">return;<pos:position pos:line="33" pos:column="16"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="36" pos:column="5">vc<pos:position pos:line="36" pos:column="7"/></name><operator pos:line="36" pos:column="7">-&gt;<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="9">msg<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">-&gt;<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="14">init<pos:position pos:line="36" pos:column="18"/></name></name><argument_list pos:line="36" pos:column="18">(<argument><expr><name><name pos:line="36" pos:column="19">vc<pos:position pos:line="36" pos:column="21"/></name><operator pos:line="36" pos:column="21">-&gt;<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="23">msglen<pos:position pos:line="36" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="31">vc<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">-&gt;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="35">msglen<pos:position pos:line="36" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="43"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="37" pos:column="5">AsyncCall<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">::<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">Pointer<pos:position pos:line="37" pos:column="23"/></name></name></type> <name pos:line="37" pos:column="24">call<pos:position pos:line="37" pos:column="28"/></name> <init pos:line="37" pos:column="29">= <expr><call><name pos:line="37" pos:column="31">commCbCall<pos:position pos:line="37" pos:column="41"/></name><argument_list pos:line="37" pos:column="41">(<argument><expr><literal type="number" pos:line="37" pos:column="42">5<pos:position pos:line="37" pos:column="43"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="37" pos:column="44">4<pos:position pos:line="37" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="47">"idnsReadVC"<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>,
                                         <argument><expr><call><name pos:line="38" pos:column="42">CommIoCbPtrFun<pos:position pos:line="38" pos:column="56"/></name><argument_list pos:line="38" pos:column="56">(<argument><expr><name pos:line="38" pos:column="57">idnsReadVC<pos:position pos:line="38" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="69">vc<pos:position pos:line="38" pos:column="71"/></name></expr></argument>)<pos:position pos:line="38" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="74"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">comm_read<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">conn<pos:position pos:line="39" pos:column="19"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="21">vc<pos:position pos:line="39" pos:column="23"/></name><operator pos:line="39" pos:column="23">-&gt;<pos:position pos:line="39" pos:column="28"/></operator><name pos:line="39" pos:column="25">msg<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">-&gt;<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="30">buf<pos:position pos:line="39" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="35">vc<pos:position pos:line="39" pos:column="37"/></name><operator pos:line="39" pos:column="37">-&gt;<pos:position pos:line="39" pos:column="42"/></operator><name pos:line="39" pos:column="39">msglen<pos:position pos:line="39" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="47">call<pos:position pos:line="39" pos:column="51"/></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
