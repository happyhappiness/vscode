<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5432_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Mem<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Report<pos:position pos:line="2" pos:column="12"/></name></name><parameter_list pos:line="2" pos:column="12">()<pos:position pos:line="2" pos:column="14"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">13<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"Memory pools are '"<pos:position pos:line="4" pos:column="39"/></literal> <operator pos:line="4" pos:column="40">&lt;&lt;<pos:position pos:line="4" pos:column="48"/></operator>
           <operator pos:line="5" pos:column="12">(<pos:position pos:line="5" pos:column="13"/></operator><ternary><condition><expr><name><name pos:line="5" pos:column="13">Config<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">.<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">onoff<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">.<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">mem_pools<pos:position pos:line="5" pos:column="35"/></name></name></expr> ?<pos:position pos:line="5" pos:column="37"/></condition><then pos:line="5" pos:column="37"> <expr><literal type="string" pos:line="5" pos:column="38">"on"<pos:position pos:line="5" pos:column="42"/></literal></expr> <pos:position pos:line="5" pos:column="43"/></then><else pos:line="5" pos:column="43">: <expr><literal type="string" pos:line="5" pos:column="45">"off"<pos:position pos:line="5" pos:column="50"/></literal></expr></else></ternary><operator pos:line="5" pos:column="50">)<pos:position pos:line="5" pos:column="51"/></operator>  <operator pos:line="5" pos:column="53">&lt;&lt;<pos:position pos:line="5" pos:column="61"/></operator> <literal type="string" pos:line="5" pos:column="56">"'; limit: "<pos:position pos:line="5" pos:column="68"/></literal> <operator pos:line="5" pos:column="69">&lt;&lt;<pos:position pos:line="5" pos:column="77"/></operator>
           <call><name><name pos:line="6" pos:column="12">std<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">::<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">setprecision<pos:position pos:line="6" pos:column="29"/></name></name><argument_list pos:line="6" pos:column="29">(<argument><expr><literal type="number" pos:line="6" pos:column="30">3<pos:position pos:line="6" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call> <operator pos:line="6" pos:column="33">&lt;&lt;<pos:position pos:line="6" pos:column="41"/></operator> <call><name pos:line="6" pos:column="36">toMB<pos:position pos:line="6" pos:column="40"/></name><argument_list pos:line="6" pos:column="40">(<argument><expr><call><name><name pos:line="6" pos:column="41">MemPools<pos:position pos:line="6" pos:column="49"/></name><operator pos:line="6" pos:column="49">::<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="51">GetInstance<pos:position pos:line="6" pos:column="62"/></name></name><argument_list pos:line="6" pos:column="62">()<pos:position pos:line="6" pos:column="64"/></argument_list></call><operator pos:line="6" pos:column="64">.<pos:position pos:line="6" pos:column="65"/></operator><call><name pos:line="6" pos:column="65">idleLimit<pos:position pos:line="6" pos:column="74"/></name><argument_list pos:line="6" pos:column="74">()<pos:position pos:line="6" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="77"/></argument_list></call> <operator pos:line="6" pos:column="78">&lt;&lt;<pos:position pos:line="6" pos:column="86"/></operator>
           <literal type="string" pos:line="7" pos:column="12">" MB"<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="19"/></expr_stmt>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
