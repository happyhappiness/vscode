<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3972_squid-3.3.14.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name><name pos:line="1" pos:column="7">libecap<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">Area<pos:position pos:line="1" pos:column="20"/></name></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">metaValue<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">(<parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name><name pos:line="2" pos:column="47">libecap<pos:position pos:line="2" pos:column="54"/></name><operator pos:line="2" pos:column="54">::<pos:position pos:line="2" pos:column="56"/></operator><name pos:line="2" pos:column="56">Name<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">&amp;<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="62">name<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list> <specifier pos:line="2" pos:column="68">const<pos:position pos:line="2" pos:column="73"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpRequest<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">request<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><cast type="dynamic" pos:line="4" pos:column="28">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="40">&lt;<argument><expr><name pos:line="4" pos:column="41">HttpRequest<pos:position pos:line="4" pos:column="52"/></name><operator pos:line="4" pos:column="52">*<pos:position pos:line="4" pos:column="53"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="57"/></argument_list><argument_list pos:line="4" pos:column="54">(<argument><expr><ternary><condition><expr><name pos:line="4" pos:column="55">theCauseRep<pos:position pos:line="4" pos:column="66"/></name></expr> ?<pos:position pos:line="4" pos:column="68"/></condition><then pos:line="4" pos:column="68">
                           <expr><call><name><name pos:line="5" pos:column="28">theCauseRep<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">-&gt;<pos:position pos:line="5" pos:column="44"/></operator><name pos:line="5" pos:column="41">raw<pos:position pos:line="5" pos:column="44"/></name></name><argument_list pos:line="5" pos:column="44">()<pos:position pos:line="5" pos:column="46"/></argument_list></call><operator pos:line="5" pos:column="46">.<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="47">header<pos:position pos:line="5" pos:column="53"/></name></expr> <pos:position pos:line="5" pos:column="54"/></then><else pos:line="5" pos:column="54">: <expr><call><name><name pos:line="5" pos:column="56">theVirginRep<pos:position pos:line="5" pos:column="68"/></name><operator pos:line="5" pos:column="68">.<pos:position pos:line="5" pos:column="69"/></operator><name pos:line="5" pos:column="69">raw<pos:position pos:line="5" pos:column="72"/></name></name><argument_list pos:line="5" pos:column="72">()<pos:position pos:line="5" pos:column="74"/></argument_list></call><operator pos:line="5" pos:column="74">.<pos:position pos:line="5" pos:column="75"/></operator><name pos:line="5" pos:column="75">header<pos:position pos:line="5" pos:column="81"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="5" pos:column="82"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="5" pos:column="83"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name pos:line="6" pos:column="10">request<pos:position pos:line="6" pos:column="17"/></name></expr></argument>)<pos:position pos:line="6" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">HttpReply<pos:position pos:line="7" pos:column="14"/></name> <modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">reply<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><cast type="dynamic" pos:line="7" pos:column="24">dynamic_cast<argument_list type="generic" pos:line="7" pos:column="36">&lt;<argument><expr><name pos:line="7" pos:column="37">HttpReply<pos:position pos:line="7" pos:column="46"/></name><operator pos:line="7" pos:column="46">*<pos:position pos:line="7" pos:column="47"/></operator></expr></argument>&gt;<pos:position pos:line="7" pos:column="51"/></argument_list><argument_list pos:line="7" pos:column="48">(<argument><expr><call><name><name pos:line="7" pos:column="49">theVirginRep<pos:position pos:line="7" pos:column="61"/></name><operator pos:line="7" pos:column="61">.<pos:position pos:line="7" pos:column="62"/></operator><name pos:line="7" pos:column="62">raw<pos:position pos:line="7" pos:column="65"/></name></name><argument_list pos:line="7" pos:column="65">()<pos:position pos:line="7" pos:column="67"/></argument_list></call><operator pos:line="7" pos:column="67">.<pos:position pos:line="7" pos:column="68"/></operator><name pos:line="7" pos:column="68">header<pos:position pos:line="7" pos:column="74"/></name></expr></argument>)<pos:position pos:line="7" pos:column="75"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="7" pos:column="76"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name><name pos:line="9" pos:column="9">name<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">.<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">known<pos:position pos:line="9" pos:column="19"/></name></name><argument_list pos:line="9" pos:column="19">()<pos:position pos:line="9" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22"> <block pos:line="9" pos:column="23">{ <comment type="line" pos:line="9" pos:column="25">// must check to avoid empty names matching unset cfg</comment>
        <typedef pos:line="10" pos:column="9">typedef <type><name><name pos:line="10" pos:column="17">Adaptation<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">::<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">Config<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">::<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="37">MetaHeaders<pos:position pos:line="10" pos:column="48"/></name><operator pos:line="10" pos:column="48">::<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="50">iterator<pos:position pos:line="10" pos:column="58"/></name></name></type> <name pos:line="10" pos:column="59">ACAMLI<pos:position pos:line="10" pos:column="65"/></name>;<pos:position pos:line="10" pos:column="66"/></typedef>
        <for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init><decl><type><name pos:line="11" pos:column="14">ACAMLI<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">i<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><call><name><name pos:line="11" pos:column="25">Adaptation<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">::<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">Config<pos:position pos:line="11" pos:column="43"/></name><operator pos:line="11" pos:column="43">::<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="45">metaHeaders<pos:position pos:line="11" pos:column="56"/></name><operator pos:line="11" pos:column="56">.<pos:position pos:line="11" pos:column="57"/></operator><name pos:line="11" pos:column="57">begin<pos:position pos:line="11" pos:column="62"/></name></name><argument_list pos:line="11" pos:column="62">()<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="65"/></init> <condition><expr><name pos:line="11" pos:column="66">i<pos:position pos:line="11" pos:column="67"/></name> <operator pos:line="11" pos:column="68">!=<pos:position pos:line="11" pos:column="70"/></operator> <call><name><name pos:line="11" pos:column="71">Adaptation<pos:position pos:line="11" pos:column="81"/></name><operator pos:line="11" pos:column="81">::<pos:position pos:line="11" pos:column="83"/></operator><name pos:line="11" pos:column="83">Config<pos:position pos:line="11" pos:column="89"/></name><operator pos:line="11" pos:column="89">::<pos:position pos:line="11" pos:column="91"/></operator><name pos:line="11" pos:column="91">metaHeaders<pos:position pos:line="11" pos:column="102"/></name><operator pos:line="11" pos:column="102">.<pos:position pos:line="11" pos:column="103"/></operator><name pos:line="11" pos:column="103">end<pos:position pos:line="11" pos:column="106"/></name></name><argument_list pos:line="11" pos:column="106">()<pos:position pos:line="11" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="109"/></condition> <incr><expr><operator pos:line="11" pos:column="110">++<pos:position pos:line="11" pos:column="112"/></operator><name pos:line="11" pos:column="112">i<pos:position pos:line="11" pos:column="113"/></name></expr></incr>)<pos:position pos:line="11" pos:column="114"/></control> <block pos:line="11" pos:column="115">{
            <if pos:line="12" pos:column="13">if <condition pos:line="12" pos:column="16">(<expr><name pos:line="12" pos:column="17">name<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">==<pos:position pos:line="12" pos:column="24"/></operator> <call><name><operator pos:line="12" pos:column="25">(<pos:position pos:line="12" pos:column="26"/></operator><operator pos:line="12" pos:column="26">*<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">i<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">)<pos:position pos:line="12" pos:column="29"/></operator><operator pos:line="12" pos:column="29">-&gt;<pos:position pos:line="12" pos:column="34"/></operator><name><name pos:line="12" pos:column="31">name<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">.<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="36">termedBuf<pos:position pos:line="12" pos:column="45"/></name></name></name><argument_list pos:line="12" pos:column="45">()<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48"> <block pos:line="12" pos:column="49">{
                <if pos:line="13" pos:column="17">if <condition pos:line="13" pos:column="20">(<decl><type><specifier pos:line="13" pos:column="21">const<pos:position pos:line="13" pos:column="26"/></specifier> <name pos:line="13" pos:column="27">char<pos:position pos:line="13" pos:column="31"/></name> <modifier pos:line="13" pos:column="32">*<pos:position pos:line="13" pos:column="33"/></modifier></type><name pos:line="13" pos:column="33">value<pos:position pos:line="13" pos:column="38"/></name> <init pos:line="13" pos:column="39">= <expr><call><name><operator pos:line="13" pos:column="41">(<pos:position pos:line="13" pos:column="42"/></operator><operator pos:line="13" pos:column="42">*<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="43">i<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">)<pos:position pos:line="13" pos:column="45"/></operator><operator pos:line="13" pos:column="45">-&gt;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="47">match<pos:position pos:line="13" pos:column="52"/></name></name><argument_list pos:line="13" pos:column="52">(<argument><expr><name pos:line="13" pos:column="53">request<pos:position pos:line="13" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="62">reply<pos:position pos:line="13" pos:column="67"/></name></expr></argument>)<pos:position pos:line="13" pos:column="68"/></argument_list></call></expr></init></decl>)<pos:position pos:line="13" pos:column="69"/></condition><then pos:line="13" pos:column="69">
                    <block type="pseudo"><return pos:line="14" pos:column="21">return <expr><call><name><name pos:line="14" pos:column="28">libecap<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">::<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">Area<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">::<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="43">FromTempString<pos:position pos:line="14" pos:column="57"/></name></name><argument_list pos:line="14" pos:column="57">(<argument><expr><name pos:line="14" pos:column="58">value<pos:position pos:line="14" pos:column="63"/></name></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="65"/></return></block></then>
                <else pos:line="15" pos:column="17">else
                    <block type="pseudo"><return pos:line="16" pos:column="21">return <expr><call><name><name pos:line="16" pos:column="28">libecap<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">::<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="37">Area<pos:position pos:line="16" pos:column="41"/></name></name><argument_list pos:line="16" pos:column="41">()<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></return></block></else></if>
            }<pos:position pos:line="17" pos:column="14"/></block></then></if>
        }<pos:position pos:line="18" pos:column="10"/></block></for>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <return pos:line="21" pos:column="5">return <expr><call><name><name pos:line="21" pos:column="12">libecap<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">::<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="21">Area<pos:position pos:line="21" pos:column="25"/></name></name><argument_list pos:line="21" pos:column="25">()<pos:position pos:line="21" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="28"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
