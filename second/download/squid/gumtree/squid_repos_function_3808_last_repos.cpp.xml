<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3808_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ServerBio<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">readAndParse<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">buf<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">int<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">size<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">BIO<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">table<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">int<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">result<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><call><name pos:line="4" pos:column="24">readAndBuffer<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">(<argument><expr><name pos:line="4" pos:column="38">table<pos:position pos:line="4" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">result<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">&lt;=<pos:position pos:line="5" pos:column="21"/></operator> <literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><name pos:line="6" pos:column="16">result<pos:position pos:line="6" pos:column="22"/></name></expr>;<pos:position pos:line="6" pos:column="23"/></return></block></then></if>

    <try pos:line="8" pos:column="5">try <block pos:line="8" pos:column="9">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><call><name><name pos:line="9" pos:column="14">parser_<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">.<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">parseHello<pos:position pos:line="9" pos:column="32"/></name></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">rbuf<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="39"/></condition><then pos:line="9" pos:column="39"> <block pos:line="9" pos:column="40">{
            <comment type="line" pos:line="10" pos:column="13">// need more data to finish parsing</comment>
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">BIO_set_retry_read<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">table<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
            <return pos:line="12" pos:column="13">return <expr><operator pos:line="12" pos:column="20">-<pos:position pos:line="12" pos:column="21"/></operator><literal type="number" pos:line="12" pos:column="21">1<pos:position pos:line="12" pos:column="22"/></literal></expr>;<pos:position pos:line="12" pos:column="23"/></return>
        }<pos:position pos:line="13" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="14" pos:column="9">parsedHandshake<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">=<pos:position pos:line="14" pos:column="26"/></operator> <literal type="boolean" pos:line="14" pos:column="27">true<pos:position pos:line="14" pos:column="31"/></literal></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt> <comment type="line" pos:line="14" pos:column="33">// done parsing (successfully)</comment>
    }<pos:position pos:line="15" pos:column="6"/></block>
    <catch pos:line="16" pos:column="5">catch <parameter_list pos:line="16" pos:column="11">(<parameter><decl><type><specifier pos:line="16" pos:column="12">const<pos:position pos:line="16" pos:column="17"/></specifier> <name><name pos:line="16" pos:column="18">std<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">::<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">exception<pos:position pos:line="16" pos:column="32"/></name></name> <modifier pos:line="16" pos:column="33">&amp;<pos:position pos:line="16" pos:column="38"/></modifier></type><name pos:line="16" pos:column="34">ex<pos:position pos:line="16" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="16" pos:column="37"/></parameter_list> <block pos:line="16" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">83<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">2<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"parsing error on FD "<pos:position pos:line="17" pos:column="45"/></literal> <operator pos:line="17" pos:column="46">&lt;&lt;<pos:position pos:line="17" pos:column="54"/></operator> <name pos:line="17" pos:column="49">fd_<pos:position pos:line="17" pos:column="52"/></name> <operator pos:line="17" pos:column="53">&lt;&lt;<pos:position pos:line="17" pos:column="61"/></operator> <literal type="string" pos:line="17" pos:column="56">": "<pos:position pos:line="17" pos:column="60"/></literal> <operator pos:line="17" pos:column="61">&lt;&lt;<pos:position pos:line="17" pos:column="69"/></operator> <call><name><name pos:line="17" pos:column="64">ex<pos:position pos:line="17" pos:column="66"/></name><operator pos:line="17" pos:column="66">.<pos:position pos:line="17" pos:column="67"/></operator><name pos:line="17" pos:column="67">what<pos:position pos:line="17" pos:column="71"/></name></name><argument_list pos:line="17" pos:column="71">()<pos:position pos:line="17" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name pos:line="18" pos:column="9">parsedHandshake<pos:position pos:line="18" pos:column="24"/></name> <operator pos:line="18" pos:column="25">=<pos:position pos:line="18" pos:column="26"/></operator> <literal type="boolean" pos:line="18" pos:column="27">true<pos:position pos:line="18" pos:column="31"/></literal></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt> <comment type="line" pos:line="18" pos:column="33">// done parsing (due to an error)</comment>
        <expr_stmt><expr><name pos:line="19" pos:column="9">parseError<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <literal type="boolean" pos:line="19" pos:column="22">true<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></catch></try>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">holdRead_<pos:position pos:line="22" pos:column="18"/></name></expr>)<pos:position pos:line="22" pos:column="19"/></condition><then pos:line="22" pos:column="19"> <block pos:line="22" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">83<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="20">7<pos:position pos:line="23" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="23">"Hold flag is set, retry latter. (Hold "<pos:position pos:line="23" pos:column="63"/></literal> <operator pos:line="23" pos:column="64">&lt;&lt;<pos:position pos:line="23" pos:column="72"/></operator> <name pos:line="23" pos:column="67">size<pos:position pos:line="23" pos:column="71"/></name> <operator pos:line="23" pos:column="72">&lt;&lt;<pos:position pos:line="23" pos:column="80"/></operator> <literal type="string" pos:line="23" pos:column="75">"bytes)"<pos:position pos:line="23" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">BIO_set_retry_read<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">table<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt>
        <return pos:line="25" pos:column="9">return <expr><operator pos:line="25" pos:column="16">-<pos:position pos:line="25" pos:column="17"/></operator><literal type="number" pos:line="25" pos:column="17">1<pos:position pos:line="25" pos:column="18"/></literal></expr>;<pos:position pos:line="25" pos:column="19"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <return pos:line="28" pos:column="5">return <expr><call><name pos:line="28" pos:column="12">giveBuffered<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">buf<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="30">size<pos:position pos:line="28" pos:column="34"/></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="36"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
