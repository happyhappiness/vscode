<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5031_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">ClientSocketContext<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">handleUserRequest<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">SBuf<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">&amp;<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="44">cmd<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">SBuf<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">&amp;<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="55">params<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">params<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">.<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">isEmpty<pos:position pos:line="4" pos:column="23"/></name></name><argument_list pos:line="4" pos:column="23">()<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="26"/></condition><then pos:line="4" pos:column="26">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><call><name pos:line="5" pos:column="16">earlyError<pos:position pos:line="5" pos:column="26"/></name><argument_list pos:line="5" pos:column="26">(<argument><expr><name pos:line="5" pos:column="27">eekMissingUsername<pos:position pos:line="5" pos:column="45"/></name></expr></argument>)<pos:position pos:line="5" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="47"/></return></block></then></if>

    <comment type="line" pos:line="7" pos:column="5">// find the [end of] user name</comment>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name><name pos:line="8" pos:column="11">SBuf<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">::<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">size_type<pos:position pos:line="8" pos:column="26"/></name></name></type> <name pos:line="8" pos:column="27">eou<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><call><name><name pos:line="8" pos:column="33">params<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">.<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">rfind<pos:position pos:line="8" pos:column="45"/></name></name><argument_list pos:line="8" pos:column="45">(<argument><expr><literal type="char" pos:line="8" pos:column="46">'@'<pos:position pos:line="8" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="51"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">eou<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">==<pos:position pos:line="9" pos:column="15"/></operator> <name><name pos:line="9" pos:column="16">SBuf<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">::<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">npos<pos:position pos:line="9" pos:column="26"/></name></name> <operator pos:line="9" pos:column="27">||<pos:position pos:line="9" pos:column="29"/></operator> <name pos:line="9" pos:column="30">eou<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">+<pos:position pos:line="9" pos:column="35"/></operator> <literal type="number" pos:line="9" pos:column="36">1<pos:position pos:line="9" pos:column="37"/></literal> <operator pos:line="9" pos:column="38">&gt;=<pos:position pos:line="9" pos:column="43"/></operator> <call><name><name pos:line="9" pos:column="41">params<pos:position pos:line="9" pos:column="47"/></name><operator pos:line="9" pos:column="47">.<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="48">length<pos:position pos:line="9" pos:column="54"/></name></name><argument_list pos:line="9" pos:column="54">()<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="57"/></condition><then pos:line="9" pos:column="57">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><call><name pos:line="10" pos:column="16">earlyError<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">eekMissingHost<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></return></block></then></if>

    <comment type="line" pos:line="12" pos:column="5">// Determine the intended destination.</comment>
    <expr_stmt><expr><name pos:line="13" pos:column="5">host<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <call><name><name pos:line="13" pos:column="12">params<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">substr<pos:position pos:line="13" pos:column="25"/></name></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">eou<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">+<pos:position pos:line="13" pos:column="31"/></operator> <literal type="number" pos:line="13" pos:column="32">1<pos:position pos:line="13" pos:column="33"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="35">params<pos:position pos:line="13" pos:column="41"/></name><operator pos:line="13" pos:column="41">.<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="42">length<pos:position pos:line="13" pos:column="48"/></name></name><argument_list pos:line="13" pos:column="48">()<pos:position pos:line="13" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt>
    <comment type="line" pos:line="14" pos:column="5">// If we can parse it as raw IPv6 address, then surround with "[]".</comment>
    <comment type="line" pos:line="15" pos:column="5">// Otherwise (domain, IPv4, [bracketed] IPv6, garbage, etc), use as is.</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name><name pos:line="16" pos:column="9">host<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">.<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">find<pos:position pos:line="16" pos:column="18"/></name></name><argument_list pos:line="16" pos:column="18">(<argument><expr><literal type="char" pos:line="16" pos:column="19">':'<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="23"/></argument_list></call> <operator pos:line="16" pos:column="24">!=<pos:position pos:line="16" pos:column="26"/></operator> <name><name pos:line="16" pos:column="27">SBuf<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">::<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="33">npos<pos:position pos:line="16" pos:column="37"/></name></name></expr>)<pos:position pos:line="16" pos:column="38"/></condition><then pos:line="16" pos:column="38"> <block pos:line="16" pos:column="39">{
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">const<pos:position pos:line="17" pos:column="14"/></specifier> <name><name pos:line="17" pos:column="15">Ip<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">::<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">Address<pos:position pos:line="17" pos:column="26"/></name></name></type> <name pos:line="17" pos:column="27">ipa<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><call><name><name pos:line="17" pos:column="31">host<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">.<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">c_str<pos:position pos:line="17" pos:column="41"/></name></name><argument_list pos:line="17" pos:column="41">()<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></decl>;<pos:position pos:line="17" pos:column="45"/></decl_stmt>
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><call><name><name pos:line="18" pos:column="14">ipa<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">isAnyAddr<pos:position pos:line="18" pos:column="27"/></name></name><argument_list pos:line="18" pos:column="27">()<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="30"/></condition><then pos:line="18" pos:column="30"> <block pos:line="18" pos:column="31">{
            <decl_stmt><decl><type><name pos:line="19" pos:column="13">char<pos:position pos:line="19" pos:column="17"/></name></type> <name><name pos:line="19" pos:column="18">ipBuf<pos:position pos:line="19" pos:column="23"/></name><index pos:line="19" pos:column="23">[<expr><name pos:line="19" pos:column="24">MAX_IPSTRLEN<pos:position pos:line="19" pos:column="36"/></name></expr>]<pos:position pos:line="19" pos:column="37"/></index></name></decl>;<pos:position pos:line="19" pos:column="38"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">ipa<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">.<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">toHostStr<pos:position pos:line="20" pos:column="26"/></name></name><argument_list pos:line="20" pos:column="26">(<argument><expr><name pos:line="20" pos:column="27">ipBuf<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">MAX_IPSTRLEN<pos:position pos:line="20" pos:column="46"/></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><name pos:line="21" pos:column="13">host<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">ipBuf<pos:position pos:line="21" pos:column="25"/></name></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="25" pos:column="5">// const SBuf login = params.substr(0, eou);</comment>
    <expr_stmt><expr><call><name><name pos:line="26" pos:column="5">params<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">chop<pos:position pos:line="26" pos:column="16"/></name></name><argument_list pos:line="26" pos:column="16">(<argument><expr><literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="20">eou<pos:position pos:line="26" pos:column="23"/></name></expr></argument>)<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt> <comment type="line" pos:line="26" pos:column="26">// leave just the login part for the peer</comment>

    <decl_stmt><decl><type><name pos:line="28" pos:column="5">SBuf<pos:position pos:line="28" pos:column="9"/></name></type> <name pos:line="28" pos:column="10">oldUri<pos:position pos:line="28" pos:column="16"/></name></decl>;<pos:position pos:line="28" pos:column="17"/></decl_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name><name pos:line="29" pos:column="9">master<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">clientReadGreeting<pos:position pos:line="29" pos:column="35"/></name></name></expr>)<pos:position pos:line="29" pos:column="36"/></condition><then pos:line="29" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="9">oldUri<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <name pos:line="30" pos:column="18">uri<pos:position pos:line="30" pos:column="21"/></name></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">master<pos:position pos:line="32" pos:column="11"/></name><operator pos:line="32" pos:column="11">-&gt;<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="13">workingDir<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">.<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="24">clear<pos:position pos:line="32" pos:column="29"/></name></name><argument_list pos:line="32" pos:column="29">()<pos:position pos:line="32" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">calcUri<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">NULL<pos:position pos:line="33" pos:column="17"/></name></expr></argument>)<pos:position pos:line="33" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="19"/></expr_stmt>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">!<pos:position pos:line="35" pos:column="10"/></operator><name><name pos:line="35" pos:column="10">master<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">clientReadGreeting<pos:position pos:line="35" pos:column="36"/></name></name></expr>)<pos:position pos:line="35" pos:column="37"/></condition><then pos:line="35" pos:column="37"> <block pos:line="35" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">debugs<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><literal type="number" pos:line="36" pos:column="16">9<pos:position pos:line="36" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="19">3<pos:position pos:line="36" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="22">"set URI to "<pos:position pos:line="36" pos:column="35"/></literal> <operator pos:line="36" pos:column="36">&lt;&lt;<pos:position pos:line="36" pos:column="44"/></operator> <name pos:line="36" pos:column="39">uri<pos:position pos:line="36" pos:column="42"/></name></expr></argument>)<pos:position pos:line="36" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then> <elseif pos:line="37" pos:column="7">else <if pos:line="37" pos:column="12">if <condition pos:line="37" pos:column="15">(<expr><call><name><name pos:line="37" pos:column="16">oldUri<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">.<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">caseCmp<pos:position pos:line="37" pos:column="30"/></name></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name pos:line="37" pos:column="31">uri<pos:position pos:line="37" pos:column="34"/></name></expr></argument>)<pos:position pos:line="37" pos:column="35"/></argument_list></call> <operator pos:line="37" pos:column="36">==<pos:position pos:line="37" pos:column="38"/></operator> <literal type="number" pos:line="37" pos:column="39">0<pos:position pos:line="37" pos:column="40"/></literal></expr>)<pos:position pos:line="37" pos:column="41"/></condition><then pos:line="37" pos:column="41"> <block pos:line="37" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">debugs<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="number" pos:line="38" pos:column="16">9<pos:position pos:line="38" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="19">5<pos:position pos:line="38" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="22">"kept URI as "<pos:position pos:line="38" pos:column="36"/></literal> <operator pos:line="38" pos:column="37">&lt;&lt;<pos:position pos:line="38" pos:column="45"/></operator> <name pos:line="38" pos:column="40">oldUri<pos:position pos:line="38" pos:column="46"/></name></expr></argument>)<pos:position pos:line="38" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif> <else pos:line="39" pos:column="7">else <block pos:line="39" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">debugs<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><literal type="number" pos:line="40" pos:column="16">9<pos:position pos:line="40" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="19">3<pos:position pos:line="40" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="22">"reset URI from "<pos:position pos:line="40" pos:column="39"/></literal> <operator pos:line="40" pos:column="40">&lt;&lt;<pos:position pos:line="40" pos:column="48"/></operator> <name pos:line="40" pos:column="43">oldUri<pos:position pos:line="40" pos:column="49"/></name> <operator pos:line="40" pos:column="50">&lt;&lt;<pos:position pos:line="40" pos:column="58"/></operator> <literal type="string" pos:line="40" pos:column="53">" to "<pos:position pos:line="40" pos:column="59"/></literal> <operator pos:line="40" pos:column="60">&lt;&lt;<pos:position pos:line="40" pos:column="68"/></operator> <name pos:line="40" pos:column="63">uri<pos:position pos:line="40" pos:column="66"/></name></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">closeDataConnection<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">()<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">unpinConnection<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><literal type="boolean" pos:line="42" pos:column="25">true<pos:position pos:line="42" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="31"/></expr_stmt> <comment type="line" pos:line="42" pos:column="32">// close control connection to peer</comment>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">resetLogin<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><literal type="string" pos:line="43" pos:column="20">"URI reset"<pos:position pos:line="43" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>

    <return pos:line="46" pos:column="5">return <expr><name pos:line="46" pos:column="12">NULL<pos:position pos:line="46" pos:column="16"/></name></expr>;<pos:position pos:line="46" pos:column="17"/></return> <comment type="line" pos:line="46" pos:column="18">// no early errors</comment>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
