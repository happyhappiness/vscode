<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6404_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">DiskdIOStrategy<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">unlinkFile<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">path<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">shedLoad<pos:position pos:line="4" pos:column="17"/></name><argument_list pos:line="4" pos:column="17">()<pos:position pos:line="4" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20"> <block pos:line="4" pos:column="21">{
        <comment type="block" pos:line="5" pos:column="9">/* Damn, we need to issue a sync unlink here :( */</comment>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">79<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="20">2<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="23">"storeDiskUnlink: Out of queue space, sync unlink"<pos:position pos:line="6" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">unlinkdUnlink<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">path<pos:position pos:line="7" pos:column="27"/></name></expr></argument>)<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="29"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="11" pos:column="5">/* We can attempt a diskd unlink */</comment>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">x<pos:position pos:line="12" pos:column="10"/></name></decl>;<pos:position pos:line="12" pos:column="11"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">ssize_t<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">shm_offset<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name> <modifier pos:line="16" pos:column="10">*<pos:position pos:line="16" pos:column="11"/></modifier></type><name pos:line="16" pos:column="11">buf<pos:position pos:line="16" pos:column="14"/></name></decl>;<pos:position pos:line="16" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><name pos:line="18" pos:column="5">buf<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <operator pos:line="18" pos:column="11">(<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">char<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></operator><operator pos:line="18" pos:column="18">)<pos:position pos:line="18" pos:column="19"/></operator><call><name><name pos:line="18" pos:column="19">shm<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">.<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">get<pos:position pos:line="18" pos:column="26"/></name></name><argument_list pos:line="18" pos:column="26">(<argument><expr><operator pos:line="18" pos:column="27">&amp;<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="28">shm_offset<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">xstrncpy<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">buf<pos:position pos:line="20" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="19">path<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="25">SHMBUF_BLKSZ<pos:position pos:line="20" pos:column="37"/></name></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><name pos:line="22" pos:column="5">x<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <call><name pos:line="22" pos:column="9">send<pos:position pos:line="22" pos:column="13"/></name><argument_list pos:line="22" pos:column="13">(<argument><expr><name pos:line="22" pos:column="14">_MQD_UNLINK<pos:position pos:line="22" pos:column="25"/></name></expr></argument>,
             <argument><expr><literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr></argument>,
             <argument><expr><operator pos:line="24" pos:column="14">(<pos:position pos:line="24" pos:column="15"/></operator><name><name pos:line="24" pos:column="15">StoreIOState<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">::<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="29">Pointer<pos:position pos:line="24" pos:column="36"/></name></name> <operator pos:line="24" pos:column="37">)<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="38">NULL<pos:position pos:line="24" pos:column="42"/></name></expr></argument>,
             <argument><expr><literal type="number" pos:line="25" pos:column="14">0<pos:position pos:line="25" pos:column="15"/></literal></expr></argument>,
             <argument><expr><literal type="number" pos:line="26" pos:column="14">0<pos:position pos:line="26" pos:column="15"/></literal></expr></argument>,
             <argument><expr><name pos:line="27" pos:column="14">shm_offset<pos:position pos:line="27" pos:column="24"/></name></expr></argument>)<pos:position pos:line="27" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">x<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">&lt;<pos:position pos:line="29" pos:column="15"/></operator> <literal type="number" pos:line="29" pos:column="13">0<pos:position pos:line="29" pos:column="14"/></literal></expr>)<pos:position pos:line="29" pos:column="15"/></condition><then pos:line="29" pos:column="15"> <block pos:line="29" pos:column="16">{
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">int<pos:position pos:line="30" pos:column="12"/></name></type> <name pos:line="30" pos:column="13">xerrno<pos:position pos:line="30" pos:column="19"/></name> <init pos:line="30" pos:column="20">= <expr><name pos:line="30" pos:column="22">errno<pos:position pos:line="30" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">79<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="20">DBG_IMPORTANT<pos:position pos:line="31" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="35">"storeDiskdSend UNLINK: "<pos:position pos:line="31" pos:column="60"/></literal> <operator pos:line="31" pos:column="61">&lt;&lt;<pos:position pos:line="31" pos:column="69"/></operator> <call><name pos:line="31" pos:column="64">xstrerr<pos:position pos:line="31" pos:column="71"/></name><argument_list pos:line="31" pos:column="71">(<argument><expr><name pos:line="31" pos:column="72">xerrno<pos:position pos:line="31" pos:column="78"/></name></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><call><name><operator pos:line="32" pos:column="9">::<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">unlink<pos:position pos:line="32" pos:column="17"/></name></name><argument_list pos:line="32" pos:column="17">(<argument><expr><name pos:line="32" pos:column="18">buf<pos:position pos:line="32" pos:column="21"/></name></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt>      <comment type="block" pos:line="32" pos:column="29">/* XXX EWW! */</comment>
        <comment type="line" pos:line="33" pos:column="9">//        shm.put (shm_offset);</comment>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="36" pos:column="5">++<pos:position pos:line="36" pos:column="7"/></operator><name><name pos:line="36" pos:column="7">diskd_stats<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">.<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">unlink<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">.<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="26">ops<pos:position pos:line="36" pos:column="29"/></name></name></expr>;<pos:position pos:line="36" pos:column="30"/></expr_stmt>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
