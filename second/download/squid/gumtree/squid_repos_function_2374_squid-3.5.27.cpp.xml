<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2374_squid-3.5.27.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Comm<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">ConnectionPointer<pos:position pos:line="1" pos:column="24"/></name></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">pconnPop<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name><name pos:line="2" pos:column="26">Comm<pos:position pos:line="2" pos:column="30"/></name><operator pos:line="2" pos:column="30">::<pos:position pos:line="2" pos:column="32"/></operator><name pos:line="2" pos:column="32">ConnectionPointer<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">&amp;<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="51">dest<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name pos:line="2" pos:column="63">char<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">domain<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// always call shared pool first because we need to close an idle</comment>
    <comment type="line" pos:line="5" pos:column="5">// connection there if we have to use a standby connection.</comment>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">Comm<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">::<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">ConnectionPointer<pos:position pos:line="6" pos:column="28"/></name></name></type> <name pos:line="6" pos:column="29">conn<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><call><name><name pos:line="6" pos:column="36">fwdPconnPool<pos:position pos:line="6" pos:column="48"/></name><operator pos:line="6" pos:column="48">-&gt;<pos:position pos:line="6" pos:column="53"/></operator><name pos:line="6" pos:column="50">pop<pos:position pos:line="6" pos:column="53"/></name></name><argument_list pos:line="6" pos:column="53">(<argument><expr><name pos:line="6" pos:column="54">dest<pos:position pos:line="6" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="60">domain<pos:position pos:line="6" pos:column="66"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="68">checkRetriable<pos:position pos:line="6" pos:column="82"/></name><argument_list pos:line="6" pos:column="82">()<pos:position pos:line="6" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="86"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><call><name><name pos:line="7" pos:column="10">Comm<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">::<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">IsConnOpen<pos:position pos:line="7" pos:column="26"/></name></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">conn<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="33"/></condition><then pos:line="7" pos:column="33"> <block pos:line="7" pos:column="34">{
        <comment type="line" pos:line="8" pos:column="9">// either there was no pconn to pop or this is not a retriable xaction</comment>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<decl><type><name pos:line="9" pos:column="13">CachePeer<pos:position pos:line="9" pos:column="22"/></name> <modifier pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></modifier></type><name pos:line="9" pos:column="24">peer<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><call><name><name pos:line="9" pos:column="31">dest<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">-&gt;<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="37">getPeer<pos:position pos:line="9" pos:column="44"/></name></name><argument_list pos:line="9" pos:column="44">()<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr></init></decl>)<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47"> <block pos:line="9" pos:column="48">{
            <if pos:line="10" pos:column="13">if <condition pos:line="10" pos:column="16">(<expr><name><name pos:line="10" pos:column="17">peer<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">standby<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">.<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="31">pool<pos:position pos:line="10" pos:column="35"/></name></name></expr>)<pos:position pos:line="10" pos:column="36"/></condition><then pos:line="10" pos:column="36">
                <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="17">conn<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <call><name><name pos:line="11" pos:column="24">peer<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">-&gt;<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="30">standby<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">.<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">pool<pos:position pos:line="11" pos:column="42"/></name><operator pos:line="11" pos:column="42">-&gt;<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="44">pop<pos:position pos:line="11" pos:column="47"/></name></name><argument_list pos:line="11" pos:column="47">(<argument><expr><name pos:line="11" pos:column="48">dest<pos:position pos:line="11" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="54">domain<pos:position pos:line="11" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="11" pos:column="62">true<pos:position pos:line="11" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="68"/></expr_stmt></block></then></if>
        }<pos:position pos:line="12" pos:column="10"/></block></then></if>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">conn<pos:position pos:line="14" pos:column="16"/></name></expr>;<pos:position pos:line="14" pos:column="17"/></return> <comment type="line" pos:line="14" pos:column="18">// open, closed, or nil</comment>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
