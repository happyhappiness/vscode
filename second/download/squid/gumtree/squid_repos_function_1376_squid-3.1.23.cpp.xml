<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1376_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">pid_t<pos:position pos:line="1" pos:column="6"/></name></type>
<name pos:line="2" pos:column="1">ipcCreate<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">int<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">type<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">prog<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier><specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier></type> <name><name pos:line="2" pos:column="57">args<pos:position pos:line="2" pos:column="61"/></name><index pos:line="2" pos:column="61">[]<pos:position pos:line="2" pos:column="63"/></index></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="65">const<pos:position pos:line="2" pos:column="70"/></specifier> <name pos:line="2" pos:column="71">char<pos:position pos:line="2" pos:column="75"/></name> <modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="77">name<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="83">IpAddress<pos:position pos:line="2" pos:column="92"/></name> <modifier pos:line="2" pos:column="93">&amp;<pos:position pos:line="2" pos:column="98"/></modifier></type><name pos:line="2" pos:column="94">local_addr<pos:position pos:line="2" pos:column="104"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="106">int<pos:position pos:line="2" pos:column="109"/></name> <modifier pos:line="2" pos:column="110">*<pos:position pos:line="2" pos:column="111"/></modifier></type><name pos:line="2" pos:column="111">rfd<pos:position pos:line="2" pos:column="114"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="116">int<pos:position pos:line="2" pos:column="119"/></name> <modifier pos:line="2" pos:column="120">*<pos:position pos:line="2" pos:column="121"/></modifier></type><name pos:line="2" pos:column="121">wfd<pos:position pos:line="2" pos:column="124"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="126">void<pos:position pos:line="2" pos:column="130"/></name> <modifier pos:line="2" pos:column="131">*<pos:position pos:line="2" pos:column="132"/></modifier><modifier pos:line="2" pos:column="132">*<pos:position pos:line="2" pos:column="133"/></modifier></type><name pos:line="2" pos:column="133">hIpc<pos:position pos:line="2" pos:column="137"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="138"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">long<pos:position pos:line="4" pos:column="18"/></name></type> <name pos:line="4" pos:column="19">thread<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">ipc_params<pos:position pos:line="6" pos:column="22"/></name></name></type> <name pos:line="6" pos:column="23">params<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">opt<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">optlen<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><sizeof pos:line="8" pos:column="18">sizeof<argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">opt<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">DWORD<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">ecode<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">pid_t<pos:position pos:line="10" pos:column="10"/></name></type> <name pos:line="10" pos:column="11">pid<pos:position pos:line="10" pos:column="14"/></name></decl>;<pos:position pos:line="10" pos:column="15"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">IpAddress<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">tmp_addr<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">struct<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">addrinfo<pos:position pos:line="13" pos:column="20"/></name></name> <modifier pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></modifier></type><name pos:line="13" pos:column="22">aiCS<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><name pos:line="13" pos:column="29">NULL<pos:position pos:line="13" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">struct<pos:position pos:line="14" pos:column="11"/></name> <name pos:line="14" pos:column="12">addrinfo<pos:position pos:line="14" pos:column="20"/></name></name> <modifier pos:line="14" pos:column="21">*<pos:position pos:line="14" pos:column="22"/></modifier></type><name pos:line="14" pos:column="22">aiPS<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><name pos:line="14" pos:column="29">NULL<pos:position pos:line="14" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="34"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">crfd<pos:position pos:line="16" pos:column="13"/></name> <init pos:line="16" pos:column="14">= <expr><operator pos:line="16" pos:column="16">-<pos:position pos:line="16" pos:column="17"/></operator><literal type="number" pos:line="16" pos:column="17">1<pos:position pos:line="16" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">prfd<pos:position pos:line="17" pos:column="13"/></name> <init pos:line="17" pos:column="14">= <expr><operator pos:line="17" pos:column="16">-<pos:position pos:line="17" pos:column="17"/></operator><literal type="number" pos:line="17" pos:column="17">1<pos:position pos:line="17" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">cwfd<pos:position pos:line="18" pos:column="13"/></name> <init pos:line="18" pos:column="14">= <expr><operator pos:line="18" pos:column="16">-<pos:position pos:line="18" pos:column="17"/></operator><literal type="number" pos:line="18" pos:column="17">1<pos:position pos:line="18" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">pwfd<pos:position pos:line="19" pos:column="13"/></name> <init pos:line="19" pos:column="14">= <expr><operator pos:line="19" pos:column="16">-<pos:position pos:line="19" pos:column="17"/></operator><literal type="number" pos:line="19" pos:column="17">1<pos:position pos:line="19" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">int<pos:position pos:line="20" pos:column="8"/></name></type> <name pos:line="20" pos:column="9">x<pos:position pos:line="20" pos:column="10"/></name></decl>;<pos:position pos:line="20" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">requirePathnameExists<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name pos:line="22" pos:column="27">name<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="33">prog<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">rfd<pos:position pos:line="24" pos:column="12"/></name></expr>)<pos:position pos:line="24" pos:column="13"/></condition><then pos:line="24" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="25" pos:column="9">*<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">rfd<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <operator pos:line="25" pos:column="16">-<pos:position pos:line="25" pos:column="17"/></operator><literal type="number" pos:line="25" pos:column="17">1<pos:position pos:line="25" pos:column="18"/></literal></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">wfd<pos:position pos:line="27" pos:column="12"/></name></expr>)<pos:position pos:line="27" pos:column="13"/></condition><then pos:line="27" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">wfd<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <operator pos:line="28" pos:column="16">-<pos:position pos:line="28" pos:column="17"/></operator><literal type="number" pos:line="28" pos:column="17">1<pos:position pos:line="28" pos:column="18"/></literal></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt></block></then></if>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">hIpc<pos:position pos:line="30" pos:column="13"/></name></expr>)<pos:position pos:line="30" pos:column="14"/></condition><then pos:line="30" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="31" pos:column="9">*<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">hIpc<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">=<pos:position pos:line="31" pos:column="16"/></operator> <name pos:line="31" pos:column="17">NULL<pos:position pos:line="31" pos:column="21"/></name></expr>;<pos:position pos:line="31" pos:column="22"/></expr_stmt></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">WIN32_OS_version<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">!=<pos:position pos:line="33" pos:column="28"/></operator> <name pos:line="33" pos:column="29">_WIN_OS_WINNT<pos:position pos:line="33" pos:column="42"/></name></expr>)<pos:position pos:line="33" pos:column="43"/></condition><then pos:line="33" pos:column="43"> <block pos:line="33" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">getsockopt<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><name pos:line="34" pos:column="20">INVALID_SOCKET<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="36">SOL_SOCKET<pos:position pos:line="34" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="48">SO_OPENTYPE<pos:position pos:line="34" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="61">(<pos:position pos:line="34" pos:column="62"/></operator><name pos:line="34" pos:column="62">char<pos:position pos:line="34" pos:column="66"/></name> <operator pos:line="34" pos:column="67">*<pos:position pos:line="34" pos:column="68"/></operator><operator pos:line="34" pos:column="68">)<pos:position pos:line="34" pos:column="69"/></operator> <operator pos:line="34" pos:column="70">&amp;<pos:position pos:line="34" pos:column="75"/></operator><name pos:line="34" pos:column="71">opt<pos:position pos:line="34" pos:column="74"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="76">&amp;<pos:position pos:line="34" pos:column="81"/></operator><name pos:line="34" pos:column="77">optlen<pos:position pos:line="34" pos:column="83"/></name></expr></argument>)<pos:position pos:line="34" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">opt<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <name pos:line="35" pos:column="15">opt<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">&amp;<pos:position pos:line="35" pos:column="24"/></operator> <operator pos:line="35" pos:column="21">~<pos:position pos:line="35" pos:column="22"/></operator><operator pos:line="35" pos:column="22">(<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="23">SO_SYNCHRONOUS_NONALERT<pos:position pos:line="35" pos:column="46"/></name> <operator pos:line="35" pos:column="47">|<pos:position pos:line="35" pos:column="48"/></operator> <name pos:line="35" pos:column="49">SO_SYNCHRONOUS_ALERT<pos:position pos:line="35" pos:column="69"/></name><operator pos:line="35" pos:column="69">)<pos:position pos:line="35" pos:column="70"/></operator></expr>;<pos:position pos:line="35" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">setsockopt<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><name pos:line="36" pos:column="20">INVALID_SOCKET<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="36">SOL_SOCKET<pos:position pos:line="36" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="48">SO_OPENTYPE<pos:position pos:line="36" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="61">(<pos:position pos:line="36" pos:column="62"/></operator><name pos:line="36" pos:column="62">char<pos:position pos:line="36" pos:column="66"/></name> <operator pos:line="36" pos:column="67">*<pos:position pos:line="36" pos:column="68"/></operator><operator pos:line="36" pos:column="68">)<pos:position pos:line="36" pos:column="69"/></operator> <operator pos:line="36" pos:column="70">&amp;<pos:position pos:line="36" pos:column="75"/></operator><name pos:line="36" pos:column="71">opt<pos:position pos:line="36" pos:column="74"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="76">sizeof<argument_list pos:line="36" pos:column="82">(<argument><expr><name pos:line="36" pos:column="83">opt<pos:position pos:line="36" pos:column="86"/></name></expr></argument>)<pos:position pos:line="36" pos:column="87"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="89"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">type<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">==<pos:position pos:line="39" pos:column="16"/></operator> <name pos:line="39" pos:column="17">IPC_TCP_SOCKET<pos:position pos:line="39" pos:column="31"/></name></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32"> <block pos:line="39" pos:column="33">{
        <expr_stmt><expr><name pos:line="40" pos:column="9">crfd<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">cwfd<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <call><name pos:line="40" pos:column="23">comm_open<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">SOCK_STREAM<pos:position pos:line="40" pos:column="44"/></name></expr></argument>,
                                <argument><expr><name pos:line="41" pos:column="33">IPPROTO_TCP<pos:position pos:line="41" pos:column="44"/></name></expr></argument>,
                                <argument><expr><name pos:line="42" pos:column="33">local_addr<pos:position pos:line="42" pos:column="43"/></name></expr></argument>,
                                <argument><expr><name pos:line="43" pos:column="33">COMM_NOCLOEXEC<pos:position pos:line="43" pos:column="47"/></name></expr></argument>,
                                <argument><expr><name pos:line="44" pos:column="33">name<pos:position pos:line="44" pos:column="37"/></name></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="45" pos:column="9">prfd<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <name pos:line="45" pos:column="16">pwfd<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">=<pos:position pos:line="45" pos:column="22"/></operator> <call><name pos:line="45" pos:column="23">comm_open<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument><expr><name pos:line="45" pos:column="33">SOCK_STREAM<pos:position pos:line="45" pos:column="44"/></name></expr></argument>,
                                <argument><expr><name pos:line="46" pos:column="33">IPPROTO_TCP<pos:position pos:line="46" pos:column="44"/></name></expr></argument>,	<comment type="block" pos:line="46" pos:column="49">/* protocol */</comment>
                                <argument><expr><name pos:line="47" pos:column="33">local_addr<pos:position pos:line="47" pos:column="43"/></name></expr></argument>,
                                <argument><expr><literal type="number" pos:line="48" pos:column="33">0<pos:position pos:line="48" pos:column="34"/></literal></expr></argument>,			<comment type="block" pos:line="48" pos:column="57">/* blocking */</comment>
                                <argument><expr><name pos:line="49" pos:column="33">name<pos:position pos:line="49" pos:column="37"/></name></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then> <elseif pos:line="50" pos:column="7">else <if pos:line="50" pos:column="12">if <condition pos:line="50" pos:column="15">(<expr><name pos:line="50" pos:column="16">type<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">==<pos:position pos:line="50" pos:column="23"/></operator> <name pos:line="50" pos:column="24">IPC_UDP_SOCKET<pos:position pos:line="50" pos:column="38"/></name></expr>)<pos:position pos:line="50" pos:column="39"/></condition><then pos:line="50" pos:column="39"> <block pos:line="50" pos:column="40">{
        <expr_stmt><expr><name pos:line="51" pos:column="9">crfd<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <name pos:line="51" pos:column="16">cwfd<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <call><name pos:line="51" pos:column="23">comm_open<pos:position pos:line="51" pos:column="32"/></name><argument_list pos:line="51" pos:column="32">(<argument><expr><name pos:line="51" pos:column="33">SOCK_DGRAM<pos:position pos:line="51" pos:column="43"/></name></expr></argument>,
                                <argument><expr><name pos:line="52" pos:column="33">IPPROTO_UDP<pos:position pos:line="52" pos:column="44"/></name></expr></argument>,
                                <argument><expr><name pos:line="53" pos:column="33">local_addr<pos:position pos:line="53" pos:column="43"/></name></expr></argument>,
                                <argument><expr><name pos:line="54" pos:column="33">COMM_NOCLOEXEC<pos:position pos:line="54" pos:column="47"/></name></expr></argument>,
                                <argument><expr><name pos:line="55" pos:column="33">name<pos:position pos:line="55" pos:column="37"/></name></expr></argument>)<pos:position pos:line="55" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="56" pos:column="9">prfd<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">=<pos:position pos:line="56" pos:column="15"/></operator> <name pos:line="56" pos:column="16">pwfd<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <call><name pos:line="56" pos:column="23">comm_open<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">(<argument><expr><name pos:line="56" pos:column="33">SOCK_DGRAM<pos:position pos:line="56" pos:column="43"/></name></expr></argument>,
                                <argument><expr><name pos:line="57" pos:column="33">IPPROTO_UDP<pos:position pos:line="57" pos:column="44"/></name></expr></argument>,
                                <argument><expr><name pos:line="58" pos:column="33">local_addr<pos:position pos:line="58" pos:column="43"/></name></expr></argument>,
                                <argument><expr><literal type="number" pos:line="59" pos:column="33">0<pos:position pos:line="59" pos:column="34"/></literal></expr></argument>,
                                <argument><expr><name pos:line="60" pos:column="33">name<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if></elseif> <elseif pos:line="61" pos:column="7">else <if pos:line="61" pos:column="12">if <condition pos:line="61" pos:column="15">(<expr><name pos:line="61" pos:column="16">type<pos:position pos:line="61" pos:column="20"/></name> <operator pos:line="61" pos:column="21">==<pos:position pos:line="61" pos:column="23"/></operator> <name pos:line="61" pos:column="24">IPC_FIFO<pos:position pos:line="61" pos:column="32"/></name></expr>)<pos:position pos:line="61" pos:column="33"/></condition><then pos:line="61" pos:column="33"> <block pos:line="61" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">debugs<pos:position pos:line="62" pos:column="15"/></name><argument_list pos:line="62" pos:column="15">(<argument><expr><literal type="number" pos:line="62" pos:column="16">54<pos:position pos:line="62" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="20">0<pos:position pos:line="62" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="23">"ipcCreate: "<pos:position pos:line="62" pos:column="36"/></literal> <operator pos:line="62" pos:column="37">&lt;&lt;<pos:position pos:line="62" pos:column="45"/></operator> <name pos:line="62" pos:column="40">prog<pos:position pos:line="62" pos:column="44"/></name> <operator pos:line="62" pos:column="45">&lt;&lt;<pos:position pos:line="62" pos:column="53"/></operator> <literal type="string" pos:line="62" pos:column="48">": use IPC_TCP_SOCKET instead of IP_FIFO on Windows"<pos:position pos:line="62" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="102"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">assert<pos:position pos:line="63" pos:column="15"/></name><argument_list pos:line="63" pos:column="15">(<argument><expr><literal type="number" pos:line="63" pos:column="16">0<pos:position pos:line="63" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if></elseif> <else pos:line="64" pos:column="7">else <block pos:line="64" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">assert<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><name pos:line="65" pos:column="16">IPC_NONE<pos:position pos:line="65" pos:column="24"/></name></expr></argument>)<pos:position pos:line="65" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">debugs<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><literal type="number" pos:line="68" pos:column="12">54<pos:position pos:line="68" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="16">3<pos:position pos:line="68" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="19">"ipcCreate: prfd FD "<pos:position pos:line="68" pos:column="40"/></literal> <operator pos:line="68" pos:column="41">&lt;&lt;<pos:position pos:line="68" pos:column="49"/></operator> <name pos:line="68" pos:column="44">prfd<pos:position pos:line="68" pos:column="48"/></name></expr></argument>)<pos:position pos:line="68" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">debugs<pos:position pos:line="69" pos:column="11"/></name><argument_list pos:line="69" pos:column="11">(<argument><expr><literal type="number" pos:line="69" pos:column="12">54<pos:position pos:line="69" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="16">3<pos:position pos:line="69" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="19">"ipcCreate: pwfd FD "<pos:position pos:line="69" pos:column="40"/></literal> <operator pos:line="69" pos:column="41">&lt;&lt;<pos:position pos:line="69" pos:column="49"/></operator> <name pos:line="69" pos:column="44">pwfd<pos:position pos:line="69" pos:column="48"/></name></expr></argument>)<pos:position pos:line="69" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">debugs<pos:position pos:line="70" pos:column="11"/></name><argument_list pos:line="70" pos:column="11">(<argument><expr><literal type="number" pos:line="70" pos:column="12">54<pos:position pos:line="70" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="16">3<pos:position pos:line="70" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="19">"ipcCreate: crfd FD "<pos:position pos:line="70" pos:column="40"/></literal> <operator pos:line="70" pos:column="41">&lt;&lt;<pos:position pos:line="70" pos:column="49"/></operator> <name pos:line="70" pos:column="44">crfd<pos:position pos:line="70" pos:column="48"/></name></expr></argument>)<pos:position pos:line="70" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">debugs<pos:position pos:line="71" pos:column="11"/></name><argument_list pos:line="71" pos:column="11">(<argument><expr><literal type="number" pos:line="71" pos:column="12">54<pos:position pos:line="71" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="16">3<pos:position pos:line="71" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="19">"ipcCreate: cwfd FD "<pos:position pos:line="71" pos:column="40"/></literal> <operator pos:line="71" pos:column="41">&lt;&lt;<pos:position pos:line="71" pos:column="49"/></operator> <name pos:line="71" pos:column="44">cwfd<pos:position pos:line="71" pos:column="48"/></name></expr></argument>)<pos:position pos:line="71" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="50"/></expr_stmt>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">WIN32_OS_version<pos:position pos:line="73" pos:column="25"/></name> <operator pos:line="73" pos:column="26">!=<pos:position pos:line="73" pos:column="28"/></operator> <name pos:line="73" pos:column="29">_WIN_OS_WINNT<pos:position pos:line="73" pos:column="42"/></name></expr>)<pos:position pos:line="73" pos:column="43"/></condition><then pos:line="73" pos:column="43"> <block pos:line="73" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">getsockopt<pos:position pos:line="74" pos:column="19"/></name><argument_list pos:line="74" pos:column="19">(<argument><expr><name pos:line="74" pos:column="20">INVALID_SOCKET<pos:position pos:line="74" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="36">SOL_SOCKET<pos:position pos:line="74" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="48">SO_OPENTYPE<pos:position pos:line="74" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="61">(<pos:position pos:line="74" pos:column="62"/></operator><name pos:line="74" pos:column="62">char<pos:position pos:line="74" pos:column="66"/></name> <operator pos:line="74" pos:column="67">*<pos:position pos:line="74" pos:column="68"/></operator><operator pos:line="74" pos:column="68">)<pos:position pos:line="74" pos:column="69"/></operator> <operator pos:line="74" pos:column="70">&amp;<pos:position pos:line="74" pos:column="75"/></operator><name pos:line="74" pos:column="71">opt<pos:position pos:line="74" pos:column="74"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="76">&amp;<pos:position pos:line="74" pos:column="81"/></operator><name pos:line="74" pos:column="77">optlen<pos:position pos:line="74" pos:column="83"/></name></expr></argument>)<pos:position pos:line="74" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="85"/></expr_stmt>
        <expr_stmt><expr><name pos:line="75" pos:column="9">opt<pos:position pos:line="75" pos:column="12"/></name> <operator pos:line="75" pos:column="13">=<pos:position pos:line="75" pos:column="14"/></operator> <name pos:line="75" pos:column="15">opt<pos:position pos:line="75" pos:column="18"/></name> <operator pos:line="75" pos:column="19">|<pos:position pos:line="75" pos:column="20"/></operator> <name pos:line="75" pos:column="21">SO_SYNCHRONOUS_NONALERT<pos:position pos:line="75" pos:column="44"/></name></expr>;<pos:position pos:line="75" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">setsockopt<pos:position pos:line="76" pos:column="19"/></name><argument_list pos:line="76" pos:column="19">(<argument><expr><name pos:line="76" pos:column="20">INVALID_SOCKET<pos:position pos:line="76" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="36">SOL_SOCKET<pos:position pos:line="76" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="48">SO_OPENTYPE<pos:position pos:line="76" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="76" pos:column="61">(<pos:position pos:line="76" pos:column="62"/></operator><name pos:line="76" pos:column="62">char<pos:position pos:line="76" pos:column="66"/></name> <operator pos:line="76" pos:column="67">*<pos:position pos:line="76" pos:column="68"/></operator><operator pos:line="76" pos:column="68">)<pos:position pos:line="76" pos:column="69"/></operator> <operator pos:line="76" pos:column="70">&amp;<pos:position pos:line="76" pos:column="75"/></operator><name pos:line="76" pos:column="71">opt<pos:position pos:line="76" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="76">optlen<pos:position pos:line="76" pos:column="82"/></name></expr></argument>)<pos:position pos:line="76" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="84"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">crfd<pos:position pos:line="79" pos:column="13"/></name> <operator pos:line="79" pos:column="14">&lt;<pos:position pos:line="79" pos:column="18"/></operator> <literal type="number" pos:line="79" pos:column="16">0<pos:position pos:line="79" pos:column="17"/></literal></expr>)<pos:position pos:line="79" pos:column="18"/></condition><then pos:line="79" pos:column="18"> <block pos:line="79" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">debugs<pos:position pos:line="80" pos:column="15"/></name><argument_list pos:line="80" pos:column="15">(<argument><expr><literal type="number" pos:line="80" pos:column="16">54<pos:position pos:line="80" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="20">0<pos:position pos:line="80" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="23">"ipcCreate: Failed to create child FD."<pos:position pos:line="80" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="64"/></expr_stmt>
        <return pos:line="81" pos:column="9">return <expr><call><name pos:line="81" pos:column="16">ipcCloseAllFD<pos:position pos:line="81" pos:column="29"/></name><argument_list pos:line="81" pos:column="29">(<argument><expr><name pos:line="81" pos:column="30">prfd<pos:position pos:line="81" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="36">pwfd<pos:position pos:line="81" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="42">crfd<pos:position pos:line="81" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="48">cwfd<pos:position pos:line="81" pos:column="52"/></name></expr></argument>)<pos:position pos:line="81" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="54"/></return>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <if pos:line="84" pos:column="5">if <condition pos:line="84" pos:column="8">(<expr><name pos:line="84" pos:column="9">pwfd<pos:position pos:line="84" pos:column="13"/></name> <operator pos:line="84" pos:column="14">&lt;<pos:position pos:line="84" pos:column="18"/></operator> <literal type="number" pos:line="84" pos:column="16">0<pos:position pos:line="84" pos:column="17"/></literal></expr>)<pos:position pos:line="84" pos:column="18"/></condition><then pos:line="84" pos:column="18"> <block pos:line="84" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">debugs<pos:position pos:line="85" pos:column="15"/></name><argument_list pos:line="85" pos:column="15">(<argument><expr><literal type="number" pos:line="85" pos:column="16">54<pos:position pos:line="85" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="20">0<pos:position pos:line="85" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="23">"ipcCreate: Failed to create server FD."<pos:position pos:line="85" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="65"/></expr_stmt>
        <return pos:line="86" pos:column="9">return <expr><call><name pos:line="86" pos:column="16">ipcCloseAllFD<pos:position pos:line="86" pos:column="29"/></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">prfd<pos:position pos:line="86" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="36">pwfd<pos:position pos:line="86" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="42">crfd<pos:position pos:line="86" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="48">cwfd<pos:position pos:line="86" pos:column="52"/></name></expr></argument>)<pos:position pos:line="86" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="54"/></return>
    }<pos:position pos:line="87" pos:column="6"/></block></then></if>

<comment type="line" pos:line="89" pos:column="1">// AYJ: these flags should be neutral, but if not IPv6 version needs adding</comment>
    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><name pos:line="90" pos:column="9">type<pos:position pos:line="90" pos:column="13"/></name> <operator pos:line="90" pos:column="14">==<pos:position pos:line="90" pos:column="16"/></operator> <name pos:line="90" pos:column="17">IPC_TCP_SOCKET<pos:position pos:line="90" pos:column="31"/></name> <operator pos:line="90" pos:column="32">||<pos:position pos:line="90" pos:column="34"/></operator> <name pos:line="90" pos:column="35">type<pos:position pos:line="90" pos:column="39"/></name> <operator pos:line="90" pos:column="40">==<pos:position pos:line="90" pos:column="42"/></operator> <name pos:line="90" pos:column="43">IPC_UDP_SOCKET<pos:position pos:line="90" pos:column="57"/></name></expr>)<pos:position pos:line="90" pos:column="58"/></condition><then pos:line="90" pos:column="58"> <block pos:line="90" pos:column="59">{

        <expr_stmt><expr><call><name><name pos:line="92" pos:column="9">tmp_addr<pos:position pos:line="92" pos:column="17"/></name><operator pos:line="92" pos:column="17">.<pos:position pos:line="92" pos:column="18"/></operator><name pos:line="92" pos:column="18">InitAddrInfo<pos:position pos:line="92" pos:column="30"/></name></name><argument_list pos:line="92" pos:column="30">(<argument><expr><name pos:line="92" pos:column="31">aiPS<pos:position pos:line="92" pos:column="35"/></name></expr></argument>)<pos:position pos:line="92" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="37"/></expr_stmt>

        <if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><call><name pos:line="94" pos:column="13">getsockname<pos:position pos:line="94" pos:column="24"/></name><argument_list pos:line="94" pos:column="24">(<argument><expr><name pos:line="94" pos:column="25">pwfd<pos:position pos:line="94" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="31">aiPS<pos:position pos:line="94" pos:column="35"/></name><operator pos:line="94" pos:column="35">-&gt;<pos:position pos:line="94" pos:column="40"/></operator><name pos:line="94" pos:column="37">ai_addr<pos:position pos:line="94" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="94" pos:column="46">&amp;<pos:position pos:line="94" pos:column="51"/></operator><operator pos:line="94" pos:column="47">(<pos:position pos:line="94" pos:column="48"/></operator><name><name pos:line="94" pos:column="48">aiPS<pos:position pos:line="94" pos:column="52"/></name><operator pos:line="94" pos:column="52">-&gt;<pos:position pos:line="94" pos:column="57"/></operator><name pos:line="94" pos:column="54">ai_addrlen<pos:position pos:line="94" pos:column="64"/></name></name><operator pos:line="94" pos:column="64">)<pos:position pos:line="94" pos:column="65"/></operator></expr></argument> )<pos:position pos:line="94" pos:column="67"/></argument_list></call> <operator pos:line="94" pos:column="68">&lt;<pos:position pos:line="94" pos:column="72"/></operator> <literal type="number" pos:line="94" pos:column="70">0<pos:position pos:line="94" pos:column="71"/></literal></expr>)<pos:position pos:line="94" pos:column="72"/></condition><then pos:line="94" pos:column="72"> <block pos:line="94" pos:column="73">{
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">debugs<pos:position pos:line="95" pos:column="19"/></name><argument_list pos:line="95" pos:column="19">(<argument><expr><literal type="number" pos:line="95" pos:column="20">54<pos:position pos:line="95" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="24">0<pos:position pos:line="95" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="27">"ipcCreate: getsockname: "<pos:position pos:line="95" pos:column="53"/></literal> <operator pos:line="95" pos:column="54">&lt;&lt;<pos:position pos:line="95" pos:column="62"/></operator> <call><name pos:line="95" pos:column="57">xstrerror<pos:position pos:line="95" pos:column="66"/></name><argument_list pos:line="95" pos:column="66">()<pos:position pos:line="95" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="95" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="70"/></expr_stmt>
            <return pos:line="96" pos:column="13">return <expr><call><name pos:line="96" pos:column="20">ipcCloseAllFD<pos:position pos:line="96" pos:column="33"/></name><argument_list pos:line="96" pos:column="33">(<argument><expr><name pos:line="96" pos:column="34">prfd<pos:position pos:line="96" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="40">pwfd<pos:position pos:line="96" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="46">crfd<pos:position pos:line="96" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="52">cwfd<pos:position pos:line="96" pos:column="56"/></name></expr></argument>)<pos:position pos:line="96" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="58"/></return>
        }<pos:position pos:line="97" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="99" pos:column="9">tmp_addr<pos:position pos:line="99" pos:column="17"/></name> <operator pos:line="99" pos:column="18">=<pos:position pos:line="99" pos:column="19"/></operator> <operator pos:line="99" pos:column="20">*<pos:position pos:line="99" pos:column="21"/></operator><name pos:line="99" pos:column="21">aiPS<pos:position pos:line="99" pos:column="25"/></name></expr>;<pos:position pos:line="99" pos:column="26"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="101" pos:column="9">debugs<pos:position pos:line="101" pos:column="15"/></name><argument_list pos:line="101" pos:column="15">(<argument><expr><literal type="number" pos:line="101" pos:column="16">54<pos:position pos:line="101" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="20">3<pos:position pos:line="101" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="23">"ipcCreate: FD "<pos:position pos:line="101" pos:column="39"/></literal> <operator pos:line="101" pos:column="40">&lt;&lt;<pos:position pos:line="101" pos:column="48"/></operator> <name pos:line="101" pos:column="43">pwfd<pos:position pos:line="101" pos:column="47"/></name> <operator pos:line="101" pos:column="48">&lt;&lt;<pos:position pos:line="101" pos:column="56"/></operator> <literal type="string" pos:line="101" pos:column="51">" sockaddr "<pos:position pos:line="101" pos:column="63"/></literal> <operator pos:line="101" pos:column="64">&lt;&lt;<pos:position pos:line="101" pos:column="72"/></operator> <name pos:line="101" pos:column="67">tmp_addr<pos:position pos:line="101" pos:column="75"/></name></expr></argument> )<pos:position pos:line="101" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="78"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="103" pos:column="9">tmp_addr<pos:position pos:line="103" pos:column="17"/></name><operator pos:line="103" pos:column="17">.<pos:position pos:line="103" pos:column="18"/></operator><name pos:line="103" pos:column="18">InitAddrInfo<pos:position pos:line="103" pos:column="30"/></name></name><argument_list pos:line="103" pos:column="30">(<argument><expr><name pos:line="103" pos:column="31">aiCS<pos:position pos:line="103" pos:column="35"/></name></expr></argument>)<pos:position pos:line="103" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="37"/></expr_stmt>

        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><call><name pos:line="105" pos:column="13">getsockname<pos:position pos:line="105" pos:column="24"/></name><argument_list pos:line="105" pos:column="24">(<argument><expr><name pos:line="105" pos:column="25">crfd<pos:position pos:line="105" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="31">aiCS<pos:position pos:line="105" pos:column="35"/></name><operator pos:line="105" pos:column="35">-&gt;<pos:position pos:line="105" pos:column="40"/></operator><name pos:line="105" pos:column="37">ai_addr<pos:position pos:line="105" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="46">&amp;<pos:position pos:line="105" pos:column="51"/></operator><operator pos:line="105" pos:column="47">(<pos:position pos:line="105" pos:column="48"/></operator><name><name pos:line="105" pos:column="48">aiCS<pos:position pos:line="105" pos:column="52"/></name><operator pos:line="105" pos:column="52">-&gt;<pos:position pos:line="105" pos:column="57"/></operator><name pos:line="105" pos:column="54">ai_addrlen<pos:position pos:line="105" pos:column="64"/></name></name><operator pos:line="105" pos:column="64">)<pos:position pos:line="105" pos:column="65"/></operator></expr></argument> )<pos:position pos:line="105" pos:column="67"/></argument_list></call> <operator pos:line="105" pos:column="68">&lt;<pos:position pos:line="105" pos:column="72"/></operator> <literal type="number" pos:line="105" pos:column="70">0<pos:position pos:line="105" pos:column="71"/></literal></expr>)<pos:position pos:line="105" pos:column="72"/></condition><then pos:line="105" pos:column="72"> <block pos:line="105" pos:column="73">{
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">debugs<pos:position pos:line="106" pos:column="19"/></name><argument_list pos:line="106" pos:column="19">(<argument><expr><literal type="number" pos:line="106" pos:column="20">54<pos:position pos:line="106" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="24">0<pos:position pos:line="106" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="27">"ipcCreate: getsockname: "<pos:position pos:line="106" pos:column="53"/></literal> <operator pos:line="106" pos:column="54">&lt;&lt;<pos:position pos:line="106" pos:column="62"/></operator> <call><name pos:line="106" pos:column="57">xstrerror<pos:position pos:line="106" pos:column="66"/></name><argument_list pos:line="106" pos:column="66">()<pos:position pos:line="106" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="106" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="70"/></expr_stmt>
            <return pos:line="107" pos:column="13">return <expr><call><name pos:line="107" pos:column="20">ipcCloseAllFD<pos:position pos:line="107" pos:column="33"/></name><argument_list pos:line="107" pos:column="33">(<argument><expr><name pos:line="107" pos:column="34">prfd<pos:position pos:line="107" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="40">pwfd<pos:position pos:line="107" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="46">crfd<pos:position pos:line="107" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="52">cwfd<pos:position pos:line="107" pos:column="56"/></name></expr></argument>)<pos:position pos:line="107" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="58"/></return>
        }<pos:position pos:line="108" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="110" pos:column="9">tmp_addr<pos:position pos:line="110" pos:column="17"/></name><operator pos:line="110" pos:column="17">.<pos:position pos:line="110" pos:column="18"/></operator><name pos:line="110" pos:column="18">SetEmpty<pos:position pos:line="110" pos:column="26"/></name></name><argument_list pos:line="110" pos:column="26">()<pos:position pos:line="110" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="111" pos:column="9">tmp_addr<pos:position pos:line="111" pos:column="17"/></name> <operator pos:line="111" pos:column="18">=<pos:position pos:line="111" pos:column="19"/></operator> <operator pos:line="111" pos:column="20">*<pos:position pos:line="111" pos:column="21"/></operator><name pos:line="111" pos:column="21">aiCS<pos:position pos:line="111" pos:column="25"/></name></expr>;<pos:position pos:line="111" pos:column="26"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="113" pos:column="9">debugs<pos:position pos:line="113" pos:column="15"/></name><argument_list pos:line="113" pos:column="15">(<argument><expr><literal type="number" pos:line="113" pos:column="16">54<pos:position pos:line="113" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="113" pos:column="20">3<pos:position pos:line="113" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="23">"ipcCreate: FD "<pos:position pos:line="113" pos:column="39"/></literal> <operator pos:line="113" pos:column="40">&lt;&lt;<pos:position pos:line="113" pos:column="48"/></operator> <name pos:line="113" pos:column="43">crfd<pos:position pos:line="113" pos:column="47"/></name> <operator pos:line="113" pos:column="48">&lt;&lt;<pos:position pos:line="113" pos:column="56"/></operator> <literal type="string" pos:line="113" pos:column="51">" sockaddr "<pos:position pos:line="113" pos:column="63"/></literal> <operator pos:line="113" pos:column="64">&lt;&lt;<pos:position pos:line="113" pos:column="72"/></operator> <name pos:line="113" pos:column="67">tmp_addr<pos:position pos:line="113" pos:column="75"/></name></expr></argument> )<pos:position pos:line="113" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="114" pos:column="6"/></block></then></if>

    <if pos:line="116" pos:column="5">if <condition pos:line="116" pos:column="8">(<expr><name pos:line="116" pos:column="9">type<pos:position pos:line="116" pos:column="13"/></name> <operator pos:line="116" pos:column="14">==<pos:position pos:line="116" pos:column="16"/></operator> <name pos:line="116" pos:column="17">IPC_TCP_SOCKET<pos:position pos:line="116" pos:column="31"/></name></expr>)<pos:position pos:line="116" pos:column="32"/></condition><then pos:line="116" pos:column="32"> <block pos:line="116" pos:column="33">{
        <if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><call><name pos:line="117" pos:column="13">listen<pos:position pos:line="117" pos:column="19"/></name><argument_list pos:line="117" pos:column="19">(<argument><expr><name pos:line="117" pos:column="20">crfd<pos:position pos:line="117" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="26">1<pos:position pos:line="117" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="28"/></argument_list></call> <operator pos:line="117" pos:column="29">&lt;<pos:position pos:line="117" pos:column="33"/></operator> <literal type="number" pos:line="117" pos:column="31">0<pos:position pos:line="117" pos:column="32"/></literal></expr>)<pos:position pos:line="117" pos:column="33"/></condition><then pos:line="117" pos:column="33"> <block pos:line="117" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="118" pos:column="13">debugs<pos:position pos:line="118" pos:column="19"/></name><argument_list pos:line="118" pos:column="19">(<argument><expr><literal type="number" pos:line="118" pos:column="20">54<pos:position pos:line="118" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="118" pos:column="24">1<pos:position pos:line="118" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="27">"ipcCreate: listen FD "<pos:position pos:line="118" pos:column="50"/></literal> <operator pos:line="118" pos:column="51">&lt;&lt;<pos:position pos:line="118" pos:column="59"/></operator> <name pos:line="118" pos:column="54">crfd<pos:position pos:line="118" pos:column="58"/></name> <operator pos:line="118" pos:column="59">&lt;&lt;<pos:position pos:line="118" pos:column="67"/></operator> <literal type="string" pos:line="118" pos:column="62">": "<pos:position pos:line="118" pos:column="66"/></literal> <operator pos:line="118" pos:column="67">&lt;&lt;<pos:position pos:line="118" pos:column="75"/></operator> <call><name pos:line="118" pos:column="70">xstrerror<pos:position pos:line="118" pos:column="79"/></name><argument_list pos:line="118" pos:column="79">()<pos:position pos:line="118" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="118" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="83"/></expr_stmt>
            <return pos:line="119" pos:column="13">return <expr><call><name pos:line="119" pos:column="20">ipcCloseAllFD<pos:position pos:line="119" pos:column="33"/></name><argument_list pos:line="119" pos:column="33">(<argument><expr><name pos:line="119" pos:column="34">prfd<pos:position pos:line="119" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="40">pwfd<pos:position pos:line="119" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="46">crfd<pos:position pos:line="119" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="52">cwfd<pos:position pos:line="119" pos:column="56"/></name></expr></argument>)<pos:position pos:line="119" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="58"/></return>
        }<pos:position pos:line="120" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="122" pos:column="9">debugs<pos:position pos:line="122" pos:column="15"/></name><argument_list pos:line="122" pos:column="15">(<argument><expr><literal type="number" pos:line="122" pos:column="16">54<pos:position pos:line="122" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="20">3<pos:position pos:line="122" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="23">"ipcCreate: FD "<pos:position pos:line="122" pos:column="39"/></literal> <operator pos:line="122" pos:column="40">&lt;&lt;<pos:position pos:line="122" pos:column="48"/></operator> <name pos:line="122" pos:column="43">crfd<pos:position pos:line="122" pos:column="47"/></name> <operator pos:line="122" pos:column="48">&lt;&lt;<pos:position pos:line="122" pos:column="56"/></operator> <literal type="string" pos:line="122" pos:column="51">" listening..."<pos:position pos:line="122" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="123" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="125" pos:column="5">/* flush or else we get dup data if unbuffered_logs is set */</comment>
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">logsFlush<pos:position pos:line="126" pos:column="14"/></name><argument_list pos:line="126" pos:column="14">()<pos:position pos:line="126" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="128" pos:column="5">params<pos:position pos:line="128" pos:column="11"/></name><operator pos:line="128" pos:column="11">.<pos:position pos:line="128" pos:column="12"/></operator><name pos:line="128" pos:column="12">type<pos:position pos:line="128" pos:column="16"/></name></name> <operator pos:line="128" pos:column="17">=<pos:position pos:line="128" pos:column="18"/></operator> <name pos:line="128" pos:column="19">type<pos:position pos:line="128" pos:column="23"/></name></expr>;<pos:position pos:line="128" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="130" pos:column="5">params<pos:position pos:line="130" pos:column="11"/></name><operator pos:line="130" pos:column="11">.<pos:position pos:line="130" pos:column="12"/></operator><name pos:line="130" pos:column="12">crfd<pos:position pos:line="130" pos:column="16"/></name></name> <operator pos:line="130" pos:column="17">=<pos:position pos:line="130" pos:column="18"/></operator> <name pos:line="130" pos:column="19">crfd<pos:position pos:line="130" pos:column="23"/></name></expr>;<pos:position pos:line="130" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="132" pos:column="5">params<pos:position pos:line="132" pos:column="11"/></name><operator pos:line="132" pos:column="11">.<pos:position pos:line="132" pos:column="12"/></operator><name pos:line="132" pos:column="12">cwfd<pos:position pos:line="132" pos:column="16"/></name></name> <operator pos:line="132" pos:column="17">=<pos:position pos:line="132" pos:column="18"/></operator> <name pos:line="132" pos:column="19">cwfd<pos:position pos:line="132" pos:column="23"/></name></expr>;<pos:position pos:line="132" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="134" pos:column="5">params<pos:position pos:line="134" pos:column="11"/></name><operator pos:line="134" pos:column="11">.<pos:position pos:line="134" pos:column="12"/></operator><name pos:line="134" pos:column="12">PS<pos:position pos:line="134" pos:column="14"/></name></name> <operator pos:line="134" pos:column="15">=<pos:position pos:line="134" pos:column="16"/></operator> <operator pos:line="134" pos:column="17">*<pos:position pos:line="134" pos:column="18"/></operator><name pos:line="134" pos:column="18">aiPS<pos:position pos:line="134" pos:column="22"/></name></expr>;<pos:position pos:line="134" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="136" pos:column="5">params<pos:position pos:line="136" pos:column="11"/></name><operator pos:line="136" pos:column="11">.<pos:position pos:line="136" pos:column="12"/></operator><name pos:line="136" pos:column="12">local_addr<pos:position pos:line="136" pos:column="22"/></name></name> <operator pos:line="136" pos:column="23">=<pos:position pos:line="136" pos:column="24"/></operator> <name pos:line="136" pos:column="25">local_addr<pos:position pos:line="136" pos:column="35"/></name></expr>;<pos:position pos:line="136" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="138" pos:column="5">params<pos:position pos:line="138" pos:column="11"/></name><operator pos:line="138" pos:column="11">.<pos:position pos:line="138" pos:column="12"/></operator><name pos:line="138" pos:column="12">prog<pos:position pos:line="138" pos:column="16"/></name></name> <operator pos:line="138" pos:column="17">=<pos:position pos:line="138" pos:column="18"/></operator> <name pos:line="138" pos:column="19">prog<pos:position pos:line="138" pos:column="23"/></name></expr>;<pos:position pos:line="138" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="140" pos:column="5">params<pos:position pos:line="140" pos:column="11"/></name><operator pos:line="140" pos:column="11">.<pos:position pos:line="140" pos:column="12"/></operator><name pos:line="140" pos:column="12">args<pos:position pos:line="140" pos:column="16"/></name></name> <operator pos:line="140" pos:column="17">=<pos:position pos:line="140" pos:column="18"/></operator> <operator pos:line="140" pos:column="19">(<pos:position pos:line="140" pos:column="20"/></operator><name pos:line="140" pos:column="20">char<pos:position pos:line="140" pos:column="24"/></name> <operator pos:line="140" pos:column="25">*<pos:position pos:line="140" pos:column="26"/></operator><operator pos:line="140" pos:column="26">*<pos:position pos:line="140" pos:column="27"/></operator><operator pos:line="140" pos:column="27">)<pos:position pos:line="140" pos:column="28"/></operator> <name pos:line="140" pos:column="29">args<pos:position pos:line="140" pos:column="33"/></name></expr>;<pos:position pos:line="140" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name pos:line="142" pos:column="5">thread<pos:position pos:line="142" pos:column="11"/></name> <operator pos:line="142" pos:column="12">=<pos:position pos:line="142" pos:column="13"/></operator> <call><name pos:line="142" pos:column="14">_beginthreadex<pos:position pos:line="142" pos:column="28"/></name><argument_list pos:line="142" pos:column="28">(<argument><expr><name pos:line="142" pos:column="29">NULL<pos:position pos:line="142" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="142" pos:column="35">0<pos:position pos:line="142" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="142" pos:column="38">ipc_thread_1<pos:position pos:line="142" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="142" pos:column="52">&amp;<pos:position pos:line="142" pos:column="57"/></operator><name pos:line="142" pos:column="53">params<pos:position pos:line="142" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="142" pos:column="61">0<pos:position pos:line="142" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="142" pos:column="64">NULL<pos:position pos:line="142" pos:column="68"/></name></expr></argument>)<pos:position pos:line="142" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="70"/></expr_stmt>

    <if pos:line="144" pos:column="5">if <condition pos:line="144" pos:column="8">(<expr><name pos:line="144" pos:column="9">thread<pos:position pos:line="144" pos:column="15"/></name> <operator pos:line="144" pos:column="16">==<pos:position pos:line="144" pos:column="18"/></operator> <literal type="number" pos:line="144" pos:column="19">0<pos:position pos:line="144" pos:column="20"/></literal></expr>)<pos:position pos:line="144" pos:column="21"/></condition><then pos:line="144" pos:column="21"> <block pos:line="144" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="145" pos:column="9">debugs<pos:position pos:line="145" pos:column="15"/></name><argument_list pos:line="145" pos:column="15">(<argument><expr><literal type="number" pos:line="145" pos:column="16">54<pos:position pos:line="145" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="145" pos:column="20">1<pos:position pos:line="145" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="145" pos:column="23">"ipcCreate: _beginthread: "<pos:position pos:line="145" pos:column="50"/></literal> <operator pos:line="145" pos:column="51">&lt;&lt;<pos:position pos:line="145" pos:column="59"/></operator> <call><name pos:line="145" pos:column="54">xstrerror<pos:position pos:line="145" pos:column="63"/></name><argument_list pos:line="145" pos:column="63">()<pos:position pos:line="145" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="145" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="67"/></expr_stmt>
        <return pos:line="146" pos:column="9">return <expr><call><name pos:line="146" pos:column="16">ipcCloseAllFD<pos:position pos:line="146" pos:column="29"/></name><argument_list pos:line="146" pos:column="29">(<argument><expr><name pos:line="146" pos:column="30">prfd<pos:position pos:line="146" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="36">pwfd<pos:position pos:line="146" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="42">crfd<pos:position pos:line="146" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="48">cwfd<pos:position pos:line="146" pos:column="52"/></name></expr></argument>)<pos:position pos:line="146" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="54"/></return>
    }<pos:position pos:line="147" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="149" pos:column="5">/* NP: tmp_addr was left with eiether empty or aiCS in IpAddress format */</comment>
    <if pos:line="150" pos:column="5">if <condition pos:line="150" pos:column="8">(<expr><call><name pos:line="150" pos:column="9">comm_connect_addr<pos:position pos:line="150" pos:column="26"/></name><argument_list pos:line="150" pos:column="26">(<argument><expr><name pos:line="150" pos:column="27">pwfd<pos:position pos:line="150" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="33">tmp_addr<pos:position pos:line="150" pos:column="41"/></name></expr></argument>)<pos:position pos:line="150" pos:column="42"/></argument_list></call> <operator pos:line="150" pos:column="43">==<pos:position pos:line="150" pos:column="45"/></operator> <name pos:line="150" pos:column="46">COMM_ERROR<pos:position pos:line="150" pos:column="56"/></name></expr>)<pos:position pos:line="150" pos:column="57"/></condition><then pos:line="150" pos:column="57"> <block pos:line="150" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="151" pos:column="9">CloseHandle<pos:position pos:line="151" pos:column="20"/></name><argument_list pos:line="151" pos:column="20">(<argument><expr><operator pos:line="151" pos:column="21">(<pos:position pos:line="151" pos:column="22"/></operator><name pos:line="151" pos:column="22">HANDLE<pos:position pos:line="151" pos:column="28"/></name><operator pos:line="151" pos:column="28">)<pos:position pos:line="151" pos:column="29"/></operator> <name pos:line="151" pos:column="30">thread<pos:position pos:line="151" pos:column="36"/></name></expr></argument>)<pos:position pos:line="151" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="38"/></expr_stmt>
        <return pos:line="152" pos:column="9">return <expr><call><name pos:line="152" pos:column="16">ipcCloseAllFD<pos:position pos:line="152" pos:column="29"/></name><argument_list pos:line="152" pos:column="29">(<argument><expr><name pos:line="152" pos:column="30">prfd<pos:position pos:line="152" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="36">pwfd<pos:position pos:line="152" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="152" pos:column="42">-<pos:position pos:line="152" pos:column="43"/></operator><literal type="number" pos:line="152" pos:column="43">1<pos:position pos:line="152" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="152" pos:column="46">-<pos:position pos:line="152" pos:column="47"/></operator><literal type="number" pos:line="152" pos:column="47">1<pos:position pos:line="152" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="50"/></return>
    }<pos:position pos:line="153" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="155" pos:column="5">memset<pos:position pos:line="155" pos:column="11"/></name><argument_list pos:line="155" pos:column="11">(<argument><expr><name pos:line="155" pos:column="12">hello_buf<pos:position pos:line="155" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="155" pos:column="23">'\0'<pos:position pos:line="155" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="29">HELLO_BUF_SZ<pos:position pos:line="155" pos:column="41"/></name></expr></argument>)<pos:position pos:line="155" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="156" pos:column="5">x<pos:position pos:line="156" pos:column="6"/></name> <operator pos:line="156" pos:column="7">=<pos:position pos:line="156" pos:column="8"/></operator> <call><name pos:line="156" pos:column="9">recv<pos:position pos:line="156" pos:column="13"/></name><argument_list pos:line="156" pos:column="13">(<argument><expr><name pos:line="156" pos:column="14">prfd<pos:position pos:line="156" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="156" pos:column="20">(<pos:position pos:line="156" pos:column="21"/></operator><name pos:line="156" pos:column="21">void<pos:position pos:line="156" pos:column="25"/></name> <operator pos:line="156" pos:column="26">*<pos:position pos:line="156" pos:column="27"/></operator><operator pos:line="156" pos:column="27">)<pos:position pos:line="156" pos:column="28"/></operator><name pos:line="156" pos:column="28">hello_buf<pos:position pos:line="156" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="39">HELLO_BUF_SZ<pos:position pos:line="156" pos:column="51"/></name> <operator pos:line="156" pos:column="52">-<pos:position pos:line="156" pos:column="53"/></operator> <literal type="number" pos:line="156" pos:column="54">1<pos:position pos:line="156" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="156" pos:column="57">0<pos:position pos:line="156" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="60"/></expr_stmt>

    <if pos:line="158" pos:column="5">if <condition pos:line="158" pos:column="8">(<expr><name pos:line="158" pos:column="9">x<pos:position pos:line="158" pos:column="10"/></name> <operator pos:line="158" pos:column="11">&lt;<pos:position pos:line="158" pos:column="15"/></operator> <literal type="number" pos:line="158" pos:column="13">0<pos:position pos:line="158" pos:column="14"/></literal></expr>)<pos:position pos:line="158" pos:column="15"/></condition><then pos:line="158" pos:column="15"> <block pos:line="158" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="159" pos:column="9">debugs<pos:position pos:line="159" pos:column="15"/></name><argument_list pos:line="159" pos:column="15">(<argument><expr><literal type="number" pos:line="159" pos:column="16">54<pos:position pos:line="159" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="159" pos:column="20">0<pos:position pos:line="159" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="159" pos:column="23">"ipcCreate: PARENT: hello read test failed"<pos:position pos:line="159" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="160" pos:column="9">debugs<pos:position pos:line="160" pos:column="15"/></name><argument_list pos:line="160" pos:column="15">(<argument><expr><literal type="number" pos:line="160" pos:column="16">54<pos:position pos:line="160" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="160" pos:column="20">0<pos:position pos:line="160" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="160" pos:column="23">"--&gt; read: "<pos:position pos:line="160" pos:column="38"/></literal> <operator pos:line="160" pos:column="36">&lt;&lt;<pos:position pos:line="160" pos:column="44"/></operator> <call><name pos:line="160" pos:column="39">xstrerror<pos:position pos:line="160" pos:column="48"/></name><argument_list pos:line="160" pos:column="48">()<pos:position pos:line="160" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="160" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="161" pos:column="9">CloseHandle<pos:position pos:line="161" pos:column="20"/></name><argument_list pos:line="161" pos:column="20">(<argument><expr><operator pos:line="161" pos:column="21">(<pos:position pos:line="161" pos:column="22"/></operator><name pos:line="161" pos:column="22">HANDLE<pos:position pos:line="161" pos:column="28"/></name><operator pos:line="161" pos:column="28">)<pos:position pos:line="161" pos:column="29"/></operator> <name pos:line="161" pos:column="30">thread<pos:position pos:line="161" pos:column="36"/></name></expr></argument>)<pos:position pos:line="161" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="38"/></expr_stmt>
        <return pos:line="162" pos:column="9">return <expr><call><name pos:line="162" pos:column="16">ipcCloseAllFD<pos:position pos:line="162" pos:column="29"/></name><argument_list pos:line="162" pos:column="29">(<argument><expr><name pos:line="162" pos:column="30">prfd<pos:position pos:line="162" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="36">pwfd<pos:position pos:line="162" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="162" pos:column="42">-<pos:position pos:line="162" pos:column="43"/></operator><literal type="number" pos:line="162" pos:column="43">1<pos:position pos:line="162" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="162" pos:column="46">-<pos:position pos:line="162" pos:column="47"/></operator><literal type="number" pos:line="162" pos:column="47">1<pos:position pos:line="162" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="50"/></return>
    }<pos:position pos:line="163" pos:column="6"/></block></then> <elseif pos:line="163" pos:column="7">else <if pos:line="163" pos:column="12">if <condition pos:line="163" pos:column="15">(<expr><call><name pos:line="163" pos:column="16">strcmp<pos:position pos:line="163" pos:column="22"/></name><argument_list pos:line="163" pos:column="22">(<argument><expr><name pos:line="163" pos:column="23">hello_buf<pos:position pos:line="163" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="34">hello_string<pos:position pos:line="163" pos:column="46"/></name></expr></argument>)<pos:position pos:line="163" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="163" pos:column="48"/></condition><then pos:line="163" pos:column="48"> <block pos:line="163" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="164" pos:column="9">debugs<pos:position pos:line="164" pos:column="15"/></name><argument_list pos:line="164" pos:column="15">(<argument><expr><literal type="number" pos:line="164" pos:column="16">54<pos:position pos:line="164" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="164" pos:column="20">0<pos:position pos:line="164" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="164" pos:column="23">"ipcCreate: PARENT: hello read test failed"<pos:position pos:line="164" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="165" pos:column="9">debugs<pos:position pos:line="165" pos:column="15"/></name><argument_list pos:line="165" pos:column="15">(<argument><expr><literal type="number" pos:line="165" pos:column="16">54<pos:position pos:line="165" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="165" pos:column="20">0<pos:position pos:line="165" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="165" pos:column="23">"--&gt; read returned "<pos:position pos:line="165" pos:column="46"/></literal> <operator pos:line="165" pos:column="44">&lt;&lt;<pos:position pos:line="165" pos:column="52"/></operator> <name pos:line="165" pos:column="47">x<pos:position pos:line="165" pos:column="48"/></name></expr></argument>)<pos:position pos:line="165" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="166" pos:column="9">debugs<pos:position pos:line="166" pos:column="15"/></name><argument_list pos:line="166" pos:column="15">(<argument><expr><literal type="number" pos:line="166" pos:column="16">54<pos:position pos:line="166" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="166" pos:column="20">0<pos:position pos:line="166" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="23">"--&gt; got '"<pos:position pos:line="166" pos:column="37"/></literal> <operator pos:line="166" pos:column="35">&lt;&lt;<pos:position pos:line="166" pos:column="43"/></operator> <call><name pos:line="166" pos:column="38">rfc1738_escape<pos:position pos:line="166" pos:column="52"/></name><argument_list pos:line="166" pos:column="52">(<argument><expr><name pos:line="166" pos:column="53">hello_buf<pos:position pos:line="166" pos:column="62"/></name></expr></argument>)<pos:position pos:line="166" pos:column="63"/></argument_list></call> <operator pos:line="166" pos:column="64">&lt;&lt;<pos:position pos:line="166" pos:column="72"/></operator> <literal type="string" pos:line="166" pos:column="67">"'"<pos:position pos:line="166" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="166" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="167" pos:column="9">CloseHandle<pos:position pos:line="167" pos:column="20"/></name><argument_list pos:line="167" pos:column="20">(<argument><expr><operator pos:line="167" pos:column="21">(<pos:position pos:line="167" pos:column="22"/></operator><name pos:line="167" pos:column="22">HANDLE<pos:position pos:line="167" pos:column="28"/></name><operator pos:line="167" pos:column="28">)<pos:position pos:line="167" pos:column="29"/></operator> <name pos:line="167" pos:column="30">thread<pos:position pos:line="167" pos:column="36"/></name></expr></argument>)<pos:position pos:line="167" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="38"/></expr_stmt>
        <return pos:line="168" pos:column="9">return <expr><call><name pos:line="168" pos:column="16">ipcCloseAllFD<pos:position pos:line="168" pos:column="29"/></name><argument_list pos:line="168" pos:column="29">(<argument><expr><name pos:line="168" pos:column="30">prfd<pos:position pos:line="168" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="168" pos:column="36">pwfd<pos:position pos:line="168" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="168" pos:column="42">-<pos:position pos:line="168" pos:column="43"/></operator><literal type="number" pos:line="168" pos:column="43">1<pos:position pos:line="168" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="168" pos:column="46">-<pos:position pos:line="168" pos:column="47"/></operator><literal type="number" pos:line="168" pos:column="47">1<pos:position pos:line="168" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="168" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="50"/></return>
    }<pos:position pos:line="169" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name pos:line="171" pos:column="5">x<pos:position pos:line="171" pos:column="6"/></name> <operator pos:line="171" pos:column="7">=<pos:position pos:line="171" pos:column="8"/></operator> <call><name pos:line="171" pos:column="9">send<pos:position pos:line="171" pos:column="13"/></name><argument_list pos:line="171" pos:column="13">(<argument><expr><name pos:line="171" pos:column="14">pwfd<pos:position pos:line="171" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="171" pos:column="20">(<pos:position pos:line="171" pos:column="21"/></operator><specifier pos:line="171" pos:column="21">const<pos:position pos:line="171" pos:column="26"/></specifier> <name pos:line="171" pos:column="27">void<pos:position pos:line="171" pos:column="31"/></name> <operator pos:line="171" pos:column="32">*<pos:position pos:line="171" pos:column="33"/></operator><operator pos:line="171" pos:column="33">)<pos:position pos:line="171" pos:column="34"/></operator><name pos:line="171" pos:column="34">ok_string<pos:position pos:line="171" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="171" pos:column="45">strlen<pos:position pos:line="171" pos:column="51"/></name><argument_list pos:line="171" pos:column="51">(<argument><expr><name pos:line="171" pos:column="52">ok_string<pos:position pos:line="171" pos:column="61"/></name></expr></argument>)<pos:position pos:line="171" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="171" pos:column="64">0<pos:position pos:line="171" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="171" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="67"/></expr_stmt>

    <if pos:line="173" pos:column="5">if <condition pos:line="173" pos:column="8">(<expr><name pos:line="173" pos:column="9">x<pos:position pos:line="173" pos:column="10"/></name> <operator pos:line="173" pos:column="11">&lt;<pos:position pos:line="173" pos:column="15"/></operator> <literal type="number" pos:line="173" pos:column="13">0<pos:position pos:line="173" pos:column="14"/></literal></expr>)<pos:position pos:line="173" pos:column="15"/></condition><then pos:line="173" pos:column="15"> <block pos:line="173" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="174" pos:column="9">debugs<pos:position pos:line="174" pos:column="15"/></name><argument_list pos:line="174" pos:column="15">(<argument><expr><literal type="number" pos:line="174" pos:column="16">54<pos:position pos:line="174" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="174" pos:column="20">0<pos:position pos:line="174" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="174" pos:column="23">"ipcCreate: PARENT: OK write test failed"<pos:position pos:line="174" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="175" pos:column="9">debugs<pos:position pos:line="175" pos:column="15"/></name><argument_list pos:line="175" pos:column="15">(<argument><expr><literal type="number" pos:line="175" pos:column="16">54<pos:position pos:line="175" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="175" pos:column="20">0<pos:position pos:line="175" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="23">"--&gt; read: "<pos:position pos:line="175" pos:column="38"/></literal> <operator pos:line="175" pos:column="36">&lt;&lt;<pos:position pos:line="175" pos:column="44"/></operator> <call><name pos:line="175" pos:column="39">xstrerror<pos:position pos:line="175" pos:column="48"/></name><argument_list pos:line="175" pos:column="48">()<pos:position pos:line="175" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="175" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="176" pos:column="9">CloseHandle<pos:position pos:line="176" pos:column="20"/></name><argument_list pos:line="176" pos:column="20">(<argument><expr><operator pos:line="176" pos:column="21">(<pos:position pos:line="176" pos:column="22"/></operator><name pos:line="176" pos:column="22">HANDLE<pos:position pos:line="176" pos:column="28"/></name><operator pos:line="176" pos:column="28">)<pos:position pos:line="176" pos:column="29"/></operator> <name pos:line="176" pos:column="30">thread<pos:position pos:line="176" pos:column="36"/></name></expr></argument>)<pos:position pos:line="176" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="38"/></expr_stmt>
        <return pos:line="177" pos:column="9">return <expr><call><name pos:line="177" pos:column="16">ipcCloseAllFD<pos:position pos:line="177" pos:column="29"/></name><argument_list pos:line="177" pos:column="29">(<argument><expr><name pos:line="177" pos:column="30">prfd<pos:position pos:line="177" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="36">pwfd<pos:position pos:line="177" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="177" pos:column="42">-<pos:position pos:line="177" pos:column="43"/></operator><literal type="number" pos:line="177" pos:column="43">1<pos:position pos:line="177" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="177" pos:column="46">-<pos:position pos:line="177" pos:column="47"/></operator><literal type="number" pos:line="177" pos:column="47">1<pos:position pos:line="177" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="50"/></return>
    }<pos:position pos:line="178" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="180" pos:column="5">memset<pos:position pos:line="180" pos:column="11"/></name><argument_list pos:line="180" pos:column="11">(<argument><expr><name pos:line="180" pos:column="12">hello_buf<pos:position pos:line="180" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="180" pos:column="23">'\0'<pos:position pos:line="180" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="180" pos:column="29">HELLO_BUF_SZ<pos:position pos:line="180" pos:column="41"/></name></expr></argument>)<pos:position pos:line="180" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="181" pos:column="5">x<pos:position pos:line="181" pos:column="6"/></name> <operator pos:line="181" pos:column="7">=<pos:position pos:line="181" pos:column="8"/></operator> <call><name pos:line="181" pos:column="9">recv<pos:position pos:line="181" pos:column="13"/></name><argument_list pos:line="181" pos:column="13">(<argument><expr><name pos:line="181" pos:column="14">prfd<pos:position pos:line="181" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="181" pos:column="20">(<pos:position pos:line="181" pos:column="21"/></operator><name pos:line="181" pos:column="21">void<pos:position pos:line="181" pos:column="25"/></name> <operator pos:line="181" pos:column="26">*<pos:position pos:line="181" pos:column="27"/></operator><operator pos:line="181" pos:column="27">)<pos:position pos:line="181" pos:column="28"/></operator><name pos:line="181" pos:column="28">hello_buf<pos:position pos:line="181" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="39">HELLO_BUF_SZ<pos:position pos:line="181" pos:column="51"/></name> <operator pos:line="181" pos:column="52">-<pos:position pos:line="181" pos:column="53"/></operator> <literal type="number" pos:line="181" pos:column="54">1<pos:position pos:line="181" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="181" pos:column="57">0<pos:position pos:line="181" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="60"/></expr_stmt>

    <if pos:line="183" pos:column="5">if <condition pos:line="183" pos:column="8">(<expr><name pos:line="183" pos:column="9">x<pos:position pos:line="183" pos:column="10"/></name> <operator pos:line="183" pos:column="11">&lt;<pos:position pos:line="183" pos:column="15"/></operator> <literal type="number" pos:line="183" pos:column="13">0<pos:position pos:line="183" pos:column="14"/></literal></expr>)<pos:position pos:line="183" pos:column="15"/></condition><then pos:line="183" pos:column="15"> <block pos:line="183" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="184" pos:column="9">debugs<pos:position pos:line="184" pos:column="15"/></name><argument_list pos:line="184" pos:column="15">(<argument><expr><literal type="number" pos:line="184" pos:column="16">54<pos:position pos:line="184" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="184" pos:column="20">0<pos:position pos:line="184" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="184" pos:column="23">"ipcCreate: PARENT: OK read test failed"<pos:position pos:line="184" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="184" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="185" pos:column="9">debugs<pos:position pos:line="185" pos:column="15"/></name><argument_list pos:line="185" pos:column="15">(<argument><expr><literal type="number" pos:line="185" pos:column="16">54<pos:position pos:line="185" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="185" pos:column="20">0<pos:position pos:line="185" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="185" pos:column="23">"--&gt; read: "<pos:position pos:line="185" pos:column="38"/></literal> <operator pos:line="185" pos:column="36">&lt;&lt;<pos:position pos:line="185" pos:column="44"/></operator> <call><name pos:line="185" pos:column="39">xstrerror<pos:position pos:line="185" pos:column="48"/></name><argument_list pos:line="185" pos:column="48">()<pos:position pos:line="185" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="185" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="186" pos:column="9">CloseHandle<pos:position pos:line="186" pos:column="20"/></name><argument_list pos:line="186" pos:column="20">(<argument><expr><operator pos:line="186" pos:column="21">(<pos:position pos:line="186" pos:column="22"/></operator><name pos:line="186" pos:column="22">HANDLE<pos:position pos:line="186" pos:column="28"/></name><operator pos:line="186" pos:column="28">)<pos:position pos:line="186" pos:column="29"/></operator> <name pos:line="186" pos:column="30">thread<pos:position pos:line="186" pos:column="36"/></name></expr></argument>)<pos:position pos:line="186" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="38"/></expr_stmt>
        <return pos:line="187" pos:column="9">return <expr><call><name pos:line="187" pos:column="16">ipcCloseAllFD<pos:position pos:line="187" pos:column="29"/></name><argument_list pos:line="187" pos:column="29">(<argument><expr><name pos:line="187" pos:column="30">prfd<pos:position pos:line="187" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="36">pwfd<pos:position pos:line="187" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="187" pos:column="42">-<pos:position pos:line="187" pos:column="43"/></operator><literal type="number" pos:line="187" pos:column="43">1<pos:position pos:line="187" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="187" pos:column="46">-<pos:position pos:line="187" pos:column="47"/></operator><literal type="number" pos:line="187" pos:column="47">1<pos:position pos:line="187" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="187" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="50"/></return>
    }<pos:position pos:line="188" pos:column="6"/></block></then> <elseif pos:line="188" pos:column="7">else <if pos:line="188" pos:column="12">if <condition pos:line="188" pos:column="15">(<expr><operator pos:line="188" pos:column="16">!<pos:position pos:line="188" pos:column="17"/></operator><call><name pos:line="188" pos:column="17">strcmp<pos:position pos:line="188" pos:column="23"/></name><argument_list pos:line="188" pos:column="23">(<argument><expr><name pos:line="188" pos:column="24">hello_buf<pos:position pos:line="188" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="188" pos:column="35">err_string<pos:position pos:line="188" pos:column="45"/></name></expr></argument>)<pos:position pos:line="188" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="188" pos:column="47"/></condition><then pos:line="188" pos:column="47"> <block pos:line="188" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="189" pos:column="9">debugs<pos:position pos:line="189" pos:column="15"/></name><argument_list pos:line="189" pos:column="15">(<argument><expr><literal type="number" pos:line="189" pos:column="16">54<pos:position pos:line="189" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="189" pos:column="20">0<pos:position pos:line="189" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="23">"ipcCreate: PARENT: OK read test failed"<pos:position pos:line="189" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="190" pos:column="9">debugs<pos:position pos:line="190" pos:column="15"/></name><argument_list pos:line="190" pos:column="15">(<argument><expr><literal type="number" pos:line="190" pos:column="16">54<pos:position pos:line="190" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="190" pos:column="20">0<pos:position pos:line="190" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="190" pos:column="23">"--&gt; read returned "<pos:position pos:line="190" pos:column="46"/></literal> <operator pos:line="190" pos:column="44">&lt;&lt;<pos:position pos:line="190" pos:column="52"/></operator> <name pos:line="190" pos:column="47">x<pos:position pos:line="190" pos:column="48"/></name></expr></argument>)<pos:position pos:line="190" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="191" pos:column="9">debugs<pos:position pos:line="191" pos:column="15"/></name><argument_list pos:line="191" pos:column="15">(<argument><expr><literal type="number" pos:line="191" pos:column="16">54<pos:position pos:line="191" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="191" pos:column="20">0<pos:position pos:line="191" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="191" pos:column="23">"--&gt; got '"<pos:position pos:line="191" pos:column="37"/></literal> <operator pos:line="191" pos:column="35">&lt;&lt;<pos:position pos:line="191" pos:column="43"/></operator> <call><name pos:line="191" pos:column="38">rfc1738_escape<pos:position pos:line="191" pos:column="52"/></name><argument_list pos:line="191" pos:column="52">(<argument><expr><name pos:line="191" pos:column="53">hello_buf<pos:position pos:line="191" pos:column="62"/></name></expr></argument>)<pos:position pos:line="191" pos:column="63"/></argument_list></call> <operator pos:line="191" pos:column="64">&lt;&lt;<pos:position pos:line="191" pos:column="72"/></operator> <literal type="string" pos:line="191" pos:column="67">"'"<pos:position pos:line="191" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="192" pos:column="9">CloseHandle<pos:position pos:line="192" pos:column="20"/></name><argument_list pos:line="192" pos:column="20">(<argument><expr><operator pos:line="192" pos:column="21">(<pos:position pos:line="192" pos:column="22"/></operator><name pos:line="192" pos:column="22">HANDLE<pos:position pos:line="192" pos:column="28"/></name><operator pos:line="192" pos:column="28">)<pos:position pos:line="192" pos:column="29"/></operator> <name pos:line="192" pos:column="30">thread<pos:position pos:line="192" pos:column="36"/></name></expr></argument>)<pos:position pos:line="192" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="38"/></expr_stmt>
        <return pos:line="193" pos:column="9">return <expr><call><name pos:line="193" pos:column="16">ipcCloseAllFD<pos:position pos:line="193" pos:column="29"/></name><argument_list pos:line="193" pos:column="29">(<argument><expr><name pos:line="193" pos:column="30">prfd<pos:position pos:line="193" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="36">pwfd<pos:position pos:line="193" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="193" pos:column="42">-<pos:position pos:line="193" pos:column="43"/></operator><literal type="number" pos:line="193" pos:column="43">1<pos:position pos:line="193" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="193" pos:column="46">-<pos:position pos:line="193" pos:column="47"/></operator><literal type="number" pos:line="193" pos:column="47">1<pos:position pos:line="193" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="50"/></return>
    }<pos:position pos:line="194" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name><name pos:line="196" pos:column="5">hello_buf<pos:position pos:line="196" pos:column="14"/></name><index pos:line="196" pos:column="14">[<expr><name pos:line="196" pos:column="15">x<pos:position pos:line="196" pos:column="16"/></name></expr>]<pos:position pos:line="196" pos:column="17"/></index></name> <operator pos:line="196" pos:column="18">=<pos:position pos:line="196" pos:column="19"/></operator> <literal type="char" pos:line="196" pos:column="20">'\0'<pos:position pos:line="196" pos:column="24"/></literal></expr>;<pos:position pos:line="196" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="197" pos:column="5">pid<pos:position pos:line="197" pos:column="8"/></name> <operator pos:line="197" pos:column="9">=<pos:position pos:line="197" pos:column="10"/></operator> <call><name pos:line="197" pos:column="11">atol<pos:position pos:line="197" pos:column="15"/></name><argument_list pos:line="197" pos:column="15">(<argument><expr><name pos:line="197" pos:column="16">hello_buf<pos:position pos:line="197" pos:column="25"/></name></expr></argument>)<pos:position pos:line="197" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="198" pos:column="5">commSetTimeout<pos:position pos:line="198" pos:column="19"/></name><argument_list pos:line="198" pos:column="19">(<argument><expr><name pos:line="198" pos:column="20">prfd<pos:position pos:line="198" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="198" pos:column="26">-<pos:position pos:line="198" pos:column="27"/></operator><literal type="number" pos:line="198" pos:column="27">1<pos:position pos:line="198" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="30">NULL<pos:position pos:line="198" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="198" pos:column="36">NULL<pos:position pos:line="198" pos:column="40"/></name></expr></argument>)<pos:position pos:line="198" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="199" pos:column="5">commSetNonBlocking<pos:position pos:line="199" pos:column="23"/></name><argument_list pos:line="199" pos:column="23">(<argument><expr><name pos:line="199" pos:column="24">prfd<pos:position pos:line="199" pos:column="28"/></name></expr></argument>)<pos:position pos:line="199" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="200" pos:column="5">commSetNonBlocking<pos:position pos:line="200" pos:column="23"/></name><argument_list pos:line="200" pos:column="23">(<argument><expr><name pos:line="200" pos:column="24">pwfd<pos:position pos:line="200" pos:column="28"/></name></expr></argument>)<pos:position pos:line="200" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="201" pos:column="5">commSetCloseOnExec<pos:position pos:line="201" pos:column="23"/></name><argument_list pos:line="201" pos:column="23">(<argument><expr><name pos:line="201" pos:column="24">prfd<pos:position pos:line="201" pos:column="28"/></name></expr></argument>)<pos:position pos:line="201" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="202" pos:column="5">commSetCloseOnExec<pos:position pos:line="202" pos:column="23"/></name><argument_list pos:line="202" pos:column="23">(<argument><expr><name pos:line="202" pos:column="24">pwfd<pos:position pos:line="202" pos:column="28"/></name></expr></argument>)<pos:position pos:line="202" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="30"/></expr_stmt>

    <if pos:line="204" pos:column="5">if <condition pos:line="204" pos:column="8">(<expr><name pos:line="204" pos:column="9">rfd<pos:position pos:line="204" pos:column="12"/></name></expr>)<pos:position pos:line="204" pos:column="13"/></condition><then pos:line="204" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="205" pos:column="9">*<pos:position pos:line="205" pos:column="10"/></operator><name pos:line="205" pos:column="10">rfd<pos:position pos:line="205" pos:column="13"/></name> <operator pos:line="205" pos:column="14">=<pos:position pos:line="205" pos:column="15"/></operator> <name pos:line="205" pos:column="16">prfd<pos:position pos:line="205" pos:column="20"/></name></expr>;<pos:position pos:line="205" pos:column="21"/></expr_stmt></block></then></if>

    <if pos:line="207" pos:column="5">if <condition pos:line="207" pos:column="8">(<expr><name pos:line="207" pos:column="9">wfd<pos:position pos:line="207" pos:column="12"/></name></expr>)<pos:position pos:line="207" pos:column="13"/></condition><then pos:line="207" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="208" pos:column="9">*<pos:position pos:line="208" pos:column="10"/></operator><name pos:line="208" pos:column="10">wfd<pos:position pos:line="208" pos:column="13"/></name> <operator pos:line="208" pos:column="14">=<pos:position pos:line="208" pos:column="15"/></operator> <name pos:line="208" pos:column="16">pwfd<pos:position pos:line="208" pos:column="20"/></name></expr>;<pos:position pos:line="208" pos:column="21"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="210" pos:column="5">fd_table<pos:position pos:line="210" pos:column="13"/></name><index pos:line="210" pos:column="13">[<expr><name pos:line="210" pos:column="14">prfd<pos:position pos:line="210" pos:column="18"/></name></expr>]<pos:position pos:line="210" pos:column="19"/></index></name><operator pos:line="210" pos:column="19">.<pos:position pos:line="210" pos:column="20"/></operator><name><name pos:line="210" pos:column="20">flags<pos:position pos:line="210" pos:column="25"/></name><operator pos:line="210" pos:column="25">.<pos:position pos:line="210" pos:column="26"/></operator><name pos:line="210" pos:column="26">ipc<pos:position pos:line="210" pos:column="29"/></name></name> <operator pos:line="210" pos:column="30">=<pos:position pos:line="210" pos:column="31"/></operator> <literal type="number" pos:line="210" pos:column="32">1<pos:position pos:line="210" pos:column="33"/></literal></expr>;<pos:position pos:line="210" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="212" pos:column="5">fd_table<pos:position pos:line="212" pos:column="13"/></name><index pos:line="212" pos:column="13">[<expr><name pos:line="212" pos:column="14">pwfd<pos:position pos:line="212" pos:column="18"/></name></expr>]<pos:position pos:line="212" pos:column="19"/></index></name><operator pos:line="212" pos:column="19">.<pos:position pos:line="212" pos:column="20"/></operator><name><name pos:line="212" pos:column="20">flags<pos:position pos:line="212" pos:column="25"/></name><operator pos:line="212" pos:column="25">.<pos:position pos:line="212" pos:column="26"/></operator><name pos:line="212" pos:column="26">ipc<pos:position pos:line="212" pos:column="29"/></name></name> <operator pos:line="212" pos:column="30">=<pos:position pos:line="212" pos:column="31"/></operator> <literal type="number" pos:line="212" pos:column="32">1<pos:position pos:line="212" pos:column="33"/></literal></expr>;<pos:position pos:line="212" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="214" pos:column="5">fd_table<pos:position pos:line="214" pos:column="13"/></name><index pos:line="214" pos:column="13">[<expr><name pos:line="214" pos:column="14">crfd<pos:position pos:line="214" pos:column="18"/></name></expr>]<pos:position pos:line="214" pos:column="19"/></index></name><operator pos:line="214" pos:column="19">.<pos:position pos:line="214" pos:column="20"/></operator><name><name pos:line="214" pos:column="20">flags<pos:position pos:line="214" pos:column="25"/></name><operator pos:line="214" pos:column="25">.<pos:position pos:line="214" pos:column="26"/></operator><name pos:line="214" pos:column="26">ipc<pos:position pos:line="214" pos:column="29"/></name></name> <operator pos:line="214" pos:column="30">=<pos:position pos:line="214" pos:column="31"/></operator> <literal type="number" pos:line="214" pos:column="32">1<pos:position pos:line="214" pos:column="33"/></literal></expr>;<pos:position pos:line="214" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="216" pos:column="5">fd_table<pos:position pos:line="216" pos:column="13"/></name><index pos:line="216" pos:column="13">[<expr><name pos:line="216" pos:column="14">cwfd<pos:position pos:line="216" pos:column="18"/></name></expr>]<pos:position pos:line="216" pos:column="19"/></index></name><operator pos:line="216" pos:column="19">.<pos:position pos:line="216" pos:column="20"/></operator><name><name pos:line="216" pos:column="20">flags<pos:position pos:line="216" pos:column="25"/></name><operator pos:line="216" pos:column="25">.<pos:position pos:line="216" pos:column="26"/></operator><name pos:line="216" pos:column="26">ipc<pos:position pos:line="216" pos:column="29"/></name></name> <operator pos:line="216" pos:column="30">=<pos:position pos:line="216" pos:column="31"/></operator> <literal type="number" pos:line="216" pos:column="32">1<pos:position pos:line="216" pos:column="33"/></literal></expr>;<pos:position pos:line="216" pos:column="34"/></expr_stmt>

    <if pos:line="218" pos:column="5">if <condition pos:line="218" pos:column="8">(<expr><name><name pos:line="218" pos:column="9">Config<pos:position pos:line="218" pos:column="15"/></name><operator pos:line="218" pos:column="15">.<pos:position pos:line="218" pos:column="16"/></operator><name pos:line="218" pos:column="16">sleep_after_fork<pos:position pos:line="218" pos:column="32"/></name></name></expr>)<pos:position pos:line="218" pos:column="33"/></condition><then pos:line="218" pos:column="33"> <block pos:line="218" pos:column="34">{
        <comment type="block" pos:line="219" pos:column="9">/* XXX emulation of usleep() */</comment>
        <decl_stmt><decl><type><name pos:line="220" pos:column="9">DWORD<pos:position pos:line="220" pos:column="14"/></name></type> <name pos:line="220" pos:column="15">sl<pos:position pos:line="220" pos:column="17"/></name></decl>;<pos:position pos:line="220" pos:column="18"/></decl_stmt>
        <expr_stmt><expr><name pos:line="221" pos:column="9">sl<pos:position pos:line="221" pos:column="11"/></name> <operator pos:line="221" pos:column="12">=<pos:position pos:line="221" pos:column="13"/></operator> <name><name pos:line="221" pos:column="14">Config<pos:position pos:line="221" pos:column="20"/></name><operator pos:line="221" pos:column="20">.<pos:position pos:line="221" pos:column="21"/></operator><name pos:line="221" pos:column="21">sleep_after_fork<pos:position pos:line="221" pos:column="37"/></name></name> <operator pos:line="221" pos:column="38">/<pos:position pos:line="221" pos:column="39"/></operator> <literal type="number" pos:line="221" pos:column="40">1000<pos:position pos:line="221" pos:column="44"/></literal></expr>;<pos:position pos:line="221" pos:column="45"/></expr_stmt>

        <if pos:line="223" pos:column="9">if <condition pos:line="223" pos:column="12">(<expr><name pos:line="223" pos:column="13">sl<pos:position pos:line="223" pos:column="15"/></name> <operator pos:line="223" pos:column="16">==<pos:position pos:line="223" pos:column="18"/></operator> <literal type="number" pos:line="223" pos:column="19">0<pos:position pos:line="223" pos:column="20"/></literal></expr>)<pos:position pos:line="223" pos:column="21"/></condition><then pos:line="223" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><name pos:line="224" pos:column="13">sl<pos:position pos:line="224" pos:column="15"/></name> <operator pos:line="224" pos:column="16">=<pos:position pos:line="224" pos:column="17"/></operator> <literal type="number" pos:line="224" pos:column="18">1<pos:position pos:line="224" pos:column="19"/></literal></expr>;<pos:position pos:line="224" pos:column="20"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="226" pos:column="9">Sleep<pos:position pos:line="226" pos:column="14"/></name><argument_list pos:line="226" pos:column="14">(<argument><expr><name pos:line="226" pos:column="15">sl<pos:position pos:line="226" pos:column="17"/></name></expr></argument>)<pos:position pos:line="226" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="227" pos:column="6"/></block></then></if>

    <if pos:line="229" pos:column="5">if <condition pos:line="229" pos:column="8">(<expr><call><name pos:line="229" pos:column="9">GetExitCodeThread<pos:position pos:line="229" pos:column="26"/></name><argument_list pos:line="229" pos:column="26">(<argument><expr><operator pos:line="229" pos:column="27">(<pos:position pos:line="229" pos:column="28"/></operator><name pos:line="229" pos:column="28">HANDLE<pos:position pos:line="229" pos:column="34"/></name><operator pos:line="229" pos:column="34">)<pos:position pos:line="229" pos:column="35"/></operator> <name pos:line="229" pos:column="36">thread<pos:position pos:line="229" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="229" pos:column="44">&amp;<pos:position pos:line="229" pos:column="49"/></operator><name pos:line="229" pos:column="45">ecode<pos:position pos:line="229" pos:column="50"/></name></expr></argument>)<pos:position pos:line="229" pos:column="51"/></argument_list></call> <operator pos:line="229" pos:column="52">&amp;&amp;<pos:position pos:line="229" pos:column="62"/></operator> <name pos:line="229" pos:column="55">ecode<pos:position pos:line="229" pos:column="60"/></name> <operator pos:line="229" pos:column="61">==<pos:position pos:line="229" pos:column="63"/></operator> <name pos:line="229" pos:column="64">STILL_ACTIVE<pos:position pos:line="229" pos:column="76"/></name></expr>)<pos:position pos:line="229" pos:column="77"/></condition><then pos:line="229" pos:column="77"> <block pos:line="229" pos:column="78">{
        <if pos:line="230" pos:column="9">if <condition pos:line="230" pos:column="12">(<expr><name pos:line="230" pos:column="13">hIpc<pos:position pos:line="230" pos:column="17"/></name></expr>)<pos:position pos:line="230" pos:column="18"/></condition><then pos:line="230" pos:column="18">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="231" pos:column="13">*<pos:position pos:line="231" pos:column="14"/></operator><name pos:line="231" pos:column="14">hIpc<pos:position pos:line="231" pos:column="18"/></name> <operator pos:line="231" pos:column="19">=<pos:position pos:line="231" pos:column="20"/></operator> <operator pos:line="231" pos:column="21">(<pos:position pos:line="231" pos:column="22"/></operator><name pos:line="231" pos:column="22">HANDLE<pos:position pos:line="231" pos:column="28"/></name><operator pos:line="231" pos:column="28">)<pos:position pos:line="231" pos:column="29"/></operator> <name pos:line="231" pos:column="30">thread<pos:position pos:line="231" pos:column="36"/></name></expr>;<pos:position pos:line="231" pos:column="37"/></expr_stmt></block></then></if>

        <return pos:line="233" pos:column="9">return <expr><name pos:line="233" pos:column="16">pid<pos:position pos:line="233" pos:column="19"/></name></expr>;<pos:position pos:line="233" pos:column="20"/></return>
    }<pos:position pos:line="234" pos:column="6"/></block></then> <else pos:line="234" pos:column="7">else <block pos:line="234" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="235" pos:column="9">CloseHandle<pos:position pos:line="235" pos:column="20"/></name><argument_list pos:line="235" pos:column="20">(<argument><expr><operator pos:line="235" pos:column="21">(<pos:position pos:line="235" pos:column="22"/></operator><name pos:line="235" pos:column="22">HANDLE<pos:position pos:line="235" pos:column="28"/></name><operator pos:line="235" pos:column="28">)<pos:position pos:line="235" pos:column="29"/></operator> <name pos:line="235" pos:column="30">thread<pos:position pos:line="235" pos:column="36"/></name></expr></argument>)<pos:position pos:line="235" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="38"/></expr_stmt>
        <return pos:line="236" pos:column="9">return <expr><call><name pos:line="236" pos:column="16">ipcCloseAllFD<pos:position pos:line="236" pos:column="29"/></name><argument_list pos:line="236" pos:column="29">(<argument><expr><name pos:line="236" pos:column="30">prfd<pos:position pos:line="236" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="236" pos:column="36">pwfd<pos:position pos:line="236" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="236" pos:column="42">-<pos:position pos:line="236" pos:column="43"/></operator><literal type="number" pos:line="236" pos:column="43">1<pos:position pos:line="236" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="236" pos:column="46">-<pos:position pos:line="236" pos:column="47"/></operator><literal type="number" pos:line="236" pos:column="47">1<pos:position pos:line="236" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="50"/></return>
    }<pos:position pos:line="237" pos:column="6"/></block></else></if>
}<pos:position pos:line="238" pos:column="2"/></block></function></unit>
