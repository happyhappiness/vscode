<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1393_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">doPages<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">StoreEntry<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">anEntry<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">MemObject<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">mem<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">anEntry<pos:position pos:line="4" pos:column="29"/></name><operator pos:line="4" pos:column="29">-&gt;<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="31">mem_obj<pos:position pos:line="4" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>

    <do pos:line="6" pos:column="5">do <block pos:line="6" pos:column="8">{
        <comment type="block" pos:line="7" pos:column="9">/*
         * Evil hack time.
         * We are paging out to disk in page size chunks. however, later on when
         * we update the queue position, we might not have a page (I *think*),
         * so we do the actual page update here.
         */</comment>

        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">mem<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">swapout<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">.<pos:position pos:line="14" pos:column="26"/></operator><name pos:line="14" pos:column="26">memnode<pos:position pos:line="14" pos:column="33"/></name></name> <operator pos:line="14" pos:column="34">==<pos:position pos:line="14" pos:column="36"/></operator> <name pos:line="14" pos:column="37">NULL<pos:position pos:line="14" pos:column="41"/></name></expr>)<pos:position pos:line="14" pos:column="42"/></condition><then pos:line="14" pos:column="42"> <block pos:line="14" pos:column="43">{
            <comment type="block" pos:line="15" pos:column="13">/* We need to swap out the first page */</comment>
            <expr_stmt><expr><name><name pos:line="16" pos:column="13">mem<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">swapout<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">.<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">memnode<pos:position pos:line="16" pos:column="33"/></name></name> <operator pos:line="16" pos:column="34">=<pos:position pos:line="16" pos:column="35"/></operator> <cast type="const" pos:line="16" pos:column="36">const_cast<argument_list type="generic" pos:line="16" pos:column="46">&lt;<argument><expr><name pos:line="16" pos:column="47">mem_node<pos:position pos:line="16" pos:column="55"/></name> <operator pos:line="16" pos:column="56">*<pos:position pos:line="16" pos:column="57"/></operator></expr></argument>&gt;<pos:position pos:line="16" pos:column="61"/></argument_list><argument_list pos:line="16" pos:column="58">(<argument><expr><call><name><name pos:line="16" pos:column="59">mem<pos:position pos:line="16" pos:column="62"/></name><operator pos:line="16" pos:column="62">-&gt;<pos:position pos:line="16" pos:column="67"/></operator><name pos:line="16" pos:column="64">data_hdr<pos:position pos:line="16" pos:column="72"/></name><operator pos:line="16" pos:column="72">.<pos:position pos:line="16" pos:column="73"/></operator><name pos:line="16" pos:column="73">start<pos:position pos:line="16" pos:column="78"/></name></name><argument_list pos:line="16" pos:column="78">()<pos:position pos:line="16" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="81"/></argument_list></cast></expr>;<pos:position pos:line="16" pos:column="82"/></expr_stmt>
        }<pos:position pos:line="17" pos:column="10"/></block></then> <else pos:line="17" pos:column="11">else <block pos:line="17" pos:column="16">{
            <comment type="block" pos:line="18" pos:column="13">/* We need to swap out the next page */</comment>
            <comment type="block" pos:line="19" pos:column="13">/* 20030636 RBC - we don't have -&gt;next anymore.
             * But we do have the next location */</comment>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">mem<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">swapout<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">.<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">memnode<pos:position pos:line="21" pos:column="33"/></name></name> <operator pos:line="21" pos:column="34">=<pos:position pos:line="21" pos:column="35"/></operator> <call><name><name pos:line="21" pos:column="36">mem<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">-&gt;<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="41">data_hdr<pos:position pos:line="21" pos:column="49"/></name><operator pos:line="21" pos:column="49">.<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="50">getBlockContainingLocation<pos:position pos:line="21" pos:column="76"/></name></name> <argument_list pos:line="21" pos:column="77">(<argument><expr><call><name><name pos:line="21" pos:column="78">mem<pos:position pos:line="21" pos:column="81"/></name><operator pos:line="21" pos:column="81">-&gt;<pos:position pos:line="21" pos:column="86"/></operator><name pos:line="21" pos:column="83">swapout<pos:position pos:line="21" pos:column="90"/></name><operator pos:line="21" pos:column="90">.<pos:position pos:line="21" pos:column="91"/></operator><name pos:line="21" pos:column="91">memnode<pos:position pos:line="21" pos:column="98"/></name><operator pos:line="21" pos:column="98">-&gt;<pos:position pos:line="21" pos:column="103"/></operator><name pos:line="21" pos:column="100">end<pos:position pos:line="21" pos:column="103"/></name></name><argument_list pos:line="21" pos:column="103">()<pos:position pos:line="21" pos:column="105"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="107"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="24" pos:column="9">/*
         * Get the length of this buffer. We are assuming(!) that the buffer
         * length won't change on this buffer, or things are going to be very
         * strange. I think that after the copy to a buffer is done, the buffer
         * size should stay fixed regardless so that this code isn't confused,
         * but we can look at this at a later date or whenever the code results
         * in bad swapouts, whichever happens first. :-)
         */</comment>
        <decl_stmt><decl><type><name pos:line="32" pos:column="9">ssize_t<pos:position pos:line="32" pos:column="16"/></name></type> <name pos:line="32" pos:column="17">swap_buf_len<pos:position pos:line="32" pos:column="29"/></name> <init pos:line="32" pos:column="30">= <expr><name><name pos:line="32" pos:column="32">mem<pos:position pos:line="32" pos:column="35"/></name><operator pos:line="32" pos:column="35">-&gt;<pos:position pos:line="32" pos:column="40"/></operator><name pos:line="32" pos:column="37">swapout<pos:position pos:line="32" pos:column="44"/></name><operator pos:line="32" pos:column="44">.<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="45">memnode<pos:position pos:line="32" pos:column="52"/></name><operator pos:line="32" pos:column="52">-&gt;<pos:position pos:line="32" pos:column="57"/></operator><name pos:line="32" pos:column="54">nodeBuffer<pos:position pos:line="32" pos:column="64"/></name><operator pos:line="32" pos:column="64">.<pos:position pos:line="32" pos:column="65"/></operator><name pos:line="32" pos:column="65">length<pos:position pos:line="32" pos:column="71"/></name></name></expr></init></decl>;<pos:position pos:line="32" pos:column="72"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="34" pos:column="9">debugs<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><literal type="number" pos:line="34" pos:column="16">20<pos:position pos:line="34" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="20">3<pos:position pos:line="34" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="23">"storeSwapOut: swap_buf_len = "<pos:position pos:line="34" pos:column="54"/></literal> <operator pos:line="34" pos:column="55">&lt;&lt;<pos:position pos:line="34" pos:column="63"/></operator> <name pos:line="34" pos:column="58">swap_buf_len<pos:position pos:line="34" pos:column="70"/></name></expr></argument>)<pos:position pos:line="34" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="72"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="36" pos:column="9">assert<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">swap_buf_len<pos:position pos:line="36" pos:column="28"/></name> <operator pos:line="36" pos:column="29">&gt;<pos:position pos:line="36" pos:column="33"/></operator> <literal type="number" pos:line="36" pos:column="31">0<pos:position pos:line="36" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="38" pos:column="9">debugs<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="number" pos:line="38" pos:column="16">20<pos:position pos:line="38" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="20">3<pos:position pos:line="38" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="23">"storeSwapOut: swapping out "<pos:position pos:line="38" pos:column="52"/></literal> <operator pos:line="38" pos:column="53">&lt;&lt;<pos:position pos:line="38" pos:column="61"/></operator> <name pos:line="38" pos:column="56">swap_buf_len<pos:position pos:line="38" pos:column="68"/></name> <operator pos:line="38" pos:column="69">&lt;&lt;<pos:position pos:line="38" pos:column="77"/></operator> <literal type="string" pos:line="38" pos:column="72">" bytes from "<pos:position pos:line="38" pos:column="86"/></literal> <operator pos:line="38" pos:column="87">&lt;&lt;<pos:position pos:line="38" pos:column="95"/></operator> <name><name pos:line="38" pos:column="90">mem<pos:position pos:line="38" pos:column="93"/></name><operator pos:line="38" pos:column="93">-&gt;<pos:position pos:line="38" pos:column="98"/></operator><name pos:line="38" pos:column="95">swapout<pos:position pos:line="38" pos:column="102"/></name><operator pos:line="38" pos:column="102">.<pos:position pos:line="38" pos:column="103"/></operator><name pos:line="38" pos:column="103">queue_offset<pos:position pos:line="38" pos:column="115"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="117"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="40" pos:column="9">mem<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">-&gt;<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="14">swapout<pos:position pos:line="40" pos:column="21"/></name><operator pos:line="40" pos:column="21">.<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">queue_offset<pos:position pos:line="40" pos:column="34"/></name></name> <operator pos:line="40" pos:column="35">+=<pos:position pos:line="40" pos:column="37"/></operator> <name pos:line="40" pos:column="38">swap_buf_len<pos:position pos:line="40" pos:column="50"/></name></expr>;<pos:position pos:line="40" pos:column="51"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="42" pos:column="9">storeIOWrite<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><name><name pos:line="42" pos:column="22">mem<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">-&gt;<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="27">swapout<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">.<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="35">sio<pos:position pos:line="42" pos:column="38"/></name></name></expr></argument>,
                     <argument><expr><call><name><name pos:line="43" pos:column="22">mem<pos:position pos:line="43" pos:column="25"/></name><operator pos:line="43" pos:column="25">-&gt;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="27">data_hdr<pos:position pos:line="43" pos:column="35"/></name><operator pos:line="43" pos:column="35">.<pos:position pos:line="43" pos:column="36"/></operator><name pos:line="43" pos:column="36">NodeGet<pos:position pos:line="43" pos:column="43"/></name></name><argument_list pos:line="43" pos:column="43">(<argument><expr><name><name pos:line="43" pos:column="44">mem<pos:position pos:line="43" pos:column="47"/></name><operator pos:line="43" pos:column="47">-&gt;<pos:position pos:line="43" pos:column="52"/></operator><name pos:line="43" pos:column="49">swapout<pos:position pos:line="43" pos:column="56"/></name><operator pos:line="43" pos:column="56">.<pos:position pos:line="43" pos:column="57"/></operator><name pos:line="43" pos:column="57">memnode<pos:position pos:line="43" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="65"/></argument_list></call></expr></argument>,
                     <argument><expr><name pos:line="44" pos:column="22">swap_buf_len<pos:position pos:line="44" pos:column="34"/></name></expr></argument>,
                     <argument><expr><operator pos:line="45" pos:column="22">-<pos:position pos:line="45" pos:column="23"/></operator><literal type="number" pos:line="45" pos:column="23">1<pos:position pos:line="45" pos:column="24"/></literal></expr></argument>,
                     <argument><expr><name pos:line="46" pos:column="22">memNodeWriteComplete<pos:position pos:line="46" pos:column="42"/></name></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="44"/></expr_stmt>

        <comment type="block" pos:line="48" pos:column="9">/* the storeWrite() call might generate an error */</comment>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name><name pos:line="49" pos:column="13">anEntry<pos:position pos:line="49" pos:column="20"/></name><operator pos:line="49" pos:column="20">-&gt;<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="22">swap_status<pos:position pos:line="49" pos:column="33"/></name></name> <operator pos:line="49" pos:column="34">!=<pos:position pos:line="49" pos:column="36"/></operator> <name pos:line="49" pos:column="37">SWAPOUT_WRITING<pos:position pos:line="49" pos:column="52"/></name></expr>)<pos:position pos:line="49" pos:column="53"/></condition><then pos:line="49" pos:column="53">
            <block type="pseudo"><break pos:line="50" pos:column="13">break;<pos:position pos:line="50" pos:column="19"/></break></block></then></if>

        <decl_stmt><decl><type><name pos:line="52" pos:column="9">int64_t<pos:position pos:line="52" pos:column="16"/></name></type> <name pos:line="52" pos:column="17">swapout_size<pos:position pos:line="52" pos:column="29"/></name> <init pos:line="52" pos:column="30">= <expr><call><name><name pos:line="52" pos:column="32">mem<pos:position pos:line="52" pos:column="35"/></name><operator pos:line="52" pos:column="35">-&gt;<pos:position pos:line="52" pos:column="40"/></operator><name pos:line="52" pos:column="37">endOffset<pos:position pos:line="52" pos:column="46"/></name></name><argument_list pos:line="52" pos:column="46">()<pos:position pos:line="52" pos:column="48"/></argument_list></call> <operator pos:line="52" pos:column="49">-<pos:position pos:line="52" pos:column="50"/></operator> <name><name pos:line="52" pos:column="51">mem<pos:position pos:line="52" pos:column="54"/></name><operator pos:line="52" pos:column="54">-&gt;<pos:position pos:line="52" pos:column="59"/></operator><name pos:line="52" pos:column="56">swapout<pos:position pos:line="52" pos:column="63"/></name><operator pos:line="52" pos:column="63">.<pos:position pos:line="52" pos:column="64"/></operator><name pos:line="52" pos:column="64">queue_offset<pos:position pos:line="52" pos:column="76"/></name></name></expr></init></decl>;<pos:position pos:line="52" pos:column="77"/></decl_stmt>

        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name><name pos:line="54" pos:column="13">anEntry<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">-&gt;<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="22">store_status<pos:position pos:line="54" pos:column="34"/></name></name> <operator pos:line="54" pos:column="35">==<pos:position pos:line="54" pos:column="37"/></operator> <name pos:line="54" pos:column="38">STORE_PENDING<pos:position pos:line="54" pos:column="51"/></name></expr>)<pos:position pos:line="54" pos:column="52"/></condition><then pos:line="54" pos:column="52">
            <block type="pseudo"><if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><name pos:line="55" pos:column="17">swapout_size<pos:position pos:line="55" pos:column="29"/></name> <operator pos:line="55" pos:column="30">&lt;<pos:position pos:line="55" pos:column="34"/></operator> <name pos:line="55" pos:column="32">SM_PAGE_SIZE<pos:position pos:line="55" pos:column="44"/></name></expr>)<pos:position pos:line="55" pos:column="45"/></condition><then pos:line="55" pos:column="45">
                <block type="pseudo"><break pos:line="56" pos:column="17">break;<pos:position pos:line="56" pos:column="23"/></break></block></then></if></block></then></if>

        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">swapout_size<pos:position pos:line="58" pos:column="25"/></name> <operator pos:line="58" pos:column="26">&lt;=<pos:position pos:line="58" pos:column="31"/></operator> <literal type="number" pos:line="58" pos:column="29">0<pos:position pos:line="58" pos:column="30"/></literal></expr>)<pos:position pos:line="58" pos:column="31"/></condition><then pos:line="58" pos:column="31">
            <block type="pseudo"><return pos:line="59" pos:column="13">return;<pos:position pos:line="59" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="60" pos:column="6"/></block> while <condition pos:line="60" pos:column="13">(<expr><literal type="boolean" pos:line="60" pos:column="14">true<pos:position pos:line="60" pos:column="18"/></literal></expr>)<pos:position pos:line="60" pos:column="19"/></condition>;<pos:position pos:line="60" pos:column="20"/></do>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
