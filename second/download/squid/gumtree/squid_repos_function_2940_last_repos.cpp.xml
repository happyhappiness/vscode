<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2940_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">clientReplyContext<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">doGetMoreData<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">()<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* We still have to do store logic processing - vary, cache hit etc */</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name><name pos:line="5" pos:column="9">http<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">-&gt;<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="15">storeEntry<pos:position pos:line="5" pos:column="25"/></name></name><argument_list pos:line="5" pos:column="25">()<pos:position pos:line="5" pos:column="27"/></argument_list></call> <operator pos:line="5" pos:column="28">!=<pos:position pos:line="5" pos:column="30"/></operator> <name pos:line="5" pos:column="31">NULL<pos:position pos:line="5" pos:column="35"/></name></expr>)<pos:position pos:line="5" pos:column="36"/></condition><then pos:line="5" pos:column="36"> <block pos:line="5" pos:column="37">{
        <comment type="block" pos:line="6" pos:column="9">/* someone found the object in the cache for us */</comment>
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">StoreIOBuffer<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">localTempBuffer<pos:position pos:line="7" pos:column="38"/></name></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>

        <expr_stmt><expr><call><name><name pos:line="9" pos:column="9">http<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">storeEntry<pos:position pos:line="9" pos:column="25"/></name></name><argument_list pos:line="9" pos:column="25">()<pos:position pos:line="9" pos:column="27"/></argument_list></call><operator pos:line="9" pos:column="27">-&gt;<pos:position pos:line="9" pos:column="32"/></operator><call><name pos:line="9" pos:column="29">lock<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><literal type="string" pos:line="9" pos:column="34">"clientReplyContext::doGetMoreData"<pos:position pos:line="9" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="71"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="11" pos:column="9">MemObject<pos:position pos:line="11" pos:column="18"/></name> <modifier pos:line="11" pos:column="19">*<pos:position pos:line="11" pos:column="20"/></modifier></type><name pos:line="11" pos:column="20">mem_obj<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><call><name><name pos:line="11" pos:column="30">http<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">-&gt;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="36">storeEntry<pos:position pos:line="11" pos:column="46"/></name></name><argument_list pos:line="11" pos:column="46">()<pos:position pos:line="11" pos:column="48"/></argument_list></call><operator pos:line="11" pos:column="48">-&gt;<pos:position pos:line="11" pos:column="53"/></operator><call><name pos:line="11" pos:column="50">makeMemObject<pos:position pos:line="11" pos:column="63"/></name><argument_list pos:line="11" pos:column="63">()<pos:position pos:line="11" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="66"/></decl_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><call><name><name pos:line="12" pos:column="14">mem_obj<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">-&gt;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="23">hasUris<pos:position pos:line="12" pos:column="30"/></name></name><argument_list pos:line="12" pos:column="30">()<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="33"/></condition><then pos:line="12" pos:column="33"> <block pos:line="12" pos:column="34">{
            <comment type="block" pos:line="13" pos:column="13">/*
             * This if-block exists because we don't want to clobber
             * a preexiting mem_obj-&gt;method value if the mem_obj
             * already exists.  For example, when a HEAD request
             * is a cache hit for a GET response, we want to keep
             * the method as GET.
             */</comment>
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">mem_obj<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">setUris<pos:position pos:line="20" pos:column="29"/></name></name><argument_list pos:line="20" pos:column="29">(<argument><expr><call><name pos:line="20" pos:column="30">storeId<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">()<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="41">http<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">-&gt;<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="47">log_uri<pos:position pos:line="20" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="56">http<pos:position pos:line="20" pos:column="60"/></name><operator pos:line="20" pos:column="60">-&gt;<pos:position pos:line="20" pos:column="65"/></operator><name pos:line="20" pos:column="62">request<pos:position pos:line="20" pos:column="69"/></name><operator pos:line="20" pos:column="69">-&gt;<pos:position pos:line="20" pos:column="74"/></operator><name pos:line="20" pos:column="71">method<pos:position pos:line="20" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="79"/></expr_stmt>
            <comment type="block" format="doxygen" pos:line="21" pos:column="13">/**
             * Here we can see if the object was
             * created using URL or alternative StoreID from helper.
             */</comment>
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">debugs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="number" pos:line="25" pos:column="20">88<pos:position pos:line="25" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="24">3<pos:position pos:line="25" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="27">"storeId: "<pos:position pos:line="25" pos:column="38"/></literal> <operator pos:line="25" pos:column="39">&lt;&lt;<pos:position pos:line="25" pos:column="47"/></operator> <call><name><name pos:line="25" pos:column="42">http<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">-&gt;<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="48">storeEntry<pos:position pos:line="25" pos:column="58"/></name></name><argument_list pos:line="25" pos:column="58">()<pos:position pos:line="25" pos:column="60"/></argument_list></call><operator pos:line="25" pos:column="60">-&gt;<pos:position pos:line="25" pos:column="65"/></operator><call><name><name pos:line="25" pos:column="62">mem_obj<pos:position pos:line="25" pos:column="69"/></name><operator pos:line="25" pos:column="69">-&gt;<pos:position pos:line="25" pos:column="74"/></operator><name pos:line="25" pos:column="71">storeId<pos:position pos:line="25" pos:column="78"/></name></name><argument_list pos:line="25" pos:column="78">()<pos:position pos:line="25" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="82"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="28" pos:column="9">sc<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <call><name pos:line="28" pos:column="14">storeClientListAdd<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><call><name><name pos:line="28" pos:column="33">http<pos:position pos:line="28" pos:column="37"/></name><operator pos:line="28" pos:column="37">-&gt;<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="39">storeEntry<pos:position pos:line="28" pos:column="49"/></name></name><argument_list pos:line="28" pos:column="49">()<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="53">this<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="29" pos:column="20"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name><name pos:line="30" pos:column="9">sc<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">setDelayId<pos:position pos:line="30" pos:column="23"/></name></name><argument_list pos:line="30" pos:column="23">(<argument><expr><call><name><name pos:line="30" pos:column="24">DelayId<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">::<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="33">DelayClient<pos:position pos:line="30" pos:column="44"/></name></name><argument_list pos:line="30" pos:column="44">(<argument><expr><name pos:line="30" pos:column="45">http<pos:position pos:line="30" pos:column="49"/></name></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="33" pos:column="9">assert<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name><name pos:line="33" pos:column="16">http<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">-&gt;<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="22">logType<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">.<pos:position pos:line="33" pos:column="30"/></operator><name pos:line="33" pos:column="30">oldType<pos:position pos:line="33" pos:column="37"/></name></name> <operator pos:line="33" pos:column="38">==<pos:position pos:line="33" pos:column="40"/></operator> <name pos:line="33" pos:column="41">LOG_TCP_HIT<pos:position pos:line="33" pos:column="52"/></name></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name pos:line="34" pos:column="9">reqofs<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="18">0<pos:position pos:line="34" pos:column="19"/></literal></expr>;<pos:position pos:line="34" pos:column="20"/></expr_stmt>
        <comment type="block" pos:line="35" pos:column="9">/* guarantee nothing has been sent yet! */</comment>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">assert<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name><name pos:line="36" pos:column="16">http<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">-&gt;<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="22">out<pos:position pos:line="36" pos:column="25"/></name><operator pos:line="36" pos:column="25">.<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="26">size<pos:position pos:line="36" pos:column="30"/></name></name> <operator pos:line="36" pos:column="31">==<pos:position pos:line="36" pos:column="33"/></operator> <literal type="number" pos:line="36" pos:column="34">0<pos:position pos:line="36" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">assert<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name><name pos:line="37" pos:column="16">http<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">out<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">.<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="26">offset<pos:position pos:line="37" pos:column="32"/></name></name> <operator pos:line="37" pos:column="33">==<pos:position pos:line="37" pos:column="35"/></operator> <literal type="number" pos:line="37" pos:column="36">0<pos:position pos:line="37" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt>

        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<decl><type><name pos:line="39" pos:column="13">ConnStateData<pos:position pos:line="39" pos:column="26"/></name> <modifier pos:line="39" pos:column="27">*<pos:position pos:line="39" pos:column="28"/></modifier></type><name pos:line="39" pos:column="28">conn<pos:position pos:line="39" pos:column="32"/></name> <init pos:line="39" pos:column="33">= <expr><call><name><name pos:line="39" pos:column="35">http<pos:position pos:line="39" pos:column="39"/></name><operator pos:line="39" pos:column="39">-&gt;<pos:position pos:line="39" pos:column="44"/></operator><name pos:line="39" pos:column="41">getConn<pos:position pos:line="39" pos:column="48"/></name></name><argument_list pos:line="39" pos:column="48">()<pos:position pos:line="39" pos:column="50"/></argument_list></call></expr></init></decl>)<pos:position pos:line="39" pos:column="51"/></condition><then pos:line="39" pos:column="51"> <block pos:line="39" pos:column="52">{
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><call><name><name pos:line="40" pos:column="17">Ip<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">::<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="21">Qos<pos:position pos:line="40" pos:column="24"/></name><operator pos:line="40" pos:column="24">::<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="26">TheConfig<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">.<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="36">isHitTosActive<pos:position pos:line="40" pos:column="50"/></name></name><argument_list pos:line="40" pos:column="50">()<pos:position pos:line="40" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="53"/></condition><then pos:line="40" pos:column="53"> <block pos:line="40" pos:column="54">{
                <expr_stmt><expr><call><name><name pos:line="41" pos:column="17">Ip<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">::<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="21">Qos<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">::<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="26">doTosLocalHit<pos:position pos:line="41" pos:column="39"/></name></name><argument_list pos:line="41" pos:column="39">(<argument><expr><name><name pos:line="41" pos:column="40">conn<pos:position pos:line="41" pos:column="44"/></name><operator pos:line="41" pos:column="44">-&gt;<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="46">clientConnection<pos:position pos:line="41" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt>
            }<pos:position pos:line="42" pos:column="14"/></block></then></if>

            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><call><name><name pos:line="44" pos:column="17">Ip<pos:position pos:line="44" pos:column="19"/></name><operator pos:line="44" pos:column="19">::<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="21">Qos<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">::<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="26">TheConfig<pos:position pos:line="44" pos:column="35"/></name><operator pos:line="44" pos:column="35">.<pos:position pos:line="44" pos:column="36"/></operator><name pos:line="44" pos:column="36">isHitNfmarkActive<pos:position pos:line="44" pos:column="53"/></name></name><argument_list pos:line="44" pos:column="53">()<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="56"/></condition><then pos:line="44" pos:column="56"> <block pos:line="44" pos:column="57">{
                <expr_stmt><expr><call><name><name pos:line="45" pos:column="17">Ip<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">::<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="21">Qos<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">::<pos:position pos:line="45" pos:column="26"/></operator><name pos:line="45" pos:column="26">doNfmarkLocalHit<pos:position pos:line="45" pos:column="42"/></name></name><argument_list pos:line="45" pos:column="42">(<argument><expr><name><name pos:line="45" pos:column="43">conn<pos:position pos:line="45" pos:column="47"/></name><operator pos:line="45" pos:column="47">-&gt;<pos:position pos:line="45" pos:column="52"/></operator><name pos:line="45" pos:column="49">clientConnection<pos:position pos:line="45" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="67"/></expr_stmt>
            }<pos:position pos:line="46" pos:column="14"/></block></then></if>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="49" pos:column="9">localTempBuffer<pos:position pos:line="49" pos:column="24"/></name><operator pos:line="49" pos:column="24">.<pos:position pos:line="49" pos:column="25"/></operator><name pos:line="49" pos:column="25">offset<pos:position pos:line="49" pos:column="31"/></name></name> <operator pos:line="49" pos:column="32">=<pos:position pos:line="49" pos:column="33"/></operator> <name pos:line="49" pos:column="34">reqofs<pos:position pos:line="49" pos:column="40"/></name></expr>;<pos:position pos:line="49" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">localTempBuffer<pos:position pos:line="50" pos:column="24"/></name><operator pos:line="50" pos:column="24">.<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="25">length<pos:position pos:line="50" pos:column="31"/></name></name> <operator pos:line="50" pos:column="32">=<pos:position pos:line="50" pos:column="33"/></operator> <call><name pos:line="50" pos:column="34">getNextNode<pos:position pos:line="50" pos:column="45"/></name><argument_list pos:line="50" pos:column="45">()<pos:position pos:line="50" pos:column="47"/></argument_list></call><operator pos:line="50" pos:column="47">-&gt;<pos:position pos:line="50" pos:column="52"/></operator><name><name pos:line="50" pos:column="49">readBuffer<pos:position pos:line="50" pos:column="59"/></name><operator pos:line="50" pos:column="59">.<pos:position pos:line="50" pos:column="60"/></operator><name pos:line="50" pos:column="60">length<pos:position pos:line="50" pos:column="66"/></name></name></expr>;<pos:position pos:line="50" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="51" pos:column="9">localTempBuffer<pos:position pos:line="51" pos:column="24"/></name><operator pos:line="51" pos:column="24">.<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="25">data<pos:position pos:line="51" pos:column="29"/></name></name> <operator pos:line="51" pos:column="30">=<pos:position pos:line="51" pos:column="31"/></operator> <call><name pos:line="51" pos:column="32">getNextNode<pos:position pos:line="51" pos:column="43"/></name><argument_list pos:line="51" pos:column="43">()<pos:position pos:line="51" pos:column="45"/></argument_list></call><operator pos:line="51" pos:column="45">-&gt;<pos:position pos:line="51" pos:column="50"/></operator><name><name pos:line="51" pos:column="47">readBuffer<pos:position pos:line="51" pos:column="57"/></name><operator pos:line="51" pos:column="57">.<pos:position pos:line="51" pos:column="58"/></operator><name pos:line="51" pos:column="58">data<pos:position pos:line="51" pos:column="62"/></name></name></expr>;<pos:position pos:line="51" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">storeClientCopy<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><name pos:line="52" pos:column="25">sc<pos:position pos:line="52" pos:column="27"/></name></expr></argument>, <argument><expr><call><name><name pos:line="52" pos:column="29">http<pos:position pos:line="52" pos:column="33"/></name><operator pos:line="52" pos:column="33">-&gt;<pos:position pos:line="52" pos:column="38"/></operator><name pos:line="52" pos:column="35">storeEntry<pos:position pos:line="52" pos:column="45"/></name></name><argument_list pos:line="52" pos:column="45">()<pos:position pos:line="52" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="52" pos:column="49">localTempBuffer<pos:position pos:line="52" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="66">CacheHit<pos:position pos:line="52" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="76">this<pos:position pos:line="52" pos:column="80"/></name></expr></argument>)<pos:position pos:line="52" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="82"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then> <else pos:line="53" pos:column="7">else <block pos:line="53" pos:column="12">{
        <comment type="block" pos:line="54" pos:column="9">/* MISS CASE, http-&gt;logType is already set! */</comment>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">processMiss<pos:position pos:line="55" pos:column="20"/></name><argument_list pos:line="55" pos:column="20">()<pos:position pos:line="55" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></else></if>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
