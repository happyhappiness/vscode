<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_886.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">match<pos:position pos:line="2" pos:column="6"/></name><parameter_list pos:line="2" pos:column="6">( <parameter><decl><type><specifier pos:line="2" pos:column="8">const<pos:position pos:line="2" pos:column="13"/></specifier> <name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name><modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type> <name pos:line="2" pos:column="20">fn<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="24">const<pos:position pos:line="2" pos:column="29"/></specifier> <name pos:line="2" pos:column="30">REList<pos:position pos:line="2" pos:column="36"/></name><modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">list<pos:position pos:line="2" pos:column="42"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="44"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: do something with the given cache content filename</comment>
<comment type="line" pos:line="4" pos:column="1">// paramtr: fn (IN): filename of cache file</comment>
<comment type="line" pos:line="5" pos:column="1">// returns: true for successful action, false otherwise.</comment>
<comment type="line" pos:line="6" pos:column="1">// warning: only return false, if you want the loop to terminate!</comment>
<block pos:line="7" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="8" pos:column="5">static<pos:position pos:line="8" pos:column="11"/></specifier> <type><specifier pos:line="8" pos:column="12">const<pos:position pos:line="8" pos:column="17"/></specifier> <name pos:line="8" pos:column="18">size_t<pos:position pos:line="8" pos:column="24"/></name></type> <name pos:line="8" pos:column="25">addon<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr pos:line="8" pos:column="33">sizeof<operator pos:line="8" pos:column="39">(<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">unsigned<pos:position pos:line="8" pos:column="48"/></name> <name pos:line="8" pos:column="49">char<pos:position pos:line="8" pos:column="53"/></name><operator pos:line="8" pos:column="53">)<pos:position pos:line="8" pos:column="54"/></operator> <operator pos:line="8" pos:column="55">+<pos:position pos:line="8" pos:column="56"/></operator> sizeof<operator pos:line="8" pos:column="63">(<pos:position pos:line="8" pos:column="64"/></operator><name pos:line="8" pos:column="64">unsigned<pos:position pos:line="8" pos:column="72"/></name> <name pos:line="8" pos:column="73">int<pos:position pos:line="8" pos:column="76"/></name><operator pos:line="8" pos:column="76">)<pos:position pos:line="8" pos:column="77"/></operator></expr></init></decl>;<pos:position pos:line="8" pos:column="78"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">bool<pos:position pos:line="9" pos:column="9"/></name></type> <name pos:line="9" pos:column="10">flag<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><literal type="boolean" pos:line="9" pos:column="17">true<pos:position pos:line="9" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">( <expr><name pos:line="11" pos:column="10">debugFlag<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">&amp;<pos:position pos:line="11" pos:column="25"/></operator> <literal type="number" pos:line="11" pos:column="22">0x01<pos:position pos:line="11" pos:column="26"/></literal></expr> )<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="29">fprintf<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">( <argument><expr><name pos:line="11" pos:column="38">stderr<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="46">"# [3] %s\n"<pos:position pos:line="11" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="60">fn<pos:position pos:line="11" pos:column="62"/></name></expr></argument> )<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt></block></then></if>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">fd<pos:position pos:line="12" pos:column="11"/></name> <init pos:line="12" pos:column="12">= <expr><call><name pos:line="12" pos:column="14">open<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">( <argument><expr><name pos:line="12" pos:column="20">fn<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="24">O_RDONLY<pos:position pos:line="12" pos:column="32"/></name></expr></argument> )<pos:position pos:line="12" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="35"/></decl_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">( <expr><name pos:line="13" pos:column="10">fd<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">!=<pos:position pos:line="13" pos:column="15"/></operator> <operator pos:line="13" pos:column="16">-<pos:position pos:line="13" pos:column="17"/></operator><literal type="number" pos:line="13" pos:column="17">1<pos:position pos:line="13" pos:column="18"/></literal></expr> )<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block pos:line="13" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">memset<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name><operator pos:line="14" pos:column="16">::<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">linebuffer<pos:position pos:line="14" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="30">0<pos:position pos:line="14" pos:column="31"/></literal></expr></argument>, <argument><expr><name><operator pos:line="14" pos:column="33">::<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="35">buffersize<pos:position pos:line="14" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">size_t<pos:position pos:line="15" pos:column="15"/></name></type> <name pos:line="15" pos:column="16">readLen<pos:position pos:line="15" pos:column="23"/></name> <init pos:line="15" pos:column="24">= <expr><call><name pos:line="15" pos:column="26">read<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name pos:line="15" pos:column="31">fd<pos:position pos:line="15" pos:column="33"/></name></expr></argument>,<argument><expr><name><operator pos:line="15" pos:column="34">::<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="36">linebuffer<pos:position pos:line="15" pos:column="46"/></name></name></expr></argument>,<argument><expr><name><operator pos:line="15" pos:column="47">::<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="49">buffersize<pos:position pos:line="15" pos:column="59"/></name></name><operator pos:line="15" pos:column="59">-<pos:position pos:line="15" pos:column="60"/></operator><literal type="number" pos:line="15" pos:column="60">1<pos:position pos:line="15" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="63"/></decl_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">( <expr><name pos:line="16" pos:column="14">readLen<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">&gt;<pos:position pos:line="16" pos:column="26"/></operator> <literal type="number" pos:line="16" pos:column="24">60<pos:position pos:line="16" pos:column="26"/></literal></expr> )<pos:position pos:line="16" pos:column="28"/></condition><then pos:line="16" pos:column="28"> <block pos:line="16" pos:column="29">{
            <expr_stmt><expr><name><operator pos:line="17" pos:column="13">::<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">linebuffer<pos:position pos:line="17" pos:column="25"/></name><index pos:line="17" pos:column="25">[ <expr><name><operator pos:line="17" pos:column="27">::<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="29">buffersize<pos:position pos:line="17" pos:column="39"/></name></name><operator pos:line="17" pos:column="39">-<pos:position pos:line="17" pos:column="40"/></operator><literal type="number" pos:line="17" pos:column="40">1<pos:position pos:line="17" pos:column="41"/></literal></expr> ]<pos:position pos:line="17" pos:column="43"/></index></name> <operator pos:line="17" pos:column="44">=<pos:position pos:line="17" pos:column="45"/></operator> <literal type="char" pos:line="17" pos:column="46">'\0'<pos:position pos:line="17" pos:column="50"/></literal></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt> <comment type="line" pos:line="17" pos:column="52">// force-terminate string</comment>

            <comment type="line" pos:line="19" pos:column="13">// check the offset into the start of object data. The offset is</comment>
            <comment type="line" pos:line="20" pos:column="13">// stored in a host endianess after the first byte.</comment>
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">unsigned<pos:position pos:line="21" pos:column="21"/></name> <name pos:line="21" pos:column="22">int<pos:position pos:line="21" pos:column="25"/></name></type> <name pos:line="21" pos:column="26">datastart<pos:position pos:line="21" pos:column="35"/></name></decl>;<pos:position pos:line="21" pos:column="36"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">memcpy<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">( <argument><expr><operator pos:line="22" pos:column="21">&amp;<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="22">datastart<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><name><operator pos:line="22" pos:column="33">::<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">linebuffer<pos:position pos:line="22" pos:column="45"/></name></name> <operator pos:line="22" pos:column="46">+<pos:position pos:line="22" pos:column="47"/></operator> <literal type="number" pos:line="22" pos:column="48">1<pos:position pos:line="22" pos:column="49"/></literal></expr></argument>, <argument><expr pos:line="22" pos:column="51">sizeof<operator pos:line="22" pos:column="57">(<pos:position pos:line="22" pos:column="58"/></operator><name pos:line="22" pos:column="58">unsigned<pos:position pos:line="22" pos:column="66"/></name> <name pos:line="22" pos:column="67">int<pos:position pos:line="22" pos:column="70"/></name><operator pos:line="22" pos:column="70">)<pos:position pos:line="22" pos:column="71"/></operator></expr></argument> )<pos:position pos:line="22" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="74"/></expr_stmt>
            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">( <expr><name pos:line="23" pos:column="18">datastart<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&gt;<pos:position pos:line="23" pos:column="32"/></operator> <name><operator pos:line="23" pos:column="30">::<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="32">buffersize<pos:position pos:line="23" pos:column="42"/></name></name> <operator pos:line="23" pos:column="43">-<pos:position pos:line="23" pos:column="44"/></operator> <name pos:line="23" pos:column="45">addon<pos:position pos:line="23" pos:column="50"/></name> <operator pos:line="23" pos:column="51">-<pos:position pos:line="23" pos:column="52"/></operator> <literal type="number" pos:line="23" pos:column="53">1<pos:position pos:line="23" pos:column="54"/></literal></expr> )<pos:position pos:line="23" pos:column="56"/></condition><then pos:line="23" pos:column="56"> <block pos:line="23" pos:column="57">{
                <comment type="line" pos:line="24" pos:column="17">// check offset into server reply header (start of cache data).</comment>
                <expr_stmt><expr><call><name pos:line="25" pos:column="17">fputs<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">( <argument><expr><literal type="string" pos:line="25" pos:column="24">"WARNING: Using a truncated URL string.\n"<pos:position pos:line="25" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="68">stderr<pos:position pos:line="25" pos:column="74"/></name></expr></argument> )<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><name pos:line="26" pos:column="17">datastart<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">=<pos:position pos:line="26" pos:column="28"/></operator> <name><operator pos:line="26" pos:column="29">::<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="31">buffersize<pos:position pos:line="26" pos:column="41"/></name></name> <operator pos:line="26" pos:column="42">-<pos:position pos:line="26" pos:column="43"/></operator> <name pos:line="26" pos:column="44">addon<pos:position pos:line="26" pos:column="49"/></name> <operator pos:line="26" pos:column="50">-<pos:position pos:line="26" pos:column="51"/></operator> <literal type="number" pos:line="26" pos:column="52">1<pos:position pos:line="26" pos:column="53"/></literal></expr>;<pos:position pos:line="26" pos:column="54"/></expr_stmt>
            }<pos:position pos:line="27" pos:column="14"/></block></then></if>

            <comment type="line" pos:line="29" pos:column="13">// NEW: Parse squid meta data, which is a kind of linked list</comment>
            <comment type="line" pos:line="30" pos:column="13">// flattened out into a file byte stream. Somewhere within is</comment>
            <comment type="line" pos:line="31" pos:column="13">// the URL as part of the list. First, gobble all meta data.</comment>
            <decl_stmt><decl><type><name pos:line="32" pos:column="13">unsigned<pos:position pos:line="32" pos:column="21"/></name> <name pos:line="32" pos:column="22">int<pos:position pos:line="32" pos:column="25"/></name></type> <name pos:line="32" pos:column="26">offset<pos:position pos:line="32" pos:column="32"/></name> <init pos:line="32" pos:column="33">= <expr><name pos:line="32" pos:column="35">addon<pos:position pos:line="32" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="41"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">SquidMetaList<pos:position pos:line="33" pos:column="26"/></name></type> <name pos:line="33" pos:column="27">meta<pos:position pos:line="33" pos:column="31"/></name></decl>;<pos:position pos:line="33" pos:column="32"/></decl_stmt>
            <while pos:line="34" pos:column="13">while <condition pos:line="34" pos:column="19">( <expr><name pos:line="34" pos:column="21">offset<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">+<pos:position pos:line="34" pos:column="29"/></operator> <name pos:line="34" pos:column="30">addon<pos:position pos:line="34" pos:column="35"/></name> <operator pos:line="34" pos:column="36">&lt;=<pos:position pos:line="34" pos:column="41"/></operator> <name pos:line="34" pos:column="39">datastart<pos:position pos:line="34" pos:column="48"/></name></expr> )<pos:position pos:line="34" pos:column="50"/></condition> <block pos:line="34" pos:column="51">{
                <decl_stmt><decl><type><name pos:line="35" pos:column="17">unsigned<pos:position pos:line="35" pos:column="25"/></name> <name pos:line="35" pos:column="26">int<pos:position pos:line="35" pos:column="29"/></name></type> <name pos:line="35" pos:column="30">size<pos:position pos:line="35" pos:column="34"/></name> <init pos:line="35" pos:column="35">= <expr><literal type="number" pos:line="35" pos:column="37">0<pos:position pos:line="35" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="35" pos:column="39"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">memcpy<pos:position pos:line="36" pos:column="23"/></name><argument_list pos:line="36" pos:column="23">( <argument><expr><operator pos:line="36" pos:column="25">&amp;<pos:position pos:line="36" pos:column="30"/></operator><name pos:line="36" pos:column="26">size<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="32">linebuffer<pos:position pos:line="36" pos:column="42"/></name><operator pos:line="36" pos:column="42">+<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="43">offset<pos:position pos:line="36" pos:column="49"/></name><operator pos:line="36" pos:column="49">+<pos:position pos:line="36" pos:column="50"/></operator><sizeof pos:line="36" pos:column="50">sizeof<argument_list pos:line="36" pos:column="56">(<argument><expr><name pos:line="36" pos:column="57">char<pos:position pos:line="36" pos:column="61"/></name></expr></argument>)<pos:position pos:line="36" pos:column="62"/></argument_list></sizeof></expr></argument>, <argument><expr pos:line="36" pos:column="64">sizeof<operator pos:line="36" pos:column="70">(<pos:position pos:line="36" pos:column="71"/></operator><name pos:line="36" pos:column="71">unsigned<pos:position pos:line="36" pos:column="79"/></name> <name pos:line="36" pos:column="80">int<pos:position pos:line="36" pos:column="83"/></name><operator pos:line="36" pos:column="83">)<pos:position pos:line="36" pos:column="84"/></operator></expr></argument> )<pos:position pos:line="36" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="87"/></expr_stmt>
                <if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><name pos:line="37" pos:column="21">size<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">+<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="26">offset<pos:position pos:line="37" pos:column="32"/></name> <operator pos:line="37" pos:column="33">&lt;<pos:position pos:line="37" pos:column="37"/></operator> <name pos:line="37" pos:column="35">size<pos:position pos:line="37" pos:column="39"/></name></expr>)<pos:position pos:line="37" pos:column="40"/></condition><then pos:line="37" pos:column="40"> <block pos:line="37" pos:column="41">{
                    <expr_stmt><expr><call><name pos:line="38" pos:column="21">fputs<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><literal type="string" pos:line="38" pos:column="27">"WARNING: file corruption detected. 32-bit overflow in size field.\n"<pos:position pos:line="38" pos:column="96"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="98">stderr<pos:position pos:line="38" pos:column="104"/></name></expr></argument>)<pos:position pos:line="38" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="106"/></expr_stmt>
                    <break pos:line="39" pos:column="21">break;<pos:position pos:line="39" pos:column="27"/></break>
                }<pos:position pos:line="40" pos:column="18"/></block></then></if>
                <if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">size<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">+<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="26">offset<pos:position pos:line="41" pos:column="32"/></name> <operator pos:line="41" pos:column="33">&gt;<pos:position pos:line="41" pos:column="37"/></operator> <name pos:line="41" pos:column="35">readLen<pos:position pos:line="41" pos:column="42"/></name></expr>)<pos:position pos:line="41" pos:column="43"/></condition><then pos:line="41" pos:column="43"> <block pos:line="41" pos:column="44">{
                    <expr_stmt><expr><call><name pos:line="42" pos:column="21">fputs<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">( <argument><expr><literal type="string" pos:line="42" pos:column="28">"WARNING: Partial meta data loaded.\n"<pos:position pos:line="42" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="68">stderr<pos:position pos:line="42" pos:column="74"/></name></expr></argument> )<pos:position pos:line="42" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="77"/></expr_stmt>
                    <break pos:line="43" pos:column="21">break;<pos:position pos:line="43" pos:column="27"/></break>
                }<pos:position pos:line="44" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name><name pos:line="45" pos:column="17">meta<pos:position pos:line="45" pos:column="21"/></name><operator pos:line="45" pos:column="21">.<pos:position pos:line="45" pos:column="22"/></operator><name pos:line="45" pos:column="22">append<pos:position pos:line="45" pos:column="28"/></name></name><argument_list pos:line="45" pos:column="28">( <argument><expr><call><name pos:line="45" pos:column="30">SquidMetaType<pos:position pos:line="45" pos:column="43"/></name><argument_list pos:line="45" pos:column="43">(<argument><expr><operator pos:line="45" pos:column="44">*<pos:position pos:line="45" pos:column="45"/></operator><operator pos:line="45" pos:column="45">(<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="46">linebuffer<pos:position pos:line="45" pos:column="56"/></name><operator pos:line="45" pos:column="56">+<pos:position pos:line="45" pos:column="57"/></operator><name pos:line="45" pos:column="57">offset<pos:position pos:line="45" pos:column="63"/></name><operator pos:line="45" pos:column="63">)<pos:position pos:line="45" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></call></expr></argument>,
                             <argument><expr><name pos:line="46" pos:column="30">size<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="36">linebuffer<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">+<pos:position pos:line="46" pos:column="47"/></operator><name pos:line="46" pos:column="47">offset<pos:position pos:line="46" pos:column="53"/></name><operator pos:line="46" pos:column="53">+<pos:position pos:line="46" pos:column="54"/></operator><name pos:line="46" pos:column="54">addon<pos:position pos:line="46" pos:column="59"/></name></expr></argument> )<pos:position pos:line="46" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="62"/></expr_stmt>
                <expr_stmt><expr><name pos:line="47" pos:column="17">offset<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">+=<pos:position pos:line="47" pos:column="26"/></operator> <operator pos:line="47" pos:column="27">(<pos:position pos:line="47" pos:column="28"/></operator> <name pos:line="47" pos:column="29">addon<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">+<pos:position pos:line="47" pos:column="36"/></operator> <name pos:line="47" pos:column="37">size<pos:position pos:line="47" pos:column="41"/></name> <operator pos:line="47" pos:column="42">)<pos:position pos:line="47" pos:column="43"/></operator></expr>;<pos:position pos:line="47" pos:column="44"/></expr_stmt>
            }<pos:position pos:line="48" pos:column="14"/></block></while>

            <comment type="line" pos:line="50" pos:column="13">// Now extract the key URL from the meta data.</comment>
            <decl_stmt><decl><type><specifier pos:line="51" pos:column="13">const<pos:position pos:line="51" pos:column="18"/></specifier> <name pos:line="51" pos:column="19">SquidTLV<pos:position pos:line="51" pos:column="27"/></name><modifier pos:line="51" pos:column="27">*<pos:position pos:line="51" pos:column="28"/></modifier></type> <name pos:line="51" pos:column="29">urlmeta<pos:position pos:line="51" pos:column="36"/></name> <init pos:line="51" pos:column="37">= <expr><call><name><name pos:line="51" pos:column="39">meta<pos:position pos:line="51" pos:column="43"/></name><operator pos:line="51" pos:column="43">.<pos:position pos:line="51" pos:column="44"/></operator><name pos:line="51" pos:column="44">search<pos:position pos:line="51" pos:column="50"/></name></name><argument_list pos:line="51" pos:column="50">( <argument><expr><name pos:line="51" pos:column="52">STORE_META_URL<pos:position pos:line="51" pos:column="66"/></name></expr></argument> )<pos:position pos:line="51" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="69"/></decl_stmt>
            <if pos:line="52" pos:column="13">if <condition pos:line="52" pos:column="16">( <expr><name pos:line="52" pos:column="18">urlmeta<pos:position pos:line="52" pos:column="25"/></name></expr> )<pos:position pos:line="52" pos:column="27"/></condition><then pos:line="52" pos:column="27"> <block pos:line="52" pos:column="28">{
                <comment type="line" pos:line="53" pos:column="17">// found URL in meta data. Try to process the URL</comment>
                <if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">( <expr><name pos:line="54" pos:column="22">list<pos:position pos:line="54" pos:column="26"/></name> <operator pos:line="54" pos:column="27">==<pos:position pos:line="54" pos:column="29"/></operator> <literal type="number" pos:line="54" pos:column="30">0<pos:position pos:line="54" pos:column="31"/></literal></expr> )<pos:position pos:line="54" pos:column="33"/></condition><then pos:line="54" pos:column="33">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="21">flag<pos:position pos:line="55" pos:column="25"/></name> <operator pos:line="55" pos:column="26">=<pos:position pos:line="55" pos:column="27"/></operator> <call><name pos:line="55" pos:column="28">action<pos:position pos:line="55" pos:column="34"/></name><argument_list pos:line="55" pos:column="34">( <argument><expr><name pos:line="55" pos:column="36">fd<pos:position pos:line="55" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="40">datastart<pos:position pos:line="55" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="51">fn<pos:position pos:line="55" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="55">(<pos:position pos:line="55" pos:column="56"/></operator><name pos:line="55" pos:column="56">char<pos:position pos:line="55" pos:column="60"/></name><operator pos:line="55" pos:column="60">*<pos:position pos:line="55" pos:column="61"/></operator><operator pos:line="55" pos:column="61">)<pos:position pos:line="55" pos:column="62"/></operator> <name><name pos:line="55" pos:column="63">urlmeta<pos:position pos:line="55" pos:column="70"/></name><operator pos:line="55" pos:column="70">-&gt;<pos:position pos:line="55" pos:column="75"/></operator><name pos:line="55" pos:column="72">data<pos:position pos:line="55" pos:column="76"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="78">meta<pos:position pos:line="55" pos:column="82"/></name></expr></argument> )<pos:position pos:line="55" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="85"/></expr_stmt></block></then>
                <else pos:line="56" pos:column="17">else <block pos:line="56" pos:column="22">{
                    <decl_stmt><decl><type><name pos:line="57" pos:column="21">REList<pos:position pos:line="57" pos:column="27"/></name><modifier pos:line="57" pos:column="27">*<pos:position pos:line="57" pos:column="28"/></modifier></type> <name pos:line="57" pos:column="29">head<pos:position pos:line="57" pos:column="33"/></name> <init pos:line="57" pos:column="34">= <expr><operator pos:line="57" pos:column="36">(<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="37">REList<pos:position pos:line="57" pos:column="43"/></name><operator pos:line="57" pos:column="43">*<pos:position pos:line="57" pos:column="44"/></operator><operator pos:line="57" pos:column="44">)<pos:position pos:line="57" pos:column="45"/></operator> <name pos:line="57" pos:column="46">list<pos:position pos:line="57" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="57" pos:column="51"/></decl_stmt> <comment type="line" pos:line="57" pos:column="52">// YUCK!</comment>
                    <while pos:line="58" pos:column="21">while <condition pos:line="58" pos:column="27">( <expr><name pos:line="58" pos:column="29">head<pos:position pos:line="58" pos:column="33"/></name> <operator pos:line="58" pos:column="34">!=<pos:position pos:line="58" pos:column="36"/></operator> <literal type="number" pos:line="58" pos:column="37">0<pos:position pos:line="58" pos:column="38"/></literal></expr> )<pos:position pos:line="58" pos:column="40"/></condition> <block pos:line="58" pos:column="41">{
                        <if pos:line="59" pos:column="25">if <condition pos:line="59" pos:column="28">( <expr><call><name><name pos:line="59" pos:column="30">head<pos:position pos:line="59" pos:column="34"/></name><operator pos:line="59" pos:column="34">-&gt;<pos:position pos:line="59" pos:column="39"/></operator><name pos:line="59" pos:column="36">match<pos:position pos:line="59" pos:column="41"/></name></name><argument_list pos:line="59" pos:column="41">( <argument><expr><operator pos:line="59" pos:column="43">(<pos:position pos:line="59" pos:column="44"/></operator><name pos:line="59" pos:column="44">char<pos:position pos:line="59" pos:column="48"/></name><operator pos:line="59" pos:column="48">*<pos:position pos:line="59" pos:column="49"/></operator><operator pos:line="59" pos:column="49">)<pos:position pos:line="59" pos:column="50"/></operator> <name><name pos:line="59" pos:column="51">urlmeta<pos:position pos:line="59" pos:column="58"/></name><operator pos:line="59" pos:column="58">-&gt;<pos:position pos:line="59" pos:column="63"/></operator><name pos:line="59" pos:column="60">data<pos:position pos:line="59" pos:column="64"/></name></name></expr></argument> )<pos:position pos:line="59" pos:column="66"/></argument_list></call></expr> )<pos:position pos:line="59" pos:column="68"/></condition><then pos:line="59" pos:column="68"> <block type="pseudo"><break pos:line="59" pos:column="69">break;<pos:position pos:line="59" pos:column="75"/></break></block></then></if>
                        <expr_stmt><expr><name pos:line="60" pos:column="25">head<pos:position pos:line="60" pos:column="29"/></name> <operator pos:line="60" pos:column="30">=<pos:position pos:line="60" pos:column="31"/></operator> <name><name pos:line="60" pos:column="32">head<pos:position pos:line="60" pos:column="36"/></name><operator pos:line="60" pos:column="36">-&gt;<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="38">next<pos:position pos:line="60" pos:column="42"/></name></name></expr>;<pos:position pos:line="60" pos:column="43"/></expr_stmt>
                    }<pos:position pos:line="61" pos:column="22"/></block></while>
                    <if pos:line="62" pos:column="21">if <condition pos:line="62" pos:column="24">( <expr><name pos:line="62" pos:column="26">head<pos:position pos:line="62" pos:column="30"/></name> <operator pos:line="62" pos:column="31">!=<pos:position pos:line="62" pos:column="33"/></operator> <literal type="number" pos:line="62" pos:column="34">0<pos:position pos:line="62" pos:column="35"/></literal></expr> )<pos:position pos:line="62" pos:column="37"/></condition><then pos:line="62" pos:column="37">
                        <block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="25">flag<pos:position pos:line="63" pos:column="29"/></name> <operator pos:line="63" pos:column="30">=<pos:position pos:line="63" pos:column="31"/></operator> <call><name pos:line="63" pos:column="32">action<pos:position pos:line="63" pos:column="38"/></name><argument_list pos:line="63" pos:column="38">( <argument><expr><name pos:line="63" pos:column="40">fd<pos:position pos:line="63" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="44">datastart<pos:position pos:line="63" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="55">fn<pos:position pos:line="63" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="59">(<pos:position pos:line="63" pos:column="60"/></operator><name pos:line="63" pos:column="60">char<pos:position pos:line="63" pos:column="64"/></name><operator pos:line="63" pos:column="64">*<pos:position pos:line="63" pos:column="65"/></operator><operator pos:line="63" pos:column="65">)<pos:position pos:line="63" pos:column="66"/></operator> <name><name pos:line="63" pos:column="67">urlmeta<pos:position pos:line="63" pos:column="74"/></name><operator pos:line="63" pos:column="74">-&gt;<pos:position pos:line="63" pos:column="79"/></operator><name pos:line="63" pos:column="76">data<pos:position pos:line="63" pos:column="80"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="82">meta<pos:position pos:line="63" pos:column="86"/></name></expr></argument> )<pos:position pos:line="63" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="89"/></expr_stmt></block></then>
                    <else pos:line="64" pos:column="21">else <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="26">flag<pos:position pos:line="64" pos:column="30"/></name> <operator pos:line="64" pos:column="31">=<pos:position pos:line="64" pos:column="32"/></operator> <literal type="boolean" pos:line="64" pos:column="33">true<pos:position pos:line="64" pos:column="37"/></literal></expr>;<pos:position pos:line="64" pos:column="38"/></expr_stmt></block></else></if>
                }<pos:position pos:line="65" pos:column="18"/></block></else></if>
            }<pos:position pos:line="66" pos:column="14"/></block></then></if>

            <comment type="line" pos:line="68" pos:column="13">// "meta" will be deleted when exiting from this block</comment>
        }<pos:position pos:line="69" pos:column="10"/></block></then> <else pos:line="69" pos:column="11">else <block pos:line="69" pos:column="16">{
            <comment type="line" pos:line="70" pos:column="13">// weird file, FIXME: stat() it!</comment>
            <decl_stmt><decl><type><name><name pos:line="71" pos:column="13">struct<pos:position pos:line="71" pos:column="19"/></name> <name pos:line="71" pos:column="20">stat<pos:position pos:line="71" pos:column="24"/></name></name></type> <name pos:line="71" pos:column="25">st<pos:position pos:line="71" pos:column="27"/></name></decl>;<pos:position pos:line="71" pos:column="28"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="72" pos:column="13">long<pos:position pos:line="72" pos:column="17"/></name></type> <name pos:line="72" pos:column="18">size<pos:position pos:line="72" pos:column="22"/></name> <init pos:line="72" pos:column="23">= <expr><operator pos:line="72" pos:column="25">(<pos:position pos:line="72" pos:column="26"/></operator> <ternary><condition><expr><call><name pos:line="72" pos:column="27">fstat<pos:position pos:line="72" pos:column="32"/></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">fd<pos:position pos:line="72" pos:column="35"/></name></expr></argument>,<argument><expr><operator pos:line="72" pos:column="36">&amp;<pos:position pos:line="72" pos:column="41"/></operator><name pos:line="72" pos:column="37">st<pos:position pos:line="72" pos:column="39"/></name></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call> <operator pos:line="72" pos:column="41">==<pos:position pos:line="72" pos:column="43"/></operator> <operator pos:line="72" pos:column="44">-<pos:position pos:line="72" pos:column="45"/></operator><literal type="number" pos:line="72" pos:column="45">1<pos:position pos:line="72" pos:column="46"/></literal></expr> ?<pos:position pos:line="72" pos:column="48"/></condition><then pos:line="72" pos:column="48"> <expr><operator pos:line="72" pos:column="49">-<pos:position pos:line="72" pos:column="50"/></operator><literal type="number" pos:line="72" pos:column="50">1<pos:position pos:line="72" pos:column="51"/></literal></expr> <pos:position pos:line="72" pos:column="52"/></then><else pos:line="72" pos:column="52">: <expr><name><name pos:line="72" pos:column="54">st<pos:position pos:line="72" pos:column="56"/></name><operator pos:line="72" pos:column="56">.<pos:position pos:line="72" pos:column="57"/></operator><name pos:line="72" pos:column="57">st_size<pos:position pos:line="72" pos:column="64"/></name></name></expr></else></ternary> <operator pos:line="72" pos:column="65">)<pos:position pos:line="72" pos:column="66"/></operator></expr></init></decl>;<pos:position pos:line="72" pos:column="67"/></decl_stmt>
            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">( <expr><name><operator pos:line="73" pos:column="18">::<pos:position pos:line="73" pos:column="20"/></operator><name pos:line="73" pos:column="20">verbose<pos:position pos:line="73" pos:column="27"/></name></name></expr> )<pos:position pos:line="73" pos:column="29"/></condition><then pos:line="73" pos:column="29"> <block type="pseudo"><expr_stmt><expr><name pos:line="73" pos:column="30">flag<pos:position pos:line="73" pos:column="34"/></name> <operator pos:line="73" pos:column="35">=<pos:position pos:line="73" pos:column="36"/></operator> <operator pos:line="73" pos:column="37">(<pos:position pos:line="73" pos:column="38"/></operator> <call><name pos:line="73" pos:column="39">log_extended<pos:position pos:line="73" pos:column="51"/></name><argument_list pos:line="73" pos:column="51">( <argument><expr><name pos:line="73" pos:column="53">fn<pos:position pos:line="73" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="57">-<pos:position pos:line="73" pos:column="58"/></operator><literal type="number" pos:line="73" pos:column="58">1<pos:position pos:line="73" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="61">size<pos:position pos:line="73" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="67">0<pos:position pos:line="73" pos:column="68"/></literal></expr></argument> )<pos:position pos:line="73" pos:column="70"/></argument_list></call> <operator pos:line="73" pos:column="71">&gt;=<pos:position pos:line="73" pos:column="76"/></operator> <literal type="number" pos:line="73" pos:column="74">0<pos:position pos:line="73" pos:column="75"/></literal> <operator pos:line="73" pos:column="76">)<pos:position pos:line="73" pos:column="77"/></operator></expr>;<pos:position pos:line="73" pos:column="78"/></expr_stmt></block></then>
            <else pos:line="74" pos:column="13">else <block type="pseudo"><expr_stmt><expr><name pos:line="74" pos:column="18">flag<pos:position pos:line="74" pos:column="22"/></name> <operator pos:line="74" pos:column="23">=<pos:position pos:line="74" pos:column="24"/></operator> <operator pos:line="74" pos:column="25">(<pos:position pos:line="74" pos:column="26"/></operator> <call><name pos:line="74" pos:column="27">log_output<pos:position pos:line="74" pos:column="37"/></name><argument_list pos:line="74" pos:column="37">( <argument><expr><name pos:line="74" pos:column="39">fn<pos:position pos:line="74" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="43">-<pos:position pos:line="74" pos:column="44"/></operator><literal type="number" pos:line="74" pos:column="44">1<pos:position pos:line="74" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="47">size<pos:position pos:line="74" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="53">"strange file"<pos:position pos:line="74" pos:column="67"/></literal></expr></argument> )<pos:position pos:line="74" pos:column="69"/></argument_list></call> <operator pos:line="74" pos:column="70">&gt;=<pos:position pos:line="74" pos:column="75"/></operator> <literal type="number" pos:line="74" pos:column="73">0<pos:position pos:line="74" pos:column="74"/></literal> <operator pos:line="74" pos:column="75">)<pos:position pos:line="74" pos:column="76"/></operator></expr>;<pos:position pos:line="74" pos:column="77"/></expr_stmt></block></else></if>

            <if pos:line="76" pos:column="13">if <condition pos:line="76" pos:column="16">( <expr><operator pos:line="76" pos:column="18">(<pos:position pos:line="76" pos:column="19"/></operator><name><operator pos:line="76" pos:column="19">::<pos:position pos:line="76" pos:column="21"/></operator><name pos:line="76" pos:column="21">purgeMode<pos:position pos:line="76" pos:column="30"/></name></name> <operator pos:line="76" pos:column="31">&amp;<pos:position pos:line="76" pos:column="36"/></operator> <literal type="number" pos:line="76" pos:column="33">0x04<pos:position pos:line="76" pos:column="37"/></literal><operator pos:line="76" pos:column="37">)<pos:position pos:line="76" pos:column="38"/></operator></expr> )<pos:position pos:line="76" pos:column="40"/></condition><then pos:line="76" pos:column="40"> <block pos:line="76" pos:column="41">{
                <expr_stmt><expr><name pos:line="77" pos:column="17">reminder<pos:position pos:line="77" pos:column="25"/></name> <operator pos:line="77" pos:column="26">=<pos:position pos:line="77" pos:column="27"/></operator> <literal type="boolean" pos:line="77" pos:column="28">true<pos:position pos:line="77" pos:column="32"/></literal></expr>;<pos:position pos:line="77" pos:column="33"/></expr_stmt>
                <if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">( <expr><call><name pos:line="78" pos:column="22">unlink<pos:position pos:line="78" pos:column="28"/></name><argument_list pos:line="78" pos:column="28">(<argument><expr><name pos:line="78" pos:column="29">fn<pos:position pos:line="78" pos:column="31"/></name></expr></argument>)<pos:position pos:line="78" pos:column="32"/></argument_list></call> <operator pos:line="78" pos:column="33">==<pos:position pos:line="78" pos:column="35"/></operator> <operator pos:line="78" pos:column="36">-<pos:position pos:line="78" pos:column="37"/></operator><literal type="number" pos:line="78" pos:column="37">1<pos:position pos:line="78" pos:column="38"/></literal></expr> )<pos:position pos:line="78" pos:column="40"/></condition><then pos:line="78" pos:column="40">
                    <comment type="line" pos:line="79" pos:column="21">// error while unlinking file, this may happen due to the cache</comment>
                    <comment type="line" pos:line="80" pos:column="21">// unlinking a file while it is in the readdir() cache of purge.</comment>
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="81" pos:column="21">fprintf<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">( <argument><expr><name pos:line="81" pos:column="30">stderr<pos:position pos:line="81" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="38">"WARNING: unable to unlink %s: %s\n"<pos:position pos:line="81" pos:column="74"/></literal></expr></argument>,
                             <argument><expr><name pos:line="82" pos:column="30">fn<pos:position pos:line="82" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="34">strerror<pos:position pos:line="82" pos:column="42"/></name><argument_list pos:line="82" pos:column="42">(<argument><expr><name pos:line="82" pos:column="43">errno<pos:position pos:line="82" pos:column="48"/></name></expr></argument>)<pos:position pos:line="82" pos:column="49"/></argument_list></call></expr></argument> )<pos:position pos:line="82" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="52"/></expr_stmt></block></then></if>
            }<pos:position pos:line="83" pos:column="14"/></block></then></if>
        }<pos:position pos:line="84" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">close<pos:position pos:line="85" pos:column="14"/></name><argument_list pos:line="85" pos:column="14">(<argument><expr><name pos:line="85" pos:column="15">fd<pos:position pos:line="85" pos:column="17"/></name></expr></argument>)<pos:position pos:line="85" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="86" pos:column="6"/></block></then> <else pos:line="86" pos:column="7">else <block pos:line="86" pos:column="12">{
        <comment type="line" pos:line="87" pos:column="9">// error while opening file, this may happen due to the cache</comment>
        <comment type="line" pos:line="88" pos:column="9">// unlinking a file while it is still in the readdir() cache of purge.</comment>
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">fprintf<pos:position pos:line="89" pos:column="16"/></name><argument_list pos:line="89" pos:column="16">( <argument><expr><name pos:line="89" pos:column="18">stderr<pos:position pos:line="89" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="26">"WARNING: open \"%s\": %s\n"<pos:position pos:line="89" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="56">fn<pos:position pos:line="89" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="89" pos:column="60">strerror<pos:position pos:line="89" pos:column="68"/></name><argument_list pos:line="89" pos:column="68">(<argument><expr><name pos:line="89" pos:column="69">errno<pos:position pos:line="89" pos:column="74"/></name></expr></argument>)<pos:position pos:line="89" pos:column="75"/></argument_list></call></expr></argument> )<pos:position pos:line="89" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="90" pos:column="6"/></block></else></if>

    <return pos:line="92" pos:column="5">return <expr><name pos:line="92" pos:column="12">flag<pos:position pos:line="92" pos:column="16"/></name></expr>;<pos:position pos:line="92" pos:column="17"/></return>
}<pos:position pos:line="93" pos:column="2"/></block></function></unit>
