<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3747_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrRange<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">isComplex<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list> <specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int64_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">offset<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* check that all rangers are in "strong" order */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">const_iterator<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">pos<pos:position pos:line="6" pos:column="23"/></name> <argument_list pos:line="6" pos:column="24">(<argument><expr><call><name pos:line="6" pos:column="25">begin<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">()<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">pos<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">!=<pos:position pos:line="8" pos:column="18"/></operator> <call><name pos:line="8" pos:column="19">end<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">()<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="25"/></condition> <block pos:line="8" pos:column="26">{
        <comment type="block" pos:line="9" pos:column="9">/* Ensure typecasts is safe */</comment>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name> <argument_list pos:line="10" pos:column="16">(<argument><expr><name><operator pos:line="10" pos:column="17">(<pos:position pos:line="10" pos:column="18"/></operator><operator pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">pos<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">)<pos:position pos:line="10" pos:column="23"/></operator><operator pos:line="10" pos:column="23">-&gt;<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="25">offset<pos:position pos:line="10" pos:column="31"/></name></name> <operator pos:line="10" pos:column="32">&gt;=<pos:position pos:line="10" pos:column="37"/></operator> <literal type="number" pos:line="10" pos:column="35">0<pos:position pos:line="10" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>

        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><operator pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">pos<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">)<pos:position pos:line="12" pos:column="19"/></operator><operator pos:line="12" pos:column="19">-&gt;<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="21">offset<pos:position pos:line="12" pos:column="27"/></name></name> <operator pos:line="12" pos:column="28">&lt;<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="30">offset<pos:position pos:line="12" pos:column="36"/></name></expr>)<pos:position pos:line="12" pos:column="37"/></condition><then pos:line="12" pos:column="37">
            <block type="pseudo"><return pos:line="13" pos:column="13">return <expr><literal type="number" pos:line="13" pos:column="20">1<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></return></block></then></if>

        <expr_stmt><expr><name pos:line="15" pos:column="9">offset<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <name><operator pos:line="15" pos:column="18">(<pos:position pos:line="15" pos:column="19"/></operator><operator pos:line="15" pos:column="19">*<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">pos<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">)<pos:position pos:line="15" pos:column="24"/></operator><operator pos:line="15" pos:column="24">-&gt;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="26">offset<pos:position pos:line="15" pos:column="32"/></name></name> <operator pos:line="15" pos:column="33">+<pos:position pos:line="15" pos:column="34"/></operator> <name><operator pos:line="15" pos:column="35">(<pos:position pos:line="15" pos:column="36"/></operator><operator pos:line="15" pos:column="36">*<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="37">pos<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">)<pos:position pos:line="15" pos:column="41"/></operator><operator pos:line="15" pos:column="41">-&gt;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="43">length<pos:position pos:line="15" pos:column="49"/></name></name></expr>;<pos:position pos:line="15" pos:column="50"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="17" pos:column="9">++<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">pos<pos:position pos:line="17" pos:column="14"/></name></expr>;<pos:position pos:line="17" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></while>

    <return pos:line="20" pos:column="5">return <expr><literal type="number" pos:line="20" pos:column="12">0<pos:position pos:line="20" pos:column="13"/></literal></expr>;<pos:position pos:line="20" pos:column="14"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
