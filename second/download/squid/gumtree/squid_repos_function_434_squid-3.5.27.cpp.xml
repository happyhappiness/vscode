<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_434_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debug<pos:position pos:line="4" pos:column="10"/></name><argument_list pos:line="4" pos:column="10">(<argument><expr><literal type="string" pos:line="4" pos:column="11">"%s "<pos:position pos:line="4" pos:column="16"/></literal> <name pos:line="4" pos:column="17">VERSION<pos:position pos:line="4" pos:column="24"/></name> <literal type="string" pos:line="4" pos:column="25">" "<pos:position pos:line="4" pos:column="28"/></literal> <name pos:line="4" pos:column="29">SQUID_BUILD_INFO<pos:position pos:line="4" pos:column="45"/></name> <literal type="string" pos:line="4" pos:column="46">" starting up...\n"<pos:position pos:line="4" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="4" pos:column="67">argv<pos:position pos:line="4" pos:column="71"/></name><index pos:line="4" pos:column="71">[<expr><literal type="number" pos:line="4" pos:column="72">0<pos:position pos:line="4" pos:column="73"/></literal></expr>]<pos:position pos:line="4" pos:column="74"/></index></name></expr></argument>)<pos:position pos:line="4" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="76"/></expr_stmt>

    <expr_stmt><expr><name pos:line="6" pos:column="5">my_program_name<pos:position pos:line="6" pos:column="20"/></name> <operator pos:line="6" pos:column="21">=<pos:position pos:line="6" pos:column="22"/></operator> <name><name pos:line="6" pos:column="23">argv<pos:position pos:line="6" pos:column="27"/></name><index pos:line="6" pos:column="27">[<expr><literal type="number" pos:line="6" pos:column="28">0<pos:position pos:line="6" pos:column="29"/></literal></expr>]<pos:position pos:line="6" pos:column="30"/></index></name></expr>;<pos:position pos:line="6" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">process_options<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">argc<pos:position pos:line="7" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="27">argv<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debug<pos:position pos:line="9" pos:column="10"/></name><argument_list pos:line="9" pos:column="10">(<argument><expr><literal type="string" pos:line="9" pos:column="11">"options processed OK\n"<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* initialize FDescs */</comment>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">setbuf<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">stdout<pos:position pos:line="12" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="20">NULL<pos:position pos:line="12" pos:column="24"/></name></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">setbuf<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name pos:line="13" pos:column="12">stderr<pos:position pos:line="13" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="20">NULL<pos:position pos:line="13" pos:column="24"/></name></expr></argument>)<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* select the first domain controller we're going to use */</comment>
    <expr_stmt><expr><name pos:line="16" pos:column="5">current_dc<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="18">controllers<pos:position pos:line="16" pos:column="29"/></name></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">load_balance<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">!=<pos:position pos:line="17" pos:column="24"/></operator> <literal type="number" pos:line="17" pos:column="25">0<pos:position pos:line="17" pos:column="26"/></literal> <operator pos:line="17" pos:column="27">&amp;&amp;<pos:position pos:line="17" pos:column="37"/></operator> <name pos:line="17" pos:column="30">numcontrollers<pos:position pos:line="17" pos:column="44"/></name> <operator pos:line="17" pos:column="45">&gt;<pos:position pos:line="17" pos:column="49"/></operator> <literal type="number" pos:line="17" pos:column="47">1<pos:position pos:line="17" pos:column="48"/></literal></expr>)<pos:position pos:line="17" pos:column="49"/></condition><then pos:line="17" pos:column="49"> <block pos:line="17" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">n<pos:position pos:line="18" pos:column="14"/></name></decl>;<pos:position pos:line="18" pos:column="15"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">pid_t<pos:position pos:line="19" pos:column="14"/></name></type> <name pos:line="19" pos:column="15">pid<pos:position pos:line="19" pos:column="18"/></name> <init pos:line="19" pos:column="19">= <expr><call><name pos:line="19" pos:column="21">getpid<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">()<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="30"/></decl_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">n<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <name pos:line="20" pos:column="13">pid<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">%<pos:position pos:line="20" pos:column="18"/></operator> <name pos:line="20" pos:column="19">numcontrollers<pos:position pos:line="20" pos:column="33"/></name></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debug<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><literal type="string" pos:line="21" pos:column="15">"load balancing. Selected controller #%d\n"<pos:position pos:line="21" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="60">n<pos:position pos:line="21" pos:column="61"/></name></expr></argument>)<pos:position pos:line="21" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="63"/></expr_stmt>
        <while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><name pos:line="22" pos:column="16">n<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">&gt;<pos:position pos:line="22" pos:column="22"/></operator> <literal type="number" pos:line="22" pos:column="20">0<pos:position pos:line="22" pos:column="21"/></literal></expr>)<pos:position pos:line="22" pos:column="22"/></condition> <block pos:line="22" pos:column="23">{
            <expr_stmt><expr><name pos:line="23" pos:column="13">current_dc<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <name><name pos:line="23" pos:column="26">current_dc<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">next<pos:position pos:line="23" pos:column="42"/></name></name></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="24" pos:column="13">--<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">n<pos:position pos:line="24" pos:column="16"/></name></expr>;<pos:position pos:line="24" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="25" pos:column="10"/></block></while>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <while pos:line="27" pos:column="5">while <condition pos:line="27" pos:column="11">(<expr><literal type="number" pos:line="27" pos:column="12">1<pos:position pos:line="27" pos:column="13"/></literal></expr>)<pos:position pos:line="27" pos:column="14"/></condition> <block pos:line="27" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">manage_request<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">()<pos:position pos:line="28" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></while>
    <comment type="block" pos:line="30" pos:column="5">/* notreached */</comment>
    <return pos:line="31" pos:column="5">return <expr><literal type="number" pos:line="31" pos:column="12">0<pos:position pos:line="31" pos:column="13"/></literal></expr>;<pos:position pos:line="31" pos:column="14"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
