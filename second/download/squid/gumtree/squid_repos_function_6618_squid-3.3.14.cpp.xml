<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6618_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">squid_rn_walktree<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name><name pos:line="2" pos:column="19">struct<pos:position pos:line="2" pos:column="25"/></name> <name pos:line="2" pos:column="26">squid_radix_node_head<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">h<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><function_decl><type><name pos:line="2" pos:column="52">int<pos:position pos:line="2" pos:column="55"/></name></type> (<modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier><name pos:line="2" pos:column="58">f<pos:position pos:line="2" pos:column="59"/></name>) <parameter_list pos:line="2" pos:column="61">(<parameter><decl><type><name><name pos:line="2" pos:column="62">struct<pos:position pos:line="2" pos:column="68"/></name> <name pos:line="2" pos:column="69">squid_radix_node<pos:position pos:line="2" pos:column="85"/></name></name> <modifier pos:line="2" pos:column="86">*<pos:position pos:line="2" pos:column="87"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="89">void<pos:position pos:line="2" pos:column="93"/></name> <modifier pos:line="2" pos:column="94">*<pos:position pos:line="2" pos:column="95"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="96"/></parameter_list></function_decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="98">void<pos:position pos:line="2" pos:column="102"/></name> <modifier pos:line="2" pos:column="103">*<pos:position pos:line="2" pos:column="104"/></modifier></type><name pos:line="2" pos:column="104">w<pos:position pos:line="2" pos:column="105"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="106"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">error<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">squid_radix_node<pos:position pos:line="5" pos:column="28"/></name></name> <modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">base<pos:position pos:line="5" pos:column="34"/></name></decl>, <modifier pos:line="5" pos:column="36">*<pos:position pos:line="5" pos:column="37"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="37">next<pos:position pos:line="5" pos:column="41"/></name></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">register<pos:position pos:line="6" pos:column="13"/></specifier> <name><name pos:line="6" pos:column="14">struct<pos:position pos:line="6" pos:column="20"/></name> <name pos:line="6" pos:column="21">squid_radix_node<pos:position pos:line="6" pos:column="37"/></name></name> <modifier pos:line="6" pos:column="38">*<pos:position pos:line="6" pos:column="39"/></modifier></type><name pos:line="6" pos:column="39">rn<pos:position pos:line="6" pos:column="41"/></name> <init pos:line="6" pos:column="42">= <expr><name><name pos:line="6" pos:column="44">h<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">-&gt;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="47">rnh_treetop<pos:position pos:line="6" pos:column="58"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>
    <comment type="block" pos:line="7" pos:column="5">/*
     * This gets complicated because we may delete the node
     * while applying the function f to it, so we need to calculate
     * the successor node in advance.
     */</comment>
    <comment type="block" pos:line="12" pos:column="5">/* First time through node, go left */</comment>
    <while pos:line="13" pos:column="5">while <condition pos:line="13" pos:column="11">(<expr><name><name pos:line="13" pos:column="12">rn<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">rn_b<pos:position pos:line="13" pos:column="20"/></name></name> <operator pos:line="13" pos:column="21">&gt;=<pos:position pos:line="13" pos:column="26"/></operator> <literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>)<pos:position pos:line="13" pos:column="26"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="9">rn<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <name><name pos:line="14" pos:column="14">rn<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">rn_l<pos:position pos:line="14" pos:column="22"/></name></name></expr>;<pos:position pos:line="14" pos:column="23"/></expr_stmt></block></while>
    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init pos:line="15" pos:column="10">;<pos:position pos:line="15" pos:column="11"/></init><condition pos:line="15" pos:column="11">;<pos:position pos:line="15" pos:column="12"/></condition><incr/>)<pos:position pos:line="15" pos:column="13"/></control> <block pos:line="15" pos:column="14">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">base<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <name pos:line="16" pos:column="16">rn<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
        <comment type="block" pos:line="17" pos:column="9">/* If at right child go back up, otherwise, go right */</comment>
        <while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><name><name pos:line="18" pos:column="16">rn<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">rn_p<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">rn_r<pos:position pos:line="18" pos:column="30"/></name></name> <operator pos:line="18" pos:column="31">==<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">rn<pos:position pos:line="18" pos:column="36"/></name> <operator pos:line="18" pos:column="37">&amp;&amp;<pos:position pos:line="18" pos:column="47"/></operator> <operator pos:line="18" pos:column="40">(<pos:position pos:line="18" pos:column="41"/></operator><name><name pos:line="18" pos:column="41">rn<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">-&gt;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="45">rn_flags<pos:position pos:line="18" pos:column="53"/></name></name> <operator pos:line="18" pos:column="54">&amp;<pos:position pos:line="18" pos:column="59"/></operator> <name pos:line="18" pos:column="56">RNF_ROOT<pos:position pos:line="18" pos:column="64"/></name><operator pos:line="18" pos:column="64">)<pos:position pos:line="18" pos:column="65"/></operator> <operator pos:line="18" pos:column="66">==<pos:position pos:line="18" pos:column="68"/></operator> <literal type="number" pos:line="18" pos:column="69">0<pos:position pos:line="18" pos:column="70"/></literal></expr>)<pos:position pos:line="18" pos:column="71"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="13">rn<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <name><name pos:line="19" pos:column="18">rn<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">-&gt;<pos:position pos:line="19" pos:column="25"/></operator><name pos:line="19" pos:column="22">rn_p<pos:position pos:line="19" pos:column="26"/></name></name></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt></block></while>
        <comment type="block" pos:line="20" pos:column="9">/* Find the next *leaf* since next node might vanish, too */</comment>
        <for pos:line="21" pos:column="9">for <control pos:line="21" pos:column="13">(<init><expr><name pos:line="21" pos:column="14">rn<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name><name pos:line="21" pos:column="19">rn<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">-&gt;<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="23">rn_p<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">-&gt;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="29">rn_r<pos:position pos:line="21" pos:column="33"/></name></name></expr>;<pos:position pos:line="21" pos:column="34"/></init> <condition><expr><name><name pos:line="21" pos:column="35">rn<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">-&gt;<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="39">rn_b<pos:position pos:line="21" pos:column="43"/></name></name> <operator pos:line="21" pos:column="44">&gt;=<pos:position pos:line="21" pos:column="49"/></operator> <literal type="number" pos:line="21" pos:column="47">0<pos:position pos:line="21" pos:column="48"/></literal></expr>;<pos:position pos:line="21" pos:column="49"/></condition><incr/>)<pos:position pos:line="21" pos:column="50"/></control>
            <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="13">rn<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <name><name pos:line="22" pos:column="18">rn<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">-&gt;<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="22">rn_l<pos:position pos:line="22" pos:column="26"/></name></name></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt></block></for>
        <expr_stmt><expr><name pos:line="23" pos:column="9">next<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <name pos:line="23" pos:column="16">rn<pos:position pos:line="23" pos:column="18"/></name></expr>;<pos:position pos:line="23" pos:column="19"/></expr_stmt>
        <comment type="block" pos:line="24" pos:column="9">/* Process leaves */</comment>
        <while pos:line="25" pos:column="9">while <condition pos:line="25" pos:column="15">(<expr><operator pos:line="25" pos:column="16">(<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="17">rn<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="22">base<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">)<pos:position pos:line="25" pos:column="27"/></operator></expr>)<pos:position pos:line="25" pos:column="28"/></condition> <block pos:line="25" pos:column="29">{
            <expr_stmt><expr><name pos:line="26" pos:column="13">base<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <name><name pos:line="26" pos:column="20">rn<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">-&gt;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="24">rn_dupedkey<pos:position pos:line="26" pos:column="35"/></name></name></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><operator pos:line="27" pos:column="17">!<pos:position pos:line="27" pos:column="18"/></operator><operator pos:line="27" pos:column="18">(<pos:position pos:line="27" pos:column="19"/></operator><name><name pos:line="27" pos:column="19">rn<pos:position pos:line="27" pos:column="21"/></name><operator pos:line="27" pos:column="21">-&gt;<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="23">rn_flags<pos:position pos:line="27" pos:column="31"/></name></name> <operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator> <name pos:line="27" pos:column="34">RNF_ROOT<pos:position pos:line="27" pos:column="42"/></name><operator pos:line="27" pos:column="42">)<pos:position pos:line="27" pos:column="43"/></operator> <operator pos:line="27" pos:column="44">&amp;&amp;<pos:position pos:line="27" pos:column="54"/></operator> <operator pos:line="27" pos:column="47">(<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">error<pos:position pos:line="27" pos:column="53"/></name> <operator pos:line="27" pos:column="54">=<pos:position pos:line="27" pos:column="55"/></operator> <call pos:line="27" pos:column="56">(<modifier pos:line="27" pos:column="57">*<pos:position pos:line="27" pos:column="58"/></modifier><name pos:line="27" pos:column="58">f<pos:position pos:line="27" pos:column="59"/></name>) <argument_list pos:line="27" pos:column="61">(<argument><expr><name pos:line="27" pos:column="62">rn<pos:position pos:line="27" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="66">w<pos:position pos:line="27" pos:column="67"/></name></expr></argument>)<pos:position pos:line="27" pos:column="68"/></argument_list></call><operator pos:line="27" pos:column="68">)<pos:position pos:line="27" pos:column="69"/></operator></expr>)<pos:position pos:line="27" pos:column="70"/></condition><then pos:line="27" pos:column="70">
                <block type="pseudo"><return pos:line="28" pos:column="17">return <expr><operator pos:line="28" pos:column="24">(<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">error<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">)<pos:position pos:line="28" pos:column="31"/></operator></expr>;<pos:position pos:line="28" pos:column="32"/></return></block></then></if>
        }<pos:position pos:line="29" pos:column="10"/></block></while>
        <expr_stmt><expr><name pos:line="30" pos:column="9">rn<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <name pos:line="30" pos:column="14">next<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name><name pos:line="31" pos:column="13">rn<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">-&gt;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="17">rn_flags<pos:position pos:line="31" pos:column="25"/></name></name> <operator pos:line="31" pos:column="26">&amp;<pos:position pos:line="31" pos:column="31"/></operator> <name pos:line="31" pos:column="28">RNF_ROOT<pos:position pos:line="31" pos:column="36"/></name></expr>)<pos:position pos:line="31" pos:column="37"/></condition><then pos:line="31" pos:column="37">
            <block type="pseudo"><return pos:line="32" pos:column="13">return <expr><operator pos:line="32" pos:column="20">(<pos:position pos:line="32" pos:column="21"/></operator><literal type="number" pos:line="32" pos:column="21">0<pos:position pos:line="32" pos:column="22"/></literal><operator pos:line="32" pos:column="22">)<pos:position pos:line="32" pos:column="23"/></operator></expr>;<pos:position pos:line="32" pos:column="24"/></return></block></then></if>
    }<pos:position pos:line="33" pos:column="6"/></block></for>
    <comment type="block" pos:line="34" pos:column="5">/* NOTREACHED */</comment>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
