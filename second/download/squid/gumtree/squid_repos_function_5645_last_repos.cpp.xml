<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5645_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">HandleWrite<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">fd<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">void<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">data<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Comm<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">::<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">IoCallback<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">state<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><cast type="static" pos:line="4" pos:column="31">static_cast<argument_list type="generic" pos:line="4" pos:column="42">&lt;<argument><expr><name><name pos:line="4" pos:column="43">Comm<pos:position pos:line="4" pos:column="47"/></name><operator pos:line="4" pos:column="47">::<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">IoCallback<pos:position pos:line="4" pos:column="59"/></name></name> <operator pos:line="4" pos:column="60">*<pos:position pos:line="4" pos:column="61"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="65"/></argument_list><argument_list pos:line="4" pos:column="62">(<argument><expr><name pos:line="4" pos:column="63">data<pos:position pos:line="4" pos:column="67"/></name></expr></argument>)<pos:position pos:line="4" pos:column="68"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="69"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><literal type="number" pos:line="5" pos:column="15">0<pos:position pos:line="5" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">nleft<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name><name pos:line="8" pos:column="12">state<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">conn<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">!=<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="27">NULL<pos:position pos:line="8" pos:column="31"/></name> <operator pos:line="8" pos:column="32">&amp;&amp;<pos:position pos:line="8" pos:column="42"/></operator> <name><name pos:line="8" pos:column="35">state<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">-&gt;<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="42">conn<pos:position pos:line="8" pos:column="46"/></name><operator pos:line="8" pos:column="46">-&gt;<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="48">fd<pos:position pos:line="8" pos:column="50"/></name></name> <operator pos:line="8" pos:column="51">==<pos:position pos:line="8" pos:column="53"/></operator> <name pos:line="8" pos:column="54">fd<pos:position pos:line="8" pos:column="56"/></name></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="58"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">PROF_start<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">commHandleWrite<pos:position pos:line="10" pos:column="31"/></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">5<pos:position pos:line="11" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="15">5<pos:position pos:line="11" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="18">HERE<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">&lt;&lt;<pos:position pos:line="11" pos:column="31"/></operator> <name><name pos:line="11" pos:column="26">state<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">conn<pos:position pos:line="11" pos:column="37"/></name></name> <operator pos:line="11" pos:column="38">&lt;&lt;<pos:position pos:line="11" pos:column="46"/></operator> <literal type="string" pos:line="11" pos:column="41">": off "<pos:position pos:line="11" pos:column="49"/></literal> <operator pos:line="11" pos:column="50">&lt;&lt;<pos:position pos:line="11" pos:column="58"/></operator>
           <operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">long<pos:position pos:line="12" pos:column="17"/></name> <name pos:line="12" pos:column="18">int<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">)<pos:position pos:line="12" pos:column="22"/></operator> <name><name pos:line="12" pos:column="23">state<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">offset<pos:position pos:line="12" pos:column="36"/></name></name> <operator pos:line="12" pos:column="37">&lt;&lt;<pos:position pos:line="12" pos:column="45"/></operator> <literal type="string" pos:line="12" pos:column="40">", sz "<pos:position pos:line="12" pos:column="47"/></literal> <operator pos:line="12" pos:column="48">&lt;&lt;<pos:position pos:line="12" pos:column="56"/></operator> <operator pos:line="12" pos:column="51">(<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="52">long<pos:position pos:line="12" pos:column="56"/></name> <name pos:line="12" pos:column="57">int<pos:position pos:line="12" pos:column="60"/></name><operator pos:line="12" pos:column="60">)<pos:position pos:line="12" pos:column="61"/></operator> <name><name pos:line="12" pos:column="62">state<pos:position pos:line="12" pos:column="67"/></name><operator pos:line="12" pos:column="67">-&gt;<pos:position pos:line="12" pos:column="72"/></operator><name pos:line="12" pos:column="69">size<pos:position pos:line="12" pos:column="73"/></name></name> <operator pos:line="12" pos:column="74">&lt;&lt;<pos:position pos:line="12" pos:column="82"/></operator> <literal type="string" pos:line="12" pos:column="77">"."<pos:position pos:line="12" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="82"/></expr_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">nleft<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <name><name pos:line="14" pos:column="13">state<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">size<pos:position pos:line="14" pos:column="24"/></name></name> <operator pos:line="14" pos:column="25">-<pos:position pos:line="14" pos:column="26"/></operator> <name><name pos:line="14" pos:column="27">state<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">-&gt;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="34">offset<pos:position pos:line="14" pos:column="40"/></name></name></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="16" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">ClientInfo<pos:position pos:line="17" pos:column="15"/></name> <modifier pos:line="17" pos:column="16">*<pos:position pos:line="17" pos:column="17"/></modifier></type> <name pos:line="17" pos:column="18">clientInfo<pos:position pos:line="17" pos:column="28"/></name><init pos:line="17" pos:column="28">=<expr><name><name pos:line="17" pos:column="29">fd_table<pos:position pos:line="17" pos:column="37"/></name><index pos:line="17" pos:column="37">[<expr><name pos:line="17" pos:column="38">fd<pos:position pos:line="17" pos:column="40"/></name></expr>]<pos:position pos:line="17" pos:column="41"/></index></name><operator pos:line="17" pos:column="41">.<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="42">clientInfo<pos:position pos:line="17" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="53"/></decl_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">clientInfo<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">&amp;&amp;<pos:position pos:line="19" pos:column="30"/></operator> <operator pos:line="19" pos:column="23">!<pos:position pos:line="19" pos:column="24"/></operator><name><name pos:line="19" pos:column="24">clientInfo<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">-&gt;<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="36">writeLimitingActive<pos:position pos:line="19" pos:column="55"/></name></name></expr>)<pos:position pos:line="19" pos:column="56"/></condition><then pos:line="19" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="9">clientInfo<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">NULL<pos:position pos:line="20" pos:column="26"/></name></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt></block></then></if> <comment type="line" pos:line="20" pos:column="28">// we only care about quota limits here</comment>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">clientInfo<pos:position pos:line="22" pos:column="19"/></name></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20"> <block pos:line="22" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">assert<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name><name pos:line="23" pos:column="16">clientInfo<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">-&gt;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="28">selectWaiting<pos:position pos:line="23" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">clientInfo<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">-&gt;<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="21">selectWaiting<pos:position pos:line="24" pos:column="34"/></name></name> <operator pos:line="24" pos:column="35">=<pos:position pos:line="24" pos:column="36"/></operator> <literal type="boolean" pos:line="24" pos:column="37">false<pos:position pos:line="24" pos:column="42"/></literal></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="26" pos:column="9">assert<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><call><name><name pos:line="26" pos:column="16">clientInfo<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">-&gt;<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="28">hasQueue<pos:position pos:line="26" pos:column="36"/></name></name><argument_list pos:line="26" pos:column="36">()<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">assert<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><call><name><name pos:line="27" pos:column="16">clientInfo<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">-&gt;<pos:position pos:line="27" pos:column="31"/></operator><name pos:line="27" pos:column="28">quotaPeekFd<pos:position pos:line="27" pos:column="39"/></name></name><argument_list pos:line="27" pos:column="39">()<pos:position pos:line="27" pos:column="41"/></argument_list></call> <operator pos:line="27" pos:column="42">==<pos:position pos:line="27" pos:column="44"/></operator> <name pos:line="27" pos:column="45">fd<pos:position pos:line="27" pos:column="47"/></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="28" pos:column="9">clientInfo<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">-&gt;<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="21">quotaDequeue<pos:position pos:line="28" pos:column="33"/></name></name><argument_list pos:line="28" pos:column="33">()<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt> <comment type="line" pos:line="28" pos:column="37">// we will write or requeue below</comment>

        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">nleft<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&gt;<pos:position pos:line="30" pos:column="23"/></operator> <literal type="number" pos:line="30" pos:column="21">0<pos:position pos:line="30" pos:column="22"/></literal></expr>)<pos:position pos:line="30" pos:column="23"/></condition><then pos:line="30" pos:column="23"> <block pos:line="30" pos:column="24">{
            <decl_stmt><decl><type><specifier pos:line="31" pos:column="13">const<pos:position pos:line="31" pos:column="18"/></specifier> <name pos:line="31" pos:column="19">int<pos:position pos:line="31" pos:column="22"/></name></type> <name pos:line="31" pos:column="23">quota<pos:position pos:line="31" pos:column="28"/></name> <init pos:line="31" pos:column="29">= <expr><call><name><name pos:line="31" pos:column="31">clientInfo<pos:position pos:line="31" pos:column="41"/></name><operator pos:line="31" pos:column="41">-&gt;<pos:position pos:line="31" pos:column="46"/></operator><name pos:line="31" pos:column="43">quotaForDequed<pos:position pos:line="31" pos:column="57"/></name></name><argument_list pos:line="31" pos:column="57">()<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="60"/></decl_stmt>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><operator pos:line="32" pos:column="17">!<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">quota<pos:position pos:line="32" pos:column="23"/></name></expr>)<pos:position pos:line="32" pos:column="24"/></condition><then pos:line="32" pos:column="24"> <block pos:line="32" pos:column="25">{  <comment type="line" pos:line="32" pos:column="28">// if no write quota left, queue this fd</comment>
                <expr_stmt><expr><name><name pos:line="33" pos:column="17">state<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">-&gt;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="24">quotaQueueReserv<pos:position pos:line="33" pos:column="40"/></name></name> <operator pos:line="33" pos:column="41">=<pos:position pos:line="33" pos:column="42"/></operator> <call><name><name pos:line="33" pos:column="43">clientInfo<pos:position pos:line="33" pos:column="53"/></name><operator pos:line="33" pos:column="53">-&gt;<pos:position pos:line="33" pos:column="58"/></operator><name pos:line="33" pos:column="55">quotaEnqueue<pos:position pos:line="33" pos:column="67"/></name></name><argument_list pos:line="33" pos:column="67">(<argument><expr><name pos:line="33" pos:column="68">fd<pos:position pos:line="33" pos:column="70"/></name></expr></argument>)<pos:position pos:line="33" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="72"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="34" pos:column="17">clientInfo<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-&gt;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="29">kickQuotaQueue<pos:position pos:line="34" pos:column="43"/></name></name><argument_list pos:line="34" pos:column="43">()<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="35" pos:column="17">PROF_stop<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">commHandleWrite<pos:position pos:line="35" pos:column="42"/></name></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
                <return pos:line="36" pos:column="17">return;<pos:position pos:line="36" pos:column="24"/></return>
            }<pos:position pos:line="37" pos:column="14"/></block></then></if>

            <decl_stmt><decl><type><specifier pos:line="39" pos:column="13">const<pos:position pos:line="39" pos:column="18"/></specifier> <name pos:line="39" pos:column="19">int<pos:position pos:line="39" pos:column="22"/></name></type> <name pos:line="39" pos:column="23">nleft_corrected<pos:position pos:line="39" pos:column="38"/></name> <init pos:line="39" pos:column="39">= <expr><call><name pos:line="39" pos:column="41">min<pos:position pos:line="39" pos:column="44"/></name><argument_list pos:line="39" pos:column="44">(<argument><expr><name pos:line="39" pos:column="45">nleft<pos:position pos:line="39" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="52">quota<pos:position pos:line="39" pos:column="57"/></name></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="59"/></decl_stmt>
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><name pos:line="40" pos:column="17">nleft<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">!=<pos:position pos:line="40" pos:column="25"/></operator> <name pos:line="40" pos:column="26">nleft_corrected<pos:position pos:line="40" pos:column="41"/></name></expr>)<pos:position pos:line="40" pos:column="42"/></condition><then pos:line="40" pos:column="42"> <block pos:line="40" pos:column="43">{
                <expr_stmt><expr><call><name pos:line="41" pos:column="17">debugs<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><literal type="number" pos:line="41" pos:column="24">5<pos:position pos:line="41" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="27">5<pos:position pos:line="41" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="30">HERE<pos:position pos:line="41" pos:column="34"/></name> <operator pos:line="41" pos:column="35">&lt;&lt;<pos:position pos:line="41" pos:column="43"/></operator> <name><name pos:line="41" pos:column="38">state<pos:position pos:line="41" pos:column="43"/></name><operator pos:line="41" pos:column="43">-&gt;<pos:position pos:line="41" pos:column="48"/></operator><name pos:line="41" pos:column="45">conn<pos:position pos:line="41" pos:column="49"/></name></name> <operator pos:line="41" pos:column="50">&lt;&lt;<pos:position pos:line="41" pos:column="58"/></operator> <literal type="string" pos:line="41" pos:column="53">" writes only "<pos:position pos:line="41" pos:column="68"/></literal> <operator pos:line="41" pos:column="69">&lt;&lt;<pos:position pos:line="41" pos:column="77"/></operator>
                       <name pos:line="42" pos:column="24">nleft_corrected<pos:position pos:line="42" pos:column="39"/></name> <operator pos:line="42" pos:column="40">&lt;&lt;<pos:position pos:line="42" pos:column="48"/></operator> <literal type="string" pos:line="42" pos:column="43">" out of "<pos:position pos:line="42" pos:column="53"/></literal> <operator pos:line="42" pos:column="54">&lt;&lt;<pos:position pos:line="42" pos:column="62"/></operator> <name pos:line="42" pos:column="57">nleft<pos:position pos:line="42" pos:column="62"/></name></expr></argument>)<pos:position pos:line="42" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="64"/></expr_stmt>
                <expr_stmt><expr><name pos:line="43" pos:column="17">nleft<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <name pos:line="43" pos:column="25">nleft_corrected<pos:position pos:line="43" pos:column="40"/></name></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="44" pos:column="14"/></block></then></if>

        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="48" pos:column="8">/* USE_DELAY_POOLS */</comment>

    <comment type="block" pos:line="50" pos:column="5">/* actually WRITE data */</comment>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">int<pos:position pos:line="51" pos:column="8"/></name></type> <name pos:line="51" pos:column="9">xerrno<pos:position pos:line="51" pos:column="15"/></name> <init pos:line="51" pos:column="16">= <expr><name pos:line="51" pos:column="18">errno<pos:position pos:line="51" pos:column="23"/></name> <operator pos:line="51" pos:column="24">=<pos:position pos:line="51" pos:column="25"/></operator> <literal type="number" pos:line="51" pos:column="26">0<pos:position pos:line="51" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="51" pos:column="28"/></decl_stmt>
    <expr_stmt><expr><name pos:line="52" pos:column="5">len<pos:position pos:line="52" pos:column="8"/></name> <operator pos:line="52" pos:column="9">=<pos:position pos:line="52" pos:column="10"/></operator> <call><name pos:line="52" pos:column="11">FD_WRITE_METHOD<pos:position pos:line="52" pos:column="26"/></name><argument_list pos:line="52" pos:column="26">(<argument><expr><name pos:line="52" pos:column="27">fd<pos:position pos:line="52" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="31">state<pos:position pos:line="52" pos:column="36"/></name><operator pos:line="52" pos:column="36">-&gt;<pos:position pos:line="52" pos:column="41"/></operator><name pos:line="52" pos:column="38">buf<pos:position pos:line="52" pos:column="41"/></name></name> <operator pos:line="52" pos:column="42">+<pos:position pos:line="52" pos:column="43"/></operator> <name><name pos:line="52" pos:column="44">state<pos:position pos:line="52" pos:column="49"/></name><operator pos:line="52" pos:column="49">-&gt;<pos:position pos:line="52" pos:column="54"/></operator><name pos:line="52" pos:column="51">offset<pos:position pos:line="52" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="59">nleft<pos:position pos:line="52" pos:column="64"/></name></expr></argument>)<pos:position pos:line="52" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><name pos:line="53" pos:column="5">xerrno<pos:position pos:line="53" pos:column="11"/></name> <operator pos:line="53" pos:column="12">=<pos:position pos:line="53" pos:column="13"/></operator> <name pos:line="53" pos:column="14">errno<pos:position pos:line="53" pos:column="19"/></name></expr>;<pos:position pos:line="53" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">debugs<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><literal type="number" pos:line="54" pos:column="12">5<pos:position pos:line="54" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="15">5<pos:position pos:line="54" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="18">HERE<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">&lt;&lt;<pos:position pos:line="54" pos:column="31"/></operator> <literal type="string" pos:line="54" pos:column="26">"write() returns "<pos:position pos:line="54" pos:column="44"/></literal> <operator pos:line="54" pos:column="45">&lt;&lt;<pos:position pos:line="54" pos:column="53"/></operator> <name pos:line="54" pos:column="48">len<pos:position pos:line="54" pos:column="51"/></name></expr></argument>)<pos:position pos:line="54" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="53"/></expr_stmt>

<cpp:if pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">if<pos:position pos:line="56" pos:column="4"/></cpp:directive> <expr><name pos:line="56" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="56" pos:column="20"/></name></expr></cpp:if>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">clientInfo<pos:position pos:line="57" pos:column="19"/></name></expr>)<pos:position pos:line="57" pos:column="20"/></condition><then pos:line="57" pos:column="20"> <block pos:line="57" pos:column="21">{
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">len<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">&gt;<pos:position pos:line="58" pos:column="21"/></operator> <literal type="number" pos:line="58" pos:column="19">0<pos:position pos:line="58" pos:column="20"/></literal></expr>)<pos:position pos:line="58" pos:column="21"/></condition><then pos:line="58" pos:column="21"> <block pos:line="58" pos:column="22">{
            <comment type="block" pos:line="59" pos:column="13">/* we wrote data - drain them from bucket */</comment>
            <expr_stmt><expr><name><name pos:line="60" pos:column="13">clientInfo<pos:position pos:line="60" pos:column="23"/></name><operator pos:line="60" pos:column="23">-&gt;<pos:position pos:line="60" pos:column="28"/></operator><name pos:line="60" pos:column="25">bucketSize<pos:position pos:line="60" pos:column="35"/></name></name> <operator pos:line="60" pos:column="36">-=<pos:position pos:line="60" pos:column="38"/></operator> <name pos:line="60" pos:column="39">len<pos:position pos:line="60" pos:column="42"/></name></expr>;<pos:position pos:line="60" pos:column="43"/></expr_stmt>
            <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><name><name pos:line="61" pos:column="17">clientInfo<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">-&gt;<pos:position pos:line="61" pos:column="32"/></operator><name pos:line="61" pos:column="29">bucketSize<pos:position pos:line="61" pos:column="39"/></name></name> <operator pos:line="61" pos:column="40">&lt;<pos:position pos:line="61" pos:column="44"/></operator> <literal type="number" pos:line="61" pos:column="42">0.0<pos:position pos:line="61" pos:column="45"/></literal></expr>)<pos:position pos:line="61" pos:column="46"/></condition><then pos:line="61" pos:column="46"> <block pos:line="61" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="62" pos:column="17">debugs<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><literal type="number" pos:line="62" pos:column="24">5<pos:position pos:line="62" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="27">DBG_IMPORTANT<pos:position pos:line="62" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="42">HERE<pos:position pos:line="62" pos:column="46"/></name> <operator pos:line="62" pos:column="47">&lt;&lt;<pos:position pos:line="62" pos:column="55"/></operator> <literal type="string" pos:line="62" pos:column="50">"drained too much"<pos:position pos:line="62" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="70"/></expr_stmt> <comment type="line" pos:line="62" pos:column="71">// should not happen</comment>
                <expr_stmt><expr><name><name pos:line="63" pos:column="17">clientInfo<pos:position pos:line="63" pos:column="27"/></name><operator pos:line="63" pos:column="27">-&gt;<pos:position pos:line="63" pos:column="32"/></operator><name pos:line="63" pos:column="29">bucketSize<pos:position pos:line="63" pos:column="39"/></name></name> <operator pos:line="63" pos:column="40">=<pos:position pos:line="63" pos:column="41"/></operator> <literal type="number" pos:line="63" pos:column="42">0<pos:position pos:line="63" pos:column="43"/></literal></expr>;<pos:position pos:line="63" pos:column="44"/></expr_stmt>
            }<pos:position pos:line="64" pos:column="14"/></block></then></if>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="67" pos:column="9">// even if we wrote nothing, we were served; give others a chance</comment>
        <expr_stmt><expr><call><name><name pos:line="68" pos:column="9">clientInfo<pos:position pos:line="68" pos:column="19"/></name><operator pos:line="68" pos:column="19">-&gt;<pos:position pos:line="68" pos:column="24"/></operator><name pos:line="68" pos:column="21">kickQuotaQueue<pos:position pos:line="68" pos:column="35"/></name></name><argument_list pos:line="68" pos:column="35">()<pos:position pos:line="68" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="70" pos:column="8">/* USE_DELAY_POOLS */</comment>

    <expr_stmt><expr><call><name pos:line="72" pos:column="5">fd_bytes<pos:position pos:line="72" pos:column="13"/></name><argument_list pos:line="72" pos:column="13">(<argument><expr><name pos:line="72" pos:column="14">fd<pos:position pos:line="72" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="18">len<pos:position pos:line="72" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="23">FD_WRITE<pos:position pos:line="72" pos:column="31"/></name></expr></argument>)<pos:position pos:line="72" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="73" pos:column="5">++<pos:position pos:line="73" pos:column="7"/></operator><name><name pos:line="73" pos:column="7">statCounter<pos:position pos:line="73" pos:column="18"/></name><operator pos:line="73" pos:column="18">.<pos:position pos:line="73" pos:column="19"/></operator><name pos:line="73" pos:column="19">syscalls<pos:position pos:line="73" pos:column="27"/></name><operator pos:line="73" pos:column="27">.<pos:position pos:line="73" pos:column="28"/></operator><name pos:line="73" pos:column="28">sock<pos:position pos:line="73" pos:column="32"/></name><operator pos:line="73" pos:column="32">.<pos:position pos:line="73" pos:column="33"/></operator><name pos:line="73" pos:column="33">writes<pos:position pos:line="73" pos:column="39"/></name></name></expr>;<pos:position pos:line="73" pos:column="40"/></expr_stmt>
    <comment type="line" pos:line="74" pos:column="5">// After each successful partial write,</comment>
    <comment type="line" pos:line="75" pos:column="5">// reset fde::writeStart to the current time.</comment>
    <expr_stmt><expr><name><name pos:line="76" pos:column="5">fd_table<pos:position pos:line="76" pos:column="13"/></name><index pos:line="76" pos:column="13">[<expr><name pos:line="76" pos:column="14">fd<pos:position pos:line="76" pos:column="16"/></name></expr>]<pos:position pos:line="76" pos:column="17"/></index></name><operator pos:line="76" pos:column="17">.<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="18">writeStart<pos:position pos:line="76" pos:column="28"/></name> <operator pos:line="76" pos:column="29">=<pos:position pos:line="76" pos:column="30"/></operator> <name pos:line="76" pos:column="31">squid_curtime<pos:position pos:line="76" pos:column="44"/></name></expr>;<pos:position pos:line="76" pos:column="45"/></expr_stmt>

    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><name pos:line="78" pos:column="9">len<pos:position pos:line="78" pos:column="12"/></name> <operator pos:line="78" pos:column="13">==<pos:position pos:line="78" pos:column="15"/></operator> <literal type="number" pos:line="78" pos:column="16">0<pos:position pos:line="78" pos:column="17"/></literal></expr>)<pos:position pos:line="78" pos:column="18"/></condition><then pos:line="78" pos:column="18"> <block pos:line="78" pos:column="19">{
        <comment type="block" pos:line="79" pos:column="9">/* Note we even call write if nleft == 0 */</comment>
        <comment type="block" pos:line="80" pos:column="9">/* We're done */</comment>
        <if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">nleft<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">!=<pos:position pos:line="81" pos:column="21"/></operator> <literal type="number" pos:line="81" pos:column="22">0<pos:position pos:line="81" pos:column="23"/></literal></expr>)<pos:position pos:line="81" pos:column="24"/></condition><then pos:line="81" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="82" pos:column="13">debugs<pos:position pos:line="82" pos:column="19"/></name><argument_list pos:line="82" pos:column="19">(<argument><expr><literal type="number" pos:line="82" pos:column="20">5<pos:position pos:line="82" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="23">DBG_IMPORTANT<pos:position pos:line="82" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="38">"FD "<pos:position pos:line="82" pos:column="43"/></literal> <operator pos:line="82" pos:column="44">&lt;&lt;<pos:position pos:line="82" pos:column="52"/></operator> <name pos:line="82" pos:column="47">fd<pos:position pos:line="82" pos:column="49"/></name> <operator pos:line="82" pos:column="50">&lt;&lt;<pos:position pos:line="82" pos:column="58"/></operator> <literal type="string" pos:line="82" pos:column="53">" write failure: connection closed with "<pos:position pos:line="82" pos:column="94"/></literal> <operator pos:line="82" pos:column="95">&lt;&lt;<pos:position pos:line="82" pos:column="103"/></operator> <name pos:line="82" pos:column="98">nleft<pos:position pos:line="82" pos:column="103"/></name> <operator pos:line="82" pos:column="104">&lt;&lt;<pos:position pos:line="82" pos:column="112"/></operator> <literal type="string" pos:line="82" pos:column="107">" bytes remaining."<pos:position pos:line="82" pos:column="126"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="127"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="128"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="84" pos:column="9">state<pos:position pos:line="84" pos:column="14"/></name><operator pos:line="84" pos:column="14">-&gt;<pos:position pos:line="84" pos:column="19"/></operator><name pos:line="84" pos:column="16">finish<pos:position pos:line="84" pos:column="22"/></name></name><argument_list pos:line="84" pos:column="22">(<argument><expr><ternary><condition><expr><name pos:line="84" pos:column="23">nleft<pos:position pos:line="84" pos:column="28"/></name></expr> ?<pos:position pos:line="84" pos:column="30"/></condition><then pos:line="84" pos:column="30"> <expr><name><name pos:line="84" pos:column="31">Comm<pos:position pos:line="84" pos:column="35"/></name><operator pos:line="84" pos:column="35">::<pos:position pos:line="84" pos:column="37"/></operator><name pos:line="84" pos:column="37">COMM_ERROR<pos:position pos:line="84" pos:column="47"/></name></name></expr> <pos:position pos:line="84" pos:column="48"/></then><else pos:line="84" pos:column="48">: <expr><name><name pos:line="84" pos:column="50">Comm<pos:position pos:line="84" pos:column="54"/></name><operator pos:line="84" pos:column="54">::<pos:position pos:line="84" pos:column="56"/></operator><name pos:line="84" pos:column="56">OK<pos:position pos:line="84" pos:column="58"/></name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="60">0<pos:position pos:line="84" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="85" pos:column="6"/></block></then> <elseif pos:line="85" pos:column="7">else <if pos:line="85" pos:column="12">if <condition pos:line="85" pos:column="15">(<expr><name pos:line="85" pos:column="16">len<pos:position pos:line="85" pos:column="19"/></name> <operator pos:line="85" pos:column="20">&lt;<pos:position pos:line="85" pos:column="24"/></operator> <literal type="number" pos:line="85" pos:column="22">0<pos:position pos:line="85" pos:column="23"/></literal></expr>)<pos:position pos:line="85" pos:column="24"/></condition><then pos:line="85" pos:column="24"> <block pos:line="85" pos:column="25">{
        <comment type="block" pos:line="86" pos:column="9">/* An error */</comment>
        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name><name pos:line="87" pos:column="13">fd_table<pos:position pos:line="87" pos:column="21"/></name><index pos:line="87" pos:column="21">[<expr><name pos:line="87" pos:column="22">fd<pos:position pos:line="87" pos:column="24"/></name></expr>]<pos:position pos:line="87" pos:column="25"/></index></name><operator pos:line="87" pos:column="25">.<pos:position pos:line="87" pos:column="26"/></operator><name><name pos:line="87" pos:column="26">flags<pos:position pos:line="87" pos:column="31"/></name><operator pos:line="87" pos:column="31">.<pos:position pos:line="87" pos:column="32"/></operator><name pos:line="87" pos:column="32">socket_eof<pos:position pos:line="87" pos:column="42"/></name></name></expr>)<pos:position pos:line="87" pos:column="43"/></condition><then pos:line="87" pos:column="43"> <block pos:line="87" pos:column="44">{
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">debugs<pos:position pos:line="88" pos:column="19"/></name><argument_list pos:line="88" pos:column="19">(<argument><expr><literal type="number" pos:line="88" pos:column="20">50<pos:position pos:line="88" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="24">2<pos:position pos:line="88" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="27">"FD "<pos:position pos:line="88" pos:column="32"/></literal> <operator pos:line="88" pos:column="33">&lt;&lt;<pos:position pos:line="88" pos:column="41"/></operator> <name pos:line="88" pos:column="36">fd<pos:position pos:line="88" pos:column="38"/></name> <operator pos:line="88" pos:column="39">&lt;&lt;<pos:position pos:line="88" pos:column="47"/></operator> <literal type="string" pos:line="88" pos:column="42">" write failure: "<pos:position pos:line="88" pos:column="60"/></literal> <operator pos:line="88" pos:column="61">&lt;&lt;<pos:position pos:line="88" pos:column="69"/></operator> <call><name pos:line="88" pos:column="64">xstrerr<pos:position pos:line="88" pos:column="71"/></name><argument_list pos:line="88" pos:column="71">(<argument><expr><name pos:line="88" pos:column="72">xerrno<pos:position pos:line="88" pos:column="78"/></name></expr></argument>)<pos:position pos:line="88" pos:column="79"/></argument_list></call> <operator pos:line="88" pos:column="80">&lt;&lt;<pos:position pos:line="88" pos:column="88"/></operator> <literal type="string" pos:line="88" pos:column="83">"."<pos:position pos:line="88" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="88"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">state<pos:position pos:line="89" pos:column="18"/></name><operator pos:line="89" pos:column="18">-&gt;<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="20">finish<pos:position pos:line="89" pos:column="26"/></name></name><argument_list pos:line="89" pos:column="26">(<argument><expr><ternary><condition><expr><name pos:line="89" pos:column="27">nleft<pos:position pos:line="89" pos:column="32"/></name></expr> ?<pos:position pos:line="89" pos:column="34"/></condition><then pos:line="89" pos:column="34"> <expr><name><name pos:line="89" pos:column="35">Comm<pos:position pos:line="89" pos:column="39"/></name><operator pos:line="89" pos:column="39">::<pos:position pos:line="89" pos:column="41"/></operator><name pos:line="89" pos:column="41">COMM_ERROR<pos:position pos:line="89" pos:column="51"/></name></name></expr> <pos:position pos:line="89" pos:column="52"/></then><else pos:line="89" pos:column="52">: <expr><name><name pos:line="89" pos:column="54">Comm<pos:position pos:line="89" pos:column="58"/></name><operator pos:line="89" pos:column="58">::<pos:position pos:line="89" pos:column="60"/></operator><name pos:line="89" pos:column="60">OK<pos:position pos:line="89" pos:column="62"/></name></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="89" pos:column="64">xerrno<pos:position pos:line="89" pos:column="70"/></name></expr></argument>)<pos:position pos:line="89" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="72"/></expr_stmt>
        }<pos:position pos:line="90" pos:column="10"/></block></then> <elseif pos:line="90" pos:column="11">else <if pos:line="90" pos:column="16">if <condition pos:line="90" pos:column="19">(<expr><call><name pos:line="90" pos:column="20">ignoreErrno<pos:position pos:line="90" pos:column="31"/></name><argument_list pos:line="90" pos:column="31">(<argument><expr><name pos:line="90" pos:column="32">xerrno<pos:position pos:line="90" pos:column="38"/></name></expr></argument>)<pos:position pos:line="90" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="90" pos:column="40"/></condition><then pos:line="90" pos:column="40"> <block pos:line="90" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">debugs<pos:position pos:line="91" pos:column="19"/></name><argument_list pos:line="91" pos:column="19">(<argument><expr><literal type="number" pos:line="91" pos:column="20">50<pos:position pos:line="91" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="24">9<pos:position pos:line="91" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="27">"FD "<pos:position pos:line="91" pos:column="32"/></literal> <operator pos:line="91" pos:column="33">&lt;&lt;<pos:position pos:line="91" pos:column="41"/></operator> <name pos:line="91" pos:column="36">fd<pos:position pos:line="91" pos:column="38"/></name> <operator pos:line="91" pos:column="39">&lt;&lt;<pos:position pos:line="91" pos:column="47"/></operator> <literal type="string" pos:line="91" pos:column="42">" write failure: "<pos:position pos:line="91" pos:column="60"/></literal> <operator pos:line="91" pos:column="61">&lt;&lt;<pos:position pos:line="91" pos:column="69"/></operator> <call><name pos:line="91" pos:column="64">xstrerr<pos:position pos:line="91" pos:column="71"/></name><argument_list pos:line="91" pos:column="71">(<argument><expr><name pos:line="91" pos:column="72">xerrno<pos:position pos:line="91" pos:column="78"/></name></expr></argument>)<pos:position pos:line="91" pos:column="79"/></argument_list></call> <operator pos:line="91" pos:column="80">&lt;&lt;<pos:position pos:line="91" pos:column="88"/></operator> <literal type="string" pos:line="91" pos:column="83">"."<pos:position pos:line="91" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="88"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="92" pos:column="13">state<pos:position pos:line="92" pos:column="18"/></name><operator pos:line="92" pos:column="18">-&gt;<pos:position pos:line="92" pos:column="23"/></operator><name pos:line="92" pos:column="20">selectOrQueueWrite<pos:position pos:line="92" pos:column="38"/></name></name><argument_list pos:line="92" pos:column="38">()<pos:position pos:line="92" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="93" pos:column="10"/></block></then></if></elseif> <else pos:line="93" pos:column="11">else <block pos:line="93" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">debugs<pos:position pos:line="94" pos:column="19"/></name><argument_list pos:line="94" pos:column="19">(<argument><expr><literal type="number" pos:line="94" pos:column="20">50<pos:position pos:line="94" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="24">2<pos:position pos:line="94" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="27">"FD "<pos:position pos:line="94" pos:column="32"/></literal> <operator pos:line="94" pos:column="33">&lt;&lt;<pos:position pos:line="94" pos:column="41"/></operator> <name pos:line="94" pos:column="36">fd<pos:position pos:line="94" pos:column="38"/></name> <operator pos:line="94" pos:column="39">&lt;&lt;<pos:position pos:line="94" pos:column="47"/></operator> <literal type="string" pos:line="94" pos:column="42">" write failure: "<pos:position pos:line="94" pos:column="60"/></literal> <operator pos:line="94" pos:column="61">&lt;&lt;<pos:position pos:line="94" pos:column="69"/></operator> <call><name pos:line="94" pos:column="64">xstrerr<pos:position pos:line="94" pos:column="71"/></name><argument_list pos:line="94" pos:column="71">(<argument><expr><name pos:line="94" pos:column="72">xerrno<pos:position pos:line="94" pos:column="78"/></name></expr></argument>)<pos:position pos:line="94" pos:column="79"/></argument_list></call> <operator pos:line="94" pos:column="80">&lt;&lt;<pos:position pos:line="94" pos:column="88"/></operator> <literal type="string" pos:line="94" pos:column="83">"."<pos:position pos:line="94" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="88"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">state<pos:position pos:line="95" pos:column="18"/></name><operator pos:line="95" pos:column="18">-&gt;<pos:position pos:line="95" pos:column="23"/></operator><name pos:line="95" pos:column="20">finish<pos:position pos:line="95" pos:column="26"/></name></name><argument_list pos:line="95" pos:column="26">(<argument><expr><ternary><condition><expr><name pos:line="95" pos:column="27">nleft<pos:position pos:line="95" pos:column="32"/></name></expr> ?<pos:position pos:line="95" pos:column="34"/></condition><then pos:line="95" pos:column="34"> <expr><name><name pos:line="95" pos:column="35">Comm<pos:position pos:line="95" pos:column="39"/></name><operator pos:line="95" pos:column="39">::<pos:position pos:line="95" pos:column="41"/></operator><name pos:line="95" pos:column="41">COMM_ERROR<pos:position pos:line="95" pos:column="51"/></name></name></expr> <pos:position pos:line="95" pos:column="52"/></then><else pos:line="95" pos:column="52">: <expr><name><name pos:line="95" pos:column="54">Comm<pos:position pos:line="95" pos:column="58"/></name><operator pos:line="95" pos:column="58">::<pos:position pos:line="95" pos:column="60"/></operator><name pos:line="95" pos:column="60">OK<pos:position pos:line="95" pos:column="62"/></name></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="95" pos:column="64">xerrno<pos:position pos:line="95" pos:column="70"/></name></expr></argument>)<pos:position pos:line="95" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="72"/></expr_stmt>
        }<pos:position pos:line="96" pos:column="10"/></block></else></if>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if></elseif> <else pos:line="97" pos:column="7">else <block pos:line="97" pos:column="12">{
        <comment type="block" pos:line="98" pos:column="9">/* A successful write, continue */</comment>
        <expr_stmt><expr><name><name pos:line="99" pos:column="9">state<pos:position pos:line="99" pos:column="14"/></name><operator pos:line="99" pos:column="14">-&gt;<pos:position pos:line="99" pos:column="19"/></operator><name pos:line="99" pos:column="16">offset<pos:position pos:line="99" pos:column="22"/></name></name> <operator pos:line="99" pos:column="23">+=<pos:position pos:line="99" pos:column="25"/></operator> <name pos:line="99" pos:column="26">len<pos:position pos:line="99" pos:column="29"/></name></expr>;<pos:position pos:line="99" pos:column="30"/></expr_stmt>

        <if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name><name pos:line="101" pos:column="13">state<pos:position pos:line="101" pos:column="18"/></name><operator pos:line="101" pos:column="18">-&gt;<pos:position pos:line="101" pos:column="23"/></operator><name pos:line="101" pos:column="20">offset<pos:position pos:line="101" pos:column="26"/></name></name> <operator pos:line="101" pos:column="27">&lt;<pos:position pos:line="101" pos:column="31"/></operator> <name><name pos:line="101" pos:column="29">state<pos:position pos:line="101" pos:column="34"/></name><operator pos:line="101" pos:column="34">-&gt;<pos:position pos:line="101" pos:column="39"/></operator><name pos:line="101" pos:column="36">size<pos:position pos:line="101" pos:column="40"/></name></name></expr>)<pos:position pos:line="101" pos:column="41"/></condition><then pos:line="101" pos:column="41"> <block pos:line="101" pos:column="42">{
            <comment type="block" pos:line="102" pos:column="13">/* Not done, reinstall the write handler and write some more */</comment>
            <expr_stmt><expr><call><name><name pos:line="103" pos:column="13">state<pos:position pos:line="103" pos:column="18"/></name><operator pos:line="103" pos:column="18">-&gt;<pos:position pos:line="103" pos:column="23"/></operator><name pos:line="103" pos:column="20">selectOrQueueWrite<pos:position pos:line="103" pos:column="38"/></name></name><argument_list pos:line="103" pos:column="38">()<pos:position pos:line="103" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="104" pos:column="10"/></block></then> <else pos:line="104" pos:column="11">else <block pos:line="104" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="105" pos:column="13">state<pos:position pos:line="105" pos:column="18"/></name><operator pos:line="105" pos:column="18">-&gt;<pos:position pos:line="105" pos:column="23"/></operator><name pos:line="105" pos:column="20">finish<pos:position pos:line="105" pos:column="26"/></name></name><argument_list pos:line="105" pos:column="26">(<argument><expr><ternary><condition><expr><name pos:line="105" pos:column="27">nleft<pos:position pos:line="105" pos:column="32"/></name></expr> ?<pos:position pos:line="105" pos:column="34"/></condition><then pos:line="105" pos:column="34"> <expr><name><name pos:line="105" pos:column="35">Comm<pos:position pos:line="105" pos:column="39"/></name><operator pos:line="105" pos:column="39">::<pos:position pos:line="105" pos:column="41"/></operator><name pos:line="105" pos:column="41">OK<pos:position pos:line="105" pos:column="43"/></name></name></expr> <pos:position pos:line="105" pos:column="44"/></then><else pos:line="105" pos:column="44">: <expr><name><name pos:line="105" pos:column="46">Comm<pos:position pos:line="105" pos:column="50"/></name><operator pos:line="105" pos:column="50">::<pos:position pos:line="105" pos:column="52"/></operator><name pos:line="105" pos:column="52">COMM_ERROR<pos:position pos:line="105" pos:column="62"/></name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number" pos:line="105" pos:column="64">0<pos:position pos:line="105" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="67"/></expr_stmt>
        }<pos:position pos:line="106" pos:column="10"/></block></else></if>
    }<pos:position pos:line="107" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="109" pos:column="5">PROF_stop<pos:position pos:line="109" pos:column="14"/></name><argument_list pos:line="109" pos:column="14">(<argument><expr><name pos:line="109" pos:column="15">commHandleWrite<pos:position pos:line="109" pos:column="30"/></name></expr></argument>)<pos:position pos:line="109" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="32"/></expr_stmt>
}<pos:position pos:line="110" pos:column="2"/></block></function></unit>
