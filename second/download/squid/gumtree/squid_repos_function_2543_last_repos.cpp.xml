<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2543_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">transientsAbandonmentCheck<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">()<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">mem_obj<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">&amp;&amp;<pos:position pos:line="4" pos:column="27"/></operator> <operator pos:line="4" pos:column="20">!<pos:position pos:line="4" pos:column="21"/></operator><name><name pos:line="4" pos:column="21">mem_obj<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">-&gt;<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="30">smpCollapsed<pos:position pos:line="4" pos:column="42"/></name></name> <operator pos:line="4" pos:column="43">&amp;&amp;<pos:position pos:line="4" pos:column="53"/></operator> <comment type="line" pos:line="4" pos:column="46">// this worker is responsible</comment>
            <name><name pos:line="5" pos:column="13">mem_obj<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">-&gt;<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="22">xitTable<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">.<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="31">index<pos:position pos:line="5" pos:column="36"/></name></name> <operator pos:line="5" pos:column="37">&gt;=<pos:position pos:line="5" pos:column="42"/></operator> <literal type="number" pos:line="5" pos:column="40">0<pos:position pos:line="5" pos:column="41"/></literal> <operator pos:line="5" pos:column="42">&amp;&amp;<pos:position pos:line="5" pos:column="52"/></operator> <comment type="line" pos:line="5" pos:column="45">// other workers may be interested</comment>
            <name><name pos:line="6" pos:column="13">mem_obj<pos:position pos:line="6" pos:column="20"/></name><operator pos:line="6" pos:column="20">-&gt;<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="22">memCache<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">.<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="31">index<pos:position pos:line="6" pos:column="36"/></name></name> <operator pos:line="6" pos:column="37">&lt;<pos:position pos:line="6" pos:column="41"/></operator> <literal type="number" pos:line="6" pos:column="39">0<pos:position pos:line="6" pos:column="40"/></literal> <operator pos:line="6" pos:column="41">&amp;&amp;<pos:position pos:line="6" pos:column="51"/></operator> <comment type="line" pos:line="6" pos:column="44">// rejected by the shared memory cache</comment>
            <name><name pos:line="7" pos:column="13">mem_obj<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">-&gt;<pos:position pos:line="7" pos:column="25"/></operator><name pos:line="7" pos:column="22">swapout<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">.<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">decision<pos:position pos:line="7" pos:column="38"/></name></name> <operator pos:line="7" pos:column="39">==<pos:position pos:line="7" pos:column="41"/></operator> <name><name pos:line="7" pos:column="42">MemObject<pos:position pos:line="7" pos:column="51"/></name><operator pos:line="7" pos:column="51">::<pos:position pos:line="7" pos:column="53"/></operator><name pos:line="7" pos:column="53">SwapOut<pos:position pos:line="7" pos:column="60"/></name><operator pos:line="7" pos:column="60">::<pos:position pos:line="7" pos:column="62"/></operator><name pos:line="7" pos:column="62">swImpossible<pos:position pos:line="7" pos:column="74"/></name></name></expr>)<pos:position pos:line="7" pos:column="75"/></condition><then pos:line="7" pos:column="75"> <block pos:line="7" pos:column="76">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">20<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="20">7<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"cannot be shared: "<pos:position pos:line="8" pos:column="43"/></literal> <operator pos:line="8" pos:column="44">&lt;&lt;<pos:position pos:line="8" pos:column="52"/></operator> <operator pos:line="8" pos:column="47">*<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="48">this<pos:position pos:line="8" pos:column="52"/></name></expr></argument>)<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="54"/></expr_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">shutting_down<pos:position pos:line="9" pos:column="27"/></name></expr>)<pos:position pos:line="9" pos:column="28"/></condition><then pos:line="9" pos:column="28"> <comment type="line" pos:line="9" pos:column="29">// Store::Root() is FATALly missing during shutdown</comment>
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="10" pos:column="13">Store<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">::<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">Root<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">()<pos:position pos:line="10" pos:column="26"/></argument_list></call><operator pos:line="10" pos:column="26">.<pos:position pos:line="10" pos:column="27"/></operator><call><name pos:line="10" pos:column="27">transientsAbandon<pos:position pos:line="10" pos:column="44"/></name><argument_list pos:line="10" pos:column="44">(<argument><expr><operator pos:line="10" pos:column="45">*<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="46">this<pos:position pos:line="10" pos:column="50"/></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="52"/></expr_stmt></block></then></if>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
