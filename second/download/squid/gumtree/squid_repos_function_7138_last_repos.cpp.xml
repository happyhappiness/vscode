<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7138_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Ipc<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name pos:line="1" pos:column="6">StoreMap<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">SliceId<pos:position pos:line="1" pos:column="23"/></name></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">StoreMap<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">sliceContaining<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">sfileno<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">fileno<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">uint64_t<pos:position pos:line="2" pos:column="68"/></name></type> <name pos:line="2" pos:column="69">bytesNeeded<pos:position pos:line="2" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="81"/></parameter_list> <specifier pos:line="2" pos:column="82">const<pos:position pos:line="2" pos:column="87"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">Anchor<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">&amp;<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="19">anchor<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><call><name pos:line="4" pos:column="28">anchorAt<pos:position pos:line="4" pos:column="36"/></name><argument_list pos:line="4" pos:column="36">(<argument><expr><name pos:line="4" pos:column="37">fileno<pos:position pos:line="4" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><call><name><name pos:line="5" pos:column="10">anchor<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">.<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">reading<pos:position pos:line="5" pos:column="24"/></name></name><argument_list pos:line="5" pos:column="24">()<pos:position pos:line="5" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">uint64_t<pos:position pos:line="6" pos:column="13"/></name></type> <name pos:line="6" pos:column="14">bytesSeen<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><literal type="number" pos:line="6" pos:column="26">0<pos:position pos:line="6" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">SliceId<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">lastSlice<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name><name pos:line="7" pos:column="25">anchor<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">.<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">start<pos:position pos:line="7" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">lastSlice<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">&gt;=<pos:position pos:line="8" pos:column="27"/></operator> <literal type="number" pos:line="8" pos:column="25">0<pos:position pos:line="8" pos:column="26"/></literal></expr>)<pos:position pos:line="8" pos:column="27"/></condition> <block pos:line="8" pos:column="28">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">Slice<pos:position pos:line="9" pos:column="20"/></name> <modifier pos:line="9" pos:column="21">&amp;<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="22">slice<pos:position pos:line="9" pos:column="27"/></name> <init pos:line="9" pos:column="28">= <expr><call><name pos:line="9" pos:column="30">sliceAt<pos:position pos:line="9" pos:column="37"/></name><argument_list pos:line="9" pos:column="37">(<argument><expr><name pos:line="9" pos:column="38">lastSlice<pos:position pos:line="9" pos:column="47"/></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="49"/></decl_stmt>
        <expr_stmt><expr><name pos:line="10" pos:column="9">bytesSeen<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">+=<pos:position pos:line="10" pos:column="21"/></operator> <name><name pos:line="10" pos:column="22">slice<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">.<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">size<pos:position pos:line="10" pos:column="32"/></name></name></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">bytesSeen<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">&gt;=<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="26">bytesNeeded<pos:position pos:line="11" pos:column="37"/></name></expr>)<pos:position pos:line="11" pos:column="38"/></condition><then pos:line="11" pos:column="38">
            <block type="pseudo"><break pos:line="12" pos:column="13">break;<pos:position pos:line="12" pos:column="19"/></break></block></then></if>
        <expr_stmt><expr><name pos:line="13" pos:column="9">lastSlice<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <name><name pos:line="13" pos:column="21">slice<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">.<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">next<pos:position pos:line="13" pos:column="31"/></name></name></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">debugs<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="number" pos:line="15" pos:column="12">54<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="16">7<pos:position pos:line="15" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="19">"entry "<pos:position pos:line="15" pos:column="27"/></literal> <operator pos:line="15" pos:column="28">&lt;&lt;<pos:position pos:line="15" pos:column="36"/></operator> <name pos:line="15" pos:column="31">fileno<pos:position pos:line="15" pos:column="37"/></name> <operator pos:line="15" pos:column="38">&lt;&lt;<pos:position pos:line="15" pos:column="46"/></operator> <literal type="string" pos:line="15" pos:column="41">" has "<pos:position pos:line="15" pos:column="48"/></literal> <operator pos:line="15" pos:column="49">&lt;&lt;<pos:position pos:line="15" pos:column="57"/></operator> <name pos:line="15" pos:column="52">bytesNeeded<pos:position pos:line="15" pos:column="63"/></name> <operator pos:line="15" pos:column="64">&lt;&lt;<pos:position pos:line="15" pos:column="72"/></operator> <literal type="char" pos:line="15" pos:column="67">'/'<pos:position pos:line="15" pos:column="70"/></literal> <operator pos:line="15" pos:column="71">&lt;&lt;<pos:position pos:line="15" pos:column="79"/></operator> <name pos:line="15" pos:column="74">bytesSeen<pos:position pos:line="15" pos:column="83"/></name> <operator pos:line="15" pos:column="84">&lt;&lt;<pos:position pos:line="15" pos:column="92"/></operator>
           <literal type="string" pos:line="16" pos:column="12">" bytes at slice "<pos:position pos:line="16" pos:column="30"/></literal> <operator pos:line="16" pos:column="31">&lt;&lt;<pos:position pos:line="16" pos:column="39"/></operator> <name pos:line="16" pos:column="34">lastSlice<pos:position pos:line="16" pos:column="43"/></name> <operator pos:line="16" pos:column="44">&lt;&lt;<pos:position pos:line="16" pos:column="52"/></operator> <literal type="string" pos:line="16" pos:column="47">" in "<pos:position pos:line="16" pos:column="53"/></literal> <operator pos:line="16" pos:column="54">&lt;&lt;<pos:position pos:line="16" pos:column="62"/></operator> <name pos:line="16" pos:column="57">path<pos:position pos:line="16" pos:column="61"/></name></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="63"/></expr_stmt>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">lastSlice<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></return> <comment type="line" pos:line="17" pos:column="23">// may be negative</comment>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
