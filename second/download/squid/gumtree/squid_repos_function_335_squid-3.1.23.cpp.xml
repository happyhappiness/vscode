<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_335_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">Read_usersfile<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">path<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">usersfile<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type> <name pos:line="2" pos:column="46">uf<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">FILE<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">fp<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">stat<pos:position pos:line="5" pos:column="16"/></name></name></type> <name pos:line="5" pos:column="17">FileBuf<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">buf<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><literal type="number" pos:line="6" pos:column="14">1024<pos:position pos:line="6" pos:column="18"/></literal></expr>]<pos:position pos:line="6" pos:column="19"/></index></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">free_names<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">uf<pos:position pos:line="8" pos:column="18"/></name></expr></argument>)<pos:position pos:line="8" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="20"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">NULL<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">==<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">path<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">path<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <name><name pos:line="11" pos:column="16">uf<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">path<pos:position pos:line="11" pos:column="24"/></name></name></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then> <else pos:line="12" pos:column="7">else <block pos:line="12" pos:column="12">{
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">uf<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">path<pos:position pos:line="13" pos:column="21"/></name></name></expr>)<pos:position pos:line="13" pos:column="22"/></condition><then pos:line="13" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="13">free<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><name><name pos:line="14" pos:column="18">uf<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-&gt;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="22">path<pos:position pos:line="14" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">uf<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">-&gt;<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="13">path<pos:position pos:line="15" pos:column="17"/></name></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <call><name pos:line="15" pos:column="20">strdup<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">path<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="18" pos:column="5">/* Open the users file. Report any errors. */</comment>
    <expr_stmt><expr><name pos:line="19" pos:column="5">fp<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <call><name pos:line="19" pos:column="10">fopen<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">path<pos:position pos:line="19" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="22">"r"<pos:position pos:line="19" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">NULL<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">==<pos:position pos:line="20" pos:column="16"/></operator> <name pos:line="20" pos:column="17">fp<pos:position pos:line="20" pos:column="19"/></name></expr>)<pos:position pos:line="20" pos:column="20"/></condition><then pos:line="20" pos:column="20"> <block pos:line="20" pos:column="21">{
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">uf<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">-&gt;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="13">LMT<pos:position pos:line="21" pos:column="16"/></name></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="19">0<pos:position pos:line="21" pos:column="20"/></literal></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">errno<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">==<pos:position pos:line="22" pos:column="21"/></operator> <name pos:line="22" pos:column="22">ENOENT<pos:position pos:line="22" pos:column="28"/></name></expr>)<pos:position pos:line="22" pos:column="29"/></condition><then pos:line="22" pos:column="29">
            <block type="pseudo"><return pos:line="23" pos:column="13">return <expr><literal type="number" pos:line="23" pos:column="20">0<pos:position pos:line="23" pos:column="21"/></literal></expr>;<pos:position pos:line="23" pos:column="22"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">syslog<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">LOG_ERR<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="25">"%s: %s"<pos:position pos:line="24" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="35">path<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="24" pos:column="41">strerror<pos:position pos:line="24" pos:column="49"/></name><argument_list pos:line="24" pos:column="49">(<argument><expr><name pos:line="24" pos:column="50">errno<pos:position pos:line="24" pos:column="55"/></name></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="58"/></expr_stmt>
        <return pos:line="25" pos:column="9">return <expr><literal type="number" pos:line="25" pos:column="16">1<pos:position pos:line="25" pos:column="17"/></literal></expr>;<pos:position pos:line="25" pos:column="18"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="27" pos:column="5">/* Stat the file. If it does not exist, save the size as zero.
     * Clear the allowed user string. Return. */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name pos:line="29" pos:column="9">fstat<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><call><name pos:line="29" pos:column="15">fileno<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">fp<pos:position pos:line="29" pos:column="24"/></name></expr></argument>)<pos:position pos:line="29" pos:column="25"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="29" pos:column="27">&amp;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="28">FileBuf<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call> <operator pos:line="29" pos:column="37">&lt;<pos:position pos:line="29" pos:column="41"/></operator> <literal type="number" pos:line="29" pos:column="39">0<pos:position pos:line="29" pos:column="40"/></literal></expr>)<pos:position pos:line="29" pos:column="41"/></condition><then pos:line="29" pos:column="41"> <block pos:line="29" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">syslog<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name pos:line="30" pos:column="16">LOG_ERR<pos:position pos:line="30" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="25">"%s: %s"<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="35">path<pos:position pos:line="30" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="41">strerror<pos:position pos:line="30" pos:column="49"/></name><argument_list pos:line="30" pos:column="49">(<argument><expr><name pos:line="30" pos:column="50">errno<pos:position pos:line="30" pos:column="55"/></name></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="58"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><literal type="number" pos:line="31" pos:column="16">1<pos:position pos:line="31" pos:column="17"/></literal></expr>;<pos:position pos:line="31" pos:column="18"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="33" pos:column="5">/* If it exists, save the modification time and size */</comment>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">uf<pos:position pos:line="34" pos:column="7"/></name><operator pos:line="34" pos:column="7">-&gt;<pos:position pos:line="34" pos:column="12"/></operator><name pos:line="34" pos:column="9">LMT<pos:position pos:line="34" pos:column="12"/></name></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <name><name pos:line="34" pos:column="15">FileBuf<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">.<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">st_mtime<pos:position pos:line="34" pos:column="31"/></name></name></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* Handle the special case of a zero length file */</comment>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name><name pos:line="37" pos:column="9">FileBuf<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">.<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">st_size<pos:position pos:line="37" pos:column="24"/></name></name> <operator pos:line="37" pos:column="25">==<pos:position pos:line="37" pos:column="27"/></operator> <literal type="number" pos:line="37" pos:column="28">0<pos:position pos:line="37" pos:column="29"/></literal></expr>)<pos:position pos:line="37" pos:column="30"/></condition><then pos:line="37" pos:column="30">
        <block type="pseudo"><return pos:line="38" pos:column="9">return <expr><literal type="number" pos:line="38" pos:column="16">0<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="40" pos:column="5">/*
     * Read the file into memory
     * XXX assumes one username per input line
     */</comment>
    <while pos:line="44" pos:column="5">while <condition pos:line="44" pos:column="11">(<expr><call><name pos:line="44" pos:column="12">fgets<pos:position pos:line="44" pos:column="17"/></name><argument_list pos:line="44" pos:column="17">(<argument><expr><name pos:line="44" pos:column="18">buf<pos:position pos:line="44" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="23">1024<pos:position pos:line="44" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="29">fp<pos:position pos:line="44" pos:column="31"/></name></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></call> <operator pos:line="44" pos:column="33">!=<pos:position pos:line="44" pos:column="35"/></operator> <name pos:line="44" pos:column="36">NULL<pos:position pos:line="44" pos:column="40"/></name></expr>)<pos:position pos:line="44" pos:column="41"/></condition> <block pos:line="44" pos:column="42">{
        <comment type="block" pos:line="45" pos:column="9">/* ensure no names longer than our limit */</comment>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">buf<pos:position pos:line="46" pos:column="12"/></name><index pos:line="46" pos:column="12">[<expr><name pos:line="46" pos:column="13">NAMELEN<pos:position pos:line="46" pos:column="20"/></name></expr>]<pos:position pos:line="46" pos:column="21"/></index></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <literal type="char" pos:line="46" pos:column="24">'\0'<pos:position pos:line="46" pos:column="28"/></literal></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
        <comment type="block" pos:line="47" pos:column="9">/* skip bad input lines */</comment>
        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">NULL<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">==<pos:position pos:line="48" pos:column="20"/></operator> <call><name pos:line="48" pos:column="21">strtok<pos:position pos:line="48" pos:column="27"/></name><argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">buf<pos:position pos:line="48" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="33">"\r\n"<pos:position pos:line="48" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="41"/></condition><then pos:line="48" pos:column="41">
            <block type="pseudo"><continue pos:line="49" pos:column="13">continue;<pos:position pos:line="49" pos:column="22"/></continue></block></then></if>
        <comment type="block" pos:line="50" pos:column="9">/* grow the list if necessary */</comment>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><literal type="number" pos:line="51" pos:column="13">0<pos:position pos:line="51" pos:column="14"/></literal> <operator pos:line="51" pos:column="15">==<pos:position pos:line="51" pos:column="17"/></operator> <name><name pos:line="51" pos:column="18">uf<pos:position pos:line="51" pos:column="20"/></name><operator pos:line="51" pos:column="20">-&gt;<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="22">Alloc<pos:position pos:line="51" pos:column="27"/></name></name></expr>)<pos:position pos:line="51" pos:column="28"/></condition><then pos:line="51" pos:column="28"> <block pos:line="51" pos:column="29">{
            <expr_stmt><expr><name><name pos:line="52" pos:column="13">uf<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">-&gt;<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="17">Alloc<pos:position pos:line="52" pos:column="22"/></name></name> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <literal type="number" pos:line="52" pos:column="25">256<pos:position pos:line="52" pos:column="28"/></literal></expr>;<pos:position pos:line="52" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="53" pos:column="13">uf<pos:position pos:line="53" pos:column="15"/></name><operator pos:line="53" pos:column="15">-&gt;<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="17">names<pos:position pos:line="53" pos:column="22"/></name></name> <operator pos:line="53" pos:column="23">=<pos:position pos:line="53" pos:column="24"/></operator> <call><name pos:line="53" pos:column="25">calloc<pos:position pos:line="53" pos:column="31"/></name><argument_list pos:line="53" pos:column="31">(<argument><expr><name><name pos:line="53" pos:column="32">uf<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">Alloc<pos:position pos:line="53" pos:column="41"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="43">sizeof<argument_list pos:line="53" pos:column="49">(<argument><expr><operator pos:line="53" pos:column="50">*<pos:position pos:line="53" pos:column="51"/></operator><name><name pos:line="53" pos:column="51">uf<pos:position pos:line="53" pos:column="53"/></name><operator pos:line="53" pos:column="53">-&gt;<pos:position pos:line="53" pos:column="58"/></operator><name pos:line="53" pos:column="55">names<pos:position pos:line="53" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="63"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></then> <elseif pos:line="54" pos:column="11">else <if pos:line="54" pos:column="16">if <condition pos:line="54" pos:column="19">(<expr><name><name pos:line="54" pos:column="20">uf<pos:position pos:line="54" pos:column="22"/></name><operator pos:line="54" pos:column="22">-&gt;<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="24">Inuse<pos:position pos:line="54" pos:column="29"/></name></name> <operator pos:line="54" pos:column="30">==<pos:position pos:line="54" pos:column="32"/></operator> <name><name pos:line="54" pos:column="33">uf<pos:position pos:line="54" pos:column="35"/></name><operator pos:line="54" pos:column="35">-&gt;<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="37">Alloc<pos:position pos:line="54" pos:column="42"/></name></name></expr>)<pos:position pos:line="54" pos:column="43"/></condition><then pos:line="54" pos:column="43"> <block pos:line="54" pos:column="44">{
            <expr_stmt><expr><name><name pos:line="55" pos:column="13">uf<pos:position pos:line="55" pos:column="15"/></name><operator pos:line="55" pos:column="15">-&gt;<pos:position pos:line="55" pos:column="20"/></operator><name pos:line="55" pos:column="17">Alloc<pos:position pos:line="55" pos:column="22"/></name></name> <operator pos:line="55" pos:column="23">=<pos:position pos:line="55" pos:column="24"/></operator> <name><name pos:line="55" pos:column="25">uf<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">-&gt;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="29">Alloc<pos:position pos:line="55" pos:column="34"/></name></name> <operator pos:line="55" pos:column="35">&lt;&lt;<pos:position pos:line="55" pos:column="43"/></operator> <literal type="number" pos:line="55" pos:column="38">1<pos:position pos:line="55" pos:column="39"/></literal></expr>;<pos:position pos:line="55" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="56" pos:column="13">uf<pos:position pos:line="56" pos:column="15"/></name><operator pos:line="56" pos:column="15">-&gt;<pos:position pos:line="56" pos:column="20"/></operator><name pos:line="56" pos:column="17">names<pos:position pos:line="56" pos:column="22"/></name></name> <operator pos:line="56" pos:column="23">=<pos:position pos:line="56" pos:column="24"/></operator> <call><name pos:line="56" pos:column="25">realloc<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">(<argument><expr><name><name pos:line="56" pos:column="33">uf<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">-&gt;<pos:position pos:line="56" pos:column="40"/></operator><name pos:line="56" pos:column="37">names<pos:position pos:line="56" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="44">uf<pos:position pos:line="56" pos:column="46"/></name><operator pos:line="56" pos:column="46">-&gt;<pos:position pos:line="56" pos:column="51"/></operator><name pos:line="56" pos:column="48">Alloc<pos:position pos:line="56" pos:column="53"/></name></name> <operator pos:line="56" pos:column="54">*<pos:position pos:line="56" pos:column="55"/></operator> <sizeof pos:line="56" pos:column="56">sizeof<argument_list pos:line="56" pos:column="62">(<argument><expr><operator pos:line="56" pos:column="63">*<pos:position pos:line="56" pos:column="64"/></operator><name><name pos:line="56" pos:column="64">uf<pos:position pos:line="56" pos:column="66"/></name><operator pos:line="56" pos:column="66">-&gt;<pos:position pos:line="56" pos:column="71"/></operator><name pos:line="56" pos:column="68">names<pos:position pos:line="56" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="56" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="76"/></expr_stmt>
            <comment type="block" pos:line="57" pos:column="13">/* zero out the newly allocated memory */</comment>
            <expr_stmt><expr><call><name pos:line="58" pos:column="13">memset<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><operator pos:line="58" pos:column="20">&amp;<pos:position pos:line="58" pos:column="25"/></operator><name><name pos:line="58" pos:column="21">uf<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">-&gt;<pos:position pos:line="58" pos:column="28"/></operator><name pos:line="58" pos:column="25">names<pos:position pos:line="58" pos:column="30"/></name><index pos:line="58" pos:column="30">[<expr><name><name pos:line="58" pos:column="31">uf<pos:position pos:line="58" pos:column="33"/></name><operator pos:line="58" pos:column="33">-&gt;<pos:position pos:line="58" pos:column="38"/></operator><name pos:line="58" pos:column="35">Alloc<pos:position pos:line="58" pos:column="40"/></name></name> <operator pos:line="58" pos:column="41">&gt;&gt;<pos:position pos:line="58" pos:column="46"/></operator> <literal type="number" pos:line="58" pos:column="44">1<pos:position pos:line="58" pos:column="45"/></literal></expr>]<pos:position pos:line="58" pos:column="46"/></index></name></expr></argument>,
                   <argument><expr><literal type="char" pos:line="59" pos:column="20">'\0'<pos:position pos:line="59" pos:column="24"/></literal></expr></argument>,
                   <argument><expr><operator pos:line="60" pos:column="20">(<pos:position pos:line="60" pos:column="21"/></operator><name><name pos:line="60" pos:column="21">uf<pos:position pos:line="60" pos:column="23"/></name><operator pos:line="60" pos:column="23">-&gt;<pos:position pos:line="60" pos:column="28"/></operator><name pos:line="60" pos:column="25">Alloc<pos:position pos:line="60" pos:column="30"/></name></name> <operator pos:line="60" pos:column="31">&gt;&gt;<pos:position pos:line="60" pos:column="36"/></operator> <literal type="number" pos:line="60" pos:column="34">1<pos:position pos:line="60" pos:column="35"/></literal><operator pos:line="60" pos:column="35">)<pos:position pos:line="60" pos:column="36"/></operator> <operator pos:line="60" pos:column="37">*<pos:position pos:line="60" pos:column="38"/></operator> <sizeof pos:line="60" pos:column="39">sizeof<argument_list pos:line="60" pos:column="45">(<argument><expr><operator pos:line="60" pos:column="46">*<pos:position pos:line="60" pos:column="47"/></operator><name><name pos:line="60" pos:column="47">uf<pos:position pos:line="60" pos:column="49"/></name><operator pos:line="60" pos:column="49">-&gt;<pos:position pos:line="60" pos:column="54"/></operator><name pos:line="60" pos:column="51">names<pos:position pos:line="60" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="60" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="59"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if></elseif></if>
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">uf<pos:position pos:line="62" pos:column="11"/></name><operator pos:line="62" pos:column="11">-&gt;<pos:position pos:line="62" pos:column="16"/></operator><name pos:line="62" pos:column="13">names<pos:position pos:line="62" pos:column="18"/></name><index pos:line="62" pos:column="18">[<expr><name><name pos:line="62" pos:column="19">uf<pos:position pos:line="62" pos:column="21"/></name><operator pos:line="62" pos:column="21">-&gt;<pos:position pos:line="62" pos:column="26"/></operator><name pos:line="62" pos:column="23">Inuse<pos:position pos:line="62" pos:column="28"/></name></name></expr>]<pos:position pos:line="62" pos:column="29"/></index></name> <operator pos:line="62" pos:column="30">=<pos:position pos:line="62" pos:column="31"/></operator> <call><name pos:line="62" pos:column="32">strdup<pos:position pos:line="62" pos:column="38"/></name><argument_list pos:line="62" pos:column="38">(<argument><expr><name pos:line="62" pos:column="39">buf<pos:position pos:line="62" pos:column="42"/></name></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="63" pos:column="9">uf<pos:position pos:line="63" pos:column="11"/></name><operator pos:line="63" pos:column="11">-&gt;<pos:position pos:line="63" pos:column="16"/></operator><name pos:line="63" pos:column="13">Inuse<pos:position pos:line="63" pos:column="18"/></name></name><operator pos:line="63" pos:column="18">++<pos:position pos:line="63" pos:column="20"/></operator></expr>;<pos:position pos:line="63" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">fclose<pos:position pos:line="65" pos:column="11"/></name><argument_list pos:line="65" pos:column="11">(<argument><expr><name pos:line="65" pos:column="12">fp<pos:position pos:line="65" pos:column="14"/></name></expr></argument>)<pos:position pos:line="65" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="66" pos:column="5">fp<pos:position pos:line="66" pos:column="7"/></name> <operator pos:line="66" pos:column="8">=<pos:position pos:line="66" pos:column="9"/></operator> <name pos:line="66" pos:column="10">NULL<pos:position pos:line="66" pos:column="14"/></name></expr>;<pos:position pos:line="66" pos:column="15"/></expr_stmt>

    <comment type="block" pos:line="68" pos:column="5">/* sort the names for searching */</comment>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">qsort<pos:position pos:line="69" pos:column="10"/></name><argument_list pos:line="69" pos:column="10">(<argument><expr><name><name pos:line="69" pos:column="11">uf<pos:position pos:line="69" pos:column="13"/></name><operator pos:line="69" pos:column="13">-&gt;<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="15">names<pos:position pos:line="69" pos:column="20"/></name></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="22">uf<pos:position pos:line="69" pos:column="24"/></name><operator pos:line="69" pos:column="24">-&gt;<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="26">Inuse<pos:position pos:line="69" pos:column="31"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="33">sizeof<argument_list pos:line="69" pos:column="39">(<argument><expr><operator pos:line="69" pos:column="40">*<pos:position pos:line="69" pos:column="41"/></operator><name><name pos:line="69" pos:column="41">uf<pos:position pos:line="69" pos:column="43"/></name><operator pos:line="69" pos:column="43">-&gt;<pos:position pos:line="69" pos:column="48"/></operator><name pos:line="69" pos:column="45">names<pos:position pos:line="69" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="69" pos:column="53">name_cmp<pos:position pos:line="69" pos:column="61"/></name></expr></argument>)<pos:position pos:line="69" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="63"/></expr_stmt>

    <return pos:line="71" pos:column="5">return <expr><literal type="number" pos:line="71" pos:column="12">0<pos:position pos:line="71" pos:column="13"/></literal></expr>;<pos:position pos:line="71" pos:column="14"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
