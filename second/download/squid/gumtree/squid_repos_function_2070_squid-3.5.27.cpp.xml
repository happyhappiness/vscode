<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2070_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreController<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">allowCollapsing<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">(<parameter><decl><type><name pos:line="2" pos:column="34">StoreEntry<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">e<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name pos:line="2" pos:column="55">RequestFlags<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">&amp;<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="69">reqFlags<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>,
                                 <parameter><decl><type><specifier pos:line="3" pos:column="34">const<pos:position pos:line="3" pos:column="39"/></specifier> <name pos:line="3" pos:column="40">HttpRequestMethod<pos:position pos:line="3" pos:column="57"/></name> <modifier pos:line="3" pos:column="58">&amp;<pos:position pos:line="3" pos:column="63"/></modifier></type><name pos:line="3" pos:column="59">reqMethod<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="69"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">KeyScope<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">keyScope<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><ternary><condition><expr><name><name pos:line="5" pos:column="31">reqFlags<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">.<pos:position pos:line="5" pos:column="40"/></operator><name pos:line="5" pos:column="40">refresh<pos:position pos:line="5" pos:column="47"/></name></name></expr> ?<pos:position pos:line="5" pos:column="49"/></condition><then pos:line="5" pos:column="49"> <expr><name pos:line="5" pos:column="50">ksRevalidation<pos:position pos:line="5" pos:column="64"/></name></expr> <pos:position pos:line="5" pos:column="65"/></then><else pos:line="5" pos:column="65">: <expr><name pos:line="5" pos:column="67">ksDefault<pos:position pos:line="5" pos:column="76"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="5" pos:column="77"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="6" pos:column="5">e<pos:position pos:line="6" pos:column="6"/></name><operator pos:line="6" pos:column="6">-&gt;<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="8">makePublic<pos:position pos:line="6" pos:column="18"/></name></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name pos:line="6" pos:column="19">keyScope<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt> <comment type="line" pos:line="6" pos:column="30">// this is needed for both local and SMP collapsing</comment>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">transients<pos:position pos:line="7" pos:column="19"/></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="8" pos:column="9">transients<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">startWriting<pos:position pos:line="8" pos:column="33"/></name></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">e<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="37">reqFlags<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">reqMethod<pos:position pos:line="8" pos:column="56"/></name></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="58"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">20<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">3<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"may "<pos:position pos:line="9" pos:column="25"/></literal> <operator pos:line="9" pos:column="26">&lt;&lt;<pos:position pos:line="9" pos:column="34"/></operator> <operator pos:line="9" pos:column="29">(<pos:position pos:line="9" pos:column="30"/></operator><ternary><condition><expr><name pos:line="9" pos:column="30">transients<pos:position pos:line="9" pos:column="40"/></name> <operator pos:line="9" pos:column="41">&amp;&amp;<pos:position pos:line="9" pos:column="51"/></operator> <name><name pos:line="9" pos:column="44">e<pos:position pos:line="9" pos:column="45"/></name><operator pos:line="9" pos:column="45">-&gt;<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="47">mem_obj<pos:position pos:line="9" pos:column="54"/></name><operator pos:line="9" pos:column="54">-&gt;<pos:position pos:line="9" pos:column="59"/></operator><name pos:line="9" pos:column="56">xitTable<pos:position pos:line="9" pos:column="64"/></name><operator pos:line="9" pos:column="64">.<pos:position pos:line="9" pos:column="65"/></operator><name pos:line="9" pos:column="65">index<pos:position pos:line="9" pos:column="70"/></name></name> <operator pos:line="9" pos:column="71">&gt;=<pos:position pos:line="9" pos:column="76"/></operator> <literal type="number" pos:line="9" pos:column="74">0<pos:position pos:line="9" pos:column="75"/></literal></expr> ?<pos:position pos:line="9" pos:column="77"/></condition><then pos:line="9" pos:column="77">
                             <expr><literal type="string" pos:line="10" pos:column="30">"SMP-"<pos:position pos:line="10" pos:column="36"/></literal></expr> <pos:position pos:line="10" pos:column="37"/></then><else pos:line="10" pos:column="37">: <expr><literal type="string" pos:line="10" pos:column="39">"locally-"<pos:position pos:line="10" pos:column="49"/></literal></expr></else></ternary><operator pos:line="10" pos:column="49">)<pos:position pos:line="10" pos:column="50"/></operator> <operator pos:line="10" pos:column="51">&lt;&lt;<pos:position pos:line="10" pos:column="59"/></operator> <literal type="string" pos:line="10" pos:column="54">"collapse "<pos:position pos:line="10" pos:column="65"/></literal> <operator pos:line="10" pos:column="66">&lt;&lt;<pos:position pos:line="10" pos:column="74"/></operator> <operator pos:line="10" pos:column="69">*<pos:position pos:line="10" pos:column="70"/></operator><name pos:line="10" pos:column="70">e<pos:position pos:line="10" pos:column="71"/></name></expr></argument>)<pos:position pos:line="10" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="73"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
