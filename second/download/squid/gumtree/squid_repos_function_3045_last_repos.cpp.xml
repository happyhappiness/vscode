<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3045_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">start<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">()<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">BodyProducer<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">::<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="19">start<pos:position pos:line="4" pos:column="24"/></name></name><argument_list pos:line="4" pos:column="24">()<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">HttpControlMsgSink<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">::<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">start<pos:position pos:line="5" pos:column="30"/></name></name><argument_list pos:line="5" pos:column="30">()<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="33"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">port<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">-&gt;<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="15">disable_pmtu_discovery<pos:position pos:line="7" pos:column="37"/></name></name> <operator pos:line="7" pos:column="38">!=<pos:position pos:line="7" pos:column="40"/></operator> <name pos:line="7" pos:column="41">DISABLE_PMTU_OFF<pos:position pos:line="7" pos:column="57"/></name> <operator pos:line="7" pos:column="58">&amp;&amp;<pos:position pos:line="7" pos:column="68"/></operator>
            <operator pos:line="8" pos:column="13">(<pos:position pos:line="8" pos:column="14"/></operator><call><name pos:line="8" pos:column="14">transparent<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">()<pos:position pos:line="8" pos:column="27"/></argument_list></call> <operator pos:line="8" pos:column="28">||<pos:position pos:line="8" pos:column="30"/></operator> <name><name pos:line="8" pos:column="31">port<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">disable_pmtu_discovery<pos:position pos:line="8" pos:column="59"/></name></name> <operator pos:line="8" pos:column="60">==<pos:position pos:line="8" pos:column="62"/></operator> <name pos:line="8" pos:column="63">DISABLE_PMTU_ALWAYS<pos:position pos:line="8" pos:column="82"/></name><operator pos:line="8" pos:column="82">)<pos:position pos:line="8" pos:column="83"/></operator></expr>)<pos:position pos:line="8" pos:column="84"/></condition><then pos:line="8" pos:column="84"> <block pos:line="8" pos:column="85">{
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><call><name pos:line="9" pos:column="5">defined<pos:position pos:line="9" pos:column="12"/></name><argument_list pos:line="9" pos:column="12">(<argument><expr><name pos:line="9" pos:column="13">IP_MTU_DISCOVER<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call> <operator pos:line="9" pos:column="30">&amp;&amp;<pos:position pos:line="9" pos:column="40"/></operator> <call><name pos:line="9" pos:column="33">defined<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><name pos:line="9" pos:column="41">IP_PMTUDISC_DONT<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr></cpp:if>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">i<pos:position pos:line="10" pos:column="14"/></name> <init pos:line="10" pos:column="15">= <expr><name pos:line="10" pos:column="17">IP_PMTUDISC_DONT<pos:position pos:line="10" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="34"/></decl_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><call><name pos:line="11" pos:column="13">setsockopt<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name><name pos:line="11" pos:column="24">clientConnection<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">-&gt;<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="42">fd<pos:position pos:line="11" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="46">SOL_IP<pos:position pos:line="11" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="54">IP_MTU_DISCOVER<pos:position pos:line="11" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="71">&amp;<pos:position pos:line="11" pos:column="76"/></operator><name pos:line="11" pos:column="72">i<pos:position pos:line="11" pos:column="73"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="75">sizeof<argument_list pos:line="11" pos:column="81">(<argument><expr><name pos:line="11" pos:column="82">i<pos:position pos:line="11" pos:column="83"/></name></expr></argument>)<pos:position pos:line="11" pos:column="84"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="85"/></argument_list></call> <operator pos:line="11" pos:column="86">&lt;<pos:position pos:line="11" pos:column="90"/></operator> <literal type="number" pos:line="11" pos:column="88">0<pos:position pos:line="11" pos:column="89"/></literal></expr>)<pos:position pos:line="11" pos:column="90"/></condition><then pos:line="11" pos:column="90"> <block pos:line="11" pos:column="91">{
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">int<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">xerrno<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name pos:line="12" pos:column="26">errno<pos:position pos:line="12" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">debugs<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><literal type="number" pos:line="13" pos:column="20">33<pos:position pos:line="13" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="24">2<pos:position pos:line="13" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="27">"WARNING: Path MTU discovery disabling failed on "<pos:position pos:line="13" pos:column="77"/></literal> <operator pos:line="13" pos:column="78">&lt;&lt;<pos:position pos:line="13" pos:column="86"/></operator> <name pos:line="13" pos:column="81">clientConnection<pos:position pos:line="13" pos:column="97"/></name> <operator pos:line="13" pos:column="98">&lt;&lt;<pos:position pos:line="13" pos:column="106"/></operator> <literal type="string" pos:line="13" pos:column="101">" : "<pos:position pos:line="13" pos:column="106"/></literal> <operator pos:line="13" pos:column="107">&lt;&lt;<pos:position pos:line="13" pos:column="115"/></operator> <call><name pos:line="13" pos:column="110">xstrerr<pos:position pos:line="13" pos:column="117"/></name><argument_list pos:line="13" pos:column="117">(<argument><expr><name pos:line="13" pos:column="118">xerrno<pos:position pos:line="13" pos:column="124"/></name></expr></argument>)<pos:position pos:line="13" pos:column="125"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="126"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="127"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else<pos:position pos:line="15" pos:column="6"/></cpp:directive></cpp:else>
        <decl_stmt><decl><specifier pos:line="16" pos:column="9">static<pos:position pos:line="16" pos:column="15"/></specifier> <type><name pos:line="16" pos:column="16">bool<pos:position pos:line="16" pos:column="20"/></name></type> <name pos:line="16" pos:column="21">reported<pos:position pos:line="16" pos:column="29"/></name> <init pos:line="16" pos:column="30">= <expr><literal type="boolean" pos:line="16" pos:column="32">false<pos:position pos:line="16" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="38"/></decl_stmt>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">reported<pos:position pos:line="18" pos:column="22"/></name></expr>)<pos:position pos:line="18" pos:column="23"/></condition><then pos:line="18" pos:column="23"> <block pos:line="18" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">debugs<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><literal type="number" pos:line="19" pos:column="20">33<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">DBG_IMPORTANT<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="39">"NOTICE: Path MTU discovery disabling is not supported on your platform."<pos:position pos:line="19" pos:column="112"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="114"/></expr_stmt>
            <expr_stmt><expr><name pos:line="20" pos:column="13">reported<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <literal type="boolean" pos:line="20" pos:column="24">true<pos:position pos:line="20" pos:column="28"/></literal></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <typedef pos:line="25" pos:column="5">typedef <type><name><name pos:line="25" pos:column="13">CommCbMemFunT<pos:position pos:line="25" pos:column="26"/></name><argument_list type="generic" pos:line="25" pos:column="26">&lt;<argument><expr><name pos:line="25" pos:column="27">ConnStateData<pos:position pos:line="25" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="42">CommCloseCbParams<pos:position pos:line="25" pos:column="59"/></name></expr></argument>&gt;<pos:position pos:line="25" pos:column="63"/></argument_list></name></type> <name pos:line="25" pos:column="61">Dialer<pos:position pos:line="25" pos:column="67"/></name>;<pos:position pos:line="25" pos:column="68"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="26" pos:column="5">AsyncCall<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">::<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">Pointer<pos:position pos:line="26" pos:column="23"/></name></name></type> <name pos:line="26" pos:column="24">call<pos:position pos:line="26" pos:column="28"/></name> <init pos:line="26" pos:column="29">= <expr><call><name pos:line="26" pos:column="31">JobCallback<pos:position pos:line="26" pos:column="42"/></name><argument_list pos:line="26" pos:column="42">(<argument><expr><literal type="number" pos:line="26" pos:column="43">33<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="47">5<pos:position pos:line="26" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="50">Dialer<pos:position pos:line="26" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="58">this<pos:position pos:line="26" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="64">ConnStateData<pos:position pos:line="26" pos:column="77"/></name><operator pos:line="26" pos:column="77">::<pos:position pos:line="26" pos:column="79"/></operator><name pos:line="26" pos:column="79">connStateClosed<pos:position pos:line="26" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="96"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">comm_add_close_handler<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name><name pos:line="27" pos:column="28">clientConnection<pos:position pos:line="27" pos:column="44"/></name><operator pos:line="27" pos:column="44">-&gt;<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="46">fd<pos:position pos:line="27" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="50">call<pos:position pos:line="27" pos:column="54"/></name></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="56"/></expr_stmt>

    <expr_stmt><expr><name pos:line="29" pos:column="5">needProxyProtocolHeader_<pos:position pos:line="29" pos:column="29"/></name> <operator pos:line="29" pos:column="30">=<pos:position pos:line="29" pos:column="31"/></operator> <name><name pos:line="29" pos:column="32">port<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">-&gt;<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="38">flags<pos:position pos:line="29" pos:column="43"/></name><operator pos:line="29" pos:column="43">.<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="44">proxySurrogate<pos:position pos:line="29" pos:column="58"/></name></name></expr>;<pos:position pos:line="29" pos:column="59"/></expr_stmt>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">needProxyProtocolHeader_<pos:position pos:line="30" pos:column="33"/></name></expr>)<pos:position pos:line="30" pos:column="34"/></condition><then pos:line="30" pos:column="34"> <block pos:line="30" pos:column="35">{
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><call><name pos:line="31" pos:column="14">proxyProtocolValidateClient<pos:position pos:line="31" pos:column="41"/></name><argument_list pos:line="31" pos:column="41">()<pos:position pos:line="31" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="44"/></condition><then pos:line="31" pos:column="44"> <comment type="line" pos:line="31" pos:column="45">// will close the connection on failure</comment>
            <block type="pseudo"><return pos:line="32" pos:column="13">return;<pos:position pos:line="32" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="33" pos:column="6"/></block></then> <else pos:line="33" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">whenClientIpKnown<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">()<pos:position pos:line="34" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt></block></else></if>

}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
