<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1482_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">parse_externalAclHelper<pos:position pos:line="2" pos:column="24"/></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">external_acl<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier><modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type> <name pos:line="2" pos:column="41">list<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">token<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><call><name><name pos:line="4" pos:column="19">ConfigParser<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">::<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="33">NextToken<pos:position pos:line="4" pos:column="42"/></name></name><argument_list pos:line="4" pos:column="42">()<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">token<pos:position pos:line="6" pos:column="15"/></name></expr>)<pos:position pos:line="6" pos:column="16"/></condition><then pos:line="6" pos:column="16"> <block pos:line="6" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">self_destruct<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">()<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">external_acl<pos:position pos:line="11" pos:column="17"/></name> <modifier pos:line="11" pos:column="18">*<pos:position pos:line="11" pos:column="19"/></modifier></type><name pos:line="11" pos:column="19">a<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><operator pos:line="11" pos:column="23">new<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">external_acl<pos:position pos:line="11" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="40"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">a<pos:position pos:line="12" pos:column="6"/></name><operator pos:line="12" pos:column="6">-&gt;<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="8">name<pos:position pos:line="12" pos:column="12"/></name></name> <operator pos:line="12" pos:column="13">=<pos:position pos:line="12" pos:column="14"/></operator> <call><name pos:line="12" pos:column="15">xstrdup<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">token<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>

    <comment type="line" pos:line="14" pos:column="5">// Allow supported %macros inside quoted tokens</comment>
    <expr_stmt><expr><call><name><name pos:line="15" pos:column="5">ConfigParser<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">::<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">EnableMacros<pos:position pos:line="15" pos:column="31"/></name></name><argument_list pos:line="15" pos:column="31">()<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">token<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <call><name><name pos:line="16" pos:column="13">ConfigParser<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">::<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">NextToken<pos:position pos:line="16" pos:column="36"/></name></name><argument_list pos:line="16" pos:column="36">()<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* Parse options */</comment>
    <while pos:line="19" pos:column="5">while <condition pos:line="19" pos:column="11">(<expr><name pos:line="19" pos:column="12">token<pos:position pos:line="19" pos:column="17"/></name></expr>)<pos:position pos:line="19" pos:column="18"/></condition> <block pos:line="19" pos:column="19">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">strncmp<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">token<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="28">"ttl="<pos:position pos:line="20" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="36">4<pos:position pos:line="20" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="38"/></argument_list></call> <operator pos:line="20" pos:column="39">==<pos:position pos:line="20" pos:column="41"/></operator> <literal type="number" pos:line="20" pos:column="42">0<pos:position pos:line="20" pos:column="43"/></literal></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44"> <block pos:line="20" pos:column="45">{
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">a<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">ttl<pos:position pos:line="21" pos:column="19"/></name></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name pos:line="21" pos:column="22">atoi<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name pos:line="21" pos:column="27">token<pos:position pos:line="21" pos:column="32"/></name> <operator pos:line="21" pos:column="33">+<pos:position pos:line="21" pos:column="34"/></operator> <literal type="number" pos:line="21" pos:column="35">4<pos:position pos:line="21" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></then> <elseif pos:line="22" pos:column="11">else <if pos:line="22" pos:column="16">if <condition pos:line="22" pos:column="19">(<expr><call><name pos:line="22" pos:column="20">strncmp<pos:position pos:line="22" pos:column="27"/></name><argument_list pos:line="22" pos:column="27">(<argument><expr><name pos:line="22" pos:column="28">token<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="35">"negative_ttl="<pos:position pos:line="22" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="52">13<pos:position pos:line="22" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="55"/></argument_list></call> <operator pos:line="22" pos:column="56">==<pos:position pos:line="22" pos:column="58"/></operator> <literal type="number" pos:line="22" pos:column="59">0<pos:position pos:line="22" pos:column="60"/></literal></expr>)<pos:position pos:line="22" pos:column="61"/></condition><then pos:line="22" pos:column="61"> <block pos:line="22" pos:column="62">{
            <expr_stmt><expr><name><name pos:line="23" pos:column="13">a<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">negative_ttl<pos:position pos:line="23" pos:column="28"/></name></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <call><name pos:line="23" pos:column="31">atoi<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">token<pos:position pos:line="23" pos:column="41"/></name> <operator pos:line="23" pos:column="42">+<pos:position pos:line="23" pos:column="43"/></operator> <literal type="number" pos:line="23" pos:column="44">13<pos:position pos:line="23" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if></elseif> <elseif pos:line="24" pos:column="11">else <if pos:line="24" pos:column="16">if <condition pos:line="24" pos:column="19">(<expr><call><name pos:line="24" pos:column="20">strncmp<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><name pos:line="24" pos:column="28">token<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="35">"children="<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="48">9<pos:position pos:line="24" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="50"/></argument_list></call> <operator pos:line="24" pos:column="51">==<pos:position pos:line="24" pos:column="53"/></operator> <literal type="number" pos:line="24" pos:column="54">0<pos:position pos:line="24" pos:column="55"/></literal></expr>)<pos:position pos:line="24" pos:column="56"/></condition><then pos:line="24" pos:column="56"> <block pos:line="24" pos:column="57">{
            <expr_stmt><expr><name><name pos:line="25" pos:column="13">a<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">children<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">.<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="25">n_max<pos:position pos:line="25" pos:column="30"/></name></name> <operator pos:line="25" pos:column="31">=<pos:position pos:line="25" pos:column="32"/></operator> <call><name pos:line="25" pos:column="33">atoi<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name pos:line="25" pos:column="38">token<pos:position pos:line="25" pos:column="43"/></name> <operator pos:line="25" pos:column="44">+<pos:position pos:line="25" pos:column="45"/></operator> <literal type="number" pos:line="25" pos:column="46">9<pos:position pos:line="25" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">debugs<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="number" pos:line="26" pos:column="20">0<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="23">DBG_CRITICAL<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="37">"WARNING: external_acl_type option children=N has been deprecated in favor of children-max=N and children-startup=N"<pos:position pos:line="26" pos:column="153"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="154"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="155"/></expr_stmt>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if></elseif> <elseif pos:line="27" pos:column="11">else <if pos:line="27" pos:column="16">if <condition pos:line="27" pos:column="19">(<expr><call><name pos:line="27" pos:column="20">strncmp<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">token<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="35">"children-max="<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="52">13<pos:position pos:line="27" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call> <operator pos:line="27" pos:column="56">==<pos:position pos:line="27" pos:column="58"/></operator> <literal type="number" pos:line="27" pos:column="59">0<pos:position pos:line="27" pos:column="60"/></literal></expr>)<pos:position pos:line="27" pos:column="61"/></condition><then pos:line="27" pos:column="61"> <block pos:line="27" pos:column="62">{
            <expr_stmt><expr><name><name pos:line="28" pos:column="13">a<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">-&gt;<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="16">children<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">.<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">n_max<pos:position pos:line="28" pos:column="30"/></name></name> <operator pos:line="28" pos:column="31">=<pos:position pos:line="28" pos:column="32"/></operator> <call><name pos:line="28" pos:column="33">atoi<pos:position pos:line="28" pos:column="37"/></name><argument_list pos:line="28" pos:column="37">(<argument><expr><name pos:line="28" pos:column="38">token<pos:position pos:line="28" pos:column="43"/></name> <operator pos:line="28" pos:column="44">+<pos:position pos:line="28" pos:column="45"/></operator> <literal type="number" pos:line="28" pos:column="46">13<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if></elseif> <elseif pos:line="29" pos:column="11">else <if pos:line="29" pos:column="16">if <condition pos:line="29" pos:column="19">(<expr><call><name pos:line="29" pos:column="20">strncmp<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">token<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="35">"children-startup="<pos:position pos:line="29" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="56">17<pos:position pos:line="29" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call> <operator pos:line="29" pos:column="60">==<pos:position pos:line="29" pos:column="62"/></operator> <literal type="number" pos:line="29" pos:column="63">0<pos:position pos:line="29" pos:column="64"/></literal></expr>)<pos:position pos:line="29" pos:column="65"/></condition><then pos:line="29" pos:column="65"> <block pos:line="29" pos:column="66">{
            <expr_stmt><expr><name><name pos:line="30" pos:column="13">a<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">-&gt;<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="16">children<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">.<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="25">n_startup<pos:position pos:line="30" pos:column="34"/></name></name> <operator pos:line="30" pos:column="35">=<pos:position pos:line="30" pos:column="36"/></operator> <call><name pos:line="30" pos:column="37">atoi<pos:position pos:line="30" pos:column="41"/></name><argument_list pos:line="30" pos:column="41">(<argument><expr><name pos:line="30" pos:column="42">token<pos:position pos:line="30" pos:column="47"/></name> <operator pos:line="30" pos:column="48">+<pos:position pos:line="30" pos:column="49"/></operator> <literal type="number" pos:line="30" pos:column="50">17<pos:position pos:line="30" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if></elseif> <elseif pos:line="31" pos:column="11">else <if pos:line="31" pos:column="16">if <condition pos:line="31" pos:column="19">(<expr><call><name pos:line="31" pos:column="20">strncmp<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">token<pos:position pos:line="31" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="35">"children-idle="<pos:position pos:line="31" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="53">14<pos:position pos:line="31" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call> <operator pos:line="31" pos:column="57">==<pos:position pos:line="31" pos:column="59"/></operator> <literal type="number" pos:line="31" pos:column="60">0<pos:position pos:line="31" pos:column="61"/></literal></expr>)<pos:position pos:line="31" pos:column="62"/></condition><then pos:line="31" pos:column="62"> <block pos:line="31" pos:column="63">{
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">a<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">children<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">.<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="25">n_idle<pos:position pos:line="32" pos:column="31"/></name></name> <operator pos:line="32" pos:column="32">=<pos:position pos:line="32" pos:column="33"/></operator> <call><name pos:line="32" pos:column="34">atoi<pos:position pos:line="32" pos:column="38"/></name><argument_list pos:line="32" pos:column="38">(<argument><expr><name pos:line="32" pos:column="39">token<pos:position pos:line="32" pos:column="44"/></name> <operator pos:line="32" pos:column="45">+<pos:position pos:line="32" pos:column="46"/></operator> <literal type="number" pos:line="32" pos:column="47">14<pos:position pos:line="32" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if></elseif> <elseif pos:line="33" pos:column="11">else <if pos:line="33" pos:column="16">if <condition pos:line="33" pos:column="19">(<expr><call><name pos:line="33" pos:column="20">strncmp<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">token<pos:position pos:line="33" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="35">"concurrency="<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="51">12<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call> <operator pos:line="33" pos:column="55">==<pos:position pos:line="33" pos:column="57"/></operator> <literal type="number" pos:line="33" pos:column="58">0<pos:position pos:line="33" pos:column="59"/></literal></expr>)<pos:position pos:line="33" pos:column="60"/></condition><then pos:line="33" pos:column="60"> <block pos:line="33" pos:column="61">{
            <expr_stmt><expr><name><name pos:line="34" pos:column="13">a<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">-&gt;<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="16">children<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">.<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="25">concurrency<pos:position pos:line="34" pos:column="36"/></name></name> <operator pos:line="34" pos:column="37">=<pos:position pos:line="34" pos:column="38"/></operator> <call><name pos:line="34" pos:column="39">atoi<pos:position pos:line="34" pos:column="43"/></name><argument_list pos:line="34" pos:column="43">(<argument><expr><name pos:line="34" pos:column="44">token<pos:position pos:line="34" pos:column="49"/></name> <operator pos:line="34" pos:column="50">+<pos:position pos:line="34" pos:column="51"/></operator> <literal type="number" pos:line="34" pos:column="52">12<pos:position pos:line="34" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if></elseif> <elseif pos:line="35" pos:column="11">else <if pos:line="35" pos:column="16">if <condition pos:line="35" pos:column="19">(<expr><call><name pos:line="35" pos:column="20">strncmp<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">token<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="35">"queue-size="<pos:position pos:line="35" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="50">11<pos:position pos:line="35" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></call> <operator pos:line="35" pos:column="54">==<pos:position pos:line="35" pos:column="56"/></operator> <literal type="number" pos:line="35" pos:column="57">0<pos:position pos:line="35" pos:column="58"/></literal></expr>)<pos:position pos:line="35" pos:column="59"/></condition><then pos:line="35" pos:column="59"> <block pos:line="35" pos:column="60">{
            <expr_stmt><expr><name><name pos:line="36" pos:column="13">a<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">-&gt;<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="16">children<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">.<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="25">queue_size<pos:position pos:line="36" pos:column="35"/></name></name> <operator pos:line="36" pos:column="36">=<pos:position pos:line="36" pos:column="37"/></operator> <call><name pos:line="36" pos:column="38">atoi<pos:position pos:line="36" pos:column="42"/></name><argument_list pos:line="36" pos:column="42">(<argument><expr><name pos:line="36" pos:column="43">token<pos:position pos:line="36" pos:column="48"/></name> <operator pos:line="36" pos:column="49">+<pos:position pos:line="36" pos:column="50"/></operator> <literal type="number" pos:line="36" pos:column="51">11<pos:position pos:line="36" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">a<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">-&gt;<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="16">children<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">.<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="25">defaultQueueSize<pos:position pos:line="37" pos:column="41"/></name></name> <operator pos:line="37" pos:column="42">=<pos:position pos:line="37" pos:column="43"/></operator> <literal type="boolean" pos:line="37" pos:column="44">false<pos:position pos:line="37" pos:column="49"/></literal></expr>;<pos:position pos:line="37" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if></elseif> <elseif pos:line="38" pos:column="11">else <if pos:line="38" pos:column="16">if <condition pos:line="38" pos:column="19">(<expr><call><name pos:line="38" pos:column="20">strncmp<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name pos:line="38" pos:column="28">token<pos:position pos:line="38" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="35">"cache="<pos:position pos:line="38" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="45">6<pos:position pos:line="38" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="47"/></argument_list></call> <operator pos:line="38" pos:column="48">==<pos:position pos:line="38" pos:column="50"/></operator> <literal type="number" pos:line="38" pos:column="51">0<pos:position pos:line="38" pos:column="52"/></literal></expr>)<pos:position pos:line="38" pos:column="53"/></condition><then pos:line="38" pos:column="53"> <block pos:line="38" pos:column="54">{
            <expr_stmt><expr><name><name pos:line="39" pos:column="13">a<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">-&gt;<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="16">cache_size<pos:position pos:line="39" pos:column="26"/></name></name> <operator pos:line="39" pos:column="27">=<pos:position pos:line="39" pos:column="28"/></operator> <call><name pos:line="39" pos:column="29">atoi<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">token<pos:position pos:line="39" pos:column="39"/></name> <operator pos:line="39" pos:column="40">+<pos:position pos:line="39" pos:column="41"/></operator> <literal type="number" pos:line="39" pos:column="42">6<pos:position pos:line="39" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></then></if></elseif> <elseif pos:line="40" pos:column="11">else <if pos:line="40" pos:column="16">if <condition pos:line="40" pos:column="19">(<expr><call><name pos:line="40" pos:column="20">strncmp<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">token<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="35">"grace="<pos:position pos:line="40" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="45">6<pos:position pos:line="40" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="47"/></argument_list></call> <operator pos:line="40" pos:column="48">==<pos:position pos:line="40" pos:column="50"/></operator> <literal type="number" pos:line="40" pos:column="51">0<pos:position pos:line="40" pos:column="52"/></literal></expr>)<pos:position pos:line="40" pos:column="53"/></condition><then pos:line="40" pos:column="53"> <block pos:line="40" pos:column="54">{
            <expr_stmt><expr><name><name pos:line="41" pos:column="13">a<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">-&gt;<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="16">grace<pos:position pos:line="41" pos:column="21"/></name></name> <operator pos:line="41" pos:column="22">=<pos:position pos:line="41" pos:column="23"/></operator> <call><name pos:line="41" pos:column="24">atoi<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">token<pos:position pos:line="41" pos:column="34"/></name> <operator pos:line="41" pos:column="35">+<pos:position pos:line="41" pos:column="36"/></operator> <literal type="number" pos:line="41" pos:column="37">6<pos:position pos:line="41" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if></elseif> <elseif pos:line="42" pos:column="11">else <if pos:line="42" pos:column="16">if <condition pos:line="42" pos:column="19">(<expr><call><name pos:line="42" pos:column="20">strcmp<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name pos:line="42" pos:column="27">token<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="34">"protocol=2.5"<pos:position pos:line="42" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call> <operator pos:line="42" pos:column="50">==<pos:position pos:line="42" pos:column="52"/></operator> <literal type="number" pos:line="42" pos:column="53">0<pos:position pos:line="42" pos:column="54"/></literal></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55"> <block pos:line="42" pos:column="56">{
            <expr_stmt><expr><name><name pos:line="43" pos:column="13">a<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">-&gt;<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="16">quote<pos:position pos:line="43" pos:column="21"/></name></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <name><name pos:line="43" pos:column="24">Format<pos:position pos:line="43" pos:column="30"/></name><operator pos:line="43" pos:column="30">::<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="32">LOG_QUOTE_SHELL<pos:position pos:line="43" pos:column="47"/></name></name></expr>;<pos:position pos:line="43" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if></elseif> <elseif pos:line="44" pos:column="11">else <if pos:line="44" pos:column="16">if <condition pos:line="44" pos:column="19">(<expr><call><name pos:line="44" pos:column="20">strcmp<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">token<pos:position pos:line="44" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="34">"protocol=3.0"<pos:position pos:line="44" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call> <operator pos:line="44" pos:column="50">==<pos:position pos:line="44" pos:column="52"/></operator> <literal type="number" pos:line="44" pos:column="53">0<pos:position pos:line="44" pos:column="54"/></literal></expr>)<pos:position pos:line="44" pos:column="55"/></condition><then pos:line="44" pos:column="55"> <block pos:line="44" pos:column="56">{
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">debugs<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><literal type="number" pos:line="45" pos:column="20">3<pos:position pos:line="45" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="23">DBG_PARSE_NOTE<pos:position pos:line="45" pos:column="37"/></name><argument_list pos:line="45" pos:column="37">(<argument><expr><literal type="number" pos:line="45" pos:column="38">2<pos:position pos:line="45" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="42">"WARNING: external_acl_type option protocol=3.0 is deprecated. Remove this from your config."<pos:position pos:line="45" pos:column="135"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="136"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="137"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="46" pos:column="13">a<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">-&gt;<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="16">quote<pos:position pos:line="46" pos:column="21"/></name></name> <operator pos:line="46" pos:column="22">=<pos:position pos:line="46" pos:column="23"/></operator> <name><name pos:line="46" pos:column="24">Format<pos:position pos:line="46" pos:column="30"/></name><operator pos:line="46" pos:column="30">::<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="32">LOG_QUOTE_URL<pos:position pos:line="46" pos:column="45"/></name></name></expr>;<pos:position pos:line="46" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if></elseif> <elseif pos:line="47" pos:column="11">else <if pos:line="47" pos:column="16">if <condition pos:line="47" pos:column="19">(<expr><call><name pos:line="47" pos:column="20">strcmp<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">token<pos:position pos:line="47" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="34">"quote=url"<pos:position pos:line="47" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call> <operator pos:line="47" pos:column="47">==<pos:position pos:line="47" pos:column="49"/></operator> <literal type="number" pos:line="47" pos:column="50">0<pos:position pos:line="47" pos:column="51"/></literal></expr>)<pos:position pos:line="47" pos:column="52"/></condition><then pos:line="47" pos:column="52"> <block pos:line="47" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">debugs<pos:position pos:line="48" pos:column="19"/></name><argument_list pos:line="48" pos:column="19">(<argument><expr><literal type="number" pos:line="48" pos:column="20">3<pos:position pos:line="48" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="23">DBG_PARSE_NOTE<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><literal type="number" pos:line="48" pos:column="38">2<pos:position pos:line="48" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="42">"WARNING: external_acl_type option quote=url is deprecated. Remove this from your config."<pos:position pos:line="48" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="134"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="49" pos:column="13">a<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">-&gt;<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="16">quote<pos:position pos:line="49" pos:column="21"/></name></name> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <name><name pos:line="49" pos:column="24">Format<pos:position pos:line="49" pos:column="30"/></name><operator pos:line="49" pos:column="30">::<pos:position pos:line="49" pos:column="32"/></operator><name pos:line="49" pos:column="32">LOG_QUOTE_URL<pos:position pos:line="49" pos:column="45"/></name></name></expr>;<pos:position pos:line="49" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if></elseif> <elseif pos:line="50" pos:column="11">else <if pos:line="50" pos:column="16">if <condition pos:line="50" pos:column="19">(<expr><call><name pos:line="50" pos:column="20">strcmp<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><name pos:line="50" pos:column="27">token<pos:position pos:line="50" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="34">"quote=shell"<pos:position pos:line="50" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="48"/></argument_list></call> <operator pos:line="50" pos:column="49">==<pos:position pos:line="50" pos:column="51"/></operator> <literal type="number" pos:line="50" pos:column="52">0<pos:position pos:line="50" pos:column="53"/></literal></expr>)<pos:position pos:line="50" pos:column="54"/></condition><then pos:line="50" pos:column="54"> <block pos:line="50" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">debugs<pos:position pos:line="51" pos:column="19"/></name><argument_list pos:line="51" pos:column="19">(<argument><expr><literal type="number" pos:line="51" pos:column="20">3<pos:position pos:line="51" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="23">DBG_PARSE_NOTE<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><literal type="number" pos:line="51" pos:column="38">2<pos:position pos:line="51" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="42">"WARNING: external_acl_type option quote=shell is deprecated. Use protocol=2.5 if still needed."<pos:position pos:line="51" pos:column="138"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="139"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="140"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="52" pos:column="13">a<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">-&gt;<pos:position pos:line="52" pos:column="19"/></operator><name pos:line="52" pos:column="16">quote<pos:position pos:line="52" pos:column="21"/></name></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <name><name pos:line="52" pos:column="24">Format<pos:position pos:line="52" pos:column="30"/></name><operator pos:line="52" pos:column="30">::<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="32">LOG_QUOTE_SHELL<pos:position pos:line="52" pos:column="47"/></name></name></expr>;<pos:position pos:line="52" pos:column="48"/></expr_stmt>

            <comment type="block" pos:line="54" pos:column="13">/* INET6: allow admin to configure some helpers explicitly to
                      bind to IPv4/v6 localhost port. */</comment>
        }<pos:position pos:line="56" pos:column="10"/></block></then></if></elseif> <elseif pos:line="56" pos:column="11">else <if pos:line="56" pos:column="16">if <condition pos:line="56" pos:column="19">(<expr><call><name pos:line="56" pos:column="20">strcmp<pos:position pos:line="56" pos:column="26"/></name><argument_list pos:line="56" pos:column="26">(<argument><expr><name pos:line="56" pos:column="27">token<pos:position pos:line="56" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="34">"ipv4"<pos:position pos:line="56" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="41"/></argument_list></call> <operator pos:line="56" pos:column="42">==<pos:position pos:line="56" pos:column="44"/></operator> <literal type="number" pos:line="56" pos:column="45">0<pos:position pos:line="56" pos:column="46"/></literal></expr>)<pos:position pos:line="56" pos:column="47"/></condition><then pos:line="56" pos:column="47"> <block pos:line="56" pos:column="48">{
            <if pos:line="57" pos:column="13">if <condition pos:line="57" pos:column="16">( <expr><operator pos:line="57" pos:column="18">!<pos:position pos:line="57" pos:column="19"/></operator><call><name><name pos:line="57" pos:column="19">a<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">-&gt;<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="22">local_addr<pos:position pos:line="57" pos:column="32"/></name><operator pos:line="57" pos:column="32">.<pos:position pos:line="57" pos:column="33"/></operator><name pos:line="57" pos:column="33">setIPv4<pos:position pos:line="57" pos:column="40"/></name></name><argument_list pos:line="57" pos:column="40">()<pos:position pos:line="57" pos:column="42"/></argument_list></call></expr> )<pos:position pos:line="57" pos:column="44"/></condition><then pos:line="57" pos:column="44"> <block pos:line="57" pos:column="45">{
                <expr_stmt><expr><call><name pos:line="58" pos:column="17">debugs<pos:position pos:line="58" pos:column="23"/></name><argument_list pos:line="58" pos:column="23">(<argument><expr><literal type="number" pos:line="58" pos:column="24">3<pos:position pos:line="58" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="27">DBG_CRITICAL<pos:position pos:line="58" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="41">"WARNING: Error converting "<pos:position pos:line="58" pos:column="69"/></literal> <operator pos:line="58" pos:column="70">&lt;&lt;<pos:position pos:line="58" pos:column="78"/></operator> <name><name pos:line="58" pos:column="73">a<pos:position pos:line="58" pos:column="74"/></name><operator pos:line="58" pos:column="74">-&gt;<pos:position pos:line="58" pos:column="79"/></operator><name pos:line="58" pos:column="76">local_addr<pos:position pos:line="58" pos:column="86"/></name></name> <operator pos:line="58" pos:column="87">&lt;&lt;<pos:position pos:line="58" pos:column="95"/></operator> <literal type="string" pos:line="58" pos:column="90">" to IPv4 in "<pos:position pos:line="58" pos:column="104"/></literal> <operator pos:line="58" pos:column="105">&lt;&lt;<pos:position pos:line="58" pos:column="113"/></operator> <name><name pos:line="58" pos:column="108">a<pos:position pos:line="58" pos:column="109"/></name><operator pos:line="58" pos:column="109">-&gt;<pos:position pos:line="58" pos:column="114"/></operator><name pos:line="58" pos:column="111">name<pos:position pos:line="58" pos:column="115"/></name></name></expr></argument> )<pos:position pos:line="58" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="118"/></expr_stmt>
            }<pos:position pos:line="59" pos:column="14"/></block></then></if>
        }<pos:position pos:line="60" pos:column="10"/></block></then></if></elseif> <elseif pos:line="60" pos:column="11">else <if pos:line="60" pos:column="16">if <condition pos:line="60" pos:column="19">(<expr><call><name pos:line="60" pos:column="20">strcmp<pos:position pos:line="60" pos:column="26"/></name><argument_list pos:line="60" pos:column="26">(<argument><expr><name pos:line="60" pos:column="27">token<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="34">"ipv6"<pos:position pos:line="60" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="41"/></argument_list></call> <operator pos:line="60" pos:column="42">==<pos:position pos:line="60" pos:column="44"/></operator> <literal type="number" pos:line="60" pos:column="45">0<pos:position pos:line="60" pos:column="46"/></literal></expr>)<pos:position pos:line="60" pos:column="47"/></condition><then pos:line="60" pos:column="47"> <block pos:line="60" pos:column="48">{
            <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><operator pos:line="61" pos:column="17">!<pos:position pos:line="61" pos:column="18"/></operator><name><name pos:line="61" pos:column="18">Ip<pos:position pos:line="61" pos:column="20"/></name><operator pos:line="61" pos:column="20">::<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="22">EnableIpv6<pos:position pos:line="61" pos:column="32"/></name></name></expr>)<pos:position pos:line="61" pos:column="33"/></condition><then pos:line="61" pos:column="33">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="17">debugs<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><literal type="number" pos:line="62" pos:column="24">3<pos:position pos:line="62" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="27">DBG_CRITICAL<pos:position pos:line="62" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="41">"WARNING: --enable-ipv6 required for external ACL helpers to use IPv6: "<pos:position pos:line="62" pos:column="113"/></literal> <operator pos:line="62" pos:column="114">&lt;&lt;<pos:position pos:line="62" pos:column="122"/></operator> <name><name pos:line="62" pos:column="117">a<pos:position pos:line="62" pos:column="118"/></name><operator pos:line="62" pos:column="118">-&gt;<pos:position pos:line="62" pos:column="123"/></operator><name pos:line="62" pos:column="120">name<pos:position pos:line="62" pos:column="124"/></name></name></expr></argument> )<pos:position pos:line="62" pos:column="126"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="127"/></expr_stmt></block></then></if>
            <comment type="line" pos:line="63" pos:column="13">// else nothing to do.</comment>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if></elseif> <else pos:line="64" pos:column="11">else <block pos:line="64" pos:column="16">{
            <break pos:line="65" pos:column="13">break;<pos:position pos:line="65" pos:column="19"/></break>
        }<pos:position pos:line="66" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name pos:line="68" pos:column="9">token<pos:position pos:line="68" pos:column="14"/></name> <operator pos:line="68" pos:column="15">=<pos:position pos:line="68" pos:column="16"/></operator> <call><name><name pos:line="68" pos:column="17">ConfigParser<pos:position pos:line="68" pos:column="29"/></name><operator pos:line="68" pos:column="29">::<pos:position pos:line="68" pos:column="31"/></operator><name pos:line="68" pos:column="31">NextToken<pos:position pos:line="68" pos:column="40"/></name></name><argument_list pos:line="68" pos:column="40">()<pos:position pos:line="68" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="69" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name><name pos:line="70" pos:column="5">ConfigParser<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">::<pos:position pos:line="70" pos:column="19"/></operator><name pos:line="70" pos:column="19">DisableMacros<pos:position pos:line="70" pos:column="32"/></name></name><argument_list pos:line="70" pos:column="32">()<pos:position pos:line="70" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="72" pos:column="5">/* check that child startup value is sane. */</comment>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name><name pos:line="73" pos:column="9">a<pos:position pos:line="73" pos:column="10"/></name><operator pos:line="73" pos:column="10">-&gt;<pos:position pos:line="73" pos:column="15"/></operator><name pos:line="73" pos:column="12">children<pos:position pos:line="73" pos:column="20"/></name><operator pos:line="73" pos:column="20">.<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="21">n_startup<pos:position pos:line="73" pos:column="30"/></name></name> <operator pos:line="73" pos:column="31">&gt;<pos:position pos:line="73" pos:column="35"/></operator> <name><name pos:line="73" pos:column="33">a<pos:position pos:line="73" pos:column="34"/></name><operator pos:line="73" pos:column="34">-&gt;<pos:position pos:line="73" pos:column="39"/></operator><name pos:line="73" pos:column="36">children<pos:position pos:line="73" pos:column="44"/></name><operator pos:line="73" pos:column="44">.<pos:position pos:line="73" pos:column="45"/></operator><name pos:line="73" pos:column="45">n_max<pos:position pos:line="73" pos:column="50"/></name></name></expr>)<pos:position pos:line="73" pos:column="51"/></condition><then pos:line="73" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="74" pos:column="9">a<pos:position pos:line="74" pos:column="10"/></name><operator pos:line="74" pos:column="10">-&gt;<pos:position pos:line="74" pos:column="15"/></operator><name pos:line="74" pos:column="12">children<pos:position pos:line="74" pos:column="20"/></name><operator pos:line="74" pos:column="20">.<pos:position pos:line="74" pos:column="21"/></operator><name pos:line="74" pos:column="21">n_startup<pos:position pos:line="74" pos:column="30"/></name></name> <operator pos:line="74" pos:column="31">=<pos:position pos:line="74" pos:column="32"/></operator> <name><name pos:line="74" pos:column="33">a<pos:position pos:line="74" pos:column="34"/></name><operator pos:line="74" pos:column="34">-&gt;<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="36">children<pos:position pos:line="74" pos:column="44"/></name><operator pos:line="74" pos:column="44">.<pos:position pos:line="74" pos:column="45"/></operator><name pos:line="74" pos:column="45">n_max<pos:position pos:line="74" pos:column="50"/></name></name></expr>;<pos:position pos:line="74" pos:column="51"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="76" pos:column="5">/* check that child idle value is sane. */</comment>
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><name><name pos:line="77" pos:column="9">a<pos:position pos:line="77" pos:column="10"/></name><operator pos:line="77" pos:column="10">-&gt;<pos:position pos:line="77" pos:column="15"/></operator><name pos:line="77" pos:column="12">children<pos:position pos:line="77" pos:column="20"/></name><operator pos:line="77" pos:column="20">.<pos:position pos:line="77" pos:column="21"/></operator><name pos:line="77" pos:column="21">n_idle<pos:position pos:line="77" pos:column="27"/></name></name> <operator pos:line="77" pos:column="28">&gt;<pos:position pos:line="77" pos:column="32"/></operator> <name><name pos:line="77" pos:column="30">a<pos:position pos:line="77" pos:column="31"/></name><operator pos:line="77" pos:column="31">-&gt;<pos:position pos:line="77" pos:column="36"/></operator><name pos:line="77" pos:column="33">children<pos:position pos:line="77" pos:column="41"/></name><operator pos:line="77" pos:column="41">.<pos:position pos:line="77" pos:column="42"/></operator><name pos:line="77" pos:column="42">n_max<pos:position pos:line="77" pos:column="47"/></name></name></expr>)<pos:position pos:line="77" pos:column="48"/></condition><then pos:line="77" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="78" pos:column="9">a<pos:position pos:line="78" pos:column="10"/></name><operator pos:line="78" pos:column="10">-&gt;<pos:position pos:line="78" pos:column="15"/></operator><name pos:line="78" pos:column="12">children<pos:position pos:line="78" pos:column="20"/></name><operator pos:line="78" pos:column="20">.<pos:position pos:line="78" pos:column="21"/></operator><name pos:line="78" pos:column="21">n_idle<pos:position pos:line="78" pos:column="27"/></name></name> <operator pos:line="78" pos:column="28">=<pos:position pos:line="78" pos:column="29"/></operator> <name><name pos:line="78" pos:column="30">a<pos:position pos:line="78" pos:column="31"/></name><operator pos:line="78" pos:column="31">-&gt;<pos:position pos:line="78" pos:column="36"/></operator><name pos:line="78" pos:column="33">children<pos:position pos:line="78" pos:column="41"/></name><operator pos:line="78" pos:column="41">.<pos:position pos:line="78" pos:column="42"/></operator><name pos:line="78" pos:column="42">n_max<pos:position pos:line="78" pos:column="47"/></name></name></expr>;<pos:position pos:line="78" pos:column="48"/></expr_stmt></block></then></if>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name><name pos:line="79" pos:column="9">a<pos:position pos:line="79" pos:column="10"/></name><operator pos:line="79" pos:column="10">-&gt;<pos:position pos:line="79" pos:column="15"/></operator><name pos:line="79" pos:column="12">children<pos:position pos:line="79" pos:column="20"/></name><operator pos:line="79" pos:column="20">.<pos:position pos:line="79" pos:column="21"/></operator><name pos:line="79" pos:column="21">n_idle<pos:position pos:line="79" pos:column="27"/></name></name> <operator pos:line="79" pos:column="28">&lt;<pos:position pos:line="79" pos:column="32"/></operator> <literal type="number" pos:line="79" pos:column="30">1<pos:position pos:line="79" pos:column="31"/></literal></expr>)<pos:position pos:line="79" pos:column="32"/></condition><then pos:line="79" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="80" pos:column="9">a<pos:position pos:line="80" pos:column="10"/></name><operator pos:line="80" pos:column="10">-&gt;<pos:position pos:line="80" pos:column="15"/></operator><name pos:line="80" pos:column="12">children<pos:position pos:line="80" pos:column="20"/></name><operator pos:line="80" pos:column="20">.<pos:position pos:line="80" pos:column="21"/></operator><name pos:line="80" pos:column="21">n_idle<pos:position pos:line="80" pos:column="27"/></name></name> <operator pos:line="80" pos:column="28">=<pos:position pos:line="80" pos:column="29"/></operator> <literal type="number" pos:line="80" pos:column="30">1<pos:position pos:line="80" pos:column="31"/></literal></expr>;<pos:position pos:line="80" pos:column="32"/></expr_stmt></block></then></if>

    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><name><name pos:line="82" pos:column="9">a<pos:position pos:line="82" pos:column="10"/></name><operator pos:line="82" pos:column="10">-&gt;<pos:position pos:line="82" pos:column="15"/></operator><name pos:line="82" pos:column="12">negative_ttl<pos:position pos:line="82" pos:column="24"/></name></name> <operator pos:line="82" pos:column="25">==<pos:position pos:line="82" pos:column="27"/></operator> <operator pos:line="82" pos:column="28">-<pos:position pos:line="82" pos:column="29"/></operator><literal type="number" pos:line="82" pos:column="29">1<pos:position pos:line="82" pos:column="30"/></literal></expr>)<pos:position pos:line="82" pos:column="31"/></condition><then pos:line="82" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="83" pos:column="9">a<pos:position pos:line="83" pos:column="10"/></name><operator pos:line="83" pos:column="10">-&gt;<pos:position pos:line="83" pos:column="15"/></operator><name pos:line="83" pos:column="12">negative_ttl<pos:position pos:line="83" pos:column="24"/></name></name> <operator pos:line="83" pos:column="25">=<pos:position pos:line="83" pos:column="26"/></operator> <name><name pos:line="83" pos:column="27">a<pos:position pos:line="83" pos:column="28"/></name><operator pos:line="83" pos:column="28">-&gt;<pos:position pos:line="83" pos:column="33"/></operator><name pos:line="83" pos:column="30">ttl<pos:position pos:line="83" pos:column="33"/></name></name></expr>;<pos:position pos:line="83" pos:column="34"/></expr_stmt></block></then></if>

    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name><name pos:line="85" pos:column="9">a<pos:position pos:line="85" pos:column="10"/></name><operator pos:line="85" pos:column="10">-&gt;<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="12">children<pos:position pos:line="85" pos:column="20"/></name><operator pos:line="85" pos:column="20">.<pos:position pos:line="85" pos:column="21"/></operator><name pos:line="85" pos:column="21">defaultQueueSize<pos:position pos:line="85" pos:column="37"/></name></name></expr>)<pos:position pos:line="85" pos:column="38"/></condition><then pos:line="85" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="86" pos:column="9">a<pos:position pos:line="86" pos:column="10"/></name><operator pos:line="86" pos:column="10">-&gt;<pos:position pos:line="86" pos:column="15"/></operator><name pos:line="86" pos:column="12">children<pos:position pos:line="86" pos:column="20"/></name><operator pos:line="86" pos:column="20">.<pos:position pos:line="86" pos:column="21"/></operator><name pos:line="86" pos:column="21">queue_size<pos:position pos:line="86" pos:column="31"/></name></name> <operator pos:line="86" pos:column="32">=<pos:position pos:line="86" pos:column="33"/></operator> <literal type="number" pos:line="86" pos:column="34">2<pos:position pos:line="86" pos:column="35"/></literal> <operator pos:line="86" pos:column="36">*<pos:position pos:line="86" pos:column="37"/></operator> <name><name pos:line="86" pos:column="38">a<pos:position pos:line="86" pos:column="39"/></name><operator pos:line="86" pos:column="39">-&gt;<pos:position pos:line="86" pos:column="44"/></operator><name pos:line="86" pos:column="41">children<pos:position pos:line="86" pos:column="49"/></name><operator pos:line="86" pos:column="49">.<pos:position pos:line="86" pos:column="50"/></operator><name pos:line="86" pos:column="50">n_max<pos:position pos:line="86" pos:column="55"/></name></name></expr>;<pos:position pos:line="86" pos:column="56"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="88" pos:column="5">/* Legacy external_acl_type format parser.
     * Handles a series of %... tokens where any non-% means
     * the start of another parameter field (ie the path to binary).
     */</comment>
    <decl_stmt><decl><type><name><name pos:line="92" pos:column="5">enum<pos:position pos:line="92" pos:column="9"/></name> <name pos:line="92" pos:column="10">Format<pos:position pos:line="92" pos:column="16"/></name><operator pos:line="92" pos:column="16">::<pos:position pos:line="92" pos:column="18"/></operator><name pos:line="92" pos:column="18">Quoting<pos:position pos:line="92" pos:column="25"/></name></name></type> <name pos:line="92" pos:column="26">quote<pos:position pos:line="92" pos:column="31"/></name> <init pos:line="92" pos:column="32">= <expr><name><name pos:line="92" pos:column="34">Format<pos:position pos:line="92" pos:column="40"/></name><operator pos:line="92" pos:column="40">::<pos:position pos:line="92" pos:column="42"/></operator><name pos:line="92" pos:column="42">LOG_QUOTE_NONE<pos:position pos:line="92" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="92" pos:column="57"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="93" pos:column="5">Format<pos:position pos:line="93" pos:column="11"/></name><operator pos:line="93" pos:column="11">::<pos:position pos:line="93" pos:column="13"/></operator><name pos:line="93" pos:column="13">Token<pos:position pos:line="93" pos:column="18"/></name></name> <modifier pos:line="93" pos:column="19">*<pos:position pos:line="93" pos:column="20"/></modifier><modifier pos:line="93" pos:column="20">*<pos:position pos:line="93" pos:column="21"/></modifier></type><name pos:line="93" pos:column="21">fmt<pos:position pos:line="93" pos:column="24"/></name> <init pos:line="93" pos:column="25">= <expr><operator pos:line="93" pos:column="27">&amp;<pos:position pos:line="93" pos:column="32"/></operator><name><name pos:line="93" pos:column="28">a<pos:position pos:line="93" pos:column="29"/></name><operator pos:line="93" pos:column="29">-&gt;<pos:position pos:line="93" pos:column="34"/></operator><name pos:line="93" pos:column="31">format<pos:position pos:line="93" pos:column="37"/></name><operator pos:line="93" pos:column="37">.<pos:position pos:line="93" pos:column="38"/></operator><name pos:line="93" pos:column="38">format<pos:position pos:line="93" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="93" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="94" pos:column="5">bool<pos:position pos:line="94" pos:column="9"/></name></type> <name pos:line="94" pos:column="10">data_used<pos:position pos:line="94" pos:column="19"/></name> <init pos:line="94" pos:column="20">= <expr><literal type="boolean" pos:line="94" pos:column="22">false<pos:position pos:line="94" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="94" pos:column="28"/></decl_stmt>
    <while pos:line="95" pos:column="5">while <condition pos:line="95" pos:column="11">(<expr><name pos:line="95" pos:column="12">token<pos:position pos:line="95" pos:column="17"/></name></expr>)<pos:position pos:line="95" pos:column="18"/></condition> <block pos:line="95" pos:column="19">{
        <comment type="block" pos:line="96" pos:column="9">/* stop on first non-% token found */</comment>
        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><operator pos:line="97" pos:column="13">*<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="14">token<pos:position pos:line="97" pos:column="19"/></name> <operator pos:line="97" pos:column="20">!=<pos:position pos:line="97" pos:column="22"/></operator> <literal type="char" pos:line="97" pos:column="23">'%'<pos:position pos:line="97" pos:column="26"/></literal></expr>)<pos:position pos:line="97" pos:column="27"/></condition><then pos:line="97" pos:column="27">
            <block type="pseudo"><break pos:line="98" pos:column="13">break;<pos:position pos:line="98" pos:column="19"/></break></block></then></if>

        <expr_stmt><expr><operator pos:line="100" pos:column="9">*<pos:position pos:line="100" pos:column="10"/></operator><name pos:line="100" pos:column="10">fmt<pos:position pos:line="100" pos:column="13"/></name> <operator pos:line="100" pos:column="14">=<pos:position pos:line="100" pos:column="15"/></operator> <operator pos:line="100" pos:column="16">new<pos:position pos:line="100" pos:column="19"/></operator> <name><name pos:line="100" pos:column="20">Format<pos:position pos:line="100" pos:column="26"/></name><operator pos:line="100" pos:column="26">::<pos:position pos:line="100" pos:column="28"/></operator><name pos:line="100" pos:column="28">Token<pos:position pos:line="100" pos:column="33"/></name></name></expr>;<pos:position pos:line="100" pos:column="34"/></expr_stmt>
        <comment type="line" pos:line="101" pos:column="9">// these tokens are whitespace delimited</comment>
        <expr_stmt><expr><name><operator pos:line="102" pos:column="9">(<pos:position pos:line="102" pos:column="10"/></operator><operator pos:line="102" pos:column="10">*<pos:position pos:line="102" pos:column="11"/></operator><name pos:line="102" pos:column="11">fmt<pos:position pos:line="102" pos:column="14"/></name><operator pos:line="102" pos:column="14">)<pos:position pos:line="102" pos:column="15"/></operator><operator pos:line="102" pos:column="15">-&gt;<pos:position pos:line="102" pos:column="20"/></operator><name pos:line="102" pos:column="17">space<pos:position pos:line="102" pos:column="22"/></name></name> <operator pos:line="102" pos:column="23">=<pos:position pos:line="102" pos:column="24"/></operator> <literal type="boolean" pos:line="102" pos:column="25">true<pos:position pos:line="102" pos:column="29"/></literal></expr>;<pos:position pos:line="102" pos:column="30"/></expr_stmt>

        <comment type="line" pos:line="104" pos:column="9">// set the default encoding to match the protocol= config</comment>
        <comment type="line" pos:line="105" pos:column="9">// this will be overridden by explicit %macro attributes</comment>
        <expr_stmt><expr><name><operator pos:line="106" pos:column="9">(<pos:position pos:line="106" pos:column="10"/></operator><operator pos:line="106" pos:column="10">*<pos:position pos:line="106" pos:column="11"/></operator><name pos:line="106" pos:column="11">fmt<pos:position pos:line="106" pos:column="14"/></name><operator pos:line="106" pos:column="14">)<pos:position pos:line="106" pos:column="15"/></operator><operator pos:line="106" pos:column="15">-&gt;<pos:position pos:line="106" pos:column="20"/></operator><name pos:line="106" pos:column="17">quote<pos:position pos:line="106" pos:column="22"/></name></name> <operator pos:line="106" pos:column="23">=<pos:position pos:line="106" pos:column="24"/></operator> <name><name pos:line="106" pos:column="25">a<pos:position pos:line="106" pos:column="26"/></name><operator pos:line="106" pos:column="26">-&gt;<pos:position pos:line="106" pos:column="31"/></operator><name pos:line="106" pos:column="28">quote<pos:position pos:line="106" pos:column="33"/></name></name></expr>;<pos:position pos:line="106" pos:column="34"/></expr_stmt>

        <comment type="line" pos:line="108" pos:column="9">// compatibility for old tokens incompatible with Format::Token syntax</comment>
<cpp:if pos:line="109" pos:column="1">#<cpp:directive pos:line="109" pos:column="2">if<pos:position pos:line="109" pos:column="4"/></cpp:directive> <expr><name pos:line="109" pos:column="5">USE_OPENSSL<pos:position pos:line="109" pos:column="16"/></name></expr></cpp:if> <comment type="line" pos:line="109" pos:column="17">// dont bother if we dont have to.</comment>
        <if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><call><name pos:line="110" pos:column="13">strncmp<pos:position pos:line="110" pos:column="20"/></name><argument_list pos:line="110" pos:column="20">(<argument><expr><name pos:line="110" pos:column="21">token<pos:position pos:line="110" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="28">"%USER_CERT_"<pos:position pos:line="110" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="43">11<pos:position pos:line="110" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="46"/></argument_list></call> <operator pos:line="110" pos:column="47">==<pos:position pos:line="110" pos:column="49"/></operator> <literal type="number" pos:line="110" pos:column="50">0<pos:position pos:line="110" pos:column="51"/></literal></expr>)<pos:position pos:line="110" pos:column="52"/></condition><then pos:line="110" pos:column="52"> <block pos:line="110" pos:column="53">{
            <expr_stmt><expr><name><operator pos:line="111" pos:column="13">(<pos:position pos:line="111" pos:column="14"/></operator><operator pos:line="111" pos:column="14">*<pos:position pos:line="111" pos:column="15"/></operator><name pos:line="111" pos:column="15">fmt<pos:position pos:line="111" pos:column="18"/></name><operator pos:line="111" pos:column="18">)<pos:position pos:line="111" pos:column="19"/></operator><operator pos:line="111" pos:column="19">-&gt;<pos:position pos:line="111" pos:column="24"/></operator><name pos:line="111" pos:column="21">type<pos:position pos:line="111" pos:column="25"/></name></name> <operator pos:line="111" pos:column="26">=<pos:position pos:line="111" pos:column="27"/></operator> <name><name pos:line="111" pos:column="28">Format<pos:position pos:line="111" pos:column="34"/></name><operator pos:line="111" pos:column="34">::<pos:position pos:line="111" pos:column="36"/></operator><name pos:line="111" pos:column="36">LFT_EXT_ACL_USER_CERT<pos:position pos:line="111" pos:column="57"/></name></name></expr>;<pos:position pos:line="111" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><name><operator pos:line="112" pos:column="13">(<pos:position pos:line="112" pos:column="14"/></operator><operator pos:line="112" pos:column="14">*<pos:position pos:line="112" pos:column="15"/></operator><name pos:line="112" pos:column="15">fmt<pos:position pos:line="112" pos:column="18"/></name><operator pos:line="112" pos:column="18">)<pos:position pos:line="112" pos:column="19"/></operator><operator pos:line="112" pos:column="19">-&gt;<pos:position pos:line="112" pos:column="24"/></operator><name><name pos:line="112" pos:column="21">data<pos:position pos:line="112" pos:column="25"/></name><operator pos:line="112" pos:column="25">.<pos:position pos:line="112" pos:column="26"/></operator><name pos:line="112" pos:column="26">string<pos:position pos:line="112" pos:column="32"/></name></name></name> <operator pos:line="112" pos:column="33">=<pos:position pos:line="112" pos:column="34"/></operator> <call><name pos:line="112" pos:column="35">xstrdup<pos:position pos:line="112" pos:column="42"/></name><argument_list pos:line="112" pos:column="42">(<argument><expr><name pos:line="112" pos:column="43">token<pos:position pos:line="112" pos:column="48"/></name> <operator pos:line="112" pos:column="49">+<pos:position pos:line="112" pos:column="50"/></operator> <literal type="number" pos:line="112" pos:column="51">11<pos:position pos:line="112" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><name><operator pos:line="113" pos:column="13">(<pos:position pos:line="113" pos:column="14"/></operator><operator pos:line="113" pos:column="14">*<pos:position pos:line="113" pos:column="15"/></operator><name pos:line="113" pos:column="15">fmt<pos:position pos:line="113" pos:column="18"/></name><operator pos:line="113" pos:column="18">)<pos:position pos:line="113" pos:column="19"/></operator><operator pos:line="113" pos:column="19">-&gt;<pos:position pos:line="113" pos:column="24"/></operator><name><name pos:line="113" pos:column="21">data<pos:position pos:line="113" pos:column="25"/></name><operator pos:line="113" pos:column="25">.<pos:position pos:line="113" pos:column="26"/></operator><name pos:line="113" pos:column="26">header<pos:position pos:line="113" pos:column="32"/></name><operator pos:line="113" pos:column="32">.<pos:position pos:line="113" pos:column="33"/></operator><name pos:line="113" pos:column="33">header<pos:position pos:line="113" pos:column="39"/></name></name></name> <operator pos:line="113" pos:column="40">=<pos:position pos:line="113" pos:column="41"/></operator> <name><operator pos:line="113" pos:column="42">(<pos:position pos:line="113" pos:column="43"/></operator><operator pos:line="113" pos:column="43">*<pos:position pos:line="113" pos:column="44"/></operator><name pos:line="113" pos:column="44">fmt<pos:position pos:line="113" pos:column="47"/></name><operator pos:line="113" pos:column="47">)<pos:position pos:line="113" pos:column="48"/></operator><operator pos:line="113" pos:column="48">-&gt;<pos:position pos:line="113" pos:column="53"/></operator><name><name pos:line="113" pos:column="50">data<pos:position pos:line="113" pos:column="54"/></name><operator pos:line="113" pos:column="54">.<pos:position pos:line="113" pos:column="55"/></operator><name pos:line="113" pos:column="55">string<pos:position pos:line="113" pos:column="61"/></name></name></name></expr>;<pos:position pos:line="113" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="114" pos:column="10"/></block></then> <elseif pos:line="114" pos:column="11">else <if pos:line="114" pos:column="16">if <condition pos:line="114" pos:column="19">(<expr><call><name pos:line="114" pos:column="20">strncmp<pos:position pos:line="114" pos:column="27"/></name><argument_list pos:line="114" pos:column="27">(<argument><expr><name pos:line="114" pos:column="28">token<pos:position pos:line="114" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="35">"%USER_CA_CERT_"<pos:position pos:line="114" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="114" pos:column="53">14<pos:position pos:line="114" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="56"/></argument_list></call> <operator pos:line="114" pos:column="57">==<pos:position pos:line="114" pos:column="59"/></operator> <literal type="number" pos:line="114" pos:column="60">0<pos:position pos:line="114" pos:column="61"/></literal></expr>)<pos:position pos:line="114" pos:column="62"/></condition><then pos:line="114" pos:column="62"> <block pos:line="114" pos:column="63">{
            <expr_stmt><expr><name><operator pos:line="115" pos:column="13">(<pos:position pos:line="115" pos:column="14"/></operator><operator pos:line="115" pos:column="14">*<pos:position pos:line="115" pos:column="15"/></operator><name pos:line="115" pos:column="15">fmt<pos:position pos:line="115" pos:column="18"/></name><operator pos:line="115" pos:column="18">)<pos:position pos:line="115" pos:column="19"/></operator><operator pos:line="115" pos:column="19">-&gt;<pos:position pos:line="115" pos:column="24"/></operator><name pos:line="115" pos:column="21">type<pos:position pos:line="115" pos:column="25"/></name></name> <operator pos:line="115" pos:column="26">=<pos:position pos:line="115" pos:column="27"/></operator> <name><name pos:line="115" pos:column="28">Format<pos:position pos:line="115" pos:column="34"/></name><operator pos:line="115" pos:column="34">::<pos:position pos:line="115" pos:column="36"/></operator><name pos:line="115" pos:column="36">LFT_EXT_ACL_USER_CA_CERT<pos:position pos:line="115" pos:column="60"/></name></name></expr>;<pos:position pos:line="115" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><name><operator pos:line="116" pos:column="13">(<pos:position pos:line="116" pos:column="14"/></operator><operator pos:line="116" pos:column="14">*<pos:position pos:line="116" pos:column="15"/></operator><name pos:line="116" pos:column="15">fmt<pos:position pos:line="116" pos:column="18"/></name><operator pos:line="116" pos:column="18">)<pos:position pos:line="116" pos:column="19"/></operator><operator pos:line="116" pos:column="19">-&gt;<pos:position pos:line="116" pos:column="24"/></operator><name><name pos:line="116" pos:column="21">data<pos:position pos:line="116" pos:column="25"/></name><operator pos:line="116" pos:column="25">.<pos:position pos:line="116" pos:column="26"/></operator><name pos:line="116" pos:column="26">string<pos:position pos:line="116" pos:column="32"/></name></name></name> <operator pos:line="116" pos:column="33">=<pos:position pos:line="116" pos:column="34"/></operator> <call><name pos:line="116" pos:column="35">xstrdup<pos:position pos:line="116" pos:column="42"/></name><argument_list pos:line="116" pos:column="42">(<argument><expr><name pos:line="116" pos:column="43">token<pos:position pos:line="116" pos:column="48"/></name> <operator pos:line="116" pos:column="49">+<pos:position pos:line="116" pos:column="50"/></operator> <literal type="number" pos:line="116" pos:column="51">14<pos:position pos:line="116" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><name><operator pos:line="117" pos:column="13">(<pos:position pos:line="117" pos:column="14"/></operator><operator pos:line="117" pos:column="14">*<pos:position pos:line="117" pos:column="15"/></operator><name pos:line="117" pos:column="15">fmt<pos:position pos:line="117" pos:column="18"/></name><operator pos:line="117" pos:column="18">)<pos:position pos:line="117" pos:column="19"/></operator><operator pos:line="117" pos:column="19">-&gt;<pos:position pos:line="117" pos:column="24"/></operator><name><name pos:line="117" pos:column="21">data<pos:position pos:line="117" pos:column="25"/></name><operator pos:line="117" pos:column="25">.<pos:position pos:line="117" pos:column="26"/></operator><name pos:line="117" pos:column="26">header<pos:position pos:line="117" pos:column="32"/></name><operator pos:line="117" pos:column="32">.<pos:position pos:line="117" pos:column="33"/></operator><name pos:line="117" pos:column="33">header<pos:position pos:line="117" pos:column="39"/></name></name></name> <operator pos:line="117" pos:column="40">=<pos:position pos:line="117" pos:column="41"/></operator> <name><operator pos:line="117" pos:column="42">(<pos:position pos:line="117" pos:column="43"/></operator><operator pos:line="117" pos:column="43">*<pos:position pos:line="117" pos:column="44"/></operator><name pos:line="117" pos:column="44">fmt<pos:position pos:line="117" pos:column="47"/></name><operator pos:line="117" pos:column="47">)<pos:position pos:line="117" pos:column="48"/></operator><operator pos:line="117" pos:column="48">-&gt;<pos:position pos:line="117" pos:column="53"/></operator><name><name pos:line="117" pos:column="50">data<pos:position pos:line="117" pos:column="54"/></name><operator pos:line="117" pos:column="54">.<pos:position pos:line="117" pos:column="55"/></operator><name pos:line="117" pos:column="55">string<pos:position pos:line="117" pos:column="61"/></name></name></name></expr>;<pos:position pos:line="117" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="118" pos:column="10"/></block></then></if></elseif> <elseif pos:line="118" pos:column="11">else <if pos:line="118" pos:column="16">if <condition pos:line="118" pos:column="19">(<expr><call><name pos:line="118" pos:column="20">strncmp<pos:position pos:line="118" pos:column="27"/></name><argument_list pos:line="118" pos:column="27">(<argument><expr><name pos:line="118" pos:column="28">token<pos:position pos:line="118" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="35">"%CA_CERT_"<pos:position pos:line="118" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="118" pos:column="48">9<pos:position pos:line="118" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="50"/></argument_list></call> <operator pos:line="118" pos:column="51">==<pos:position pos:line="118" pos:column="53"/></operator> <literal type="number" pos:line="118" pos:column="54">0<pos:position pos:line="118" pos:column="55"/></literal></expr>)<pos:position pos:line="118" pos:column="56"/></condition><then pos:line="118" pos:column="56"> <block pos:line="118" pos:column="57">{
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">debugs<pos:position pos:line="119" pos:column="19"/></name><argument_list pos:line="119" pos:column="19">(<argument><expr><literal type="number" pos:line="119" pos:column="20">82<pos:position pos:line="119" pos:column="22"/></literal></expr></argument>, <argument><expr><call><name pos:line="119" pos:column="24">DBG_PARSE_NOTE<pos:position pos:line="119" pos:column="38"/></name><argument_list pos:line="119" pos:column="38">(<argument><expr><name pos:line="119" pos:column="39">DBG_IMPORTANT<pos:position pos:line="119" pos:column="52"/></name></expr></argument>)<pos:position pos:line="119" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="55">"WARNING: external_acl_type %CA_CERT_* code is obsolete. Use %USER_CA_CERT_* instead"<pos:position pos:line="119" pos:column="140"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="141"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="142"/></expr_stmt>
            <expr_stmt><expr><name><operator pos:line="120" pos:column="13">(<pos:position pos:line="120" pos:column="14"/></operator><operator pos:line="120" pos:column="14">*<pos:position pos:line="120" pos:column="15"/></operator><name pos:line="120" pos:column="15">fmt<pos:position pos:line="120" pos:column="18"/></name><operator pos:line="120" pos:column="18">)<pos:position pos:line="120" pos:column="19"/></operator><operator pos:line="120" pos:column="19">-&gt;<pos:position pos:line="120" pos:column="24"/></operator><name pos:line="120" pos:column="21">type<pos:position pos:line="120" pos:column="25"/></name></name> <operator pos:line="120" pos:column="26">=<pos:position pos:line="120" pos:column="27"/></operator> <name><name pos:line="120" pos:column="28">Format<pos:position pos:line="120" pos:column="34"/></name><operator pos:line="120" pos:column="34">::<pos:position pos:line="120" pos:column="36"/></operator><name pos:line="120" pos:column="36">LFT_EXT_ACL_USER_CA_CERT<pos:position pos:line="120" pos:column="60"/></name></name></expr>;<pos:position pos:line="120" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><name><operator pos:line="121" pos:column="13">(<pos:position pos:line="121" pos:column="14"/></operator><operator pos:line="121" pos:column="14">*<pos:position pos:line="121" pos:column="15"/></operator><name pos:line="121" pos:column="15">fmt<pos:position pos:line="121" pos:column="18"/></name><operator pos:line="121" pos:column="18">)<pos:position pos:line="121" pos:column="19"/></operator><operator pos:line="121" pos:column="19">-&gt;<pos:position pos:line="121" pos:column="24"/></operator><name><name pos:line="121" pos:column="21">data<pos:position pos:line="121" pos:column="25"/></name><operator pos:line="121" pos:column="25">.<pos:position pos:line="121" pos:column="26"/></operator><name pos:line="121" pos:column="26">string<pos:position pos:line="121" pos:column="32"/></name></name></name> <operator pos:line="121" pos:column="33">=<pos:position pos:line="121" pos:column="34"/></operator> <call><name pos:line="121" pos:column="35">xstrdup<pos:position pos:line="121" pos:column="42"/></name><argument_list pos:line="121" pos:column="42">(<argument><expr><name pos:line="121" pos:column="43">token<pos:position pos:line="121" pos:column="48"/></name> <operator pos:line="121" pos:column="49">+<pos:position pos:line="121" pos:column="50"/></operator> <literal type="number" pos:line="121" pos:column="51">9<pos:position pos:line="121" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><name><operator pos:line="122" pos:column="13">(<pos:position pos:line="122" pos:column="14"/></operator><operator pos:line="122" pos:column="14">*<pos:position pos:line="122" pos:column="15"/></operator><name pos:line="122" pos:column="15">fmt<pos:position pos:line="122" pos:column="18"/></name><operator pos:line="122" pos:column="18">)<pos:position pos:line="122" pos:column="19"/></operator><operator pos:line="122" pos:column="19">-&gt;<pos:position pos:line="122" pos:column="24"/></operator><name><name pos:line="122" pos:column="21">data<pos:position pos:line="122" pos:column="25"/></name><operator pos:line="122" pos:column="25">.<pos:position pos:line="122" pos:column="26"/></operator><name pos:line="122" pos:column="26">header<pos:position pos:line="122" pos:column="32"/></name><operator pos:line="122" pos:column="32">.<pos:position pos:line="122" pos:column="33"/></operator><name pos:line="122" pos:column="33">header<pos:position pos:line="122" pos:column="39"/></name></name></name> <operator pos:line="122" pos:column="40">=<pos:position pos:line="122" pos:column="41"/></operator> <name><operator pos:line="122" pos:column="42">(<pos:position pos:line="122" pos:column="43"/></operator><operator pos:line="122" pos:column="43">*<pos:position pos:line="122" pos:column="44"/></operator><name pos:line="122" pos:column="44">fmt<pos:position pos:line="122" pos:column="47"/></name><operator pos:line="122" pos:column="47">)<pos:position pos:line="122" pos:column="48"/></operator><operator pos:line="122" pos:column="48">-&gt;<pos:position pos:line="122" pos:column="53"/></operator><name><name pos:line="122" pos:column="50">data<pos:position pos:line="122" pos:column="54"/></name><operator pos:line="122" pos:column="54">.<pos:position pos:line="122" pos:column="55"/></operator><name pos:line="122" pos:column="55">string<pos:position pos:line="122" pos:column="61"/></name></name></name></expr>;<pos:position pos:line="122" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="123" pos:column="10"/></block></then></if></elseif> <else pos:line="123" pos:column="11">else
<cpp:endif pos:line="124" pos:column="1">#<cpp:directive pos:line="124" pos:column="2">endif<pos:position pos:line="124" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="125" pos:column="9">{
            <comment type="line" pos:line="126" pos:column="13">// we can use the Format::Token::parse() method since it</comment>
            <comment type="line" pos:line="127" pos:column="13">// only pulls off one token. Since we already checked</comment>
            <comment type="line" pos:line="128" pos:column="13">// for '%' prefix above this is guaranteed to be a token.</comment>
            <decl_stmt><decl><type><specifier pos:line="129" pos:column="13">const<pos:position pos:line="129" pos:column="18"/></specifier> <name pos:line="129" pos:column="19">size_t<pos:position pos:line="129" pos:column="25"/></name></type> <name pos:line="129" pos:column="26">len<pos:position pos:line="129" pos:column="29"/></name> <init pos:line="129" pos:column="30">= <expr><call><name><operator pos:line="129" pos:column="32">(<pos:position pos:line="129" pos:column="33"/></operator><operator pos:line="129" pos:column="33">*<pos:position pos:line="129" pos:column="34"/></operator><name pos:line="129" pos:column="34">fmt<pos:position pos:line="129" pos:column="37"/></name><operator pos:line="129" pos:column="37">)<pos:position pos:line="129" pos:column="38"/></operator><operator pos:line="129" pos:column="38">-&gt;<pos:position pos:line="129" pos:column="43"/></operator><name pos:line="129" pos:column="40">parse<pos:position pos:line="129" pos:column="45"/></name></name><argument_list pos:line="129" pos:column="45">(<argument><expr><name pos:line="129" pos:column="46">token<pos:position pos:line="129" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="129" pos:column="53">&amp;<pos:position pos:line="129" pos:column="58"/></operator><name pos:line="129" pos:column="54">quote<pos:position pos:line="129" pos:column="59"/></name></expr></argument>)<pos:position pos:line="129" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="129" pos:column="61"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="130" pos:column="13">assert<pos:position pos:line="130" pos:column="19"/></name><argument_list pos:line="130" pos:column="19">(<argument><expr><name pos:line="130" pos:column="20">len<pos:position pos:line="130" pos:column="23"/></name> <operator pos:line="130" pos:column="24">==<pos:position pos:line="130" pos:column="26"/></operator> <call><name pos:line="130" pos:column="27">strlen<pos:position pos:line="130" pos:column="33"/></name><argument_list pos:line="130" pos:column="33">(<argument><expr><name pos:line="130" pos:column="34">token<pos:position pos:line="130" pos:column="39"/></name></expr></argument>)<pos:position pos:line="130" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="130" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="131" pos:column="10"/></block></else></if>

        <comment type="line" pos:line="133" pos:column="9">// process special token-specific actions (only if necessary)</comment>
<cpp:if pos:line="134" pos:column="1">#<cpp:directive pos:line="134" pos:column="2">if<pos:position pos:line="134" pos:column="4"/></cpp:directive> <expr><name pos:line="134" pos:column="5">USE_AUTH<pos:position pos:line="134" pos:column="13"/></name></expr></cpp:if>
        <if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">(<expr><name><operator pos:line="135" pos:column="13">(<pos:position pos:line="135" pos:column="14"/></operator><operator pos:line="135" pos:column="14">*<pos:position pos:line="135" pos:column="15"/></operator><name pos:line="135" pos:column="15">fmt<pos:position pos:line="135" pos:column="18"/></name><operator pos:line="135" pos:column="18">)<pos:position pos:line="135" pos:column="19"/></operator><operator pos:line="135" pos:column="19">-&gt;<pos:position pos:line="135" pos:column="24"/></operator><name pos:line="135" pos:column="21">type<pos:position pos:line="135" pos:column="25"/></name></name> <operator pos:line="135" pos:column="26">==<pos:position pos:line="135" pos:column="28"/></operator> <name><name pos:line="135" pos:column="29">Format<pos:position pos:line="135" pos:column="35"/></name><operator pos:line="135" pos:column="35">::<pos:position pos:line="135" pos:column="37"/></operator><name pos:line="135" pos:column="37">LFT_USER_LOGIN<pos:position pos:line="135" pos:column="51"/></name></name></expr>)<pos:position pos:line="135" pos:column="52"/></condition><then pos:line="135" pos:column="52">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="136" pos:column="13">a<pos:position pos:line="136" pos:column="14"/></name><operator pos:line="136" pos:column="14">-&gt;<pos:position pos:line="136" pos:column="19"/></operator><name pos:line="136" pos:column="16">require_auth<pos:position pos:line="136" pos:column="28"/></name></name> <operator pos:line="136" pos:column="29">=<pos:position pos:line="136" pos:column="30"/></operator> <literal type="boolean" pos:line="136" pos:column="31">true<pos:position pos:line="136" pos:column="35"/></literal></expr>;<pos:position pos:line="136" pos:column="36"/></expr_stmt></block></then></if>
<cpp:endif pos:line="137" pos:column="1">#<cpp:directive pos:line="137" pos:column="2">endif<pos:position pos:line="137" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><name><operator pos:line="139" pos:column="13">(<pos:position pos:line="139" pos:column="14"/></operator><operator pos:line="139" pos:column="14">*<pos:position pos:line="139" pos:column="15"/></operator><name pos:line="139" pos:column="15">fmt<pos:position pos:line="139" pos:column="18"/></name><operator pos:line="139" pos:column="18">)<pos:position pos:line="139" pos:column="19"/></operator><operator pos:line="139" pos:column="19">-&gt;<pos:position pos:line="139" pos:column="24"/></operator><name pos:line="139" pos:column="21">type<pos:position pos:line="139" pos:column="25"/></name></name> <operator pos:line="139" pos:column="26">==<pos:position pos:line="139" pos:column="28"/></operator> <name><name pos:line="139" pos:column="29">Format<pos:position pos:line="139" pos:column="35"/></name><operator pos:line="139" pos:column="35">::<pos:position pos:line="139" pos:column="37"/></operator><name pos:line="139" pos:column="37">LFT_EXT_ACL_DATA<pos:position pos:line="139" pos:column="53"/></name></name></expr>)<pos:position pos:line="139" pos:column="54"/></condition><then pos:line="139" pos:column="54">
            <block type="pseudo"><expr_stmt><expr><name pos:line="140" pos:column="13">data_used<pos:position pos:line="140" pos:column="22"/></name> <operator pos:line="140" pos:column="23">=<pos:position pos:line="140" pos:column="24"/></operator> <literal type="boolean" pos:line="140" pos:column="25">true<pos:position pos:line="140" pos:column="29"/></literal></expr>;<pos:position pos:line="140" pos:column="30"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="142" pos:column="9">fmt<pos:position pos:line="142" pos:column="12"/></name> <operator pos:line="142" pos:column="13">=<pos:position pos:line="142" pos:column="14"/></operator> <operator pos:line="142" pos:column="15">&amp;<pos:position pos:line="142" pos:column="20"/></operator><operator pos:line="142" pos:column="16">(<pos:position pos:line="142" pos:column="17"/></operator><name><operator pos:line="142" pos:column="17">(<pos:position pos:line="142" pos:column="18"/></operator><operator pos:line="142" pos:column="18">*<pos:position pos:line="142" pos:column="19"/></operator><name pos:line="142" pos:column="19">fmt<pos:position pos:line="142" pos:column="22"/></name><operator pos:line="142" pos:column="22">)<pos:position pos:line="142" pos:column="23"/></operator><operator pos:line="142" pos:column="23">-&gt;<pos:position pos:line="142" pos:column="28"/></operator><name pos:line="142" pos:column="25">next<pos:position pos:line="142" pos:column="29"/></name></name><operator pos:line="142" pos:column="29">)<pos:position pos:line="142" pos:column="30"/></operator></expr>;<pos:position pos:line="142" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="143" pos:column="9">token<pos:position pos:line="143" pos:column="14"/></name> <operator pos:line="143" pos:column="15">=<pos:position pos:line="143" pos:column="16"/></operator> <call><name><name pos:line="143" pos:column="17">ConfigParser<pos:position pos:line="143" pos:column="29"/></name><operator pos:line="143" pos:column="29">::<pos:position pos:line="143" pos:column="31"/></operator><name pos:line="143" pos:column="31">NextToken<pos:position pos:line="143" pos:column="40"/></name></name><argument_list pos:line="143" pos:column="40">()<pos:position pos:line="143" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="144" pos:column="6"/></block></while>

    <comment type="block" pos:line="146" pos:column="5">/* There must be at least one format token */</comment>
    <if pos:line="147" pos:column="5">if <condition pos:line="147" pos:column="8">(<expr><operator pos:line="147" pos:column="9">!<pos:position pos:line="147" pos:column="10"/></operator><name><name pos:line="147" pos:column="10">a<pos:position pos:line="147" pos:column="11"/></name><operator pos:line="147" pos:column="11">-&gt;<pos:position pos:line="147" pos:column="16"/></operator><name pos:line="147" pos:column="13">format<pos:position pos:line="147" pos:column="19"/></name><operator pos:line="147" pos:column="19">.<pos:position pos:line="147" pos:column="20"/></operator><name pos:line="147" pos:column="20">format<pos:position pos:line="147" pos:column="26"/></name></name></expr>)<pos:position pos:line="147" pos:column="27"/></condition><then pos:line="147" pos:column="27"> <block pos:line="147" pos:column="28">{
        <expr_stmt><expr><operator pos:line="148" pos:column="9">delete<pos:position pos:line="148" pos:column="15"/></operator> <name pos:line="148" pos:column="16">a<pos:position pos:line="148" pos:column="17"/></name></expr>;<pos:position pos:line="148" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="149" pos:column="9">self_destruct<pos:position pos:line="149" pos:column="22"/></name><argument_list pos:line="149" pos:column="22">()<pos:position pos:line="149" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="25"/></expr_stmt>
        <return pos:line="150" pos:column="9">return;<pos:position pos:line="150" pos:column="16"/></return>
    }<pos:position pos:line="151" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="153" pos:column="5">// format has implicit %DATA on the end if not used explicitly</comment>
    <if pos:line="154" pos:column="5">if <condition pos:line="154" pos:column="8">(<expr><operator pos:line="154" pos:column="9">!<pos:position pos:line="154" pos:column="10"/></operator><name pos:line="154" pos:column="10">data_used<pos:position pos:line="154" pos:column="19"/></name></expr>)<pos:position pos:line="154" pos:column="20"/></condition><then pos:line="154" pos:column="20"> <block pos:line="154" pos:column="21">{
        <expr_stmt><expr><operator pos:line="155" pos:column="9">*<pos:position pos:line="155" pos:column="10"/></operator><name pos:line="155" pos:column="10">fmt<pos:position pos:line="155" pos:column="13"/></name> <operator pos:line="155" pos:column="14">=<pos:position pos:line="155" pos:column="15"/></operator> <operator pos:line="155" pos:column="16">new<pos:position pos:line="155" pos:column="19"/></operator> <name><name pos:line="155" pos:column="20">Format<pos:position pos:line="155" pos:column="26"/></name><operator pos:line="155" pos:column="26">::<pos:position pos:line="155" pos:column="28"/></operator><name pos:line="155" pos:column="28">Token<pos:position pos:line="155" pos:column="33"/></name></name></expr>;<pos:position pos:line="155" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><operator pos:line="156" pos:column="9">(<pos:position pos:line="156" pos:column="10"/></operator><operator pos:line="156" pos:column="10">*<pos:position pos:line="156" pos:column="11"/></operator><name pos:line="156" pos:column="11">fmt<pos:position pos:line="156" pos:column="14"/></name><operator pos:line="156" pos:column="14">)<pos:position pos:line="156" pos:column="15"/></operator><operator pos:line="156" pos:column="15">-&gt;<pos:position pos:line="156" pos:column="20"/></operator><name pos:line="156" pos:column="17">type<pos:position pos:line="156" pos:column="21"/></name></name> <operator pos:line="156" pos:column="22">=<pos:position pos:line="156" pos:column="23"/></operator> <name><name pos:line="156" pos:column="24">Format<pos:position pos:line="156" pos:column="30"/></name><operator pos:line="156" pos:column="30">::<pos:position pos:line="156" pos:column="32"/></operator><name pos:line="156" pos:column="32">LFT_EXT_ACL_DATA<pos:position pos:line="156" pos:column="48"/></name></name></expr>;<pos:position pos:line="156" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name><operator pos:line="157" pos:column="9">(<pos:position pos:line="157" pos:column="10"/></operator><operator pos:line="157" pos:column="10">*<pos:position pos:line="157" pos:column="11"/></operator><name pos:line="157" pos:column="11">fmt<pos:position pos:line="157" pos:column="14"/></name><operator pos:line="157" pos:column="14">)<pos:position pos:line="157" pos:column="15"/></operator><operator pos:line="157" pos:column="15">-&gt;<pos:position pos:line="157" pos:column="20"/></operator><name pos:line="157" pos:column="17">quote<pos:position pos:line="157" pos:column="22"/></name></name> <operator pos:line="157" pos:column="23">=<pos:position pos:line="157" pos:column="24"/></operator> <name><name pos:line="157" pos:column="25">Format<pos:position pos:line="157" pos:column="31"/></name><operator pos:line="157" pos:column="31">::<pos:position pos:line="157" pos:column="33"/></operator><name pos:line="157" pos:column="33">LOG_QUOTE_NONE<pos:position pos:line="157" pos:column="47"/></name></name></expr>;<pos:position pos:line="157" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="158" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="160" pos:column="5">/* helper */</comment>
    <if pos:line="161" pos:column="5">if <condition pos:line="161" pos:column="8">(<expr><operator pos:line="161" pos:column="9">!<pos:position pos:line="161" pos:column="10"/></operator><name pos:line="161" pos:column="10">token<pos:position pos:line="161" pos:column="15"/></name></expr>)<pos:position pos:line="161" pos:column="16"/></condition><then pos:line="161" pos:column="16"> <block pos:line="161" pos:column="17">{
        <expr_stmt><expr><operator pos:line="162" pos:column="9">delete<pos:position pos:line="162" pos:column="15"/></operator> <name pos:line="162" pos:column="16">a<pos:position pos:line="162" pos:column="17"/></name></expr>;<pos:position pos:line="162" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="163" pos:column="9">self_destruct<pos:position pos:line="163" pos:column="22"/></name><argument_list pos:line="163" pos:column="22">()<pos:position pos:line="163" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="25"/></expr_stmt>
        <return pos:line="164" pos:column="9">return;<pos:position pos:line="164" pos:column="16"/></return>
    }<pos:position pos:line="165" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="167" pos:column="5">wordlistAdd<pos:position pos:line="167" pos:column="16"/></name><argument_list pos:line="167" pos:column="16">(<argument><expr><operator pos:line="167" pos:column="17">&amp;<pos:position pos:line="167" pos:column="22"/></operator><name><name pos:line="167" pos:column="18">a<pos:position pos:line="167" pos:column="19"/></name><operator pos:line="167" pos:column="19">-&gt;<pos:position pos:line="167" pos:column="24"/></operator><name pos:line="167" pos:column="21">cmdline<pos:position pos:line="167" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="30">token<pos:position pos:line="167" pos:column="35"/></name></expr></argument>)<pos:position pos:line="167" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="169" pos:column="5">/* arguments */</comment>
    <expr_stmt><expr><call><name pos:line="170" pos:column="5">parse_wordlist<pos:position pos:line="170" pos:column="19"/></name><argument_list pos:line="170" pos:column="19">(<argument><expr><operator pos:line="170" pos:column="20">&amp;<pos:position pos:line="170" pos:column="25"/></operator><name><name pos:line="170" pos:column="21">a<pos:position pos:line="170" pos:column="22"/></name><operator pos:line="170" pos:column="22">-&gt;<pos:position pos:line="170" pos:column="27"/></operator><name pos:line="170" pos:column="24">cmdline<pos:position pos:line="170" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="170" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="33"/></expr_stmt>

    <while pos:line="172" pos:column="5">while <condition pos:line="172" pos:column="11">(<expr><operator pos:line="172" pos:column="12">*<pos:position pos:line="172" pos:column="13"/></operator><name pos:line="172" pos:column="13">list<pos:position pos:line="172" pos:column="17"/></name></expr>)<pos:position pos:line="172" pos:column="18"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="173" pos:column="9">list<pos:position pos:line="173" pos:column="13"/></name> <operator pos:line="173" pos:column="14">=<pos:position pos:line="173" pos:column="15"/></operator> <operator pos:line="173" pos:column="16">&amp;<pos:position pos:line="173" pos:column="21"/></operator><name><operator pos:line="173" pos:column="17">(<pos:position pos:line="173" pos:column="18"/></operator><operator pos:line="173" pos:column="18">*<pos:position pos:line="173" pos:column="19"/></operator><name pos:line="173" pos:column="19">list<pos:position pos:line="173" pos:column="23"/></name><operator pos:line="173" pos:column="23">)<pos:position pos:line="173" pos:column="24"/></operator><operator pos:line="173" pos:column="24">-&gt;<pos:position pos:line="173" pos:column="29"/></operator><name pos:line="173" pos:column="26">next<pos:position pos:line="173" pos:column="30"/></name></name></expr>;<pos:position pos:line="173" pos:column="31"/></expr_stmt></block></while>

    <expr_stmt><expr><operator pos:line="175" pos:column="5">*<pos:position pos:line="175" pos:column="6"/></operator><name pos:line="175" pos:column="6">list<pos:position pos:line="175" pos:column="10"/></name> <operator pos:line="175" pos:column="11">=<pos:position pos:line="175" pos:column="12"/></operator> <name pos:line="175" pos:column="13">a<pos:position pos:line="175" pos:column="14"/></name></expr>;<pos:position pos:line="175" pos:column="15"/></expr_stmt>
}<pos:position pos:line="176" pos:column="2"/></block></function></unit>
