<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3874_squid-3.1.23.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">status<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">()<pos:position pos:line="2" pos:column="39"/></parameter_list> <specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">MemBuf<pos:position pos:line="4" pos:column="18"/></name></type> <name pos:line="4" pos:column="19">buf<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">buf<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">.<pos:position pos:line="5" pos:column="9"/></operator><name pos:line="5" pos:column="9">reset<pos:position pos:line="5" pos:column="14"/></name></name><argument_list pos:line="5" pos:column="14">()<pos:position pos:line="5" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">buf<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">.<pos:position pos:line="7" pos:column="9"/></operator><name pos:line="7" pos:column="9">append<pos:position pos:line="7" pos:column="15"/></name></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="string" pos:line="7" pos:column="16">" ["<pos:position pos:line="7" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="22">2<pos:position pos:line="7" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">proxyingVb<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">==<pos:position pos:line="9" pos:column="22"/></operator> <name pos:line="9" pos:column="23">opOn<pos:position pos:line="9" pos:column="27"/></name></expr>)<pos:position pos:line="9" pos:column="28"/></condition><then pos:line="9" pos:column="28"> <block pos:line="9" pos:column="29">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">BodyPipePointer<pos:position pos:line="10" pos:column="30"/></name> <modifier pos:line="10" pos:column="31">&amp;<pos:position pos:line="10" pos:column="36"/></modifier></type><name pos:line="10" pos:column="32">vp<pos:position pos:line="10" pos:column="34"/></name> <init pos:line="10" pos:column="35">= <expr><call><name><name pos:line="10" pos:column="37">theVirginRep<pos:position pos:line="10" pos:column="49"/></name><operator pos:line="10" pos:column="49">.<pos:position pos:line="10" pos:column="50"/></operator><name pos:line="10" pos:column="50">raw<pos:position pos:line="10" pos:column="53"/></name></name><argument_list pos:line="10" pos:column="53">()<pos:position pos:line="10" pos:column="55"/></argument_list></call><operator pos:line="10" pos:column="55">.<pos:position pos:line="10" pos:column="56"/></operator><name pos:line="10" pos:column="56">body_pipe<pos:position pos:line="10" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="66"/></decl_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">canAccessVb<pos:position pos:line="11" pos:column="25"/></name></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="12" pos:column="13">buf<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">append<pos:position pos:line="12" pos:column="23"/></name></name><argument_list pos:line="12" pos:column="23">(<argument><expr><literal type="string" pos:line="12" pos:column="24">"x"<pos:position pos:line="12" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="29">1<pos:position pos:line="12" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt></block></then></if>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">vp<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">!=<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">NULL<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block pos:line="13" pos:column="25">{ <comment type="line" pos:line="13" pos:column="27">// XXX: but may not be stillConsuming()</comment>
            <expr_stmt><expr><call><name><name pos:line="14" pos:column="13">buf<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">.<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">append<pos:position pos:line="14" pos:column="23"/></name></name><argument_list pos:line="14" pos:column="23">(<argument><expr><literal type="string" pos:line="14" pos:column="24">"Vb"<pos:position pos:line="14" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="30">2<pos:position pos:line="14" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></then> <else pos:line="15" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="16" pos:column="13">buf<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">.<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">append<pos:position pos:line="16" pos:column="23"/></name></name><argument_list pos:line="16" pos:column="23">(<argument><expr><literal type="string" pos:line="16" pos:column="24">"V."<pos:position pos:line="16" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="30">2<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt></block></else></if>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">proxyingAb<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">==<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">opOn<pos:position pos:line="19" pos:column="27"/></name></expr>)<pos:position pos:line="19" pos:column="28"/></condition><then pos:line="19" pos:column="28"> <block pos:line="19" pos:column="29">{
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">MessageRep<pos:position pos:line="20" pos:column="19"/></name> <modifier pos:line="20" pos:column="20">*<pos:position pos:line="20" pos:column="21"/></modifier></type><name pos:line="20" pos:column="21">rep<pos:position pos:line="20" pos:column="24"/></name> <init pos:line="20" pos:column="25">= <expr><cast type="dynamic" pos:line="20" pos:column="27">dynamic_cast<argument_list type="generic" pos:line="20" pos:column="39">&lt;<argument><expr><name pos:line="20" pos:column="40">MessageRep<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">*<pos:position pos:line="20" pos:column="51"/></operator></expr></argument>&gt;<pos:position pos:line="20" pos:column="55"/></argument_list><argument_list pos:line="20" pos:column="52">(<argument><expr><call><name><name pos:line="20" pos:column="53">theAnswerRep<pos:position pos:line="20" pos:column="65"/></name><operator pos:line="20" pos:column="65">.<pos:position pos:line="20" pos:column="66"/></operator><name pos:line="20" pos:column="66">get<pos:position pos:line="20" pos:column="69"/></name></name><argument_list pos:line="20" pos:column="69">()<pos:position pos:line="20" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="72"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="20" pos:column="73"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">Must<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><name pos:line="21" pos:column="14">rep<pos:position pos:line="21" pos:column="17"/></name></expr></argument>)<pos:position pos:line="21" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">const<pos:position pos:line="22" pos:column="14"/></specifier> <name pos:line="22" pos:column="15">BodyPipePointer<pos:position pos:line="22" pos:column="30"/></name> <modifier pos:line="22" pos:column="31">&amp;<pos:position pos:line="22" pos:column="36"/></modifier></type><name pos:line="22" pos:column="32">ap<pos:position pos:line="22" pos:column="34"/></name> <init pos:line="22" pos:column="35">= <expr><call><name><name pos:line="22" pos:column="37">rep<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">-&gt;<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="42">raw<pos:position pos:line="22" pos:column="45"/></name></name><argument_list pos:line="22" pos:column="45">()<pos:position pos:line="22" pos:column="47"/></argument_list></call><operator pos:line="22" pos:column="47">.<pos:position pos:line="22" pos:column="48"/></operator><name pos:line="22" pos:column="48">body_pipe<pos:position pos:line="22" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="58"/></decl_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">ap<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">!=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">NULL<pos:position pos:line="23" pos:column="23"/></name></expr>)<pos:position pos:line="23" pos:column="24"/></condition><then pos:line="23" pos:column="24"> <block pos:line="23" pos:column="25">{ <comment type="line" pos:line="23" pos:column="27">// XXX: but may not be stillProducing()</comment>
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">buf<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">.<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">append<pos:position pos:line="24" pos:column="23"/></name></name><argument_list pos:line="24" pos:column="23">(<argument><expr><literal type="string" pos:line="24" pos:column="24">" Ab"<pos:position pos:line="24" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="31">3<pos:position pos:line="24" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="25" pos:column="10"/></block></then> <else pos:line="25" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="26" pos:column="13">buf<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">.<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">append<pos:position pos:line="26" pos:column="23"/></name></name><argument_list pos:line="26" pos:column="23">(<argument><expr><literal type="string" pos:line="26" pos:column="24">" A."<pos:position pos:line="26" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="31">3<pos:position pos:line="26" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt></block></else></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">buf<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">.<pos:position pos:line="29" pos:column="9"/></operator><name pos:line="29" pos:column="9">Printf<pos:position pos:line="29" pos:column="15"/></name></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="string" pos:line="29" pos:column="16">" ecapx%d]"<pos:position pos:line="29" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="29">id<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="31" pos:column="5">buf<pos:position pos:line="31" pos:column="8"/></name><operator pos:line="31" pos:column="8">.<pos:position pos:line="31" pos:column="9"/></operator><name pos:line="31" pos:column="9">terminate<pos:position pos:line="31" pos:column="18"/></name></name><argument_list pos:line="31" pos:column="18">()<pos:position pos:line="31" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt>

    <return pos:line="33" pos:column="5">return <expr><call><name><name pos:line="33" pos:column="12">buf<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">.<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="16">content<pos:position pos:line="33" pos:column="23"/></name></name><argument_list pos:line="33" pos:column="23">()<pos:position pos:line="33" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="26"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
