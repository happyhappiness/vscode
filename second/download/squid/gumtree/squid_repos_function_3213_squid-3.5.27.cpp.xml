<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3213_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">errorSend<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><specifier pos:line="2" pos:column="11">const<pos:position pos:line="2" pos:column="16"/></specifier> <name><name pos:line="2" pos:column="17">Comm<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">ConnectionPointer<pos:position pos:line="2" pos:column="40"/></name></name> <modifier pos:line="2" pos:column="41">&amp;<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="42">conn<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">ErrorState<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type> <name pos:line="2" pos:column="61">err<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpReply<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">rep<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">4<pos:position pos:line="5" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="15">3<pos:position pos:line="5" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="18">HERE<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">&lt;&lt;<pos:position pos:line="5" pos:column="31"/></operator> <name pos:line="5" pos:column="26">conn<pos:position pos:line="5" pos:column="30"/></name> <operator pos:line="5" pos:column="31">&lt;&lt;<pos:position pos:line="5" pos:column="39"/></operator> <literal type="string" pos:line="5" pos:column="34">", err="<pos:position pos:line="5" pos:column="42"/></literal> <operator pos:line="5" pos:column="43">&lt;&lt;<pos:position pos:line="5" pos:column="51"/></operator> <name pos:line="5" pos:column="46">err<pos:position pos:line="5" pos:column="49"/></name></expr></argument>)<pos:position pos:line="5" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><call><name><name pos:line="6" pos:column="12">Comm<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">::<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">IsConnOpen<pos:position pos:line="6" pos:column="28"/></name></name><argument_list pos:line="6" pos:column="28">(<argument><expr><name pos:line="6" pos:column="29">conn<pos:position pos:line="6" pos:column="33"/></name></expr></argument>)<pos:position pos:line="6" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">rep<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <call><name><name pos:line="8" pos:column="11">err<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">-&gt;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="16">BuildHttpReply<pos:position pos:line="8" pos:column="30"/></name></name><argument_list pos:line="8" pos:column="30">()<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">MemBuf<pos:position pos:line="10" pos:column="11"/></name> <modifier pos:line="10" pos:column="12">*<pos:position pos:line="10" pos:column="13"/></modifier></type><name pos:line="10" pos:column="13">mb<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">= <expr><call><name><name pos:line="10" pos:column="18">rep<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">pack<pos:position pos:line="10" pos:column="27"/></name></name><argument_list pos:line="10" pos:column="27">()<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">AsyncCall<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">::<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">Pointer<pos:position pos:line="11" pos:column="23"/></name></name></type> <name pos:line="11" pos:column="24">call<pos:position pos:line="11" pos:column="28"/></name> <init pos:line="11" pos:column="29">= <expr><call><name pos:line="11" pos:column="31">commCbCall<pos:position pos:line="11" pos:column="41"/></name><argument_list pos:line="11" pos:column="41">(<argument><expr><literal type="number" pos:line="11" pos:column="42">78<pos:position pos:line="11" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="46">5<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="49">"errorSendComplete"<pos:position pos:line="11" pos:column="68"/></literal></expr></argument>,
                                         <argument><expr><call><name pos:line="12" pos:column="42">CommIoCbPtrFun<pos:position pos:line="12" pos:column="56"/></name><argument_list pos:line="12" pos:column="56">(<argument><expr><operator pos:line="12" pos:column="57">&amp;<pos:position pos:line="12" pos:column="62"/></operator><name pos:line="12" pos:column="58">errorSendComplete<pos:position pos:line="12" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="77">err<pos:position pos:line="12" pos:column="80"/></name></expr></argument>)<pos:position pos:line="12" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="83"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">Comm<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">::<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">Write<pos:position pos:line="13" pos:column="16"/></name></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">conn<pos:position pos:line="13" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="23">mb<pos:position pos:line="13" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="27">call<pos:position pos:line="13" pos:column="31"/></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="14" pos:column="5">delete<pos:position pos:line="14" pos:column="11"/></operator> <name pos:line="14" pos:column="12">mb<pos:position pos:line="14" pos:column="14"/></name></expr>;<pos:position pos:line="14" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="16" pos:column="5">delete<pos:position pos:line="16" pos:column="11"/></operator> <name pos:line="16" pos:column="12">rep<pos:position pos:line="16" pos:column="15"/></name></expr>;<pos:position pos:line="16" pos:column="16"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
