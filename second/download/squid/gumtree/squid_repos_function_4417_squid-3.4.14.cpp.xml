<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4417_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ssl<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">CertificateDb<pos:position pos:line="1" pos:column="24"/></name><operator pos:line="1" pos:column="24">::<pos:position pos:line="1" pos:column="26"/></operator><name pos:line="1" pos:column="26">save<pos:position pos:line="1" pos:column="30"/></name></name><parameter_list pos:line="1" pos:column="30">()<pos:position pos:line="1" pos:column="32"/></parameter_list> <block pos:line="1" pos:column="33">{
    <if pos:line="2" pos:column="5">if <condition pos:line="2" pos:column="8">(<expr><operator pos:line="2" pos:column="9">!<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">db<pos:position pos:line="2" pos:column="12"/></name></expr>)<pos:position pos:line="2" pos:column="13"/></condition><then pos:line="2" pos:column="13">
        <block type="pseudo"><throw pos:line="3" pos:column="9">throw <expr><call><name><name pos:line="3" pos:column="15">std<pos:position pos:line="3" pos:column="18"/></name><operator pos:line="3" pos:column="18">::<pos:position pos:line="3" pos:column="20"/></operator><name pos:line="3" pos:column="20">runtime_error<pos:position pos:line="3" pos:column="33"/></name></name><argument_list pos:line="3" pos:column="33">(<argument><expr><literal type="string" pos:line="3" pos:column="34">"The certificates database is not loaded"<pos:position pos:line="3" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="77"/></throw></block></then></if><empty_stmt pos:line="3" pos:column="77">;<pos:position pos:line="3" pos:column="78"/></empty_stmt>

    <comment type="line" pos:line="5" pos:column="5">// To save the db to file,  create a new BIO with BIO file methods.</comment>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">Ssl<pos:position pos:line="6" pos:column="8"/></name><operator pos:line="6" pos:column="8">::<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">BIO_Pointer<pos:position pos:line="6" pos:column="21"/></name></name></type> <name pos:line="6" pos:column="22">out<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><call><name pos:line="6" pos:column="26">BIO_new<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">(<argument><expr><call><name pos:line="6" pos:column="34">BIO_s_file<pos:position pos:line="6" pos:column="44"/></name><argument_list pos:line="6" pos:column="44">()<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></decl>;<pos:position pos:line="6" pos:column="49"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">out<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">||<pos:position pos:line="7" pos:column="16"/></operator> <operator pos:line="7" pos:column="17">!<pos:position pos:line="7" pos:column="18"/></operator><call><name pos:line="7" pos:column="18">BIO_write_filename<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><call><name><name pos:line="7" pos:column="37">out<pos:position pos:line="7" pos:column="40"/></name><operator pos:line="7" pos:column="40">.<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="41">get<pos:position pos:line="7" pos:column="44"/></name></name><argument_list pos:line="7" pos:column="44">()<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><cast type="const" pos:line="7" pos:column="48">const_cast<argument_list type="generic" pos:line="7" pos:column="58">&lt;<argument><expr><name pos:line="7" pos:column="59">char<pos:position pos:line="7" pos:column="63"/></name> <operator pos:line="7" pos:column="64">*<pos:position pos:line="7" pos:column="65"/></operator></expr></argument>&gt;<pos:position pos:line="7" pos:column="69"/></argument_list><argument_list pos:line="7" pos:column="66">(<argument><expr><call><name><name pos:line="7" pos:column="67">db_full<pos:position pos:line="7" pos:column="74"/></name><operator pos:line="7" pos:column="74">.<pos:position pos:line="7" pos:column="75"/></operator><name pos:line="7" pos:column="75">c_str<pos:position pos:line="7" pos:column="80"/></name></name><argument_list pos:line="7" pos:column="80">()<pos:position pos:line="7" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="83"/></argument_list></cast></expr></argument>)<pos:position pos:line="7" pos:column="84"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="85"/></condition><then pos:line="7" pos:column="85">
        <block type="pseudo"><throw pos:line="8" pos:column="9">throw <expr><call><name><name pos:line="8" pos:column="15">std<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">::<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">runtime_error<pos:position pos:line="8" pos:column="33"/></name></name><argument_list pos:line="8" pos:column="33">(<argument><expr><literal type="string" pos:line="8" pos:column="34">"Failed to initialize "<pos:position pos:line="8" pos:column="57"/></literal> <operator pos:line="8" pos:column="58">+<pos:position pos:line="8" pos:column="59"/></operator> <name pos:line="8" pos:column="60">db_full<pos:position pos:line="8" pos:column="67"/></name> <operator pos:line="8" pos:column="68">+<pos:position pos:line="8" pos:column="69"/></operator> <literal type="string" pos:line="8" pos:column="70">" file for writing"<pos:position pos:line="8" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="91"/></throw></block></then></if><empty_stmt pos:line="8" pos:column="91">;<pos:position pos:line="8" pos:column="92"/></empty_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">TXT_DB_write<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><call><name><name pos:line="10" pos:column="22">out<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">.<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">get<pos:position pos:line="10" pos:column="29"/></name></name><argument_list pos:line="10" pos:column="29">()<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="33">db<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">.<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="36">get<pos:position pos:line="10" pos:column="39"/></name></name><argument_list pos:line="10" pos:column="39">()<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call> <operator pos:line="10" pos:column="43">&lt;<pos:position pos:line="10" pos:column="47"/></operator> <literal type="number" pos:line="10" pos:column="45">0<pos:position pos:line="10" pos:column="46"/></literal></expr>)<pos:position pos:line="10" pos:column="47"/></condition><then pos:line="10" pos:column="47">
        <block type="pseudo"><throw pos:line="11" pos:column="9">throw <expr><call><name><name pos:line="11" pos:column="15">std<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">::<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">runtime_error<pos:position pos:line="11" pos:column="33"/></name></name><argument_list pos:line="11" pos:column="33">(<argument><expr><literal type="string" pos:line="11" pos:column="34">"Failed to write "<pos:position pos:line="11" pos:column="52"/></literal> <operator pos:line="11" pos:column="53">+<pos:position pos:line="11" pos:column="54"/></operator> <name pos:line="11" pos:column="55">db_full<pos:position pos:line="11" pos:column="62"/></name> <operator pos:line="11" pos:column="63">+<pos:position pos:line="11" pos:column="64"/></operator> <literal type="string" pos:line="11" pos:column="65">" file"<pos:position pos:line="11" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></throw></block></then></if>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
