<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5386_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">logfileHandleWrite<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">int<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">fd<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">void<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">data<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">Logfile<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">lf<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><operator pos:line="4" pos:column="19">(<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="20">Logfile<pos:position pos:line="4" pos:column="27"/></name> <operator pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></operator><operator pos:line="4" pos:column="29">)<pos:position pos:line="4" pos:column="30"/></operator> <name pos:line="4" pos:column="31">data<pos:position pos:line="4" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">l_daemon_t<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">ll<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><operator pos:line="5" pos:column="22">(<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="23">l_daemon_t<pos:position pos:line="5" pos:column="33"/></name> <operator pos:line="5" pos:column="34">*<pos:position pos:line="5" pos:column="35"/></operator><operator pos:line="5" pos:column="35">)<pos:position pos:line="5" pos:column="36"/></operator> <name><name pos:line="5" pos:column="37">lf<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">-&gt;<pos:position pos:line="5" pos:column="44"/></operator><name pos:line="5" pos:column="41">data<pos:position pos:line="5" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">ret<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">logfile_buffer_t<pos:position pos:line="7" pos:column="21"/></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">b<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/*
     * We'll try writing the first entry until its done - if we
     * get a partial write then we'll re-schedule until its completed.
     * Its naive but it'll do for now.
     */</comment>
    <expr_stmt><expr><name pos:line="14" pos:column="5">b<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <cast type="static" pos:line="14" pos:column="9">static_cast<argument_list type="generic" pos:line="14" pos:column="20">&lt;<argument><expr><name pos:line="14" pos:column="21">logfile_buffer_t<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">*<pos:position pos:line="14" pos:column="38"/></operator></expr></argument>&gt;<pos:position pos:line="14" pos:column="42"/></argument_list><argument_list pos:line="14" pos:column="39">(<argument><expr><name><name pos:line="14" pos:column="40">ll<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">-&gt;<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="44">bufs<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">.<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="49">head<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">-&gt;<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="55">data<pos:position pos:line="14" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="60"/></argument_list></cast></expr>;<pos:position pos:line="14" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">b<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">!=<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">NULL<pos:position pos:line="15" pos:column="21"/></name></expr></argument>)<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">ll<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">-&gt;<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="9">flush_pending<pos:position pos:line="16" pos:column="22"/></name></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <literal type="number" pos:line="16" pos:column="25">0<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><name pos:line="18" pos:column="5">ret<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <call><name pos:line="18" pos:column="11">FD_WRITE_METHOD<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name><name pos:line="18" pos:column="27">ll<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">wfd<pos:position pos:line="18" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="36">b<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">-&gt;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="39">buf<pos:position pos:line="18" pos:column="42"/></name></name> <operator pos:line="18" pos:column="43">+<pos:position pos:line="18" pos:column="44"/></operator> <name><name pos:line="18" pos:column="45">b<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">-&gt;<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="48">written_len<pos:position pos:line="18" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="61">b<pos:position pos:line="18" pos:column="62"/></name><operator pos:line="18" pos:column="62">-&gt;<pos:position pos:line="18" pos:column="67"/></operator><name pos:line="18" pos:column="64">len<pos:position pos:line="18" pos:column="67"/></name></name> <operator pos:line="18" pos:column="68">-<pos:position pos:line="18" pos:column="69"/></operator> <name><name pos:line="18" pos:column="70">b<pos:position pos:line="18" pos:column="71"/></name><operator pos:line="18" pos:column="71">-&gt;<pos:position pos:line="18" pos:column="76"/></operator><name pos:line="18" pos:column="73">written_len<pos:position pos:line="18" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="86"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">debugs<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="number" pos:line="19" pos:column="12">50<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="16">3<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="19">"logfileHandleWrite: "<pos:position pos:line="19" pos:column="41"/></literal> <operator pos:line="19" pos:column="42">&lt;&lt;<pos:position pos:line="19" pos:column="50"/></operator> <name><name pos:line="19" pos:column="45">lf<pos:position pos:line="19" pos:column="47"/></name><operator pos:line="19" pos:column="47">-&gt;<pos:position pos:line="19" pos:column="52"/></operator><name pos:line="19" pos:column="49">path<pos:position pos:line="19" pos:column="53"/></name></name> <operator pos:line="19" pos:column="54">&lt;&lt;<pos:position pos:line="19" pos:column="62"/></operator> <literal type="string" pos:line="19" pos:column="57">": write returned "<pos:position pos:line="19" pos:column="76"/></literal> <operator pos:line="19" pos:column="77">&lt;&lt;<pos:position pos:line="19" pos:column="85"/></operator> <name pos:line="19" pos:column="80">ret<pos:position pos:line="19" pos:column="83"/></name></expr></argument>)<pos:position pos:line="19" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="85"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">ret<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">&lt;<pos:position pos:line="20" pos:column="17"/></operator> <literal type="number" pos:line="20" pos:column="15">0<pos:position pos:line="20" pos:column="16"/></literal></expr>)<pos:position pos:line="20" pos:column="17"/></condition><then pos:line="20" pos:column="17"> <block pos:line="20" pos:column="18">{
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">ignoreErrno<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">errno<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="32"/></condition><then pos:line="21" pos:column="32"> <block pos:line="21" pos:column="33">{
            <comment type="block" pos:line="22" pos:column="13">/* something temporary */</comment>
            <goto pos:line="23" pos:column="13">goto <name pos:line="23" pos:column="18">reschedule<pos:position pos:line="23" pos:column="28"/></name>;<pos:position pos:line="23" pos:column="29"/></goto>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">50<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">DBG_IMPORTANT<pos:position pos:line="25" pos:column="33"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="25" pos:column="34">"logfileHandleWrite: "<pos:position pos:line="25" pos:column="56"/></literal> <operator pos:line="25" pos:column="57">&lt;&lt;<pos:position pos:line="25" pos:column="65"/></operator> <name><name pos:line="25" pos:column="60">lf<pos:position pos:line="25" pos:column="62"/></name><operator pos:line="25" pos:column="62">-&gt;<pos:position pos:line="25" pos:column="67"/></operator><name pos:line="25" pos:column="64">path<pos:position pos:line="25" pos:column="68"/></name></name> <operator pos:line="25" pos:column="69">&lt;&lt;<pos:position pos:line="25" pos:column="77"/></operator> <literal type="string" pos:line="25" pos:column="72">": error writing ("<pos:position pos:line="25" pos:column="91"/></literal> <operator pos:line="25" pos:column="92">&lt;&lt;<pos:position pos:line="25" pos:column="100"/></operator> <call><name pos:line="25" pos:column="95">xstrerror<pos:position pos:line="25" pos:column="104"/></name><argument_list pos:line="25" pos:column="104">()<pos:position pos:line="25" pos:column="106"/></argument_list></call> <operator pos:line="25" pos:column="107">&lt;&lt;<pos:position pos:line="25" pos:column="115"/></operator> <literal type="string" pos:line="25" pos:column="110">")"<pos:position pos:line="25" pos:column="113"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="115"/></expr_stmt>
        <comment type="block" pos:line="26" pos:column="9">/* XXX should handle this better */</comment>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">fatal<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><literal type="string" pos:line="27" pos:column="15">"I don't handle this error well!"<pos:position pos:line="27" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">ret<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">==<pos:position pos:line="29" pos:column="15"/></operator> <literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>)<pos:position pos:line="29" pos:column="18"/></condition><then pos:line="29" pos:column="18"> <block pos:line="29" pos:column="19">{
        <comment type="block" pos:line="30" pos:column="9">/* error? */</comment>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">50<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="20">DBG_IMPORTANT<pos:position pos:line="31" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="35">"logfileHandleWrite: "<pos:position pos:line="31" pos:column="57"/></literal> <operator pos:line="31" pos:column="58">&lt;&lt;<pos:position pos:line="31" pos:column="66"/></operator> <name><name pos:line="31" pos:column="61">lf<pos:position pos:line="31" pos:column="63"/></name><operator pos:line="31" pos:column="63">-&gt;<pos:position pos:line="31" pos:column="68"/></operator><name pos:line="31" pos:column="65">path<pos:position pos:line="31" pos:column="69"/></name></name> <operator pos:line="31" pos:column="70">&lt;&lt;<pos:position pos:line="31" pos:column="78"/></operator> <literal type="string" pos:line="31" pos:column="73">": wrote 0 bytes?"<pos:position pos:line="31" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="93"/></expr_stmt>
        <comment type="block" pos:line="32" pos:column="9">/* XXX should handle this better */</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">fatal<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><literal type="string" pos:line="33" pos:column="15">"I don't handle this error well!"<pos:position pos:line="33" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="35" pos:column="5">/* ret &gt; 0, so something was written */</comment>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">b<pos:position pos:line="36" pos:column="6"/></name><operator pos:line="36" pos:column="6">-&gt;<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="8">written_len<pos:position pos:line="36" pos:column="19"/></name></name> <operator pos:line="36" pos:column="20">+=<pos:position pos:line="36" pos:column="22"/></operator> <name pos:line="36" pos:column="23">ret<pos:position pos:line="36" pos:column="26"/></name></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">assert<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><name><name pos:line="37" pos:column="12">b<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">-&gt;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="15">written_len<pos:position pos:line="37" pos:column="26"/></name></name> <operator pos:line="37" pos:column="27">&lt;=<pos:position pos:line="37" pos:column="32"/></operator> <name><name pos:line="37" pos:column="30">b<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">-&gt;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="33">len<pos:position pos:line="37" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="38"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name><name pos:line="38" pos:column="9">b<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">written_len<pos:position pos:line="38" pos:column="23"/></name></name> <operator pos:line="38" pos:column="24">==<pos:position pos:line="38" pos:column="26"/></operator> <name><name pos:line="38" pos:column="27">b<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">-&gt;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="30">len<pos:position pos:line="38" pos:column="33"/></name></name></expr>)<pos:position pos:line="38" pos:column="34"/></condition><then pos:line="38" pos:column="34"> <block pos:line="38" pos:column="35">{
        <comment type="block" pos:line="39" pos:column="9">/* written the whole buffer! */</comment>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">logfileFreeBuffer<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><name pos:line="40" pos:column="27">lf<pos:position pos:line="40" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="31">b<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">b<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator> <name pos:line="41" pos:column="13">NULL<pos:position pos:line="41" pos:column="17"/></name></expr>;<pos:position pos:line="41" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="43" pos:column="5">/* Is there more to write? */</comment>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name><name pos:line="44" pos:column="9">ll<pos:position pos:line="44" pos:column="11"/></name><operator pos:line="44" pos:column="11">-&gt;<pos:position pos:line="44" pos:column="16"/></operator><name pos:line="44" pos:column="13">bufs<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">.<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">head<pos:position pos:line="44" pos:column="22"/></name></name> <operator pos:line="44" pos:column="23">==<pos:position pos:line="44" pos:column="25"/></operator> <name pos:line="44" pos:column="26">NULL<pos:position pos:line="44" pos:column="30"/></name></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31"> <block pos:line="44" pos:column="32">{
        <goto pos:line="45" pos:column="9">goto <name pos:line="45" pos:column="14">finish<pos:position pos:line="45" pos:column="20"/></name>;<pos:position pos:line="45" pos:column="21"/></goto>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="47" pos:column="5">/* there is, so schedule more */</comment>

<label><name pos:line="49" pos:column="1">reschedule<pos:position pos:line="49" pos:column="11"/></name>:<pos:position pos:line="49" pos:column="12"/></label>
    <expr_stmt><expr><call><name><name pos:line="50" pos:column="5">Comm<pos:position pos:line="50" pos:column="9"/></name><operator pos:line="50" pos:column="9">::<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">SetSelect<pos:position pos:line="50" pos:column="20"/></name></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name><name pos:line="50" pos:column="21">ll<pos:position pos:line="50" pos:column="23"/></name><operator pos:line="50" pos:column="23">-&gt;<pos:position pos:line="50" pos:column="28"/></operator><name pos:line="50" pos:column="25">wfd<pos:position pos:line="50" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="30">COMM_SELECT_WRITE<pos:position pos:line="50" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="49">logfileHandleWrite<pos:position pos:line="50" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="69">lf<pos:position pos:line="50" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="73">0<pos:position pos:line="50" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">ll<pos:position pos:line="51" pos:column="7"/></name><operator pos:line="51" pos:column="7">-&gt;<pos:position pos:line="51" pos:column="12"/></operator><name pos:line="51" pos:column="9">flush_pending<pos:position pos:line="51" pos:column="22"/></name></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <literal type="number" pos:line="51" pos:column="25">1<pos:position pos:line="51" pos:column="26"/></literal></expr>;<pos:position pos:line="51" pos:column="27"/></expr_stmt>
<label><name pos:line="52" pos:column="1">finish<pos:position pos:line="52" pos:column="7"/></name>:<pos:position pos:line="52" pos:column="8"/></label>
    <return pos:line="53" pos:column="5">return;<pos:position pos:line="53" pos:column="12"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
