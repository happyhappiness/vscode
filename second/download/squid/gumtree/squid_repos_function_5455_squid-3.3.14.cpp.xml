<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5455_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">DiskThreadsIOStrategy<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">init<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">void<pos:position pos:line="2" pos:column="33"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">initialised<pos:position pos:line="4" pos:column="20"/></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="7" pos:column="5">squidaio_ctrl_pool<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">=<pos:position pos:line="7" pos:column="25"/></operator> <call><name pos:line="7" pos:column="26">memPoolCreate<pos:position pos:line="7" pos:column="39"/></name><argument_list pos:line="7" pos:column="39">(<argument><expr><literal type="string" pos:line="7" pos:column="40">"aio_ctrl"<pos:position pos:line="7" pos:column="50"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="52">sizeof<argument_list pos:line="7" pos:column="58">(<argument><expr><name pos:line="7" pos:column="59">squidaio_ctrl_t<pos:position pos:line="7" pos:column="74"/></name></expr></argument>)<pos:position pos:line="7" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="77"/></expr_stmt>

    <expr_stmt><expr><name pos:line="9" pos:column="5">initialised<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <literal type="boolean" pos:line="9" pos:column="19">true<pos:position pos:line="9" pos:column="23"/></literal></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>

    <comment type="block" pos:line="11" pos:column="5">/*
     * We'd like to call squidaio_init() here, but the configuration
     * hasn't been parsed yet and we don't know how many cache_dirs
     * there are, which means we don't know how many threads to start.
     */</comment>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">registerWithCacheManager<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">()<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
