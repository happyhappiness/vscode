<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_358_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">init_challenge<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">domain<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">domain_controller<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">smberr<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">handle<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">!=<pos:position pos:line="6" pos:column="18"/></operator> <name pos:line="6" pos:column="19">NULL<pos:position pos:line="6" pos:column="23"/></name></expr>)<pos:position pos:line="6" pos:column="24"/></condition><then pos:line="6" pos:column="24"> <block pos:line="6" pos:column="25">{
        <return pos:line="7" pos:column="9">return <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr>;<pos:position pos:line="7" pos:column="18"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debug<pos:position pos:line="9" pos:column="10"/></name><argument_list pos:line="9" pos:column="10">(<argument><expr><literal type="string" pos:line="9" pos:column="11">"Connecting to server %s domain %s\n"<pos:position pos:line="9" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="50">domain_controller<pos:position pos:line="9" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="69">domain<pos:position pos:line="9" pos:column="75"/></name></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">handle<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">SMB_Connect_Server<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">NULL<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="39">domain_controller<pos:position pos:line="10" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="58">domain<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">smberr<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <call><name pos:line="11" pos:column="14">SMB_Get_Last_Error<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">()<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">SMB_Get_Error_Msg<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">smberr<pos:position pos:line="12" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="31">errstr<pos:position pos:line="12" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="39">1000<pos:position pos:line="12" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">handle<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">==<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">NULL<pos:position pos:line="14" pos:column="23"/></name></expr>)<pos:position pos:line="14" pos:column="24"/></condition><then pos:line="14" pos:column="24"> <block pos:line="14" pos:column="25">{	<comment type="block" pos:line="14" pos:column="33">/* couldn't connect */</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debug<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><literal type="string" pos:line="15" pos:column="15">"Couldn't connect to SMB Server. Error:%s\n"<pos:position pos:line="15" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="61">errstr<pos:position pos:line="15" pos:column="67"/></name></expr></argument>)<pos:position pos:line="15" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="69"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><literal type="number" pos:line="16" pos:column="16">1<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">SMB_Negotiate<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">handle<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="31">SMB_Prots<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call> <operator pos:line="18" pos:column="42">&lt;<pos:position pos:line="18" pos:column="46"/></operator> <literal type="number" pos:line="18" pos:column="44">0<pos:position pos:line="18" pos:column="45"/></literal></expr>)<pos:position pos:line="18" pos:column="46"/></condition><then pos:line="18" pos:column="46"> <block pos:line="18" pos:column="47">{		<comment type="block" pos:line="18" pos:column="57">/* An error */</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debug<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><literal type="string" pos:line="19" pos:column="15">"Error negotiating protocol with SMB Server\n"<pos:position pos:line="19" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">SMB_Discon<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">handle<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="28">0<pos:position pos:line="20" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="21" pos:column="9">handle<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="18">NULL<pos:position pos:line="21" pos:column="22"/></name></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">2<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">handle<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">Security<pos:position pos:line="24" pos:column="25"/></name></name> <operator pos:line="24" pos:column="26">==<pos:position pos:line="24" pos:column="28"/></operator> <literal type="number" pos:line="24" pos:column="29">0<pos:position pos:line="24" pos:column="30"/></literal></expr>)<pos:position pos:line="24" pos:column="31"/></condition><then pos:line="24" pos:column="31"> <block pos:line="24" pos:column="32">{	<comment type="block" pos:line="24" pos:column="41">/* share-level security, unuseable */</comment>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debug<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><literal type="string" pos:line="25" pos:column="15">"SMB Server uses share-level security .. we need user security.\n"<pos:position pos:line="25" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">SMB_Discon<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">handle<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="28">0<pos:position pos:line="26" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="27" pos:column="9">handle<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="18">NULL<pos:position pos:line="27" pos:column="22"/></name></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">3<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">memcpy<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><name pos:line="30" pos:column="12">challenge<pos:position pos:line="30" pos:column="21"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="23">handle<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">-&gt;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="31">Encrypt_Key<pos:position pos:line="30" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="44">NTLM_NONCE_LEN<pos:position pos:line="30" pos:column="58"/></name></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">SMBencrypt<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><operator pos:line="31" pos:column="16">(<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">unsigned<pos:position pos:line="31" pos:column="25"/></name> <name pos:line="31" pos:column="26">char<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">*<pos:position pos:line="31" pos:column="32"/></operator><operator pos:line="31" pos:column="32">)<pos:position pos:line="31" pos:column="33"/></operator><literal type="string" pos:line="31" pos:column="33">""<pos:position pos:line="31" pos:column="35"/></literal></expr></argument>,<argument><expr><name pos:line="31" pos:column="36">challenge<pos:position pos:line="31" pos:column="45"/></name></expr></argument>,<argument><expr><name pos:line="31" pos:column="46">lmencoded_empty_pass<pos:position pos:line="31" pos:column="66"/></name></expr></argument>)<pos:position pos:line="31" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">SMBNTencrypt<pos:position pos:line="32" pos:column="17"/></name><argument_list pos:line="32" pos:column="17">(<argument><expr><operator pos:line="32" pos:column="18">(<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">unsigned<pos:position pos:line="32" pos:column="27"/></name> <name pos:line="32" pos:column="28">char<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">*<pos:position pos:line="32" pos:column="34"/></operator><operator pos:line="32" pos:column="34">)<pos:position pos:line="32" pos:column="35"/></operator><literal type="string" pos:line="32" pos:column="35">""<pos:position pos:line="32" pos:column="37"/></literal></expr></argument>,<argument><expr><name pos:line="32" pos:column="38">challenge<pos:position pos:line="32" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="32" pos:column="48">ntencoded_empty_pass<pos:position pos:line="32" pos:column="68"/></name></expr></argument>)<pos:position pos:line="32" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="70"/></expr_stmt>
    <return pos:line="33" pos:column="5">return <expr><literal type="number" pos:line="33" pos:column="12">0<pos:position pos:line="33" pos:column="13"/></literal></expr>;<pos:position pos:line="33" pos:column="14"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
