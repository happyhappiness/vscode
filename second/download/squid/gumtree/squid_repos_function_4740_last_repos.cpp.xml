<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4740_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">size_type<pos:position pos:line="1" pos:column="16"/></name></name></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">find<pos:position pos:line="2" pos:column="11"/></name></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">char<pos:position pos:line="2" pos:column="16"/></name></type> <name pos:line="2" pos:column="17">c<pos:position pos:line="2" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="20">size_type<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">startPos<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list> <specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><operator pos:line="4" pos:column="5">++<pos:position pos:line="4" pos:column="7"/></operator><name><name pos:line="4" pos:column="7">stats<pos:position pos:line="4" pos:column="12"/></name><operator pos:line="4" pos:column="12">.<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">find<pos:position pos:line="4" pos:column="17"/></name></name></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">startPos<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">==<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">npos<pos:position pos:line="6" pos:column="25"/></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26"> <comment type="line" pos:line="6" pos:column="27">// can't find anything if we look past end of SBuf</comment>
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">npos<pos:position pos:line="7" pos:column="20"/></name></expr>;<pos:position pos:line="7" pos:column="21"/></return></block></then></if>

    <comment type="line" pos:line="9" pos:column="5">// std::string returns npos if needle is outside hay</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">startPos<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">&gt;<pos:position pos:line="10" pos:column="22"/></operator> <call><name pos:line="10" pos:column="20">length<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">()<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><name pos:line="11" pos:column="16">npos<pos:position pos:line="11" pos:column="20"/></name></expr>;<pos:position pos:line="11" pos:column="21"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <name pos:line="13" pos:column="11">void<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">i<pos:position pos:line="13" pos:column="18"/></name> <init pos:line="13" pos:column="19">= <expr><call><name pos:line="13" pos:column="21">memchr<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><call><name pos:line="13" pos:column="28">buf<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">()<pos:position pos:line="13" pos:column="33"/></argument_list></call><operator pos:line="13" pos:column="33">+<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">startPos<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="44">(<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="45">int<pos:position pos:line="13" pos:column="48"/></name><operator pos:line="13" pos:column="48">)<pos:position pos:line="13" pos:column="49"/></operator><name pos:line="13" pos:column="49">c<pos:position pos:line="13" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="52">(<pos:position pos:line="13" pos:column="53"/></operator><name pos:line="13" pos:column="53">size_type<pos:position pos:line="13" pos:column="62"/></name><operator pos:line="13" pos:column="62">)<pos:position pos:line="13" pos:column="63"/></operator><call><name pos:line="13" pos:column="63">length<pos:position pos:line="13" pos:column="69"/></name><argument_list pos:line="13" pos:column="69">()<pos:position pos:line="13" pos:column="71"/></argument_list></call><operator pos:line="13" pos:column="71">-<pos:position pos:line="13" pos:column="72"/></operator><name pos:line="13" pos:column="72">startPos<pos:position pos:line="13" pos:column="80"/></name></expr></argument>)<pos:position pos:line="13" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="82"/></decl_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">i<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">==<pos:position pos:line="15" pos:column="13"/></operator> <name pos:line="15" pos:column="14">NULL<pos:position pos:line="15" pos:column="18"/></name></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19">
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">npos<pos:position pos:line="16" pos:column="20"/></name></expr>;<pos:position pos:line="16" pos:column="21"/></return></block></then></if>

    <return pos:line="18" pos:column="5">return <expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><cast type="static" pos:line="18" pos:column="13">static_cast<argument_list type="generic" pos:line="18" pos:column="24">&lt;<argument><expr><specifier pos:line="18" pos:column="25">const<pos:position pos:line="18" pos:column="30"/></specifier> <name pos:line="18" pos:column="31">char<pos:position pos:line="18" pos:column="35"/></name> <operator pos:line="18" pos:column="36">*<pos:position pos:line="18" pos:column="37"/></operator></expr></argument>&gt;<pos:position pos:line="18" pos:column="41"/></argument_list><argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">i<pos:position pos:line="18" pos:column="40"/></name></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></cast><operator pos:line="18" pos:column="41">-<pos:position pos:line="18" pos:column="42"/></operator><call><name pos:line="18" pos:column="42">buf<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">()<pos:position pos:line="18" pos:column="47"/></argument_list></call><operator pos:line="18" pos:column="47">)<pos:position pos:line="18" pos:column="48"/></operator></expr>;<pos:position pos:line="18" pos:column="49"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
