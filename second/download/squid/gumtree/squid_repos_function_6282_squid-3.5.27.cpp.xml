<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6282_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IpcIoFile<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">trackPendingRequest<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">unsigned<pos:position pos:line="2" pos:column="46"/></name> <name pos:line="2" pos:column="47">int<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">id<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">IpcIoPendingRequest<pos:position pos:line="2" pos:column="74"/></name> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier><specifier pos:line="2" pos:column="76">const<pos:position pos:line="2" pos:column="81"/></specifier></type> <name pos:line="2" pos:column="82">pending<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="90"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name><name pos:line="4" pos:column="11">std<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name><name pos:line="4" pos:column="16">pair<pos:position pos:line="4" pos:column="20"/></name><argument_list type="generic" pos:line="4" pos:column="20">&lt;<argument><expr><name><name pos:line="4" pos:column="21">RequestMap<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">::<pos:position pos:line="4" pos:column="33"/></operator><name pos:line="4" pos:column="33">iterator<pos:position pos:line="4" pos:column="41"/></name></name></expr></argument>,<argument><expr><name pos:line="4" pos:column="42">bool<pos:position pos:line="4" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="4" pos:column="50"/></argument_list></name></name></type> <name pos:line="4" pos:column="48">result<pos:position pos:line="4" pos:column="54"/></name> <init pos:line="4" pos:column="55">=
        <expr><call><name><name pos:line="5" pos:column="9">newerRequests<pos:position pos:line="5" pos:column="22"/></name><operator pos:line="5" pos:column="22">-&gt;<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="24">insert<pos:position pos:line="5" pos:column="30"/></name></name><argument_list pos:line="5" pos:column="30">(<argument><expr><call><name><name pos:line="5" pos:column="31">std<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">::<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="36">make_pair<pos:position pos:line="5" pos:column="45"/></name></name><argument_list pos:line="5" pos:column="45">(<argument><expr><name pos:line="5" pos:column="46">id<pos:position pos:line="5" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="50">pending<pos:position pos:line="5" pos:column="57"/></name></expr></argument>)<pos:position pos:line="5" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="60"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name><name pos:line="6" pos:column="10">result<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">.<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">second<pos:position pos:line="6" pos:column="23"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt> <comment type="line" pos:line="6" pos:column="26">// failures means that id was not unique</comment>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">timeoutCheckScheduled<pos:position pos:line="7" pos:column="31"/></name></expr>)<pos:position pos:line="7" pos:column="32"/></condition><then pos:line="7" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="9">scheduleTimeoutCheck<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">()<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt></block></then></if>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
