<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6718_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">esiProcessResult_t<pos:position pos:line="1" pos:column="19"/></name></type>
<name><name pos:line="2" pos:column="1">ESIContext<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">process<pos:position pos:line="2" pos:column="20"/></name></name> <parameter_list pos:line="2" pos:column="21">()<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* parsing:
     * read through buffered, skipping plain text, and skipping any
     * &lt;...&gt; entry that is not an &lt;esi: entry.
     * when it's found, hand an esiLiteral of the preceding data to our current
     * context
     */</comment>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">parserState<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">.<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">parsing<pos:position pos:line="11" pos:column="28"/></name></name></expr>)<pos:position pos:line="11" pos:column="29"/></condition><then pos:line="11" pos:column="29"> <block pos:line="11" pos:column="30">{
        <comment type="block" pos:line="12" pos:column="9">/* in middle of parsing - finish here */</comment>
        <return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">ESI_PROCESS_PENDING_MAYFAIL<pos:position pos:line="13" pos:column="43"/></name></expr>;<pos:position pos:line="13" pos:column="44"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">assert<pos:position pos:line="16" pos:column="11"/></name> <argument_list pos:line="16" pos:column="12">(<argument><expr><name><name pos:line="16" pos:column="13">flags<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">.<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">finished<pos:position pos:line="16" pos:column="27"/></name></name> <operator pos:line="16" pos:column="28">==<pos:position pos:line="16" pos:column="30"/></operator> <literal type="number" pos:line="16" pos:column="31">0<pos:position pos:line="16" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name> <argument_list pos:line="18" pos:column="12">(<argument><expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name><name pos:line="18" pos:column="14">flags<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">.<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">error<pos:position pos:line="18" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><call><name pos:line="20" pos:column="10">hasCachedAST<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">()<pos:position pos:line="20" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="9">parse<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">()<pos:position pos:line="21" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="17"/></expr_stmt></block></then>
    <elseif pos:line="22" pos:column="5">else <if pos:line="22" pos:column="10">if <condition pos:line="22" pos:column="13">(<expr><operator pos:line="22" pos:column="14">!<pos:position pos:line="22" pos:column="15"/></operator><name><name pos:line="22" pos:column="15">flags<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">.<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">finishedtemplate<pos:position pos:line="22" pos:column="37"/></name></name></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="9">getCachedAST<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">()<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt></block></then></if></elseif></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">flags<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">.<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">error<pos:position pos:line="25" pos:column="20"/></name></name></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21"> <block pos:line="25" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">86<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="20">5<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="23">"ESIContext::process: Parsing failed"<pos:position pos:line="26" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">finishChildren<pos:position pos:line="27" pos:column="23"/></name> <argument_list pos:line="27" pos:column="24">()<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="28" pos:column="9">parserState<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">.<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="21">popAll<pos:position pos:line="28" pos:column="27"/></name></name><argument_list pos:line="28" pos:column="27">()<pos:position pos:line="28" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
        <return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">ESI_PROCESS_FAILED<pos:position pos:line="29" pos:column="34"/></name></expr>;<pos:position pos:line="29" pos:column="35"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">!<pos:position pos:line="32" pos:column="10"/></operator><name><name pos:line="32" pos:column="10">flags<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">.<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">finishedtemplate<pos:position pos:line="32" pos:column="32"/></name></name> <operator pos:line="32" pos:column="33">&amp;&amp;<pos:position pos:line="32" pos:column="43"/></operator> <operator pos:line="32" pos:column="36">!<pos:position pos:line="32" pos:column="37"/></operator><call><name><name pos:line="32" pos:column="37">incoming<pos:position pos:line="32" pos:column="45"/></name><operator pos:line="32" pos:column="45">.<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="46">getRaw<pos:position pos:line="32" pos:column="52"/></name></name><argument_list pos:line="32" pos:column="52">()<pos:position pos:line="32" pos:column="54"/></argument_list></call> <operator pos:line="32" pos:column="55">&amp;&amp;<pos:position pos:line="32" pos:column="65"/></operator> <operator pos:line="32" pos:column="58">!<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="59">cachedASTInUse<pos:position pos:line="32" pos:column="73"/></name></expr>)<pos:position pos:line="32" pos:column="74"/></condition><then pos:line="32" pos:column="74"> <block pos:line="32" pos:column="75">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">buffered<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <operator pos:line="33" pos:column="20">new<pos:position pos:line="33" pos:column="23"/></operator> <name pos:line="33" pos:column="24">ESISegment<pos:position pos:line="33" pos:column="34"/></name></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="34" pos:column="9">incoming<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="20">buffered<pos:position pos:line="34" pos:column="28"/></name></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><operator pos:line="37" pos:column="9">!<pos:position pos:line="37" pos:column="10"/></operator><name><name pos:line="37" pos:column="10">flags<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">.<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">finishedtemplate<pos:position pos:line="37" pos:column="32"/></name></name> <operator pos:line="37" pos:column="33">&amp;&amp;<pos:position pos:line="37" pos:column="43"/></operator> <operator pos:line="37" pos:column="36">!<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="37">cachedASTInUse<pos:position pos:line="37" pos:column="51"/></name></expr>)<pos:position pos:line="37" pos:column="52"/></condition><then pos:line="37" pos:column="52"> <block pos:line="37" pos:column="53">{
        <return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">ESI_PROCESS_PENDING_MAYFAIL<pos:position pos:line="38" pos:column="43"/></name></expr>;<pos:position pos:line="38" pos:column="44"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">assert<pos:position pos:line="41" pos:column="11"/></name> <argument_list pos:line="41" pos:column="12">(<argument><expr><name><name pos:line="41" pos:column="13">flags<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">.<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">finishedtemplate<pos:position pos:line="41" pos:column="35"/></name></name> <operator pos:line="41" pos:column="36">||<pos:position pos:line="41" pos:column="38"/></operator> <name pos:line="41" pos:column="39">cachedASTInUse<pos:position pos:line="41" pos:column="53"/></name></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">updateCachedAST<pos:position pos:line="42" pos:column="20"/></name><argument_list pos:line="42" pos:column="20">()<pos:position pos:line="42" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>
    <comment type="block" pos:line="43" pos:column="5">/* ok, we've done all we can with the data. What can we process now?
     */</comment>
    <block pos:line="45" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="46" pos:column="9">esiProcessResult_t<pos:position pos:line="46" pos:column="27"/></name></type> <name pos:line="46" pos:column="28">status<pos:position pos:line="46" pos:column="34"/></name></decl>;<pos:position pos:line="46" pos:column="35"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">PROF_start<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">esiProcessing<pos:position pos:line="47" pos:column="33"/></name></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="48" pos:column="9">processing<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <literal type="boolean" pos:line="48" pos:column="22">true<pos:position pos:line="48" pos:column="26"/></literal></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">status<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <call><name><name pos:line="49" pos:column="18">tree<pos:position pos:line="49" pos:column="22"/></name><operator pos:line="49" pos:column="22">-&gt;<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="24">process<pos:position pos:line="49" pos:column="31"/></name></name><argument_list pos:line="49" pos:column="31">(<argument><expr><literal type="number" pos:line="49" pos:column="32">0<pos:position pos:line="49" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="50" pos:column="9">processing<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator> <literal type="boolean" pos:line="50" pos:column="22">false<pos:position pos:line="50" pos:column="27"/></literal></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>

        <switch pos:line="52" pos:column="9">switch <condition pos:line="52" pos:column="16">(<expr><name pos:line="52" pos:column="17">status<pos:position pos:line="52" pos:column="23"/></name></expr>)<pos:position pos:line="52" pos:column="24"/></condition> <block pos:line="52" pos:column="25">{

        <case pos:line="54" pos:column="9">case <expr><name pos:line="54" pos:column="14">ESI_PROCESS_COMPLETE<pos:position pos:line="54" pos:column="34"/></name></expr>:<pos:position pos:line="54" pos:column="35"/></case>
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">debugs<pos:position pos:line="55" pos:column="19"/></name><argument_list pos:line="55" pos:column="19">(<argument><expr><literal type="number" pos:line="55" pos:column="20">86<pos:position pos:line="55" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="24">5<pos:position pos:line="55" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="27">"esiProcess: tree Processed OK"<pos:position pos:line="55" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="60"/></expr_stmt>
            <break pos:line="56" pos:column="13">break;<pos:position pos:line="56" pos:column="19"/></break>

        <case pos:line="58" pos:column="9">case <expr><name pos:line="58" pos:column="14">ESI_PROCESS_PENDING_WONTFAIL<pos:position pos:line="58" pos:column="42"/></name></expr>:<pos:position pos:line="58" pos:column="43"/></case>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">debugs<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><literal type="number" pos:line="59" pos:column="20">86<pos:position pos:line="59" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="24">5<pos:position pos:line="59" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="27">"esiProcess: tree Processed PENDING OK"<pos:position pos:line="59" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="68"/></expr_stmt>
            <break pos:line="60" pos:column="13">break;<pos:position pos:line="60" pos:column="19"/></break>

        <case pos:line="62" pos:column="9">case <expr><name pos:line="62" pos:column="14">ESI_PROCESS_PENDING_MAYFAIL<pos:position pos:line="62" pos:column="41"/></name></expr>:<pos:position pos:line="62" pos:column="42"/></case>
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">debugs<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><literal type="number" pos:line="63" pos:column="20">86<pos:position pos:line="63" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="24">5<pos:position pos:line="63" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="27">"esiProcess: tree Processed PENDING UNKNOWN"<pos:position pos:line="63" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="73"/></expr_stmt>
            <break pos:line="64" pos:column="13">break;<pos:position pos:line="64" pos:column="19"/></break>

        <case pos:line="66" pos:column="9">case <expr><name pos:line="66" pos:column="14">ESI_PROCESS_FAILED<pos:position pos:line="66" pos:column="32"/></name></expr>:<pos:position pos:line="66" pos:column="33"/></case>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">debugs<pos:position pos:line="67" pos:column="19"/></name><argument_list pos:line="67" pos:column="19">(<argument><expr><literal type="number" pos:line="67" pos:column="20">86<pos:position pos:line="67" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="67" pos:column="24">DBG_CRITICAL<pos:position pos:line="67" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="38">"esiProcess: tree Processed FAILED"<pos:position pos:line="67" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="75"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">setError<pos:position pos:line="68" pos:column="21"/></name><argument_list pos:line="68" pos:column="21">()<pos:position pos:line="68" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="24"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="70" pos:column="13">setErrorMessage<pos:position pos:line="70" pos:column="28"/></name><argument_list pos:line="70" pos:column="28">(<argument><expr><literal type="string" pos:line="70" pos:column="29">"esiProcess: ESI template Processing failed."<pos:position pos:line="70" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="76"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="72" pos:column="13">PROF_stop<pos:position pos:line="72" pos:column="22"/></name><argument_list pos:line="72" pos:column="22">(<argument><expr><name pos:line="72" pos:column="23">esiProcessing<pos:position pos:line="72" pos:column="36"/></name></expr></argument>)<pos:position pos:line="72" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="38"/></expr_stmt>

            <return pos:line="74" pos:column="13">return <expr><name pos:line="74" pos:column="20">ESI_PROCESS_FAILED<pos:position pos:line="74" pos:column="38"/></name></expr>;<pos:position pos:line="74" pos:column="39"/></return>

            <break pos:line="76" pos:column="13">break;<pos:position pos:line="76" pos:column="19"/></break>
        }<pos:position pos:line="77" pos:column="10"/></block></switch>

        <if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name pos:line="79" pos:column="13">status<pos:position pos:line="79" pos:column="19"/></name> <operator pos:line="79" pos:column="20">!=<pos:position pos:line="79" pos:column="22"/></operator> <name pos:line="79" pos:column="23">ESI_PROCESS_PENDING_MAYFAIL<pos:position pos:line="79" pos:column="50"/></name> <operator pos:line="79" pos:column="51">&amp;&amp;<pos:position pos:line="79" pos:column="61"/></operator> <operator pos:line="79" pos:column="54">(<pos:position pos:line="79" pos:column="55"/></operator><name><name pos:line="79" pos:column="55">flags<pos:position pos:line="79" pos:column="60"/></name><operator pos:line="79" pos:column="60">.<pos:position pos:line="79" pos:column="61"/></operator><name pos:line="79" pos:column="61">finishedtemplate<pos:position pos:line="79" pos:column="77"/></name></name> <operator pos:line="79" pos:column="78">||<pos:position pos:line="79" pos:column="80"/></operator> <name pos:line="79" pos:column="81">cachedASTInUse<pos:position pos:line="79" pos:column="95"/></name><operator pos:line="79" pos:column="95">)<pos:position pos:line="79" pos:column="96"/></operator></expr>)<pos:position pos:line="79" pos:column="97"/></condition><then pos:line="79" pos:column="97"> <block pos:line="79" pos:column="98">{
            <comment type="block" pos:line="80" pos:column="13">/* We've read the entire template, and no nodes will
             * return failure
             */</comment>
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">debugs<pos:position pos:line="83" pos:column="19"/></name><argument_list pos:line="83" pos:column="19">(<argument><expr><literal type="number" pos:line="83" pos:column="20">86<pos:position pos:line="83" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="83" pos:column="24">5<pos:position pos:line="83" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="27">"esiProcess, request will succeed"<pos:position pos:line="83" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="63"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="84" pos:column="13">flags<pos:position pos:line="84" pos:column="18"/></name><operator pos:line="84" pos:column="18">.<pos:position pos:line="84" pos:column="19"/></operator><name pos:line="84" pos:column="19">oktosend<pos:position pos:line="84" pos:column="27"/></name></name> <operator pos:line="84" pos:column="28">=<pos:position pos:line="84" pos:column="29"/></operator> <literal type="number" pos:line="84" pos:column="30">1<pos:position pos:line="84" pos:column="31"/></literal></expr>;<pos:position pos:line="84" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="85" pos:column="10"/></block></then></if>

        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">status<pos:position pos:line="87" pos:column="19"/></name> <operator pos:line="87" pos:column="20">==<pos:position pos:line="87" pos:column="22"/></operator> <name pos:line="87" pos:column="23">ESI_PROCESS_COMPLETE<pos:position pos:line="87" pos:column="43"/></name>
                <operator pos:line="88" pos:column="17">&amp;&amp;<pos:position pos:line="88" pos:column="27"/></operator> <operator pos:line="88" pos:column="20">(<pos:position pos:line="88" pos:column="21"/></operator><name><name pos:line="88" pos:column="21">flags<pos:position pos:line="88" pos:column="26"/></name><operator pos:line="88" pos:column="26">.<pos:position pos:line="88" pos:column="27"/></operator><name pos:line="88" pos:column="27">finishedtemplate<pos:position pos:line="88" pos:column="43"/></name></name> <operator pos:line="88" pos:column="44">||<pos:position pos:line="88" pos:column="46"/></operator> <name pos:line="88" pos:column="47">cachedASTInUse<pos:position pos:line="88" pos:column="61"/></name><operator pos:line="88" pos:column="61">)<pos:position pos:line="88" pos:column="62"/></operator></expr>)<pos:position pos:line="88" pos:column="63"/></condition><then pos:line="88" pos:column="63"> <block pos:line="88" pos:column="64">{
            <comment type="block" pos:line="89" pos:column="13">/* we've finished all processing. Render and send. */</comment>
            <expr_stmt><expr><call><name pos:line="90" pos:column="13">debugs<pos:position pos:line="90" pos:column="19"/></name><argument_list pos:line="90" pos:column="19">(<argument><expr><literal type="number" pos:line="90" pos:column="20">86<pos:position pos:line="90" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="24">5<pos:position pos:line="90" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="27">"esiProcess, processing complete"<pos:position pos:line="90" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="91" pos:column="13">flags<pos:position pos:line="91" pos:column="18"/></name><operator pos:line="91" pos:column="18">.<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="19">finished<pos:position pos:line="91" pos:column="27"/></name></name> <operator pos:line="91" pos:column="28">=<pos:position pos:line="91" pos:column="29"/></operator> <literal type="number" pos:line="91" pos:column="30">1<pos:position pos:line="91" pos:column="31"/></literal></expr>;<pos:position pos:line="91" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="92" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="94" pos:column="9">PROF_stop<pos:position pos:line="94" pos:column="18"/></name><argument_list pos:line="94" pos:column="18">(<argument><expr><name pos:line="94" pos:column="19">esiProcessing<pos:position pos:line="94" pos:column="32"/></name></expr></argument>)<pos:position pos:line="94" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="34"/></expr_stmt>
        <return pos:line="95" pos:column="9">return <expr><name pos:line="95" pos:column="16">status<pos:position pos:line="95" pos:column="22"/></name></expr>;<pos:position pos:line="95" pos:column="23"/></return> <comment type="block" pos:line="95" pos:column="24">/* because we have no callbacks */</comment>
    }<pos:position pos:line="96" pos:column="6"/></block>
}<pos:position pos:line="97" pos:column="2"/></block></function></unit>
