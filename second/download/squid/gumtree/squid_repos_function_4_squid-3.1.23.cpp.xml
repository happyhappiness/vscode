<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
<name pos:line="2" pos:column="1">xstrtok<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier><modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">str<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">del<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">str<pos:position pos:line="4" pos:column="13"/></name></expr>)<pos:position pos:line="4" pos:column="14"/></condition><then pos:line="4" pos:column="14"> <block pos:line="4" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">p<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><call><name pos:line="5" pos:column="19">strchr<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><operator pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="27">str<pos:position pos:line="5" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="32">del<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="37"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">tok<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><operator pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">str<pos:position pos:line="6" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">len<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">p<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15"> <block pos:line="9" pos:column="16">{
            <expr_stmt><expr><operator pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></operator><name pos:line="10" pos:column="14">str<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">p<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">+<pos:position pos:line="10" pos:column="23"/></operator> <literal type="number" pos:line="10" pos:column="24">1<pos:position pos:line="10" pos:column="25"/></literal></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">p<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <literal type="char" pos:line="11" pos:column="18">'\0'<pos:position pos:line="11" pos:column="22"/></literal></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="12" pos:column="10"/></block></then> <else pos:line="12" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><operator pos:line="13" pos:column="13">*<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">str<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">NULL<pos:position pos:line="13" pos:column="24"/></name></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt></block></else></if>

        <comment type="block" pos:line="15" pos:column="9">/* trim */</comment>
        <expr_stmt><expr><name pos:line="16" pos:column="9">len<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">strlen<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name pos:line="16" pos:column="22">tok<pos:position pos:line="16" pos:column="25"/></name></expr></argument>)<pos:position pos:line="16" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt>

        <while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><name pos:line="18" pos:column="16">len<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">&amp;&amp;<pos:position pos:line="18" pos:column="30"/></operator> <call><name pos:line="18" pos:column="23">xisspace<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name><name pos:line="18" pos:column="32">tok<pos:position pos:line="18" pos:column="35"/></name><index pos:line="18" pos:column="35">[<expr><name pos:line="18" pos:column="36">len<pos:position pos:line="18" pos:column="39"/></name> <operator pos:line="18" pos:column="40">-<pos:position pos:line="18" pos:column="41"/></operator> <literal type="number" pos:line="18" pos:column="42">1<pos:position pos:line="18" pos:column="43"/></literal></expr>]<pos:position pos:line="18" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="46"/></condition>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="19" pos:column="13">tok<pos:position pos:line="19" pos:column="16"/></name><index pos:line="19" pos:column="16">[<expr><operator pos:line="19" pos:column="17">--<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">len<pos:position pos:line="19" pos:column="22"/></name></expr>]<pos:position pos:line="19" pos:column="23"/></index></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <literal type="char" pos:line="19" pos:column="26">'\0'<pos:position pos:line="19" pos:column="30"/></literal></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt></block></while>

        <while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><call><name pos:line="21" pos:column="16">xisspace<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><operator pos:line="21" pos:column="25">*<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="26">tok<pos:position pos:line="21" pos:column="29"/></name></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="31"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="13">tok<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">++<pos:position pos:line="22" pos:column="18"/></operator></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt></block></while>

        <return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">tok<pos:position pos:line="24" pos:column="19"/></name></expr>;<pos:position pos:line="24" pos:column="20"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then> <else pos:line="25" pos:column="7">else
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><literal type="string" pos:line="26" pos:column="16">""<pos:position pos:line="26" pos:column="18"/></literal></expr>;<pos:position pos:line="26" pos:column="19"/></return></block></else></if>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
