<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1020_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">parseConfigFile<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">file_name<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">err_count<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">5<pos:position pos:line="6" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="15">4<pos:position pos:line="6" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="18">HERE<pos:position pos:line="6" pos:column="22"/></name></expr></argument>)<pos:position pos:line="6" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">configFreeMemory<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">()<pos:position pos:line="8" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="10" pos:column="5">ACLMethodData<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">::<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">ThePurgeCount<pos:position pos:line="10" pos:column="33"/></name></name> <operator pos:line="10" pos:column="34">=<pos:position pos:line="10" pos:column="35"/></operator> <literal type="number" pos:line="10" pos:column="36">0<pos:position pos:line="10" pos:column="37"/></literal></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">default_all<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">()<pos:position pos:line="11" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">err_count<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">parseOneConfigFile<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">file_name<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="47">0<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">defaults_if_none<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">()<pos:position pos:line="15" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">defaults_postscriptum<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">()<pos:position pos:line="17" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="19" pos:column="5">/*
     * We must call configDoConfigure() before leave_suid() because
     * configDoConfigure() is where we turn username strings into
     * uid values.
     */</comment>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">configDoConfigure<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">()<pos:position pos:line="24" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name><name pos:line="26" pos:column="10">Config<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">.<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">chroot_dir<pos:position pos:line="26" pos:column="27"/></name></name></expr>)<pos:position pos:line="26" pos:column="28"/></condition><then pos:line="26" pos:column="28"> <block pos:line="26" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">leave_suid<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">()<pos:position pos:line="27" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">setUmask<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><name><name pos:line="28" pos:column="18">Config<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">.<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">umask<pos:position pos:line="28" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">_db_init<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><name><name pos:line="29" pos:column="18">Debug<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">::<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="25">cache_log<pos:position pos:line="29" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="36">Debug<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">::<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="43">debugOptions<pos:position pos:line="29" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">enter_suid<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">()<pos:position pos:line="30" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">opt_send_signal<pos:position pos:line="33" pos:column="24"/></name> <operator pos:line="33" pos:column="25">==<pos:position pos:line="33" pos:column="27"/></operator> <operator pos:line="33" pos:column="28">-<pos:position pos:line="33" pos:column="29"/></operator><literal type="number" pos:line="33" pos:column="29">1<pos:position pos:line="33" pos:column="30"/></literal></expr>)<pos:position pos:line="33" pos:column="31"/></condition><then pos:line="33" pos:column="31"> <block pos:line="33" pos:column="32">{
        <expr_stmt><expr><call><name><name pos:line="34" pos:column="9">Mgr<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">::<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">RegisterAction<pos:position pos:line="34" pos:column="28"/></name></name><argument_list pos:line="34" pos:column="28">(<argument><expr><literal type="string" pos:line="34" pos:column="29">"config"<pos:position pos:line="34" pos:column="37"/></literal></expr></argument>,
                            <argument><expr><literal type="string" pos:line="35" pos:column="29">"Current Squid Configuration"<pos:position pos:line="35" pos:column="58"/></literal></expr></argument>,
                            <argument><expr><name pos:line="36" pos:column="29">dump_config<pos:position pos:line="36" pos:column="40"/></name></expr></argument>,
                            <argument><expr><literal type="number" pos:line="37" pos:column="29">1<pos:position pos:line="37" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="32">1<pos:position pos:line="37" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <return pos:line="40" pos:column="5">return <expr><name pos:line="40" pos:column="12">err_count<pos:position pos:line="40" pos:column="21"/></name></expr>;<pos:position pos:line="40" pos:column="22"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
