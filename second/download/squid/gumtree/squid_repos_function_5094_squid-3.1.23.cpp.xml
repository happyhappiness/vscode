<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5094_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">squidaio_init<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">void<pos:position pos:line="2" pos:column="19"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">squidaio_thread_t<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">threadp<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">squidaio_initialised<pos:position pos:line="7" pos:column="29"/></name></expr>)<pos:position pos:line="7" pos:column="30"/></condition><then pos:line="7" pos:column="30">
        <block type="pseudo"><return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><call><name pos:line="10" pos:column="10">DuplicateHandle<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><call><name pos:line="10" pos:column="26">GetCurrentProcess<pos:position pos:line="10" pos:column="43"/></name><argument_list pos:line="10" pos:column="43">()<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr></argument>, <comment type="block" pos:line="10" pos:column="47">/* pseudo handle, don't close */</comment>
                         <argument><expr><call><name pos:line="11" pos:column="26">GetCurrentThread<pos:position pos:line="11" pos:column="42"/></name><argument_list pos:line="11" pos:column="42">()<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr></argument>,  <comment type="block" pos:line="11" pos:column="47">/* pseudo handle to copy */</comment>
                         <argument><expr><call><name pos:line="12" pos:column="26">GetCurrentProcess<pos:position pos:line="12" pos:column="43"/></name><argument_list pos:line="12" pos:column="43">()<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr></argument>, <comment type="block" pos:line="12" pos:column="47">/* pseudo handle, don't close */</comment>
                         <argument><expr><operator pos:line="13" pos:column="26">&amp;<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="27">main_thread<pos:position pos:line="13" pos:column="38"/></name></expr></argument>,
                         <argument><expr><literal type="number" pos:line="14" pos:column="26">0<pos:position pos:line="14" pos:column="27"/></literal></expr></argument>,                   <comment type="block" pos:line="14" pos:column="47">/* required access */</comment>
                         <argument><expr><name pos:line="15" pos:column="26">FALSE<pos:position pos:line="15" pos:column="31"/></name></expr></argument>,               <comment type="block" pos:line="15" pos:column="47">/* child process's don't inherit the handle */</comment>
                         <argument><expr><name pos:line="16" pos:column="26">DUPLICATE_SAME_ACCESS<pos:position pos:line="16" pos:column="47"/></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="49"/></condition><then pos:line="16" pos:column="49"> <block pos:line="16" pos:column="50">{
        <comment type="block" pos:line="17" pos:column="9">/* spit errors */</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">fatal<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><literal type="string" pos:line="18" pos:column="15">"Couldn't get current thread handle"<pos:position pos:line="18" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="21" pos:column="5">/* Initialize request queue */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">(<pos:position pos:line="22" pos:column="10"/></operator><name><name pos:line="22" pos:column="10">request_queue<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">.<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">mutex<pos:position pos:line="22" pos:column="29"/></name></name> <operator pos:line="22" pos:column="30">=<pos:position pos:line="22" pos:column="31"/></operator> <call><name pos:line="22" pos:column="32">CreateMutex<pos:position pos:line="22" pos:column="43"/></name><argument_list pos:line="22" pos:column="43">(<argument><expr><name pos:line="22" pos:column="44">NULL<pos:position pos:line="22" pos:column="48"/></name></expr></argument>,    <comment type="block" pos:line="22" pos:column="53">/* no inheritance */</comment>
                                           <argument><expr><name pos:line="23" pos:column="44">FALSE<pos:position pos:line="23" pos:column="49"/></name></expr></argument>,   <comment type="block" pos:line="23" pos:column="53">/* start unowned (as per mutex_init) */</comment>
                                           <argument><expr><name pos:line="24" pos:column="44">NULL<pos:position pos:line="24" pos:column="48"/></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call>    <comment type="block" pos:line="24" pos:column="53">/* no name */</comment>
        <operator pos:line="25" pos:column="9">)<pos:position pos:line="25" pos:column="10"/></operator> <operator pos:line="25" pos:column="11">==<pos:position pos:line="25" pos:column="13"/></operator> <name pos:line="25" pos:column="14">NULL<pos:position pos:line="25" pos:column="18"/></name></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19"> <block pos:line="25" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">fatal<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><literal type="string" pos:line="26" pos:column="15">"Failed to create mutex"<pos:position pos:line="26" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name><name pos:line="29" pos:column="10">request_queue<pos:position pos:line="29" pos:column="23"/></name><operator pos:line="29" pos:column="23">.<pos:position pos:line="29" pos:column="24"/></operator><name pos:line="29" pos:column="24">cond<pos:position pos:line="29" pos:column="28"/></name></name> <operator pos:line="29" pos:column="29">=<pos:position pos:line="29" pos:column="30"/></operator> <call><name pos:line="29" pos:column="31">CreateEvent<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name pos:line="29" pos:column="43">NULL<pos:position pos:line="29" pos:column="47"/></name></expr></argument>,     <comment type="block" pos:line="29" pos:column="53">/* no inheritance */</comment>
                                          <argument><expr><name pos:line="30" pos:column="43">FALSE<pos:position pos:line="30" pos:column="48"/></name></expr></argument>,    <comment type="block" pos:line="30" pos:column="53">/* auto signal reset - which I think is pthreads like ? */</comment>
                                          <argument><expr><name pos:line="31" pos:column="43">FALSE<pos:position pos:line="31" pos:column="48"/></name></expr></argument>,    <comment type="block" pos:line="31" pos:column="53">/* start non signaled */</comment>
                                          <argument><expr><name pos:line="32" pos:column="43">NULL<pos:position pos:line="32" pos:column="47"/></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call>     <comment type="block" pos:line="32" pos:column="53">/* no name */</comment>
        <operator pos:line="33" pos:column="9">)<pos:position pos:line="33" pos:column="10"/></operator> <operator pos:line="33" pos:column="11">==<pos:position pos:line="33" pos:column="13"/></operator> <name pos:line="33" pos:column="14">NULL<pos:position pos:line="33" pos:column="18"/></name></expr>)<pos:position pos:line="33" pos:column="19"/></condition><then pos:line="33" pos:column="19"> <block pos:line="33" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">fatal<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><literal type="string" pos:line="34" pos:column="15">"Failed to create condition variable"<pos:position pos:line="34" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="37" pos:column="5">request_queue<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">.<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="19">head<pos:position pos:line="37" pos:column="23"/></name></name> <operator pos:line="37" pos:column="24">=<pos:position pos:line="37" pos:column="25"/></operator> <name pos:line="37" pos:column="26">NULL<pos:position pos:line="37" pos:column="30"/></name></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="39" pos:column="5">request_queue<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">.<pos:position pos:line="39" pos:column="19"/></operator><name pos:line="39" pos:column="19">tailp<pos:position pos:line="39" pos:column="24"/></name></name> <operator pos:line="39" pos:column="25">=<pos:position pos:line="39" pos:column="26"/></operator> <operator pos:line="39" pos:column="27">&amp;<pos:position pos:line="39" pos:column="32"/></operator><name><name pos:line="39" pos:column="28">request_queue<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">.<pos:position pos:line="39" pos:column="42"/></operator><name pos:line="39" pos:column="42">head<pos:position pos:line="39" pos:column="46"/></name></name></expr>;<pos:position pos:line="39" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="41" pos:column="5">request_queue<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">.<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">requests<pos:position pos:line="41" pos:column="27"/></name></name> <operator pos:line="41" pos:column="28">=<pos:position pos:line="41" pos:column="29"/></operator> <literal type="number" pos:line="41" pos:column="30">0<pos:position pos:line="41" pos:column="31"/></literal></expr>;<pos:position pos:line="41" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="43" pos:column="5">request_queue<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">.<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">blocked<pos:position pos:line="43" pos:column="26"/></name></name> <operator pos:line="43" pos:column="27">=<pos:position pos:line="43" pos:column="28"/></operator> <literal type="number" pos:line="43" pos:column="29">0<pos:position pos:line="43" pos:column="30"/></literal></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="45" pos:column="5">/* Initialize done queue */</comment>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><operator pos:line="47" pos:column="9">(<pos:position pos:line="47" pos:column="10"/></operator><name><name pos:line="47" pos:column="10">done_queue<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">.<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="21">mutex<pos:position pos:line="47" pos:column="26"/></name></name> <operator pos:line="47" pos:column="27">=<pos:position pos:line="47" pos:column="28"/></operator> <call><name pos:line="47" pos:column="29">CreateMutex<pos:position pos:line="47" pos:column="40"/></name><argument_list pos:line="47" pos:column="40">(<argument><expr><name pos:line="47" pos:column="41">NULL<pos:position pos:line="47" pos:column="45"/></name></expr></argument>,  <comment type="block" pos:line="47" pos:column="48">/* no inheritance */</comment>
                                        <argument><expr><name pos:line="48" pos:column="41">FALSE<pos:position pos:line="48" pos:column="46"/></name></expr></argument>, <comment type="block" pos:line="48" pos:column="48">/* start unowned (as per mutex_init) */</comment>
                                        <argument><expr><name pos:line="49" pos:column="41">NULL<pos:position pos:line="49" pos:column="45"/></name></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></call>  <comment type="block" pos:line="49" pos:column="48">/* no name */</comment>
        <operator pos:line="50" pos:column="9">)<pos:position pos:line="50" pos:column="10"/></operator> <operator pos:line="50" pos:column="11">==<pos:position pos:line="50" pos:column="13"/></operator> <name pos:line="50" pos:column="14">NULL<pos:position pos:line="50" pos:column="18"/></name></expr>)<pos:position pos:line="50" pos:column="19"/></condition><then pos:line="50" pos:column="19"> <block pos:line="50" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">fatal<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><literal type="string" pos:line="51" pos:column="15">"Failed to create mutex"<pos:position pos:line="51" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><operator pos:line="54" pos:column="9">(<pos:position pos:line="54" pos:column="10"/></operator><name><name pos:line="54" pos:column="10">done_queue<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">.<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="21">cond<pos:position pos:line="54" pos:column="25"/></name></name> <operator pos:line="54" pos:column="26">=<pos:position pos:line="54" pos:column="27"/></operator> <call><name pos:line="54" pos:column="28">CreateEvent<pos:position pos:line="54" pos:column="39"/></name><argument_list pos:line="54" pos:column="39">(<argument><expr><name pos:line="54" pos:column="40">NULL<pos:position pos:line="54" pos:column="44"/></name></expr></argument>,  <comment type="block" pos:line="54" pos:column="47">/* no inheritance */</comment>
                                       <argument><expr><name pos:line="55" pos:column="40">TRUE<pos:position pos:line="55" pos:column="44"/></name></expr></argument>,  <comment type="block" pos:line="55" pos:column="47">/* manually signaled - which I think is pthreads like ? */</comment>
                                       <argument><expr><name pos:line="56" pos:column="40">FALSE<pos:position pos:line="56" pos:column="45"/></name></expr></argument>, <comment type="block" pos:line="56" pos:column="47">/* start non signaled */</comment>
                                       <argument><expr><name pos:line="57" pos:column="40">NULL<pos:position pos:line="57" pos:column="44"/></name></expr></argument>)<pos:position pos:line="57" pos:column="45"/></argument_list></call>  <comment type="block" pos:line="57" pos:column="47">/* no name */</comment>
        <operator pos:line="58" pos:column="9">)<pos:position pos:line="58" pos:column="10"/></operator> <operator pos:line="58" pos:column="11">==<pos:position pos:line="58" pos:column="13"/></operator> <name pos:line="58" pos:column="14">NULL<pos:position pos:line="58" pos:column="18"/></name></expr>)<pos:position pos:line="58" pos:column="19"/></condition><then pos:line="58" pos:column="19"> <block pos:line="58" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">fatal<pos:position pos:line="59" pos:column="14"/></name><argument_list pos:line="59" pos:column="14">(<argument><expr><literal type="string" pos:line="59" pos:column="15">"Failed to create condition variable"<pos:position pos:line="59" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="62" pos:column="5">done_queue<pos:position pos:line="62" pos:column="15"/></name><operator pos:line="62" pos:column="15">.<pos:position pos:line="62" pos:column="16"/></operator><name pos:line="62" pos:column="16">head<pos:position pos:line="62" pos:column="20"/></name></name> <operator pos:line="62" pos:column="21">=<pos:position pos:line="62" pos:column="22"/></operator> <name pos:line="62" pos:column="23">NULL<pos:position pos:line="62" pos:column="27"/></name></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="64" pos:column="5">done_queue<pos:position pos:line="64" pos:column="15"/></name><operator pos:line="64" pos:column="15">.<pos:position pos:line="64" pos:column="16"/></operator><name pos:line="64" pos:column="16">tailp<pos:position pos:line="64" pos:column="21"/></name></name> <operator pos:line="64" pos:column="22">=<pos:position pos:line="64" pos:column="23"/></operator> <operator pos:line="64" pos:column="24">&amp;<pos:position pos:line="64" pos:column="29"/></operator><name><name pos:line="64" pos:column="25">done_queue<pos:position pos:line="64" pos:column="35"/></name><operator pos:line="64" pos:column="35">.<pos:position pos:line="64" pos:column="36"/></operator><name pos:line="64" pos:column="36">head<pos:position pos:line="64" pos:column="40"/></name></name></expr>;<pos:position pos:line="64" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="66" pos:column="5">done_queue<pos:position pos:line="66" pos:column="15"/></name><operator pos:line="66" pos:column="15">.<pos:position pos:line="66" pos:column="16"/></operator><name pos:line="66" pos:column="16">requests<pos:position pos:line="66" pos:column="24"/></name></name> <operator pos:line="66" pos:column="25">=<pos:position pos:line="66" pos:column="26"/></operator> <literal type="number" pos:line="66" pos:column="27">0<pos:position pos:line="66" pos:column="28"/></literal></expr>;<pos:position pos:line="66" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="68" pos:column="5">done_queue<pos:position pos:line="68" pos:column="15"/></name><operator pos:line="68" pos:column="15">.<pos:position pos:line="68" pos:column="16"/></operator><name pos:line="68" pos:column="16">blocked<pos:position pos:line="68" pos:column="23"/></name></name> <operator pos:line="68" pos:column="24">=<pos:position pos:line="68" pos:column="25"/></operator> <literal type="number" pos:line="68" pos:column="26">0<pos:position pos:line="68" pos:column="27"/></literal></expr>;<pos:position pos:line="68" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="70" pos:column="5">CommIO<pos:position pos:line="70" pos:column="11"/></name><operator pos:line="70" pos:column="11">::<pos:position pos:line="70" pos:column="13"/></operator><name pos:line="70" pos:column="13">NotifyIOCompleted<pos:position pos:line="70" pos:column="30"/></name></name><argument_list pos:line="70" pos:column="30">()<pos:position pos:line="70" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="72" pos:column="5">/* Create threads and get them to sit in their wait loop */</comment>
    <expr_stmt><expr><name pos:line="73" pos:column="5">squidaio_thread_pool<pos:position pos:line="73" pos:column="25"/></name> <operator pos:line="73" pos:column="26">=<pos:position pos:line="73" pos:column="27"/></operator> <call><name pos:line="73" pos:column="28">memPoolCreate<pos:position pos:line="73" pos:column="41"/></name><argument_list pos:line="73" pos:column="41">(<argument><expr><literal type="string" pos:line="73" pos:column="42">"aio_thread"<pos:position pos:line="73" pos:column="54"/></literal></expr></argument>, <argument><expr><sizeof pos:line="73" pos:column="56">sizeof<argument_list pos:line="73" pos:column="62">(<argument><expr><name pos:line="73" pos:column="63">squidaio_thread_t<pos:position pos:line="73" pos:column="80"/></name></expr></argument>)<pos:position pos:line="73" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="83"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="75" pos:column="5">assert<pos:position pos:line="75" pos:column="11"/></name><argument_list pos:line="75" pos:column="11">(<argument><expr><name pos:line="75" pos:column="12">NUMTHREADS<pos:position pos:line="75" pos:column="22"/></name></expr></argument>)<pos:position pos:line="75" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="24"/></expr_stmt>

    <for pos:line="77" pos:column="5">for <control pos:line="77" pos:column="9">(<init><expr><name pos:line="77" pos:column="10">i<pos:position pos:line="77" pos:column="11"/></name> <operator pos:line="77" pos:column="12">=<pos:position pos:line="77" pos:column="13"/></operator> <literal type="number" pos:line="77" pos:column="14">0<pos:position pos:line="77" pos:column="15"/></literal></expr>;<pos:position pos:line="77" pos:column="16"/></init> <condition><expr><name pos:line="77" pos:column="17">i<pos:position pos:line="77" pos:column="18"/></name> <operator pos:line="77" pos:column="19">&lt;<pos:position pos:line="77" pos:column="23"/></operator> <name pos:line="77" pos:column="21">NUMTHREADS<pos:position pos:line="77" pos:column="31"/></name></expr>;<pos:position pos:line="77" pos:column="32"/></condition> <incr><expr><name pos:line="77" pos:column="33">i<pos:position pos:line="77" pos:column="34"/></name><operator pos:line="77" pos:column="34">++<pos:position pos:line="77" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="77" pos:column="37"/></control> <block pos:line="77" pos:column="38">{
        <expr_stmt><expr><name pos:line="78" pos:column="9">threadp<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">=<pos:position pos:line="78" pos:column="18"/></operator> <operator pos:line="78" pos:column="19">(<pos:position pos:line="78" pos:column="20"/></operator><name pos:line="78" pos:column="20">squidaio_thread_t<pos:position pos:line="78" pos:column="37"/></name> <operator pos:line="78" pos:column="38">*<pos:position pos:line="78" pos:column="39"/></operator><operator pos:line="78" pos:column="39">)<pos:position pos:line="78" pos:column="40"/></operator><call><name><name pos:line="78" pos:column="40">squidaio_thread_pool<pos:position pos:line="78" pos:column="60"/></name><operator pos:line="78" pos:column="60">-&gt;<pos:position pos:line="78" pos:column="65"/></operator><name pos:line="78" pos:column="62">alloc<pos:position pos:line="78" pos:column="67"/></name></name><argument_list pos:line="78" pos:column="67">()<pos:position pos:line="78" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="79" pos:column="9">threadp<pos:position pos:line="79" pos:column="16"/></name><operator pos:line="79" pos:column="16">-&gt;<pos:position pos:line="79" pos:column="21"/></operator><name pos:line="79" pos:column="18">status<pos:position pos:line="79" pos:column="24"/></name></name> <operator pos:line="79" pos:column="25">=<pos:position pos:line="79" pos:column="26"/></operator> <name pos:line="79" pos:column="27">_THREAD_STARTING<pos:position pos:line="79" pos:column="43"/></name></expr>;<pos:position pos:line="79" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="80" pos:column="9">threadp<pos:position pos:line="80" pos:column="16"/></name><operator pos:line="80" pos:column="16">-&gt;<pos:position pos:line="80" pos:column="21"/></operator><name pos:line="80" pos:column="18">current_req<pos:position pos:line="80" pos:column="29"/></name></name> <operator pos:line="80" pos:column="30">=<pos:position pos:line="80" pos:column="31"/></operator> <name pos:line="80" pos:column="32">NULL<pos:position pos:line="80" pos:column="36"/></name></expr>;<pos:position pos:line="80" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="81" pos:column="9">threadp<pos:position pos:line="81" pos:column="16"/></name><operator pos:line="81" pos:column="16">-&gt;<pos:position pos:line="81" pos:column="21"/></operator><name pos:line="81" pos:column="18">requests<pos:position pos:line="81" pos:column="26"/></name></name> <operator pos:line="81" pos:column="27">=<pos:position pos:line="81" pos:column="28"/></operator> <literal type="number" pos:line="81" pos:column="29">0<pos:position pos:line="81" pos:column="30"/></literal></expr>;<pos:position pos:line="81" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="82" pos:column="9">threadp<pos:position pos:line="82" pos:column="16"/></name><operator pos:line="82" pos:column="16">-&gt;<pos:position pos:line="82" pos:column="21"/></operator><name pos:line="82" pos:column="18">next<pos:position pos:line="82" pos:column="22"/></name></name> <operator pos:line="82" pos:column="23">=<pos:position pos:line="82" pos:column="24"/></operator> <name pos:line="82" pos:column="25">threads<pos:position pos:line="82" pos:column="32"/></name></expr>;<pos:position pos:line="82" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="83" pos:column="9">threads<pos:position pos:line="83" pos:column="16"/></name> <operator pos:line="83" pos:column="17">=<pos:position pos:line="83" pos:column="18"/></operator> <name pos:line="83" pos:column="19">threadp<pos:position pos:line="83" pos:column="26"/></name></expr>;<pos:position pos:line="83" pos:column="27"/></expr_stmt>

        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><operator pos:line="85" pos:column="13">(<pos:position pos:line="85" pos:column="14"/></operator><name><name pos:line="85" pos:column="14">threadp<pos:position pos:line="85" pos:column="21"/></name><operator pos:line="85" pos:column="21">-&gt;<pos:position pos:line="85" pos:column="26"/></operator><name pos:line="85" pos:column="23">thread<pos:position pos:line="85" pos:column="29"/></name></name> <operator pos:line="85" pos:column="30">=<pos:position pos:line="85" pos:column="31"/></operator> <call><name pos:line="85" pos:column="32">CreateThread<pos:position pos:line="85" pos:column="44"/></name><argument_list pos:line="85" pos:column="44">(<argument><expr><name pos:line="85" pos:column="45">NULL<pos:position pos:line="85" pos:column="49"/></name></expr></argument>,                   <comment type="block" pos:line="85" pos:column="69">/* no security attributes */</comment>
                                            <argument><expr><literal type="number" pos:line="86" pos:column="45">0<pos:position pos:line="86" pos:column="46"/></literal></expr></argument>,                      <comment type="block" pos:line="86" pos:column="69">/* use default stack size */</comment>
                                            <argument><expr><name pos:line="87" pos:column="45">squidaio_thread_loop<pos:position pos:line="87" pos:column="65"/></name></expr></argument>,   <comment type="block" pos:line="87" pos:column="69">/* thread function */</comment>
                                            <argument><expr><name pos:line="88" pos:column="45">threadp<pos:position pos:line="88" pos:column="52"/></name></expr></argument>,                <comment type="block" pos:line="88" pos:column="69">/* argument to thread function */</comment>
                                            <argument><expr><literal type="number" pos:line="89" pos:column="45">0<pos:position pos:line="89" pos:column="46"/></literal></expr></argument>,                      <comment type="block" pos:line="89" pos:column="69">/* use default creation flags */</comment>
                                            <argument><expr><operator pos:line="90" pos:column="45">&amp;<pos:position pos:line="90" pos:column="50"/></operator><operator pos:line="90" pos:column="46">(<pos:position pos:line="90" pos:column="47"/></operator><name><name pos:line="90" pos:column="47">threadp<pos:position pos:line="90" pos:column="54"/></name><operator pos:line="90" pos:column="54">-&gt;<pos:position pos:line="90" pos:column="59"/></operator><name pos:line="90" pos:column="56">dwThreadId<pos:position pos:line="90" pos:column="66"/></name></name><operator pos:line="90" pos:column="66">)<pos:position pos:line="90" pos:column="67"/></operator></expr></argument>)<pos:position pos:line="90" pos:column="68"/></argument_list></call> <comment type="block" pos:line="90" pos:column="69">/* returns the thread identifier */</comment>
            <operator pos:line="91" pos:column="13">)<pos:position pos:line="91" pos:column="14"/></operator> <operator pos:line="91" pos:column="15">==<pos:position pos:line="91" pos:column="17"/></operator> <name pos:line="91" pos:column="18">NULL<pos:position pos:line="91" pos:column="22"/></name></expr>)<pos:position pos:line="91" pos:column="23"/></condition><then pos:line="91" pos:column="23"> <block pos:line="91" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">fprintf<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><name pos:line="92" pos:column="21">stderr<pos:position pos:line="92" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="29">"Thread creation failed\n"<pos:position pos:line="92" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="93" pos:column="13">threadp<pos:position pos:line="93" pos:column="20"/></name><operator pos:line="93" pos:column="20">-&gt;<pos:position pos:line="93" pos:column="25"/></operator><name pos:line="93" pos:column="22">status<pos:position pos:line="93" pos:column="28"/></name></name> <operator pos:line="93" pos:column="29">=<pos:position pos:line="93" pos:column="30"/></operator> <name pos:line="93" pos:column="31">_THREAD_FAILED<pos:position pos:line="93" pos:column="45"/></name></expr>;<pos:position pos:line="93" pos:column="46"/></expr_stmt>
            <continue pos:line="94" pos:column="13">continue;<pos:position pos:line="94" pos:column="22"/></continue>
        }<pos:position pos:line="95" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="97" pos:column="9">/* Set the new thread priority above parent process */</comment>
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">SetThreadPriority<pos:position pos:line="98" pos:column="26"/></name><argument_list pos:line="98" pos:column="26">(<argument><expr><name><name pos:line="98" pos:column="27">threadp<pos:position pos:line="98" pos:column="34"/></name><operator pos:line="98" pos:column="34">-&gt;<pos:position pos:line="98" pos:column="39"/></operator><name pos:line="98" pos:column="36">thread<pos:position pos:line="98" pos:column="42"/></name></name></expr></argument>,<argument><expr><name pos:line="98" pos:column="43">THREAD_PRIORITY_ABOVE_NORMAL<pos:position pos:line="98" pos:column="71"/></name></expr></argument>)<pos:position pos:line="98" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="99" pos:column="6"/></block></for>

    <comment type="block" pos:line="101" pos:column="5">/* Create request pool */</comment>
    <expr_stmt><expr><name pos:line="102" pos:column="5">squidaio_request_pool<pos:position pos:line="102" pos:column="26"/></name> <operator pos:line="102" pos:column="27">=<pos:position pos:line="102" pos:column="28"/></operator> <call><name pos:line="102" pos:column="29">memPoolCreate<pos:position pos:line="102" pos:column="42"/></name><argument_list pos:line="102" pos:column="42">(<argument><expr><literal type="string" pos:line="102" pos:column="43">"aio_request"<pos:position pos:line="102" pos:column="56"/></literal></expr></argument>, <argument><expr><sizeof pos:line="102" pos:column="58">sizeof<argument_list pos:line="102" pos:column="64">(<argument><expr><name pos:line="102" pos:column="65">squidaio_request_t<pos:position pos:line="102" pos:column="83"/></name></expr></argument>)<pos:position pos:line="102" pos:column="84"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="102" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="86"/></expr_stmt>

    <expr_stmt><expr><name pos:line="104" pos:column="5">squidaio_large_bufs<pos:position pos:line="104" pos:column="24"/></name> <operator pos:line="104" pos:column="25">=<pos:position pos:line="104" pos:column="26"/></operator> <call><name pos:line="104" pos:column="27">memPoolCreate<pos:position pos:line="104" pos:column="40"/></name><argument_list pos:line="104" pos:column="40">(<argument><expr><literal type="string" pos:line="104" pos:column="41">"squidaio_large_bufs"<pos:position pos:line="104" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="64">AIO_LARGE_BUFS<pos:position pos:line="104" pos:column="78"/></name></expr></argument>)<pos:position pos:line="104" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><name pos:line="106" pos:column="5">squidaio_medium_bufs<pos:position pos:line="106" pos:column="25"/></name> <operator pos:line="106" pos:column="26">=<pos:position pos:line="106" pos:column="27"/></operator> <call><name pos:line="106" pos:column="28">memPoolCreate<pos:position pos:line="106" pos:column="41"/></name><argument_list pos:line="106" pos:column="41">(<argument><expr><literal type="string" pos:line="106" pos:column="42">"squidaio_medium_bufs"<pos:position pos:line="106" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="66">AIO_MEDIUM_BUFS<pos:position pos:line="106" pos:column="81"/></name></expr></argument>)<pos:position pos:line="106" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="83"/></expr_stmt>

    <expr_stmt><expr><name pos:line="108" pos:column="5">squidaio_small_bufs<pos:position pos:line="108" pos:column="24"/></name> <operator pos:line="108" pos:column="25">=<pos:position pos:line="108" pos:column="26"/></operator> <call><name pos:line="108" pos:column="27">memPoolCreate<pos:position pos:line="108" pos:column="40"/></name><argument_list pos:line="108" pos:column="40">(<argument><expr><literal type="string" pos:line="108" pos:column="41">"squidaio_small_bufs"<pos:position pos:line="108" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="64">AIO_SMALL_BUFS<pos:position pos:line="108" pos:column="78"/></name></expr></argument>)<pos:position pos:line="108" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><name pos:line="110" pos:column="5">squidaio_tiny_bufs<pos:position pos:line="110" pos:column="23"/></name> <operator pos:line="110" pos:column="24">=<pos:position pos:line="110" pos:column="25"/></operator> <call><name pos:line="110" pos:column="26">memPoolCreate<pos:position pos:line="110" pos:column="39"/></name><argument_list pos:line="110" pos:column="39">(<argument><expr><literal type="string" pos:line="110" pos:column="40">"squidaio_tiny_bufs"<pos:position pos:line="110" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="62">AIO_TINY_BUFS<pos:position pos:line="110" pos:column="75"/></name></expr></argument>)<pos:position pos:line="110" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="77"/></expr_stmt>

    <expr_stmt><expr><name pos:line="112" pos:column="5">squidaio_micro_bufs<pos:position pos:line="112" pos:column="24"/></name> <operator pos:line="112" pos:column="25">=<pos:position pos:line="112" pos:column="26"/></operator> <call><name pos:line="112" pos:column="27">memPoolCreate<pos:position pos:line="112" pos:column="40"/></name><argument_list pos:line="112" pos:column="40">(<argument><expr><literal type="string" pos:line="112" pos:column="41">"squidaio_micro_bufs"<pos:position pos:line="112" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="112" pos:column="64">AIO_MICRO_BUFS<pos:position pos:line="112" pos:column="78"/></name></expr></argument>)<pos:position pos:line="112" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><name pos:line="114" pos:column="5">squidaio_initialised<pos:position pos:line="114" pos:column="25"/></name> <operator pos:line="114" pos:column="26">=<pos:position pos:line="114" pos:column="27"/></operator> <literal type="number" pos:line="114" pos:column="28">1<pos:position pos:line="114" pos:column="29"/></literal></expr>;<pos:position pos:line="114" pos:column="30"/></expr_stmt>
}<pos:position pos:line="115" pos:column="2"/></block></function></unit>
