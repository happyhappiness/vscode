<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1526.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">writeEarlyReply<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">code<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">msg<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">33<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">7<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">code<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="char" pos:line="4" pos:column="27">' '<pos:position pos:line="4" pos:column="30"/></literal> <operator pos:line="4" pos:column="31">&lt;&lt;<pos:position pos:line="4" pos:column="39"/></operator> <name pos:line="4" pos:column="34">msg<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">99<pos:position pos:line="5" pos:column="14"/></literal> <operator pos:line="5" pos:column="15">&lt;<pos:position pos:line="5" pos:column="19"/></operator> <name pos:line="5" pos:column="17">code<pos:position pos:line="5" pos:column="21"/></name> <operator pos:line="5" pos:column="22">&amp;&amp;<pos:position pos:line="5" pos:column="32"/></operator> <name pos:line="5" pos:column="25">code<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">&lt;<pos:position pos:line="5" pos:column="34"/></operator> <literal type="number" pos:line="5" pos:column="32">1000<pos:position pos:line="5" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="38"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">MemBuf<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">mb<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">mb<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">.<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">init<pos:position pos:line="8" pos:column="12"/></name></name><argument_list pos:line="8" pos:column="12">()<pos:position pos:line="8" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">mb<pos:position pos:line="9" pos:column="7"/></name><operator pos:line="9" pos:column="7">.<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">Printf<pos:position pos:line="9" pos:column="14"/></name></name><argument_list pos:line="9" pos:column="14">(<argument><expr><literal type="string" pos:line="9" pos:column="15">"%i %s\r\n"<pos:position pos:line="9" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">code<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="34">msg<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>

    <typedef pos:line="11" pos:column="5">typedef <type><name><name pos:line="11" pos:column="13">CommCbMemFunT<pos:position pos:line="11" pos:column="26"/></name><argument_list type="generic" pos:line="11" pos:column="26">&lt;<argument><expr><name pos:line="11" pos:column="27">Server<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="35">CommIoCbParams<pos:position pos:line="11" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="11" pos:column="53"/></argument_list></name></type> <name pos:line="11" pos:column="51">Dialer<pos:position pos:line="11" pos:column="57"/></name>;<pos:position pos:line="11" pos:column="58"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">AsyncCall<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">::<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">Pointer<pos:position pos:line="12" pos:column="23"/></name></name></type> <name pos:line="12" pos:column="24">call<pos:position pos:line="12" pos:column="28"/></name> <init pos:line="12" pos:column="29">= <expr><call><name pos:line="12" pos:column="31">JobCallback<pos:position pos:line="12" pos:column="42"/></name><argument_list pos:line="12" pos:column="42">(<argument><expr><literal type="number" pos:line="12" pos:column="43">33<pos:position pos:line="12" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="47">5<pos:position pos:line="12" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">Dialer<pos:position pos:line="12" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="58">this<pos:position pos:line="12" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="64">Ftp<pos:position pos:line="12" pos:column="67"/></name><operator pos:line="12" pos:column="67">::<pos:position pos:line="12" pos:column="69"/></operator><name pos:line="12" pos:column="69">Server<pos:position pos:line="12" pos:column="75"/></name><operator pos:line="12" pos:column="75">::<pos:position pos:line="12" pos:column="77"/></operator><name pos:line="12" pos:column="77">wroteEarlyReply<pos:position pos:line="12" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="93"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="94"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">Comm<pos:position pos:line="13" pos:column="9"/></name><operator pos:line="13" pos:column="9">::<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">Write<pos:position pos:line="13" pos:column="16"/></name></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">clientConnection<pos:position pos:line="13" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="35">&amp;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="36">mb<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">call<pos:position pos:line="13" pos:column="44"/></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="15" pos:column="5">flags<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">.<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">readMore<pos:position pos:line="15" pos:column="19"/></name></name> <operator pos:line="15" pos:column="20">=<pos:position pos:line="15" pos:column="21"/></operator> <literal type="boolean" pos:line="15" pos:column="22">false<pos:position pos:line="15" pos:column="27"/></literal></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>

    <comment type="line" pos:line="17" pos:column="5">// TODO: Create master transaction. Log it in wroteEarlyReply().</comment>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
