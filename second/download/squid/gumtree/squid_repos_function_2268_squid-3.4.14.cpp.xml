<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2268_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ServerStateData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">sendMoreRequestBody<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">()<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">requestBodySource<pos:position pos:line="4" pos:column="29"/></name> <operator pos:line="4" pos:column="30">!=<pos:position pos:line="4" pos:column="32"/></operator> <name pos:line="4" pos:column="33">NULL<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">requestSender<pos:position pos:line="5" pos:column="26"/></name></expr></argument>)<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name><name pos:line="7" pos:column="11">Comm<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">::<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">ConnectionPointer<pos:position pos:line="7" pos:column="34"/></name></name></type> <name pos:line="7" pos:column="35">conn<pos:position pos:line="7" pos:column="39"/></name> <init pos:line="7" pos:column="40">= <expr><call><name pos:line="7" pos:column="42">dataConnection<pos:position pos:line="7" pos:column="56"/></name><argument_list pos:line="7" pos:column="56">()<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name><name pos:line="9" pos:column="10">Comm<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">::<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">IsConnOpen<pos:position pos:line="9" pos:column="26"/></name></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">conn<pos:position pos:line="9" pos:column="31"/></name></expr></argument>)<pos:position pos:line="9" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33"> <block pos:line="9" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">9<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="10" pos:column="18">3<pos:position pos:line="10" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="21">HERE<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">&lt;&lt;<pos:position pos:line="10" pos:column="34"/></operator> <literal type="string" pos:line="10" pos:column="29">"cannot send request body to closing "<pos:position pos:line="10" pos:column="67"/></literal> <operator pos:line="10" pos:column="68">&lt;&lt;<pos:position pos:line="10" pos:column="76"/></operator> <name pos:line="10" pos:column="71">conn<pos:position pos:line="10" pos:column="75"/></name></expr></argument>)<pos:position pos:line="10" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="77"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return> <comment type="line" pos:line="11" pos:column="17">// wait for the kid's close handler; TODO: assert(closer);</comment>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">MemBuf<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">buf<pos:position pos:line="14" pos:column="15"/></name></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">getMoreRequestBody<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">buf<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call> <operator pos:line="15" pos:column="33">&amp;&amp;<pos:position pos:line="15" pos:column="43"/></operator> <call><name><name pos:line="15" pos:column="36">buf<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">.<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="40">contentSize<pos:position pos:line="15" pos:column="51"/></name></name><argument_list pos:line="15" pos:column="51">()<pos:position pos:line="15" pos:column="53"/></argument_list></call> <operator pos:line="15" pos:column="54">&gt;<pos:position pos:line="15" pos:column="58"/></operator> <literal type="number" pos:line="15" pos:column="56">0<pos:position pos:line="15" pos:column="57"/></literal></expr>)<pos:position pos:line="15" pos:column="58"/></condition><then pos:line="15" pos:column="58"> <block pos:line="15" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">9<pos:position pos:line="16" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="16" pos:column="18">3<pos:position pos:line="16" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="21">HERE<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">&lt;&lt;<pos:position pos:line="16" pos:column="34"/></operator> <literal type="string" pos:line="16" pos:column="29">"will write "<pos:position pos:line="16" pos:column="42"/></literal> <operator pos:line="16" pos:column="43">&lt;&lt;<pos:position pos:line="16" pos:column="51"/></operator> <call><name><name pos:line="16" pos:column="46">buf<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">.<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="50">contentSize<pos:position pos:line="16" pos:column="61"/></name></name><argument_list pos:line="16" pos:column="61">()<pos:position pos:line="16" pos:column="63"/></argument_list></call> <operator pos:line="16" pos:column="64">&lt;&lt;<pos:position pos:line="16" pos:column="72"/></operator> <literal type="string" pos:line="16" pos:column="67">" request body bytes"<pos:position pos:line="16" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="90"/></expr_stmt>
        <typedef pos:line="17" pos:column="9">typedef <type><name><name pos:line="17" pos:column="17">CommCbMemFunT<pos:position pos:line="17" pos:column="30"/></name><argument_list type="generic" pos:line="17" pos:column="30">&lt;<argument><expr><name pos:line="17" pos:column="31">ServerStateData<pos:position pos:line="17" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="48">CommIoCbParams<pos:position pos:line="17" pos:column="62"/></name></expr></argument>&gt;<pos:position pos:line="17" pos:column="66"/></argument_list></name></type> <name pos:line="17" pos:column="64">Dialer<pos:position pos:line="17" pos:column="70"/></name>;<pos:position pos:line="17" pos:column="71"/></typedef>
        <expr_stmt><expr><name pos:line="18" pos:column="9">requestSender<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">=<pos:position pos:line="18" pos:column="24"/></operator> <call><name pos:line="18" pos:column="25">JobCallback<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><literal type="number" pos:line="18" pos:column="37">93<pos:position pos:line="18" pos:column="39"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="18" pos:column="40">3<pos:position pos:line="18" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">Dialer<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">this<pos:position pos:line="18" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="57">ServerStateData<pos:position pos:line="18" pos:column="72"/></name><operator pos:line="18" pos:column="72">::<pos:position pos:line="18" pos:column="74"/></operator><name pos:line="18" pos:column="74">sentRequestBody<pos:position pos:line="18" pos:column="89"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="91"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="19" pos:column="9">Comm<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">::<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">Write<pos:position pos:line="19" pos:column="20"/></name></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">conn<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="27">&amp;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="28">buf<pos:position pos:line="19" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="33">requestSender<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then> <else pos:line="20" pos:column="7">else <block pos:line="20" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">9<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="21" pos:column="18">3<pos:position pos:line="21" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="21">HERE<pos:position pos:line="21" pos:column="25"/></name> <operator pos:line="21" pos:column="26">&lt;&lt;<pos:position pos:line="21" pos:column="34"/></operator> <literal type="string" pos:line="21" pos:column="29">"will wait for more request body bytes or eof"<pos:position pos:line="21" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">requestSender<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">NULL<pos:position pos:line="22" pos:column="29"/></name></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></else></if>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
