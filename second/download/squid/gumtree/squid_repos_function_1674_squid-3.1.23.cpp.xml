<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1674_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">peerDigestSwapInHeaders<pos:position pos:line="2" pos:column="24"/></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">void<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">data<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">buf<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">ssize_t<pos:position pos:line="2" pos:column="55"/></name></type> <name pos:line="2" pos:column="56">size<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DigestFetchState<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">fetch<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><operator pos:line="4" pos:column="31">(<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">DigestFetchState<pos:position pos:line="4" pos:column="48"/></name> <operator pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></operator><operator pos:line="4" pos:column="50">)<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="51">data<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">hdr_size<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">fetch<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">-&gt;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="19">state<pos:position pos:line="7" pos:column="24"/></name></name> <operator pos:line="7" pos:column="25">==<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="28">DIGEST_READ_HEADERS<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">peerDigestFetchedEnough<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">fetch<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="40">buf<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="45">size<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="51">"peerDigestSwapInHeaders"<pos:position pos:line="9" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="78"/></condition><then pos:line="9" pos:column="78">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">-<pos:position pos:line="10" pos:column="17"/></operator><literal type="number" pos:line="10" pos:column="17">1<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><operator pos:line="12" pos:column="12">!<pos:position pos:line="12" pos:column="13"/></operator><name><name pos:line="12" pos:column="13">fetch<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">-&gt;<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="20">offset<pos:position pos:line="12" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">(<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">hdr_size<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <call><name pos:line="14" pos:column="21">headersEnd<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><name pos:line="14" pos:column="32">buf<pos:position pos:line="14" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">size<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call><operator pos:line="14" pos:column="42">)<pos:position pos:line="14" pos:column="43"/></operator></expr>)<pos:position pos:line="14" pos:column="44"/></condition><then pos:line="14" pos:column="44"> <block pos:line="14" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">assert<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><call><name><name pos:line="15" pos:column="16">fetch<pos:position pos:line="15" pos:column="21"/></name><operator pos:line="15" pos:column="21">-&gt;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="23">entry<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">getReply<pos:position pos:line="15" pos:column="38"/></name></name><argument_list pos:line="15" pos:column="38">()<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">assert<pos:position pos:line="16" pos:column="15"/></name> <argument_list pos:line="16" pos:column="16">(<argument><expr><call><name><name pos:line="16" pos:column="17">fetch<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">-&gt;<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="24">entry<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">-&gt;<pos:position pos:line="16" pos:column="34"/></operator><name pos:line="16" pos:column="31">getReply<pos:position pos:line="16" pos:column="39"/></name></name><argument_list pos:line="16" pos:column="39">()<pos:position pos:line="16" pos:column="41"/></argument_list></call><operator pos:line="16" pos:column="41">-&gt;<pos:position pos:line="16" pos:column="46"/></operator><name><name pos:line="16" pos:column="43">sline<pos:position pos:line="16" pos:column="48"/></name><operator pos:line="16" pos:column="48">.<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="49">status<pos:position pos:line="16" pos:column="55"/></name></name> <operator pos:line="16" pos:column="56">!=<pos:position pos:line="16" pos:column="58"/></operator> <literal type="number" pos:line="16" pos:column="59">0<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name><name pos:line="18" pos:column="13">fetch<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">entry<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">-&gt;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="27">getReply<pos:position pos:line="18" pos:column="35"/></name></name><argument_list pos:line="18" pos:column="35">()<pos:position pos:line="18" pos:column="37"/></argument_list></call><operator pos:line="18" pos:column="37">-&gt;<pos:position pos:line="18" pos:column="42"/></operator><name><name pos:line="18" pos:column="39">sline<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">.<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">status<pos:position pos:line="18" pos:column="51"/></name></name> <operator pos:line="18" pos:column="52">!=<pos:position pos:line="18" pos:column="54"/></operator> <name pos:line="18" pos:column="55">HTTP_OK<pos:position pos:line="18" pos:column="62"/></name></expr>)<pos:position pos:line="18" pos:column="63"/></condition><then pos:line="18" pos:column="63"> <block pos:line="18" pos:column="64">{
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">debugs<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><literal type="number" pos:line="19" pos:column="20">72<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="24">1<pos:position pos:line="19" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="27">"peerDigestSwapInHeaders: "<pos:position pos:line="19" pos:column="54"/></literal> <operator pos:line="19" pos:column="55">&lt;&lt;<pos:position pos:line="19" pos:column="63"/></operator> <name><name pos:line="19" pos:column="58">fetch<pos:position pos:line="19" pos:column="63"/></name><operator pos:line="19" pos:column="63">-&gt;<pos:position pos:line="19" pos:column="68"/></operator><name pos:line="19" pos:column="65">pd<pos:position pos:line="19" pos:column="67"/></name><operator pos:line="19" pos:column="67">-&gt;<pos:position pos:line="19" pos:column="72"/></operator><name pos:line="19" pos:column="69">host<pos:position pos:line="19" pos:column="73"/></name></name> <operator pos:line="19" pos:column="74">&lt;&lt;<pos:position pos:line="19" pos:column="82"/></operator>
                   <literal type="string" pos:line="20" pos:column="20">" status "<pos:position pos:line="20" pos:column="30"/></literal> <operator pos:line="20" pos:column="31">&lt;&lt;<pos:position pos:line="20" pos:column="39"/></operator> <call><name><name pos:line="20" pos:column="34">fetch<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">entry<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">-&gt;<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="48">getReply<pos:position pos:line="20" pos:column="56"/></name></name><argument_list pos:line="20" pos:column="56">()<pos:position pos:line="20" pos:column="58"/></argument_list></call><operator pos:line="20" pos:column="58">-&gt;<pos:position pos:line="20" pos:column="63"/></operator><name><name pos:line="20" pos:column="60">sline<pos:position pos:line="20" pos:column="65"/></name><operator pos:line="20" pos:column="65">.<pos:position pos:line="20" pos:column="66"/></operator><name pos:line="20" pos:column="66">status<pos:position pos:line="20" pos:column="72"/></name></name> <operator pos:line="20" pos:column="73">&lt;&lt;<pos:position pos:line="20" pos:column="81"/></operator>
                   <literal type="string" pos:line="21" pos:column="20">" got cached!"<pos:position pos:line="21" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="23" pos:column="13">peerDigestFetchAbort<pos:position pos:line="23" pos:column="33"/></name><argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">fetch<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">buf<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="46">"internal status error"<pos:position pos:line="23" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="71"/></expr_stmt>
            <return pos:line="24" pos:column="13">return <expr><operator pos:line="24" pos:column="20">-<pos:position pos:line="24" pos:column="21"/></operator><literal type="number" pos:line="24" pos:column="21">1<pos:position pos:line="24" pos:column="22"/></literal></expr>;<pos:position pos:line="24" pos:column="23"/></return>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="27" pos:column="9">fetch<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">-&gt;<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="16">state<pos:position pos:line="27" pos:column="21"/></name></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">DIGEST_READ_CBLOCK<pos:position pos:line="27" pos:column="42"/></name></expr>;<pos:position pos:line="27" pos:column="43"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">hdr_size<pos:position pos:line="28" pos:column="24"/></name></expr>;<pos:position pos:line="28" pos:column="25"/></return>	<comment type="block" pos:line="28" pos:column="33">/* Say how much data we read */</comment>
    }<pos:position pos:line="29" pos:column="6"/></block></then> <else pos:line="29" pos:column="7">else <block pos:line="29" pos:column="12">{
        <comment type="block" pos:line="30" pos:column="9">/* need more data, do we have space? */</comment>

        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">size<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">&gt;=<pos:position pos:line="32" pos:column="23"/></operator> <name pos:line="32" pos:column="21">SM_PAGE_SIZE<pos:position pos:line="32" pos:column="33"/></name></expr>)<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34"> <block pos:line="32" pos:column="35">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">peerDigestFetchAbort<pos:position pos:line="33" pos:column="33"/></name><argument_list pos:line="33" pos:column="33">(<argument><expr><name pos:line="33" pos:column="34">fetch<pos:position pos:line="33" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="41">buf<pos:position pos:line="33" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="46">"stored header too big"<pos:position pos:line="33" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></expr_stmt>
            <return pos:line="34" pos:column="13">return <expr><operator pos:line="34" pos:column="20">-<pos:position pos:line="34" pos:column="21"/></operator><literal type="number" pos:line="34" pos:column="21">1<pos:position pos:line="34" pos:column="22"/></literal></expr>;<pos:position pos:line="34" pos:column="23"/></return>
        }<pos:position pos:line="35" pos:column="10"/></block></then> <else pos:line="35" pos:column="11">else <block pos:line="35" pos:column="16">{
            <return pos:line="36" pos:column="13">return <expr><literal type="number" pos:line="36" pos:column="20">0<pos:position pos:line="36" pos:column="21"/></literal></expr>;<pos:position pos:line="36" pos:column="22"/></return>		<comment type="block" pos:line="36" pos:column="33">/* We need to read more to parse .. */</comment>
        }<pos:position pos:line="37" pos:column="10"/></block></else></if>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">fatal<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><literal type="string" pos:line="40" pos:column="11">"peerDigestSwapInHeaders() - shouldn't get here!\n"<pos:position pos:line="40" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="64"/></expr_stmt>
    <return pos:line="41" pos:column="5">return <expr><literal type="number" pos:line="41" pos:column="12">0<pos:position pos:line="41" pos:column="13"/></literal></expr>;<pos:position pos:line="41" pos:column="14"/></return> <comment type="block" pos:line="41" pos:column="15">/* keep gcc happy */</comment>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
