<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6463_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IpcIoFile<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">HandleResponses<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier></type> <name pos:line="2" pos:column="46">when<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">47<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">4<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">"popping all "<pos:position pos:line="4" pos:column="41"/></literal> <operator pos:line="4" pos:column="42">&lt;&lt;<pos:position pos:line="4" pos:column="50"/></operator> <name pos:line="4" pos:column="45">when<pos:position pos:line="4" pos:column="49"/></name></expr></argument>)<pos:position pos:line="4" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="51"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">IpcIoMsg<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">ipcIo<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <comment type="line" pos:line="6" pos:column="5">// get all responses we can: since we are not pushing, this will stop</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">diskId<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><call><name><name pos:line="8" pos:column="12">queue<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">-&gt;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="19">pop<pos:position pos:line="8" pos:column="22"/></name></name><argument_list pos:line="8" pos:column="22">(<argument><expr><name pos:line="8" pos:column="23">diskId<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="31">ipcIo<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="38"/></condition> <block pos:line="8" pos:column="39">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name><name pos:line="9" pos:column="15">IpcIoFilesMap<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">::<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="30">const_iterator<pos:position pos:line="9" pos:column="44"/></name></name></type> <name pos:line="9" pos:column="45">i<pos:position pos:line="9" pos:column="46"/></name> <init pos:line="9" pos:column="47">= <expr><call><name><name pos:line="9" pos:column="49">IpcIoFiles<pos:position pos:line="9" pos:column="59"/></name><operator pos:line="9" pos:column="59">.<pos:position pos:line="9" pos:column="60"/></operator><name pos:line="9" pos:column="60">find<pos:position pos:line="9" pos:column="64"/></name></name><argument_list pos:line="9" pos:column="64">(<argument><expr><name pos:line="9" pos:column="65">diskId<pos:position pos:line="9" pos:column="71"/></name></expr></argument>)<pos:position pos:line="9" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="73"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">Must<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">(<argument><expr><name pos:line="10" pos:column="14">i<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">!=<pos:position pos:line="10" pos:column="18"/></operator> <call><name><name pos:line="10" pos:column="19">IpcIoFiles<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">.<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="30">end<pos:position pos:line="10" pos:column="33"/></name></name><argument_list pos:line="10" pos:column="33">()<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt> <comment type="line" pos:line="10" pos:column="38">// TODO: warn but continue</comment>
        <expr_stmt><expr><call><name><name pos:line="11" pos:column="9">i<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">second<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">handleResponse<pos:position pos:line="11" pos:column="34"/></name></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">ipcIo<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></while>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
