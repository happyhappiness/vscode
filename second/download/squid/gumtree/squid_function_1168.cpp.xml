<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1168.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">openChunk<pos:position pos:line="1" pos:column="42"/></name></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">MemBuf<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">&amp;<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="51">buf<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">size_t<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">chunkSize<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="74">bool<pos:position pos:line="1" pos:column="78"/></name></type> <name pos:line="1" pos:column="79">ieof<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="84"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="3" pos:column="5">buf<pos:position pos:line="3" pos:column="8"/></name><operator pos:line="3" pos:column="8">.<pos:position pos:line="3" pos:column="9"/></operator><name pos:line="3" pos:column="9">Printf<pos:position pos:line="3" pos:column="15"/></name></name><argument_list pos:line="3" pos:column="15">(<argument><expr><operator pos:line="3" pos:column="16">(<pos:position pos:line="3" pos:column="17"/></operator><ternary><condition><expr><name pos:line="3" pos:column="17">ieof<pos:position pos:line="3" pos:column="21"/></name></expr> ?<pos:position pos:line="3" pos:column="23"/></condition><then pos:line="3" pos:column="23"> <expr><literal type="string" pos:line="3" pos:column="24">"%x; ieof\r\n"<pos:position pos:line="3" pos:column="38"/></literal></expr> <pos:position pos:line="3" pos:column="39"/></then><else pos:line="3" pos:column="39">: <expr><literal type="string" pos:line="3" pos:column="41">"%x\r\n"<pos:position pos:line="3" pos:column="49"/></literal></expr></else></ternary><operator pos:line="3" pos:column="49">)<pos:position pos:line="3" pos:column="50"/></operator></expr></argument>, <argument><expr><operator pos:line="3" pos:column="52">(<pos:position pos:line="3" pos:column="53"/></operator><name pos:line="3" pos:column="53">int<pos:position pos:line="3" pos:column="56"/></name><operator pos:line="3" pos:column="56">)<pos:position pos:line="3" pos:column="57"/></operator> <name pos:line="3" pos:column="58">chunkSize<pos:position pos:line="3" pos:column="67"/></name></expr></argument>)<pos:position pos:line="3" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="69"/></expr_stmt>
}<pos:position pos:line="4" pos:column="2"/></block></function></unit>
