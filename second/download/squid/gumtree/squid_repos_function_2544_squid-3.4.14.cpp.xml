<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2544_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FtpStateData<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">processReplyBody<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">()<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">9<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"FtpStateData::processReplyBody starting."<pos:position pos:line="4" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="70"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">request<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">-&gt;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="18">method<pos:position pos:line="6" pos:column="24"/></name></name> <operator pos:line="6" pos:column="25">==<pos:position pos:line="6" pos:column="27"/></operator> <name><name pos:line="6" pos:column="28">Http<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">::<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="34">METHOD_HEAD<pos:position pos:line="6" pos:column="45"/></name></name> <operator pos:line="6" pos:column="46">&amp;&amp;<pos:position pos:line="6" pos:column="56"/></operator> <operator pos:line="6" pos:column="49">(<pos:position pos:line="6" pos:column="50"/></operator><name><name pos:line="6" pos:column="50">flags<pos:position pos:line="6" pos:column="55"/></name><operator pos:line="6" pos:column="55">.<pos:position pos:line="6" pos:column="56"/></operator><name pos:line="6" pos:column="56">isdir<pos:position pos:line="6" pos:column="61"/></name></name> <operator pos:line="6" pos:column="62">||<pos:position pos:line="6" pos:column="64"/></operator> <name pos:line="6" pos:column="65">theSize<pos:position pos:line="6" pos:column="72"/></name> <operator pos:line="6" pos:column="73">!=<pos:position pos:line="6" pos:column="75"/></operator> <operator pos:line="6" pos:column="76">-<pos:position pos:line="6" pos:column="77"/></operator><literal type="number" pos:line="6" pos:column="77">1<pos:position pos:line="6" pos:column="78"/></literal><operator pos:line="6" pos:column="78">)<pos:position pos:line="6" pos:column="79"/></operator></expr>)<pos:position pos:line="6" pos:column="80"/></condition><then pos:line="6" pos:column="80"> <block pos:line="6" pos:column="81">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">serverComplete<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">()<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="11" pos:column="5">/* Directory listings are special. They write ther own headers via the error objects */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><name><name pos:line="12" pos:column="10">flags<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">http_header_sent<pos:position pos:line="12" pos:column="32"/></name></name> <operator pos:line="12" pos:column="33">&amp;&amp;<pos:position pos:line="12" pos:column="43"/></operator> <call><name><name pos:line="12" pos:column="36">data<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">.<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="41">readBuf<pos:position pos:line="12" pos:column="48"/></name><operator pos:line="12" pos:column="48">-&gt;<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="50">contentSize<pos:position pos:line="12" pos:column="61"/></name></name><argument_list pos:line="12" pos:column="61">()<pos:position pos:line="12" pos:column="63"/></argument_list></call> <operator pos:line="12" pos:column="64">&gt;=<pos:position pos:line="12" pos:column="69"/></operator> <literal type="number" pos:line="12" pos:column="67">0<pos:position pos:line="12" pos:column="68"/></literal> <operator pos:line="12" pos:column="69">&amp;&amp;<pos:position pos:line="12" pos:column="79"/></operator> <operator pos:line="12" pos:column="72">!<pos:position pos:line="12" pos:column="73"/></operator><name><name pos:line="12" pos:column="73">flags<pos:position pos:line="12" pos:column="78"/></name><operator pos:line="12" pos:column="78">.<pos:position pos:line="12" pos:column="79"/></operator><name pos:line="12" pos:column="79">isdir<pos:position pos:line="12" pos:column="84"/></name></name></expr>)<pos:position pos:line="12" pos:column="85"/></condition><then pos:line="12" pos:column="85">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="9">appendSuccessHeader<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">()<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">EBIT_TEST<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name><name pos:line="15" pos:column="19">entry<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">-&gt;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="26">flags<pos:position pos:line="15" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="33">ENTRY_ABORTED<pos:position pos:line="15" pos:column="46"/></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48"> <block pos:line="15" pos:column="49">{
        <comment type="block" pos:line="16" pos:column="9">/*
         * probably was aborted because content length exceeds one
         * of the maximum size limits.
         */</comment>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">abortTransaction<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><literal type="string" pos:line="20" pos:column="26">"entry aborted after calling appendSuccessHeader()"<pos:position pos:line="20" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="79"/></expr_stmt>
        <return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><name pos:line="24" pos:column="5">USE_ADAPTATION<pos:position pos:line="24" pos:column="19"/></name></expr></cpp:if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">adaptationAccessCheckPending<pos:position pos:line="26" pos:column="37"/></name></expr>)<pos:position pos:line="26" pos:column="38"/></condition><then pos:line="26" pos:column="38"> <block pos:line="26" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">9<pos:position pos:line="27" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="18">3<pos:position pos:line="27" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="21">HERE<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">&lt;&lt;<pos:position pos:line="27" pos:column="34"/></operator> <literal type="string" pos:line="27" pos:column="29">"returning from FtpStateData::processReplyBody due to adaptationAccessCheckPending"<pos:position pos:line="27" pos:column="112"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="114"/></expr_stmt>
        <return pos:line="28" pos:column="9">return;<pos:position pos:line="28" pos:column="16"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name><name pos:line="33" pos:column="9">flags<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">.<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="15">isdir<pos:position pos:line="33" pos:column="20"/></name></name></expr>)<pos:position pos:line="33" pos:column="21"/></condition><then pos:line="33" pos:column="21"> <block pos:line="33" pos:column="22">{
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name><name pos:line="34" pos:column="14">flags<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">.<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="20">listing<pos:position pos:line="34" pos:column="27"/></name></name></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28"> <block pos:line="34" pos:column="29">{
            <expr_stmt><expr><name><name pos:line="35" pos:column="13">flags<pos:position pos:line="35" pos:column="18"/></name><operator pos:line="35" pos:column="18">.<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="19">listing<pos:position pos:line="35" pos:column="26"/></name></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <literal type="number" pos:line="35" pos:column="29">1<pos:position pos:line="35" pos:column="30"/></literal></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="36" pos:column="13">listing<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">.<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">reset<pos:position pos:line="36" pos:column="26"/></name></name><argument_list pos:line="36" pos:column="26">()<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">parseListing<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">()<pos:position pos:line="38" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">maybeReadVirginBody<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">()<pos:position pos:line="39" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="31"/></expr_stmt>
        <return pos:line="40" pos:column="9">return;<pos:position pos:line="40" pos:column="16"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then> <elseif pos:line="41" pos:column="7">else <if pos:line="41" pos:column="12">if <condition pos:line="41" pos:column="15">(<decl><type><specifier pos:line="41" pos:column="16">const<pos:position pos:line="41" pos:column="21"/></specifier> <name pos:line="41" pos:column="22">int<pos:position pos:line="41" pos:column="25"/></name></type> <name pos:line="41" pos:column="26">csize<pos:position pos:line="41" pos:column="31"/></name> <init pos:line="41" pos:column="32">= <expr><call><name><name pos:line="41" pos:column="34">data<pos:position pos:line="41" pos:column="38"/></name><operator pos:line="41" pos:column="38">.<pos:position pos:line="41" pos:column="39"/></operator><name pos:line="41" pos:column="39">readBuf<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">-&gt;<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="48">contentSize<pos:position pos:line="41" pos:column="59"/></name></name><argument_list pos:line="41" pos:column="59">()<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr></init></decl>)<pos:position pos:line="41" pos:column="62"/></condition><then pos:line="41" pos:column="62"> <block pos:line="41" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">writeReplyBody<pos:position pos:line="42" pos:column="23"/></name><argument_list pos:line="42" pos:column="23">(<argument><expr><call><name><name pos:line="42" pos:column="24">data<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">.<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="29">readBuf<pos:position pos:line="42" pos:column="36"/></name><operator pos:line="42" pos:column="36">-&gt;<pos:position pos:line="42" pos:column="41"/></operator><name pos:line="42" pos:column="38">content<pos:position pos:line="42" pos:column="45"/></name></name><argument_list pos:line="42" pos:column="45">()<pos:position pos:line="42" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="42" pos:column="49">csize<pos:position pos:line="42" pos:column="54"/></name></expr></argument>)<pos:position pos:line="42" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">debugs<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><literal type="number" pos:line="43" pos:column="16">9<pos:position pos:line="43" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="19">5<pos:position pos:line="43" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="22">HERE<pos:position pos:line="43" pos:column="26"/></name> <operator pos:line="43" pos:column="27">&lt;&lt;<pos:position pos:line="43" pos:column="35"/></operator> <literal type="string" pos:line="43" pos:column="30">"consuming "<pos:position pos:line="43" pos:column="42"/></literal> <operator pos:line="43" pos:column="43">&lt;&lt;<pos:position pos:line="43" pos:column="51"/></operator> <name pos:line="43" pos:column="46">csize<pos:position pos:line="43" pos:column="51"/></name> <operator pos:line="43" pos:column="52">&lt;&lt;<pos:position pos:line="43" pos:column="60"/></operator> <literal type="string" pos:line="43" pos:column="55">" bytes of readBuf"<pos:position pos:line="43" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="44" pos:column="9">data<pos:position pos:line="44" pos:column="13"/></name><operator pos:line="44" pos:column="13">.<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">readBuf<pos:position pos:line="44" pos:column="21"/></name><operator pos:line="44" pos:column="21">-&gt;<pos:position pos:line="44" pos:column="26"/></operator><name pos:line="44" pos:column="23">consume<pos:position pos:line="44" pos:column="30"/></name></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">csize<pos:position pos:line="44" pos:column="36"/></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><call><name><name pos:line="47" pos:column="5">entry<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">-&gt;<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="12">flush<pos:position pos:line="47" pos:column="17"/></name></name><argument_list pos:line="47" pos:column="17">()<pos:position pos:line="47" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="49" pos:column="5">maybeReadVirginBody<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">()<pos:position pos:line="49" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="27"/></expr_stmt>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
