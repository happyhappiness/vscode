<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5431_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Mem<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Init<pos:position pos:line="2" pos:column="10"/></name></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">void<pos:position pos:line="2" pos:column="15"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="16"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* all pools are ready to be used */</comment>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name pos:line="5" pos:column="12">bool<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">MemIsInitialized<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><literal type="boolean" pos:line="5" pos:column="36">false<pos:position pos:line="5" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">MemIsInitialized<pos:position pos:line="6" pos:column="25"/></name></expr>)<pos:position pos:line="6" pos:column="26"/></condition><then pos:line="6" pos:column="26">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <comment type="block" format="doxygen" pos:line="9" pos:column="5">/** \par
     * NOTE: Mem::Init() is called before the config file is parsed
     * and before the debugging module has been initialized.  Any
     * debug messages here at level 0 or 1 will always be printed
     * on stderr.
     */</comment>

    <comment type="block" format="doxygen" pos:line="16" pos:column="5">/**
     * Then initialize all pools.
     * \par
     * Starting with generic 2kB - 64kB buffr pools, then specific object types.
     * \par
     * It does not hurt much to have a lot of pools since sizeof(MemPool) is
     * small; someday we will figure out what to do with all the entries here
     * that are never used or used only once; perhaps we should simply use
     * malloc() for those? @?@
     */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memDataInit<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">MEM_2K_BUF<pos:position pos:line="26" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="29">"2K Buffer"<pos:position pos:line="26" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="42">2048<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="48">10<pos:position pos:line="26" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="26" pos:column="52">false<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">memDataInit<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">MEM_4K_BUF<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="29">"4K Buffer"<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="42">4096<pos:position pos:line="27" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="48">10<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="27" pos:column="52">false<pos:position pos:line="27" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">memDataInit<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">MEM_8K_BUF<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="29">"8K Buffer"<pos:position pos:line="28" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="42">8192<pos:position pos:line="28" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="48">10<pos:position pos:line="28" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="28" pos:column="52">false<pos:position pos:line="28" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">memDataInit<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">MEM_16K_BUF<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="30">"16K Buffer"<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="44">16384<pos:position pos:line="29" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="51">10<pos:position pos:line="29" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="29" pos:column="55">false<pos:position pos:line="29" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">memDataInit<pos:position pos:line="30" pos:column="16"/></name><argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">MEM_32K_BUF<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="30">"32K Buffer"<pos:position pos:line="30" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="44">32768<pos:position pos:line="30" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="51">10<pos:position pos:line="30" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="30" pos:column="55">false<pos:position pos:line="30" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">memDataInit<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">MEM_64K_BUF<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="30">"64K Buffer"<pos:position pos:line="31" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="44">65536<pos:position pos:line="31" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="51">10<pos:position pos:line="31" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="31" pos:column="55">false<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">memDataInit<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">MEM_DREAD_CTRL<pos:position pos:line="32" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="33">"dread_ctrl"<pos:position pos:line="32" pos:column="45"/></literal></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="47">sizeof<argument_list pos:line="32" pos:column="53">(<argument><expr><name pos:line="32" pos:column="54">dread_ctrl<pos:position pos:line="32" pos:column="64"/></name></expr></argument>)<pos:position pos:line="32" pos:column="65"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="67">0<pos:position pos:line="32" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">memDataInit<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><name pos:line="33" pos:column="17">MEM_DWRITE_Q<pos:position pos:line="33" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="31">"dwrite_q"<pos:position pos:line="33" pos:column="41"/></literal></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="43">sizeof<argument_list pos:line="33" pos:column="49">(<argument><expr><name pos:line="33" pos:column="50">dwrite_q<pos:position pos:line="33" pos:column="58"/></name></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="61">0<pos:position pos:line="33" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">memDataInit<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">MEM_MD5_DIGEST<pos:position pos:line="34" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="33">"MD5 digest"<pos:position pos:line="34" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="47">SQUID_MD5_DIGEST_LENGTH<pos:position pos:line="34" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="72">0<pos:position pos:line="34" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">GetPool<pos:position pos:line="35" pos:column="12"/></name><argument_list pos:line="35" pos:column="12">(<argument><expr><name pos:line="35" pos:column="13">MEM_MD5_DIGEST<pos:position pos:line="35" pos:column="27"/></name></expr></argument>)<pos:position pos:line="35" pos:column="28"/></argument_list></call><operator pos:line="35" pos:column="28">-&gt;<pos:position pos:line="35" pos:column="33"/></operator><call><name pos:line="35" pos:column="30">setChunkSize<pos:position pos:line="35" pos:column="42"/></name><argument_list pos:line="35" pos:column="42">(<argument><expr><literal type="number" pos:line="35" pos:column="43">512<pos:position pos:line="35" pos:column="46"/></literal> <operator pos:line="35" pos:column="47">*<pos:position pos:line="35" pos:column="48"/></operator> <literal type="number" pos:line="35" pos:column="49">1024<pos:position pos:line="35" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="55"/></expr_stmt>

    <expr_stmt><expr><name pos:line="37" pos:column="5">MemIsInitialized<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <literal type="boolean" pos:line="37" pos:column="24">true<pos:position pos:line="37" pos:column="28"/></literal></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>

    <comment type="line" pos:line="39" pos:column="5">// finally register with the cache manager</comment>
    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">Mgr<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">::<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="10">RegisterAction<pos:position pos:line="40" pos:column="24"/></name></name><argument_list pos:line="40" pos:column="24">(<argument><expr><literal type="string" pos:line="40" pos:column="25">"mem"<pos:position pos:line="40" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="32">"Memory Utilization"<pos:position pos:line="40" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="54">Mem<pos:position pos:line="40" pos:column="57"/></name><operator pos:line="40" pos:column="57">::<pos:position pos:line="40" pos:column="59"/></operator><name pos:line="40" pos:column="59">Stats<pos:position pos:line="40" pos:column="64"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="66">0<pos:position pos:line="40" pos:column="67"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="69">1<pos:position pos:line="40" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="72"/></expr_stmt>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
