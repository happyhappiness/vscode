<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3391_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Adaptation<pos:position pos:line="1" pos:column="11"/></name><operator pos:line="1" pos:column="11">::<pos:position pos:line="1" pos:column="13"/></operator><name pos:line="1" pos:column="13">Ecap<pos:position pos:line="1" pos:column="17"/></name><operator pos:line="1" pos:column="17">::<pos:position pos:line="1" pos:column="19"/></operator><name pos:line="1" pos:column="19">RequestLineRep<pos:position pos:line="1" pos:column="33"/></name><operator pos:line="1" pos:column="33">::<pos:position pos:line="1" pos:column="35"/></operator><name pos:line="1" pos:column="35">Area<pos:position pos:line="1" pos:column="39"/></name></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">RequestLineRep<pos:position pos:line="2" pos:column="33"/></name><operator pos:line="2" pos:column="33">::<pos:position pos:line="2" pos:column="35"/></operator><name pos:line="2" pos:column="35">uri<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">()<pos:position pos:line="2" pos:column="40"/></parameter_list> <specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">SBuf<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">&amp;<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="17">fullUrl<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><call><name><name pos:line="4" pos:column="27">theMessage<pos:position pos:line="4" pos:column="37"/></name><operator pos:line="4" pos:column="37">.<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">effectiveRequestUri<pos:position pos:line="4" pos:column="57"/></name></name><argument_list pos:line="4" pos:column="57">()<pos:position pos:line="4" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
    <comment type="line" pos:line="5" pos:column="5">// XXX: effectiveRequestUri() cannot return NULL or even empty string, some other problem?</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><operator pos:line="6" pos:column="10">!<pos:position pos:line="6" pos:column="11"/></operator><call><name><name pos:line="6" pos:column="11">fullUrl<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">.<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">isEmpty<pos:position pos:line="6" pos:column="26"/></name></name><argument_list pos:line="6" pos:column="26">()<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>
    <comment type="line" pos:line="7" pos:column="5">// optimize: avoid copying by having an Area::Detail that locks theMessage</comment>
    <return pos:line="8" pos:column="5">return <expr><call><name><name pos:line="8" pos:column="12">Area<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">::<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">FromTempBuffer<pos:position pos:line="8" pos:column="32"/></name></name><argument_list pos:line="8" pos:column="32">(<argument><expr><call><name><name pos:line="8" pos:column="33">fullUrl<pos:position pos:line="8" pos:column="40"/></name><operator pos:line="8" pos:column="40">.<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="41">rawContent<pos:position pos:line="8" pos:column="51"/></name></name><argument_list pos:line="8" pos:column="51">()<pos:position pos:line="8" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="8" pos:column="55">fullUrl<pos:position pos:line="8" pos:column="62"/></name><operator pos:line="8" pos:column="62">.<pos:position pos:line="8" pos:column="63"/></operator><name pos:line="8" pos:column="63">length<pos:position pos:line="8" pos:column="69"/></name></name><argument_list pos:line="8" pos:column="69">()<pos:position pos:line="8" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="73"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
