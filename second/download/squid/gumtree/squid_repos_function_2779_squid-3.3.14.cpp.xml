<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2779_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">TimeOrTag<pos:position pos:line="1" pos:column="10"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeader<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">getTimeOrTag<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">http_hdr_type<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">id<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list> <specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">TimeOrTag<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">tot<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HttpHeaderEntry<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">e<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">Headers<pos:position pos:line="6" pos:column="19"/></name><index pos:line="6" pos:column="19">[<expr><name pos:line="6" pos:column="20">id<pos:position pos:line="6" pos:column="22"/></name></expr>]<pos:position pos:line="6" pos:column="23"/></index></name><operator pos:line="6" pos:column="23">.<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">type<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">==<pos:position pos:line="6" pos:column="31"/></operator> <name pos:line="6" pos:column="32">ftDate_1123_or_ETag<pos:position pos:line="6" pos:column="51"/></name></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="53"/></expr_stmt>	<comment type="block" pos:line="6" pos:column="57">/* must be of an appropriate type */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">memset<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><operator pos:line="7" pos:column="12">&amp;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="13">tot<pos:position pos:line="7" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="21">sizeof<argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">tot<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">e<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">findEntry<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">id<pos:position pos:line="9" pos:column="26"/></name></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></call><operator pos:line="9" pos:column="27">)<pos:position pos:line="9" pos:column="28"/></operator></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">str<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><call><name><name pos:line="10" pos:column="27">e<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">-&gt;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="30">value<pos:position pos:line="10" pos:column="35"/></name><operator pos:line="10" pos:column="35">.<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="36">termedBuf<pos:position pos:line="10" pos:column="45"/></name></name><argument_list pos:line="10" pos:column="45">()<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="48"/></decl_stmt>
        <comment type="block" pos:line="11" pos:column="9">/* try as an ETag */</comment>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">etagParseInit<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><operator pos:line="13" pos:column="27">&amp;<pos:position pos:line="13" pos:column="32"/></operator><name><name pos:line="13" pos:column="28">tot<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">.<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="32">tag<pos:position pos:line="13" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">str<pos:position pos:line="13" pos:column="40"/></name></expr></argument>)<pos:position pos:line="13" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="42"/></condition><then pos:line="13" pos:column="42"> <block pos:line="13" pos:column="43">{
            <expr_stmt><expr><name><name pos:line="14" pos:column="13">tot<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">.<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">valid<pos:position pos:line="14" pos:column="22"/></name></name> <operator pos:line="14" pos:column="23">=<pos:position pos:line="14" pos:column="24"/></operator> <name><name pos:line="14" pos:column="25">tot<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">.<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">tag<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">.<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="33">str<pos:position pos:line="14" pos:column="36"/></name></name> <operator pos:line="14" pos:column="37">!=<pos:position pos:line="14" pos:column="39"/></operator> <name pos:line="14" pos:column="40">NULL<pos:position pos:line="14" pos:column="44"/></name></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="15" pos:column="13">tot<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">.<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">time<pos:position pos:line="15" pos:column="21"/></name></name> <operator pos:line="15" pos:column="22">=<pos:position pos:line="15" pos:column="23"/></operator> <operator pos:line="15" pos:column="24">-<pos:position pos:line="15" pos:column="25"/></operator><literal type="number" pos:line="15" pos:column="25">1<pos:position pos:line="15" pos:column="26"/></literal></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then> <else pos:line="16" pos:column="11">else <block pos:line="16" pos:column="16">{
            <comment type="block" pos:line="17" pos:column="13">/* or maybe it is time? */</comment>
            <expr_stmt><expr><name><name pos:line="18" pos:column="13">tot<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">.<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">time<pos:position pos:line="18" pos:column="21"/></name></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <call><name pos:line="18" pos:column="24">parse_rfc1123<pos:position pos:line="18" pos:column="37"/></name><argument_list pos:line="18" pos:column="37">(<argument><expr><name pos:line="18" pos:column="38">str<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="19" pos:column="13">tot<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">.<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">valid<pos:position pos:line="19" pos:column="22"/></name></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <name><name pos:line="19" pos:column="25">tot<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">.<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="29">time<pos:position pos:line="19" pos:column="33"/></name></name> <operator pos:line="19" pos:column="34">&gt;=<pos:position pos:line="19" pos:column="39"/></operator> <literal type="number" pos:line="19" pos:column="37">0<pos:position pos:line="19" pos:column="38"/></literal></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="20" pos:column="13">tot<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">.<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">tag<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">.<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="21">str<pos:position pos:line="20" pos:column="24"/></name></name> <operator pos:line="20" pos:column="25">=<pos:position pos:line="20" pos:column="26"/></operator> <name pos:line="20" pos:column="27">NULL<pos:position pos:line="20" pos:column="31"/></name></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></else></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">assert<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name><name pos:line="24" pos:column="12">tot<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">.<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">time<pos:position pos:line="24" pos:column="20"/></name></name> <operator pos:line="24" pos:column="21">&lt;<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="23">0<pos:position pos:line="24" pos:column="24"/></literal> <operator pos:line="24" pos:column="25">||<pos:position pos:line="24" pos:column="27"/></operator> <operator pos:line="24" pos:column="28">!<pos:position pos:line="24" pos:column="29"/></operator><name><name pos:line="24" pos:column="29">tot<pos:position pos:line="24" pos:column="32"/></name><operator pos:line="24" pos:column="32">.<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="33">tag<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">.<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="37">str<pos:position pos:line="24" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>	<comment type="block" pos:line="24" pos:column="49">/* paranoid */</comment>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">tot<pos:position pos:line="25" pos:column="15"/></name></expr>;<pos:position pos:line="25" pos:column="16"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
