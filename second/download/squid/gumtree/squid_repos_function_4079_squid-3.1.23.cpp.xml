<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4079_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">addCnToRequest<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name><name pos:line="1" pos:column="28">Ssl<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">X509_REQ_Pointer<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">&amp;<pos:position pos:line="1" pos:column="55"/></modifier></type> <name pos:line="1" pos:column="52">request<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">char<pos:position pos:line="1" pos:column="65"/></name> <specifier pos:line="1" pos:column="66">const<pos:position pos:line="1" pos:column="71"/></specifier> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier></type> <name pos:line="1" pos:column="74">cn<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="line" pos:line="3" pos:column="5">// not an Ssl::X509_NAME_Pointer because X509_REQ_get_subject_name()</comment>
    <comment type="line" pos:line="4" pos:column="5">// returns a pointer to the existing subject name. Nothing to clean here.</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">X509_NAME<pos:position pos:line="5" pos:column="14"/></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">name<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><call><name pos:line="5" pos:column="23">X509_REQ_get_subject_name<pos:position pos:line="5" pos:column="48"/></name><argument_list pos:line="5" pos:column="48">(<argument><expr><call><name><name pos:line="5" pos:column="49">request<pos:position pos:line="5" pos:column="56"/></name><operator pos:line="5" pos:column="56">.<pos:position pos:line="5" pos:column="57"/></operator><name pos:line="5" pos:column="57">get<pos:position pos:line="5" pos:column="60"/></name></name><argument_list pos:line="5" pos:column="60">()<pos:position pos:line="5" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="64"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">name<pos:position pos:line="6" pos:column="14"/></name></expr>)<pos:position pos:line="6" pos:column="15"/></condition><then pos:line="6" pos:column="15">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="9" pos:column="5">// The second argument of the X509_NAME_add_entry_by_txt declared as</comment>
    <comment type="line" pos:line="10" pos:column="5">// "char *" on some OS. Use cn_name to avoid compile warnings.</comment>
    <decl_stmt><decl><specifier pos:line="11" pos:column="5">static<pos:position pos:line="11" pos:column="11"/></specifier> <type><name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name></type> <name><name pos:line="11" pos:column="17">cn_name<pos:position pos:line="11" pos:column="24"/></name><index pos:line="11" pos:column="24">[<expr><literal type="number" pos:line="11" pos:column="25">3<pos:position pos:line="11" pos:column="26"/></literal></expr>]<pos:position pos:line="11" pos:column="27"/></index></name> <init pos:line="11" pos:column="28">= <expr><literal type="string" pos:line="11" pos:column="30">"CN"<pos:position pos:line="11" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><call><name pos:line="12" pos:column="10">X509_NAME_add_entry_by_txt<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><name pos:line="12" pos:column="37">name<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="43">cn_name<pos:position pos:line="12" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="52">MBSTRING_ASC<pos:position pos:line="12" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="66">(<pos:position pos:line="12" pos:column="67"/></operator><name pos:line="12" pos:column="67">unsigned<pos:position pos:line="12" pos:column="75"/></name> <name pos:line="12" pos:column="76">char<pos:position pos:line="12" pos:column="80"/></name> <operator pos:line="12" pos:column="81">*<pos:position pos:line="12" pos:column="82"/></operator><operator pos:line="12" pos:column="82">)<pos:position pos:line="12" pos:column="83"/></operator><name pos:line="12" pos:column="83">cn<pos:position pos:line="12" pos:column="85"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="87">-<pos:position pos:line="12" pos:column="88"/></operator><literal type="number" pos:line="12" pos:column="88">1<pos:position pos:line="12" pos:column="89"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="91">-<pos:position pos:line="12" pos:column="92"/></operator><literal type="number" pos:line="12" pos:column="92">1<pos:position pos:line="12" pos:column="93"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="95">0<pos:position pos:line="12" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="97"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="98"/></condition><then pos:line="12" pos:column="98">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">false<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></return></block></then></if>

    <return pos:line="15" pos:column="5">return <expr><literal type="boolean" pos:line="15" pos:column="12">true<pos:position pos:line="15" pos:column="16"/></literal></expr>;<pos:position pos:line="15" pos:column="17"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
