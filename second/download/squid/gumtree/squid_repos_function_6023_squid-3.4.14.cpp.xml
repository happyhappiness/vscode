<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6023_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESIContext<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">addLiteral<pos:position pos:line="2" pos:column="23"/></name></name> <parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">s<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">int<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">len<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* handle any skipped data */</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name> <argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">len<pos:position pos:line="5" pos:column="16"/></name></expr></argument>)<pos:position pos:line="5" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">86<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">5<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"literal length is "<pos:position pos:line="6" pos:column="39"/></literal> <operator pos:line="6" pos:column="40">&lt;&lt;<pos:position pos:line="6" pos:column="48"/></operator> <name pos:line="6" pos:column="43">len<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="48"/></expr_stmt>
    <comment type="block" pos:line="7" pos:column="5">/* give a literal to the current element */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><name><name pos:line="8" pos:column="13">parserState<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">.<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">stackdepth<pos:position pos:line="8" pos:column="35"/></name></name> <operator pos:line="8" pos:column="36">&lt;<pos:position pos:line="8" pos:column="40"/></operator><literal type="number" pos:line="8" pos:column="37">11<pos:position pos:line="8" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">ESIElement<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">::<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">Pointer<pos:position pos:line="9" pos:column="24"/></name></name></type> <name pos:line="9" pos:column="25">element<pos:position pos:line="9" pos:column="32"/></name> <argument_list pos:line="9" pos:column="33">(<argument><expr><operator pos:line="9" pos:column="34">new<pos:position pos:line="9" pos:column="37"/></operator> <call><name pos:line="9" pos:column="38">esiLiteral<pos:position pos:line="9" pos:column="48"/></name> <argument_list pos:line="9" pos:column="49">(<argument><expr><name pos:line="9" pos:column="50">this<pos:position pos:line="9" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="56">s<pos:position pos:line="9" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="59">len<pos:position pos:line="9" pos:column="62"/></name></expr></argument>)<pos:position pos:line="9" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></decl>;<pos:position pos:line="9" pos:column="65"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name><name pos:line="11" pos:column="10">parserState<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">.<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">top<pos:position pos:line="11" pos:column="25"/></name></name><argument_list pos:line="11" pos:column="25">()<pos:position pos:line="11" pos:column="27"/></argument_list></call><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><call><name pos:line="11" pos:column="29">addElement<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><name pos:line="11" pos:column="40">element<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49"> <block pos:line="11" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">86<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="20">DBG_IMPORTANT<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="35">"ESIContext::addLiteral: failed to add esi node, probable error in ESI template"<pos:position pos:line="12" pos:column="115"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="117"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">flags<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">error<pos:position pos:line="13" pos:column="20"/></name></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <literal type="number" pos:line="13" pos:column="23">1<pos:position pos:line="13" pos:column="24"/></literal></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
