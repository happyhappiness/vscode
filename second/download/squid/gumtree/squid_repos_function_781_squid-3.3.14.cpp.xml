<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_781_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientHttpRequest<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">noteMoreBodyDataAvailable<pos:position pos:line="2" pos:column="45"/></name></name><parameter_list pos:line="2" pos:column="45">(<parameter><decl><type><name><name pos:line="2" pos:column="46">BodyPipe<pos:position pos:line="2" pos:column="54"/></name><operator pos:line="2" pos:column="54">::<pos:position pos:line="2" pos:column="56"/></operator><name pos:line="2" pos:column="56">Pointer<pos:position pos:line="2" pos:column="63"/></name></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">request_satisfaction_mode<pos:position pos:line="4" pos:column="37"/></name></expr></argument>)<pos:position pos:line="4" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">adaptedBodySource<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">!=<pos:position pos:line="5" pos:column="32"/></operator> <name pos:line="5" pos:column="33">NULL<pos:position pos:line="5" pos:column="37"/></name></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="39"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<decl><type><name pos:line="7" pos:column="9">size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">contentSize<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><call><name><name pos:line="7" pos:column="30">adaptedBodySource<pos:position pos:line="7" pos:column="47"/></name><operator pos:line="7" pos:column="47">-&gt;<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="49">buf<pos:position pos:line="7" pos:column="52"/></name></name><argument_list pos:line="7" pos:column="52">()<pos:position pos:line="7" pos:column="54"/></argument_list></call><operator pos:line="7" pos:column="54">.<pos:position pos:line="7" pos:column="55"/></operator><call><name pos:line="7" pos:column="55">contentSize<pos:position pos:line="7" pos:column="66"/></name><argument_list pos:line="7" pos:column="66">()<pos:position pos:line="7" pos:column="68"/></argument_list></call></expr></init></decl>)<pos:position pos:line="7" pos:column="69"/></condition><then pos:line="7" pos:column="69"> <block pos:line="7" pos:column="70">{
        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">size_t<pos:position pos:line="8" pos:column="21"/></name></type> <name pos:line="8" pos:column="22">spaceAvailable<pos:position pos:line="8" pos:column="36"/></name> <init pos:line="8" pos:column="37">= <expr><call><name pos:line="8" pos:column="39">storeEntry<pos:position pos:line="8" pos:column="49"/></name><argument_list pos:line="8" pos:column="49">()<pos:position pos:line="8" pos:column="51"/></argument_list></call><operator pos:line="8" pos:column="51">-&gt;<pos:position pos:line="8" pos:column="56"/></operator><call><name pos:line="8" pos:column="53">bytesWanted<pos:position pos:line="8" pos:column="64"/></name><argument_list pos:line="8" pos:column="64">(<argument><expr><call><name><name pos:line="8" pos:column="65">Range<pos:position pos:line="8" pos:column="70"/></name><argument_list type="generic" pos:line="8" pos:column="70">&lt;<argument><expr><name pos:line="8" pos:column="71">size_t<pos:position pos:line="8" pos:column="77"/></name></expr></argument>&gt;<pos:position pos:line="8" pos:column="81"/></argument_list></name><argument_list pos:line="8" pos:column="78">(<argument><expr><literal type="number" pos:line="8" pos:column="79">0<pos:position pos:line="8" pos:column="80"/></literal></expr></argument>,<argument><expr><name pos:line="8" pos:column="81">contentSize<pos:position pos:line="8" pos:column="92"/></name></expr></argument>)<pos:position pos:line="8" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="94"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="95"/></decl_stmt>

        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">spaceAvailable<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">&lt;<pos:position pos:line="10" pos:column="32"/></operator> <name pos:line="10" pos:column="30">contentSize<pos:position pos:line="10" pos:column="41"/></name></expr> )<pos:position pos:line="10" pos:column="43"/></condition><then pos:line="10" pos:column="43"> <block pos:line="10" pos:column="44">{
            <comment type="line" pos:line="11" pos:column="13">// No or partial body data consuming</comment>
            <typedef pos:line="12" pos:column="13">typedef <type><name><name pos:line="12" pos:column="21">NullaryMemFunT<pos:position pos:line="12" pos:column="35"/></name><argument_list type="generic" pos:line="12" pos:column="35">&lt;<argument><expr><name pos:line="12" pos:column="36">ClientHttpRequest<pos:position pos:line="12" pos:column="53"/></name></expr></argument>&gt;<pos:position pos:line="12" pos:column="57"/></argument_list></name></type> <name pos:line="12" pos:column="55">Dialer<pos:position pos:line="12" pos:column="61"/></name>;<pos:position pos:line="12" pos:column="62"/></typedef>
            <decl_stmt><decl><type><name><name pos:line="13" pos:column="13">AsyncCall<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">::<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">Pointer<pos:position pos:line="13" pos:column="31"/></name></name></type> <name pos:line="13" pos:column="32">call<pos:position pos:line="13" pos:column="36"/></name> <init pos:line="13" pos:column="37">= <expr><call><name pos:line="13" pos:column="39">asyncCall<pos:position pos:line="13" pos:column="48"/></name><argument_list pos:line="13" pos:column="48">(<argument><expr><literal type="number" pos:line="13" pos:column="49">93<pos:position pos:line="13" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="53">5<pos:position pos:line="13" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="56">"ClientHttpRequest::resumeBodyStorage"<pos:position pos:line="13" pos:column="94"/></literal></expr></argument>,
                                                <argument><expr><call><name pos:line="14" pos:column="49">Dialer<pos:position pos:line="14" pos:column="55"/></name><argument_list pos:line="14" pos:column="55">(<argument><expr><name pos:line="14" pos:column="56">this<pos:position pos:line="14" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="62">&amp;<pos:position pos:line="14" pos:column="67"/></operator><name><name pos:line="14" pos:column="63">ClientHttpRequest<pos:position pos:line="14" pos:column="80"/></name><operator pos:line="14" pos:column="80">::<pos:position pos:line="14" pos:column="82"/></operator><name pos:line="14" pos:column="82">resumeBodyStorage<pos:position pos:line="14" pos:column="99"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="100"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="101"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="102"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">storeEntry<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">()<pos:position pos:line="15" pos:column="25"/></argument_list></call><operator pos:line="15" pos:column="25">-&gt;<pos:position pos:line="15" pos:column="30"/></operator><call><name pos:line="15" pos:column="27">deferProducer<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">call<pos:position pos:line="15" pos:column="45"/></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">spaceAvailable<pos:position pos:line="18" pos:column="28"/></name></expr>)<pos:position pos:line="18" pos:column="29"/></condition><then pos:line="18" pos:column="29">
            <block type="pseudo"><return pos:line="19" pos:column="13">return;<pos:position pos:line="19" pos:column="20"/></return></block></then></if>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">spaceAvailable<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">&lt;<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="30">contentSize<pos:position pos:line="21" pos:column="41"/></name></expr> )<pos:position pos:line="21" pos:column="43"/></condition><then pos:line="21" pos:column="43">
            <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="13">contentSize<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">=<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="27">spaceAvailable<pos:position pos:line="22" pos:column="41"/></name></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt></block></then></if>

        <decl_stmt><decl><type><name pos:line="24" pos:column="9">BodyPipeCheckout<pos:position pos:line="24" pos:column="25"/></name></type> <name pos:line="24" pos:column="26">bpc<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><operator pos:line="24" pos:column="30">*<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="31">adaptedBodySource<pos:position pos:line="24" pos:column="48"/></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></decl>;<pos:position pos:line="24" pos:column="50"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">const<pos:position pos:line="25" pos:column="14"/></specifier> <name pos:line="25" pos:column="15">StoreIOBuffer<pos:position pos:line="25" pos:column="28"/></name></type> <name pos:line="25" pos:column="29">ioBuf<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><operator pos:line="25" pos:column="35">&amp;<pos:position pos:line="25" pos:column="40"/></operator><name><name pos:line="25" pos:column="36">bpc<pos:position pos:line="25" pos:column="39"/></name><operator pos:line="25" pos:column="39">.<pos:position pos:line="25" pos:column="40"/></operator><name pos:line="25" pos:column="40">buf<pos:position pos:line="25" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">request_satisfaction_offset<pos:position pos:line="25" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="74">contentSize<pos:position pos:line="25" pos:column="85"/></name></expr></argument>)<pos:position pos:line="25" pos:column="86"/></argument_list></decl>;<pos:position pos:line="25" pos:column="87"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">storeEntry<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">()<pos:position pos:line="26" pos:column="21"/></argument_list></call><operator pos:line="26" pos:column="21">-&gt;<pos:position pos:line="26" pos:column="26"/></operator><call><name pos:line="26" pos:column="23">write<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">ioBuf<pos:position pos:line="26" pos:column="34"/></name></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
        <comment type="line" pos:line="27" pos:column="9">// assume StoreEntry::write() writes the entire ioBuf</comment>
        <expr_stmt><expr><name pos:line="28" pos:column="9">request_satisfaction_offset<pos:position pos:line="28" pos:column="36"/></name> <operator pos:line="28" pos:column="37">+=<pos:position pos:line="28" pos:column="39"/></operator> <name><name pos:line="28" pos:column="40">ioBuf<pos:position pos:line="28" pos:column="45"/></name><operator pos:line="28" pos:column="45">.<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="46">length<pos:position pos:line="28" pos:column="52"/></name></name></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">bpc<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">.<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">buf<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">.<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">consume<pos:position pos:line="29" pos:column="24"/></name></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name pos:line="29" pos:column="25">contentSize<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="30" pos:column="9">bpc<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">.<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">checkIn<pos:position pos:line="30" pos:column="20"/></name></name><argument_list pos:line="30" pos:column="20">()<pos:position pos:line="30" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><call><name><name pos:line="33" pos:column="9">adaptedBodySource<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">-&gt;<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="28">exhausted<pos:position pos:line="33" pos:column="37"/></name></name><argument_list pos:line="33" pos:column="37">()<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="40"/></condition><then pos:line="33" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="34" pos:column="9">endRequestSatisfaction<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">()<pos:position pos:line="34" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt></block></then></if>
    <comment type="line" pos:line="35" pos:column="5">// else wait for more body data</comment>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
