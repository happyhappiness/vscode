<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2932_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">ChunkedCodingParser<pos:position pos:line="1" pos:column="25"/></name><operator pos:line="1" pos:column="25">::<pos:position pos:line="1" pos:column="27"/></operator><name pos:line="1" pos:column="27">parseLastChunkExtension<pos:position pos:line="1" pos:column="50"/></name></name><parameter_list pos:line="1" pos:column="50">()<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">size_t<pos:position pos:line="3" pos:column="11"/></name></type> <name pos:line="3" pos:column="12">crlfBeg<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">crlfEnd<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><literal type="number" pos:line="4" pos:column="22">0<pos:position pos:line="4" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name pos:line="6" pos:column="10">findCrlf<pos:position pos:line="6" pos:column="18"/></name><argument_list pos:line="6" pos:column="18">(<argument><expr><name pos:line="6" pos:column="19">crlfBeg<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="28">crlfEnd<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="37"/></condition><then pos:line="6" pos:column="37"> <block pos:line="6" pos:column="38">{
        <expr_stmt><expr><name pos:line="7" pos:column="9">doNeedMoreData<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">=<pos:position pos:line="7" pos:column="25"/></operator> <literal type="boolean" pos:line="7" pos:column="26">true<pos:position pos:line="7" pos:column="30"/></literal></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">char<pos:position pos:line="11" pos:column="15"/></name> <modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier><specifier pos:line="11" pos:column="17">const<pos:position pos:line="11" pos:column="22"/></specifier></type> <name pos:line="11" pos:column="23">startExt<pos:position pos:line="11" pos:column="31"/></name> <init pos:line="11" pos:column="32">= <expr><call><name><name pos:line="11" pos:column="34">theIn<pos:position pos:line="11" pos:column="39"/></name><operator pos:line="11" pos:column="39">-&gt;<pos:position pos:line="11" pos:column="44"/></operator><name pos:line="11" pos:column="41">content<pos:position pos:line="11" pos:column="48"/></name></name><argument_list pos:line="11" pos:column="48">()<pos:position pos:line="11" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="51"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier><specifier pos:line="12" pos:column="17">const<pos:position pos:line="12" pos:column="22"/></specifier></type> <name pos:line="12" pos:column="23">endExt<pos:position pos:line="12" pos:column="29"/></name> <init pos:line="12" pos:column="30">= <expr><call><name><name pos:line="12" pos:column="32">theIn<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">-&gt;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="39">content<pos:position pos:line="12" pos:column="46"/></name></name><argument_list pos:line="12" pos:column="46">()<pos:position pos:line="12" pos:column="48"/></argument_list></call> <operator pos:line="12" pos:column="49">+<pos:position pos:line="12" pos:column="50"/></operator> <name pos:line="12" pos:column="51">crlfBeg<pos:position pos:line="12" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="59"/></decl_stmt>

    <comment type="line" pos:line="14" pos:column="5">// chunk-extension starts at startExt and ends with LF at endEx</comment>
    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init><decl><type><specifier pos:line="15" pos:column="10">const<pos:position pos:line="15" pos:column="15"/></specifier> <name pos:line="15" pos:column="16">char<pos:position pos:line="15" pos:column="20"/></name> <modifier pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></modifier></type><name pos:line="15" pos:column="22">p<pos:position pos:line="15" pos:column="23"/></name> <init pos:line="15" pos:column="24">= <expr><name pos:line="15" pos:column="26">startExt<pos:position pos:line="15" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="35"/></init> <condition><expr><name pos:line="15" pos:column="36">p<pos:position pos:line="15" pos:column="37"/></name> <operator pos:line="15" pos:column="38">&lt;<pos:position pos:line="15" pos:column="42"/></operator> <name pos:line="15" pos:column="40">endExt<pos:position pos:line="15" pos:column="46"/></name></expr>;<pos:position pos:line="15" pos:column="47"/></condition><incr/>)<pos:position pos:line="15" pos:column="48"/></control> <block pos:line="15" pos:column="49">{

        <while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><operator pos:line="17" pos:column="16">*<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">p<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">==<pos:position pos:line="17" pos:column="21"/></operator> <literal type="char" pos:line="17" pos:column="22">' '<pos:position pos:line="17" pos:column="25"/></literal> <operator pos:line="17" pos:column="26">||<pos:position pos:line="17" pos:column="28"/></operator> <operator pos:line="17" pos:column="29">*<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">p<pos:position pos:line="17" pos:column="31"/></name> <operator pos:line="17" pos:column="32">==<pos:position pos:line="17" pos:column="34"/></operator> <literal type="char" pos:line="17" pos:column="35">'\t'<pos:position pos:line="17" pos:column="39"/></literal></expr>)<pos:position pos:line="17" pos:column="40"/></condition> <block type="pseudo"><expr_stmt><expr><operator pos:line="17" pos:column="41">++<pos:position pos:line="17" pos:column="43"/></operator><name pos:line="17" pos:column="43">p<pos:position pos:line="17" pos:column="44"/></name></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt></block></while> <comment type="line" pos:line="17" pos:column="46">// skip spaces before ';'</comment>

        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">*<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">p<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">++<pos:position pos:line="19" pos:column="17"/></operator> <operator pos:line="19" pos:column="18">!=<pos:position pos:line="19" pos:column="20"/></operator> <literal type="char" pos:line="19" pos:column="21">';'<pos:position pos:line="19" pos:column="24"/></literal></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25"> <comment type="line" pos:line="19" pos:column="26">// each ext name=value pair is preceded with ';'</comment>
            <block type="pseudo"><break pos:line="20" pos:column="13">break;<pos:position pos:line="20" pos:column="19"/></break></block></then></if>

        <while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><operator pos:line="22" pos:column="16">*<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">p<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">==<pos:position pos:line="22" pos:column="21"/></operator> <literal type="char" pos:line="22" pos:column="22">' '<pos:position pos:line="22" pos:column="25"/></literal> <operator pos:line="22" pos:column="26">||<pos:position pos:line="22" pos:column="28"/></operator> <operator pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">p<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">==<pos:position pos:line="22" pos:column="34"/></operator> <literal type="char" pos:line="22" pos:column="35">'\t'<pos:position pos:line="22" pos:column="39"/></literal></expr>)<pos:position pos:line="22" pos:column="40"/></condition> <block type="pseudo"><expr_stmt><expr><operator pos:line="22" pos:column="41">++<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="43">p<pos:position pos:line="22" pos:column="44"/></name></expr>;<pos:position pos:line="22" pos:column="45"/></expr_stmt></block></while> <comment type="line" pos:line="22" pos:column="46">// skip spaces before name</comment>

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">p<pos:position pos:line="24" pos:column="14"/></name> <operator pos:line="24" pos:column="15">&gt;=<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="18">endExt<pos:position pos:line="24" pos:column="24"/></name></expr>)<pos:position pos:line="24" pos:column="25"/></condition><then pos:line="24" pos:column="25">
            <block type="pseudo"><break pos:line="25" pos:column="13">break;<pos:position pos:line="25" pos:column="19"/></break></block></then></if> <comment type="line" pos:line="25" pos:column="20">// malformed extension: ';' without ext name=value pair</comment>

        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">const<pos:position pos:line="27" pos:column="14"/></specifier> <name pos:line="27" pos:column="15">int<pos:position pos:line="27" pos:column="18"/></name></type> <name pos:line="27" pos:column="19">extSize<pos:position pos:line="27" pos:column="26"/></name> <init pos:line="27" pos:column="27">= <expr><name pos:line="27" pos:column="29">endExt<pos:position pos:line="27" pos:column="35"/></name> <operator pos:line="27" pos:column="36">-<pos:position pos:line="27" pos:column="37"/></operator> <name pos:line="27" pos:column="38">p<pos:position pos:line="27" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="40"/></decl_stmt>
        <comment type="line" pos:line="28" pos:column="9">// TODO: we need debugData() stream manipulator to dump data</comment>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">94<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="29" pos:column="19">7<pos:position pos:line="29" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="22">"Found chunk extension; size="<pos:position pos:line="29" pos:column="52"/></literal> <operator pos:line="29" pos:column="53">&lt;&lt;<pos:position pos:line="29" pos:column="61"/></operator> <name pos:line="29" pos:column="56">extSize<pos:position pos:line="29" pos:column="63"/></name></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="65"/></expr_stmt>

        <comment type="line" pos:line="31" pos:column="9">// TODO: support implied *LWS around '='</comment>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">extSize<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">&gt;<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="23">18<pos:position pos:line="32" pos:column="25"/></literal> <operator pos:line="32" pos:column="26">&amp;&amp;<pos:position pos:line="32" pos:column="36"/></operator> <call><name pos:line="32" pos:column="29">strncmp<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name pos:line="32" pos:column="37">p<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="40">"use-original-body="<pos:position pos:line="32" pos:column="60"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="62">18<pos:position pos:line="32" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="65"/></argument_list></call> <operator pos:line="32" pos:column="66">==<pos:position pos:line="32" pos:column="68"/></operator> <literal type="number" pos:line="32" pos:column="69">0<pos:position pos:line="32" pos:column="70"/></literal></expr>)<pos:position pos:line="32" pos:column="71"/></condition><then pos:line="32" pos:column="71"> <block pos:line="32" pos:column="72">{
            <expr_stmt><expr><operator pos:line="33" pos:column="13">(<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">void<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">)<pos:position pos:line="33" pos:column="19"/></operator><call><name pos:line="33" pos:column="19">StringToInt64<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">p<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">+<pos:position pos:line="33" pos:column="35"/></operator><literal type="number" pos:line="33" pos:column="35">18<pos:position pos:line="33" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="39">useOriginBody<pos:position pos:line="33" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="54">&amp;<pos:position pos:line="33" pos:column="59"/></operator><name pos:line="33" pos:column="55">p<pos:position pos:line="33" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="58">10<pos:position pos:line="33" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">debugs<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="number" pos:line="34" pos:column="20">94<pos:position pos:line="34" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="24">3<pos:position pos:line="34" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="27">HERE<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">&lt;&lt;<pos:position pos:line="34" pos:column="40"/></operator> <literal type="string" pos:line="34" pos:column="35">"use-original-body="<pos:position pos:line="34" pos:column="55"/></literal> <operator pos:line="34" pos:column="56">&lt;&lt;<pos:position pos:line="34" pos:column="64"/></operator> <name pos:line="34" pos:column="59">useOriginBody<pos:position pos:line="34" pos:column="72"/></name></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="74"/></expr_stmt>
            <break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break> <comment type="line" pos:line="35" pos:column="20">// remove to support more than just use-original-body</comment>
        }<pos:position pos:line="36" pos:column="10"/></block></then> <else pos:line="36" pos:column="11">else <block pos:line="36" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">debugs<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="number" pos:line="37" pos:column="20">94<pos:position pos:line="37" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="24">5<pos:position pos:line="37" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="27">HERE<pos:position pos:line="37" pos:column="31"/></name> <operator pos:line="37" pos:column="32">&lt;&lt;<pos:position pos:line="37" pos:column="40"/></operator> <literal type="string" pos:line="37" pos:column="35">"skipping unknown chunk extension"<pos:position pos:line="37" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="71"/></expr_stmt>
            <comment type="line" pos:line="38" pos:column="13">// TODO: support quoted-string chunk-ext-val</comment>
            <while pos:line="39" pos:column="13">while <condition pos:line="39" pos:column="19">(<expr><name pos:line="39" pos:column="20">p<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">&lt;<pos:position pos:line="39" pos:column="26"/></operator> <name pos:line="39" pos:column="24">endExt<pos:position pos:line="39" pos:column="30"/></name> <operator pos:line="39" pos:column="31">&amp;&amp;<pos:position pos:line="39" pos:column="41"/></operator> <operator pos:line="39" pos:column="34">*<pos:position pos:line="39" pos:column="35"/></operator><name pos:line="39" pos:column="35">p<pos:position pos:line="39" pos:column="36"/></name> <operator pos:line="39" pos:column="37">!=<pos:position pos:line="39" pos:column="39"/></operator> <literal type="char" pos:line="39" pos:column="40">';'<pos:position pos:line="39" pos:column="43"/></literal></expr>)<pos:position pos:line="39" pos:column="44"/></condition> <block type="pseudo"><expr_stmt><expr><operator pos:line="39" pos:column="45">++<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="47">p<pos:position pos:line="39" pos:column="48"/></name></expr>;<pos:position pos:line="39" pos:column="49"/></expr_stmt></block></while> <comment type="line" pos:line="39" pos:column="50">// skip until the next ';'</comment>
        }<pos:position pos:line="40" pos:column="10"/></block></else></if>
    }<pos:position pos:line="41" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name><name pos:line="43" pos:column="5">theIn<pos:position pos:line="43" pos:column="10"/></name><operator pos:line="43" pos:column="10">-&gt;<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="12">consume<pos:position pos:line="43" pos:column="19"/></name></name><argument_list pos:line="43" pos:column="19">(<argument><expr><name pos:line="43" pos:column="20">crlfEnd<pos:position pos:line="43" pos:column="27"/></name></expr></argument>)<pos:position pos:line="43" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="44" pos:column="5">theStep<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <ternary><condition><expr><name pos:line="44" pos:column="15">theChunkSize<pos:position pos:line="44" pos:column="27"/></name></expr> ?<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29"> <expr><name pos:line="44" pos:column="30">psChunkBody<pos:position pos:line="44" pos:column="41"/></name></expr> <pos:position pos:line="44" pos:column="42"/></then><else pos:line="44" pos:column="42">: <expr><name pos:line="44" pos:column="44">psTrailer<pos:position pos:line="44" pos:column="53"/></name></expr></else></ternary></expr>;<pos:position pos:line="44" pos:column="54"/></expr_stmt>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
