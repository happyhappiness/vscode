<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_117_squid-3.4.14.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">make_nam<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name pos:line="2" pos:column="10">int<pos:position pos:line="2" pos:column="13"/></name></type> <name pos:line="2" pos:column="14">id<pos:position pos:line="2" pos:column="16"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="18">int<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">size<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">buf<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><call><name pos:line="4" pos:column="23">malloc<pos:position pos:line="4" pos:column="29"/></name><argument_list pos:line="4" pos:column="29">(<argument><expr><literal type="number" pos:line="4" pos:column="30">30<pos:position pos:line="4" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>	<comment type="block" pos:line="4" pos:column="41">/* argh */</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">sprintf<pos:position pos:line="5" pos:column="12"/></name><argument_list pos:line="5" pos:column="12">(<argument><expr><operator pos:line="5" pos:column="13">(<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">char<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></operator><operator pos:line="5" pos:column="20">)<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="22">buf<pos:position pos:line="5" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="27">"pl:%d/%d"<pos:position pos:line="5" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="39">id<pos:position pos:line="5" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="43">size<pos:position pos:line="5" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="49"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">buf<pos:position pos:line="6" pos:column="15"/></name></expr>;<pos:position pos:line="6" pos:column="16"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
