<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1197_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">std<pos:position pos:line="1" pos:column="11"/></name><operator pos:line="1" pos:column="11">::<pos:position pos:line="1" pos:column="13"/></operator><name pos:line="1" pos:column="13">ostream<pos:position pos:line="1" pos:column="20"/></name></name> <modifier pos:line="1" pos:column="21">&amp;<pos:position pos:line="1" pos:column="26"/></modifier></type>
<name pos:line="2" pos:column="1">CurrentException<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name><name pos:line="2" pos:column="18">std<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">ostream<pos:position pos:line="2" pos:column="30"/></name></name> <modifier pos:line="2" pos:column="31">&amp;<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="32">os<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">std<pos:position pos:line="4" pos:column="12"/></name><operator pos:line="4" pos:column="12">::<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">current_exception<pos:position pos:line="4" pos:column="31"/></name></name><argument_list pos:line="4" pos:column="31">()<pos:position pos:line="4" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="34"/></condition><then pos:line="4" pos:column="34"> <block pos:line="4" pos:column="35">{
        <try pos:line="5" pos:column="9">try <block pos:line="5" pos:column="13">{
            <throw pos:line="6" pos:column="13">throw;<pos:position pos:line="6" pos:column="19"/></throw> <comment type="line" pos:line="6" pos:column="20">// re-throw to recognize the exception type</comment>
        }<pos:position pos:line="7" pos:column="10"/></block>
        <catch pos:line="8" pos:column="9">catch <parameter_list pos:line="8" pos:column="15">(<parameter><decl><type><specifier pos:line="8" pos:column="16">const<pos:position pos:line="8" pos:column="21"/></specifier> <name><name pos:line="8" pos:column="22">std<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">::<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">exception<pos:position pos:line="8" pos:column="36"/></name></name> <modifier pos:line="8" pos:column="37">&amp;<pos:position pos:line="8" pos:column="42"/></modifier></type><name pos:line="8" pos:column="38">ex<pos:position pos:line="8" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="8" pos:column="41"/></parameter_list> <block pos:line="8" pos:column="42">{
            <expr_stmt><expr><name pos:line="9" pos:column="13">os<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">&lt;&lt;<pos:position pos:line="9" pos:column="24"/></operator> <call><name><name pos:line="9" pos:column="19">ex<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">.<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">what<pos:position pos:line="9" pos:column="26"/></name></name><argument_list pos:line="9" pos:column="26">()<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="10" pos:column="10"/></block></catch>
        <catch pos:line="11" pos:column="9">catch <parameter_list pos:line="11" pos:column="15">(<parameter><decl><type><modifier pos:line="11" pos:column="16">...<pos:position pos:line="11" pos:column="19"/></modifier></type></decl></parameter>)<pos:position pos:line="11" pos:column="20"/></parameter_list> <block pos:line="11" pos:column="21">{
            <expr_stmt><expr><name pos:line="12" pos:column="13">os<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">&lt;&lt;<pos:position pos:line="12" pos:column="24"/></operator> <literal type="string" pos:line="12" pos:column="19">"[unknown exception type]"<pos:position pos:line="12" pos:column="45"/></literal></expr>;<pos:position pos:line="12" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="13" pos:column="10"/></block></catch></try>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <else pos:line="14" pos:column="7">else <block pos:line="14" pos:column="12">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">os<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">&lt;&lt;<pos:position pos:line="15" pos:column="20"/></operator> <literal type="string" pos:line="15" pos:column="15">"[no active exception]"<pos:position pos:line="15" pos:column="38"/></literal></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></else></if>
    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">os<pos:position pos:line="17" pos:column="14"/></name></expr>;<pos:position pos:line="17" pos:column="15"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
