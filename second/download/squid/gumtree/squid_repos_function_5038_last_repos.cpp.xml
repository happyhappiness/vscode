<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5038_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">writeToDisk<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">SlotId<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">sidNextProposal<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">theFile<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">!=<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name><name pos:line="5" pos:column="12">theBuf<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">.<pos:position pos:line="5" pos:column="19"/></operator><name pos:line="5" pos:column="19">size<pos:position pos:line="5" pos:column="23"/></name></name> <operator pos:line="5" pos:column="24">&gt;=<pos:position pos:line="5" pos:column="29"/></operator> <sizeof pos:line="5" pos:column="27">sizeof<argument_list pos:line="5" pos:column="33">(<argument><expr><name pos:line="5" pos:column="34">DbCellHeader<pos:position pos:line="5" pos:column="46"/></name></expr></argument>)<pos:position pos:line="5" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="49"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">bool<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">lastWrite<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name pos:line="7" pos:column="28">sidNextProposal<pos:position pos:line="7" pos:column="43"/></name> <operator pos:line="7" pos:column="44">&lt;<pos:position pos:line="7" pos:column="48"/></operator> <literal type="number" pos:line="7" pos:column="46">0<pos:position pos:line="7" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">bool<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">eof<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">lastWrite<pos:position pos:line="8" pos:column="31"/></name> <operator pos:line="8" pos:column="32">&amp;&amp;<pos:position pos:line="8" pos:column="42"/></operator>
                     <comment type="line" pos:line="9" pos:column="22">// either not updating or the updating reader has loaded everything</comment>
                     <operator pos:line="10" pos:column="22">(<pos:position pos:line="10" pos:column="23"/></operator><call><name pos:line="10" pos:column="23">touchingStoreEntry<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">()<pos:position pos:line="10" pos:column="43"/></argument_list></call> <operator pos:line="10" pos:column="44">||<pos:position pos:line="10" pos:column="46"/></operator> <name pos:line="10" pos:column="47">staleSplicingPointNext<pos:position pos:line="10" pos:column="69"/></name> <operator pos:line="10" pos:column="70">&lt;<pos:position pos:line="10" pos:column="74"/></operator> <literal type="number" pos:line="10" pos:column="72">0<pos:position pos:line="10" pos:column="73"/></literal><operator pos:line="10" pos:column="73">)<pos:position pos:line="10" pos:column="74"/></operator></expr></init></decl>;<pos:position pos:line="10" pos:column="75"/></decl_stmt>
    <comment type="line" pos:line="11" pos:column="5">// approve sidNextProposal unless _updating_ the last slot</comment>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">SlotId<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">sidNext<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">= <expr><ternary><condition><expr><operator pos:line="12" pos:column="28">(<pos:position pos:line="12" pos:column="29"/></operator><operator pos:line="12" pos:column="29">!<pos:position pos:line="12" pos:column="30"/></operator><call><name pos:line="12" pos:column="30">touchingStoreEntry<pos:position pos:line="12" pos:column="48"/></name><argument_list pos:line="12" pos:column="48">()<pos:position pos:line="12" pos:column="50"/></argument_list></call> <operator pos:line="12" pos:column="51">&amp;&amp;<pos:position pos:line="12" pos:column="61"/></operator> <name pos:line="12" pos:column="54">lastWrite<pos:position pos:line="12" pos:column="63"/></name><operator pos:line="12" pos:column="63">)<pos:position pos:line="12" pos:column="64"/></operator></expr> ?<pos:position pos:line="12" pos:column="66"/></condition><then pos:line="12" pos:column="66">
                           <expr><name pos:line="13" pos:column="28">staleSplicingPointNext<pos:position pos:line="13" pos:column="50"/></name></expr> <pos:position pos:line="13" pos:column="51"/></then><else pos:line="13" pos:column="51">: <expr><name pos:line="13" pos:column="53">sidNextProposal<pos:position pos:line="13" pos:column="68"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="13" pos:column="69"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debugs<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">79<pos:position pos:line="14" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="16">5<pos:position pos:line="14" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="19">"sidNext:"<pos:position pos:line="14" pos:column="29"/></literal> <operator pos:line="14" pos:column="30">&lt;&lt;<pos:position pos:line="14" pos:column="38"/></operator> <name pos:line="14" pos:column="33">sidNextProposal<pos:position pos:line="14" pos:column="48"/></name> <operator pos:line="14" pos:column="49">&lt;&lt;<pos:position pos:line="14" pos:column="57"/></operator> <literal type="string" pos:line="14" pos:column="52">"=&gt;"<pos:position pos:line="14" pos:column="59"/></literal> <operator pos:line="14" pos:column="57">&lt;&lt;<pos:position pos:line="14" pos:column="65"/></operator> <name pos:line="14" pos:column="60">sidNext<pos:position pos:line="14" pos:column="67"/></name> <operator pos:line="14" pos:column="68">&lt;&lt;<pos:position pos:line="14" pos:column="76"/></operator> <literal type="string" pos:line="14" pos:column="71">" eof="<pos:position pos:line="14" pos:column="78"/></literal> <operator pos:line="14" pos:column="79">&lt;&lt;<pos:position pos:line="14" pos:column="87"/></operator> <name pos:line="14" pos:column="82">eof<pos:position pos:line="14" pos:column="85"/></name></expr></argument>)<pos:position pos:line="14" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="87"/></expr_stmt>

    <comment type="line" pos:line="16" pos:column="5">// TODO: if DiskIO module is mmap-based, we should be writing whole pages</comment>
    <comment type="line" pos:line="17" pos:column="5">// to avoid triggering read-page;new_head+old_tail;write-page overheads</comment>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">writeBufToDisk<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">sidNext<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="29">eof<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="34">lastWrite<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">theBuf<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">.<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">clear<pos:position pos:line="20" pos:column="17"/></name></name><argument_list pos:line="20" pos:column="17">()<pos:position pos:line="20" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><name pos:line="22" pos:column="5">sidCurrent<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="18">sidNext<pos:position pos:line="22" pos:column="25"/></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
