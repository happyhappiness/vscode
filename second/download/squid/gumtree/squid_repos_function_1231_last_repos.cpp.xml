<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1231_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">fsBlockSize<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><specifier pos:line="2" pos:column="13">const<pos:position pos:line="2" pos:column="18"/></specifier> <name pos:line="2" pos:column="19">char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">path<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">blksize<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">statvfs<pos:position pos:line="4" pos:column="19"/></name></name></type> <name pos:line="4" pos:column="20">sfs<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">xstatvfs<pos:position pos:line="6" pos:column="17"/></name><argument_list pos:line="6" pos:column="17">(<argument><expr><name pos:line="6" pos:column="18">path<pos:position pos:line="6" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="24">&amp;<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="25">sfs<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30"> <block pos:line="6" pos:column="31">{
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">xerrno<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">errno<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">50<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">DBG_IMPORTANT<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="35">""<pos:position pos:line="8" pos:column="37"/></literal> <operator pos:line="8" pos:column="38">&lt;&lt;<pos:position pos:line="8" pos:column="46"/></operator> <name pos:line="8" pos:column="41">path<pos:position pos:line="8" pos:column="45"/></name> <operator pos:line="8" pos:column="46">&lt;&lt;<pos:position pos:line="8" pos:column="54"/></operator> <literal type="string" pos:line="8" pos:column="49">": "<pos:position pos:line="8" pos:column="53"/></literal> <operator pos:line="8" pos:column="54">&lt;&lt;<pos:position pos:line="8" pos:column="62"/></operator> <call><name pos:line="8" pos:column="57">xstrerr<pos:position pos:line="8" pos:column="64"/></name><argument_list pos:line="8" pos:column="64">(<argument><expr><name pos:line="8" pos:column="65">xerrno<pos:position pos:line="8" pos:column="71"/></name></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">blksize<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <literal type="number" pos:line="9" pos:column="20">2048<pos:position pos:line="9" pos:column="24"/></literal></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="number" pos:line="10" pos:column="16">1<pos:position pos:line="10" pos:column="17"/></literal></expr>;<pos:position pos:line="10" pos:column="18"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="13" pos:column="5">*<pos:position pos:line="13" pos:column="6"/></operator><name pos:line="13" pos:column="6">blksize<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">int<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">)<pos:position pos:line="13" pos:column="21"/></operator> <name><name pos:line="13" pos:column="22">sfs<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">.<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">f_frsize<pos:position pos:line="13" pos:column="34"/></name></name></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>

    <comment type="line" pos:line="15" pos:column="5">// Sanity check; make sure we have a meaningful value.</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">*<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">blksize<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">&lt;<pos:position pos:line="16" pos:column="22"/></operator> <literal type="number" pos:line="16" pos:column="20">512<pos:position pos:line="16" pos:column="23"/></literal></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="17" pos:column="9">*<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">blksize<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <literal type="number" pos:line="17" pos:column="20">2048<pos:position pos:line="17" pos:column="24"/></literal></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt></block></then></if>

    <return pos:line="19" pos:column="5">return <expr><literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>;<pos:position pos:line="19" pos:column="14"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
