<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_531_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">StoreEntry<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name><name pos:line="2" pos:column="1">Transients<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">copyFromShm<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">sfileno<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">index<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name><name pos:line="4" pos:column="11">TransientsMapExtras<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">::<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">Item<pos:position pos:line="4" pos:column="36"/></name></name> <modifier pos:line="4" pos:column="37">&amp;<pos:position pos:line="4" pos:column="42"/></modifier></type><name pos:line="4" pos:column="38">extra<pos:position pos:line="4" pos:column="43"/></name> <init pos:line="4" pos:column="44">= <expr><name><name pos:line="4" pos:column="46">extras<pos:position pos:line="4" pos:column="52"/></name><operator pos:line="4" pos:column="52">-&gt;<pos:position pos:line="4" pos:column="57"/></operator><name pos:line="4" pos:column="54">items<pos:position pos:line="4" pos:column="59"/></name><index pos:line="4" pos:column="59">[<expr><name pos:line="4" pos:column="60">index<pos:position pos:line="4" pos:column="65"/></name></expr>]<pos:position pos:line="4" pos:column="66"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="67"/></decl_stmt>

    <comment type="line" pos:line="6" pos:column="5">// create a brand new store entry and initialize it with stored info</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">StoreEntry<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">e<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><call><name pos:line="7" pos:column="21">storeCreatePureEntry<pos:position pos:line="7" pos:column="41"/></name><argument_list pos:line="7" pos:column="41">(<argument><expr><name><name pos:line="7" pos:column="42">extra<pos:position pos:line="7" pos:column="47"/></name><operator pos:line="7" pos:column="47">.<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="48">url<pos:position pos:line="7" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="53">extra<pos:position pos:line="7" pos:column="58"/></name><operator pos:line="7" pos:column="58">.<pos:position pos:line="7" pos:column="59"/></operator><name pos:line="7" pos:column="59">url<pos:position pos:line="7" pos:column="62"/></name></name></expr></argument>,
                                         <argument><expr><name><name pos:line="8" pos:column="42">extra<pos:position pos:line="8" pos:column="47"/></name><operator pos:line="8" pos:column="47">.<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="48">reqFlags<pos:position pos:line="8" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="58">extra<pos:position pos:line="8" pos:column="63"/></name><operator pos:line="8" pos:column="63">.<pos:position pos:line="8" pos:column="64"/></operator><name pos:line="8" pos:column="64">reqMethod<pos:position pos:line="8" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="75"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name><name pos:line="10" pos:column="12">e<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">mem_obj<pos:position pos:line="10" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">e<pos:position pos:line="11" pos:column="6"/></name><operator pos:line="11" pos:column="6">-&gt;<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="8">mem_obj<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">method<pos:position pos:line="11" pos:column="23"/></name></name> <operator pos:line="11" pos:column="24">=<pos:position pos:line="11" pos:column="25"/></operator> <name><name pos:line="11" pos:column="26">extra<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">.<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">reqMethod<pos:position pos:line="11" pos:column="41"/></name></name></expr>;<pos:position pos:line="11" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">e<pos:position pos:line="12" pos:column="6"/></name><operator pos:line="12" pos:column="6">-&gt;<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="8">mem_obj<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">xitTable<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">.<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">io<pos:position pos:line="12" pos:column="28"/></name></name> <operator pos:line="12" pos:column="29">=<pos:position pos:line="12" pos:column="30"/></operator> <name><name pos:line="12" pos:column="31">MemObject<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">::<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="42">ioReading<pos:position pos:line="12" pos:column="51"/></name></name></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">e<pos:position pos:line="13" pos:column="6"/></name><operator pos:line="13" pos:column="6">-&gt;<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="8">mem_obj<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">xitTable<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">.<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">index<pos:position pos:line="13" pos:column="31"/></name></name> <operator pos:line="13" pos:column="32">=<pos:position pos:line="13" pos:column="33"/></operator> <name pos:line="13" pos:column="34">index<pos:position pos:line="13" pos:column="39"/></name></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>

    <comment type="line" pos:line="15" pos:column="5">// TODO: Support collapsed revalidation for SMP-aware caches.</comment>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">e<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">-&gt;<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="8">setPublicKey<pos:position pos:line="16" pos:column="20"/></name></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">ksDefault<pos:position pos:line="16" pos:column="30"/></name></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">assert<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name><name pos:line="17" pos:column="12">e<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">key<pos:position pos:line="17" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>

    <comment type="line" pos:line="19" pos:column="5">// How do we know its SMP- and not just locally-collapsed? A worker gets</comment>
    <comment type="line" pos:line="20" pos:column="5">// locally-collapsed entries from the local store_table, not Transients.</comment>
    <comment type="line" pos:line="21" pos:column="5">// TODO: Can we remove smpCollapsed by not syncing non-transient entries?</comment>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">e<pos:position pos:line="22" pos:column="6"/></name><operator pos:line="22" pos:column="6">-&gt;<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="8">mem_obj<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">-&gt;<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="17">smpCollapsed<pos:position pos:line="22" pos:column="29"/></name></name> <operator pos:line="22" pos:column="30">=<pos:position pos:line="22" pos:column="31"/></operator> <literal type="boolean" pos:line="22" pos:column="32">true<pos:position pos:line="22" pos:column="36"/></literal></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">assert<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><operator pos:line="24" pos:column="12">!<pos:position pos:line="24" pos:column="13"/></operator><call><name><name pos:line="24" pos:column="13">locals<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">-&gt;<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="21">at<pos:position pos:line="24" pos:column="23"/></name></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name pos:line="24" pos:column="24">index<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>
    <comment type="line" pos:line="25" pos:column="5">// We do not lock e because we do not want to prevent its destruction;</comment>
    <comment type="line" pos:line="26" pos:column="5">// e is tied to us via mem_obj so we will know when it is destructed.</comment>
    <expr_stmt><expr><call><name><name pos:line="27" pos:column="5">locals<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">-&gt;<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="13">at<pos:position pos:line="27" pos:column="15"/></name></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">index<pos:position pos:line="27" pos:column="21"/></name></expr></argument>)<pos:position pos:line="27" pos:column="22"/></argument_list></call> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">e<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">e<pos:position pos:line="28" pos:column="13"/></name></expr>;<pos:position pos:line="28" pos:column="14"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
