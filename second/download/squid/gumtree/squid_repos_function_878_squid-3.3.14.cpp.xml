<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_878_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_import_opened<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name><name pos:line="2" pos:column="26">Comm<pos:position pos:line="2" pos:column="30"/></name><operator pos:line="2" pos:column="30">::<pos:position pos:line="2" pos:column="32"/></operator><name pos:line="2" pos:column="32">ConnectionPointer<pos:position pos:line="2" pos:column="49"/></name></name> <modifier pos:line="2" pos:column="50">&amp;<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="51">conn<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>,
                   <parameter><decl><type><specifier pos:line="3" pos:column="20">const<pos:position pos:line="3" pos:column="25"/></specifier> <name pos:line="3" pos:column="26">char<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier></type><name pos:line="3" pos:column="32">note<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>,
                   <parameter><decl><type><name><name pos:line="4" pos:column="20">struct<pos:position pos:line="4" pos:column="26"/></name> <name pos:line="4" pos:column="27">addrinfo<pos:position pos:line="4" pos:column="35"/></name></name> <modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier></type><name pos:line="4" pos:column="37">AI<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="40"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">5<pos:position pos:line="6" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="15">2<pos:position pos:line="6" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="18">HERE<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">&lt;&lt;<pos:position pos:line="6" pos:column="31"/></operator> <name pos:line="6" pos:column="26">conn<pos:position pos:line="6" pos:column="30"/></name></expr></argument>)<pos:position pos:line="6" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><call><name><name pos:line="7" pos:column="12">Comm<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">::<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="18">IsConnOpen<pos:position pos:line="7" pos:column="28"/></name></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">conn<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">AI<pos:position pos:line="8" pos:column="14"/></name></expr></argument>)<pos:position pos:line="8" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">comm_init_opened<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><name pos:line="10" pos:column="22">conn<pos:position pos:line="10" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="28">0<pos:position pos:line="10" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="31">0<pos:position pos:line="10" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="34">note<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="40">AI<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="44"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator><name><name pos:line="12" pos:column="11">conn<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">flags<pos:position pos:line="12" pos:column="22"/></name></name> <operator pos:line="12" pos:column="23">&amp;<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="25">COMM_NOCLOEXEC<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">)<pos:position pos:line="12" pos:column="40"/></operator></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="13" pos:column="9">fd_table<pos:position pos:line="13" pos:column="17"/></name><index pos:line="13" pos:column="17">[<expr><name><name pos:line="13" pos:column="18">conn<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">-&gt;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="24">fd<pos:position pos:line="13" pos:column="26"/></name></name></expr>]<pos:position pos:line="13" pos:column="27"/></index></name><operator pos:line="13" pos:column="27">.<pos:position pos:line="13" pos:column="28"/></operator><name><name pos:line="13" pos:column="28">flags<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">.<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">close_on_exec<pos:position pos:line="13" pos:column="47"/></name></name> <operator pos:line="13" pos:column="48">=<pos:position pos:line="13" pos:column="49"/></operator> <literal type="number" pos:line="13" pos:column="50">1<pos:position pos:line="13" pos:column="51"/></literal></expr>;<pos:position pos:line="13" pos:column="52"/></expr_stmt></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name><name pos:line="15" pos:column="9">conn<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">local<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">.<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">GetPort<pos:position pos:line="15" pos:column="28"/></name></name><argument_list pos:line="15" pos:column="28">()<pos:position pos:line="15" pos:column="30"/></argument_list></call> <operator pos:line="15" pos:column="31">&gt;<pos:position pos:line="15" pos:column="35"/></operator> <operator pos:line="15" pos:column="33">(<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">unsigned<pos:position pos:line="15" pos:column="42"/></name> <name pos:line="15" pos:column="43">short<pos:position pos:line="15" pos:column="48"/></name><operator pos:line="15" pos:column="48">)<pos:position pos:line="15" pos:column="49"/></operator> <literal type="number" pos:line="15" pos:column="50">0<pos:position pos:line="15" pos:column="51"/></literal></expr>)<pos:position pos:line="15" pos:column="52"/></condition><then pos:line="15" pos:column="52"> <block pos:line="15" pos:column="53">{
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="16" pos:column="20"/></name></expr></cpp:if>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">AI<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">-&gt;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="17">ai_socktype<pos:position pos:line="17" pos:column="28"/></name></name> <operator pos:line="17" pos:column="29">!=<pos:position pos:line="17" pos:column="31"/></operator> <name pos:line="17" pos:column="32">SOCK_DGRAM<pos:position pos:line="17" pos:column="42"/></name></expr>)<pos:position pos:line="17" pos:column="43"/></condition><then pos:line="17" pos:column="43">
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="19" pos:column="13">fd_table<pos:position pos:line="19" pos:column="21"/></name><index pos:line="19" pos:column="21">[<expr><name><name pos:line="19" pos:column="22">conn<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">-&gt;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="28">fd<pos:position pos:line="19" pos:column="30"/></name></name></expr>]<pos:position pos:line="19" pos:column="31"/></index></name><operator pos:line="19" pos:column="31">.<pos:position pos:line="19" pos:column="32"/></operator><name><name pos:line="19" pos:column="32">flags<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">.<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="38">nolinger<pos:position pos:line="19" pos:column="46"/></name></name> <operator pos:line="19" pos:column="47">=<pos:position pos:line="19" pos:column="48"/></operator> <literal type="number" pos:line="19" pos:column="49">1<pos:position pos:line="19" pos:column="50"/></literal></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt></block></then></if>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">(<pos:position pos:line="22" pos:column="10"/></operator><name><name pos:line="22" pos:column="10">conn<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">-&gt;<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="16">flags<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">&amp;<pos:position pos:line="22" pos:column="27"/></operator> <name pos:line="22" pos:column="24">COMM_TRANSPARENT<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">)<pos:position pos:line="22" pos:column="41"/></operator></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="23" pos:column="9">fd_table<pos:position pos:line="23" pos:column="17"/></name><index pos:line="23" pos:column="17">[<expr><name><name pos:line="23" pos:column="18">conn<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">-&gt;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="24">fd<pos:position pos:line="23" pos:column="26"/></name></name></expr>]<pos:position pos:line="23" pos:column="27"/></index></name><operator pos:line="23" pos:column="27">.<pos:position pos:line="23" pos:column="28"/></operator><name><name pos:line="23" pos:column="28">flags<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">.<pos:position pos:line="23" pos:column="34"/></operator><name pos:line="23" pos:column="34">transparent<pos:position pos:line="23" pos:column="45"/></name></name> <operator pos:line="23" pos:column="46">=<pos:position pos:line="23" pos:column="47"/></operator> <literal type="number" pos:line="23" pos:column="48">1<pos:position pos:line="23" pos:column="49"/></literal></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">conn<pos:position pos:line="25" pos:column="13"/></name><operator pos:line="25" pos:column="13">-&gt;<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="15">flags<pos:position pos:line="25" pos:column="20"/></name></name> <operator pos:line="25" pos:column="21">&amp;<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="23">COMM_NONBLOCKING<pos:position pos:line="25" pos:column="39"/></name></expr>)<pos:position pos:line="25" pos:column="40"/></condition><then pos:line="25" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="26" pos:column="9">fd_table<pos:position pos:line="26" pos:column="17"/></name><index pos:line="26" pos:column="17">[<expr><name><name pos:line="26" pos:column="18">conn<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">-&gt;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="24">fd<pos:position pos:line="26" pos:column="26"/></name></name></expr>]<pos:position pos:line="26" pos:column="27"/></index></name><operator pos:line="26" pos:column="27">.<pos:position pos:line="26" pos:column="28"/></operator><name><name pos:line="26" pos:column="28">flags<pos:position pos:line="26" pos:column="33"/></name><operator pos:line="26" pos:column="33">.<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="34">nonblocking<pos:position pos:line="26" pos:column="45"/></name></name> <operator pos:line="26" pos:column="46">=<pos:position pos:line="26" pos:column="47"/></operator> <literal type="number" pos:line="26" pos:column="48">1<pos:position pos:line="26" pos:column="49"/></literal></expr>;<pos:position pos:line="26" pos:column="50"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef<pos:position pos:line="28" pos:column="7"/></cpp:directive> <name pos:line="28" pos:column="8">TCP_NODELAY<pos:position pos:line="28" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name><name pos:line="29" pos:column="9">AI<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">-&gt;<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="13">ai_socktype<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">==<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="28">SOCK_STREAM<pos:position pos:line="29" pos:column="39"/></name></expr>)<pos:position pos:line="29" pos:column="40"/></condition><then pos:line="29" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="30" pos:column="9">fd_table<pos:position pos:line="30" pos:column="17"/></name><index pos:line="30" pos:column="17">[<expr><name><name pos:line="30" pos:column="18">conn<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">-&gt;<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="24">fd<pos:position pos:line="30" pos:column="26"/></name></name></expr>]<pos:position pos:line="30" pos:column="27"/></index></name><operator pos:line="30" pos:column="27">.<pos:position pos:line="30" pos:column="28"/></operator><name><name pos:line="30" pos:column="28">flags<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">.<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="34">nodelay<pos:position pos:line="30" pos:column="41"/></name></name> <operator pos:line="30" pos:column="42">=<pos:position pos:line="30" pos:column="43"/></operator> <literal type="number" pos:line="30" pos:column="44">1<pos:position pos:line="30" pos:column="45"/></literal></expr>;<pos:position pos:line="30" pos:column="46"/></expr_stmt></block></then></if>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="33" pos:column="5">/* no fd_table[fd].flags. updates needed for these conditions:
     * if ((flags &amp; COMM_REUSEADDR)) ...
     * if ((flags &amp; COMM_DOBIND) ...) ...
     */</comment>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
