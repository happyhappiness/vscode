<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5664_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">SelectLoopInit<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">void<pos:position pos:line="2" pos:column="26"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* allocate memory first before attempting to open poll device */</comment>
    <comment type="block" pos:line="5" pos:column="5">/* This tracks the FD devpoll offset+state */</comment>
    <expr_stmt><expr><name pos:line="6" pos:column="5">devpoll_state<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <operator pos:line="6" pos:column="21">(<pos:position pos:line="6" pos:column="22"/></operator>struct <name pos:line="6" pos:column="29">_devpoll_state<pos:position pos:line="6" pos:column="43"/></name> <operator pos:line="6" pos:column="44">*<pos:position pos:line="6" pos:column="45"/></operator><operator pos:line="6" pos:column="45">)<pos:position pos:line="6" pos:column="46"/></operator><call><name pos:line="6" pos:column="46">xcalloc<pos:position pos:line="6" pos:column="53"/></name><argument_list pos:line="6" pos:column="53">(
                        <argument><expr><name pos:line="7" pos:column="25">SQUID_MAXFD<pos:position pos:line="7" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="7" pos:column="38">sizeof<argument_list pos:line="7" pos:column="44">(<argument><expr pos:line="7" pos:column="45">struct <name pos:line="7" pos:column="52">_devpoll_state<pos:position pos:line="7" pos:column="66"/></name></expr></argument>)<pos:position pos:line="7" pos:column="67"/></argument_list></sizeof></expr></argument>
                    )<pos:position pos:line="8" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* And this is the stuff we use to read events */</comment>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">do_poll<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">.<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">dp_fds<pos:position pos:line="11" pos:column="19"/></name></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <operator pos:line="11" pos:column="22">(<pos:position pos:line="11" pos:column="23"/></operator>struct <name pos:line="11" pos:column="30">pollfd<pos:position pos:line="11" pos:column="36"/></name> <operator pos:line="11" pos:column="37">*<pos:position pos:line="11" pos:column="38"/></operator><operator pos:line="11" pos:column="38">)<pos:position pos:line="11" pos:column="39"/></operator><call><name pos:line="11" pos:column="39">xcalloc<pos:position pos:line="11" pos:column="46"/></name><argument_list pos:line="11" pos:column="46">(
                         <argument><expr><name pos:line="12" pos:column="26">DEVPOLL_QUERYSIZE<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="45">sizeof<argument_list pos:line="12" pos:column="51">(<argument><expr pos:line="12" pos:column="52">struct <name pos:line="12" pos:column="59">pollfd<pos:position pos:line="12" pos:column="65"/></name></expr></argument>)<pos:position pos:line="12" pos:column="66"/></argument_list></sizeof></expr></argument>
                     )<pos:position pos:line="13" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">dpoll_nfds<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">DEVPOLL_QUERYSIZE<pos:position pos:line="14" pos:column="35"/></name></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="16" pos:column="5">devpoll_update<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">.<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">pfds<pos:position pos:line="16" pos:column="24"/></name></name> <operator pos:line="16" pos:column="25">=<pos:position pos:line="16" pos:column="26"/></operator> <operator pos:line="16" pos:column="27">(<pos:position pos:line="16" pos:column="28"/></operator>struct <name pos:line="16" pos:column="35">pollfd<pos:position pos:line="16" pos:column="41"/></name> <operator pos:line="16" pos:column="42">*<pos:position pos:line="16" pos:column="43"/></operator><operator pos:line="16" pos:column="43">)<pos:position pos:line="16" pos:column="44"/></operator><call><name pos:line="16" pos:column="44">xcalloc<pos:position pos:line="16" pos:column="51"/></name><argument_list pos:line="16" pos:column="51">(
                              <argument><expr><name pos:line="17" pos:column="31">DEVPOLL_UPDATESIZE<pos:position pos:line="17" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="51">sizeof<argument_list pos:line="17" pos:column="57">(<argument><expr pos:line="17" pos:column="58">struct <name pos:line="17" pos:column="65">pollfd<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></sizeof></expr></argument>
                          )<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">devpoll_update<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">.<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">cur<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <operator pos:line="19" pos:column="26">-<pos:position pos:line="19" pos:column="27"/></operator><literal type="number" pos:line="19" pos:column="27">1<pos:position pos:line="19" pos:column="28"/></literal></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">devpoll_update<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">.<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">size<pos:position pos:line="20" pos:column="24"/></name></name> <operator pos:line="20" pos:column="25">=<pos:position pos:line="20" pos:column="26"/></operator> <name pos:line="20" pos:column="27">DEVPOLL_UPDATESIZE<pos:position pos:line="20" pos:column="45"/></name></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* attempt to open /dev/poll device */</comment>
    <expr_stmt><expr><name pos:line="23" pos:column="5">devpoll_fd<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <call><name pos:line="23" pos:column="18">open<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><literal type="string" pos:line="23" pos:column="23">"/dev/poll"<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="36">O_RDWR<pos:position pos:line="23" pos:column="42"/></name></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="44"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">devpoll_fd<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">&lt;<pos:position pos:line="24" pos:column="24"/></operator> <literal type="number" pos:line="24" pos:column="22">0<pos:position pos:line="24" pos:column="23"/></literal></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">fatalf<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="string" pos:line="25" pos:column="16">"comm_select_init: can't open /dev/poll: %s\n"<pos:position pos:line="25" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="64">xstrerror<pos:position pos:line="25" pos:column="73"/></name><argument_list pos:line="25" pos:column="73">()<pos:position pos:line="25" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="77"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">fd_open<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">devpoll_fd<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="25">FD_UNKNOWN<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="37">"devpoll ctl"<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">commDevPollRegisterWithCacheManager<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">()<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
