<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5874_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">reg_errcode_t<pos:position pos:line="1" pos:column="21"/></name></type>
<name pos:line="2" pos:column="1">regex_compile<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">pattern<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">size<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">reg_syntax_t<pos:position pos:line="2" pos:column="58"/></name></type> <name pos:line="2" pos:column="59">syntax<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="67">struct<pos:position pos:line="2" pos:column="73"/></name> <name pos:line="2" pos:column="74">re_pattern_buffer<pos:position pos:line="2" pos:column="91"/></name></name> <modifier pos:line="2" pos:column="92">*<pos:position pos:line="2" pos:column="93"/></modifier></type><name pos:line="2" pos:column="93">bufp<pos:position pos:line="2" pos:column="97"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="98"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* We fetch characters from PATTERN here.  Even though PATTERN is
     * `char *' (i.e., signed), we declare these variables as unsigned, so
     * they can be reliably used as array indices.  */</comment>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">register<pos:position pos:line="7" pos:column="13"/></specifier> <name pos:line="7" pos:column="14">unsigned<pos:position pos:line="7" pos:column="22"/></name> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name></type> <name pos:line="7" pos:column="28">c<pos:position pos:line="7" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="31">c1<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* A random tempory spot in PATTERN.  */</comment>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">p1<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Points to the end of the buffer, where we should append.  */</comment>
    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">register<pos:position pos:line="13" pos:column="13"/></specifier> <name pos:line="13" pos:column="14">unsigned<pos:position pos:line="13" pos:column="22"/></name> <name pos:line="13" pos:column="23">char<pos:position pos:line="13" pos:column="27"/></name> <modifier pos:line="13" pos:column="28">*<pos:position pos:line="13" pos:column="29"/></modifier></type><name pos:line="13" pos:column="29">b<pos:position pos:line="13" pos:column="30"/></name></decl>;<pos:position pos:line="13" pos:column="31"/></decl_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* Keeps track of unclosed groups.  */</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">compile_stack_type<pos:position pos:line="16" pos:column="23"/></name></type> <name pos:line="16" pos:column="24">compile_stack<pos:position pos:line="16" pos:column="37"/></name></decl>;<pos:position pos:line="16" pos:column="38"/></decl_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* Points to the current (ending) position in the pattern.  */</comment>
    <decl_stmt><decl><type><specifier pos:line="19" pos:column="5">const<pos:position pos:line="19" pos:column="10"/></specifier> <name pos:line="19" pos:column="11">char<pos:position pos:line="19" pos:column="15"/></name> <modifier pos:line="19" pos:column="16">*<pos:position pos:line="19" pos:column="17"/></modifier></type><name pos:line="19" pos:column="17">p<pos:position pos:line="19" pos:column="18"/></name> <init pos:line="19" pos:column="19">= <expr><name pos:line="19" pos:column="21">pattern<pos:position pos:line="19" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="20" pos:column="5">const<pos:position pos:line="20" pos:column="10"/></specifier> <name pos:line="20" pos:column="11">char<pos:position pos:line="20" pos:column="15"/></name> <modifier pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></modifier></type><name pos:line="20" pos:column="17">pend<pos:position pos:line="20" pos:column="21"/></name> <init pos:line="20" pos:column="22">= <expr><name pos:line="20" pos:column="24">pattern<pos:position pos:line="20" pos:column="31"/></name> <operator pos:line="20" pos:column="32">+<pos:position pos:line="20" pos:column="33"/></operator> <name pos:line="20" pos:column="34">size<pos:position pos:line="20" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="39"/></decl_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* How to translate the characters in the pattern.  */</comment>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">char<pos:position pos:line="23" pos:column="9"/></name> <modifier pos:line="23" pos:column="10">*<pos:position pos:line="23" pos:column="11"/></modifier></type><name pos:line="23" pos:column="11">translate<pos:position pos:line="23" pos:column="20"/></name> <init pos:line="23" pos:column="21">= <expr><name><name pos:line="23" pos:column="23">bufp<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">translate<pos:position pos:line="23" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="23" pos:column="39"/></decl_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* Address of the count-byte of the most recently inserted `exactn'
     * command.  This makes it possible to tell if a new exact-match
     * character can be added to that command or if the character requires
     * a new `exactn' command.  */</comment>
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">unsigned<pos:position pos:line="29" pos:column="13"/></name> <name pos:line="29" pos:column="14">char<pos:position pos:line="29" pos:column="18"/></name> <modifier pos:line="29" pos:column="19">*<pos:position pos:line="29" pos:column="20"/></modifier></type><name pos:line="29" pos:column="20">pending_exact<pos:position pos:line="29" pos:column="33"/></name> <init pos:line="29" pos:column="34">= <expr><literal type="number" pos:line="29" pos:column="36">0<pos:position pos:line="29" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="38"/></decl_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* Address of start of the most recently finished expression.
     * This tells, e.g., postfix * where to find the start of its
     * operand.  Reset at the beginning of groups and alternatives.  */</comment>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">unsigned<pos:position pos:line="34" pos:column="13"/></name> <name pos:line="34" pos:column="14">char<pos:position pos:line="34" pos:column="18"/></name> <modifier pos:line="34" pos:column="19">*<pos:position pos:line="34" pos:column="20"/></modifier></type><name pos:line="34" pos:column="20">laststart<pos:position pos:line="34" pos:column="29"/></name> <init pos:line="34" pos:column="30">= <expr><literal type="number" pos:line="34" pos:column="32">0<pos:position pos:line="34" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="34" pos:column="34"/></decl_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* Address of beginning of regexp, or inside of last group.  */</comment>
    <decl_stmt><decl><type><name pos:line="37" pos:column="5">unsigned<pos:position pos:line="37" pos:column="13"/></name> <name pos:line="37" pos:column="14">char<pos:position pos:line="37" pos:column="18"/></name> <modifier pos:line="37" pos:column="19">*<pos:position pos:line="37" pos:column="20"/></modifier></type><name pos:line="37" pos:column="20">begalt<pos:position pos:line="37" pos:column="26"/></name></decl>;<pos:position pos:line="37" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="39" pos:column="5">/* Place in the uncompiled pattern (i.e., the {) to
     * which to go back if the interval is invalid.  */</comment>
    <decl_stmt><decl><type><specifier pos:line="41" pos:column="5">const<pos:position pos:line="41" pos:column="10"/></specifier> <name pos:line="41" pos:column="11">char<pos:position pos:line="41" pos:column="15"/></name> <modifier pos:line="41" pos:column="16">*<pos:position pos:line="41" pos:column="17"/></modifier></type><name pos:line="41" pos:column="17">beg_interval<pos:position pos:line="41" pos:column="29"/></name></decl>;<pos:position pos:line="41" pos:column="30"/></decl_stmt>

    <comment type="block" pos:line="43" pos:column="5">/* Address of the place where a forward jump should go to the end of
     * the containing expression.  Each alternative of an `or' -- except the
     * last -- ends with a forward jump of this sort.  */</comment>
    <decl_stmt><decl><type><name pos:line="46" pos:column="5">unsigned<pos:position pos:line="46" pos:column="13"/></name> <name pos:line="46" pos:column="14">char<pos:position pos:line="46" pos:column="18"/></name> <modifier pos:line="46" pos:column="19">*<pos:position pos:line="46" pos:column="20"/></modifier></type><name pos:line="46" pos:column="20">fixup_alt_jump<pos:position pos:line="46" pos:column="34"/></name> <init pos:line="46" pos:column="35">= <expr><literal type="number" pos:line="46" pos:column="37">0<pos:position pos:line="46" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="46" pos:column="39"/></decl_stmt>

    <comment type="block" pos:line="48" pos:column="5">/* Counts open-groups as they are encountered.  Remembered for the
     * matching close-group on the compile stack, so the same register
     * number is put in the stop_memory as the start_memory.  */</comment>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">regnum_t<pos:position pos:line="51" pos:column="13"/></name></type> <name pos:line="51" pos:column="14">regnum<pos:position pos:line="51" pos:column="20"/></name> <init pos:line="51" pos:column="21">= <expr><literal type="number" pos:line="51" pos:column="23">0<pos:position pos:line="51" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="51" pos:column="25"/></decl_stmt>

<cpp:ifdef pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">ifdef<pos:position pos:line="53" pos:column="7"/></cpp:directive> <name pos:line="53" pos:column="8">DEBUG<pos:position pos:line="53" pos:column="13"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">DEBUG_PRINT1<pos:position pos:line="54" pos:column="17"/></name><argument_list pos:line="54" pos:column="17">(<argument><expr><literal type="string" pos:line="54" pos:column="18">"\nCompiling pattern: "<pos:position pos:line="54" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="43"/></expr_stmt>
    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name pos:line="55" pos:column="9">debug<pos:position pos:line="55" pos:column="14"/></name></expr>)<pos:position pos:line="55" pos:column="15"/></condition><then pos:line="55" pos:column="15"> <block pos:line="55" pos:column="16">{
        <decl_stmt><decl><type><name pos:line="56" pos:column="9">unsigned<pos:position pos:line="56" pos:column="17"/></name></type> <name pos:line="56" pos:column="18">debug_count<pos:position pos:line="56" pos:column="29"/></name></decl>;<pos:position pos:line="56" pos:column="30"/></decl_stmt>

        <for pos:line="58" pos:column="9">for <control pos:line="58" pos:column="13">(<init><expr><name pos:line="58" pos:column="14">debug_count<pos:position pos:line="58" pos:column="25"/></name> <operator pos:line="58" pos:column="26">=<pos:position pos:line="58" pos:column="27"/></operator> <literal type="number" pos:line="58" pos:column="28">0<pos:position pos:line="58" pos:column="29"/></literal></expr>;<pos:position pos:line="58" pos:column="30"/></init> <condition><expr><name pos:line="58" pos:column="31">debug_count<pos:position pos:line="58" pos:column="42"/></name> <operator pos:line="58" pos:column="43">&lt;<pos:position pos:line="58" pos:column="47"/></operator> <name pos:line="58" pos:column="45">size<pos:position pos:line="58" pos:column="49"/></name></expr>;<pos:position pos:line="58" pos:column="50"/></condition> <incr><expr><name pos:line="58" pos:column="51">debug_count<pos:position pos:line="58" pos:column="62"/></name><operator pos:line="58" pos:column="62">++<pos:position pos:line="58" pos:column="64"/></operator></expr></incr>)<pos:position pos:line="58" pos:column="65"/></control>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="13">printchar<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><name><name pos:line="59" pos:column="23">pattern<pos:position pos:line="59" pos:column="30"/></name><index pos:line="59" pos:column="30">[<expr><name pos:line="59" pos:column="31">debug_count<pos:position pos:line="59" pos:column="42"/></name></expr>]<pos:position pos:line="59" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="45"/></expr_stmt></block></for>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">putchar<pos:position pos:line="60" pos:column="16"/></name><argument_list pos:line="60" pos:column="16">(<argument><expr><literal type="char" pos:line="60" pos:column="17">'\n'<pos:position pos:line="60" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="62" pos:column="8">/* DEBUG */</comment>

    <comment type="block" pos:line="64" pos:column="5">/* Initialize the compile stack.  */</comment>
    <expr_stmt><expr><name><name pos:line="65" pos:column="5">compile_stack<pos:position pos:line="65" pos:column="18"/></name><operator pos:line="65" pos:column="18">.<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="19">stack<pos:position pos:line="65" pos:column="24"/></name></name> <operator pos:line="65" pos:column="25">=<pos:position pos:line="65" pos:column="26"/></operator> <call><name pos:line="65" pos:column="27">TALLOC<pos:position pos:line="65" pos:column="33"/></name><argument_list pos:line="65" pos:column="33">(<argument><expr><name pos:line="65" pos:column="34">INIT_COMPILE_STACK_SIZE<pos:position pos:line="65" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="59">compile_stack_elt_t<pos:position pos:line="65" pos:column="78"/></name></expr></argument>)<pos:position pos:line="65" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="80"/></expr_stmt>
    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><name><name pos:line="66" pos:column="9">compile_stack<pos:position pos:line="66" pos:column="22"/></name><operator pos:line="66" pos:column="22">.<pos:position pos:line="66" pos:column="23"/></operator><name pos:line="66" pos:column="23">stack<pos:position pos:line="66" pos:column="28"/></name></name> <operator pos:line="66" pos:column="29">==<pos:position pos:line="66" pos:column="31"/></operator> <name pos:line="66" pos:column="32">NULL<pos:position pos:line="66" pos:column="36"/></name></expr>)<pos:position pos:line="66" pos:column="37"/></condition><then pos:line="66" pos:column="37">
        <block type="pseudo"><return pos:line="67" pos:column="9">return <expr><name pos:line="67" pos:column="16">REG_ESPACE<pos:position pos:line="67" pos:column="26"/></name></expr>;<pos:position pos:line="67" pos:column="27"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="69" pos:column="5">compile_stack<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">.<pos:position pos:line="69" pos:column="19"/></operator><name pos:line="69" pos:column="19">size<pos:position pos:line="69" pos:column="23"/></name></name> <operator pos:line="69" pos:column="24">=<pos:position pos:line="69" pos:column="25"/></operator> <name pos:line="69" pos:column="26">INIT_COMPILE_STACK_SIZE<pos:position pos:line="69" pos:column="49"/></name></expr>;<pos:position pos:line="69" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">compile_stack<pos:position pos:line="70" pos:column="18"/></name><operator pos:line="70" pos:column="18">.<pos:position pos:line="70" pos:column="19"/></operator><name pos:line="70" pos:column="19">avail<pos:position pos:line="70" pos:column="24"/></name></name> <operator pos:line="70" pos:column="25">=<pos:position pos:line="70" pos:column="26"/></operator> <literal type="number" pos:line="70" pos:column="27">0<pos:position pos:line="70" pos:column="28"/></literal></expr>;<pos:position pos:line="70" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="72" pos:column="5">/* Initialize the pattern buffer.  */</comment>
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">bufp<pos:position pos:line="73" pos:column="9"/></name><operator pos:line="73" pos:column="9">-&gt;<pos:position pos:line="73" pos:column="14"/></operator><name pos:line="73" pos:column="11">syntax<pos:position pos:line="73" pos:column="17"/></name></name> <operator pos:line="73" pos:column="18">=<pos:position pos:line="73" pos:column="19"/></operator> <name pos:line="73" pos:column="20">syntax<pos:position pos:line="73" pos:column="26"/></name></expr>;<pos:position pos:line="73" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="74" pos:column="5">bufp<pos:position pos:line="74" pos:column="9"/></name><operator pos:line="74" pos:column="9">-&gt;<pos:position pos:line="74" pos:column="14"/></operator><name pos:line="74" pos:column="11">fastmap_accurate<pos:position pos:line="74" pos:column="27"/></name></name> <operator pos:line="74" pos:column="28">=<pos:position pos:line="74" pos:column="29"/></operator> <literal type="number" pos:line="74" pos:column="30">0<pos:position pos:line="74" pos:column="31"/></literal></expr>;<pos:position pos:line="74" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="75" pos:column="5">bufp<pos:position pos:line="75" pos:column="9"/></name><operator pos:line="75" pos:column="9">-&gt;<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="11">not_bol<pos:position pos:line="75" pos:column="18"/></name></name> <operator pos:line="75" pos:column="19">=<pos:position pos:line="75" pos:column="20"/></operator> <name><name pos:line="75" pos:column="21">bufp<pos:position pos:line="75" pos:column="25"/></name><operator pos:line="75" pos:column="25">-&gt;<pos:position pos:line="75" pos:column="30"/></operator><name pos:line="75" pos:column="27">not_eol<pos:position pos:line="75" pos:column="34"/></name></name> <operator pos:line="75" pos:column="35">=<pos:position pos:line="75" pos:column="36"/></operator> <literal type="number" pos:line="75" pos:column="37">0<pos:position pos:line="75" pos:column="38"/></literal></expr>;<pos:position pos:line="75" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="77" pos:column="5">/* Set `used' to zero, so that if we return an error, the pattern
     * printer (for debugging) will think there's no pattern.  We reset it
     * at the end.  */</comment>
    <expr_stmt><expr><name><name pos:line="80" pos:column="5">bufp<pos:position pos:line="80" pos:column="9"/></name><operator pos:line="80" pos:column="9">-&gt;<pos:position pos:line="80" pos:column="14"/></operator><name pos:line="80" pos:column="11">used<pos:position pos:line="80" pos:column="15"/></name></name> <operator pos:line="80" pos:column="16">=<pos:position pos:line="80" pos:column="17"/></operator> <literal type="number" pos:line="80" pos:column="18">0<pos:position pos:line="80" pos:column="19"/></literal></expr>;<pos:position pos:line="80" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="82" pos:column="5">/* Always count groups, whether or not bufp-&gt;no_sub is set.  */</comment>
    <expr_stmt><expr><name><name pos:line="83" pos:column="5">bufp<pos:position pos:line="83" pos:column="9"/></name><operator pos:line="83" pos:column="9">-&gt;<pos:position pos:line="83" pos:column="14"/></operator><name pos:line="83" pos:column="11">re_nsub<pos:position pos:line="83" pos:column="18"/></name></name> <operator pos:line="83" pos:column="19">=<pos:position pos:line="83" pos:column="20"/></operator> <literal type="number" pos:line="83" pos:column="21">0<pos:position pos:line="83" pos:column="22"/></literal></expr>;<pos:position pos:line="83" pos:column="23"/></expr_stmt>

<cpp:if pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">if<pos:position pos:line="85" pos:column="4"/></cpp:directive> <expr><operator pos:line="85" pos:column="5">!<pos:position pos:line="85" pos:column="6"/></operator><call><name pos:line="85" pos:column="6">defined<pos:position pos:line="85" pos:column="13"/></name> <argument_list pos:line="85" pos:column="14">(<argument><expr><name pos:line="85" pos:column="15">SYNTAX_TABLE<pos:position pos:line="85" pos:column="27"/></name></expr></argument>)<pos:position pos:line="85" pos:column="28"/></argument_list></call></expr></cpp:if>
    <comment type="block" pos:line="86" pos:column="5">/* Initialize the syntax table.  */</comment>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">init_syntax_once<pos:position pos:line="87" pos:column="21"/></name><argument_list pos:line="87" pos:column="21">()<pos:position pos:line="87" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><name><name pos:line="90" pos:column="9">bufp<pos:position pos:line="90" pos:column="13"/></name><operator pos:line="90" pos:column="13">-&gt;<pos:position pos:line="90" pos:column="18"/></operator><name pos:line="90" pos:column="15">allocated<pos:position pos:line="90" pos:column="24"/></name></name> <operator pos:line="90" pos:column="25">==<pos:position pos:line="90" pos:column="27"/></operator> <literal type="number" pos:line="90" pos:column="28">0<pos:position pos:line="90" pos:column="29"/></literal></expr>)<pos:position pos:line="90" pos:column="30"/></condition><then pos:line="90" pos:column="30"> <block pos:line="90" pos:column="31">{
        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name><name pos:line="91" pos:column="13">bufp<pos:position pos:line="91" pos:column="17"/></name><operator pos:line="91" pos:column="17">-&gt;<pos:position pos:line="91" pos:column="22"/></operator><name pos:line="91" pos:column="19">buffer<pos:position pos:line="91" pos:column="25"/></name></name></expr>)<pos:position pos:line="91" pos:column="26"/></condition><then pos:line="91" pos:column="26"> <block pos:line="91" pos:column="27">{	<comment type="block" pos:line="91" pos:column="33">/* If zero allocated, but buffer is non-null, try to realloc
				 * enough space.  This loses if buffer's address is bogus, but
				 * that is the user's responsibility.  */</comment>
            <macro><name pos:line="94" pos:column="13">RETALLOC<pos:position pos:line="94" pos:column="21"/></name><argument_list pos:line="94" pos:column="21">(<argument pos:line="94" pos:column="22">bufp-&gt;buffer<pos:position pos:line="94" pos:column="34"/></argument>, <argument pos:line="94" pos:column="36">INIT_BUF_SIZE<pos:position pos:line="94" pos:column="49"/></argument>, <argument pos:line="94" pos:column="51">unsigned char<pos:position pos:line="94" pos:column="64"/></argument>)<pos:position pos:line="94" pos:column="65"/></argument_list></macro><empty_stmt pos:line="94" pos:column="65">;<pos:position pos:line="94" pos:column="66"/></empty_stmt>
        }<pos:position pos:line="95" pos:column="10"/></block></then> <else pos:line="95" pos:column="11">else <block pos:line="95" pos:column="16">{		<comment type="block" pos:line="95" pos:column="33">/* Caller did not allocate a buffer.  Do it for them.  */</comment>
            <expr_stmt><expr><name><name pos:line="96" pos:column="13">bufp<pos:position pos:line="96" pos:column="17"/></name><operator pos:line="96" pos:column="17">-&gt;<pos:position pos:line="96" pos:column="22"/></operator><name pos:line="96" pos:column="19">buffer<pos:position pos:line="96" pos:column="25"/></name></name> <operator pos:line="96" pos:column="26">=<pos:position pos:line="96" pos:column="27"/></operator> <macro><name pos:line="96" pos:column="28">TALLOC<pos:position pos:line="96" pos:column="34"/></name><argument_list pos:line="96" pos:column="34">(<argument pos:line="96" pos:column="35">INIT_BUF_SIZE<pos:position pos:line="96" pos:column="48"/></argument>, <argument pos:line="96" pos:column="50">unsigned char<pos:position pos:line="96" pos:column="63"/></argument>)<pos:position pos:line="96" pos:column="64"/></argument_list></macro></expr>;<pos:position pos:line="96" pos:column="65"/></expr_stmt>
        }<pos:position pos:line="97" pos:column="10"/></block></else></if>
        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><operator pos:line="98" pos:column="13">!<pos:position pos:line="98" pos:column="14"/></operator><name><name pos:line="98" pos:column="14">bufp<pos:position pos:line="98" pos:column="18"/></name><operator pos:line="98" pos:column="18">-&gt;<pos:position pos:line="98" pos:column="23"/></operator><name pos:line="98" pos:column="20">buffer<pos:position pos:line="98" pos:column="26"/></name></name></expr>)<pos:position pos:line="98" pos:column="27"/></condition><then pos:line="98" pos:column="27">
            <block type="pseudo"><return pos:line="99" pos:column="13">return <expr><name pos:line="99" pos:column="20">REG_ESPACE<pos:position pos:line="99" pos:column="30"/></name></expr>;<pos:position pos:line="99" pos:column="31"/></return></block></then></if>

        <expr_stmt><expr><name><name pos:line="101" pos:column="9">bufp<pos:position pos:line="101" pos:column="13"/></name><operator pos:line="101" pos:column="13">-&gt;<pos:position pos:line="101" pos:column="18"/></operator><name pos:line="101" pos:column="15">allocated<pos:position pos:line="101" pos:column="24"/></name></name> <operator pos:line="101" pos:column="25">=<pos:position pos:line="101" pos:column="26"/></operator> <name pos:line="101" pos:column="27">INIT_BUF_SIZE<pos:position pos:line="101" pos:column="40"/></name></expr>;<pos:position pos:line="101" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="103" pos:column="5">begalt<pos:position pos:line="103" pos:column="11"/></name> <operator pos:line="103" pos:column="12">=<pos:position pos:line="103" pos:column="13"/></operator> <name pos:line="103" pos:column="14">b<pos:position pos:line="103" pos:column="15"/></name> <operator pos:line="103" pos:column="16">=<pos:position pos:line="103" pos:column="17"/></operator> <name><name pos:line="103" pos:column="18">bufp<pos:position pos:line="103" pos:column="22"/></name><operator pos:line="103" pos:column="22">-&gt;<pos:position pos:line="103" pos:column="27"/></operator><name pos:line="103" pos:column="24">buffer<pos:position pos:line="103" pos:column="30"/></name></name></expr>;<pos:position pos:line="103" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="105" pos:column="5">/* Loop through the uncompiled pattern until we're at the end.  */</comment>
    <while pos:line="106" pos:column="5">while <condition pos:line="106" pos:column="11">(<expr><name pos:line="106" pos:column="12">p<pos:position pos:line="106" pos:column="13"/></name> <operator pos:line="106" pos:column="14">!=<pos:position pos:line="106" pos:column="16"/></operator> <name pos:line="106" pos:column="17">pend<pos:position pos:line="106" pos:column="21"/></name></expr>)<pos:position pos:line="106" pos:column="22"/></condition> <block pos:line="106" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="107" pos:column="9">PATFETCH<pos:position pos:line="107" pos:column="17"/></name><argument_list pos:line="107" pos:column="17">(<argument><expr><name pos:line="107" pos:column="18">c<pos:position pos:line="107" pos:column="19"/></name></expr></argument>)<pos:position pos:line="107" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="21"/></expr_stmt>

        <switch pos:line="109" pos:column="9">switch <condition pos:line="109" pos:column="16">(<expr><name pos:line="109" pos:column="17">c<pos:position pos:line="109" pos:column="18"/></name></expr>)<pos:position pos:line="109" pos:column="19"/></condition> <block pos:line="109" pos:column="20">{
        <case pos:line="110" pos:column="9">case <expr><literal type="char" pos:line="110" pos:column="14">'^'<pos:position pos:line="110" pos:column="17"/></literal></expr>:<pos:position pos:line="110" pos:column="18"/></case> <block pos:line="110" pos:column="19">{
            <if pos:line="111" pos:column="13">if <condition pos:line="111" pos:column="16">(		<comment type="block" pos:line="111" pos:column="33">/* If at start of pattern, it's an operator.  */</comment>
                <expr><name pos:line="112" pos:column="17">p<pos:position pos:line="112" pos:column="18"/></name> <operator pos:line="112" pos:column="19">==<pos:position pos:line="112" pos:column="21"/></operator> <name pos:line="112" pos:column="22">pattern<pos:position pos:line="112" pos:column="29"/></name> <operator pos:line="112" pos:column="30">+<pos:position pos:line="112" pos:column="31"/></operator> <literal type="number" pos:line="112" pos:column="32">1<pos:position pos:line="112" pos:column="33"/></literal>
                <comment type="block" pos:line="113" pos:column="17">/* If context independent, it's an operator.  */</comment>
                <operator pos:line="114" pos:column="17">||<pos:position pos:line="114" pos:column="19"/></operator> <name pos:line="114" pos:column="20">syntax<pos:position pos:line="114" pos:column="26"/></name> <operator pos:line="114" pos:column="27">&amp;<pos:position pos:line="114" pos:column="32"/></operator> <name pos:line="114" pos:column="29">RE_CONTEXT_INDEP_ANCHORS<pos:position pos:line="114" pos:column="53"/></name>
                <comment type="block" pos:line="115" pos:column="17">/* Otherwise, depends on what's come before.  */</comment>
                <operator pos:line="116" pos:column="17">||<pos:position pos:line="116" pos:column="19"/></operator> <call><name pos:line="116" pos:column="20">at_begline_loc_p<pos:position pos:line="116" pos:column="36"/></name><argument_list pos:line="116" pos:column="36">(<argument><expr><name pos:line="116" pos:column="37">pattern<pos:position pos:line="116" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="46">p<pos:position pos:line="116" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="49">syntax<pos:position pos:line="116" pos:column="55"/></name></expr></argument>)<pos:position pos:line="116" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="116" pos:column="57"/></condition><then pos:line="116" pos:column="57">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="117" pos:column="17">BUF_PUSH<pos:position pos:line="117" pos:column="25"/></name><argument_list pos:line="117" pos:column="25">(<argument><expr><name pos:line="117" pos:column="26">begline<pos:position pos:line="117" pos:column="33"/></name></expr></argument>)<pos:position pos:line="117" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="35"/></expr_stmt></block></then>
            <else pos:line="118" pos:column="13">else
                <block type="pseudo"><goto pos:line="119" pos:column="17">goto <name pos:line="119" pos:column="22">normal_char<pos:position pos:line="119" pos:column="33"/></name>;<pos:position pos:line="119" pos:column="34"/></goto></block></else></if>
        }<pos:position pos:line="120" pos:column="10"/></block>
        <break pos:line="121" pos:column="9">break;<pos:position pos:line="121" pos:column="15"/></break>


        <case pos:line="124" pos:column="9">case <expr><literal type="char" pos:line="124" pos:column="14">'$'<pos:position pos:line="124" pos:column="17"/></literal></expr>:<pos:position pos:line="124" pos:column="18"/></case> <block pos:line="124" pos:column="19">{
            <if pos:line="125" pos:column="13">if <condition pos:line="125" pos:column="16">(		<comment type="block" pos:line="125" pos:column="33">/* If at end of pattern, it's an operator.  */</comment>
                <expr><name pos:line="126" pos:column="17">p<pos:position pos:line="126" pos:column="18"/></name> <operator pos:line="126" pos:column="19">==<pos:position pos:line="126" pos:column="21"/></operator> <name pos:line="126" pos:column="22">pend<pos:position pos:line="126" pos:column="26"/></name>
                <comment type="block" pos:line="127" pos:column="17">/* If context independent, it's an operator.  */</comment>
                <operator pos:line="128" pos:column="17">||<pos:position pos:line="128" pos:column="19"/></operator> <name pos:line="128" pos:column="20">syntax<pos:position pos:line="128" pos:column="26"/></name> <operator pos:line="128" pos:column="27">&amp;<pos:position pos:line="128" pos:column="32"/></operator> <name pos:line="128" pos:column="29">RE_CONTEXT_INDEP_ANCHORS<pos:position pos:line="128" pos:column="53"/></name>
                <comment type="block" pos:line="129" pos:column="17">/* Otherwise, depends on what's next.  */</comment>
                <operator pos:line="130" pos:column="17">||<pos:position pos:line="130" pos:column="19"/></operator> <call><name pos:line="130" pos:column="20">at_endline_loc_p<pos:position pos:line="130" pos:column="36"/></name><argument_list pos:line="130" pos:column="36">(<argument><expr><name pos:line="130" pos:column="37">p<pos:position pos:line="130" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="40">pend<pos:position pos:line="130" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="46">syntax<pos:position pos:line="130" pos:column="52"/></name></expr></argument>)<pos:position pos:line="130" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="54"/></condition><then pos:line="130" pos:column="54">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="131" pos:column="17">BUF_PUSH<pos:position pos:line="131" pos:column="25"/></name><argument_list pos:line="131" pos:column="25">(<argument><expr><name pos:line="131" pos:column="26">endline<pos:position pos:line="131" pos:column="33"/></name></expr></argument>)<pos:position pos:line="131" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="35"/></expr_stmt></block></then>
            <else pos:line="132" pos:column="13">else
                <block type="pseudo"><goto pos:line="133" pos:column="17">goto <name pos:line="133" pos:column="22">normal_char<pos:position pos:line="133" pos:column="33"/></name>;<pos:position pos:line="133" pos:column="34"/></goto></block></else></if>
        }<pos:position pos:line="134" pos:column="10"/></block>
        <break pos:line="135" pos:column="9">break;<pos:position pos:line="135" pos:column="15"/></break>


        <case pos:line="138" pos:column="9">case <expr><literal type="char" pos:line="138" pos:column="14">'+'<pos:position pos:line="138" pos:column="17"/></literal></expr>:<pos:position pos:line="138" pos:column="18"/></case>
        <case pos:line="139" pos:column="9">case <expr><literal type="char" pos:line="139" pos:column="14">'?'<pos:position pos:line="139" pos:column="17"/></literal></expr>:<pos:position pos:line="139" pos:column="18"/></case>
            <if pos:line="140" pos:column="13">if <condition pos:line="140" pos:column="16">(<expr><operator pos:line="140" pos:column="17">(<pos:position pos:line="140" pos:column="18"/></operator><name pos:line="140" pos:column="18">syntax<pos:position pos:line="140" pos:column="24"/></name> <operator pos:line="140" pos:column="25">&amp;<pos:position pos:line="140" pos:column="30"/></operator> <name pos:line="140" pos:column="27">RE_BK_PLUS_QM<pos:position pos:line="140" pos:column="40"/></name><operator pos:line="140" pos:column="40">)<pos:position pos:line="140" pos:column="41"/></operator>
                    <operator pos:line="141" pos:column="21">||<pos:position pos:line="141" pos:column="23"/></operator> <operator pos:line="141" pos:column="24">(<pos:position pos:line="141" pos:column="25"/></operator><name pos:line="141" pos:column="25">syntax<pos:position pos:line="141" pos:column="31"/></name> <operator pos:line="141" pos:column="32">&amp;<pos:position pos:line="141" pos:column="37"/></operator> <name pos:line="141" pos:column="34">RE_LIMITED_OPS<pos:position pos:line="141" pos:column="48"/></name><operator pos:line="141" pos:column="48">)<pos:position pos:line="141" pos:column="49"/></operator></expr>)<pos:position pos:line="141" pos:column="50"/></condition><then pos:line="141" pos:column="50">
                <block type="pseudo"><goto pos:line="142" pos:column="17">goto <name pos:line="142" pos:column="22">normal_char<pos:position pos:line="142" pos:column="33"/></name>;<pos:position pos:line="142" pos:column="34"/></goto></block></then></if>
<label><name pos:line="143" pos:column="1">handle_plus<pos:position pos:line="143" pos:column="12"/></name>:<pos:position pos:line="143" pos:column="13"/></label>
        <case pos:line="144" pos:column="9">case <expr><literal type="char" pos:line="144" pos:column="14">'*'<pos:position pos:line="144" pos:column="17"/></literal></expr>:<pos:position pos:line="144" pos:column="18"/></case>
            <comment type="block" pos:line="145" pos:column="13">/* If there is no previous pattern... */</comment>
            <if pos:line="146" pos:column="13">if <condition pos:line="146" pos:column="16">(<expr><operator pos:line="146" pos:column="17">!<pos:position pos:line="146" pos:column="18"/></operator><name pos:line="146" pos:column="18">laststart<pos:position pos:line="146" pos:column="27"/></name></expr>)<pos:position pos:line="146" pos:column="28"/></condition><then pos:line="146" pos:column="28"> <block pos:line="146" pos:column="29">{
                <if pos:line="147" pos:column="17">if <condition pos:line="147" pos:column="20">(<expr><name pos:line="147" pos:column="21">syntax<pos:position pos:line="147" pos:column="27"/></name> <operator pos:line="147" pos:column="28">&amp;<pos:position pos:line="147" pos:column="33"/></operator> <name pos:line="147" pos:column="30">RE_CONTEXT_INVALID_OPS<pos:position pos:line="147" pos:column="52"/></name></expr>)<pos:position pos:line="147" pos:column="53"/></condition><then pos:line="147" pos:column="53">
                    <block type="pseudo"><return pos:line="148" pos:column="21">return <expr><name pos:line="148" pos:column="28">REG_BADRPT<pos:position pos:line="148" pos:column="38"/></name></expr>;<pos:position pos:line="148" pos:column="39"/></return></block></then>
                <elseif pos:line="149" pos:column="17">else <if pos:line="149" pos:column="22">if <condition pos:line="149" pos:column="25">(<expr><operator pos:line="149" pos:column="26">!<pos:position pos:line="149" pos:column="27"/></operator><operator pos:line="149" pos:column="27">(<pos:position pos:line="149" pos:column="28"/></operator><name pos:line="149" pos:column="28">syntax<pos:position pos:line="149" pos:column="34"/></name> <operator pos:line="149" pos:column="35">&amp;<pos:position pos:line="149" pos:column="40"/></operator> <name pos:line="149" pos:column="37">RE_CONTEXT_INDEP_OPS<pos:position pos:line="149" pos:column="57"/></name><operator pos:line="149" pos:column="57">)<pos:position pos:line="149" pos:column="58"/></operator></expr>)<pos:position pos:line="149" pos:column="59"/></condition><then pos:line="149" pos:column="59">
                    <block type="pseudo"><goto pos:line="150" pos:column="21">goto <name pos:line="150" pos:column="26">normal_char<pos:position pos:line="150" pos:column="37"/></name>;<pos:position pos:line="150" pos:column="38"/></goto></block></then></if></elseif></if>
            }<pos:position pos:line="151" pos:column="14"/></block></then></if> <block pos:line="151" pos:column="15">{
                <comment type="block" pos:line="152" pos:column="17">/* Are we optimizing this jump?  */</comment>
                <decl_stmt><decl><type><name pos:line="153" pos:column="17">boolean<pos:position pos:line="153" pos:column="24"/></name></type> <name pos:line="153" pos:column="25">keep_string_p<pos:position pos:line="153" pos:column="38"/></name> <init pos:line="153" pos:column="39">= <expr><literal type="boolean" pos:line="153" pos:column="41">false<pos:position pos:line="153" pos:column="46"/></literal></expr></init></decl>;<pos:position pos:line="153" pos:column="47"/></decl_stmt>

                <comment type="block" pos:line="155" pos:column="17">/* 1 means zero (many) matches is allowed.  */</comment>
                <decl_stmt><decl><type><name pos:line="156" pos:column="17">char<pos:position pos:line="156" pos:column="21"/></name></type> <name pos:line="156" pos:column="22">zero_times_ok<pos:position pos:line="156" pos:column="35"/></name> <init pos:line="156" pos:column="36">= <expr><literal type="number" pos:line="156" pos:column="38">0<pos:position pos:line="156" pos:column="39"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="156" pos:column="41">many_times_ok<pos:position pos:line="156" pos:column="54"/></name> <init pos:line="156" pos:column="55">= <expr><literal type="number" pos:line="156" pos:column="57">0<pos:position pos:line="156" pos:column="58"/></literal></expr></init></decl>;<pos:position pos:line="156" pos:column="59"/></decl_stmt>

                <comment type="block" pos:line="158" pos:column="17">/* If there is a sequence of repetition chars, collapse it
                 * down to just one (the right one).  We can't combine
                 * interval operators with these because of, e.g., `a{2}*',
                 * which should only match an even number of `a's.  */</comment>

                <for pos:line="163" pos:column="17">for <control pos:line="163" pos:column="21">(<init pos:line="163" pos:column="22">;<pos:position pos:line="163" pos:column="23"/></init><condition pos:line="163" pos:column="23">;<pos:position pos:line="163" pos:column="24"/></condition><incr/>)<pos:position pos:line="163" pos:column="25"/></control> <block pos:line="163" pos:column="26">{
                    <expr_stmt><expr><name pos:line="164" pos:column="21">zero_times_ok<pos:position pos:line="164" pos:column="34"/></name> <operator pos:line="164" pos:column="35">|=<pos:position pos:line="164" pos:column="37"/></operator> <name pos:line="164" pos:column="38">c<pos:position pos:line="164" pos:column="39"/></name> <operator pos:line="164" pos:column="40">!=<pos:position pos:line="164" pos:column="42"/></operator> <literal type="char" pos:line="164" pos:column="43">'+'<pos:position pos:line="164" pos:column="46"/></literal></expr>;<pos:position pos:line="164" pos:column="47"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="165" pos:column="21">many_times_ok<pos:position pos:line="165" pos:column="34"/></name> <operator pos:line="165" pos:column="35">|=<pos:position pos:line="165" pos:column="37"/></operator> <name pos:line="165" pos:column="38">c<pos:position pos:line="165" pos:column="39"/></name> <operator pos:line="165" pos:column="40">!=<pos:position pos:line="165" pos:column="42"/></operator> <literal type="char" pos:line="165" pos:column="43">'?'<pos:position pos:line="165" pos:column="46"/></literal></expr>;<pos:position pos:line="165" pos:column="47"/></expr_stmt>

                    <if pos:line="167" pos:column="21">if <condition pos:line="167" pos:column="24">(<expr><name pos:line="167" pos:column="25">p<pos:position pos:line="167" pos:column="26"/></name> <operator pos:line="167" pos:column="27">==<pos:position pos:line="167" pos:column="29"/></operator> <name pos:line="167" pos:column="30">pend<pos:position pos:line="167" pos:column="34"/></name></expr>)<pos:position pos:line="167" pos:column="35"/></condition><then pos:line="167" pos:column="35">
                        <block type="pseudo"><break pos:line="168" pos:column="25">break;<pos:position pos:line="168" pos:column="31"/></break></block></then></if>

                    <expr_stmt><expr><call><name pos:line="170" pos:column="21">PATFETCH<pos:position pos:line="170" pos:column="29"/></name><argument_list pos:line="170" pos:column="29">(<argument><expr><name pos:line="170" pos:column="30">c<pos:position pos:line="170" pos:column="31"/></name></expr></argument>)<pos:position pos:line="170" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="33"/></expr_stmt>

                    <if pos:line="172" pos:column="21">if <condition pos:line="172" pos:column="24">(<expr><name pos:line="172" pos:column="25">c<pos:position pos:line="172" pos:column="26"/></name> <operator pos:line="172" pos:column="27">==<pos:position pos:line="172" pos:column="29"/></operator> <literal type="char" pos:line="172" pos:column="30">'*'<pos:position pos:line="172" pos:column="33"/></literal>
                            <operator pos:line="173" pos:column="29">||<pos:position pos:line="173" pos:column="31"/></operator> <operator pos:line="173" pos:column="32">(<pos:position pos:line="173" pos:column="33"/></operator><operator pos:line="173" pos:column="33">!<pos:position pos:line="173" pos:column="34"/></operator><operator pos:line="173" pos:column="34">(<pos:position pos:line="173" pos:column="35"/></operator><name pos:line="173" pos:column="35">syntax<pos:position pos:line="173" pos:column="41"/></name> <operator pos:line="173" pos:column="42">&amp;<pos:position pos:line="173" pos:column="47"/></operator> <name pos:line="173" pos:column="44">RE_BK_PLUS_QM<pos:position pos:line="173" pos:column="57"/></name><operator pos:line="173" pos:column="57">)<pos:position pos:line="173" pos:column="58"/></operator> <operator pos:line="173" pos:column="59">&amp;&amp;<pos:position pos:line="173" pos:column="69"/></operator> <operator pos:line="173" pos:column="62">(<pos:position pos:line="173" pos:column="63"/></operator><name pos:line="173" pos:column="63">c<pos:position pos:line="173" pos:column="64"/></name> <operator pos:line="173" pos:column="65">==<pos:position pos:line="173" pos:column="67"/></operator> <literal type="char" pos:line="173" pos:column="68">'+'<pos:position pos:line="173" pos:column="71"/></literal> <operator pos:line="173" pos:column="72">||<pos:position pos:line="173" pos:column="74"/></operator> <name pos:line="173" pos:column="75">c<pos:position pos:line="173" pos:column="76"/></name> <operator pos:line="173" pos:column="77">==<pos:position pos:line="173" pos:column="79"/></operator> <literal type="char" pos:line="173" pos:column="80">'?'<pos:position pos:line="173" pos:column="83"/></literal><operator pos:line="173" pos:column="83">)<pos:position pos:line="173" pos:column="84"/></operator><operator pos:line="173" pos:column="84">)<pos:position pos:line="173" pos:column="85"/></operator></expr>)<pos:position pos:line="173" pos:column="86"/></condition><then><block type="pseudo"><empty_stmt pos:line="173" pos:column="86">;<pos:position pos:line="173" pos:column="87"/></empty_stmt></block></then>

                    <elseif pos:line="175" pos:column="21">else <if pos:line="175" pos:column="26">if <condition pos:line="175" pos:column="29">(<expr><name pos:line="175" pos:column="30">syntax<pos:position pos:line="175" pos:column="36"/></name> <operator pos:line="175" pos:column="37">&amp;<pos:position pos:line="175" pos:column="42"/></operator> <name pos:line="175" pos:column="39">RE_BK_PLUS_QM<pos:position pos:line="175" pos:column="52"/></name> <operator pos:line="175" pos:column="53">&amp;&amp;<pos:position pos:line="175" pos:column="63"/></operator> <name pos:line="175" pos:column="56">c<pos:position pos:line="175" pos:column="57"/></name> <operator pos:line="175" pos:column="58">==<pos:position pos:line="175" pos:column="60"/></operator> <literal type="char" pos:line="175" pos:column="61">'\\'<pos:position pos:line="175" pos:column="65"/></literal></expr>)<pos:position pos:line="175" pos:column="66"/></condition><then pos:line="175" pos:column="66"> <block pos:line="175" pos:column="67">{
                        <if pos:line="176" pos:column="25">if <condition pos:line="176" pos:column="28">(<expr><name pos:line="176" pos:column="29">p<pos:position pos:line="176" pos:column="30"/></name> <operator pos:line="176" pos:column="31">==<pos:position pos:line="176" pos:column="33"/></operator> <name pos:line="176" pos:column="34">pend<pos:position pos:line="176" pos:column="38"/></name></expr>)<pos:position pos:line="176" pos:column="39"/></condition><then pos:line="176" pos:column="39">
                            <block type="pseudo"><return pos:line="177" pos:column="29">return <expr><name pos:line="177" pos:column="36">REG_EESCAPE<pos:position pos:line="177" pos:column="47"/></name></expr>;<pos:position pos:line="177" pos:column="48"/></return></block></then></if>

                        <expr_stmt><expr><call><name pos:line="179" pos:column="25">PATFETCH<pos:position pos:line="179" pos:column="33"/></name><argument_list pos:line="179" pos:column="33">(<argument><expr><name pos:line="179" pos:column="34">c1<pos:position pos:line="179" pos:column="36"/></name></expr></argument>)<pos:position pos:line="179" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="38"/></expr_stmt>
                        <if pos:line="180" pos:column="25">if <condition pos:line="180" pos:column="28">(<expr><operator pos:line="180" pos:column="29">!<pos:position pos:line="180" pos:column="30"/></operator><operator pos:line="180" pos:column="30">(<pos:position pos:line="180" pos:column="31"/></operator><name pos:line="180" pos:column="31">c1<pos:position pos:line="180" pos:column="33"/></name> <operator pos:line="180" pos:column="34">==<pos:position pos:line="180" pos:column="36"/></operator> <literal type="char" pos:line="180" pos:column="37">'+'<pos:position pos:line="180" pos:column="40"/></literal> <operator pos:line="180" pos:column="41">||<pos:position pos:line="180" pos:column="43"/></operator> <name pos:line="180" pos:column="44">c1<pos:position pos:line="180" pos:column="46"/></name> <operator pos:line="180" pos:column="47">==<pos:position pos:line="180" pos:column="49"/></operator> <literal type="char" pos:line="180" pos:column="50">'?'<pos:position pos:line="180" pos:column="53"/></literal><operator pos:line="180" pos:column="53">)<pos:position pos:line="180" pos:column="54"/></operator></expr>)<pos:position pos:line="180" pos:column="55"/></condition><then pos:line="180" pos:column="55"> <block pos:line="180" pos:column="56">{
                            <expr_stmt><expr><name pos:line="181" pos:column="29">PATUNFETCH<pos:position pos:line="181" pos:column="39"/></name></expr>;<pos:position pos:line="181" pos:column="40"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="182" pos:column="29">PATUNFETCH<pos:position pos:line="182" pos:column="39"/></name></expr>;<pos:position pos:line="182" pos:column="40"/></expr_stmt>
                            <break pos:line="183" pos:column="29">break;<pos:position pos:line="183" pos:column="35"/></break>
                        }<pos:position pos:line="184" pos:column="26"/></block></then></if>
                        <expr_stmt><expr><name pos:line="185" pos:column="25">c<pos:position pos:line="185" pos:column="26"/></name> <operator pos:line="185" pos:column="27">=<pos:position pos:line="185" pos:column="28"/></operator> <name pos:line="185" pos:column="29">c1<pos:position pos:line="185" pos:column="31"/></name></expr>;<pos:position pos:line="185" pos:column="32"/></expr_stmt>
                    }<pos:position pos:line="186" pos:column="22"/></block></then></if></elseif> <else pos:line="186" pos:column="23">else <block pos:line="186" pos:column="28">{
                        <expr_stmt><expr><name pos:line="187" pos:column="25">PATUNFETCH<pos:position pos:line="187" pos:column="35"/></name></expr>;<pos:position pos:line="187" pos:column="36"/></expr_stmt>
                        <break pos:line="188" pos:column="25">break;<pos:position pos:line="188" pos:column="31"/></break>
                    }<pos:position pos:line="189" pos:column="22"/></block></else></if>

                    <comment type="block" pos:line="191" pos:column="21">/* If we get here, we found another repeat character.  */</comment>
                }<pos:position pos:line="192" pos:column="18"/></block></for>

                <comment type="block" pos:line="194" pos:column="17">/* Star, etc. applied to an empty pattern is equivalent
                 * to an empty pattern.  */</comment>
                <if pos:line="196" pos:column="17">if <condition pos:line="196" pos:column="20">(<expr><operator pos:line="196" pos:column="21">!<pos:position pos:line="196" pos:column="22"/></operator><name pos:line="196" pos:column="22">laststart<pos:position pos:line="196" pos:column="31"/></name></expr>)<pos:position pos:line="196" pos:column="32"/></condition><then pos:line="196" pos:column="32">
                    <block type="pseudo"><break pos:line="197" pos:column="21">break;<pos:position pos:line="197" pos:column="27"/></break></block></then></if>

                <comment type="block" pos:line="199" pos:column="17">/* Now we know whether or not zero matches is allowed
                 * and also whether or not two or more matches is allowed.  */</comment>
                <if pos:line="201" pos:column="17">if <condition pos:line="201" pos:column="20">(<expr><name pos:line="201" pos:column="21">many_times_ok<pos:position pos:line="201" pos:column="34"/></name></expr>)<pos:position pos:line="201" pos:column="35"/></condition><then pos:line="201" pos:column="35"> <block pos:line="201" pos:column="36">{	<comment type="block" pos:line="201" pos:column="41">/* More than one repetition is allowed, so put in at the
					 * end a backward relative jump from `b' to before the next
					 * jump we're going to put in below (which jumps from
					 * laststart to after this jump).
					 *
					 * But if we are at the `*' in the exact sequence `.*\n',
					 * insert an unconditional jump backwards to the .,
					 * instead of the beginning of the loop.  This way we only
					 * push a failure point once, instead of every time
					 * through the loop.  */</comment>
                    <expr_stmt><expr><call><name pos:line="211" pos:column="21">assert<pos:position pos:line="211" pos:column="27"/></name><argument_list pos:line="211" pos:column="27">(<argument><expr><name pos:line="211" pos:column="28">p<pos:position pos:line="211" pos:column="29"/></name> <operator pos:line="211" pos:column="30">-<pos:position pos:line="211" pos:column="31"/></operator> <literal type="number" pos:line="211" pos:column="32">1<pos:position pos:line="211" pos:column="33"/></literal> <operator pos:line="211" pos:column="34">&gt;<pos:position pos:line="211" pos:column="38"/></operator> <name pos:line="211" pos:column="36">pattern<pos:position pos:line="211" pos:column="43"/></name></expr></argument>)<pos:position pos:line="211" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="45"/></expr_stmt>

                    <comment type="block" pos:line="213" pos:column="21">/* Allocate the space for the jump.  */</comment>
                    <expr_stmt><expr><call><name pos:line="214" pos:column="21">GET_BUFFER_SPACE<pos:position pos:line="214" pos:column="37"/></name><argument_list pos:line="214" pos:column="37">(<argument><expr><literal type="number" pos:line="214" pos:column="38">3<pos:position pos:line="214" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="41"/></expr_stmt>

                    <comment type="block" pos:line="216" pos:column="21">/* We know we are not at the first character of the pattern,
                     * because laststart was nonzero.  And we've already
                     * incremented `p', by the way, to be the character after
                     * the `*'.  Do we have to do something analogous here
                     * for null bytes, because of RE_DOT_NOT_NULL?  */</comment>
                    <if pos:line="221" pos:column="21">if <condition pos:line="221" pos:column="24">(<expr><call><name pos:line="221" pos:column="25">TRANSLATE<pos:position pos:line="221" pos:column="34"/></name><argument_list pos:line="221" pos:column="34">(<argument><expr><operator pos:line="221" pos:column="35">*<pos:position pos:line="221" pos:column="36"/></operator><operator pos:line="221" pos:column="36">(<pos:position pos:line="221" pos:column="37"/></operator><name pos:line="221" pos:column="37">p<pos:position pos:line="221" pos:column="38"/></name> <operator pos:line="221" pos:column="39">-<pos:position pos:line="221" pos:column="40"/></operator> <literal type="number" pos:line="221" pos:column="41">2<pos:position pos:line="221" pos:column="42"/></literal><operator pos:line="221" pos:column="42">)<pos:position pos:line="221" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="221" pos:column="44"/></argument_list></call> <operator pos:line="221" pos:column="45">==<pos:position pos:line="221" pos:column="47"/></operator> <call><name pos:line="221" pos:column="48">TRANSLATE<pos:position pos:line="221" pos:column="57"/></name><argument_list pos:line="221" pos:column="57">(<argument><expr><literal type="char" pos:line="221" pos:column="58">'.'<pos:position pos:line="221" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="221" pos:column="62"/></argument_list></call>
                            <operator pos:line="222" pos:column="29">&amp;&amp;<pos:position pos:line="222" pos:column="39"/></operator> <name pos:line="222" pos:column="32">zero_times_ok<pos:position pos:line="222" pos:column="45"/></name>
                            <operator pos:line="223" pos:column="29">&amp;&amp;<pos:position pos:line="223" pos:column="39"/></operator> <name pos:line="223" pos:column="32">p<pos:position pos:line="223" pos:column="33"/></name> <operator pos:line="223" pos:column="34">&lt;<pos:position pos:line="223" pos:column="38"/></operator> <name pos:line="223" pos:column="36">pend<pos:position pos:line="223" pos:column="40"/></name> <operator pos:line="223" pos:column="41">&amp;&amp;<pos:position pos:line="223" pos:column="51"/></operator> <call><name pos:line="223" pos:column="44">TRANSLATE<pos:position pos:line="223" pos:column="53"/></name><argument_list pos:line="223" pos:column="53">(<argument><expr><operator pos:line="223" pos:column="54">*<pos:position pos:line="223" pos:column="55"/></operator><name pos:line="223" pos:column="55">p<pos:position pos:line="223" pos:column="56"/></name></expr></argument>)<pos:position pos:line="223" pos:column="57"/></argument_list></call> <operator pos:line="223" pos:column="58">==<pos:position pos:line="223" pos:column="60"/></operator> <call><name pos:line="223" pos:column="61">TRANSLATE<pos:position pos:line="223" pos:column="70"/></name><argument_list pos:line="223" pos:column="70">(<argument><expr><literal type="char" pos:line="223" pos:column="71">'\n'<pos:position pos:line="223" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="223" pos:column="76"/></argument_list></call>
                            <operator pos:line="224" pos:column="29">&amp;&amp;<pos:position pos:line="224" pos:column="39"/></operator> <operator pos:line="224" pos:column="32">!<pos:position pos:line="224" pos:column="33"/></operator><operator pos:line="224" pos:column="33">(<pos:position pos:line="224" pos:column="34"/></operator><name pos:line="224" pos:column="34">syntax<pos:position pos:line="224" pos:column="40"/></name> <operator pos:line="224" pos:column="41">&amp;<pos:position pos:line="224" pos:column="46"/></operator> <name pos:line="224" pos:column="43">RE_DOT_NEWLINE<pos:position pos:line="224" pos:column="57"/></name><operator pos:line="224" pos:column="57">)<pos:position pos:line="224" pos:column="58"/></operator></expr>)<pos:position pos:line="224" pos:column="59"/></condition><then pos:line="224" pos:column="59"> <block pos:line="224" pos:column="60">{	<comment type="block" pos:line="224" pos:column="65">/* We have .*\n.  */</comment>
                        <expr_stmt><expr><call><name pos:line="225" pos:column="25">STORE_JUMP<pos:position pos:line="225" pos:column="35"/></name><argument_list pos:line="225" pos:column="35">(<argument><expr><name pos:line="225" pos:column="36">jump<pos:position pos:line="225" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="42">b<pos:position pos:line="225" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="45">laststart<pos:position pos:line="225" pos:column="54"/></name></expr></argument>)<pos:position pos:line="225" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="56"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="226" pos:column="25">keep_string_p<pos:position pos:line="226" pos:column="38"/></name> <operator pos:line="226" pos:column="39">=<pos:position pos:line="226" pos:column="40"/></operator> <literal type="boolean" pos:line="226" pos:column="41">true<pos:position pos:line="226" pos:column="45"/></literal></expr>;<pos:position pos:line="226" pos:column="46"/></expr_stmt>
                    }<pos:position pos:line="227" pos:column="22"/></block></then> <else pos:line="227" pos:column="23">else
                        <comment type="block" pos:line="228" pos:column="25">/* Anything else.  */</comment>
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="229" pos:column="25">STORE_JUMP<pos:position pos:line="229" pos:column="35"/></name><argument_list pos:line="229" pos:column="35">(<argument><expr><name pos:line="229" pos:column="36">maybe_pop_jump<pos:position pos:line="229" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="229" pos:column="52">b<pos:position pos:line="229" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="229" pos:column="55">laststart<pos:position pos:line="229" pos:column="64"/></name> <operator pos:line="229" pos:column="65">-<pos:position pos:line="229" pos:column="66"/></operator> <literal type="number" pos:line="229" pos:column="67">3<pos:position pos:line="229" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="229" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="70"/></expr_stmt></block></else></if>

                    <comment type="block" pos:line="231" pos:column="21">/* We've added more stuff to the buffer.  */</comment>
                    <expr_stmt><expr><name pos:line="232" pos:column="21">b<pos:position pos:line="232" pos:column="22"/></name> <operator pos:line="232" pos:column="23">+=<pos:position pos:line="232" pos:column="25"/></operator> <literal type="number" pos:line="232" pos:column="26">3<pos:position pos:line="232" pos:column="27"/></literal></expr>;<pos:position pos:line="232" pos:column="28"/></expr_stmt>
                }<pos:position pos:line="233" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="234" pos:column="17">/* On failure, jump from laststart to b + 3, which will be the
                 * end of the buffer after this jump is inserted.  */</comment>
                <expr_stmt><expr><call><name pos:line="236" pos:column="17">GET_BUFFER_SPACE<pos:position pos:line="236" pos:column="33"/></name><argument_list pos:line="236" pos:column="33">(<argument><expr><literal type="number" pos:line="236" pos:column="34">3<pos:position pos:line="236" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="236" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="237" pos:column="17">INSERT_JUMP<pos:position pos:line="237" pos:column="28"/></name><argument_list pos:line="237" pos:column="28">(<argument><expr><ternary><condition><expr><name pos:line="237" pos:column="29">keep_string_p<pos:position pos:line="237" pos:column="42"/></name></expr> ?<pos:position pos:line="237" pos:column="44"/></condition><then pos:line="237" pos:column="44"> <expr><name pos:line="237" pos:column="45">on_failure_keep_string_jump<pos:position pos:line="237" pos:column="72"/></name></expr>
                            <pos:position pos:line="238" pos:column="29"/></then><else pos:line="238" pos:column="29">: <expr><name pos:line="238" pos:column="31">on_failure_jump<pos:position pos:line="238" pos:column="46"/></name></expr></else></ternary></expr></argument>,
                            <argument><expr><name pos:line="239" pos:column="29">laststart<pos:position pos:line="239" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="239" pos:column="40">b<pos:position pos:line="239" pos:column="41"/></name> <operator pos:line="239" pos:column="42">+<pos:position pos:line="239" pos:column="43"/></operator> <literal type="number" pos:line="239" pos:column="44">3<pos:position pos:line="239" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="239" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="47"/></expr_stmt>
                <expr_stmt><expr><name pos:line="240" pos:column="17">pending_exact<pos:position pos:line="240" pos:column="30"/></name> <operator pos:line="240" pos:column="31">=<pos:position pos:line="240" pos:column="32"/></operator> <literal type="number" pos:line="240" pos:column="33">0<pos:position pos:line="240" pos:column="34"/></literal></expr>;<pos:position pos:line="240" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><name pos:line="241" pos:column="17">b<pos:position pos:line="241" pos:column="18"/></name> <operator pos:line="241" pos:column="19">+=<pos:position pos:line="241" pos:column="21"/></operator> <literal type="number" pos:line="241" pos:column="22">3<pos:position pos:line="241" pos:column="23"/></literal></expr>;<pos:position pos:line="241" pos:column="24"/></expr_stmt>

                <if pos:line="243" pos:column="17">if <condition pos:line="243" pos:column="20">(<expr><operator pos:line="243" pos:column="21">!<pos:position pos:line="243" pos:column="22"/></operator><name pos:line="243" pos:column="22">zero_times_ok<pos:position pos:line="243" pos:column="35"/></name></expr>)<pos:position pos:line="243" pos:column="36"/></condition><then pos:line="243" pos:column="36"> <block pos:line="243" pos:column="37">{
                    <comment type="block" pos:line="244" pos:column="21">/* At least one repetition is required, so insert a
                     * `dummy_failure_jump' before the initial
                     * `on_failure_jump' instruction of the loop. This
                     * effects a skip over that instruction the first time
                     * we hit that loop.  */</comment>
                    <expr_stmt><expr><call><name pos:line="249" pos:column="21">GET_BUFFER_SPACE<pos:position pos:line="249" pos:column="37"/></name><argument_list pos:line="249" pos:column="37">(<argument><expr><literal type="number" pos:line="249" pos:column="38">3<pos:position pos:line="249" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="249" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="41"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="250" pos:column="21">INSERT_JUMP<pos:position pos:line="250" pos:column="32"/></name><argument_list pos:line="250" pos:column="32">(<argument><expr><name pos:line="250" pos:column="33">dummy_failure_jump<pos:position pos:line="250" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="53">laststart<pos:position pos:line="250" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="64">laststart<pos:position pos:line="250" pos:column="73"/></name> <operator pos:line="250" pos:column="74">+<pos:position pos:line="250" pos:column="75"/></operator> <literal type="number" pos:line="250" pos:column="76">6<pos:position pos:line="250" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="250" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="79"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="251" pos:column="21">b<pos:position pos:line="251" pos:column="22"/></name> <operator pos:line="251" pos:column="23">+=<pos:position pos:line="251" pos:column="25"/></operator> <literal type="number" pos:line="251" pos:column="26">3<pos:position pos:line="251" pos:column="27"/></literal></expr>;<pos:position pos:line="251" pos:column="28"/></expr_stmt>
                }<pos:position pos:line="252" pos:column="18"/></block></then></if>
            }<pos:position pos:line="253" pos:column="14"/></block>
            <break pos:line="254" pos:column="13">break;<pos:position pos:line="254" pos:column="19"/></break>


        <case pos:line="257" pos:column="9">case <expr><literal type="char" pos:line="257" pos:column="14">'.'<pos:position pos:line="257" pos:column="17"/></literal></expr>:<pos:position pos:line="257" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="258" pos:column="13">laststart<pos:position pos:line="258" pos:column="22"/></name> <operator pos:line="258" pos:column="23">=<pos:position pos:line="258" pos:column="24"/></operator> <name pos:line="258" pos:column="25">b<pos:position pos:line="258" pos:column="26"/></name></expr>;<pos:position pos:line="258" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="259" pos:column="13">BUF_PUSH<pos:position pos:line="259" pos:column="21"/></name><argument_list pos:line="259" pos:column="21">(<argument><expr><name pos:line="259" pos:column="22">anychar<pos:position pos:line="259" pos:column="29"/></name></expr></argument>)<pos:position pos:line="259" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="31"/></expr_stmt>
            <break pos:line="260" pos:column="13">break;<pos:position pos:line="260" pos:column="19"/></break>


        <case pos:line="263" pos:column="9">case <expr><literal type="char" pos:line="263" pos:column="14">'['<pos:position pos:line="263" pos:column="17"/></literal></expr>:<pos:position pos:line="263" pos:column="18"/></case> <block pos:line="263" pos:column="19">{
            <decl_stmt><decl><type><name pos:line="264" pos:column="13">boolean<pos:position pos:line="264" pos:column="20"/></name></type> <name pos:line="264" pos:column="21">had_char_class<pos:position pos:line="264" pos:column="35"/></name> <init pos:line="264" pos:column="36">= <expr><literal type="boolean" pos:line="264" pos:column="38">false<pos:position pos:line="264" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="264" pos:column="44"/></decl_stmt>

            <if pos:line="266" pos:column="13">if <condition pos:line="266" pos:column="16">(<expr><name pos:line="266" pos:column="17">p<pos:position pos:line="266" pos:column="18"/></name> <operator pos:line="266" pos:column="19">==<pos:position pos:line="266" pos:column="21"/></operator> <name pos:line="266" pos:column="22">pend<pos:position pos:line="266" pos:column="26"/></name></expr>)<pos:position pos:line="266" pos:column="27"/></condition><then pos:line="266" pos:column="27">
                <block type="pseudo"><return pos:line="267" pos:column="17">return <expr><name pos:line="267" pos:column="24">REG_EBRACK<pos:position pos:line="267" pos:column="34"/></name></expr>;<pos:position pos:line="267" pos:column="35"/></return></block></then></if>

            <comment type="block" pos:line="269" pos:column="13">/* Ensure that we have enough space to push a charset: the
             * opcode, the length count, and the bitset; 34 bytes in all.  */</comment>
            <expr_stmt><expr><call><name pos:line="271" pos:column="13">GET_BUFFER_SPACE<pos:position pos:line="271" pos:column="29"/></name><argument_list pos:line="271" pos:column="29">(<argument><expr><literal type="number" pos:line="271" pos:column="30">34<pos:position pos:line="271" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="271" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="34"/></expr_stmt>

            <expr_stmt><expr><name pos:line="273" pos:column="13">laststart<pos:position pos:line="273" pos:column="22"/></name> <operator pos:line="273" pos:column="23">=<pos:position pos:line="273" pos:column="24"/></operator> <name pos:line="273" pos:column="25">b<pos:position pos:line="273" pos:column="26"/></name></expr>;<pos:position pos:line="273" pos:column="27"/></expr_stmt>

            <comment type="block" pos:line="275" pos:column="13">/* We test `*p == '^' twice, instead of using an if
             * statement, so we only need one BUF_PUSH.  */</comment>
            <expr_stmt><expr><call><name pos:line="277" pos:column="13">BUF_PUSH<pos:position pos:line="277" pos:column="21"/></name><argument_list pos:line="277" pos:column="21">(<argument><expr><ternary><condition><expr><operator pos:line="277" pos:column="22">*<pos:position pos:line="277" pos:column="23"/></operator><name pos:line="277" pos:column="23">p<pos:position pos:line="277" pos:column="24"/></name> <operator pos:line="277" pos:column="25">==<pos:position pos:line="277" pos:column="27"/></operator> <literal type="char" pos:line="277" pos:column="28">'^'<pos:position pos:line="277" pos:column="31"/></literal></expr> ?<pos:position pos:line="277" pos:column="33"/></condition><then pos:line="277" pos:column="33"> <expr><name pos:line="277" pos:column="34">charset_not<pos:position pos:line="277" pos:column="45"/></name></expr> <pos:position pos:line="277" pos:column="46"/></then><else pos:line="277" pos:column="46">: <expr><name pos:line="277" pos:column="48">charset<pos:position pos:line="277" pos:column="55"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="277" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="277" pos:column="57"/></expr_stmt>
            <if pos:line="278" pos:column="13">if <condition pos:line="278" pos:column="16">(<expr><operator pos:line="278" pos:column="17">*<pos:position pos:line="278" pos:column="18"/></operator><name pos:line="278" pos:column="18">p<pos:position pos:line="278" pos:column="19"/></name> <operator pos:line="278" pos:column="20">==<pos:position pos:line="278" pos:column="22"/></operator> <literal type="char" pos:line="278" pos:column="23">'^'<pos:position pos:line="278" pos:column="26"/></literal></expr>)<pos:position pos:line="278" pos:column="27"/></condition><then pos:line="278" pos:column="27">
                <block type="pseudo"><expr_stmt><expr><name pos:line="279" pos:column="17">p<pos:position pos:line="279" pos:column="18"/></name><operator pos:line="279" pos:column="18">++<pos:position pos:line="279" pos:column="20"/></operator></expr>;<pos:position pos:line="279" pos:column="21"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="281" pos:column="13">/* Remember the first position in the bracket expression.  */</comment>
            <expr_stmt><expr><name pos:line="282" pos:column="13">p1<pos:position pos:line="282" pos:column="15"/></name> <operator pos:line="282" pos:column="16">=<pos:position pos:line="282" pos:column="17"/></operator> <name pos:line="282" pos:column="18">p<pos:position pos:line="282" pos:column="19"/></name></expr>;<pos:position pos:line="282" pos:column="20"/></expr_stmt>

            <comment type="block" pos:line="284" pos:column="13">/* Push the number of bytes in the bitmap.  */</comment>
            <expr_stmt><expr><call><name pos:line="285" pos:column="13">BUF_PUSH<pos:position pos:line="285" pos:column="21"/></name><argument_list pos:line="285" pos:column="21">(<argument><expr><operator pos:line="285" pos:column="22">(<pos:position pos:line="285" pos:column="23"/></operator><literal type="number" pos:line="285" pos:column="23">1<pos:position pos:line="285" pos:column="24"/></literal> <operator pos:line="285" pos:column="25">&lt;&lt;<pos:position pos:line="285" pos:column="33"/></operator> <name pos:line="285" pos:column="28">BYTEWIDTH<pos:position pos:line="285" pos:column="37"/></name><operator pos:line="285" pos:column="37">)<pos:position pos:line="285" pos:column="38"/></operator> <operator pos:line="285" pos:column="39">/<pos:position pos:line="285" pos:column="40"/></operator> <name pos:line="285" pos:column="41">BYTEWIDTH<pos:position pos:line="285" pos:column="50"/></name></expr></argument>)<pos:position pos:line="285" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="285" pos:column="52"/></expr_stmt>

            <comment type="block" pos:line="287" pos:column="13">/* Clear the whole map.  */</comment>
            <expr_stmt><expr><call><name pos:line="288" pos:column="13">memset<pos:position pos:line="288" pos:column="19"/></name><argument_list pos:line="288" pos:column="19">(<argument><expr><name pos:line="288" pos:column="20">b<pos:position pos:line="288" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="288" pos:column="23">0<pos:position pos:line="288" pos:column="24"/></literal></expr></argument>, <argument><expr><operator pos:line="288" pos:column="26">(<pos:position pos:line="288" pos:column="27"/></operator><literal type="number" pos:line="288" pos:column="27">1<pos:position pos:line="288" pos:column="28"/></literal> <operator pos:line="288" pos:column="29">&lt;&lt;<pos:position pos:line="288" pos:column="37"/></operator> <name pos:line="288" pos:column="32">BYTEWIDTH<pos:position pos:line="288" pos:column="41"/></name><operator pos:line="288" pos:column="41">)<pos:position pos:line="288" pos:column="42"/></operator> <operator pos:line="288" pos:column="43">/<pos:position pos:line="288" pos:column="44"/></operator> <name pos:line="288" pos:column="45">BYTEWIDTH<pos:position pos:line="288" pos:column="54"/></name></expr></argument>)<pos:position pos:line="288" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="56"/></expr_stmt>

            <comment type="block" pos:line="290" pos:column="13">/* charset_not matches newline according to a syntax bit.  */</comment>
            <if pos:line="291" pos:column="13">if <condition pos:line="291" pos:column="16">(<expr><operator pos:line="291" pos:column="17">(<pos:position pos:line="291" pos:column="18"/></operator><name pos:line="291" pos:column="18">re_opcode_t<pos:position pos:line="291" pos:column="29"/></name><operator pos:line="291" pos:column="29">)<pos:position pos:line="291" pos:column="30"/></operator> <name><name pos:line="291" pos:column="31">b<pos:position pos:line="291" pos:column="32"/></name><index pos:line="291" pos:column="32">[<expr><operator pos:line="291" pos:column="33">-<pos:position pos:line="291" pos:column="34"/></operator><literal type="number" pos:line="291" pos:column="34">2<pos:position pos:line="291" pos:column="35"/></literal></expr>]<pos:position pos:line="291" pos:column="36"/></index></name> <operator pos:line="291" pos:column="37">==<pos:position pos:line="291" pos:column="39"/></operator> <name pos:line="291" pos:column="40">charset_not<pos:position pos:line="291" pos:column="51"/></name>
                    <operator pos:line="292" pos:column="21">&amp;&amp;<pos:position pos:line="292" pos:column="31"/></operator> <operator pos:line="292" pos:column="24">(<pos:position pos:line="292" pos:column="25"/></operator><name pos:line="292" pos:column="25">syntax<pos:position pos:line="292" pos:column="31"/></name> <operator pos:line="292" pos:column="32">&amp;<pos:position pos:line="292" pos:column="37"/></operator> <name pos:line="292" pos:column="34">RE_HAT_LISTS_NOT_NEWLINE<pos:position pos:line="292" pos:column="58"/></name><operator pos:line="292" pos:column="58">)<pos:position pos:line="292" pos:column="59"/></operator></expr>)<pos:position pos:line="292" pos:column="60"/></condition><then pos:line="292" pos:column="60">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="293" pos:column="17">SET_LIST_BIT<pos:position pos:line="293" pos:column="29"/></name><argument_list pos:line="293" pos:column="29">(<argument><expr><literal type="char" pos:line="293" pos:column="30">'\n'<pos:position pos:line="293" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="293" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="36"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="295" pos:column="13">/* Read in characters and ranges, setting map bits.  */</comment>
            <for pos:line="296" pos:column="13">for <control pos:line="296" pos:column="17">(<init pos:line="296" pos:column="18">;<pos:position pos:line="296" pos:column="19"/></init><condition pos:line="296" pos:column="19">;<pos:position pos:line="296" pos:column="20"/></condition><incr/>)<pos:position pos:line="296" pos:column="21"/></control> <block pos:line="296" pos:column="22">{
                <if pos:line="297" pos:column="17">if <condition pos:line="297" pos:column="20">(<expr><name pos:line="297" pos:column="21">p<pos:position pos:line="297" pos:column="22"/></name> <operator pos:line="297" pos:column="23">==<pos:position pos:line="297" pos:column="25"/></operator> <name pos:line="297" pos:column="26">pend<pos:position pos:line="297" pos:column="30"/></name></expr>)<pos:position pos:line="297" pos:column="31"/></condition><then pos:line="297" pos:column="31">
                    <block type="pseudo"><return pos:line="298" pos:column="21">return <expr><name pos:line="298" pos:column="28">REG_EBRACK<pos:position pos:line="298" pos:column="38"/></name></expr>;<pos:position pos:line="298" pos:column="39"/></return></block></then></if>

                <expr_stmt><expr><call><name pos:line="300" pos:column="17">PATFETCH<pos:position pos:line="300" pos:column="25"/></name><argument_list pos:line="300" pos:column="25">(<argument><expr><name pos:line="300" pos:column="26">c<pos:position pos:line="300" pos:column="27"/></name></expr></argument>)<pos:position pos:line="300" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="29"/></expr_stmt>

                <comment type="block" pos:line="302" pos:column="17">/* \ might escape characters inside [...] and [^...].  */</comment>
                <if pos:line="303" pos:column="17">if <condition pos:line="303" pos:column="20">(<expr><operator pos:line="303" pos:column="21">(<pos:position pos:line="303" pos:column="22"/></operator><name pos:line="303" pos:column="22">syntax<pos:position pos:line="303" pos:column="28"/></name> <operator pos:line="303" pos:column="29">&amp;<pos:position pos:line="303" pos:column="34"/></operator> <name pos:line="303" pos:column="31">RE_BACKSLASH_ESCAPE_IN_LISTS<pos:position pos:line="303" pos:column="59"/></name><operator pos:line="303" pos:column="59">)<pos:position pos:line="303" pos:column="60"/></operator> <operator pos:line="303" pos:column="61">&amp;&amp;<pos:position pos:line="303" pos:column="71"/></operator> <name pos:line="303" pos:column="64">c<pos:position pos:line="303" pos:column="65"/></name> <operator pos:line="303" pos:column="66">==<pos:position pos:line="303" pos:column="68"/></operator> <literal type="char" pos:line="303" pos:column="69">'\\'<pos:position pos:line="303" pos:column="73"/></literal></expr>)<pos:position pos:line="303" pos:column="74"/></condition><then pos:line="303" pos:column="74"> <block pos:line="303" pos:column="75">{
                    <if pos:line="304" pos:column="21">if <condition pos:line="304" pos:column="24">(<expr><name pos:line="304" pos:column="25">p<pos:position pos:line="304" pos:column="26"/></name> <operator pos:line="304" pos:column="27">==<pos:position pos:line="304" pos:column="29"/></operator> <name pos:line="304" pos:column="30">pend<pos:position pos:line="304" pos:column="34"/></name></expr>)<pos:position pos:line="304" pos:column="35"/></condition><then pos:line="304" pos:column="35">
                        <block type="pseudo"><return pos:line="305" pos:column="25">return <expr><name pos:line="305" pos:column="32">REG_EESCAPE<pos:position pos:line="305" pos:column="43"/></name></expr>;<pos:position pos:line="305" pos:column="44"/></return></block></then></if>

                    <expr_stmt><expr><call><name pos:line="307" pos:column="21">PATFETCH<pos:position pos:line="307" pos:column="29"/></name><argument_list pos:line="307" pos:column="29">(<argument><expr><name pos:line="307" pos:column="30">c1<pos:position pos:line="307" pos:column="32"/></name></expr></argument>)<pos:position pos:line="307" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="307" pos:column="34"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="308" pos:column="21">SET_LIST_BIT<pos:position pos:line="308" pos:column="33"/></name><argument_list pos:line="308" pos:column="33">(<argument><expr><name pos:line="308" pos:column="34">c1<pos:position pos:line="308" pos:column="36"/></name></expr></argument>)<pos:position pos:line="308" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="38"/></expr_stmt>
                    <continue pos:line="309" pos:column="21">continue;<pos:position pos:line="309" pos:column="30"/></continue>
                }<pos:position pos:line="310" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="311" pos:column="17">/* Could be the end of the bracket expression.  If it's
                 * not (i.e., when the bracket expression is `[]' so
                 * far), the ']' character bit gets set way below.  */</comment>
                <if pos:line="314" pos:column="17">if <condition pos:line="314" pos:column="20">(<expr><name pos:line="314" pos:column="21">c<pos:position pos:line="314" pos:column="22"/></name> <operator pos:line="314" pos:column="23">==<pos:position pos:line="314" pos:column="25"/></operator> <literal type="char" pos:line="314" pos:column="26">']'<pos:position pos:line="314" pos:column="29"/></literal> <operator pos:line="314" pos:column="30">&amp;&amp;<pos:position pos:line="314" pos:column="40"/></operator> <name pos:line="314" pos:column="33">p<pos:position pos:line="314" pos:column="34"/></name> <operator pos:line="314" pos:column="35">!=<pos:position pos:line="314" pos:column="37"/></operator> <name pos:line="314" pos:column="38">p1<pos:position pos:line="314" pos:column="40"/></name> <operator pos:line="314" pos:column="41">+<pos:position pos:line="314" pos:column="42"/></operator> <literal type="number" pos:line="314" pos:column="43">1<pos:position pos:line="314" pos:column="44"/></literal></expr>)<pos:position pos:line="314" pos:column="45"/></condition><then pos:line="314" pos:column="45">
                    <block type="pseudo"><break pos:line="315" pos:column="21">break;<pos:position pos:line="315" pos:column="27"/></break></block></then></if>

                <comment type="block" pos:line="317" pos:column="17">/* Look ahead to see if it's a range when the last thing
                 * was a character class.  */</comment>
                <if pos:line="319" pos:column="17">if <condition pos:line="319" pos:column="20">(<expr><name pos:line="319" pos:column="21">had_char_class<pos:position pos:line="319" pos:column="35"/></name> <operator pos:line="319" pos:column="36">&amp;&amp;<pos:position pos:line="319" pos:column="46"/></operator> <name pos:line="319" pos:column="39">c<pos:position pos:line="319" pos:column="40"/></name> <operator pos:line="319" pos:column="41">==<pos:position pos:line="319" pos:column="43"/></operator> <literal type="char" pos:line="319" pos:column="44">'-'<pos:position pos:line="319" pos:column="47"/></literal> <operator pos:line="319" pos:column="48">&amp;&amp;<pos:position pos:line="319" pos:column="58"/></operator> <operator pos:line="319" pos:column="51">*<pos:position pos:line="319" pos:column="52"/></operator><name pos:line="319" pos:column="52">p<pos:position pos:line="319" pos:column="53"/></name> <operator pos:line="319" pos:column="54">!=<pos:position pos:line="319" pos:column="56"/></operator> <literal type="char" pos:line="319" pos:column="57">']'<pos:position pos:line="319" pos:column="60"/></literal></expr>)<pos:position pos:line="319" pos:column="61"/></condition><then pos:line="319" pos:column="61">
                    <block type="pseudo"><return pos:line="320" pos:column="21">return <expr><name pos:line="320" pos:column="28">REG_ERANGE<pos:position pos:line="320" pos:column="38"/></name></expr>;<pos:position pos:line="320" pos:column="39"/></return></block></then></if>

                <comment type="block" pos:line="322" pos:column="17">/* Look ahead to see if it's a range when the last thing
                 * was a character: if this is a hyphen not at the
                 * beginning or the end of a list, then it's the range
                 * operator.  */</comment>
                <if pos:line="326" pos:column="17">if <condition pos:line="326" pos:column="20">(<expr><name pos:line="326" pos:column="21">c<pos:position pos:line="326" pos:column="22"/></name> <operator pos:line="326" pos:column="23">==<pos:position pos:line="326" pos:column="25"/></operator> <literal type="char" pos:line="326" pos:column="26">'-'<pos:position pos:line="326" pos:column="29"/></literal>
                        <operator pos:line="327" pos:column="25">&amp;&amp;<pos:position pos:line="327" pos:column="35"/></operator> <operator pos:line="327" pos:column="28">!<pos:position pos:line="327" pos:column="29"/></operator><operator pos:line="327" pos:column="29">(<pos:position pos:line="327" pos:column="30"/></operator><name pos:line="327" pos:column="30">p<pos:position pos:line="327" pos:column="31"/></name> <operator pos:line="327" pos:column="32">-<pos:position pos:line="327" pos:column="33"/></operator> <literal type="number" pos:line="327" pos:column="34">2<pos:position pos:line="327" pos:column="35"/></literal> <operator pos:line="327" pos:column="36">&gt;=<pos:position pos:line="327" pos:column="41"/></operator> <name pos:line="327" pos:column="39">pattern<pos:position pos:line="327" pos:column="46"/></name> <operator pos:line="327" pos:column="47">&amp;&amp;<pos:position pos:line="327" pos:column="57"/></operator> <name><name pos:line="327" pos:column="50">p<pos:position pos:line="327" pos:column="51"/></name><index pos:line="327" pos:column="51">[<expr><operator pos:line="327" pos:column="52">-<pos:position pos:line="327" pos:column="53"/></operator><literal type="number" pos:line="327" pos:column="53">2<pos:position pos:line="327" pos:column="54"/></literal></expr>]<pos:position pos:line="327" pos:column="55"/></index></name> <operator pos:line="327" pos:column="56">==<pos:position pos:line="327" pos:column="58"/></operator> <literal type="char" pos:line="327" pos:column="59">'['<pos:position pos:line="327" pos:column="62"/></literal><operator pos:line="327" pos:column="62">)<pos:position pos:line="327" pos:column="63"/></operator>
                        <operator pos:line="328" pos:column="25">&amp;&amp;<pos:position pos:line="328" pos:column="35"/></operator> <operator pos:line="328" pos:column="28">!<pos:position pos:line="328" pos:column="29"/></operator><operator pos:line="328" pos:column="29">(<pos:position pos:line="328" pos:column="30"/></operator><name pos:line="328" pos:column="30">p<pos:position pos:line="328" pos:column="31"/></name> <operator pos:line="328" pos:column="32">-<pos:position pos:line="328" pos:column="33"/></operator> <literal type="number" pos:line="328" pos:column="34">3<pos:position pos:line="328" pos:column="35"/></literal> <operator pos:line="328" pos:column="36">&gt;=<pos:position pos:line="328" pos:column="41"/></operator> <name pos:line="328" pos:column="39">pattern<pos:position pos:line="328" pos:column="46"/></name> <operator pos:line="328" pos:column="47">&amp;&amp;<pos:position pos:line="328" pos:column="57"/></operator> <name><name pos:line="328" pos:column="50">p<pos:position pos:line="328" pos:column="51"/></name><index pos:line="328" pos:column="51">[<expr><operator pos:line="328" pos:column="52">-<pos:position pos:line="328" pos:column="53"/></operator><literal type="number" pos:line="328" pos:column="53">3<pos:position pos:line="328" pos:column="54"/></literal></expr>]<pos:position pos:line="328" pos:column="55"/></index></name> <operator pos:line="328" pos:column="56">==<pos:position pos:line="328" pos:column="58"/></operator> <literal type="char" pos:line="328" pos:column="59">'['<pos:position pos:line="328" pos:column="62"/></literal> <operator pos:line="328" pos:column="63">&amp;&amp;<pos:position pos:line="328" pos:column="73"/></operator> <name><name pos:line="328" pos:column="66">p<pos:position pos:line="328" pos:column="67"/></name><index pos:line="328" pos:column="67">[<expr><operator pos:line="328" pos:column="68">-<pos:position pos:line="328" pos:column="69"/></operator><literal type="number" pos:line="328" pos:column="69">2<pos:position pos:line="328" pos:column="70"/></literal></expr>]<pos:position pos:line="328" pos:column="71"/></index></name> <operator pos:line="328" pos:column="72">==<pos:position pos:line="328" pos:column="74"/></operator> <literal type="char" pos:line="328" pos:column="75">'^'<pos:position pos:line="328" pos:column="78"/></literal><operator pos:line="328" pos:column="78">)<pos:position pos:line="328" pos:column="79"/></operator>
                        <operator pos:line="329" pos:column="25">&amp;&amp;<pos:position pos:line="329" pos:column="35"/></operator> <operator pos:line="329" pos:column="28">*<pos:position pos:line="329" pos:column="29"/></operator><name pos:line="329" pos:column="29">p<pos:position pos:line="329" pos:column="30"/></name> <operator pos:line="329" pos:column="31">!=<pos:position pos:line="329" pos:column="33"/></operator> <literal type="char" pos:line="329" pos:column="34">']'<pos:position pos:line="329" pos:column="37"/></literal></expr>)<pos:position pos:line="329" pos:column="38"/></condition><then pos:line="329" pos:column="38"> <block pos:line="329" pos:column="39">{
                    <decl_stmt><decl><type><name pos:line="330" pos:column="21">reg_errcode_t<pos:position pos:line="330" pos:column="34"/></name></type> <name pos:line="330" pos:column="35">ret<pos:position pos:line="330" pos:column="38"/></name>
                    <init pos:line="331" pos:column="21">= <expr><call><name pos:line="331" pos:column="23">compile_range<pos:position pos:line="331" pos:column="36"/></name><argument_list pos:line="331" pos:column="36">(<argument><expr><operator pos:line="331" pos:column="37">&amp;<pos:position pos:line="331" pos:column="42"/></operator><name pos:line="331" pos:column="38">p<pos:position pos:line="331" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="331" pos:column="41">pend<pos:position pos:line="331" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="331" pos:column="47">translate<pos:position pos:line="331" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="331" pos:column="58">syntax<pos:position pos:line="331" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="331" pos:column="66">b<pos:position pos:line="331" pos:column="67"/></name></expr></argument>)<pos:position pos:line="331" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="331" pos:column="69"/></decl_stmt>
                    <if pos:line="332" pos:column="21">if <condition pos:line="332" pos:column="24">(<expr><name pos:line="332" pos:column="25">ret<pos:position pos:line="332" pos:column="28"/></name> <operator pos:line="332" pos:column="29">!=<pos:position pos:line="332" pos:column="31"/></operator> <name pos:line="332" pos:column="32">REG_NOERROR<pos:position pos:line="332" pos:column="43"/></name></expr>)<pos:position pos:line="332" pos:column="44"/></condition><then pos:line="332" pos:column="44">
                        <block type="pseudo"><return pos:line="333" pos:column="25">return <expr><name pos:line="333" pos:column="32">ret<pos:position pos:line="333" pos:column="35"/></name></expr>;<pos:position pos:line="333" pos:column="36"/></return></block></then></if>
                }<pos:position pos:line="334" pos:column="18"/></block></then> <elseif pos:line="334" pos:column="19">else <if pos:line="334" pos:column="24">if <condition pos:line="334" pos:column="27">(<expr><name><name pos:line="334" pos:column="28">p<pos:position pos:line="334" pos:column="29"/></name><index pos:line="334" pos:column="29">[<expr><literal type="number" pos:line="334" pos:column="30">0<pos:position pos:line="334" pos:column="31"/></literal></expr>]<pos:position pos:line="334" pos:column="32"/></index></name> <operator pos:line="334" pos:column="33">==<pos:position pos:line="334" pos:column="35"/></operator> <literal type="char" pos:line="334" pos:column="36">'-'<pos:position pos:line="334" pos:column="39"/></literal> <operator pos:line="334" pos:column="40">&amp;&amp;<pos:position pos:line="334" pos:column="50"/></operator> <name><name pos:line="334" pos:column="43">p<pos:position pos:line="334" pos:column="44"/></name><index pos:line="334" pos:column="44">[<expr><literal type="number" pos:line="334" pos:column="45">1<pos:position pos:line="334" pos:column="46"/></literal></expr>]<pos:position pos:line="334" pos:column="47"/></index></name> <operator pos:line="334" pos:column="48">!=<pos:position pos:line="334" pos:column="50"/></operator> <literal type="char" pos:line="334" pos:column="51">']'<pos:position pos:line="334" pos:column="54"/></literal></expr>)<pos:position pos:line="334" pos:column="55"/></condition><then pos:line="334" pos:column="55"> <block pos:line="334" pos:column="56">{	<comment type="block" pos:line="334" pos:column="65">/* This handles ranges made up of characters only.  */</comment>
                    <decl_stmt><decl><type><name pos:line="335" pos:column="21">reg_errcode_t<pos:position pos:line="335" pos:column="34"/></name></type> <name pos:line="335" pos:column="35">ret<pos:position pos:line="335" pos:column="38"/></name></decl>;<pos:position pos:line="335" pos:column="39"/></decl_stmt>

                    <comment type="block" pos:line="337" pos:column="21">/* Move past the `-'.  */</comment>
                    <expr_stmt><expr><call><name pos:line="338" pos:column="21">PATFETCH<pos:position pos:line="338" pos:column="29"/></name><argument_list pos:line="338" pos:column="29">(<argument><expr><name pos:line="338" pos:column="30">c1<pos:position pos:line="338" pos:column="32"/></name></expr></argument>)<pos:position pos:line="338" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="338" pos:column="34"/></expr_stmt>

                    <expr_stmt><expr><name pos:line="340" pos:column="21">ret<pos:position pos:line="340" pos:column="24"/></name> <operator pos:line="340" pos:column="25">=<pos:position pos:line="340" pos:column="26"/></operator> <call><name pos:line="340" pos:column="27">compile_range<pos:position pos:line="340" pos:column="40"/></name><argument_list pos:line="340" pos:column="40">(<argument><expr><operator pos:line="340" pos:column="41">&amp;<pos:position pos:line="340" pos:column="46"/></operator><name pos:line="340" pos:column="42">p<pos:position pos:line="340" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="340" pos:column="45">pend<pos:position pos:line="340" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="340" pos:column="51">translate<pos:position pos:line="340" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="340" pos:column="62">syntax<pos:position pos:line="340" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="340" pos:column="70">b<pos:position pos:line="340" pos:column="71"/></name></expr></argument>)<pos:position pos:line="340" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="340" pos:column="73"/></expr_stmt>
                    <if pos:line="341" pos:column="21">if <condition pos:line="341" pos:column="24">(<expr><name pos:line="341" pos:column="25">ret<pos:position pos:line="341" pos:column="28"/></name> <operator pos:line="341" pos:column="29">!=<pos:position pos:line="341" pos:column="31"/></operator> <name pos:line="341" pos:column="32">REG_NOERROR<pos:position pos:line="341" pos:column="43"/></name></expr>)<pos:position pos:line="341" pos:column="44"/></condition><then pos:line="341" pos:column="44">
                        <block type="pseudo"><return pos:line="342" pos:column="25">return <expr><name pos:line="342" pos:column="32">ret<pos:position pos:line="342" pos:column="35"/></name></expr>;<pos:position pos:line="342" pos:column="36"/></return></block></then></if>
                }<pos:position pos:line="343" pos:column="18"/></block></then></if></elseif>
                <comment type="block" pos:line="344" pos:column="17">/* See if we're at the beginning of a possible character
                 * class.  */</comment>

                <elseif pos:line="347" pos:column="17">else <if pos:line="347" pos:column="22">if <condition pos:line="347" pos:column="25">(<expr><name pos:line="347" pos:column="26">syntax<pos:position pos:line="347" pos:column="32"/></name> <operator pos:line="347" pos:column="33">&amp;<pos:position pos:line="347" pos:column="38"/></operator> <name pos:line="347" pos:column="35">RE_CHAR_CLASSES<pos:position pos:line="347" pos:column="50"/></name> <operator pos:line="347" pos:column="51">&amp;&amp;<pos:position pos:line="347" pos:column="61"/></operator> <name pos:line="347" pos:column="54">c<pos:position pos:line="347" pos:column="55"/></name> <operator pos:line="347" pos:column="56">==<pos:position pos:line="347" pos:column="58"/></operator> <literal type="char" pos:line="347" pos:column="59">'['<pos:position pos:line="347" pos:column="62"/></literal> <operator pos:line="347" pos:column="63">&amp;&amp;<pos:position pos:line="347" pos:column="73"/></operator> <operator pos:line="347" pos:column="66">*<pos:position pos:line="347" pos:column="67"/></operator><name pos:line="347" pos:column="67">p<pos:position pos:line="347" pos:column="68"/></name> <operator pos:line="347" pos:column="69">==<pos:position pos:line="347" pos:column="71"/></operator> <literal type="char" pos:line="347" pos:column="72">':'<pos:position pos:line="347" pos:column="75"/></literal></expr>)<pos:position pos:line="347" pos:column="76"/></condition><then pos:line="347" pos:column="76"> <block pos:line="347" pos:column="77">{	<comment type="block" pos:line="347" pos:column="81">/* Leave room for the null.  */</comment>
                    <decl_stmt><decl><type><name pos:line="348" pos:column="21">char<pos:position pos:line="348" pos:column="25"/></name></type> <name><name pos:line="348" pos:column="26">str<pos:position pos:line="348" pos:column="29"/></name><index pos:line="348" pos:column="29">[<expr><name pos:line="348" pos:column="30">CHAR_CLASS_MAX_LENGTH<pos:position pos:line="348" pos:column="51"/></name> <operator pos:line="348" pos:column="52">+<pos:position pos:line="348" pos:column="53"/></operator> <literal type="number" pos:line="348" pos:column="54">1<pos:position pos:line="348" pos:column="55"/></literal></expr>]<pos:position pos:line="348" pos:column="56"/></index></name></decl>;<pos:position pos:line="348" pos:column="57"/></decl_stmt>

                    <expr_stmt><expr><call><name pos:line="350" pos:column="21">PATFETCH<pos:position pos:line="350" pos:column="29"/></name><argument_list pos:line="350" pos:column="29">(<argument><expr><name pos:line="350" pos:column="30">c<pos:position pos:line="350" pos:column="31"/></name></expr></argument>)<pos:position pos:line="350" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="350" pos:column="33"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="351" pos:column="21">c1<pos:position pos:line="351" pos:column="23"/></name> <operator pos:line="351" pos:column="24">=<pos:position pos:line="351" pos:column="25"/></operator> <literal type="number" pos:line="351" pos:column="26">0<pos:position pos:line="351" pos:column="27"/></literal></expr>;<pos:position pos:line="351" pos:column="28"/></expr_stmt>

                    <comment type="block" pos:line="353" pos:column="21">/* If pattern is `[[:'.  */</comment>
                    <if pos:line="354" pos:column="21">if <condition pos:line="354" pos:column="24">(<expr><name pos:line="354" pos:column="25">p<pos:position pos:line="354" pos:column="26"/></name> <operator pos:line="354" pos:column="27">==<pos:position pos:line="354" pos:column="29"/></operator> <name pos:line="354" pos:column="30">pend<pos:position pos:line="354" pos:column="34"/></name></expr>)<pos:position pos:line="354" pos:column="35"/></condition><then pos:line="354" pos:column="35">
                        <block type="pseudo"><return pos:line="355" pos:column="25">return <expr><name pos:line="355" pos:column="32">REG_EBRACK<pos:position pos:line="355" pos:column="42"/></name></expr>;<pos:position pos:line="355" pos:column="43"/></return></block></then></if>

                    <for pos:line="357" pos:column="21">for <control pos:line="357" pos:column="25">(<init pos:line="357" pos:column="26">;<pos:position pos:line="357" pos:column="27"/></init><condition pos:line="357" pos:column="27">;<pos:position pos:line="357" pos:column="28"/></condition><incr/>)<pos:position pos:line="357" pos:column="29"/></control> <block pos:line="357" pos:column="30">{
                        <expr_stmt><expr><call><name pos:line="358" pos:column="25">PATFETCH<pos:position pos:line="358" pos:column="33"/></name><argument_list pos:line="358" pos:column="33">(<argument><expr><name pos:line="358" pos:column="34">c<pos:position pos:line="358" pos:column="35"/></name></expr></argument>)<pos:position pos:line="358" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="358" pos:column="37"/></expr_stmt>
                        <if pos:line="359" pos:column="25">if <condition pos:line="359" pos:column="28">(<expr><name pos:line="359" pos:column="29">c<pos:position pos:line="359" pos:column="30"/></name> <operator pos:line="359" pos:column="31">==<pos:position pos:line="359" pos:column="33"/></operator> <literal type="char" pos:line="359" pos:column="34">':'<pos:position pos:line="359" pos:column="37"/></literal> <operator pos:line="359" pos:column="38">||<pos:position pos:line="359" pos:column="40"/></operator> <name pos:line="359" pos:column="41">c<pos:position pos:line="359" pos:column="42"/></name> <operator pos:line="359" pos:column="43">==<pos:position pos:line="359" pos:column="45"/></operator> <literal type="char" pos:line="359" pos:column="46">']'<pos:position pos:line="359" pos:column="49"/></literal> <operator pos:line="359" pos:column="50">||<pos:position pos:line="359" pos:column="52"/></operator> <name pos:line="359" pos:column="53">p<pos:position pos:line="359" pos:column="54"/></name> <operator pos:line="359" pos:column="55">==<pos:position pos:line="359" pos:column="57"/></operator> <name pos:line="359" pos:column="58">pend<pos:position pos:line="359" pos:column="62"/></name>
                                <operator pos:line="360" pos:column="33">||<pos:position pos:line="360" pos:column="35"/></operator> <name pos:line="360" pos:column="36">c1<pos:position pos:line="360" pos:column="38"/></name> <operator pos:line="360" pos:column="39">==<pos:position pos:line="360" pos:column="41"/></operator> <name pos:line="360" pos:column="42">CHAR_CLASS_MAX_LENGTH<pos:position pos:line="360" pos:column="63"/></name></expr>)<pos:position pos:line="360" pos:column="64"/></condition><then pos:line="360" pos:column="64">
                            <block type="pseudo"><break pos:line="361" pos:column="29">break;<pos:position pos:line="361" pos:column="35"/></break></block></then></if>
                        <expr_stmt><expr><name><name pos:line="362" pos:column="25">str<pos:position pos:line="362" pos:column="28"/></name><index pos:line="362" pos:column="28">[<expr><name pos:line="362" pos:column="29">c1<pos:position pos:line="362" pos:column="31"/></name><operator pos:line="362" pos:column="31">++<pos:position pos:line="362" pos:column="33"/></operator></expr>]<pos:position pos:line="362" pos:column="34"/></index></name> <operator pos:line="362" pos:column="35">=<pos:position pos:line="362" pos:column="36"/></operator> <name pos:line="362" pos:column="37">c<pos:position pos:line="362" pos:column="38"/></name></expr>;<pos:position pos:line="362" pos:column="39"/></expr_stmt>
                    }<pos:position pos:line="363" pos:column="22"/></block></for>
                    <expr_stmt><expr><name><name pos:line="364" pos:column="21">str<pos:position pos:line="364" pos:column="24"/></name><index pos:line="364" pos:column="24">[<expr><name pos:line="364" pos:column="25">c1<pos:position pos:line="364" pos:column="27"/></name></expr>]<pos:position pos:line="364" pos:column="28"/></index></name> <operator pos:line="364" pos:column="29">=<pos:position pos:line="364" pos:column="30"/></operator> <literal type="char" pos:line="364" pos:column="31">'\0'<pos:position pos:line="364" pos:column="35"/></literal></expr>;<pos:position pos:line="364" pos:column="36"/></expr_stmt>

                    <comment type="block" pos:line="366" pos:column="21">/* If isn't a word bracketed by `[:' and:`]':
                     * undo the ending character, the letters, and leave
                     * the leading `:' and `[' (but set bits for them).  */</comment>
                    <if pos:line="369" pos:column="21">if <condition pos:line="369" pos:column="24">(<expr><name pos:line="369" pos:column="25">c<pos:position pos:line="369" pos:column="26"/></name> <operator pos:line="369" pos:column="27">==<pos:position pos:line="369" pos:column="29"/></operator> <literal type="char" pos:line="369" pos:column="30">':'<pos:position pos:line="369" pos:column="33"/></literal> <operator pos:line="369" pos:column="34">&amp;&amp;<pos:position pos:line="369" pos:column="44"/></operator> <operator pos:line="369" pos:column="37">*<pos:position pos:line="369" pos:column="38"/></operator><name pos:line="369" pos:column="38">p<pos:position pos:line="369" pos:column="39"/></name> <operator pos:line="369" pos:column="40">==<pos:position pos:line="369" pos:column="42"/></operator> <literal type="char" pos:line="369" pos:column="43">']'<pos:position pos:line="369" pos:column="46"/></literal></expr>)<pos:position pos:line="369" pos:column="47"/></condition><then pos:line="369" pos:column="47"> <block pos:line="369" pos:column="48">{
                        <decl_stmt><decl><type><name pos:line="370" pos:column="25">int<pos:position pos:line="370" pos:column="28"/></name></type> <name pos:line="370" pos:column="29">ch<pos:position pos:line="370" pos:column="31"/></name></decl>;<pos:position pos:line="370" pos:column="32"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="371" pos:column="25">boolean<pos:position pos:line="371" pos:column="32"/></name></type> <name pos:line="371" pos:column="33">is_alnum<pos:position pos:line="371" pos:column="41"/></name> <init pos:line="371" pos:column="42">= <expr><call><name pos:line="371" pos:column="44">STREQ<pos:position pos:line="371" pos:column="49"/></name><argument_list pos:line="371" pos:column="49">(<argument><expr><name pos:line="371" pos:column="50">str<pos:position pos:line="371" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="371" pos:column="55">"alnum"<pos:position pos:line="371" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="371" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="371" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="372" pos:column="25">boolean<pos:position pos:line="372" pos:column="32"/></name></type> <name pos:line="372" pos:column="33">is_alpha<pos:position pos:line="372" pos:column="41"/></name> <init pos:line="372" pos:column="42">= <expr><call><name pos:line="372" pos:column="44">STREQ<pos:position pos:line="372" pos:column="49"/></name><argument_list pos:line="372" pos:column="49">(<argument><expr><name pos:line="372" pos:column="50">str<pos:position pos:line="372" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="372" pos:column="55">"alpha"<pos:position pos:line="372" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="372" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="372" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="373" pos:column="25">boolean<pos:position pos:line="373" pos:column="32"/></name></type> <name pos:line="373" pos:column="33">is_blank<pos:position pos:line="373" pos:column="41"/></name> <init pos:line="373" pos:column="42">= <expr><call><name pos:line="373" pos:column="44">STREQ<pos:position pos:line="373" pos:column="49"/></name><argument_list pos:line="373" pos:column="49">(<argument><expr><name pos:line="373" pos:column="50">str<pos:position pos:line="373" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="373" pos:column="55">"blank"<pos:position pos:line="373" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="373" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="373" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="374" pos:column="25">boolean<pos:position pos:line="374" pos:column="32"/></name></type> <name pos:line="374" pos:column="33">is_cntrl<pos:position pos:line="374" pos:column="41"/></name> <init pos:line="374" pos:column="42">= <expr><call><name pos:line="374" pos:column="44">STREQ<pos:position pos:line="374" pos:column="49"/></name><argument_list pos:line="374" pos:column="49">(<argument><expr><name pos:line="374" pos:column="50">str<pos:position pos:line="374" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="374" pos:column="55">"cntrl"<pos:position pos:line="374" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="374" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="374" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="375" pos:column="25">boolean<pos:position pos:line="375" pos:column="32"/></name></type> <name pos:line="375" pos:column="33">is_digit<pos:position pos:line="375" pos:column="41"/></name> <init pos:line="375" pos:column="42">= <expr><call><name pos:line="375" pos:column="44">STREQ<pos:position pos:line="375" pos:column="49"/></name><argument_list pos:line="375" pos:column="49">(<argument><expr><name pos:line="375" pos:column="50">str<pos:position pos:line="375" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="375" pos:column="55">"digit"<pos:position pos:line="375" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="375" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="375" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="376" pos:column="25">boolean<pos:position pos:line="376" pos:column="32"/></name></type> <name pos:line="376" pos:column="33">is_graph<pos:position pos:line="376" pos:column="41"/></name> <init pos:line="376" pos:column="42">= <expr><call><name pos:line="376" pos:column="44">STREQ<pos:position pos:line="376" pos:column="49"/></name><argument_list pos:line="376" pos:column="49">(<argument><expr><name pos:line="376" pos:column="50">str<pos:position pos:line="376" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="376" pos:column="55">"graph"<pos:position pos:line="376" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="376" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="376" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="377" pos:column="25">boolean<pos:position pos:line="377" pos:column="32"/></name></type> <name pos:line="377" pos:column="33">is_lower<pos:position pos:line="377" pos:column="41"/></name> <init pos:line="377" pos:column="42">= <expr><call><name pos:line="377" pos:column="44">STREQ<pos:position pos:line="377" pos:column="49"/></name><argument_list pos:line="377" pos:column="49">(<argument><expr><name pos:line="377" pos:column="50">str<pos:position pos:line="377" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="377" pos:column="55">"lower"<pos:position pos:line="377" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="377" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="377" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="378" pos:column="25">boolean<pos:position pos:line="378" pos:column="32"/></name></type> <name pos:line="378" pos:column="33">is_print<pos:position pos:line="378" pos:column="41"/></name> <init pos:line="378" pos:column="42">= <expr><call><name pos:line="378" pos:column="44">STREQ<pos:position pos:line="378" pos:column="49"/></name><argument_list pos:line="378" pos:column="49">(<argument><expr><name pos:line="378" pos:column="50">str<pos:position pos:line="378" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="378" pos:column="55">"print"<pos:position pos:line="378" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="378" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="378" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="379" pos:column="25">boolean<pos:position pos:line="379" pos:column="32"/></name></type> <name pos:line="379" pos:column="33">is_punct<pos:position pos:line="379" pos:column="41"/></name> <init pos:line="379" pos:column="42">= <expr><call><name pos:line="379" pos:column="44">STREQ<pos:position pos:line="379" pos:column="49"/></name><argument_list pos:line="379" pos:column="49">(<argument><expr><name pos:line="379" pos:column="50">str<pos:position pos:line="379" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="379" pos:column="55">"punct"<pos:position pos:line="379" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="379" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="379" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="380" pos:column="25">boolean<pos:position pos:line="380" pos:column="32"/></name></type> <name pos:line="380" pos:column="33">is_space<pos:position pos:line="380" pos:column="41"/></name> <init pos:line="380" pos:column="42">= <expr><call><name pos:line="380" pos:column="44">STREQ<pos:position pos:line="380" pos:column="49"/></name><argument_list pos:line="380" pos:column="49">(<argument><expr><name pos:line="380" pos:column="50">str<pos:position pos:line="380" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="380" pos:column="55">"space"<pos:position pos:line="380" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="380" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="380" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="381" pos:column="25">boolean<pos:position pos:line="381" pos:column="32"/></name></type> <name pos:line="381" pos:column="33">is_upper<pos:position pos:line="381" pos:column="41"/></name> <init pos:line="381" pos:column="42">= <expr><call><name pos:line="381" pos:column="44">STREQ<pos:position pos:line="381" pos:column="49"/></name><argument_list pos:line="381" pos:column="49">(<argument><expr><name pos:line="381" pos:column="50">str<pos:position pos:line="381" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="381" pos:column="55">"upper"<pos:position pos:line="381" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="381" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="381" pos:column="64"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="382" pos:column="25">boolean<pos:position pos:line="382" pos:column="32"/></name></type> <name pos:line="382" pos:column="33">is_xdigit<pos:position pos:line="382" pos:column="42"/></name> <init pos:line="382" pos:column="43">= <expr><call><name pos:line="382" pos:column="45">STREQ<pos:position pos:line="382" pos:column="50"/></name><argument_list pos:line="382" pos:column="50">(<argument><expr><name pos:line="382" pos:column="51">str<pos:position pos:line="382" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="382" pos:column="56">"xdigit"<pos:position pos:line="382" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="382" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="382" pos:column="66"/></decl_stmt>

                        <if pos:line="384" pos:column="25">if <condition pos:line="384" pos:column="28">(<expr><operator pos:line="384" pos:column="29">!<pos:position pos:line="384" pos:column="30"/></operator><call><name pos:line="384" pos:column="30">IS_CHAR_CLASS<pos:position pos:line="384" pos:column="43"/></name><argument_list pos:line="384" pos:column="43">(<argument><expr><name pos:line="384" pos:column="44">str<pos:position pos:line="384" pos:column="47"/></name></expr></argument>)<pos:position pos:line="384" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="384" pos:column="49"/></condition><then pos:line="384" pos:column="49">
                            <block type="pseudo"><return pos:line="385" pos:column="29">return <expr><name pos:line="385" pos:column="36">REG_ECTYPE<pos:position pos:line="385" pos:column="46"/></name></expr>;<pos:position pos:line="385" pos:column="47"/></return></block></then></if>

                        <comment type="block" pos:line="387" pos:column="25">/* Throw away the ] at the end of the character
                         * class.  */</comment>
                        <expr_stmt><expr><call><name pos:line="389" pos:column="25">PATFETCH<pos:position pos:line="389" pos:column="33"/></name><argument_list pos:line="389" pos:column="33">(<argument><expr><name pos:line="389" pos:column="34">c<pos:position pos:line="389" pos:column="35"/></name></expr></argument>)<pos:position pos:line="389" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="37"/></expr_stmt>

                        <if pos:line="391" pos:column="25">if <condition pos:line="391" pos:column="28">(<expr><name pos:line="391" pos:column="29">p<pos:position pos:line="391" pos:column="30"/></name> <operator pos:line="391" pos:column="31">==<pos:position pos:line="391" pos:column="33"/></operator> <name pos:line="391" pos:column="34">pend<pos:position pos:line="391" pos:column="38"/></name></expr>)<pos:position pos:line="391" pos:column="39"/></condition><then pos:line="391" pos:column="39">
                            <block type="pseudo"><return pos:line="392" pos:column="29">return <expr><name pos:line="392" pos:column="36">REG_EBRACK<pos:position pos:line="392" pos:column="46"/></name></expr>;<pos:position pos:line="392" pos:column="47"/></return></block></then></if>

                        <for pos:line="394" pos:column="25">for <control pos:line="394" pos:column="29">(<init><expr><name pos:line="394" pos:column="30">ch<pos:position pos:line="394" pos:column="32"/></name> <operator pos:line="394" pos:column="33">=<pos:position pos:line="394" pos:column="34"/></operator> <literal type="number" pos:line="394" pos:column="35">0<pos:position pos:line="394" pos:column="36"/></literal></expr>;<pos:position pos:line="394" pos:column="37"/></init> <condition><expr><name pos:line="394" pos:column="38">ch<pos:position pos:line="394" pos:column="40"/></name> <operator pos:line="394" pos:column="41">&lt;<pos:position pos:line="394" pos:column="45"/></operator> <literal type="number" pos:line="394" pos:column="43">1<pos:position pos:line="394" pos:column="44"/></literal> <operator pos:line="394" pos:column="45">&lt;&lt;<pos:position pos:line="394" pos:column="53"/></operator> <name pos:line="394" pos:column="48">BYTEWIDTH<pos:position pos:line="394" pos:column="57"/></name></expr>;<pos:position pos:line="394" pos:column="58"/></condition> <incr><expr><name pos:line="394" pos:column="59">ch<pos:position pos:line="394" pos:column="61"/></name><operator pos:line="394" pos:column="61">++<pos:position pos:line="394" pos:column="63"/></operator></expr></incr>)<pos:position pos:line="394" pos:column="64"/></control> <block pos:line="394" pos:column="65">{
                            <if pos:line="395" pos:column="29">if <condition pos:line="395" pos:column="32">(<expr><operator pos:line="395" pos:column="33">(<pos:position pos:line="395" pos:column="34"/></operator><name pos:line="395" pos:column="34">is_alnum<pos:position pos:line="395" pos:column="42"/></name> <operator pos:line="395" pos:column="43">&amp;&amp;<pos:position pos:line="395" pos:column="53"/></operator> <call><name pos:line="395" pos:column="46">ISALNUM<pos:position pos:line="395" pos:column="53"/></name><argument_list pos:line="395" pos:column="53">(<argument><expr><name pos:line="395" pos:column="54">ch<pos:position pos:line="395" pos:column="56"/></name></expr></argument>)<pos:position pos:line="395" pos:column="57"/></argument_list></call><operator pos:line="395" pos:column="57">)<pos:position pos:line="395" pos:column="58"/></operator>
                                    <operator pos:line="396" pos:column="37">||<pos:position pos:line="396" pos:column="39"/></operator> <operator pos:line="396" pos:column="40">(<pos:position pos:line="396" pos:column="41"/></operator><name pos:line="396" pos:column="41">is_alpha<pos:position pos:line="396" pos:column="49"/></name> <operator pos:line="396" pos:column="50">&amp;&amp;<pos:position pos:line="396" pos:column="60"/></operator> <call><name pos:line="396" pos:column="53">ISALPHA<pos:position pos:line="396" pos:column="60"/></name><argument_list pos:line="396" pos:column="60">(<argument><expr><name pos:line="396" pos:column="61">ch<pos:position pos:line="396" pos:column="63"/></name></expr></argument>)<pos:position pos:line="396" pos:column="64"/></argument_list></call><operator pos:line="396" pos:column="64">)<pos:position pos:line="396" pos:column="65"/></operator>
                                    <operator pos:line="397" pos:column="37">||<pos:position pos:line="397" pos:column="39"/></operator> <operator pos:line="397" pos:column="40">(<pos:position pos:line="397" pos:column="41"/></operator><name pos:line="397" pos:column="41">is_blank<pos:position pos:line="397" pos:column="49"/></name> <operator pos:line="397" pos:column="50">&amp;&amp;<pos:position pos:line="397" pos:column="60"/></operator> <call><name pos:line="397" pos:column="53">ISBLANK<pos:position pos:line="397" pos:column="60"/></name><argument_list pos:line="397" pos:column="60">(<argument><expr><name pos:line="397" pos:column="61">ch<pos:position pos:line="397" pos:column="63"/></name></expr></argument>)<pos:position pos:line="397" pos:column="64"/></argument_list></call><operator pos:line="397" pos:column="64">)<pos:position pos:line="397" pos:column="65"/></operator>
                                    <operator pos:line="398" pos:column="37">||<pos:position pos:line="398" pos:column="39"/></operator> <operator pos:line="398" pos:column="40">(<pos:position pos:line="398" pos:column="41"/></operator><name pos:line="398" pos:column="41">is_cntrl<pos:position pos:line="398" pos:column="49"/></name> <operator pos:line="398" pos:column="50">&amp;&amp;<pos:position pos:line="398" pos:column="60"/></operator> <call><name pos:line="398" pos:column="53">ISCNTRL<pos:position pos:line="398" pos:column="60"/></name><argument_list pos:line="398" pos:column="60">(<argument><expr><name pos:line="398" pos:column="61">ch<pos:position pos:line="398" pos:column="63"/></name></expr></argument>)<pos:position pos:line="398" pos:column="64"/></argument_list></call><operator pos:line="398" pos:column="64">)<pos:position pos:line="398" pos:column="65"/></operator>
                                    <operator pos:line="399" pos:column="37">||<pos:position pos:line="399" pos:column="39"/></operator> <operator pos:line="399" pos:column="40">(<pos:position pos:line="399" pos:column="41"/></operator><name pos:line="399" pos:column="41">is_digit<pos:position pos:line="399" pos:column="49"/></name> <operator pos:line="399" pos:column="50">&amp;&amp;<pos:position pos:line="399" pos:column="60"/></operator> <call><name pos:line="399" pos:column="53">ISDIGIT<pos:position pos:line="399" pos:column="60"/></name><argument_list pos:line="399" pos:column="60">(<argument><expr><name pos:line="399" pos:column="61">ch<pos:position pos:line="399" pos:column="63"/></name></expr></argument>)<pos:position pos:line="399" pos:column="64"/></argument_list></call><operator pos:line="399" pos:column="64">)<pos:position pos:line="399" pos:column="65"/></operator>
                                    <operator pos:line="400" pos:column="37">||<pos:position pos:line="400" pos:column="39"/></operator> <operator pos:line="400" pos:column="40">(<pos:position pos:line="400" pos:column="41"/></operator><name pos:line="400" pos:column="41">is_graph<pos:position pos:line="400" pos:column="49"/></name> <operator pos:line="400" pos:column="50">&amp;&amp;<pos:position pos:line="400" pos:column="60"/></operator> <call><name pos:line="400" pos:column="53">ISGRAPH<pos:position pos:line="400" pos:column="60"/></name><argument_list pos:line="400" pos:column="60">(<argument><expr><name pos:line="400" pos:column="61">ch<pos:position pos:line="400" pos:column="63"/></name></expr></argument>)<pos:position pos:line="400" pos:column="64"/></argument_list></call><operator pos:line="400" pos:column="64">)<pos:position pos:line="400" pos:column="65"/></operator>
                                    <operator pos:line="401" pos:column="37">||<pos:position pos:line="401" pos:column="39"/></operator> <operator pos:line="401" pos:column="40">(<pos:position pos:line="401" pos:column="41"/></operator><name pos:line="401" pos:column="41">is_lower<pos:position pos:line="401" pos:column="49"/></name> <operator pos:line="401" pos:column="50">&amp;&amp;<pos:position pos:line="401" pos:column="60"/></operator> <call><name pos:line="401" pos:column="53">ISLOWER<pos:position pos:line="401" pos:column="60"/></name><argument_list pos:line="401" pos:column="60">(<argument><expr><name pos:line="401" pos:column="61">ch<pos:position pos:line="401" pos:column="63"/></name></expr></argument>)<pos:position pos:line="401" pos:column="64"/></argument_list></call><operator pos:line="401" pos:column="64">)<pos:position pos:line="401" pos:column="65"/></operator>
                                    <operator pos:line="402" pos:column="37">||<pos:position pos:line="402" pos:column="39"/></operator> <operator pos:line="402" pos:column="40">(<pos:position pos:line="402" pos:column="41"/></operator><name pos:line="402" pos:column="41">is_print<pos:position pos:line="402" pos:column="49"/></name> <operator pos:line="402" pos:column="50">&amp;&amp;<pos:position pos:line="402" pos:column="60"/></operator> <call><name pos:line="402" pos:column="53">ISPRINT<pos:position pos:line="402" pos:column="60"/></name><argument_list pos:line="402" pos:column="60">(<argument><expr><name pos:line="402" pos:column="61">ch<pos:position pos:line="402" pos:column="63"/></name></expr></argument>)<pos:position pos:line="402" pos:column="64"/></argument_list></call><operator pos:line="402" pos:column="64">)<pos:position pos:line="402" pos:column="65"/></operator>
                                    <operator pos:line="403" pos:column="37">||<pos:position pos:line="403" pos:column="39"/></operator> <operator pos:line="403" pos:column="40">(<pos:position pos:line="403" pos:column="41"/></operator><name pos:line="403" pos:column="41">is_punct<pos:position pos:line="403" pos:column="49"/></name> <operator pos:line="403" pos:column="50">&amp;&amp;<pos:position pos:line="403" pos:column="60"/></operator> <call><name pos:line="403" pos:column="53">ISPUNCT<pos:position pos:line="403" pos:column="60"/></name><argument_list pos:line="403" pos:column="60">(<argument><expr><name pos:line="403" pos:column="61">ch<pos:position pos:line="403" pos:column="63"/></name></expr></argument>)<pos:position pos:line="403" pos:column="64"/></argument_list></call><operator pos:line="403" pos:column="64">)<pos:position pos:line="403" pos:column="65"/></operator>
                                    <operator pos:line="404" pos:column="37">||<pos:position pos:line="404" pos:column="39"/></operator> <operator pos:line="404" pos:column="40">(<pos:position pos:line="404" pos:column="41"/></operator><name pos:line="404" pos:column="41">is_space<pos:position pos:line="404" pos:column="49"/></name> <operator pos:line="404" pos:column="50">&amp;&amp;<pos:position pos:line="404" pos:column="60"/></operator> <call><name pos:line="404" pos:column="53">ISSPACE<pos:position pos:line="404" pos:column="60"/></name><argument_list pos:line="404" pos:column="60">(<argument><expr><name pos:line="404" pos:column="61">ch<pos:position pos:line="404" pos:column="63"/></name></expr></argument>)<pos:position pos:line="404" pos:column="64"/></argument_list></call><operator pos:line="404" pos:column="64">)<pos:position pos:line="404" pos:column="65"/></operator>
                                    <operator pos:line="405" pos:column="37">||<pos:position pos:line="405" pos:column="39"/></operator> <operator pos:line="405" pos:column="40">(<pos:position pos:line="405" pos:column="41"/></operator><name pos:line="405" pos:column="41">is_upper<pos:position pos:line="405" pos:column="49"/></name> <operator pos:line="405" pos:column="50">&amp;&amp;<pos:position pos:line="405" pos:column="60"/></operator> <call><name pos:line="405" pos:column="53">ISUPPER<pos:position pos:line="405" pos:column="60"/></name><argument_list pos:line="405" pos:column="60">(<argument><expr><name pos:line="405" pos:column="61">ch<pos:position pos:line="405" pos:column="63"/></name></expr></argument>)<pos:position pos:line="405" pos:column="64"/></argument_list></call><operator pos:line="405" pos:column="64">)<pos:position pos:line="405" pos:column="65"/></operator>
                                    <operator pos:line="406" pos:column="37">||<pos:position pos:line="406" pos:column="39"/></operator> <operator pos:line="406" pos:column="40">(<pos:position pos:line="406" pos:column="41"/></operator><name pos:line="406" pos:column="41">is_xdigit<pos:position pos:line="406" pos:column="50"/></name> <operator pos:line="406" pos:column="51">&amp;&amp;<pos:position pos:line="406" pos:column="61"/></operator> <call><name pos:line="406" pos:column="54">ISXDIGIT<pos:position pos:line="406" pos:column="62"/></name><argument_list pos:line="406" pos:column="62">(<argument><expr><name pos:line="406" pos:column="63">ch<pos:position pos:line="406" pos:column="65"/></name></expr></argument>)<pos:position pos:line="406" pos:column="66"/></argument_list></call><operator pos:line="406" pos:column="66">)<pos:position pos:line="406" pos:column="67"/></operator></expr>)<pos:position pos:line="406" pos:column="68"/></condition><then pos:line="406" pos:column="68">
                                <block type="pseudo"><expr_stmt><expr><call><name pos:line="407" pos:column="33">SET_LIST_BIT<pos:position pos:line="407" pos:column="45"/></name><argument_list pos:line="407" pos:column="45">(<argument><expr><name pos:line="407" pos:column="46">ch<pos:position pos:line="407" pos:column="48"/></name></expr></argument>)<pos:position pos:line="407" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="407" pos:column="50"/></expr_stmt></block></then></if>
                        }<pos:position pos:line="408" pos:column="26"/></block></for>
                        <expr_stmt><expr><name pos:line="409" pos:column="25">had_char_class<pos:position pos:line="409" pos:column="39"/></name> <operator pos:line="409" pos:column="40">=<pos:position pos:line="409" pos:column="41"/></operator> <literal type="boolean" pos:line="409" pos:column="42">true<pos:position pos:line="409" pos:column="46"/></literal></expr>;<pos:position pos:line="409" pos:column="47"/></expr_stmt>
                    }<pos:position pos:line="410" pos:column="22"/></block></then> <else pos:line="410" pos:column="23">else <block pos:line="410" pos:column="28">{
                        <expr_stmt><expr><name pos:line="411" pos:column="25">c1<pos:position pos:line="411" pos:column="27"/></name><operator pos:line="411" pos:column="27">++<pos:position pos:line="411" pos:column="29"/></operator></expr>;<pos:position pos:line="411" pos:column="30"/></expr_stmt>
                        <while pos:line="412" pos:column="25">while <condition pos:line="412" pos:column="31">(<expr><name pos:line="412" pos:column="32">c1<pos:position pos:line="412" pos:column="34"/></name><operator pos:line="412" pos:column="34">--<pos:position pos:line="412" pos:column="36"/></operator></expr>)<pos:position pos:line="412" pos:column="37"/></condition>
                            <block type="pseudo"><expr_stmt><expr><name pos:line="413" pos:column="29">PATUNFETCH<pos:position pos:line="413" pos:column="39"/></name></expr>;<pos:position pos:line="413" pos:column="40"/></expr_stmt></block></while>
                        <expr_stmt><expr><call><name pos:line="414" pos:column="25">SET_LIST_BIT<pos:position pos:line="414" pos:column="37"/></name><argument_list pos:line="414" pos:column="37">(<argument><expr><literal type="char" pos:line="414" pos:column="38">'['<pos:position pos:line="414" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="414" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="414" pos:column="43"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="415" pos:column="25">SET_LIST_BIT<pos:position pos:line="415" pos:column="37"/></name><argument_list pos:line="415" pos:column="37">(<argument><expr><literal type="char" pos:line="415" pos:column="38">':'<pos:position pos:line="415" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="415" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="415" pos:column="43"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="416" pos:column="25">had_char_class<pos:position pos:line="416" pos:column="39"/></name> <operator pos:line="416" pos:column="40">=<pos:position pos:line="416" pos:column="41"/></operator> <literal type="boolean" pos:line="416" pos:column="42">false<pos:position pos:line="416" pos:column="47"/></literal></expr>;<pos:position pos:line="416" pos:column="48"/></expr_stmt>
                    }<pos:position pos:line="417" pos:column="22"/></block></else></if>
                }<pos:position pos:line="418" pos:column="18"/></block></then></if></elseif> <else pos:line="418" pos:column="19">else <block pos:line="418" pos:column="24">{
                    <expr_stmt><expr><name pos:line="419" pos:column="21">had_char_class<pos:position pos:line="419" pos:column="35"/></name> <operator pos:line="419" pos:column="36">=<pos:position pos:line="419" pos:column="37"/></operator> <literal type="boolean" pos:line="419" pos:column="38">false<pos:position pos:line="419" pos:column="43"/></literal></expr>;<pos:position pos:line="419" pos:column="44"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="420" pos:column="21">SET_LIST_BIT<pos:position pos:line="420" pos:column="33"/></name><argument_list pos:line="420" pos:column="33">(<argument><expr><name pos:line="420" pos:column="34">c<pos:position pos:line="420" pos:column="35"/></name></expr></argument>)<pos:position pos:line="420" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="420" pos:column="37"/></expr_stmt>
                }<pos:position pos:line="421" pos:column="18"/></block></else></if>
            }<pos:position pos:line="422" pos:column="14"/></block></for>

            <comment type="block" pos:line="424" pos:column="13">/* Discard any (non)matching list bytes that are all 0 at the
             * end of the map.  Decrease the map-length byte too.  */</comment>
            <while pos:line="426" pos:column="13">while <condition pos:line="426" pos:column="19">(<expr><operator pos:line="426" pos:column="20">(<pos:position pos:line="426" pos:column="21"/></operator><name pos:line="426" pos:column="21">int<pos:position pos:line="426" pos:column="24"/></name><operator pos:line="426" pos:column="24">)<pos:position pos:line="426" pos:column="25"/></operator> <name><name pos:line="426" pos:column="26">b<pos:position pos:line="426" pos:column="27"/></name><index pos:line="426" pos:column="27">[<expr><operator pos:line="426" pos:column="28">-<pos:position pos:line="426" pos:column="29"/></operator><literal type="number" pos:line="426" pos:column="29">1<pos:position pos:line="426" pos:column="30"/></literal></expr>]<pos:position pos:line="426" pos:column="31"/></index></name> <operator pos:line="426" pos:column="32">&gt;<pos:position pos:line="426" pos:column="36"/></operator> <literal type="number" pos:line="426" pos:column="34">0<pos:position pos:line="426" pos:column="35"/></literal> <operator pos:line="426" pos:column="36">&amp;&amp;<pos:position pos:line="426" pos:column="46"/></operator> <name><name pos:line="426" pos:column="39">b<pos:position pos:line="426" pos:column="40"/></name><index pos:line="426" pos:column="40">[<expr><name><name pos:line="426" pos:column="41">b<pos:position pos:line="426" pos:column="42"/></name><index pos:line="426" pos:column="42">[<expr><operator pos:line="426" pos:column="43">-<pos:position pos:line="426" pos:column="44"/></operator><literal type="number" pos:line="426" pos:column="44">1<pos:position pos:line="426" pos:column="45"/></literal></expr>]<pos:position pos:line="426" pos:column="46"/></index></name> <operator pos:line="426" pos:column="47">-<pos:position pos:line="426" pos:column="48"/></operator> <literal type="number" pos:line="426" pos:column="49">1<pos:position pos:line="426" pos:column="50"/></literal></expr>]<pos:position pos:line="426" pos:column="51"/></index></name> <operator pos:line="426" pos:column="52">==<pos:position pos:line="426" pos:column="54"/></operator> <literal type="number" pos:line="426" pos:column="55">0<pos:position pos:line="426" pos:column="56"/></literal></expr>)<pos:position pos:line="426" pos:column="57"/></condition>
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="427" pos:column="17">b<pos:position pos:line="427" pos:column="18"/></name><index pos:line="427" pos:column="18">[<expr><operator pos:line="427" pos:column="19">-<pos:position pos:line="427" pos:column="20"/></operator><literal type="number" pos:line="427" pos:column="20">1<pos:position pos:line="427" pos:column="21"/></literal></expr>]<pos:position pos:line="427" pos:column="22"/></index></name><operator pos:line="427" pos:column="22">--<pos:position pos:line="427" pos:column="24"/></operator></expr>;<pos:position pos:line="427" pos:column="25"/></expr_stmt></block></while>
            <expr_stmt><expr><name pos:line="428" pos:column="13">b<pos:position pos:line="428" pos:column="14"/></name> <operator pos:line="428" pos:column="15">+=<pos:position pos:line="428" pos:column="17"/></operator> <name><name pos:line="428" pos:column="18">b<pos:position pos:line="428" pos:column="19"/></name><index pos:line="428" pos:column="19">[<expr><operator pos:line="428" pos:column="20">-<pos:position pos:line="428" pos:column="21"/></operator><literal type="number" pos:line="428" pos:column="21">1<pos:position pos:line="428" pos:column="22"/></literal></expr>]<pos:position pos:line="428" pos:column="23"/></index></name></expr>;<pos:position pos:line="428" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="429" pos:column="10"/></block>
        <break pos:line="430" pos:column="9">break;<pos:position pos:line="430" pos:column="15"/></break>


        <case pos:line="433" pos:column="9">case <expr><literal type="char" pos:line="433" pos:column="14">'('<pos:position pos:line="433" pos:column="17"/></literal></expr>:<pos:position pos:line="433" pos:column="18"/></case>
            <if pos:line="434" pos:column="13">if <condition pos:line="434" pos:column="16">(<expr><name pos:line="434" pos:column="17">syntax<pos:position pos:line="434" pos:column="23"/></name> <operator pos:line="434" pos:column="24">&amp;<pos:position pos:line="434" pos:column="29"/></operator> <name pos:line="434" pos:column="26">RE_NO_BK_PARENS<pos:position pos:line="434" pos:column="41"/></name></expr>)<pos:position pos:line="434" pos:column="42"/></condition><then pos:line="434" pos:column="42">
                <block type="pseudo"><goto pos:line="435" pos:column="17">goto <name pos:line="435" pos:column="22">handle_open<pos:position pos:line="435" pos:column="33"/></name>;<pos:position pos:line="435" pos:column="34"/></goto></block></then>
            <else pos:line="436" pos:column="13">else
                <block type="pseudo"><goto pos:line="437" pos:column="17">goto <name pos:line="437" pos:column="22">normal_char<pos:position pos:line="437" pos:column="33"/></name>;<pos:position pos:line="437" pos:column="34"/></goto></block></else></if>


        <case pos:line="440" pos:column="9">case <expr><literal type="char" pos:line="440" pos:column="14">')'<pos:position pos:line="440" pos:column="17"/></literal></expr>:<pos:position pos:line="440" pos:column="18"/></case>
            <if pos:line="441" pos:column="13">if <condition pos:line="441" pos:column="16">(<expr><name pos:line="441" pos:column="17">syntax<pos:position pos:line="441" pos:column="23"/></name> <operator pos:line="441" pos:column="24">&amp;<pos:position pos:line="441" pos:column="29"/></operator> <name pos:line="441" pos:column="26">RE_NO_BK_PARENS<pos:position pos:line="441" pos:column="41"/></name></expr>)<pos:position pos:line="441" pos:column="42"/></condition><then pos:line="441" pos:column="42">
                <block type="pseudo"><goto pos:line="442" pos:column="17">goto <name pos:line="442" pos:column="22">handle_close<pos:position pos:line="442" pos:column="34"/></name>;<pos:position pos:line="442" pos:column="35"/></goto></block></then>
            <else pos:line="443" pos:column="13">else
                <block type="pseudo"><goto pos:line="444" pos:column="17">goto <name pos:line="444" pos:column="22">normal_char<pos:position pos:line="444" pos:column="33"/></name>;<pos:position pos:line="444" pos:column="34"/></goto></block></else></if>


        <case pos:line="447" pos:column="9">case <expr><literal type="char" pos:line="447" pos:column="14">'\n'<pos:position pos:line="447" pos:column="18"/></literal></expr>:<pos:position pos:line="447" pos:column="19"/></case>
            <if pos:line="448" pos:column="13">if <condition pos:line="448" pos:column="16">(<expr><name pos:line="448" pos:column="17">syntax<pos:position pos:line="448" pos:column="23"/></name> <operator pos:line="448" pos:column="24">&amp;<pos:position pos:line="448" pos:column="29"/></operator> <name pos:line="448" pos:column="26">RE_NEWLINE_ALT<pos:position pos:line="448" pos:column="40"/></name></expr>)<pos:position pos:line="448" pos:column="41"/></condition><then pos:line="448" pos:column="41">
                <block type="pseudo"><goto pos:line="449" pos:column="17">goto <name pos:line="449" pos:column="22">handle_alt<pos:position pos:line="449" pos:column="32"/></name>;<pos:position pos:line="449" pos:column="33"/></goto></block></then>
            <else pos:line="450" pos:column="13">else
                <block type="pseudo"><goto pos:line="451" pos:column="17">goto <name pos:line="451" pos:column="22">normal_char<pos:position pos:line="451" pos:column="33"/></name>;<pos:position pos:line="451" pos:column="34"/></goto></block></else></if>


        <case pos:line="454" pos:column="9">case <expr><literal type="char" pos:line="454" pos:column="14">'|'<pos:position pos:line="454" pos:column="17"/></literal></expr>:<pos:position pos:line="454" pos:column="18"/></case>
            <if pos:line="455" pos:column="13">if <condition pos:line="455" pos:column="16">(<expr><name pos:line="455" pos:column="17">syntax<pos:position pos:line="455" pos:column="23"/></name> <operator pos:line="455" pos:column="24">&amp;<pos:position pos:line="455" pos:column="29"/></operator> <name pos:line="455" pos:column="26">RE_NO_BK_VBAR<pos:position pos:line="455" pos:column="39"/></name></expr>)<pos:position pos:line="455" pos:column="40"/></condition><then pos:line="455" pos:column="40">
                <block type="pseudo"><goto pos:line="456" pos:column="17">goto <name pos:line="456" pos:column="22">handle_alt<pos:position pos:line="456" pos:column="32"/></name>;<pos:position pos:line="456" pos:column="33"/></goto></block></then>
            <else pos:line="457" pos:column="13">else
                <block type="pseudo"><goto pos:line="458" pos:column="17">goto <name pos:line="458" pos:column="22">normal_char<pos:position pos:line="458" pos:column="33"/></name>;<pos:position pos:line="458" pos:column="34"/></goto></block></else></if>


        <case pos:line="461" pos:column="9">case <expr><literal type="char" pos:line="461" pos:column="14">'{'<pos:position pos:line="461" pos:column="17"/></literal></expr>:<pos:position pos:line="461" pos:column="18"/></case>
            <if pos:line="462" pos:column="13">if <condition pos:line="462" pos:column="16">(<expr><name pos:line="462" pos:column="17">syntax<pos:position pos:line="462" pos:column="23"/></name> <operator pos:line="462" pos:column="24">&amp;<pos:position pos:line="462" pos:column="29"/></operator> <name pos:line="462" pos:column="26">RE_INTERVALS<pos:position pos:line="462" pos:column="38"/></name> <operator pos:line="462" pos:column="39">&amp;&amp;<pos:position pos:line="462" pos:column="49"/></operator> <name pos:line="462" pos:column="42">syntax<pos:position pos:line="462" pos:column="48"/></name> <operator pos:line="462" pos:column="49">&amp;<pos:position pos:line="462" pos:column="54"/></operator> <name pos:line="462" pos:column="51">RE_NO_BK_BRACES<pos:position pos:line="462" pos:column="66"/></name></expr>)<pos:position pos:line="462" pos:column="67"/></condition><then pos:line="462" pos:column="67">
                <block type="pseudo"><goto pos:line="463" pos:column="17">goto <name pos:line="463" pos:column="22">handle_interval<pos:position pos:line="463" pos:column="37"/></name>;<pos:position pos:line="463" pos:column="38"/></goto></block></then>
            <else pos:line="464" pos:column="13">else
                <block type="pseudo"><goto pos:line="465" pos:column="17">goto <name pos:line="465" pos:column="22">normal_char<pos:position pos:line="465" pos:column="33"/></name>;<pos:position pos:line="465" pos:column="34"/></goto></block></else></if>


        <case pos:line="468" pos:column="9">case <expr><literal type="char" pos:line="468" pos:column="14">'\\'<pos:position pos:line="468" pos:column="18"/></literal></expr>:<pos:position pos:line="468" pos:column="19"/></case>
            <if pos:line="469" pos:column="13">if <condition pos:line="469" pos:column="16">(<expr><name pos:line="469" pos:column="17">p<pos:position pos:line="469" pos:column="18"/></name> <operator pos:line="469" pos:column="19">==<pos:position pos:line="469" pos:column="21"/></operator> <name pos:line="469" pos:column="22">pend<pos:position pos:line="469" pos:column="26"/></name></expr>)<pos:position pos:line="469" pos:column="27"/></condition><then pos:line="469" pos:column="27">
                <block type="pseudo"><return pos:line="470" pos:column="17">return <expr><name pos:line="470" pos:column="24">REG_EESCAPE<pos:position pos:line="470" pos:column="35"/></name></expr>;<pos:position pos:line="470" pos:column="36"/></return></block></then></if>

            <comment type="block" pos:line="472" pos:column="13">/* Do not translate the character after the \, so that we can
             * distinguish, e.g., \B from \b, even if we normally would
             * translate, e.g., B to b.  */</comment>
            <expr_stmt><expr><call><name pos:line="475" pos:column="13">PATFETCH_RAW<pos:position pos:line="475" pos:column="25"/></name><argument_list pos:line="475" pos:column="25">(<argument><expr><name pos:line="475" pos:column="26">c<pos:position pos:line="475" pos:column="27"/></name></expr></argument>)<pos:position pos:line="475" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="475" pos:column="29"/></expr_stmt>

            <switch pos:line="477" pos:column="13">switch <condition pos:line="477" pos:column="20">(<expr><name pos:line="477" pos:column="21">c<pos:position pos:line="477" pos:column="22"/></name></expr>)<pos:position pos:line="477" pos:column="23"/></condition> <block pos:line="477" pos:column="24">{
            <case pos:line="478" pos:column="13">case <expr><literal type="char" pos:line="478" pos:column="18">'('<pos:position pos:line="478" pos:column="21"/></literal></expr>:<pos:position pos:line="478" pos:column="22"/></case>
                <if pos:line="479" pos:column="17">if <condition pos:line="479" pos:column="20">(<expr><name pos:line="479" pos:column="21">syntax<pos:position pos:line="479" pos:column="27"/></name> <operator pos:line="479" pos:column="28">&amp;<pos:position pos:line="479" pos:column="33"/></operator> <name pos:line="479" pos:column="30">RE_NO_BK_PARENS<pos:position pos:line="479" pos:column="45"/></name></expr>)<pos:position pos:line="479" pos:column="46"/></condition><then pos:line="479" pos:column="46">
                    <block type="pseudo"><goto pos:line="480" pos:column="21">goto <name pos:line="480" pos:column="26">normal_backslash<pos:position pos:line="480" pos:column="42"/></name>;<pos:position pos:line="480" pos:column="43"/></goto></block></then></if>

<label><name pos:line="482" pos:column="1">handle_open<pos:position pos:line="482" pos:column="12"/></name>:<pos:position pos:line="482" pos:column="13"/></label>
                <expr_stmt><expr><name><name pos:line="483" pos:column="17">bufp<pos:position pos:line="483" pos:column="21"/></name><operator pos:line="483" pos:column="21">-&gt;<pos:position pos:line="483" pos:column="26"/></operator><name pos:line="483" pos:column="23">re_nsub<pos:position pos:line="483" pos:column="30"/></name></name><operator pos:line="483" pos:column="30">++<pos:position pos:line="483" pos:column="32"/></operator></expr>;<pos:position pos:line="483" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name pos:line="484" pos:column="17">regnum<pos:position pos:line="484" pos:column="23"/></name><operator pos:line="484" pos:column="23">++<pos:position pos:line="484" pos:column="25"/></operator></expr>;<pos:position pos:line="484" pos:column="26"/></expr_stmt>

                <if pos:line="486" pos:column="17">if <condition pos:line="486" pos:column="20">(<expr><name pos:line="486" pos:column="21">COMPILE_STACK_FULL<pos:position pos:line="486" pos:column="39"/></name></expr>)<pos:position pos:line="486" pos:column="40"/></condition><then pos:line="486" pos:column="40"> <block pos:line="486" pos:column="41">{
                    <expr_stmt><expr><call><name pos:line="487" pos:column="21">RETALLOC<pos:position pos:line="487" pos:column="29"/></name><argument_list pos:line="487" pos:column="29">(<argument><expr><name><name pos:line="487" pos:column="30">compile_stack<pos:position pos:line="487" pos:column="43"/></name><operator pos:line="487" pos:column="43">.<pos:position pos:line="487" pos:column="44"/></operator><name pos:line="487" pos:column="44">stack<pos:position pos:line="487" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="487" pos:column="51">compile_stack<pos:position pos:line="487" pos:column="64"/></name><operator pos:line="487" pos:column="64">.<pos:position pos:line="487" pos:column="65"/></operator><name pos:line="487" pos:column="65">size<pos:position pos:line="487" pos:column="69"/></name></name> <operator pos:line="487" pos:column="70">&lt;&lt;<pos:position pos:line="487" pos:column="78"/></operator> <literal type="number" pos:line="487" pos:column="73">1<pos:position pos:line="487" pos:column="74"/></literal></expr></argument>,
                             <argument><expr><name pos:line="488" pos:column="30">compile_stack_elt_t<pos:position pos:line="488" pos:column="49"/></name></expr></argument>)<pos:position pos:line="488" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="488" pos:column="51"/></expr_stmt>
                    <if pos:line="489" pos:column="21">if <condition pos:line="489" pos:column="24">(<expr><name><name pos:line="489" pos:column="25">compile_stack<pos:position pos:line="489" pos:column="38"/></name><operator pos:line="489" pos:column="38">.<pos:position pos:line="489" pos:column="39"/></operator><name pos:line="489" pos:column="39">stack<pos:position pos:line="489" pos:column="44"/></name></name> <operator pos:line="489" pos:column="45">==<pos:position pos:line="489" pos:column="47"/></operator> <name pos:line="489" pos:column="48">NULL<pos:position pos:line="489" pos:column="52"/></name></expr>)<pos:position pos:line="489" pos:column="53"/></condition><then pos:line="489" pos:column="53">
                        <block type="pseudo"><return pos:line="490" pos:column="25">return <expr><name pos:line="490" pos:column="32">REG_ESPACE<pos:position pos:line="490" pos:column="42"/></name></expr>;<pos:position pos:line="490" pos:column="43"/></return></block></then></if>

                    <expr_stmt><expr><name><name pos:line="492" pos:column="21">compile_stack<pos:position pos:line="492" pos:column="34"/></name><operator pos:line="492" pos:column="34">.<pos:position pos:line="492" pos:column="35"/></operator><name pos:line="492" pos:column="35">size<pos:position pos:line="492" pos:column="39"/></name></name> <operator pos:line="492" pos:column="40">&lt;&lt;=<pos:position pos:line="492" pos:column="49"/></operator> <literal type="number" pos:line="492" pos:column="44">1<pos:position pos:line="492" pos:column="45"/></literal></expr>;<pos:position pos:line="492" pos:column="46"/></expr_stmt>
                }<pos:position pos:line="493" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="494" pos:column="17">/* These are the values to restore when we hit end of this
                 * group.  They are all relative offsets, so that if the
                 * whole pattern moves because of realloc, they will still
                 * be valid.  */</comment>
                <expr_stmt><expr><name><name pos:line="498" pos:column="17">COMPILE_STACK_TOP<pos:position pos:line="498" pos:column="34"/></name><operator pos:line="498" pos:column="34">.<pos:position pos:line="498" pos:column="35"/></operator><name pos:line="498" pos:column="35">begalt_offset<pos:position pos:line="498" pos:column="48"/></name></name> <operator pos:line="498" pos:column="49">=<pos:position pos:line="498" pos:column="50"/></operator> <name pos:line="498" pos:column="51">begalt<pos:position pos:line="498" pos:column="57"/></name> <operator pos:line="498" pos:column="58">-<pos:position pos:line="498" pos:column="59"/></operator> <name><name pos:line="498" pos:column="60">bufp<pos:position pos:line="498" pos:column="64"/></name><operator pos:line="498" pos:column="64">-&gt;<pos:position pos:line="498" pos:column="69"/></operator><name pos:line="498" pos:column="66">buffer<pos:position pos:line="498" pos:column="72"/></name></name></expr>;<pos:position pos:line="498" pos:column="73"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="499" pos:column="17">COMPILE_STACK_TOP<pos:position pos:line="499" pos:column="34"/></name><operator pos:line="499" pos:column="34">.<pos:position pos:line="499" pos:column="35"/></operator><name pos:line="499" pos:column="35">fixup_alt_jump<pos:position pos:line="499" pos:column="49"/></name></name>
                <operator pos:line="500" pos:column="17">=<pos:position pos:line="500" pos:column="18"/></operator> <ternary><condition><expr><name pos:line="500" pos:column="19">fixup_alt_jump<pos:position pos:line="500" pos:column="33"/></name></expr> ?<pos:position pos:line="500" pos:column="35"/></condition><then pos:line="500" pos:column="35"> <expr><name pos:line="500" pos:column="36">fixup_alt_jump<pos:position pos:line="500" pos:column="50"/></name> <operator pos:line="500" pos:column="51">-<pos:position pos:line="500" pos:column="52"/></operator> <name><name pos:line="500" pos:column="53">bufp<pos:position pos:line="500" pos:column="57"/></name><operator pos:line="500" pos:column="57">-&gt;<pos:position pos:line="500" pos:column="62"/></operator><name pos:line="500" pos:column="59">buffer<pos:position pos:line="500" pos:column="65"/></name></name> <operator pos:line="500" pos:column="66">+<pos:position pos:line="500" pos:column="67"/></operator> <literal type="number" pos:line="500" pos:column="68">1<pos:position pos:line="500" pos:column="69"/></literal></expr> <pos:position pos:line="500" pos:column="70"/></then><else pos:line="500" pos:column="70">: <expr><literal type="number" pos:line="500" pos:column="72">0<pos:position pos:line="500" pos:column="73"/></literal></expr></else></ternary></expr>;<pos:position pos:line="500" pos:column="74"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="501" pos:column="17">COMPILE_STACK_TOP<pos:position pos:line="501" pos:column="34"/></name><operator pos:line="501" pos:column="34">.<pos:position pos:line="501" pos:column="35"/></operator><name pos:line="501" pos:column="35">laststart_offset<pos:position pos:line="501" pos:column="51"/></name></name> <operator pos:line="501" pos:column="52">=<pos:position pos:line="501" pos:column="53"/></operator> <name pos:line="501" pos:column="54">b<pos:position pos:line="501" pos:column="55"/></name> <operator pos:line="501" pos:column="56">-<pos:position pos:line="501" pos:column="57"/></operator> <name><name pos:line="501" pos:column="58">bufp<pos:position pos:line="501" pos:column="62"/></name><operator pos:line="501" pos:column="62">-&gt;<pos:position pos:line="501" pos:column="67"/></operator><name pos:line="501" pos:column="64">buffer<pos:position pos:line="501" pos:column="70"/></name></name></expr>;<pos:position pos:line="501" pos:column="71"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="502" pos:column="17">COMPILE_STACK_TOP<pos:position pos:line="502" pos:column="34"/></name><operator pos:line="502" pos:column="34">.<pos:position pos:line="502" pos:column="35"/></operator><name pos:line="502" pos:column="35">regnum<pos:position pos:line="502" pos:column="41"/></name></name> <operator pos:line="502" pos:column="42">=<pos:position pos:line="502" pos:column="43"/></operator> <name pos:line="502" pos:column="44">regnum<pos:position pos:line="502" pos:column="50"/></name></expr>;<pos:position pos:line="502" pos:column="51"/></expr_stmt>

                <comment type="block" pos:line="504" pos:column="17">/* We will eventually replace the 0 with the number of
                 * groups inner to this one.  But do not push a
                 * start_memory for groups beyond the last one we can
                 * represent in the compiled pattern.  */</comment>
                <if pos:line="508" pos:column="17">if <condition pos:line="508" pos:column="20">(<expr><name pos:line="508" pos:column="21">regnum<pos:position pos:line="508" pos:column="27"/></name> <operator pos:line="508" pos:column="28">&lt;=<pos:position pos:line="508" pos:column="33"/></operator> <name pos:line="508" pos:column="31">MAX_REGNUM<pos:position pos:line="508" pos:column="41"/></name></expr>)<pos:position pos:line="508" pos:column="42"/></condition><then pos:line="508" pos:column="42"> <block pos:line="508" pos:column="43">{
                    <expr_stmt><expr><name><name pos:line="509" pos:column="21">COMPILE_STACK_TOP<pos:position pos:line="509" pos:column="38"/></name><operator pos:line="509" pos:column="38">.<pos:position pos:line="509" pos:column="39"/></operator><name pos:line="509" pos:column="39">inner_group_offset<pos:position pos:line="509" pos:column="57"/></name></name> <operator pos:line="509" pos:column="58">=<pos:position pos:line="509" pos:column="59"/></operator> <name pos:line="509" pos:column="60">b<pos:position pos:line="509" pos:column="61"/></name> <operator pos:line="509" pos:column="62">-<pos:position pos:line="509" pos:column="63"/></operator> <name><name pos:line="509" pos:column="64">bufp<pos:position pos:line="509" pos:column="68"/></name><operator pos:line="509" pos:column="68">-&gt;<pos:position pos:line="509" pos:column="73"/></operator><name pos:line="509" pos:column="70">buffer<pos:position pos:line="509" pos:column="76"/></name></name> <operator pos:line="509" pos:column="77">+<pos:position pos:line="509" pos:column="78"/></operator> <literal type="number" pos:line="509" pos:column="79">2<pos:position pos:line="509" pos:column="80"/></literal></expr>;<pos:position pos:line="509" pos:column="81"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="510" pos:column="21">BUF_PUSH_3<pos:position pos:line="510" pos:column="31"/></name><argument_list pos:line="510" pos:column="31">(<argument><expr><name pos:line="510" pos:column="32">start_memory<pos:position pos:line="510" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="510" pos:column="46">regnum<pos:position pos:line="510" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="510" pos:column="54">0<pos:position pos:line="510" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="510" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="510" pos:column="57"/></expr_stmt>
                }<pos:position pos:line="511" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name><name pos:line="512" pos:column="17">compile_stack<pos:position pos:line="512" pos:column="30"/></name><operator pos:line="512" pos:column="30">.<pos:position pos:line="512" pos:column="31"/></operator><name pos:line="512" pos:column="31">avail<pos:position pos:line="512" pos:column="36"/></name></name><operator pos:line="512" pos:column="36">++<pos:position pos:line="512" pos:column="38"/></operator></expr>;<pos:position pos:line="512" pos:column="39"/></expr_stmt>

                <expr_stmt><expr><name pos:line="514" pos:column="17">fixup_alt_jump<pos:position pos:line="514" pos:column="31"/></name> <operator pos:line="514" pos:column="32">=<pos:position pos:line="514" pos:column="33"/></operator> <literal type="number" pos:line="514" pos:column="34">0<pos:position pos:line="514" pos:column="35"/></literal></expr>;<pos:position pos:line="514" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><name pos:line="515" pos:column="17">laststart<pos:position pos:line="515" pos:column="26"/></name> <operator pos:line="515" pos:column="27">=<pos:position pos:line="515" pos:column="28"/></operator> <literal type="number" pos:line="515" pos:column="29">0<pos:position pos:line="515" pos:column="30"/></literal></expr>;<pos:position pos:line="515" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><name pos:line="516" pos:column="17">begalt<pos:position pos:line="516" pos:column="23"/></name> <operator pos:line="516" pos:column="24">=<pos:position pos:line="516" pos:column="25"/></operator> <name pos:line="516" pos:column="26">b<pos:position pos:line="516" pos:column="27"/></name></expr>;<pos:position pos:line="516" pos:column="28"/></expr_stmt>
                <comment type="block" pos:line="517" pos:column="17">/* If we've reached MAX_REGNUM groups, then this open
                 * won't actually generate any code, so we'll have to
                 * clear pending_exact explicitly.  */</comment>
                <expr_stmt><expr><name pos:line="520" pos:column="17">pending_exact<pos:position pos:line="520" pos:column="30"/></name> <operator pos:line="520" pos:column="31">=<pos:position pos:line="520" pos:column="32"/></operator> <literal type="number" pos:line="520" pos:column="33">0<pos:position pos:line="520" pos:column="34"/></literal></expr>;<pos:position pos:line="520" pos:column="35"/></expr_stmt>
                <break pos:line="521" pos:column="17">break;<pos:position pos:line="521" pos:column="23"/></break>


            <case pos:line="524" pos:column="13">case <expr><literal type="char" pos:line="524" pos:column="18">')'<pos:position pos:line="524" pos:column="21"/></literal></expr>:<pos:position pos:line="524" pos:column="22"/></case>
                <if pos:line="525" pos:column="17">if <condition pos:line="525" pos:column="20">(<expr><name pos:line="525" pos:column="21">syntax<pos:position pos:line="525" pos:column="27"/></name> <operator pos:line="525" pos:column="28">&amp;<pos:position pos:line="525" pos:column="33"/></operator> <name pos:line="525" pos:column="30">RE_NO_BK_PARENS<pos:position pos:line="525" pos:column="45"/></name></expr>)<pos:position pos:line="525" pos:column="46"/></condition><then pos:line="525" pos:column="46">
                    <block type="pseudo"><goto pos:line="526" pos:column="21">goto <name pos:line="526" pos:column="26">normal_backslash<pos:position pos:line="526" pos:column="42"/></name>;<pos:position pos:line="526" pos:column="43"/></goto></block></then></if>

                <if pos:line="528" pos:column="17">if <condition pos:line="528" pos:column="20">(<expr><name pos:line="528" pos:column="21">COMPILE_STACK_EMPTY<pos:position pos:line="528" pos:column="40"/></name></expr>)<pos:position pos:line="528" pos:column="41"/></condition><then pos:line="528" pos:column="41"> <block pos:line="528" pos:column="42">{
                    <if pos:line="529" pos:column="21">if <condition pos:line="529" pos:column="24">(<expr><name pos:line="529" pos:column="25">syntax<pos:position pos:line="529" pos:column="31"/></name> <operator pos:line="529" pos:column="32">&amp;<pos:position pos:line="529" pos:column="37"/></operator> <name pos:line="529" pos:column="34">RE_UNMATCHED_RIGHT_PAREN_ORD<pos:position pos:line="529" pos:column="62"/></name></expr>)<pos:position pos:line="529" pos:column="63"/></condition><then pos:line="529" pos:column="63">
                        <block type="pseudo"><goto pos:line="530" pos:column="25">goto <name pos:line="530" pos:column="30">normal_backslash<pos:position pos:line="530" pos:column="46"/></name>;<pos:position pos:line="530" pos:column="47"/></goto></block></then>
                    <else pos:line="531" pos:column="21">else
                        <block type="pseudo"><return pos:line="532" pos:column="25">return <expr><name pos:line="532" pos:column="32">REG_ERPAREN<pos:position pos:line="532" pos:column="43"/></name></expr>;<pos:position pos:line="532" pos:column="44"/></return></block></else></if>
                }<pos:position pos:line="533" pos:column="18"/></block></then></if>
<label><name pos:line="534" pos:column="1">handle_close<pos:position pos:line="534" pos:column="13"/></name>:<pos:position pos:line="534" pos:column="14"/></label>
                <if pos:line="535" pos:column="17">if <condition pos:line="535" pos:column="20">(<expr><name pos:line="535" pos:column="21">fixup_alt_jump<pos:position pos:line="535" pos:column="35"/></name></expr>)<pos:position pos:line="535" pos:column="36"/></condition><then pos:line="535" pos:column="36"> <block pos:line="535" pos:column="37">{	<comment type="block" pos:line="535" pos:column="41">/* Push a dummy failure point at the end of the
					 * alternative for a possible future
					 * `pop_failure_jump' to pop.  See comments at
					 * `push_dummy_failure' in `re_match_2'.  */</comment>
                    <expr_stmt><expr><call><name pos:line="539" pos:column="21">BUF_PUSH<pos:position pos:line="539" pos:column="29"/></name><argument_list pos:line="539" pos:column="29">(<argument><expr><name pos:line="539" pos:column="30">push_dummy_failure<pos:position pos:line="539" pos:column="48"/></name></expr></argument>)<pos:position pos:line="539" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="539" pos:column="50"/></expr_stmt>

                    <comment type="block" pos:line="541" pos:column="21">/* We allocated space for this jump when we assigned
                     * to `fixup_alt_jump', in the `handle_alt' case below.  */</comment>
                    <expr_stmt><expr><call><name pos:line="543" pos:column="21">STORE_JUMP<pos:position pos:line="543" pos:column="31"/></name><argument_list pos:line="543" pos:column="31">(<argument><expr><name pos:line="543" pos:column="32">jump_past_alt<pos:position pos:line="543" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="543" pos:column="47">fixup_alt_jump<pos:position pos:line="543" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="543" pos:column="63">b<pos:position pos:line="543" pos:column="64"/></name> <operator pos:line="543" pos:column="65">-<pos:position pos:line="543" pos:column="66"/></operator> <literal type="number" pos:line="543" pos:column="67">1<pos:position pos:line="543" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="543" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="543" pos:column="70"/></expr_stmt>
                }<pos:position pos:line="544" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="545" pos:column="17">/* See similar code for backslashed left paren above.  */</comment>
                <if pos:line="546" pos:column="17">if <condition pos:line="546" pos:column="20">(<expr><name pos:line="546" pos:column="21">COMPILE_STACK_EMPTY<pos:position pos:line="546" pos:column="40"/></name></expr>)<pos:position pos:line="546" pos:column="41"/></condition><then pos:line="546" pos:column="41"> <block pos:line="546" pos:column="42">{
                    <if pos:line="547" pos:column="21">if <condition pos:line="547" pos:column="24">(<expr><name pos:line="547" pos:column="25">syntax<pos:position pos:line="547" pos:column="31"/></name> <operator pos:line="547" pos:column="32">&amp;<pos:position pos:line="547" pos:column="37"/></operator> <name pos:line="547" pos:column="34">RE_UNMATCHED_RIGHT_PAREN_ORD<pos:position pos:line="547" pos:column="62"/></name></expr>)<pos:position pos:line="547" pos:column="63"/></condition><then pos:line="547" pos:column="63">
                        <block type="pseudo"><goto pos:line="548" pos:column="25">goto <name pos:line="548" pos:column="30">normal_char<pos:position pos:line="548" pos:column="41"/></name>;<pos:position pos:line="548" pos:column="42"/></goto></block></then>
                    <else pos:line="549" pos:column="21">else
                        <block type="pseudo"><return pos:line="550" pos:column="25">return <expr><name pos:line="550" pos:column="32">REG_ERPAREN<pos:position pos:line="550" pos:column="43"/></name></expr>;<pos:position pos:line="550" pos:column="44"/></return></block></else></if>
                }<pos:position pos:line="551" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="552" pos:column="17">/* Since we just checked for an empty stack above, this
                 * ``can't happen''.  */</comment>
                <expr_stmt><expr><call><name pos:line="554" pos:column="17">assert<pos:position pos:line="554" pos:column="23"/></name><argument_list pos:line="554" pos:column="23">(<argument><expr><name><name pos:line="554" pos:column="24">compile_stack<pos:position pos:line="554" pos:column="37"/></name><operator pos:line="554" pos:column="37">.<pos:position pos:line="554" pos:column="38"/></operator><name pos:line="554" pos:column="38">avail<pos:position pos:line="554" pos:column="43"/></name></name> <operator pos:line="554" pos:column="44">!=<pos:position pos:line="554" pos:column="46"/></operator> <literal type="number" pos:line="554" pos:column="47">0<pos:position pos:line="554" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="554" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="554" pos:column="50"/></expr_stmt>
                <block pos:line="555" pos:column="17">{
                    <comment type="block" pos:line="556" pos:column="21">/* We don't just want to restore into `regnum', because
                     * later groups should continue to be numbered higher,
                     * as in `(ab)c(de)' -- the second group is #2.  */</comment>
                    <decl_stmt><decl><type><name pos:line="559" pos:column="21">regnum_t<pos:position pos:line="559" pos:column="29"/></name></type> <name pos:line="559" pos:column="30">this_group_regnum<pos:position pos:line="559" pos:column="47"/></name></decl>;<pos:position pos:line="559" pos:column="48"/></decl_stmt>

                    <expr_stmt><expr><name><name pos:line="561" pos:column="21">compile_stack<pos:position pos:line="561" pos:column="34"/></name><operator pos:line="561" pos:column="34">.<pos:position pos:line="561" pos:column="35"/></operator><name pos:line="561" pos:column="35">avail<pos:position pos:line="561" pos:column="40"/></name></name><operator pos:line="561" pos:column="40">--<pos:position pos:line="561" pos:column="42"/></operator></expr>;<pos:position pos:line="561" pos:column="43"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="562" pos:column="21">begalt<pos:position pos:line="562" pos:column="27"/></name> <operator pos:line="562" pos:column="28">=<pos:position pos:line="562" pos:column="29"/></operator> <name><name pos:line="562" pos:column="30">bufp<pos:position pos:line="562" pos:column="34"/></name><operator pos:line="562" pos:column="34">-&gt;<pos:position pos:line="562" pos:column="39"/></operator><name pos:line="562" pos:column="36">buffer<pos:position pos:line="562" pos:column="42"/></name></name> <operator pos:line="562" pos:column="43">+<pos:position pos:line="562" pos:column="44"/></operator> <name><name pos:line="562" pos:column="45">COMPILE_STACK_TOP<pos:position pos:line="562" pos:column="62"/></name><operator pos:line="562" pos:column="62">.<pos:position pos:line="562" pos:column="63"/></operator><name pos:line="562" pos:column="63">begalt_offset<pos:position pos:line="562" pos:column="76"/></name></name></expr>;<pos:position pos:line="562" pos:column="77"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="563" pos:column="21">fixup_alt_jump<pos:position pos:line="563" pos:column="35"/></name>
                    <operator pos:line="564" pos:column="21">=<pos:position pos:line="564" pos:column="22"/></operator> <ternary><condition><expr><name><name pos:line="564" pos:column="23">COMPILE_STACK_TOP<pos:position pos:line="564" pos:column="40"/></name><operator pos:line="564" pos:column="40">.<pos:position pos:line="564" pos:column="41"/></operator><name pos:line="564" pos:column="41">fixup_alt_jump<pos:position pos:line="564" pos:column="55"/></name></name></expr>
                      ?<pos:position pos:line="565" pos:column="24"/></condition><then pos:line="565" pos:column="24"> <expr><name><name pos:line="565" pos:column="25">bufp<pos:position pos:line="565" pos:column="29"/></name><operator pos:line="565" pos:column="29">-&gt;<pos:position pos:line="565" pos:column="34"/></operator><name pos:line="565" pos:column="31">buffer<pos:position pos:line="565" pos:column="37"/></name></name> <operator pos:line="565" pos:column="38">+<pos:position pos:line="565" pos:column="39"/></operator> <name><name pos:line="565" pos:column="40">COMPILE_STACK_TOP<pos:position pos:line="565" pos:column="57"/></name><operator pos:line="565" pos:column="57">.<pos:position pos:line="565" pos:column="58"/></operator><name pos:line="565" pos:column="58">fixup_alt_jump<pos:position pos:line="565" pos:column="72"/></name></name> <operator pos:line="565" pos:column="73">-<pos:position pos:line="565" pos:column="74"/></operator> <literal type="number" pos:line="565" pos:column="75">1<pos:position pos:line="565" pos:column="76"/></literal></expr>
                      <pos:position pos:line="566" pos:column="23"/></then><else pos:line="566" pos:column="23">: <expr><literal type="number" pos:line="566" pos:column="25">0<pos:position pos:line="566" pos:column="26"/></literal></expr></else></ternary></expr>;<pos:position pos:line="566" pos:column="27"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="567" pos:column="21">laststart<pos:position pos:line="567" pos:column="30"/></name> <operator pos:line="567" pos:column="31">=<pos:position pos:line="567" pos:column="32"/></operator> <name><name pos:line="567" pos:column="33">bufp<pos:position pos:line="567" pos:column="37"/></name><operator pos:line="567" pos:column="37">-&gt;<pos:position pos:line="567" pos:column="42"/></operator><name pos:line="567" pos:column="39">buffer<pos:position pos:line="567" pos:column="45"/></name></name> <operator pos:line="567" pos:column="46">+<pos:position pos:line="567" pos:column="47"/></operator> <name><name pos:line="567" pos:column="48">COMPILE_STACK_TOP<pos:position pos:line="567" pos:column="65"/></name><operator pos:line="567" pos:column="65">.<pos:position pos:line="567" pos:column="66"/></operator><name pos:line="567" pos:column="66">laststart_offset<pos:position pos:line="567" pos:column="82"/></name></name></expr>;<pos:position pos:line="567" pos:column="83"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="568" pos:column="21">this_group_regnum<pos:position pos:line="568" pos:column="38"/></name> <operator pos:line="568" pos:column="39">=<pos:position pos:line="568" pos:column="40"/></operator> <name><name pos:line="568" pos:column="41">COMPILE_STACK_TOP<pos:position pos:line="568" pos:column="58"/></name><operator pos:line="568" pos:column="58">.<pos:position pos:line="568" pos:column="59"/></operator><name pos:line="568" pos:column="59">regnum<pos:position pos:line="568" pos:column="65"/></name></name></expr>;<pos:position pos:line="568" pos:column="66"/></expr_stmt>
                    <comment type="block" pos:line="569" pos:column="21">/* If we've reached MAX_REGNUM groups, then this open
                     * won't actually generate any code, so we'll have to
                     * clear pending_exact explicitly.  */</comment>
                    <expr_stmt><expr><name pos:line="572" pos:column="21">pending_exact<pos:position pos:line="572" pos:column="34"/></name> <operator pos:line="572" pos:column="35">=<pos:position pos:line="572" pos:column="36"/></operator> <literal type="number" pos:line="572" pos:column="37">0<pos:position pos:line="572" pos:column="38"/></literal></expr>;<pos:position pos:line="572" pos:column="39"/></expr_stmt>

                    <comment type="block" pos:line="574" pos:column="21">/* We're at the end of the group, so now we know how many
                     * groups were inside this one.  */</comment>
                    <if pos:line="576" pos:column="21">if <condition pos:line="576" pos:column="24">(<expr><name pos:line="576" pos:column="25">this_group_regnum<pos:position pos:line="576" pos:column="42"/></name> <operator pos:line="576" pos:column="43">&lt;=<pos:position pos:line="576" pos:column="48"/></operator> <name pos:line="576" pos:column="46">MAX_REGNUM<pos:position pos:line="576" pos:column="56"/></name></expr>)<pos:position pos:line="576" pos:column="57"/></condition><then pos:line="576" pos:column="57"> <block pos:line="576" pos:column="58">{
                        <decl_stmt><decl><type><name pos:line="577" pos:column="25">unsigned<pos:position pos:line="577" pos:column="33"/></name> <name pos:line="577" pos:column="34">char<pos:position pos:line="577" pos:column="38"/></name> <modifier pos:line="577" pos:column="39">*<pos:position pos:line="577" pos:column="40"/></modifier></type><name pos:line="577" pos:column="40">inner_group_loc<pos:position pos:line="577" pos:column="55"/></name>
                        <init pos:line="578" pos:column="25">= <expr><name><name pos:line="578" pos:column="27">bufp<pos:position pos:line="578" pos:column="31"/></name><operator pos:line="578" pos:column="31">-&gt;<pos:position pos:line="578" pos:column="36"/></operator><name pos:line="578" pos:column="33">buffer<pos:position pos:line="578" pos:column="39"/></name></name> <operator pos:line="578" pos:column="40">+<pos:position pos:line="578" pos:column="41"/></operator> <name><name pos:line="578" pos:column="42">COMPILE_STACK_TOP<pos:position pos:line="578" pos:column="59"/></name><operator pos:line="578" pos:column="59">.<pos:position pos:line="578" pos:column="60"/></operator><name pos:line="578" pos:column="60">inner_group_offset<pos:position pos:line="578" pos:column="78"/></name></name></expr></init></decl>;<pos:position pos:line="578" pos:column="79"/></decl_stmt>

                        <expr_stmt><expr><operator pos:line="580" pos:column="25">*<pos:position pos:line="580" pos:column="26"/></operator><name pos:line="580" pos:column="26">inner_group_loc<pos:position pos:line="580" pos:column="41"/></name> <operator pos:line="580" pos:column="42">=<pos:position pos:line="580" pos:column="43"/></operator> <name pos:line="580" pos:column="44">regnum<pos:position pos:line="580" pos:column="50"/></name> <operator pos:line="580" pos:column="51">-<pos:position pos:line="580" pos:column="52"/></operator> <name pos:line="580" pos:column="53">this_group_regnum<pos:position pos:line="580" pos:column="70"/></name></expr>;<pos:position pos:line="580" pos:column="71"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="581" pos:column="25">BUF_PUSH_3<pos:position pos:line="581" pos:column="35"/></name><argument_list pos:line="581" pos:column="35">(<argument><expr><name pos:line="581" pos:column="36">stop_memory<pos:position pos:line="581" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="581" pos:column="49">this_group_regnum<pos:position pos:line="581" pos:column="66"/></name></expr></argument>,
                                   <argument><expr><name pos:line="582" pos:column="36">regnum<pos:position pos:line="582" pos:column="42"/></name> <operator pos:line="582" pos:column="43">-<pos:position pos:line="582" pos:column="44"/></operator> <name pos:line="582" pos:column="45">this_group_regnum<pos:position pos:line="582" pos:column="62"/></name></expr></argument>)<pos:position pos:line="582" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="582" pos:column="64"/></expr_stmt>
                    }<pos:position pos:line="583" pos:column="22"/></block></then></if>
                }<pos:position pos:line="584" pos:column="18"/></block>
                <break pos:line="585" pos:column="17">break;<pos:position pos:line="585" pos:column="23"/></break>


            <case pos:line="588" pos:column="13">case <expr><literal type="char" pos:line="588" pos:column="18">'|'<pos:position pos:line="588" pos:column="21"/></literal></expr>:<pos:position pos:line="588" pos:column="22"/></case>		<comment type="block" pos:line="588" pos:column="33">/* `\|'.  */</comment>
                <if pos:line="589" pos:column="17">if <condition pos:line="589" pos:column="20">(<expr><name pos:line="589" pos:column="21">syntax<pos:position pos:line="589" pos:column="27"/></name> <operator pos:line="589" pos:column="28">&amp;<pos:position pos:line="589" pos:column="33"/></operator> <name pos:line="589" pos:column="30">RE_LIMITED_OPS<pos:position pos:line="589" pos:column="44"/></name> <operator pos:line="589" pos:column="45">||<pos:position pos:line="589" pos:column="47"/></operator> <name pos:line="589" pos:column="48">syntax<pos:position pos:line="589" pos:column="54"/></name> <operator pos:line="589" pos:column="55">&amp;<pos:position pos:line="589" pos:column="60"/></operator> <name pos:line="589" pos:column="57">RE_NO_BK_VBAR<pos:position pos:line="589" pos:column="70"/></name></expr>)<pos:position pos:line="589" pos:column="71"/></condition><then pos:line="589" pos:column="71">
                    <block type="pseudo"><goto pos:line="590" pos:column="21">goto <name pos:line="590" pos:column="26">normal_backslash<pos:position pos:line="590" pos:column="42"/></name>;<pos:position pos:line="590" pos:column="43"/></goto></block></then></if>
<label><name pos:line="591" pos:column="1">handle_alt<pos:position pos:line="591" pos:column="11"/></name>:<pos:position pos:line="591" pos:column="12"/></label>
                <if pos:line="592" pos:column="17">if <condition pos:line="592" pos:column="20">(<expr><name pos:line="592" pos:column="21">syntax<pos:position pos:line="592" pos:column="27"/></name> <operator pos:line="592" pos:column="28">&amp;<pos:position pos:line="592" pos:column="33"/></operator> <name pos:line="592" pos:column="30">RE_LIMITED_OPS<pos:position pos:line="592" pos:column="44"/></name></expr>)<pos:position pos:line="592" pos:column="45"/></condition><then pos:line="592" pos:column="45">
                    <block type="pseudo"><goto pos:line="593" pos:column="21">goto <name pos:line="593" pos:column="26">normal_char<pos:position pos:line="593" pos:column="37"/></name>;<pos:position pos:line="593" pos:column="38"/></goto></block></then></if>

                <comment type="block" pos:line="595" pos:column="17">/* Insert before the previous alternative a jump which
                 * jumps to this alternative if the former fails.  */</comment>
                <expr_stmt><expr><call><name pos:line="597" pos:column="17">GET_BUFFER_SPACE<pos:position pos:line="597" pos:column="33"/></name><argument_list pos:line="597" pos:column="33">(<argument><expr><literal type="number" pos:line="597" pos:column="34">3<pos:position pos:line="597" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="597" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="597" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="598" pos:column="17">INSERT_JUMP<pos:position pos:line="598" pos:column="28"/></name><argument_list pos:line="598" pos:column="28">(<argument><expr><name pos:line="598" pos:column="29">on_failure_jump<pos:position pos:line="598" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="598" pos:column="46">begalt<pos:position pos:line="598" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="598" pos:column="54">b<pos:position pos:line="598" pos:column="55"/></name> <operator pos:line="598" pos:column="56">+<pos:position pos:line="598" pos:column="57"/></operator> <literal type="number" pos:line="598" pos:column="58">6<pos:position pos:line="598" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="598" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="598" pos:column="61"/></expr_stmt>
                <expr_stmt><expr><name pos:line="599" pos:column="17">pending_exact<pos:position pos:line="599" pos:column="30"/></name> <operator pos:line="599" pos:column="31">=<pos:position pos:line="599" pos:column="32"/></operator> <literal type="number" pos:line="599" pos:column="33">0<pos:position pos:line="599" pos:column="34"/></literal></expr>;<pos:position pos:line="599" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><name pos:line="600" pos:column="17">b<pos:position pos:line="600" pos:column="18"/></name> <operator pos:line="600" pos:column="19">+=<pos:position pos:line="600" pos:column="21"/></operator> <literal type="number" pos:line="600" pos:column="22">3<pos:position pos:line="600" pos:column="23"/></literal></expr>;<pos:position pos:line="600" pos:column="24"/></expr_stmt>

                <comment type="block" pos:line="602" pos:column="17">/* The alternative before this one has a jump after it
                 * which gets executed if it gets matched.  Adjust that
                 * jump so it will jump to this alternative's analogous
                 * jump (put in below, which in turn will jump to the next
                 * (if any) alternative's such jump, etc.).  The last such
                 * jump jumps to the correct final destination.  A picture:
                 * _____ _____
                 * |   | |   |
                 * |   v |   v
                 * a | b   | c
                 *
                 * If we are at `b', then fixup_alt_jump right now points to a
                 * three-byte space after `a'.  We'll put in the jump, set
                 * fixup_alt_jump to right after `b', and leave behind three
                 * bytes which we'll fill in when we get to after `c'.  */</comment>

                <if pos:line="618" pos:column="17">if <condition pos:line="618" pos:column="20">(<expr><name pos:line="618" pos:column="21">fixup_alt_jump<pos:position pos:line="618" pos:column="35"/></name></expr>)<pos:position pos:line="618" pos:column="36"/></condition><then pos:line="618" pos:column="36">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="619" pos:column="21">STORE_JUMP<pos:position pos:line="619" pos:column="31"/></name><argument_list pos:line="619" pos:column="31">(<argument><expr><name pos:line="619" pos:column="32">jump_past_alt<pos:position pos:line="619" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="619" pos:column="47">fixup_alt_jump<pos:position pos:line="619" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="619" pos:column="63">b<pos:position pos:line="619" pos:column="64"/></name></expr></argument>)<pos:position pos:line="619" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="619" pos:column="66"/></expr_stmt></block></then></if>

                <comment type="block" pos:line="621" pos:column="17">/* Mark and leave space for a jump after this alternative,
                 * to be filled in later either by next alternative or
                 * when know we're at the end of a series of alternatives.  */</comment>
                <expr_stmt><expr><name pos:line="624" pos:column="17">fixup_alt_jump<pos:position pos:line="624" pos:column="31"/></name> <operator pos:line="624" pos:column="32">=<pos:position pos:line="624" pos:column="33"/></operator> <name pos:line="624" pos:column="34">b<pos:position pos:line="624" pos:column="35"/></name></expr>;<pos:position pos:line="624" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="625" pos:column="17">GET_BUFFER_SPACE<pos:position pos:line="625" pos:column="33"/></name><argument_list pos:line="625" pos:column="33">(<argument><expr><literal type="number" pos:line="625" pos:column="34">3<pos:position pos:line="625" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="625" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="625" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name pos:line="626" pos:column="17">b<pos:position pos:line="626" pos:column="18"/></name> <operator pos:line="626" pos:column="19">+=<pos:position pos:line="626" pos:column="21"/></operator> <literal type="number" pos:line="626" pos:column="22">3<pos:position pos:line="626" pos:column="23"/></literal></expr>;<pos:position pos:line="626" pos:column="24"/></expr_stmt>

                <expr_stmt><expr><name pos:line="628" pos:column="17">laststart<pos:position pos:line="628" pos:column="26"/></name> <operator pos:line="628" pos:column="27">=<pos:position pos:line="628" pos:column="28"/></operator> <literal type="number" pos:line="628" pos:column="29">0<pos:position pos:line="628" pos:column="30"/></literal></expr>;<pos:position pos:line="628" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><name pos:line="629" pos:column="17">begalt<pos:position pos:line="629" pos:column="23"/></name> <operator pos:line="629" pos:column="24">=<pos:position pos:line="629" pos:column="25"/></operator> <name pos:line="629" pos:column="26">b<pos:position pos:line="629" pos:column="27"/></name></expr>;<pos:position pos:line="629" pos:column="28"/></expr_stmt>
                <break pos:line="630" pos:column="17">break;<pos:position pos:line="630" pos:column="23"/></break>


            <case pos:line="633" pos:column="13">case <expr><literal type="char" pos:line="633" pos:column="18">'{'<pos:position pos:line="633" pos:column="21"/></literal></expr>:<pos:position pos:line="633" pos:column="22"/></case>
                <comment type="block" pos:line="634" pos:column="17">/* If \{ is a literal.  */</comment>
                <if pos:line="635" pos:column="17">if <condition pos:line="635" pos:column="20">(<expr><operator pos:line="635" pos:column="21">!<pos:position pos:line="635" pos:column="22"/></operator><operator pos:line="635" pos:column="22">(<pos:position pos:line="635" pos:column="23"/></operator><name pos:line="635" pos:column="23">syntax<pos:position pos:line="635" pos:column="29"/></name> <operator pos:line="635" pos:column="30">&amp;<pos:position pos:line="635" pos:column="35"/></operator> <name pos:line="635" pos:column="32">RE_INTERVALS<pos:position pos:line="635" pos:column="44"/></name><operator pos:line="635" pos:column="44">)<pos:position pos:line="635" pos:column="45"/></operator>
                        <comment type="block" pos:line="636" pos:column="25">/* If we're at `\{' and it's not the open-interval
                         * operator.  */</comment>
                        <operator pos:line="638" pos:column="25">||<pos:position pos:line="638" pos:column="27"/></operator> <operator pos:line="638" pos:column="28">(<pos:position pos:line="638" pos:column="29"/></operator><operator pos:line="638" pos:column="29">(<pos:position pos:line="638" pos:column="30"/></operator><name pos:line="638" pos:column="30">syntax<pos:position pos:line="638" pos:column="36"/></name> <operator pos:line="638" pos:column="37">&amp;<pos:position pos:line="638" pos:column="42"/></operator> <name pos:line="638" pos:column="39">RE_INTERVALS<pos:position pos:line="638" pos:column="51"/></name><operator pos:line="638" pos:column="51">)<pos:position pos:line="638" pos:column="52"/></operator> <operator pos:line="638" pos:column="53">&amp;&amp;<pos:position pos:line="638" pos:column="63"/></operator> <operator pos:line="638" pos:column="56">(<pos:position pos:line="638" pos:column="57"/></operator><name pos:line="638" pos:column="57">syntax<pos:position pos:line="638" pos:column="63"/></name> <operator pos:line="638" pos:column="64">&amp;<pos:position pos:line="638" pos:column="69"/></operator> <name pos:line="638" pos:column="66">RE_NO_BK_BRACES<pos:position pos:line="638" pos:column="81"/></name><operator pos:line="638" pos:column="81">)<pos:position pos:line="638" pos:column="82"/></operator><operator pos:line="638" pos:column="82">)<pos:position pos:line="638" pos:column="83"/></operator>
                        <operator pos:line="639" pos:column="25">||<pos:position pos:line="639" pos:column="27"/></operator> <operator pos:line="639" pos:column="28">(<pos:position pos:line="639" pos:column="29"/></operator><name pos:line="639" pos:column="29">p<pos:position pos:line="639" pos:column="30"/></name> <operator pos:line="639" pos:column="31">-<pos:position pos:line="639" pos:column="32"/></operator> <literal type="number" pos:line="639" pos:column="33">2<pos:position pos:line="639" pos:column="34"/></literal> <operator pos:line="639" pos:column="35">==<pos:position pos:line="639" pos:column="37"/></operator> <name pos:line="639" pos:column="38">pattern<pos:position pos:line="639" pos:column="45"/></name> <operator pos:line="639" pos:column="46">&amp;&amp;<pos:position pos:line="639" pos:column="56"/></operator> <name pos:line="639" pos:column="49">p<pos:position pos:line="639" pos:column="50"/></name> <operator pos:line="639" pos:column="51">==<pos:position pos:line="639" pos:column="53"/></operator> <name pos:line="639" pos:column="54">pend<pos:position pos:line="639" pos:column="58"/></name><operator pos:line="639" pos:column="58">)<pos:position pos:line="639" pos:column="59"/></operator></expr>)<pos:position pos:line="639" pos:column="60"/></condition><then pos:line="639" pos:column="60">
                    <block type="pseudo"><goto pos:line="640" pos:column="21">goto <name pos:line="640" pos:column="26">normal_backslash<pos:position pos:line="640" pos:column="42"/></name>;<pos:position pos:line="640" pos:column="43"/></goto></block></then></if>

<label><name pos:line="642" pos:column="1">handle_interval<pos:position pos:line="642" pos:column="16"/></name>:<pos:position pos:line="642" pos:column="17"/></label> <block pos:line="642" pos:column="18">{
                    <comment type="block" pos:line="643" pos:column="21">/* If got here, then the syntax allows intervals.  */</comment>

                    <comment type="block" pos:line="645" pos:column="21">/* At least (most) this many matches must be made.  */</comment>
                    <decl_stmt><decl><type><name pos:line="646" pos:column="21">int<pos:position pos:line="646" pos:column="24"/></name></type> <name pos:line="646" pos:column="25">lower_bound<pos:position pos:line="646" pos:column="36"/></name> <init pos:line="646" pos:column="37">= <expr><operator pos:line="646" pos:column="39">-<pos:position pos:line="646" pos:column="40"/></operator><literal type="number" pos:line="646" pos:column="40">1<pos:position pos:line="646" pos:column="41"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="646" pos:column="43">upper_bound<pos:position pos:line="646" pos:column="54"/></name> <init pos:line="646" pos:column="55">= <expr><operator pos:line="646" pos:column="57">-<pos:position pos:line="646" pos:column="58"/></operator><literal type="number" pos:line="646" pos:column="58">1<pos:position pos:line="646" pos:column="59"/></literal></expr></init></decl>;<pos:position pos:line="646" pos:column="60"/></decl_stmt>

                    <expr_stmt><expr><name pos:line="648" pos:column="21">beg_interval<pos:position pos:line="648" pos:column="33"/></name> <operator pos:line="648" pos:column="34">=<pos:position pos:line="648" pos:column="35"/></operator> <name pos:line="648" pos:column="36">p<pos:position pos:line="648" pos:column="37"/></name> <operator pos:line="648" pos:column="38">-<pos:position pos:line="648" pos:column="39"/></operator> <literal type="number" pos:line="648" pos:column="40">1<pos:position pos:line="648" pos:column="41"/></literal></expr>;<pos:position pos:line="648" pos:column="42"/></expr_stmt>

                    <if pos:line="650" pos:column="21">if <condition pos:line="650" pos:column="24">(<expr><name pos:line="650" pos:column="25">p<pos:position pos:line="650" pos:column="26"/></name> <operator pos:line="650" pos:column="27">==<pos:position pos:line="650" pos:column="29"/></operator> <name pos:line="650" pos:column="30">pend<pos:position pos:line="650" pos:column="34"/></name></expr>)<pos:position pos:line="650" pos:column="35"/></condition><then pos:line="650" pos:column="35"> <block pos:line="650" pos:column="36">{
                        <if pos:line="651" pos:column="25">if <condition pos:line="651" pos:column="28">(<expr><name pos:line="651" pos:column="29">syntax<pos:position pos:line="651" pos:column="35"/></name> <operator pos:line="651" pos:column="36">&amp;<pos:position pos:line="651" pos:column="41"/></operator> <name pos:line="651" pos:column="38">RE_NO_BK_BRACES<pos:position pos:line="651" pos:column="53"/></name></expr>)<pos:position pos:line="651" pos:column="54"/></condition><then pos:line="651" pos:column="54">
                            <block type="pseudo"><goto pos:line="652" pos:column="29">goto <name pos:line="652" pos:column="34">unfetch_interval<pos:position pos:line="652" pos:column="50"/></name>;<pos:position pos:line="652" pos:column="51"/></goto></block></then>
                        <else pos:line="653" pos:column="25">else
                            <block type="pseudo"><return pos:line="654" pos:column="29">return <expr><name pos:line="654" pos:column="36">REG_EBRACE<pos:position pos:line="654" pos:column="46"/></name></expr>;<pos:position pos:line="654" pos:column="47"/></return></block></else></if>
                    }<pos:position pos:line="655" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><call><name pos:line="656" pos:column="21">GET_UNSIGNED_NUMBER<pos:position pos:line="656" pos:column="40"/></name><argument_list pos:line="656" pos:column="40">(<argument><expr><name pos:line="656" pos:column="41">lower_bound<pos:position pos:line="656" pos:column="52"/></name></expr></argument>)<pos:position pos:line="656" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="656" pos:column="54"/></expr_stmt>

                    <if pos:line="658" pos:column="21">if <condition pos:line="658" pos:column="24">(<expr><name pos:line="658" pos:column="25">c<pos:position pos:line="658" pos:column="26"/></name> <operator pos:line="658" pos:column="27">==<pos:position pos:line="658" pos:column="29"/></operator> <literal type="char" pos:line="658" pos:column="30">','<pos:position pos:line="658" pos:column="33"/></literal></expr>)<pos:position pos:line="658" pos:column="34"/></condition><then pos:line="658" pos:column="34"> <block pos:line="658" pos:column="35">{
                        <expr_stmt><expr><call><name pos:line="659" pos:column="25">GET_UNSIGNED_NUMBER<pos:position pos:line="659" pos:column="44"/></name><argument_list pos:line="659" pos:column="44">(<argument><expr><name pos:line="659" pos:column="45">upper_bound<pos:position pos:line="659" pos:column="56"/></name></expr></argument>)<pos:position pos:line="659" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="659" pos:column="58"/></expr_stmt>
                        <if pos:line="660" pos:column="25">if <condition pos:line="660" pos:column="28">(<expr><name pos:line="660" pos:column="29">upper_bound<pos:position pos:line="660" pos:column="40"/></name> <operator pos:line="660" pos:column="41">&lt;<pos:position pos:line="660" pos:column="45"/></operator> <literal type="number" pos:line="660" pos:column="43">0<pos:position pos:line="660" pos:column="44"/></literal></expr>)<pos:position pos:line="660" pos:column="45"/></condition><then pos:line="660" pos:column="45">
                            <block type="pseudo"><expr_stmt><expr><name pos:line="661" pos:column="29">upper_bound<pos:position pos:line="661" pos:column="40"/></name> <operator pos:line="661" pos:column="41">=<pos:position pos:line="661" pos:column="42"/></operator> <name pos:line="661" pos:column="43">RE_DUP_MAX<pos:position pos:line="661" pos:column="53"/></name></expr>;<pos:position pos:line="661" pos:column="54"/></expr_stmt></block></then></if>
                    }<pos:position pos:line="662" pos:column="22"/></block></then> <else pos:line="662" pos:column="23">else
                        <comment type="block" pos:line="663" pos:column="25">/* Interval such as `{1}' =&gt; match exactly once. */</comment>
                        <block type="pseudo"><expr_stmt><expr><name pos:line="664" pos:column="25">upper_bound<pos:position pos:line="664" pos:column="36"/></name> <operator pos:line="664" pos:column="37">=<pos:position pos:line="664" pos:column="38"/></operator> <name pos:line="664" pos:column="39">lower_bound<pos:position pos:line="664" pos:column="50"/></name></expr>;<pos:position pos:line="664" pos:column="51"/></expr_stmt></block></else></if>

                    <if pos:line="666" pos:column="21">if <condition pos:line="666" pos:column="24">(<expr><name><name pos:line="666" pos:column="25">lower_bound<pos:position pos:line="666" pos:column="36"/></name> <argument_list type="generic" pos:line="666" pos:column="37">&lt; <argument><expr><literal type="number" pos:line="666" pos:column="39">0<pos:position pos:line="666" pos:column="40"/></literal> <operator pos:line="666" pos:column="41">||<pos:position pos:line="666" pos:column="43"/></operator> <name pos:line="666" pos:column="44">upper_bound<pos:position pos:line="666" pos:column="55"/></name></expr></argument> &gt;<pos:position pos:line="666" pos:column="60"/></argument_list></name> <name pos:line="666" pos:column="58">RE_DUP_MAX<pos:position pos:line="666" pos:column="68"/></name>
                            <operator pos:line="667" pos:column="29">||<pos:position pos:line="667" pos:column="31"/></operator> <name pos:line="667" pos:column="32">lower_bound<pos:position pos:line="667" pos:column="43"/></name> <operator pos:line="667" pos:column="44">&gt;<pos:position pos:line="667" pos:column="48"/></operator> <name pos:line="667" pos:column="46">upper_bound<pos:position pos:line="667" pos:column="57"/></name></expr>)<pos:position pos:line="667" pos:column="58"/></condition><then pos:line="667" pos:column="58"> <block pos:line="667" pos:column="59">{
                        <if pos:line="668" pos:column="25">if <condition pos:line="668" pos:column="28">(<expr><name pos:line="668" pos:column="29">syntax<pos:position pos:line="668" pos:column="35"/></name> <operator pos:line="668" pos:column="36">&amp;<pos:position pos:line="668" pos:column="41"/></operator> <name pos:line="668" pos:column="38">RE_NO_BK_BRACES<pos:position pos:line="668" pos:column="53"/></name></expr>)<pos:position pos:line="668" pos:column="54"/></condition><then pos:line="668" pos:column="54">
                            <block type="pseudo"><goto pos:line="669" pos:column="29">goto <name pos:line="669" pos:column="34">unfetch_interval<pos:position pos:line="669" pos:column="50"/></name>;<pos:position pos:line="669" pos:column="51"/></goto></block></then>
                        <else pos:line="670" pos:column="25">else
                            <block type="pseudo"><return pos:line="671" pos:column="29">return <expr><name pos:line="671" pos:column="36">REG_BADBR<pos:position pos:line="671" pos:column="45"/></name></expr>;<pos:position pos:line="671" pos:column="46"/></return></block></else></if>
                    }<pos:position pos:line="672" pos:column="22"/></block></then></if>
                    <if pos:line="673" pos:column="21">if <condition pos:line="673" pos:column="24">(<expr><operator pos:line="673" pos:column="25">!<pos:position pos:line="673" pos:column="26"/></operator><operator pos:line="673" pos:column="26">(<pos:position pos:line="673" pos:column="27"/></operator><name pos:line="673" pos:column="27">syntax<pos:position pos:line="673" pos:column="33"/></name> <operator pos:line="673" pos:column="34">&amp;<pos:position pos:line="673" pos:column="39"/></operator> <name pos:line="673" pos:column="36">RE_NO_BK_BRACES<pos:position pos:line="673" pos:column="51"/></name><operator pos:line="673" pos:column="51">)<pos:position pos:line="673" pos:column="52"/></operator></expr>)<pos:position pos:line="673" pos:column="53"/></condition><then pos:line="673" pos:column="53"> <block pos:line="673" pos:column="54">{
                        <if pos:line="674" pos:column="25">if <condition pos:line="674" pos:column="28">(<expr><name pos:line="674" pos:column="29">c<pos:position pos:line="674" pos:column="30"/></name> <operator pos:line="674" pos:column="31">!=<pos:position pos:line="674" pos:column="33"/></operator> <literal type="char" pos:line="674" pos:column="34">'\\'<pos:position pos:line="674" pos:column="38"/></literal></expr>)<pos:position pos:line="674" pos:column="39"/></condition><then pos:line="674" pos:column="39">
                            <block type="pseudo"><return pos:line="675" pos:column="29">return <expr><name pos:line="675" pos:column="36">REG_EBRACE<pos:position pos:line="675" pos:column="46"/></name></expr>;<pos:position pos:line="675" pos:column="47"/></return></block></then></if>

                        <expr_stmt><expr><call><name pos:line="677" pos:column="25">PATFETCH<pos:position pos:line="677" pos:column="33"/></name><argument_list pos:line="677" pos:column="33">(<argument><expr><name pos:line="677" pos:column="34">c<pos:position pos:line="677" pos:column="35"/></name></expr></argument>)<pos:position pos:line="677" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="677" pos:column="37"/></expr_stmt>
                    }<pos:position pos:line="678" pos:column="22"/></block></then></if>
                    <if pos:line="679" pos:column="21">if <condition pos:line="679" pos:column="24">(<expr><name pos:line="679" pos:column="25">c<pos:position pos:line="679" pos:column="26"/></name> <operator pos:line="679" pos:column="27">!=<pos:position pos:line="679" pos:column="29"/></operator> <literal type="char" pos:line="679" pos:column="30">'}'<pos:position pos:line="679" pos:column="33"/></literal></expr>)<pos:position pos:line="679" pos:column="34"/></condition><then pos:line="679" pos:column="34"> <block pos:line="679" pos:column="35">{
                        <if pos:line="680" pos:column="25">if <condition pos:line="680" pos:column="28">(<expr><name pos:line="680" pos:column="29">syntax<pos:position pos:line="680" pos:column="35"/></name> <operator pos:line="680" pos:column="36">&amp;<pos:position pos:line="680" pos:column="41"/></operator> <name pos:line="680" pos:column="38">RE_NO_BK_BRACES<pos:position pos:line="680" pos:column="53"/></name></expr>)<pos:position pos:line="680" pos:column="54"/></condition><then pos:line="680" pos:column="54">
                            <block type="pseudo"><goto pos:line="681" pos:column="29">goto <name pos:line="681" pos:column="34">unfetch_interval<pos:position pos:line="681" pos:column="50"/></name>;<pos:position pos:line="681" pos:column="51"/></goto></block></then>
                        <else pos:line="682" pos:column="25">else
                            <block type="pseudo"><return pos:line="683" pos:column="29">return <expr><name pos:line="683" pos:column="36">REG_BADBR<pos:position pos:line="683" pos:column="45"/></name></expr>;<pos:position pos:line="683" pos:column="46"/></return></block></else></if>
                    }<pos:position pos:line="684" pos:column="22"/></block></then></if>
                    <comment type="block" pos:line="685" pos:column="21">/* We just parsed a valid interval.  */</comment>

                    <comment type="block" pos:line="687" pos:column="21">/* If it's invalid to have no preceding re.  */</comment>
                    <if pos:line="688" pos:column="21">if <condition pos:line="688" pos:column="24">(<expr><operator pos:line="688" pos:column="25">!<pos:position pos:line="688" pos:column="26"/></operator><name pos:line="688" pos:column="26">laststart<pos:position pos:line="688" pos:column="35"/></name></expr>)<pos:position pos:line="688" pos:column="36"/></condition><then pos:line="688" pos:column="36"> <block pos:line="688" pos:column="37">{
                        <if pos:line="689" pos:column="25">if <condition pos:line="689" pos:column="28">(<expr><name pos:line="689" pos:column="29">syntax<pos:position pos:line="689" pos:column="35"/></name> <operator pos:line="689" pos:column="36">&amp;<pos:position pos:line="689" pos:column="41"/></operator> <name pos:line="689" pos:column="38">RE_CONTEXT_INVALID_OPS<pos:position pos:line="689" pos:column="60"/></name></expr>)<pos:position pos:line="689" pos:column="61"/></condition><then pos:line="689" pos:column="61">
                            <block type="pseudo"><return pos:line="690" pos:column="29">return <expr><name pos:line="690" pos:column="36">REG_BADRPT<pos:position pos:line="690" pos:column="46"/></name></expr>;<pos:position pos:line="690" pos:column="47"/></return></block></then>
                        <elseif pos:line="691" pos:column="25">else <if pos:line="691" pos:column="30">if <condition pos:line="691" pos:column="33">(<expr><name pos:line="691" pos:column="34">syntax<pos:position pos:line="691" pos:column="40"/></name> <operator pos:line="691" pos:column="41">&amp;<pos:position pos:line="691" pos:column="46"/></operator> <name pos:line="691" pos:column="43">RE_CONTEXT_INDEP_OPS<pos:position pos:line="691" pos:column="63"/></name></expr>)<pos:position pos:line="691" pos:column="64"/></condition><then pos:line="691" pos:column="64">
                            <block type="pseudo"><expr_stmt><expr><name pos:line="692" pos:column="29">laststart<pos:position pos:line="692" pos:column="38"/></name> <operator pos:line="692" pos:column="39">=<pos:position pos:line="692" pos:column="40"/></operator> <name pos:line="692" pos:column="41">b<pos:position pos:line="692" pos:column="42"/></name></expr>;<pos:position pos:line="692" pos:column="43"/></expr_stmt></block></then></if></elseif>
                        <else pos:line="693" pos:column="25">else
                            <block type="pseudo"><goto pos:line="694" pos:column="29">goto <name pos:line="694" pos:column="34">unfetch_interval<pos:position pos:line="694" pos:column="50"/></name>;<pos:position pos:line="694" pos:column="51"/></goto></block></else></if>
                    }<pos:position pos:line="695" pos:column="22"/></block></then></if>
                    <comment type="block" pos:line="696" pos:column="21">/* If the upper bound is zero, don't want to succeed at
                     * all; jump from `laststart' to `b + 3', which will be
                     * the end of the buffer after we insert the jump.  */</comment>
                    <if pos:line="699" pos:column="21">if <condition pos:line="699" pos:column="24">(<expr><name pos:line="699" pos:column="25">upper_bound<pos:position pos:line="699" pos:column="36"/></name> <operator pos:line="699" pos:column="37">==<pos:position pos:line="699" pos:column="39"/></operator> <literal type="number" pos:line="699" pos:column="40">0<pos:position pos:line="699" pos:column="41"/></literal></expr>)<pos:position pos:line="699" pos:column="42"/></condition><then pos:line="699" pos:column="42"> <block pos:line="699" pos:column="43">{
                        <expr_stmt><expr><call><name pos:line="700" pos:column="25">GET_BUFFER_SPACE<pos:position pos:line="700" pos:column="41"/></name><argument_list pos:line="700" pos:column="41">(<argument><expr><literal type="number" pos:line="700" pos:column="42">3<pos:position pos:line="700" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="700" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="700" pos:column="45"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="701" pos:column="25">INSERT_JUMP<pos:position pos:line="701" pos:column="36"/></name><argument_list pos:line="701" pos:column="36">(<argument><expr><name pos:line="701" pos:column="37">jump<pos:position pos:line="701" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="701" pos:column="43">laststart<pos:position pos:line="701" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="701" pos:column="54">b<pos:position pos:line="701" pos:column="55"/></name> <operator pos:line="701" pos:column="56">+<pos:position pos:line="701" pos:column="57"/></operator> <literal type="number" pos:line="701" pos:column="58">3<pos:position pos:line="701" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="701" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="701" pos:column="61"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="702" pos:column="25">b<pos:position pos:line="702" pos:column="26"/></name> <operator pos:line="702" pos:column="27">+=<pos:position pos:line="702" pos:column="29"/></operator> <literal type="number" pos:line="702" pos:column="30">3<pos:position pos:line="702" pos:column="31"/></literal></expr>;<pos:position pos:line="702" pos:column="32"/></expr_stmt>
                    }<pos:position pos:line="703" pos:column="22"/></block></then>
                    <comment type="block" pos:line="704" pos:column="21">/* Otherwise, we have a nontrivial interval.  When
                     * we're all done, the pattern will look like:
                     * set_number_at &lt;jump count&gt; &lt;upper bound&gt;
                     * set_number_at &lt;succeed_n count&gt; &lt;lower bound&gt;
                     * succeed_n &lt;after jump addr&gt; &lt;succed_n count&gt;
                     * &lt;body of loop&gt;
                     * jump_n &lt;succeed_n addr&gt; &lt;jump count&gt;
                     * (The upper bound and `jump_n' are omitted if
                     * `upper_bound' is 1, though.)  */</comment>
                    <else pos:line="713" pos:column="21">else <block pos:line="713" pos:column="26">{	<comment type="block" pos:line="713" pos:column="33">/* If the upper bound is &gt; 1, we need to insert
				 * more at the end of the loop.  */</comment>
                        <decl_stmt><decl><type><name pos:line="715" pos:column="25">unsigned<pos:position pos:line="715" pos:column="33"/></name></type> <name pos:line="715" pos:column="34">nbytes<pos:position pos:line="715" pos:column="40"/></name> <init pos:line="715" pos:column="41">= <expr><literal type="number" pos:line="715" pos:column="43">10<pos:position pos:line="715" pos:column="45"/></literal> <operator pos:line="715" pos:column="46">+<pos:position pos:line="715" pos:column="47"/></operator> <operator pos:line="715" pos:column="48">(<pos:position pos:line="715" pos:column="49"/></operator><name pos:line="715" pos:column="49">upper_bound<pos:position pos:line="715" pos:column="60"/></name> <operator pos:line="715" pos:column="61">&gt;<pos:position pos:line="715" pos:column="65"/></operator> <literal type="number" pos:line="715" pos:column="63">1<pos:position pos:line="715" pos:column="64"/></literal><operator pos:line="715" pos:column="64">)<pos:position pos:line="715" pos:column="65"/></operator> <operator pos:line="715" pos:column="66">*<pos:position pos:line="715" pos:column="67"/></operator> <literal type="number" pos:line="715" pos:column="68">10<pos:position pos:line="715" pos:column="70"/></literal></expr></init></decl>;<pos:position pos:line="715" pos:column="71"/></decl_stmt>

                        <expr_stmt><expr><call><name pos:line="717" pos:column="25">GET_BUFFER_SPACE<pos:position pos:line="717" pos:column="41"/></name><argument_list pos:line="717" pos:column="41">(<argument><expr><name pos:line="717" pos:column="42">nbytes<pos:position pos:line="717" pos:column="48"/></name></expr></argument>)<pos:position pos:line="717" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="717" pos:column="50"/></expr_stmt>

                        <comment type="block" pos:line="719" pos:column="25">/* Initialize lower bound of the `succeed_n', even
                         * though it will be set during matching by its
                         * attendant `set_number_at' (inserted next),
                         * because `re_compile_fastmap' needs to know.
                         * Jump to the `jump_n' we might insert below.  */</comment>
                        <expr_stmt><expr><call><name pos:line="724" pos:column="25">INSERT_JUMP2<pos:position pos:line="724" pos:column="37"/></name><argument_list pos:line="724" pos:column="37">(<argument><expr><name pos:line="724" pos:column="38">succeed_n<pos:position pos:line="724" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="724" pos:column="49">laststart<pos:position pos:line="724" pos:column="58"/></name></expr></argument>,
                                     <argument><expr><name pos:line="725" pos:column="38">b<pos:position pos:line="725" pos:column="39"/></name> <operator pos:line="725" pos:column="40">+<pos:position pos:line="725" pos:column="41"/></operator> <literal type="number" pos:line="725" pos:column="42">5<pos:position pos:line="725" pos:column="43"/></literal> <operator pos:line="725" pos:column="44">+<pos:position pos:line="725" pos:column="45"/></operator> <operator pos:line="725" pos:column="46">(<pos:position pos:line="725" pos:column="47"/></operator><name pos:line="725" pos:column="47">upper_bound<pos:position pos:line="725" pos:column="58"/></name> <operator pos:line="725" pos:column="59">&gt;<pos:position pos:line="725" pos:column="63"/></operator> <literal type="number" pos:line="725" pos:column="61">1<pos:position pos:line="725" pos:column="62"/></literal><operator pos:line="725" pos:column="62">)<pos:position pos:line="725" pos:column="63"/></operator> <operator pos:line="725" pos:column="64">*<pos:position pos:line="725" pos:column="65"/></operator> <literal type="number" pos:line="725" pos:column="66">5<pos:position pos:line="725" pos:column="67"/></literal></expr></argument>,
                                     <argument><expr><name pos:line="726" pos:column="38">lower_bound<pos:position pos:line="726" pos:column="49"/></name></expr></argument>)<pos:position pos:line="726" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="726" pos:column="51"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="727" pos:column="25">b<pos:position pos:line="727" pos:column="26"/></name> <operator pos:line="727" pos:column="27">+=<pos:position pos:line="727" pos:column="29"/></operator> <literal type="number" pos:line="727" pos:column="30">5<pos:position pos:line="727" pos:column="31"/></literal></expr>;<pos:position pos:line="727" pos:column="32"/></expr_stmt>

                        <comment type="block" pos:line="729" pos:column="25">/* Code to initialize the lower bound.  Insert
                         * before the `succeed_n'.  The `5' is the last two
                         * bytes of this `set_number_at', plus 3 bytes of
                         * the following `succeed_n'.  */</comment>
                        <expr_stmt><expr><call><name pos:line="733" pos:column="25">insert_op2<pos:position pos:line="733" pos:column="35"/></name><argument_list pos:line="733" pos:column="35">(<argument><expr><name pos:line="733" pos:column="36">set_number_at<pos:position pos:line="733" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="733" pos:column="51">laststart<pos:position pos:line="733" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="733" pos:column="62">5<pos:position pos:line="733" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="733" pos:column="65">lower_bound<pos:position pos:line="733" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="733" pos:column="78">b<pos:position pos:line="733" pos:column="79"/></name></expr></argument>)<pos:position pos:line="733" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="733" pos:column="81"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="734" pos:column="25">b<pos:position pos:line="734" pos:column="26"/></name> <operator pos:line="734" pos:column="27">+=<pos:position pos:line="734" pos:column="29"/></operator> <literal type="number" pos:line="734" pos:column="30">5<pos:position pos:line="734" pos:column="31"/></literal></expr>;<pos:position pos:line="734" pos:column="32"/></expr_stmt>

                        <if pos:line="736" pos:column="25">if <condition pos:line="736" pos:column="28">(<expr><name pos:line="736" pos:column="29">upper_bound<pos:position pos:line="736" pos:column="40"/></name> <operator pos:line="736" pos:column="41">&gt;<pos:position pos:line="736" pos:column="45"/></operator> <literal type="number" pos:line="736" pos:column="43">1<pos:position pos:line="736" pos:column="44"/></literal></expr>)<pos:position pos:line="736" pos:column="45"/></condition><then pos:line="736" pos:column="45"> <block pos:line="736" pos:column="46">{	<comment type="block" pos:line="736" pos:column="49">/* More than one repetition is allowed, so
						 * append a backward jump to the `succeed_n'
						 * that starts this interval.
						 *
						 * When we've reached this during matching,
						 * we'll have matched the interval once, so
						 * jump back only `upper_bound - 1' times.  */</comment>
                            <expr_stmt><expr><call><name pos:line="743" pos:column="29">STORE_JUMP2<pos:position pos:line="743" pos:column="40"/></name><argument_list pos:line="743" pos:column="40">(<argument><expr><name pos:line="743" pos:column="41">jump_n<pos:position pos:line="743" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="743" pos:column="49">b<pos:position pos:line="743" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="743" pos:column="52">laststart<pos:position pos:line="743" pos:column="61"/></name> <operator pos:line="743" pos:column="62">+<pos:position pos:line="743" pos:column="63"/></operator> <literal type="number" pos:line="743" pos:column="64">5<pos:position pos:line="743" pos:column="65"/></literal></expr></argument>,
                                        <argument><expr><name pos:line="744" pos:column="41">upper_bound<pos:position pos:line="744" pos:column="52"/></name> <operator pos:line="744" pos:column="53">-<pos:position pos:line="744" pos:column="54"/></operator> <literal type="number" pos:line="744" pos:column="55">1<pos:position pos:line="744" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="744" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="744" pos:column="58"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="745" pos:column="29">b<pos:position pos:line="745" pos:column="30"/></name> <operator pos:line="745" pos:column="31">+=<pos:position pos:line="745" pos:column="33"/></operator> <literal type="number" pos:line="745" pos:column="34">5<pos:position pos:line="745" pos:column="35"/></literal></expr>;<pos:position pos:line="745" pos:column="36"/></expr_stmt>

                            <comment type="block" pos:line="747" pos:column="29">/* The location we want to set is the second
                             * parameter of the `jump_n'; that is `b-2' as
                             * an absolute address.  `laststart' will be
                             * the `set_number_at' we're about to insert;
                             * `laststart+3' the number to set, the source
                             * for the relative address.  But we are
                             * inserting into the middle of the pattern --
                             * so everything is getting moved up by 5.
                             * Conclusion: (b - 2) - (laststart + 3) + 5,
                             * i.e., b - laststart.
                             *
                             * We insert this at the beginning of the loop
                             * so that if we fail during matching, we'll
                             * reinitialize the bounds.  */</comment>
                            <expr_stmt><expr><call><name pos:line="761" pos:column="29">insert_op2<pos:position pos:line="761" pos:column="39"/></name><argument_list pos:line="761" pos:column="39">(<argument><expr><name pos:line="761" pos:column="40">set_number_at<pos:position pos:line="761" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="761" pos:column="55">laststart<pos:position pos:line="761" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="761" pos:column="66">b<pos:position pos:line="761" pos:column="67"/></name> <operator pos:line="761" pos:column="68">-<pos:position pos:line="761" pos:column="69"/></operator> <name pos:line="761" pos:column="70">laststart<pos:position pos:line="761" pos:column="79"/></name></expr></argument>,
                                       <argument><expr><name pos:line="762" pos:column="40">upper_bound<pos:position pos:line="762" pos:column="51"/></name> <operator pos:line="762" pos:column="52">-<pos:position pos:line="762" pos:column="53"/></operator> <literal type="number" pos:line="762" pos:column="54">1<pos:position pos:line="762" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="762" pos:column="57">b<pos:position pos:line="762" pos:column="58"/></name></expr></argument>)<pos:position pos:line="762" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="762" pos:column="60"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="763" pos:column="29">b<pos:position pos:line="763" pos:column="30"/></name> <operator pos:line="763" pos:column="31">+=<pos:position pos:line="763" pos:column="33"/></operator> <literal type="number" pos:line="763" pos:column="34">5<pos:position pos:line="763" pos:column="35"/></literal></expr>;<pos:position pos:line="763" pos:column="36"/></expr_stmt>
                        }<pos:position pos:line="764" pos:column="26"/></block></then></if>
                    }<pos:position pos:line="765" pos:column="22"/></block></else></if>
                    <expr_stmt><expr><name pos:line="766" pos:column="21">pending_exact<pos:position pos:line="766" pos:column="34"/></name> <operator pos:line="766" pos:column="35">=<pos:position pos:line="766" pos:column="36"/></operator> <literal type="number" pos:line="766" pos:column="37">0<pos:position pos:line="766" pos:column="38"/></literal></expr>;<pos:position pos:line="766" pos:column="39"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="767" pos:column="21">beg_interval<pos:position pos:line="767" pos:column="33"/></name> <operator pos:line="767" pos:column="34">=<pos:position pos:line="767" pos:column="35"/></operator> <name pos:line="767" pos:column="36">NULL<pos:position pos:line="767" pos:column="40"/></name></expr>;<pos:position pos:line="767" pos:column="41"/></expr_stmt>
                }<pos:position pos:line="768" pos:column="18"/></block>
                <break pos:line="769" pos:column="17">break;<pos:position pos:line="769" pos:column="23"/></break>

<label><name pos:line="771" pos:column="1">unfetch_interval<pos:position pos:line="771" pos:column="17"/></name>:<pos:position pos:line="771" pos:column="18"/></label>
                <comment type="block" pos:line="772" pos:column="17">/* If an invalid interval, match the characters as literals.  */</comment>
                <expr_stmt><expr><call><name pos:line="773" pos:column="17">assert<pos:position pos:line="773" pos:column="23"/></name><argument_list pos:line="773" pos:column="23">(<argument><expr><name pos:line="773" pos:column="24">beg_interval<pos:position pos:line="773" pos:column="36"/></name></expr></argument>)<pos:position pos:line="773" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="773" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name pos:line="774" pos:column="17">p<pos:position pos:line="774" pos:column="18"/></name> <operator pos:line="774" pos:column="19">=<pos:position pos:line="774" pos:column="20"/></operator> <name pos:line="774" pos:column="21">beg_interval<pos:position pos:line="774" pos:column="33"/></name></expr>;<pos:position pos:line="774" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name pos:line="775" pos:column="17">beg_interval<pos:position pos:line="775" pos:column="29"/></name> <operator pos:line="775" pos:column="30">=<pos:position pos:line="775" pos:column="31"/></operator> <name pos:line="775" pos:column="32">NULL<pos:position pos:line="775" pos:column="36"/></name></expr>;<pos:position pos:line="775" pos:column="37"/></expr_stmt>

                <comment type="block" pos:line="777" pos:column="17">/* normal_char and normal_backslash need `c'.  */</comment>
                <expr_stmt><expr><call><name pos:line="778" pos:column="17">PATFETCH<pos:position pos:line="778" pos:column="25"/></name><argument_list pos:line="778" pos:column="25">(<argument><expr><name pos:line="778" pos:column="26">c<pos:position pos:line="778" pos:column="27"/></name></expr></argument>)<pos:position pos:line="778" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="778" pos:column="29"/></expr_stmt>

                <if pos:line="780" pos:column="17">if <condition pos:line="780" pos:column="20">(<expr><operator pos:line="780" pos:column="21">!<pos:position pos:line="780" pos:column="22"/></operator><operator pos:line="780" pos:column="22">(<pos:position pos:line="780" pos:column="23"/></operator><name pos:line="780" pos:column="23">syntax<pos:position pos:line="780" pos:column="29"/></name> <operator pos:line="780" pos:column="30">&amp;<pos:position pos:line="780" pos:column="35"/></operator> <name pos:line="780" pos:column="32">RE_NO_BK_BRACES<pos:position pos:line="780" pos:column="47"/></name><operator pos:line="780" pos:column="47">)<pos:position pos:line="780" pos:column="48"/></operator></expr>)<pos:position pos:line="780" pos:column="49"/></condition><then pos:line="780" pos:column="49"> <block pos:line="780" pos:column="50">{
                    <if pos:line="781" pos:column="21">if <condition pos:line="781" pos:column="24">(<expr><name pos:line="781" pos:column="25">p<pos:position pos:line="781" pos:column="26"/></name> <operator pos:line="781" pos:column="27">&gt;<pos:position pos:line="781" pos:column="31"/></operator> <name pos:line="781" pos:column="29">pattern<pos:position pos:line="781" pos:column="36"/></name> <operator pos:line="781" pos:column="37">&amp;&amp;<pos:position pos:line="781" pos:column="47"/></operator> <name><name pos:line="781" pos:column="40">p<pos:position pos:line="781" pos:column="41"/></name><index pos:line="781" pos:column="41">[<expr><operator pos:line="781" pos:column="42">-<pos:position pos:line="781" pos:column="43"/></operator><literal type="number" pos:line="781" pos:column="43">1<pos:position pos:line="781" pos:column="44"/></literal></expr>]<pos:position pos:line="781" pos:column="45"/></index></name> <operator pos:line="781" pos:column="46">==<pos:position pos:line="781" pos:column="48"/></operator> <literal type="char" pos:line="781" pos:column="49">'\\'<pos:position pos:line="781" pos:column="53"/></literal></expr>)<pos:position pos:line="781" pos:column="54"/></condition><then pos:line="781" pos:column="54">
                        <block type="pseudo"><goto pos:line="782" pos:column="25">goto <name pos:line="782" pos:column="30">normal_backslash<pos:position pos:line="782" pos:column="46"/></name>;<pos:position pos:line="782" pos:column="47"/></goto></block></then></if>
                }<pos:position pos:line="783" pos:column="18"/></block></then></if>
                <goto pos:line="784" pos:column="17">goto <name pos:line="784" pos:column="22">normal_char<pos:position pos:line="784" pos:column="33"/></name>;<pos:position pos:line="784" pos:column="34"/></goto>


            <case pos:line="787" pos:column="13">case <expr><literal type="char" pos:line="787" pos:column="18">'w'<pos:position pos:line="787" pos:column="21"/></literal></expr>:<pos:position pos:line="787" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="788" pos:column="17">laststart<pos:position pos:line="788" pos:column="26"/></name> <operator pos:line="788" pos:column="27">=<pos:position pos:line="788" pos:column="28"/></operator> <name pos:line="788" pos:column="29">b<pos:position pos:line="788" pos:column="30"/></name></expr>;<pos:position pos:line="788" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="789" pos:column="17">BUF_PUSH<pos:position pos:line="789" pos:column="25"/></name><argument_list pos:line="789" pos:column="25">(<argument><expr><name pos:line="789" pos:column="26">wordchar<pos:position pos:line="789" pos:column="34"/></name></expr></argument>)<pos:position pos:line="789" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="789" pos:column="36"/></expr_stmt>
                <break pos:line="790" pos:column="17">break;<pos:position pos:line="790" pos:column="23"/></break>


            <case pos:line="793" pos:column="13">case <expr><literal type="char" pos:line="793" pos:column="18">'W'<pos:position pos:line="793" pos:column="21"/></literal></expr>:<pos:position pos:line="793" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="794" pos:column="17">laststart<pos:position pos:line="794" pos:column="26"/></name> <operator pos:line="794" pos:column="27">=<pos:position pos:line="794" pos:column="28"/></operator> <name pos:line="794" pos:column="29">b<pos:position pos:line="794" pos:column="30"/></name></expr>;<pos:position pos:line="794" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="795" pos:column="17">BUF_PUSH<pos:position pos:line="795" pos:column="25"/></name><argument_list pos:line="795" pos:column="25">(<argument><expr><name pos:line="795" pos:column="26">notwordchar<pos:position pos:line="795" pos:column="37"/></name></expr></argument>)<pos:position pos:line="795" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="795" pos:column="39"/></expr_stmt>
                <break pos:line="796" pos:column="17">break;<pos:position pos:line="796" pos:column="23"/></break>


            <case pos:line="799" pos:column="13">case <expr><literal type="char" pos:line="799" pos:column="18">'&lt;'<pos:position pos:line="799" pos:column="24"/></literal></expr>:<pos:position pos:line="799" pos:column="22"/></case>
                <expr_stmt><expr><call><name pos:line="800" pos:column="17">BUF_PUSH<pos:position pos:line="800" pos:column="25"/></name><argument_list pos:line="800" pos:column="25">(<argument><expr><name pos:line="800" pos:column="26">wordbeg<pos:position pos:line="800" pos:column="33"/></name></expr></argument>)<pos:position pos:line="800" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="800" pos:column="35"/></expr_stmt>
                <break pos:line="801" pos:column="17">break;<pos:position pos:line="801" pos:column="23"/></break>

            <case pos:line="803" pos:column="13">case <expr><literal type="char" pos:line="803" pos:column="18">'&gt;'<pos:position pos:line="803" pos:column="24"/></literal></expr>:<pos:position pos:line="803" pos:column="22"/></case>
                <expr_stmt><expr><call><name pos:line="804" pos:column="17">BUF_PUSH<pos:position pos:line="804" pos:column="25"/></name><argument_list pos:line="804" pos:column="25">(<argument><expr><name pos:line="804" pos:column="26">wordend<pos:position pos:line="804" pos:column="33"/></name></expr></argument>)<pos:position pos:line="804" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="804" pos:column="35"/></expr_stmt>
                <break pos:line="805" pos:column="17">break;<pos:position pos:line="805" pos:column="23"/></break>

            <case pos:line="807" pos:column="13">case <expr><literal type="char" pos:line="807" pos:column="18">'b'<pos:position pos:line="807" pos:column="21"/></literal></expr>:<pos:position pos:line="807" pos:column="22"/></case>
                <expr_stmt><expr><call><name pos:line="808" pos:column="17">BUF_PUSH<pos:position pos:line="808" pos:column="25"/></name><argument_list pos:line="808" pos:column="25">(<argument><expr><name pos:line="808" pos:column="26">wordbound<pos:position pos:line="808" pos:column="35"/></name></expr></argument>)<pos:position pos:line="808" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="808" pos:column="37"/></expr_stmt>
                <break pos:line="809" pos:column="17">break;<pos:position pos:line="809" pos:column="23"/></break>

            <case pos:line="811" pos:column="13">case <expr><literal type="char" pos:line="811" pos:column="18">'B'<pos:position pos:line="811" pos:column="21"/></literal></expr>:<pos:position pos:line="811" pos:column="22"/></case>
                <expr_stmt><expr><call><name pos:line="812" pos:column="17">BUF_PUSH<pos:position pos:line="812" pos:column="25"/></name><argument_list pos:line="812" pos:column="25">(<argument><expr><name pos:line="812" pos:column="26">notwordbound<pos:position pos:line="812" pos:column="38"/></name></expr></argument>)<pos:position pos:line="812" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="812" pos:column="40"/></expr_stmt>
                <break pos:line="813" pos:column="17">break;<pos:position pos:line="813" pos:column="23"/></break>

            <case pos:line="815" pos:column="13">case <expr><literal type="char" pos:line="815" pos:column="18">'`'<pos:position pos:line="815" pos:column="21"/></literal></expr>:<pos:position pos:line="815" pos:column="22"/></case>
                <expr_stmt><expr><call><name pos:line="816" pos:column="17">BUF_PUSH<pos:position pos:line="816" pos:column="25"/></name><argument_list pos:line="816" pos:column="25">(<argument><expr><name pos:line="816" pos:column="26">begbuf<pos:position pos:line="816" pos:column="32"/></name></expr></argument>)<pos:position pos:line="816" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="816" pos:column="34"/></expr_stmt>
                <break pos:line="817" pos:column="17">break;<pos:position pos:line="817" pos:column="23"/></break>

            <case pos:line="819" pos:column="13">case <expr><literal type="char" pos:line="819" pos:column="18">'\''<pos:position pos:line="819" pos:column="22"/></literal></expr>:<pos:position pos:line="819" pos:column="23"/></case>
                <expr_stmt><expr><call><name pos:line="820" pos:column="17">BUF_PUSH<pos:position pos:line="820" pos:column="25"/></name><argument_list pos:line="820" pos:column="25">(<argument><expr><name pos:line="820" pos:column="26">endbuf<pos:position pos:line="820" pos:column="32"/></name></expr></argument>)<pos:position pos:line="820" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="820" pos:column="34"/></expr_stmt>
                <break pos:line="821" pos:column="17">break;<pos:position pos:line="821" pos:column="23"/></break>

            <case pos:line="823" pos:column="13">case <expr><literal type="char" pos:line="823" pos:column="18">'1'<pos:position pos:line="823" pos:column="21"/></literal></expr>:<pos:position pos:line="823" pos:column="22"/></case>
            <case pos:line="824" pos:column="13">case <expr><literal type="char" pos:line="824" pos:column="18">'2'<pos:position pos:line="824" pos:column="21"/></literal></expr>:<pos:position pos:line="824" pos:column="22"/></case>
            <case pos:line="825" pos:column="13">case <expr><literal type="char" pos:line="825" pos:column="18">'3'<pos:position pos:line="825" pos:column="21"/></literal></expr>:<pos:position pos:line="825" pos:column="22"/></case>
            <case pos:line="826" pos:column="13">case <expr><literal type="char" pos:line="826" pos:column="18">'4'<pos:position pos:line="826" pos:column="21"/></literal></expr>:<pos:position pos:line="826" pos:column="22"/></case>
            <case pos:line="827" pos:column="13">case <expr><literal type="char" pos:line="827" pos:column="18">'5'<pos:position pos:line="827" pos:column="21"/></literal></expr>:<pos:position pos:line="827" pos:column="22"/></case>
            <case pos:line="828" pos:column="13">case <expr><literal type="char" pos:line="828" pos:column="18">'6'<pos:position pos:line="828" pos:column="21"/></literal></expr>:<pos:position pos:line="828" pos:column="22"/></case>
            <case pos:line="829" pos:column="13">case <expr><literal type="char" pos:line="829" pos:column="18">'7'<pos:position pos:line="829" pos:column="21"/></literal></expr>:<pos:position pos:line="829" pos:column="22"/></case>
            <case pos:line="830" pos:column="13">case <expr><literal type="char" pos:line="830" pos:column="18">'8'<pos:position pos:line="830" pos:column="21"/></literal></expr>:<pos:position pos:line="830" pos:column="22"/></case>
            <case pos:line="831" pos:column="13">case <expr><literal type="char" pos:line="831" pos:column="18">'9'<pos:position pos:line="831" pos:column="21"/></literal></expr>:<pos:position pos:line="831" pos:column="22"/></case>
                <if pos:line="832" pos:column="17">if <condition pos:line="832" pos:column="20">(<expr><name pos:line="832" pos:column="21">syntax<pos:position pos:line="832" pos:column="27"/></name> <operator pos:line="832" pos:column="28">&amp;<pos:position pos:line="832" pos:column="33"/></operator> <name pos:line="832" pos:column="30">RE_NO_BK_REFS<pos:position pos:line="832" pos:column="43"/></name></expr>)<pos:position pos:line="832" pos:column="44"/></condition><then pos:line="832" pos:column="44">
                    <block type="pseudo"><goto pos:line="833" pos:column="21">goto <name pos:line="833" pos:column="26">normal_char<pos:position pos:line="833" pos:column="37"/></name>;<pos:position pos:line="833" pos:column="38"/></goto></block></then></if>

                <expr_stmt><expr><name pos:line="835" pos:column="17">c1<pos:position pos:line="835" pos:column="19"/></name> <operator pos:line="835" pos:column="20">=<pos:position pos:line="835" pos:column="21"/></operator> <name pos:line="835" pos:column="22">c<pos:position pos:line="835" pos:column="23"/></name> <operator pos:line="835" pos:column="24">-<pos:position pos:line="835" pos:column="25"/></operator> <literal type="char" pos:line="835" pos:column="26">'0'<pos:position pos:line="835" pos:column="29"/></literal></expr>;<pos:position pos:line="835" pos:column="30"/></expr_stmt>

                <if pos:line="837" pos:column="17">if <condition pos:line="837" pos:column="20">(<expr><name pos:line="837" pos:column="21">c1<pos:position pos:line="837" pos:column="23"/></name> <operator pos:line="837" pos:column="24">&gt;<pos:position pos:line="837" pos:column="28"/></operator> <name pos:line="837" pos:column="26">regnum<pos:position pos:line="837" pos:column="32"/></name></expr>)<pos:position pos:line="837" pos:column="33"/></condition><then pos:line="837" pos:column="33">
                    <block type="pseudo"><return pos:line="838" pos:column="21">return <expr><name pos:line="838" pos:column="28">REG_ESUBREG<pos:position pos:line="838" pos:column="39"/></name></expr>;<pos:position pos:line="838" pos:column="40"/></return></block></then></if>

                <comment type="block" pos:line="840" pos:column="17">/* Can't back reference to a subexpression if inside of it.  */</comment>
                <if pos:line="841" pos:column="17">if <condition pos:line="841" pos:column="20">(<expr><call><name pos:line="841" pos:column="21">group_in_compile_stack<pos:position pos:line="841" pos:column="43"/></name><argument_list pos:line="841" pos:column="43">(<argument><expr><name pos:line="841" pos:column="44">compile_stack<pos:position pos:line="841" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="841" pos:column="59">c1<pos:position pos:line="841" pos:column="61"/></name></expr></argument>)<pos:position pos:line="841" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="841" pos:column="63"/></condition><then pos:line="841" pos:column="63">
                    <block type="pseudo"><goto pos:line="842" pos:column="21">goto <name pos:line="842" pos:column="26">normal_char<pos:position pos:line="842" pos:column="37"/></name>;<pos:position pos:line="842" pos:column="38"/></goto></block></then></if>

                <expr_stmt><expr><name pos:line="844" pos:column="17">laststart<pos:position pos:line="844" pos:column="26"/></name> <operator pos:line="844" pos:column="27">=<pos:position pos:line="844" pos:column="28"/></operator> <name pos:line="844" pos:column="29">b<pos:position pos:line="844" pos:column="30"/></name></expr>;<pos:position pos:line="844" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="845" pos:column="17">BUF_PUSH_2<pos:position pos:line="845" pos:column="27"/></name><argument_list pos:line="845" pos:column="27">(<argument><expr><name pos:line="845" pos:column="28">duplicate<pos:position pos:line="845" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="845" pos:column="39">c1<pos:position pos:line="845" pos:column="41"/></name></expr></argument>)<pos:position pos:line="845" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="845" pos:column="43"/></expr_stmt>
                <break pos:line="846" pos:column="17">break;<pos:position pos:line="846" pos:column="23"/></break>


            <case pos:line="849" pos:column="13">case <expr><literal type="char" pos:line="849" pos:column="18">'+'<pos:position pos:line="849" pos:column="21"/></literal></expr>:<pos:position pos:line="849" pos:column="22"/></case>
            <case pos:line="850" pos:column="13">case <expr><literal type="char" pos:line="850" pos:column="18">'?'<pos:position pos:line="850" pos:column="21"/></literal></expr>:<pos:position pos:line="850" pos:column="22"/></case>
                <if pos:line="851" pos:column="17">if <condition pos:line="851" pos:column="20">(<expr><name pos:line="851" pos:column="21">syntax<pos:position pos:line="851" pos:column="27"/></name> <operator pos:line="851" pos:column="28">&amp;<pos:position pos:line="851" pos:column="33"/></operator> <name pos:line="851" pos:column="30">RE_BK_PLUS_QM<pos:position pos:line="851" pos:column="43"/></name></expr>)<pos:position pos:line="851" pos:column="44"/></condition><then pos:line="851" pos:column="44">
                    <block type="pseudo"><goto pos:line="852" pos:column="21">goto <name pos:line="852" pos:column="26">handle_plus<pos:position pos:line="852" pos:column="37"/></name>;<pos:position pos:line="852" pos:column="38"/></goto></block></then>
                <else pos:line="853" pos:column="17">else
                    <block type="pseudo"><goto pos:line="854" pos:column="21">goto <name pos:line="854" pos:column="26">normal_backslash<pos:position pos:line="854" pos:column="42"/></name>;<pos:position pos:line="854" pos:column="43"/></goto></block></else></if>

            <default pos:line="856" pos:column="13">default:<pos:position pos:line="856" pos:column="21"/></default>
<label><name pos:line="857" pos:column="1">normal_backslash<pos:position pos:line="857" pos:column="17"/></name>:<pos:position pos:line="857" pos:column="18"/></label>
                <comment type="block" pos:line="858" pos:column="17">/* You might think it would be useful for \ to mean
                 * not to translate; but if we don't translate it
                 * it will never match anything.  */</comment>
                <expr_stmt><expr><name pos:line="861" pos:column="17">c<pos:position pos:line="861" pos:column="18"/></name> <operator pos:line="861" pos:column="19">=<pos:position pos:line="861" pos:column="20"/></operator> <call><name pos:line="861" pos:column="21">TRANSLATE<pos:position pos:line="861" pos:column="30"/></name><argument_list pos:line="861" pos:column="30">(<argument><expr><name pos:line="861" pos:column="31">c<pos:position pos:line="861" pos:column="32"/></name></expr></argument>)<pos:position pos:line="861" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="861" pos:column="34"/></expr_stmt>
                <goto pos:line="862" pos:column="17">goto <name pos:line="862" pos:column="22">normal_char<pos:position pos:line="862" pos:column="33"/></name>;<pos:position pos:line="862" pos:column="34"/></goto>
            }<pos:position pos:line="863" pos:column="14"/></block></switch>
            <break pos:line="864" pos:column="13">break;<pos:position pos:line="864" pos:column="19"/></break>


        <default pos:line="867" pos:column="9">default:<pos:position pos:line="867" pos:column="17"/></default>
            <comment type="block" pos:line="868" pos:column="13">/* Expects the character in `c'.  */</comment>
<label><name pos:line="869" pos:column="1">normal_char<pos:position pos:line="869" pos:column="12"/></name>:<pos:position pos:line="869" pos:column="13"/></label>
            <comment type="block" pos:line="870" pos:column="13">/* If no exactn currently being built.  */</comment>
            <if pos:line="871" pos:column="13">if <condition pos:line="871" pos:column="16">(<expr><operator pos:line="871" pos:column="17">!<pos:position pos:line="871" pos:column="18"/></operator><name pos:line="871" pos:column="18">pending_exact<pos:position pos:line="871" pos:column="31"/></name>

                    <comment type="block" pos:line="873" pos:column="21">/* If last exactn not at current position.  */</comment>
                    <operator pos:line="874" pos:column="21">||<pos:position pos:line="874" pos:column="23"/></operator> <name pos:line="874" pos:column="24">pending_exact<pos:position pos:line="874" pos:column="37"/></name> <operator pos:line="874" pos:column="38">+<pos:position pos:line="874" pos:column="39"/></operator> <operator pos:line="874" pos:column="40">*<pos:position pos:line="874" pos:column="41"/></operator><name pos:line="874" pos:column="41">pending_exact<pos:position pos:line="874" pos:column="54"/></name> <operator pos:line="874" pos:column="55">+<pos:position pos:line="874" pos:column="56"/></operator> <literal type="number" pos:line="874" pos:column="57">1<pos:position pos:line="874" pos:column="58"/></literal> <operator pos:line="874" pos:column="59">!=<pos:position pos:line="874" pos:column="61"/></operator> <name pos:line="874" pos:column="62">b<pos:position pos:line="874" pos:column="63"/></name>

                    <comment type="block" pos:line="876" pos:column="21">/* We have only one byte following the exactn for the count.  */</comment>
                    <operator pos:line="877" pos:column="21">||<pos:position pos:line="877" pos:column="23"/></operator> <operator pos:line="877" pos:column="24">*<pos:position pos:line="877" pos:column="25"/></operator><name pos:line="877" pos:column="25">pending_exact<pos:position pos:line="877" pos:column="38"/></name> <operator pos:line="877" pos:column="39">==<pos:position pos:line="877" pos:column="41"/></operator> <operator pos:line="877" pos:column="42">(<pos:position pos:line="877" pos:column="43"/></operator><literal type="number" pos:line="877" pos:column="43">1<pos:position pos:line="877" pos:column="44"/></literal> <operator pos:line="877" pos:column="45">&lt;&lt;<pos:position pos:line="877" pos:column="53"/></operator> <name pos:line="877" pos:column="48">BYTEWIDTH<pos:position pos:line="877" pos:column="57"/></name><operator pos:line="877" pos:column="57">)<pos:position pos:line="877" pos:column="58"/></operator> <operator pos:line="877" pos:column="59">-<pos:position pos:line="877" pos:column="60"/></operator> <literal type="number" pos:line="877" pos:column="61">1<pos:position pos:line="877" pos:column="62"/></literal>

                    <comment type="block" pos:line="879" pos:column="21">/* If followed by a repetition operator.  */</comment>
                    <operator pos:line="880" pos:column="21">||<pos:position pos:line="880" pos:column="23"/></operator> <operator pos:line="880" pos:column="24">*<pos:position pos:line="880" pos:column="25"/></operator><name pos:line="880" pos:column="25">p<pos:position pos:line="880" pos:column="26"/></name> <operator pos:line="880" pos:column="27">==<pos:position pos:line="880" pos:column="29"/></operator> <literal type="char" pos:line="880" pos:column="30">'*'<pos:position pos:line="880" pos:column="33"/></literal> <operator pos:line="880" pos:column="34">||<pos:position pos:line="880" pos:column="36"/></operator> <operator pos:line="880" pos:column="37">*<pos:position pos:line="880" pos:column="38"/></operator><name pos:line="880" pos:column="38">p<pos:position pos:line="880" pos:column="39"/></name> <operator pos:line="880" pos:column="40">==<pos:position pos:line="880" pos:column="42"/></operator> <literal type="char" pos:line="880" pos:column="43">'^'<pos:position pos:line="880" pos:column="46"/></literal>
                    <operator pos:line="881" pos:column="21">||<pos:position pos:line="881" pos:column="23"/></operator> <operator pos:line="881" pos:column="24">(<pos:position pos:line="881" pos:column="25"/></operator><ternary><condition><expr><operator pos:line="881" pos:column="25">(<pos:position pos:line="881" pos:column="26"/></operator><name pos:line="881" pos:column="26">syntax<pos:position pos:line="881" pos:column="32"/></name> <operator pos:line="881" pos:column="33">&amp;<pos:position pos:line="881" pos:column="38"/></operator> <name pos:line="881" pos:column="35">RE_BK_PLUS_QM<pos:position pos:line="881" pos:column="48"/></name><operator pos:line="881" pos:column="48">)<pos:position pos:line="881" pos:column="49"/></operator></expr>
                        ?<pos:position pos:line="882" pos:column="26"/></condition><then pos:line="882" pos:column="26"> <expr><operator pos:line="882" pos:column="27">*<pos:position pos:line="882" pos:column="28"/></operator><name pos:line="882" pos:column="28">p<pos:position pos:line="882" pos:column="29"/></name> <operator pos:line="882" pos:column="30">==<pos:position pos:line="882" pos:column="32"/></operator> <literal type="char" pos:line="882" pos:column="33">'\\'<pos:position pos:line="882" pos:column="37"/></literal> <operator pos:line="882" pos:column="38">&amp;&amp;<pos:position pos:line="882" pos:column="48"/></operator> <operator pos:line="882" pos:column="41">(<pos:position pos:line="882" pos:column="42"/></operator><name><name pos:line="882" pos:column="42">p<pos:position pos:line="882" pos:column="43"/></name><index pos:line="882" pos:column="43">[<expr><literal type="number" pos:line="882" pos:column="44">1<pos:position pos:line="882" pos:column="45"/></literal></expr>]<pos:position pos:line="882" pos:column="46"/></index></name> <operator pos:line="882" pos:column="47">==<pos:position pos:line="882" pos:column="49"/></operator> <literal type="char" pos:line="882" pos:column="50">'+'<pos:position pos:line="882" pos:column="53"/></literal> <operator pos:line="882" pos:column="54">||<pos:position pos:line="882" pos:column="56"/></operator> <name><name pos:line="882" pos:column="57">p<pos:position pos:line="882" pos:column="58"/></name><index pos:line="882" pos:column="58">[<expr><literal type="number" pos:line="882" pos:column="59">1<pos:position pos:line="882" pos:column="60"/></literal></expr>]<pos:position pos:line="882" pos:column="61"/></index></name> <operator pos:line="882" pos:column="62">==<pos:position pos:line="882" pos:column="64"/></operator> <literal type="char" pos:line="882" pos:column="65">'?'<pos:position pos:line="882" pos:column="68"/></literal><operator pos:line="882" pos:column="68">)<pos:position pos:line="882" pos:column="69"/></operator></expr>
                        <pos:position pos:line="883" pos:column="25"/></then><else pos:line="883" pos:column="25">: <expr><operator pos:line="883" pos:column="27">(<pos:position pos:line="883" pos:column="28"/></operator><operator pos:line="883" pos:column="28">*<pos:position pos:line="883" pos:column="29"/></operator><name pos:line="883" pos:column="29">p<pos:position pos:line="883" pos:column="30"/></name> <operator pos:line="883" pos:column="31">==<pos:position pos:line="883" pos:column="33"/></operator> <literal type="char" pos:line="883" pos:column="34">'+'<pos:position pos:line="883" pos:column="37"/></literal> <operator pos:line="883" pos:column="38">||<pos:position pos:line="883" pos:column="40"/></operator> <operator pos:line="883" pos:column="41">*<pos:position pos:line="883" pos:column="42"/></operator><name pos:line="883" pos:column="42">p<pos:position pos:line="883" pos:column="43"/></name> <operator pos:line="883" pos:column="44">==<pos:position pos:line="883" pos:column="46"/></operator> <literal type="char" pos:line="883" pos:column="47">'?'<pos:position pos:line="883" pos:column="50"/></literal><operator pos:line="883" pos:column="50">)<pos:position pos:line="883" pos:column="51"/></operator></expr></else></ternary><operator pos:line="883" pos:column="51">)<pos:position pos:line="883" pos:column="52"/></operator>
                    <operator pos:line="884" pos:column="21">||<pos:position pos:line="884" pos:column="23"/></operator> <operator pos:line="884" pos:column="24">(<pos:position pos:line="884" pos:column="25"/></operator><operator pos:line="884" pos:column="25">(<pos:position pos:line="884" pos:column="26"/></operator><name pos:line="884" pos:column="26">syntax<pos:position pos:line="884" pos:column="32"/></name> <operator pos:line="884" pos:column="33">&amp;<pos:position pos:line="884" pos:column="38"/></operator> <name pos:line="884" pos:column="35">RE_INTERVALS<pos:position pos:line="884" pos:column="47"/></name><operator pos:line="884" pos:column="47">)<pos:position pos:line="884" pos:column="48"/></operator>
                        <operator pos:line="885" pos:column="25">&amp;&amp;<pos:position pos:line="885" pos:column="35"/></operator> <operator pos:line="885" pos:column="28">(<pos:position pos:line="885" pos:column="29"/></operator><ternary><condition><expr><operator pos:line="885" pos:column="29">(<pos:position pos:line="885" pos:column="30"/></operator><name pos:line="885" pos:column="30">syntax<pos:position pos:line="885" pos:column="36"/></name> <operator pos:line="885" pos:column="37">&amp;<pos:position pos:line="885" pos:column="42"/></operator> <name pos:line="885" pos:column="39">RE_NO_BK_BRACES<pos:position pos:line="885" pos:column="54"/></name><operator pos:line="885" pos:column="54">)<pos:position pos:line="885" pos:column="55"/></operator></expr>
                            ?<pos:position pos:line="886" pos:column="30"/></condition><then pos:line="886" pos:column="30"> <expr><operator pos:line="886" pos:column="31">*<pos:position pos:line="886" pos:column="32"/></operator><name pos:line="886" pos:column="32">p<pos:position pos:line="886" pos:column="33"/></name> <operator pos:line="886" pos:column="34">==<pos:position pos:line="886" pos:column="36"/></operator> <literal type="char" pos:line="886" pos:column="37">'{'<pos:position pos:line="886" pos:column="40"/></literal></expr>
                            <pos:position pos:line="887" pos:column="29"/></then><else pos:line="887" pos:column="29">: <expr><operator pos:line="887" pos:column="31">(<pos:position pos:line="887" pos:column="32"/></operator><name><name pos:line="887" pos:column="32">p<pos:position pos:line="887" pos:column="33"/></name><index pos:line="887" pos:column="33">[<expr><literal type="number" pos:line="887" pos:column="34">0<pos:position pos:line="887" pos:column="35"/></literal></expr>]<pos:position pos:line="887" pos:column="36"/></index></name> <operator pos:line="887" pos:column="37">==<pos:position pos:line="887" pos:column="39"/></operator> <literal type="char" pos:line="887" pos:column="40">'\\'<pos:position pos:line="887" pos:column="44"/></literal> <operator pos:line="887" pos:column="45">&amp;&amp;<pos:position pos:line="887" pos:column="55"/></operator> <name><name pos:line="887" pos:column="48">p<pos:position pos:line="887" pos:column="49"/></name><index pos:line="887" pos:column="49">[<expr><literal type="number" pos:line="887" pos:column="50">1<pos:position pos:line="887" pos:column="51"/></literal></expr>]<pos:position pos:line="887" pos:column="52"/></index></name> <operator pos:line="887" pos:column="53">==<pos:position pos:line="887" pos:column="55"/></operator> <literal type="char" pos:line="887" pos:column="56">'{'<pos:position pos:line="887" pos:column="59"/></literal><operator pos:line="887" pos:column="59">)<pos:position pos:line="887" pos:column="60"/></operator></expr></else></ternary><operator pos:line="887" pos:column="60">)<pos:position pos:line="887" pos:column="61"/></operator><operator pos:line="887" pos:column="61">)<pos:position pos:line="887" pos:column="62"/></operator></expr>)<pos:position pos:line="887" pos:column="63"/></condition><then pos:line="887" pos:column="63"> <block pos:line="887" pos:column="64">{
                <comment type="block" pos:line="888" pos:column="17">/* Start building a new exactn.  */</comment>

                <expr_stmt><expr><name pos:line="890" pos:column="17">laststart<pos:position pos:line="890" pos:column="26"/></name> <operator pos:line="890" pos:column="27">=<pos:position pos:line="890" pos:column="28"/></operator> <name pos:line="890" pos:column="29">b<pos:position pos:line="890" pos:column="30"/></name></expr>;<pos:position pos:line="890" pos:column="31"/></expr_stmt>

                <expr_stmt><expr><call><name pos:line="892" pos:column="17">BUF_PUSH_2<pos:position pos:line="892" pos:column="27"/></name><argument_list pos:line="892" pos:column="27">(<argument><expr><name pos:line="892" pos:column="28">exactn<pos:position pos:line="892" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="892" pos:column="36">0<pos:position pos:line="892" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="892" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="892" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><name pos:line="893" pos:column="17">pending_exact<pos:position pos:line="893" pos:column="30"/></name> <operator pos:line="893" pos:column="31">=<pos:position pos:line="893" pos:column="32"/></operator> <name pos:line="893" pos:column="33">b<pos:position pos:line="893" pos:column="34"/></name> <operator pos:line="893" pos:column="35">-<pos:position pos:line="893" pos:column="36"/></operator> <literal type="number" pos:line="893" pos:column="37">1<pos:position pos:line="893" pos:column="38"/></literal></expr>;<pos:position pos:line="893" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="894" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="895" pos:column="13">BUF_PUSH<pos:position pos:line="895" pos:column="21"/></name><argument_list pos:line="895" pos:column="21">(<argument><expr><name pos:line="895" pos:column="22">c<pos:position pos:line="895" pos:column="23"/></name></expr></argument>)<pos:position pos:line="895" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="895" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="896" pos:column="13">(<pos:position pos:line="896" pos:column="14"/></operator><operator pos:line="896" pos:column="14">*<pos:position pos:line="896" pos:column="15"/></operator><name pos:line="896" pos:column="15">pending_exact<pos:position pos:line="896" pos:column="28"/></name><operator pos:line="896" pos:column="28">)<pos:position pos:line="896" pos:column="29"/></operator><operator pos:line="896" pos:column="29">++<pos:position pos:line="896" pos:column="31"/></operator></expr>;<pos:position pos:line="896" pos:column="32"/></expr_stmt>
            <break pos:line="897" pos:column="13">break;<pos:position pos:line="897" pos:column="19"/></break>
        }<pos:position pos:line="898" pos:column="10"/></block></switch>			<comment type="block" pos:line="898" pos:column="33">/* switch (c) */</comment>
    }<pos:position pos:line="899" pos:column="6"/></block></while>				<comment type="block" pos:line="899" pos:column="33">/* while p != pend */</comment>


    <comment type="block" pos:line="902" pos:column="5">/* Through the pattern now.  */</comment>

    <if pos:line="904" pos:column="5">if <condition pos:line="904" pos:column="8">(<expr><name pos:line="904" pos:column="9">fixup_alt_jump<pos:position pos:line="904" pos:column="23"/></name></expr>)<pos:position pos:line="904" pos:column="24"/></condition><then pos:line="904" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="905" pos:column="9">STORE_JUMP<pos:position pos:line="905" pos:column="19"/></name><argument_list pos:line="905" pos:column="19">(<argument><expr><name pos:line="905" pos:column="20">jump_past_alt<pos:position pos:line="905" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="905" pos:column="35">fixup_alt_jump<pos:position pos:line="905" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="905" pos:column="51">b<pos:position pos:line="905" pos:column="52"/></name></expr></argument>)<pos:position pos:line="905" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="905" pos:column="54"/></expr_stmt></block></then></if>

    <if pos:line="907" pos:column="5">if <condition pos:line="907" pos:column="8">(<expr><operator pos:line="907" pos:column="9">!<pos:position pos:line="907" pos:column="10"/></operator><name pos:line="907" pos:column="10">COMPILE_STACK_EMPTY<pos:position pos:line="907" pos:column="29"/></name></expr>)<pos:position pos:line="907" pos:column="30"/></condition><then pos:line="907" pos:column="30">
        <block type="pseudo"><return pos:line="908" pos:column="9">return <expr><name pos:line="908" pos:column="16">REG_EPAREN<pos:position pos:line="908" pos:column="26"/></name></expr>;<pos:position pos:line="908" pos:column="27"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="910" pos:column="5">free<pos:position pos:line="910" pos:column="9"/></name><argument_list pos:line="910" pos:column="9">(<argument><expr><name><name pos:line="910" pos:column="10">compile_stack<pos:position pos:line="910" pos:column="23"/></name><operator pos:line="910" pos:column="23">.<pos:position pos:line="910" pos:column="24"/></operator><name pos:line="910" pos:column="24">stack<pos:position pos:line="910" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="910" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="910" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="912" pos:column="5">/* We have succeeded; set the length of the buffer.  */</comment>
    <expr_stmt><expr><name><name pos:line="913" pos:column="5">bufp<pos:position pos:line="913" pos:column="9"/></name><operator pos:line="913" pos:column="9">-&gt;<pos:position pos:line="913" pos:column="14"/></operator><name pos:line="913" pos:column="11">used<pos:position pos:line="913" pos:column="15"/></name></name> <operator pos:line="913" pos:column="16">=<pos:position pos:line="913" pos:column="17"/></operator> <name pos:line="913" pos:column="18">b<pos:position pos:line="913" pos:column="19"/></name> <operator pos:line="913" pos:column="20">-<pos:position pos:line="913" pos:column="21"/></operator> <name><name pos:line="913" pos:column="22">bufp<pos:position pos:line="913" pos:column="26"/></name><operator pos:line="913" pos:column="26">-&gt;<pos:position pos:line="913" pos:column="31"/></operator><name pos:line="913" pos:column="28">buffer<pos:position pos:line="913" pos:column="34"/></name></name></expr>;<pos:position pos:line="913" pos:column="35"/></expr_stmt>

<cpp:ifdef pos:line="915" pos:column="1">#<cpp:directive pos:line="915" pos:column="2">ifdef<pos:position pos:line="915" pos:column="7"/></cpp:directive> <name pos:line="915" pos:column="8">DEBUG<pos:position pos:line="915" pos:column="13"/></name></cpp:ifdef>
    <if pos:line="916" pos:column="5">if <condition pos:line="916" pos:column="8">(<expr><name pos:line="916" pos:column="9">debug<pos:position pos:line="916" pos:column="14"/></name></expr>)<pos:position pos:line="916" pos:column="15"/></condition><then pos:line="916" pos:column="15"> <block pos:line="916" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="917" pos:column="9">DEBUG_PRINT1<pos:position pos:line="917" pos:column="21"/></name><argument_list pos:line="917" pos:column="21">(<argument><expr><literal type="string" pos:line="917" pos:column="22">"\nCompiled pattern: "<pos:position pos:line="917" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="917" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="917" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="918" pos:column="9">print_compiled_pattern<pos:position pos:line="918" pos:column="31"/></name><argument_list pos:line="918" pos:column="31">(<argument><expr><name pos:line="918" pos:column="32">bufp<pos:position pos:line="918" pos:column="36"/></name></expr></argument>)<pos:position pos:line="918" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="918" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="919" pos:column="6"/></block></then></if>
<cpp:endif pos:line="920" pos:column="1">#<cpp:directive pos:line="920" pos:column="2">endif<pos:position pos:line="920" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="920" pos:column="8">/* DEBUG */</comment>

    <return pos:line="922" pos:column="5">return <expr><name pos:line="922" pos:column="12">REG_NOERROR<pos:position pos:line="922" pos:column="23"/></name></expr>;<pos:position pos:line="922" pos:column="24"/></return>
}<pos:position pos:line="923" pos:column="2"/></block></function></unit>
