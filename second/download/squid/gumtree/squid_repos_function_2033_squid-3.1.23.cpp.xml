<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2033_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">diskHandleRead<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">int<pos:position pos:line="2" pos:column="19"/></name></type> <name pos:line="2" pos:column="20">fd<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="24">void<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">data<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">dread_ctrl<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">ctrl_dat<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><operator pos:line="4" pos:column="28">(<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="29">dread_ctrl<pos:position pos:line="4" pos:column="39"/></name> <operator pos:line="4" pos:column="40">*<pos:position pos:line="4" pos:column="41"/></operator><operator pos:line="4" pos:column="41">)<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="42">data<pos:position pos:line="4" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">fde<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">F<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><operator pos:line="5" pos:column="14">&amp;<pos:position pos:line="5" pos:column="19"/></operator><name><name pos:line="5" pos:column="15">fd_table<pos:position pos:line="5" pos:column="23"/></name><index pos:line="5" pos:column="23">[<expr><name pos:line="5" pos:column="24">fd<pos:position pos:line="5" pos:column="26"/></name></expr>]<pos:position pos:line="5" pos:column="27"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">len<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">rc<pos:position pos:line="7" pos:column="11"/></name> <init pos:line="7" pos:column="12">= <expr><name pos:line="7" pos:column="14">DISK_OK<pos:position pos:line="7" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <comment type="block" pos:line="8" pos:column="5">/*
     * FD &lt; 0 indicates premature close; we just have to free
     * the state data.
     */</comment>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">fd<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&lt;<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">memFree<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">ctrl_dat<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">MEM_DREAD_CTRL<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">PROF_start<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">diskHandleRead<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">F<pos:position pos:line="20" pos:column="10"/></name><operator pos:line="20" pos:column="10">-&gt;<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="12">disk<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">.<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">offset<pos:position pos:line="20" pos:column="23"/></name></name> <operator pos:line="20" pos:column="24">!=<pos:position pos:line="20" pos:column="26"/></operator> <name><name pos:line="20" pos:column="27">ctrl_dat<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">-&gt;<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="37">offset<pos:position pos:line="20" pos:column="43"/></name></name></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44"> <block pos:line="20" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">6<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="19">3<pos:position pos:line="21" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="22">"diskHandleRead: FD "<pos:position pos:line="21" pos:column="43"/></literal> <operator pos:line="21" pos:column="44">&lt;&lt;<pos:position pos:line="21" pos:column="52"/></operator> <name pos:line="21" pos:column="47">fd<pos:position pos:line="21" pos:column="49"/></name> <operator pos:line="21" pos:column="50">&lt;&lt;<pos:position pos:line="21" pos:column="58"/></operator> <literal type="string" pos:line="21" pos:column="53">" seeking to offset "<pos:position pos:line="21" pos:column="74"/></literal> <operator pos:line="21" pos:column="75">&lt;&lt;<pos:position pos:line="21" pos:column="83"/></operator> <name><name pos:line="21" pos:column="78">ctrl_dat<pos:position pos:line="21" pos:column="86"/></name><operator pos:line="21" pos:column="86">-&gt;<pos:position pos:line="21" pos:column="91"/></operator><name pos:line="21" pos:column="88">offset<pos:position pos:line="21" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="96"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">lseek<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">fd<pos:position pos:line="22" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="19">ctrl_dat<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">-&gt;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="29">offset<pos:position pos:line="22" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="37">SEEK_SET<pos:position pos:line="22" pos:column="45"/></name></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="47"/></expr_stmt>	<comment type="block" pos:line="22" pos:column="49">/* XXX ignore return? */</comment>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">statCounter<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">.<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">syscalls<pos:position pos:line="23" pos:column="29"/></name><operator pos:line="23" pos:column="29">.<pos:position pos:line="23" pos:column="30"/></operator><name pos:line="23" pos:column="30">disk<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">.<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="35">seeks<pos:position pos:line="23" pos:column="40"/></name></name><operator pos:line="23" pos:column="40">++<pos:position pos:line="23" pos:column="42"/></operator></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">F<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">disk<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">.<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">offset<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <name><name pos:line="24" pos:column="26">ctrl_dat<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">-&gt;<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="36">offset<pos:position pos:line="24" pos:column="42"/></name></name></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="27" pos:column="5">errno<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <literal type="number" pos:line="27" pos:column="13">0<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">len<pos:position pos:line="28" pos:column="8"/></name> <operator pos:line="28" pos:column="9">=<pos:position pos:line="28" pos:column="10"/></operator> <call><name pos:line="28" pos:column="11">FD_READ_METHOD<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">fd<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="30">ctrl_dat<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">-&gt;<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="40">buf<pos:position pos:line="28" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="45">ctrl_dat<pos:position pos:line="28" pos:column="53"/></name><operator pos:line="28" pos:column="53">-&gt;<pos:position pos:line="28" pos:column="58"/></operator><name pos:line="28" pos:column="55">req_len<pos:position pos:line="28" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="64"/></expr_stmt>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">len<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">&gt;<pos:position pos:line="30" pos:column="17"/></operator> <literal type="number" pos:line="30" pos:column="15">0<pos:position pos:line="30" pos:column="16"/></literal></expr>)<pos:position pos:line="30" pos:column="17"/></condition><then pos:line="30" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="9">F<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">disk<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">.<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="17">offset<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">+=<pos:position pos:line="31" pos:column="26"/></operator> <name pos:line="31" pos:column="27">len<pos:position pos:line="31" pos:column="30"/></name></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="33" pos:column="5">statCounter<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">.<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">syscalls<pos:position pos:line="33" pos:column="25"/></name><operator pos:line="33" pos:column="25">.<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="26">disk<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">.<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">reads<pos:position pos:line="33" pos:column="36"/></name></name><operator pos:line="33" pos:column="36">++<pos:position pos:line="33" pos:column="38"/></operator></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">fd_bytes<pos:position pos:line="35" pos:column="13"/></name><argument_list pos:line="35" pos:column="13">(<argument><expr><name pos:line="35" pos:column="14">fd<pos:position pos:line="35" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="18">len<pos:position pos:line="35" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="23">FD_READ<pos:position pos:line="35" pos:column="30"/></name></expr></argument>)<pos:position pos:line="35" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="32"/></expr_stmt>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">len<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">&lt;<pos:position pos:line="37" pos:column="17"/></operator> <literal type="number" pos:line="37" pos:column="15">0<pos:position pos:line="37" pos:column="16"/></literal></expr>)<pos:position pos:line="37" pos:column="17"/></condition><then pos:line="37" pos:column="17"> <block pos:line="37" pos:column="18">{
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">ignoreErrno<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">errno<pos:position pos:line="38" pos:column="30"/></name></expr></argument>)<pos:position pos:line="38" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="32"/></condition><then pos:line="38" pos:column="32"> <block pos:line="38" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">commSetSelect<pos:position pos:line="39" pos:column="26"/></name><argument_list pos:line="39" pos:column="26">(<argument><expr><name pos:line="39" pos:column="27">fd<pos:position pos:line="39" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="31">COMM_SELECT_READ<pos:position pos:line="39" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="49">diskHandleRead<pos:position pos:line="39" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="65">ctrl_dat<pos:position pos:line="39" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="75">0<pos:position pos:line="39" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="78"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">PROF_stop<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><name pos:line="40" pos:column="23">diskHandleRead<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
            <return pos:line="41" pos:column="13">return;<pos:position pos:line="41" pos:column="20"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="44" pos:column="9">debugs<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="number" pos:line="44" pos:column="16">50<pos:position pos:line="44" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="20">1<pos:position pos:line="44" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="23">"diskHandleRead: FD "<pos:position pos:line="44" pos:column="44"/></literal> <operator pos:line="44" pos:column="45">&lt;&lt;<pos:position pos:line="44" pos:column="53"/></operator> <name pos:line="44" pos:column="48">fd<pos:position pos:line="44" pos:column="50"/></name> <operator pos:line="44" pos:column="51">&lt;&lt;<pos:position pos:line="44" pos:column="59"/></operator> <literal type="string" pos:line="44" pos:column="54">": "<pos:position pos:line="44" pos:column="58"/></literal> <operator pos:line="44" pos:column="59">&lt;&lt;<pos:position pos:line="44" pos:column="67"/></operator> <call><name pos:line="44" pos:column="62">xstrerror<pos:position pos:line="44" pos:column="71"/></name><argument_list pos:line="44" pos:column="71">()<pos:position pos:line="44" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name pos:line="45" pos:column="9">len<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <literal type="number" pos:line="45" pos:column="15">0<pos:position pos:line="45" pos:column="16"/></literal></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="46" pos:column="9">rc<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator> <name pos:line="46" pos:column="14">DISK_ERROR<pos:position pos:line="46" pos:column="24"/></name></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then> <elseif pos:line="47" pos:column="7">else <if pos:line="47" pos:column="12">if <condition pos:line="47" pos:column="15">(<expr><name pos:line="47" pos:column="16">len<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">==<pos:position pos:line="47" pos:column="22"/></operator> <literal type="number" pos:line="47" pos:column="23">0<pos:position pos:line="47" pos:column="24"/></literal></expr>)<pos:position pos:line="47" pos:column="25"/></condition><then pos:line="47" pos:column="25"> <block pos:line="47" pos:column="26">{
        <expr_stmt><expr><name pos:line="48" pos:column="9">rc<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">=<pos:position pos:line="48" pos:column="13"/></operator> <name pos:line="48" pos:column="14">DISK_EOF<pos:position pos:line="48" pos:column="22"/></name></expr>;<pos:position pos:line="48" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><call><name pos:line="51" pos:column="9">cbdataReferenceValid<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name><name pos:line="51" pos:column="30">ctrl_dat<pos:position pos:line="51" pos:column="38"/></name><operator pos:line="51" pos:column="38">-&gt;<pos:position pos:line="51" pos:column="43"/></operator><name pos:line="51" pos:column="40">client_data<pos:position pos:line="51" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="53"/></condition><then pos:line="51" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="52" pos:column="9">ctrl_dat<pos:position pos:line="52" pos:column="17"/></name><operator pos:line="52" pos:column="17">-&gt;<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="19">handler<pos:position pos:line="52" pos:column="26"/></name></name><argument_list pos:line="52" pos:column="26">(<argument><expr><name pos:line="52" pos:column="27">fd<pos:position pos:line="52" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="31">ctrl_dat<pos:position pos:line="52" pos:column="39"/></name><operator pos:line="52" pos:column="39">-&gt;<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="41">buf<pos:position pos:line="52" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="46">len<pos:position pos:line="52" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="51">rc<pos:position pos:line="52" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="55">ctrl_dat<pos:position pos:line="52" pos:column="63"/></name><operator pos:line="52" pos:column="63">-&gt;<pos:position pos:line="52" pos:column="68"/></operator><name pos:line="52" pos:column="65">client_data<pos:position pos:line="52" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="78"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="54" pos:column="5">cbdataReferenceDone<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name><name pos:line="54" pos:column="25">ctrl_dat<pos:position pos:line="54" pos:column="33"/></name><operator pos:line="54" pos:column="33">-&gt;<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="35">client_data<pos:position pos:line="54" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="56" pos:column="5">memFree<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">ctrl_dat<pos:position pos:line="56" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="23">MEM_DREAD_CTRL<pos:position pos:line="56" pos:column="37"/></name></expr></argument>)<pos:position pos:line="56" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">PROF_stop<pos:position pos:line="58" pos:column="14"/></name><argument_list pos:line="58" pos:column="14">(<argument><expr><name pos:line="58" pos:column="15">diskHandleRead<pos:position pos:line="58" pos:column="29"/></name></expr></argument>)<pos:position pos:line="58" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="31"/></expr_stmt>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
