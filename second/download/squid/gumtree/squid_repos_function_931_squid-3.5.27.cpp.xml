<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_931_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_init<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">void<pos:position pos:line="2" pos:column="15"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="16"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">fd_table<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">=<pos:position pos:line="4" pos:column="15"/></operator><operator pos:line="4" pos:column="15">(<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">fde<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></operator><operator pos:line="4" pos:column="21">)<pos:position pos:line="4" pos:column="22"/></operator> <call><name pos:line="4" pos:column="23">xcalloc<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><name pos:line="4" pos:column="31">Squid_MaxFD<pos:position pos:line="4" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="4" pos:column="44">sizeof<argument_list pos:line="4" pos:column="50">(<argument><expr><name pos:line="4" pos:column="51">fde<pos:position pos:line="4" pos:column="54"/></name></expr></argument>)<pos:position pos:line="4" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">fdd_table<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">=<pos:position pos:line="5" pos:column="16"/></operator> <operator pos:line="5" pos:column="17">(<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">fd_debug_t<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><operator pos:line="5" pos:column="30">)<pos:position pos:line="5" pos:column="31"/></operator><call><name pos:line="5" pos:column="31">xcalloc<pos:position pos:line="5" pos:column="38"/></name><argument_list pos:line="5" pos:column="38">(<argument><expr><name pos:line="5" pos:column="39">Squid_MaxFD<pos:position pos:line="5" pos:column="50"/></name></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="52">sizeof<argument_list pos:line="5" pos:column="58">(<argument><expr><name pos:line="5" pos:column="59">fd_debug_t<pos:position pos:line="5" pos:column="69"/></name></expr></argument>)<pos:position pos:line="5" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="72"/></expr_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* make sure the accept() socket FIFO delay queue exists */</comment>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">Comm<pos:position pos:line="8" pos:column="9"/></name><operator pos:line="8" pos:column="9">::<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">AcceptLimiter<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">::<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="26">Instance<pos:position pos:line="8" pos:column="34"/></name></name><argument_list pos:line="8" pos:column="34">()<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>

    <comment type="line" pos:line="10" pos:column="5">// make sure the IO pending callback table exists</comment>
    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">Comm<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">::<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">CallbackTableInit<pos:position pos:line="11" pos:column="28"/></name></name><argument_list pos:line="11" pos:column="28">()<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* XXX account fd_table */</comment>
    <comment type="block" pos:line="14" pos:column="5">/* Keep a few file descriptors free so that we don't run out of FD's
     * after accepting a client but before it opens a socket or a file.
     * Since Squid_MaxFD can be as high as several thousand, don't waste them */</comment>
    <expr_stmt><expr><name pos:line="17" pos:column="5">RESERVED_FD<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <call><name pos:line="17" pos:column="19">min<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><literal type="number" pos:line="17" pos:column="23">100<pos:position pos:line="17" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="28">Squid_MaxFD<pos:position pos:line="17" pos:column="39"/></name> <operator pos:line="17" pos:column="40">/<pos:position pos:line="17" pos:column="41"/></operator> <literal type="number" pos:line="17" pos:column="42">4<pos:position pos:line="17" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><name pos:line="19" pos:column="5">TheHalfClosed<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <operator pos:line="19" pos:column="21">new<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">DescriptorSet<pos:position pos:line="19" pos:column="38"/></name></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="21" pos:column="5">/* setup the select loop module */</comment>
    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">Comm<pos:position pos:line="22" pos:column="9"/></name><operator pos:line="22" pos:column="9">::<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">SelectLoopInit<pos:position pos:line="22" pos:column="25"/></name></name><argument_list pos:line="22" pos:column="25">()<pos:position pos:line="22" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
