<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3663_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrRange<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">parseInit<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><specifier pos:line="2" pos:column="25">const<pos:position pos:line="2" pos:column="30"/></specifier> <name pos:line="2" pos:column="31">String<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type> <name pos:line="2" pos:column="40">range_spec<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">item<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">pos<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">NULL<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">ilen<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">this<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">&amp;&amp;<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="20">range_spec<pos:position pos:line="7" pos:column="30"/></name></expr></argument>)<pos:position pos:line="7" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="8" pos:column="5">++<pos:position pos:line="8" pos:column="7"/></operator><name pos:line="8" pos:column="7">ParsedCount<pos:position pos:line="8" pos:column="18"/></name></expr>;<pos:position pos:line="8" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">64<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">8<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"parsing range field: '"<pos:position pos:line="9" pos:column="43"/></literal> <operator pos:line="9" pos:column="44">&lt;&lt;<pos:position pos:line="9" pos:column="52"/></operator> <name pos:line="9" pos:column="47">range_spec<pos:position pos:line="9" pos:column="57"/></name> <operator pos:line="9" pos:column="58">&lt;&lt;<pos:position pos:line="9" pos:column="66"/></operator> <literal type="string" pos:line="9" pos:column="61">"'"<pos:position pos:line="9" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="66"/></expr_stmt>
    <comment type="block" pos:line="10" pos:column="5">/* check range type */</comment>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name><name pos:line="12" pos:column="9">range_spec<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">-&gt;<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="21">caseCmp<pos:position pos:line="12" pos:column="28"/></name></name><argument_list pos:line="12" pos:column="28">(<argument><expr><literal type="string" pos:line="12" pos:column="29">"bytes="<pos:position pos:line="12" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="39">6<pos:position pos:line="12" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* skip "bytes="; hack! */</comment>
    <expr_stmt><expr><name pos:line="16" pos:column="5">pos<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <call><name><name pos:line="16" pos:column="11">range_spec<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">-&gt;<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="23">termedBuf<pos:position pos:line="16" pos:column="32"/></name></name><argument_list pos:line="16" pos:column="32">()<pos:position pos:line="16" pos:column="34"/></argument_list></call> <operator pos:line="16" pos:column="35">+<pos:position pos:line="16" pos:column="36"/></operator> <literal type="number" pos:line="16" pos:column="37">6<pos:position pos:line="16" pos:column="38"/></literal></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* iterate through comma separated list */</comment>
    <while pos:line="19" pos:column="5">while <condition pos:line="19" pos:column="11">(<expr><call><name pos:line="19" pos:column="12">strListGetItem<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">range_spec<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="39">','<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="44">&amp;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="45">item<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="51">&amp;<pos:position pos:line="19" pos:column="56"/></operator><name pos:line="19" pos:column="52">ilen<pos:position pos:line="19" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="58">&amp;<pos:position pos:line="19" pos:column="63"/></operator><name pos:line="19" pos:column="59">pos<pos:position pos:line="19" pos:column="62"/></name></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="64"/></condition> <block pos:line="19" pos:column="65">{
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">HttpHdrRangeSpec<pos:position pos:line="20" pos:column="25"/></name> <modifier pos:line="20" pos:column="26">*<pos:position pos:line="20" pos:column="27"/></modifier></type><name pos:line="20" pos:column="27">spec<pos:position pos:line="20" pos:column="31"/></name> <init pos:line="20" pos:column="32">= <expr><call><name><name pos:line="20" pos:column="34">HttpHdrRangeSpec<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">::<pos:position pos:line="20" pos:column="52"/></operator><name pos:line="20" pos:column="52">Create<pos:position pos:line="20" pos:column="58"/></name></name><argument_list pos:line="20" pos:column="58">(<argument><expr><name pos:line="20" pos:column="59">item<pos:position pos:line="20" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="65">ilen<pos:position pos:line="20" pos:column="69"/></name></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="71"/></decl_stmt>
        <comment type="block" pos:line="21" pos:column="9">/*
         * RFC 2616 section 14.35.1: MUST ignore Range with
         * at least one syntactically invalid byte-range-specs.
         */</comment>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">spec<pos:position pos:line="25" pos:column="18"/></name></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19"> <block pos:line="25" pos:column="20">{
            <while pos:line="26" pos:column="13">while <condition pos:line="26" pos:column="19">(<expr><operator pos:line="26" pos:column="20">!<pos:position pos:line="26" pos:column="21"/></operator><call><name><name pos:line="26" pos:column="21">specs<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">.<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">empty<pos:position pos:line="26" pos:column="32"/></name></name><argument_list pos:line="26" pos:column="32">()<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="35"/></condition>
                <block type="pseudo"><expr_stmt><expr><operator pos:line="27" pos:column="17">delete<pos:position pos:line="27" pos:column="23"/></operator> <call><name><name pos:line="27" pos:column="24">specs<pos:position pos:line="27" pos:column="29"/></name><operator pos:line="27" pos:column="29">.<pos:position pos:line="27" pos:column="30"/></operator><name pos:line="27" pos:column="30">pop_back<pos:position pos:line="27" pos:column="38"/></name></name><argument_list pos:line="27" pos:column="38">()<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt></block></while>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">debugs<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><literal type="number" pos:line="28" pos:column="20">64<pos:position pos:line="28" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="24">2<pos:position pos:line="28" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="27">"ignoring invalid range field: '"<pos:position pos:line="28" pos:column="60"/></literal> <operator pos:line="28" pos:column="61">&lt;&lt;<pos:position pos:line="28" pos:column="69"/></operator> <name pos:line="28" pos:column="64">range_spec<pos:position pos:line="28" pos:column="74"/></name> <operator pos:line="28" pos:column="75">&lt;&lt;<pos:position pos:line="28" pos:column="83"/></operator> <literal type="string" pos:line="28" pos:column="78">"'"<pos:position pos:line="28" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="83"/></expr_stmt>
            <break pos:line="29" pos:column="13">break;<pos:position pos:line="29" pos:column="19"/></break>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="32" pos:column="9">specs<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">.<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">push_back<pos:position pos:line="32" pos:column="24"/></name></name><argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">spec<pos:position pos:line="32" pos:column="29"/></name></expr></argument>)<pos:position pos:line="32" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">debugs<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="number" pos:line="35" pos:column="12">64<pos:position pos:line="35" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="16">8<pos:position pos:line="35" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="19">"got range specs: "<pos:position pos:line="35" pos:column="38"/></literal> <operator pos:line="35" pos:column="39">&lt;&lt;<pos:position pos:line="35" pos:column="47"/></operator> <call><name><name pos:line="35" pos:column="42">specs<pos:position pos:line="35" pos:column="47"/></name><operator pos:line="35" pos:column="47">.<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="48">size<pos:position pos:line="35" pos:column="52"/></name></name><argument_list pos:line="35" pos:column="52">()<pos:position pos:line="35" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><operator pos:line="36" pos:column="12">!<pos:position pos:line="36" pos:column="13"/></operator><call><name><name pos:line="36" pos:column="13">specs<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">.<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">empty<pos:position pos:line="36" pos:column="24"/></name></name><argument_list pos:line="36" pos:column="24">()<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
