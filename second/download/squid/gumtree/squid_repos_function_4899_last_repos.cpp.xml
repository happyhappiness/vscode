<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4899_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">Parser<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">skipLineTerminator<pos:position pos:line="2" pos:column="38"/></name></name><parameter_list pos:line="2" pos:column="38">(<parameter><decl><type><name><name pos:line="2" pos:column="39">Http1<pos:position pos:line="2" pos:column="44"/></name><operator pos:line="2" pos:column="44">::<pos:position pos:line="2" pos:column="46"/></operator><name pos:line="2" pos:column="46">Tokenizer<pos:position pos:line="2" pos:column="55"/></name></name> <modifier pos:line="2" pos:column="56">&amp;<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="57">tok<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list> <specifier pos:line="2" pos:column="62">const<pos:position pos:line="2" pos:column="67"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">tok<pos:position pos:line="4" pos:column="12"/></name><operator pos:line="4" pos:column="12">.<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">skip<pos:position pos:line="4" pos:column="17"/></name></name><argument_list pos:line="4" pos:column="17">(<argument><expr><call><name><name pos:line="4" pos:column="18">Http1<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">::<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">CrLf<pos:position pos:line="4" pos:column="29"/></name></name><argument_list pos:line="4" pos:column="29">()<pos:position pos:line="4" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="33"/></condition><then pos:line="4" pos:column="33">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">true<pos:position pos:line="5" pos:column="20"/></literal></expr>;<pos:position pos:line="5" pos:column="21"/></return></block></then></if>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">Config<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">onoff<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">.<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">relaxed_header_parser<pos:position pos:line="7" pos:column="43"/></name></name> <operator pos:line="7" pos:column="44">&amp;&amp;<pos:position pos:line="7" pos:column="54"/></operator> <call><name><name pos:line="7" pos:column="47">tok<pos:position pos:line="7" pos:column="50"/></name><operator pos:line="7" pos:column="50">.<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="51">skipOne<pos:position pos:line="7" pos:column="58"/></name></name><argument_list pos:line="7" pos:column="58">(<argument><expr><name><name pos:line="7" pos:column="59">CharacterSet<pos:position pos:line="7" pos:column="71"/></name><operator pos:line="7" pos:column="71">::<pos:position pos:line="7" pos:column="73"/></operator><name pos:line="7" pos:column="73">LF<pos:position pos:line="7" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="77"/></condition><then pos:line="7" pos:column="77">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">true<pos:position pos:line="8" pos:column="20"/></literal></expr>;<pos:position pos:line="8" pos:column="21"/></return></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name><name pos:line="10" pos:column="9">tok<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">.<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">atEnd<pos:position pos:line="10" pos:column="18"/></name></name><argument_list pos:line="10" pos:column="18">()<pos:position pos:line="10" pos:column="20"/></argument_list></call> <operator pos:line="10" pos:column="21">||<pos:position pos:line="10" pos:column="23"/></operator> <operator pos:line="10" pos:column="24">(<pos:position pos:line="10" pos:column="25"/></operator><call><name><name pos:line="10" pos:column="25">tok<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">.<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">remaining<pos:position pos:line="10" pos:column="38"/></name></name><argument_list pos:line="10" pos:column="38">()<pos:position pos:line="10" pos:column="40"/></argument_list></call><operator pos:line="10" pos:column="40">.<pos:position pos:line="10" pos:column="41"/></operator><call><name pos:line="10" pos:column="41">length<pos:position pos:line="10" pos:column="47"/></name><argument_list pos:line="10" pos:column="47">()<pos:position pos:line="10" pos:column="49"/></argument_list></call> <operator pos:line="10" pos:column="50">==<pos:position pos:line="10" pos:column="52"/></operator> <literal type="number" pos:line="10" pos:column="53">1<pos:position pos:line="10" pos:column="54"/></literal> <operator pos:line="10" pos:column="55">&amp;&amp;<pos:position pos:line="10" pos:column="65"/></operator> <call><name><name pos:line="10" pos:column="58">tok<pos:position pos:line="10" pos:column="61"/></name><operator pos:line="10" pos:column="61">.<pos:position pos:line="10" pos:column="62"/></operator><name pos:line="10" pos:column="62">remaining<pos:position pos:line="10" pos:column="71"/></name></name><argument_list pos:line="10" pos:column="71">()<pos:position pos:line="10" pos:column="73"/></argument_list></call><operator pos:line="10" pos:column="73">.<pos:position pos:line="10" pos:column="74"/></operator><call><name pos:line="10" pos:column="74">at<pos:position pos:line="10" pos:column="76"/></name><argument_list pos:line="10" pos:column="76">(<argument><expr><literal type="number" pos:line="10" pos:column="77">0<pos:position pos:line="10" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="79"/></argument_list></call> <operator pos:line="10" pos:column="80">==<pos:position pos:line="10" pos:column="82"/></operator> <literal type="char" pos:line="10" pos:column="83">'\r'<pos:position pos:line="10" pos:column="87"/></literal><operator pos:line="10" pos:column="87">)<pos:position pos:line="10" pos:column="88"/></operator></expr>)<pos:position pos:line="10" pos:column="89"/></condition><then pos:line="10" pos:column="89">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">false<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></return></block></then></if> <comment type="line" pos:line="11" pos:column="23">// need more data</comment>

    <throw pos:line="13" pos:column="5">throw <expr><call><name pos:line="13" pos:column="11">TexcHere<pos:position pos:line="13" pos:column="19"/></name><argument_list pos:line="13" pos:column="19">(<argument><expr><literal type="string" pos:line="13" pos:column="20">"garbage instead of CRLF line terminator"<pos:position pos:line="13" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="63"/></throw>
    <return pos:line="14" pos:column="5">return <expr><literal type="boolean" pos:line="14" pos:column="12">false<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return> <comment type="line" pos:line="14" pos:column="19">// unreachable, but make naive compilers happy</comment>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
