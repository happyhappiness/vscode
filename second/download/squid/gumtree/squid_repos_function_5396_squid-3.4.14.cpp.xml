<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5396_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Auth<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Digest<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">UserRequest<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">HandleReply<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">(<parameter><decl><type><name pos:line="2" pos:column="40">void<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">data<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier> <name pos:line="2" pos:column="58">HelperReply<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">&amp;<pos:position pos:line="2" pos:column="75"/></modifier></type><name pos:line="2" pos:column="71">reply<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Auth<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">::<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">StateData<pos:position pos:line="4" pos:column="20"/></name></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">replyData<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><cast type="static" pos:line="4" pos:column="34">static_cast<argument_list type="generic" pos:line="4" pos:column="45">&lt;<argument><expr><name><name pos:line="4" pos:column="46">Auth<pos:position pos:line="4" pos:column="50"/></name><operator pos:line="4" pos:column="50">::<pos:position pos:line="4" pos:column="52"/></operator><name pos:line="4" pos:column="52">StateData<pos:position pos:line="4" pos:column="61"/></name></name> <operator pos:line="4" pos:column="62">*<pos:position pos:line="4" pos:column="63"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="67"/></argument_list><argument_list pos:line="4" pos:column="64">(<argument><expr><name pos:line="4" pos:column="65">data<pos:position pos:line="4" pos:column="69"/></name></expr></argument>)<pos:position pos:line="4" pos:column="70"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="71"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">29<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">9<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="19">HERE<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">&lt;&lt;<pos:position pos:line="5" pos:column="32"/></operator> <literal type="string" pos:line="5" pos:column="27">"reply="<pos:position pos:line="5" pos:column="35"/></literal> <operator pos:line="5" pos:column="36">&lt;&lt;<pos:position pos:line="5" pos:column="44"/></operator> <name pos:line="5" pos:column="39">reply<pos:position pos:line="5" pos:column="44"/></name></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">replyData<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">-&gt;<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="23">auth_user_request<pos:position pos:line="7" pos:column="40"/></name></name> <operator pos:line="7" pos:column="41">!=<pos:position pos:line="7" pos:column="43"/></operator> <name pos:line="7" pos:column="44">NULL<pos:position pos:line="7" pos:column="48"/></name></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="50"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">Auth<pos:position pos:line="8" pos:column="9"/></name><operator pos:line="8" pos:column="9">::<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">UserRequest<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">::<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="24">Pointer<pos:position pos:line="8" pos:column="31"/></name></name></type> <name pos:line="8" pos:column="32">auth_user_request<pos:position pos:line="8" pos:column="49"/></name> <init pos:line="8" pos:column="50">= <expr><name><name pos:line="8" pos:column="52">replyData<pos:position pos:line="8" pos:column="61"/></name><operator pos:line="8" pos:column="61">-&gt;<pos:position pos:line="8" pos:column="66"/></operator><name pos:line="8" pos:column="63">auth_user_request<pos:position pos:line="8" pos:column="80"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="81"/></decl_stmt>

    <comment type="line" pos:line="10" pos:column="5">// add new helper kv-pair notes to the credentials object</comment>
    <comment type="line" pos:line="11" pos:column="5">// so that any transaction using those credentials can access them</comment>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">auth_user_request<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">user<pos:position pos:line="12" pos:column="28"/></name></name><argument_list pos:line="12" pos:column="28">()<pos:position pos:line="12" pos:column="30"/></argument_list></call><operator pos:line="12" pos:column="30">-&gt;<pos:position pos:line="12" pos:column="35"/></operator><call><name><name pos:line="12" pos:column="32">notes<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">.<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="38">appendNewOnly<pos:position pos:line="12" pos:column="51"/></name></name><argument_list pos:line="12" pos:column="51">(<argument><expr><operator pos:line="12" pos:column="52">&amp;<pos:position pos:line="12" pos:column="57"/></operator><name><name pos:line="12" pos:column="53">reply<pos:position pos:line="12" pos:column="58"/></name><operator pos:line="12" pos:column="58">.<pos:position pos:line="12" pos:column="59"/></operator><name pos:line="12" pos:column="59">notes<pos:position pos:line="12" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="66"/></expr_stmt>
    <comment type="line" pos:line="13" pos:column="5">// remove any private credentials detail which got added.</comment>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">auth_user_request<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">user<pos:position pos:line="14" pos:column="28"/></name></name><argument_list pos:line="14" pos:column="28">()<pos:position pos:line="14" pos:column="30"/></argument_list></call><operator pos:line="14" pos:column="30">-&gt;<pos:position pos:line="14" pos:column="35"/></operator><call><name><name pos:line="14" pos:column="32">notes<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">.<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">remove<pos:position pos:line="14" pos:column="44"/></name></name><argument_list pos:line="14" pos:column="44">(<argument><expr><literal type="string" pos:line="14" pos:column="45">"ha1"<pos:position pos:line="14" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="52"/></expr_stmt>

    <decl_stmt><decl><specifier pos:line="16" pos:column="5">static<pos:position pos:line="16" pos:column="11"/></specifier> <type><name pos:line="16" pos:column="12">bool<pos:position pos:line="16" pos:column="16"/></name></type> <name pos:line="16" pos:column="17">oldHelperWarningDone<pos:position pos:line="16" pos:column="37"/></name> <init pos:line="16" pos:column="38">= <expr><literal type="boolean" pos:line="16" pos:column="40">false<pos:position pos:line="16" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="46"/></decl_stmt>
    <switch pos:line="17" pos:column="5">switch <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">reply<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">result<pos:position pos:line="17" pos:column="25"/></name></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition> <block pos:line="17" pos:column="27">{
    <case pos:line="18" pos:column="5">case <expr><name><name pos:line="18" pos:column="10">HelperReply<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">::<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">Unknown<pos:position pos:line="18" pos:column="30"/></name></name></expr>:<pos:position pos:line="18" pos:column="31"/></case> <block pos:line="18" pos:column="32">{
        <comment type="line" pos:line="19" pos:column="9">// Squid 3.3 and older the digest helper only returns a HA1 hash (no "OK")</comment>
        <comment type="line" pos:line="20" pos:column="9">// the HA1 will be found in content() for these responses.</comment>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">!<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">oldHelperWarningDone<pos:position pos:line="21" pos:column="34"/></name></expr>)<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35"> <block pos:line="21" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">debugs<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="number" pos:line="22" pos:column="20">29<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="24">DBG_IMPORTANT<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="39">"WARNING: Digest auth helper returned old format HA1 response. It needs to be upgraded."<pos:position pos:line="22" pos:column="127"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="128"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="129"/></expr_stmt>
            <expr_stmt><expr><name pos:line="23" pos:column="13">oldHelperWarningDone<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator><literal type="boolean" pos:line="23" pos:column="34">true<pos:position pos:line="23" pos:column="38"/></literal></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="26" pos:column="9">/* allow this because the digest_request pointer is purely local */</comment>
        <decl_stmt><decl><type><name><name pos:line="27" pos:column="9">Auth<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">::<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">Digest<pos:position pos:line="27" pos:column="21"/></name><operator pos:line="27" pos:column="21">::<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">User<pos:position pos:line="27" pos:column="27"/></name></name> <modifier pos:line="27" pos:column="28">*<pos:position pos:line="27" pos:column="29"/></modifier></type><name pos:line="27" pos:column="29">digest_user<pos:position pos:line="27" pos:column="40"/></name> <init pos:line="27" pos:column="41">= <expr><cast type="dynamic" pos:line="27" pos:column="43">dynamic_cast<argument_list type="generic" pos:line="27" pos:column="55">&lt;<argument><expr><name><name pos:line="27" pos:column="56">Auth<pos:position pos:line="27" pos:column="60"/></name><operator pos:line="27" pos:column="60">::<pos:position pos:line="27" pos:column="62"/></operator><name pos:line="27" pos:column="62">Digest<pos:position pos:line="27" pos:column="68"/></name><operator pos:line="27" pos:column="68">::<pos:position pos:line="27" pos:column="70"/></operator><name pos:line="27" pos:column="70">User<pos:position pos:line="27" pos:column="74"/></name></name> <operator pos:line="27" pos:column="75">*<pos:position pos:line="27" pos:column="76"/></operator></expr></argument>&gt;<pos:position pos:line="27" pos:column="80"/></argument_list><argument_list pos:line="27" pos:column="77">(<argument><expr><call><name><name pos:line="27" pos:column="78">auth_user_request<pos:position pos:line="27" pos:column="95"/></name><operator pos:line="27" pos:column="95">-&gt;<pos:position pos:line="27" pos:column="100"/></operator><name pos:line="27" pos:column="97">user<pos:position pos:line="27" pos:column="101"/></name></name><argument_list pos:line="27" pos:column="101">()<pos:position pos:line="27" pos:column="103"/></argument_list></call><operator pos:line="27" pos:column="103">.<pos:position pos:line="27" pos:column="104"/></operator><call><name pos:line="27" pos:column="104">getRaw<pos:position pos:line="27" pos:column="110"/></name><argument_list pos:line="27" pos:column="110">()<pos:position pos:line="27" pos:column="112"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="113"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="27" pos:column="114"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">assert<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">digest_user<pos:position pos:line="28" pos:column="27"/></name> <operator pos:line="28" pos:column="28">!=<pos:position pos:line="28" pos:column="30"/></operator> <name pos:line="28" pos:column="31">NULL<pos:position pos:line="28" pos:column="35"/></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="30" pos:column="9">CvtBin<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><call><name><name pos:line="30" pos:column="16">reply<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">.<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">other<pos:position pos:line="30" pos:column="27"/></name></name><argument_list pos:line="30" pos:column="27">()<pos:position pos:line="30" pos:column="29"/></argument_list></call><operator pos:line="30" pos:column="29">.<pos:position pos:line="30" pos:column="30"/></operator><call><name pos:line="30" pos:column="30">content<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">()<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="41">digest_user<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">-&gt;<pos:position pos:line="30" pos:column="57"/></operator><name pos:line="30" pos:column="54">HA1<pos:position pos:line="30" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="31" pos:column="9">digest_user<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">-&gt;<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="22">HA1created<pos:position pos:line="31" pos:column="32"/></name></name> <operator pos:line="31" pos:column="33">=<pos:position pos:line="31" pos:column="34"/></operator> <literal type="number" pos:line="31" pos:column="35">1<pos:position pos:line="31" pos:column="36"/></literal></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block>
    <break pos:line="33" pos:column="5">break;<pos:position pos:line="33" pos:column="11"/></break>

    <case pos:line="35" pos:column="5">case <expr><name><name pos:line="35" pos:column="10">HelperReply<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">::<pos:position pos:line="35" pos:column="23"/></operator><name pos:line="35" pos:column="23">Okay<pos:position pos:line="35" pos:column="27"/></name></name></expr>:<pos:position pos:line="35" pos:column="28"/></case> <block pos:line="35" pos:column="29">{
        <comment type="block" pos:line="36" pos:column="9">/* allow this because the digest_request pointer is purely local */</comment>
        <decl_stmt><decl><type><name><name pos:line="37" pos:column="9">Auth<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">::<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">Digest<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">::<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">User<pos:position pos:line="37" pos:column="27"/></name></name> <modifier pos:line="37" pos:column="28">*<pos:position pos:line="37" pos:column="29"/></modifier></type><name pos:line="37" pos:column="29">digest_user<pos:position pos:line="37" pos:column="40"/></name> <init pos:line="37" pos:column="41">= <expr><cast type="dynamic" pos:line="37" pos:column="43">dynamic_cast<argument_list type="generic" pos:line="37" pos:column="55">&lt;<argument><expr><name><name pos:line="37" pos:column="56">Auth<pos:position pos:line="37" pos:column="60"/></name><operator pos:line="37" pos:column="60">::<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="62">Digest<pos:position pos:line="37" pos:column="68"/></name><operator pos:line="37" pos:column="68">::<pos:position pos:line="37" pos:column="70"/></operator><name pos:line="37" pos:column="70">User<pos:position pos:line="37" pos:column="74"/></name></name> <operator pos:line="37" pos:column="75">*<pos:position pos:line="37" pos:column="76"/></operator></expr></argument>&gt;<pos:position pos:line="37" pos:column="80"/></argument_list><argument_list pos:line="37" pos:column="77">(<argument><expr><call><name><name pos:line="37" pos:column="78">auth_user_request<pos:position pos:line="37" pos:column="95"/></name><operator pos:line="37" pos:column="95">-&gt;<pos:position pos:line="37" pos:column="100"/></operator><name pos:line="37" pos:column="97">user<pos:position pos:line="37" pos:column="101"/></name></name><argument_list pos:line="37" pos:column="101">()<pos:position pos:line="37" pos:column="103"/></argument_list></call><operator pos:line="37" pos:column="103">.<pos:position pos:line="37" pos:column="104"/></operator><call><name pos:line="37" pos:column="104">getRaw<pos:position pos:line="37" pos:column="110"/></name><argument_list pos:line="37" pos:column="110">()<pos:position pos:line="37" pos:column="112"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="113"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="37" pos:column="114"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">assert<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">digest_user<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">!=<pos:position pos:line="38" pos:column="30"/></operator> <name pos:line="38" pos:column="31">NULL<pos:position pos:line="38" pos:column="35"/></name></expr></argument>)<pos:position pos:line="38" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt>

        <decl_stmt><decl><type><specifier pos:line="40" pos:column="9">const<pos:position pos:line="40" pos:column="14"/></specifier> <name pos:line="40" pos:column="15">char<pos:position pos:line="40" pos:column="19"/></name> <modifier pos:line="40" pos:column="20">*<pos:position pos:line="40" pos:column="21"/></modifier></type><name pos:line="40" pos:column="21">ha1Note<pos:position pos:line="40" pos:column="28"/></name> <init pos:line="40" pos:column="29">= <expr><call><name><name pos:line="40" pos:column="31">reply<pos:position pos:line="40" pos:column="36"/></name><operator pos:line="40" pos:column="36">.<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="37">notes<pos:position pos:line="40" pos:column="42"/></name><operator pos:line="40" pos:column="42">.<pos:position pos:line="40" pos:column="43"/></operator><name pos:line="40" pos:column="43">findFirst<pos:position pos:line="40" pos:column="52"/></name></name><argument_list pos:line="40" pos:column="52">(<argument><expr><literal type="string" pos:line="40" pos:column="53">"ha1"<pos:position pos:line="40" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="60"/></decl_stmt>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">ha1Note<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">!=<pos:position pos:line="41" pos:column="23"/></operator> <name pos:line="41" pos:column="24">NULL<pos:position pos:line="41" pos:column="28"/></name></expr>)<pos:position pos:line="41" pos:column="29"/></condition><then pos:line="41" pos:column="29"> <block pos:line="41" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">CvtBin<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><name pos:line="42" pos:column="20">ha1Note<pos:position pos:line="42" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="29">digest_user<pos:position pos:line="42" pos:column="40"/></name><operator pos:line="42" pos:column="40">-&gt;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="42">HA1<pos:position pos:line="42" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="43" pos:column="13">digest_user<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">-&gt;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="26">HA1created<pos:position pos:line="43" pos:column="36"/></name></name> <operator pos:line="43" pos:column="37">=<pos:position pos:line="43" pos:column="38"/></operator> <literal type="number" pos:line="43" pos:column="39">1<pos:position pos:line="43" pos:column="40"/></literal></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></then> <else pos:line="44" pos:column="11">else <block pos:line="44" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">debugs<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><literal type="number" pos:line="45" pos:column="20">29<pos:position pos:line="45" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="24">DBG_IMPORTANT<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="39">"ERROR: Digest auth helper did not produce a HA1. Using the wrong helper program? received: "<pos:position pos:line="45" pos:column="132"/></literal> <operator pos:line="45" pos:column="133">&lt;&lt;<pos:position pos:line="45" pos:column="141"/></operator> <name pos:line="45" pos:column="136">reply<pos:position pos:line="45" pos:column="141"/></name></expr></argument>)<pos:position pos:line="45" pos:column="142"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="143"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></else></if>
    }<pos:position pos:line="47" pos:column="6"/></block>
    <break pos:line="48" pos:column="5">break;<pos:position pos:line="48" pos:column="11"/></break>

    <case pos:line="50" pos:column="5">case <expr><name><name pos:line="50" pos:column="10">HelperReply<pos:position pos:line="50" pos:column="21"/></name><operator pos:line="50" pos:column="21">::<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">TT<pos:position pos:line="50" pos:column="25"/></name></name></expr>:<pos:position pos:line="50" pos:column="26"/></case>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">debugs<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><literal type="number" pos:line="51" pos:column="16">29<pos:position pos:line="51" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="20">DBG_IMPORTANT<pos:position pos:line="51" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="35">"ERROR: Digest auth does not support the result code received. Using the wrong helper program? received: "<pos:position pos:line="51" pos:column="141"/></literal> <operator pos:line="51" pos:column="142">&lt;&lt;<pos:position pos:line="51" pos:column="150"/></operator> <name pos:line="51" pos:column="145">reply<pos:position pos:line="51" pos:column="150"/></name></expr></argument>)<pos:position pos:line="51" pos:column="151"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="152"/></expr_stmt>
        <comment type="line" pos:line="52" pos:column="9">// fall through to next case. Handle this as an ERR response.</comment>

    <case pos:line="54" pos:column="5">case <expr><name><name pos:line="54" pos:column="10">HelperReply<pos:position pos:line="54" pos:column="21"/></name><operator pos:line="54" pos:column="21">::<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="23">BrokenHelper<pos:position pos:line="54" pos:column="35"/></name></name></expr>:<pos:position pos:line="54" pos:column="36"/></case>
        <comment type="line" pos:line="55" pos:column="9">// TODO retry the broken lookup on another helper?</comment>
        <comment type="line" pos:line="56" pos:column="9">// fall through to next case for now. Handle this as an ERR response silently.</comment>

    <case pos:line="58" pos:column="5">case <expr><name><name pos:line="58" pos:column="10">HelperReply<pos:position pos:line="58" pos:column="21"/></name><operator pos:line="58" pos:column="21">::<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="23">Error<pos:position pos:line="58" pos:column="28"/></name></name></expr>:<pos:position pos:line="58" pos:column="29"/></case> <block pos:line="58" pos:column="30">{
        <comment type="block" pos:line="59" pos:column="9">/* allow this because the digest_request pointer is purely local */</comment>
        <decl_stmt><decl><type><name><name pos:line="60" pos:column="9">Auth<pos:position pos:line="60" pos:column="13"/></name><operator pos:line="60" pos:column="13">::<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="15">Digest<pos:position pos:line="60" pos:column="21"/></name><operator pos:line="60" pos:column="21">::<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="23">UserRequest<pos:position pos:line="60" pos:column="34"/></name></name> <modifier pos:line="60" pos:column="35">*<pos:position pos:line="60" pos:column="36"/></modifier></type><name pos:line="60" pos:column="36">digest_request<pos:position pos:line="60" pos:column="50"/></name> <init pos:line="60" pos:column="51">= <expr><cast type="dynamic" pos:line="60" pos:column="53">dynamic_cast<argument_list type="generic" pos:line="60" pos:column="65">&lt;<argument><expr><name><name pos:line="60" pos:column="66">Auth<pos:position pos:line="60" pos:column="70"/></name><operator pos:line="60" pos:column="70">::<pos:position pos:line="60" pos:column="72"/></operator><name pos:line="60" pos:column="72">Digest<pos:position pos:line="60" pos:column="78"/></name><operator pos:line="60" pos:column="78">::<pos:position pos:line="60" pos:column="80"/></operator><name pos:line="60" pos:column="80">UserRequest<pos:position pos:line="60" pos:column="91"/></name></name> <operator pos:line="60" pos:column="92">*<pos:position pos:line="60" pos:column="93"/></operator></expr></argument>&gt;<pos:position pos:line="60" pos:column="97"/></argument_list><argument_list pos:line="60" pos:column="94">(<argument><expr><call><name><name pos:line="60" pos:column="95">auth_user_request<pos:position pos:line="60" pos:column="112"/></name><operator pos:line="60" pos:column="112">.<pos:position pos:line="60" pos:column="113"/></operator><name pos:line="60" pos:column="113">getRaw<pos:position pos:line="60" pos:column="119"/></name></name><argument_list pos:line="60" pos:column="119">()<pos:position pos:line="60" pos:column="121"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="122"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="60" pos:column="123"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">assert<pos:position pos:line="61" pos:column="15"/></name><argument_list pos:line="61" pos:column="15">(<argument><expr><name pos:line="61" pos:column="16">digest_request<pos:position pos:line="61" pos:column="30"/></name></expr></argument>)<pos:position pos:line="61" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="63" pos:column="9">digest_request<pos:position pos:line="63" pos:column="23"/></name><operator pos:line="63" pos:column="23">-&gt;<pos:position pos:line="63" pos:column="28"/></operator><name pos:line="63" pos:column="25">user<pos:position pos:line="63" pos:column="29"/></name></name><argument_list pos:line="63" pos:column="29">()<pos:position pos:line="63" pos:column="31"/></argument_list></call><operator pos:line="63" pos:column="31">-&gt;<pos:position pos:line="63" pos:column="36"/></operator><call><name pos:line="63" pos:column="33">credentials<pos:position pos:line="63" pos:column="44"/></name><argument_list pos:line="63" pos:column="44">(<argument><expr><name><name pos:line="63" pos:column="45">Auth<pos:position pos:line="63" pos:column="49"/></name><operator pos:line="63" pos:column="49">::<pos:position pos:line="63" pos:column="51"/></operator><name pos:line="63" pos:column="51">Failed<pos:position pos:line="63" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="64" pos:column="9">digest_request<pos:position pos:line="64" pos:column="23"/></name><operator pos:line="64" pos:column="23">-&gt;<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="25">flags<pos:position pos:line="64" pos:column="30"/></name><operator pos:line="64" pos:column="30">.<pos:position pos:line="64" pos:column="31"/></operator><name pos:line="64" pos:column="31">invalid_password<pos:position pos:line="64" pos:column="47"/></name></name> <operator pos:line="64" pos:column="48">=<pos:position pos:line="64" pos:column="49"/></operator> <literal type="boolean" pos:line="64" pos:column="50">true<pos:position pos:line="64" pos:column="54"/></literal></expr>;<pos:position pos:line="64" pos:column="55"/></expr_stmt>

        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">const<pos:position pos:line="66" pos:column="14"/></specifier> <name pos:line="66" pos:column="15">char<pos:position pos:line="66" pos:column="19"/></name> <modifier pos:line="66" pos:column="20">*<pos:position pos:line="66" pos:column="21"/></modifier></type><name pos:line="66" pos:column="21">msgNote<pos:position pos:line="66" pos:column="28"/></name> <init pos:line="66" pos:column="29">= <expr><call><name><name pos:line="66" pos:column="31">reply<pos:position pos:line="66" pos:column="36"/></name><operator pos:line="66" pos:column="36">.<pos:position pos:line="66" pos:column="37"/></operator><name pos:line="66" pos:column="37">notes<pos:position pos:line="66" pos:column="42"/></name><operator pos:line="66" pos:column="42">.<pos:position pos:line="66" pos:column="43"/></operator><name pos:line="66" pos:column="43">find<pos:position pos:line="66" pos:column="47"/></name></name><argument_list pos:line="66" pos:column="47">(<argument><expr><literal type="string" pos:line="66" pos:column="48">"message"<pos:position pos:line="66" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="66" pos:column="59"/></decl_stmt>
        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">msgNote<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">!=<pos:position pos:line="67" pos:column="23"/></operator> <name pos:line="67" pos:column="24">NULL<pos:position pos:line="67" pos:column="28"/></name></expr>)<pos:position pos:line="67" pos:column="29"/></condition><then pos:line="67" pos:column="29"> <block pos:line="67" pos:column="30">{
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">digest_request<pos:position pos:line="68" pos:column="27"/></name><operator pos:line="68" pos:column="27">-&gt;<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="29">setDenyMessage<pos:position pos:line="68" pos:column="43"/></name></name><argument_list pos:line="68" pos:column="43">(<argument><expr><name pos:line="68" pos:column="44">msgNote<pos:position pos:line="68" pos:column="51"/></name></expr></argument>)<pos:position pos:line="68" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="69" pos:column="10"/></block></then> <elseif pos:line="69" pos:column="11">else <if pos:line="69" pos:column="16">if <condition pos:line="69" pos:column="19">(<expr><call><name><name pos:line="69" pos:column="20">reply<pos:position pos:line="69" pos:column="25"/></name><operator pos:line="69" pos:column="25">.<pos:position pos:line="69" pos:column="26"/></operator><name pos:line="69" pos:column="26">other<pos:position pos:line="69" pos:column="31"/></name></name><argument_list pos:line="69" pos:column="31">()<pos:position pos:line="69" pos:column="33"/></argument_list></call><operator pos:line="69" pos:column="33">.<pos:position pos:line="69" pos:column="34"/></operator><call><name pos:line="69" pos:column="34">hasContent<pos:position pos:line="69" pos:column="44"/></name><argument_list pos:line="69" pos:column="44">()<pos:position pos:line="69" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="47"/></condition><then pos:line="69" pos:column="47"> <block pos:line="69" pos:column="48">{
            <comment type="line" pos:line="70" pos:column="13">// old helpers did send ERR result but a bare message string instead of message= key name.</comment>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">digest_request<pos:position pos:line="71" pos:column="27"/></name><operator pos:line="71" pos:column="27">-&gt;<pos:position pos:line="71" pos:column="32"/></operator><name pos:line="71" pos:column="29">setDenyMessage<pos:position pos:line="71" pos:column="43"/></name></name><argument_list pos:line="71" pos:column="43">(<argument><expr><call><name><name pos:line="71" pos:column="44">reply<pos:position pos:line="71" pos:column="49"/></name><operator pos:line="71" pos:column="49">.<pos:position pos:line="71" pos:column="50"/></operator><name pos:line="71" pos:column="50">other<pos:position pos:line="71" pos:column="55"/></name></name><argument_list pos:line="71" pos:column="55">()<pos:position pos:line="71" pos:column="57"/></argument_list></call><operator pos:line="71" pos:column="57">.<pos:position pos:line="71" pos:column="58"/></operator><call><name pos:line="71" pos:column="58">content<pos:position pos:line="71" pos:column="65"/></name><argument_list pos:line="71" pos:column="65">()<pos:position pos:line="71" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="69"/></expr_stmt>
            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><operator pos:line="72" pos:column="17">!<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="18">oldHelperWarningDone<pos:position pos:line="72" pos:column="38"/></name></expr>)<pos:position pos:line="72" pos:column="39"/></condition><then pos:line="72" pos:column="39"> <block pos:line="72" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="73" pos:column="17">debugs<pos:position pos:line="73" pos:column="23"/></name><argument_list pos:line="73" pos:column="23">(<argument><expr><literal type="number" pos:line="73" pos:column="24">29<pos:position pos:line="73" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="28">DBG_IMPORTANT<pos:position pos:line="73" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="43">"WARNING: Digest auth helper returned old format ERR response. It needs to be upgraded."<pos:position pos:line="73" pos:column="131"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="132"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="133"/></expr_stmt>
                <expr_stmt><expr><name pos:line="74" pos:column="17">oldHelperWarningDone<pos:position pos:line="74" pos:column="37"/></name><operator pos:line="74" pos:column="37">=<pos:position pos:line="74" pos:column="38"/></operator><literal type="boolean" pos:line="74" pos:column="38">true<pos:position pos:line="74" pos:column="42"/></literal></expr>;<pos:position pos:line="74" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="75" pos:column="14"/></block></then></if>
        }<pos:position pos:line="76" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="77" pos:column="6"/></block>
    <break pos:line="78" pos:column="5">break;<pos:position pos:line="78" pos:column="11"/></break>
    }<pos:position pos:line="79" pos:column="6"/></block></switch>

    <decl_stmt><decl><type><name pos:line="81" pos:column="5">void<pos:position pos:line="81" pos:column="9"/></name> <modifier pos:line="81" pos:column="10">*<pos:position pos:line="81" pos:column="11"/></modifier></type><name pos:line="81" pos:column="11">cbdata<pos:position pos:line="81" pos:column="17"/></name> <init pos:line="81" pos:column="18">= <expr><name pos:line="81" pos:column="20">NULL<pos:position pos:line="81" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="81" pos:column="25"/></decl_stmt>
    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><call><name pos:line="82" pos:column="9">cbdataReferenceValidDone<pos:position pos:line="82" pos:column="33"/></name><argument_list pos:line="82" pos:column="33">(<argument><expr><name><name pos:line="82" pos:column="34">replyData<pos:position pos:line="82" pos:column="43"/></name><operator pos:line="82" pos:column="43">-&gt;<pos:position pos:line="82" pos:column="48"/></operator><name pos:line="82" pos:column="45">data<pos:position pos:line="82" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="51">&amp;<pos:position pos:line="82" pos:column="56"/></operator><name pos:line="82" pos:column="52">cbdata<pos:position pos:line="82" pos:column="58"/></name></expr></argument>)<pos:position pos:line="82" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="82" pos:column="60"/></condition><then pos:line="82" pos:column="60">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="83" pos:column="9">replyData<pos:position pos:line="83" pos:column="18"/></name><operator pos:line="83" pos:column="18">-&gt;<pos:position pos:line="83" pos:column="23"/></operator><name pos:line="83" pos:column="20">handler<pos:position pos:line="83" pos:column="27"/></name></name><argument_list pos:line="83" pos:column="27">(<argument><expr><name pos:line="83" pos:column="28">cbdata<pos:position pos:line="83" pos:column="34"/></name></expr></argument>)<pos:position pos:line="83" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="36"/></expr_stmt></block></then></if>

    <expr_stmt><expr><operator pos:line="85" pos:column="5">delete<pos:position pos:line="85" pos:column="11"/></operator> <name pos:line="85" pos:column="12">replyData<pos:position pos:line="85" pos:column="21"/></name></expr>;<pos:position pos:line="85" pos:column="22"/></expr_stmt>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
