<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1234.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">parseOneConfigFile<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">file_name<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">unsigned<pos:position pos:line="2" pos:column="51"/></name> <name pos:line="2" pos:column="52">int<pos:position pos:line="2" pos:column="55"/></name></type> <name pos:line="2" pos:column="56">depth<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">FILE<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">fp<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name pos:line="4" pos:column="16">NULL<pos:position pos:line="4" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">orig_cfg_filename<pos:position pos:line="5" pos:column="34"/></name> <init pos:line="5" pos:column="35">= <expr><name pos:line="5" pos:column="37">cfg_filename<pos:position pos:line="5" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">int<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">orig_config_lineno<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><name pos:line="6" pos:column="36">config_lineno<pos:position pos:line="6" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">token<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><name pos:line="7" pos:column="19">NULL<pos:position pos:line="7" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">tmp_line<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">NULL<pos:position pos:line="8" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">tmp_line_len<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">err_count<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">is_pipe<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">3<pos:position pos:line="13" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="15">DBG_IMPORTANT<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="30">"Processing Configuration File: "<pos:position pos:line="13" pos:column="63"/></literal> <operator pos:line="13" pos:column="64">&lt;&lt;<pos:position pos:line="13" pos:column="72"/></operator> <name pos:line="13" pos:column="67">file_name<pos:position pos:line="13" pos:column="76"/></name> <operator pos:line="13" pos:column="77">&lt;&lt;<pos:position pos:line="13" pos:column="85"/></operator> <literal type="string" pos:line="13" pos:column="80">" (depth "<pos:position pos:line="13" pos:column="90"/></literal> <operator pos:line="13" pos:column="91">&lt;&lt;<pos:position pos:line="13" pos:column="99"/></operator> <name pos:line="13" pos:column="94">depth<pos:position pos:line="13" pos:column="99"/></name> <operator pos:line="13" pos:column="100">&lt;&lt;<pos:position pos:line="13" pos:column="108"/></operator> <literal type="string" pos:line="13" pos:column="103">")"<pos:position pos:line="13" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="108"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">depth<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">&gt;<pos:position pos:line="14" pos:column="19"/></operator> <literal type="number" pos:line="14" pos:column="17">16<pos:position pos:line="14" pos:column="19"/></literal></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fatalf<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="string" pos:line="15" pos:column="16">"WARNING: can't include %s: includes are nested too deeply (&gt;16)!\n"<pos:position pos:line="15" pos:column="87"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="86">file_name<pos:position pos:line="15" pos:column="95"/></name></expr></argument>)<pos:position pos:line="15" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="97"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><literal type="number" pos:line="16" pos:column="16">1<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">file_name<pos:position pos:line="19" pos:column="18"/></name><index pos:line="19" pos:column="18">[<expr><literal type="number" pos:line="19" pos:column="19">0<pos:position pos:line="19" pos:column="20"/></literal></expr>]<pos:position pos:line="19" pos:column="21"/></index></name> <operator pos:line="19" pos:column="22">==<pos:position pos:line="19" pos:column="24"/></operator> <literal type="char" pos:line="19" pos:column="25">'!'<pos:position pos:line="19" pos:column="28"/></literal> <operator pos:line="19" pos:column="29">||<pos:position pos:line="19" pos:column="31"/></operator> <name><name pos:line="19" pos:column="32">file_name<pos:position pos:line="19" pos:column="41"/></name><index pos:line="19" pos:column="41">[<expr><literal type="number" pos:line="19" pos:column="42">0<pos:position pos:line="19" pos:column="43"/></literal></expr>]<pos:position pos:line="19" pos:column="44"/></index></name> <operator pos:line="19" pos:column="45">==<pos:position pos:line="19" pos:column="47"/></operator> <literal type="char" pos:line="19" pos:column="48">'|'<pos:position pos:line="19" pos:column="51"/></literal></expr>)<pos:position pos:line="19" pos:column="52"/></condition><then pos:line="19" pos:column="52"> <block pos:line="19" pos:column="53">{
        <expr_stmt><expr><name pos:line="20" pos:column="9">fp<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">popen<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">file_name<pos:position pos:line="20" pos:column="29"/></name> <operator pos:line="20" pos:column="30">+<pos:position pos:line="20" pos:column="31"/></operator> <literal type="number" pos:line="20" pos:column="32">1<pos:position pos:line="20" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="35">"r"<pos:position pos:line="20" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="21" pos:column="9">is_pipe<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="19">1<pos:position pos:line="21" pos:column="20"/></literal></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then> <else pos:line="22" pos:column="7">else <block pos:line="22" pos:column="12">{
        <expr_stmt><expr><name pos:line="23" pos:column="9">fp<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">fopen<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">file_name<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="31">"r"<pos:position pos:line="23" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></else></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">fp<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">==<pos:position pos:line="26" pos:column="14"/></operator> <name pos:line="26" pos:column="15">NULL<pos:position pos:line="26" pos:column="19"/></name></expr>)<pos:position pos:line="26" pos:column="20"/></condition><then pos:line="26" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="9">fatalf<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="string" pos:line="27" pos:column="16">"Unable to open configuration file: %s: %s"<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="61">file_name<pos:position pos:line="27" pos:column="70"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="72">xstrerror<pos:position pos:line="27" pos:column="81"/></name><argument_list pos:line="27" pos:column="81">()<pos:position pos:line="27" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="85"/></expr_stmt></block></then></if>

<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="29" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">setmode<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><call><name pos:line="30" pos:column="13">fileno<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">fp<pos:position pos:line="30" pos:column="22"/></name></expr></argument>)<pos:position pos:line="30" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="25">O_TEXT<pos:position pos:line="30" pos:column="31"/></name></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">SetConfigFilename<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><name pos:line="33" pos:column="23">file_name<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="34">bool<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name pos:line="33" pos:column="39">is_pipe<pos:position pos:line="33" pos:column="46"/></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">memset<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><name pos:line="35" pos:column="12">config_input_line<pos:position pos:line="35" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="31">'\0'<pos:position pos:line="35" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="37">BUFSIZ<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><name pos:line="37" pos:column="5">config_lineno<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <literal type="number" pos:line="37" pos:column="21">0<pos:position pos:line="37" pos:column="22"/></literal></expr>;<pos:position pos:line="37" pos:column="23"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="39" pos:column="5">std<pos:position pos:line="39" pos:column="8"/></name><operator pos:line="39" pos:column="8">::<pos:position pos:line="39" pos:column="10"/></operator><name><name pos:line="39" pos:column="10">vector<pos:position pos:line="39" pos:column="16"/></name><argument_list type="generic" pos:line="39" pos:column="16">&lt;<argument><expr><name pos:line="39" pos:column="17">bool<pos:position pos:line="39" pos:column="21"/></name></expr></argument>&gt;<pos:position pos:line="39" pos:column="25"/></argument_list></name></name></type> <name pos:line="39" pos:column="23">if_states<pos:position pos:line="39" pos:column="32"/></name></decl>;<pos:position pos:line="39" pos:column="33"/></decl_stmt>
    <while pos:line="40" pos:column="5">while <condition pos:line="40" pos:column="11">(<expr><call><name pos:line="40" pos:column="12">fgets<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><name pos:line="40" pos:column="18">config_input_line<pos:position pos:line="40" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="37">BUFSIZ<pos:position pos:line="40" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="45">fp<pos:position pos:line="40" pos:column="47"/></name></expr></argument>)<pos:position pos:line="40" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="49"/></condition> <block pos:line="40" pos:column="50">{
        <expr_stmt><expr><operator pos:line="41" pos:column="9">++<pos:position pos:line="41" pos:column="11"/></operator><name pos:line="41" pos:column="11">config_lineno<pos:position pos:line="41" pos:column="24"/></name></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt>

        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">(<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">token<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <call><name pos:line="43" pos:column="22">strchr<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">config_input_line<pos:position pos:line="43" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="48">'\n'<pos:position pos:line="43" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="53"/></argument_list></call><operator pos:line="43" pos:column="53">)<pos:position pos:line="43" pos:column="54"/></operator></expr>)<pos:position pos:line="43" pos:column="55"/></condition><then pos:line="43" pos:column="55">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="44" pos:column="13">*<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">token<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">=<pos:position pos:line="44" pos:column="21"/></operator> <literal type="char" pos:line="44" pos:column="22">'\0'<pos:position pos:line="44" pos:column="26"/></literal></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt></block></then></if>

        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">(<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">token<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">=<pos:position pos:line="46" pos:column="21"/></operator> <call><name pos:line="46" pos:column="22">strchr<pos:position pos:line="46" pos:column="28"/></name><argument_list pos:line="46" pos:column="28">(<argument><expr><name pos:line="46" pos:column="29">config_input_line<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="46" pos:column="48">'\r'<pos:position pos:line="46" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call><operator pos:line="46" pos:column="53">)<pos:position pos:line="46" pos:column="54"/></operator></expr>)<pos:position pos:line="46" pos:column="55"/></condition><then pos:line="46" pos:column="55">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="47" pos:column="13">*<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">token<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <literal type="char" pos:line="47" pos:column="22">'\0'<pos:position pos:line="47" pos:column="26"/></literal></expr>;<pos:position pos:line="47" pos:column="27"/></expr_stmt></block></then></if>

        <comment type="line" pos:line="49" pos:column="9">// strip any prefix whitespace off the line.</comment>
        <decl_stmt><decl><type><specifier pos:line="50" pos:column="9">const<pos:position pos:line="50" pos:column="14"/></specifier> <name pos:line="50" pos:column="15">char<pos:position pos:line="50" pos:column="19"/></name> <modifier pos:line="50" pos:column="20">*<pos:position pos:line="50" pos:column="21"/></modifier></type><name pos:line="50" pos:column="21">p<pos:position pos:line="50" pos:column="22"/></name> <init pos:line="50" pos:column="23">= <expr><call><name pos:line="50" pos:column="25">skip_ws<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name pos:line="50" pos:column="33">config_input_line<pos:position pos:line="50" pos:column="50"/></name></expr></argument>)<pos:position pos:line="50" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="52"/></decl_stmt>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">config_input_line<pos:position pos:line="51" pos:column="30"/></name> <operator pos:line="51" pos:column="31">!=<pos:position pos:line="51" pos:column="33"/></operator> <name pos:line="51" pos:column="34">p<pos:position pos:line="51" pos:column="35"/></name></expr>)<pos:position pos:line="51" pos:column="36"/></condition><then pos:line="51" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="52" pos:column="13">memmove<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name pos:line="52" pos:column="21">config_input_line<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="40">p<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><call><name pos:line="52" pos:column="43">strlen<pos:position pos:line="52" pos:column="49"/></name><argument_list pos:line="52" pos:column="49">(<argument><expr><name pos:line="52" pos:column="50">p<pos:position pos:line="52" pos:column="51"/></name></expr></argument>)<pos:position pos:line="52" pos:column="52"/></argument_list></call><operator pos:line="52" pos:column="52">+<pos:position pos:line="52" pos:column="53"/></operator><literal type="number" pos:line="52" pos:column="53">1<pos:position pos:line="52" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="56"/></expr_stmt></block></then></if>

        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><call><name pos:line="54" pos:column="13">strncmp<pos:position pos:line="54" pos:column="20"/></name><argument_list pos:line="54" pos:column="20">(<argument><expr><name pos:line="54" pos:column="21">config_input_line<pos:position pos:line="54" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="40">"#line "<pos:position pos:line="54" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="50">6<pos:position pos:line="54" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="52"/></argument_list></call> <operator pos:line="54" pos:column="53">==<pos:position pos:line="54" pos:column="55"/></operator> <literal type="number" pos:line="54" pos:column="56">0<pos:position pos:line="54" pos:column="57"/></literal></expr>)<pos:position pos:line="54" pos:column="58"/></condition><then pos:line="54" pos:column="58"> <block pos:line="54" pos:column="59">{
            <decl_stmt><decl><specifier pos:line="55" pos:column="13">static<pos:position pos:line="55" pos:column="19"/></specifier> <type><name pos:line="55" pos:column="20">char<pos:position pos:line="55" pos:column="24"/></name></type> <name><name pos:line="55" pos:column="25">new_file_name<pos:position pos:line="55" pos:column="38"/></name><index pos:line="55" pos:column="38">[<expr><literal type="number" pos:line="55" pos:column="39">1024<pos:position pos:line="55" pos:column="43"/></literal></expr>]<pos:position pos:line="55" pos:column="44"/></index></name></decl>;<pos:position pos:line="55" pos:column="45"/></decl_stmt>
            <decl_stmt><decl><specifier pos:line="56" pos:column="13">static<pos:position pos:line="56" pos:column="19"/></specifier> <type><name pos:line="56" pos:column="20">char<pos:position pos:line="56" pos:column="24"/></name> <modifier pos:line="56" pos:column="25">*<pos:position pos:line="56" pos:column="26"/></modifier></type><name pos:line="56" pos:column="26">file<pos:position pos:line="56" pos:column="30"/></name></decl>;<pos:position pos:line="56" pos:column="31"/></decl_stmt>
            <decl_stmt><decl><specifier pos:line="57" pos:column="13">static<pos:position pos:line="57" pos:column="19"/></specifier> <type><name pos:line="57" pos:column="20">char<pos:position pos:line="57" pos:column="24"/></name></type> <name pos:line="57" pos:column="25">new_lineno<pos:position pos:line="57" pos:column="35"/></name></decl>;<pos:position pos:line="57" pos:column="36"/></decl_stmt>
            <expr_stmt><expr><name pos:line="58" pos:column="13">token<pos:position pos:line="58" pos:column="18"/></name> <operator pos:line="58" pos:column="19">=<pos:position pos:line="58" pos:column="20"/></operator> <name pos:line="58" pos:column="21">config_input_line<pos:position pos:line="58" pos:column="38"/></name> <operator pos:line="58" pos:column="39">+<pos:position pos:line="58" pos:column="40"/></operator> <literal type="number" pos:line="58" pos:column="41">6<pos:position pos:line="58" pos:column="42"/></literal></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name pos:line="59" pos:column="13">new_lineno<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <call><name pos:line="59" pos:column="26">strtol<pos:position pos:line="59" pos:column="32"/></name><argument_list pos:line="59" pos:column="32">(<argument><expr><name pos:line="59" pos:column="33">token<pos:position pos:line="59" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="40">&amp;<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="41">file<pos:position pos:line="59" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="47">0<pos:position pos:line="59" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></call> <operator pos:line="59" pos:column="50">-<pos:position pos:line="59" pos:column="51"/></operator> <literal type="number" pos:line="59" pos:column="52">1<pos:position pos:line="59" pos:column="53"/></literal></expr>;<pos:position pos:line="59" pos:column="54"/></expr_stmt>

            <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><name pos:line="61" pos:column="17">file<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">==<pos:position pos:line="61" pos:column="24"/></operator> <name pos:line="61" pos:column="25">token<pos:position pos:line="61" pos:column="30"/></name></expr>)<pos:position pos:line="61" pos:column="31"/></condition><then pos:line="61" pos:column="31">
                <block type="pseudo"><continue pos:line="62" pos:column="17">continue;<pos:position pos:line="62" pos:column="26"/></continue></block></then></if>   <comment type="block" pos:line="62" pos:column="29">/* Not a valid #line directive, may be a comment */</comment>

            <while pos:line="64" pos:column="13">while <condition pos:line="64" pos:column="19">(<expr><operator pos:line="64" pos:column="20">*<pos:position pos:line="64" pos:column="21"/></operator><name pos:line="64" pos:column="21">file<pos:position pos:line="64" pos:column="25"/></name> <operator pos:line="64" pos:column="26">&amp;&amp;<pos:position pos:line="64" pos:column="36"/></operator> <call><name pos:line="64" pos:column="29">xisspace<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><operator pos:line="64" pos:column="38">(<pos:position pos:line="64" pos:column="39"/></operator><name pos:line="64" pos:column="39">unsigned<pos:position pos:line="64" pos:column="47"/></name> <name pos:line="64" pos:column="48">char<pos:position pos:line="64" pos:column="52"/></name><operator pos:line="64" pos:column="52">)<pos:position pos:line="64" pos:column="53"/></operator> <operator pos:line="64" pos:column="54">*<pos:position pos:line="64" pos:column="55"/></operator><name pos:line="64" pos:column="55">file<pos:position pos:line="64" pos:column="59"/></name></expr></argument>)<pos:position pos:line="64" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="61"/></condition>
                <block type="pseudo"><expr_stmt><expr><operator pos:line="65" pos:column="17">++<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="19">file<pos:position pos:line="65" pos:column="23"/></name></expr>;<pos:position pos:line="65" pos:column="24"/></expr_stmt></block></while>

            <if pos:line="67" pos:column="13">if <condition pos:line="67" pos:column="16">(<expr><operator pos:line="67" pos:column="17">*<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="18">file<pos:position pos:line="67" pos:column="22"/></name></expr>)<pos:position pos:line="67" pos:column="23"/></condition><then pos:line="67" pos:column="23"> <block pos:line="67" pos:column="24">{
                <if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><operator pos:line="68" pos:column="21">*<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="22">file<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">!=<pos:position pos:line="68" pos:column="29"/></operator> <literal type="char" pos:line="68" pos:column="30">'"'<pos:position pos:line="68" pos:column="33"/></literal></expr>)<pos:position pos:line="68" pos:column="34"/></condition><then pos:line="68" pos:column="34">
                    <block type="pseudo"><continue pos:line="69" pos:column="21">continue;<pos:position pos:line="69" pos:column="30"/></continue></block></then></if>   <comment type="block" pos:line="69" pos:column="33">/* Not a valid #line directive, may be a comment */</comment>

                <expr_stmt><expr><call><name pos:line="71" pos:column="17">xstrncpy<pos:position pos:line="71" pos:column="25"/></name><argument_list pos:line="71" pos:column="25">(<argument><expr><name pos:line="71" pos:column="26">new_file_name<pos:position pos:line="71" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="41">file<pos:position pos:line="71" pos:column="45"/></name> <operator pos:line="71" pos:column="46">+<pos:position pos:line="71" pos:column="47"/></operator> <literal type="number" pos:line="71" pos:column="48">1<pos:position pos:line="71" pos:column="49"/></literal></expr></argument>, <argument><expr><sizeof pos:line="71" pos:column="51">sizeof<argument_list pos:line="71" pos:column="57">(<argument><expr><name pos:line="71" pos:column="58">new_file_name<pos:position pos:line="71" pos:column="71"/></name></expr></argument>)<pos:position pos:line="71" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="71" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="74"/></expr_stmt>

                <if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><operator pos:line="73" pos:column="21">(<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="22">token<pos:position pos:line="73" pos:column="27"/></name> <operator pos:line="73" pos:column="28">=<pos:position pos:line="73" pos:column="29"/></operator> <call><name pos:line="73" pos:column="30">strchr<pos:position pos:line="73" pos:column="36"/></name><argument_list pos:line="73" pos:column="36">(<argument><expr><name pos:line="73" pos:column="37">new_file_name<pos:position pos:line="73" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="73" pos:column="52">'"'<pos:position pos:line="73" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="56"/></argument_list></call><operator pos:line="73" pos:column="56">)<pos:position pos:line="73" pos:column="57"/></operator></expr>)<pos:position pos:line="73" pos:column="58"/></condition><then pos:line="73" pos:column="58">
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="74" pos:column="21">*<pos:position pos:line="74" pos:column="22"/></operator><name pos:line="74" pos:column="22">token<pos:position pos:line="74" pos:column="27"/></name> <operator pos:line="74" pos:column="28">=<pos:position pos:line="74" pos:column="29"/></operator> <literal type="char" pos:line="74" pos:column="30">'\0'<pos:position pos:line="74" pos:column="34"/></literal></expr>;<pos:position pos:line="74" pos:column="35"/></expr_stmt></block></then></if>

                <expr_stmt><expr><call><name pos:line="76" pos:column="17">SetConfigFilename<pos:position pos:line="76" pos:column="34"/></name><argument_list pos:line="76" pos:column="34">(<argument><expr><name pos:line="76" pos:column="35">new_file_name<pos:position pos:line="76" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="76" pos:column="50">false<pos:position pos:line="76" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="77" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="79" pos:column="13">config_lineno<pos:position pos:line="79" pos:column="26"/></name> <operator pos:line="79" pos:column="27">=<pos:position pos:line="79" pos:column="28"/></operator> <name pos:line="79" pos:column="29">new_lineno<pos:position pos:line="79" pos:column="39"/></name></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="80" pos:column="10"/></block></then></if>

        <if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name><name pos:line="82" pos:column="13">config_input_line<pos:position pos:line="82" pos:column="30"/></name><index pos:line="82" pos:column="30">[<expr><literal type="number" pos:line="82" pos:column="31">0<pos:position pos:line="82" pos:column="32"/></literal></expr>]<pos:position pos:line="82" pos:column="33"/></index></name> <operator pos:line="82" pos:column="34">==<pos:position pos:line="82" pos:column="36"/></operator> <literal type="char" pos:line="82" pos:column="37">'#'<pos:position pos:line="82" pos:column="40"/></literal></expr>)<pos:position pos:line="82" pos:column="41"/></condition><then pos:line="82" pos:column="41">
            <block type="pseudo"><continue pos:line="83" pos:column="13">continue;<pos:position pos:line="83" pos:column="22"/></continue></block></then></if>

        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name><name pos:line="85" pos:column="13">config_input_line<pos:position pos:line="85" pos:column="30"/></name><index pos:line="85" pos:column="30">[<expr><literal type="number" pos:line="85" pos:column="31">0<pos:position pos:line="85" pos:column="32"/></literal></expr>]<pos:position pos:line="85" pos:column="33"/></index></name> <operator pos:line="85" pos:column="34">==<pos:position pos:line="85" pos:column="36"/></operator> <literal type="char" pos:line="85" pos:column="37">'\0'<pos:position pos:line="85" pos:column="41"/></literal></expr>)<pos:position pos:line="85" pos:column="42"/></condition><then pos:line="85" pos:column="42">
            <block type="pseudo"><continue pos:line="86" pos:column="13">continue;<pos:position pos:line="86" pos:column="22"/></continue></block></then></if>

        <decl_stmt><decl><type><specifier pos:line="88" pos:column="9">const<pos:position pos:line="88" pos:column="14"/></specifier> <name pos:line="88" pos:column="15">char<pos:position pos:line="88" pos:column="19"/></name><modifier pos:line="88" pos:column="19">*<pos:position pos:line="88" pos:column="20"/></modifier></type> <name pos:line="88" pos:column="21">append<pos:position pos:line="88" pos:column="27"/></name> <init pos:line="88" pos:column="28">= <expr><ternary><condition><expr><name pos:line="88" pos:column="30">tmp_line_len<pos:position pos:line="88" pos:column="42"/></name></expr> ?<pos:position pos:line="88" pos:column="44"/></condition><then pos:line="88" pos:column="44"> <expr><call><name pos:line="88" pos:column="45">skip_ws<pos:position pos:line="88" pos:column="52"/></name><argument_list pos:line="88" pos:column="52">(<argument><expr><name pos:line="88" pos:column="53">config_input_line<pos:position pos:line="88" pos:column="70"/></name></expr></argument>)<pos:position pos:line="88" pos:column="71"/></argument_list></call></expr> <pos:position pos:line="88" pos:column="72"/></then><else pos:line="88" pos:column="72">: <expr><name pos:line="88" pos:column="74">config_input_line<pos:position pos:line="88" pos:column="91"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="88" pos:column="92"/></decl_stmt>

        <decl_stmt><decl><type><name pos:line="90" pos:column="9">size_t<pos:position pos:line="90" pos:column="15"/></name></type> <name pos:line="90" pos:column="16">append_len<pos:position pos:line="90" pos:column="26"/></name> <init pos:line="90" pos:column="27">= <expr><call><name pos:line="90" pos:column="29">strlen<pos:position pos:line="90" pos:column="35"/></name><argument_list pos:line="90" pos:column="35">(<argument><expr><name pos:line="90" pos:column="36">append<pos:position pos:line="90" pos:column="42"/></name></expr></argument>)<pos:position pos:line="90" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="90" pos:column="44"/></decl_stmt>

        <expr_stmt><expr><name pos:line="92" pos:column="9">tmp_line<pos:position pos:line="92" pos:column="17"/></name> <operator pos:line="92" pos:column="18">=<pos:position pos:line="92" pos:column="19"/></operator> <operator pos:line="92" pos:column="20">(<pos:position pos:line="92" pos:column="21"/></operator><name pos:line="92" pos:column="21">char<pos:position pos:line="92" pos:column="25"/></name><operator pos:line="92" pos:column="25">*<pos:position pos:line="92" pos:column="26"/></operator><operator pos:line="92" pos:column="26">)<pos:position pos:line="92" pos:column="27"/></operator><call><name pos:line="92" pos:column="27">xrealloc<pos:position pos:line="92" pos:column="35"/></name><argument_list pos:line="92" pos:column="35">(<argument><expr><name pos:line="92" pos:column="36">tmp_line<pos:position pos:line="92" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="46">tmp_line_len<pos:position pos:line="92" pos:column="58"/></name> <operator pos:line="92" pos:column="59">+<pos:position pos:line="92" pos:column="60"/></operator> <name pos:line="92" pos:column="61">append_len<pos:position pos:line="92" pos:column="71"/></name> <operator pos:line="92" pos:column="72">+<pos:position pos:line="92" pos:column="73"/></operator> <literal type="number" pos:line="92" pos:column="74">1<pos:position pos:line="92" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="77"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="94" pos:column="9">strcpy<pos:position pos:line="94" pos:column="15"/></name><argument_list pos:line="94" pos:column="15">(<argument><expr><name pos:line="94" pos:column="16">tmp_line<pos:position pos:line="94" pos:column="24"/></name> <operator pos:line="94" pos:column="25">+<pos:position pos:line="94" pos:column="26"/></operator> <name pos:line="94" pos:column="27">tmp_line_len<pos:position pos:line="94" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="41">append<pos:position pos:line="94" pos:column="47"/></name></expr></argument>)<pos:position pos:line="94" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="49"/></expr_stmt>

        <expr_stmt><expr><name pos:line="96" pos:column="9">tmp_line_len<pos:position pos:line="96" pos:column="21"/></name> <operator pos:line="96" pos:column="22">+=<pos:position pos:line="96" pos:column="24"/></operator> <name pos:line="96" pos:column="25">append_len<pos:position pos:line="96" pos:column="35"/></name></expr>;<pos:position pos:line="96" pos:column="36"/></expr_stmt>

        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name><name pos:line="98" pos:column="13">tmp_line<pos:position pos:line="98" pos:column="21"/></name><index pos:line="98" pos:column="21">[<expr><name pos:line="98" pos:column="22">tmp_line_len<pos:position pos:line="98" pos:column="34"/></name><operator pos:line="98" pos:column="34">-<pos:position pos:line="98" pos:column="35"/></operator><literal type="number" pos:line="98" pos:column="35">1<pos:position pos:line="98" pos:column="36"/></literal></expr>]<pos:position pos:line="98" pos:column="37"/></index></name> <operator pos:line="98" pos:column="38">==<pos:position pos:line="98" pos:column="40"/></operator> <literal type="char" pos:line="98" pos:column="41">'\\'<pos:position pos:line="98" pos:column="45"/></literal></expr>)<pos:position pos:line="98" pos:column="46"/></condition><then pos:line="98" pos:column="46"> <block pos:line="98" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">debugs<pos:position pos:line="99" pos:column="19"/></name><argument_list pos:line="99" pos:column="19">(<argument><expr><literal type="number" pos:line="99" pos:column="20">3<pos:position pos:line="99" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="23">5<pos:position pos:line="99" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="26">"parseConfigFile: tmp_line='"<pos:position pos:line="99" pos:column="55"/></literal> <operator pos:line="99" pos:column="56">&lt;&lt;<pos:position pos:line="99" pos:column="64"/></operator> <name pos:line="99" pos:column="59">tmp_line<pos:position pos:line="99" pos:column="67"/></name> <operator pos:line="99" pos:column="68">&lt;&lt;<pos:position pos:line="99" pos:column="76"/></operator> <literal type="string" pos:line="99" pos:column="71">"'"<pos:position pos:line="99" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="100" pos:column="13">tmp_line<pos:position pos:line="100" pos:column="21"/></name><index pos:line="100" pos:column="21">[<expr><operator pos:line="100" pos:column="22">--<pos:position pos:line="100" pos:column="24"/></operator><name pos:line="100" pos:column="24">tmp_line_len<pos:position pos:line="100" pos:column="36"/></name></expr>]<pos:position pos:line="100" pos:column="37"/></index></name> <operator pos:line="100" pos:column="38">=<pos:position pos:line="100" pos:column="39"/></operator> <literal type="char" pos:line="100" pos:column="40">'\0'<pos:position pos:line="100" pos:column="44"/></literal></expr>;<pos:position pos:line="100" pos:column="45"/></expr_stmt>
            <continue pos:line="101" pos:column="13">continue;<pos:position pos:line="101" pos:column="22"/></continue>
        }<pos:position pos:line="102" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="104" pos:column="9">trim_trailing_ws<pos:position pos:line="104" pos:column="25"/></name><argument_list pos:line="104" pos:column="25">(<argument><expr><name pos:line="104" pos:column="26">tmp_line<pos:position pos:line="104" pos:column="34"/></name></expr></argument>)<pos:position pos:line="104" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="105" pos:column="9">ProcessMacros<pos:position pos:line="105" pos:column="22"/></name><argument_list pos:line="105" pos:column="22">(<argument><expr><name pos:line="105" pos:column="23">tmp_line<pos:position pos:line="105" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="33">tmp_line_len<pos:position pos:line="105" pos:column="45"/></name></expr></argument>)<pos:position pos:line="105" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="106" pos:column="9">debugs<pos:position pos:line="106" pos:column="15"/></name><argument_list pos:line="106" pos:column="15">(<argument><expr><literal type="number" pos:line="106" pos:column="16">3<pos:position pos:line="106" pos:column="17"/></literal></expr></argument>, <argument><expr><operator pos:line="106" pos:column="19">(<pos:position pos:line="106" pos:column="20"/></operator><ternary><condition><expr><name pos:line="106" pos:column="20">opt_parse_cfg_only<pos:position pos:line="106" pos:column="38"/></name></expr>?<pos:position pos:line="106" pos:column="39"/></condition><then><expr><literal type="number" pos:line="106" pos:column="39">1<pos:position pos:line="106" pos:column="40"/></literal></expr></then><else pos:line="106" pos:column="40">:<expr><literal type="number" pos:line="106" pos:column="41">5<pos:position pos:line="106" pos:column="42"/></literal></expr></else></ternary><operator pos:line="106" pos:column="42">)<pos:position pos:line="106" pos:column="43"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="45">"Processing: "<pos:position pos:line="106" pos:column="59"/></literal> <operator pos:line="106" pos:column="60">&lt;&lt;<pos:position pos:line="106" pos:column="68"/></operator> <name pos:line="106" pos:column="63">tmp_line<pos:position pos:line="106" pos:column="71"/></name></expr></argument>)<pos:position pos:line="106" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="73"/></expr_stmt>

        <if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<decl><type><specifier pos:line="108" pos:column="13">const<pos:position pos:line="108" pos:column="18"/></specifier> <name pos:line="108" pos:column="19">char<pos:position pos:line="108" pos:column="23"/></name><modifier pos:line="108" pos:column="23">*<pos:position pos:line="108" pos:column="24"/></modifier></type> <name pos:line="108" pos:column="25">expr<pos:position pos:line="108" pos:column="29"/></name> <init pos:line="108" pos:column="30">= <expr><call><name pos:line="108" pos:column="32">FindStatement<pos:position pos:line="108" pos:column="45"/></name><argument_list pos:line="108" pos:column="45">(<argument><expr><name pos:line="108" pos:column="46">tmp_line<pos:position pos:line="108" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="56">"if"<pos:position pos:line="108" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="61"/></argument_list></call></expr></init></decl>)<pos:position pos:line="108" pos:column="62"/></condition><then pos:line="108" pos:column="62"> <block pos:line="108" pos:column="63">{
            <expr_stmt><expr><call><name><name pos:line="109" pos:column="13">if_states<pos:position pos:line="109" pos:column="22"/></name><operator pos:line="109" pos:column="22">.<pos:position pos:line="109" pos:column="23"/></operator><name pos:line="109" pos:column="23">push_back<pos:position pos:line="109" pos:column="32"/></name></name><argument_list pos:line="109" pos:column="32">(<argument><expr><call><name pos:line="109" pos:column="33">EvalBoolExpr<pos:position pos:line="109" pos:column="45"/></name><argument_list pos:line="109" pos:column="45">(<argument><expr><name pos:line="109" pos:column="46">expr<pos:position pos:line="109" pos:column="50"/></name></expr></argument>)<pos:position pos:line="109" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="53"/></expr_stmt> <comment type="line" pos:line="109" pos:column="54">// store last if-statement meaning</comment>
        }<pos:position pos:line="110" pos:column="10"/></block></then> <elseif pos:line="110" pos:column="11">else <if pos:line="110" pos:column="16">if <condition pos:line="110" pos:column="19">(<expr><call><name pos:line="110" pos:column="20">FindStatement<pos:position pos:line="110" pos:column="33"/></name><argument_list pos:line="110" pos:column="33">(<argument><expr><name pos:line="110" pos:column="34">tmp_line<pos:position pos:line="110" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="110" pos:column="44">"endif"<pos:position pos:line="110" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="110" pos:column="53"/></condition><then pos:line="110" pos:column="53"> <block pos:line="110" pos:column="54">{
            <if pos:line="111" pos:column="13">if <condition pos:line="111" pos:column="16">(<expr><operator pos:line="111" pos:column="17">!<pos:position pos:line="111" pos:column="18"/></operator><call><name><name pos:line="111" pos:column="18">if_states<pos:position pos:line="111" pos:column="27"/></name><operator pos:line="111" pos:column="27">.<pos:position pos:line="111" pos:column="28"/></operator><name pos:line="111" pos:column="28">empty<pos:position pos:line="111" pos:column="33"/></name></name><argument_list pos:line="111" pos:column="33">()<pos:position pos:line="111" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="111" pos:column="36"/></condition><then pos:line="111" pos:column="36">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="112" pos:column="17">if_states<pos:position pos:line="112" pos:column="26"/></name><operator pos:line="112" pos:column="26">.<pos:position pos:line="112" pos:column="27"/></operator><name pos:line="112" pos:column="27">pop_back<pos:position pos:line="112" pos:column="35"/></name></name><argument_list pos:line="112" pos:column="35">()<pos:position pos:line="112" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="38"/></expr_stmt></block></then> <comment type="line" pos:line="112" pos:column="39">// remove last if-statement meaning</comment>
            <else pos:line="113" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="114" pos:column="17">fatalf<pos:position pos:line="114" pos:column="23"/></name><argument_list pos:line="114" pos:column="23">(<argument><expr><literal type="string" pos:line="114" pos:column="24">"'endif' without 'if'\n"<pos:position pos:line="114" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="50"/></expr_stmt></block></else></if>
        }<pos:position pos:line="115" pos:column="10"/></block></then></if></elseif> <elseif pos:line="115" pos:column="11">else <if pos:line="115" pos:column="16">if <condition pos:line="115" pos:column="19">(<expr><call><name pos:line="115" pos:column="20">FindStatement<pos:position pos:line="115" pos:column="33"/></name><argument_list pos:line="115" pos:column="33">(<argument><expr><name pos:line="115" pos:column="34">tmp_line<pos:position pos:line="115" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="44">"else"<pos:position pos:line="115" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="115" pos:column="52"/></condition><then pos:line="115" pos:column="52"> <block pos:line="115" pos:column="53">{
            <if pos:line="116" pos:column="13">if <condition pos:line="116" pos:column="16">(<expr><operator pos:line="116" pos:column="17">!<pos:position pos:line="116" pos:column="18"/></operator><call><name><name pos:line="116" pos:column="18">if_states<pos:position pos:line="116" pos:column="27"/></name><operator pos:line="116" pos:column="27">.<pos:position pos:line="116" pos:column="28"/></operator><name pos:line="116" pos:column="28">empty<pos:position pos:line="116" pos:column="33"/></name></name><argument_list pos:line="116" pos:column="33">()<pos:position pos:line="116" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="116" pos:column="36"/></condition><then pos:line="116" pos:column="36">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="117" pos:column="17">if_states<pos:position pos:line="117" pos:column="26"/></name><operator pos:line="117" pos:column="26">.<pos:position pos:line="117" pos:column="27"/></operator><name pos:line="117" pos:column="27">back<pos:position pos:line="117" pos:column="31"/></name></name><argument_list pos:line="117" pos:column="31">()<pos:position pos:line="117" pos:column="33"/></argument_list></call> <operator pos:line="117" pos:column="34">=<pos:position pos:line="117" pos:column="35"/></operator> <operator pos:line="117" pos:column="36">!<pos:position pos:line="117" pos:column="37"/></operator><call><name><name pos:line="117" pos:column="37">if_states<pos:position pos:line="117" pos:column="46"/></name><operator pos:line="117" pos:column="46">.<pos:position pos:line="117" pos:column="47"/></operator><name pos:line="117" pos:column="47">back<pos:position pos:line="117" pos:column="51"/></name></name><argument_list pos:line="117" pos:column="51">()<pos:position pos:line="117" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="54"/></expr_stmt></block></then>
            <else pos:line="118" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="119" pos:column="17">fatalf<pos:position pos:line="119" pos:column="23"/></name><argument_list pos:line="119" pos:column="23">(<argument><expr><literal type="string" pos:line="119" pos:column="24">"'else' without 'if'\n"<pos:position pos:line="119" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="49"/></expr_stmt></block></else></if>
        }<pos:position pos:line="120" pos:column="10"/></block></then></if></elseif> <elseif pos:line="120" pos:column="11">else <if pos:line="120" pos:column="16">if <condition pos:line="120" pos:column="19">(<expr><call><name><name pos:line="120" pos:column="20">if_states<pos:position pos:line="120" pos:column="29"/></name><operator pos:line="120" pos:column="29">.<pos:position pos:line="120" pos:column="30"/></operator><name pos:line="120" pos:column="30">empty<pos:position pos:line="120" pos:column="35"/></name></name><argument_list pos:line="120" pos:column="35">()<pos:position pos:line="120" pos:column="37"/></argument_list></call> <operator pos:line="120" pos:column="38">||<pos:position pos:line="120" pos:column="40"/></operator> <call><name><name pos:line="120" pos:column="41">if_states<pos:position pos:line="120" pos:column="50"/></name><operator pos:line="120" pos:column="50">.<pos:position pos:line="120" pos:column="51"/></operator><name pos:line="120" pos:column="51">back<pos:position pos:line="120" pos:column="55"/></name></name><argument_list pos:line="120" pos:column="55">()<pos:position pos:line="120" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="58"/></condition><then pos:line="120" pos:column="58"> <block pos:line="120" pos:column="59">{ <comment type="line" pos:line="120" pos:column="61">// test last if-statement meaning if present</comment>
            <comment type="block" pos:line="121" pos:column="13">/* Handle includes here */</comment>
            <if pos:line="122" pos:column="13">if <condition pos:line="122" pos:column="16">(<expr><name pos:line="122" pos:column="17">tmp_line_len<pos:position pos:line="122" pos:column="29"/></name> <operator pos:line="122" pos:column="30">&gt;=<pos:position pos:line="122" pos:column="35"/></operator> <literal type="number" pos:line="122" pos:column="33">9<pos:position pos:line="122" pos:column="34"/></literal> <operator pos:line="122" pos:column="35">&amp;&amp;<pos:position pos:line="122" pos:column="45"/></operator> <call><name pos:line="122" pos:column="38">strncmp<pos:position pos:line="122" pos:column="45"/></name><argument_list pos:line="122" pos:column="45">(<argument><expr><name pos:line="122" pos:column="46">tmp_line<pos:position pos:line="122" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="56">"include"<pos:position pos:line="122" pos:column="65"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="67">7<pos:position pos:line="122" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="69"/></argument_list></call> <operator pos:line="122" pos:column="70">==<pos:position pos:line="122" pos:column="72"/></operator> <literal type="number" pos:line="122" pos:column="73">0<pos:position pos:line="122" pos:column="74"/></literal> <operator pos:line="122" pos:column="75">&amp;&amp;<pos:position pos:line="122" pos:column="85"/></operator> <call><name pos:line="122" pos:column="78">xisspace<pos:position pos:line="122" pos:column="86"/></name><argument_list pos:line="122" pos:column="86">(<argument><expr><name><name pos:line="122" pos:column="87">tmp_line<pos:position pos:line="122" pos:column="95"/></name><index pos:line="122" pos:column="95">[<expr><literal type="number" pos:line="122" pos:column="96">7<pos:position pos:line="122" pos:column="97"/></literal></expr>]<pos:position pos:line="122" pos:column="98"/></index></name></expr></argument>)<pos:position pos:line="122" pos:column="99"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="100"/></condition><then pos:line="122" pos:column="100"> <block pos:line="122" pos:column="101">{
                <expr_stmt><expr><name pos:line="123" pos:column="17">err_count<pos:position pos:line="123" pos:column="26"/></name> <operator pos:line="123" pos:column="27">+=<pos:position pos:line="123" pos:column="29"/></operator> <call><name pos:line="123" pos:column="30">parseManyConfigFiles<pos:position pos:line="123" pos:column="50"/></name><argument_list pos:line="123" pos:column="50">(<argument><expr><name pos:line="123" pos:column="51">tmp_line<pos:position pos:line="123" pos:column="59"/></name> <operator pos:line="123" pos:column="60">+<pos:position pos:line="123" pos:column="61"/></operator> <literal type="number" pos:line="123" pos:column="62">8<pos:position pos:line="123" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="65">depth<pos:position pos:line="123" pos:column="70"/></name> <operator pos:line="123" pos:column="71">+<pos:position pos:line="123" pos:column="72"/></operator> <literal type="number" pos:line="123" pos:column="73">1<pos:position pos:line="123" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="76"/></expr_stmt>
            }<pos:position pos:line="124" pos:column="14"/></block></then> <elseif pos:line="124" pos:column="15">else <if pos:line="124" pos:column="20">if <condition pos:line="124" pos:column="23">(<expr><operator pos:line="124" pos:column="24">!<pos:position pos:line="124" pos:column="25"/></operator><call><name pos:line="124" pos:column="25">parse_line<pos:position pos:line="124" pos:column="35"/></name><argument_list pos:line="124" pos:column="35">(<argument><expr><name pos:line="124" pos:column="36">tmp_line<pos:position pos:line="124" pos:column="44"/></name></expr></argument>)<pos:position pos:line="124" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="124" pos:column="46"/></condition><then pos:line="124" pos:column="46"> <block pos:line="124" pos:column="47">{
                <expr_stmt><expr><call><name pos:line="125" pos:column="17">debugs<pos:position pos:line="125" pos:column="23"/></name><argument_list pos:line="125" pos:column="23">(<argument><expr><literal type="number" pos:line="125" pos:column="24">3<pos:position pos:line="125" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="27">DBG_CRITICAL<pos:position pos:line="125" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="41">HERE<pos:position pos:line="125" pos:column="45"/></name> <operator pos:line="125" pos:column="46">&lt;&lt;<pos:position pos:line="125" pos:column="54"/></operator> <name pos:line="125" pos:column="49">cfg_filename<pos:position pos:line="125" pos:column="61"/></name> <operator pos:line="125" pos:column="62">&lt;&lt;<pos:position pos:line="125" pos:column="70"/></operator> <literal type="string" pos:line="125" pos:column="65">":"<pos:position pos:line="125" pos:column="68"/></literal> <operator pos:line="125" pos:column="69">&lt;&lt;<pos:position pos:line="125" pos:column="77"/></operator> <name pos:line="125" pos:column="72">config_lineno<pos:position pos:line="125" pos:column="85"/></name> <operator pos:line="125" pos:column="86">&lt;&lt;<pos:position pos:line="125" pos:column="94"/></operator> <literal type="string" pos:line="125" pos:column="89">" unrecognized: '"<pos:position pos:line="125" pos:column="107"/></literal> <operator pos:line="125" pos:column="108">&lt;&lt;<pos:position pos:line="125" pos:column="116"/></operator> <name pos:line="125" pos:column="111">tmp_line<pos:position pos:line="125" pos:column="119"/></name> <operator pos:line="125" pos:column="120">&lt;&lt;<pos:position pos:line="125" pos:column="128"/></operator> <literal type="string" pos:line="125" pos:column="123">"'"<pos:position pos:line="125" pos:column="126"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="127"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="128"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="126" pos:column="17">++<pos:position pos:line="126" pos:column="19"/></operator><name pos:line="126" pos:column="19">err_count<pos:position pos:line="126" pos:column="28"/></name></expr>;<pos:position pos:line="126" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="127" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="128" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><call><name pos:line="130" pos:column="9">safe_free<pos:position pos:line="130" pos:column="18"/></name><argument_list pos:line="130" pos:column="18">(<argument><expr><name pos:line="130" pos:column="19">tmp_line<pos:position pos:line="130" pos:column="27"/></name></expr></argument>)<pos:position pos:line="130" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="131" pos:column="9">tmp_line_len<pos:position pos:line="131" pos:column="21"/></name> <operator pos:line="131" pos:column="22">=<pos:position pos:line="131" pos:column="23"/></operator> <literal type="number" pos:line="131" pos:column="24">0<pos:position pos:line="131" pos:column="25"/></literal></expr>;<pos:position pos:line="131" pos:column="26"/></expr_stmt>

    }<pos:position pos:line="133" pos:column="6"/></block></while>
    <if pos:line="134" pos:column="5">if <condition pos:line="134" pos:column="8">(<expr><operator pos:line="134" pos:column="9">!<pos:position pos:line="134" pos:column="10"/></operator><call><name><name pos:line="134" pos:column="10">if_states<pos:position pos:line="134" pos:column="19"/></name><operator pos:line="134" pos:column="19">.<pos:position pos:line="134" pos:column="20"/></operator><name pos:line="134" pos:column="20">empty<pos:position pos:line="134" pos:column="25"/></name></name><argument_list pos:line="134" pos:column="25">()<pos:position pos:line="134" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="134" pos:column="28"/></condition><then pos:line="134" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="135" pos:column="9">fatalf<pos:position pos:line="135" pos:column="15"/></name><argument_list pos:line="135" pos:column="15">(<argument><expr><literal type="string" pos:line="135" pos:column="16">"if-statement without 'endif'\n"<pos:position pos:line="135" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="50"/></expr_stmt></block></then></if>

    <if pos:line="137" pos:column="5">if <condition pos:line="137" pos:column="8">(<expr><name pos:line="137" pos:column="9">is_pipe<pos:position pos:line="137" pos:column="16"/></name></expr>)<pos:position pos:line="137" pos:column="17"/></condition><then pos:line="137" pos:column="17"> <block pos:line="137" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="138" pos:column="9">int<pos:position pos:line="138" pos:column="12"/></name></type> <name pos:line="138" pos:column="13">ret<pos:position pos:line="138" pos:column="16"/></name> <init pos:line="138" pos:column="17">= <expr><call><name pos:line="138" pos:column="19">pclose<pos:position pos:line="138" pos:column="25"/></name><argument_list pos:line="138" pos:column="25">(<argument><expr><name pos:line="138" pos:column="26">fp<pos:position pos:line="138" pos:column="28"/></name></expr></argument>)<pos:position pos:line="138" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="138" pos:column="30"/></decl_stmt>

        <if pos:line="140" pos:column="9">if <condition pos:line="140" pos:column="12">(<expr><name pos:line="140" pos:column="13">ret<pos:position pos:line="140" pos:column="16"/></name> <operator pos:line="140" pos:column="17">!=<pos:position pos:line="140" pos:column="19"/></operator> <literal type="number" pos:line="140" pos:column="20">0<pos:position pos:line="140" pos:column="21"/></literal></expr>)<pos:position pos:line="140" pos:column="22"/></condition><then pos:line="140" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="141" pos:column="13">fatalf<pos:position pos:line="141" pos:column="19"/></name><argument_list pos:line="141" pos:column="19">(<argument><expr><literal type="string" pos:line="141" pos:column="20">"parseConfigFile: '%s' failed with exit code %d\n"<pos:position pos:line="141" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="72">file_name<pos:position pos:line="141" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="83">ret<pos:position pos:line="141" pos:column="86"/></name></expr></argument>)<pos:position pos:line="141" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="88"/></expr_stmt></block></then></if>
    }<pos:position pos:line="142" pos:column="6"/></block></then> <else pos:line="142" pos:column="7">else <block pos:line="142" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="143" pos:column="9">fclose<pos:position pos:line="143" pos:column="15"/></name><argument_list pos:line="143" pos:column="15">(<argument><expr><name pos:line="143" pos:column="16">fp<pos:position pos:line="143" pos:column="18"/></name></expr></argument>)<pos:position pos:line="143" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="144" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="146" pos:column="5">SetConfigFilename<pos:position pos:line="146" pos:column="22"/></name><argument_list pos:line="146" pos:column="22">(<argument><expr><name pos:line="146" pos:column="23">orig_cfg_filename<pos:position pos:line="146" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="146" pos:column="42">false<pos:position pos:line="146" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="147" pos:column="5">config_lineno<pos:position pos:line="147" pos:column="18"/></name> <operator pos:line="147" pos:column="19">=<pos:position pos:line="147" pos:column="20"/></operator> <name pos:line="147" pos:column="21">orig_config_lineno<pos:position pos:line="147" pos:column="39"/></name></expr>;<pos:position pos:line="147" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="149" pos:column="5">xfree<pos:position pos:line="149" pos:column="10"/></name><argument_list pos:line="149" pos:column="10">(<argument><expr><name pos:line="149" pos:column="11">tmp_line<pos:position pos:line="149" pos:column="19"/></name></expr></argument>)<pos:position pos:line="149" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="21"/></expr_stmt>
    <return pos:line="150" pos:column="5">return <expr><name pos:line="150" pos:column="12">err_count<pos:position pos:line="150" pos:column="21"/></name></expr>;<pos:position pos:line="150" pos:column="22"/></return>
}<pos:position pos:line="151" pos:column="2"/></block></function></unit>
