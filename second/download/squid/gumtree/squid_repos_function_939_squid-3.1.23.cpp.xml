<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_939_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">DeferredRead<pos:position pos:line="1" pos:column="13"/></name></type>
<name><name pos:line="2" pos:column="1">DeferredReadManager<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">popHead<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name><name pos:line="2" pos:column="30">CbDataListContainer<pos:position pos:line="2" pos:column="49"/></name><argument_list type="generic" pos:line="2" pos:column="49">&lt;<argument><expr><name pos:line="2" pos:column="50">DeferredRead<pos:position pos:line="2" pos:column="62"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="66"/></argument_list></name> <modifier pos:line="2" pos:column="64">&amp;<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="65">deferredReads<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><call><name><name pos:line="4" pos:column="14">deferredReads<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">.<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">empty<pos:position pos:line="4" pos:column="33"/></name></name><argument_list pos:line="4" pos:column="33">()<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="37"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">DeferredRead<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">&amp;<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="19">read<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><name><name pos:line="6" pos:column="26">deferredReads<pos:position pos:line="6" pos:column="39"/></name><operator pos:line="6" pos:column="39">.<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="40">head<pos:position pos:line="6" pos:column="44"/></name><operator pos:line="6" pos:column="44">-&gt;<pos:position pos:line="6" pos:column="49"/></operator><name pos:line="6" pos:column="46">element<pos:position pos:line="6" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="54"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name><name pos:line="7" pos:column="10">read<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">.<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">cancelled<pos:position pos:line="7" pos:column="24"/></name></name></expr>)<pos:position pos:line="7" pos:column="25"/></condition><then pos:line="7" pos:column="25"> <block pos:line="7" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">comm_remove_close_handler<pos:position pos:line="8" pos:column="34"/></name><argument_list pos:line="8" pos:column="34">(<argument><expr><name><name pos:line="8" pos:column="35">read<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">.<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="40">theRead<pos:position pos:line="8" pos:column="47"/></name><operator pos:line="8" pos:column="47">.<pos:position pos:line="8" pos:column="48"/></operator><name pos:line="8" pos:column="48">fd<pos:position pos:line="8" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="52">read<pos:position pos:line="8" pos:column="56"/></name><operator pos:line="8" pos:column="56">.<pos:position pos:line="8" pos:column="57"/></operator><name pos:line="8" pos:column="57">closer<pos:position pos:line="8" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">read<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">.<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">closer<pos:position pos:line="9" pos:column="20"/></name></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <name pos:line="9" pos:column="23">NULL<pos:position pos:line="9" pos:column="27"/></name></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">DeferredRead<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">result<pos:position pos:line="12" pos:column="24"/></name> <init pos:line="12" pos:column="25">= <expr><call><name><name pos:line="12" pos:column="27">deferredReads<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">.<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="41">pop_front<pos:position pos:line="12" pos:column="50"/></name></name><argument_list pos:line="12" pos:column="50">()<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="53"/></decl_stmt>

    <return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">result<pos:position pos:line="14" pos:column="18"/></name></expr>;<pos:position pos:line="14" pos:column="19"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
