<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3733_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ip<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Intercept<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">ProbeForTproxy<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name><name pos:line="2" pos:column="31">Ip<pos:position pos:line="2" pos:column="33"/></name><operator pos:line="2" pos:column="33">::<pos:position pos:line="2" pos:column="35"/></operator><name pos:line="2" pos:column="35">Address<pos:position pos:line="2" pos:column="42"/></name></name> <modifier pos:line="2" pos:column="43">&amp;<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="44">test<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">bool<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">doneSuid<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><literal type="boolean" pos:line="4" pos:column="21">false<pos:position pos:line="4" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">_SQUID_LINUX_<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">&amp;&amp;<pos:position pos:line="6" pos:column="29"/></operator> <call><name pos:line="6" pos:column="22">defined<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><name pos:line="6" pos:column="30">IP_TRANSPARENT<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr></cpp:if> <comment type="line" pos:line="6" pos:column="46">// Linux</comment>
<cpp:define pos:line="7" pos:column="1"># <cpp:directive pos:line="7" pos:column="3">define<pos:position pos:line="7" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="7" pos:column="10">soLevel<pos:position pos:line="7" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="7" pos:column="18">SOL_IP<pos:position pos:line="7" pos:column="24"/></cpp:value></cpp:define>
<cpp:define pos:line="8" pos:column="1"># <cpp:directive pos:line="8" pos:column="3">define<pos:position pos:line="8" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="8" pos:column="10">soFlag<pos:position pos:line="8" pos:column="16"/></name></cpp:macro>  <cpp:value pos:line="8" pos:column="18">IP_TRANSPARENT<pos:position pos:line="8" pos:column="32"/></cpp:value></cpp:define>

<cpp:elif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">elif<pos:position pos:line="10" pos:column="6"/></cpp:directive> <expr><call><name pos:line="10" pos:column="7">defined<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">SO_BINDANY<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr></cpp:elif> <comment type="line" pos:line="10" pos:column="27">// OpenBSD 4.7+ and NetBSD with PF</comment>
<cpp:define pos:line="11" pos:column="1"># <cpp:directive pos:line="11" pos:column="3">define<pos:position pos:line="11" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="11" pos:column="10">soLevel<pos:position pos:line="11" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="11" pos:column="18">SOL_SOCKET<pos:position pos:line="11" pos:column="28"/></cpp:value></cpp:define>
<cpp:define pos:line="12" pos:column="1"># <cpp:directive pos:line="12" pos:column="3">define<pos:position pos:line="12" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="12" pos:column="10">soFlag<pos:position pos:line="12" pos:column="16"/></name></cpp:macro>  <cpp:value pos:line="12" pos:column="18">SO_BINDANY<pos:position pos:line="12" pos:column="28"/></cpp:value></cpp:define>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">enter_suid<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">()<pos:position pos:line="13" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">doneSuid<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <literal type="boolean" pos:line="14" pos:column="16">true<pos:position pos:line="14" pos:column="20"/></literal></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>

<cpp:elif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">elif<pos:position pos:line="16" pos:column="6"/></cpp:directive> <expr><call><name pos:line="16" pos:column="7">defined<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">IP_BINDANY<pos:position pos:line="16" pos:column="25"/></name></expr></argument>)<pos:position pos:line="16" pos:column="26"/></argument_list></call></expr></cpp:elif> <comment type="line" pos:line="16" pos:column="27">// FreeBSD with IPFW</comment>
<cpp:define pos:line="17" pos:column="1"># <cpp:directive pos:line="17" pos:column="3">define<pos:position pos:line="17" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="17" pos:column="10">soLevel<pos:position pos:line="17" pos:column="17"/></name></cpp:macro> <cpp:value pos:line="17" pos:column="18">IPPROTO_IP<pos:position pos:line="17" pos:column="28"/></cpp:value></cpp:define>
<cpp:define pos:line="18" pos:column="1"># <cpp:directive pos:line="18" pos:column="3">define<pos:position pos:line="18" pos:column="9"/></cpp:directive> <cpp:macro><name pos:line="18" pos:column="10">soFlag<pos:position pos:line="18" pos:column="16"/></name></cpp:macro>  <cpp:value pos:line="18" pos:column="18">IP_BINDANY<pos:position pos:line="18" pos:column="28"/></cpp:value></cpp:define>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">enter_suid<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">()<pos:position pos:line="19" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">doneSuid<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <literal type="boolean" pos:line="20" pos:column="16">true<pos:position pos:line="20" pos:column="20"/></literal></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>

<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><call><name pos:line="24" pos:column="5">defined<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">soLevel<pos:position pos:line="24" pos:column="20"/></name></expr></argument>)<pos:position pos:line="24" pos:column="21"/></argument_list></call> <operator pos:line="24" pos:column="22">&amp;&amp;<pos:position pos:line="24" pos:column="32"/></operator> <call><name pos:line="24" pos:column="25">defined<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><name pos:line="24" pos:column="33">soFlag<pos:position pos:line="24" pos:column="39"/></name></expr></argument>)<pos:position pos:line="24" pos:column="40"/></argument_list></call></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">debugs<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="number" pos:line="26" pos:column="12">3<pos:position pos:line="26" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="15">3<pos:position pos:line="26" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="18">"Detect TPROXY support on port "<pos:position pos:line="26" pos:column="50"/></literal> <operator pos:line="26" pos:column="51">&lt;&lt;<pos:position pos:line="26" pos:column="59"/></operator> <name pos:line="26" pos:column="54">test<pos:position pos:line="26" pos:column="58"/></name></expr></argument>)<pos:position pos:line="26" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="60"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="28" pos:column="5">int<pos:position pos:line="28" pos:column="8"/></name></type> <name pos:line="28" pos:column="9">tos<pos:position pos:line="28" pos:column="12"/></name> <init pos:line="28" pos:column="13">= <expr><literal type="number" pos:line="28" pos:column="15">1<pos:position pos:line="28" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">int<pos:position pos:line="29" pos:column="8"/></name></type> <name pos:line="29" pos:column="9">tmp_sock<pos:position pos:line="29" pos:column="17"/></name> <init pos:line="29" pos:column="18">= <expr><operator pos:line="29" pos:column="20">-<pos:position pos:line="29" pos:column="21"/></operator><literal type="number" pos:line="29" pos:column="21">1<pos:position pos:line="29" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* Probe to see if the Kernel TPROXY support is IPv6-enabled */</comment>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><call><name><name pos:line="32" pos:column="9">test<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">.<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">isIPv6<pos:position pos:line="32" pos:column="20"/></name></name><argument_list pos:line="32" pos:column="20">()<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="23"/></condition><then pos:line="32" pos:column="23"> <block pos:line="32" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">debugs<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">3<pos:position pos:line="33" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="19">3<pos:position pos:line="33" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="22">"...Probing for IPv6 TPROXY support."<pos:position pos:line="33" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="61"/></expr_stmt>

        <decl_stmt><decl><type><name><name pos:line="35" pos:column="9">struct<pos:position pos:line="35" pos:column="15"/></name> <name pos:line="35" pos:column="16">sockaddr_in6<pos:position pos:line="35" pos:column="28"/></name></name></type> <name pos:line="35" pos:column="29">tmp_ip6<pos:position pos:line="35" pos:column="36"/></name></decl>;<pos:position pos:line="35" pos:column="37"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="36" pos:column="9">Ip<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">::<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">Address<pos:position pos:line="36" pos:column="20"/></name></name></type> <name pos:line="36" pos:column="21">tmp<pos:position pos:line="36" pos:column="24"/></name> <init pos:line="36" pos:column="25">= <expr><literal type="string" pos:line="36" pos:column="27">"::2"<pos:position pos:line="36" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="36" pos:column="33"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="37" pos:column="9">tmp<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">.<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="13">port<pos:position pos:line="37" pos:column="17"/></name></name><argument_list pos:line="37" pos:column="17">(<argument><expr><literal type="number" pos:line="37" pos:column="18">0<pos:position pos:line="37" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="38" pos:column="9">tmp<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">.<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">getSockAddr<pos:position pos:line="38" pos:column="24"/></name></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">tmp_ip6<pos:position pos:line="38" pos:column="32"/></name></expr></argument>)<pos:position pos:line="38" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt>

        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">( <expr><operator pos:line="40" pos:column="14">(<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">tmp_sock<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">=<pos:position pos:line="40" pos:column="25"/></operator> <call><name pos:line="40" pos:column="26">socket<pos:position pos:line="40" pos:column="32"/></name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">PF_INET6<pos:position pos:line="40" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="43">SOCK_STREAM<pos:position pos:line="40" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="56">IPPROTO_TCP<pos:position pos:line="40" pos:column="67"/></name></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call><operator pos:line="40" pos:column="68">)<pos:position pos:line="40" pos:column="69"/></operator> <operator pos:line="40" pos:column="70">&gt;=<pos:position pos:line="40" pos:column="75"/></operator> <literal type="number" pos:line="40" pos:column="73">0<pos:position pos:line="40" pos:column="74"/></literal> <operator pos:line="40" pos:column="75">&amp;&amp;<pos:position pos:line="40" pos:column="85"/></operator>
                <call><name pos:line="41" pos:column="17">setsockopt<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">tmp_sock<pos:position pos:line="41" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="38">soLevel<pos:position pos:line="41" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="47">soFlag<pos:position pos:line="41" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="55">(<pos:position pos:line="41" pos:column="56"/></operator><name pos:line="41" pos:column="56">char<pos:position pos:line="41" pos:column="60"/></name> <operator pos:line="41" pos:column="61">*<pos:position pos:line="41" pos:column="62"/></operator><operator pos:line="41" pos:column="62">)<pos:position pos:line="41" pos:column="63"/></operator><operator pos:line="41" pos:column="63">&amp;<pos:position pos:line="41" pos:column="68"/></operator><name pos:line="41" pos:column="64">tos<pos:position pos:line="41" pos:column="67"/></name></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="69">sizeof<argument_list pos:line="41" pos:column="75">(<argument><expr><name pos:line="41" pos:column="76">int<pos:position pos:line="41" pos:column="79"/></name></expr></argument>)<pos:position pos:line="41" pos:column="80"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="81"/></argument_list></call> <operator pos:line="41" pos:column="82">==<pos:position pos:line="41" pos:column="84"/></operator> <literal type="number" pos:line="41" pos:column="85">0<pos:position pos:line="41" pos:column="86"/></literal> <operator pos:line="41" pos:column="87">&amp;&amp;<pos:position pos:line="41" pos:column="97"/></operator>
                <call><name pos:line="42" pos:column="17">bind<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><name pos:line="42" pos:column="22">tmp_sock<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="32">(<pos:position pos:line="42" pos:column="33"/></operator>struct <name pos:line="42" pos:column="40">sockaddr<pos:position pos:line="42" pos:column="48"/></name><operator pos:line="42" pos:column="48">*<pos:position pos:line="42" pos:column="49"/></operator><operator pos:line="42" pos:column="49">)<pos:position pos:line="42" pos:column="50"/></operator><operator pos:line="42" pos:column="50">&amp;<pos:position pos:line="42" pos:column="55"/></operator><name pos:line="42" pos:column="51">tmp_ip6<pos:position pos:line="42" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="60">sizeof<argument_list pos:line="42" pos:column="66">(<argument><expr pos:line="42" pos:column="67">struct <name pos:line="42" pos:column="74">sockaddr_in6<pos:position pos:line="42" pos:column="86"/></name></expr></argument>)<pos:position pos:line="42" pos:column="87"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="88"/></argument_list></call> <operator pos:line="42" pos:column="89">==<pos:position pos:line="42" pos:column="91"/></operator> <literal type="number" pos:line="42" pos:column="92">0<pos:position pos:line="42" pos:column="93"/></literal></expr> )<pos:position pos:line="42" pos:column="95"/></condition><then pos:line="42" pos:column="95"> <block pos:line="42" pos:column="96">{

            <expr_stmt><expr><call><name pos:line="44" pos:column="13">debugs<pos:position pos:line="44" pos:column="19"/></name><argument_list pos:line="44" pos:column="19">(<argument><expr><literal type="number" pos:line="44" pos:column="20">3<pos:position pos:line="44" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="23">3<pos:position pos:line="44" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="26">"IPv6 TPROXY support detected. Using."<pos:position pos:line="44" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">close<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><name pos:line="45" pos:column="19">tmp_sock<pos:position pos:line="45" pos:column="27"/></name></expr></argument>)<pos:position pos:line="45" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><name pos:line="46" pos:column="17">doneSuid<pos:position pos:line="46" pos:column="25"/></name></expr>)<pos:position pos:line="46" pos:column="26"/></condition><then pos:line="46" pos:column="26">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="17">leave_suid<pos:position pos:line="47" pos:column="27"/></name><argument_list pos:line="47" pos:column="27">()<pos:position pos:line="47" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="30"/></expr_stmt></block></then></if>
            <return pos:line="48" pos:column="13">return <expr><literal type="boolean" pos:line="48" pos:column="20">true<pos:position pos:line="48" pos:column="24"/></literal></expr>;<pos:position pos:line="48" pos:column="25"/></return>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">tmp_sock<pos:position pos:line="50" pos:column="21"/></name> <operator pos:line="50" pos:column="22">&gt;=<pos:position pos:line="50" pos:column="27"/></operator> <literal type="number" pos:line="50" pos:column="25">0<pos:position pos:line="50" pos:column="26"/></literal></expr>)<pos:position pos:line="50" pos:column="27"/></condition><then pos:line="50" pos:column="27"> <block pos:line="50" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">close<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><name pos:line="51" pos:column="19">tmp_sock<pos:position pos:line="51" pos:column="27"/></name></expr></argument>)<pos:position pos:line="51" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">tmp_sock<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <operator pos:line="52" pos:column="24">-<pos:position pos:line="52" pos:column="25"/></operator><literal type="number" pos:line="52" pos:column="25">1<pos:position pos:line="52" pos:column="26"/></literal></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">( <expr><call><name><name pos:line="56" pos:column="10">test<pos:position pos:line="56" pos:column="14"/></name><operator pos:line="56" pos:column="14">.<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="15">isIPv6<pos:position pos:line="56" pos:column="21"/></name></name><argument_list pos:line="56" pos:column="21">()<pos:position pos:line="56" pos:column="23"/></argument_list></call> <operator pos:line="56" pos:column="24">&amp;&amp;<pos:position pos:line="56" pos:column="34"/></operator> <operator pos:line="56" pos:column="27">!<pos:position pos:line="56" pos:column="28"/></operator><call><name><name pos:line="56" pos:column="28">test<pos:position pos:line="56" pos:column="32"/></name><operator pos:line="56" pos:column="32">.<pos:position pos:line="56" pos:column="33"/></operator><name pos:line="56" pos:column="33">setIPv4<pos:position pos:line="56" pos:column="40"/></name></name><argument_list pos:line="56" pos:column="40">()<pos:position pos:line="56" pos:column="42"/></argument_list></call></expr> )<pos:position pos:line="56" pos:column="44"/></condition><then pos:line="56" pos:column="44"> <block pos:line="56" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">debugs<pos:position pos:line="57" pos:column="15"/></name><argument_list pos:line="57" pos:column="15">(<argument><expr><literal type="number" pos:line="57" pos:column="16">3<pos:position pos:line="57" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="19">DBG_CRITICAL<pos:position pos:line="57" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="33">"TPROXY lacks IPv6 support for "<pos:position pos:line="57" pos:column="65"/></literal> <operator pos:line="57" pos:column="66">&lt;&lt;<pos:position pos:line="57" pos:column="74"/></operator> <name pos:line="57" pos:column="69">test<pos:position pos:line="57" pos:column="73"/></name></expr></argument> )<pos:position pos:line="57" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="76"/></expr_stmt>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">doneSuid<pos:position pos:line="58" pos:column="21"/></name></expr>)<pos:position pos:line="58" pos:column="22"/></condition><then pos:line="58" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="13">leave_suid<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">()<pos:position pos:line="59" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt></block></then></if>
        <return pos:line="60" pos:column="9">return <expr><literal type="boolean" pos:line="60" pos:column="16">false<pos:position pos:line="60" pos:column="21"/></literal></expr>;<pos:position pos:line="60" pos:column="22"/></return>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="63" pos:column="5">/* Probe to see if the Kernel TPROXY support is IPv4-enabled (aka present) */</comment>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><call><name><name pos:line="64" pos:column="9">test<pos:position pos:line="64" pos:column="13"/></name><operator pos:line="64" pos:column="13">.<pos:position pos:line="64" pos:column="14"/></operator><name pos:line="64" pos:column="14">isIPv4<pos:position pos:line="64" pos:column="20"/></name></name><argument_list pos:line="64" pos:column="20">()<pos:position pos:line="64" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="23"/></condition><then pos:line="64" pos:column="23"> <block pos:line="64" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">debugs<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><literal type="number" pos:line="65" pos:column="16">3<pos:position pos:line="65" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="65" pos:column="19">3<pos:position pos:line="65" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="22">"...Probing for IPv4 TPROXY support."<pos:position pos:line="65" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="61"/></expr_stmt>

        <decl_stmt><decl><type><name><name pos:line="67" pos:column="9">struct<pos:position pos:line="67" pos:column="15"/></name> <name pos:line="67" pos:column="16">sockaddr_in<pos:position pos:line="67" pos:column="27"/></name></name></type> <name pos:line="67" pos:column="28">tmp_ip4<pos:position pos:line="67" pos:column="35"/></name></decl>;<pos:position pos:line="67" pos:column="36"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="68" pos:column="9">Ip<pos:position pos:line="68" pos:column="11"/></name><operator pos:line="68" pos:column="11">::<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="13">Address<pos:position pos:line="68" pos:column="20"/></name></name></type> <name pos:line="68" pos:column="21">tmp<pos:position pos:line="68" pos:column="24"/></name> <init pos:line="68" pos:column="25">= <expr><literal type="string" pos:line="68" pos:column="27">"127.0.0.2"<pos:position pos:line="68" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="68" pos:column="39"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="69" pos:column="9">tmp<pos:position pos:line="69" pos:column="12"/></name><operator pos:line="69" pos:column="12">.<pos:position pos:line="69" pos:column="13"/></operator><name pos:line="69" pos:column="13">port<pos:position pos:line="69" pos:column="17"/></name></name><argument_list pos:line="69" pos:column="17">(<argument><expr><literal type="number" pos:line="69" pos:column="18">0<pos:position pos:line="69" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="70" pos:column="9">tmp<pos:position pos:line="70" pos:column="12"/></name><operator pos:line="70" pos:column="12">.<pos:position pos:line="70" pos:column="13"/></operator><name pos:line="70" pos:column="13">getSockAddr<pos:position pos:line="70" pos:column="24"/></name></name><argument_list pos:line="70" pos:column="24">(<argument><expr><name pos:line="70" pos:column="25">tmp_ip4<pos:position pos:line="70" pos:column="32"/></name></expr></argument>)<pos:position pos:line="70" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="34"/></expr_stmt>

        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">( <expr><operator pos:line="72" pos:column="14">(<pos:position pos:line="72" pos:column="15"/></operator><name pos:line="72" pos:column="15">tmp_sock<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">=<pos:position pos:line="72" pos:column="25"/></operator> <call><name pos:line="72" pos:column="26">socket<pos:position pos:line="72" pos:column="32"/></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">PF_INET<pos:position pos:line="72" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="42">SOCK_STREAM<pos:position pos:line="72" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="55">IPPROTO_TCP<pos:position pos:line="72" pos:column="66"/></name></expr></argument>)<pos:position pos:line="72" pos:column="67"/></argument_list></call><operator pos:line="72" pos:column="67">)<pos:position pos:line="72" pos:column="68"/></operator> <operator pos:line="72" pos:column="69">&gt;=<pos:position pos:line="72" pos:column="74"/></operator> <literal type="number" pos:line="72" pos:column="72">0<pos:position pos:line="72" pos:column="73"/></literal> <operator pos:line="72" pos:column="74">&amp;&amp;<pos:position pos:line="72" pos:column="84"/></operator>
                <call><name pos:line="73" pos:column="17">setsockopt<pos:position pos:line="73" pos:column="27"/></name><argument_list pos:line="73" pos:column="27">(<argument><expr><name pos:line="73" pos:column="28">tmp_sock<pos:position pos:line="73" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="38">soLevel<pos:position pos:line="73" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="47">soFlag<pos:position pos:line="73" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="55">(<pos:position pos:line="73" pos:column="56"/></operator><name pos:line="73" pos:column="56">char<pos:position pos:line="73" pos:column="60"/></name> <operator pos:line="73" pos:column="61">*<pos:position pos:line="73" pos:column="62"/></operator><operator pos:line="73" pos:column="62">)<pos:position pos:line="73" pos:column="63"/></operator><operator pos:line="73" pos:column="63">&amp;<pos:position pos:line="73" pos:column="68"/></operator><name pos:line="73" pos:column="64">tos<pos:position pos:line="73" pos:column="67"/></name></expr></argument>, <argument><expr><sizeof pos:line="73" pos:column="69">sizeof<argument_list pos:line="73" pos:column="75">(<argument><expr><name pos:line="73" pos:column="76">int<pos:position pos:line="73" pos:column="79"/></name></expr></argument>)<pos:position pos:line="73" pos:column="80"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="81"/></argument_list></call> <operator pos:line="73" pos:column="82">==<pos:position pos:line="73" pos:column="84"/></operator> <literal type="number" pos:line="73" pos:column="85">0<pos:position pos:line="73" pos:column="86"/></literal> <operator pos:line="73" pos:column="87">&amp;&amp;<pos:position pos:line="73" pos:column="97"/></operator>
                <call><name pos:line="74" pos:column="17">bind<pos:position pos:line="74" pos:column="21"/></name><argument_list pos:line="74" pos:column="21">(<argument><expr><name pos:line="74" pos:column="22">tmp_sock<pos:position pos:line="74" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="32">(<pos:position pos:line="74" pos:column="33"/></operator>struct <name pos:line="74" pos:column="40">sockaddr<pos:position pos:line="74" pos:column="48"/></name><operator pos:line="74" pos:column="48">*<pos:position pos:line="74" pos:column="49"/></operator><operator pos:line="74" pos:column="49">)<pos:position pos:line="74" pos:column="50"/></operator><operator pos:line="74" pos:column="50">&amp;<pos:position pos:line="74" pos:column="55"/></operator><name pos:line="74" pos:column="51">tmp_ip4<pos:position pos:line="74" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="60">sizeof<argument_list pos:line="74" pos:column="66">(<argument><expr pos:line="74" pos:column="67">struct <name pos:line="74" pos:column="74">sockaddr_in<pos:position pos:line="74" pos:column="85"/></name></expr></argument>)<pos:position pos:line="74" pos:column="86"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="87"/></argument_list></call> <operator pos:line="74" pos:column="88">==<pos:position pos:line="74" pos:column="90"/></operator> <literal type="number" pos:line="74" pos:column="91">0<pos:position pos:line="74" pos:column="92"/></literal></expr> )<pos:position pos:line="74" pos:column="94"/></condition><then pos:line="74" pos:column="94"> <block pos:line="74" pos:column="95">{

            <expr_stmt><expr><call><name pos:line="76" pos:column="13">debugs<pos:position pos:line="76" pos:column="19"/></name><argument_list pos:line="76" pos:column="19">(<argument><expr><literal type="number" pos:line="76" pos:column="20">3<pos:position pos:line="76" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="23">3<pos:position pos:line="76" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="26">"IPv4 TPROXY support detected. Using."<pos:position pos:line="76" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="77" pos:column="13">close<pos:position pos:line="77" pos:column="18"/></name><argument_list pos:line="77" pos:column="18">(<argument><expr><name pos:line="77" pos:column="19">tmp_sock<pos:position pos:line="77" pos:column="27"/></name></expr></argument>)<pos:position pos:line="77" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="29"/></expr_stmt>
            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><name pos:line="78" pos:column="17">doneSuid<pos:position pos:line="78" pos:column="25"/></name></expr>)<pos:position pos:line="78" pos:column="26"/></condition><then pos:line="78" pos:column="26">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="17">leave_suid<pos:position pos:line="79" pos:column="27"/></name><argument_list pos:line="79" pos:column="27">()<pos:position pos:line="79" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="30"/></expr_stmt></block></then></if>
            <return pos:line="80" pos:column="13">return <expr><literal type="boolean" pos:line="80" pos:column="20">true<pos:position pos:line="80" pos:column="24"/></literal></expr>;<pos:position pos:line="80" pos:column="25"/></return>
        }<pos:position pos:line="81" pos:column="10"/></block></then></if>
        <if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">tmp_sock<pos:position pos:line="82" pos:column="21"/></name> <operator pos:line="82" pos:column="22">&gt;=<pos:position pos:line="82" pos:column="27"/></operator> <literal type="number" pos:line="82" pos:column="25">0<pos:position pos:line="82" pos:column="26"/></literal></expr>)<pos:position pos:line="82" pos:column="27"/></condition><then pos:line="82" pos:column="27"> <block pos:line="82" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">close<pos:position pos:line="83" pos:column="18"/></name><argument_list pos:line="83" pos:column="18">(<argument><expr><name pos:line="83" pos:column="19">tmp_sock<pos:position pos:line="83" pos:column="27"/></name></expr></argument>)<pos:position pos:line="83" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="84" pos:column="10"/></block></then></if>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>

<cpp:else pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">else<pos:position pos:line="87" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">debugs<pos:position pos:line="88" pos:column="11"/></name><argument_list pos:line="88" pos:column="11">(<argument><expr><literal type="number" pos:line="88" pos:column="12">3<pos:position pos:line="88" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="15">3<pos:position pos:line="88" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="18">"TPROXY setsockopt() not supported on this platform. Disabling TPROXY."<pos:position pos:line="88" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="91"/></expr_stmt>

<cpp:endif pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">endif<pos:position pos:line="90" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="91" pos:column="5">if <condition pos:line="91" pos:column="8">(<expr><name pos:line="91" pos:column="9">doneSuid<pos:position pos:line="91" pos:column="17"/></name></expr>)<pos:position pos:line="91" pos:column="18"/></condition><then pos:line="91" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="92" pos:column="9">leave_suid<pos:position pos:line="92" pos:column="19"/></name><argument_list pos:line="92" pos:column="19">()<pos:position pos:line="92" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="22"/></expr_stmt></block></then></if>
    <return pos:line="93" pos:column="5">return <expr><literal type="boolean" pos:line="93" pos:column="12">false<pos:position pos:line="93" pos:column="17"/></literal></expr>;<pos:position pos:line="93" pos:column="18"/></return>
}<pos:position pos:line="94" pos:column="2"/></block></function></unit>
