<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_845_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_read<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">int<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">fd<pos:position pos:line="2" pos:column="17"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="19">char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">buf<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">size<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="40">AsyncCall<pos:position pos:line="2" pos:column="49"/></name><operator pos:line="2" pos:column="49">::<pos:position pos:line="2" pos:column="51"/></operator><name pos:line="2" pos:column="51">Pointer<pos:position pos:line="2" pos:column="58"/></name></name> <modifier pos:line="2" pos:column="59">&amp;<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="60">callback<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">5<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="18">"comm_read, queueing read for FD "<pos:position pos:line="4" pos:column="52"/></literal> <operator pos:line="4" pos:column="53">&lt;&lt;<pos:position pos:line="4" pos:column="61"/></operator> <name pos:line="4" pos:column="56">fd<pos:position pos:line="4" pos:column="58"/></name> <operator pos:line="4" pos:column="59">&lt;&lt;<pos:position pos:line="4" pos:column="67"/></operator> <literal type="string" pos:line="4" pos:column="62">"; asynCall "<pos:position pos:line="4" pos:column="75"/></literal> <operator pos:line="4" pos:column="76">&lt;&lt;<pos:position pos:line="4" pos:column="84"/></operator> <name pos:line="4" pos:column="79">callback<pos:position pos:line="4" pos:column="87"/></name></expr></argument>)<pos:position pos:line="4" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="89"/></expr_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* Make sure we are open and not closing */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><call><name pos:line="7" pos:column="12">isOpen<pos:position pos:line="7" pos:column="18"/></name><argument_list pos:line="7" pos:column="18">(<argument><expr><name pos:line="7" pos:column="19">fd<pos:position pos:line="7" pos:column="21"/></name></expr></argument>)<pos:position pos:line="7" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><operator pos:line="8" pos:column="12">!<pos:position pos:line="8" pos:column="13"/></operator><name><name pos:line="8" pos:column="13">fd_table<pos:position pos:line="8" pos:column="21"/></name><index pos:line="8" pos:column="21">[<expr><name pos:line="8" pos:column="22">fd<pos:position pos:line="8" pos:column="24"/></name></expr>]<pos:position pos:line="8" pos:column="25"/></index></name><operator pos:line="8" pos:column="25">.<pos:position pos:line="8" pos:column="26"/></operator><call><name pos:line="8" pos:column="26">closing<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">()<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">comm_io_callback_t<pos:position pos:line="9" pos:column="23"/></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">ccb<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><call><name pos:line="9" pos:column="31">COMMIO_FD_READCB<pos:position pos:line="9" pos:column="47"/></name><argument_list pos:line="9" pos:column="47">(<argument><expr><name pos:line="9" pos:column="48">fd<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="52"/></decl_stmt>

    <comment type="line" pos:line="11" pos:column="5">// Make sure we are either not reading or just passively monitoring.</comment>
    <comment type="line" pos:line="12" pos:column="5">// Active/passive conflicts are OK and simply cancel passive monitoring.</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name><name pos:line="13" pos:column="9">ccb<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">active<pos:position pos:line="13" pos:column="20"/></name></name><argument_list pos:line="13" pos:column="20">()<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23"> <block pos:line="13" pos:column="24">{
        <comment type="line" pos:line="14" pos:column="9">// if the assertion below fails, we have an active comm_read conflict</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">assert<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name><name pos:line="15" pos:column="16">fd_table<pos:position pos:line="15" pos:column="24"/></name><index pos:line="15" pos:column="24">[<expr><name pos:line="15" pos:column="25">fd<pos:position pos:line="15" pos:column="27"/></name></expr>]<pos:position pos:line="15" pos:column="28"/></index></name><operator pos:line="15" pos:column="28">.<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">halfClosedReader<pos:position pos:line="15" pos:column="45"/></name> <operator pos:line="15" pos:column="46">!=<pos:position pos:line="15" pos:column="48"/></operator> <name pos:line="15" pos:column="49">NULL<pos:position pos:line="15" pos:column="53"/></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">commStopHalfClosedMonitor<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">fd<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">assert<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><operator pos:line="17" pos:column="16">!<pos:position pos:line="17" pos:column="17"/></operator><call><name><name pos:line="17" pos:column="17">ccb<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">active<pos:position pos:line="17" pos:column="28"/></name></name><argument_list pos:line="17" pos:column="28">()<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="20" pos:column="5">/* Queue the read */</comment>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">commio_set_callback<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">fd<pos:position pos:line="21" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="29">IOCB_READ<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="40">ccb<pos:position pos:line="21" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="45">callback<pos:position pos:line="21" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="55">(<pos:position pos:line="21" pos:column="56"/></operator><name pos:line="21" pos:column="56">char<pos:position pos:line="21" pos:column="60"/></name> <operator pos:line="21" pos:column="61">*<pos:position pos:line="21" pos:column="62"/></operator><operator pos:line="21" pos:column="62">)<pos:position pos:line="21" pos:column="63"/></operator><name pos:line="21" pos:column="63">buf<pos:position pos:line="21" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="68">NULL<pos:position pos:line="21" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="74">size<pos:position pos:line="21" pos:column="78"/></name></expr></argument>)<pos:position pos:line="21" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">commSetSelect<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">fd<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="23">COMM_SELECT_READ<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">commHandleRead<pos:position pos:line="22" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="57">ccb<pos:position pos:line="22" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="62">0<pos:position pos:line="22" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="65"/></expr_stmt>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
