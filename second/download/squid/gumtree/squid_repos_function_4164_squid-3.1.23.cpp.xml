<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4164_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">proccessNewRequest<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name><name pos:line="1" pos:column="32">Ssl<pos:position pos:line="1" pos:column="35"/></name><operator pos:line="1" pos:column="35">::<pos:position pos:line="1" pos:column="37"/></operator><name pos:line="1" pos:column="37">CrtdMessage<pos:position pos:line="1" pos:column="48"/></name></name> <specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <modifier pos:line="1" pos:column="55">&amp;<pos:position pos:line="1" pos:column="60"/></modifier></type> <name pos:line="1" pos:column="57">request_message<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="74">std<pos:position pos:line="1" pos:column="77"/></name><operator pos:line="1" pos:column="77">::<pos:position pos:line="1" pos:column="79"/></operator><name pos:line="1" pos:column="79">string<pos:position pos:line="1" pos:column="85"/></name></name> <specifier pos:line="1" pos:column="86">const<pos:position pos:line="1" pos:column="91"/></specifier> <modifier pos:line="1" pos:column="92">&amp;<pos:position pos:line="1" pos:column="97"/></modifier></type> <name pos:line="1" pos:column="94">db_path<pos:position pos:line="1" pos:column="101"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="103">size_t<pos:position pos:line="1" pos:column="109"/></name></type> <name pos:line="1" pos:column="110">max_db_size<pos:position pos:line="1" pos:column="121"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="123">size_t<pos:position pos:line="1" pos:column="129"/></name></type> <name pos:line="1" pos:column="130">fs_block_size<pos:position pos:line="1" pos:column="143"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="144"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">Ssl<pos:position pos:line="3" pos:column="8"/></name><operator pos:line="3" pos:column="8">::<pos:position pos:line="3" pos:column="10"/></operator><name pos:line="3" pos:column="10">CrtdMessage<pos:position pos:line="3" pos:column="21"/></name><operator pos:line="3" pos:column="21">::<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="23">BodyParams<pos:position pos:line="3" pos:column="33"/></name></name></type> <name pos:line="3" pos:column="34">map<pos:position pos:line="3" pos:column="37"/></name></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">std<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">::<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">string<pos:position pos:line="4" pos:column="16"/></name></name></type> <name pos:line="4" pos:column="17">body_part<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">request_message<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">.<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="21">parseBody<pos:position pos:line="5" pos:column="30"/></name></name><argument_list pos:line="5" pos:column="30">(<argument><expr><name pos:line="5" pos:column="31">map<pos:position pos:line="5" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="36">body_part<pos:position pos:line="5" pos:column="45"/></name></expr></argument>)<pos:position pos:line="5" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="47"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">Ssl<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">::<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">CrtdMessage<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">::<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">BodyParams<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">::<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="35">iterator<pos:position pos:line="7" pos:column="43"/></name></name></type> <name pos:line="7" pos:column="44">i<pos:position pos:line="7" pos:column="45"/></name> <init pos:line="7" pos:column="46">= <expr><call><name><name pos:line="7" pos:column="48">map<pos:position pos:line="7" pos:column="51"/></name><operator pos:line="7" pos:column="51">.<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="52">find<pos:position pos:line="7" pos:column="56"/></name></name><argument_list pos:line="7" pos:column="56">(<argument><expr><name><name pos:line="7" pos:column="57">Ssl<pos:position pos:line="7" pos:column="60"/></name><operator pos:line="7" pos:column="60">::<pos:position pos:line="7" pos:column="62"/></operator><name pos:line="7" pos:column="62">CrtdMessage<pos:position pos:line="7" pos:column="73"/></name><operator pos:line="7" pos:column="73">::<pos:position pos:line="7" pos:column="75"/></operator><name pos:line="7" pos:column="75">param_host<pos:position pos:line="7" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="86"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="87"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">i<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">==<pos:position pos:line="8" pos:column="13"/></operator> <call><name><name pos:line="8" pos:column="14">map<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">.<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">end<pos:position pos:line="8" pos:column="21"/></name></name><argument_list pos:line="8" pos:column="21">()<pos:position pos:line="8" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="24"/></condition><then pos:line="8" pos:column="24">
        <block type="pseudo"><throw pos:line="9" pos:column="9">throw <expr><call><name><name pos:line="9" pos:column="15">std<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">::<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">runtime_error<pos:position pos:line="9" pos:column="33"/></name></name><argument_list pos:line="9" pos:column="33">(<argument><expr><literal type="string" pos:line="9" pos:column="34">"Cannot find \""<pos:position pos:line="9" pos:column="50"/></literal> <operator pos:line="9" pos:column="51">+<pos:position pos:line="9" pos:column="52"/></operator> <name><name pos:line="9" pos:column="53">Ssl<pos:position pos:line="9" pos:column="56"/></name><operator pos:line="9" pos:column="56">::<pos:position pos:line="9" pos:column="58"/></operator><name pos:line="9" pos:column="58">CrtdMessage<pos:position pos:line="9" pos:column="69"/></name><operator pos:line="9" pos:column="69">::<pos:position pos:line="9" pos:column="71"/></operator><name pos:line="9" pos:column="71">param_host<pos:position pos:line="9" pos:column="81"/></name></name> <operator pos:line="9" pos:column="82">+<pos:position pos:line="9" pos:column="83"/></operator> <literal type="string" pos:line="9" pos:column="84">"\" parameter in request message."<pos:position pos:line="9" pos:column="118"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="120"/></throw></block></then></if>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">std<pos:position pos:line="10" pos:column="8"/></name><operator pos:line="10" pos:column="8">::<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">string<pos:position pos:line="10" pos:column="16"/></name></name></type> <name pos:line="10" pos:column="17">host<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><name><name pos:line="10" pos:column="24">i<pos:position pos:line="10" pos:column="25"/></name><operator pos:line="10" pos:column="25">-&gt;<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="27">second<pos:position pos:line="10" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="34"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">Ssl<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">::<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">CertificateDb<pos:position pos:line="12" pos:column="23"/></name></name></type> <name pos:line="12" pos:column="24">db<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name pos:line="12" pos:column="27">db_path<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="36">max_db_size<pos:position pos:line="12" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="49">fs_block_size<pos:position pos:line="12" pos:column="62"/></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></decl>;<pos:position pos:line="12" pos:column="64"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">Ssl<pos:position pos:line="14" pos:column="8"/></name><operator pos:line="14" pos:column="8">::<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">X509_Pointer<pos:position pos:line="14" pos:column="22"/></name></name></type> <name pos:line="14" pos:column="23">cert<pos:position pos:line="14" pos:column="27"/></name></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">Ssl<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">::<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">EVP_PKEY_Pointer<pos:position pos:line="15" pos:column="26"/></name></name></type> <name pos:line="15" pos:column="27">pkey<pos:position pos:line="15" pos:column="31"/></name></decl>;<pos:position pos:line="15" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">db<pos:position pos:line="16" pos:column="7"/></name><operator pos:line="16" pos:column="7">.<pos:position pos:line="16" pos:column="8"/></operator><name pos:line="16" pos:column="8">find<pos:position pos:line="16" pos:column="12"/></name></name><argument_list pos:line="16" pos:column="12">(<argument><expr><literal type="string" pos:line="16" pos:column="13">"/CN="<pos:position pos:line="16" pos:column="19"/></literal> <operator pos:line="16" pos:column="20">+<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">host<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="28">cert<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">pkey<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">cert<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">||<pos:position pos:line="18" pos:column="17"/></operator> <operator pos:line="18" pos:column="18">!<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">pkey<pos:position pos:line="18" pos:column="23"/></name></expr>)<pos:position pos:line="18" pos:column="24"/></condition><then pos:line="18" pos:column="24"> <block pos:line="18" pos:column="25">{
        <decl_stmt><decl><type><name><name pos:line="19" pos:column="9">Ssl<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">::<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">X509_Pointer<pos:position pos:line="19" pos:column="26"/></name></name></type> <name pos:line="19" pos:column="27">certToSign<pos:position pos:line="19" pos:column="37"/></name></decl>;<pos:position pos:line="19" pos:column="38"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="20" pos:column="9">Ssl<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">::<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">EVP_PKEY_Pointer<pos:position pos:line="20" pos:column="30"/></name></name></type> <name pos:line="20" pos:column="31">pkeyToSign<pos:position pos:line="20" pos:column="41"/></name></decl>;<pos:position pos:line="20" pos:column="42"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">Ssl<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">::<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">readCertAndPrivateKeyFromMemory<pos:position pos:line="21" pos:column="45"/></name></name><argument_list pos:line="21" pos:column="45">(<argument><expr><name pos:line="21" pos:column="46">certToSign<pos:position pos:line="21" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="58">pkeyToSign<pos:position pos:line="21" pos:column="68"/></name></expr></argument>, <argument><expr><call><name><name pos:line="21" pos:column="70">body_part<pos:position pos:line="21" pos:column="79"/></name><operator pos:line="21" pos:column="79">.<pos:position pos:line="21" pos:column="80"/></operator><name pos:line="21" pos:column="80">c_str<pos:position pos:line="21" pos:column="85"/></name></name><argument_list pos:line="21" pos:column="85">()<pos:position pos:line="21" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="89"/></expr_stmt>

        <decl_stmt><decl><type><name><name pos:line="23" pos:column="9">Ssl<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">::<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">BIGNUM_Pointer<pos:position pos:line="23" pos:column="28"/></name></name></type> <name pos:line="23" pos:column="29">serial<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><call><name><name pos:line="23" pos:column="36">db<pos:position pos:line="23" pos:column="38"/></name><operator pos:line="23" pos:column="38">.<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="39">getCurrentSerialNumber<pos:position pos:line="23" pos:column="61"/></name></name><argument_list pos:line="23" pos:column="61">()<pos:position pos:line="23" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></decl>;<pos:position pos:line="23" pos:column="65"/></decl_stmt>

        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><call><name><name pos:line="25" pos:column="14">Ssl<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">::<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">generateSslCertificateAndPrivateKey<pos:position pos:line="25" pos:column="54"/></name></name><argument_list pos:line="25" pos:column="54">(<argument><expr><call><name><name pos:line="25" pos:column="55">host<pos:position pos:line="25" pos:column="59"/></name><operator pos:line="25" pos:column="59">.<pos:position pos:line="25" pos:column="60"/></operator><name pos:line="25" pos:column="60">c_str<pos:position pos:line="25" pos:column="65"/></name></name><argument_list pos:line="25" pos:column="65">()<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="25" pos:column="69">certToSign<pos:position pos:line="25" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="81">pkeyToSign<pos:position pos:line="25" pos:column="91"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="93">cert<pos:position pos:line="25" pos:column="97"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="99">pkey<pos:position pos:line="25" pos:column="103"/></name></expr></argument>, <argument><expr><call><name><name pos:line="25" pos:column="105">serial<pos:position pos:line="25" pos:column="111"/></name><operator pos:line="25" pos:column="111">.<pos:position pos:line="25" pos:column="112"/></operator><name pos:line="25" pos:column="112">get<pos:position pos:line="25" pos:column="115"/></name></name><argument_list pos:line="25" pos:column="115">()<pos:position pos:line="25" pos:column="117"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="118"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="119"/></condition><then pos:line="25" pos:column="119">
            <block type="pseudo"><throw pos:line="26" pos:column="13">throw <expr><call><name><name pos:line="26" pos:column="19">std<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">::<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="24">runtime_error<pos:position pos:line="26" pos:column="37"/></name></name><argument_list pos:line="26" pos:column="37">(<argument><expr><literal type="string" pos:line="26" pos:column="38">"Cannot create ssl certificate or private key."<pos:position pos:line="26" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="87"/></throw></block></then></if>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name><name pos:line="27" pos:column="14">db<pos:position pos:line="27" pos:column="16"/></name><operator pos:line="27" pos:column="16">.<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">addCertAndPrivateKey<pos:position pos:line="27" pos:column="37"/></name></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">cert<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">pkey<pos:position pos:line="27" pos:column="48"/></name></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call> <operator pos:line="27" pos:column="50">&amp;&amp;<pos:position pos:line="27" pos:column="60"/></operator> <call><name><name pos:line="27" pos:column="53">db<pos:position pos:line="27" pos:column="55"/></name><operator pos:line="27" pos:column="55">.<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="56">IsEnabledDiskStore<pos:position pos:line="27" pos:column="74"/></name></name><argument_list pos:line="27" pos:column="74">()<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="77"/></condition><then pos:line="27" pos:column="77">
            <block type="pseudo"><throw pos:line="28" pos:column="13">throw <expr><call><name><name pos:line="28" pos:column="19">std<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">::<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="24">runtime_error<pos:position pos:line="28" pos:column="37"/></name></name><argument_list pos:line="28" pos:column="37">(<argument><expr><literal type="string" pos:line="28" pos:column="38">"Cannot add certificate to db."<pos:position pos:line="28" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="71"/></throw></block></then></if>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="31" pos:column="5">std<pos:position pos:line="31" pos:column="8"/></name><operator pos:line="31" pos:column="8">::<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">string<pos:position pos:line="31" pos:column="16"/></name></name></type> <name pos:line="31" pos:column="17">bufferToWrite<pos:position pos:line="31" pos:column="30"/></name></decl>;<pos:position pos:line="31" pos:column="31"/></decl_stmt>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">!<pos:position pos:line="32" pos:column="10"/></operator><call><name><name pos:line="32" pos:column="10">Ssl<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">::<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">writeCertAndPrivateKeyToMemory<pos:position pos:line="32" pos:column="45"/></name></name><argument_list pos:line="32" pos:column="45">(<argument><expr><name pos:line="32" pos:column="46">cert<pos:position pos:line="32" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="52">pkey<pos:position pos:line="32" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="58">bufferToWrite<pos:position pos:line="32" pos:column="71"/></name></expr></argument>)<pos:position pos:line="32" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="73"/></condition><then pos:line="32" pos:column="73">
        <block type="pseudo"><throw pos:line="33" pos:column="9">throw <expr><call><name><name pos:line="33" pos:column="15">std<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">::<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">runtime_error<pos:position pos:line="33" pos:column="33"/></name></name><argument_list pos:line="33" pos:column="33">(<argument><expr><literal type="string" pos:line="33" pos:column="34">"Cannot write ssl certificate or/and private key to memory."<pos:position pos:line="33" pos:column="94"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="96"/></throw></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="35" pos:column="5">Ssl<pos:position pos:line="35" pos:column="8"/></name><operator pos:line="35" pos:column="8">::<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">CrtdMessage<pos:position pos:line="35" pos:column="21"/></name></name></type> <name pos:line="35" pos:column="22">response_message<pos:position pos:line="35" pos:column="38"/></name></decl>;<pos:position pos:line="35" pos:column="39"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="36" pos:column="5">response_message<pos:position pos:line="36" pos:column="21"/></name><operator pos:line="36" pos:column="21">.<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="22">setCode<pos:position pos:line="36" pos:column="29"/></name></name><argument_list pos:line="36" pos:column="29">(<argument><expr><literal type="string" pos:line="36" pos:column="30">"OK"<pos:position pos:line="36" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="37" pos:column="5">response_message<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">.<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">setBody<pos:position pos:line="37" pos:column="29"/></name></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">bufferToWrite<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt>

    <comment type="line" pos:line="39" pos:column="5">// Use the '\1' char as end-of-message character</comment>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">std<pos:position pos:line="40" pos:column="8"/></name><operator pos:line="40" pos:column="8">::<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="10">cout<pos:position pos:line="40" pos:column="14"/></name></name> <operator pos:line="40" pos:column="15">&lt;&lt;<pos:position pos:line="40" pos:column="23"/></operator> <call><name><name pos:line="40" pos:column="18">response_message<pos:position pos:line="40" pos:column="34"/></name><operator pos:line="40" pos:column="34">.<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="35">compose<pos:position pos:line="40" pos:column="42"/></name></name><argument_list pos:line="40" pos:column="42">()<pos:position pos:line="40" pos:column="44"/></argument_list></call> <operator pos:line="40" pos:column="45">&lt;&lt;<pos:position pos:line="40" pos:column="53"/></operator> <literal type="char" pos:line="40" pos:column="48">'\1'<pos:position pos:line="40" pos:column="52"/></literal> <operator pos:line="40" pos:column="53">&lt;&lt;<pos:position pos:line="40" pos:column="61"/></operator> <name><name pos:line="40" pos:column="56">std<pos:position pos:line="40" pos:column="59"/></name><operator pos:line="40" pos:column="59">::<pos:position pos:line="40" pos:column="61"/></operator><name pos:line="40" pos:column="61">flush<pos:position pos:line="40" pos:column="66"/></name></name></expr>;<pos:position pos:line="40" pos:column="67"/></expr_stmt>

    <return pos:line="42" pos:column="5">return <expr><literal type="boolean" pos:line="42" pos:column="12">true<pos:position pos:line="42" pos:column="16"/></literal></expr>;<pos:position pos:line="42" pos:column="17"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
