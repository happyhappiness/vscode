<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6984_squid-3.4.14.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">print_partial_compiled_pattern<pos:position pos:line="2" pos:column="31"/></name><argument_list pos:line="2" pos:column="31">(<argument><expr><name pos:line="2" pos:column="32">start<pos:position pos:line="2" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="39">end<pos:position pos:line="2" pos:column="42"/></name></expr></argument>)<pos:position pos:line="2" pos:column="43"/></argument_list>
<name pos:line="3" pos:column="1">unsigned<pos:position pos:line="3" pos:column="9"/></name> <name pos:line="3" pos:column="10">char<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier><name pos:line="3" pos:column="16">start<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">unsigned<pos:position pos:line="4" pos:column="9"/></name> <name pos:line="4" pos:column="10">char<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">end<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">mcnt<pos:position pos:line="6" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="15">mcnt2<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">char<pos:position pos:line="7" pos:column="18"/></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">p<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><name pos:line="7" pos:column="24">start<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">char<pos:position pos:line="8" pos:column="18"/></name> <modifier pos:line="8" pos:column="19">*<pos:position pos:line="8" pos:column="20"/></modifier></type><name pos:line="8" pos:column="20">pend<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name pos:line="8" pos:column="27">end<pos:position pos:line="8" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="31"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">start<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">==<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">NULL<pos:position pos:line="10" pos:column="22"/></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <block pos:line="10" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">printf<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="string" pos:line="11" pos:column="16">"(null)\n"<pos:position pos:line="11" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="14" pos:column="5">/* Loop over pattern commands.  */</comment>
    <while pos:line="15" pos:column="5">while <condition pos:line="15" pos:column="11">(<expr><name pos:line="15" pos:column="12">p<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">&lt;<pos:position pos:line="15" pos:column="18"/></operator> <name pos:line="15" pos:column="16">pend<pos:position pos:line="15" pos:column="20"/></name></expr>)<pos:position pos:line="15" pos:column="21"/></condition> <block pos:line="15" pos:column="22">{
        <switch pos:line="16" pos:column="9">switch <condition pos:line="16" pos:column="16">(<expr><operator pos:line="16" pos:column="17">(<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">re_opcode_t<pos:position pos:line="16" pos:column="29"/></name><operator pos:line="16" pos:column="29">)<pos:position pos:line="16" pos:column="30"/></operator> <operator pos:line="16" pos:column="31">*<pos:position pos:line="16" pos:column="32"/></operator> <name pos:line="16" pos:column="33">p<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">++<pos:position pos:line="16" pos:column="36"/></operator></expr>)<pos:position pos:line="16" pos:column="37"/></condition> <block pos:line="16" pos:column="38">{
        <case pos:line="17" pos:column="9">case <expr><name pos:line="17" pos:column="14">no_op<pos:position pos:line="17" pos:column="19"/></name></expr>:<pos:position pos:line="17" pos:column="20"/></case>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">printf<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><literal type="string" pos:line="18" pos:column="20">"/no_op"<pos:position pos:line="18" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
            <break pos:line="19" pos:column="13">break;<pos:position pos:line="19" pos:column="19"/></break>

        <case pos:line="21" pos:column="9">case <expr><name pos:line="21" pos:column="14">exactn<pos:position pos:line="21" pos:column="20"/></name></expr>:<pos:position pos:line="21" pos:column="21"/></case>
            <expr_stmt><expr><name pos:line="22" pos:column="13">mcnt<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <operator pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">p<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">++<pos:position pos:line="22" pos:column="24"/></operator></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">printf<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="string" pos:line="23" pos:column="20">"/exactn/%d"<pos:position pos:line="23" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">mcnt<pos:position pos:line="23" pos:column="38"/></name></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>
            <do pos:line="24" pos:column="13">do <block pos:line="24" pos:column="16">{
                <expr_stmt><expr><call><name pos:line="25" pos:column="17">putchar<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><literal type="char" pos:line="25" pos:column="25">'/'<pos:position pos:line="25" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="26" pos:column="17">printchar<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><operator pos:line="26" pos:column="27">*<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="28">p<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">++<pos:position pos:line="26" pos:column="31"/></operator></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="27" pos:column="14"/></block> while <condition pos:line="27" pos:column="21">(<expr><operator pos:line="27" pos:column="22">--<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">mcnt<pos:position pos:line="27" pos:column="28"/></name></expr>)<pos:position pos:line="27" pos:column="29"/></condition>;<pos:position pos:line="27" pos:column="30"/></do>
            <break pos:line="28" pos:column="13">break;<pos:position pos:line="28" pos:column="19"/></break>

        <case pos:line="30" pos:column="9">case <expr><name pos:line="30" pos:column="14">start_memory<pos:position pos:line="30" pos:column="26"/></name></expr>:<pos:position pos:line="30" pos:column="27"/></case>
            <expr_stmt><expr><name pos:line="31" pos:column="13">mcnt<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <operator pos:line="31" pos:column="20">*<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">p<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">++<pos:position pos:line="31" pos:column="24"/></operator></expr>;<pos:position pos:line="31" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">printf<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><literal type="string" pos:line="32" pos:column="20">"/start_memory/%d/%d"<pos:position pos:line="32" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="43">mcnt<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="49">*<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="50">p<pos:position pos:line="32" pos:column="51"/></name><operator pos:line="32" pos:column="51">++<pos:position pos:line="32" pos:column="53"/></operator></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>
            <break pos:line="33" pos:column="13">break;<pos:position pos:line="33" pos:column="19"/></break>

        <case pos:line="35" pos:column="9">case <expr><name pos:line="35" pos:column="14">stop_memory<pos:position pos:line="35" pos:column="25"/></name></expr>:<pos:position pos:line="35" pos:column="26"/></case>
            <expr_stmt><expr><name pos:line="36" pos:column="13">mcnt<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <operator pos:line="36" pos:column="20">*<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">p<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">++<pos:position pos:line="36" pos:column="24"/></operator></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">printf<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="string" pos:line="37" pos:column="20">"/stop_memory/%d/%d"<pos:position pos:line="37" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="42">mcnt<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="48">*<pos:position pos:line="37" pos:column="49"/></operator><name pos:line="37" pos:column="49">p<pos:position pos:line="37" pos:column="50"/></name><operator pos:line="37" pos:column="50">++<pos:position pos:line="37" pos:column="52"/></operator></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="54"/></expr_stmt>
            <break pos:line="38" pos:column="13">break;<pos:position pos:line="38" pos:column="19"/></break>

        <case pos:line="40" pos:column="9">case <expr><name pos:line="40" pos:column="14">duplicate<pos:position pos:line="40" pos:column="23"/></name></expr>:<pos:position pos:line="40" pos:column="24"/></case>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">printf<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">(<argument><expr><literal type="string" pos:line="41" pos:column="20">"/duplicate/%d"<pos:position pos:line="41" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="41" pos:column="37">*<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">p<pos:position pos:line="41" pos:column="39"/></name><operator pos:line="41" pos:column="39">++<pos:position pos:line="41" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="41" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt>
            <break pos:line="42" pos:column="13">break;<pos:position pos:line="42" pos:column="19"/></break>

        <case pos:line="44" pos:column="9">case <expr><name pos:line="44" pos:column="14">anychar<pos:position pos:line="44" pos:column="21"/></name></expr>:<pos:position pos:line="44" pos:column="22"/></case>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">printf<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><literal type="string" pos:line="45" pos:column="20">"/anychar"<pos:position pos:line="45" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt>
            <break pos:line="46" pos:column="13">break;<pos:position pos:line="46" pos:column="19"/></break>

        <case pos:line="48" pos:column="9">case <expr><name pos:line="48" pos:column="14">charset<pos:position pos:line="48" pos:column="21"/></name></expr>:<pos:position pos:line="48" pos:column="22"/></case>
        <case pos:line="49" pos:column="9">case <expr><name pos:line="49" pos:column="14">charset_not<pos:position pos:line="49" pos:column="25"/></name></expr>:<pos:position pos:line="49" pos:column="26"/></case> <block pos:line="49" pos:column="27">{
            <decl_stmt><decl><type><specifier pos:line="50" pos:column="13">register<pos:position pos:line="50" pos:column="21"/></specifier> <name pos:line="50" pos:column="22">int<pos:position pos:line="50" pos:column="25"/></name></type> <name pos:line="50" pos:column="26">c<pos:position pos:line="50" pos:column="27"/></name></decl>;<pos:position pos:line="50" pos:column="28"/></decl_stmt>

            <expr_stmt><expr><call><name pos:line="52" pos:column="13">printf<pos:position pos:line="52" pos:column="19"/></name><argument_list pos:line="52" pos:column="19">(<argument><expr><literal type="string" pos:line="52" pos:column="20">"/charset%s"<pos:position pos:line="52" pos:column="32"/></literal></expr></argument>,
                   <argument><expr><ternary><condition><expr><operator pos:line="53" pos:column="20">(<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="21">re_opcode_t<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">)<pos:position pos:line="53" pos:column="33"/></operator> <operator pos:line="53" pos:column="34">*<pos:position pos:line="53" pos:column="35"/></operator> <operator pos:line="53" pos:column="36">(<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="37">p<pos:position pos:line="53" pos:column="38"/></name> <operator pos:line="53" pos:column="39">-<pos:position pos:line="53" pos:column="40"/></operator> <literal type="number" pos:line="53" pos:column="41">1<pos:position pos:line="53" pos:column="42"/></literal><operator pos:line="53" pos:column="42">)<pos:position pos:line="53" pos:column="43"/></operator> <operator pos:line="53" pos:column="44">==<pos:position pos:line="53" pos:column="46"/></operator> <name pos:line="53" pos:column="47">charset_not<pos:position pos:line="53" pos:column="58"/></name></expr> ?<pos:position pos:line="53" pos:column="60"/></condition><then pos:line="53" pos:column="60"> <expr><literal type="string" pos:line="53" pos:column="61">"_not"<pos:position pos:line="53" pos:column="67"/></literal></expr> <pos:position pos:line="53" pos:column="68"/></then><else pos:line="53" pos:column="68">: <expr><literal type="string" pos:line="53" pos:column="70">""<pos:position pos:line="53" pos:column="72"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="53" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="74"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="55" pos:column="13">assert<pos:position pos:line="55" pos:column="19"/></name><argument_list pos:line="55" pos:column="19">(<argument><expr><name pos:line="55" pos:column="20">p<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">+<pos:position pos:line="55" pos:column="23"/></operator> <operator pos:line="55" pos:column="24">*<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="25">p<pos:position pos:line="55" pos:column="26"/></name> <operator pos:line="55" pos:column="27">&lt;<pos:position pos:line="55" pos:column="31"/></operator> <name pos:line="55" pos:column="29">pend<pos:position pos:line="55" pos:column="33"/></name></expr></argument>)<pos:position pos:line="55" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="35"/></expr_stmt>

            <for pos:line="57" pos:column="13">for <control pos:line="57" pos:column="17">(<init><expr><name pos:line="57" pos:column="18">c<pos:position pos:line="57" pos:column="19"/></name> <operator pos:line="57" pos:column="20">=<pos:position pos:line="57" pos:column="21"/></operator> <literal type="number" pos:line="57" pos:column="22">0<pos:position pos:line="57" pos:column="23"/></literal></expr>;<pos:position pos:line="57" pos:column="24"/></init> <condition><expr><name pos:line="57" pos:column="25">c<pos:position pos:line="57" pos:column="26"/></name> <operator pos:line="57" pos:column="27">&lt;<pos:position pos:line="57" pos:column="31"/></operator> <operator pos:line="57" pos:column="29">*<pos:position pos:line="57" pos:column="30"/></operator><name pos:line="57" pos:column="30">p<pos:position pos:line="57" pos:column="31"/></name></expr>;<pos:position pos:line="57" pos:column="32"/></condition> <incr><expr><name pos:line="57" pos:column="33">c<pos:position pos:line="57" pos:column="34"/></name><operator pos:line="57" pos:column="34">++<pos:position pos:line="57" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="57" pos:column="37"/></control> <block pos:line="57" pos:column="38">{
                <decl_stmt><decl><type><name pos:line="58" pos:column="17">unsigned<pos:position pos:line="58" pos:column="25"/></name></type> <name pos:line="58" pos:column="26">bit<pos:position pos:line="58" pos:column="29"/></name></decl>;<pos:position pos:line="58" pos:column="30"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="59" pos:column="17">unsigned<pos:position pos:line="59" pos:column="25"/></name> <name pos:line="59" pos:column="26">char<pos:position pos:line="59" pos:column="30"/></name></type> <name pos:line="59" pos:column="31">map_byte<pos:position pos:line="59" pos:column="39"/></name> <init pos:line="59" pos:column="40">= <expr><name><name pos:line="59" pos:column="42">p<pos:position pos:line="59" pos:column="43"/></name><index pos:line="59" pos:column="43">[<expr><literal type="number" pos:line="59" pos:column="44">1<pos:position pos:line="59" pos:column="45"/></literal> <operator pos:line="59" pos:column="46">+<pos:position pos:line="59" pos:column="47"/></operator> <name pos:line="59" pos:column="48">c<pos:position pos:line="59" pos:column="49"/></name></expr>]<pos:position pos:line="59" pos:column="50"/></index></name></expr></init></decl>;<pos:position pos:line="59" pos:column="51"/></decl_stmt>

                <expr_stmt><expr><call><name pos:line="61" pos:column="17">putchar<pos:position pos:line="61" pos:column="24"/></name><argument_list pos:line="61" pos:column="24">(<argument><expr><literal type="char" pos:line="61" pos:column="25">'/'<pos:position pos:line="61" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="30"/></expr_stmt>

                <for pos:line="63" pos:column="17">for <control pos:line="63" pos:column="21">(<init><expr><name pos:line="63" pos:column="22">bit<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">=<pos:position pos:line="63" pos:column="27"/></operator> <literal type="number" pos:line="63" pos:column="28">0<pos:position pos:line="63" pos:column="29"/></literal></expr>;<pos:position pos:line="63" pos:column="30"/></init> <condition><expr><name pos:line="63" pos:column="31">bit<pos:position pos:line="63" pos:column="34"/></name> <operator pos:line="63" pos:column="35">&lt;<pos:position pos:line="63" pos:column="39"/></operator> <name pos:line="63" pos:column="37">BYTEWIDTH<pos:position pos:line="63" pos:column="46"/></name></expr>;<pos:position pos:line="63" pos:column="47"/></condition> <incr><expr><name pos:line="63" pos:column="48">bit<pos:position pos:line="63" pos:column="51"/></name><operator pos:line="63" pos:column="51">++<pos:position pos:line="63" pos:column="53"/></operator></expr></incr>)<pos:position pos:line="63" pos:column="54"/></control>
                    <block type="pseudo"><if pos:line="64" pos:column="21">if <condition pos:line="64" pos:column="24">(<expr><name pos:line="64" pos:column="25">map_byte<pos:position pos:line="64" pos:column="33"/></name> <operator pos:line="64" pos:column="34">&amp;<pos:position pos:line="64" pos:column="39"/></operator> <operator pos:line="64" pos:column="36">(<pos:position pos:line="64" pos:column="37"/></operator><literal type="number" pos:line="64" pos:column="37">1<pos:position pos:line="64" pos:column="38"/></literal> <operator pos:line="64" pos:column="39">&lt;&lt;<pos:position pos:line="64" pos:column="47"/></operator> <name pos:line="64" pos:column="42">bit<pos:position pos:line="64" pos:column="45"/></name><operator pos:line="64" pos:column="45">)<pos:position pos:line="64" pos:column="46"/></operator></expr>)<pos:position pos:line="64" pos:column="47"/></condition><then pos:line="64" pos:column="47">
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="25">printchar<pos:position pos:line="65" pos:column="34"/></name><argument_list pos:line="65" pos:column="34">(<argument><expr><name pos:line="65" pos:column="35">c<pos:position pos:line="65" pos:column="36"/></name> <operator pos:line="65" pos:column="37">*<pos:position pos:line="65" pos:column="38"/></operator> <name pos:line="65" pos:column="39">BYTEWIDTH<pos:position pos:line="65" pos:column="48"/></name> <operator pos:line="65" pos:column="49">+<pos:position pos:line="65" pos:column="50"/></operator> <name pos:line="65" pos:column="51">bit<pos:position pos:line="65" pos:column="54"/></name></expr></argument>)<pos:position pos:line="65" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="56"/></expr_stmt></block></then></if></block></for>
            }<pos:position pos:line="66" pos:column="14"/></block></for>
            <expr_stmt><expr><name pos:line="67" pos:column="13">p<pos:position pos:line="67" pos:column="14"/></name> <operator pos:line="67" pos:column="15">+=<pos:position pos:line="67" pos:column="17"/></operator> <literal type="number" pos:line="67" pos:column="18">1<pos:position pos:line="67" pos:column="19"/></literal> <operator pos:line="67" pos:column="20">+<pos:position pos:line="67" pos:column="21"/></operator> <operator pos:line="67" pos:column="22">*<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="23">p<pos:position pos:line="67" pos:column="24"/></name></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>
            <break pos:line="68" pos:column="13">break;<pos:position pos:line="68" pos:column="19"/></break>
        }<pos:position pos:line="69" pos:column="10"/></block>

        <case pos:line="71" pos:column="9">case <expr><name pos:line="71" pos:column="14">begline<pos:position pos:line="71" pos:column="21"/></name></expr>:<pos:position pos:line="71" pos:column="22"/></case>
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">printf<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">(<argument><expr><literal type="string" pos:line="72" pos:column="20">"/begline"<pos:position pos:line="72" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="32"/></expr_stmt>
            <break pos:line="73" pos:column="13">break;<pos:position pos:line="73" pos:column="19"/></break>

        <case pos:line="75" pos:column="9">case <expr><name pos:line="75" pos:column="14">endline<pos:position pos:line="75" pos:column="21"/></name></expr>:<pos:position pos:line="75" pos:column="22"/></case>
            <expr_stmt><expr><call><name pos:line="76" pos:column="13">printf<pos:position pos:line="76" pos:column="19"/></name><argument_list pos:line="76" pos:column="19">(<argument><expr><literal type="string" pos:line="76" pos:column="20">"/endline"<pos:position pos:line="76" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="32"/></expr_stmt>
            <break pos:line="77" pos:column="13">break;<pos:position pos:line="77" pos:column="19"/></break>

        <case pos:line="79" pos:column="9">case <expr><name pos:line="79" pos:column="14">on_failure_jump<pos:position pos:line="79" pos:column="29"/></name></expr>:<pos:position pos:line="79" pos:column="30"/></case>
            <expr_stmt><expr><call><name pos:line="80" pos:column="13">extract_number_and_incr<pos:position pos:line="80" pos:column="36"/></name><argument_list pos:line="80" pos:column="36">(<argument><expr><operator pos:line="80" pos:column="37">&amp;<pos:position pos:line="80" pos:column="42"/></operator><name pos:line="80" pos:column="38">mcnt<pos:position pos:line="80" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="44">&amp;<pos:position pos:line="80" pos:column="49"/></operator><name pos:line="80" pos:column="45">p<pos:position pos:line="80" pos:column="46"/></name></expr></argument>)<pos:position pos:line="80" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">printf<pos:position pos:line="81" pos:column="19"/></name><argument_list pos:line="81" pos:column="19">(<argument><expr><literal type="string" pos:line="81" pos:column="20">"/on_failure_jump/0/%d"<pos:position pos:line="81" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="45">mcnt<pos:position pos:line="81" pos:column="49"/></name></expr></argument>)<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="51"/></expr_stmt>
            <break pos:line="82" pos:column="13">break;<pos:position pos:line="82" pos:column="19"/></break>

        <case pos:line="84" pos:column="9">case <expr><name pos:line="84" pos:column="14">on_failure_keep_string_jump<pos:position pos:line="84" pos:column="41"/></name></expr>:<pos:position pos:line="84" pos:column="42"/></case>
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">extract_number_and_incr<pos:position pos:line="85" pos:column="36"/></name><argument_list pos:line="85" pos:column="36">(<argument><expr><operator pos:line="85" pos:column="37">&amp;<pos:position pos:line="85" pos:column="42"/></operator><name pos:line="85" pos:column="38">mcnt<pos:position pos:line="85" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="44">&amp;<pos:position pos:line="85" pos:column="49"/></operator><name pos:line="85" pos:column="45">p<pos:position pos:line="85" pos:column="46"/></name></expr></argument>)<pos:position pos:line="85" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">printf<pos:position pos:line="86" pos:column="19"/></name><argument_list pos:line="86" pos:column="19">(<argument><expr><literal type="string" pos:line="86" pos:column="20">"/on_failure_keep_string_jump/0/%d"<pos:position pos:line="86" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="57">mcnt<pos:position pos:line="86" pos:column="61"/></name></expr></argument>)<pos:position pos:line="86" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="63"/></expr_stmt>
            <break pos:line="87" pos:column="13">break;<pos:position pos:line="87" pos:column="19"/></break>

        <case pos:line="89" pos:column="9">case <expr><name pos:line="89" pos:column="14">dummy_failure_jump<pos:position pos:line="89" pos:column="32"/></name></expr>:<pos:position pos:line="89" pos:column="33"/></case>
            <expr_stmt><expr><call><name pos:line="90" pos:column="13">extract_number_and_incr<pos:position pos:line="90" pos:column="36"/></name><argument_list pos:line="90" pos:column="36">(<argument><expr><operator pos:line="90" pos:column="37">&amp;<pos:position pos:line="90" pos:column="42"/></operator><name pos:line="90" pos:column="38">mcnt<pos:position pos:line="90" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="90" pos:column="44">&amp;<pos:position pos:line="90" pos:column="49"/></operator><name pos:line="90" pos:column="45">p<pos:position pos:line="90" pos:column="46"/></name></expr></argument>)<pos:position pos:line="90" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">printf<pos:position pos:line="91" pos:column="19"/></name><argument_list pos:line="91" pos:column="19">(<argument><expr><literal type="string" pos:line="91" pos:column="20">"/dummy_failure_jump/0/%d"<pos:position pos:line="91" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="48">mcnt<pos:position pos:line="91" pos:column="52"/></name></expr></argument>)<pos:position pos:line="91" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="54"/></expr_stmt>
            <break pos:line="92" pos:column="13">break;<pos:position pos:line="92" pos:column="19"/></break>

        <case pos:line="94" pos:column="9">case <expr><name pos:line="94" pos:column="14">push_dummy_failure<pos:position pos:line="94" pos:column="32"/></name></expr>:<pos:position pos:line="94" pos:column="33"/></case>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">printf<pos:position pos:line="95" pos:column="19"/></name><argument_list pos:line="95" pos:column="19">(<argument><expr><literal type="string" pos:line="95" pos:column="20">"/push_dummy_failure"<pos:position pos:line="95" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="43"/></expr_stmt>
            <break pos:line="96" pos:column="13">break;<pos:position pos:line="96" pos:column="19"/></break>

        <case pos:line="98" pos:column="9">case <expr><name pos:line="98" pos:column="14">maybe_pop_jump<pos:position pos:line="98" pos:column="28"/></name></expr>:<pos:position pos:line="98" pos:column="29"/></case>
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">extract_number_and_incr<pos:position pos:line="99" pos:column="36"/></name><argument_list pos:line="99" pos:column="36">(<argument><expr><operator pos:line="99" pos:column="37">&amp;<pos:position pos:line="99" pos:column="42"/></operator><name pos:line="99" pos:column="38">mcnt<pos:position pos:line="99" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="44">&amp;<pos:position pos:line="99" pos:column="49"/></operator><name pos:line="99" pos:column="45">p<pos:position pos:line="99" pos:column="46"/></name></expr></argument>)<pos:position pos:line="99" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="100" pos:column="13">printf<pos:position pos:line="100" pos:column="19"/></name><argument_list pos:line="100" pos:column="19">(<argument><expr><literal type="string" pos:line="100" pos:column="20">"/maybe_pop_jump/0/%d"<pos:position pos:line="100" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="100" pos:column="44">mcnt<pos:position pos:line="100" pos:column="48"/></name></expr></argument>)<pos:position pos:line="100" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="50"/></expr_stmt>
            <break pos:line="101" pos:column="13">break;<pos:position pos:line="101" pos:column="19"/></break>

        <case pos:line="103" pos:column="9">case <expr><name pos:line="103" pos:column="14">pop_failure_jump<pos:position pos:line="103" pos:column="30"/></name></expr>:<pos:position pos:line="103" pos:column="31"/></case>
            <expr_stmt><expr><call><name pos:line="104" pos:column="13">extract_number_and_incr<pos:position pos:line="104" pos:column="36"/></name><argument_list pos:line="104" pos:column="36">(<argument><expr><operator pos:line="104" pos:column="37">&amp;<pos:position pos:line="104" pos:column="42"/></operator><name pos:line="104" pos:column="38">mcnt<pos:position pos:line="104" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="44">&amp;<pos:position pos:line="104" pos:column="49"/></operator><name pos:line="104" pos:column="45">p<pos:position pos:line="104" pos:column="46"/></name></expr></argument>)<pos:position pos:line="104" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">printf<pos:position pos:line="105" pos:column="19"/></name><argument_list pos:line="105" pos:column="19">(<argument><expr><literal type="string" pos:line="105" pos:column="20">"/pop_failure_jump/0/%d"<pos:position pos:line="105" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="46">mcnt<pos:position pos:line="105" pos:column="50"/></name></expr></argument>)<pos:position pos:line="105" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="52"/></expr_stmt>
            <break pos:line="106" pos:column="13">break;<pos:position pos:line="106" pos:column="19"/></break>

        <case pos:line="108" pos:column="9">case <expr><name pos:line="108" pos:column="14">jump_past_alt<pos:position pos:line="108" pos:column="27"/></name></expr>:<pos:position pos:line="108" pos:column="28"/></case>
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">extract_number_and_incr<pos:position pos:line="109" pos:column="36"/></name><argument_list pos:line="109" pos:column="36">(<argument><expr><operator pos:line="109" pos:column="37">&amp;<pos:position pos:line="109" pos:column="42"/></operator><name pos:line="109" pos:column="38">mcnt<pos:position pos:line="109" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="44">&amp;<pos:position pos:line="109" pos:column="49"/></operator><name pos:line="109" pos:column="45">p<pos:position pos:line="109" pos:column="46"/></name></expr></argument>)<pos:position pos:line="109" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">printf<pos:position pos:line="110" pos:column="19"/></name><argument_list pos:line="110" pos:column="19">(<argument><expr><literal type="string" pos:line="110" pos:column="20">"/jump_past_alt/0/%d"<pos:position pos:line="110" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="43">mcnt<pos:position pos:line="110" pos:column="47"/></name></expr></argument>)<pos:position pos:line="110" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="49"/></expr_stmt>
            <break pos:line="111" pos:column="13">break;<pos:position pos:line="111" pos:column="19"/></break>

        <case pos:line="113" pos:column="9">case <expr><name pos:line="113" pos:column="14">jump<pos:position pos:line="113" pos:column="18"/></name></expr>:<pos:position pos:line="113" pos:column="19"/></case>
            <expr_stmt><expr><call><name pos:line="114" pos:column="13">extract_number_and_incr<pos:position pos:line="114" pos:column="36"/></name><argument_list pos:line="114" pos:column="36">(<argument><expr><operator pos:line="114" pos:column="37">&amp;<pos:position pos:line="114" pos:column="42"/></operator><name pos:line="114" pos:column="38">mcnt<pos:position pos:line="114" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="114" pos:column="44">&amp;<pos:position pos:line="114" pos:column="49"/></operator><name pos:line="114" pos:column="45">p<pos:position pos:line="114" pos:column="46"/></name></expr></argument>)<pos:position pos:line="114" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">printf<pos:position pos:line="115" pos:column="19"/></name><argument_list pos:line="115" pos:column="19">(<argument><expr><literal type="string" pos:line="115" pos:column="20">"/jump/0/%d"<pos:position pos:line="115" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="115" pos:column="34">mcnt<pos:position pos:line="115" pos:column="38"/></name></expr></argument>)<pos:position pos:line="115" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="40"/></expr_stmt>
            <break pos:line="116" pos:column="13">break;<pos:position pos:line="116" pos:column="19"/></break>

        <case pos:line="118" pos:column="9">case <expr><name pos:line="118" pos:column="14">succeed_n<pos:position pos:line="118" pos:column="23"/></name></expr>:<pos:position pos:line="118" pos:column="24"/></case>
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">extract_number_and_incr<pos:position pos:line="119" pos:column="36"/></name><argument_list pos:line="119" pos:column="36">(<argument><expr><operator pos:line="119" pos:column="37">&amp;<pos:position pos:line="119" pos:column="42"/></operator><name pos:line="119" pos:column="38">mcnt<pos:position pos:line="119" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="119" pos:column="44">&amp;<pos:position pos:line="119" pos:column="49"/></operator><name pos:line="119" pos:column="45">p<pos:position pos:line="119" pos:column="46"/></name></expr></argument>)<pos:position pos:line="119" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">extract_number_and_incr<pos:position pos:line="120" pos:column="36"/></name><argument_list pos:line="120" pos:column="36">(<argument><expr><operator pos:line="120" pos:column="37">&amp;<pos:position pos:line="120" pos:column="42"/></operator><name pos:line="120" pos:column="38">mcnt2<pos:position pos:line="120" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="45">&amp;<pos:position pos:line="120" pos:column="50"/></operator><name pos:line="120" pos:column="46">p<pos:position pos:line="120" pos:column="47"/></name></expr></argument>)<pos:position pos:line="120" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="121" pos:column="13">printf<pos:position pos:line="121" pos:column="19"/></name><argument_list pos:line="121" pos:column="19">(<argument><expr><literal type="string" pos:line="121" pos:column="20">"/succeed_n/0/%d/0/%d"<pos:position pos:line="121" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="121" pos:column="44">mcnt<pos:position pos:line="121" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="50">mcnt2<pos:position pos:line="121" pos:column="55"/></name></expr></argument>)<pos:position pos:line="121" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="57"/></expr_stmt>
            <break pos:line="122" pos:column="13">break;<pos:position pos:line="122" pos:column="19"/></break>

        <case pos:line="124" pos:column="9">case <expr><name pos:line="124" pos:column="14">jump_n<pos:position pos:line="124" pos:column="20"/></name></expr>:<pos:position pos:line="124" pos:column="21"/></case>
            <expr_stmt><expr><call><name pos:line="125" pos:column="13">extract_number_and_incr<pos:position pos:line="125" pos:column="36"/></name><argument_list pos:line="125" pos:column="36">(<argument><expr><operator pos:line="125" pos:column="37">&amp;<pos:position pos:line="125" pos:column="42"/></operator><name pos:line="125" pos:column="38">mcnt<pos:position pos:line="125" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="44">&amp;<pos:position pos:line="125" pos:column="49"/></operator><name pos:line="125" pos:column="45">p<pos:position pos:line="125" pos:column="46"/></name></expr></argument>)<pos:position pos:line="125" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="126" pos:column="13">extract_number_and_incr<pos:position pos:line="126" pos:column="36"/></name><argument_list pos:line="126" pos:column="36">(<argument><expr><operator pos:line="126" pos:column="37">&amp;<pos:position pos:line="126" pos:column="42"/></operator><name pos:line="126" pos:column="38">mcnt2<pos:position pos:line="126" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="126" pos:column="45">&amp;<pos:position pos:line="126" pos:column="50"/></operator><name pos:line="126" pos:column="46">p<pos:position pos:line="126" pos:column="47"/></name></expr></argument>)<pos:position pos:line="126" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="127" pos:column="13">printf<pos:position pos:line="127" pos:column="19"/></name><argument_list pos:line="127" pos:column="19">(<argument><expr><literal type="string" pos:line="127" pos:column="20">"/jump_n/0/%d/0/%d"<pos:position pos:line="127" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="127" pos:column="41">mcnt<pos:position pos:line="127" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="47">mcnt2<pos:position pos:line="127" pos:column="52"/></name></expr></argument>)<pos:position pos:line="127" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="54"/></expr_stmt>
            <break pos:line="128" pos:column="13">break;<pos:position pos:line="128" pos:column="19"/></break>

        <case pos:line="130" pos:column="9">case <expr><name pos:line="130" pos:column="14">set_number_at<pos:position pos:line="130" pos:column="27"/></name></expr>:<pos:position pos:line="130" pos:column="28"/></case>
            <expr_stmt><expr><call><name pos:line="131" pos:column="13">extract_number_and_incr<pos:position pos:line="131" pos:column="36"/></name><argument_list pos:line="131" pos:column="36">(<argument><expr><operator pos:line="131" pos:column="37">&amp;<pos:position pos:line="131" pos:column="42"/></operator><name pos:line="131" pos:column="38">mcnt<pos:position pos:line="131" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="44">&amp;<pos:position pos:line="131" pos:column="49"/></operator><name pos:line="131" pos:column="45">p<pos:position pos:line="131" pos:column="46"/></name></expr></argument>)<pos:position pos:line="131" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="132" pos:column="13">extract_number_and_incr<pos:position pos:line="132" pos:column="36"/></name><argument_list pos:line="132" pos:column="36">(<argument><expr><operator pos:line="132" pos:column="37">&amp;<pos:position pos:line="132" pos:column="42"/></operator><name pos:line="132" pos:column="38">mcnt2<pos:position pos:line="132" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="132" pos:column="45">&amp;<pos:position pos:line="132" pos:column="50"/></operator><name pos:line="132" pos:column="46">p<pos:position pos:line="132" pos:column="47"/></name></expr></argument>)<pos:position pos:line="132" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="133" pos:column="13">printf<pos:position pos:line="133" pos:column="19"/></name><argument_list pos:line="133" pos:column="19">(<argument><expr><literal type="string" pos:line="133" pos:column="20">"/set_number_at/0/%d/0/%d"<pos:position pos:line="133" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="48">mcnt<pos:position pos:line="133" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="54">mcnt2<pos:position pos:line="133" pos:column="59"/></name></expr></argument>)<pos:position pos:line="133" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="61"/></expr_stmt>
            <break pos:line="134" pos:column="13">break;<pos:position pos:line="134" pos:column="19"/></break>

        <case pos:line="136" pos:column="9">case <expr><name pos:line="136" pos:column="14">wordbound<pos:position pos:line="136" pos:column="23"/></name></expr>:<pos:position pos:line="136" pos:column="24"/></case>
            <expr_stmt><expr><call><name pos:line="137" pos:column="13">printf<pos:position pos:line="137" pos:column="19"/></name><argument_list pos:line="137" pos:column="19">(<argument><expr><literal type="string" pos:line="137" pos:column="20">"/wordbound"<pos:position pos:line="137" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="34"/></expr_stmt>
            <break pos:line="138" pos:column="13">break;<pos:position pos:line="138" pos:column="19"/></break>

        <case pos:line="140" pos:column="9">case <expr><name pos:line="140" pos:column="14">notwordbound<pos:position pos:line="140" pos:column="26"/></name></expr>:<pos:position pos:line="140" pos:column="27"/></case>
            <expr_stmt><expr><call><name pos:line="141" pos:column="13">printf<pos:position pos:line="141" pos:column="19"/></name><argument_list pos:line="141" pos:column="19">(<argument><expr><literal type="string" pos:line="141" pos:column="20">"/notwordbound"<pos:position pos:line="141" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="37"/></expr_stmt>
            <break pos:line="142" pos:column="13">break;<pos:position pos:line="142" pos:column="19"/></break>

        <case pos:line="144" pos:column="9">case <expr><name pos:line="144" pos:column="14">wordbeg<pos:position pos:line="144" pos:column="21"/></name></expr>:<pos:position pos:line="144" pos:column="22"/></case>
            <expr_stmt><expr><call><name pos:line="145" pos:column="13">printf<pos:position pos:line="145" pos:column="19"/></name><argument_list pos:line="145" pos:column="19">(<argument><expr><literal type="string" pos:line="145" pos:column="20">"/wordbeg"<pos:position pos:line="145" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="32"/></expr_stmt>
            <break pos:line="146" pos:column="13">break;<pos:position pos:line="146" pos:column="19"/></break>

        <case pos:line="148" pos:column="9">case <expr><name pos:line="148" pos:column="14">wordend<pos:position pos:line="148" pos:column="21"/></name></expr>:<pos:position pos:line="148" pos:column="22"/></case>
            <expr_stmt><expr><call><name pos:line="149" pos:column="13">printf<pos:position pos:line="149" pos:column="19"/></name><argument_list pos:line="149" pos:column="19">(<argument><expr><literal type="string" pos:line="149" pos:column="20">"/wordend"<pos:position pos:line="149" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="32"/></expr_stmt>

        <case pos:line="151" pos:column="9">case <expr><name pos:line="151" pos:column="14">wordchar<pos:position pos:line="151" pos:column="22"/></name></expr>:<pos:position pos:line="151" pos:column="23"/></case>
            <expr_stmt><expr><call><name pos:line="152" pos:column="13">printf<pos:position pos:line="152" pos:column="19"/></name><argument_list pos:line="152" pos:column="19">(<argument><expr><literal type="string" pos:line="152" pos:column="20">"/wordchar"<pos:position pos:line="152" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="152" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="33"/></expr_stmt>
            <break pos:line="153" pos:column="13">break;<pos:position pos:line="153" pos:column="19"/></break>

        <case pos:line="155" pos:column="9">case <expr><name pos:line="155" pos:column="14">notwordchar<pos:position pos:line="155" pos:column="25"/></name></expr>:<pos:position pos:line="155" pos:column="26"/></case>
            <expr_stmt><expr><call><name pos:line="156" pos:column="13">printf<pos:position pos:line="156" pos:column="19"/></name><argument_list pos:line="156" pos:column="19">(<argument><expr><literal type="string" pos:line="156" pos:column="20">"/notwordchar"<pos:position pos:line="156" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="36"/></expr_stmt>
            <break pos:line="157" pos:column="13">break;<pos:position pos:line="157" pos:column="19"/></break>

        <case pos:line="159" pos:column="9">case <expr><name pos:line="159" pos:column="14">begbuf<pos:position pos:line="159" pos:column="20"/></name></expr>:<pos:position pos:line="159" pos:column="21"/></case>
            <expr_stmt><expr><call><name pos:line="160" pos:column="13">printf<pos:position pos:line="160" pos:column="19"/></name><argument_list pos:line="160" pos:column="19">(<argument><expr><literal type="string" pos:line="160" pos:column="20">"/begbuf"<pos:position pos:line="160" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="160" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="31"/></expr_stmt>
            <break pos:line="161" pos:column="13">break;<pos:position pos:line="161" pos:column="19"/></break>

        <case pos:line="163" pos:column="9">case <expr><name pos:line="163" pos:column="14">endbuf<pos:position pos:line="163" pos:column="20"/></name></expr>:<pos:position pos:line="163" pos:column="21"/></case>
            <expr_stmt><expr><call><name pos:line="164" pos:column="13">printf<pos:position pos:line="164" pos:column="19"/></name><argument_list pos:line="164" pos:column="19">(<argument><expr><literal type="string" pos:line="164" pos:column="20">"/endbuf"<pos:position pos:line="164" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="31"/></expr_stmt>
            <break pos:line="165" pos:column="13">break;<pos:position pos:line="165" pos:column="19"/></break>

        <default pos:line="167" pos:column="9">default:<pos:position pos:line="167" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="168" pos:column="13">printf<pos:position pos:line="168" pos:column="19"/></name><argument_list pos:line="168" pos:column="19">(<argument><expr><literal type="string" pos:line="168" pos:column="20">"?%d"<pos:position pos:line="168" pos:column="25"/></literal></expr></argument>, <argument><expr><operator pos:line="168" pos:column="27">*<pos:position pos:line="168" pos:column="28"/></operator><operator pos:line="168" pos:column="28">(<pos:position pos:line="168" pos:column="29"/></operator><name pos:line="168" pos:column="29">p<pos:position pos:line="168" pos:column="30"/></name> <operator pos:line="168" pos:column="31">-<pos:position pos:line="168" pos:column="32"/></operator> <literal type="number" pos:line="168" pos:column="33">1<pos:position pos:line="168" pos:column="34"/></literal><operator pos:line="168" pos:column="34">)<pos:position pos:line="168" pos:column="35"/></operator></expr></argument>)<pos:position pos:line="168" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="169" pos:column="10"/></block></switch>
    }<pos:position pos:line="170" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="171" pos:column="5">printf<pos:position pos:line="171" pos:column="11"/></name><argument_list pos:line="171" pos:column="11">(<argument><expr><literal type="string" pos:line="171" pos:column="12">"/\n"<pos:position pos:line="171" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="171" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="19"/></expr_stmt>
}<pos:position pos:line="172" pos:column="2"/></block></unit>
