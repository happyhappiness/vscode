<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_968_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Pipeline<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">terminateAll<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">int<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">xerrno<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <while pos:line="4" pos:column="5">while <condition pos:line="4" pos:column="11">(<expr><operator pos:line="4" pos:column="12">!<pos:position pos:line="4" pos:column="13"/></operator><call><name><name pos:line="4" pos:column="13">requests<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">.<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">empty<pos:position pos:line="4" pos:column="27"/></name></name><argument_list pos:line="4" pos:column="27">()<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="30"/></condition> <block pos:line="4" pos:column="31">{
        <decl_stmt><decl><type><name><name pos:line="5" pos:column="9">Http<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">::<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">StreamPointer<pos:position pos:line="5" pos:column="28"/></name></name></type> <name pos:line="5" pos:column="29">context<pos:position pos:line="5" pos:column="36"/></name> <init pos:line="5" pos:column="37">= <expr><call><name><name pos:line="5" pos:column="39">requests<pos:position pos:line="5" pos:column="47"/></name><operator pos:line="5" pos:column="47">.<pos:position pos:line="5" pos:column="48"/></operator><name pos:line="5" pos:column="48">front<pos:position pos:line="5" pos:column="53"/></name></name><argument_list pos:line="5" pos:column="53">()<pos:position pos:line="5" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="56"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">33<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="20">3<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="23">"Pipeline "<pos:position pos:line="6" pos:column="34"/></literal> <operator pos:line="6" pos:column="35">&lt;&lt;<pos:position pos:line="6" pos:column="43"/></operator> <operator pos:line="6" pos:column="38">(<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="39">void<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">*<pos:position pos:line="6" pos:column="44"/></operator><operator pos:line="6" pos:column="44">)<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="45">this<pos:position pos:line="6" pos:column="49"/></name> <operator pos:line="6" pos:column="50">&lt;&lt;<pos:position pos:line="6" pos:column="58"/></operator> <literal type="string" pos:line="6" pos:column="53">" notify("<pos:position pos:line="6" pos:column="63"/></literal> <operator pos:line="6" pos:column="64">&lt;&lt;<pos:position pos:line="6" pos:column="72"/></operator> <name pos:line="6" pos:column="67">xerrno<pos:position pos:line="6" pos:column="73"/></name> <operator pos:line="6" pos:column="74">&lt;&lt;<pos:position pos:line="6" pos:column="82"/></operator> <literal type="string" pos:line="6" pos:column="77">") "<pos:position pos:line="6" pos:column="81"/></literal> <operator pos:line="6" pos:column="82">&lt;&lt;<pos:position pos:line="6" pos:column="90"/></operator> <name pos:line="6" pos:column="85">context<pos:position pos:line="6" pos:column="92"/></name></expr></argument>)<pos:position pos:line="6" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="94"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="7" pos:column="9">context<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">noteIoError<pos:position pos:line="7" pos:column="29"/></name></name><argument_list pos:line="7" pos:column="29">(<argument><expr><name pos:line="7" pos:column="30">xerrno<pos:position pos:line="7" pos:column="36"/></name></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">context<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">finished<pos:position pos:line="8" pos:column="26"/></name></name><argument_list pos:line="8" pos:column="26">()<pos:position pos:line="8" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="29"/></expr_stmt>  <comment type="line" pos:line="8" pos:column="31">// cleanup and self-deregister</comment>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">assert<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">context<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">!=<pos:position pos:line="9" pos:column="26"/></operator> <call><name><name pos:line="9" pos:column="27">requests<pos:position pos:line="9" pos:column="35"/></name><operator pos:line="9" pos:column="35">.<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="36">front<pos:position pos:line="9" pos:column="41"/></name></name><argument_list pos:line="9" pos:column="41">()<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></while>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
