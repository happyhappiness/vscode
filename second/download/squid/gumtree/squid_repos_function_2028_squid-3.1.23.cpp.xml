<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2028_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">file_close<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">int<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">fd<pos:position pos:line="2" pos:column="18"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">fde<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">F<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><operator pos:line="4" pos:column="14">&amp;<pos:position pos:line="4" pos:column="19"/></operator><name><name pos:line="4" pos:column="15">fd_table<pos:position pos:line="4" pos:column="23"/></name><index pos:line="4" pos:column="23">[<expr><name pos:line="4" pos:column="24">fd<pos:position pos:line="4" pos:column="26"/></name></expr>]<pos:position pos:line="4" pos:column="27"/></index></name></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">PF<pos:position pos:line="5" pos:column="7"/></name> <modifier pos:line="5" pos:column="8">*<pos:position pos:line="5" pos:column="9"/></modifier></type><name pos:line="5" pos:column="9">read_callback<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">PROF_start<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">file_close<pos:position pos:line="6" pos:column="26"/></name></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">fd<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&gt;=<pos:position pos:line="7" pos:column="20"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name><name pos:line="8" pos:column="12">F<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">flags<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">.<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">open<pos:position pos:line="8" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">read_callback<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <name><name pos:line="10" pos:column="26">F<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">-&gt;<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="29">read_handler<pos:position pos:line="10" pos:column="41"/></name></name><operator pos:line="10" pos:column="41">)<pos:position pos:line="10" pos:column="42"/></operator></expr>)<pos:position pos:line="10" pos:column="43"/></condition><then pos:line="10" pos:column="43"> <block pos:line="10" pos:column="44">{
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">F<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">read_handler<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">NULL<pos:position pos:line="11" pos:column="31"/></name></expr>;<pos:position pos:line="11" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">read_callback<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><operator pos:line="12" pos:column="23">-<pos:position pos:line="12" pos:column="24"/></operator><literal type="number" pos:line="12" pos:column="24">1<pos:position pos:line="12" pos:column="25"/></literal></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="27">F<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">read_data<pos:position pos:line="12" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">F<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">flags<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">.<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">write_daemon<pos:position pos:line="15" pos:column="30"/></name></name></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31"> <block pos:line="15" pos:column="32">{
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><call><name pos:line="16" pos:column="5">defined<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">_SQUID_WIN32_<pos:position pos:line="16" pos:column="26"/></name></expr></argument>)<pos:position pos:line="16" pos:column="27"/></argument_list></call> <operator pos:line="16" pos:column="28">||<pos:position pos:line="16" pos:column="30"/></operator> <call><name pos:line="16" pos:column="31">defined<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">(<argument><expr><name pos:line="16" pos:column="39">_SQUID_OS2_<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></cpp:if>
        <comment type="block" pos:line="17" pos:column="9">/*
         * on some operating systems, you can not delete or rename
         * open files, so we won't allow delayed close.
         */</comment>

        <while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><operator pos:line="22" pos:column="16">!<pos:position pos:line="22" pos:column="17"/></operator><call><name pos:line="22" pos:column="17">diskWriteIsComplete<pos:position pos:line="22" pos:column="36"/></name><argument_list pos:line="22" pos:column="36">(<argument><expr><name pos:line="22" pos:column="37">fd<pos:position pos:line="22" pos:column="39"/></name></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="41"/></condition>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="13">diskHandleWrite<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">fd<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="33">NULL<pos:position pos:line="23" pos:column="37"/></name></expr></argument>)<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="39"/></expr_stmt></block></while>

<cpp:else pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">else<pos:position pos:line="25" pos:column="6"/></cpp:directive></cpp:else>

        <expr_stmt><expr><name><name pos:line="27" pos:column="9">F<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">flags<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">.<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">close_request<pos:position pos:line="27" pos:column="31"/></name></name> <operator pos:line="27" pos:column="32">=<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="34">1<pos:position pos:line="27" pos:column="35"/></literal></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">6<pos:position pos:line="29" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="19">2<pos:position pos:line="29" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="22">"file_close: FD "<pos:position pos:line="29" pos:column="39"/></literal> <operator pos:line="29" pos:column="40">&lt;&lt;<pos:position pos:line="29" pos:column="48"/></operator> <name pos:line="29" pos:column="43">fd<pos:position pos:line="29" pos:column="45"/></name> <operator pos:line="29" pos:column="46">&lt;&lt;<pos:position pos:line="29" pos:column="54"/></operator> <literal type="string" pos:line="29" pos:column="49">", delaying close"<pos:position pos:line="29" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="31" pos:column="9">PROF_stop<pos:position pos:line="31" pos:column="18"/></name><argument_list pos:line="31" pos:column="18">(<argument><expr><name pos:line="31" pos:column="19">file_close<pos:position pos:line="31" pos:column="29"/></name></expr></argument>)<pos:position pos:line="31" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>

        <return pos:line="33" pos:column="9">return;<pos:position pos:line="33" pos:column="16"/></return>

<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="39" pos:column="5">/*
     * Assert there is no write callback.  Otherwise we might be
     * leaking write state data by closing the descriptor
     */</comment>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">assert<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><name><name pos:line="43" pos:column="12">F<pos:position pos:line="43" pos:column="13"/></name><operator pos:line="43" pos:column="13">-&gt;<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="15">write_handler<pos:position pos:line="43" pos:column="28"/></name></name> <operator pos:line="43" pos:column="29">==<pos:position pos:line="43" pos:column="31"/></operator> <name pos:line="43" pos:column="32">NULL<pos:position pos:line="43" pos:column="36"/></name></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>

<cpp:if pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">if<pos:position pos:line="45" pos:column="4"/></cpp:directive> <expr><name pos:line="45" pos:column="5">CALL_FSYNC_BEFORE_CLOSE<pos:position pos:line="45" pos:column="28"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">fsync<pos:position pos:line="47" pos:column="10"/></name><argument_list pos:line="47" pos:column="10">(<argument><expr><name pos:line="47" pos:column="11">fd<pos:position pos:line="47" pos:column="13"/></name></expr></argument>)<pos:position pos:line="47" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="15"/></expr_stmt>

<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">close<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name pos:line="51" pos:column="11">fd<pos:position pos:line="51" pos:column="13"/></name></expr></argument>)<pos:position pos:line="51" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">debugs<pos:position pos:line="53" pos:column="11"/></name><argument_list pos:line="53" pos:column="11">(<argument><expr><literal type="number" pos:line="53" pos:column="12">6<pos:position pos:line="53" pos:column="13"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="53" pos:column="15">F<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">-&gt;<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="18">flags<pos:position pos:line="53" pos:column="23"/></name><operator pos:line="53" pos:column="23">.<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="24">close_request<pos:position pos:line="53" pos:column="37"/></name></name></expr> ?<pos:position pos:line="53" pos:column="39"/></condition><then pos:line="53" pos:column="39"> <expr><literal type="number" pos:line="53" pos:column="40">2<pos:position pos:line="53" pos:column="41"/></literal></expr> <pos:position pos:line="53" pos:column="42"/></then><else pos:line="53" pos:column="42">: <expr><literal type="number" pos:line="53" pos:column="44">5<pos:position pos:line="53" pos:column="45"/></literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="47">"file_close: FD "<pos:position pos:line="53" pos:column="64"/></literal> <operator pos:line="53" pos:column="65">&lt;&lt;<pos:position pos:line="53" pos:column="73"/></operator> <name pos:line="53" pos:column="68">fd<pos:position pos:line="53" pos:column="70"/></name> <operator pos:line="53" pos:column="71">&lt;&lt;<pos:position pos:line="53" pos:column="79"/></operator> <literal type="string" pos:line="53" pos:column="74">" really closing\n"<pos:position pos:line="53" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="95"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">fd_close<pos:position pos:line="55" pos:column="13"/></name><argument_list pos:line="55" pos:column="13">(<argument><expr><name pos:line="55" pos:column="14">fd<pos:position pos:line="55" pos:column="16"/></name></expr></argument>)<pos:position pos:line="55" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="18"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="57" pos:column="5">statCounter<pos:position pos:line="57" pos:column="16"/></name><operator pos:line="57" pos:column="16">.<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="17">syscalls<pos:position pos:line="57" pos:column="25"/></name><operator pos:line="57" pos:column="25">.<pos:position pos:line="57" pos:column="26"/></operator><name pos:line="57" pos:column="26">disk<pos:position pos:line="57" pos:column="30"/></name><operator pos:line="57" pos:column="30">.<pos:position pos:line="57" pos:column="31"/></operator><name pos:line="57" pos:column="31">closes<pos:position pos:line="57" pos:column="37"/></name></name><operator pos:line="57" pos:column="37">++<pos:position pos:line="57" pos:column="39"/></operator></expr>;<pos:position pos:line="57" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="59" pos:column="5">PROF_stop<pos:position pos:line="59" pos:column="14"/></name><argument_list pos:line="59" pos:column="14">(<argument><expr><name pos:line="59" pos:column="15">file_close<pos:position pos:line="59" pos:column="25"/></name></expr></argument>)<pos:position pos:line="59" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="27"/></expr_stmt>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
