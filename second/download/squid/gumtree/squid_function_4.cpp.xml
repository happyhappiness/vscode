<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">xmalloc_show_trace<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">void<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">p<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">sign<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">double<pos:position pos:line="4" pos:column="18"/></name></type> <name pos:line="4" pos:column="19">last_accounted<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><literal type="number" pos:line="4" pos:column="36">0<pos:position pos:line="4" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name pos:line="5" pos:column="12">size_t<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">last_total<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><literal type="number" pos:line="5" pos:column="32">0<pos:position pos:line="5" pos:column="33"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="35">last_mallinfo<pos:position pos:line="5" pos:column="48"/></name> <init pos:line="5" pos:column="49">= <expr><literal type="number" pos:line="5" pos:column="51">0<pos:position pos:line="5" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="53"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">double<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">accounted<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><call><name pos:line="6" pos:column="24">statMemoryAccounted<pos:position pos:line="6" pos:column="43"/></name><argument_list pos:line="6" pos:column="43">()<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">size_t<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">mi<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">sz<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">HAVE_MALLINFO<pos:position pos:line="9" pos:column="18"/></name></expr></cpp:if>

    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">mallinfo<pos:position pos:line="11" pos:column="20"/></name></name></type> <name pos:line="11" pos:column="21">mp<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><call><name pos:line="11" pos:column="26">mallinfo<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">()<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="37"/></decl_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">mi<pos:position pos:line="12" pos:column="7"/></name> <operator pos:line="12" pos:column="8">=<pos:position pos:line="12" pos:column="9"/></operator> <name><name pos:line="12" pos:column="10">mp<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">.<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">uordblks<pos:position pos:line="12" pos:column="21"/></name></name> <operator pos:line="12" pos:column="22">+<pos:position pos:line="12" pos:column="23"/></operator> <name><name pos:line="12" pos:column="24">mp<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">.<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">usmblks<pos:position pos:line="12" pos:column="34"/></name></name> <operator pos:line="12" pos:column="35">+<pos:position pos:line="12" pos:column="36"/></operator> <name><name pos:line="12" pos:column="37">mp<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">.<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="40">hblkhd<pos:position pos:line="12" pos:column="46"/></name></name></expr>;<pos:position pos:line="12" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="15" pos:column="5">sz<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <call><name pos:line="15" pos:column="10">xmallocblksize<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">p<pos:position pos:line="15" pos:column="26"/></name></expr></argument>)<pos:position pos:line="15" pos:column="27"/></argument_list></call> <operator pos:line="15" pos:column="28">*<pos:position pos:line="15" pos:column="29"/></operator> <name pos:line="15" pos:column="30">sign<pos:position pos:line="15" pos:column="34"/></name></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">xmalloc_total<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">+=<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">sz<pos:position pos:line="16" pos:column="24"/></name></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">xmalloc_count<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">+=<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="22">sign<pos:position pos:line="17" pos:column="26"/></name> <operator pos:line="17" pos:column="27">&gt;<pos:position pos:line="17" pos:column="31"/></operator> <literal type="number" pos:line="17" pos:column="29">0<pos:position pos:line="17" pos:column="30"/></literal></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">xmalloc_trace<pos:position pos:line="19" pos:column="22"/></name></expr>)<pos:position pos:line="19" pos:column="23"/></condition><then pos:line="19" pos:column="23"> <block pos:line="19" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">fprintf<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><name pos:line="20" pos:column="17">stderr<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="25">"%c%8p size=%5d/%d acc=%5.0f/%.0f mallinfo=%5d/%d %s:%d %s"<pos:position pos:line="20" pos:column="84"/></literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name pos:line="21" pos:column="17">sign<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">&gt;<pos:position pos:line="21" pos:column="26"/></operator> <literal type="number" pos:line="21" pos:column="24">0<pos:position pos:line="21" pos:column="25"/></literal></expr> ?<pos:position pos:line="21" pos:column="27"/></condition><then pos:line="21" pos:column="27"> <expr><literal type="char" pos:line="21" pos:column="28">'+'<pos:position pos:line="21" pos:column="31"/></literal></expr> <pos:position pos:line="21" pos:column="32"/></then><else pos:line="21" pos:column="32">: <expr><literal type="char" pos:line="21" pos:column="34">'-'<pos:position pos:line="21" pos:column="37"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">p<pos:position pos:line="21" pos:column="40"/></name></expr></argument>,
                <argument><expr><operator pos:line="22" pos:column="17">(<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">int<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">)<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="23">xmalloc_total<pos:position pos:line="22" pos:column="36"/></name> <operator pos:line="22" pos:column="37">-<pos:position pos:line="22" pos:column="38"/></operator> <name pos:line="22" pos:column="39">last_total<pos:position pos:line="22" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="51">(<pos:position pos:line="22" pos:column="52"/></operator><name pos:line="22" pos:column="52">int<pos:position pos:line="22" pos:column="55"/></name><operator pos:line="22" pos:column="55">)<pos:position pos:line="22" pos:column="56"/></operator> <name pos:line="22" pos:column="57">xmalloc_total<pos:position pos:line="22" pos:column="70"/></name></expr></argument>,
                <argument><expr><name pos:line="23" pos:column="17">accounted<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">-<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">last_accounted<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">accounted<pos:position pos:line="23" pos:column="54"/></name></expr></argument>,
                <argument><expr><operator pos:line="24" pos:column="17">(<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">int<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">)<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">mi<pos:position pos:line="24" pos:column="25"/></name> <operator pos:line="24" pos:column="26">-<pos:position pos:line="24" pos:column="27"/></operator> <name pos:line="24" pos:column="28">last_mallinfo<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="43">(<pos:position pos:line="24" pos:column="44"/></operator><name pos:line="24" pos:column="44">int<pos:position pos:line="24" pos:column="47"/></name><operator pos:line="24" pos:column="47">)<pos:position pos:line="24" pos:column="48"/></operator> <name pos:line="24" pos:column="49">mi<pos:position pos:line="24" pos:column="51"/></name></expr></argument>,
                <argument><expr><name pos:line="25" pos:column="17">xmalloc_file<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="31">xmalloc_line<pos:position pos:line="25" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">xmalloc_func<pos:position pos:line="25" pos:column="57"/></name></expr></argument>)<pos:position pos:line="25" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="59"/></expr_stmt>

        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">sign<pos:position pos:line="27" pos:column="17"/></name> <operator pos:line="27" pos:column="18">&lt;<pos:position pos:line="27" pos:column="22"/></operator> <literal type="number" pos:line="27" pos:column="20">0<pos:position pos:line="27" pos:column="21"/></literal></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="13">fprintf<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">stderr<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="29">" (%d %s:%d)\n"<pos:position pos:line="28" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="46">malloc_number<pos:position pos:line="28" pos:column="59"/></name><argument_list pos:line="28" pos:column="59">(<argument><expr><name pos:line="28" pos:column="60">p<pos:position pos:line="28" pos:column="61"/></name></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="64">malloc_file_name<pos:position pos:line="28" pos:column="80"/></name><argument_list pos:line="28" pos:column="80">(<argument><expr><name pos:line="28" pos:column="81">p<pos:position pos:line="28" pos:column="82"/></name></expr></argument>)<pos:position pos:line="28" pos:column="83"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="85">malloc_line_number<pos:position pos:line="28" pos:column="103"/></name><argument_list pos:line="28" pos:column="103">(<argument><expr><name pos:line="28" pos:column="104">p<pos:position pos:line="28" pos:column="105"/></name></expr></argument>)<pos:position pos:line="28" pos:column="106"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="108"/></expr_stmt></block></then>
        <else pos:line="29" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="13">fprintf<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">stderr<pos:position pos:line="30" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="29">" %d\n"<pos:position pos:line="30" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="38">xmalloc_count<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="53"/></expr_stmt></block></else></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="33" pos:column="5">last_total<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <name pos:line="33" pos:column="18">xmalloc_total<pos:position pos:line="33" pos:column="31"/></name></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="34" pos:column="5">last_accounted<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">accounted<pos:position pos:line="34" pos:column="31"/></name></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">last_mallinfo<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">mi<pos:position pos:line="35" pos:column="23"/></name></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
