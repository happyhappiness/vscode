<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2833_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int64_t<pos:position pos:line="1" pos:column="8"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeaderEntry<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">getInt64<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list> <specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert_eid<pos:position pos:line="4" pos:column="15"/></name> <argument_list pos:line="4" pos:column="16">(<argument><expr><name pos:line="4" pos:column="17">id<pos:position pos:line="4" pos:column="19"/></name></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name> <argument_list pos:line="5" pos:column="12">(<argument><expr><name><name pos:line="5" pos:column="13">Headers<pos:position pos:line="5" pos:column="20"/></name><index pos:line="5" pos:column="20">[<expr><name pos:line="5" pos:column="21">id<pos:position pos:line="5" pos:column="23"/></name></expr>]<pos:position pos:line="5" pos:column="24"/></index></name><operator pos:line="5" pos:column="24">.<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">type<pos:position pos:line="5" pos:column="29"/></name> <operator pos:line="5" pos:column="30">==<pos:position pos:line="5" pos:column="32"/></operator> <name pos:line="5" pos:column="33">ftInt64<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int64_t<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">val<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><operator pos:line="6" pos:column="19">-<pos:position pos:line="6" pos:column="20"/></operator><literal type="number" pos:line="6" pos:column="20">1<pos:position pos:line="6" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">ok<pos:position pos:line="7" pos:column="11"/></name> <init pos:line="7" pos:column="12">= <expr><call><name pos:line="7" pos:column="14">httpHeaderParseOffset<pos:position pos:line="7" pos:column="35"/></name><argument_list pos:line="7" pos:column="35">(<argument><expr><call><name><name pos:line="7" pos:column="36">value<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">.<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="42">termedBuf<pos:position pos:line="7" pos:column="51"/></name></name><argument_list pos:line="7" pos:column="51">()<pos:position pos:line="7" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="7" pos:column="55">&amp;<pos:position pos:line="7" pos:column="60"/></operator><name pos:line="7" pos:column="56">val<pos:position pos:line="7" pos:column="59"/></name></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">httpHeaderNoteParsedEntry<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">id<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="35">value<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="42">!<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="43">ok<pos:position pos:line="8" pos:column="45"/></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="47"/></expr_stmt>
    <comment type="block" pos:line="9" pos:column="5">/* XXX: Should we check ok - ie
     * return ok ? -1 : value;
     */</comment>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">val<pos:position pos:line="12" pos:column="15"/></name></expr>;<pos:position pos:line="12" pos:column="16"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
