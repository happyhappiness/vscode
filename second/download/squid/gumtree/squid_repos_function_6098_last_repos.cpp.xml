<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6098_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SBuf<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">File<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">readSmall<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name><name pos:line="2" pos:column="23">SBuf<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">size_type<pos:position pos:line="2" pos:column="38"/></name></name></type> <name pos:line="2" pos:column="39">minBytes<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name><name pos:line="2" pos:column="55">SBuf<pos:position pos:line="2" pos:column="59"/></name><operator pos:line="2" pos:column="59">::<pos:position pos:line="2" pos:column="61"/></operator><name pos:line="2" pos:column="61">size_type<pos:position pos:line="2" pos:column="70"/></name></name></type> <name pos:line="2" pos:column="71">maxBytes<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="80"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SBuf<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <specifier pos:line="5" pos:column="11">auto<pos:position pos:line="5" pos:column="15"/></specifier></type> <name pos:line="5" pos:column="16">readLimit<pos:position pos:line="5" pos:column="25"/></name> <init pos:line="5" pos:column="26">= <expr><name pos:line="5" pos:column="28">maxBytes<pos:position pos:line="5" pos:column="36"/></name> <operator pos:line="5" pos:column="37">+<pos:position pos:line="5" pos:column="38"/></operator> <literal type="number" pos:line="5" pos:column="39">1<pos:position pos:line="5" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="41"/></decl_stmt> <comment type="line" pos:line="5" pos:column="42">// to detect excessively large files that we do not handle</comment>
<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="6" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">DWORD<pos:position pos:line="7" pos:column="10"/></name></type> <name pos:line="7" pos:column="11">result<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name pos:line="8" pos:column="10">ReadFile<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">fd_<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><call><name><name pos:line="8" pos:column="24">buf<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">.<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">rawSpace<pos:position pos:line="8" pos:column="36"/></name></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">readLimit<pos:position pos:line="8" pos:column="46"/></name></expr></argument>)<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="8" pos:column="49">readLimit<pos:position pos:line="8" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="60">&amp;<pos:position pos:line="8" pos:column="65"/></operator><name pos:line="8" pos:column="61">result<pos:position pos:line="8" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="null" pos:line="8" pos:column="69">nullptr<pos:position pos:line="8" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="78"/></condition><then pos:line="8" pos:column="78"> <block pos:line="8" pos:column="79">{
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <specifier pos:line="9" pos:column="15">auto<pos:position pos:line="9" pos:column="19"/></specifier></type> <name pos:line="9" pos:column="20">savedError<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><call><name pos:line="9" pos:column="33">GetLastError<pos:position pos:line="9" pos:column="45"/></name><argument_list pos:line="9" pos:column="45">()<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="48"/></decl_stmt>
        <throw pos:line="10" pos:column="9">throw <expr><call><name pos:line="10" pos:column="15">TexcHere<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><call><name pos:line="10" pos:column="24">sysCallFailure<pos:position pos:line="10" pos:column="38"/></name><argument_list pos:line="10" pos:column="38">(<argument><expr><literal type="string" pos:line="10" pos:column="39">"ReadFile"<pos:position pos:line="10" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="10" pos:column="51">WindowsErrorMessage<pos:position pos:line="10" pos:column="70"/></name><argument_list pos:line="10" pos:column="70">(<argument><expr><name pos:line="10" pos:column="71">savedError<pos:position pos:line="10" pos:column="81"/></name></expr></argument>)<pos:position pos:line="10" pos:column="82"/></argument_list></call><operator pos:line="10" pos:column="82">.<pos:position pos:line="10" pos:column="83"/></operator><call><name pos:line="10" pos:column="83">c_str<pos:position pos:line="10" pos:column="88"/></name><argument_list pos:line="10" pos:column="88">()<pos:position pos:line="10" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="93"/></throw>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
<cpp:else pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">else<pos:position pos:line="12" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <specifier pos:line="13" pos:column="11">auto<pos:position pos:line="13" pos:column="15"/></specifier></type> <name pos:line="13" pos:column="16">result<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><call><name><operator pos:line="13" pos:column="25">::<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">read<pos:position pos:line="13" pos:column="31"/></name></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">fd_<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="37">buf<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">.<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">rawSpace<pos:position pos:line="13" pos:column="49"/></name></name><argument_list pos:line="13" pos:column="49">(<argument><expr><name pos:line="13" pos:column="50">readLimit<pos:position pos:line="13" pos:column="59"/></name></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="62">readLimit<pos:position pos:line="13" pos:column="71"/></name></expr></argument>)<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="73"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">result<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">&lt;<pos:position pos:line="14" pos:column="20"/></operator> <literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <specifier pos:line="15" pos:column="15">auto<pos:position pos:line="15" pos:column="19"/></specifier></type> <name pos:line="15" pos:column="20">savedErrno<pos:position pos:line="15" pos:column="30"/></name> <init pos:line="15" pos:column="31">= <expr><name pos:line="15" pos:column="33">errno<pos:position pos:line="15" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="39"/></decl_stmt>
        <throw pos:line="16" pos:column="9">throw <expr><call><name pos:line="16" pos:column="15">TexcHere<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><call><name pos:line="16" pos:column="24">sysCallError<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><literal type="string" pos:line="16" pos:column="37">"read"<pos:position pos:line="16" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="45">savedErrno<pos:position pos:line="16" pos:column="55"/></name></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="58"/></throw>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><specifier pos:line="19" pos:column="5">const<pos:position pos:line="19" pos:column="10"/></specifier> <specifier pos:line="19" pos:column="11">auto<pos:position pos:line="19" pos:column="15"/></specifier></type> <name pos:line="19" pos:column="16">bytesRead<pos:position pos:line="19" pos:column="25"/></name> <init pos:line="19" pos:column="26">= <expr><cast type="static" pos:line="19" pos:column="28">static_cast<argument_list type="generic" pos:line="19" pos:column="39">&lt;<argument><expr><name pos:line="19" pos:column="40">size_t<pos:position pos:line="19" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="19" pos:column="50"/></argument_list><argument_list pos:line="19" pos:column="47">(<argument><expr><name pos:line="19" pos:column="48">result<pos:position pos:line="19" pos:column="54"/></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="19" pos:column="56"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">assert<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">bytesRead<pos:position pos:line="20" pos:column="21"/></name> <operator pos:line="20" pos:column="22">&lt;=<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="25">readLimit<pos:position pos:line="20" pos:column="34"/></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">Must<pos:position pos:line="21" pos:column="9"/></name><argument_list pos:line="21" pos:column="9">(<argument><expr><operator pos:line="21" pos:column="10">!<pos:position pos:line="21" pos:column="11"/></operator><call><name><name pos:line="21" pos:column="11">buf<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">.<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">length<pos:position pos:line="21" pos:column="21"/></name></name><argument_list pos:line="21" pos:column="21">()<pos:position pos:line="21" pos:column="23"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">buf<pos:position pos:line="22" pos:column="8"/></name><operator pos:line="22" pos:column="8">.<pos:position pos:line="22" pos:column="9"/></operator><name pos:line="22" pos:column="9">forceSize<pos:position pos:line="22" pos:column="18"/></name></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">bytesRead<pos:position pos:line="22" pos:column="28"/></name></expr></argument>)<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><call><name><name pos:line="24" pos:column="9">buf<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">.<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">length<pos:position pos:line="24" pos:column="19"/></name></name><argument_list pos:line="24" pos:column="19">()<pos:position pos:line="24" pos:column="21"/></argument_list></call> <operator pos:line="24" pos:column="22">&lt;<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="24">minBytes<pos:position pos:line="24" pos:column="32"/></name></expr>)<pos:position pos:line="24" pos:column="33"/></condition><then pos:line="24" pos:column="33"> <block pos:line="24" pos:column="34">{
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">const<pos:position pos:line="25" pos:column="14"/></specifier> <specifier pos:line="25" pos:column="15">auto<pos:position pos:line="25" pos:column="19"/></specifier></type> <name pos:line="25" pos:column="20">failure<pos:position pos:line="25" pos:column="27"/></name> <init pos:line="25" pos:column="28">= <expr><ternary><condition><expr><call><name><name pos:line="25" pos:column="30">buf<pos:position pos:line="25" pos:column="33"/></name><operator pos:line="25" pos:column="33">.<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="34">length<pos:position pos:line="25" pos:column="40"/></name></name><argument_list pos:line="25" pos:column="40">()<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr> ?<pos:position pos:line="25" pos:column="44"/></condition><then pos:line="25" pos:column="44"> <expr><literal type="string" pos:line="25" pos:column="45">"premature eof"<pos:position pos:line="25" pos:column="60"/></literal></expr> <pos:position pos:line="25" pos:column="61"/></then><else pos:line="25" pos:column="61">: <expr><literal type="string" pos:line="25" pos:column="63">"empty file"<pos:position pos:line="25" pos:column="75"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="25" pos:column="76"/></decl_stmt>
        <throw pos:line="26" pos:column="9">throw <expr><call><name pos:line="26" pos:column="15">TexcHere<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">(<argument><expr><call><name pos:line="26" pos:column="24">sysCallFailure<pos:position pos:line="26" pos:column="38"/></name><argument_list pos:line="26" pos:column="38">(<argument><expr><literal type="string" pos:line="26" pos:column="39">"read"<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="47">failure<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="57"/></throw>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name><name pos:line="29" pos:column="9">buf<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">.<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="13">length<pos:position pos:line="29" pos:column="19"/></name></name><argument_list pos:line="29" pos:column="19">()<pos:position pos:line="29" pos:column="21"/></argument_list></call> <operator pos:line="29" pos:column="22">&gt;<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="24">maxBytes<pos:position pos:line="29" pos:column="32"/></name></expr>)<pos:position pos:line="29" pos:column="33"/></condition><then pos:line="29" pos:column="33"> <block pos:line="29" pos:column="34">{
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">const<pos:position pos:line="30" pos:column="14"/></specifier> <specifier pos:line="30" pos:column="15">auto<pos:position pos:line="30" pos:column="19"/></specifier></type> <name pos:line="30" pos:column="20">failure<pos:position pos:line="30" pos:column="27"/></name> <init pos:line="30" pos:column="28">= <expr><literal type="string" pos:line="30" pos:column="30">"unreasonably large file"<pos:position pos:line="30" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="30" pos:column="56"/></decl_stmt>
        <throw pos:line="31" pos:column="9">throw <expr><call><name pos:line="31" pos:column="15">TexcHere<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><call><name pos:line="31" pos:column="24">sysCallFailure<pos:position pos:line="31" pos:column="38"/></name><argument_list pos:line="31" pos:column="38">(<argument><expr><literal type="string" pos:line="31" pos:column="39">"read"<pos:position pos:line="31" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="47">failure<pos:position pos:line="31" pos:column="54"/></name></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></throw>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">Must<pos:position pos:line="34" pos:column="9"/></name><argument_list pos:line="34" pos:column="9">(<argument><expr><name pos:line="34" pos:column="10">minBytes<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">&lt;=<pos:position pos:line="34" pos:column="24"/></operator> <call><name><name pos:line="34" pos:column="22">buf<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">.<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="26">length<pos:position pos:line="34" pos:column="32"/></name></name><argument_list pos:line="34" pos:column="32">()<pos:position pos:line="34" pos:column="34"/></argument_list></call> <operator pos:line="34" pos:column="35">&amp;&amp;<pos:position pos:line="34" pos:column="45"/></operator> <call><name><name pos:line="34" pos:column="38">buf<pos:position pos:line="34" pos:column="41"/></name><operator pos:line="34" pos:column="41">.<pos:position pos:line="34" pos:column="42"/></operator><name pos:line="34" pos:column="42">length<pos:position pos:line="34" pos:column="48"/></name></name><argument_list pos:line="34" pos:column="48">()<pos:position pos:line="34" pos:column="50"/></argument_list></call> <operator pos:line="34" pos:column="51">&lt;=<pos:position pos:line="34" pos:column="56"/></operator> <name pos:line="34" pos:column="54">maxBytes<pos:position pos:line="34" pos:column="62"/></name></expr></argument>)<pos:position pos:line="34" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="64"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">buf<pos:position pos:line="35" pos:column="15"/></name></expr>;<pos:position pos:line="35" pos:column="16"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
