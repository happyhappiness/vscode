<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_604_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">commHandleWriteHelper<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">void<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type> <name pos:line="2" pos:column="30">data<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">CommQuotaQueue<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">queue<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><cast type="static" pos:line="4" pos:column="29">static_cast<argument_list type="generic" pos:line="4" pos:column="40">&lt;<argument><expr><name pos:line="4" pos:column="41">CommQuotaQueue<pos:position pos:line="4" pos:column="55"/></name><operator pos:line="4" pos:column="55">*<pos:position pos:line="4" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="60"/></argument_list><argument_list pos:line="4" pos:column="57">(<argument><expr><name pos:line="4" pos:column="58">data<pos:position pos:line="4" pos:column="62"/></name></expr></argument>)<pos:position pos:line="4" pos:column="63"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="64"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">queue<pos:position pos:line="5" pos:column="17"/></name></expr></argument>)<pos:position pos:line="5" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="19"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ClientInfo<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">clientInfo<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><name><name pos:line="7" pos:column="30">queue<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">-&gt;<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="37">clientInfo<pos:position pos:line="7" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>
    <comment type="line" pos:line="8" pos:column="5">// ClientInfo invalidates queue if freed, so if we got here through,</comment>
    <comment type="line" pos:line="9" pos:column="5">// evenAdd cbdata protections, everything should be valid and consistent</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">clientInfo<pos:position pos:line="10" pos:column="22"/></name></expr></argument>)<pos:position pos:line="10" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><call><name><name pos:line="11" pos:column="12">clientInfo<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">-&gt;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="24">hasQueue<pos:position pos:line="11" pos:column="32"/></name></name><argument_list pos:line="11" pos:column="32">()<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><call><name><name pos:line="12" pos:column="12">clientInfo<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">hasQueue<pos:position pos:line="12" pos:column="32"/></name></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">queue<pos:position pos:line="12" pos:column="38"/></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><operator pos:line="13" pos:column="12">!<pos:position pos:line="13" pos:column="13"/></operator><name><name pos:line="13" pos:column="13">clientInfo<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">-&gt;<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="25">selectWaiting<pos:position pos:line="13" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">assert<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><name><name pos:line="14" pos:column="12">clientInfo<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">-&gt;<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="24">eventWaiting<pos:position pos:line="14" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">clientInfo<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">eventWaiting<pos:position pos:line="15" pos:column="29"/></name></name> <operator pos:line="15" pos:column="30">=<pos:position pos:line="15" pos:column="31"/></operator> <literal type="boolean" pos:line="15" pos:column="32">false<pos:position pos:line="15" pos:column="37"/></literal></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>

    <do pos:line="17" pos:column="5">do <block pos:line="17" pos:column="8">{
        <comment type="line" pos:line="18" pos:column="9">// check that the head descriptor is still relevant</comment>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">const<pos:position pos:line="19" pos:column="14"/></specifier> <name pos:line="19" pos:column="15">int<pos:position pos:line="19" pos:column="18"/></name></type> <name pos:line="19" pos:column="19">head<pos:position pos:line="19" pos:column="23"/></name> <init pos:line="19" pos:column="24">= <expr><call><name><name pos:line="19" pos:column="26">clientInfo<pos:position pos:line="19" pos:column="36"/></name><operator pos:line="19" pos:column="36">-&gt;<pos:position pos:line="19" pos:column="41"/></operator><name pos:line="19" pos:column="38">quotaPeekFd<pos:position pos:line="19" pos:column="49"/></name></name><argument_list pos:line="19" pos:column="49">()<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="52"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="20" pos:column="9">Comm<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">::<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">IoCallback<pos:position pos:line="20" pos:column="25"/></name></name> <modifier pos:line="20" pos:column="26">*<pos:position pos:line="20" pos:column="27"/></modifier></type><name pos:line="20" pos:column="27">ccb<pos:position pos:line="20" pos:column="30"/></name> <init pos:line="20" pos:column="31">= <expr><call><name pos:line="20" pos:column="33">COMMIO_FD_WRITECB<pos:position pos:line="20" pos:column="50"/></name><argument_list pos:line="20" pos:column="50">(<argument><expr><name pos:line="20" pos:column="51">head<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="57"/></decl_stmt>

        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name><name pos:line="22" pos:column="13">fd_table<pos:position pos:line="22" pos:column="21"/></name><index pos:line="22" pos:column="21">[<expr><name pos:line="22" pos:column="22">head<pos:position pos:line="22" pos:column="26"/></name></expr>]<pos:position pos:line="22" pos:column="27"/></index></name><operator pos:line="22" pos:column="27">.<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">clientInfo<pos:position pos:line="22" pos:column="38"/></name> <operator pos:line="22" pos:column="39">==<pos:position pos:line="22" pos:column="41"/></operator> <name pos:line="22" pos:column="42">clientInfo<pos:position pos:line="22" pos:column="52"/></name> <operator pos:line="22" pos:column="53">&amp;&amp;<pos:position pos:line="22" pos:column="63"/></operator>
                <call><name><name pos:line="23" pos:column="17">clientInfo<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">quotaPeekReserv<pos:position pos:line="23" pos:column="44"/></name></name><argument_list pos:line="23" pos:column="44">()<pos:position pos:line="23" pos:column="46"/></argument_list></call> <operator pos:line="23" pos:column="47">==<pos:position pos:line="23" pos:column="49"/></operator> <name><name pos:line="23" pos:column="50">ccb<pos:position pos:line="23" pos:column="53"/></name><operator pos:line="23" pos:column="53">-&gt;<pos:position pos:line="23" pos:column="58"/></operator><name pos:line="23" pos:column="55">quotaQueueReserv<pos:position pos:line="23" pos:column="71"/></name></name> <operator pos:line="23" pos:column="72">&amp;&amp;<pos:position pos:line="23" pos:column="82"/></operator>
                <operator pos:line="24" pos:column="17">!<pos:position pos:line="24" pos:column="18"/></operator><name><name pos:line="24" pos:column="18">fd_table<pos:position pos:line="24" pos:column="26"/></name><index pos:line="24" pos:column="26">[<expr><name pos:line="24" pos:column="27">head<pos:position pos:line="24" pos:column="31"/></name></expr>]<pos:position pos:line="24" pos:column="32"/></index></name><operator pos:line="24" pos:column="32">.<pos:position pos:line="24" pos:column="33"/></operator><call><name pos:line="24" pos:column="33">closing<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">()<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="43"/></condition><then pos:line="24" pos:column="43"> <block pos:line="24" pos:column="44">{

            <comment type="line" pos:line="26" pos:column="13">// wait for the head descriptor to become ready for writing</comment>
            <expr_stmt><expr><call><name><name pos:line="27" pos:column="13">Comm<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">::<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">SetSelect<pos:position pos:line="27" pos:column="28"/></name></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">head<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">COMM_SELECT_WRITE<pos:position pos:line="27" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="54">Comm<pos:position pos:line="27" pos:column="58"/></name><operator pos:line="27" pos:column="58">::<pos:position pos:line="27" pos:column="60"/></operator><name pos:line="27" pos:column="60">HandleWrite<pos:position pos:line="27" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="73">ccb<pos:position pos:line="27" pos:column="76"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="78">0<pos:position pos:line="27" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="81"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="28" pos:column="13">clientInfo<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">selectWaiting<pos:position pos:line="28" pos:column="38"/></name></name> <operator pos:line="28" pos:column="39">=<pos:position pos:line="28" pos:column="40"/></operator> <literal type="boolean" pos:line="28" pos:column="41">true<pos:position pos:line="28" pos:column="45"/></literal></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>
            <return pos:line="29" pos:column="13">return;<pos:position pos:line="29" pos:column="20"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="32" pos:column="9">clientInfo<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">quotaDequeue<pos:position pos:line="32" pos:column="33"/></name></name><argument_list pos:line="32" pos:column="33">()<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt> <comment type="line" pos:line="32" pos:column="37">// remove the no longer relevant descriptor</comment>
        <comment type="line" pos:line="33" pos:column="9">// and continue looking for a relevant one</comment>
    }<pos:position pos:line="34" pos:column="6"/></block> while <condition pos:line="34" pos:column="13">(<expr><call><name><name pos:line="34" pos:column="14">clientInfo<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">-&gt;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="26">hasQueue<pos:position pos:line="34" pos:column="34"/></name></name><argument_list pos:line="34" pos:column="34">()<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="37"/></condition>;<pos:position pos:line="34" pos:column="38"/></do>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">debugs<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="number" pos:line="36" pos:column="12">77<pos:position pos:line="36" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="36" pos:column="15">3<pos:position pos:line="36" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="18">HERE<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">&lt;&lt;<pos:position pos:line="36" pos:column="31"/></operator> <literal type="string" pos:line="36" pos:column="26">"emptied queue"<pos:position pos:line="36" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="43"/></expr_stmt>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
