<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1449_squid-3.5.27.cpp" pos:tabs="8"><function type="operator"><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">operator <name pos:line="2" pos:column="16">==<pos:position pos:line="2" pos:column="18"/></name></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">SBuf<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">&amp;<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="32">S<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="34"/></parameter_list> <specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">24<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">8<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">id<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">&lt;&lt;<pos:position pos:line="4" pos:column="30"/></operator> <literal type="string" pos:line="4" pos:column="25">" == "<pos:position pos:line="4" pos:column="31"/></literal> <operator pos:line="4" pos:column="32">&lt;&lt;<pos:position pos:line="4" pos:column="40"/></operator> <name><name pos:line="4" pos:column="35">S<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">.<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">id<pos:position pos:line="4" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="41"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name pos:line="5" pos:column="9">length<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">()<pos:position pos:line="5" pos:column="17"/></argument_list></call> <operator pos:line="5" pos:column="18">!=<pos:position pos:line="5" pos:column="20"/></operator> <call><name><name pos:line="5" pos:column="21">S<pos:position pos:line="5" pos:column="22"/></name><operator pos:line="5" pos:column="22">.<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="23">length<pos:position pos:line="5" pos:column="29"/></name></name><argument_list pos:line="5" pos:column="29">()<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="32"/></condition><then pos:line="5" pos:column="32"> <block pos:line="5" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">24<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="20">8<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="23">"no, different lengths"<pos:position pos:line="6" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="7" pos:column="9">++<pos:position pos:line="7" pos:column="11"/></operator><name><name pos:line="7" pos:column="11">stats<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">.<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">compareFast<pos:position pos:line="7" pos:column="28"/></name></name></expr>;<pos:position pos:line="7" pos:column="29"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return> <comment type="line" pos:line="8" pos:column="23">//shortcut: must be equal length</comment>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">store_<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <name><name pos:line="10" pos:column="19">S<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">.<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">store_<pos:position pos:line="10" pos:column="27"/></name></name> <operator pos:line="10" pos:column="28">&amp;&amp;<pos:position pos:line="10" pos:column="38"/></operator> <name pos:line="10" pos:column="31">off_<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">==<pos:position pos:line="10" pos:column="38"/></operator> <name><name pos:line="10" pos:column="39">S<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">.<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="41">off_<pos:position pos:line="10" pos:column="45"/></name></name></expr>)<pos:position pos:line="10" pos:column="46"/></condition><then pos:line="10" pos:column="46"> <block pos:line="10" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">24<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">8<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"yes, same length and backing store"<pos:position pos:line="11" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="12" pos:column="9">++<pos:position pos:line="12" pos:column="11"/></operator><name><name pos:line="12" pos:column="11">stats<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">compareFast<pos:position pos:line="12" pos:column="28"/></name></name></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">true<pos:position pos:line="13" pos:column="20"/></literal></expr>;<pos:position pos:line="13" pos:column="21"/></return>  <comment type="line" pos:line="13" pos:column="23">//shortcut: same store, offset and length</comment>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="15" pos:column="5">++<pos:position pos:line="15" pos:column="7"/></operator><name><name pos:line="15" pos:column="7">stats<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">.<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">compareSlow<pos:position pos:line="15" pos:column="24"/></name></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">bool<pos:position pos:line="16" pos:column="15"/></name></type> <name pos:line="16" pos:column="16">rv<pos:position pos:line="16" pos:column="18"/></name> <init pos:line="16" pos:column="19">= <expr><operator pos:line="16" pos:column="21">(<pos:position pos:line="16" pos:column="22"/></operator><literal type="number" pos:line="16" pos:column="22">0<pos:position pos:line="16" pos:column="23"/></literal> <operator pos:line="16" pos:column="24">==<pos:position pos:line="16" pos:column="26"/></operator> <call><name pos:line="16" pos:column="27">memcmp<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><call><name pos:line="16" pos:column="34">buf<pos:position pos:line="16" pos:column="37"/></name><argument_list pos:line="16" pos:column="37">()<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="16" pos:column="41">S<pos:position pos:line="16" pos:column="42"/></name><operator pos:line="16" pos:column="42">.<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="43">buf<pos:position pos:line="16" pos:column="46"/></name></name><argument_list pos:line="16" pos:column="46">()<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="50">length<pos:position pos:line="16" pos:column="56"/></name><argument_list pos:line="16" pos:column="56">()<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call><operator pos:line="16" pos:column="59">)<pos:position pos:line="16" pos:column="60"/></operator></expr></init></decl>;<pos:position pos:line="16" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">debugs<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="number" pos:line="17" pos:column="12">24<pos:position pos:line="17" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="16">8<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="19">"returning "<pos:position pos:line="17" pos:column="31"/></literal> <operator pos:line="17" pos:column="32">&lt;&lt;<pos:position pos:line="17" pos:column="40"/></operator> <name pos:line="17" pos:column="35">rv<pos:position pos:line="17" pos:column="37"/></name></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">rv<pos:position pos:line="18" pos:column="14"/></name></expr>;<pos:position pos:line="18" pos:column="15"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
