<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6521_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">clientStream_status_t<pos:position pos:line="1" pos:column="22"/></name></type>
<name pos:line="2" pos:column="1">esiStreamStatus<pos:position pos:line="2" pos:column="16"/></name> <parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">clientStreamNode<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">thisNode<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">ClientHttpRequest<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">http<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* Test preconditions */</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name> <argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">thisNode<pos:position pos:line="5" pos:column="21"/></name> <operator pos:line="5" pos:column="22">!=<pos:position pos:line="5" pos:column="24"/></operator> <name pos:line="5" pos:column="25">NULL<pos:position pos:line="5" pos:column="29"/></name></expr></argument>)<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><call><name pos:line="6" pos:column="13">cbdataReferenceValid<pos:position pos:line="6" pos:column="33"/></name> <argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">thisNode<pos:position pos:line="6" pos:column="43"/></name></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>
    <comment type="block" pos:line="7" pos:column="5">/* we are not in the chain until ESI is detected on a data callback */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name> <argument_list pos:line="8" pos:column="12">(<argument><expr><name><name pos:line="8" pos:column="13">thisNode<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">-&gt;<pos:position pos:line="8" pos:column="26"/></operator><name pos:line="8" pos:column="23">node<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">.<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">prev<pos:position pos:line="8" pos:column="32"/></name></name> <operator pos:line="8" pos:column="33">!=<pos:position pos:line="8" pos:column="35"/></operator> <name pos:line="8" pos:column="36">NULL<pos:position pos:line="8" pos:column="40"/></name></expr></argument>)<pos:position pos:line="8" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name> <argument_list pos:line="9" pos:column="12">(<argument><expr><name><name pos:line="9" pos:column="13">thisNode<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">node<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">.<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">next<pos:position pos:line="9" pos:column="32"/></name></name> <operator pos:line="9" pos:column="33">!=<pos:position pos:line="9" pos:column="35"/></operator> <name pos:line="9" pos:column="36">NULL<pos:position pos:line="9" pos:column="40"/></name></expr></argument>)<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">ESIContext<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">::<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">Pointer<pos:position pos:line="11" pos:column="24"/></name></name></type> <name pos:line="11" pos:column="25">context<pos:position pos:line="11" pos:column="32"/></name> <init pos:line="11" pos:column="33">= <expr><cast type="dynamic" pos:line="11" pos:column="35">dynamic_cast<argument_list type="generic" pos:line="11" pos:column="47">&lt;<argument><expr><name pos:line="11" pos:column="48">ESIContext<pos:position pos:line="11" pos:column="58"/></name> <operator pos:line="11" pos:column="59">*<pos:position pos:line="11" pos:column="60"/></operator></expr></argument>&gt;<pos:position pos:line="11" pos:column="64"/></argument_list><argument_list pos:line="11" pos:column="61">(<argument><expr><call><name><name pos:line="11" pos:column="62">thisNode<pos:position pos:line="11" pos:column="70"/></name><operator pos:line="11" pos:column="70">-&gt;<pos:position pos:line="11" pos:column="75"/></operator><name pos:line="11" pos:column="72">data<pos:position pos:line="11" pos:column="76"/></name><operator pos:line="11" pos:column="76">.<pos:position pos:line="11" pos:column="77"/></operator><name pos:line="11" pos:column="77">getRaw<pos:position pos:line="11" pos:column="83"/></name></name><argument_list pos:line="11" pos:column="83">()<pos:position pos:line="11" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="86"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="11" pos:column="87"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name> <argument_list pos:line="12" pos:column="12">(<argument><expr><call><name><name pos:line="12" pos:column="13">context<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">.<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">getRaw<pos:position pos:line="12" pos:column="27"/></name></name><argument_list pos:line="12" pos:column="27">()<pos:position pos:line="12" pos:column="29"/></argument_list></call> <operator pos:line="12" pos:column="30">!=<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="33">NULL<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">context<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">flags<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">.<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">passthrough<pos:position pos:line="14" pos:column="35"/></name></name></expr>)<pos:position pos:line="14" pos:column="36"/></condition><then pos:line="14" pos:column="36">
        <block type="pseudo"><return pos:line="15" pos:column="9">return <expr><call><name pos:line="15" pos:column="16">clientStreamStatus<pos:position pos:line="15" pos:column="34"/></name> <argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">thisNode<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">http<pos:position pos:line="15" pos:column="50"/></name></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="52"/></return></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">context<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">-&gt;<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="18">flags<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">.<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">oktosend<pos:position pos:line="17" pos:column="32"/></name></name> <operator pos:line="17" pos:column="33">&amp;&amp;<pos:position pos:line="17" pos:column="43"/></operator> <name><name pos:line="17" pos:column="36">context<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">-&gt;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="45">flags<pos:position pos:line="17" pos:column="50"/></name><operator pos:line="17" pos:column="50">.<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="51">finished<pos:position pos:line="17" pos:column="59"/></name></name> <operator pos:line="17" pos:column="60">&amp;&amp;<pos:position pos:line="17" pos:column="70"/></operator>
            <operator pos:line="18" pos:column="13">!<pos:position pos:line="18" pos:column="14"/></operator><operator pos:line="18" pos:column="14">(<pos:position pos:line="18" pos:column="15"/></operator><call><name><name pos:line="18" pos:column="15">context<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">-&gt;<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="24">outbound<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">.<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">getRaw<pos:position pos:line="18" pos:column="39"/></name></name><argument_list pos:line="18" pos:column="39">()<pos:position pos:line="18" pos:column="41"/></argument_list></call> <operator pos:line="18" pos:column="42">&amp;&amp;<pos:position pos:line="18" pos:column="52"/></operator> <name><name pos:line="18" pos:column="45">context<pos:position pos:line="18" pos:column="52"/></name><operator pos:line="18" pos:column="52">-&gt;<pos:position pos:line="18" pos:column="57"/></operator><name pos:line="18" pos:column="54">outbound_offset<pos:position pos:line="18" pos:column="69"/></name></name> <operator pos:line="18" pos:column="70">&lt;<pos:position pos:line="18" pos:column="74"/></operator> <name><name pos:line="18" pos:column="72">context<pos:position pos:line="18" pos:column="79"/></name><operator pos:line="18" pos:column="79">-&gt;<pos:position pos:line="18" pos:column="84"/></operator><name pos:line="18" pos:column="81">outbound<pos:position pos:line="18" pos:column="89"/></name><operator pos:line="18" pos:column="89">-&gt;<pos:position pos:line="18" pos:column="94"/></operator><name pos:line="18" pos:column="91">len<pos:position pos:line="18" pos:column="94"/></name></name><operator pos:line="18" pos:column="94">)<pos:position pos:line="18" pos:column="95"/></operator></expr>)<pos:position pos:line="18" pos:column="96"/></condition><then pos:line="18" pos:column="96"> <block pos:line="18" pos:column="97">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">86<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="20">5<pos:position pos:line="19" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="23">"Telling recipient EOF on STATUS"<pos:position pos:line="19" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">STREAM_UNPLANNED_COMPLETE<pos:position pos:line="20" pos:column="41"/></name></expr>;<pos:position pos:line="20" pos:column="42"/></return> <comment type="block" pos:line="20" pos:column="43">/* we don't know lengths in advance */</comment>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="23" pos:column="5">/* ?? RC: we can't be aborted / fail ? */</comment>
    <return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">STREAM_NONE<pos:position pos:line="24" pos:column="23"/></name></expr>;<pos:position pos:line="24" pos:column="24"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
