<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1197.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">Xaction<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">noteCommRead<pos:position pos:line="1" pos:column="45"/></name></name><parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><specifier pos:line="1" pos:column="46">const<pos:position pos:line="1" pos:column="51"/></specifier> <name pos:line="1" pos:column="52">CommIoCbParams<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">&amp;<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="68">io<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="71"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">reader<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">!=<pos:position pos:line="3" pos:column="19"/></operator> <name pos:line="3" pos:column="20">NULL<pos:position pos:line="3" pos:column="24"/></name></expr></argument>)<pos:position pos:line="3" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4" pos:column="5">reader<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <name pos:line="4" pos:column="14">NULL<pos:position pos:line="4" pos:column="18"/></name></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name><name pos:line="6" pos:column="10">io<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">.<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">flag<pos:position pos:line="6" pos:column="17"/></name></name> <operator pos:line="6" pos:column="18">==<pos:position pos:line="6" pos:column="20"/></operator> <name><name pos:line="6" pos:column="21">Comm<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">::<pos:position pos:line="6" pos:column="27"/></operator><name pos:line="6" pos:column="27">OK<pos:position pos:line="6" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="31"/></expr_stmt>

    <comment type="line" pos:line="8" pos:column="5">// TODO: tune this better to expected message sizes</comment>
    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">readBuf<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">.<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">reserveCapacity<pos:position pos:line="9" pos:column="28"/></name></name><argument_list pos:line="9" pos:column="28">(<argument><expr><name pos:line="9" pos:column="29">SQUID_TCP_SO_RCVBUF<pos:position pos:line="9" pos:column="48"/></name></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>
    <comment type="line" pos:line="10" pos:column="5">// we are not asked to grow beyond the allowed maximum</comment>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">Must<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><call><name><name pos:line="11" pos:column="10">readBuf<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">length<pos:position pos:line="11" pos:column="24"/></name></name><argument_list pos:line="11" pos:column="24">()<pos:position pos:line="11" pos:column="26"/></argument_list></call> <operator pos:line="11" pos:column="27">&lt;<pos:position pos:line="11" pos:column="31"/></operator> <name pos:line="11" pos:column="29">SQUID_TCP_SO_RCVBUF<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
    <comment type="line" pos:line="12" pos:column="5">// now we can ensure that there is space to read new data,</comment>
    <comment type="line" pos:line="13" pos:column="5">// even if readBuf.spaceSize() currently returns zero.</comment>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">readBuf<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">.<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">rawSpace<pos:position pos:line="14" pos:column="21"/></name></name><argument_list pos:line="14" pos:column="21">(<argument><expr><literal type="number" pos:line="14" pos:column="22">1<pos:position pos:line="14" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="16" pos:column="5">CommIoCbParams<pos:position pos:line="16" pos:column="19"/></name></type> <name pos:line="16" pos:column="20">rd<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">this<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt> <comment type="line" pos:line="16" pos:column="30">// will be expanded with ReadNow results</comment>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">rd<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">.<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">conn<pos:position pos:line="17" pos:column="12"/></name></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name><name pos:line="17" pos:column="15">io<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">conn<pos:position pos:line="17" pos:column="22"/></name></name></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>

    <switch pos:line="19" pos:column="5">switch <condition pos:line="19" pos:column="12">(<expr><call><name><name pos:line="19" pos:column="13">Comm<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">::<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">ReadNow<pos:position pos:line="19" pos:column="26"/></name></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">rd<pos:position pos:line="19" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="31">readBuf<pos:position pos:line="19" pos:column="38"/></name></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="40"/></condition> <block pos:line="19" pos:column="41">{
    <case pos:line="20" pos:column="5">case <expr><name><name pos:line="20" pos:column="10">Comm<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">::<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">INPROGRESS<pos:position pos:line="20" pos:column="26"/></name></name></expr>:<pos:position pos:line="20" pos:column="27"/></case>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name><name pos:line="21" pos:column="13">readBuf<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">.<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="21">isEmpty<pos:position pos:line="21" pos:column="28"/></name></name><argument_list pos:line="21" pos:column="28">()<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="31"/></condition><then pos:line="21" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="13">debugs<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="number" pos:line="22" pos:column="20">33<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="24">2<pos:position pos:line="22" pos:column="25"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="27">io<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">.<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="30">conn<pos:position pos:line="22" pos:column="34"/></name></name> <operator pos:line="22" pos:column="35">&lt;&lt;<pos:position pos:line="22" pos:column="43"/></operator> <literal type="string" pos:line="22" pos:column="38">": no data to process, "<pos:position pos:line="22" pos:column="62"/></literal> <operator pos:line="22" pos:column="63">&lt;&lt;<pos:position pos:line="22" pos:column="71"/></operator> <call><name pos:line="22" pos:column="66">xstrerr<pos:position pos:line="22" pos:column="73"/></name><argument_list pos:line="22" pos:column="73">(<argument><expr><name><name pos:line="22" pos:column="74">rd<pos:position pos:line="22" pos:column="76"/></name><operator pos:line="22" pos:column="76">.<pos:position pos:line="22" pos:column="77"/></operator><name pos:line="22" pos:column="77">xerrno<pos:position pos:line="22" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="86"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">scheduleRead<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">()<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
        <return pos:line="24" pos:column="9">return;<pos:position pos:line="24" pos:column="16"/></return>

    <case pos:line="26" pos:column="5">case <expr><name><name pos:line="26" pos:column="10">Comm<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">::<pos:position pos:line="26" pos:column="16"/></operator><name pos:line="26" pos:column="16">OK<pos:position pos:line="26" pos:column="18"/></name></name></expr>:<pos:position pos:line="26" pos:column="19"/></case>
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">al<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">icap<pos:position pos:line="27" pos:column="16"/></name><operator pos:line="27" pos:column="16">.<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="17">bytesRead<pos:position pos:line="27" pos:column="26"/></name></name> <operator pos:line="27" pos:column="27">+=<pos:position pos:line="27" pos:column="29"/></operator> <name><name pos:line="27" pos:column="30">rd<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">.<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="33">size<pos:position pos:line="27" pos:column="37"/></name></name></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="29" pos:column="9">updateTimeout<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">()<pos:position pos:line="29" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">93<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="20">3<pos:position pos:line="31" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="23">"read "<pos:position pos:line="31" pos:column="30"/></literal> <operator pos:line="31" pos:column="31">&lt;&lt;<pos:position pos:line="31" pos:column="39"/></operator> <name><name pos:line="31" pos:column="34">rd<pos:position pos:line="31" pos:column="36"/></name><operator pos:line="31" pos:column="36">.<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="37">size<pos:position pos:line="31" pos:column="41"/></name></name> <operator pos:line="31" pos:column="42">&lt;&lt;<pos:position pos:line="31" pos:column="50"/></operator> <literal type="string" pos:line="31" pos:column="45">" bytes"<pos:position pos:line="31" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="33" pos:column="9">disableRetries<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">()<pos:position pos:line="33" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="26"/></expr_stmt> <comment type="line" pos:line="33" pos:column="27">// because pconn did not fail</comment>

        <comment type="block" pos:line="35" pos:column="9">/* Continue to process previously read data */</comment>
        <break pos:line="36" pos:column="9">break;<pos:position pos:line="36" pos:column="15"/></break>

    <case pos:line="38" pos:column="5">case <expr><name><name pos:line="38" pos:column="10">Comm<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">::<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="16">ENDFILE<pos:position pos:line="38" pos:column="23"/></name></name></expr>:<pos:position pos:line="38" pos:column="24"/></case> <comment type="line" pos:line="38" pos:column="25">// close detected by 0-byte read</comment>
        <expr_stmt><expr><name pos:line="39" pos:column="9">commEof<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <literal type="boolean" pos:line="39" pos:column="19">true<pos:position pos:line="39" pos:column="23"/></literal></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">reuseConnection<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <literal type="boolean" pos:line="40" pos:column="27">false<pos:position pos:line="40" pos:column="32"/></literal></expr>;<pos:position pos:line="40" pos:column="33"/></expr_stmt>

        <comment type="line" pos:line="42" pos:column="9">// detect a pconn race condition: eof on the first pconn read</comment>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">!<pos:position pos:line="43" pos:column="14"/></operator><name><name pos:line="43" pos:column="14">al<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">.<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">icap<pos:position pos:line="43" pos:column="21"/></name><operator pos:line="43" pos:column="21">.<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">bytesRead<pos:position pos:line="43" pos:column="31"/></name></name> <operator pos:line="43" pos:column="32">&amp;&amp;<pos:position pos:line="43" pos:column="42"/></operator> <call><name pos:line="43" pos:column="35">retriable<pos:position pos:line="43" pos:column="44"/></name><argument_list pos:line="43" pos:column="44">()<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="47"/></condition><then pos:line="43" pos:column="47"> <block pos:line="43" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">setOutcome<pos:position pos:line="44" pos:column="23"/></name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">xoRace<pos:position pos:line="44" pos:column="30"/></name></expr></argument>)<pos:position pos:line="44" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">mustStop<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><literal type="string" pos:line="45" pos:column="22">"pconn race"<pos:position pos:line="45" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="36"/></expr_stmt>
            <return pos:line="46" pos:column="13">return;<pos:position pos:line="46" pos:column="20"/></return>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>

        <break pos:line="49" pos:column="9">break;<pos:position pos:line="49" pos:column="15"/></break>

    <comment type="line" pos:line="51" pos:column="5">// case Comm::COMM_ERROR:</comment>
    <default pos:line="52" pos:column="5">default:<pos:position pos:line="52" pos:column="13"/></default> <comment type="line" pos:line="52" pos:column="14">// no other flags should ever occur</comment>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">debugs<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><literal type="number" pos:line="53" pos:column="16">11<pos:position pos:line="53" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="20">2<pos:position pos:line="53" pos:column="21"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="23">io<pos:position pos:line="53" pos:column="25"/></name><operator pos:line="53" pos:column="25">.<pos:position pos:line="53" pos:column="26"/></operator><name pos:line="53" pos:column="26">conn<pos:position pos:line="53" pos:column="30"/></name></name> <operator pos:line="53" pos:column="31">&lt;&lt;<pos:position pos:line="53" pos:column="39"/></operator> <literal type="string" pos:line="53" pos:column="34">": read failure: "<pos:position pos:line="53" pos:column="52"/></literal> <operator pos:line="53" pos:column="53">&lt;&lt;<pos:position pos:line="53" pos:column="61"/></operator> <call><name pos:line="53" pos:column="56">xstrerr<pos:position pos:line="53" pos:column="63"/></name><argument_list pos:line="53" pos:column="63">(<argument><expr><name><name pos:line="53" pos:column="64">rd<pos:position pos:line="53" pos:column="66"/></name><operator pos:line="53" pos:column="66">.<pos:position pos:line="53" pos:column="67"/></operator><name pos:line="53" pos:column="67">xerrno<pos:position pos:line="53" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">mustStop<pos:position pos:line="54" pos:column="17"/></name><argument_list pos:line="54" pos:column="17">(<argument><expr><literal type="string" pos:line="54" pos:column="18">"unknown ICAP I/O read error"<pos:position pos:line="54" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></expr_stmt>
        <return pos:line="55" pos:column="9">return;<pos:position pos:line="55" pos:column="16"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></switch>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">handleCommRead<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><name><name pos:line="58" pos:column="20">io<pos:position pos:line="58" pos:column="22"/></name><operator pos:line="58" pos:column="22">.<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="23">size<pos:position pos:line="58" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="29"/></expr_stmt>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
