<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7663_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier> <name pos:line="1" pos:column="14">WINAPI<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">SSP_ValidateNegotiateCredentials<pos:position pos:line="1" pos:column="53"/></name><parameter_list pos:line="1" pos:column="53">(<parameter><decl><type><name pos:line="1" pos:column="54">PVOID<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">PAutenticateBuf<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="77">int<pos:position pos:line="1" pos:column="80"/></name></type> <name pos:line="1" pos:column="81">AutenticateLen<pos:position pos:line="1" pos:column="95"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="97">PBOOL<pos:position pos:line="1" pos:column="102"/></name></type> <name pos:line="1" pos:column="103">fDone<pos:position pos:line="1" pos:column="108"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="110">int<pos:position pos:line="1" pos:column="113"/></name> <modifier pos:line="1" pos:column="114">*<pos:position pos:line="1" pos:column="115"/></modifier></type> <name pos:line="1" pos:column="116">Status<pos:position pos:line="1" pos:column="122"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="124">char<pos:position pos:line="1" pos:column="128"/></name> <modifier pos:line="1" pos:column="129">*<pos:position pos:line="1" pos:column="130"/></modifier></type> <name pos:line="1" pos:column="131">credentials<pos:position pos:line="1" pos:column="142"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="143"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">DWORD<pos:position pos:line="3" pos:column="10"/></name></type>       <name pos:line="3" pos:column="17">cbOut<pos:position pos:line="3" pos:column="22"/></name>      <init pos:line="3" pos:column="28">= <expr><literal type="number" pos:line="3" pos:column="30">0<pos:position pos:line="3" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DWORD<pos:position pos:line="4" pos:column="10"/></name></type>       <name pos:line="4" pos:column="17">cbIn<pos:position pos:line="4" pos:column="21"/></name>       <init pos:line="4" pos:column="28">= <expr><literal type="number" pos:line="4" pos:column="30">0<pos:position pos:line="4" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">memcpy<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">pClientBuf<pos:position pos:line="6" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="24">PAutenticateBuf<pos:position pos:line="6" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="41">AutenticateLen<pos:position pos:line="6" pos:column="55"/></name></expr></argument>)<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">ZeroMemory<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">pServerBuf<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="28">cbMaxToken<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
    <do pos:line="8" pos:column="5">do <block pos:line="8" pos:column="8">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">!<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">hModule<pos:position pos:line="9" pos:column="21"/></name></expr>)<pos:position pos:line="9" pos:column="22"/></condition><then pos:line="9" pos:column="22">
            <block type="pseudo"><break pos:line="10" pos:column="13">break;<pos:position pos:line="10" pos:column="19"/></break></block></then></if>

        <comment type="block" pos:line="12" pos:column="9">/* Prepare server message (authentication) */</comment>
        <expr_stmt><expr><name pos:line="13" pos:column="9">cbIn<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">AutenticateLen<pos:position pos:line="13" pos:column="30"/></name></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">cbOut<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">cbMaxToken<pos:position pos:line="14" pos:column="27"/></name></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><call><name pos:line="15" pos:column="14">GenServerContext<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><operator pos:line="15" pos:column="31">&amp;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="32">NTLM_asServer<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="47">pClientBuf<pos:position pos:line="15" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="59">cbIn<pos:position pos:line="15" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="65">pServerBuf<pos:position pos:line="15" pos:column="75"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="77">&amp;<pos:position pos:line="15" pos:column="82"/></operator><name pos:line="15" pos:column="78">cbOut<pos:position pos:line="15" pos:column="83"/></name></expr></argument>,
                              <argument><expr><name pos:line="16" pos:column="31">fDone<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">credentials<pos:position pos:line="16" pos:column="49"/></name></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="51"/></condition><then pos:line="16" pos:column="51"> <block pos:line="16" pos:column="52">{
            <expr_stmt><expr><operator pos:line="17" pos:column="13">*<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">Status<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">SSP_ERROR<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
            <break pos:line="18" pos:column="13">break;<pos:position pos:line="18" pos:column="19"/></break>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">Status<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <name pos:line="20" pos:column="19">SSP_OK<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block> while <condition pos:line="21" pos:column="13">(<expr><literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>)<pos:position pos:line="21" pos:column="16"/></condition>;<pos:position pos:line="21" pos:column="17"/></do>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">pServerBuf<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">!=<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="23">NULL<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">&amp;&amp;<pos:position pos:line="22" pos:column="38"/></operator> <name pos:line="22" pos:column="31">cbOut<pos:position pos:line="22" pos:column="36"/></name> <operator pos:line="22" pos:column="37">&gt;<pos:position pos:line="22" pos:column="41"/></operator> <literal type="number" pos:line="22" pos:column="39">0<pos:position pos:line="22" pos:column="40"/></literal></expr>)<pos:position pos:line="22" pos:column="41"/></condition><then pos:line="22" pos:column="41"> <block pos:line="22" pos:column="42">{
        <decl_stmt><decl><type><name><name pos:line="23" pos:column="9">struct<pos:position pos:line="23" pos:column="15"/></name> <name pos:line="23" pos:column="16">base64_encode_ctx<pos:position pos:line="23" pos:column="33"/></name></name></type> <name pos:line="23" pos:column="34">ctx<pos:position pos:line="23" pos:column="37"/></name></decl>;<pos:position pos:line="23" pos:column="38"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">base64_encode_init<pos:position pos:line="24" pos:column="27"/></name><argument_list pos:line="24" pos:column="27">(<argument><expr><operator pos:line="24" pos:column="28">&amp;<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="29">ctx<pos:position pos:line="24" pos:column="32"/></name></expr></argument>)<pos:position pos:line="24" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="34"/></expr_stmt>
        <decl_stmt><decl><specifier pos:line="25" pos:column="9">static<pos:position pos:line="25" pos:column="15"/></specifier> <type><name pos:line="25" pos:column="16">uint8_t<pos:position pos:line="25" pos:column="23"/></name></type> <name><name pos:line="25" pos:column="24">encoded<pos:position pos:line="25" pos:column="31"/></name><index pos:line="25" pos:column="31">[<expr><literal type="number" pos:line="25" pos:column="32">8192<pos:position pos:line="25" pos:column="36"/></literal></expr>]<pos:position pos:line="25" pos:column="37"/></index></name></decl>;<pos:position pos:line="25" pos:column="38"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">size_t<pos:position pos:line="26" pos:column="15"/></name></type> <name pos:line="26" pos:column="16">dstLen<pos:position pos:line="26" pos:column="22"/></name> <init pos:line="26" pos:column="23">= <expr><call><name pos:line="26" pos:column="25">base64_encode_update<pos:position pos:line="26" pos:column="45"/></name><argument_list pos:line="26" pos:column="45">(<argument><expr><operator pos:line="26" pos:column="46">&amp;<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="47">ctx<pos:position pos:line="26" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">encoded<pos:position pos:line="26" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="61">cbOut<pos:position pos:line="26" pos:column="66"/></name></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="26" pos:column="68">reinterpret_cast<argument_list type="generic" pos:line="26" pos:column="84">&lt;<argument><expr><specifier pos:line="26" pos:column="85">const<pos:position pos:line="26" pos:column="90"/></specifier> <name pos:line="26" pos:column="91">uint8_t<pos:position pos:line="26" pos:column="98"/></name><operator pos:line="26" pos:column="98">*<pos:position pos:line="26" pos:column="99"/></operator></expr></argument>&gt;<pos:position pos:line="26" pos:column="103"/></argument_list><argument_list pos:line="26" pos:column="100">(<argument><expr><name pos:line="26" pos:column="101">pServerBuf<pos:position pos:line="26" pos:column="111"/></name></expr></argument>)<pos:position pos:line="26" pos:column="112"/></argument_list></cast></expr></argument>)<pos:position pos:line="26" pos:column="113"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="114"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">assert<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">dstLen<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <sizeof pos:line="27" pos:column="25">sizeof<argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">encoded<pos:position pos:line="27" pos:column="39"/></name></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">dstLen<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">+=<pos:position pos:line="28" pos:column="18"/></operator> <call><name pos:line="28" pos:column="19">base64_encode_final<pos:position pos:line="28" pos:column="38"/></name><argument_list pos:line="28" pos:column="38">(<argument><expr><operator pos:line="28" pos:column="39">&amp;<pos:position pos:line="28" pos:column="44"/></operator><name pos:line="28" pos:column="40">ctx<pos:position pos:line="28" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="45">encoded<pos:position pos:line="28" pos:column="52"/></name><operator pos:line="28" pos:column="52">+<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="53">dstLen<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">assert<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">dstLen<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">&lt;<pos:position pos:line="29" pos:column="27"/></operator> <sizeof pos:line="29" pos:column="25">sizeof<argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">encoded<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">encoded<pos:position pos:line="30" pos:column="16"/></name><index pos:line="30" pos:column="16">[<expr><name pos:line="30" pos:column="17">dstLen<pos:position pos:line="30" pos:column="23"/></name></expr>]<pos:position pos:line="30" pos:column="24"/></index></name> <operator pos:line="30" pos:column="25">=<pos:position pos:line="30" pos:column="26"/></operator> <literal type="char" pos:line="30" pos:column="27">'\0'<pos:position pos:line="30" pos:column="31"/></literal></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><cast type="reinterpret" pos:line="31" pos:column="16">reinterpret_cast<argument_list type="generic" pos:line="31" pos:column="32">&lt;<argument><expr><name pos:line="31" pos:column="33">char<pos:position pos:line="31" pos:column="37"/></name> <operator pos:line="31" pos:column="38">*<pos:position pos:line="31" pos:column="39"/></operator></expr></argument>&gt;<pos:position pos:line="31" pos:column="43"/></argument_list><argument_list pos:line="31" pos:column="40">(<argument><expr><name pos:line="31" pos:column="41">encoded<pos:position pos:line="31" pos:column="48"/></name></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></cast></expr>;<pos:position pos:line="31" pos:column="50"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">NULL<pos:position pos:line="33" pos:column="16"/></name></expr>;<pos:position pos:line="33" pos:column="17"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
