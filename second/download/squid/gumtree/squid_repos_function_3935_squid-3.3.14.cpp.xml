<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3935_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">ConfigRep<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">visitEachOption<pos:position pos:line="2" pos:column="45"/></name></name><parameter_list pos:line="2" pos:column="45">(<parameter><decl><type><name><name pos:line="2" pos:column="46">libecap<pos:position pos:line="2" pos:column="53"/></name><operator pos:line="2" pos:column="53">::<pos:position pos:line="2" pos:column="55"/></operator><name pos:line="2" pos:column="55">NamedValueVisitor<pos:position pos:line="2" pos:column="72"/></name></name> <modifier pos:line="2" pos:column="73">&amp;<pos:position pos:line="2" pos:column="78"/></modifier></type><name pos:line="2" pos:column="74">visitor<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="82"/></parameter_list> <specifier pos:line="2" pos:column="83">const<pos:position pos:line="2" pos:column="88"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// we may supply the params we know about too, but only if we set host ID</comment>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">visitor<pos:position pos:line="5" pos:column="12"/></name><operator pos:line="5" pos:column="12">.<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">visit<pos:position pos:line="5" pos:column="18"/></name></name><argument_list pos:line="5" pos:column="18">(<argument><expr><name pos:line="5" pos:column="19">metaBypassable<pos:position pos:line="5" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="35">Area<pos:position pos:line="5" pos:column="39"/></name><argument_list pos:line="5" pos:column="39">(<argument><expr><ternary><condition><expr><name><name pos:line="5" pos:column="40">master<pos:position pos:line="5" pos:column="46"/></name><operator pos:line="5" pos:column="46">.<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="47">bypass<pos:position pos:line="5" pos:column="53"/></name></name></expr> ?<pos:position pos:line="5" pos:column="55"/></condition><then pos:line="5" pos:column="55"> <expr><literal type="string" pos:line="5" pos:column="56">"1"<pos:position pos:line="5" pos:column="59"/></literal></expr> <pos:position pos:line="5" pos:column="60"/></then><else pos:line="5" pos:column="60">: <expr><literal type="string" pos:line="5" pos:column="62">"0"<pos:position pos:line="5" pos:column="65"/></literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="67">1<pos:position pos:line="5" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="71"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// visit adapter-specific options (i.e., those not recognized by Squid)</comment>
    <typedef pos:line="8" pos:column="5">typedef <type><name><name pos:line="8" pos:column="13">Master<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">::<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">Extensions<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">::<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">const_iterator<pos:position pos:line="8" pos:column="47"/></name></name></type> <name pos:line="8" pos:column="48">MECI<pos:position pos:line="8" pos:column="52"/></name>;<pos:position pos:line="8" pos:column="53"/></typedef>
    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><decl><type><name pos:line="9" pos:column="10">MECI<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">i<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><call><name><name pos:line="9" pos:column="19">master<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">.<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="26">extensions<pos:position pos:line="9" pos:column="36"/></name><operator pos:line="9" pos:column="36">.<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="37">begin<pos:position pos:line="9" pos:column="42"/></name></name><argument_list pos:line="9" pos:column="42">()<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="45"/></init> <condition><expr><name pos:line="9" pos:column="46">i<pos:position pos:line="9" pos:column="47"/></name> <operator pos:line="9" pos:column="48">!=<pos:position pos:line="9" pos:column="50"/></operator> <call><name><name pos:line="9" pos:column="51">master<pos:position pos:line="9" pos:column="57"/></name><operator pos:line="9" pos:column="57">.<pos:position pos:line="9" pos:column="58"/></operator><name pos:line="9" pos:column="58">extensions<pos:position pos:line="9" pos:column="68"/></name><operator pos:line="9" pos:column="68">.<pos:position pos:line="9" pos:column="69"/></operator><name pos:line="9" pos:column="69">end<pos:position pos:line="9" pos:column="72"/></name></name><argument_list pos:line="9" pos:column="72">()<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="75"/></condition> <incr><expr><operator pos:line="9" pos:column="76">++<pos:position pos:line="9" pos:column="78"/></operator><name pos:line="9" pos:column="78">i<pos:position pos:line="9" pos:column="79"/></name></expr></incr>)<pos:position pos:line="9" pos:column="80"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="10" pos:column="9">visitor<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">.<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">visit<pos:position pos:line="10" pos:column="22"/></name></name><argument_list pos:line="10" pos:column="22">(<argument><expr><call><name pos:line="10" pos:column="23">Name<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name><name pos:line="10" pos:column="28">i<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">first<pos:position pos:line="10" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="39">Area<pos:position pos:line="10" pos:column="43"/></name><operator pos:line="10" pos:column="43">::<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="45">FromTempString<pos:position pos:line="10" pos:column="59"/></name></name><argument_list pos:line="10" pos:column="59">(<argument><expr><name><name pos:line="10" pos:column="60">i<pos:position pos:line="10" pos:column="61"/></name><operator pos:line="10" pos:column="61">-&gt;<pos:position pos:line="10" pos:column="66"/></operator><name pos:line="10" pos:column="63">second<pos:position pos:line="10" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="72"/></expr_stmt></block></for>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
