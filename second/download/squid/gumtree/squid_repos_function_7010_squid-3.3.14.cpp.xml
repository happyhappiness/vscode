<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7010_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">inline<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name></type> <name pos:line="2" pos:column="5">WSADuplicateSocket<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">int<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">s<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">DWORD<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">n<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">LPWSAPROTOCOL_INFO<pos:position pos:line="2" pos:column="58"/></name></type> <name pos:line="2" pos:column="59">l<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">UNICODE<pos:position pos:line="4" pos:column="15"/></name></cpp:ifdef>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name><operator pos:line="5" pos:column="9">::<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="11">WSADuplicateSocketW<pos:position pos:line="5" pos:column="30"/></name></name><argument_list pos:line="5" pos:column="30">(<argument><expr><call><name pos:line="5" pos:column="31">_get_osfhandle<pos:position pos:line="5" pos:column="45"/></name><argument_list pos:line="5" pos:column="45">(<argument><expr><name pos:line="5" pos:column="46">s<pos:position pos:line="5" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="5" pos:column="50">n<pos:position pos:line="5" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="53">l<pos:position pos:line="5" pos:column="54"/></name></expr></argument>)<pos:position pos:line="5" pos:column="55"/></argument_list></call> <operator pos:line="5" pos:column="56">==<pos:position pos:line="5" pos:column="58"/></operator> <name pos:line="5" pos:column="59">SOCKET_ERROR<pos:position pos:line="5" pos:column="71"/></name></expr>)<pos:position pos:line="5" pos:column="72"/></condition><then pos:line="5" pos:column="72"> <block pos:line="5" pos:column="73">{
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><operator pos:line="7" pos:column="9">::<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">WSADuplicateSocketA<pos:position pos:line="7" pos:column="30"/></name></name><argument_list pos:line="7" pos:column="30">(<argument><expr><call><name pos:line="7" pos:column="31">_get_osfhandle<pos:position pos:line="7" pos:column="45"/></name><argument_list pos:line="7" pos:column="45">(<argument><expr><name pos:line="7" pos:column="46">s<pos:position pos:line="7" pos:column="47"/></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="7" pos:column="50">n<pos:position pos:line="7" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="53">l<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call> <operator pos:line="7" pos:column="56">==<pos:position pos:line="7" pos:column="58"/></operator> <name pos:line="7" pos:column="59">SOCKET_ERROR<pos:position pos:line="7" pos:column="71"/></name></expr>)<pos:position pos:line="7" pos:column="72"/></condition><then pos:line="7" pos:column="72"> <block pos:line="7" pos:column="73">{
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><name pos:line="9" pos:column="9">errno<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <call><name pos:line="9" pos:column="17">WSAGetLastError<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">()<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="35"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">-<pos:position pos:line="10" pos:column="17"/></operator><literal type="number" pos:line="10" pos:column="17">1<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then> <else pos:line="11" pos:column="7">else
        <block type="pseudo"><return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return></block></else></if>
}<pos:position pos:line="13" pos:column="2"/></block></then></if>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define<pos:position pos:line="14" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">WSADuplicateSocket<pos:position pos:line="14" pos:column="27"/></name><parameter_list pos:line="14" pos:column="27">(<parameter><type><name pos:line="14" pos:column="28">s<pos:position pos:line="14" pos:column="29"/></name></type></parameter>,<parameter><type><name pos:line="14" pos:column="30">n<pos:position pos:line="14" pos:column="31"/></name></type></parameter>,<parameter><type><name pos:line="14" pos:column="32">l<pos:position pos:line="14" pos:column="33"/></name></type></parameter>)<pos:position pos:line="14" pos:column="34"/></parameter_list></cpp:macro> <cpp:value pos:line="14" pos:column="35">Squid::WSADuplicateSocket(s,n,l)<pos:position pos:line="14" pos:column="67"/></cpp:value></cpp:define>

<cpp:undef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">undef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">WSASocket<pos:position pos:line="16" pos:column="17"/></name></cpp:undef>
<function><specifier pos:line="17" pos:column="1">inline<pos:position pos:line="17" pos:column="7"/></specifier>
<type><name pos:line="18" pos:column="1">int<pos:position pos:line="18" pos:column="4"/></name></type> <name pos:line="18" pos:column="5">WSASocket<pos:position pos:line="18" pos:column="14"/></name><parameter_list pos:line="18" pos:column="14">(<parameter><decl><type><name pos:line="18" pos:column="15">int<pos:position pos:line="18" pos:column="18"/></name></type> <name pos:line="18" pos:column="19">a<pos:position pos:line="18" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="18" pos:column="22">int<pos:position pos:line="18" pos:column="25"/></name></type> <name pos:line="18" pos:column="26">t<pos:position pos:line="18" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="18" pos:column="29">int<pos:position pos:line="18" pos:column="32"/></name></type> <name pos:line="18" pos:column="33">p<pos:position pos:line="18" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="18" pos:column="36">LPWSAPROTOCOL_INFO<pos:position pos:line="18" pos:column="54"/></name></type> <name pos:line="18" pos:column="55">i<pos:position pos:line="18" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="18" pos:column="58">GROUP<pos:position pos:line="18" pos:column="63"/></name></type> <name pos:line="18" pos:column="64">g<pos:position pos:line="18" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="18" pos:column="67">DWORD<pos:position pos:line="18" pos:column="72"/></name></type> <name pos:line="18" pos:column="73">f<pos:position pos:line="18" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="18" pos:column="75"/></parameter_list>
<block pos:line="19" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">SOCKET<pos:position pos:line="20" pos:column="11"/></name></type> <name pos:line="20" pos:column="12">result<pos:position pos:line="20" pos:column="18"/></name></decl>;<pos:position pos:line="20" pos:column="19"/></decl_stmt>
<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">UNICODE<pos:position pos:line="21" pos:column="15"/></name></cpp:ifdef>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">(<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">result<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <call><name><operator pos:line="22" pos:column="19">::<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">WSASocketW<pos:position pos:line="22" pos:column="31"/></name></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">a<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="35">t<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">p<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">i<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="44">g<pos:position pos:line="22" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="47">f<pos:position pos:line="22" pos:column="48"/></name></expr></argument>)<pos:position pos:line="22" pos:column="49"/></argument_list></call><operator pos:line="22" pos:column="49">)<pos:position pos:line="22" pos:column="50"/></operator> <operator pos:line="22" pos:column="51">==<pos:position pos:line="22" pos:column="53"/></operator> <name pos:line="22" pos:column="54">INVALID_SOCKET<pos:position pos:line="22" pos:column="68"/></name></expr>)<pos:position pos:line="22" pos:column="69"/></condition><then pos:line="22" pos:column="69"> <block pos:line="22" pos:column="70">{
<cpp:else pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">else<pos:position pos:line="23" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">(<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">result<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <call><name><operator pos:line="24" pos:column="19">::<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="21">WSASocketA<pos:position pos:line="24" pos:column="31"/></name></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">a<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="35">t<pos:position pos:line="24" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="38">p<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">i<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">g<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="47">f<pos:position pos:line="24" pos:column="48"/></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call><operator pos:line="24" pos:column="49">)<pos:position pos:line="24" pos:column="50"/></operator> <operator pos:line="24" pos:column="51">==<pos:position pos:line="24" pos:column="53"/></operator> <name pos:line="24" pos:column="54">INVALID_SOCKET<pos:position pos:line="24" pos:column="68"/></name></expr>)<pos:position pos:line="24" pos:column="69"/></condition><then pos:line="24" pos:column="69"> <block pos:line="24" pos:column="70">{
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">WSAEMFILE<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">==<pos:position pos:line="26" pos:column="25"/></operator> <operator pos:line="26" pos:column="26">(<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">errno<pos:position pos:line="26" pos:column="32"/></name> <operator pos:line="26" pos:column="33">=<pos:position pos:line="26" pos:column="34"/></operator> <call><name pos:line="26" pos:column="35">WSAGetLastError<pos:position pos:line="26" pos:column="50"/></name><argument_list pos:line="26" pos:column="50">()<pos:position pos:line="26" pos:column="52"/></argument_list></call><operator pos:line="26" pos:column="52">)<pos:position pos:line="26" pos:column="53"/></operator></expr>)<pos:position pos:line="26" pos:column="54"/></condition><then pos:line="26" pos:column="54">
            <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="13">errno<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="21">EMFILE<pos:position pos:line="27" pos:column="27"/></name></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt></block></then></if>
        <return pos:line="28" pos:column="9">return <expr><operator pos:line="28" pos:column="16">-<pos:position pos:line="28" pos:column="17"/></operator><literal type="number" pos:line="28" pos:column="17">1<pos:position pos:line="28" pos:column="18"/></literal></expr>;<pos:position pos:line="28" pos:column="19"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then> <else pos:line="29" pos:column="7">else
        <block type="pseudo"><return pos:line="30" pos:column="9">return <expr><call><name pos:line="30" pos:column="16">_open_osfhandle<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">result<pos:position pos:line="30" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="40">0<pos:position pos:line="30" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="43"/></return></block></else></if>
}<pos:position pos:line="31" pos:column="2"/></block></then></if>
<cpp:define pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">define<pos:position pos:line="32" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="32" pos:column="9">WSASocket<pos:position pos:line="32" pos:column="18"/></name><parameter_list pos:line="32" pos:column="18">(<parameter><type><name pos:line="32" pos:column="19">a<pos:position pos:line="32" pos:column="20"/></name></type></parameter>,<parameter><type><name pos:line="32" pos:column="21">t<pos:position pos:line="32" pos:column="22"/></name></type></parameter>,<parameter><type><name pos:line="32" pos:column="23">p<pos:position pos:line="32" pos:column="24"/></name></type></parameter>,<parameter><type><name pos:line="32" pos:column="25">i<pos:position pos:line="32" pos:column="26"/></name></type></parameter>,<parameter><type><name pos:line="32" pos:column="27">g<pos:position pos:line="32" pos:column="28"/></name></type></parameter>,<parameter><type><name pos:line="32" pos:column="29">f<pos:position pos:line="32" pos:column="30"/></name></type></parameter>)<pos:position pos:line="32" pos:column="31"/></parameter_list></cpp:macro> <cpp:value pos:line="32" pos:column="32">Squid::WSASocket(a,t,p,i,g,f)<pos:position pos:line="32" pos:column="61"/></cpp:value></cpp:define>

}<pos:position pos:line="34" pos:column="2"/></block></function> <comment type="block" pos:line="34" pos:column="3">/* namespace Squid */</comment>

<cpp:else pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">else<pos:position pos:line="36" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="36" pos:column="7">/* #ifdef __cplusplus */</comment>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define<pos:position pos:line="37" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">connect<pos:position pos:line="37" pos:column="16"/></name><parameter_list pos:line="37" pos:column="16">(<parameter><type><name pos:line="37" pos:column="17">s<pos:position pos:line="37" pos:column="18"/></name></type></parameter>,<parameter><type><name pos:line="37" pos:column="19">n<pos:position pos:line="37" pos:column="20"/></name></type></parameter>,<parameter><type><name pos:line="37" pos:column="21">l<pos:position pos:line="37" pos:column="22"/></name></type></parameter>)<pos:position pos:line="37" pos:column="23"/></parameter_list></cpp:macro> \
	<cpp:value pos:line="38" pos:column="9">(SOCKET_ERROR == connect(_get_osfhandle(s),n,l) ? \
	(WSAEMFILE == (errno = WSAGetLastError()) ? errno = EMFILE : -1, -1) : 0)<pos:position pos:line="39" pos:column="82"/></cpp:value></cpp:define>
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define<pos:position pos:line="40" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">gethostbyname<pos:position pos:line="40" pos:column="22"/></name><parameter_list pos:line="40" pos:column="22">(<parameter><type><name pos:line="40" pos:column="23">n<pos:position pos:line="40" pos:column="24"/></name></type></parameter>)<pos:position pos:line="40" pos:column="25"/></parameter_list></cpp:macro> \
	<cpp:value pos:line="41" pos:column="9">(NULL == ((HOSTENT FAR*)(ws32_result = (int)gethostbyname(n))) ? \
	(errno = WSAGetLastError()), (HOSTENT FAR*)NULL : (HOSTENT FAR*)ws32_result)<pos:position pos:line="42" pos:column="85"/></cpp:value></cpp:define>
<cpp:define pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">define<pos:position pos:line="43" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="43" pos:column="9">gethostname<pos:position pos:line="43" pos:column="20"/></name><parameter_list pos:line="43" pos:column="20">(<parameter><type><name pos:line="43" pos:column="21">n<pos:position pos:line="43" pos:column="22"/></name></type></parameter>,<parameter><type><name pos:line="43" pos:column="23">l<pos:position pos:line="43" pos:column="24"/></name></type></parameter>)<pos:position pos:line="43" pos:column="25"/></parameter_list></cpp:macro> \
	<cpp:value pos:line="44" pos:column="9">(SOCKET_ERROR == gethostname(n,l) ? \
	(errno = WSAGetLastError()), -1 : 0)<pos:position pos:line="45" pos:column="45"/></cpp:value></cpp:define>
<cpp:define pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">define<pos:position pos:line="46" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="46" pos:column="9">recv<pos:position pos:line="46" pos:column="13"/></name><parameter_list pos:line="46" pos:column="13">(<parameter><type><name pos:line="46" pos:column="14">s<pos:position pos:line="46" pos:column="15"/></name></type></parameter>,<parameter><type><name pos:line="46" pos:column="16">b<pos:position pos:line="46" pos:column="17"/></name></type></parameter>,<parameter><type><name pos:line="46" pos:column="18">l<pos:position pos:line="46" pos:column="19"/></name></type></parameter>,<parameter><type><name pos:line="46" pos:column="20">f<pos:position pos:line="46" pos:column="21"/></name></type></parameter>)<pos:position pos:line="46" pos:column="22"/></parameter_list></cpp:macro> \
	<cpp:value pos:line="47" pos:column="9">(SOCKET_ERROR == (ws32_result = recv(_get_osfhandle(s),b,l,f)) ? \
	(errno = WSAGetLastError()), -1 : ws32_result)<pos:position pos:line="48" pos:column="55"/></cpp:value></cpp:define>
<cpp:define pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">define<pos:position pos:line="49" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="49" pos:column="9">sendto<pos:position pos:line="49" pos:column="15"/></name><parameter_list pos:line="49" pos:column="15">(<parameter><type><name pos:line="49" pos:column="16">s<pos:position pos:line="49" pos:column="17"/></name></type></parameter>,<parameter><type><name pos:line="49" pos:column="18">b<pos:position pos:line="49" pos:column="19"/></name></type></parameter>,<parameter><type><name pos:line="49" pos:column="20">l<pos:position pos:line="49" pos:column="21"/></name></type></parameter>,<parameter><type><name pos:line="49" pos:column="22">f<pos:position pos:line="49" pos:column="23"/></name></type></parameter>,<parameter><type><name pos:line="49" pos:column="24">t<pos:position pos:line="49" pos:column="25"/></name></type></parameter>,<parameter><type><name pos:line="49" pos:column="26">tl<pos:position pos:line="49" pos:column="28"/></name></type></parameter>)<pos:position pos:line="49" pos:column="29"/></parameter_list></cpp:macro> \
	<cpp:value pos:line="50" pos:column="9">(SOCKET_ERROR == (ws32_result = sendto(_get_osfhandle(s),b,l,f,t,tl)) ? \
	(errno = WSAGetLastError()), -1 : ws32_result)<pos:position pos:line="51" pos:column="55"/></cpp:value></cpp:define>
<cpp:define pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">define<pos:position pos:line="52" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="52" pos:column="9">select<pos:position pos:line="52" pos:column="15"/></name><parameter_list pos:line="52" pos:column="15">(<parameter><type><name pos:line="52" pos:column="16">n<pos:position pos:line="52" pos:column="17"/></name></type></parameter>,<parameter><type><name pos:line="52" pos:column="18">r<pos:position pos:line="52" pos:column="19"/></name></type></parameter>,<parameter><type><name pos:line="52" pos:column="20">w<pos:position pos:line="52" pos:column="21"/></name></type></parameter>,<parameter><type><name pos:line="52" pos:column="22">e<pos:position pos:line="52" pos:column="23"/></name></type></parameter>,<parameter><type><name pos:line="52" pos:column="24">t<pos:position pos:line="52" pos:column="25"/></name></type></parameter>)<pos:position pos:line="52" pos:column="26"/></parameter_list></cpp:macro> \
	<cpp:value pos:line="53" pos:column="9">(SOCKET_ERROR == (ws32_result = select(n,r,w,e,t)) ? \
	(errno = WSAGetLastError()), -1 : ws32_result)<pos:position pos:line="54" pos:column="55"/></cpp:value></cpp:define>
<cpp:define pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">define<pos:position pos:line="55" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="55" pos:column="9">socket<pos:position pos:line="55" pos:column="15"/></name><parameter_list pos:line="55" pos:column="15">(<parameter><type><name pos:line="55" pos:column="16">f<pos:position pos:line="55" pos:column="17"/></name></type></parameter>,<parameter><type><name pos:line="55" pos:column="18">t<pos:position pos:line="55" pos:column="19"/></name></type></parameter>,<parameter><type><name pos:line="55" pos:column="20">p<pos:position pos:line="55" pos:column="21"/></name></type></parameter>)<pos:position pos:line="55" pos:column="22"/></parameter_list></cpp:macro> \
	<cpp:value pos:line="56" pos:column="9">(INVALID_SOCKET == ((SOCKET)(ws32_result = (int)socket(f,t,p))) ? \
	((WSAEMFILE == (errno = WSAGetLastError()) ? errno = EMFILE : -1), -1) : \
	(SOCKET)_open_osfhandle(ws32_result,0))<pos:position pos:line="58" pos:column="48"/></cpp:value></cpp:define>
<cpp:define pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">define<pos:position pos:line="59" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="59" pos:column="9">write<pos:position pos:line="59" pos:column="14"/></name></cpp:macro>      <cpp:value pos:line="59" pos:column="20">_write<pos:position pos:line="59" pos:column="26"/></cpp:value></cpp:define> <comment type="block" pos:line="59" pos:column="27">/* Needed in util.c */</comment>
<cpp:define pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">define<pos:position pos:line="60" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="60" pos:column="9">open<pos:position pos:line="60" pos:column="13"/></name></cpp:macro>       <cpp:value pos:line="60" pos:column="20">_open<pos:position pos:line="60" pos:column="25"/></cpp:value></cpp:define> <comment type="block" pos:line="60" pos:column="26">/* Needed in win32lib.c */</comment>
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="61" pos:column="8">/* #ifdef __cplusplus */</comment>

<cpp:if pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">if<pos:position pos:line="63" pos:column="4"/></cpp:directive> <expr><name pos:line="63" pos:column="5">HAVE_SYS_RESOURCE_H<pos:position pos:line="63" pos:column="24"/></name></expr></cpp:if>
<cpp:include pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">include<pos:position pos:line="64" pos:column="9"/></cpp:directive> <cpp:file pos:line="64" pos:column="10">&lt;sys/resource.h&gt;<pos:position pos:line="64" pos:column="29"/></cpp:file></cpp:include>
<cpp:else pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">else<pos:position pos:line="65" pos:column="6"/></cpp:directive></cpp:else>
<cpp:define pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">define<pos:position pos:line="66" pos:column="8"/></cpp:directive>	<cpp:macro><name pos:line="66" pos:column="9">RUSAGE_SELF<pos:position pos:line="66" pos:column="20"/></name></cpp:macro>	<cpp:value pos:line="66" pos:column="25">0<pos:position pos:line="66" pos:column="26"/></cpp:value></cpp:define>		<comment type="block" pos:line="66" pos:column="41">/* calling process */</comment>
<cpp:define pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">define<pos:position pos:line="67" pos:column="8"/></cpp:directive>	<cpp:macro><name pos:line="67" pos:column="9">RUSAGE_CHILDREN<pos:position pos:line="67" pos:column="24"/></name></cpp:macro>	<cpp:value pos:line="67" pos:column="25">-1<pos:position pos:line="67" pos:column="27"/></cpp:value></cpp:define>		<comment type="block" pos:line="67" pos:column="41">/* terminated child processes */</comment>

<struct pos:line="69" pos:column="1">struct <name pos:line="69" pos:column="8">rusage<pos:position pos:line="69" pos:column="14"/></name> <block pos:line="69" pos:column="15">{<public type="default" pos:line="69" pos:column="16">
    <decl_stmt><decl><type><name><name pos:line="70" pos:column="5">struct<pos:position pos:line="70" pos:column="11"/></name> <name pos:line="70" pos:column="12">timeval<pos:position pos:line="70" pos:column="19"/></name></name></type> <name pos:line="70" pos:column="20">ru_utime<pos:position pos:line="70" pos:column="28"/></name></decl>;<pos:position pos:line="70" pos:column="29"/></decl_stmt>	<comment type="block" pos:line="70" pos:column="33">/* user time used */</comment>
    <decl_stmt><decl><type><name><name pos:line="71" pos:column="5">struct<pos:position pos:line="71" pos:column="11"/></name> <name pos:line="71" pos:column="12">timeval<pos:position pos:line="71" pos:column="19"/></name></name></type> <name pos:line="71" pos:column="20">ru_stime<pos:position pos:line="71" pos:column="28"/></name></decl>;<pos:position pos:line="71" pos:column="29"/></decl_stmt>	<comment type="block" pos:line="71" pos:column="33">/* system time used */</comment>
    <decl_stmt><decl><type><name pos:line="72" pos:column="5">long<pos:position pos:line="72" pos:column="9"/></name></type> <name pos:line="72" pos:column="10">ru_maxrss<pos:position pos:line="72" pos:column="19"/></name></decl>;<pos:position pos:line="72" pos:column="20"/></decl_stmt>			<comment type="block" pos:line="72" pos:column="41">/* integral max resident set size */</comment>
    <decl_stmt><decl><type><name pos:line="73" pos:column="5">long<pos:position pos:line="73" pos:column="9"/></name></type> <name pos:line="73" pos:column="10">ru_ixrss<pos:position pos:line="73" pos:column="18"/></name></decl>;<pos:position pos:line="73" pos:column="19"/></decl_stmt>			<comment type="block" pos:line="73" pos:column="41">/* integral shared text memory size */</comment>
    <decl_stmt><decl><type><name pos:line="74" pos:column="5">long<pos:position pos:line="74" pos:column="9"/></name></type> <name pos:line="74" pos:column="10">ru_idrss<pos:position pos:line="74" pos:column="18"/></name></decl>;<pos:position pos:line="74" pos:column="19"/></decl_stmt>			<comment type="block" pos:line="74" pos:column="41">/* integral unshared data size */</comment>
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">long<pos:position pos:line="75" pos:column="9"/></name></type> <name pos:line="75" pos:column="10">ru_isrss<pos:position pos:line="75" pos:column="18"/></name></decl>;<pos:position pos:line="75" pos:column="19"/></decl_stmt>			<comment type="block" pos:line="75" pos:column="41">/* integral unshared stack size */</comment>
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">long<pos:position pos:line="76" pos:column="9"/></name></type> <name pos:line="76" pos:column="10">ru_minflt<pos:position pos:line="76" pos:column="19"/></name></decl>;<pos:position pos:line="76" pos:column="20"/></decl_stmt>			<comment type="block" pos:line="76" pos:column="41">/* page reclaims */</comment>
    <decl_stmt><decl><type><name pos:line="77" pos:column="5">long<pos:position pos:line="77" pos:column="9"/></name></type> <name pos:line="77" pos:column="10">ru_majflt<pos:position pos:line="77" pos:column="19"/></name></decl>;<pos:position pos:line="77" pos:column="20"/></decl_stmt>			<comment type="block" pos:line="77" pos:column="41">/* page faults */</comment>
    <decl_stmt><decl><type><name pos:line="78" pos:column="5">long<pos:position pos:line="78" pos:column="9"/></name></type> <name pos:line="78" pos:column="10">ru_nswap<pos:position pos:line="78" pos:column="18"/></name></decl>;<pos:position pos:line="78" pos:column="19"/></decl_stmt>			<comment type="block" pos:line="78" pos:column="41">/* swaps */</comment>
    <decl_stmt><decl><type><name pos:line="79" pos:column="5">long<pos:position pos:line="79" pos:column="9"/></name></type> <name pos:line="79" pos:column="10">ru_inblock<pos:position pos:line="79" pos:column="20"/></name></decl>;<pos:position pos:line="79" pos:column="21"/></decl_stmt>		<comment type="block" pos:line="79" pos:column="33">/* block input operations */</comment>
    <decl_stmt><decl><type><name pos:line="80" pos:column="5">long<pos:position pos:line="80" pos:column="9"/></name></type> <name pos:line="80" pos:column="10">ru_oublock<pos:position pos:line="80" pos:column="20"/></name></decl>;<pos:position pos:line="80" pos:column="21"/></decl_stmt>		<comment type="block" pos:line="80" pos:column="33">/* block output operations */</comment>
    <decl_stmt><decl><type><name pos:line="81" pos:column="5">long<pos:position pos:line="81" pos:column="9"/></name></type> <name pos:line="81" pos:column="10">ru_msgsnd<pos:position pos:line="81" pos:column="19"/></name></decl>;<pos:position pos:line="81" pos:column="20"/></decl_stmt>			<comment type="block" pos:line="81" pos:column="41">/* messages sent */</comment>
    <decl_stmt><decl><type><name pos:line="82" pos:column="5">long<pos:position pos:line="82" pos:column="9"/></name></type> <name pos:line="82" pos:column="10">ru_msgrcv<pos:position pos:line="82" pos:column="19"/></name></decl>;<pos:position pos:line="82" pos:column="20"/></decl_stmt>			<comment type="block" pos:line="82" pos:column="41">/* messages received */</comment>
    <decl_stmt><decl><type><name pos:line="83" pos:column="5">long<pos:position pos:line="83" pos:column="9"/></name></type> <name pos:line="83" pos:column="10">ru_nsignals<pos:position pos:line="83" pos:column="21"/></name></decl>;<pos:position pos:line="83" pos:column="22"/></decl_stmt>		<comment type="block" pos:line="83" pos:column="33">/* signals received */</comment>
    <decl_stmt><decl><type><name pos:line="84" pos:column="5">long<pos:position pos:line="84" pos:column="9"/></name></type> <name pos:line="84" pos:column="10">ru_nvcsw<pos:position pos:line="84" pos:column="18"/></name></decl>;<pos:position pos:line="84" pos:column="19"/></decl_stmt>			<comment type="block" pos:line="84" pos:column="41">/* voluntary context switches */</comment>
    <decl_stmt><decl><type><name pos:line="85" pos:column="5">long<pos:position pos:line="85" pos:column="9"/></name></type> <name pos:line="85" pos:column="10">ru_nivcsw<pos:position pos:line="85" pos:column="19"/></name></decl>;<pos:position pos:line="85" pos:column="20"/></decl_stmt>			<comment type="block" pos:line="85" pos:column="41">/* involuntary context switches */</comment>
<pos:position pos:line="85" pos:column="76"/></public>}<pos:position pos:line="86" pos:column="2"/></block>;<pos:position pos:line="86" pos:column="3"/></struct>
<cpp:endif pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">endif<pos:position pos:line="87" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="87" pos:column="8">/* HAVE_SYS_RESOURCE_H */</comment>

<cpp:undef pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">undef<pos:position pos:line="89" pos:column="7"/></cpp:directive> <name pos:line="89" pos:column="8">ACL<pos:position pos:line="89" pos:column="11"/></name></cpp:undef>

<cpp:if pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">if<pos:position pos:line="91" pos:column="4"/></cpp:directive> <expr><operator pos:line="91" pos:column="5">!<pos:position pos:line="91" pos:column="6"/></operator><call><name pos:line="91" pos:column="6">defined<pos:position pos:line="91" pos:column="13"/></name><argument_list pos:line="91" pos:column="13">(<argument><expr><name pos:line="91" pos:column="14">getpagesize<pos:position pos:line="91" pos:column="25"/></name></expr></argument>)<pos:position pos:line="91" pos:column="26"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="92" pos:column="1">/* Windows may lack getpagesize() prototype */</comment>
<decl_stmt><decl><type><name pos:line="93" pos:column="1">SQUIDCEXTERN<pos:position pos:line="93" pos:column="13"/></name> <name pos:line="93" pos:column="14">size_t<pos:position pos:line="93" pos:column="20"/></name></type> <name pos:line="93" pos:column="21">getpagesize<pos:position pos:line="93" pos:column="32"/></name><argument_list pos:line="93" pos:column="32">(<argument><expr><name pos:line="93" pos:column="33">void<pos:position pos:line="93" pos:column="37"/></name></expr></argument>)<pos:position pos:line="93" pos:column="38"/></argument_list></decl>;<pos:position pos:line="93" pos:column="39"/></decl_stmt></block></function></unit>
