<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3252_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemStore<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">keep<pos:position pos:line="2" pos:column="15"/></name></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">StoreEntry<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">&amp;<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="28">e<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">map<pos:position pos:line="4" pos:column="13"/></name></expr>)<pos:position pos:line="4" pos:column="14"/></condition><then pos:line="4" pos:column="14"> <block pos:line="4" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">20<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">5<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="23">HERE<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&lt;&lt;<pos:position pos:line="5" pos:column="36"/></operator> <literal type="string" pos:line="5" pos:column="31">"No map to mem-cache "<pos:position pos:line="5" pos:column="53"/></literal> <operator pos:line="5" pos:column="54">&lt;&lt;<pos:position pos:line="5" pos:column="62"/></operator> <name pos:line="5" pos:column="57">e<pos:position pos:line="5" pos:column="58"/></name></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="60"/></expr_stmt>
        <return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">sfileno<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">index<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">Ipc<pos:position pos:line="10" pos:column="8"/></name><operator pos:line="10" pos:column="8">::<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">StoreMapSlot<pos:position pos:line="10" pos:column="22"/></name></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier></type><name pos:line="10" pos:column="24">slot<pos:position pos:line="10" pos:column="28"/></name> <init pos:line="10" pos:column="29">= <expr><call><name><name pos:line="10" pos:column="31">map<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">openForWriting<pos:position pos:line="10" pos:column="50"/></name></name><argument_list pos:line="10" pos:column="50">(<argument><expr><cast type="reinterpret" pos:line="10" pos:column="51">reinterpret_cast<argument_list type="generic" pos:line="10" pos:column="67">&lt;<argument><expr><specifier pos:line="10" pos:column="68">const<pos:position pos:line="10" pos:column="73"/></specifier> <name pos:line="10" pos:column="74">cache_key<pos:position pos:line="10" pos:column="83"/></name> <operator pos:line="10" pos:column="84">*<pos:position pos:line="10" pos:column="85"/></operator></expr></argument>&gt;<pos:position pos:line="10" pos:column="89"/></argument_list><argument_list pos:line="10" pos:column="86">(<argument><expr><name><name pos:line="10" pos:column="87">e<pos:position pos:line="10" pos:column="88"/></name><operator pos:line="10" pos:column="88">.<pos:position pos:line="10" pos:column="89"/></operator><name pos:line="10" pos:column="89">key<pos:position pos:line="10" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="93"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="10" pos:column="95">index<pos:position pos:line="10" pos:column="100"/></name></expr></argument>)<pos:position pos:line="10" pos:column="101"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="102"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">slot<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15"> <block pos:line="11" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">20<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="20">5<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="23">HERE<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">&lt;&lt;<pos:position pos:line="12" pos:column="36"/></operator> <literal type="string" pos:line="12" pos:column="31">"No room in mem-cache map to index "<pos:position pos:line="12" pos:column="67"/></literal> <operator pos:line="12" pos:column="68">&lt;&lt;<pos:position pos:line="12" pos:column="76"/></operator> <name pos:line="12" pos:column="71">e<pos:position pos:line="12" pos:column="72"/></name></expr></argument>)<pos:position pos:line="12" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="74"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">MemStoreMap<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">::<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">Extras<pos:position pos:line="16" pos:column="24"/></name></name> <modifier pos:line="16" pos:column="25">&amp;<pos:position pos:line="16" pos:column="30"/></modifier></type><name pos:line="16" pos:column="26">extras<pos:position pos:line="16" pos:column="32"/></name> <init pos:line="16" pos:column="33">= <expr><call><name><name pos:line="16" pos:column="35">map<pos:position pos:line="16" pos:column="38"/></name><operator pos:line="16" pos:column="38">-&gt;<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="40">extras<pos:position pos:line="16" pos:column="46"/></name></name><argument_list pos:line="16" pos:column="46">(<argument><expr><name pos:line="16" pos:column="47">index<pos:position pos:line="16" pos:column="52"/></name></expr></argument>)<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="54"/></decl_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">copyToShm<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">e<pos:position pos:line="17" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="22">extras<pos:position pos:line="17" pos:column="28"/></name></expr></argument>)<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="30"/></condition><then pos:line="17" pos:column="30"> <block pos:line="17" pos:column="31">{
        <expr_stmt><expr><call><name><name pos:line="18" pos:column="9">slot<pos:position pos:line="18" pos:column="13"/></name><operator pos:line="18" pos:column="13">-&gt;<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="15">set<pos:position pos:line="18" pos:column="18"/></name></name><argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">e<pos:position pos:line="18" pos:column="20"/></name></expr></argument>)<pos:position pos:line="18" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="19" pos:column="9">map<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">closeForWriting<pos:position pos:line="19" pos:column="29"/></name></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name pos:line="19" pos:column="30">index<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="19" pos:column="37">false<pos:position pos:line="19" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then> <else pos:line="20" pos:column="7">else <block pos:line="20" pos:column="12">{
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">map<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">abortIo<pos:position pos:line="21" pos:column="21"/></name></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">index<pos:position pos:line="21" pos:column="27"/></name></expr></argument>)<pos:position pos:line="21" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></else></if>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
