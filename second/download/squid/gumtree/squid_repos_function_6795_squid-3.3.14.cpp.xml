<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6795_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">ntlm_validate_packet<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">ntlmhdr<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">hdr<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">int32_t<pos:position pos:line="2" pos:column="56"/></name></type> <name pos:line="2" pos:column="57">type<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/*
     * Must be the correct security package and request type.
     * The 8 bytes compared includes the ASCII 'NUL'.
     */</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">memcmp<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name><name pos:line="8" pos:column="16">hdr<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">signature<pos:position pos:line="8" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="32">"NTLMSSP"<pos:position pos:line="8" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="43">8<pos:position pos:line="8" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call> <operator pos:line="8" pos:column="46">!=<pos:position pos:line="8" pos:column="48"/></operator> <literal type="number" pos:line="8" pos:column="49">0<pos:position pos:line="8" pos:column="50"/></literal></expr>)<pos:position pos:line="8" pos:column="51"/></condition><then pos:line="8" pos:column="51"> <block pos:line="8" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">fprintf<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">stderr<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="25">"ntlmCheckHeader: bad header signature\n"<pos:position pos:line="9" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="68"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">NTLM_ERR_BLOB<pos:position pos:line="10" pos:column="29"/></name></expr>;<pos:position pos:line="10" pos:column="30"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">type<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">==<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">NTLM_ANY<pos:position pos:line="12" pos:column="25"/></name></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">NTLM_ERR_NONE<pos:position pos:line="13" pos:column="29"/></name></expr>;<pos:position pos:line="13" pos:column="30"/></return></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">int32_t<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">)<pos:position pos:line="15" pos:column="18"/></operator><call><name pos:line="15" pos:column="18">le32toh<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name><name pos:line="15" pos:column="26">hdr<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">type<pos:position pos:line="15" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call> <operator pos:line="15" pos:column="37">!=<pos:position pos:line="15" pos:column="39"/></operator> <name pos:line="15" pos:column="40">type<pos:position pos:line="15" pos:column="44"/></name></expr>)<pos:position pos:line="15" pos:column="45"/></condition><then pos:line="15" pos:column="45"> <block pos:line="15" pos:column="46">{
        <comment type="block" pos:line="16" pos:column="9">/* don't report this error - it's ok as we do a if() around this function */</comment>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debug<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><literal type="string" pos:line="17" pos:column="15">"ntlm_validate_packet: type is %d, wanted %d\n"<pos:position pos:line="17" pos:column="62"/></literal></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="64">le32toh<pos:position pos:line="17" pos:column="71"/></name><argument_list pos:line="17" pos:column="71">(<argument><expr><name><name pos:line="17" pos:column="72">hdr<pos:position pos:line="17" pos:column="75"/></name><operator pos:line="17" pos:column="75">-&gt;<pos:position pos:line="17" pos:column="80"/></operator><name pos:line="17" pos:column="77">type<pos:position pos:line="17" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="82"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="84">type<pos:position pos:line="17" pos:column="88"/></name></expr></argument>)<pos:position pos:line="17" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="90"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">NTLM_ERR_PROTOCOL<pos:position pos:line="18" pos:column="33"/></name></expr>;<pos:position pos:line="18" pos:column="34"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">NTLM_ERR_NONE<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
