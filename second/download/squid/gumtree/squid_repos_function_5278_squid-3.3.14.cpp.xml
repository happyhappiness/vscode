<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5278_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">authDigestNonceEncode<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">digest_nonce_h<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type> <name pos:line="2" pos:column="40">nonce<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">nonce<pos:position pos:line="4" pos:column="15"/></name></expr>)<pos:position pos:line="4" pos:column="16"/></condition><then pos:line="4" pos:column="16">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">nonce<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">-&gt;<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="16">key<pos:position pos:line="7" pos:column="19"/></name></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="9">xfree<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><name><name pos:line="8" pos:column="15">nonce<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">key<pos:position pos:line="8" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="10" pos:column="5">nonce<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">key<pos:position pos:line="10" pos:column="15"/></name></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <call><name pos:line="10" pos:column="18">xstrdup<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><call><name pos:line="10" pos:column="26">base64_encode_bin<pos:position pos:line="10" pos:column="43"/></name><argument_list pos:line="10" pos:column="43">(<argument><expr><operator pos:line="10" pos:column="44">(<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="45">char<pos:position pos:line="10" pos:column="49"/></name> <operator pos:line="10" pos:column="50">*<pos:position pos:line="10" pos:column="51"/></operator><operator pos:line="10" pos:column="51">)<pos:position pos:line="10" pos:column="52"/></operator> <operator pos:line="10" pos:column="53">&amp;<pos:position pos:line="10" pos:column="58"/></operator><operator pos:line="10" pos:column="54">(<pos:position pos:line="10" pos:column="55"/></operator><name><name pos:line="10" pos:column="55">nonce<pos:position pos:line="10" pos:column="60"/></name><operator pos:line="10" pos:column="60">-&gt;<pos:position pos:line="10" pos:column="65"/></operator><name pos:line="10" pos:column="62">noncedata<pos:position pos:line="10" pos:column="71"/></name></name><operator pos:line="10" pos:column="71">)<pos:position pos:line="10" pos:column="72"/></operator></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="74">sizeof<argument_list pos:line="10" pos:column="80">(<argument><expr><name pos:line="10" pos:column="81">digest_nonce_data<pos:position pos:line="10" pos:column="98"/></name></expr></argument>)<pos:position pos:line="10" pos:column="99"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="100"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="102"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
