<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3339_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">ServiceConfig<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parse<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">()<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">key<pos:position pos:line="4" pos:column="8"/></name> <operator pos:line="4" pos:column="9">=<pos:position pos:line="4" pos:column="10"/></operator> <call><name><name pos:line="4" pos:column="11">ConfigParser<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">::<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="25">NextToken<pos:position pos:line="4" pos:column="34"/></name></name><argument_list pos:line="4" pos:column="34">()<pos:position pos:line="4" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">String<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">method_point<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><call><name><name pos:line="5" pos:column="27">ConfigParser<pos:position pos:line="5" pos:column="39"/></name><operator pos:line="5" pos:column="39">::<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="41">NextToken<pos:position pos:line="5" pos:column="50"/></name></name><argument_list pos:line="5" pos:column="50">()<pos:position pos:line="5" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="53"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">method_point<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">.<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">size<pos:position pos:line="6" pos:column="27"/></name></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30"> <block pos:line="6" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">3<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="19">DBG_CRITICAL<pos:position pos:line="7" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="33">"ERROR: "<pos:position pos:line="7" pos:column="42"/></literal> <operator pos:line="7" pos:column="43">&lt;&lt;<pos:position pos:line="7" pos:column="51"/></operator> <name pos:line="7" pos:column="46">cfg_filename<pos:position pos:line="7" pos:column="58"/></name> <operator pos:line="7" pos:column="59">&lt;&lt;<pos:position pos:line="7" pos:column="67"/></operator> <literal type="char" pos:line="7" pos:column="62">':'<pos:position pos:line="7" pos:column="65"/></literal> <operator pos:line="7" pos:column="66">&lt;&lt;<pos:position pos:line="7" pos:column="74"/></operator> <name pos:line="7" pos:column="69">config_lineno<pos:position pos:line="7" pos:column="82"/></name> <operator pos:line="7" pos:column="83">&lt;&lt;<pos:position pos:line="7" pos:column="91"/></operator> <literal type="string" pos:line="7" pos:column="86">": "<pos:position pos:line="7" pos:column="90"/></literal> <operator pos:line="7" pos:column="91">&lt;&lt;<pos:position pos:line="7" pos:column="99"/></operator>
               <literal type="string" pos:line="8" pos:column="16">"Missing vectoring point in adaptation service definition"<pos:position pos:line="8" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="76"/></expr_stmt>
        <return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">false<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="12" pos:column="5">method<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">parseMethod<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><call><name><name pos:line="12" pos:column="26">method_point<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">.<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="39">termedBuf<pos:position pos:line="12" pos:column="48"/></name></name><argument_list pos:line="12" pos:column="48">()<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">point<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">parseVectPoint<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><call><name><name pos:line="13" pos:column="28">method_point<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">.<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">termedBuf<pos:position pos:line="13" pos:column="50"/></name></name><argument_list pos:line="13" pos:column="50">()<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">method<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">==<pos:position pos:line="14" pos:column="18"/></operator> <name><name pos:line="14" pos:column="19">Adaptation<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">::<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="31">methodNone<pos:position pos:line="14" pos:column="41"/></name></name> <operator pos:line="14" pos:column="42">&amp;&amp;<pos:position pos:line="14" pos:column="52"/></operator> <name pos:line="14" pos:column="45">point<pos:position pos:line="14" pos:column="50"/></name> <operator pos:line="14" pos:column="51">==<pos:position pos:line="14" pos:column="53"/></operator> <name><name pos:line="14" pos:column="54">Adaptation<pos:position pos:line="14" pos:column="64"/></name><operator pos:line="14" pos:column="64">::<pos:position pos:line="14" pos:column="66"/></operator><name pos:line="14" pos:column="66">pointNone<pos:position pos:line="14" pos:column="75"/></name></name></expr>)<pos:position pos:line="14" pos:column="76"/></condition><then pos:line="14" pos:column="76"> <block pos:line="14" pos:column="77">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">3<pos:position pos:line="15" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="19">DBG_CRITICAL<pos:position pos:line="15" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="33">"ERROR: "<pos:position pos:line="15" pos:column="42"/></literal> <operator pos:line="15" pos:column="43">&lt;&lt;<pos:position pos:line="15" pos:column="51"/></operator> <name pos:line="15" pos:column="46">cfg_filename<pos:position pos:line="15" pos:column="58"/></name> <operator pos:line="15" pos:column="59">&lt;&lt;<pos:position pos:line="15" pos:column="67"/></operator> <literal type="char" pos:line="15" pos:column="62">':'<pos:position pos:line="15" pos:column="65"/></literal> <operator pos:line="15" pos:column="66">&lt;&lt;<pos:position pos:line="15" pos:column="74"/></operator> <name pos:line="15" pos:column="69">config_lineno<pos:position pos:line="15" pos:column="82"/></name> <operator pos:line="15" pos:column="83">&lt;&lt;<pos:position pos:line="15" pos:column="91"/></operator> <literal type="string" pos:line="15" pos:column="86">": "<pos:position pos:line="15" pos:column="90"/></literal> <operator pos:line="15" pos:column="91">&lt;&lt;<pos:position pos:line="15" pos:column="99"/></operator>
               <literal type="string" pos:line="16" pos:column="16">"Unknown vectoring point '"<pos:position pos:line="16" pos:column="43"/></literal> <operator pos:line="16" pos:column="44">&lt;&lt;<pos:position pos:line="16" pos:column="52"/></operator> <name pos:line="16" pos:column="47">method_point<pos:position pos:line="16" pos:column="59"/></name> <operator pos:line="16" pos:column="60">&lt;&lt;<pos:position pos:line="16" pos:column="68"/></operator> <literal type="string" pos:line="16" pos:column="63">"' in adaptation service definition"<pos:position pos:line="16" pos:column="99"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="101"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><literal type="boolean" pos:line="17" pos:column="16">false<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="20" pos:column="5">// reset optional parameters in case we are reconfiguring</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">bypass<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">routing<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <literal type="boolean" pos:line="21" pos:column="24">false<pos:position pos:line="21" pos:column="29"/></literal></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>

    <comment type="line" pos:line="23" pos:column="5">// handle optional service name=value parameters</comment>
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">bool<pos:position pos:line="24" pos:column="9"/></name></type> <name pos:line="24" pos:column="10">grokkedUri<pos:position pos:line="24" pos:column="20"/></name> <init pos:line="24" pos:column="21">= <expr><literal type="boolean" pos:line="24" pos:column="23">false<pos:position pos:line="24" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="25" pos:column="5">bool<pos:position pos:line="25" pos:column="9"/></name></type> <name pos:line="25" pos:column="10">onOverloadSet<pos:position pos:line="25" pos:column="23"/></name> <init pos:line="25" pos:column="24">= <expr><literal type="boolean" pos:line="25" pos:column="26">false<pos:position pos:line="25" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="26" pos:column="5">std<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">::<pos:position pos:line="26" pos:column="10"/></operator><name><name pos:line="26" pos:column="10">set<pos:position pos:line="26" pos:column="13"/></name><argument_list type="generic" pos:line="26" pos:column="13">&lt;<argument><expr><name><name pos:line="26" pos:column="14">std<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">::<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">string<pos:position pos:line="26" pos:column="25"/></name></name></expr></argument>&gt;<pos:position pos:line="26" pos:column="29"/></argument_list></name></name></type> <name pos:line="26" pos:column="27">options<pos:position pos:line="26" pos:column="34"/></name></decl>;<pos:position pos:line="26" pos:column="35"/></decl_stmt>

    <while pos:line="28" pos:column="5">while <condition pos:line="28" pos:column="11">(<decl><type><name pos:line="28" pos:column="12">char<pos:position pos:line="28" pos:column="16"/></name> <modifier pos:line="28" pos:column="17">*<pos:position pos:line="28" pos:column="18"/></modifier></type><name pos:line="28" pos:column="18">option<pos:position pos:line="28" pos:column="24"/></name> <init pos:line="28" pos:column="25">= <expr><call><name><name pos:line="28" pos:column="27">ConfigParser<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">::<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="41">NextToken<pos:position pos:line="28" pos:column="50"/></name></name><argument_list pos:line="28" pos:column="50">()<pos:position pos:line="28" pos:column="52"/></argument_list></call></expr></init></decl>)<pos:position pos:line="28" pos:column="53"/></condition> <block pos:line="28" pos:column="54">{
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">const<pos:position pos:line="29" pos:column="14"/></specifier> <name pos:line="29" pos:column="15">char<pos:position pos:line="29" pos:column="19"/></name> <modifier pos:line="29" pos:column="20">*<pos:position pos:line="29" pos:column="21"/></modifier></type><name pos:line="29" pos:column="21">name<pos:position pos:line="29" pos:column="25"/></name> <init pos:line="29" pos:column="26">= <expr><name pos:line="29" pos:column="28">option<pos:position pos:line="29" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="29" pos:column="35"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="30" pos:column="9">const<pos:position pos:line="30" pos:column="14"/></specifier> <name pos:line="30" pos:column="15">char<pos:position pos:line="30" pos:column="19"/></name> <modifier pos:line="30" pos:column="20">*<pos:position pos:line="30" pos:column="21"/></modifier></type><name pos:line="30" pos:column="21">value<pos:position pos:line="30" pos:column="26"/></name> <init pos:line="30" pos:column="27">= <expr><literal type="string" pos:line="30" pos:column="29">""<pos:position pos:line="30" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="30" pos:column="32"/></decl_stmt>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">strcmp<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">option<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="28">"0"<pos:position pos:line="31" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="32"/></argument_list></call> <operator pos:line="31" pos:column="33">==<pos:position pos:line="31" pos:column="35"/></operator> <literal type="number" pos:line="31" pos:column="36">0<pos:position pos:line="31" pos:column="37"/></literal></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38"> <block pos:line="31" pos:column="39">{ <comment type="line" pos:line="31" pos:column="41">// backward compatibility</comment>
            <expr_stmt><expr><name pos:line="32" pos:column="13">name<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <literal type="string" pos:line="32" pos:column="20">"bypass"<pos:position pos:line="32" pos:column="28"/></literal></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">value<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <literal type="string" pos:line="33" pos:column="21">"off"<pos:position pos:line="33" pos:column="26"/></literal></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">debugs<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="number" pos:line="34" pos:column="20">3<pos:position pos:line="34" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="23">DBG_PARSE_NOTE<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">DBG_IMPORTANT<pos:position pos:line="34" pos:column="51"/></name></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="54">"UPGRADE: Please use 'bypass=off' option to disable service bypass"<pos:position pos:line="34" pos:column="121"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="122"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="123"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then>  <elseif pos:line="35" pos:column="12">else <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><call><name pos:line="35" pos:column="21">strcmp<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">option<pos:position pos:line="35" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="36">"1"<pos:position pos:line="35" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call> <operator pos:line="35" pos:column="41">==<pos:position pos:line="35" pos:column="43"/></operator> <literal type="number" pos:line="35" pos:column="44">0<pos:position pos:line="35" pos:column="45"/></literal></expr>)<pos:position pos:line="35" pos:column="46"/></condition><then pos:line="35" pos:column="46"> <block pos:line="35" pos:column="47">{ <comment type="line" pos:line="35" pos:column="49">// backward compatibility</comment>
            <expr_stmt><expr><name pos:line="36" pos:column="13">name<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <literal type="string" pos:line="36" pos:column="20">"bypass"<pos:position pos:line="36" pos:column="28"/></literal></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="37" pos:column="13">value<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <literal type="string" pos:line="37" pos:column="21">"on"<pos:position pos:line="37" pos:column="25"/></literal></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">debugs<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><literal type="number" pos:line="38" pos:column="20">3<pos:position pos:line="38" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="23">DBG_PARSE_NOTE<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><name pos:line="38" pos:column="38">DBG_IMPORTANT<pos:position pos:line="38" pos:column="51"/></name></expr></argument>)<pos:position pos:line="38" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="54">"UPGRADE: Please use 'bypass=on' option to enable service bypass"<pos:position pos:line="38" pos:column="119"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="121"/></expr_stmt>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if></elseif> <else pos:line="39" pos:column="11">else <block pos:line="39" pos:column="16">{
            <decl_stmt><decl><type><name pos:line="40" pos:column="13">char<pos:position pos:line="40" pos:column="17"/></name> <modifier pos:line="40" pos:column="18">*<pos:position pos:line="40" pos:column="19"/></modifier></type><name pos:line="40" pos:column="19">eq<pos:position pos:line="40" pos:column="21"/></name> <init pos:line="40" pos:column="22">= <expr><call><name pos:line="40" pos:column="24">strstr<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">option<pos:position pos:line="40" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="39">"="<pos:position pos:line="40" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="44"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="41" pos:column="13">const<pos:position pos:line="41" pos:column="18"/></specifier> <name pos:line="41" pos:column="19">char<pos:position pos:line="41" pos:column="23"/></name> <modifier pos:line="41" pos:column="24">*<pos:position pos:line="41" pos:column="25"/></modifier></type><name pos:line="41" pos:column="25">sffx<pos:position pos:line="41" pos:column="29"/></name> <init pos:line="41" pos:column="30">= <expr><call><name pos:line="41" pos:column="32">strstr<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><name pos:line="41" pos:column="39">option<pos:position pos:line="41" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="47">"://"<pos:position pos:line="41" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="54"/></decl_stmt>
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><operator pos:line="42" pos:column="17">!<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">eq<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">||<pos:position pos:line="42" pos:column="23"/></operator> <operator pos:line="42" pos:column="24">(<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">sffx<pos:position pos:line="42" pos:column="29"/></name> <operator pos:line="42" pos:column="30">&amp;&amp;<pos:position pos:line="42" pos:column="40"/></operator> <name pos:line="42" pos:column="33">sffx<pos:position pos:line="42" pos:column="37"/></name> <operator pos:line="42" pos:column="38">&lt;<pos:position pos:line="42" pos:column="42"/></operator> <name pos:line="42" pos:column="40">eq<pos:position pos:line="42" pos:column="42"/></name><operator pos:line="42" pos:column="42">)<pos:position pos:line="42" pos:column="43"/></operator></expr>)<pos:position pos:line="42" pos:column="44"/></condition><then pos:line="42" pos:column="44"> <block pos:line="42" pos:column="45">{ <comment type="line" pos:line="42" pos:column="47">//no "=" or has the form "icap://host?arg=val"</comment>
                <expr_stmt><expr><name pos:line="43" pos:column="17">name<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <literal type="string" pos:line="43" pos:column="24">"uri"<pos:position pos:line="43" pos:column="29"/></literal></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><name pos:line="44" pos:column="17">value<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">=<pos:position pos:line="44" pos:column="24"/></operator> <name pos:line="44" pos:column="25">option<pos:position pos:line="44" pos:column="31"/></name></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="45" pos:column="14"/></block></then>  <else pos:line="45" pos:column="16">else <block pos:line="45" pos:column="21">{ <comment type="line" pos:line="45" pos:column="23">// a normal name=value option</comment>
                <expr_stmt><expr><operator pos:line="46" pos:column="17">*<pos:position pos:line="46" pos:column="18"/></operator><name pos:line="46" pos:column="18">eq<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <literal type="char" pos:line="46" pos:column="23">'\0'<pos:position pos:line="46" pos:column="27"/></literal></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt> <comment type="line" pos:line="46" pos:column="29">// terminate option name</comment>
                <expr_stmt><expr><name pos:line="47" pos:column="17">value<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">=<pos:position pos:line="47" pos:column="24"/></operator> <name pos:line="47" pos:column="25">eq<pos:position pos:line="47" pos:column="27"/></name> <operator pos:line="47" pos:column="28">+<pos:position pos:line="47" pos:column="29"/></operator> <literal type="number" pos:line="47" pos:column="30">1<pos:position pos:line="47" pos:column="31"/></literal></expr>;<pos:position pos:line="47" pos:column="32"/></expr_stmt> <comment type="line" pos:line="47" pos:column="33">// skip '='</comment>
            }<pos:position pos:line="48" pos:column="14"/></block></else></if>
        }<pos:position pos:line="49" pos:column="10"/></block></else></if>

        <comment type="line" pos:line="51" pos:column="9">// Check if option is set twice</comment>
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name><name pos:line="52" pos:column="13">options<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">.<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="21">find<pos:position pos:line="52" pos:column="25"/></name></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">name<pos:position pos:line="52" pos:column="30"/></name></expr></argument>)<pos:position pos:line="52" pos:column="31"/></argument_list></call> <operator pos:line="52" pos:column="32">!=<pos:position pos:line="52" pos:column="34"/></operator> <call><name><name pos:line="52" pos:column="35">options<pos:position pos:line="52" pos:column="42"/></name><operator pos:line="52" pos:column="42">.<pos:position pos:line="52" pos:column="43"/></operator><name pos:line="52" pos:column="43">end<pos:position pos:line="52" pos:column="46"/></name></name><argument_list pos:line="52" pos:column="46">()<pos:position pos:line="52" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="49"/></condition><then pos:line="52" pos:column="49"> <block pos:line="52" pos:column="50">{
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">debugs<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><literal type="number" pos:line="53" pos:column="20">3<pos:position pos:line="53" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="23">DBG_CRITICAL<pos:position pos:line="53" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="37">"ERROR: "<pos:position pos:line="53" pos:column="46"/></literal> <operator pos:line="53" pos:column="47">&lt;&lt;<pos:position pos:line="53" pos:column="55"/></operator> <name pos:line="53" pos:column="50">cfg_filename<pos:position pos:line="53" pos:column="62"/></name> <operator pos:line="53" pos:column="63">&lt;&lt;<pos:position pos:line="53" pos:column="71"/></operator> <literal type="char" pos:line="53" pos:column="66">':'<pos:position pos:line="53" pos:column="69"/></literal> <operator pos:line="53" pos:column="70">&lt;&lt;<pos:position pos:line="53" pos:column="78"/></operator> <name pos:line="53" pos:column="73">config_lineno<pos:position pos:line="53" pos:column="86"/></name> <operator pos:line="53" pos:column="87">&lt;&lt;<pos:position pos:line="53" pos:column="95"/></operator> <literal type="string" pos:line="53" pos:column="90">": "<pos:position pos:line="53" pos:column="94"/></literal> <operator pos:line="53" pos:column="95">&lt;&lt;<pos:position pos:line="53" pos:column="103"/></operator>
                   <literal type="string" pos:line="54" pos:column="20">"Duplicate option \""<pos:position pos:line="54" pos:column="41"/></literal> <operator pos:line="54" pos:column="42">&lt;&lt;<pos:position pos:line="54" pos:column="50"/></operator> <name pos:line="54" pos:column="45">name<pos:position pos:line="54" pos:column="49"/></name> <operator pos:line="54" pos:column="50">&lt;&lt;<pos:position pos:line="54" pos:column="58"/></operator> <literal type="string" pos:line="54" pos:column="53">"\" in adaptation service definition"<pos:position pos:line="54" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="92"/></expr_stmt>
            <return pos:line="55" pos:column="13">return <expr><literal type="boolean" pos:line="55" pos:column="20">false<pos:position pos:line="55" pos:column="25"/></literal></expr>;<pos:position pos:line="55" pos:column="26"/></return>
        }<pos:position pos:line="56" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="57" pos:column="9">options<pos:position pos:line="57" pos:column="16"/></name><operator pos:line="57" pos:column="16">.<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="17">insert<pos:position pos:line="57" pos:column="23"/></name></name><argument_list pos:line="57" pos:column="23">(<argument><expr><name pos:line="57" pos:column="24">name<pos:position pos:line="57" pos:column="28"/></name></expr></argument>)<pos:position pos:line="57" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="30"/></expr_stmt>

        <decl_stmt><decl><type><name pos:line="59" pos:column="9">bool<pos:position pos:line="59" pos:column="13"/></name></type> <name pos:line="59" pos:column="14">grokked<pos:position pos:line="59" pos:column="21"/></name> <init pos:line="59" pos:column="22">= <expr><literal type="boolean" pos:line="59" pos:column="24">false<pos:position pos:line="59" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="59" pos:column="30"/></decl_stmt>
        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><call><name pos:line="60" pos:column="13">strcmp<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><name pos:line="60" pos:column="20">name<pos:position pos:line="60" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="26">"bypass"<pos:position pos:line="60" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="35"/></argument_list></call> <operator pos:line="60" pos:column="36">==<pos:position pos:line="60" pos:column="38"/></operator> <literal type="number" pos:line="60" pos:column="39">0<pos:position pos:line="60" pos:column="40"/></literal></expr>)<pos:position pos:line="60" pos:column="41"/></condition><then pos:line="60" pos:column="41"> <block pos:line="60" pos:column="42">{
            <expr_stmt><expr><name pos:line="61" pos:column="13">grokked<pos:position pos:line="61" pos:column="20"/></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <call><name pos:line="61" pos:column="23">grokBool<pos:position pos:line="61" pos:column="31"/></name><argument_list pos:line="61" pos:column="31">(<argument><expr><name pos:line="61" pos:column="32">bypass<pos:position pos:line="61" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="40">name<pos:position pos:line="61" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="46">value<pos:position pos:line="61" pos:column="51"/></name></expr></argument>)<pos:position pos:line="61" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="62" pos:column="10"/></block></then> <elseif pos:line="62" pos:column="11">else <if pos:line="62" pos:column="16">if <condition pos:line="62" pos:column="19">(<expr><call><name pos:line="62" pos:column="20">strcmp<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name pos:line="62" pos:column="27">name<pos:position pos:line="62" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="33">"routing"<pos:position pos:line="62" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call> <operator pos:line="62" pos:column="44">==<pos:position pos:line="62" pos:column="46"/></operator> <literal type="number" pos:line="62" pos:column="47">0<pos:position pos:line="62" pos:column="48"/></literal></expr>)<pos:position pos:line="62" pos:column="49"/></condition><then pos:line="62" pos:column="49">
            <block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="13">grokked<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">=<pos:position pos:line="63" pos:column="22"/></operator> <call><name pos:line="63" pos:column="23">grokBool<pos:position pos:line="63" pos:column="31"/></name><argument_list pos:line="63" pos:column="31">(<argument><expr><name pos:line="63" pos:column="32">routing<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="41">name<pos:position pos:line="63" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="47">value<pos:position pos:line="63" pos:column="52"/></name></expr></argument>)<pos:position pos:line="63" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="54"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="64" pos:column="9">else <if pos:line="64" pos:column="14">if <condition pos:line="64" pos:column="17">(<expr><call><name pos:line="64" pos:column="18">strcmp<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">name<pos:position pos:line="64" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="31">"uri"<pos:position pos:line="64" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="37"/></argument_list></call> <operator pos:line="64" pos:column="38">==<pos:position pos:line="64" pos:column="40"/></operator> <literal type="number" pos:line="64" pos:column="41">0<pos:position pos:line="64" pos:column="42"/></literal></expr>)<pos:position pos:line="64" pos:column="43"/></condition><then pos:line="64" pos:column="43">
            <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="13">grokked<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <name pos:line="65" pos:column="23">grokkedUri<pos:position pos:line="65" pos:column="33"/></name> <operator pos:line="65" pos:column="34">=<pos:position pos:line="65" pos:column="35"/></operator> <call><name pos:line="65" pos:column="36">grokUri<pos:position pos:line="65" pos:column="43"/></name><argument_list pos:line="65" pos:column="43">(<argument><expr><name pos:line="65" pos:column="44">value<pos:position pos:line="65" pos:column="49"/></name></expr></argument>)<pos:position pos:line="65" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="51"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="66" pos:column="9">else <if pos:line="66" pos:column="14">if <condition pos:line="66" pos:column="17">(<expr><call><name pos:line="66" pos:column="18">strcmp<pos:position pos:line="66" pos:column="24"/></name><argument_list pos:line="66" pos:column="24">(<argument><expr><name pos:line="66" pos:column="25">name<pos:position pos:line="66" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="31">"ipv6"<pos:position pos:line="66" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="38"/></argument_list></call> <operator pos:line="66" pos:column="39">==<pos:position pos:line="66" pos:column="41"/></operator> <literal type="number" pos:line="66" pos:column="42">0<pos:position pos:line="66" pos:column="43"/></literal></expr>)<pos:position pos:line="66" pos:column="44"/></condition><then pos:line="66" pos:column="44"> <block pos:line="66" pos:column="45">{
            <expr_stmt><expr><name pos:line="67" pos:column="13">grokked<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">=<pos:position pos:line="67" pos:column="22"/></operator> <call><name pos:line="67" pos:column="23">grokBool<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">(<argument><expr><name pos:line="67" pos:column="32">ipv6<pos:position pos:line="67" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="38">name<pos:position pos:line="67" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="44">value<pos:position pos:line="67" pos:column="49"/></name></expr></argument>)<pos:position pos:line="67" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="51"/></expr_stmt>
            <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">grokked<pos:position pos:line="68" pos:column="24"/></name> <operator pos:line="68" pos:column="25">&amp;&amp;<pos:position pos:line="68" pos:column="35"/></operator> <name pos:line="68" pos:column="28">ipv6<pos:position pos:line="68" pos:column="32"/></name> <operator pos:line="68" pos:column="33">&amp;&amp;<pos:position pos:line="68" pos:column="43"/></operator> <operator pos:line="68" pos:column="36">!<pos:position pos:line="68" pos:column="37"/></operator><name><name pos:line="68" pos:column="37">Ip<pos:position pos:line="68" pos:column="39"/></name><operator pos:line="68" pos:column="39">::<pos:position pos:line="68" pos:column="41"/></operator><name pos:line="68" pos:column="41">EnableIpv6<pos:position pos:line="68" pos:column="51"/></name></name></expr>)<pos:position pos:line="68" pos:column="52"/></condition><then pos:line="68" pos:column="52">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="17">debugs<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><literal type="number" pos:line="69" pos:column="24">3<pos:position pos:line="69" pos:column="25"/></literal></expr></argument>, <argument><expr><call><name pos:line="69" pos:column="27">DBG_PARSE_NOTE<pos:position pos:line="69" pos:column="41"/></name><argument_list pos:line="69" pos:column="41">(<argument><expr><name pos:line="69" pos:column="42">DBG_IMPORTANT<pos:position pos:line="69" pos:column="55"/></name></expr></argument>)<pos:position pos:line="69" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="58">"WARNING: IPv6 is disabled. ICAP service option ignored."<pos:position pos:line="69" pos:column="115"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="117"/></expr_stmt></block></then></if>
        }<pos:position pos:line="70" pos:column="10"/></block></then></if></elseif> <elseif pos:line="70" pos:column="11">else <if pos:line="70" pos:column="16">if <condition pos:line="70" pos:column="19">(<expr><call><name pos:line="70" pos:column="20">strcmp<pos:position pos:line="70" pos:column="26"/></name><argument_list pos:line="70" pos:column="26">(<argument><expr><name pos:line="70" pos:column="27">name<pos:position pos:line="70" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="33">"max-conn"<pos:position pos:line="70" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="44"/></argument_list></call> <operator pos:line="70" pos:column="45">==<pos:position pos:line="70" pos:column="47"/></operator> <literal type="number" pos:line="70" pos:column="48">0<pos:position pos:line="70" pos:column="49"/></literal></expr>)<pos:position pos:line="70" pos:column="50"/></condition><then pos:line="70" pos:column="50">
            <block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="13">grokked<pos:position pos:line="71" pos:column="20"/></name> <operator pos:line="71" pos:column="21">=<pos:position pos:line="71" pos:column="22"/></operator> <call><name pos:line="71" pos:column="23">grokLong<pos:position pos:line="71" pos:column="31"/></name><argument_list pos:line="71" pos:column="31">(<argument><expr><name pos:line="71" pos:column="32">maxConn<pos:position pos:line="71" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="41">name<pos:position pos:line="71" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="47">value<pos:position pos:line="71" pos:column="52"/></name></expr></argument>)<pos:position pos:line="71" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="54"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="72" pos:column="9">else <if pos:line="72" pos:column="14">if <condition pos:line="72" pos:column="17">(<expr><call><name pos:line="72" pos:column="18">strcmp<pos:position pos:line="72" pos:column="24"/></name><argument_list pos:line="72" pos:column="24">(<argument><expr><name pos:line="72" pos:column="25">name<pos:position pos:line="72" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="31">"on-overload"<pos:position pos:line="72" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="45"/></argument_list></call> <operator pos:line="72" pos:column="46">==<pos:position pos:line="72" pos:column="48"/></operator> <literal type="number" pos:line="72" pos:column="49">0<pos:position pos:line="72" pos:column="50"/></literal></expr>)<pos:position pos:line="72" pos:column="51"/></condition><then pos:line="72" pos:column="51"> <block pos:line="72" pos:column="52">{
            <expr_stmt><expr><name pos:line="73" pos:column="13">grokked<pos:position pos:line="73" pos:column="20"/></name> <operator pos:line="73" pos:column="21">=<pos:position pos:line="73" pos:column="22"/></operator> <call><name pos:line="73" pos:column="23">grokOnOverload<pos:position pos:line="73" pos:column="37"/></name><argument_list pos:line="73" pos:column="37">(<argument><expr><name pos:line="73" pos:column="38">onOverload<pos:position pos:line="73" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="50">value<pos:position pos:line="73" pos:column="55"/></name></expr></argument>)<pos:position pos:line="73" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name pos:line="74" pos:column="13">onOverloadSet<pos:position pos:line="74" pos:column="26"/></name> <operator pos:line="74" pos:column="27">=<pos:position pos:line="74" pos:column="28"/></operator> <literal type="boolean" pos:line="74" pos:column="29">true<pos:position pos:line="74" pos:column="33"/></literal></expr>;<pos:position pos:line="74" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="75" pos:column="10"/></block></then></if></elseif> <elseif pos:line="75" pos:column="11">else <if pos:line="75" pos:column="16">if <condition pos:line="75" pos:column="19">(<expr><call><name pos:line="75" pos:column="20">strcmp<pos:position pos:line="75" pos:column="26"/></name><argument_list pos:line="75" pos:column="26">(<argument><expr><name pos:line="75" pos:column="27">name<pos:position pos:line="75" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="33">"connection-encryption"<pos:position pos:line="75" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="57"/></argument_list></call> <operator pos:line="75" pos:column="58">==<pos:position pos:line="75" pos:column="60"/></operator> <literal type="number" pos:line="75" pos:column="61">0<pos:position pos:line="75" pos:column="62"/></literal></expr>)<pos:position pos:line="75" pos:column="63"/></condition><then pos:line="75" pos:column="63"> <block pos:line="75" pos:column="64">{
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">bool<pos:position pos:line="76" pos:column="17"/></name></type> <name pos:line="76" pos:column="18">encrypt<pos:position pos:line="76" pos:column="25"/></name> <init pos:line="76" pos:column="26">= <expr><literal type="boolean" pos:line="76" pos:column="28">false<pos:position pos:line="76" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="76" pos:column="34"/></decl_stmt>
            <expr_stmt><expr><name pos:line="77" pos:column="13">grokked<pos:position pos:line="77" pos:column="20"/></name> <operator pos:line="77" pos:column="21">=<pos:position pos:line="77" pos:column="22"/></operator> <call><name pos:line="77" pos:column="23">grokBool<pos:position pos:line="77" pos:column="31"/></name><argument_list pos:line="77" pos:column="31">(<argument><expr><name pos:line="77" pos:column="32">encrypt<pos:position pos:line="77" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="41">name<pos:position pos:line="77" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="47">value<pos:position pos:line="77" pos:column="52"/></name></expr></argument>)<pos:position pos:line="77" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="78" pos:column="13">connectionEncryption<pos:position pos:line="78" pos:column="33"/></name><operator pos:line="78" pos:column="33">.<pos:position pos:line="78" pos:column="34"/></operator><name pos:line="78" pos:column="34">configure<pos:position pos:line="78" pos:column="43"/></name></name><argument_list pos:line="78" pos:column="43">(<argument><expr><name pos:line="78" pos:column="44">encrypt<pos:position pos:line="78" pos:column="51"/></name></expr></argument>)<pos:position pos:line="78" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="79" pos:column="10"/></block></then></if></elseif> <elseif pos:line="79" pos:column="11">else <if pos:line="79" pos:column="16">if <condition pos:line="79" pos:column="19">(<expr><call><name pos:line="79" pos:column="20">strncmp<pos:position pos:line="79" pos:column="27"/></name><argument_list pos:line="79" pos:column="27">(<argument><expr><name pos:line="79" pos:column="28">name<pos:position pos:line="79" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="34">"ssl"<pos:position pos:line="79" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="41">3<pos:position pos:line="79" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="43"/></argument_list></call> <operator pos:line="79" pos:column="44">==<pos:position pos:line="79" pos:column="46"/></operator> <literal type="number" pos:line="79" pos:column="47">0<pos:position pos:line="79" pos:column="48"/></literal> <operator pos:line="79" pos:column="49">||<pos:position pos:line="79" pos:column="51"/></operator> <call><name pos:line="79" pos:column="52">strncmp<pos:position pos:line="79" pos:column="59"/></name><argument_list pos:line="79" pos:column="59">(<argument><expr><name pos:line="79" pos:column="60">name<pos:position pos:line="79" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="66">"tls-"<pos:position pos:line="79" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="74">4<pos:position pos:line="79" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="76"/></argument_list></call> <operator pos:line="79" pos:column="77">==<pos:position pos:line="79" pos:column="79"/></operator> <literal type="number" pos:line="79" pos:column="80">0<pos:position pos:line="79" pos:column="81"/></literal></expr>)<pos:position pos:line="79" pos:column="82"/></condition><then pos:line="79" pos:column="82"> <block pos:line="79" pos:column="83">{
<cpp:if pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">if<pos:position pos:line="80" pos:column="4"/></cpp:directive> <expr><operator pos:line="80" pos:column="5">!<pos:position pos:line="80" pos:column="6"/></operator><name pos:line="80" pos:column="6">USE_OPENSSL<pos:position pos:line="80" pos:column="17"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">debugs<pos:position pos:line="81" pos:column="19"/></name><argument_list pos:line="81" pos:column="19">(<argument><expr><literal type="number" pos:line="81" pos:column="20">3<pos:position pos:line="81" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="81" pos:column="23">DBG_PARSE_NOTE<pos:position pos:line="81" pos:column="37"/></name><argument_list pos:line="81" pos:column="37">(<argument><expr><name pos:line="81" pos:column="38">DBG_IMPORTANT<pos:position pos:line="81" pos:column="51"/></name></expr></argument>)<pos:position pos:line="81" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="54">"WARNING: adaptation option '"<pos:position pos:line="81" pos:column="84"/></literal> <operator pos:line="81" pos:column="85">&lt;&lt;<pos:position pos:line="81" pos:column="93"/></operator> <name pos:line="81" pos:column="88">name<pos:position pos:line="81" pos:column="92"/></name> <operator pos:line="81" pos:column="93">&lt;&lt;<pos:position pos:line="81" pos:column="101"/></operator> <literal type="string" pos:line="81" pos:column="96">"' requires --with-openssl. ICAP service option ignored."<pos:position pos:line="81" pos:column="153"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="154"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="155"/></expr_stmt>
<cpp:else pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">else<pos:position pos:line="82" pos:column="6"/></cpp:directive></cpp:else>
            <comment type="line" pos:line="83" pos:column="13">// name prefix is "ssl" or "tls-"</comment>
            <decl_stmt><decl><type><name><name pos:line="84" pos:column="13">std<pos:position pos:line="84" pos:column="16"/></name><operator pos:line="84" pos:column="16">::<pos:position pos:line="84" pos:column="18"/></operator><name pos:line="84" pos:column="18">string<pos:position pos:line="84" pos:column="24"/></name></name></type> <name pos:line="84" pos:column="25">tmp<pos:position pos:line="84" pos:column="28"/></name> <init pos:line="84" pos:column="29">= <expr><name pos:line="84" pos:column="31">name<pos:position pos:line="84" pos:column="35"/></name> <operator pos:line="84" pos:column="36">+<pos:position pos:line="84" pos:column="37"/></operator> <operator pos:line="84" pos:column="38">(<pos:position pos:line="84" pos:column="39"/></operator><ternary><condition><expr><name><name pos:line="84" pos:column="39">name<pos:position pos:line="84" pos:column="43"/></name><index pos:line="84" pos:column="43">[<expr><literal type="number" pos:line="84" pos:column="44">0<pos:position pos:line="84" pos:column="45"/></literal></expr>]<pos:position pos:line="84" pos:column="46"/></index></name> <operator pos:line="84" pos:column="47">==<pos:position pos:line="84" pos:column="49"/></operator> <literal type="char" pos:line="84" pos:column="50">'s'<pos:position pos:line="84" pos:column="53"/></literal></expr> ?<pos:position pos:line="84" pos:column="55"/></condition><then pos:line="84" pos:column="55"> <expr><literal type="number" pos:line="84" pos:column="56">3<pos:position pos:line="84" pos:column="57"/></literal></expr> <pos:position pos:line="84" pos:column="58"/></then><else pos:line="84" pos:column="58">: <expr><literal type="number" pos:line="84" pos:column="60">4<pos:position pos:line="84" pos:column="61"/></literal></expr></else></ternary><operator pos:line="84" pos:column="61">)<pos:position pos:line="84" pos:column="62"/></operator></expr></init></decl>;<pos:position pos:line="84" pos:column="63"/></decl_stmt>
            <expr_stmt><expr><name pos:line="85" pos:column="13">tmp<pos:position pos:line="85" pos:column="16"/></name> <operator pos:line="85" pos:column="17">+=<pos:position pos:line="85" pos:column="19"/></operator> <literal type="string" pos:line="85" pos:column="20">"="<pos:position pos:line="85" pos:column="23"/></literal></expr>;<pos:position pos:line="85" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><name pos:line="86" pos:column="13">tmp<pos:position pos:line="86" pos:column="16"/></name> <operator pos:line="86" pos:column="17">+=<pos:position pos:line="86" pos:column="19"/></operator> <name pos:line="86" pos:column="20">value<pos:position pos:line="86" pos:column="25"/></name></expr>;<pos:position pos:line="86" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">secure<pos:position pos:line="87" pos:column="19"/></name><operator pos:line="87" pos:column="19">.<pos:position pos:line="87" pos:column="20"/></operator><name pos:line="87" pos:column="20">parse<pos:position pos:line="87" pos:column="25"/></name></name><argument_list pos:line="87" pos:column="25">(<argument><expr><call><name><name pos:line="87" pos:column="26">tmp<pos:position pos:line="87" pos:column="29"/></name><operator pos:line="87" pos:column="29">.<pos:position pos:line="87" pos:column="30"/></operator><name pos:line="87" pos:column="30">c_str<pos:position pos:line="87" pos:column="35"/></name></name><argument_list pos:line="87" pos:column="35">()<pos:position pos:line="87" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="88" pos:column="13">grokked<pos:position pos:line="88" pos:column="20"/></name> <operator pos:line="88" pos:column="21">=<pos:position pos:line="88" pos:column="22"/></operator> <literal type="boolean" pos:line="88" pos:column="23">true<pos:position pos:line="88" pos:column="27"/></literal></expr>;<pos:position pos:line="88" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="90" pos:column="10"/></block></then></if></elseif> <else pos:line="90" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="91" pos:column="13">grokked<pos:position pos:line="91" pos:column="20"/></name> <operator pos:line="91" pos:column="21">=<pos:position pos:line="91" pos:column="22"/></operator> <call><name pos:line="91" pos:column="23">grokExtension<pos:position pos:line="91" pos:column="36"/></name><argument_list pos:line="91" pos:column="36">(<argument><expr><name pos:line="91" pos:column="37">name<pos:position pos:line="91" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="43">value<pos:position pos:line="91" pos:column="48"/></name></expr></argument>)<pos:position pos:line="91" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="50"/></expr_stmt></block></else></if>

        <if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><operator pos:line="93" pos:column="13">!<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="14">grokked<pos:position pos:line="93" pos:column="21"/></name></expr>)<pos:position pos:line="93" pos:column="22"/></condition><then pos:line="93" pos:column="22">
            <block type="pseudo"><return pos:line="94" pos:column="13">return <expr><literal type="boolean" pos:line="94" pos:column="20">false<pos:position pos:line="94" pos:column="25"/></literal></expr>;<pos:position pos:line="94" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="95" pos:column="6"/></block></while>

    <comment type="line" pos:line="97" pos:column="5">// set default on-overload value if needed</comment>
    <if pos:line="98" pos:column="5">if <condition pos:line="98" pos:column="8">(<expr><operator pos:line="98" pos:column="9">!<pos:position pos:line="98" pos:column="10"/></operator><name pos:line="98" pos:column="10">onOverloadSet<pos:position pos:line="98" pos:column="23"/></name></expr>)<pos:position pos:line="98" pos:column="24"/></condition><then pos:line="98" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name pos:line="99" pos:column="9">onOverload<pos:position pos:line="99" pos:column="19"/></name> <operator pos:line="99" pos:column="20">=<pos:position pos:line="99" pos:column="21"/></operator> <ternary><condition><expr><name pos:line="99" pos:column="22">bypass<pos:position pos:line="99" pos:column="28"/></name></expr> ?<pos:position pos:line="99" pos:column="30"/></condition><then pos:line="99" pos:column="30"> <expr><name pos:line="99" pos:column="31">srvBypass<pos:position pos:line="99" pos:column="40"/></name></expr> <pos:position pos:line="99" pos:column="41"/></then><else pos:line="99" pos:column="41">: <expr><name pos:line="99" pos:column="43">srvWait<pos:position pos:line="99" pos:column="50"/></name></expr></else></ternary></expr>;<pos:position pos:line="99" pos:column="51"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="101" pos:column="5">// disable the TLS NPN extension if encrypted.</comment>
    <comment type="line" pos:line="102" pos:column="5">// Squid advertises "http/1.1", which is wrong for ICAPS.</comment>
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><name><name pos:line="103" pos:column="9">secure<pos:position pos:line="103" pos:column="15"/></name><operator pos:line="103" pos:column="15">.<pos:position pos:line="103" pos:column="16"/></operator><name pos:line="103" pos:column="16">encryptTransport<pos:position pos:line="103" pos:column="32"/></name></name></expr>)<pos:position pos:line="103" pos:column="33"/></condition><then pos:line="103" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="104" pos:column="9">secure<pos:position pos:line="104" pos:column="15"/></name><operator pos:line="104" pos:column="15">.<pos:position pos:line="104" pos:column="16"/></operator><name pos:line="104" pos:column="16">parse<pos:position pos:line="104" pos:column="21"/></name></name><argument_list pos:line="104" pos:column="21">(<argument><expr><literal type="string" pos:line="104" pos:column="22">"no-npn"<pos:position pos:line="104" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="32"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="106" pos:column="5">// is the service URI set?</comment>
    <if pos:line="107" pos:column="5">if <condition pos:line="107" pos:column="8">(<expr><operator pos:line="107" pos:column="9">!<pos:position pos:line="107" pos:column="10"/></operator><name pos:line="107" pos:column="10">grokkedUri<pos:position pos:line="107" pos:column="20"/></name></expr>)<pos:position pos:line="107" pos:column="21"/></condition><then pos:line="107" pos:column="21"> <block pos:line="107" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="108" pos:column="9">debugs<pos:position pos:line="108" pos:column="15"/></name><argument_list pos:line="108" pos:column="15">(<argument><expr><literal type="number" pos:line="108" pos:column="16">3<pos:position pos:line="108" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="19">DBG_CRITICAL<pos:position pos:line="108" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="33">"ERROR: "<pos:position pos:line="108" pos:column="42"/></literal> <operator pos:line="108" pos:column="43">&lt;&lt;<pos:position pos:line="108" pos:column="51"/></operator> <name pos:line="108" pos:column="46">cfg_filename<pos:position pos:line="108" pos:column="58"/></name> <operator pos:line="108" pos:column="59">&lt;&lt;<pos:position pos:line="108" pos:column="67"/></operator> <literal type="char" pos:line="108" pos:column="62">':'<pos:position pos:line="108" pos:column="65"/></literal> <operator pos:line="108" pos:column="66">&lt;&lt;<pos:position pos:line="108" pos:column="74"/></operator> <name pos:line="108" pos:column="69">config_lineno<pos:position pos:line="108" pos:column="82"/></name> <operator pos:line="108" pos:column="83">&lt;&lt;<pos:position pos:line="108" pos:column="91"/></operator> <literal type="string" pos:line="108" pos:column="86">": "<pos:position pos:line="108" pos:column="90"/></literal> <operator pos:line="108" pos:column="91">&lt;&lt;<pos:position pos:line="108" pos:column="99"/></operator>
               <literal type="string" pos:line="109" pos:column="16">"No \"uri\" option in adaptation service definition"<pos:position pos:line="109" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="70"/></expr_stmt>
        <return pos:line="110" pos:column="9">return <expr><literal type="boolean" pos:line="110" pos:column="16">false<pos:position pos:line="110" pos:column="21"/></literal></expr>;<pos:position pos:line="110" pos:column="22"/></return>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="113" pos:column="5">debugs<pos:position pos:line="113" pos:column="11"/></name><argument_list pos:line="113" pos:column="11">(<argument><expr><literal type="number" pos:line="113" pos:column="12">3<pos:position pos:line="113" pos:column="13"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="113" pos:column="14">5<pos:position pos:line="113" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="17">cfg_filename<pos:position pos:line="113" pos:column="29"/></name> <operator pos:line="113" pos:column="30">&lt;&lt;<pos:position pos:line="113" pos:column="38"/></operator> <literal type="char" pos:line="113" pos:column="33">':'<pos:position pos:line="113" pos:column="36"/></literal> <operator pos:line="113" pos:column="37">&lt;&lt;<pos:position pos:line="113" pos:column="45"/></operator> <name pos:line="113" pos:column="40">config_lineno<pos:position pos:line="113" pos:column="53"/></name> <operator pos:line="113" pos:column="54">&lt;&lt;<pos:position pos:line="113" pos:column="62"/></operator> <literal type="string" pos:line="113" pos:column="57">": "<pos:position pos:line="113" pos:column="61"/></literal> <operator pos:line="113" pos:column="62">&lt;&lt;<pos:position pos:line="113" pos:column="70"/></operator>
           <literal type="string" pos:line="114" pos:column="12">"adaptation_service "<pos:position pos:line="114" pos:column="33"/></literal> <operator pos:line="114" pos:column="34">&lt;&lt;<pos:position pos:line="114" pos:column="42"/></operator> <name pos:line="114" pos:column="37">key<pos:position pos:line="114" pos:column="40"/></name> <operator pos:line="114" pos:column="41">&lt;&lt;<pos:position pos:line="114" pos:column="49"/></operator> <literal type="char" pos:line="114" pos:column="44">' '<pos:position pos:line="114" pos:column="47"/></literal> <operator pos:line="114" pos:column="48">&lt;&lt;<pos:position pos:line="114" pos:column="56"/></operator>
           <call><name pos:line="115" pos:column="12">methodStr<pos:position pos:line="115" pos:column="21"/></name><argument_list pos:line="115" pos:column="21">()<pos:position pos:line="115" pos:column="23"/></argument_list></call> <operator pos:line="115" pos:column="24">&lt;&lt;<pos:position pos:line="115" pos:column="32"/></operator> <literal type="string" pos:line="115" pos:column="27">"_"<pos:position pos:line="115" pos:column="30"/></literal> <operator pos:line="115" pos:column="31">&lt;&lt;<pos:position pos:line="115" pos:column="39"/></operator> <call><name pos:line="115" pos:column="34">vectPointStr<pos:position pos:line="115" pos:column="46"/></name><argument_list pos:line="115" pos:column="46">()<pos:position pos:line="115" pos:column="48"/></argument_list></call> <operator pos:line="115" pos:column="49">&lt;&lt;<pos:position pos:line="115" pos:column="57"/></operator> <literal type="char" pos:line="115" pos:column="52">' '<pos:position pos:line="115" pos:column="55"/></literal> <operator pos:line="115" pos:column="56">&lt;&lt;<pos:position pos:line="115" pos:column="64"/></operator>
           <name pos:line="116" pos:column="12">bypass<pos:position pos:line="116" pos:column="18"/></name> <operator pos:line="116" pos:column="19">&lt;&lt;<pos:position pos:line="116" pos:column="27"/></operator> <name pos:line="116" pos:column="22">routing<pos:position pos:line="116" pos:column="29"/></name> <operator pos:line="116" pos:column="30">&lt;&lt;<pos:position pos:line="116" pos:column="38"/></operator> <literal type="char" pos:line="116" pos:column="33">' '<pos:position pos:line="116" pos:column="36"/></literal> <operator pos:line="116" pos:column="37">&lt;&lt;<pos:position pos:line="116" pos:column="45"/></operator>
           <name pos:line="117" pos:column="12">uri<pos:position pos:line="117" pos:column="15"/></name></expr></argument>)<pos:position pos:line="117" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="17"/></expr_stmt>

    <return pos:line="119" pos:column="5">return <expr><literal type="boolean" pos:line="119" pos:column="12">true<pos:position pos:line="119" pos:column="16"/></literal></expr>;<pos:position pos:line="119" pos:column="17"/></return>
}<pos:position pos:line="120" pos:column="2"/></block></function></unit>
