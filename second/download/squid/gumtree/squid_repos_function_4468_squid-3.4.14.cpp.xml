<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4468_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Acl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">AllOf<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">parse<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">()<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Acl<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">::<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">InnerNode<pos:position pos:line="4" pos:column="19"/></name></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">whole<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><name pos:line="4" pos:column="29">NULL<pos:position pos:line="4" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ACL<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">oldNode<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><ternary><condition><expr><call><name pos:line="5" pos:column="20">empty<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">()<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr> ?<pos:position pos:line="5" pos:column="29"/></condition><then pos:line="5" pos:column="29"> <expr><name pos:line="5" pos:column="30">NULL<pos:position pos:line="5" pos:column="34"/></name></expr> <pos:position pos:line="5" pos:column="35"/></then><else pos:line="5" pos:column="35">: <expr><call><name><name pos:line="5" pos:column="37">nodes<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">.<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="43">front<pos:position pos:line="5" pos:column="48"/></name></name><argument_list pos:line="5" pos:column="48">()<pos:position pos:line="5" pos:column="50"/></argument_list></call></expr></else></ternary></expr></init></decl>;<pos:position pos:line="5" pos:column="51"/></decl_stmt>

    <comment type="line" pos:line="7" pos:column="5">// optimization: this logic reduces subtree hight (number of tree levels)</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<decl><type><name><name pos:line="8" pos:column="9">Acl<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">::<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">OrNode<pos:position pos:line="8" pos:column="20"/></name></name> <modifier pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></modifier></type><name pos:line="8" pos:column="22">oldWhole<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><cast type="dynamic" pos:line="8" pos:column="33">dynamic_cast<argument_list type="generic" pos:line="8" pos:column="45">&lt;<argument><expr><name><name pos:line="8" pos:column="46">Acl<pos:position pos:line="8" pos:column="49"/></name><operator pos:line="8" pos:column="49">::<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="51">OrNode<pos:position pos:line="8" pos:column="57"/></name></name><operator pos:line="8" pos:column="57">*<pos:position pos:line="8" pos:column="58"/></operator></expr></argument>&gt;<pos:position pos:line="8" pos:column="62"/></argument_list><argument_list pos:line="8" pos:column="59">(<argument><expr><name pos:line="8" pos:column="60">oldNode<pos:position pos:line="8" pos:column="67"/></name></expr></argument>)<pos:position pos:line="8" pos:column="68"/></argument_list></cast></expr></init></decl>)<pos:position pos:line="8" pos:column="69"/></condition><then pos:line="8" pos:column="69"> <block pos:line="8" pos:column="70">{
        <comment type="line" pos:line="9" pos:column="9">// this acl saw multiple lines before; add another one to the old node</comment>
        <expr_stmt><expr><name pos:line="10" pos:column="9">whole<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">oldWhole<pos:position pos:line="10" pos:column="25"/></name></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then> <elseif pos:line="11" pos:column="7">else <if pos:line="11" pos:column="12">if <condition pos:line="11" pos:column="15">(<expr><name pos:line="11" pos:column="16">oldNode<pos:position pos:line="11" pos:column="23"/></name></expr>)<pos:position pos:line="11" pos:column="24"/></condition><then pos:line="11" pos:column="24"> <block pos:line="11" pos:column="25">{
        <comment type="line" pos:line="12" pos:column="9">// this acl saw a single line before; create a new OR inner node</comment>

        <decl_stmt><decl><type><name pos:line="14" pos:column="9">MemBuf<pos:position pos:line="14" pos:column="15"/></name></type> <name pos:line="14" pos:column="16">wholeCtx<pos:position pos:line="14" pos:column="24"/></name></decl>;<pos:position pos:line="14" pos:column="25"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="15" pos:column="9">wholeCtx<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">.<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">init<pos:position pos:line="15" pos:column="22"/></name></name><argument_list pos:line="15" pos:column="22">()<pos:position pos:line="15" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="16" pos:column="9">wholeCtx<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">.<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">Printf<pos:position pos:line="16" pos:column="24"/></name></name><argument_list pos:line="16" pos:column="24">(<argument><expr><literal type="string" pos:line="16" pos:column="25">"(%s lines)"<pos:position pos:line="16" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">name<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">wholeCtx<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">terminate<pos:position pos:line="17" pos:column="27"/></name></name><argument_list pos:line="17" pos:column="27">()<pos:position pos:line="17" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>

        <decl_stmt><decl><type><name><name pos:line="19" pos:column="9">Acl<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">::<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">OrNode<pos:position pos:line="19" pos:column="20"/></name></name> <modifier pos:line="19" pos:column="21">*<pos:position pos:line="19" pos:column="22"/></modifier></type><name pos:line="19" pos:column="22">newWhole<pos:position pos:line="19" pos:column="30"/></name> <init pos:line="19" pos:column="31">= <expr><operator pos:line="19" pos:column="33">new<pos:position pos:line="19" pos:column="36"/></operator> <name><name pos:line="19" pos:column="37">Acl<pos:position pos:line="19" pos:column="40"/></name><operator pos:line="19" pos:column="40">::<pos:position pos:line="19" pos:column="42"/></operator><name pos:line="19" pos:column="42">OrNode<pos:position pos:line="19" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="49"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">newWhole<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">-&gt;<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="19">context<pos:position pos:line="20" pos:column="26"/></name></name><argument_list pos:line="20" pos:column="26">(<argument><expr><call><name><name pos:line="20" pos:column="27">wholeCtx<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">.<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="36">content<pos:position pos:line="20" pos:column="43"/></name></name><argument_list pos:line="20" pos:column="43">()<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="47">oldNode<pos:position pos:line="20" pos:column="54"/></name><operator pos:line="20" pos:column="54">-&gt;<pos:position pos:line="20" pos:column="59"/></operator><name pos:line="20" pos:column="56">cfgline<pos:position pos:line="20" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">newWhole<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">add<pos:position pos:line="21" pos:column="22"/></name></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">oldNode<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt> <comment type="line" pos:line="21" pos:column="33">// old (i.e. first) line</comment>
        <expr_stmt><expr><call><name><name pos:line="22" pos:column="9">nodes<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">.<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">front<pos:position pos:line="22" pos:column="20"/></name></name><argument_list pos:line="22" pos:column="20">()<pos:position pos:line="22" pos:column="22"/></argument_list></call> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">whole<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="33">newWhole<pos:position pos:line="22" pos:column="41"/></name></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if></elseif> <else pos:line="23" pos:column="7">else <block pos:line="23" pos:column="12">{
        <comment type="line" pos:line="24" pos:column="9">// this is the first line for this acl; just use it as is</comment>
        <expr_stmt><expr><name pos:line="25" pos:column="9">whole<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <name pos:line="25" pos:column="17">this<pos:position pos:line="25" pos:column="21"/></name></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">assert<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">whole<pos:position pos:line="28" pos:column="17"/></name></expr></argument>)<pos:position pos:line="28" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="19"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="29" pos:column="5">const<pos:position pos:line="29" pos:column="10"/></specifier> <name pos:line="29" pos:column="11">int<pos:position pos:line="29" pos:column="14"/></name></type> <name pos:line="29" pos:column="15">lineId<pos:position pos:line="29" pos:column="21"/></name> <init pos:line="29" pos:column="22">= <expr><call><name><name pos:line="29" pos:column="24">whole<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">-&gt;<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="31">childrenCount<pos:position pos:line="29" pos:column="44"/></name></name><argument_list pos:line="29" pos:column="44">()<pos:position pos:line="29" pos:column="46"/></argument_list></call> <operator pos:line="29" pos:column="47">+<pos:position pos:line="29" pos:column="48"/></operator> <literal type="number" pos:line="29" pos:column="49">1<pos:position pos:line="29" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="51"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="31" pos:column="5">MemBuf<pos:position pos:line="31" pos:column="11"/></name></type> <name pos:line="31" pos:column="12">lineCtx<pos:position pos:line="31" pos:column="19"/></name></decl>;<pos:position pos:line="31" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">lineCtx<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">.<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">init<pos:position pos:line="32" pos:column="17"/></name></name><argument_list pos:line="32" pos:column="17">()<pos:position pos:line="32" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">lineCtx<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">.<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="13">Printf<pos:position pos:line="33" pos:column="19"/></name></name><argument_list pos:line="33" pos:column="19">(<argument><expr><literal type="string" pos:line="33" pos:column="20">"(%s line #%d)"<pos:position pos:line="33" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">name<pos:position pos:line="33" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="43">lineId<pos:position pos:line="33" pos:column="49"/></name></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="34" pos:column="5">lineCtx<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">.<pos:position pos:line="34" pos:column="13"/></operator><name pos:line="34" pos:column="13">terminate<pos:position pos:line="34" pos:column="22"/></name></name><argument_list pos:line="34" pos:column="22">()<pos:position pos:line="34" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="36" pos:column="5">Acl<pos:position pos:line="36" pos:column="8"/></name><operator pos:line="36" pos:column="8">::<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">AndNode<pos:position pos:line="36" pos:column="17"/></name></name> <modifier pos:line="36" pos:column="18">*<pos:position pos:line="36" pos:column="19"/></modifier></type><name pos:line="36" pos:column="19">line<pos:position pos:line="36" pos:column="23"/></name> <init pos:line="36" pos:column="24">= <expr><operator pos:line="36" pos:column="26">new<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">AndNode<pos:position pos:line="36" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="36" pos:column="38"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="37" pos:column="5">line<pos:position pos:line="37" pos:column="9"/></name><operator pos:line="37" pos:column="9">-&gt;<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="11">context<pos:position pos:line="37" pos:column="18"/></name></name><argument_list pos:line="37" pos:column="18">(<argument><expr><call><name><name pos:line="37" pos:column="19">lineCtx<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">.<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="27">content<pos:position pos:line="37" pos:column="34"/></name></name><argument_list pos:line="37" pos:column="34">()<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="37" pos:column="38">config_input_line<pos:position pos:line="37" pos:column="55"/></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="38" pos:column="5">line<pos:position pos:line="38" pos:column="9"/></name><operator pos:line="38" pos:column="9">-&gt;<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="11">lineParse<pos:position pos:line="38" pos:column="20"/></name></name><argument_list pos:line="38" pos:column="20">()<pos:position pos:line="38" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="40" pos:column="5">whole<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">add<pos:position pos:line="40" pos:column="15"/></name></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">line<pos:position pos:line="40" pos:column="20"/></name></expr></argument>)<pos:position pos:line="40" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="22"/></expr_stmt>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
