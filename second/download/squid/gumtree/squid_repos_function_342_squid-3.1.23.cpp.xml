<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_342_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SMB_Tree_Handle<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">SMB_TreeConnect<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">SMB_Handle_Type<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">Con_Handle<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="3" pos:column="17">SMB_Tree_Handle<pos:position pos:line="3" pos:column="32"/></name></type> <name pos:line="3" pos:column="33">Tree_Handle<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">path<pos:position pos:line="4" pos:column="27"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="5" pos:column="17">char<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">password<pos:position pos:line="5" pos:column="31"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="6" pos:column="17">const<pos:position pos:line="6" pos:column="22"/></specifier> <name pos:line="6" pos:column="23">char<pos:position pos:line="6" pos:column="27"/></name> <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier></type><name pos:line="6" pos:column="29">device<pos:position pos:line="6" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="36"/></parameter_list>
<block pos:line="7" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">RFCNB_Pkt<pos:position pos:line="8" pos:column="21"/></name></name> <modifier pos:line="8" pos:column="22">*<pos:position pos:line="8" pos:column="23"/></modifier></type><name pos:line="8" pos:column="23">pkt<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">param_len<pos:position pos:line="9" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="20">pkt_len<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">p<pos:position pos:line="10" pos:column="12"/></name></decl>;<pos:position pos:line="10" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">SMB_Tree_Handle<pos:position pos:line="11" pos:column="20"/></name></type> <name pos:line="11" pos:column="21">tree<pos:position pos:line="11" pos:column="25"/></name></decl>;<pos:position pos:line="11" pos:column="26"/></decl_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* Figure out how much space is needed for path, password, dev ... */</comment>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">path<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">==<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">NULL<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">)<pos:position pos:line="15" pos:column="23"/></operator> <operator pos:line="15" pos:column="24">|<pos:position pos:line="15" pos:column="25"/></operator> <operator pos:line="15" pos:column="26">(<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="27">password<pos:position pos:line="15" pos:column="35"/></name> <operator pos:line="15" pos:column="36">==<pos:position pos:line="15" pos:column="38"/></operator> <name pos:line="15" pos:column="39">NULL<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">)<pos:position pos:line="15" pos:column="44"/></operator> <operator pos:line="15" pos:column="45">|<pos:position pos:line="15" pos:column="46"/></operator> <operator pos:line="15" pos:column="47">(<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="48">device<pos:position pos:line="15" pos:column="54"/></name> <operator pos:line="15" pos:column="55">==<pos:position pos:line="15" pos:column="57"/></operator> <name pos:line="15" pos:column="58">NULL<pos:position pos:line="15" pos:column="62"/></name><operator pos:line="15" pos:column="62">)<pos:position pos:line="15" pos:column="63"/></operator></expr>)<pos:position pos:line="15" pos:column="64"/></condition><then pos:line="15" pos:column="64"> <block pos:line="15" pos:column="65">{

<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">DEBUG<pos:position pos:line="17" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">fprintf<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">stderr<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="25">"Bad parameter passed to SMB_TreeConnect\n"<pos:position pos:line="18" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="70"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><name pos:line="21" pos:column="9">SMBlib_errno<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">SMBlibE_BadParam<pos:position pos:line="21" pos:column="40"/></name></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">NULL<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">)<pos:position pos:line="22" pos:column="22"/></operator></expr>;<pos:position pos:line="22" pos:column="23"/></return>

    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="25" pos:column="5">/* The + 2 is because of the \0 and the marker ...                    */</comment>

    <expr_stmt><expr><name pos:line="27" pos:column="5">param_len<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <call><name pos:line="27" pos:column="17">strlen<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">path<pos:position pos:line="27" pos:column="28"/></name></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call> <operator pos:line="27" pos:column="30">+<pos:position pos:line="27" pos:column="31"/></operator> <literal type="number" pos:line="27" pos:column="32">2<pos:position pos:line="27" pos:column="33"/></literal> <operator pos:line="27" pos:column="34">+<pos:position pos:line="27" pos:column="35"/></operator> <call><name pos:line="27" pos:column="36">strlen<pos:position pos:line="27" pos:column="42"/></name><argument_list pos:line="27" pos:column="42">(<argument><expr><name pos:line="27" pos:column="43">password<pos:position pos:line="27" pos:column="51"/></name></expr></argument>)<pos:position pos:line="27" pos:column="52"/></argument_list></call> <operator pos:line="27" pos:column="53">+<pos:position pos:line="27" pos:column="54"/></operator> <literal type="number" pos:line="27" pos:column="55">2<pos:position pos:line="27" pos:column="56"/></literal> <operator pos:line="27" pos:column="57">+<pos:position pos:line="27" pos:column="58"/></operator> <call><name pos:line="27" pos:column="59">strlen<pos:position pos:line="27" pos:column="65"/></name><argument_list pos:line="27" pos:column="65">(<argument><expr><name pos:line="27" pos:column="66">device<pos:position pos:line="27" pos:column="72"/></name></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call> <operator pos:line="27" pos:column="74">+<pos:position pos:line="27" pos:column="75"/></operator> <literal type="number" pos:line="27" pos:column="76">2<pos:position pos:line="27" pos:column="77"/></literal></expr>;<pos:position pos:line="27" pos:column="78"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* The -1 accounts for the one byte smb_buf we have because some systems */</comment>
    <comment type="block" pos:line="30" pos:column="5">/* don't like char msg_buf[]                                             */</comment>

    <expr_stmt><expr><name pos:line="32" pos:column="5">pkt_len<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">SMB_tcon_len<pos:position pos:line="32" pos:column="27"/></name> <operator pos:line="32" pos:column="28">+<pos:position pos:line="32" pos:column="29"/></operator> <name pos:line="32" pos:column="30">param_len<pos:position pos:line="32" pos:column="39"/></name></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name pos:line="34" pos:column="5">pkt<pos:position pos:line="34" pos:column="8"/></name> <operator pos:line="34" pos:column="9">=<pos:position pos:line="34" pos:column="10"/></operator> <operator pos:line="34" pos:column="11">(<pos:position pos:line="34" pos:column="12"/></operator>struct <name pos:line="34" pos:column="19">RFCNB_Pkt<pos:position pos:line="34" pos:column="28"/></name> <operator pos:line="34" pos:column="29">*<pos:position pos:line="34" pos:column="30"/></operator><operator pos:line="34" pos:column="30">)<pos:position pos:line="34" pos:column="31"/></operator> <call><name pos:line="34" pos:column="32">RFCNB_Alloc_Pkt<pos:position pos:line="34" pos:column="47"/></name><argument_list pos:line="34" pos:column="47">(<argument><expr><name pos:line="34" pos:column="48">pkt_len<pos:position pos:line="34" pos:column="55"/></name></expr></argument>)<pos:position pos:line="34" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="57"/></expr_stmt>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">pkt<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">==<pos:position pos:line="36" pos:column="15"/></operator> <name pos:line="36" pos:column="16">NULL<pos:position pos:line="36" pos:column="20"/></name></expr>)<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21"> <block pos:line="36" pos:column="22">{

        <expr_stmt><expr><name pos:line="38" pos:column="9">SMBlib_errno<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">=<pos:position pos:line="38" pos:column="23"/></operator> <name pos:line="38" pos:column="24">SMBlibE_NoSpace<pos:position pos:line="38" pos:column="39"/></name></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
        <return pos:line="39" pos:column="9">return <expr><operator pos:line="39" pos:column="16">(<pos:position pos:line="39" pos:column="17"/></operator><name pos:line="39" pos:column="17">NULL<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">)<pos:position pos:line="39" pos:column="22"/></operator></expr>;<pos:position pos:line="39" pos:column="23"/></return>		<comment type="block" pos:line="39" pos:column="33">/* Should handle the error */</comment>

    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="42" pos:column="5">/* Now allocate a tree for this to go into ... */</comment>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">Tree_Handle<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">==<pos:position pos:line="44" pos:column="23"/></operator> <name pos:line="44" pos:column="24">NULL<pos:position pos:line="44" pos:column="28"/></name></expr>)<pos:position pos:line="44" pos:column="29"/></condition><then pos:line="44" pos:column="29"> <block pos:line="44" pos:column="30">{

        <expr_stmt><expr><name pos:line="46" pos:column="9">tree<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <operator pos:line="46" pos:column="16">(<pos:position pos:line="46" pos:column="17"/></operator><name pos:line="46" pos:column="17">SMB_Tree_Handle<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">)<pos:position pos:line="46" pos:column="33"/></operator> <call><name pos:line="46" pos:column="34">malloc<pos:position pos:line="46" pos:column="40"/></name><argument_list pos:line="46" pos:column="40">(<argument><expr><sizeof pos:line="46" pos:column="41">sizeof<argument_list pos:line="46" pos:column="47">(<argument><expr pos:line="46" pos:column="48">struct <name pos:line="46" pos:column="55">SMB_Tree_Structure<pos:position pos:line="46" pos:column="73"/></name></expr></argument>)<pos:position pos:line="46" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="76"/></expr_stmt>

        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">tree<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">==<pos:position pos:line="48" pos:column="20"/></operator> <name pos:line="48" pos:column="21">NULL<pos:position pos:line="48" pos:column="25"/></name></expr>)<pos:position pos:line="48" pos:column="26"/></condition><then pos:line="48" pos:column="26"> <block pos:line="48" pos:column="27">{

            <expr_stmt><expr><call><name pos:line="50" pos:column="13">RFCNB_Free_Pkt<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name pos:line="50" pos:column="28">pkt<pos:position pos:line="50" pos:column="31"/></name></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name pos:line="51" pos:column="13">SMBlib_errno<pos:position pos:line="51" pos:column="25"/></name> <operator pos:line="51" pos:column="26">=<pos:position pos:line="51" pos:column="27"/></operator> <name pos:line="51" pos:column="28">SMBlibE_NoSpace<pos:position pos:line="51" pos:column="43"/></name></expr>;<pos:position pos:line="51" pos:column="44"/></expr_stmt>
            <return pos:line="52" pos:column="13">return <expr><operator pos:line="52" pos:column="20">(<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="21">NULL<pos:position pos:line="52" pos:column="25"/></name><operator pos:line="52" pos:column="25">)<pos:position pos:line="52" pos:column="26"/></operator></expr>;<pos:position pos:line="52" pos:column="27"/></return>

        }<pos:position pos:line="54" pos:column="10"/></block></then></if>
    }<pos:position pos:line="55" pos:column="6"/></block></then> <else pos:line="55" pos:column="7">else <block pos:line="55" pos:column="12">{

        <expr_stmt><expr><name pos:line="57" pos:column="9">tree<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <name pos:line="57" pos:column="16">Tree_Handle<pos:position pos:line="57" pos:column="27"/></name></expr>;<pos:position pos:line="57" pos:column="28"/></expr_stmt>

    }<pos:position pos:line="59" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name><name pos:line="61" pos:column="5">tree<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">-&gt;<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="11">next<pos:position pos:line="61" pos:column="15"/></name></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <name><name pos:line="61" pos:column="18">tree<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">-&gt;<pos:position pos:line="61" pos:column="27"/></operator><name pos:line="61" pos:column="24">prev<pos:position pos:line="61" pos:column="28"/></name></name> <operator pos:line="61" pos:column="29">=<pos:position pos:line="61" pos:column="30"/></operator> <name pos:line="61" pos:column="31">NULL<pos:position pos:line="61" pos:column="35"/></name></expr>;<pos:position pos:line="61" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">tree<pos:position pos:line="62" pos:column="9"/></name><operator pos:line="62" pos:column="9">-&gt;<pos:position pos:line="62" pos:column="14"/></operator><name pos:line="62" pos:column="11">con<pos:position pos:line="62" pos:column="14"/></name></name> <operator pos:line="62" pos:column="15">=<pos:position pos:line="62" pos:column="16"/></operator> <name pos:line="62" pos:column="17">Con_Handle<pos:position pos:line="62" pos:column="27"/></name></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">strncpy<pos:position pos:line="63" pos:column="12"/></name><argument_list pos:line="63" pos:column="12">(<argument><expr><name><name pos:line="63" pos:column="13">tree<pos:position pos:line="63" pos:column="17"/></name><operator pos:line="63" pos:column="17">-&gt;<pos:position pos:line="63" pos:column="22"/></operator><name pos:line="63" pos:column="19">path<pos:position pos:line="63" pos:column="23"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="25">path<pos:position pos:line="63" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="31">sizeof<argument_list pos:line="63" pos:column="37">(<argument><expr><name><name pos:line="63" pos:column="38">tree<pos:position pos:line="63" pos:column="42"/></name><operator pos:line="63" pos:column="42">-&gt;<pos:position pos:line="63" pos:column="47"/></operator><name pos:line="63" pos:column="44">path<pos:position pos:line="63" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">strncpy<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name><name pos:line="64" pos:column="13">tree<pos:position pos:line="64" pos:column="17"/></name><operator pos:line="64" pos:column="17">-&gt;<pos:position pos:line="64" pos:column="22"/></operator><name pos:line="64" pos:column="19">device_type<pos:position pos:line="64" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="32">device<pos:position pos:line="64" pos:column="38"/></name></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="40">sizeof<argument_list pos:line="64" pos:column="46">(<argument><expr><name><name pos:line="64" pos:column="47">tree<pos:position pos:line="64" pos:column="51"/></name><operator pos:line="64" pos:column="51">-&gt;<pos:position pos:line="64" pos:column="56"/></operator><name pos:line="64" pos:column="53">device_type<pos:position pos:line="64" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="67"/></expr_stmt>

    <comment type="block" pos:line="66" pos:column="5">/* Now plug in the values ... */</comment>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">memset<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><call><name pos:line="68" pos:column="12">SMB_Hdr<pos:position pos:line="68" pos:column="19"/></name><argument_list pos:line="68" pos:column="19">(<argument><expr><name pos:line="68" pos:column="20">pkt<pos:position pos:line="68" pos:column="23"/></name></expr></argument>)<pos:position pos:line="68" pos:column="24"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="26">0<pos:position pos:line="68" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="29">SMB_tcon_len<pos:position pos:line="68" pos:column="41"/></name></expr></argument>)<pos:position pos:line="68" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">SIVAL<pos:position pos:line="69" pos:column="10"/></name><argument_list pos:line="69" pos:column="10">(<argument><expr><call><name pos:line="69" pos:column="11">SMB_Hdr<pos:position pos:line="69" pos:column="18"/></name><argument_list pos:line="69" pos:column="18">(<argument><expr><name pos:line="69" pos:column="19">pkt<pos:position pos:line="69" pos:column="22"/></name></expr></argument>)<pos:position pos:line="69" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="69" pos:column="25">SMB_hdr_idf_offset<pos:position pos:line="69" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="45">SMB_DEF_IDF<pos:position pos:line="69" pos:column="56"/></name></expr></argument>)<pos:position pos:line="69" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="58"/></expr_stmt>	<comment type="block" pos:line="69" pos:column="65">/* Plunk in IDF */</comment>
    <expr_stmt><expr><operator pos:line="70" pos:column="5">*<pos:position pos:line="70" pos:column="6"/></operator><operator pos:line="70" pos:column="6">(<pos:position pos:line="70" pos:column="7"/></operator><call><name pos:line="70" pos:column="7">SMB_Hdr<pos:position pos:line="70" pos:column="14"/></name><argument_list pos:line="70" pos:column="14">(<argument><expr><name pos:line="70" pos:column="15">pkt<pos:position pos:line="70" pos:column="18"/></name></expr></argument>)<pos:position pos:line="70" pos:column="19"/></argument_list></call> <operator pos:line="70" pos:column="20">+<pos:position pos:line="70" pos:column="21"/></operator> <name pos:line="70" pos:column="22">SMB_hdr_com_offset<pos:position pos:line="70" pos:column="40"/></name><operator pos:line="70" pos:column="40">)<pos:position pos:line="70" pos:column="41"/></operator> <operator pos:line="70" pos:column="42">=<pos:position pos:line="70" pos:column="43"/></operator> <name pos:line="70" pos:column="44">SMBtcon<pos:position pos:line="70" pos:column="51"/></name></expr>;<pos:position pos:line="70" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">SSVAL<pos:position pos:line="71" pos:column="10"/></name><argument_list pos:line="71" pos:column="10">(<argument><expr><call><name pos:line="71" pos:column="11">SMB_Hdr<pos:position pos:line="71" pos:column="18"/></name><argument_list pos:line="71" pos:column="18">(<argument><expr><name pos:line="71" pos:column="19">pkt<pos:position pos:line="71" pos:column="22"/></name></expr></argument>)<pos:position pos:line="71" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="71" pos:column="25">SMB_hdr_pid_offset<pos:position pos:line="71" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="45">Con_Handle<pos:position pos:line="71" pos:column="55"/></name><operator pos:line="71" pos:column="55">-&gt;<pos:position pos:line="71" pos:column="60"/></operator><name pos:line="71" pos:column="57">pid<pos:position pos:line="71" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">SSVAL<pos:position pos:line="72" pos:column="10"/></name><argument_list pos:line="72" pos:column="10">(<argument><expr><call><name pos:line="72" pos:column="11">SMB_Hdr<pos:position pos:line="72" pos:column="18"/></name><argument_list pos:line="72" pos:column="18">(<argument><expr><name pos:line="72" pos:column="19">pkt<pos:position pos:line="72" pos:column="22"/></name></expr></argument>)<pos:position pos:line="72" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="72" pos:column="25">SMB_hdr_tid_offset<pos:position pos:line="72" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="45">0<pos:position pos:line="72" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">SSVAL<pos:position pos:line="73" pos:column="10"/></name><argument_list pos:line="73" pos:column="10">(<argument><expr><call><name pos:line="73" pos:column="11">SMB_Hdr<pos:position pos:line="73" pos:column="18"/></name><argument_list pos:line="73" pos:column="18">(<argument><expr><name pos:line="73" pos:column="19">pkt<pos:position pos:line="73" pos:column="22"/></name></expr></argument>)<pos:position pos:line="73" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="73" pos:column="25">SMB_hdr_mid_offset<pos:position pos:line="73" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="45">Con_Handle<pos:position pos:line="73" pos:column="55"/></name><operator pos:line="73" pos:column="55">-&gt;<pos:position pos:line="73" pos:column="60"/></operator><name pos:line="73" pos:column="57">mid<pos:position pos:line="73" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">SSVAL<pos:position pos:line="74" pos:column="10"/></name><argument_list pos:line="74" pos:column="10">(<argument><expr><call><name pos:line="74" pos:column="11">SMB_Hdr<pos:position pos:line="74" pos:column="18"/></name><argument_list pos:line="74" pos:column="18">(<argument><expr><name pos:line="74" pos:column="19">pkt<pos:position pos:line="74" pos:column="22"/></name></expr></argument>)<pos:position pos:line="74" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="74" pos:column="25">SMB_hdr_uid_offset<pos:position pos:line="74" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="45">Con_Handle<pos:position pos:line="74" pos:column="55"/></name><operator pos:line="74" pos:column="55">-&gt;<pos:position pos:line="74" pos:column="60"/></operator><name pos:line="74" pos:column="57">uid<pos:position pos:line="74" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="75" pos:column="5">*<pos:position pos:line="75" pos:column="6"/></operator><operator pos:line="75" pos:column="6">(<pos:position pos:line="75" pos:column="7"/></operator><call><name pos:line="75" pos:column="7">SMB_Hdr<pos:position pos:line="75" pos:column="14"/></name><argument_list pos:line="75" pos:column="14">(<argument><expr><name pos:line="75" pos:column="15">pkt<pos:position pos:line="75" pos:column="18"/></name></expr></argument>)<pos:position pos:line="75" pos:column="19"/></argument_list></call> <operator pos:line="75" pos:column="20">+<pos:position pos:line="75" pos:column="21"/></operator> <name pos:line="75" pos:column="22">SMB_hdr_wct_offset<pos:position pos:line="75" pos:column="40"/></name><operator pos:line="75" pos:column="40">)<pos:position pos:line="75" pos:column="41"/></operator> <operator pos:line="75" pos:column="42">=<pos:position pos:line="75" pos:column="43"/></operator> <literal type="number" pos:line="75" pos:column="44">0<pos:position pos:line="75" pos:column="45"/></literal></expr>;<pos:position pos:line="75" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="77" pos:column="5">SSVAL<pos:position pos:line="77" pos:column="10"/></name><argument_list pos:line="77" pos:column="10">(<argument><expr><call><name pos:line="77" pos:column="11">SMB_Hdr<pos:position pos:line="77" pos:column="18"/></name><argument_list pos:line="77" pos:column="18">(<argument><expr><name pos:line="77" pos:column="19">pkt<pos:position pos:line="77" pos:column="22"/></name></expr></argument>)<pos:position pos:line="77" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="77" pos:column="25">SMB_tcon_bcc_offset<pos:position pos:line="77" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="46">param_len<pos:position pos:line="77" pos:column="55"/></name></expr></argument>)<pos:position pos:line="77" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="57"/></expr_stmt>

    <comment type="block" pos:line="79" pos:column="5">/* Now copy the param strings in with the right stuff */</comment>

    <expr_stmt><expr><name pos:line="81" pos:column="5">p<pos:position pos:line="81" pos:column="6"/></name> <operator pos:line="81" pos:column="7">=<pos:position pos:line="81" pos:column="8"/></operator> <operator pos:line="81" pos:column="9">(<pos:position pos:line="81" pos:column="10"/></operator><name pos:line="81" pos:column="10">char<pos:position pos:line="81" pos:column="14"/></name> <operator pos:line="81" pos:column="15">*<pos:position pos:line="81" pos:column="16"/></operator><operator pos:line="81" pos:column="16">)<pos:position pos:line="81" pos:column="17"/></operator> <operator pos:line="81" pos:column="18">(<pos:position pos:line="81" pos:column="19"/></operator><call><name pos:line="81" pos:column="19">SMB_Hdr<pos:position pos:line="81" pos:column="26"/></name><argument_list pos:line="81" pos:column="26">(<argument><expr><name pos:line="81" pos:column="27">pkt<pos:position pos:line="81" pos:column="30"/></name></expr></argument>)<pos:position pos:line="81" pos:column="31"/></argument_list></call> <operator pos:line="81" pos:column="32">+<pos:position pos:line="81" pos:column="33"/></operator> <name pos:line="81" pos:column="34">SMB_tcon_buf_offset<pos:position pos:line="81" pos:column="53"/></name><operator pos:line="81" pos:column="53">)<pos:position pos:line="81" pos:column="54"/></operator></expr>;<pos:position pos:line="81" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="82" pos:column="5">*<pos:position pos:line="82" pos:column="6"/></operator><name pos:line="82" pos:column="6">p<pos:position pos:line="82" pos:column="7"/></name> <operator pos:line="82" pos:column="8">=<pos:position pos:line="82" pos:column="9"/></operator> <name pos:line="82" pos:column="10">SMBasciiID<pos:position pos:line="82" pos:column="20"/></name></expr>;<pos:position pos:line="82" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">strcpy<pos:position pos:line="83" pos:column="11"/></name><argument_list pos:line="83" pos:column="11">(<argument><expr><name pos:line="83" pos:column="12">p<pos:position pos:line="83" pos:column="13"/></name> <operator pos:line="83" pos:column="14">+<pos:position pos:line="83" pos:column="15"/></operator> <literal type="number" pos:line="83" pos:column="16">1<pos:position pos:line="83" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="19">path<pos:position pos:line="83" pos:column="23"/></name></expr></argument>)<pos:position pos:line="83" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="84" pos:column="5">p<pos:position pos:line="84" pos:column="6"/></name> <operator pos:line="84" pos:column="7">=<pos:position pos:line="84" pos:column="8"/></operator> <name pos:line="84" pos:column="9">p<pos:position pos:line="84" pos:column="10"/></name> <operator pos:line="84" pos:column="11">+<pos:position pos:line="84" pos:column="12"/></operator> <call><name pos:line="84" pos:column="13">strlen<pos:position pos:line="84" pos:column="19"/></name><argument_list pos:line="84" pos:column="19">(<argument><expr><name pos:line="84" pos:column="20">path<pos:position pos:line="84" pos:column="24"/></name></expr></argument>)<pos:position pos:line="84" pos:column="25"/></argument_list></call> <operator pos:line="84" pos:column="26">+<pos:position pos:line="84" pos:column="27"/></operator> <literal type="number" pos:line="84" pos:column="28">2<pos:position pos:line="84" pos:column="29"/></literal></expr>;<pos:position pos:line="84" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="85" pos:column="5">*<pos:position pos:line="85" pos:column="6"/></operator><name pos:line="85" pos:column="6">p<pos:position pos:line="85" pos:column="7"/></name> <operator pos:line="85" pos:column="8">=<pos:position pos:line="85" pos:column="9"/></operator> <name pos:line="85" pos:column="10">SMBasciiID<pos:position pos:line="85" pos:column="20"/></name></expr>;<pos:position pos:line="85" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">strcpy<pos:position pos:line="86" pos:column="11"/></name><argument_list pos:line="86" pos:column="11">(<argument><expr><name pos:line="86" pos:column="12">p<pos:position pos:line="86" pos:column="13"/></name> <operator pos:line="86" pos:column="14">+<pos:position pos:line="86" pos:column="15"/></operator> <literal type="number" pos:line="86" pos:column="16">1<pos:position pos:line="86" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="19">password<pos:position pos:line="86" pos:column="27"/></name></expr></argument>)<pos:position pos:line="86" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="87" pos:column="5">p<pos:position pos:line="87" pos:column="6"/></name> <operator pos:line="87" pos:column="7">=<pos:position pos:line="87" pos:column="8"/></operator> <name pos:line="87" pos:column="9">p<pos:position pos:line="87" pos:column="10"/></name> <operator pos:line="87" pos:column="11">+<pos:position pos:line="87" pos:column="12"/></operator> <call><name pos:line="87" pos:column="13">strlen<pos:position pos:line="87" pos:column="19"/></name><argument_list pos:line="87" pos:column="19">(<argument><expr><name pos:line="87" pos:column="20">password<pos:position pos:line="87" pos:column="28"/></name></expr></argument>)<pos:position pos:line="87" pos:column="29"/></argument_list></call> <operator pos:line="87" pos:column="30">+<pos:position pos:line="87" pos:column="31"/></operator> <literal type="number" pos:line="87" pos:column="32">2<pos:position pos:line="87" pos:column="33"/></literal></expr>;<pos:position pos:line="87" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="88" pos:column="5">*<pos:position pos:line="88" pos:column="6"/></operator><name pos:line="88" pos:column="6">p<pos:position pos:line="88" pos:column="7"/></name> <operator pos:line="88" pos:column="8">=<pos:position pos:line="88" pos:column="9"/></operator> <name pos:line="88" pos:column="10">SMBasciiID<pos:position pos:line="88" pos:column="20"/></name></expr>;<pos:position pos:line="88" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">strcpy<pos:position pos:line="89" pos:column="11"/></name><argument_list pos:line="89" pos:column="11">(<argument><expr><name pos:line="89" pos:column="12">p<pos:position pos:line="89" pos:column="13"/></name> <operator pos:line="89" pos:column="14">+<pos:position pos:line="89" pos:column="15"/></operator> <literal type="number" pos:line="89" pos:column="16">1<pos:position pos:line="89" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="19">device<pos:position pos:line="89" pos:column="25"/></name></expr></argument>)<pos:position pos:line="89" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="91" pos:column="5">/* Now send the packet and sit back ... */</comment>

    <if pos:line="93" pos:column="5">if <condition pos:line="93" pos:column="8">(<expr><call><name pos:line="93" pos:column="9">RFCNB_Send<pos:position pos:line="93" pos:column="19"/></name><argument_list pos:line="93" pos:column="19">(<argument><expr><name><name pos:line="93" pos:column="20">Con_Handle<pos:position pos:line="93" pos:column="30"/></name><operator pos:line="93" pos:column="30">-&gt;<pos:position pos:line="93" pos:column="35"/></operator><name pos:line="93" pos:column="32">Trans_Connect<pos:position pos:line="93" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="47">pkt<pos:position pos:line="93" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="52">pkt_len<pos:position pos:line="93" pos:column="59"/></name></expr></argument>)<pos:position pos:line="93" pos:column="60"/></argument_list></call> <operator pos:line="93" pos:column="61">&lt;<pos:position pos:line="93" pos:column="65"/></operator> <literal type="number" pos:line="93" pos:column="63">0<pos:position pos:line="93" pos:column="64"/></literal></expr>)<pos:position pos:line="93" pos:column="65"/></condition><then pos:line="93" pos:column="65"> <block pos:line="93" pos:column="66">{

<cpp:ifdef pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">ifdef<pos:position pos:line="95" pos:column="7"/></cpp:directive> <name pos:line="95" pos:column="8">DEBUG<pos:position pos:line="95" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">fprintf<pos:position pos:line="96" pos:column="16"/></name><argument_list pos:line="96" pos:column="16">(<argument><expr><name pos:line="96" pos:column="17">stderr<pos:position pos:line="96" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="25">"Error sending TCon request\n"<pos:position pos:line="96" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">endif<pos:position pos:line="97" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><name pos:line="99" pos:column="13">Tree_Handle<pos:position pos:line="99" pos:column="24"/></name> <operator pos:line="99" pos:column="25">==<pos:position pos:line="99" pos:column="27"/></operator> <name pos:line="99" pos:column="28">NULL<pos:position pos:line="99" pos:column="32"/></name></expr>)<pos:position pos:line="99" pos:column="33"/></condition><then pos:line="99" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="100" pos:column="13">free<pos:position pos:line="100" pos:column="17"/></name><argument_list pos:line="100" pos:column="17">(<argument><expr><name pos:line="100" pos:column="18">tree<pos:position pos:line="100" pos:column="22"/></name></expr></argument>)<pos:position pos:line="100" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="24"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="101" pos:column="23"/></name><argument_list pos:line="101" pos:column="23">(<argument><expr><name pos:line="101" pos:column="24">pkt<pos:position pos:line="101" pos:column="27"/></name></expr></argument>)<pos:position pos:line="101" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="102" pos:column="9">SMBlib_errno<pos:position pos:line="102" pos:column="21"/></name> <operator pos:line="102" pos:column="22">=<pos:position pos:line="102" pos:column="23"/></operator> <operator pos:line="102" pos:column="24">-<pos:position pos:line="102" pos:column="25"/></operator><name pos:line="102" pos:column="25">SMBlibE_SendFailed<pos:position pos:line="102" pos:column="43"/></name></expr>;<pos:position pos:line="102" pos:column="44"/></expr_stmt>
        <return pos:line="103" pos:column="9">return <expr><operator pos:line="103" pos:column="16">(<pos:position pos:line="103" pos:column="17"/></operator><name pos:line="103" pos:column="17">NULL<pos:position pos:line="103" pos:column="21"/></name><operator pos:line="103" pos:column="21">)<pos:position pos:line="103" pos:column="22"/></operator></expr>;<pos:position pos:line="103" pos:column="23"/></return>

    }<pos:position pos:line="105" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="106" pos:column="5">/* Now get the response ... */</comment>

    <if pos:line="108" pos:column="5">if <condition pos:line="108" pos:column="8">(<expr><call><name pos:line="108" pos:column="9">RFCNB_Recv<pos:position pos:line="108" pos:column="19"/></name><argument_list pos:line="108" pos:column="19">(<argument><expr><name><name pos:line="108" pos:column="20">Con_Handle<pos:position pos:line="108" pos:column="30"/></name><operator pos:line="108" pos:column="30">-&gt;<pos:position pos:line="108" pos:column="35"/></operator><name pos:line="108" pos:column="32">Trans_Connect<pos:position pos:line="108" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="47">pkt<pos:position pos:line="108" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="52">pkt_len<pos:position pos:line="108" pos:column="59"/></name></expr></argument>)<pos:position pos:line="108" pos:column="60"/></argument_list></call> <operator pos:line="108" pos:column="61">&lt;<pos:position pos:line="108" pos:column="65"/></operator> <literal type="number" pos:line="108" pos:column="63">0<pos:position pos:line="108" pos:column="64"/></literal></expr>)<pos:position pos:line="108" pos:column="65"/></condition><then pos:line="108" pos:column="65"> <block pos:line="108" pos:column="66">{

<cpp:ifdef pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">ifdef<pos:position pos:line="110" pos:column="7"/></cpp:directive> <name pos:line="110" pos:column="8">DEBUG<pos:position pos:line="110" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="111" pos:column="9">fprintf<pos:position pos:line="111" pos:column="16"/></name><argument_list pos:line="111" pos:column="16">(<argument><expr><name pos:line="111" pos:column="17">stderr<pos:position pos:line="111" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="25">"Error receiving response to TCon\n"<pos:position pos:line="111" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">endif<pos:position pos:line="112" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><name pos:line="114" pos:column="13">Tree_Handle<pos:position pos:line="114" pos:column="24"/></name> <operator pos:line="114" pos:column="25">==<pos:position pos:line="114" pos:column="27"/></operator> <name pos:line="114" pos:column="28">NULL<pos:position pos:line="114" pos:column="32"/></name></expr>)<pos:position pos:line="114" pos:column="33"/></condition><then pos:line="114" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="115" pos:column="13">free<pos:position pos:line="115" pos:column="17"/></name><argument_list pos:line="115" pos:column="17">(<argument><expr><name pos:line="115" pos:column="18">tree<pos:position pos:line="115" pos:column="22"/></name></expr></argument>)<pos:position pos:line="115" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="24"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="116" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="116" pos:column="23"/></name><argument_list pos:line="116" pos:column="23">(<argument><expr><name pos:line="116" pos:column="24">pkt<pos:position pos:line="116" pos:column="27"/></name></expr></argument>)<pos:position pos:line="116" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="117" pos:column="9">SMBlib_errno<pos:position pos:line="117" pos:column="21"/></name> <operator pos:line="117" pos:column="22">=<pos:position pos:line="117" pos:column="23"/></operator> <operator pos:line="117" pos:column="24">-<pos:position pos:line="117" pos:column="25"/></operator><name pos:line="117" pos:column="25">SMBlibE_RecvFailed<pos:position pos:line="117" pos:column="43"/></name></expr>;<pos:position pos:line="117" pos:column="44"/></expr_stmt>
        <return pos:line="118" pos:column="9">return <expr><operator pos:line="118" pos:column="16">(<pos:position pos:line="118" pos:column="17"/></operator><name pos:line="118" pos:column="17">NULL<pos:position pos:line="118" pos:column="21"/></name><operator pos:line="118" pos:column="21">)<pos:position pos:line="118" pos:column="22"/></operator></expr>;<pos:position pos:line="118" pos:column="23"/></return>

    }<pos:position pos:line="120" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="121" pos:column="5">/* Check out the response type ... */</comment>

    <if pos:line="123" pos:column="5">if <condition pos:line="123" pos:column="8">(<expr><call><name pos:line="123" pos:column="9">CVAL<pos:position pos:line="123" pos:column="13"/></name><argument_list pos:line="123" pos:column="13">(<argument><expr><call><name pos:line="123" pos:column="14">SMB_Hdr<pos:position pos:line="123" pos:column="21"/></name><argument_list pos:line="123" pos:column="21">(<argument><expr><name pos:line="123" pos:column="22">pkt<pos:position pos:line="123" pos:column="25"/></name></expr></argument>)<pos:position pos:line="123" pos:column="26"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="123" pos:column="28">SMB_hdr_rcls_offset<pos:position pos:line="123" pos:column="47"/></name></expr></argument>)<pos:position pos:line="123" pos:column="48"/></argument_list></call> <operator pos:line="123" pos:column="49">!=<pos:position pos:line="123" pos:column="51"/></operator> <name pos:line="123" pos:column="52">SMBC_SUCCESS<pos:position pos:line="123" pos:column="64"/></name></expr>)<pos:position pos:line="123" pos:column="65"/></condition><then pos:line="123" pos:column="65"> <block pos:line="123" pos:column="66">{	<comment type="block" pos:line="123" pos:column="73">/* Process error */</comment>

<cpp:ifdef pos:line="125" pos:column="1">#<cpp:directive pos:line="125" pos:column="2">ifdef<pos:position pos:line="125" pos:column="7"/></cpp:directive> <name pos:line="125" pos:column="8">DEBUG<pos:position pos:line="125" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">fprintf<pos:position pos:line="126" pos:column="16"/></name><argument_list pos:line="126" pos:column="16">(<argument><expr><name pos:line="126" pos:column="17">stderr<pos:position pos:line="126" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="25">"SMB_TCon failed with errorclass = %i, Error Code = %i\n"<pos:position pos:line="126" pos:column="82"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="127" pos:column="17">CVAL<pos:position pos:line="127" pos:column="21"/></name><argument_list pos:line="127" pos:column="21">(<argument><expr><call><name pos:line="127" pos:column="22">SMB_Hdr<pos:position pos:line="127" pos:column="29"/></name><argument_list pos:line="127" pos:column="29">(<argument><expr><name pos:line="127" pos:column="30">pkt<pos:position pos:line="127" pos:column="33"/></name></expr></argument>)<pos:position pos:line="127" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="127" pos:column="36">SMB_hdr_rcls_offset<pos:position pos:line="127" pos:column="55"/></name></expr></argument>)<pos:position pos:line="127" pos:column="56"/></argument_list></call></expr></argument>,
                <argument><expr><call><name pos:line="128" pos:column="17">SVAL<pos:position pos:line="128" pos:column="21"/></name><argument_list pos:line="128" pos:column="21">(<argument><expr><call><name pos:line="128" pos:column="22">SMB_Hdr<pos:position pos:line="128" pos:column="29"/></name><argument_list pos:line="128" pos:column="29">(<argument><expr><name pos:line="128" pos:column="30">pkt<pos:position pos:line="128" pos:column="33"/></name></expr></argument>)<pos:position pos:line="128" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="128" pos:column="36">SMB_hdr_err_offset<pos:position pos:line="128" pos:column="54"/></name></expr></argument>)<pos:position pos:line="128" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="128" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="129" pos:column="1">#<cpp:directive pos:line="129" pos:column="2">endif<pos:position pos:line="129" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><name pos:line="131" pos:column="13">Tree_Handle<pos:position pos:line="131" pos:column="24"/></name> <operator pos:line="131" pos:column="25">==<pos:position pos:line="131" pos:column="27"/></operator> <name pos:line="131" pos:column="28">NULL<pos:position pos:line="131" pos:column="32"/></name></expr>)<pos:position pos:line="131" pos:column="33"/></condition><then pos:line="131" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="132" pos:column="13">free<pos:position pos:line="132" pos:column="17"/></name><argument_list pos:line="132" pos:column="17">(<argument><expr><name pos:line="132" pos:column="18">tree<pos:position pos:line="132" pos:column="22"/></name></expr></argument>)<pos:position pos:line="132" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="24"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="133" pos:column="9">SMBlib_SMB_Error<pos:position pos:line="133" pos:column="25"/></name> <operator pos:line="133" pos:column="26">=<pos:position pos:line="133" pos:column="27"/></operator> <call><name pos:line="133" pos:column="28">IVAL<pos:position pos:line="133" pos:column="32"/></name><argument_list pos:line="133" pos:column="32">(<argument><expr><call><name pos:line="133" pos:column="33">SMB_Hdr<pos:position pos:line="133" pos:column="40"/></name><argument_list pos:line="133" pos:column="40">(<argument><expr><name pos:line="133" pos:column="41">pkt<pos:position pos:line="133" pos:column="44"/></name></expr></argument>)<pos:position pos:line="133" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="133" pos:column="47">SMB_hdr_rcls_offset<pos:position pos:line="133" pos:column="66"/></name></expr></argument>)<pos:position pos:line="133" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="134" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="134" pos:column="23"/></name><argument_list pos:line="134" pos:column="23">(<argument><expr><name pos:line="134" pos:column="24">pkt<pos:position pos:line="134" pos:column="27"/></name></expr></argument>)<pos:position pos:line="134" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="135" pos:column="9">SMBlib_errno<pos:position pos:line="135" pos:column="21"/></name> <operator pos:line="135" pos:column="22">=<pos:position pos:line="135" pos:column="23"/></operator> <name pos:line="135" pos:column="24">SMBlibE_Remote<pos:position pos:line="135" pos:column="38"/></name></expr>;<pos:position pos:line="135" pos:column="39"/></expr_stmt>
        <return pos:line="136" pos:column="9">return <expr><operator pos:line="136" pos:column="16">(<pos:position pos:line="136" pos:column="17"/></operator><name pos:line="136" pos:column="17">NULL<pos:position pos:line="136" pos:column="21"/></name><operator pos:line="136" pos:column="21">)<pos:position pos:line="136" pos:column="22"/></operator></expr>;<pos:position pos:line="136" pos:column="23"/></return>

    }<pos:position pos:line="138" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="139" pos:column="5">tree<pos:position pos:line="139" pos:column="9"/></name><operator pos:line="139" pos:column="9">-&gt;<pos:position pos:line="139" pos:column="14"/></operator><name pos:line="139" pos:column="11">tid<pos:position pos:line="139" pos:column="14"/></name></name> <operator pos:line="139" pos:column="15">=<pos:position pos:line="139" pos:column="16"/></operator> <call><name pos:line="139" pos:column="17">SVAL<pos:position pos:line="139" pos:column="21"/></name><argument_list pos:line="139" pos:column="21">(<argument><expr><call><name pos:line="139" pos:column="22">SMB_Hdr<pos:position pos:line="139" pos:column="29"/></name><argument_list pos:line="139" pos:column="29">(<argument><expr><name pos:line="139" pos:column="30">pkt<pos:position pos:line="139" pos:column="33"/></name></expr></argument>)<pos:position pos:line="139" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="139" pos:column="36">SMB_tconr_tid_offset<pos:position pos:line="139" pos:column="56"/></name></expr></argument>)<pos:position pos:line="139" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="140" pos:column="5">tree<pos:position pos:line="140" pos:column="9"/></name><operator pos:line="140" pos:column="9">-&gt;<pos:position pos:line="140" pos:column="14"/></operator><name pos:line="140" pos:column="11">mbs<pos:position pos:line="140" pos:column="14"/></name></name> <operator pos:line="140" pos:column="15">=<pos:position pos:line="140" pos:column="16"/></operator> <call><name pos:line="140" pos:column="17">SVAL<pos:position pos:line="140" pos:column="21"/></name><argument_list pos:line="140" pos:column="21">(<argument><expr><call><name pos:line="140" pos:column="22">SMB_Hdr<pos:position pos:line="140" pos:column="29"/></name><argument_list pos:line="140" pos:column="29">(<argument><expr><name pos:line="140" pos:column="30">pkt<pos:position pos:line="140" pos:column="33"/></name></expr></argument>)<pos:position pos:line="140" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="140" pos:column="36">SMB_tconr_mbs_offset<pos:position pos:line="140" pos:column="56"/></name></expr></argument>)<pos:position pos:line="140" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="58"/></expr_stmt>

<cpp:ifdef pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">ifdef<pos:position pos:line="142" pos:column="7"/></cpp:directive> <name pos:line="142" pos:column="8">DEBUG<pos:position pos:line="142" pos:column="13"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="143" pos:column="5">fprintf<pos:position pos:line="143" pos:column="12"/></name><argument_list pos:line="143" pos:column="12">(<argument><expr><name pos:line="143" pos:column="13">stderr<pos:position pos:line="143" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="21">"TConn succeeded, with TID=%i, Max Xmit=%i\n"<pos:position pos:line="143" pos:column="66"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="144" pos:column="13">tree<pos:position pos:line="144" pos:column="17"/></name><operator pos:line="144" pos:column="17">-&gt;<pos:position pos:line="144" pos:column="22"/></operator><name pos:line="144" pos:column="19">tid<pos:position pos:line="144" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="24">tree<pos:position pos:line="144" pos:column="28"/></name><operator pos:line="144" pos:column="28">-&gt;<pos:position pos:line="144" pos:column="33"/></operator><name pos:line="144" pos:column="30">mbs<pos:position pos:line="144" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="144" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="145" pos:column="1">#<cpp:directive pos:line="145" pos:column="2">endif<pos:position pos:line="145" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="147" pos:column="5">/* Now link the Tree to the Server Structure ... */</comment>

    <if pos:line="149" pos:column="5">if <condition pos:line="149" pos:column="8">(<expr><name><name pos:line="149" pos:column="9">Con_Handle<pos:position pos:line="149" pos:column="19"/></name><operator pos:line="149" pos:column="19">-&gt;<pos:position pos:line="149" pos:column="24"/></operator><name pos:line="149" pos:column="21">first_tree<pos:position pos:line="149" pos:column="31"/></name></name> <operator pos:line="149" pos:column="32">==<pos:position pos:line="149" pos:column="34"/></operator> <name pos:line="149" pos:column="35">NULL<pos:position pos:line="149" pos:column="39"/></name></expr>)<pos:position pos:line="149" pos:column="40"/></condition><then pos:line="149" pos:column="40"> <block pos:line="149" pos:column="41">{

        <expr_stmt><expr><name><name pos:line="151" pos:column="9">Con_Handle<pos:position pos:line="151" pos:column="19"/></name><operator pos:line="151" pos:column="19">-&gt;<pos:position pos:line="151" pos:column="24"/></operator><name pos:line="151" pos:column="21">first_tree<pos:position pos:line="151" pos:column="31"/></name></name> <operator pos:line="151" pos:column="32">=<pos:position pos:line="151" pos:column="33"/></operator> <name pos:line="151" pos:column="34">tree<pos:position pos:line="151" pos:column="38"/></name></expr>;<pos:position pos:line="151" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="152" pos:column="9">Con_Handle<pos:position pos:line="152" pos:column="19"/></name><operator pos:line="152" pos:column="19">-&gt;<pos:position pos:line="152" pos:column="24"/></operator><name pos:line="152" pos:column="21">last_tree<pos:position pos:line="152" pos:column="30"/></name></name> <operator pos:line="152" pos:column="31">=<pos:position pos:line="152" pos:column="32"/></operator> <name pos:line="152" pos:column="33">tree<pos:position pos:line="152" pos:column="37"/></name></expr>;<pos:position pos:line="152" pos:column="38"/></expr_stmt>

    }<pos:position pos:line="154" pos:column="6"/></block></then> <else pos:line="154" pos:column="7">else <block pos:line="154" pos:column="12">{

        <expr_stmt><expr><name><name pos:line="156" pos:column="9">Con_Handle<pos:position pos:line="156" pos:column="19"/></name><operator pos:line="156" pos:column="19">-&gt;<pos:position pos:line="156" pos:column="24"/></operator><name pos:line="156" pos:column="21">last_tree<pos:position pos:line="156" pos:column="30"/></name><operator pos:line="156" pos:column="30">-&gt;<pos:position pos:line="156" pos:column="35"/></operator><name pos:line="156" pos:column="32">next<pos:position pos:line="156" pos:column="36"/></name></name> <operator pos:line="156" pos:column="37">=<pos:position pos:line="156" pos:column="38"/></operator> <name pos:line="156" pos:column="39">tree<pos:position pos:line="156" pos:column="43"/></name></expr>;<pos:position pos:line="156" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="157" pos:column="9">tree<pos:position pos:line="157" pos:column="13"/></name><operator pos:line="157" pos:column="13">-&gt;<pos:position pos:line="157" pos:column="18"/></operator><name pos:line="157" pos:column="15">prev<pos:position pos:line="157" pos:column="19"/></name></name> <operator pos:line="157" pos:column="20">=<pos:position pos:line="157" pos:column="21"/></operator> <name><name pos:line="157" pos:column="22">Con_Handle<pos:position pos:line="157" pos:column="32"/></name><operator pos:line="157" pos:column="32">-&gt;<pos:position pos:line="157" pos:column="37"/></operator><name pos:line="157" pos:column="34">last_tree<pos:position pos:line="157" pos:column="43"/></name></name></expr>;<pos:position pos:line="157" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="158" pos:column="9">Con_Handle<pos:position pos:line="158" pos:column="19"/></name><operator pos:line="158" pos:column="19">-&gt;<pos:position pos:line="158" pos:column="24"/></operator><name pos:line="158" pos:column="21">last_tree<pos:position pos:line="158" pos:column="30"/></name></name> <operator pos:line="158" pos:column="31">=<pos:position pos:line="158" pos:column="32"/></operator> <name pos:line="158" pos:column="33">tree<pos:position pos:line="158" pos:column="37"/></name></expr>;<pos:position pos:line="158" pos:column="38"/></expr_stmt>

    }<pos:position pos:line="160" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="162" pos:column="5">RFCNB_Free_Pkt<pos:position pos:line="162" pos:column="19"/></name><argument_list pos:line="162" pos:column="19">(<argument><expr><name pos:line="162" pos:column="20">pkt<pos:position pos:line="162" pos:column="23"/></name></expr></argument>)<pos:position pos:line="162" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="25"/></expr_stmt>
    <return pos:line="163" pos:column="5">return <expr><operator pos:line="163" pos:column="12">(<pos:position pos:line="163" pos:column="13"/></operator><name pos:line="163" pos:column="13">tree<pos:position pos:line="163" pos:column="17"/></name><operator pos:line="163" pos:column="17">)<pos:position pos:line="163" pos:column="18"/></operator></expr>;<pos:position pos:line="163" pos:column="19"/></return>

}<pos:position pos:line="165" pos:column="2"/></block></function></unit>
