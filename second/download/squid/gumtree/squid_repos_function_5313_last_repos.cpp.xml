<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5313_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Client<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">writeCommandCallback<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">CommIoCbParams<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">&amp;<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="57">io<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{

    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">9<pos:position pos:line="5" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="15">5<pos:position pos:line="5" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="18">"wrote "<pos:position pos:line="5" pos:column="26"/></literal> <operator pos:line="5" pos:column="27">&lt;&lt;<pos:position pos:line="5" pos:column="35"/></operator> <name><name pos:line="5" pos:column="30">io<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">.<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="33">size<pos:position pos:line="5" pos:column="37"/></name></name> <operator pos:line="5" pos:column="38">&lt;&lt;<pos:position pos:line="5" pos:column="46"/></operator> <literal type="string" pos:line="5" pos:column="41">" bytes"<pos:position pos:line="5" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="51"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">io<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">.<pos:position pos:line="7" pos:column="12"/></operator><name pos:line="7" pos:column="12">size<pos:position pos:line="7" pos:column="16"/></name></name> <operator pos:line="7" pos:column="17">&gt;<pos:position pos:line="7" pos:column="21"/></operator> <literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal></expr>)<pos:position pos:line="7" pos:column="21"/></condition><then pos:line="7" pos:column="21"> <block pos:line="7" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">fd_bytes<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">(<argument><expr><name><name pos:line="8" pos:column="18">io<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">.<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">fd<pos:position pos:line="8" pos:column="23"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="25">io<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">.<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">size<pos:position pos:line="8" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="34">FD_WRITE<pos:position pos:line="8" pos:column="42"/></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">statCounter<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">.<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">server<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">.<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">all<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">.<pos:position pos:line="9" pos:column="32"/></operator><name pos:line="9" pos:column="32">kbytes_out<pos:position pos:line="9" pos:column="42"/></name></name> <operator pos:line="9" pos:column="43">+=<pos:position pos:line="9" pos:column="45"/></operator> <name><name pos:line="9" pos:column="46">io<pos:position pos:line="9" pos:column="48"/></name><operator pos:line="9" pos:column="48">.<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="49">size<pos:position pos:line="9" pos:column="53"/></name></name></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="10" pos:column="9">statCounter<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">.<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">server<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">.<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">ftp<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">.<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">kbytes_out<pos:position pos:line="10" pos:column="42"/></name></name> <operator pos:line="10" pos:column="43">+=<pos:position pos:line="10" pos:column="45"/></operator> <name><name pos:line="10" pos:column="46">io<pos:position pos:line="10" pos:column="48"/></name><operator pos:line="10" pos:column="48">.<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="49">size<pos:position pos:line="10" pos:column="53"/></name></name></expr>;<pos:position pos:line="10" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">io<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">.<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="12">flag<pos:position pos:line="13" pos:column="16"/></name></name> <operator pos:line="13" pos:column="17">==<pos:position pos:line="13" pos:column="19"/></operator> <name><name pos:line="13" pos:column="20">Comm<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">::<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">ERR_CLOSING<pos:position pos:line="13" pos:column="37"/></name></name></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38">
        <block type="pseudo"><return pos:line="14" pos:column="9">return;<pos:position pos:line="14" pos:column="16"/></return></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">io<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">flag<pos:position pos:line="16" pos:column="16"/></name></name></expr>)<pos:position pos:line="16" pos:column="17"/></condition><then pos:line="16" pos:column="17"> <block pos:line="16" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">9<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="19">DBG_IMPORTANT<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="34">"FTP command write error: "<pos:position pos:line="17" pos:column="61"/></literal> <operator pos:line="17" pos:column="62">&lt;&lt;<pos:position pos:line="17" pos:column="70"/></operator> <name><name pos:line="17" pos:column="65">io<pos:position pos:line="17" pos:column="67"/></name><operator pos:line="17" pos:column="67">.<pos:position pos:line="17" pos:column="68"/></operator><name pos:line="17" pos:column="68">conn<pos:position pos:line="17" pos:column="72"/></name></name> <operator pos:line="17" pos:column="73">&lt;&lt;<pos:position pos:line="17" pos:column="81"/></operator> <literal type="string" pos:line="17" pos:column="76">": "<pos:position pos:line="17" pos:column="80"/></literal> <operator pos:line="17" pos:column="81">&lt;&lt;<pos:position pos:line="17" pos:column="89"/></operator> <call><name pos:line="17" pos:column="84">xstrerr<pos:position pos:line="17" pos:column="91"/></name><argument_list pos:line="17" pos:column="91">(<argument><expr><name><name pos:line="17" pos:column="92">io<pos:position pos:line="17" pos:column="94"/></name><operator pos:line="17" pos:column="94">.<pos:position pos:line="17" pos:column="95"/></operator><name pos:line="17" pos:column="95">xerrno<pos:position pos:line="17" pos:column="101"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="102"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="104"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">failed<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">ERR_WRITE_ERROR<pos:position pos:line="18" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="33">io<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">.<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="36">xerrno<pos:position pos:line="18" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
        <comment type="block" pos:line="19" pos:column="9">/* failed closes ctrl.conn and frees ftpState */</comment>
        <return pos:line="20" pos:column="9">return;<pos:position pos:line="20" pos:column="16"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
