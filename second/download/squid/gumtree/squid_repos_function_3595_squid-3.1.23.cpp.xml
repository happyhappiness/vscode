<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3595_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">MemBuf<pos:position pos:line="1" pos:column="12"/></name><operator pos:line="1" pos:column="12">::<pos:position pos:line="1" pos:column="14"/></operator><name pos:line="1" pos:column="14">append<pos:position pos:line="1" pos:column="20"/></name></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">newContent<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">mb_size_t<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">sz<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">assert<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><name pos:line="3" pos:column="12">sz<pos:position pos:line="3" pos:column="14"/></name> <operator pos:line="3" pos:column="15">&gt;=<pos:position pos:line="3" pos:column="20"/></operator> <literal type="number" pos:line="3" pos:column="18">0<pos:position pos:line="3" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">buf<pos:position pos:line="4" pos:column="15"/></name> <operator pos:line="4" pos:column="16">||<pos:position pos:line="4" pos:column="18"/></operator> <operator pos:line="4" pos:column="19">(<pos:position pos:line="4" pos:column="20"/></operator><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal><operator pos:line="4" pos:column="21">==<pos:position pos:line="4" pos:column="23"/></operator><name pos:line="4" pos:column="23">capacity<pos:position pos:line="4" pos:column="31"/></name> <operator pos:line="4" pos:column="32">&amp;&amp;<pos:position pos:line="4" pos:column="42"/></operator> <literal type="number" pos:line="4" pos:column="35">0<pos:position pos:line="4" pos:column="36"/></literal><operator pos:line="4" pos:column="36">==<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">size<pos:position pos:line="4" pos:column="42"/></name><operator pos:line="4" pos:column="42">)<pos:position pos:line="4" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">stolen<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt> <comment type="block" pos:line="5" pos:column="22">/* not frozen */</comment>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">PROF_start<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">MemBuf_append<pos:position pos:line="7" pos:column="29"/></name></expr></argument>)<pos:position pos:line="7" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">sz<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">&gt;<pos:position pos:line="8" pos:column="16"/></operator> <literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr>)<pos:position pos:line="8" pos:column="16"/></condition><then pos:line="8" pos:column="16"> <block pos:line="8" pos:column="17">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">size<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">+<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="20">sz<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">+<pos:position pos:line="9" pos:column="24"/></operator> <literal type="number" pos:line="9" pos:column="25">1<pos:position pos:line="9" pos:column="26"/></literal> <operator pos:line="9" pos:column="27">&gt;<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="29">capacity<pos:position pos:line="9" pos:column="37"/></name></expr>)<pos:position pos:line="9" pos:column="38"/></condition><then pos:line="9" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="13">grow<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">size<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">+<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">sz<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">+<pos:position pos:line="10" pos:column="29"/></operator> <literal type="number" pos:line="10" pos:column="30">1<pos:position pos:line="10" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="12" pos:column="9">assert<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">size<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">+<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">sz<pos:position pos:line="12" pos:column="25"/></name> <operator pos:line="12" pos:column="26">&lt;=<pos:position pos:line="12" pos:column="31"/></operator> <name pos:line="12" pos:column="29">capacity<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt> <comment type="block" pos:line="12" pos:column="40">/* paranoid */</comment>

        <expr_stmt><expr><call><name pos:line="14" pos:column="9">xmemcpy<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><call><name pos:line="14" pos:column="17">space<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">()<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="26">newContent<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">sz<pos:position pos:line="14" pos:column="40"/></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="16" pos:column="9">appended<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">sz<pos:position pos:line="16" pos:column="20"/></name></expr></argument>)<pos:position pos:line="16" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">PROF_stop<pos:position pos:line="18" pos:column="14"/></name><argument_list pos:line="18" pos:column="14">(<argument><expr><name pos:line="18" pos:column="15">MemBuf_append<pos:position pos:line="18" pos:column="28"/></name></expr></argument>)<pos:position pos:line="18" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
