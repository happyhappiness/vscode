<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3052_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">abort<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">()<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><operator pos:line="4" pos:column="5">++<pos:position pos:line="4" pos:column="7"/></operator><name><name pos:line="4" pos:column="7">statCounter<pos:position pos:line="4" pos:column="18"/></name><operator pos:line="4" pos:column="18">.<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="19">aborted_requests<pos:position pos:line="4" pos:column="35"/></name></name></expr>;<pos:position pos:line="4" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">store_status<pos:position pos:line="5" pos:column="24"/></name> <operator pos:line="5" pos:column="25">==<pos:position pos:line="5" pos:column="27"/></operator> <name pos:line="5" pos:column="28">STORE_PENDING<pos:position pos:line="5" pos:column="41"/></name></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">mem_obj<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">!=<pos:position pos:line="6" pos:column="22"/></operator> <name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">20<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">6<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="19">"storeAbort: "<pos:position pos:line="7" pos:column="33"/></literal> <operator pos:line="7" pos:column="34">&lt;&lt;<pos:position pos:line="7" pos:column="42"/></operator> <call><name pos:line="7" pos:column="37">getMD5Text<pos:position pos:line="7" pos:column="47"/></name><argument_list pos:line="7" pos:column="47">()<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">lock<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">()<pos:position pos:line="9" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="12"/></expr_stmt>         <comment type="block" pos:line="9" pos:column="21">/* lock while aborting */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">negativeCache<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">()<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">releaseRequest<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">()<pos:position pos:line="12" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">EBIT_SET<pos:position pos:line="14" pos:column="13"/></name><argument_list pos:line="14" pos:column="13">(<argument><expr><name pos:line="14" pos:column="14">flags<pos:position pos:line="14" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="21">ENTRY_ABORTED<pos:position pos:line="14" pos:column="34"/></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">setMemStatus<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">NOT_IN_MEMORY<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><name pos:line="18" pos:column="5">store_status<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <name pos:line="18" pos:column="20">STORE_OK<pos:position pos:line="18" pos:column="28"/></name></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* Notify the server side */</comment>

    <comment type="block" pos:line="22" pos:column="5">/*
     * DPW 2007-05-07
     * Should we check abort.data for validity?
     */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">mem_obj<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">abort<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">.<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="24">callback<pos:position pos:line="26" pos:column="32"/></name></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33"> <block pos:line="26" pos:column="34">{
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name pos:line="27" pos:column="14">cbdataReferenceValid<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><name><name pos:line="27" pos:column="35">mem_obj<pos:position pos:line="27" pos:column="42"/></name><operator pos:line="27" pos:column="42">-&gt;<pos:position pos:line="27" pos:column="47"/></operator><name pos:line="27" pos:column="44">abort<pos:position pos:line="27" pos:column="49"/></name><operator pos:line="27" pos:column="49">.<pos:position pos:line="27" pos:column="50"/></operator><name pos:line="27" pos:column="50">data<pos:position pos:line="27" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="56"/></condition><then pos:line="27" pos:column="56">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="13">debugs<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><literal type="number" pos:line="28" pos:column="20">20<pos:position pos:line="28" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="24">DBG_IMPORTANT<pos:position pos:line="28" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="28" pos:column="38">HERE<pos:position pos:line="28" pos:column="42"/></name> <operator pos:line="28" pos:column="43">&lt;&lt;<pos:position pos:line="28" pos:column="51"/></operator> <literal type="string" pos:line="28" pos:column="46">"queueing event when abort.data is not valid"<pos:position pos:line="28" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="93"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">eventAdd<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><literal type="string" pos:line="29" pos:column="18">"mem_obj-&gt;abort.callback"<pos:position pos:line="29" pos:column="46"/></literal></expr></argument>,
                 <argument><expr><name><name pos:line="30" pos:column="18">mem_obj<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">-&gt;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="27">abort<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">.<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="33">callback<pos:position pos:line="30" pos:column="41"/></name></name></expr></argument>,
                 <argument><expr><name><name pos:line="31" pos:column="18">mem_obj<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">-&gt;<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="27">abort<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">.<pos:position pos:line="31" pos:column="33"/></operator><name pos:line="31" pos:column="33">data<pos:position pos:line="31" pos:column="37"/></name></name></expr></argument>,
                 <argument><expr><literal type="number" pos:line="32" pos:column="18">0.0<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>,
                 <argument><expr><literal type="boolean" pos:line="33" pos:column="18">true<pos:position pos:line="33" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">unregisterAbort<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">()<pos:position pos:line="34" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="37" pos:column="5">/* XXX Should we reverse these two, so that there is no
     * unneeded disk swapping triggered?
     */</comment>
    <comment type="block" pos:line="40" pos:column="5">/* Notify the client side */</comment>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">invokeHandlers<pos:position pos:line="41" pos:column="19"/></name><argument_list pos:line="41" pos:column="19">()<pos:position pos:line="41" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt>

    <comment type="line" pos:line="43" pos:column="5">// abort swap out, invalidating what was created so far (release follows)</comment>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">swapOutFileClose<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><name><name pos:line="44" pos:column="22">StoreIOState<pos:position pos:line="44" pos:column="34"/></name><operator pos:line="44" pos:column="34">::<pos:position pos:line="44" pos:column="36"/></operator><name pos:line="44" pos:column="36">writerGone<pos:position pos:line="44" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">unlock<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">()<pos:position pos:line="46" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="14"/></expr_stmt>       <comment type="block" pos:line="46" pos:column="21">/* unlock */</comment>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
