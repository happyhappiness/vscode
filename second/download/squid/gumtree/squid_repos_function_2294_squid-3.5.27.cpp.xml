<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2294_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">storeDigestAddable<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">StoreEntry<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type> <name pos:line="2" pos:column="39">e<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* add some stats! XXX */</comment>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">71<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">6<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"storeDigestAddable: checking entry, key: "<pos:position pos:line="6" pos:column="62"/></literal> <operator pos:line="6" pos:column="63">&lt;&lt;<pos:position pos:line="6" pos:column="71"/></operator> <call><name><name pos:line="6" pos:column="66">e<pos:position pos:line="6" pos:column="67"/></name><operator pos:line="6" pos:column="67">-&gt;<pos:position pos:line="6" pos:column="72"/></operator><name pos:line="6" pos:column="69">getMD5Text<pos:position pos:line="6" pos:column="79"/></name></name><argument_list pos:line="6" pos:column="79">()<pos:position pos:line="6" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="83"/></expr_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* check various entry flags (mimics StoreEntry::checkCachable XXX) */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">EBIT_TEST<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name><name pos:line="10" pos:column="19">e<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">-&gt;<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="22">flags<pos:position pos:line="10" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="29">KEY_PRIVATE<pos:position pos:line="10" pos:column="40"/></name></expr></argument>)<pos:position pos:line="10" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="42"/></condition><then pos:line="10" pos:column="42"> <block pos:line="10" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">71<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">6<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"storeDigestAddable: NO: private key"<pos:position pos:line="11" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">EBIT_TEST<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name><name pos:line="15" pos:column="19">e<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">flags<pos:position pos:line="15" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="29">ENTRY_NEGCACHED<pos:position pos:line="15" pos:column="44"/></name></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="46"/></condition><then pos:line="15" pos:column="46"> <block pos:line="15" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">71<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">6<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="23">"storeDigestAddable: NO: negative cached"<pos:position pos:line="16" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="66"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">EBIT_TEST<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name><name pos:line="20" pos:column="19">e<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">flags<pos:position pos:line="20" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="29">RELEASE_REQUEST<pos:position pos:line="20" pos:column="44"/></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="46"/></condition><then pos:line="20" pos:column="46"> <block pos:line="20" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">71<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="20">6<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="23">"storeDigestAddable: NO: release requested"<pos:position pos:line="21" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="68"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><literal type="number" pos:line="22" pos:column="16">0<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">e<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">store_status<pos:position pos:line="25" pos:column="24"/></name></name> <operator pos:line="25" pos:column="25">==<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="28">STORE_OK<pos:position pos:line="25" pos:column="36"/></name> <operator pos:line="25" pos:column="37">&amp;&amp;<pos:position pos:line="25" pos:column="47"/></operator> <call><name pos:line="25" pos:column="40">EBIT_TEST<pos:position pos:line="25" pos:column="49"/></name><argument_list pos:line="25" pos:column="49">(<argument><expr><name><name pos:line="25" pos:column="50">e<pos:position pos:line="25" pos:column="51"/></name><operator pos:line="25" pos:column="51">-&gt;<pos:position pos:line="25" pos:column="56"/></operator><name pos:line="25" pos:column="53">flags<pos:position pos:line="25" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="60">ENTRY_BAD_LENGTH<pos:position pos:line="25" pos:column="76"/></name></expr></argument>)<pos:position pos:line="25" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="78"/></condition><then pos:line="25" pos:column="78"> <block pos:line="25" pos:column="79">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">71<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="20">6<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="23">"storeDigestAddable: NO: wrong content-length"<pos:position pos:line="26" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="71"/></expr_stmt>
        <return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">0<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="30" pos:column="5">/* do not digest huge objects */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">e<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">-&gt;<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="12">swap_file_sz<pos:position pos:line="31" pos:column="24"/></name></name> <operator pos:line="31" pos:column="25">&gt;<pos:position pos:line="31" pos:column="29"/></operator> <operator pos:line="31" pos:column="27">(<pos:position pos:line="31" pos:column="28"/></operator><name pos:line="31" pos:column="28">uint64_t<pos:position pos:line="31" pos:column="36"/></name> <operator pos:line="31" pos:column="37">)<pos:position pos:line="31" pos:column="38"/></operator><name><name pos:line="31" pos:column="38">Config<pos:position pos:line="31" pos:column="44"/></name><operator pos:line="31" pos:column="44">.<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="45">Store<pos:position pos:line="31" pos:column="50"/></name><operator pos:line="31" pos:column="50">.<pos:position pos:line="31" pos:column="51"/></operator><name pos:line="31" pos:column="51">maxObjectSize<pos:position pos:line="31" pos:column="64"/></name></name></expr>)<pos:position pos:line="31" pos:column="65"/></condition><then pos:line="31" pos:column="65"> <block pos:line="31" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">71<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="20">6<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"storeDigestAddable: NO: too big"<pos:position pos:line="32" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="36" pos:column="5">/* still here? check staleness */</comment>
    <comment type="block" pos:line="37" pos:column="5">/* Note: We should use the time of the next rebuild, not (cur_time+period) */</comment>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><call><name pos:line="38" pos:column="9">refreshCheckDigest<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">(<argument><expr><name pos:line="38" pos:column="28">e<pos:position pos:line="38" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="31">Config<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">.<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="38">digest<pos:position pos:line="38" pos:column="44"/></name><operator pos:line="38" pos:column="44">.<pos:position pos:line="38" pos:column="45"/></operator><name pos:line="38" pos:column="45">rebuild_period<pos:position pos:line="38" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="61"/></condition><then pos:line="38" pos:column="61"> <block pos:line="38" pos:column="62">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">71<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="20">6<pos:position pos:line="39" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="23">"storeDigestAdd: entry expires within "<pos:position pos:line="39" pos:column="62"/></literal> <operator pos:line="39" pos:column="63">&lt;&lt;<pos:position pos:line="39" pos:column="71"/></operator> <name><name pos:line="39" pos:column="66">Config<pos:position pos:line="39" pos:column="72"/></name><operator pos:line="39" pos:column="72">.<pos:position pos:line="39" pos:column="73"/></operator><name pos:line="39" pos:column="73">digest<pos:position pos:line="39" pos:column="79"/></name><operator pos:line="39" pos:column="79">.<pos:position pos:line="39" pos:column="80"/></operator><name pos:line="39" pos:column="80">rebuild_period<pos:position pos:line="39" pos:column="94"/></name></name> <operator pos:line="39" pos:column="95">&lt;&lt;<pos:position pos:line="39" pos:column="103"/></operator> <literal type="string" pos:line="39" pos:column="98">" secs, ignoring"<pos:position pos:line="39" pos:column="115"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="117"/></expr_stmt>
        <return pos:line="40" pos:column="9">return <expr><literal type="number" pos:line="40" pos:column="16">0<pos:position pos:line="40" pos:column="17"/></literal></expr>;<pos:position pos:line="40" pos:column="18"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="43" pos:column="5">/*
     * idea: how about also skipping very fresh (thus, potentially
     * unstable) entries? Should be configurable through
     * cd_refresh_pattern, of course.
     */</comment>
    <comment type="block" pos:line="48" pos:column="5">/*
     * idea: skip objects that are going to be purged before the next
     * update.
     */</comment>
    <return pos:line="52" pos:column="5">return <expr><literal type="number" pos:line="52" pos:column="12">1<pos:position pos:line="52" pos:column="13"/></literal></expr>;<pos:position pos:line="52" pos:column="14"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
