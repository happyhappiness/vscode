<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3198_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">protocol_t<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">urlParseProtocol<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">b<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">e<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/*
     * if e is NULL, b must be NULL terminated and we
     * make e point to the first whitespace character
     * after b.
     */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">NULL<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">==<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">e<pos:position pos:line="10" pos:column="18"/></name></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">e<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <name pos:line="11" pos:column="13">b<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">+<pos:position pos:line="11" pos:column="16"/></operator> <call><name pos:line="11" pos:column="17">strcspn<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">b<pos:position pos:line="11" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="28">":"<pos:position pos:line="11" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">len<pos:position pos:line="13" pos:column="12"/></name> <init pos:line="13" pos:column="13">= <expr><name pos:line="13" pos:column="15">e<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">-<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">b<pos:position pos:line="13" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* test common stuff first */</comment>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">strncasecmp<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">b<pos:position pos:line="17" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="24">"http"<pos:position pos:line="17" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="32">len<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call> <operator pos:line="17" pos:column="37">==<pos:position pos:line="17" pos:column="39"/></operator> <literal type="number" pos:line="17" pos:column="40">0<pos:position pos:line="17" pos:column="41"/></literal></expr>)<pos:position pos:line="17" pos:column="42"/></condition><then pos:line="17" pos:column="42">
        <block type="pseudo"><return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">PROTO_HTTP<pos:position pos:line="18" pos:column="26"/></name></expr>;<pos:position pos:line="18" pos:column="27"/></return></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">strncasecmp<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">b<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="24">"ftp"<pos:position pos:line="20" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">len<pos:position pos:line="20" pos:column="34"/></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call> <operator pos:line="20" pos:column="36">==<pos:position pos:line="20" pos:column="38"/></operator> <literal type="number" pos:line="20" pos:column="39">0<pos:position pos:line="20" pos:column="40"/></literal></expr>)<pos:position pos:line="20" pos:column="41"/></condition><then pos:line="20" pos:column="41">
        <block type="pseudo"><return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">PROTO_FTP<pos:position pos:line="21" pos:column="25"/></name></expr>;<pos:position pos:line="21" pos:column="26"/></return></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">strncasecmp<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">b<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="24">"https"<pos:position pos:line="23" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="33">len<pos:position pos:line="23" pos:column="36"/></name></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call> <operator pos:line="23" pos:column="38">==<pos:position pos:line="23" pos:column="40"/></operator> <literal type="number" pos:line="23" pos:column="41">0<pos:position pos:line="23" pos:column="42"/></literal></expr>)<pos:position pos:line="23" pos:column="43"/></condition><then pos:line="23" pos:column="43">
        <block type="pseudo"><return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">PROTO_HTTPS<pos:position pos:line="24" pos:column="27"/></name></expr>;<pos:position pos:line="24" pos:column="28"/></return></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">strncasecmp<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">b<pos:position pos:line="26" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="24">"file"<pos:position pos:line="26" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="32">len<pos:position pos:line="26" pos:column="35"/></name></expr></argument>)<pos:position pos:line="26" pos:column="36"/></argument_list></call> <operator pos:line="26" pos:column="37">==<pos:position pos:line="26" pos:column="39"/></operator> <literal type="number" pos:line="26" pos:column="40">0<pos:position pos:line="26" pos:column="41"/></literal></expr>)<pos:position pos:line="26" pos:column="42"/></condition><then pos:line="26" pos:column="42">
        <block type="pseudo"><return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">PROTO_FTP<pos:position pos:line="27" pos:column="25"/></name></expr>;<pos:position pos:line="27" pos:column="26"/></return></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name pos:line="29" pos:column="9">strncasecmp<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">b<pos:position pos:line="29" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="24">"coap"<pos:position pos:line="29" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="32">len<pos:position pos:line="29" pos:column="35"/></name></expr></argument>)<pos:position pos:line="29" pos:column="36"/></argument_list></call> <operator pos:line="29" pos:column="37">==<pos:position pos:line="29" pos:column="39"/></operator> <literal type="number" pos:line="29" pos:column="40">0<pos:position pos:line="29" pos:column="41"/></literal></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42">
        <block type="pseudo"><return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">PROTO_COAP<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></return></block></then></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><call><name pos:line="32" pos:column="9">strncasecmp<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">b<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="24">"coaps"<pos:position pos:line="32" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="33">len<pos:position pos:line="32" pos:column="36"/></name></expr></argument>)<pos:position pos:line="32" pos:column="37"/></argument_list></call> <operator pos:line="32" pos:column="38">==<pos:position pos:line="32" pos:column="40"/></operator> <literal type="number" pos:line="32" pos:column="41">0<pos:position pos:line="32" pos:column="42"/></literal></expr>)<pos:position pos:line="32" pos:column="43"/></condition><then pos:line="32" pos:column="43">
        <block type="pseudo"><return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">PROTO_COAPS<pos:position pos:line="33" pos:column="27"/></name></expr>;<pos:position pos:line="33" pos:column="28"/></return></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">strncasecmp<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">b<pos:position pos:line="35" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="24">"gopher"<pos:position pos:line="35" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="34">len<pos:position pos:line="35" pos:column="37"/></name></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call> <operator pos:line="35" pos:column="39">==<pos:position pos:line="35" pos:column="41"/></operator> <literal type="number" pos:line="35" pos:column="42">0<pos:position pos:line="35" pos:column="43"/></literal></expr>)<pos:position pos:line="35" pos:column="44"/></condition><then pos:line="35" pos:column="44">
        <block type="pseudo"><return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">PROTO_GOPHER<pos:position pos:line="36" pos:column="28"/></name></expr>;<pos:position pos:line="36" pos:column="29"/></return></block></then></if>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><call><name pos:line="38" pos:column="9">strncasecmp<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">b<pos:position pos:line="38" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="24">"wais"<pos:position pos:line="38" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="32">len<pos:position pos:line="38" pos:column="35"/></name></expr></argument>)<pos:position pos:line="38" pos:column="36"/></argument_list></call> <operator pos:line="38" pos:column="37">==<pos:position pos:line="38" pos:column="39"/></operator> <literal type="number" pos:line="38" pos:column="40">0<pos:position pos:line="38" pos:column="41"/></literal></expr>)<pos:position pos:line="38" pos:column="42"/></condition><then pos:line="38" pos:column="42">
        <block type="pseudo"><return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">PROTO_WAIS<pos:position pos:line="39" pos:column="26"/></name></expr>;<pos:position pos:line="39" pos:column="27"/></return></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name pos:line="41" pos:column="9">strncasecmp<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">b<pos:position pos:line="41" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="24">"cache_object"<pos:position pos:line="41" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="40">len<pos:position pos:line="41" pos:column="43"/></name></expr></argument>)<pos:position pos:line="41" pos:column="44"/></argument_list></call> <operator pos:line="41" pos:column="45">==<pos:position pos:line="41" pos:column="47"/></operator> <literal type="number" pos:line="41" pos:column="48">0<pos:position pos:line="41" pos:column="49"/></literal></expr>)<pos:position pos:line="41" pos:column="50"/></condition><then pos:line="41" pos:column="50">
        <block type="pseudo"><return pos:line="42" pos:column="9">return <expr><name pos:line="42" pos:column="16">PROTO_CACHEOBJ<pos:position pos:line="42" pos:column="30"/></name></expr>;<pos:position pos:line="42" pos:column="31"/></return></block></then></if>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name pos:line="44" pos:column="9">strncasecmp<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name pos:line="44" pos:column="21">b<pos:position pos:line="44" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="24">"urn"<pos:position pos:line="44" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="31">len<pos:position pos:line="44" pos:column="34"/></name></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call> <operator pos:line="44" pos:column="36">==<pos:position pos:line="44" pos:column="38"/></operator> <literal type="number" pos:line="44" pos:column="39">0<pos:position pos:line="44" pos:column="40"/></literal></expr>)<pos:position pos:line="44" pos:column="41"/></condition><then pos:line="44" pos:column="41">
        <block type="pseudo"><return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">PROTO_URN<pos:position pos:line="45" pos:column="25"/></name></expr>;<pos:position pos:line="45" pos:column="26"/></return></block></then></if>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><call><name pos:line="47" pos:column="9">strncasecmp<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><name pos:line="47" pos:column="21">b<pos:position pos:line="47" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="24">"whois"<pos:position pos:line="47" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="33">len<pos:position pos:line="47" pos:column="36"/></name></expr></argument>)<pos:position pos:line="47" pos:column="37"/></argument_list></call> <operator pos:line="47" pos:column="38">==<pos:position pos:line="47" pos:column="40"/></operator> <literal type="number" pos:line="47" pos:column="41">0<pos:position pos:line="47" pos:column="42"/></literal></expr>)<pos:position pos:line="47" pos:column="43"/></condition><then pos:line="47" pos:column="43">
        <block type="pseudo"><return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">PROTO_WHOIS<pos:position pos:line="48" pos:column="27"/></name></expr>;<pos:position pos:line="48" pos:column="28"/></return></block></then></if>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><call><name pos:line="50" pos:column="9">strncasecmp<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name pos:line="50" pos:column="21">b<pos:position pos:line="50" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="24">"internal"<pos:position pos:line="50" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">len<pos:position pos:line="50" pos:column="39"/></name></expr></argument>)<pos:position pos:line="50" pos:column="40"/></argument_list></call> <operator pos:line="50" pos:column="41">==<pos:position pos:line="50" pos:column="43"/></operator> <literal type="number" pos:line="50" pos:column="44">0<pos:position pos:line="50" pos:column="45"/></literal></expr>)<pos:position pos:line="50" pos:column="46"/></condition><then pos:line="50" pos:column="46">
        <block type="pseudo"><return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">PROTO_INTERNAL<pos:position pos:line="51" pos:column="30"/></name></expr>;<pos:position pos:line="51" pos:column="31"/></return></block></then></if>

    <return pos:line="53" pos:column="5">return <expr><name pos:line="53" pos:column="12">PROTO_NONE<pos:position pos:line="53" pos:column="22"/></name></expr>;<pos:position pos:line="53" pos:column="23"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
