<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5424_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Relay<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">stopOriginWait<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">code<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">originWaitInProgress<pos:position pos:line="4" pos:column="29"/></name></expr>)<pos:position pos:line="4" pos:column="30"/></condition><then pos:line="4" pos:column="30"> <block pos:line="4" pos:column="31">{
        <decl_stmt><decl><type><name><name pos:line="5" pos:column="9">CbcPointer<pos:position pos:line="5" pos:column="19"/></name><argument_list type="generic" pos:line="5" pos:column="19">&lt;<argument><expr><name pos:line="5" pos:column="20">ConnStateData<pos:position pos:line="5" pos:column="33"/></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="37"/></argument_list></name> <modifier pos:line="5" pos:column="35">&amp;<pos:position pos:line="5" pos:column="40"/></modifier></type><name pos:line="5" pos:column="36">mgr<pos:position pos:line="5" pos:column="39"/></name> <init pos:line="5" pos:column="40">= <expr><name><name pos:line="5" pos:column="42">fwd<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">-&gt;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="47">request<pos:position pos:line="5" pos:column="54"/></name><operator pos:line="5" pos:column="54">-&gt;<pos:position pos:line="5" pos:column="59"/></operator><name pos:line="5" pos:column="56">clientConnectionManager<pos:position pos:line="5" pos:column="79"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="80"/></decl_stmt>
        <if pos:line="6" pos:column="9">if <condition pos:line="6" pos:column="12">(<expr><call><name><name pos:line="6" pos:column="13">mgr<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">.<pos:position pos:line="6" pos:column="17"/></operator><name pos:line="6" pos:column="17">valid<pos:position pos:line="6" pos:column="22"/></name></name><argument_list pos:line="6" pos:column="22">()<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25"> <block pos:line="6" pos:column="26">{
            <if pos:line="7" pos:column="13">if <condition pos:line="7" pos:column="16">(<decl><type><name><name pos:line="7" pos:column="17">Ftp<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">::<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">Server<pos:position pos:line="7" pos:column="28"/></name></name> <modifier pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></modifier></type><name pos:line="7" pos:column="30">srv<pos:position pos:line="7" pos:column="33"/></name> <init pos:line="7" pos:column="34">= <expr><cast type="dynamic" pos:line="7" pos:column="36">dynamic_cast<argument_list type="generic" pos:line="7" pos:column="48">&lt;<argument><expr><name><name pos:line="7" pos:column="49">Ftp<pos:position pos:line="7" pos:column="52"/></name><operator pos:line="7" pos:column="52">::<pos:position pos:line="7" pos:column="54"/></operator><name pos:line="7" pos:column="54">Server<pos:position pos:line="7" pos:column="60"/></name></name><operator pos:line="7" pos:column="60">*<pos:position pos:line="7" pos:column="61"/></operator></expr></argument>&gt;<pos:position pos:line="7" pos:column="65"/></argument_list><argument_list pos:line="7" pos:column="62">(<argument><expr><call><name><name pos:line="7" pos:column="63">mgr<pos:position pos:line="7" pos:column="66"/></name><operator pos:line="7" pos:column="66">.<pos:position pos:line="7" pos:column="67"/></operator><name pos:line="7" pos:column="67">get<pos:position pos:line="7" pos:column="70"/></name></name><argument_list pos:line="7" pos:column="70">()<pos:position pos:line="7" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="73"/></argument_list></cast></expr></init></decl>)<pos:position pos:line="7" pos:column="74"/></condition><then pos:line="7" pos:column="74"> <block pos:line="7" pos:column="75">{
                <typedef pos:line="8" pos:column="17">typedef <type><name><name pos:line="8" pos:column="25">UnaryMemFunT<pos:position pos:line="8" pos:column="37"/></name><argument_list type="generic" pos:line="8" pos:column="37">&lt;<argument><expr><name><name pos:line="8" pos:column="38">Ftp<pos:position pos:line="8" pos:column="41"/></name><operator pos:line="8" pos:column="41">::<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="43">Server<pos:position pos:line="8" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="51">int<pos:position pos:line="8" pos:column="54"/></name></expr></argument>&gt;<pos:position pos:line="8" pos:column="58"/></argument_list></name></type> <name pos:line="8" pos:column="56">CbDialer<pos:position pos:line="8" pos:column="64"/></name>;<pos:position pos:line="8" pos:column="65"/></typedef>
                <decl_stmt><decl><type><name><name pos:line="9" pos:column="17">AsyncCall<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">::<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">Pointer<pos:position pos:line="9" pos:column="35"/></name></name></type> <name pos:line="9" pos:column="36">call<pos:position pos:line="9" pos:column="40"/></name> <init pos:line="9" pos:column="41">= <expr><call><name pos:line="9" pos:column="43">asyncCall<pos:position pos:line="9" pos:column="52"/></name><argument_list pos:line="9" pos:column="52">(<argument><expr><literal type="number" pos:line="9" pos:column="53">11<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="57">3<pos:position pos:line="9" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="60">"Ftp::Server::stopWaitingForOrigin"<pos:position pos:line="9" pos:column="95"/></literal></expr></argument>,
                                                    <argument><expr><call><name pos:line="10" pos:column="53">CbDialer<pos:position pos:line="10" pos:column="61"/></name><argument_list pos:line="10" pos:column="61">(<argument><expr><name pos:line="10" pos:column="62">srv<pos:position pos:line="10" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="67">&amp;<pos:position pos:line="10" pos:column="72"/></operator><name><name pos:line="10" pos:column="68">Ftp<pos:position pos:line="10" pos:column="71"/></name><operator pos:line="10" pos:column="71">::<pos:position pos:line="10" pos:column="73"/></operator><name pos:line="10" pos:column="73">Server<pos:position pos:line="10" pos:column="79"/></name><operator pos:line="10" pos:column="79">::<pos:position pos:line="10" pos:column="81"/></operator><name pos:line="10" pos:column="81">stopWaitingForOrigin<pos:position pos:line="10" pos:column="101"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="103">code<pos:position pos:line="10" pos:column="107"/></name></expr></argument>)<pos:position pos:line="10" pos:column="108"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="109"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="110"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="11" pos:column="17">ScheduleCallHere<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">call<pos:position pos:line="11" pos:column="38"/></name></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="12" pos:column="14"/></block></then></if>
        }<pos:position pos:line="13" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="14" pos:column="9">originWaitInProgress<pos:position pos:line="14" pos:column="29"/></name> <operator pos:line="14" pos:column="30">=<pos:position pos:line="14" pos:column="31"/></operator> <literal type="boolean" pos:line="14" pos:column="32">false<pos:position pos:line="14" pos:column="37"/></literal></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
