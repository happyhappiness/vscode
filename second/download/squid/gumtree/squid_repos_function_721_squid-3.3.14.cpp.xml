<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_721_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">WIN32_build_argv<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">cmd<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">argvlen<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><literal type="number" pos:line="3" pos:column="19">0<pos:position pos:line="3" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">word<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><name pos:line="6" pos:column="5">WIN32_argc<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <literal type="number" pos:line="6" pos:column="18">1<pos:position pos:line="6" pos:column="19"/></literal></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">WIN32_argv<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <operator pos:line="7" pos:column="18">(<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="19">char<pos:position pos:line="7" pos:column="23"/></name> <operator pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></operator><operator pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></operator><operator pos:line="7" pos:column="26">)<pos:position pos:line="7" pos:column="27"/></operator> <call><name pos:line="7" pos:column="28">xmalloc<pos:position pos:line="7" pos:column="35"/></name> <argument_list pos:line="7" pos:column="36">(<argument><expr><operator pos:line="7" pos:column="37">(<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="38">WIN32_argc<pos:position pos:line="7" pos:column="48"/></name><operator pos:line="7" pos:column="48">+<pos:position pos:line="7" pos:column="49"/></operator><literal type="number" pos:line="7" pos:column="49">1<pos:position pos:line="7" pos:column="50"/></literal><operator pos:line="7" pos:column="50">)<pos:position pos:line="7" pos:column="51"/></operator> <operator pos:line="7" pos:column="52">*<pos:position pos:line="7" pos:column="53"/></operator> <sizeof pos:line="7" pos:column="54">sizeof <argument_list pos:line="7" pos:column="61">(<argument><expr><name pos:line="7" pos:column="62">char<pos:position pos:line="7" pos:column="66"/></name> <operator pos:line="7" pos:column="67">*<pos:position pos:line="7" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="7" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="7" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">WIN32_argv<pos:position pos:line="8" pos:column="15"/></name><index pos:line="8" pos:column="15">[<expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>]<pos:position pos:line="8" pos:column="18"/></index></name><operator pos:line="8" pos:column="18">=<pos:position pos:line="8" pos:column="19"/></operator><call><name pos:line="8" pos:column="19">xstrdup<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">WIN32_module_name<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>
    <comment type="block" pos:line="9" pos:column="5">/* Scan command line until there is nothing left. */</comment>

    <while pos:line="11" pos:column="5">while <condition pos:line="11" pos:column="11">(<expr><operator pos:line="11" pos:column="12">*<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">cmd<pos:position pos:line="11" pos:column="16"/></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition> <block pos:line="11" pos:column="18">{
        <comment type="block" pos:line="12" pos:column="9">/* Ignore spaces */</comment>

        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">xisspace<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><operator pos:line="14" pos:column="22">*<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">cmd<pos:position pos:line="14" pos:column="26"/></name></expr></argument>)<pos:position pos:line="14" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28"> <block pos:line="14" pos:column="29">{
            <expr_stmt><expr><operator pos:line="15" pos:column="13">++<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">cmd<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
            <continue pos:line="16" pos:column="13">continue;<pos:position pos:line="16" pos:column="22"/></continue>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="19" pos:column="9">/* Found the beginning of an argument. */</comment>
        <expr_stmt><expr><name pos:line="20" pos:column="9">word<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <name pos:line="20" pos:column="16">cmd<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt>

        <while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><operator pos:line="22" pos:column="16">*<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">cmd<pos:position pos:line="22" pos:column="20"/></name></expr>)<pos:position pos:line="22" pos:column="21"/></condition> <block pos:line="22" pos:column="22">{
            <expr_stmt><expr><operator pos:line="23" pos:column="13">++<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">cmd<pos:position pos:line="23" pos:column="18"/></name></expr>;<pos:position pos:line="23" pos:column="19"/></expr_stmt>		<comment type="block" pos:line="23" pos:column="33">/* Skip over this character */</comment>

            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><call><name pos:line="25" pos:column="17">xisspace<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><operator pos:line="25" pos:column="26">*<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">cmd<pos:position pos:line="25" pos:column="30"/></name></expr></argument>)<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="32"/></condition><then pos:line="25" pos:column="32">	<comment type="block" pos:line="25" pos:column="33">/* End of argument if space */</comment>
                <block type="pseudo"><break pos:line="26" pos:column="17">break;<pos:position pos:line="26" pos:column="23"/></break></block></then></if>
        }<pos:position pos:line="27" pos:column="10"/></block></while>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">*<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">cmd<pos:position pos:line="29" pos:column="17"/></name></expr>)<pos:position pos:line="29" pos:column="18"/></condition><then pos:line="29" pos:column="18">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="30" pos:column="13">*<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">cmd<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">++<pos:position pos:line="30" pos:column="19"/></operator> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <literal type="char" pos:line="30" pos:column="22">'\0'<pos:position pos:line="30" pos:column="26"/></literal></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt></block></then></if>		<comment type="block" pos:line="30" pos:column="41">/* Terminate `word' */</comment>

        <comment type="block" pos:line="32" pos:column="9">/* See if we need to allocate more space for argv */</comment>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">WIN32_argc<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">&gt;=<pos:position pos:line="33" pos:column="29"/></operator> <name pos:line="33" pos:column="27">argvlen<pos:position pos:line="33" pos:column="34"/></name></expr>)<pos:position pos:line="33" pos:column="35"/></condition><then pos:line="33" pos:column="35"> <block pos:line="33" pos:column="36">{
            <expr_stmt><expr><name pos:line="34" pos:column="13">argvlen<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">WIN32_argc<pos:position pos:line="34" pos:column="33"/></name> <operator pos:line="34" pos:column="34">+<pos:position pos:line="34" pos:column="35"/></operator> <literal type="number" pos:line="34" pos:column="36">1<pos:position pos:line="34" pos:column="37"/></literal></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name pos:line="35" pos:column="13">WIN32_argv<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <operator pos:line="35" pos:column="26">(<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="27">char<pos:position pos:line="35" pos:column="31"/></name> <operator pos:line="35" pos:column="32">*<pos:position pos:line="35" pos:column="33"/></operator><operator pos:line="35" pos:column="33">*<pos:position pos:line="35" pos:column="34"/></operator><operator pos:line="35" pos:column="34">)<pos:position pos:line="35" pos:column="35"/></operator> <call><name pos:line="35" pos:column="36">xrealloc<pos:position pos:line="35" pos:column="44"/></name> <argument_list pos:line="35" pos:column="45">(<argument><expr><name pos:line="35" pos:column="46">WIN32_argv<pos:position pos:line="35" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="58">(<pos:position pos:line="35" pos:column="59"/></operator><literal type="number" pos:line="35" pos:column="59">1<pos:position pos:line="35" pos:column="60"/></literal> <operator pos:line="35" pos:column="61">+<pos:position pos:line="35" pos:column="62"/></operator> <name pos:line="35" pos:column="63">argvlen<pos:position pos:line="35" pos:column="70"/></name><operator pos:line="35" pos:column="70">)<pos:position pos:line="35" pos:column="71"/></operator> <operator pos:line="35" pos:column="72">*<pos:position pos:line="35" pos:column="73"/></operator> <sizeof pos:line="35" pos:column="74">sizeof <argument_list pos:line="35" pos:column="81">(<argument><expr><name pos:line="35" pos:column="82">char<pos:position pos:line="35" pos:column="86"/></name> <operator pos:line="35" pos:column="87">*<pos:position pos:line="35" pos:column="88"/></operator></expr></argument>)<pos:position pos:line="35" pos:column="89"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="91"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="38" pos:column="9">/* Add word to argv file. */</comment>
        <expr_stmt><expr><name><name pos:line="39" pos:column="9">WIN32_argv<pos:position pos:line="39" pos:column="19"/></name><index pos:line="39" pos:column="19">[<expr><name pos:line="39" pos:column="20">WIN32_argc<pos:position pos:line="39" pos:column="30"/></name><operator pos:line="39" pos:column="30">++<pos:position pos:line="39" pos:column="32"/></operator></expr>]<pos:position pos:line="39" pos:column="33"/></index></name> <operator pos:line="39" pos:column="34">=<pos:position pos:line="39" pos:column="35"/></operator> <name pos:line="39" pos:column="36">word<pos:position pos:line="39" pos:column="40"/></name></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></while>

    <expr_stmt><expr><name><name pos:line="42" pos:column="5">WIN32_argv<pos:position pos:line="42" pos:column="15"/></name><index pos:line="42" pos:column="15">[<expr><name pos:line="42" pos:column="16">WIN32_argc<pos:position pos:line="42" pos:column="26"/></name></expr>]<pos:position pos:line="42" pos:column="27"/></index></name> <operator pos:line="42" pos:column="28">=<pos:position pos:line="42" pos:column="29"/></operator> <name pos:line="42" pos:column="30">NULL<pos:position pos:line="42" pos:column="34"/></name></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
