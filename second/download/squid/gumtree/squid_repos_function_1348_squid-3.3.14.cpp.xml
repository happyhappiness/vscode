<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1348_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HelperChildConfig<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">parseConfig<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">()<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <specifier pos:line="4" pos:column="10">const<pos:position pos:line="4" pos:column="15"/></specifier> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">token<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><call><name pos:line="4" pos:column="25">strtok<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name pos:line="4" pos:column="32">NULL<pos:position pos:line="4" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="38">w_space<pos:position pos:line="4" pos:column="45"/></name></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">token<pos:position pos:line="6" pos:column="15"/></name></expr>)<pos:position pos:line="6" pos:column="16"/></condition><then pos:line="6" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="9">self_destruct<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">()<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="9" pos:column="5">/* starts with a bare number for the max... back-compatible */</comment>
    <expr_stmt><expr><name pos:line="10" pos:column="5">n_max<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <call><name pos:line="10" pos:column="13">xatoui<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">token<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">n_max<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">&lt;<pos:position pos:line="12" pos:column="19"/></operator> <literal type="number" pos:line="12" pos:column="17">1<pos:position pos:line="12" pos:column="18"/></literal></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19"> <block pos:line="12" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="19">DBG_CRITICAL<pos:position pos:line="13" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="33">"ERROR: The maximum number of processes cannot be less than 1."<pos:position pos:line="13" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="98"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">self_destruct<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">()<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="17" pos:column="5">/* Parse extension options */</comment>
    <for pos:line="18" pos:column="5">for <control pos:line="18" pos:column="9">(<init pos:line="18" pos:column="10">;<pos:position pos:line="18" pos:column="11"/></init> <condition><expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">token<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <call><name pos:line="18" pos:column="21">strtok<pos:position pos:line="18" pos:column="27"/></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">NULL<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="34">w_space<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call><operator pos:line="18" pos:column="42">)<pos:position pos:line="18" pos:column="43"/></operator></expr> ;<pos:position pos:line="18" pos:column="45"/></condition><incr/>)<pos:position pos:line="18" pos:column="46"/></control> <block pos:line="18" pos:column="47">{
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">strncmp<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">token<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="28">"startup="<pos:position pos:line="19" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="40">8<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call> <operator pos:line="19" pos:column="43">==<pos:position pos:line="19" pos:column="45"/></operator> <literal type="number" pos:line="19" pos:column="46">0<pos:position pos:line="19" pos:column="47"/></literal></expr>)<pos:position pos:line="19" pos:column="48"/></condition><then pos:line="19" pos:column="48"> <block pos:line="19" pos:column="49">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">n_startup<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <call><name pos:line="20" pos:column="25">xatoui<pos:position pos:line="20" pos:column="31"/></name><argument_list pos:line="20" pos:column="31">(<argument><expr><name pos:line="20" pos:column="32">token<pos:position pos:line="20" pos:column="37"/></name> <operator pos:line="20" pos:column="38">+<pos:position pos:line="20" pos:column="39"/></operator> <literal type="number" pos:line="20" pos:column="40">8<pos:position pos:line="20" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></then> <elseif pos:line="21" pos:column="11">else <if pos:line="21" pos:column="16">if <condition pos:line="21" pos:column="19">(<expr><call><name pos:line="21" pos:column="20">strncmp<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">token<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="35">"idle="<pos:position pos:line="21" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="44">5<pos:position pos:line="21" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call> <operator pos:line="21" pos:column="47">==<pos:position pos:line="21" pos:column="49"/></operator> <literal type="number" pos:line="21" pos:column="50">0<pos:position pos:line="21" pos:column="51"/></literal></expr>)<pos:position pos:line="21" pos:column="52"/></condition><then pos:line="21" pos:column="52"> <block pos:line="21" pos:column="53">{
            <expr_stmt><expr><name pos:line="22" pos:column="13">n_idle<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <call><name pos:line="22" pos:column="22">xatoui<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">token<pos:position pos:line="22" pos:column="34"/></name> <operator pos:line="22" pos:column="35">+<pos:position pos:line="22" pos:column="36"/></operator> <literal type="number" pos:line="22" pos:column="37">5<pos:position pos:line="22" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="40"/></expr_stmt>
            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">(<expr><name pos:line="23" pos:column="17">n_idle<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">&lt;<pos:position pos:line="23" pos:column="28"/></operator> <literal type="number" pos:line="23" pos:column="26">1<pos:position pos:line="23" pos:column="27"/></literal></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="24" pos:column="17">debugs<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><literal type="number" pos:line="24" pos:column="24">0<pos:position pos:line="24" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="27">DBG_CRITICAL<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="41">"WARNING OVERIDE: Using idle=0 for helpers causes request failures. Overiding to use idle=1 instead."<pos:position pos:line="24" pos:column="142"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="143"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="144"/></expr_stmt>
                <expr_stmt><expr><name pos:line="25" pos:column="17">n_idle<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <literal type="number" pos:line="25" pos:column="26">1<pos:position pos:line="25" pos:column="27"/></literal></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
            }<pos:position pos:line="26" pos:column="14"/></block></then></if>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if></elseif> <elseif pos:line="27" pos:column="11">else <if pos:line="27" pos:column="16">if <condition pos:line="27" pos:column="19">(<expr><call><name pos:line="27" pos:column="20">strncmp<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><name pos:line="27" pos:column="28">token<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="35">"concurrency="<pos:position pos:line="27" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="51">12<pos:position pos:line="27" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="54"/></argument_list></call> <operator pos:line="27" pos:column="55">==<pos:position pos:line="27" pos:column="57"/></operator> <literal type="number" pos:line="27" pos:column="58">0<pos:position pos:line="27" pos:column="59"/></literal></expr>)<pos:position pos:line="27" pos:column="60"/></condition><then pos:line="27" pos:column="60"> <block pos:line="27" pos:column="61">{
            <expr_stmt><expr><name pos:line="28" pos:column="13">concurrency<pos:position pos:line="28" pos:column="24"/></name> <operator pos:line="28" pos:column="25">=<pos:position pos:line="28" pos:column="26"/></operator> <call><name pos:line="28" pos:column="27">xatoui<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">token<pos:position pos:line="28" pos:column="39"/></name> <operator pos:line="28" pos:column="40">+<pos:position pos:line="28" pos:column="41"/></operator> <literal type="number" pos:line="28" pos:column="42">12<pos:position pos:line="28" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if></elseif> <else pos:line="29" pos:column="11">else <block pos:line="29" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">debugs<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><literal type="number" pos:line="30" pos:column="20">0<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="23">DBG_PARSE_NOTE<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">(<argument><expr><name pos:line="30" pos:column="38">DBG_IMPORTANT<pos:position pos:line="30" pos:column="51"/></name></expr></argument>)<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="54">"ERROR: Undefined option: "<pos:position pos:line="30" pos:column="81"/></literal> <operator pos:line="30" pos:column="82">&lt;&lt;<pos:position pos:line="30" pos:column="90"/></operator> <name pos:line="30" pos:column="85">token<pos:position pos:line="30" pos:column="90"/></name> <operator pos:line="30" pos:column="91">&lt;&lt;<pos:position pos:line="30" pos:column="99"/></operator> <literal type="string" pos:line="30" pos:column="94">"."<pos:position pos:line="30" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="99"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">self_destruct<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">()<pos:position pos:line="31" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></else></if>
    }<pos:position pos:line="33" pos:column="6"/></block></for>

    <comment type="block" pos:line="35" pos:column="5">/* simple sanity. */</comment>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">n_startup<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">&gt;<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="21">n_max<pos:position pos:line="37" pos:column="26"/></name></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27"> <block pos:line="37" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">debugs<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="number" pos:line="38" pos:column="16">0<pos:position pos:line="38" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="19">DBG_CRITICAL<pos:position pos:line="38" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="33">"WARNING OVERIDE: Capping startup="<pos:position pos:line="38" pos:column="68"/></literal> <operator pos:line="38" pos:column="69">&lt;&lt;<pos:position pos:line="38" pos:column="77"/></operator> <name pos:line="38" pos:column="72">n_startup<pos:position pos:line="38" pos:column="81"/></name> <operator pos:line="38" pos:column="82">&lt;&lt;<pos:position pos:line="38" pos:column="90"/></operator> <literal type="string" pos:line="38" pos:column="85">" to the defined maximum ("<pos:position pos:line="38" pos:column="112"/></literal> <operator pos:line="38" pos:column="113">&lt;&lt;<pos:position pos:line="38" pos:column="121"/></operator> <name pos:line="38" pos:column="116">n_max<pos:position pos:line="38" pos:column="121"/></name> <operator pos:line="38" pos:column="122">&lt;&lt;<pos:position pos:line="38" pos:column="130"/></operator><literal type="string" pos:line="38" pos:column="124">")"<pos:position pos:line="38" pos:column="127"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="128"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="129"/></expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">n_startup<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">=<pos:position pos:line="39" pos:column="20"/></operator> <name pos:line="39" pos:column="21">n_max<pos:position pos:line="39" pos:column="26"/></name></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">n_idle<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">&gt;<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="18">n_max<pos:position pos:line="42" pos:column="23"/></name></expr>)<pos:position pos:line="42" pos:column="24"/></condition><then pos:line="42" pos:column="24"> <block pos:line="42" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">debugs<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><literal type="number" pos:line="43" pos:column="16">0<pos:position pos:line="43" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="19">DBG_CRITICAL<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="33">"WARNING OVERIDE: Capping idle="<pos:position pos:line="43" pos:column="65"/></literal> <operator pos:line="43" pos:column="66">&lt;&lt;<pos:position pos:line="43" pos:column="74"/></operator> <name pos:line="43" pos:column="69">n_idle<pos:position pos:line="43" pos:column="75"/></name> <operator pos:line="43" pos:column="76">&lt;&lt;<pos:position pos:line="43" pos:column="84"/></operator> <literal type="string" pos:line="43" pos:column="79">" to the defined maximum ("<pos:position pos:line="43" pos:column="106"/></literal> <operator pos:line="43" pos:column="107">&lt;&lt;<pos:position pos:line="43" pos:column="115"/></operator> <name pos:line="43" pos:column="110">n_max<pos:position pos:line="43" pos:column="115"/></name> <operator pos:line="43" pos:column="116">&lt;&lt;<pos:position pos:line="43" pos:column="124"/></operator><literal type="string" pos:line="43" pos:column="118">")"<pos:position pos:line="43" pos:column="121"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="122"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="123"/></expr_stmt>
        <expr_stmt><expr><name pos:line="44" pos:column="9">n_idle<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <name pos:line="44" pos:column="18">n_max<pos:position pos:line="44" pos:column="23"/></name></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
