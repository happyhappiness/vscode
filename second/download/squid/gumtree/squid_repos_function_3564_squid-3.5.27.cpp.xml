<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3564_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">prepareLogWithRequestDetails<pos:position pos:line="2" pos:column="29"/></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">HttpRequest<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type> <name pos:line="2" pos:column="44">request<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="53">AccessLogEntry<pos:position pos:line="2" pos:column="67"/></name><operator pos:line="2" pos:column="67">::<pos:position pos:line="2" pos:column="69"/></operator><name pos:line="2" pos:column="69">Pointer<pos:position pos:line="2" pos:column="76"/></name></name> <modifier pos:line="2" pos:column="77">&amp;<pos:position pos:line="2" pos:column="82"/></modifier></type><name pos:line="2" pos:column="78">aLogEntry<pos:position pos:line="2" pos:column="87"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="88"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">request<pos:position pos:line="4" pos:column="19"/></name></expr></argument>)<pos:position pos:line="4" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">aLogEntry<pos:position pos:line="5" pos:column="21"/></name> <operator pos:line="5" pos:column="22">!=<pos:position pos:line="5" pos:column="24"/></operator> <name pos:line="5" pos:column="25">NULL<pos:position pos:line="5" pos:column="29"/></name></expr></argument>)<pos:position pos:line="5" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="31"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">Config<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">onoff<pos:position pos:line="7" pos:column="21"/></name><operator pos:line="7" pos:column="21">.<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">log_mime_hdrs<pos:position pos:line="7" pos:column="35"/></name></name></expr>)<pos:position pos:line="7" pos:column="36"/></condition><then pos:line="7" pos:column="36"> <block pos:line="7" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">Packer<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">p<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">MemBuf<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">mb<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">mb<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">.<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">init<pos:position pos:line="10" pos:column="16"/></name></name><argument_list pos:line="10" pos:column="16">()<pos:position pos:line="10" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">packerToMemInit<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><operator pos:line="11" pos:column="25">&amp;<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="26">p<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="29">&amp;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="30">mb<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">request<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">header<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">.<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">packInto<pos:position pos:line="12" pos:column="33"/></name></name><argument_list pos:line="12" pos:column="33">(<argument><expr><operator pos:line="12" pos:column="34">&amp;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="35">p<pos:position pos:line="12" pos:column="36"/></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
        <comment type="line" pos:line="13" pos:column="9">//This is the request after adaptation or redirection</comment>
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">aLogEntry<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">headers<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">.<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="28">adapted_request<pos:position pos:line="14" pos:column="43"/></name></name> <operator pos:line="14" pos:column="44">=<pos:position pos:line="14" pos:column="45"/></operator> <call><name pos:line="14" pos:column="46">xstrdup<pos:position pos:line="14" pos:column="53"/></name><argument_list pos:line="14" pos:column="53">(<argument><expr><name><name pos:line="14" pos:column="54">mb<pos:position pos:line="14" pos:column="56"/></name><operator pos:line="14" pos:column="56">.<pos:position pos:line="14" pos:column="57"/></operator><name pos:line="14" pos:column="57">buf<pos:position pos:line="14" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="62"/></expr_stmt>

        <comment type="line" pos:line="16" pos:column="9">// the virgin request is saved to aLogEntry-&gt;request</comment>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">aLogEntry<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">-&gt;<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="24">request<pos:position pos:line="17" pos:column="31"/></name></name></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32"> <block pos:line="17" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">packerClean<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><operator pos:line="18" pos:column="25">&amp;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="26">p<pos:position pos:line="18" pos:column="27"/></name></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="19" pos:column="13">mb<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">reset<pos:position pos:line="19" pos:column="21"/></name></name><argument_list pos:line="19" pos:column="21">()<pos:position pos:line="19" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">packerToMemInit<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><operator pos:line="20" pos:column="29">&amp;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="30">p<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="33">&amp;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="34">mb<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">aLogEntry<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">-&gt;<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="24">request<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">header<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">.<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="40">packInto<pos:position pos:line="21" pos:column="48"/></name></name><argument_list pos:line="21" pos:column="48">(<argument><expr><operator pos:line="21" pos:column="49">&amp;<pos:position pos:line="21" pos:column="54"/></operator><name pos:line="21" pos:column="50">p<pos:position pos:line="21" pos:column="51"/></name></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="22" pos:column="13">aLogEntry<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">-&gt;<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="24">headers<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">.<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="32">request<pos:position pos:line="22" pos:column="39"/></name></name> <operator pos:line="22" pos:column="40">=<pos:position pos:line="22" pos:column="41"/></operator> <call><name pos:line="22" pos:column="42">xstrdup<pos:position pos:line="22" pos:column="49"/></name><argument_list pos:line="22" pos:column="49">(<argument><expr><name><name pos:line="22" pos:column="50">mb<pos:position pos:line="22" pos:column="52"/></name><operator pos:line="22" pos:column="52">.<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="53">buf<pos:position pos:line="22" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>

<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><name pos:line="25" pos:column="5">USE_ADAPTATION<pos:position pos:line="25" pos:column="19"/></name></expr></cpp:if>
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">const<pos:position pos:line="26" pos:column="14"/></specifier> <name><name pos:line="26" pos:column="15">Adaptation<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">::<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">History<pos:position pos:line="26" pos:column="34"/></name><operator pos:line="26" pos:column="34">::<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="36">Pointer<pos:position pos:line="26" pos:column="43"/></name></name></type> <name pos:line="26" pos:column="44">ah<pos:position pos:line="26" pos:column="46"/></name> <init pos:line="26" pos:column="47">= <expr><call><name><name pos:line="26" pos:column="49">request<pos:position pos:line="26" pos:column="56"/></name><operator pos:line="26" pos:column="56">-&gt;<pos:position pos:line="26" pos:column="61"/></operator><name pos:line="26" pos:column="58">adaptLogHistory<pos:position pos:line="26" pos:column="73"/></name></name><argument_list pos:line="26" pos:column="73">()<pos:position pos:line="26" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="76"/></decl_stmt>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">ah<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">!=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">NULL<pos:position pos:line="27" pos:column="23"/></name></expr>)<pos:position pos:line="27" pos:column="24"/></condition><then pos:line="27" pos:column="24"> <block pos:line="27" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">packerClean<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><operator pos:line="28" pos:column="25">&amp;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="26">p<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">mb<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">.<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">reset<pos:position pos:line="29" pos:column="21"/></name></name><argument_list pos:line="29" pos:column="21">()<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">packerToMemInit<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><operator pos:line="30" pos:column="29">&amp;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="30">p<pos:position pos:line="30" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="33">&amp;<pos:position pos:line="30" pos:column="38"/></operator><name pos:line="30" pos:column="34">mb<pos:position pos:line="30" pos:column="36"/></name></expr></argument>)<pos:position pos:line="30" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="31" pos:column="13">ah<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">-&gt;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="17">lastMeta<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">.<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="26">packInto<pos:position pos:line="31" pos:column="34"/></name></name><argument_list pos:line="31" pos:column="34">(<argument><expr><operator pos:line="31" pos:column="35">&amp;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="36">p<pos:position pos:line="31" pos:column="37"/></name></expr></argument>)<pos:position pos:line="31" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">aLogEntry<pos:position pos:line="32" pos:column="22"/></name><operator pos:line="32" pos:column="22">-&gt;<pos:position pos:line="32" pos:column="27"/></operator><name pos:line="32" pos:column="24">adapt<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">.<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">last_meta<pos:position pos:line="32" pos:column="39"/></name></name> <operator pos:line="32" pos:column="40">=<pos:position pos:line="32" pos:column="41"/></operator> <call><name pos:line="32" pos:column="42">xstrdup<pos:position pos:line="32" pos:column="49"/></name><argument_list pos:line="32" pos:column="49">(<argument><expr><name><name pos:line="32" pos:column="50">mb<pos:position pos:line="32" pos:column="52"/></name><operator pos:line="32" pos:column="52">.<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="53">buf<pos:position pos:line="32" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="58"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="36" pos:column="9">packerClean<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><operator pos:line="36" pos:column="21">&amp;<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="22">p<pos:position pos:line="36" pos:column="23"/></name></expr></argument>)<pos:position pos:line="36" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="37" pos:column="9">mb<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">.<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="12">clean<pos:position pos:line="37" pos:column="17"/></name></name><argument_list pos:line="37" pos:column="17">()<pos:position pos:line="37" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><name pos:line="40" pos:column="5">ICAP_CLIENT<pos:position pos:line="40" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><specifier pos:line="41" pos:column="5">const<pos:position pos:line="41" pos:column="10"/></specifier> <name><name pos:line="41" pos:column="11">Adaptation<pos:position pos:line="41" pos:column="21"/></name><operator pos:line="41" pos:column="21">::<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">Icap<pos:position pos:line="41" pos:column="27"/></name><operator pos:line="41" pos:column="27">::<pos:position pos:line="41" pos:column="29"/></operator><name pos:line="41" pos:column="29">History<pos:position pos:line="41" pos:column="36"/></name><operator pos:line="41" pos:column="36">::<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="38">Pointer<pos:position pos:line="41" pos:column="45"/></name></name></type> <name pos:line="41" pos:column="46">ih<pos:position pos:line="41" pos:column="48"/></name> <init pos:line="41" pos:column="49">= <expr><call><name><name pos:line="41" pos:column="51">request<pos:position pos:line="41" pos:column="58"/></name><operator pos:line="41" pos:column="58">-&gt;<pos:position pos:line="41" pos:column="63"/></operator><name pos:line="41" pos:column="60">icapHistory<pos:position pos:line="41" pos:column="71"/></name></name><argument_list pos:line="41" pos:column="71">()<pos:position pos:line="41" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="74"/></decl_stmt>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">ih<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">!=<pos:position pos:line="42" pos:column="14"/></operator> <name pos:line="42" pos:column="15">NULL<pos:position pos:line="42" pos:column="19"/></name></expr>)<pos:position pos:line="42" pos:column="20"/></condition><then pos:line="42" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="43" pos:column="9">aLogEntry<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">-&gt;<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="20">icap<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">.<pos:position pos:line="43" pos:column="25"/></operator><name pos:line="43" pos:column="25">processingTime<pos:position pos:line="43" pos:column="39"/></name></name> <operator pos:line="43" pos:column="40">=<pos:position pos:line="43" pos:column="41"/></operator> <call><name><name pos:line="43" pos:column="42">ih<pos:position pos:line="43" pos:column="44"/></name><operator pos:line="43" pos:column="44">-&gt;<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="46">processingTime<pos:position pos:line="43" pos:column="60"/></name></name><argument_list pos:line="43" pos:column="60">()<pos:position pos:line="43" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="63"/></expr_stmt></block></then></if>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name pos:line="46" pos:column="5">aLogEntry<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">-&gt;<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="16">http<pos:position pos:line="46" pos:column="20"/></name><operator pos:line="46" pos:column="20">.<pos:position pos:line="46" pos:column="21"/></operator><name pos:line="46" pos:column="21">method<pos:position pos:line="46" pos:column="27"/></name></name> <operator pos:line="46" pos:column="28">=<pos:position pos:line="46" pos:column="29"/></operator> <name><name pos:line="46" pos:column="30">request<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">-&gt;<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="39">method<pos:position pos:line="46" pos:column="45"/></name></name></expr>;<pos:position pos:line="46" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="47" pos:column="5">aLogEntry<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">http<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">.<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="21">version<pos:position pos:line="47" pos:column="28"/></name></name> <operator pos:line="47" pos:column="29">=<pos:position pos:line="47" pos:column="30"/></operator> <name><name pos:line="47" pos:column="31">request<pos:position pos:line="47" pos:column="38"/></name><operator pos:line="47" pos:column="38">-&gt;<pos:position pos:line="47" pos:column="43"/></operator><name pos:line="47" pos:column="40">http_ver<pos:position pos:line="47" pos:column="48"/></name></name></expr>;<pos:position pos:line="47" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="48" pos:column="5">aLogEntry<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">-&gt;<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="16">hier<pos:position pos:line="48" pos:column="20"/></name></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <name><name pos:line="48" pos:column="23">request<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">-&gt;<pos:position pos:line="48" pos:column="35"/></operator><name pos:line="48" pos:column="32">hier<pos:position pos:line="48" pos:column="36"/></name></name></expr>;<pos:position pos:line="48" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">aLogEntry<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">-&gt;<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="16">cache<pos:position pos:line="49" pos:column="21"/></name><operator pos:line="49" pos:column="21">.<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">extuser<pos:position pos:line="49" pos:column="29"/></name></name> <operator pos:line="49" pos:column="30">=<pos:position pos:line="49" pos:column="31"/></operator> <call><name><name pos:line="49" pos:column="32">request<pos:position pos:line="49" pos:column="39"/></name><operator pos:line="49" pos:column="39">-&gt;<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="41">extacl_user<pos:position pos:line="49" pos:column="52"/></name><operator pos:line="49" pos:column="52">.<pos:position pos:line="49" pos:column="53"/></operator><name pos:line="49" pos:column="53">termedBuf<pos:position pos:line="49" pos:column="62"/></name></name><argument_list pos:line="49" pos:column="62">()<pos:position pos:line="49" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="65"/></expr_stmt>

    <comment type="line" pos:line="51" pos:column="5">// Adapted request, if any, inherits and then collects all the stats, but</comment>
    <comment type="line" pos:line="52" pos:column="5">// the virgin request gets logged instead; copy the stats to log them.</comment>
    <comment type="line" pos:line="53" pos:column="5">// TODO: avoid losses by keeping these stats in a shared history object?</comment>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name><name pos:line="54" pos:column="9">aLogEntry<pos:position pos:line="54" pos:column="18"/></name><operator pos:line="54" pos:column="18">-&gt;<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="20">request<pos:position pos:line="54" pos:column="27"/></name></name></expr>)<pos:position pos:line="54" pos:column="28"/></condition><then pos:line="54" pos:column="28"> <block pos:line="54" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">aLogEntry<pos:position pos:line="55" pos:column="18"/></name><operator pos:line="55" pos:column="18">-&gt;<pos:position pos:line="55" pos:column="23"/></operator><name pos:line="55" pos:column="20">request<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">-&gt;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="29">dnsWait<pos:position pos:line="55" pos:column="36"/></name></name> <operator pos:line="55" pos:column="37">=<pos:position pos:line="55" pos:column="38"/></operator> <name><name pos:line="55" pos:column="39">request<pos:position pos:line="55" pos:column="46"/></name><operator pos:line="55" pos:column="46">-&gt;<pos:position pos:line="55" pos:column="51"/></operator><name pos:line="55" pos:column="48">dnsWait<pos:position pos:line="55" pos:column="55"/></name></name></expr>;<pos:position pos:line="55" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">aLogEntry<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">-&gt;<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="20">request<pos:position pos:line="56" pos:column="27"/></name><operator pos:line="56" pos:column="27">-&gt;<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="29">errType<pos:position pos:line="56" pos:column="36"/></name></name> <operator pos:line="56" pos:column="37">=<pos:position pos:line="56" pos:column="38"/></operator> <name><name pos:line="56" pos:column="39">request<pos:position pos:line="56" pos:column="46"/></name><operator pos:line="56" pos:column="46">-&gt;<pos:position pos:line="56" pos:column="51"/></operator><name pos:line="56" pos:column="48">errType<pos:position pos:line="56" pos:column="55"/></name></name></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="57" pos:column="9">aLogEntry<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">-&gt;<pos:position pos:line="57" pos:column="23"/></operator><name pos:line="57" pos:column="20">request<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">-&gt;<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="29">errDetail<pos:position pos:line="57" pos:column="38"/></name></name> <operator pos:line="57" pos:column="39">=<pos:position pos:line="57" pos:column="40"/></operator> <name><name pos:line="57" pos:column="41">request<pos:position pos:line="57" pos:column="48"/></name><operator pos:line="57" pos:column="48">-&gt;<pos:position pos:line="57" pos:column="53"/></operator><name pos:line="57" pos:column="50">errDetail<pos:position pos:line="57" pos:column="59"/></name></name></expr>;<pos:position pos:line="57" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
