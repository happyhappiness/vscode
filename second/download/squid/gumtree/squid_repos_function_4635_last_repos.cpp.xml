<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4635_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">writeErrorReply<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">HttpReply<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">reply<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">int<pos:position pos:line="2" pos:column="63"/></name></type> <name pos:line="2" pos:column="64">scode<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">HttpRequest<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">request<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><call><name><name pos:line="4" pos:column="34">pipeline<pos:position pos:line="4" pos:column="42"/></name><operator pos:line="4" pos:column="42">.<pos:position pos:line="4" pos:column="43"/></operator><name pos:line="4" pos:column="43">front<pos:position pos:line="4" pos:column="48"/></name></name><argument_list pos:line="4" pos:column="48">()<pos:position pos:line="4" pos:column="50"/></argument_list></call><operator pos:line="4" pos:column="50">-&gt;<pos:position pos:line="4" pos:column="55"/></operator><name><name pos:line="4" pos:column="52">http<pos:position pos:line="4" pos:column="56"/></name><operator pos:line="4" pos:column="56">-&gt;<pos:position pos:line="4" pos:column="61"/></operator><name pos:line="4" pos:column="58">request<pos:position pos:line="4" pos:column="65"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="66"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">request<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">MemBuf<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">mb<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">mb<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">.<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">init<pos:position pos:line="8" pos:column="12"/></name></name><argument_list pos:line="8" pos:column="12">()<pos:position pos:line="8" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="15"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">request<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">-&gt;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="18">errType<pos:position pos:line="10" pos:column="25"/></name></name> <operator pos:line="10" pos:column="26">!=<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">ERR_NONE<pos:position pos:line="10" pos:column="37"/></name></expr>)<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="11" pos:column="9">mb<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">.<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="12">appendf<pos:position pos:line="11" pos:column="19"/></name></name><argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="string" pos:line="11" pos:column="20">"%i-%s\r\n"<pos:position pos:line="11" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">scode<pos:position pos:line="11" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="40">errorPageName<pos:position pos:line="11" pos:column="53"/></name><argument_list pos:line="11" pos:column="53">(<argument><expr><name><name pos:line="11" pos:column="54">request<pos:position pos:line="11" pos:column="61"/></name><operator pos:line="11" pos:column="61">-&gt;<pos:position pos:line="11" pos:column="66"/></operator><name pos:line="11" pos:column="63">errType<pos:position pos:line="11" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="73"/></expr_stmt></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">request<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">errDetail<pos:position pos:line="13" pos:column="27"/></name></name> <operator pos:line="13" pos:column="28">&gt;<pos:position pos:line="13" pos:column="32"/></operator> <literal type="number" pos:line="13" pos:column="30">0<pos:position pos:line="13" pos:column="31"/></literal></expr>)<pos:position pos:line="13" pos:column="32"/></condition><then pos:line="13" pos:column="32"> <block pos:line="13" pos:column="33">{
        <comment type="line" pos:line="14" pos:column="9">// XXX: &gt; 0 may not always mean that this is an errno</comment>
        <expr_stmt><expr><call><name><name pos:line="15" pos:column="9">mb<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">.<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">appendf<pos:position pos:line="15" pos:column="19"/></name></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="string" pos:line="15" pos:column="20">"%i-Error: (%d) %s\r\n"<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="45">scode<pos:position pos:line="15" pos:column="50"/></name></expr></argument>,
                   <argument><expr><name><name pos:line="16" pos:column="20">request<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">errDetail<pos:position pos:line="16" pos:column="38"/></name></name></expr></argument>,
                   <argument><expr><call><name pos:line="17" pos:column="20">strerror<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name><name pos:line="17" pos:column="29">request<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">-&gt;<pos:position pos:line="17" pos:column="41"/></operator><name pos:line="17" pos:column="38">errDetail<pos:position pos:line="17" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">USE_ADAPTATION<pos:position pos:line="20" pos:column="19"/></name></expr></cpp:if>
    <comment type="line" pos:line="21" pos:column="5">// XXX: Remove hard coded names. Use an error page template instead.</comment>
    <decl_stmt><decl><type><specifier pos:line="22" pos:column="5">const<pos:position pos:line="22" pos:column="10"/></specifier> <name><name pos:line="22" pos:column="11">Adaptation<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">::<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">History<pos:position pos:line="22" pos:column="30"/></name><operator pos:line="22" pos:column="30">::<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="32">Pointer<pos:position pos:line="22" pos:column="39"/></name></name></type> <name pos:line="22" pos:column="40">ah<pos:position pos:line="22" pos:column="42"/></name> <init pos:line="22" pos:column="43">= <expr><call><name><name pos:line="22" pos:column="45">request<pos:position pos:line="22" pos:column="52"/></name><operator pos:line="22" pos:column="52">-&gt;<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="54">adaptHistory<pos:position pos:line="22" pos:column="66"/></name></name><argument_list pos:line="22" pos:column="66">()<pos:position pos:line="22" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="69"/></decl_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">ah<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">!=<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">NULL<pos:position pos:line="23" pos:column="19"/></name></expr>)<pos:position pos:line="23" pos:column="20"/></condition><then pos:line="23" pos:column="20"> <block pos:line="23" pos:column="21">{ <comment type="line" pos:line="23" pos:column="23">// XXX: add adapt::&lt;all_h but use lastMeta here</comment>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">const<pos:position pos:line="24" pos:column="14"/></specifier> <name pos:line="24" pos:column="15">String<pos:position pos:line="24" pos:column="21"/></name></type> <name pos:line="24" pos:column="22">info<pos:position pos:line="24" pos:column="26"/></name> <init pos:line="24" pos:column="27">= <expr><call><name><name pos:line="24" pos:column="29">ah<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">-&gt;<pos:position pos:line="24" pos:column="36"/></operator><name pos:line="24" pos:column="33">allMeta<pos:position pos:line="24" pos:column="40"/></name><operator pos:line="24" pos:column="40">.<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="41">getByName<pos:position pos:line="24" pos:column="50"/></name></name><argument_list pos:line="24" pos:column="50">(<argument><expr><literal type="string" pos:line="24" pos:column="51">"X-Response-Info"<pos:position pos:line="24" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="70"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">const<pos:position pos:line="25" pos:column="14"/></specifier> <name pos:line="25" pos:column="15">String<pos:position pos:line="25" pos:column="21"/></name></type> <name pos:line="25" pos:column="22">desc<pos:position pos:line="25" pos:column="26"/></name> <init pos:line="25" pos:column="27">= <expr><call><name><name pos:line="25" pos:column="29">ah<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">-&gt;<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="33">allMeta<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">.<pos:position pos:line="25" pos:column="41"/></operator><name pos:line="25" pos:column="41">getByName<pos:position pos:line="25" pos:column="50"/></name></name><argument_list pos:line="25" pos:column="50">(<argument><expr><literal type="string" pos:line="25" pos:column="51">"X-Response-Desc"<pos:position pos:line="25" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="70"/></decl_stmt>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name><name pos:line="26" pos:column="13">info<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">.<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">size<pos:position pos:line="26" pos:column="22"/></name></name><argument_list pos:line="26" pos:column="22">()<pos:position pos:line="26" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="25"/></condition><then pos:line="26" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="27" pos:column="13">mb<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">.<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">appendf<pos:position pos:line="27" pos:column="23"/></name></name><argument_list pos:line="27" pos:column="23">(<argument><expr><literal type="string" pos:line="27" pos:column="24">"%i-Information: %s\r\n"<pos:position pos:line="27" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="50">scode<pos:position pos:line="27" pos:column="55"/></name></expr></argument>, <argument><expr><call><name><name pos:line="27" pos:column="57">info<pos:position pos:line="27" pos:column="61"/></name><operator pos:line="27" pos:column="61">.<pos:position pos:line="27" pos:column="62"/></operator><name pos:line="27" pos:column="62">termedBuf<pos:position pos:line="27" pos:column="71"/></name></name><argument_list pos:line="27" pos:column="71">()<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="75"/></expr_stmt></block></then></if>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name><name pos:line="28" pos:column="13">desc<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">.<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">size<pos:position pos:line="28" pos:column="22"/></name></name><argument_list pos:line="28" pos:column="22">()<pos:position pos:line="28" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="25"/></condition><then pos:line="28" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="29" pos:column="13">mb<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">.<pos:position pos:line="29" pos:column="16"/></operator><name pos:line="29" pos:column="16">appendf<pos:position pos:line="29" pos:column="23"/></name></name><argument_list pos:line="29" pos:column="23">(<argument><expr><literal type="string" pos:line="29" pos:column="24">"%i-Description: %s\r\n"<pos:position pos:line="29" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="50">scode<pos:position pos:line="29" pos:column="55"/></name></expr></argument>, <argument><expr><call><name><name pos:line="29" pos:column="57">desc<pos:position pos:line="29" pos:column="61"/></name><operator pos:line="29" pos:column="61">.<pos:position pos:line="29" pos:column="62"/></operator><name pos:line="29" pos:column="62">termedBuf<pos:position pos:line="29" pos:column="71"/></name></name><argument_list pos:line="29" pos:column="71">()<pos:position pos:line="29" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="75"/></expr_stmt></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">Must<pos:position pos:line="33" pos:column="9"/></name><argument_list pos:line="33" pos:column="9">(<argument><expr><name pos:line="33" pos:column="10">reply<pos:position pos:line="33" pos:column="15"/></name></expr></argument>)<pos:position pos:line="33" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="34" pos:column="5">const<pos:position pos:line="34" pos:column="10"/></specifier> <name pos:line="34" pos:column="11">char<pos:position pos:line="34" pos:column="15"/></name> <modifier pos:line="34" pos:column="16">*<pos:position pos:line="34" pos:column="17"/></modifier></type><name pos:line="34" pos:column="17">reason<pos:position pos:line="34" pos:column="23"/></name> <init pos:line="34" pos:column="24">= <expr><ternary><condition><expr><call><name><name pos:line="34" pos:column="26">reply<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">-&gt;<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="33">header<pos:position pos:line="34" pos:column="39"/></name><operator pos:line="34" pos:column="39">.<pos:position pos:line="34" pos:column="40"/></operator><name pos:line="34" pos:column="40">has<pos:position pos:line="34" pos:column="43"/></name></name><argument_list pos:line="34" pos:column="43">(<argument><expr><name><name pos:line="34" pos:column="44">Http<pos:position pos:line="34" pos:column="48"/></name><operator pos:line="34" pos:column="48">::<pos:position pos:line="34" pos:column="50"/></operator><name pos:line="34" pos:column="50">HdrType<pos:position pos:line="34" pos:column="57"/></name><operator pos:line="34" pos:column="57">::<pos:position pos:line="34" pos:column="59"/></operator><name pos:line="34" pos:column="59">FTP_REASON<pos:position pos:line="34" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="70"/></argument_list></call></expr> ?<pos:position pos:line="34" pos:column="72"/></condition><then pos:line="34" pos:column="72">
                         <expr><call><name><name pos:line="35" pos:column="26">reply<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">-&gt;<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="33">header<pos:position pos:line="35" pos:column="39"/></name><operator pos:line="35" pos:column="39">.<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="40">getStr<pos:position pos:line="35" pos:column="46"/></name></name><argument_list pos:line="35" pos:column="46">(<argument><expr><name><name pos:line="35" pos:column="47">Http<pos:position pos:line="35" pos:column="51"/></name><operator pos:line="35" pos:column="51">::<pos:position pos:line="35" pos:column="53"/></operator><name pos:line="35" pos:column="53">HdrType<pos:position pos:line="35" pos:column="60"/></name><operator pos:line="35" pos:column="60">::<pos:position pos:line="35" pos:column="62"/></operator><name pos:line="35" pos:column="62">FTP_REASON<pos:position pos:line="35" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call></expr></then><else pos:line="35" pos:column="73">:
                         <expr><call><name><name pos:line="36" pos:column="26">reply<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">-&gt;<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="33">sline<pos:position pos:line="36" pos:column="38"/></name><operator pos:line="36" pos:column="38">.<pos:position pos:line="36" pos:column="39"/></operator><name pos:line="36" pos:column="39">reason<pos:position pos:line="36" pos:column="45"/></name></name><argument_list pos:line="36" pos:column="45">()<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr></else></ternary></expr></init></decl>;<pos:position pos:line="36" pos:column="48"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="38" pos:column="5">mb<pos:position pos:line="38" pos:column="7"/></name><operator pos:line="38" pos:column="7">.<pos:position pos:line="38" pos:column="8"/></operator><name pos:line="38" pos:column="8">appendf<pos:position pos:line="38" pos:column="15"/></name></name><argument_list pos:line="38" pos:column="15">(<argument><expr><literal type="string" pos:line="38" pos:column="16">"%i %s\r\n"<pos:position pos:line="38" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="29">scode<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="36">reason<pos:position pos:line="38" pos:column="42"/></name></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="44"/></expr_stmt> <comment type="line" pos:line="38" pos:column="45">// error terminating line</comment>

    <comment type="line" pos:line="40" pos:column="5">// TODO: errorpage.cc should detect FTP client and use</comment>
    <comment type="line" pos:line="41" pos:column="5">// configurable FTP-friendly error templates which we should</comment>
    <comment type="line" pos:line="42" pos:column="5">// write to the client "as is" instead of hiding most of the info</comment>

    <expr_stmt><expr><call><name pos:line="44" pos:column="5">writeReply<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">mb<pos:position pos:line="44" pos:column="18"/></name></expr></argument>)<pos:position pos:line="44" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
