<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_968_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">unsigned<pos:position pos:line="1" pos:column="9"/></name> <name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type>
<name pos:line="2" pos:column="1">xatoui<pos:position pos:line="2" pos:column="7"/></name><parameter_list pos:line="2" pos:column="7">(<parameter><decl><type><specifier pos:line="2" pos:column="8">const<pos:position pos:line="2" pos:column="13"/></specifier> <name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">token<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">char<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">eov<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int64_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">input<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><call><name pos:line="4" pos:column="21">xatoll<pos:position pos:line="4" pos:column="27"/></name><argument_list pos:line="4" pos:column="27">(<argument><expr><name pos:line="4" pos:column="28">token<pos:position pos:line="4" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="35">10<pos:position pos:line="4" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="39">eov<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">input<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">&lt;<pos:position pos:line="5" pos:column="19"/></operator> <literal type="number" pos:line="5" pos:column="17">0<pos:position pos:line="5" pos:column="18"/></literal></expr>)<pos:position pos:line="5" pos:column="19"/></condition><then pos:line="5" pos:column="19"> <block pos:line="5" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="19">DBG_PARSE_NOTE<pos:position pos:line="6" pos:column="33"/></name><argument_list pos:line="6" pos:column="33">(<argument><expr><name pos:line="6" pos:column="34">DBG_IMPORTANT<pos:position pos:line="6" pos:column="47"/></name></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="50">"ERROR: The input value '"<pos:position pos:line="6" pos:column="76"/></literal> <operator pos:line="6" pos:column="77">&lt;&lt;<pos:position pos:line="6" pos:column="85"/></operator> <name pos:line="6" pos:column="80">token<pos:position pos:line="6" pos:column="85"/></name> <operator pos:line="6" pos:column="86">&lt;&lt;<pos:position pos:line="6" pos:column="94"/></operator> <literal type="string" pos:line="6" pos:column="89">"' cannot be less than 0."<pos:position pos:line="6" pos:column="115"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="117"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">self_destruct<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">()<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">unsigned<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">int<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">ret<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><operator pos:line="10" pos:column="24">(<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">unsigned<pos:position pos:line="10" pos:column="33"/></name> <name pos:line="10" pos:column="34">int<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">)<pos:position pos:line="10" pos:column="38"/></operator> <name pos:line="10" pos:column="39">input<pos:position pos:line="10" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="45"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">input<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">!=<pos:position pos:line="11" pos:column="17"/></operator> <cast type="static" pos:line="11" pos:column="18">static_cast<argument_list type="generic" pos:line="11" pos:column="29">&lt;<argument><expr><name pos:line="11" pos:column="30">int64_t<pos:position pos:line="11" pos:column="37"/></name></expr></argument>&gt;<pos:position pos:line="11" pos:column="41"/></argument_list><argument_list pos:line="11" pos:column="38">(<argument><expr><name pos:line="11" pos:column="39">ret<pos:position pos:line="11" pos:column="42"/></name></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></cast></expr>)<pos:position pos:line="11" pos:column="44"/></condition><then pos:line="11" pos:column="44"> <block pos:line="11" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="19">DBG_PARSE_NOTE<pos:position pos:line="12" pos:column="33"/></name><argument_list pos:line="12" pos:column="33">(<argument><expr><name pos:line="12" pos:column="34">DBG_IMPORTANT<pos:position pos:line="12" pos:column="47"/></name></expr></argument>)<pos:position pos:line="12" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="50">"ERROR: The value '"<pos:position pos:line="12" pos:column="70"/></literal> <operator pos:line="12" pos:column="71">&lt;&lt;<pos:position pos:line="12" pos:column="79"/></operator> <name pos:line="12" pos:column="74">token<pos:position pos:line="12" pos:column="79"/></name> <operator pos:line="12" pos:column="80">&lt;&lt;<pos:position pos:line="12" pos:column="88"/></operator> <literal type="string" pos:line="12" pos:column="83">"' is larger than the type 'unsigned int'."<pos:position pos:line="12" pos:column="126"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="127"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="128"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">self_destruct<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">()<pos:position pos:line="13" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">ret<pos:position pos:line="16" pos:column="15"/></name></expr>;<pos:position pos:line="16" pos:column="16"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
