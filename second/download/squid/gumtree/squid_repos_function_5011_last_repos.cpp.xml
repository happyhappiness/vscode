<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5011_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Rebuild<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">importEntry<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name><name pos:line="2" pos:column="28">Ipc<pos:position pos:line="2" pos:column="31"/></name><operator pos:line="2" pos:column="31">::<pos:position pos:line="2" pos:column="33"/></operator><name pos:line="2" pos:column="33">StoreMapAnchor<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">anchor<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name pos:line="2" pos:column="63">sfileno<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">fileno<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="79">const<pos:position pos:line="2" pos:column="84"/></specifier> <name pos:line="2" pos:column="85">DbCellHeader<pos:position pos:line="2" pos:column="97"/></name> <modifier pos:line="2" pos:column="98">&amp;<pos:position pos:line="2" pos:column="103"/></modifier></type><name pos:line="2" pos:column="99">header<pos:position pos:line="2" pos:column="105"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="106"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">cache_key<pos:position pos:line="4" pos:column="14"/></name></type> <name><name pos:line="4" pos:column="15">key<pos:position pos:line="4" pos:column="18"/></name><index pos:line="4" pos:column="18">[<expr><name pos:line="4" pos:column="19">SQUID_MD5_DIGEST_LENGTH<pos:position pos:line="4" pos:column="42"/></name></expr>]<pos:position pos:line="4" pos:column="43"/></index></name></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">StoreEntry<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">loadedE<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">uint64_t<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">knownSize<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><ternary><condition><expr><name><name pos:line="6" pos:column="32">header<pos:position pos:line="6" pos:column="38"/></name><operator pos:line="6" pos:column="38">.<pos:position pos:line="6" pos:column="39"/></operator><name pos:line="6" pos:column="39">entrySize<pos:position pos:line="6" pos:column="48"/></name></name> <operator pos:line="6" pos:column="49">&gt;<pos:position pos:line="6" pos:column="53"/></operator> <literal type="number" pos:line="6" pos:column="51">0<pos:position pos:line="6" pos:column="52"/></literal></expr> ?<pos:position pos:line="6" pos:column="54"/></condition><then pos:line="6" pos:column="54">
                               <expr><name><name pos:line="7" pos:column="32">header<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">.<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="39">entrySize<pos:position pos:line="7" pos:column="48"/></name></name></expr> <pos:position pos:line="7" pos:column="49"/></then><else pos:line="7" pos:column="49">: <expr><call><name><name pos:line="7" pos:column="51">anchor<pos:position pos:line="7" pos:column="57"/></name><operator pos:line="7" pos:column="57">.<pos:position pos:line="7" pos:column="58"/></operator><name pos:line="7" pos:column="58">basics<pos:position pos:line="7" pos:column="64"/></name><operator pos:line="7" pos:column="64">.<pos:position pos:line="7" pos:column="65"/></operator><name pos:line="7" pos:column="65">swap_file_sz<pos:position pos:line="7" pos:column="77"/></name><operator pos:line="7" pos:column="77">.<pos:position pos:line="7" pos:column="78"/></operator><name pos:line="7" pos:column="78">load<pos:position pos:line="7" pos:column="82"/></name></name><argument_list pos:line="7" pos:column="82">()<pos:position pos:line="7" pos:column="84"/></argument_list></call></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="85"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name pos:line="8" pos:column="10">storeRebuildParseEntry<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">buf<pos:position pos:line="8" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="38">loadedE<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">key<pos:position pos:line="8" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="52">counts<pos:position pos:line="8" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="60">knownSize<pos:position pos:line="8" pos:column="69"/></name></expr></argument>)<pos:position pos:line="8" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="71"/></condition><then pos:line="8" pos:column="71">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">false<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="11" pos:column="5">// the entry size may be unknown, but if it is known, it is authoritative</comment>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">47<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">8<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"importing basics for entry "<pos:position pos:line="13" pos:column="48"/></literal> <operator pos:line="13" pos:column="49">&lt;&lt;<pos:position pos:line="13" pos:column="57"/></operator> <name pos:line="13" pos:column="52">fileno<pos:position pos:line="13" pos:column="58"/></name> <operator pos:line="13" pos:column="59">&lt;&lt;<pos:position pos:line="13" pos:column="67"/></operator>
           <literal type="string" pos:line="14" pos:column="12">" inode.entrySize: "<pos:position pos:line="14" pos:column="32"/></literal> <operator pos:line="14" pos:column="33">&lt;&lt;<pos:position pos:line="14" pos:column="41"/></operator> <name><name pos:line="14" pos:column="36">header<pos:position pos:line="14" pos:column="42"/></name><operator pos:line="14" pos:column="42">.<pos:position pos:line="14" pos:column="43"/></operator><name pos:line="14" pos:column="43">entrySize<pos:position pos:line="14" pos:column="52"/></name></name> <operator pos:line="14" pos:column="53">&lt;&lt;<pos:position pos:line="14" pos:column="61"/></operator>
           <literal type="string" pos:line="15" pos:column="12">" swap_file_sz: "<pos:position pos:line="15" pos:column="29"/></literal> <operator pos:line="15" pos:column="30">&lt;&lt;<pos:position pos:line="15" pos:column="38"/></operator> <name><name pos:line="15" pos:column="33">loadedE<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">.<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="41">swap_file_sz<pos:position pos:line="15" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">anchor<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">set<pos:position pos:line="16" pos:column="15"/></name></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">loadedE<pos:position pos:line="16" pos:column="23"/></name></expr></argument>)<pos:position pos:line="16" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>

    <comment type="line" pos:line="18" pos:column="5">// we have not validated whether all db cells for this entry were loaded</comment>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">EBIT_CLR<pos:position pos:line="19" pos:column="13"/></name><argument_list pos:line="19" pos:column="13">(<argument><expr><name><name pos:line="19" pos:column="14">anchor<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">.<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">basics<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">.<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="28">flags<pos:position pos:line="19" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">ENTRY_VALIDATED<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>

    <comment type="line" pos:line="21" pos:column="5">// loadedE-&gt;dump(5);</comment>

    <return pos:line="23" pos:column="5">return <expr><literal type="boolean" pos:line="23" pos:column="12">true<pos:position pos:line="23" pos:column="16"/></literal></expr>;<pos:position pos:line="23" pos:column="17"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
