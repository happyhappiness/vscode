<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2228_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">handleMoreRequestBodyAvailable<pos:position pos:line="2" pos:column="46"/></name></name><parameter_list pos:line="2" pos:column="46">()<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">eof<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">||<pos:position pos:line="4" pos:column="15"/></operator> <operator pos:line="4" pos:column="16">!<pos:position pos:line="4" pos:column="17"/></operator><call><name><name pos:line="4" pos:column="17">Comm<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">::<pos:position pos:line="4" pos:column="23"/></operator><name pos:line="4" pos:column="23">IsConnOpen<pos:position pos:line="4" pos:column="33"/></name></name><argument_list pos:line="4" pos:column="33">(<argument><expr><name pos:line="4" pos:column="34">serverConnection<pos:position pos:line="4" pos:column="50"/></name></expr></argument>)<pos:position pos:line="4" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="52"/></condition><then pos:line="4" pos:column="52"> <block pos:line="4" pos:column="53">{
        <comment type="line" pos:line="5" pos:column="9">// XXX: we should check this condition in other callbacks then!</comment>
        <comment type="line" pos:line="6" pos:column="9">// TODO: Check whether this can actually happen: We should unsubscribe</comment>
        <comment type="line" pos:line="7" pos:column="9">// as a body consumer when the above condition(s) are detected.</comment>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">11<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">DBG_IMPORTANT<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="35">HERE<pos:position pos:line="8" pos:column="39"/></name> <operator pos:line="8" pos:column="40">&lt;&lt;<pos:position pos:line="8" pos:column="48"/></operator> <literal type="string" pos:line="8" pos:column="43">"Transaction aborted while reading HTTP body"<pos:position pos:line="8" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="90"/></expr_stmt>
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">requestBodySource<pos:position pos:line="12" pos:column="29"/></name> <operator pos:line="12" pos:column="30">!=<pos:position pos:line="12" pos:column="32"/></operator> <name pos:line="12" pos:column="33">NULL<pos:position pos:line="12" pos:column="37"/></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name><name pos:line="14" pos:column="9">requestBodySource<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">-&gt;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="28">buf<pos:position pos:line="14" pos:column="31"/></name></name><argument_list pos:line="14" pos:column="31">()<pos:position pos:line="14" pos:column="33"/></argument_list></call><operator pos:line="14" pos:column="33">.<pos:position pos:line="14" pos:column="34"/></operator><call><name pos:line="14" pos:column="34">hasContent<pos:position pos:line="14" pos:column="44"/></name><argument_list pos:line="14" pos:column="44">()<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="47"/></condition><then pos:line="14" pos:column="47"> <block pos:line="14" pos:column="48">{
        <comment type="line" pos:line="15" pos:column="9">// XXX: why does not this trigger a debug message on every request?</comment>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">flags<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">headers_parsed<pos:position pos:line="17" pos:column="33"/></name></name> <operator pos:line="17" pos:column="34">&amp;&amp;<pos:position pos:line="17" pos:column="44"/></operator> <operator pos:line="17" pos:column="37">!<pos:position pos:line="17" pos:column="38"/></operator><name><name pos:line="17" pos:column="38">flags<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">.<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="44">abuse_detected<pos:position pos:line="17" pos:column="58"/></name></name></expr>)<pos:position pos:line="17" pos:column="59"/></condition><then pos:line="17" pos:column="59"> <block pos:line="17" pos:column="60">{
            <expr_stmt><expr><name><name pos:line="18" pos:column="13">flags<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">.<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">abuse_detected<pos:position pos:line="18" pos:column="33"/></name></name> <operator pos:line="18" pos:column="34">=<pos:position pos:line="18" pos:column="35"/></operator> <literal type="boolean" pos:line="18" pos:column="36">true<pos:position pos:line="18" pos:column="40"/></literal></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">debugs<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><literal type="number" pos:line="19" pos:column="20">11<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">DBG_IMPORTANT<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="39">"http handleMoreRequestBodyAvailable: Likely proxy abuse detected '"<pos:position pos:line="19" pos:column="107"/></literal> <operator pos:line="19" pos:column="108">&lt;&lt;<pos:position pos:line="19" pos:column="116"/></operator> <name><name pos:line="19" pos:column="111">request<pos:position pos:line="19" pos:column="118"/></name><operator pos:line="19" pos:column="118">-&gt;<pos:position pos:line="19" pos:column="123"/></operator><name pos:line="19" pos:column="120">client_addr<pos:position pos:line="19" pos:column="131"/></name></name> <operator pos:line="19" pos:column="132">&lt;&lt;<pos:position pos:line="19" pos:column="140"/></operator> <literal type="string" pos:line="19" pos:column="135">"' -&gt; '"<pos:position pos:line="19" pos:column="146"/></literal> <operator pos:line="19" pos:column="144">&lt;&lt;<pos:position pos:line="19" pos:column="152"/></operator> <call><name><name pos:line="19" pos:column="147">entry<pos:position pos:line="19" pos:column="152"/></name><operator pos:line="19" pos:column="152">-&gt;<pos:position pos:line="19" pos:column="157"/></operator><name pos:line="19" pos:column="154">url<pos:position pos:line="19" pos:column="157"/></name></name><argument_list pos:line="19" pos:column="157">()<pos:position pos:line="19" pos:column="159"/></argument_list></call> <operator pos:line="19" pos:column="160">&lt;&lt;<pos:position pos:line="19" pos:column="168"/></operator> <literal type="string" pos:line="19" pos:column="163">"'"<pos:position pos:line="19" pos:column="166"/></literal></expr></argument> )<pos:position pos:line="19" pos:column="168"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="169"/></expr_stmt>

            <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><call><name pos:line="21" pos:column="17">virginReply<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">()<pos:position pos:line="21" pos:column="30"/></argument_list></call><operator pos:line="21" pos:column="30">-&gt;<pos:position pos:line="21" pos:column="35"/></operator><call><name><name pos:line="21" pos:column="32">sline<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">.<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">status<pos:position pos:line="21" pos:column="44"/></name></name><argument_list pos:line="21" pos:column="44">()<pos:position pos:line="21" pos:column="46"/></argument_list></call> <operator pos:line="21" pos:column="47">==<pos:position pos:line="21" pos:column="49"/></operator> <name><name pos:line="21" pos:column="50">Http<pos:position pos:line="21" pos:column="54"/></name><operator pos:line="21" pos:column="54">::<pos:position pos:line="21" pos:column="56"/></operator><name pos:line="21" pos:column="56">scInvalidHeader<pos:position pos:line="21" pos:column="71"/></name></name></expr>)<pos:position pos:line="21" pos:column="72"/></condition><then pos:line="21" pos:column="72"> <block pos:line="21" pos:column="73">{
                <expr_stmt><expr><call><name pos:line="22" pos:column="17">closeServer<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">()<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="23" pos:column="17">mustStop<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">(<argument><expr><literal type="string" pos:line="23" pos:column="26">"HttpStateData::handleMoreRequestBodyAvailable"<pos:position pos:line="23" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="75"/></expr_stmt>
                <return pos:line="24" pos:column="17">return;<pos:position pos:line="24" pos:column="24"/></return>
            }<pos:position pos:line="25" pos:column="14"/></block></then></if>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">HttpStateData<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">::<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">handleMoreRequestBodyAvailable<pos:position pos:line="29" pos:column="50"/></name></name><argument_list pos:line="29" pos:column="50">()<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="53"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
