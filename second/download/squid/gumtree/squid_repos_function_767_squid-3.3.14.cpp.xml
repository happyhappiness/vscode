<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_767_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientHttpRequest<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">httpStart<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">()<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">PROF_start<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">httpStart<pos:position pos:line="4" pos:column="25"/></name></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">logType<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <name pos:line="5" pos:column="15">LOG_TAG_NONE<pos:position pos:line="5" pos:column="27"/></name></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">85<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">4<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"ClientHttpRequest::httpStart: "<pos:position pos:line="6" pos:column="51"/></literal> <operator pos:line="6" pos:column="52">&lt;&lt;<pos:position pos:line="6" pos:column="60"/></operator> <name><name pos:line="6" pos:column="55">Format<pos:position pos:line="6" pos:column="61"/></name><operator pos:line="6" pos:column="61">::<pos:position pos:line="6" pos:column="63"/></operator><name pos:line="6" pos:column="63">log_tags<pos:position pos:line="6" pos:column="71"/></name><index pos:line="6" pos:column="71">[<expr><name pos:line="6" pos:column="72">logType<pos:position pos:line="6" pos:column="79"/></name></expr>]<pos:position pos:line="6" pos:column="80"/></index></name> <operator pos:line="6" pos:column="81">&lt;&lt;<pos:position pos:line="6" pos:column="89"/></operator> <literal type="string" pos:line="6" pos:column="84">" for '"<pos:position pos:line="6" pos:column="92"/></literal> <operator pos:line="6" pos:column="93">&lt;&lt;<pos:position pos:line="6" pos:column="101"/></operator> <name pos:line="6" pos:column="96">uri<pos:position pos:line="6" pos:column="99"/></name> <operator pos:line="6" pos:column="100">&lt;&lt;<pos:position pos:line="6" pos:column="108"/></operator> <literal type="string" pos:line="6" pos:column="103">"'"<pos:position pos:line="6" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="108"/></expr_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* no one should have touched this */</comment>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">out<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">.<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">offset<pos:position pos:line="9" pos:column="22"/></name></name> <operator pos:line="9" pos:column="23">==<pos:position pos:line="9" pos:column="25"/></operator> <literal type="number" pos:line="9" pos:column="26">0<pos:position pos:line="9" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>
    <comment type="block" pos:line="10" pos:column="5">/* Use the Stream Luke */</comment>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">clientStreamNode<pos:position pos:line="11" pos:column="21"/></name> <modifier pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></modifier></type><name pos:line="11" pos:column="23">node<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><operator pos:line="11" pos:column="30">(<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">clientStreamNode<pos:position pos:line="11" pos:column="47"/></name> <operator pos:line="11" pos:column="48">*<pos:position pos:line="11" pos:column="49"/></operator><operator pos:line="11" pos:column="49">)<pos:position pos:line="11" pos:column="50"/></operator><name><name pos:line="11" pos:column="50">client_stream<pos:position pos:line="11" pos:column="63"/></name><operator pos:line="11" pos:column="63">.<pos:position pos:line="11" pos:column="64"/></operator><name pos:line="11" pos:column="64">tail<pos:position pos:line="11" pos:column="68"/></name><operator pos:line="11" pos:column="68">-&gt;<pos:position pos:line="11" pos:column="73"/></operator><name pos:line="11" pos:column="70">data<pos:position pos:line="11" pos:column="74"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="75"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">clientStreamRead<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">node<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="28">this<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="34">node<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">-&gt;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="40">readBuffer<pos:position pos:line="12" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">PROF_stop<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name pos:line="13" pos:column="15">httpStart<pos:position pos:line="13" pos:column="24"/></name></expr></argument>)<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
