<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2395_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">fwdStart<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">int<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">client_fd<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">StoreEntry<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">entry<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">HttpRequest<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">request<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" format="doxygen" pos:line="4" pos:column="5">/** \note
     * client_addr == no_addr indicates this is an "internal" request
     * from peer_digest.c, asn.c, netdb.c, etc and should always
     * be allowed.  yuck, I know.
     */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">( <expr><name><name pos:line="10" pos:column="10">Config<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">.<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">accessList<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">.<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">miss<pos:position pos:line="10" pos:column="32"/></name></name> <operator pos:line="10" pos:column="33">&amp;&amp;<pos:position pos:line="10" pos:column="43"/></operator> <operator pos:line="10" pos:column="36">!<pos:position pos:line="10" pos:column="37"/></operator><call><name><name pos:line="10" pos:column="37">request<pos:position pos:line="10" pos:column="44"/></name><operator pos:line="10" pos:column="44">-&gt;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="46">client_addr<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">.<pos:position pos:line="10" pos:column="58"/></operator><name pos:line="10" pos:column="58">IsNoAddr<pos:position pos:line="10" pos:column="66"/></name></name><argument_list pos:line="10" pos:column="66">()<pos:position pos:line="10" pos:column="68"/></argument_list></call> <operator pos:line="10" pos:column="69">&amp;&amp;<pos:position pos:line="10" pos:column="79"/></operator>
            <name><name pos:line="11" pos:column="13">request<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">-&gt;<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="22">protocol<pos:position pos:line="11" pos:column="30"/></name></name> <operator pos:line="11" pos:column="31">!=<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="34">PROTO_INTERNAL<pos:position pos:line="11" pos:column="48"/></name> <operator pos:line="11" pos:column="49">&amp;&amp;<pos:position pos:line="11" pos:column="59"/></operator> <name><name pos:line="11" pos:column="52">request<pos:position pos:line="11" pos:column="59"/></name><operator pos:line="11" pos:column="59">-&gt;<pos:position pos:line="11" pos:column="64"/></operator><name pos:line="11" pos:column="61">protocol<pos:position pos:line="11" pos:column="69"/></name></name> <operator pos:line="11" pos:column="70">!=<pos:position pos:line="11" pos:column="72"/></operator> <name pos:line="11" pos:column="73">PROTO_CACHEOBJ<pos:position pos:line="11" pos:column="87"/></name></expr>)<pos:position pos:line="11" pos:column="88"/></condition><then pos:line="11" pos:column="88"> <block pos:line="11" pos:column="89">{
        <comment type="block" format="doxygen" pos:line="12" pos:column="9">/**
         * Check if this host is allowed to fetch MISSES from us (miss_access)
         */</comment>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">ACLFilledChecklist<pos:position pos:line="15" pos:column="27"/></name></type> <name pos:line="15" pos:column="28">ch<pos:position pos:line="15" pos:column="30"/></name><argument_list pos:line="15" pos:column="30">(<argument><expr><name><name pos:line="15" pos:column="31">Config<pos:position pos:line="15" pos:column="37"/></name><operator pos:line="15" pos:column="37">.<pos:position pos:line="15" pos:column="38"/></operator><name pos:line="15" pos:column="38">accessList<pos:position pos:line="15" pos:column="48"/></name><operator pos:line="15" pos:column="48">.<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="49">miss<pos:position pos:line="15" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="55">request<pos:position pos:line="15" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="64">NULL<pos:position pos:line="15" pos:column="68"/></name></expr></argument>)<pos:position pos:line="15" pos:column="69"/></argument_list></decl>;<pos:position pos:line="15" pos:column="70"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">ch<pos:position pos:line="16" pos:column="11"/></name><operator pos:line="16" pos:column="11">.<pos:position pos:line="16" pos:column="12"/></operator><name pos:line="16" pos:column="12">src_addr<pos:position pos:line="16" pos:column="20"/></name></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <name><name pos:line="16" pos:column="23">request<pos:position pos:line="16" pos:column="30"/></name><operator pos:line="16" pos:column="30">-&gt;<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="32">client_addr<pos:position pos:line="16" pos:column="43"/></name></name></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">ch<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">.<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">my_addr<pos:position pos:line="17" pos:column="19"/></name></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <name><name pos:line="17" pos:column="22">request<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">-&gt;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="31">my_addr<pos:position pos:line="17" pos:column="38"/></name></name></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">int<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">answer<pos:position pos:line="18" pos:column="19"/></name> <init pos:line="18" pos:column="20">= <expr><call><name><name pos:line="18" pos:column="22">ch<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">.<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">fastCheck<pos:position pos:line="18" pos:column="34"/></name></name><argument_list pos:line="18" pos:column="34">()<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="37"/></decl_stmt>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">answer<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">==<pos:position pos:line="20" pos:column="22"/></operator> <literal type="number" pos:line="20" pos:column="23">0<pos:position pos:line="20" pos:column="24"/></literal></expr>)<pos:position pos:line="20" pos:column="25"/></condition><then pos:line="20" pos:column="25"> <block pos:line="20" pos:column="26">{
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">err_type<pos:position pos:line="21" pos:column="21"/></name></type> <name pos:line="21" pos:column="22">page_id<pos:position pos:line="21" pos:column="29"/></name></decl>;<pos:position pos:line="21" pos:column="30"/></decl_stmt>
            <expr_stmt><expr><name pos:line="22" pos:column="13">page_id<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <call><name pos:line="22" pos:column="23">aclGetDenyInfoPage<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><operator pos:line="22" pos:column="42">&amp;<pos:position pos:line="22" pos:column="47"/></operator><name><name pos:line="22" pos:column="43">Config<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">.<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="50">denyInfoList<pos:position pos:line="22" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="64">AclMatchedName<pos:position pos:line="22" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="80">1<pos:position pos:line="22" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="83"/></expr_stmt>

            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><name pos:line="24" pos:column="17">page_id<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">==<pos:position pos:line="24" pos:column="27"/></operator> <name pos:line="24" pos:column="28">ERR_NONE<pos:position pos:line="24" pos:column="36"/></name></expr>)<pos:position pos:line="24" pos:column="37"/></condition><then pos:line="24" pos:column="37">
                <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">page_id<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="27">ERR_FORWARDING_DENIED<pos:position pos:line="25" pos:column="48"/></name></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt></block></then></if>

            <decl_stmt><decl><type><name pos:line="27" pos:column="13">ErrorState<pos:position pos:line="27" pos:column="23"/></name> <modifier pos:line="27" pos:column="24">*<pos:position pos:line="27" pos:column="25"/></modifier></type><name pos:line="27" pos:column="25">anErr<pos:position pos:line="27" pos:column="30"/></name> <init pos:line="27" pos:column="31">= <expr><call><name pos:line="27" pos:column="33">errorCon<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">(<argument><expr><name pos:line="27" pos:column="42">page_id<pos:position pos:line="27" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="51">HTTP_FORBIDDEN<pos:position pos:line="27" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="67">request<pos:position pos:line="27" pos:column="74"/></name></expr></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="76"/></decl_stmt>

            <expr_stmt><expr><call><name pos:line="29" pos:column="13">errorAppendEntry<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">(<argument><expr><name pos:line="29" pos:column="30">entry<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="37">anErr<pos:position pos:line="29" pos:column="42"/></name></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>	<comment type="line" pos:line="29" pos:column="49">// frees anErr</comment>

            <return pos:line="31" pos:column="13">return;<pos:position pos:line="31" pos:column="20"/></return>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">debugs<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="number" pos:line="35" pos:column="12">17<pos:position pos:line="35" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="16">3<pos:position pos:line="35" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="19">"FwdState::start() '"<pos:position pos:line="35" pos:column="40"/></literal> <operator pos:line="35" pos:column="41">&lt;&lt;<pos:position pos:line="35" pos:column="49"/></operator> <call><name><name pos:line="35" pos:column="44">entry<pos:position pos:line="35" pos:column="49"/></name><operator pos:line="35" pos:column="49">-&gt;<pos:position pos:line="35" pos:column="54"/></operator><name pos:line="35" pos:column="51">url<pos:position pos:line="35" pos:column="54"/></name></name><argument_list pos:line="35" pos:column="54">()<pos:position pos:line="35" pos:column="56"/></argument_list></call> <operator pos:line="35" pos:column="57">&lt;&lt;<pos:position pos:line="35" pos:column="65"/></operator> <literal type="string" pos:line="35" pos:column="60">"'"<pos:position pos:line="35" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="65"/></expr_stmt>
    <comment type="block" pos:line="36" pos:column="5">/*
     * This seems like an odd place to bind mem_obj and request.
     * Might want to assert that request is NULL at this point
     */</comment>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">entry<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">mem_obj<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">-&gt;<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="21">request<pos:position pos:line="40" pos:column="28"/></name></name> <operator pos:line="40" pos:column="29">=<pos:position pos:line="40" pos:column="30"/></operator> <call><name pos:line="40" pos:column="31">HTTPMSGLOCK<pos:position pos:line="40" pos:column="42"/></name><argument_list pos:line="40" pos:column="42">(<argument><expr><name pos:line="40" pos:column="43">request<pos:position pos:line="40" pos:column="50"/></name></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
<cpp:if pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">if<pos:position pos:line="41" pos:column="4"/></cpp:directive> <expr><name pos:line="41" pos:column="5">URL_CHECKSUM_DEBUG<pos:position pos:line="41" pos:column="23"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name><name pos:line="43" pos:column="5">entry<pos:position pos:line="43" pos:column="10"/></name><operator pos:line="43" pos:column="10">-&gt;<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="12">mem_obj<pos:position pos:line="43" pos:column="19"/></name><operator pos:line="43" pos:column="19">-&gt;<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="21">checkUrlChecksum<pos:position pos:line="43" pos:column="37"/></name></name><argument_list pos:line="43" pos:column="37">()<pos:position pos:line="43" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">shutting_down<pos:position pos:line="46" pos:column="22"/></name></expr>)<pos:position pos:line="46" pos:column="23"/></condition><then pos:line="46" pos:column="23"> <block pos:line="46" pos:column="24">{
        <comment type="block" pos:line="47" pos:column="9">/* more yuck */</comment>
        <decl_stmt><decl><type><name pos:line="48" pos:column="9">ErrorState<pos:position pos:line="48" pos:column="19"/></name> <modifier pos:line="48" pos:column="20">*<pos:position pos:line="48" pos:column="21"/></modifier></type><name pos:line="48" pos:column="21">anErr<pos:position pos:line="48" pos:column="26"/></name> <init pos:line="48" pos:column="27">= <expr><call><name pos:line="48" pos:column="29">errorCon<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">ERR_SHUTTING_DOWN<pos:position pos:line="48" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="57">HTTP_SERVICE_UNAVAILABLE<pos:position pos:line="48" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="83">request<pos:position pos:line="48" pos:column="90"/></name></expr></argument>)<pos:position pos:line="48" pos:column="91"/></argument_list></call></expr></init></decl>;<pos:position pos:line="48" pos:column="92"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">errorAppendEntry<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">(<argument><expr><name pos:line="49" pos:column="26">entry<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="33">anErr<pos:position pos:line="49" pos:column="38"/></name></expr></argument>)<pos:position pos:line="49" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="40"/></expr_stmt>	<comment type="line" pos:line="49" pos:column="41">// frees anErr</comment>
        <return pos:line="50" pos:column="9">return;<pos:position pos:line="50" pos:column="16"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <switch pos:line="53" pos:column="5">switch <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">request<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">-&gt;<pos:position pos:line="53" pos:column="25"/></operator><name pos:line="53" pos:column="22">protocol<pos:position pos:line="53" pos:column="30"/></name></name></expr>)<pos:position pos:line="53" pos:column="31"/></condition> <block pos:line="53" pos:column="32">{

    <case pos:line="55" pos:column="5">case <expr><name pos:line="55" pos:column="10">PROTO_INTERNAL<pos:position pos:line="55" pos:column="24"/></name></expr>:<pos:position pos:line="55" pos:column="25"/></case>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">internalStart<pos:position pos:line="56" pos:column="22"/></name><argument_list pos:line="56" pos:column="22">(<argument><expr><name pos:line="56" pos:column="23">request<pos:position pos:line="56" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="32">entry<pos:position pos:line="56" pos:column="37"/></name></expr></argument>)<pos:position pos:line="56" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="39"/></expr_stmt>
        <return pos:line="57" pos:column="9">return;<pos:position pos:line="57" pos:column="16"/></return>

    <case pos:line="59" pos:column="5">case <expr><name pos:line="59" pos:column="10">PROTO_CACHEOBJ<pos:position pos:line="59" pos:column="24"/></name></expr>:<pos:position pos:line="59" pos:column="25"/></case>
        <expr_stmt><expr><call><name><name pos:line="60" pos:column="9">CacheManager<pos:position pos:line="60" pos:column="21"/></name><operator pos:line="60" pos:column="21">::<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="23">GetInstance<pos:position pos:line="60" pos:column="34"/></name></name><argument_list pos:line="60" pos:column="34">()<pos:position pos:line="60" pos:column="36"/></argument_list></call><operator pos:line="60" pos:column="36">-&gt;<pos:position pos:line="60" pos:column="41"/></operator><call><name pos:line="60" pos:column="38">Start<pos:position pos:line="60" pos:column="43"/></name><argument_list pos:line="60" pos:column="43">(<argument><expr><name pos:line="60" pos:column="44">client_fd<pos:position pos:line="60" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="55">request<pos:position pos:line="60" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="64">entry<pos:position pos:line="60" pos:column="69"/></name></expr></argument>)<pos:position pos:line="60" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="71"/></expr_stmt>
        <return pos:line="61" pos:column="9">return;<pos:position pos:line="61" pos:column="16"/></return>

    <case pos:line="63" pos:column="5">case <expr><name pos:line="63" pos:column="10">PROTO_URN<pos:position pos:line="63" pos:column="19"/></name></expr>:<pos:position pos:line="63" pos:column="20"/></case>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">urnStart<pos:position pos:line="64" pos:column="17"/></name><argument_list pos:line="64" pos:column="17">(<argument><expr><name pos:line="64" pos:column="18">request<pos:position pos:line="64" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="27">entry<pos:position pos:line="64" pos:column="32"/></name></expr></argument>)<pos:position pos:line="64" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="34"/></expr_stmt>
        <return pos:line="65" pos:column="9">return;<pos:position pos:line="65" pos:column="16"/></return>

    <default pos:line="67" pos:column="5">default:<pos:position pos:line="67" pos:column="13"/></default>
        <decl_stmt><decl><type><name><name pos:line="68" pos:column="9">FwdState<pos:position pos:line="68" pos:column="17"/></name><operator pos:line="68" pos:column="17">::<pos:position pos:line="68" pos:column="19"/></operator><name pos:line="68" pos:column="19">Pointer<pos:position pos:line="68" pos:column="26"/></name></name></type> <name pos:line="68" pos:column="27">fwd<pos:position pos:line="68" pos:column="30"/></name> <init pos:line="68" pos:column="31">= <expr><operator pos:line="68" pos:column="33">new<pos:position pos:line="68" pos:column="36"/></operator> <call><name pos:line="68" pos:column="37">FwdState<pos:position pos:line="68" pos:column="45"/></name><argument_list pos:line="68" pos:column="45">(<argument><expr><name pos:line="68" pos:column="46">client_fd<pos:position pos:line="68" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="57">entry<pos:position pos:line="68" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="64">request<pos:position pos:line="68" pos:column="71"/></name></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="68" pos:column="73"/></decl_stmt>

        <comment type="block" pos:line="70" pos:column="9">/* If we need to transparently proxy the request
         * then we need the client source protocol, address and port */</comment>
        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name><name pos:line="72" pos:column="13">request<pos:position pos:line="72" pos:column="20"/></name><operator pos:line="72" pos:column="20">-&gt;<pos:position pos:line="72" pos:column="25"/></operator><name pos:line="72" pos:column="22">flags<pos:position pos:line="72" pos:column="27"/></name><operator pos:line="72" pos:column="27">.<pos:position pos:line="72" pos:column="28"/></operator><name pos:line="72" pos:column="28">spoof_client_ip<pos:position pos:line="72" pos:column="43"/></name></name></expr>)<pos:position pos:line="72" pos:column="44"/></condition><then pos:line="72" pos:column="44"> <block pos:line="72" pos:column="45">{
            <expr_stmt><expr><name><name pos:line="73" pos:column="13">fwd<pos:position pos:line="73" pos:column="16"/></name><operator pos:line="73" pos:column="16">-&gt;<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="18">src<pos:position pos:line="73" pos:column="21"/></name></name> <operator pos:line="73" pos:column="22">=<pos:position pos:line="73" pos:column="23"/></operator> <name><name pos:line="73" pos:column="24">request<pos:position pos:line="73" pos:column="31"/></name><operator pos:line="73" pos:column="31">-&gt;<pos:position pos:line="73" pos:column="36"/></operator><name pos:line="73" pos:column="33">client_addr<pos:position pos:line="73" pos:column="44"/></name></name></expr>;<pos:position pos:line="73" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="74" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="76" pos:column="9">fwd<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">-&gt;<pos:position pos:line="76" pos:column="17"/></operator><name pos:line="76" pos:column="14">start<pos:position pos:line="76" pos:column="19"/></name></name><argument_list pos:line="76" pos:column="19">(<argument><expr><name pos:line="76" pos:column="20">fwd<pos:position pos:line="76" pos:column="23"/></name></expr></argument>)<pos:position pos:line="76" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>
        <return pos:line="77" pos:column="9">return;<pos:position pos:line="77" pos:column="16"/></return>
    }<pos:position pos:line="78" pos:column="6"/></block></switch>

    <comment type="block" pos:line="80" pos:column="5">/* NOTREACHED */</comment>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
