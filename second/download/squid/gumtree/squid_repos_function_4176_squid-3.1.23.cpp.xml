<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4176_squid-3.1.23.cpp" pos:tabs="8"><function><template pos:line="1" pos:column="1">template<parameter_list pos:line="1" pos:column="9">&lt;<parameter><type><name pos:line="1" pos:column="10">class<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">T<pos:position pos:line="1" pos:column="17"/></name></parameter>&gt;<pos:position pos:line="1" pos:column="21"/></parameter_list></template>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name></type>
<name pos:line="3" pos:column="1">aclDomainCompare<pos:position pos:line="3" pos:column="17"/></name><parameter_list pos:line="3" pos:column="17">(<parameter><decl><type><name pos:line="3" pos:column="18">T<pos:position pos:line="3" pos:column="19"/></name> <specifier pos:line="3" pos:column="20">const<pos:position pos:line="3" pos:column="25"/></specifier> <modifier pos:line="3" pos:column="26">&amp;<pos:position pos:line="3" pos:column="31"/></modifier></type><name pos:line="3" pos:column="27">a<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="30">T<pos:position pos:line="3" pos:column="31"/></name> <specifier pos:line="3" pos:column="32">const<pos:position pos:line="3" pos:column="37"/></specifier> <modifier pos:line="3" pos:column="38">&amp;<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="39">b<pos:position pos:line="3" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="41"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier> <specifier pos:line="5" pos:column="12">const<pos:position pos:line="5" pos:column="17"/></specifier></type> <name pos:line="5" pos:column="18">d1<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><cast type="static" pos:line="5" pos:column="23">static_cast<argument_list type="generic" pos:line="5" pos:column="34">&lt;<argument><expr><name pos:line="5" pos:column="35">char<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">*<pos:position pos:line="5" pos:column="41"/></operator></expr></argument>&gt;<pos:position pos:line="5" pos:column="45"/></argument_list><argument_list pos:line="5" pos:column="42">(<argument><expr><name pos:line="5" pos:column="43">b<pos:position pos:line="5" pos:column="44"/></name></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier> <specifier pos:line="6" pos:column="12">const<pos:position pos:line="6" pos:column="17"/></specifier></type> <name pos:line="6" pos:column="18">d2<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><cast type="static" pos:line="6" pos:column="23">static_cast<argument_list type="generic" pos:line="6" pos:column="34">&lt;<argument><expr><name pos:line="6" pos:column="35">char<pos:position pos:line="6" pos:column="39"/></name> <operator pos:line="6" pos:column="40">*<pos:position pos:line="6" pos:column="41"/></operator></expr></argument>&gt;<pos:position pos:line="6" pos:column="45"/></argument_list><argument_list pos:line="6" pos:column="42">(<argument><expr><name pos:line="6" pos:column="43">a<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">ret<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">ret<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <call><name pos:line="8" pos:column="11">aclHostDomainCompare<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">d1<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="36">d2<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="40"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">ret<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">!=<pos:position pos:line="10" pos:column="15"/></operator> <literal type="number" pos:line="10" pos:column="16">0<pos:position pos:line="10" pos:column="17"/></literal></expr>)<pos:position pos:line="10" pos:column="18"/></condition><then pos:line="10" pos:column="18"> <block pos:line="10" pos:column="19">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier><specifier pos:line="11" pos:column="15">const<pos:position pos:line="11" pos:column="20"/></specifier></type> <name pos:line="11" pos:column="21">d3<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><name pos:line="11" pos:column="26">d2<pos:position pos:line="11" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier><specifier pos:line="12" pos:column="15">const<pos:position pos:line="12" pos:column="20"/></specifier></type> <name pos:line="12" pos:column="21">d4<pos:position pos:line="12" pos:column="23"/></name> <init pos:line="12" pos:column="24">= <expr><name pos:line="12" pos:column="26">d1<pos:position pos:line="12" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="29"/></decl_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">ret<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">=<pos:position pos:line="13" pos:column="14"/></operator> <call><name pos:line="13" pos:column="15">aclHostDomainCompare<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name pos:line="13" pos:column="36">d3<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="40">d4<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">ret<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">==<pos:position pos:line="14" pos:column="19"/></operator> <literal type="number" pos:line="14" pos:column="20">0<pos:position pos:line="14" pos:column="21"/></literal></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <block pos:line="14" pos:column="23">{
            <comment type="line" pos:line="15" pos:column="13">// When a.example.com comes after .example.com in an ACL</comment>
            <comment type="line" pos:line="16" pos:column="13">// sub-domain is ignored. That is okay. Just important</comment>
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">debugs<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="number" pos:line="17" pos:column="20">28<pos:position pos:line="17" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="24">DBG_IMPORTANT<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="39">"WARNING: '"<pos:position pos:line="17" pos:column="51"/></literal> <operator pos:line="17" pos:column="52">&lt;&lt;<pos:position pos:line="17" pos:column="60"/></operator> <name pos:line="17" pos:column="55">d3<pos:position pos:line="17" pos:column="57"/></name> <operator pos:line="17" pos:column="58">&lt;&lt;<pos:position pos:line="17" pos:column="66"/></operator> <literal type="string" pos:line="17" pos:column="61">"' is a subdomain of '"<pos:position pos:line="17" pos:column="84"/></literal> <operator pos:line="17" pos:column="85">&lt;&lt;<pos:position pos:line="17" pos:column="93"/></operator> <name pos:line="17" pos:column="88">d4<pos:position pos:line="17" pos:column="90"/></name> <operator pos:line="17" pos:column="91">&lt;&lt;<pos:position pos:line="17" pos:column="99"/></operator> <literal type="string" pos:line="17" pos:column="94">"'"<pos:position pos:line="17" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="99"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">debugs<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><literal type="number" pos:line="18" pos:column="20">28<pos:position pos:line="18" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="24">DBG_IMPORTANT<pos:position pos:line="18" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="39">"WARNING: because of this '"<pos:position pos:line="18" pos:column="67"/></literal> <operator pos:line="18" pos:column="68">&lt;&lt;<pos:position pos:line="18" pos:column="76"/></operator> <name pos:line="18" pos:column="71">d3<pos:position pos:line="18" pos:column="73"/></name> <operator pos:line="18" pos:column="74">&lt;&lt;<pos:position pos:line="18" pos:column="82"/></operator> <literal type="string" pos:line="18" pos:column="77">"' is ignored to keep splay tree searching predictable"<pos:position pos:line="18" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="134"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">debugs<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><literal type="number" pos:line="19" pos:column="20">28<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">DBG_IMPORTANT<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="39">"WARNING: You should remove '"<pos:position pos:line="19" pos:column="69"/></literal> <operator pos:line="19" pos:column="70">&lt;&lt;<pos:position pos:line="19" pos:column="78"/></operator> <operator pos:line="19" pos:column="73">(<pos:position pos:line="19" pos:column="74"/></operator><ternary><condition><expr><operator pos:line="19" pos:column="74">*<pos:position pos:line="19" pos:column="75"/></operator><name pos:line="19" pos:column="75">d3<pos:position pos:line="19" pos:column="77"/></name><operator pos:line="19" pos:column="77">==<pos:position pos:line="19" pos:column="79"/></operator><literal type="char" pos:line="19" pos:column="79">'.'<pos:position pos:line="19" pos:column="82"/></literal></expr>?<pos:position pos:line="19" pos:column="83"/></condition><then><expr><name pos:line="19" pos:column="83">d4<pos:position pos:line="19" pos:column="85"/></name></expr></then><else pos:line="19" pos:column="85">:<expr><name pos:line="19" pos:column="86">d3<pos:position pos:line="19" pos:column="88"/></name></expr></else></ternary><operator pos:line="19" pos:column="88">)<pos:position pos:line="19" pos:column="89"/></operator> <operator pos:line="19" pos:column="90">&lt;&lt;<pos:position pos:line="19" pos:column="98"/></operator> <literal type="string" pos:line="19" pos:column="93">"' from the ACL named '"<pos:position pos:line="19" pos:column="117"/></literal> <operator pos:line="19" pos:column="118">&lt;&lt;<pos:position pos:line="19" pos:column="126"/></operator> <name pos:line="19" pos:column="121">AclMatchedName<pos:position pos:line="19" pos:column="135"/></name> <operator pos:line="19" pos:column="136">&lt;&lt;<pos:position pos:line="19" pos:column="144"/></operator> <literal type="string" pos:line="19" pos:column="139">"'"<pos:position pos:line="19" pos:column="142"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="143"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="144"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
    }<pos:position pos:line="21" pos:column="6"/></block></then> <elseif pos:line="21" pos:column="7">else <if pos:line="21" pos:column="12">if <condition pos:line="21" pos:column="15">(<expr><name pos:line="21" pos:column="16">ret<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">==<pos:position pos:line="21" pos:column="22"/></operator> <literal type="number" pos:line="21" pos:column="23">0<pos:position pos:line="21" pos:column="24"/></literal></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25"> <block pos:line="21" pos:column="26">{
        <comment type="line" pos:line="22" pos:column="9">// When a.example.com comes before .example.com in an ACL</comment>
        <comment type="line" pos:line="23" pos:column="9">// discarding the wildcard is critically bad.</comment>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">28<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="20">DBG_CRITICAL<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="34">"ERROR: '"<pos:position pos:line="24" pos:column="44"/></literal> <operator pos:line="24" pos:column="45">&lt;&lt;<pos:position pos:line="24" pos:column="53"/></operator> <name pos:line="24" pos:column="48">d1<pos:position pos:line="24" pos:column="50"/></name> <operator pos:line="24" pos:column="51">&lt;&lt;<pos:position pos:line="24" pos:column="59"/></operator> <literal type="string" pos:line="24" pos:column="54">"' is a subdomain of '"<pos:position pos:line="24" pos:column="77"/></literal> <operator pos:line="24" pos:column="78">&lt;&lt;<pos:position pos:line="24" pos:column="86"/></operator> <name pos:line="24" pos:column="81">d2<pos:position pos:line="24" pos:column="83"/></name> <operator pos:line="24" pos:column="84">&lt;&lt;<pos:position pos:line="24" pos:column="92"/></operator> <literal type="string" pos:line="24" pos:column="87">"'"<pos:position pos:line="24" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="92"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">28<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">DBG_CRITICAL<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="34">"ERROR: because of this '"<pos:position pos:line="25" pos:column="60"/></literal> <operator pos:line="25" pos:column="61">&lt;&lt;<pos:position pos:line="25" pos:column="69"/></operator> <name pos:line="25" pos:column="64">d2<pos:position pos:line="25" pos:column="66"/></name> <operator pos:line="25" pos:column="67">&lt;&lt;<pos:position pos:line="25" pos:column="75"/></operator> <literal type="string" pos:line="25" pos:column="70">"' is ignored to keep splay tree searching predictable"<pos:position pos:line="25" pos:column="125"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="126"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="127"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">28<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="20">DBG_CRITICAL<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="34">"ERROR: You should remove '"<pos:position pos:line="26" pos:column="62"/></literal> <operator pos:line="26" pos:column="63">&lt;&lt;<pos:position pos:line="26" pos:column="71"/></operator> <operator pos:line="26" pos:column="66">(<pos:position pos:line="26" pos:column="67"/></operator><ternary><condition><expr><operator pos:line="26" pos:column="67">*<pos:position pos:line="26" pos:column="68"/></operator><name pos:line="26" pos:column="68">d1<pos:position pos:line="26" pos:column="70"/></name><operator pos:line="26" pos:column="70">==<pos:position pos:line="26" pos:column="72"/></operator><literal type="char" pos:line="26" pos:column="72">'.'<pos:position pos:line="26" pos:column="75"/></literal></expr>?<pos:position pos:line="26" pos:column="76"/></condition><then><expr><name pos:line="26" pos:column="76">d2<pos:position pos:line="26" pos:column="78"/></name></expr></then><else pos:line="26" pos:column="78">:<expr><name pos:line="26" pos:column="79">d1<pos:position pos:line="26" pos:column="81"/></name></expr></else></ternary><operator pos:line="26" pos:column="81">)<pos:position pos:line="26" pos:column="82"/></operator> <operator pos:line="26" pos:column="83">&lt;&lt;<pos:position pos:line="26" pos:column="91"/></operator> <literal type="string" pos:line="26" pos:column="86">"' from the ACL named '"<pos:position pos:line="26" pos:column="110"/></literal> <operator pos:line="26" pos:column="111">&lt;&lt;<pos:position pos:line="26" pos:column="119"/></operator> <name pos:line="26" pos:column="114">AclMatchedName<pos:position pos:line="26" pos:column="128"/></name> <operator pos:line="26" pos:column="129">&lt;&lt;<pos:position pos:line="26" pos:column="137"/></operator> <literal type="string" pos:line="26" pos:column="132">"'"<pos:position pos:line="26" pos:column="135"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="136"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="137"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">self_destruct<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">()<pos:position pos:line="27" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if></elseif></if>

    <return pos:line="30" pos:column="5">return <expr><name pos:line="30" pos:column="12">ret<pos:position pos:line="30" pos:column="15"/></name></expr>;<pos:position pos:line="30" pos:column="16"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
