<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_31_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">process_request<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">cachemgr_request<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">req<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">ipbuf<pos:position pos:line="5" pos:column="15"/></name><index pos:line="5" pos:column="15">[<expr><name pos:line="5" pos:column="16">MAX_IPSTRLEN<pos:position pos:line="5" pos:column="28"/></name></expr>]<pos:position pos:line="5" pos:column="29"/></index></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">addrinfo<pos:position pos:line="6" pos:column="20"/></name></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">AI<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><name pos:line="6" pos:column="27">NULL<pos:position pos:line="6" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">Ip<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">::<pos:position pos:line="7" pos:column="9"/></operator><name pos:line="7" pos:column="9">Address<pos:position pos:line="7" pos:column="16"/></name></name></type> <name pos:line="7" pos:column="17">S<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">s<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">l<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>

    <decl_stmt><decl><specifier pos:line="11" pos:column="5">static<pos:position pos:line="11" pos:column="11"/></specifier> <type><name pos:line="11" pos:column="12">char<pos:position pos:line="11" pos:column="16"/></name></type> <name><name pos:line="11" pos:column="17">buf<pos:position pos:line="11" pos:column="20"/></name><index pos:line="11" pos:column="20">[<expr><literal type="number" pos:line="11" pos:column="21">2<pos:position pos:line="11" pos:column="22"/></literal> <operator pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></operator> <literal type="number" pos:line="11" pos:column="25">1024<pos:position pos:line="11" pos:column="29"/></literal></expr>]<pos:position pos:line="11" pos:column="30"/></index></name></decl>;<pos:position pos:line="11" pos:column="31"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">req<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">==<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21"> <block pos:line="13" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">auth_html<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">CACHEMGR_HOSTNAME<pos:position pos:line="14" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="38">CACHE_HTTP_PORT<pos:position pos:line="14" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="55">""<pos:position pos:line="14" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="59"/></expr_stmt>
        <return pos:line="15" pos:column="9">return <expr><literal type="number" pos:line="15" pos:column="16">1<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">req<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">hostname<pos:position pos:line="18" pos:column="22"/></name></name> <operator pos:line="18" pos:column="23">==<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="26">NULL<pos:position pos:line="18" pos:column="30"/></name></expr>)<pos:position pos:line="18" pos:column="31"/></condition><then pos:line="18" pos:column="31"> <block pos:line="18" pos:column="32">{
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">req<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">hostname<pos:position pos:line="19" pos:column="22"/></name></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <call><name pos:line="19" pos:column="25">xstrdup<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">CACHEMGR_HOSTNAME<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name><name pos:line="22" pos:column="9">req<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">port<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">==<pos:position pos:line="22" pos:column="21"/></operator> <literal type="number" pos:line="22" pos:column="22">0<pos:position pos:line="22" pos:column="23"/></literal></expr>)<pos:position pos:line="22" pos:column="24"/></condition><then pos:line="22" pos:column="24"> <block pos:line="22" pos:column="25">{
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">req<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">port<pos:position pos:line="23" pos:column="18"/></name></name> <operator pos:line="23" pos:column="19">=<pos:position pos:line="23" pos:column="20"/></operator> <name pos:line="23" pos:column="21">CACHE_HTTP_PORT<pos:position pos:line="23" pos:column="36"/></name></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">req<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">action<pos:position pos:line="26" pos:column="20"/></name></name> <operator pos:line="26" pos:column="21">==<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">NULL<pos:position pos:line="26" pos:column="28"/></name></expr>)<pos:position pos:line="26" pos:column="29"/></condition><then pos:line="26" pos:column="29"> <block pos:line="26" pos:column="30">{
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">req<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">action<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <call><name pos:line="27" pos:column="23">xstrdup<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><literal type="string" pos:line="27" pos:column="31">""<pos:position pos:line="27" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><call><name pos:line="30" pos:column="9">strcmp<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name><name pos:line="30" pos:column="16">req<pos:position pos:line="30" pos:column="19"/></name><operator pos:line="30" pos:column="19">-&gt;<pos:position pos:line="30" pos:column="24"/></operator><name pos:line="30" pos:column="21">action<pos:position pos:line="30" pos:column="27"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="29">"authenticate"<pos:position pos:line="30" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call> <operator pos:line="30" pos:column="45">==<pos:position pos:line="30" pos:column="47"/></operator> <literal type="number" pos:line="30" pos:column="48">0<pos:position pos:line="30" pos:column="49"/></literal></expr>)<pos:position pos:line="30" pos:column="50"/></condition><then pos:line="30" pos:column="50"> <block pos:line="30" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">auth_html<pos:position pos:line="31" pos:column="18"/></name><argument_list pos:line="31" pos:column="18">(<argument><expr><name><name pos:line="31" pos:column="19">req<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">-&gt;<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="24">hostname<pos:position pos:line="31" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="34">req<pos:position pos:line="31" pos:column="37"/></name><operator pos:line="31" pos:column="37">-&gt;<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="39">port<pos:position pos:line="31" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="45">req<pos:position pos:line="31" pos:column="48"/></name><operator pos:line="31" pos:column="48">-&gt;<pos:position pos:line="31" pos:column="53"/></operator><name pos:line="31" pos:column="50">user_name<pos:position pos:line="31" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="61"/></expr_stmt>
        <return pos:line="32" pos:column="9">return <expr><literal type="number" pos:line="32" pos:column="16">0<pos:position pos:line="32" pos:column="17"/></literal></expr>;<pos:position pos:line="32" pos:column="18"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">!<pos:position pos:line="35" pos:column="10"/></operator><call><name pos:line="35" pos:column="10">check_target_acl<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name><name pos:line="35" pos:column="27">req<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">-&gt;<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="32">hostname<pos:position pos:line="35" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="42">req<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">-&gt;<pos:position pos:line="35" pos:column="50"/></operator><name pos:line="35" pos:column="47">port<pos:position pos:line="35" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="53"/></condition><then pos:line="35" pos:column="53"> <block pos:line="35" pos:column="54">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">snprintf<pos:position pos:line="36" pos:column="17"/></name><argument_list pos:line="36" pos:column="17">(<argument><expr><name pos:line="36" pos:column="18">buf<pos:position pos:line="36" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="23">sizeof<argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">buf<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="36">"target %s:%d not allowed in cachemgr.conf\n"<pos:position pos:line="36" pos:column="81"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="83">req<pos:position pos:line="36" pos:column="86"/></name><operator pos:line="36" pos:column="86">-&gt;<pos:position pos:line="36" pos:column="91"/></operator><name pos:line="36" pos:column="88">hostname<pos:position pos:line="36" pos:column="96"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="98">req<pos:position pos:line="36" pos:column="101"/></name><operator pos:line="36" pos:column="101">-&gt;<pos:position pos:line="36" pos:column="106"/></operator><name pos:line="36" pos:column="103">port<pos:position pos:line="36" pos:column="107"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="109"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">error_html<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name pos:line="37" pos:column="20">buf<pos:position pos:line="37" pos:column="23"/></name></expr></argument>)<pos:position pos:line="37" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
        <return pos:line="38" pos:column="9">return <expr><literal type="number" pos:line="38" pos:column="16">1<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="41" pos:column="5">S<pos:position pos:line="41" pos:column="6"/></name> <operator pos:line="41" pos:column="7">=<pos:position pos:line="41" pos:column="8"/></operator> <operator pos:line="41" pos:column="9">*<pos:position pos:line="41" pos:column="10"/></operator><call><name pos:line="41" pos:column="10">gethostbyname<pos:position pos:line="41" pos:column="23"/></name><argument_list pos:line="41" pos:column="23">(<argument><expr><name><name pos:line="41" pos:column="24">req<pos:position pos:line="41" pos:column="27"/></name><operator pos:line="41" pos:column="27">-&gt;<pos:position pos:line="41" pos:column="32"/></operator><name pos:line="41" pos:column="29">hostname<pos:position pos:line="41" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">( <expr><operator pos:line="43" pos:column="10">!<pos:position pos:line="43" pos:column="11"/></operator><call><name><name pos:line="43" pos:column="11">S<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">.<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="13">isAnyAddr<pos:position pos:line="43" pos:column="22"/></name></name><argument_list pos:line="43" pos:column="22">()<pos:position pos:line="43" pos:column="24"/></argument_list></call></expr> )<pos:position pos:line="43" pos:column="26"/></condition><then pos:line="43" pos:column="26"> <block pos:line="43" pos:column="27">{
        <expr_stmt><expr><operator pos:line="44" pos:column="9">(<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">void<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">)<pos:position pos:line="44" pos:column="15"/></operator> <literal type="number" pos:line="44" pos:column="16">0<pos:position pos:line="44" pos:column="17"/></literal></expr>;<pos:position pos:line="44" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then> <elseif pos:line="45" pos:column="7">else <if pos:line="45" pos:column="12">if <condition pos:line="45" pos:column="15">(<expr><operator pos:line="45" pos:column="16">(<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">S<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <name><name pos:line="45" pos:column="21">req<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">hostname<pos:position pos:line="45" pos:column="34"/></name></name><operator pos:line="45" pos:column="34">)<pos:position pos:line="45" pos:column="35"/></operator></expr>)<pos:position pos:line="45" pos:column="36"/></condition><then pos:line="45" pos:column="36">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="46" pos:column="9">(<pos:position pos:line="46" pos:column="10"/></operator><name pos:line="46" pos:column="10">void<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">)<pos:position pos:line="46" pos:column="15"/></operator> <literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt></block></then></if></elseif>
    <else pos:line="47" pos:column="5">else <block pos:line="47" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">snprintf<pos:position pos:line="48" pos:column="17"/></name><argument_list pos:line="48" pos:column="17">(<argument><expr><name pos:line="48" pos:column="18">buf<pos:position pos:line="48" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="23">sizeof<argument_list pos:line="48" pos:column="29">(<argument><expr><name pos:line="48" pos:column="30">buf<pos:position pos:line="48" pos:column="33"/></name></expr></argument>)<pos:position pos:line="48" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="36">"Unknown host: %s\n"<pos:position pos:line="48" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="58">req<pos:position pos:line="48" pos:column="61"/></name><operator pos:line="48" pos:column="61">-&gt;<pos:position pos:line="48" pos:column="66"/></operator><name pos:line="48" pos:column="63">hostname<pos:position pos:line="48" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">error_html<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">buf<pos:position pos:line="49" pos:column="23"/></name></expr></argument>)<pos:position pos:line="49" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt>
        <return pos:line="50" pos:column="9">return <expr><literal type="number" pos:line="50" pos:column="16">1<pos:position pos:line="50" pos:column="17"/></literal></expr>;<pos:position pos:line="50" pos:column="18"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="53" pos:column="5">S<pos:position pos:line="53" pos:column="6"/></name><operator pos:line="53" pos:column="6">.<pos:position pos:line="53" pos:column="7"/></operator><name pos:line="53" pos:column="7">port<pos:position pos:line="53" pos:column="11"/></name></name><argument_list pos:line="53" pos:column="11">(<argument><expr><name><name pos:line="53" pos:column="12">req<pos:position pos:line="53" pos:column="15"/></name><operator pos:line="53" pos:column="15">-&gt;<pos:position pos:line="53" pos:column="20"/></operator><name pos:line="53" pos:column="17">port<pos:position pos:line="53" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="55" pos:column="5">S<pos:position pos:line="55" pos:column="6"/></name><operator pos:line="55" pos:column="6">.<pos:position pos:line="55" pos:column="7"/></operator><name pos:line="55" pos:column="7">getAddrInfo<pos:position pos:line="55" pos:column="18"/></name></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">AI<pos:position pos:line="55" pos:column="21"/></name></expr></argument>)<pos:position pos:line="55" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>

<cpp:if pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">if<pos:position pos:line="57" pos:column="4"/></cpp:directive> <expr><name pos:line="57" pos:column="5">USE_IPV6<pos:position pos:line="57" pos:column="13"/></name></expr></cpp:if>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><operator pos:line="58" pos:column="9">(<pos:position pos:line="58" pos:column="10"/></operator><name pos:line="58" pos:column="10">s<pos:position pos:line="58" pos:column="11"/></name> <operator pos:line="58" pos:column="12">=<pos:position pos:line="58" pos:column="13"/></operator> <call><name pos:line="58" pos:column="14">socket<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">( <argument><expr><name><name pos:line="58" pos:column="22">AI<pos:position pos:line="58" pos:column="24"/></name><operator pos:line="58" pos:column="24">-&gt;<pos:position pos:line="58" pos:column="29"/></operator><name pos:line="58" pos:column="26">ai_family<pos:position pos:line="58" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="37">SOCK_STREAM<pos:position pos:line="58" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="50">0<pos:position pos:line="58" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="52"/></argument_list></call><operator pos:line="58" pos:column="52">)<pos:position pos:line="58" pos:column="53"/></operator> <operator pos:line="58" pos:column="54">&lt;<pos:position pos:line="58" pos:column="58"/></operator> <literal type="number" pos:line="58" pos:column="56">0<pos:position pos:line="58" pos:column="57"/></literal></expr>)<pos:position pos:line="58" pos:column="58"/></condition><then pos:line="58" pos:column="58"> <block pos:line="58" pos:column="59">{
<cpp:else pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">else<pos:position pos:line="59" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><operator pos:line="60" pos:column="9">(<pos:position pos:line="60" pos:column="10"/></operator><name pos:line="60" pos:column="10">s<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">=<pos:position pos:line="60" pos:column="13"/></operator> <call><name pos:line="60" pos:column="14">socket<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><name pos:line="60" pos:column="21">PF_INET<pos:position pos:line="60" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="30">SOCK_STREAM<pos:position pos:line="60" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="43">0<pos:position pos:line="60" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="45"/></argument_list></call><operator pos:line="60" pos:column="45">)<pos:position pos:line="60" pos:column="46"/></operator> <operator pos:line="60" pos:column="47">&lt;<pos:position pos:line="60" pos:column="51"/></operator> <literal type="number" pos:line="60" pos:column="49">0<pos:position pos:line="60" pos:column="50"/></literal></expr>)<pos:position pos:line="60" pos:column="51"/></condition><then pos:line="60" pos:column="51"> <block pos:line="60" pos:column="52">{
<cpp:endif pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">endif<pos:position pos:line="61" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">snprintf<pos:position pos:line="62" pos:column="17"/></name><argument_list pos:line="62" pos:column="17">(<argument><expr><name pos:line="62" pos:column="18">buf<pos:position pos:line="62" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="62" pos:column="23">sizeof<argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">buf<pos:position pos:line="62" pos:column="33"/></name></expr></argument>)<pos:position pos:line="62" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="36">"socket: %s\n"<pos:position pos:line="62" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="52">xstrerror<pos:position pos:line="62" pos:column="61"/></name><argument_list pos:line="62" pos:column="61">()<pos:position pos:line="62" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="62" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">error_html<pos:position pos:line="63" pos:column="19"/></name><argument_list pos:line="63" pos:column="19">(<argument><expr><name pos:line="63" pos:column="20">buf<pos:position pos:line="63" pos:column="23"/></name></expr></argument>)<pos:position pos:line="63" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="64" pos:column="9">Ip<pos:position pos:line="64" pos:column="11"/></name><operator pos:line="64" pos:column="11">::<pos:position pos:line="64" pos:column="13"/></operator><name pos:line="64" pos:column="13">Address<pos:position pos:line="64" pos:column="20"/></name><operator pos:line="64" pos:column="20">::<pos:position pos:line="64" pos:column="22"/></operator><name pos:line="64" pos:column="22">FreeAddr<pos:position pos:line="64" pos:column="30"/></name></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name pos:line="64" pos:column="31">AI<pos:position pos:line="64" pos:column="33"/></name></expr></argument>)<pos:position pos:line="64" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="35"/></expr_stmt>
        <return pos:line="65" pos:column="9">return <expr><literal type="number" pos:line="65" pos:column="16">1<pos:position pos:line="65" pos:column="17"/></literal></expr>;<pos:position pos:line="65" pos:column="18"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>

    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><call><name pos:line="68" pos:column="9">connect<pos:position pos:line="68" pos:column="16"/></name><argument_list pos:line="68" pos:column="16">(<argument><expr><name pos:line="68" pos:column="17">s<pos:position pos:line="68" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="20">AI<pos:position pos:line="68" pos:column="22"/></name><operator pos:line="68" pos:column="22">-&gt;<pos:position pos:line="68" pos:column="27"/></operator><name pos:line="68" pos:column="24">ai_addr<pos:position pos:line="68" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="33">AI<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">-&gt;<pos:position pos:line="68" pos:column="40"/></operator><name pos:line="68" pos:column="37">ai_addrlen<pos:position pos:line="68" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call> <operator pos:line="68" pos:column="49">&lt;<pos:position pos:line="68" pos:column="53"/></operator> <literal type="number" pos:line="68" pos:column="51">0<pos:position pos:line="68" pos:column="52"/></literal></expr>)<pos:position pos:line="68" pos:column="53"/></condition><then pos:line="68" pos:column="53"> <block pos:line="68" pos:column="54">{
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">snprintf<pos:position pos:line="69" pos:column="17"/></name><argument_list pos:line="69" pos:column="17">(<argument><expr><name pos:line="69" pos:column="18">buf<pos:position pos:line="69" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="69" pos:column="23">sizeof<argument_list pos:line="69" pos:column="29">(<argument><expr><name pos:line="69" pos:column="30">buf<pos:position pos:line="69" pos:column="33"/></name></expr></argument>)<pos:position pos:line="69" pos:column="34"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="36">"connect %s: %s\n"<pos:position pos:line="69" pos:column="54"/></literal></expr></argument>,
                 <argument><expr><call><name><name pos:line="70" pos:column="18">S<pos:position pos:line="70" pos:column="19"/></name><operator pos:line="70" pos:column="19">.<pos:position pos:line="70" pos:column="20"/></operator><name pos:line="70" pos:column="20">toUrl<pos:position pos:line="70" pos:column="25"/></name></name><argument_list pos:line="70" pos:column="25">(<argument><expr><name pos:line="70" pos:column="26">ipbuf<pos:position pos:line="70" pos:column="31"/></name></expr></argument>,<argument><expr><name pos:line="70" pos:column="32">MAX_IPSTRLEN<pos:position pos:line="70" pos:column="44"/></name></expr></argument>)<pos:position pos:line="70" pos:column="45"/></argument_list></call></expr></argument>,
                 <argument><expr><call><name pos:line="71" pos:column="18">xstrerror<pos:position pos:line="71" pos:column="27"/></name><argument_list pos:line="71" pos:column="27">()<pos:position pos:line="71" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">error_html<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">(<argument><expr><name pos:line="72" pos:column="20">buf<pos:position pos:line="72" pos:column="23"/></name></expr></argument>)<pos:position pos:line="72" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="73" pos:column="9">Ip<pos:position pos:line="73" pos:column="11"/></name><operator pos:line="73" pos:column="11">::<pos:position pos:line="73" pos:column="13"/></operator><name pos:line="73" pos:column="13">Address<pos:position pos:line="73" pos:column="20"/></name><operator pos:line="73" pos:column="20">::<pos:position pos:line="73" pos:column="22"/></operator><name pos:line="73" pos:column="22">FreeAddr<pos:position pos:line="73" pos:column="30"/></name></name><argument_list pos:line="73" pos:column="30">(<argument><expr><name pos:line="73" pos:column="31">AI<pos:position pos:line="73" pos:column="33"/></name></expr></argument>)<pos:position pos:line="73" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">close<pos:position pos:line="74" pos:column="14"/></name><argument_list pos:line="74" pos:column="14">(<argument><expr><name pos:line="74" pos:column="15">s<pos:position pos:line="74" pos:column="16"/></name></expr></argument>)<pos:position pos:line="74" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="18"/></expr_stmt>
        <return pos:line="75" pos:column="9">return <expr><literal type="number" pos:line="75" pos:column="16">1<pos:position pos:line="75" pos:column="17"/></literal></expr>;<pos:position pos:line="75" pos:column="18"/></return>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="78" pos:column="5">Ip<pos:position pos:line="78" pos:column="7"/></name><operator pos:line="78" pos:column="7">::<pos:position pos:line="78" pos:column="9"/></operator><name pos:line="78" pos:column="9">Address<pos:position pos:line="78" pos:column="16"/></name><operator pos:line="78" pos:column="16">::<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="18">FreeAddr<pos:position pos:line="78" pos:column="26"/></name></name><argument_list pos:line="78" pos:column="26">(<argument><expr><name pos:line="78" pos:column="27">AI<pos:position pos:line="78" pos:column="29"/></name></expr></argument>)<pos:position pos:line="78" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><name pos:line="80" pos:column="5">l<pos:position pos:line="80" pos:column="6"/></name> <operator pos:line="80" pos:column="7">=<pos:position pos:line="80" pos:column="8"/></operator> <call><name pos:line="80" pos:column="9">snprintf<pos:position pos:line="80" pos:column="17"/></name><argument_list pos:line="80" pos:column="17">(<argument><expr><name pos:line="80" pos:column="18">buf<pos:position pos:line="80" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="80" pos:column="23">sizeof<argument_list pos:line="80" pos:column="29">(<argument><expr><name pos:line="80" pos:column="30">buf<pos:position pos:line="80" pos:column="33"/></name></expr></argument>)<pos:position pos:line="80" pos:column="34"/></argument_list></sizeof></expr></argument>,
                 <argument><expr><literal type="string" pos:line="81" pos:column="18">"GET cache_object://%s/%s%s%s HTTP/1.0\r\n"<pos:position pos:line="81" pos:column="61"/></literal>
                 <literal type="string" pos:line="82" pos:column="18">"User-Agent: cachemgr.cgi/%s\r\n"<pos:position pos:line="82" pos:column="51"/></literal>
                 <literal type="string" pos:line="83" pos:column="18">"Accept: */*\r\n"<pos:position pos:line="83" pos:column="35"/></literal>
                 <literal type="string" pos:line="84" pos:column="18">"%s"<pos:position pos:line="84" pos:column="22"/></literal>           <comment type="block" pos:line="84" pos:column="33">/* Authentication info or nothing */</comment>
                 <literal type="string" pos:line="85" pos:column="18">"\r\n"<pos:position pos:line="85" pos:column="24"/></literal></expr></argument>,
                 <argument><expr><name><name pos:line="86" pos:column="18">req<pos:position pos:line="86" pos:column="21"/></name><operator pos:line="86" pos:column="21">-&gt;<pos:position pos:line="86" pos:column="26"/></operator><name pos:line="86" pos:column="23">hostname<pos:position pos:line="86" pos:column="31"/></name></name></expr></argument>,
                 <argument><expr><name><name pos:line="87" pos:column="18">req<pos:position pos:line="87" pos:column="21"/></name><operator pos:line="87" pos:column="21">-&gt;<pos:position pos:line="87" pos:column="26"/></operator><name pos:line="87" pos:column="23">action<pos:position pos:line="87" pos:column="29"/></name></name></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name pos:line="88" pos:column="18">req<pos:position pos:line="88" pos:column="21"/></name><operator pos:line="88" pos:column="21">-&gt;<pos:position pos:line="88" pos:column="26"/></operator><name pos:line="88" pos:column="23">workers<pos:position pos:line="88" pos:column="30"/></name></name></expr>?<pos:position pos:line="88" pos:column="31"/></condition><then pos:line="88" pos:column="31"> <expr><literal type="string" pos:line="88" pos:column="32">"?workers="<pos:position pos:line="88" pos:column="43"/></literal></expr> <pos:position pos:line="88" pos:column="44"/></then><else pos:line="88" pos:column="44">: <expr><operator pos:line="88" pos:column="46">(<pos:position pos:line="88" pos:column="47"/></operator><ternary><condition><expr><name><name pos:line="88" pos:column="47">req<pos:position pos:line="88" pos:column="50"/></name><operator pos:line="88" pos:column="50">-&gt;<pos:position pos:line="88" pos:column="55"/></operator><name pos:line="88" pos:column="52">processes<pos:position pos:line="88" pos:column="61"/></name></name></expr> ?<pos:position pos:line="88" pos:column="63"/></condition><then pos:line="88" pos:column="63"> <expr><literal type="string" pos:line="88" pos:column="64">"?processes="<pos:position pos:line="88" pos:column="77"/></literal></expr> <pos:position pos:line="88" pos:column="78"/></then><else pos:line="88" pos:column="78">: <expr><literal type="string" pos:line="88" pos:column="80">""<pos:position pos:line="88" pos:column="82"/></literal></expr></else></ternary><operator pos:line="88" pos:column="82">)<pos:position pos:line="88" pos:column="83"/></operator></expr></else></ternary></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name pos:line="89" pos:column="18">req<pos:position pos:line="89" pos:column="21"/></name><operator pos:line="89" pos:column="21">-&gt;<pos:position pos:line="89" pos:column="26"/></operator><name pos:line="89" pos:column="23">workers<pos:position pos:line="89" pos:column="30"/></name></name></expr>?<pos:position pos:line="89" pos:column="31"/></condition><then pos:line="89" pos:column="31"> <expr><name><name pos:line="89" pos:column="32">req<pos:position pos:line="89" pos:column="35"/></name><operator pos:line="89" pos:column="35">-&gt;<pos:position pos:line="89" pos:column="40"/></operator><name pos:line="89" pos:column="37">workers<pos:position pos:line="89" pos:column="44"/></name></name></expr> <pos:position pos:line="89" pos:column="45"/></then><else pos:line="89" pos:column="45">: <expr><operator pos:line="89" pos:column="47">(<pos:position pos:line="89" pos:column="48"/></operator><ternary><condition><expr><name><name pos:line="89" pos:column="48">req<pos:position pos:line="89" pos:column="51"/></name><operator pos:line="89" pos:column="51">-&gt;<pos:position pos:line="89" pos:column="56"/></operator><name pos:line="89" pos:column="53">processes<pos:position pos:line="89" pos:column="62"/></name></name></expr> ?<pos:position pos:line="89" pos:column="64"/></condition><then pos:line="89" pos:column="64"> <expr><name><name pos:line="89" pos:column="65">req<pos:position pos:line="89" pos:column="68"/></name><operator pos:line="89" pos:column="68">-&gt;<pos:position pos:line="89" pos:column="73"/></operator><name pos:line="89" pos:column="70">processes<pos:position pos:line="89" pos:column="79"/></name></name></expr></then><else pos:line="89" pos:column="79">: <expr><literal type="string" pos:line="89" pos:column="81">""<pos:position pos:line="89" pos:column="83"/></literal></expr></else></ternary><operator pos:line="89" pos:column="83">)<pos:position pos:line="89" pos:column="84"/></operator></expr></else></ternary></expr></argument>,
                 <argument><expr><name pos:line="90" pos:column="18">VERSION<pos:position pos:line="90" pos:column="25"/></name></expr></argument>,
                 <argument><expr><call><name pos:line="91" pos:column="18">make_auth_header<pos:position pos:line="91" pos:column="34"/></name><argument_list pos:line="91" pos:column="34">(<argument><expr><name pos:line="91" pos:column="35">req<pos:position pos:line="91" pos:column="38"/></name></expr></argument>)<pos:position pos:line="91" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="91" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="41"/></expr_stmt>
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><call><name pos:line="92" pos:column="9">write<pos:position pos:line="92" pos:column="14"/></name><argument_list pos:line="92" pos:column="14">(<argument><expr><name pos:line="92" pos:column="15">s<pos:position pos:line="92" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="18">buf<pos:position pos:line="92" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="23">l<pos:position pos:line="92" pos:column="24"/></name></expr></argument>)<pos:position pos:line="92" pos:column="25"/></argument_list></call> <operator pos:line="92" pos:column="26">&lt;<pos:position pos:line="92" pos:column="30"/></operator> <literal type="number" pos:line="92" pos:column="28">0<pos:position pos:line="92" pos:column="29"/></literal></expr>)<pos:position pos:line="92" pos:column="30"/></condition><then pos:line="92" pos:column="30"> <block pos:line="92" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">fprintf<pos:position pos:line="93" pos:column="16"/></name><argument_list pos:line="93" pos:column="16">(<argument><expr><name pos:line="93" pos:column="17">stderr<pos:position pos:line="93" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="93" pos:column="24">"ERROR: (%d) writing request: '%s'\n"<pos:position pos:line="93" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="63">errno<pos:position pos:line="93" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="70">buf<pos:position pos:line="93" pos:column="73"/></name></expr></argument>)<pos:position pos:line="93" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="94" pos:column="6"/></block></then> <else pos:line="94" pos:column="7">else <block pos:line="94" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">debug<pos:position pos:line="95" pos:column="14"/></name><argument_list pos:line="95" pos:column="14">(<argument><expr><literal type="string" pos:line="95" pos:column="15">"wrote request: '%s'\n"<pos:position pos:line="95" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="40">buf<pos:position pos:line="95" pos:column="43"/></name></expr></argument>)<pos:position pos:line="95" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></else></if>
    <return pos:line="97" pos:column="5">return <expr><call><name pos:line="97" pos:column="12">read_reply<pos:position pos:line="97" pos:column="22"/></name><argument_list pos:line="97" pos:column="22">(<argument><expr><name pos:line="97" pos:column="23">s<pos:position pos:line="97" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="26">req<pos:position pos:line="97" pos:column="29"/></name></expr></argument>)<pos:position pos:line="97" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="31"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></then></if>

<function><type><name pos:line="100" pos:column="1">int<pos:position pos:line="100" pos:column="4"/></name></type>
<name pos:line="101" pos:column="1">main<pos:position pos:line="101" pos:column="5"/></name><parameter_list pos:line="101" pos:column="5">(<parameter><decl><type><name pos:line="101" pos:column="6">int<pos:position pos:line="101" pos:column="9"/></name></type> <name pos:line="101" pos:column="10">argc<pos:position pos:line="101" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="101" pos:column="16">char<pos:position pos:line="101" pos:column="20"/></name> <modifier pos:line="101" pos:column="21">*<pos:position pos:line="101" pos:column="22"/></modifier></type><name><name pos:line="101" pos:column="22">argv<pos:position pos:line="101" pos:column="26"/></name><index pos:line="101" pos:column="26">[]<pos:position pos:line="101" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="101" pos:column="29"/></parameter_list>
<block pos:line="102" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="103" pos:column="5">char<pos:position pos:line="103" pos:column="9"/></name> <modifier pos:line="103" pos:column="10">*<pos:position pos:line="103" pos:column="11"/></modifier></type><name pos:line="103" pos:column="11">s<pos:position pos:line="103" pos:column="12"/></name></decl>;<pos:position pos:line="103" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="104" pos:column="5">cachemgr_request<pos:position pos:line="104" pos:column="21"/></name> <modifier pos:line="104" pos:column="22">*<pos:position pos:line="104" pos:column="23"/></modifier></type><name pos:line="104" pos:column="23">req<pos:position pos:line="104" pos:column="26"/></name></decl>;<pos:position pos:line="104" pos:column="27"/></decl_stmt>

    <expr_stmt><expr><name pos:line="106" pos:column="5">now<pos:position pos:line="106" pos:column="8"/></name> <operator pos:line="106" pos:column="9">=<pos:position pos:line="106" pos:column="10"/></operator> <call><name pos:line="106" pos:column="11">time<pos:position pos:line="106" pos:column="15"/></name><argument_list pos:line="106" pos:column="15">(<argument><expr><name pos:line="106" pos:column="16">NULL<pos:position pos:line="106" pos:column="20"/></name></expr></argument>)<pos:position pos:line="106" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="22"/></expr_stmt>
<cpp:if pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">if<pos:position pos:line="107" pos:column="4"/></cpp:directive> <expr><name pos:line="107" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="107" pos:column="20"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="109" pos:column="5">Win32SockInit<pos:position pos:line="109" pos:column="18"/></name><argument_list pos:line="109" pos:column="18">()<pos:position pos:line="109" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="110" pos:column="5">atexit<pos:position pos:line="110" pos:column="11"/></name><argument_list pos:line="110" pos:column="11">(<argument><expr><name pos:line="110" pos:column="12">Win32SockCleanup<pos:position pos:line="110" pos:column="28"/></name></expr></argument>)<pos:position pos:line="110" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="111" pos:column="5">_setmode<pos:position pos:line="111" pos:column="13"/></name><argument_list pos:line="111" pos:column="13">( <argument><expr><call><name pos:line="111" pos:column="15">_fileno<pos:position pos:line="111" pos:column="22"/></name><argument_list pos:line="111" pos:column="22">( <argument><expr><name pos:line="111" pos:column="24">stdin<pos:position pos:line="111" pos:column="29"/></name></expr></argument> )<pos:position pos:line="111" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="111" pos:column="33">_O_BINARY<pos:position pos:line="111" pos:column="42"/></name></expr></argument> )<pos:position pos:line="111" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="112" pos:column="5">_setmode<pos:position pos:line="112" pos:column="13"/></name><argument_list pos:line="112" pos:column="13">( <argument><expr><call><name pos:line="112" pos:column="15">_fileno<pos:position pos:line="112" pos:column="22"/></name><argument_list pos:line="112" pos:column="22">( <argument><expr><name pos:line="112" pos:column="24">stdout<pos:position pos:line="112" pos:column="30"/></name></expr></argument> )<pos:position pos:line="112" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="112" pos:column="34">_O_BINARY<pos:position pos:line="112" pos:column="43"/></name></expr></argument> )<pos:position pos:line="112" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><name pos:line="113" pos:column="5">_fmode<pos:position pos:line="113" pos:column="11"/></name> <operator pos:line="113" pos:column="12">=<pos:position pos:line="113" pos:column="13"/></operator> <name pos:line="113" pos:column="14">_O_BINARY<pos:position pos:line="113" pos:column="23"/></name></expr>;<pos:position pos:line="113" pos:column="24"/></expr_stmt>

    <if pos:line="115" pos:column="5">if <condition pos:line="115" pos:column="8">(<expr><operator pos:line="115" pos:column="9">(<pos:position pos:line="115" pos:column="10"/></operator><name pos:line="115" pos:column="10">s<pos:position pos:line="115" pos:column="11"/></name> <operator pos:line="115" pos:column="12">=<pos:position pos:line="115" pos:column="13"/></operator> <call><name pos:line="115" pos:column="14">strrchr<pos:position pos:line="115" pos:column="21"/></name><argument_list pos:line="115" pos:column="21">(<argument><expr><name><name pos:line="115" pos:column="22">argv<pos:position pos:line="115" pos:column="26"/></name><index pos:line="115" pos:column="26">[<expr><literal type="number" pos:line="115" pos:column="27">0<pos:position pos:line="115" pos:column="28"/></literal></expr>]<pos:position pos:line="115" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="115" pos:column="31">'\\'<pos:position pos:line="115" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="36"/></argument_list></call><operator pos:line="115" pos:column="36">)<pos:position pos:line="115" pos:column="37"/></operator></expr>)<pos:position pos:line="115" pos:column="38"/></condition><then pos:line="115" pos:column="38">
<cpp:else pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">else<pos:position pos:line="116" pos:column="6"/></cpp:directive></cpp:else>

    <block type="pseudo"><if pos:line="118" pos:column="5">if <condition pos:line="118" pos:column="8">(<expr><operator pos:line="118" pos:column="9">(<pos:position pos:line="118" pos:column="10"/></operator><name pos:line="118" pos:column="10">s<pos:position pos:line="118" pos:column="11"/></name> <operator pos:line="118" pos:column="12">=<pos:position pos:line="118" pos:column="13"/></operator> <call><name pos:line="118" pos:column="14">strrchr<pos:position pos:line="118" pos:column="21"/></name><argument_list pos:line="118" pos:column="21">(<argument><expr><name><name pos:line="118" pos:column="22">argv<pos:position pos:line="118" pos:column="26"/></name><index pos:line="118" pos:column="26">[<expr><literal type="number" pos:line="118" pos:column="27">0<pos:position pos:line="118" pos:column="28"/></literal></expr>]<pos:position pos:line="118" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="118" pos:column="31">'/'<pos:position pos:line="118" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="35"/></argument_list></call><operator pos:line="118" pos:column="35">)<pos:position pos:line="118" pos:column="36"/></operator></expr>)<pos:position pos:line="118" pos:column="37"/></condition><then pos:line="118" pos:column="37">
<cpp:endif pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">endif<pos:position pos:line="119" pos:column="7"/></cpp:directive></cpp:endif>

        <block type="pseudo"><expr_stmt><expr><name pos:line="121" pos:column="9">progname<pos:position pos:line="121" pos:column="17"/></name> <operator pos:line="121" pos:column="18">=<pos:position pos:line="121" pos:column="19"/></operator> <call><name pos:line="121" pos:column="20">xstrdup<pos:position pos:line="121" pos:column="27"/></name><argument_list pos:line="121" pos:column="27">(<argument><expr><name pos:line="121" pos:column="28">s<pos:position pos:line="121" pos:column="29"/></name> <operator pos:line="121" pos:column="30">+<pos:position pos:line="121" pos:column="31"/></operator> <literal type="number" pos:line="121" pos:column="32">1<pos:position pos:line="121" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="35"/></expr_stmt></block></then>
    <else pos:line="122" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="123" pos:column="9">progname<pos:position pos:line="123" pos:column="17"/></name> <operator pos:line="123" pos:column="18">=<pos:position pos:line="123" pos:column="19"/></operator> <call><name pos:line="123" pos:column="20">xstrdup<pos:position pos:line="123" pos:column="27"/></name><argument_list pos:line="123" pos:column="27">(<argument><expr><name><name pos:line="123" pos:column="28">argv<pos:position pos:line="123" pos:column="32"/></name><index pos:line="123" pos:column="32">[<expr><literal type="number" pos:line="123" pos:column="33">0<pos:position pos:line="123" pos:column="34"/></literal></expr>]<pos:position pos:line="123" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="123" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="37"/></expr_stmt></block></else></if></block></then></if>

    <if pos:line="125" pos:column="5">if <condition pos:line="125" pos:column="8">(<expr><operator pos:line="125" pos:column="9">(<pos:position pos:line="125" pos:column="10"/></operator><name pos:line="125" pos:column="10">s<pos:position pos:line="125" pos:column="11"/></name> <operator pos:line="125" pos:column="12">=<pos:position pos:line="125" pos:column="13"/></operator> <call><name pos:line="125" pos:column="14">getenv<pos:position pos:line="125" pos:column="20"/></name><argument_list pos:line="125" pos:column="20">(<argument><expr><literal type="string" pos:line="125" pos:column="21">"SCRIPT_NAME"<pos:position pos:line="125" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="35"/></argument_list></call><operator pos:line="125" pos:column="35">)<pos:position pos:line="125" pos:column="36"/></operator> <operator pos:line="125" pos:column="37">!=<pos:position pos:line="125" pos:column="39"/></operator> <name pos:line="125" pos:column="40">NULL<pos:position pos:line="125" pos:column="44"/></name></expr>)<pos:position pos:line="125" pos:column="45"/></condition><then pos:line="125" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><name pos:line="126" pos:column="9">script_name<pos:position pos:line="126" pos:column="20"/></name> <operator pos:line="126" pos:column="21">=<pos:position pos:line="126" pos:column="22"/></operator> <call><name pos:line="126" pos:column="23">xstrdup<pos:position pos:line="126" pos:column="30"/></name><argument_list pos:line="126" pos:column="30">(<argument><expr><name pos:line="126" pos:column="31">s<pos:position pos:line="126" pos:column="32"/></name></expr></argument>)<pos:position pos:line="126" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="34"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="128" pos:column="5">char<pos:position pos:line="128" pos:column="9"/></name> <modifier pos:line="128" pos:column="10">*<pos:position pos:line="128" pos:column="11"/></modifier><modifier pos:line="128" pos:column="11">*<pos:position pos:line="128" pos:column="12"/></modifier></type><name pos:line="128" pos:column="12">args<pos:position pos:line="128" pos:column="16"/></name> <init pos:line="128" pos:column="17">= <expr><name pos:line="128" pos:column="19">argv<pos:position pos:line="128" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="128" pos:column="24"/></decl_stmt>
    <while pos:line="129" pos:column="5">while <condition pos:line="129" pos:column="11">(<expr><name pos:line="129" pos:column="12">argc<pos:position pos:line="129" pos:column="16"/></name> <operator pos:line="129" pos:column="17">&gt;<pos:position pos:line="129" pos:column="21"/></operator> <literal type="number" pos:line="129" pos:column="19">1<pos:position pos:line="129" pos:column="20"/></literal> <operator pos:line="129" pos:column="21">&amp;&amp;<pos:position pos:line="129" pos:column="31"/></operator> <name><name pos:line="129" pos:column="24">args<pos:position pos:line="129" pos:column="28"/></name><index pos:line="129" pos:column="28">[<expr><literal type="number" pos:line="129" pos:column="29">1<pos:position pos:line="129" pos:column="30"/></literal></expr>]<pos:position pos:line="129" pos:column="31"/></index><index pos:line="129" pos:column="31">[<expr><literal type="number" pos:line="129" pos:column="32">0<pos:position pos:line="129" pos:column="33"/></literal></expr>]<pos:position pos:line="129" pos:column="34"/></index></name> <operator pos:line="129" pos:column="35">==<pos:position pos:line="129" pos:column="37"/></operator> <literal type="char" pos:line="129" pos:column="38">'-'<pos:position pos:line="129" pos:column="41"/></literal></expr>)<pos:position pos:line="129" pos:column="42"/></condition> <block pos:line="129" pos:column="43">{
<comment type="line" pos:line="130" pos:column="1">//        const char *value = "";</comment>
        <decl_stmt><decl><type><name pos:line="131" pos:column="9">char<pos:position pos:line="131" pos:column="13"/></name></type> <name pos:line="131" pos:column="14">option<pos:position pos:line="131" pos:column="20"/></name> <init pos:line="131" pos:column="21">= <expr><name><name pos:line="131" pos:column="23">args<pos:position pos:line="131" pos:column="27"/></name><index pos:line="131" pos:column="27">[<expr><literal type="number" pos:line="131" pos:column="28">1<pos:position pos:line="131" pos:column="29"/></literal></expr>]<pos:position pos:line="131" pos:column="30"/></index><index pos:line="131" pos:column="30">[<expr><literal type="number" pos:line="131" pos:column="31">1<pos:position pos:line="131" pos:column="32"/></literal></expr>]<pos:position pos:line="131" pos:column="33"/></index></name></expr></init></decl>;<pos:position pos:line="131" pos:column="34"/></decl_stmt>
        <switch pos:line="132" pos:column="9">switch <condition pos:line="132" pos:column="16">(<expr><name pos:line="132" pos:column="17">option<pos:position pos:line="132" pos:column="23"/></name></expr>)<pos:position pos:line="132" pos:column="24"/></condition> <block pos:line="132" pos:column="25">{
        <case pos:line="133" pos:column="9">case <expr><literal type="char" pos:line="133" pos:column="14">'d'<pos:position pos:line="133" pos:column="17"/></literal></expr>:<pos:position pos:line="133" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="134" pos:column="13">debug_enabled<pos:position pos:line="134" pos:column="26"/></name> <operator pos:line="134" pos:column="27">=<pos:position pos:line="134" pos:column="28"/></operator> <literal type="number" pos:line="134" pos:column="29">1<pos:position pos:line="134" pos:column="30"/></literal></expr>;<pos:position pos:line="134" pos:column="31"/></expr_stmt>
            <break pos:line="135" pos:column="13">break;<pos:position pos:line="135" pos:column="19"/></break>
        <default pos:line="136" pos:column="9">default:<pos:position pos:line="136" pos:column="17"/></default>
<cpp:if pos:line="137" pos:column="1">#<cpp:directive pos:line="137" pos:column="2">if<pos:position pos:line="137" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="137" pos:column="5">0<pos:position pos:line="137" pos:column="6"/></literal></expr></cpp:if> <comment type="line" pos:line="137" pos:column="7">// unused for now.</comment>
            if (strlen(args[1]) &gt; 2) {
                value = args[1] + 2;
            } else if (argc &gt; 2) {
                value = args[2];
                ++args;
                --argc;
            } else
                value = "";
<cpp:endif pos:line="146" pos:column="1">#<cpp:directive pos:line="146" pos:column="2">endif<pos:position pos:line="146" pos:column="7"/></cpp:directive></cpp:endif>
            <break pos:line="147" pos:column="13">break;<pos:position pos:line="147" pos:column="19"/></break>
        }<pos:position pos:line="148" pos:column="10"/></block></switch>
        <expr_stmt><expr><operator pos:line="149" pos:column="9">++<pos:position pos:line="149" pos:column="11"/></operator><name pos:line="149" pos:column="11">args<pos:position pos:line="149" pos:column="15"/></name></expr>;<pos:position pos:line="149" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="150" pos:column="9">--<pos:position pos:line="150" pos:column="11"/></operator><name pos:line="150" pos:column="11">argc<pos:position pos:line="150" pos:column="15"/></name></expr>;<pos:position pos:line="150" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="151" pos:column="6"/></block></while>

    <expr_stmt><expr><name pos:line="153" pos:column="5">req<pos:position pos:line="153" pos:column="8"/></name> <operator pos:line="153" pos:column="9">=<pos:position pos:line="153" pos:column="10"/></operator> <call><name pos:line="153" pos:column="11">read_request<pos:position pos:line="153" pos:column="23"/></name><argument_list pos:line="153" pos:column="23">()<pos:position pos:line="153" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="26"/></expr_stmt>

    <return pos:line="155" pos:column="5">return <expr><call><name pos:line="155" pos:column="12">process_request<pos:position pos:line="155" pos:column="27"/></name><argument_list pos:line="155" pos:column="27">(<argument><expr><name pos:line="155" pos:column="28">req<pos:position pos:line="155" pos:column="31"/></name></expr></argument>)<pos:position pos:line="155" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="33"/></return>
}<pos:position pos:line="156" pos:column="2"/></block></function>

<function><specifier pos:line="158" pos:column="1">static<pos:position pos:line="158" pos:column="7"/></specifier> <type><name pos:line="158" pos:column="8">char<pos:position pos:line="158" pos:column="12"/></name> <modifier pos:line="158" pos:column="13">*<pos:position pos:line="158" pos:column="14"/></modifier></type>
<name pos:line="159" pos:column="1">read_post_request<pos:position pos:line="159" pos:column="18"/></name><parameter_list pos:line="159" pos:column="18">(<parameter><decl><type><name pos:line="159" pos:column="19">void<pos:position pos:line="159" pos:column="23"/></name></type></decl></parameter>)<pos:position pos:line="159" pos:column="24"/></parameter_list>
<block pos:line="160" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="161" pos:column="5">char<pos:position pos:line="161" pos:column="9"/></name> <modifier pos:line="161" pos:column="10">*<pos:position pos:line="161" pos:column="11"/></modifier></type><name pos:line="161" pos:column="11">s<pos:position pos:line="161" pos:column="12"/></name></decl>;<pos:position pos:line="161" pos:column="13"/></decl_stmt>

    <if pos:line="163" pos:column="5">if <condition pos:line="163" pos:column="8">(<expr><operator pos:line="163" pos:column="9">(<pos:position pos:line="163" pos:column="10"/></operator><name pos:line="163" pos:column="10">s<pos:position pos:line="163" pos:column="11"/></name> <operator pos:line="163" pos:column="12">=<pos:position pos:line="163" pos:column="13"/></operator> <call><name pos:line="163" pos:column="14">getenv<pos:position pos:line="163" pos:column="20"/></name><argument_list pos:line="163" pos:column="20">(<argument><expr><literal type="string" pos:line="163" pos:column="21">"REQUEST_METHOD"<pos:position pos:line="163" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="163" pos:column="38"/></argument_list></call><operator pos:line="163" pos:column="38">)<pos:position pos:line="163" pos:column="39"/></operator> <operator pos:line="163" pos:column="40">==<pos:position pos:line="163" pos:column="42"/></operator> <name pos:line="163" pos:column="43">NULL<pos:position pos:line="163" pos:column="47"/></name></expr>)<pos:position pos:line="163" pos:column="48"/></condition><then pos:line="163" pos:column="48">
        <block type="pseudo"><return pos:line="164" pos:column="9">return <expr><name pos:line="164" pos:column="16">NULL<pos:position pos:line="164" pos:column="20"/></name></expr>;<pos:position pos:line="164" pos:column="21"/></return></block></then></if>

    <if pos:line="166" pos:column="5">if <condition pos:line="166" pos:column="8">(<expr><literal type="number" pos:line="166" pos:column="9">0<pos:position pos:line="166" pos:column="10"/></literal> <operator pos:line="166" pos:column="11">!=<pos:position pos:line="166" pos:column="13"/></operator> <call><name pos:line="166" pos:column="14">strcasecmp<pos:position pos:line="166" pos:column="24"/></name><argument_list pos:line="166" pos:column="24">(<argument><expr><name pos:line="166" pos:column="25">s<pos:position pos:line="166" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="28">"POST"<pos:position pos:line="166" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="166" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="166" pos:column="36"/></condition><then pos:line="166" pos:column="36">
        <block type="pseudo"><return pos:line="167" pos:column="9">return <expr><name pos:line="167" pos:column="16">NULL<pos:position pos:line="167" pos:column="20"/></name></expr>;<pos:position pos:line="167" pos:column="21"/></return></block></then></if>

    <if pos:line="169" pos:column="5">if <condition pos:line="169" pos:column="8">(<expr><operator pos:line="169" pos:column="9">(<pos:position pos:line="169" pos:column="10"/></operator><name pos:line="169" pos:column="10">s<pos:position pos:line="169" pos:column="11"/></name> <operator pos:line="169" pos:column="12">=<pos:position pos:line="169" pos:column="13"/></operator> <call><name pos:line="169" pos:column="14">getenv<pos:position pos:line="169" pos:column="20"/></name><argument_list pos:line="169" pos:column="20">(<argument><expr><literal type="string" pos:line="169" pos:column="21">"CONTENT_LENGTH"<pos:position pos:line="169" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="169" pos:column="38"/></argument_list></call><operator pos:line="169" pos:column="38">)<pos:position pos:line="169" pos:column="39"/></operator> <operator pos:line="169" pos:column="40">==<pos:position pos:line="169" pos:column="42"/></operator> <name pos:line="169" pos:column="43">NULL<pos:position pos:line="169" pos:column="47"/></name></expr>)<pos:position pos:line="169" pos:column="48"/></condition><then pos:line="169" pos:column="48">
        <block type="pseudo"><return pos:line="170" pos:column="9">return <expr><name pos:line="170" pos:column="16">NULL<pos:position pos:line="170" pos:column="20"/></name></expr>;<pos:position pos:line="170" pos:column="21"/></return></block></then></if>

    <if pos:line="172" pos:column="5">if <condition pos:line="172" pos:column="8">(<expr><operator pos:line="172" pos:column="9">*<pos:position pos:line="172" pos:column="10"/></operator><name pos:line="172" pos:column="10">s<pos:position pos:line="172" pos:column="11"/></name> <operator pos:line="172" pos:column="12">==<pos:position pos:line="172" pos:column="14"/></operator> <literal type="char" pos:line="172" pos:column="15">'-'<pos:position pos:line="172" pos:column="18"/></literal></expr>)<pos:position pos:line="172" pos:column="19"/></condition><then pos:line="172" pos:column="19"> <comment type="line" pos:line="172" pos:column="20">// negative length content huh?</comment>
        <block type="pseudo"><return pos:line="173" pos:column="9">return <expr><name pos:line="173" pos:column="16">NULL<pos:position pos:line="173" pos:column="20"/></name></expr>;<pos:position pos:line="173" pos:column="21"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="175" pos:column="5">uint64_t<pos:position pos:line="175" pos:column="13"/></name></type> <name pos:line="175" pos:column="14">len<pos:position pos:line="175" pos:column="17"/></name></decl>;<pos:position pos:line="175" pos:column="18"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="177" pos:column="5">char<pos:position pos:line="177" pos:column="9"/></name> <modifier pos:line="177" pos:column="10">*<pos:position pos:line="177" pos:column="11"/></modifier></type><name pos:line="177" pos:column="11">endptr<pos:position pos:line="177" pos:column="17"/></name> <init pos:line="177" pos:column="18">= <expr><name pos:line="177" pos:column="20">s<pos:position pos:line="177" pos:column="21"/></name><operator pos:line="177" pos:column="21">+<pos:position pos:line="177" pos:column="22"/></operator> <call><name pos:line="177" pos:column="23">strlen<pos:position pos:line="177" pos:column="29"/></name><argument_list pos:line="177" pos:column="29">(<argument><expr><name pos:line="177" pos:column="30">s<pos:position pos:line="177" pos:column="31"/></name></expr></argument>)<pos:position pos:line="177" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="177" pos:column="33"/></decl_stmt>
    <if pos:line="178" pos:column="5">if <condition pos:line="178" pos:column="8">(<expr><operator pos:line="178" pos:column="9">(<pos:position pos:line="178" pos:column="10"/></operator><name pos:line="178" pos:column="10">len<pos:position pos:line="178" pos:column="13"/></name> <operator pos:line="178" pos:column="14">=<pos:position pos:line="178" pos:column="15"/></operator> <call><name pos:line="178" pos:column="16">strtoll<pos:position pos:line="178" pos:column="23"/></name><argument_list pos:line="178" pos:column="23">(<argument><expr><name pos:line="178" pos:column="24">s<pos:position pos:line="178" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="178" pos:column="27">&amp;<pos:position pos:line="178" pos:column="32"/></operator><name pos:line="178" pos:column="28">endptr<pos:position pos:line="178" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="178" pos:column="36">10<pos:position pos:line="178" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="178" pos:column="39"/></argument_list></call><operator pos:line="178" pos:column="39">)<pos:position pos:line="178" pos:column="40"/></operator> <operator pos:line="178" pos:column="41">&lt;=<pos:position pos:line="178" pos:column="46"/></operator> <literal type="number" pos:line="178" pos:column="44">0<pos:position pos:line="178" pos:column="45"/></literal></expr>)<pos:position pos:line="178" pos:column="46"/></condition><then pos:line="178" pos:column="46">
        <block type="pseudo"><return pos:line="179" pos:column="9">return <expr><name pos:line="179" pos:column="16">NULL<pos:position pos:line="179" pos:column="20"/></name></expr>;<pos:position pos:line="179" pos:column="21"/></return></block></then></if>

    <comment type="line" pos:line="181" pos:column="5">// limit the input to something reasonable.</comment>
    <comment type="line" pos:line="182" pos:column="5">// 4KB should be enough for the GET/POST data length, but may be extended.</comment>
    <decl_stmt><decl><type><name pos:line="183" pos:column="5">size_t<pos:position pos:line="183" pos:column="11"/></name></type> <name pos:line="183" pos:column="12">bufLen<pos:position pos:line="183" pos:column="18"/></name> <init pos:line="183" pos:column="19">= <expr><operator pos:line="183" pos:column="21">(<pos:position pos:line="183" pos:column="22"/></operator><ternary><condition><expr><name pos:line="183" pos:column="22">len<pos:position pos:line="183" pos:column="25"/></name> <operator pos:line="183" pos:column="26">&lt;<pos:position pos:line="183" pos:column="30"/></operator> <literal type="number" pos:line="183" pos:column="28">4096<pos:position pos:line="183" pos:column="32"/></literal></expr> ?<pos:position pos:line="183" pos:column="34"/></condition><then pos:line="183" pos:column="34"> <expr><name pos:line="183" pos:column="35">len<pos:position pos:line="183" pos:column="38"/></name></expr> <pos:position pos:line="183" pos:column="39"/></then><else pos:line="183" pos:column="39">: <expr><literal type="number" pos:line="183" pos:column="41">4095<pos:position pos:line="183" pos:column="45"/></literal></expr></else></ternary><operator pos:line="183" pos:column="45">)<pos:position pos:line="183" pos:column="46"/></operator></expr></init></decl>;<pos:position pos:line="183" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="184" pos:column="5">char<pos:position pos:line="184" pos:column="9"/></name> <modifier pos:line="184" pos:column="10">*<pos:position pos:line="184" pos:column="11"/></modifier></type><name pos:line="184" pos:column="11">buf<pos:position pos:line="184" pos:column="14"/></name> <init pos:line="184" pos:column="15">= <expr><operator pos:line="184" pos:column="17">(<pos:position pos:line="184" pos:column="18"/></operator><name pos:line="184" pos:column="18">char<pos:position pos:line="184" pos:column="22"/></name> <operator pos:line="184" pos:column="23">*<pos:position pos:line="184" pos:column="24"/></operator><operator pos:line="184" pos:column="24">)<pos:position pos:line="184" pos:column="25"/></operator><call><name pos:line="184" pos:column="25">xmalloc<pos:position pos:line="184" pos:column="32"/></name><argument_list pos:line="184" pos:column="32">(<argument><expr><name pos:line="184" pos:column="33">bufLen<pos:position pos:line="184" pos:column="39"/></name> <operator pos:line="184" pos:column="40">+<pos:position pos:line="184" pos:column="41"/></operator> <literal type="number" pos:line="184" pos:column="42">1<pos:position pos:line="184" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="184" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="184" pos:column="45"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="186" pos:column="5">size_t<pos:position pos:line="186" pos:column="11"/></name></type> <name pos:line="186" pos:column="12">readLen<pos:position pos:line="186" pos:column="19"/></name> <init pos:line="186" pos:column="20">= <expr><call><name pos:line="186" pos:column="22">fread<pos:position pos:line="186" pos:column="27"/></name><argument_list pos:line="186" pos:column="27">(<argument><expr><name pos:line="186" pos:column="28">buf<pos:position pos:line="186" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="186" pos:column="33">1<pos:position pos:line="186" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="186" pos:column="36">bufLen<pos:position pos:line="186" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="44">stdin<pos:position pos:line="186" pos:column="49"/></name></expr></argument>)<pos:position pos:line="186" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="186" pos:column="51"/></decl_stmt>
    <if pos:line="187" pos:column="5">if <condition pos:line="187" pos:column="8">(<expr><name pos:line="187" pos:column="9">readLen<pos:position pos:line="187" pos:column="16"/></name> <operator pos:line="187" pos:column="17">==<pos:position pos:line="187" pos:column="19"/></operator> <literal type="number" pos:line="187" pos:column="20">0<pos:position pos:line="187" pos:column="21"/></literal></expr>)<pos:position pos:line="187" pos:column="22"/></condition><then pos:line="187" pos:column="22"> <block pos:line="187" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="188" pos:column="9">xfree<pos:position pos:line="188" pos:column="14"/></name><argument_list pos:line="188" pos:column="14">(<argument><expr><name pos:line="188" pos:column="15">buf<pos:position pos:line="188" pos:column="18"/></name></expr></argument>)<pos:position pos:line="188" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="20"/></expr_stmt>
        <return pos:line="189" pos:column="9">return <expr><name pos:line="189" pos:column="16">NULL<pos:position pos:line="189" pos:column="20"/></name></expr>;<pos:position pos:line="189" pos:column="21"/></return>
    }<pos:position pos:line="190" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="191" pos:column="5">buf<pos:position pos:line="191" pos:column="8"/></name><index pos:line="191" pos:column="8">[<expr><name pos:line="191" pos:column="9">readLen<pos:position pos:line="191" pos:column="16"/></name></expr>]<pos:position pos:line="191" pos:column="17"/></index></name> <operator pos:line="191" pos:column="18">=<pos:position pos:line="191" pos:column="19"/></operator> <literal type="char" pos:line="191" pos:column="20">'\0'<pos:position pos:line="191" pos:column="24"/></literal></expr>;<pos:position pos:line="191" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="192" pos:column="5">len<pos:position pos:line="192" pos:column="8"/></name> <operator pos:line="192" pos:column="9">-=<pos:position pos:line="192" pos:column="11"/></operator> <name pos:line="192" pos:column="12">readLen<pos:position pos:line="192" pos:column="19"/></name></expr>;<pos:position pos:line="192" pos:column="20"/></expr_stmt>

    <comment type="line" pos:line="194" pos:column="5">// purge the remainder of the request entity</comment>
    <while pos:line="195" pos:column="5">while <condition pos:line="195" pos:column="11">(<expr><name pos:line="195" pos:column="12">len<pos:position pos:line="195" pos:column="15"/></name> <operator pos:line="195" pos:column="16">&gt;<pos:position pos:line="195" pos:column="20"/></operator> <literal type="number" pos:line="195" pos:column="18">0<pos:position pos:line="195" pos:column="19"/></literal> <operator pos:line="195" pos:column="20">&amp;&amp;<pos:position pos:line="195" pos:column="30"/></operator> <name pos:line="195" pos:column="23">readLen<pos:position pos:line="195" pos:column="30"/></name></expr>)<pos:position pos:line="195" pos:column="31"/></condition> <block pos:line="195" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="196" pos:column="9">char<pos:position pos:line="196" pos:column="13"/></name></type> <name><name pos:line="196" pos:column="14">temp<pos:position pos:line="196" pos:column="18"/></name><index pos:line="196" pos:column="18">[<expr><literal type="number" pos:line="196" pos:column="19">65535<pos:position pos:line="196" pos:column="24"/></literal></expr>]<pos:position pos:line="196" pos:column="25"/></index></name></decl>;<pos:position pos:line="196" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><name pos:line="197" pos:column="9">readLen<pos:position pos:line="197" pos:column="16"/></name> <operator pos:line="197" pos:column="17">=<pos:position pos:line="197" pos:column="18"/></operator> <call><name pos:line="197" pos:column="19">fread<pos:position pos:line="197" pos:column="24"/></name><argument_list pos:line="197" pos:column="24">(<argument><expr><name pos:line="197" pos:column="25">temp<pos:position pos:line="197" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="197" pos:column="31">1<pos:position pos:line="197" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="197" pos:column="34">65535<pos:position pos:line="197" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="197" pos:column="41">stdin<pos:position pos:line="197" pos:column="46"/></name></expr></argument>)<pos:position pos:line="197" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="198" pos:column="9">len<pos:position pos:line="198" pos:column="12"/></name> <operator pos:line="198" pos:column="13">-=<pos:position pos:line="198" pos:column="15"/></operator> <name pos:line="198" pos:column="16">readLen<pos:position pos:line="198" pos:column="23"/></name></expr>;<pos:position pos:line="198" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="199" pos:column="6"/></block></while>

    <return pos:line="201" pos:column="5">return <expr><name pos:line="201" pos:column="12">buf<pos:position pos:line="201" pos:column="15"/></name></expr>;<pos:position pos:line="201" pos:column="16"/></return>
}<pos:position pos:line="202" pos:column="2"/></block></function>

<function><specifier pos:line="204" pos:column="1">static<pos:position pos:line="204" pos:column="7"/></specifier> <type><name pos:line="204" pos:column="8">char<pos:position pos:line="204" pos:column="12"/></name> <modifier pos:line="204" pos:column="13">*<pos:position pos:line="204" pos:column="14"/></modifier></type>
<name pos:line="205" pos:column="1">read_get_request<pos:position pos:line="205" pos:column="17"/></name><parameter_list pos:line="205" pos:column="17">(<parameter><decl><type><name pos:line="205" pos:column="18">void<pos:position pos:line="205" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="205" pos:column="23"/></parameter_list>
<block pos:line="206" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="207" pos:column="5">char<pos:position pos:line="207" pos:column="9"/></name> <modifier pos:line="207" pos:column="10">*<pos:position pos:line="207" pos:column="11"/></modifier></type><name pos:line="207" pos:column="11">s<pos:position pos:line="207" pos:column="12"/></name></decl>;<pos:position pos:line="207" pos:column="13"/></decl_stmt>

    <if pos:line="209" pos:column="5">if <condition pos:line="209" pos:column="8">(<expr><operator pos:line="209" pos:column="9">(<pos:position pos:line="209" pos:column="10"/></operator><name pos:line="209" pos:column="10">s<pos:position pos:line="209" pos:column="11"/></name> <operator pos:line="209" pos:column="12">=<pos:position pos:line="209" pos:column="13"/></operator> <call><name pos:line="209" pos:column="14">getenv<pos:position pos:line="209" pos:column="20"/></name><argument_list pos:line="209" pos:column="20">(<argument><expr><literal type="string" pos:line="209" pos:column="21">"QUERY_STRING"<pos:position pos:line="209" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="209" pos:column="36"/></argument_list></call><operator pos:line="209" pos:column="36">)<pos:position pos:line="209" pos:column="37"/></operator> <operator pos:line="209" pos:column="38">==<pos:position pos:line="209" pos:column="40"/></operator> <name pos:line="209" pos:column="41">NULL<pos:position pos:line="209" pos:column="45"/></name></expr>)<pos:position pos:line="209" pos:column="46"/></condition><then pos:line="209" pos:column="46">
        <block type="pseudo"><return pos:line="210" pos:column="9">return <expr><name pos:line="210" pos:column="16">NULL<pos:position pos:line="210" pos:column="20"/></name></expr>;<pos:position pos:line="210" pos:column="21"/></return></block></then></if>

    <return pos:line="212" pos:column="5">return <expr><call><name pos:line="212" pos:column="12">xstrdup<pos:position pos:line="212" pos:column="19"/></name><argument_list pos:line="212" pos:column="19">(<argument><expr><name pos:line="212" pos:column="20">s<pos:position pos:line="212" pos:column="21"/></name></expr></argument>)<pos:position pos:line="212" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="23"/></return>
}<pos:position pos:line="213" pos:column="2"/></block></function>

<function><specifier pos:line="215" pos:column="1">static<pos:position pos:line="215" pos:column="7"/></specifier> <type><name pos:line="215" pos:column="8">cachemgr_request<pos:position pos:line="215" pos:column="24"/></name> <modifier pos:line="215" pos:column="25">*<pos:position pos:line="215" pos:column="26"/></modifier></type>
<name pos:line="216" pos:column="1">read_request<pos:position pos:line="216" pos:column="13"/></name><parameter_list pos:line="216" pos:column="13">(<parameter><decl><type><name pos:line="216" pos:column="14">void<pos:position pos:line="216" pos:column="18"/></name></type></decl></parameter>)<pos:position pos:line="216" pos:column="19"/></parameter_list>
<block pos:line="217" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="218" pos:column="5">char<pos:position pos:line="218" pos:column="9"/></name> <modifier pos:line="218" pos:column="10">*<pos:position pos:line="218" pos:column="11"/></modifier></type><name pos:line="218" pos:column="11">buf<pos:position pos:line="218" pos:column="14"/></name></decl>;<pos:position pos:line="218" pos:column="15"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="220" pos:column="5">cachemgr_request<pos:position pos:line="220" pos:column="21"/></name> <modifier pos:line="220" pos:column="22">*<pos:position pos:line="220" pos:column="23"/></modifier></type><name pos:line="220" pos:column="23">req<pos:position pos:line="220" pos:column="26"/></name></decl>;<pos:position pos:line="220" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="221" pos:column="5">char<pos:position pos:line="221" pos:column="9"/></name> <modifier pos:line="221" pos:column="10">*<pos:position pos:line="221" pos:column="11"/></modifier></type><name pos:line="221" pos:column="11">s<pos:position pos:line="221" pos:column="12"/></name></decl>;<pos:position pos:line="221" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="222" pos:column="5">char<pos:position pos:line="222" pos:column="9"/></name> <modifier pos:line="222" pos:column="10">*<pos:position pos:line="222" pos:column="11"/></modifier></type><name pos:line="222" pos:column="11">t<pos:position pos:line="222" pos:column="12"/></name> <init pos:line="222" pos:column="13">= <expr><name pos:line="222" pos:column="15">NULL<pos:position pos:line="222" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="222" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="223" pos:column="5">char<pos:position pos:line="223" pos:column="9"/></name> <modifier pos:line="223" pos:column="10">*<pos:position pos:line="223" pos:column="11"/></modifier></type><name pos:line="223" pos:column="11">q<pos:position pos:line="223" pos:column="12"/></name></decl>;<pos:position pos:line="223" pos:column="13"/></decl_stmt>

    <if pos:line="225" pos:column="5">if <condition pos:line="225" pos:column="8">(<expr><operator pos:line="225" pos:column="9">(<pos:position pos:line="225" pos:column="10"/></operator><name pos:line="225" pos:column="10">buf<pos:position pos:line="225" pos:column="13"/></name> <operator pos:line="225" pos:column="14">=<pos:position pos:line="225" pos:column="15"/></operator> <call><name pos:line="225" pos:column="16">read_post_request<pos:position pos:line="225" pos:column="33"/></name><argument_list pos:line="225" pos:column="33">()<pos:position pos:line="225" pos:column="35"/></argument_list></call><operator pos:line="225" pos:column="35">)<pos:position pos:line="225" pos:column="36"/></operator> <operator pos:line="225" pos:column="37">!=<pos:position pos:line="225" pos:column="39"/></operator> <name pos:line="225" pos:column="40">NULL<pos:position pos:line="225" pos:column="44"/></name></expr>)<pos:position pos:line="225" pos:column="45"/></condition><then pos:line="225" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="226" pos:column="9">(<pos:position pos:line="226" pos:column="10"/></operator><name pos:line="226" pos:column="10">void<pos:position pos:line="226" pos:column="14"/></name><operator pos:line="226" pos:column="14">)<pos:position pos:line="226" pos:column="15"/></operator> <literal type="number" pos:line="226" pos:column="16">0<pos:position pos:line="226" pos:column="17"/></literal></expr>;<pos:position pos:line="226" pos:column="18"/></expr_stmt></block></then>
    <elseif pos:line="227" pos:column="5">else <if pos:line="227" pos:column="10">if <condition pos:line="227" pos:column="13">(<expr><operator pos:line="227" pos:column="14">(<pos:position pos:line="227" pos:column="15"/></operator><name pos:line="227" pos:column="15">buf<pos:position pos:line="227" pos:column="18"/></name> <operator pos:line="227" pos:column="19">=<pos:position pos:line="227" pos:column="20"/></operator> <call><name pos:line="227" pos:column="21">read_get_request<pos:position pos:line="227" pos:column="37"/></name><argument_list pos:line="227" pos:column="37">()<pos:position pos:line="227" pos:column="39"/></argument_list></call><operator pos:line="227" pos:column="39">)<pos:position pos:line="227" pos:column="40"/></operator> <operator pos:line="227" pos:column="41">!=<pos:position pos:line="227" pos:column="43"/></operator> <name pos:line="227" pos:column="44">NULL<pos:position pos:line="227" pos:column="48"/></name></expr>)<pos:position pos:line="227" pos:column="49"/></condition><then pos:line="227" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="228" pos:column="9">(<pos:position pos:line="228" pos:column="10"/></operator><name pos:line="228" pos:column="10">void<pos:position pos:line="228" pos:column="14"/></name><operator pos:line="228" pos:column="14">)<pos:position pos:line="228" pos:column="15"/></operator> <literal type="number" pos:line="228" pos:column="16">0<pos:position pos:line="228" pos:column="17"/></literal></expr>;<pos:position pos:line="228" pos:column="18"/></expr_stmt></block></then></if></elseif>
    <else pos:line="229" pos:column="5">else
        <block type="pseudo"><return pos:line="230" pos:column="9">return <expr><name pos:line="230" pos:column="16">NULL<pos:position pos:line="230" pos:column="20"/></name></expr>;<pos:position pos:line="230" pos:column="21"/></return></block></else></if>

<cpp:if pos:line="232" pos:column="1">#<cpp:directive pos:line="232" pos:column="2">if<pos:position pos:line="232" pos:column="4"/></cpp:directive> <expr><name pos:line="232" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="232" pos:column="20"/></name></expr></cpp:if>

    <if pos:line="234" pos:column="5">if <condition pos:line="234" pos:column="8">(<expr><call><name pos:line="234" pos:column="9">strlen<pos:position pos:line="234" pos:column="15"/></name><argument_list pos:line="234" pos:column="15">(<argument><expr><name pos:line="234" pos:column="16">buf<pos:position pos:line="234" pos:column="19"/></name></expr></argument>)<pos:position pos:line="234" pos:column="20"/></argument_list></call> <operator pos:line="234" pos:column="21">==<pos:position pos:line="234" pos:column="23"/></operator> <literal type="number" pos:line="234" pos:column="24">0<pos:position pos:line="234" pos:column="25"/></literal> <operator pos:line="234" pos:column="26">||<pos:position pos:line="234" pos:column="28"/></operator> <call><name pos:line="234" pos:column="29">strlen<pos:position pos:line="234" pos:column="35"/></name><argument_list pos:line="234" pos:column="35">(<argument><expr><name pos:line="234" pos:column="36">buf<pos:position pos:line="234" pos:column="39"/></name></expr></argument>)<pos:position pos:line="234" pos:column="40"/></argument_list></call> <operator pos:line="234" pos:column="41">==<pos:position pos:line="234" pos:column="43"/></operator> <literal type="number" pos:line="234" pos:column="44">4000<pos:position pos:line="234" pos:column="48"/></literal></expr>)<pos:position pos:line="234" pos:column="49"/></condition><then pos:line="234" pos:column="49">
<cpp:else pos:line="235" pos:column="1">#<cpp:directive pos:line="235" pos:column="2">else<pos:position pos:line="235" pos:column="6"/></cpp:directive></cpp:else>

    <block type="pseudo"><if pos:line="237" pos:column="5">if <condition pos:line="237" pos:column="8">(<expr><call><name pos:line="237" pos:column="9">strlen<pos:position pos:line="237" pos:column="15"/></name><argument_list pos:line="237" pos:column="15">(<argument><expr><name pos:line="237" pos:column="16">buf<pos:position pos:line="237" pos:column="19"/></name></expr></argument>)<pos:position pos:line="237" pos:column="20"/></argument_list></call> <operator pos:line="237" pos:column="21">==<pos:position pos:line="237" pos:column="23"/></operator> <literal type="number" pos:line="237" pos:column="24">0<pos:position pos:line="237" pos:column="25"/></literal></expr>)<pos:position pos:line="237" pos:column="26"/></condition><then pos:line="237" pos:column="26">
<cpp:endif pos:line="238" pos:column="1">#<cpp:directive pos:line="238" pos:column="2">endif<pos:position pos:line="238" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="239" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="240" pos:column="9">xfree<pos:position pos:line="240" pos:column="14"/></name><argument_list pos:line="240" pos:column="14">(<argument><expr><name pos:line="240" pos:column="15">buf<pos:position pos:line="240" pos:column="18"/></name></expr></argument>)<pos:position pos:line="240" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="20"/></expr_stmt>
        <return pos:line="241" pos:column="9">return <expr><name pos:line="241" pos:column="16">NULL<pos:position pos:line="241" pos:column="20"/></name></expr>;<pos:position pos:line="241" pos:column="21"/></return>
    }<pos:position pos:line="242" pos:column="6"/></block></then></if></block></then></if>

    <expr_stmt><expr><name pos:line="244" pos:column="5">req<pos:position pos:line="244" pos:column="8"/></name> <operator pos:line="244" pos:column="9">=<pos:position pos:line="244" pos:column="10"/></operator> <operator pos:line="244" pos:column="11">(<pos:position pos:line="244" pos:column="12"/></operator><name pos:line="244" pos:column="12">cachemgr_request<pos:position pos:line="244" pos:column="28"/></name> <operator pos:line="244" pos:column="29">*<pos:position pos:line="244" pos:column="30"/></operator><operator pos:line="244" pos:column="30">)<pos:position pos:line="244" pos:column="31"/></operator><call><name pos:line="244" pos:column="31">xcalloc<pos:position pos:line="244" pos:column="38"/></name><argument_list pos:line="244" pos:column="38">(<argument><expr><literal type="number" pos:line="244" pos:column="39">1<pos:position pos:line="244" pos:column="40"/></literal></expr></argument>, <argument><expr><sizeof pos:line="244" pos:column="42">sizeof<argument_list pos:line="244" pos:column="48">(<argument><expr><name pos:line="244" pos:column="49">cachemgr_request<pos:position pos:line="244" pos:column="65"/></name></expr></argument>)<pos:position pos:line="244" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="244" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="68"/></expr_stmt>

    <for pos:line="246" pos:column="5">for <control pos:line="246" pos:column="9">(<init><expr><name pos:line="246" pos:column="10">s<pos:position pos:line="246" pos:column="11"/></name> <operator pos:line="246" pos:column="12">=<pos:position pos:line="246" pos:column="13"/></operator> <call><name pos:line="246" pos:column="14">strtok<pos:position pos:line="246" pos:column="20"/></name><argument_list pos:line="246" pos:column="20">(<argument><expr><name pos:line="246" pos:column="21">buf<pos:position pos:line="246" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="246" pos:column="26">"&amp;"<pos:position pos:line="246" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="246" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="31"/></init> <condition><expr><name pos:line="246" pos:column="32">s<pos:position pos:line="246" pos:column="33"/></name> <operator pos:line="246" pos:column="34">!=<pos:position pos:line="246" pos:column="36"/></operator> <name pos:line="246" pos:column="37">NULL<pos:position pos:line="246" pos:column="41"/></name></expr>;<pos:position pos:line="246" pos:column="42"/></condition> <incr><expr><name pos:line="246" pos:column="43">s<pos:position pos:line="246" pos:column="44"/></name> <operator pos:line="246" pos:column="45">=<pos:position pos:line="246" pos:column="46"/></operator> <call><name pos:line="246" pos:column="47">strtok<pos:position pos:line="246" pos:column="53"/></name><argument_list pos:line="246" pos:column="53">(<argument><expr><name pos:line="246" pos:column="54">NULL<pos:position pos:line="246" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="246" pos:column="60">"&amp;"<pos:position pos:line="246" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="246" pos:column="64"/></argument_list></call></expr></incr>)<pos:position pos:line="246" pos:column="65"/></control> <block pos:line="246" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="247" pos:column="9">safe_free<pos:position pos:line="247" pos:column="18"/></name><argument_list pos:line="247" pos:column="18">(<argument><expr><name pos:line="247" pos:column="19">t<pos:position pos:line="247" pos:column="20"/></name></expr></argument>)<pos:position pos:line="247" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="247" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="248" pos:column="9">t<pos:position pos:line="248" pos:column="10"/></name> <operator pos:line="248" pos:column="11">=<pos:position pos:line="248" pos:column="12"/></operator> <call><name pos:line="248" pos:column="13">xstrdup<pos:position pos:line="248" pos:column="20"/></name><argument_list pos:line="248" pos:column="20">(<argument><expr><name pos:line="248" pos:column="21">s<pos:position pos:line="248" pos:column="22"/></name></expr></argument>)<pos:position pos:line="248" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="24"/></expr_stmt>

        <if pos:line="250" pos:column="9">if <condition pos:line="250" pos:column="12">(<expr><operator pos:line="250" pos:column="13">(<pos:position pos:line="250" pos:column="14"/></operator><name pos:line="250" pos:column="14">q<pos:position pos:line="250" pos:column="15"/></name> <operator pos:line="250" pos:column="16">=<pos:position pos:line="250" pos:column="17"/></operator> <call><name pos:line="250" pos:column="18">strchr<pos:position pos:line="250" pos:column="24"/></name><argument_list pos:line="250" pos:column="24">(<argument><expr><name pos:line="250" pos:column="25">t<pos:position pos:line="250" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="250" pos:column="28">'='<pos:position pos:line="250" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="250" pos:column="32"/></argument_list></call><operator pos:line="250" pos:column="32">)<pos:position pos:line="250" pos:column="33"/></operator> <operator pos:line="250" pos:column="34">==<pos:position pos:line="250" pos:column="36"/></operator> <name pos:line="250" pos:column="37">NULL<pos:position pos:line="250" pos:column="41"/></name></expr>)<pos:position pos:line="250" pos:column="42"/></condition><then pos:line="250" pos:column="42">
            <block type="pseudo"><continue pos:line="251" pos:column="13">continue;<pos:position pos:line="251" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><operator pos:line="253" pos:column="9">*<pos:position pos:line="253" pos:column="10"/></operator><name pos:line="253" pos:column="10">q<pos:position pos:line="253" pos:column="11"/></name> <operator pos:line="253" pos:column="12">=<pos:position pos:line="253" pos:column="13"/></operator> <literal type="char" pos:line="253" pos:column="14">'\0'<pos:position pos:line="253" pos:column="18"/></literal></expr>;<pos:position pos:line="253" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="254" pos:column="9">++<pos:position pos:line="254" pos:column="11"/></operator><name pos:line="254" pos:column="11">q<pos:position pos:line="254" pos:column="12"/></name></expr>;<pos:position pos:line="254" pos:column="13"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="256" pos:column="9">rfc1738_unescape<pos:position pos:line="256" pos:column="25"/></name><argument_list pos:line="256" pos:column="25">(<argument><expr><name pos:line="256" pos:column="26">t<pos:position pos:line="256" pos:column="27"/></name></expr></argument>)<pos:position pos:line="256" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="29"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="258" pos:column="9">rfc1738_unescape<pos:position pos:line="258" pos:column="25"/></name><argument_list pos:line="258" pos:column="25">(<argument><expr><name pos:line="258" pos:column="26">q<pos:position pos:line="258" pos:column="27"/></name></expr></argument>)<pos:position pos:line="258" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="29"/></expr_stmt>

        <if pos:line="260" pos:column="9">if <condition pos:line="260" pos:column="12">(<expr><literal type="number" pos:line="260" pos:column="13">0<pos:position pos:line="260" pos:column="14"/></literal> <operator pos:line="260" pos:column="15">==<pos:position pos:line="260" pos:column="17"/></operator> <call><name pos:line="260" pos:column="18">strcmp<pos:position pos:line="260" pos:column="24"/></name><argument_list pos:line="260" pos:column="24">(<argument><expr><name pos:line="260" pos:column="25">t<pos:position pos:line="260" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="260" pos:column="28">"server"<pos:position pos:line="260" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="260" pos:column="37"/></argument_list></call> <operator pos:line="260" pos:column="38">&amp;&amp;<pos:position pos:line="260" pos:column="48"/></operator> <call><name pos:line="260" pos:column="41">strlen<pos:position pos:line="260" pos:column="47"/></name><argument_list pos:line="260" pos:column="47">(<argument><expr><name pos:line="260" pos:column="48">q<pos:position pos:line="260" pos:column="49"/></name></expr></argument>)<pos:position pos:line="260" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="260" pos:column="51"/></condition><then pos:line="260" pos:column="51">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="261" pos:column="13">req<pos:position pos:line="261" pos:column="16"/></name><operator pos:line="261" pos:column="16">-&gt;<pos:position pos:line="261" pos:column="21"/></operator><name pos:line="261" pos:column="18">server<pos:position pos:line="261" pos:column="24"/></name></name> <operator pos:line="261" pos:column="25">=<pos:position pos:line="261" pos:column="26"/></operator> <call><name pos:line="261" pos:column="27">xstrdup<pos:position pos:line="261" pos:column="34"/></name><argument_list pos:line="261" pos:column="34">(<argument><expr><name pos:line="261" pos:column="35">q<pos:position pos:line="261" pos:column="36"/></name></expr></argument>)<pos:position pos:line="261" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="261" pos:column="38"/></expr_stmt></block></then>
        <elseif pos:line="262" pos:column="9">else <if pos:line="262" pos:column="14">if <condition pos:line="262" pos:column="17">(<expr><literal type="number" pos:line="262" pos:column="18">0<pos:position pos:line="262" pos:column="19"/></literal> <operator pos:line="262" pos:column="20">==<pos:position pos:line="262" pos:column="22"/></operator> <call><name pos:line="262" pos:column="23">strcmp<pos:position pos:line="262" pos:column="29"/></name><argument_list pos:line="262" pos:column="29">(<argument><expr><name pos:line="262" pos:column="30">t<pos:position pos:line="262" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="262" pos:column="33">"host"<pos:position pos:line="262" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="262" pos:column="40"/></argument_list></call> <operator pos:line="262" pos:column="41">&amp;&amp;<pos:position pos:line="262" pos:column="51"/></operator> <call><name pos:line="262" pos:column="44">strlen<pos:position pos:line="262" pos:column="50"/></name><argument_list pos:line="262" pos:column="50">(<argument><expr><name pos:line="262" pos:column="51">q<pos:position pos:line="262" pos:column="52"/></name></expr></argument>)<pos:position pos:line="262" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="262" pos:column="54"/></condition><then pos:line="262" pos:column="54">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="263" pos:column="13">req<pos:position pos:line="263" pos:column="16"/></name><operator pos:line="263" pos:column="16">-&gt;<pos:position pos:line="263" pos:column="21"/></operator><name pos:line="263" pos:column="18">hostname<pos:position pos:line="263" pos:column="26"/></name></name> <operator pos:line="263" pos:column="27">=<pos:position pos:line="263" pos:column="28"/></operator> <call><name pos:line="263" pos:column="29">xstrdup<pos:position pos:line="263" pos:column="36"/></name><argument_list pos:line="263" pos:column="36">(<argument><expr><name pos:line="263" pos:column="37">q<pos:position pos:line="263" pos:column="38"/></name></expr></argument>)<pos:position pos:line="263" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="40"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="264" pos:column="9">else <if pos:line="264" pos:column="14">if <condition pos:line="264" pos:column="17">(<expr><literal type="number" pos:line="264" pos:column="18">0<pos:position pos:line="264" pos:column="19"/></literal> <operator pos:line="264" pos:column="20">==<pos:position pos:line="264" pos:column="22"/></operator> <call><name pos:line="264" pos:column="23">strcmp<pos:position pos:line="264" pos:column="29"/></name><argument_list pos:line="264" pos:column="29">(<argument><expr><name pos:line="264" pos:column="30">t<pos:position pos:line="264" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="264" pos:column="33">"port"<pos:position pos:line="264" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="264" pos:column="40"/></argument_list></call> <operator pos:line="264" pos:column="41">&amp;&amp;<pos:position pos:line="264" pos:column="51"/></operator> <call><name pos:line="264" pos:column="44">strlen<pos:position pos:line="264" pos:column="50"/></name><argument_list pos:line="264" pos:column="50">(<argument><expr><name pos:line="264" pos:column="51">q<pos:position pos:line="264" pos:column="52"/></name></expr></argument>)<pos:position pos:line="264" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="264" pos:column="54"/></condition><then pos:line="264" pos:column="54">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="265" pos:column="13">req<pos:position pos:line="265" pos:column="16"/></name><operator pos:line="265" pos:column="16">-&gt;<pos:position pos:line="265" pos:column="21"/></operator><name pos:line="265" pos:column="18">port<pos:position pos:line="265" pos:column="22"/></name></name> <operator pos:line="265" pos:column="23">=<pos:position pos:line="265" pos:column="24"/></operator> <call><name pos:line="265" pos:column="25">atoi<pos:position pos:line="265" pos:column="29"/></name><argument_list pos:line="265" pos:column="29">(<argument><expr><name pos:line="265" pos:column="30">q<pos:position pos:line="265" pos:column="31"/></name></expr></argument>)<pos:position pos:line="265" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="265" pos:column="33"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="266" pos:column="9">else <if pos:line="266" pos:column="14">if <condition pos:line="266" pos:column="17">(<expr><literal type="number" pos:line="266" pos:column="18">0<pos:position pos:line="266" pos:column="19"/></literal> <operator pos:line="266" pos:column="20">==<pos:position pos:line="266" pos:column="22"/></operator> <call><name pos:line="266" pos:column="23">strcmp<pos:position pos:line="266" pos:column="29"/></name><argument_list pos:line="266" pos:column="29">(<argument><expr><name pos:line="266" pos:column="30">t<pos:position pos:line="266" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="266" pos:column="33">"user_name"<pos:position pos:line="266" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="266" pos:column="45"/></argument_list></call> <operator pos:line="266" pos:column="46">&amp;&amp;<pos:position pos:line="266" pos:column="56"/></operator> <call><name pos:line="266" pos:column="49">strlen<pos:position pos:line="266" pos:column="55"/></name><argument_list pos:line="266" pos:column="55">(<argument><expr><name pos:line="266" pos:column="56">q<pos:position pos:line="266" pos:column="57"/></name></expr></argument>)<pos:position pos:line="266" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="266" pos:column="59"/></condition><then pos:line="266" pos:column="59">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="267" pos:column="13">req<pos:position pos:line="267" pos:column="16"/></name><operator pos:line="267" pos:column="16">-&gt;<pos:position pos:line="267" pos:column="21"/></operator><name pos:line="267" pos:column="18">user_name<pos:position pos:line="267" pos:column="27"/></name></name> <operator pos:line="267" pos:column="28">=<pos:position pos:line="267" pos:column="29"/></operator> <call><name pos:line="267" pos:column="30">xstrdup<pos:position pos:line="267" pos:column="37"/></name><argument_list pos:line="267" pos:column="37">(<argument><expr><name pos:line="267" pos:column="38">q<pos:position pos:line="267" pos:column="39"/></name></expr></argument>)<pos:position pos:line="267" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="41"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="268" pos:column="9">else <if pos:line="268" pos:column="14">if <condition pos:line="268" pos:column="17">(<expr><literal type="number" pos:line="268" pos:column="18">0<pos:position pos:line="268" pos:column="19"/></literal> <operator pos:line="268" pos:column="20">==<pos:position pos:line="268" pos:column="22"/></operator> <call><name pos:line="268" pos:column="23">strcmp<pos:position pos:line="268" pos:column="29"/></name><argument_list pos:line="268" pos:column="29">(<argument><expr><name pos:line="268" pos:column="30">t<pos:position pos:line="268" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="268" pos:column="33">"passwd"<pos:position pos:line="268" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="268" pos:column="42"/></argument_list></call> <operator pos:line="268" pos:column="43">&amp;&amp;<pos:position pos:line="268" pos:column="53"/></operator> <call><name pos:line="268" pos:column="46">strlen<pos:position pos:line="268" pos:column="52"/></name><argument_list pos:line="268" pos:column="52">(<argument><expr><name pos:line="268" pos:column="53">q<pos:position pos:line="268" pos:column="54"/></name></expr></argument>)<pos:position pos:line="268" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="268" pos:column="56"/></condition><then pos:line="268" pos:column="56">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="269" pos:column="13">req<pos:position pos:line="269" pos:column="16"/></name><operator pos:line="269" pos:column="16">-&gt;<pos:position pos:line="269" pos:column="21"/></operator><name pos:line="269" pos:column="18">passwd<pos:position pos:line="269" pos:column="24"/></name></name> <operator pos:line="269" pos:column="25">=<pos:position pos:line="269" pos:column="26"/></operator> <call><name pos:line="269" pos:column="27">xstrdup<pos:position pos:line="269" pos:column="34"/></name><argument_list pos:line="269" pos:column="34">(<argument><expr><name pos:line="269" pos:column="35">q<pos:position pos:line="269" pos:column="36"/></name></expr></argument>)<pos:position pos:line="269" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="38"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="270" pos:column="9">else <if pos:line="270" pos:column="14">if <condition pos:line="270" pos:column="17">(<expr><literal type="number" pos:line="270" pos:column="18">0<pos:position pos:line="270" pos:column="19"/></literal> <operator pos:line="270" pos:column="20">==<pos:position pos:line="270" pos:column="22"/></operator> <call><name pos:line="270" pos:column="23">strcmp<pos:position pos:line="270" pos:column="29"/></name><argument_list pos:line="270" pos:column="29">(<argument><expr><name pos:line="270" pos:column="30">t<pos:position pos:line="270" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="270" pos:column="33">"auth"<pos:position pos:line="270" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="270" pos:column="40"/></argument_list></call> <operator pos:line="270" pos:column="41">&amp;&amp;<pos:position pos:line="270" pos:column="51"/></operator> <call><name pos:line="270" pos:column="44">strlen<pos:position pos:line="270" pos:column="50"/></name><argument_list pos:line="270" pos:column="50">(<argument><expr><name pos:line="270" pos:column="51">q<pos:position pos:line="270" pos:column="52"/></name></expr></argument>)<pos:position pos:line="270" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="270" pos:column="54"/></condition><then pos:line="270" pos:column="54">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="271" pos:column="13">req<pos:position pos:line="271" pos:column="16"/></name><operator pos:line="271" pos:column="16">-&gt;<pos:position pos:line="271" pos:column="21"/></operator><name pos:line="271" pos:column="18">pub_auth<pos:position pos:line="271" pos:column="26"/></name></name> <operator pos:line="271" pos:column="27">=<pos:position pos:line="271" pos:column="28"/></operator> <call><name pos:line="271" pos:column="29">xstrdup<pos:position pos:line="271" pos:column="36"/></name><argument_list pos:line="271" pos:column="36">(<argument><expr><name pos:line="271" pos:column="37">q<pos:position pos:line="271" pos:column="38"/></name></expr></argument>)<pos:position pos:line="271" pos:column="39"/></argument_list></call></expr><operator pos:line="271" pos:column="39">,<pos:position pos:line="271" pos:column="40"/></operator> <expr><call><name pos:line="271" pos:column="41">decode_pub_auth<pos:position pos:line="271" pos:column="56"/></name><argument_list pos:line="271" pos:column="56">(<argument><expr><name pos:line="271" pos:column="57">req<pos:position pos:line="271" pos:column="60"/></name></expr></argument>)<pos:position pos:line="271" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="62"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="272" pos:column="9">else <if pos:line="272" pos:column="14">if <condition pos:line="272" pos:column="17">(<expr><literal type="number" pos:line="272" pos:column="18">0<pos:position pos:line="272" pos:column="19"/></literal> <operator pos:line="272" pos:column="20">==<pos:position pos:line="272" pos:column="22"/></operator> <call><name pos:line="272" pos:column="23">strcmp<pos:position pos:line="272" pos:column="29"/></name><argument_list pos:line="272" pos:column="29">(<argument><expr><name pos:line="272" pos:column="30">t<pos:position pos:line="272" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="272" pos:column="33">"operation"<pos:position pos:line="272" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="272" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="272" pos:column="46"/></condition><then pos:line="272" pos:column="46">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="273" pos:column="13">req<pos:position pos:line="273" pos:column="16"/></name><operator pos:line="273" pos:column="16">-&gt;<pos:position pos:line="273" pos:column="21"/></operator><name pos:line="273" pos:column="18">action<pos:position pos:line="273" pos:column="24"/></name></name> <operator pos:line="273" pos:column="25">=<pos:position pos:line="273" pos:column="26"/></operator> <call><name pos:line="273" pos:column="27">xstrdup<pos:position pos:line="273" pos:column="34"/></name><argument_list pos:line="273" pos:column="34">(<argument><expr><name pos:line="273" pos:column="35">q<pos:position pos:line="273" pos:column="36"/></name></expr></argument>)<pos:position pos:line="273" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="38"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="274" pos:column="9">else <if pos:line="274" pos:column="14">if <condition pos:line="274" pos:column="17">(<expr><literal type="number" pos:line="274" pos:column="18">0<pos:position pos:line="274" pos:column="19"/></literal> <operator pos:line="274" pos:column="20">==<pos:position pos:line="274" pos:column="22"/></operator> <call><name pos:line="274" pos:column="23">strcmp<pos:position pos:line="274" pos:column="29"/></name><argument_list pos:line="274" pos:column="29">(<argument><expr><name pos:line="274" pos:column="30">t<pos:position pos:line="274" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="274" pos:column="33">"workers"<pos:position pos:line="274" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="274" pos:column="43"/></argument_list></call> <operator pos:line="274" pos:column="44">&amp;&amp;<pos:position pos:line="274" pos:column="54"/></operator> <call><name pos:line="274" pos:column="47">strlen<pos:position pos:line="274" pos:column="53"/></name><argument_list pos:line="274" pos:column="53">(<argument><expr><name pos:line="274" pos:column="54">q<pos:position pos:line="274" pos:column="55"/></name></expr></argument>)<pos:position pos:line="274" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="274" pos:column="57"/></condition><then pos:line="274" pos:column="57">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="275" pos:column="13">req<pos:position pos:line="275" pos:column="16"/></name><operator pos:line="275" pos:column="16">-&gt;<pos:position pos:line="275" pos:column="21"/></operator><name pos:line="275" pos:column="18">workers<pos:position pos:line="275" pos:column="25"/></name></name> <operator pos:line="275" pos:column="26">=<pos:position pos:line="275" pos:column="27"/></operator> <call><name pos:line="275" pos:column="28">xstrdup<pos:position pos:line="275" pos:column="35"/></name><argument_list pos:line="275" pos:column="35">(<argument><expr><name pos:line="275" pos:column="36">q<pos:position pos:line="275" pos:column="37"/></name></expr></argument>)<pos:position pos:line="275" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="39"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="276" pos:column="9">else <if pos:line="276" pos:column="14">if <condition pos:line="276" pos:column="17">(<expr><literal type="number" pos:line="276" pos:column="18">0<pos:position pos:line="276" pos:column="19"/></literal> <operator pos:line="276" pos:column="20">==<pos:position pos:line="276" pos:column="22"/></operator> <call><name pos:line="276" pos:column="23">strcmp<pos:position pos:line="276" pos:column="29"/></name><argument_list pos:line="276" pos:column="29">(<argument><expr><name pos:line="276" pos:column="30">t<pos:position pos:line="276" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="276" pos:column="33">"processes"<pos:position pos:line="276" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="276" pos:column="45"/></argument_list></call> <operator pos:line="276" pos:column="46">&amp;&amp;<pos:position pos:line="276" pos:column="56"/></operator> <call><name pos:line="276" pos:column="49">strlen<pos:position pos:line="276" pos:column="55"/></name><argument_list pos:line="276" pos:column="55">(<argument><expr><name pos:line="276" pos:column="56">q<pos:position pos:line="276" pos:column="57"/></name></expr></argument>)<pos:position pos:line="276" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="276" pos:column="59"/></condition><then pos:line="276" pos:column="59">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="277" pos:column="13">req<pos:position pos:line="277" pos:column="16"/></name><operator pos:line="277" pos:column="16">-&gt;<pos:position pos:line="277" pos:column="21"/></operator><name pos:line="277" pos:column="18">processes<pos:position pos:line="277" pos:column="27"/></name></name> <operator pos:line="277" pos:column="28">=<pos:position pos:line="277" pos:column="29"/></operator> <call><name pos:line="277" pos:column="30">xstrdup<pos:position pos:line="277" pos:column="37"/></name><argument_list pos:line="277" pos:column="37">(<argument><expr><name pos:line="277" pos:column="38">q<pos:position pos:line="277" pos:column="39"/></name></expr></argument>)<pos:position pos:line="277" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="277" pos:column="41"/></expr_stmt></block></then></if></elseif></if>
    }<pos:position pos:line="278" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="279" pos:column="5">safe_free<pos:position pos:line="279" pos:column="14"/></name><argument_list pos:line="279" pos:column="14">(<argument><expr><name pos:line="279" pos:column="15">t<pos:position pos:line="279" pos:column="16"/></name></expr></argument>)<pos:position pos:line="279" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="18"/></expr_stmt>

    <if pos:line="281" pos:column="5">if <condition pos:line="281" pos:column="8">(<expr><name><name pos:line="281" pos:column="9">req<pos:position pos:line="281" pos:column="12"/></name><operator pos:line="281" pos:column="12">-&gt;<pos:position pos:line="281" pos:column="17"/></operator><name pos:line="281" pos:column="14">server<pos:position pos:line="281" pos:column="20"/></name></name> <operator pos:line="281" pos:column="21">&amp;&amp;<pos:position pos:line="281" pos:column="31"/></operator> <operator pos:line="281" pos:column="24">!<pos:position pos:line="281" pos:column="25"/></operator><name><name pos:line="281" pos:column="25">req<pos:position pos:line="281" pos:column="28"/></name><operator pos:line="281" pos:column="28">-&gt;<pos:position pos:line="281" pos:column="33"/></operator><name pos:line="281" pos:column="30">hostname<pos:position pos:line="281" pos:column="38"/></name></name></expr>)<pos:position pos:line="281" pos:column="39"/></condition><then pos:line="281" pos:column="39"> <block pos:line="281" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="282" pos:column="9">char<pos:position pos:line="282" pos:column="13"/></name> <modifier pos:line="282" pos:column="14">*<pos:position pos:line="282" pos:column="15"/></modifier></type><name pos:line="282" pos:column="15">p<pos:position pos:line="282" pos:column="16"/></name></decl>;<pos:position pos:line="282" pos:column="17"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="283" pos:column="9">req<pos:position pos:line="283" pos:column="12"/></name><operator pos:line="283" pos:column="12">-&gt;<pos:position pos:line="283" pos:column="17"/></operator><name pos:line="283" pos:column="14">hostname<pos:position pos:line="283" pos:column="22"/></name></name> <operator pos:line="283" pos:column="23">=<pos:position pos:line="283" pos:column="24"/></operator> <call><name pos:line="283" pos:column="25">strtok<pos:position pos:line="283" pos:column="31"/></name><argument_list pos:line="283" pos:column="31">(<argument><expr><name><name pos:line="283" pos:column="32">req<pos:position pos:line="283" pos:column="35"/></name><operator pos:line="283" pos:column="35">-&gt;<pos:position pos:line="283" pos:column="40"/></operator><name pos:line="283" pos:column="37">server<pos:position pos:line="283" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="283" pos:column="45">":"<pos:position pos:line="283" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="283" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="50"/></expr_stmt>

        <if pos:line="285" pos:column="9">if <condition pos:line="285" pos:column="12">(<expr><operator pos:line="285" pos:column="13">(<pos:position pos:line="285" pos:column="14"/></operator><name pos:line="285" pos:column="14">p<pos:position pos:line="285" pos:column="15"/></name> <operator pos:line="285" pos:column="16">=<pos:position pos:line="285" pos:column="17"/></operator> <call><name pos:line="285" pos:column="18">strtok<pos:position pos:line="285" pos:column="24"/></name><argument_list pos:line="285" pos:column="24">(<argument><expr><name pos:line="285" pos:column="25">NULL<pos:position pos:line="285" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="285" pos:column="31">":"<pos:position pos:line="285" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="285" pos:column="35"/></argument_list></call><operator pos:line="285" pos:column="35">)<pos:position pos:line="285" pos:column="36"/></operator></expr>)<pos:position pos:line="285" pos:column="37"/></condition><then pos:line="285" pos:column="37">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="286" pos:column="13">req<pos:position pos:line="286" pos:column="16"/></name><operator pos:line="286" pos:column="16">-&gt;<pos:position pos:line="286" pos:column="21"/></operator><name pos:line="286" pos:column="18">port<pos:position pos:line="286" pos:column="22"/></name></name> <operator pos:line="286" pos:column="23">=<pos:position pos:line="286" pos:column="24"/></operator> <call><name pos:line="286" pos:column="25">atoi<pos:position pos:line="286" pos:column="29"/></name><argument_list pos:line="286" pos:column="29">(<argument><expr><name pos:line="286" pos:column="30">p<pos:position pos:line="286" pos:column="31"/></name></expr></argument>)<pos:position pos:line="286" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="286" pos:column="33"/></expr_stmt></block></then></if>
    }<pos:position pos:line="287" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="289" pos:column="5">make_pub_auth<pos:position pos:line="289" pos:column="18"/></name><argument_list pos:line="289" pos:column="18">(<argument><expr><name pos:line="289" pos:column="19">req<pos:position pos:line="289" pos:column="22"/></name></expr></argument>)<pos:position pos:line="289" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="290" pos:column="5">debug<pos:position pos:line="290" pos:column="10"/></name><argument_list pos:line="290" pos:column="10">(<argument><expr><literal type="string" pos:line="290" pos:column="11">"cmgr: got req: host: '%s' port: %d uname: '%s' passwd: '%s' auth: '%s' oper: '%s' workers: '%s' processes: '%s'\n"<pos:position pos:line="290" pos:column="126"/></literal></expr></argument>,
          <argument><expr><call><name pos:line="291" pos:column="11">safe_str<pos:position pos:line="291" pos:column="19"/></name><argument_list pos:line="291" pos:column="19">(<argument><expr><name><name pos:line="291" pos:column="20">req<pos:position pos:line="291" pos:column="23"/></name><operator pos:line="291" pos:column="23">-&gt;<pos:position pos:line="291" pos:column="28"/></operator><name pos:line="291" pos:column="25">hostname<pos:position pos:line="291" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="291" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="291" pos:column="36">req<pos:position pos:line="291" pos:column="39"/></name><operator pos:line="291" pos:column="39">-&gt;<pos:position pos:line="291" pos:column="44"/></operator><name pos:line="291" pos:column="41">port<pos:position pos:line="291" pos:column="45"/></name></name></expr></argument>, <argument><expr><call><name pos:line="291" pos:column="47">safe_str<pos:position pos:line="291" pos:column="55"/></name><argument_list pos:line="291" pos:column="55">(<argument><expr><name><name pos:line="291" pos:column="56">req<pos:position pos:line="291" pos:column="59"/></name><operator pos:line="291" pos:column="59">-&gt;<pos:position pos:line="291" pos:column="64"/></operator><name pos:line="291" pos:column="61">user_name<pos:position pos:line="291" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="291" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="291" pos:column="73">safe_str<pos:position pos:line="291" pos:column="81"/></name><argument_list pos:line="291" pos:column="81">(<argument><expr><name><name pos:line="291" pos:column="82">req<pos:position pos:line="291" pos:column="85"/></name><operator pos:line="291" pos:column="85">-&gt;<pos:position pos:line="291" pos:column="90"/></operator><name pos:line="291" pos:column="87">passwd<pos:position pos:line="291" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="291" pos:column="94"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="291" pos:column="96">safe_str<pos:position pos:line="291" pos:column="104"/></name><argument_list pos:line="291" pos:column="104">(<argument><expr><name><name pos:line="291" pos:column="105">req<pos:position pos:line="291" pos:column="108"/></name><operator pos:line="291" pos:column="108">-&gt;<pos:position pos:line="291" pos:column="113"/></operator><name pos:line="291" pos:column="110">pub_auth<pos:position pos:line="291" pos:column="118"/></name></name></expr></argument>)<pos:position pos:line="291" pos:column="119"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="291" pos:column="121">safe_str<pos:position pos:line="291" pos:column="129"/></name><argument_list pos:line="291" pos:column="129">(<argument><expr><name><name pos:line="291" pos:column="130">req<pos:position pos:line="291" pos:column="133"/></name><operator pos:line="291" pos:column="133">-&gt;<pos:position pos:line="291" pos:column="138"/></operator><name pos:line="291" pos:column="135">action<pos:position pos:line="291" pos:column="141"/></name></name></expr></argument>)<pos:position pos:line="291" pos:column="142"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="291" pos:column="144">safe_str<pos:position pos:line="291" pos:column="152"/></name><argument_list pos:line="291" pos:column="152">(<argument><expr><name><name pos:line="291" pos:column="153">req<pos:position pos:line="291" pos:column="156"/></name><operator pos:line="291" pos:column="156">-&gt;<pos:position pos:line="291" pos:column="161"/></operator><name pos:line="291" pos:column="158">workers<pos:position pos:line="291" pos:column="165"/></name></name></expr></argument>)<pos:position pos:line="291" pos:column="166"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="291" pos:column="168">safe_str<pos:position pos:line="291" pos:column="176"/></name><argument_list pos:line="291" pos:column="176">(<argument><expr><name><name pos:line="291" pos:column="177">req<pos:position pos:line="291" pos:column="180"/></name><operator pos:line="291" pos:column="180">-&gt;<pos:position pos:line="291" pos:column="185"/></operator><name pos:line="291" pos:column="182">processes<pos:position pos:line="291" pos:column="191"/></name></name></expr></argument>)<pos:position pos:line="291" pos:column="192"/></argument_list></call></expr></argument>)<pos:position pos:line="291" pos:column="193"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="194"/></expr_stmt>
    <return pos:line="292" pos:column="5">return <expr><name pos:line="292" pos:column="12">req<pos:position pos:line="292" pos:column="15"/></name></expr>;<pos:position pos:line="292" pos:column="16"/></return>
}<pos:position pos:line="293" pos:column="2"/></block></function>

<comment type="block" pos:line="295" pos:column="1">/* Routines to support authentication */</comment>

<comment type="block" pos:line="297" pos:column="1">/*
 * Encodes auth info into a "public" form.
 * Currently no powerful encryption is used.
 */</comment>
<function><specifier pos:line="301" pos:column="1">static<pos:position pos:line="301" pos:column="7"/></specifier> <type><name pos:line="301" pos:column="8">void<pos:position pos:line="301" pos:column="12"/></name></type>
<name pos:line="302" pos:column="1">make_pub_auth<pos:position pos:line="302" pos:column="14"/></name><parameter_list pos:line="302" pos:column="14">(<parameter><decl><type><name pos:line="302" pos:column="15">cachemgr_request<pos:position pos:line="302" pos:column="31"/></name> <modifier pos:line="302" pos:column="32">*<pos:position pos:line="302" pos:column="33"/></modifier></type> <name pos:line="302" pos:column="34">req<pos:position pos:line="302" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="302" pos:column="38"/></parameter_list>
<block pos:line="303" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="304" pos:column="5">static<pos:position pos:line="304" pos:column="11"/></specifier> <type><name pos:line="304" pos:column="12">char<pos:position pos:line="304" pos:column="16"/></name></type> <name><name pos:line="304" pos:column="17">buf<pos:position pos:line="304" pos:column="20"/></name><index pos:line="304" pos:column="20">[<expr><literal type="number" pos:line="304" pos:column="21">1024<pos:position pos:line="304" pos:column="25"/></literal></expr>]<pos:position pos:line="304" pos:column="26"/></index></name></decl>;<pos:position pos:line="304" pos:column="27"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="305" pos:column="5">safe_free<pos:position pos:line="305" pos:column="14"/></name><argument_list pos:line="305" pos:column="14">(<argument><expr><name><name pos:line="305" pos:column="15">req<pos:position pos:line="305" pos:column="18"/></name><operator pos:line="305" pos:column="18">-&gt;<pos:position pos:line="305" pos:column="23"/></operator><name pos:line="305" pos:column="20">pub_auth<pos:position pos:line="305" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="305" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="305" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="306" pos:column="5">debug<pos:position pos:line="306" pos:column="10"/></name><argument_list pos:line="306" pos:column="10">(<argument><expr><literal type="string" pos:line="306" pos:column="11">"cmgr: encoding for pub...\n"<pos:position pos:line="306" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="306" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="306" pos:column="42"/></expr_stmt>

    <if pos:line="308" pos:column="5">if <condition pos:line="308" pos:column="8">(<expr><operator pos:line="308" pos:column="9">!<pos:position pos:line="308" pos:column="10"/></operator><name><name pos:line="308" pos:column="10">req<pos:position pos:line="308" pos:column="13"/></name><operator pos:line="308" pos:column="13">-&gt;<pos:position pos:line="308" pos:column="18"/></operator><name pos:line="308" pos:column="15">passwd<pos:position pos:line="308" pos:column="21"/></name></name> <operator pos:line="308" pos:column="22">||<pos:position pos:line="308" pos:column="24"/></operator> <operator pos:line="308" pos:column="25">!<pos:position pos:line="308" pos:column="26"/></operator><call><name pos:line="308" pos:column="26">strlen<pos:position pos:line="308" pos:column="32"/></name><argument_list pos:line="308" pos:column="32">(<argument><expr><name><name pos:line="308" pos:column="33">req<pos:position pos:line="308" pos:column="36"/></name><operator pos:line="308" pos:column="36">-&gt;<pos:position pos:line="308" pos:column="41"/></operator><name pos:line="308" pos:column="38">passwd<pos:position pos:line="308" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="308" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="308" pos:column="46"/></condition><then pos:line="308" pos:column="46">
        <block type="pseudo"><return pos:line="309" pos:column="9">return;<pos:position pos:line="309" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="311" pos:column="5">/* host | time | user | passwd */</comment>
    <decl_stmt><decl><type><specifier pos:line="312" pos:column="5">const<pos:position pos:line="312" pos:column="10"/></specifier> <name pos:line="312" pos:column="11">int<pos:position pos:line="312" pos:column="14"/></name></type> <name pos:line="312" pos:column="15">bufLen<pos:position pos:line="312" pos:column="21"/></name> <init pos:line="312" pos:column="22">= <expr><call><name pos:line="312" pos:column="24">snprintf<pos:position pos:line="312" pos:column="32"/></name><argument_list pos:line="312" pos:column="32">(<argument><expr><name pos:line="312" pos:column="33">buf<pos:position pos:line="312" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="312" pos:column="38">sizeof<argument_list pos:line="312" pos:column="44">(<argument><expr><name pos:line="312" pos:column="45">buf<pos:position pos:line="312" pos:column="48"/></name></expr></argument>)<pos:position pos:line="312" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="312" pos:column="51">"%s|%d|%s|%s"<pos:position pos:line="312" pos:column="64"/></literal></expr></argument>,
                                <argument><expr><name><name pos:line="313" pos:column="33">req<pos:position pos:line="313" pos:column="36"/></name><operator pos:line="313" pos:column="36">-&gt;<pos:position pos:line="313" pos:column="41"/></operator><name pos:line="313" pos:column="38">hostname<pos:position pos:line="313" pos:column="46"/></name></name></expr></argument>,
                                <argument><expr><operator pos:line="314" pos:column="33">(<pos:position pos:line="314" pos:column="34"/></operator><name pos:line="314" pos:column="34">int<pos:position pos:line="314" pos:column="37"/></name><operator pos:line="314" pos:column="37">)<pos:position pos:line="314" pos:column="38"/></operator> <name pos:line="314" pos:column="39">now<pos:position pos:line="314" pos:column="42"/></name></expr></argument>,
                                <argument><expr><ternary><condition><expr><name><name pos:line="315" pos:column="33">req<pos:position pos:line="315" pos:column="36"/></name><operator pos:line="315" pos:column="36">-&gt;<pos:position pos:line="315" pos:column="41"/></operator><name pos:line="315" pos:column="38">user_name<pos:position pos:line="315" pos:column="47"/></name></name></expr> ?<pos:position pos:line="315" pos:column="49"/></condition><then pos:line="315" pos:column="49"> <expr><name><name pos:line="315" pos:column="50">req<pos:position pos:line="315" pos:column="53"/></name><operator pos:line="315" pos:column="53">-&gt;<pos:position pos:line="315" pos:column="58"/></operator><name pos:line="315" pos:column="55">user_name<pos:position pos:line="315" pos:column="64"/></name></name></expr> <pos:position pos:line="315" pos:column="65"/></then><else pos:line="315" pos:column="65">: <expr><literal type="string" pos:line="315" pos:column="67">""<pos:position pos:line="315" pos:column="69"/></literal></expr></else></ternary></expr></argument>,
                                <argument><expr><name><name pos:line="316" pos:column="33">req<pos:position pos:line="316" pos:column="36"/></name><operator pos:line="316" pos:column="36">-&gt;<pos:position pos:line="316" pos:column="41"/></operator><name pos:line="316" pos:column="38">passwd<pos:position pos:line="316" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="316" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="316" pos:column="46"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="317" pos:column="5">debug<pos:position pos:line="317" pos:column="10"/></name><argument_list pos:line="317" pos:column="10">(<argument><expr><literal type="string" pos:line="317" pos:column="11">"cmgr: pre-encoded for pub: %s\n"<pos:position pos:line="317" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="317" pos:column="46">buf<pos:position pos:line="317" pos:column="49"/></name></expr></argument>)<pos:position pos:line="317" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="317" pos:column="51"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="319" pos:column="5">const<pos:position pos:line="319" pos:column="10"/></specifier> <name pos:line="319" pos:column="11">int<pos:position pos:line="319" pos:column="14"/></name></type> <name pos:line="319" pos:column="15">encodedLen<pos:position pos:line="319" pos:column="25"/></name> <init pos:line="319" pos:column="26">= <expr><call><name pos:line="319" pos:column="28">base64_encode_len<pos:position pos:line="319" pos:column="45"/></name><argument_list pos:line="319" pos:column="45">(<argument><expr><name pos:line="319" pos:column="46">bufLen<pos:position pos:line="319" pos:column="52"/></name></expr></argument>)<pos:position pos:line="319" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="319" pos:column="54"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="320" pos:column="5">req<pos:position pos:line="320" pos:column="8"/></name><operator pos:line="320" pos:column="8">-&gt;<pos:position pos:line="320" pos:column="13"/></operator><name pos:line="320" pos:column="10">pub_auth<pos:position pos:line="320" pos:column="18"/></name></name> <operator pos:line="320" pos:column="19">=<pos:position pos:line="320" pos:column="20"/></operator> <operator pos:line="320" pos:column="21">(<pos:position pos:line="320" pos:column="22"/></operator><name pos:line="320" pos:column="22">char<pos:position pos:line="320" pos:column="26"/></name> <operator pos:line="320" pos:column="27">*<pos:position pos:line="320" pos:column="28"/></operator><operator pos:line="320" pos:column="28">)<pos:position pos:line="320" pos:column="29"/></operator> <call><name pos:line="320" pos:column="30">xmalloc<pos:position pos:line="320" pos:column="37"/></name><argument_list pos:line="320" pos:column="37">(<argument><expr><name pos:line="320" pos:column="38">encodedLen<pos:position pos:line="320" pos:column="48"/></name></expr></argument>)<pos:position pos:line="320" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="321" pos:column="5">base64_encode_str<pos:position pos:line="321" pos:column="22"/></name><argument_list pos:line="321" pos:column="22">(<argument><expr><name><name pos:line="321" pos:column="23">req<pos:position pos:line="321" pos:column="26"/></name><operator pos:line="321" pos:column="26">-&gt;<pos:position pos:line="321" pos:column="31"/></operator><name pos:line="321" pos:column="28">pub_auth<pos:position pos:line="321" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="321" pos:column="38">encodedLen<pos:position pos:line="321" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="321" pos:column="50">buf<pos:position pos:line="321" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="321" pos:column="55">bufLen<pos:position pos:line="321" pos:column="61"/></name></expr></argument>)<pos:position pos:line="321" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="322" pos:column="5">debug<pos:position pos:line="322" pos:column="10"/></name><argument_list pos:line="322" pos:column="10">(<argument><expr><literal type="string" pos:line="322" pos:column="11">"cmgr: encoded: '%s'\n"<pos:position pos:line="322" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="322" pos:column="36">req<pos:position pos:line="322" pos:column="39"/></name><operator pos:line="322" pos:column="39">-&gt;<pos:position pos:line="322" pos:column="44"/></operator><name pos:line="322" pos:column="41">pub_auth<pos:position pos:line="322" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="322" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="322" pos:column="51"/></expr_stmt>
}<pos:position pos:line="323" pos:column="2"/></block></function>

<function><specifier pos:line="325" pos:column="1">static<pos:position pos:line="325" pos:column="7"/></specifier> <type><name pos:line="325" pos:column="8">void<pos:position pos:line="325" pos:column="12"/></name></type>
<name pos:line="326" pos:column="1">decode_pub_auth<pos:position pos:line="326" pos:column="16"/></name><parameter_list pos:line="326" pos:column="16">(<parameter><decl><type><name pos:line="326" pos:column="17">cachemgr_request<pos:position pos:line="326" pos:column="33"/></name> <modifier pos:line="326" pos:column="34">*<pos:position pos:line="326" pos:column="35"/></modifier></type> <name pos:line="326" pos:column="36">req<pos:position pos:line="326" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="326" pos:column="40"/></parameter_list>
<block pos:line="327" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="328" pos:column="5">char<pos:position pos:line="328" pos:column="9"/></name> <modifier pos:line="328" pos:column="10">*<pos:position pos:line="328" pos:column="11"/></modifier></type><name pos:line="328" pos:column="11">buf<pos:position pos:line="328" pos:column="14"/></name></decl>;<pos:position pos:line="328" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="329" pos:column="5">const<pos:position pos:line="329" pos:column="10"/></specifier> <name pos:line="329" pos:column="11">char<pos:position pos:line="329" pos:column="15"/></name> <modifier pos:line="329" pos:column="16">*<pos:position pos:line="329" pos:column="17"/></modifier></type><name pos:line="329" pos:column="17">host_name<pos:position pos:line="329" pos:column="26"/></name></decl>;<pos:position pos:line="329" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="330" pos:column="5">const<pos:position pos:line="330" pos:column="10"/></specifier> <name pos:line="330" pos:column="11">char<pos:position pos:line="330" pos:column="15"/></name> <modifier pos:line="330" pos:column="16">*<pos:position pos:line="330" pos:column="17"/></modifier></type><name pos:line="330" pos:column="17">time_str<pos:position pos:line="330" pos:column="25"/></name></decl>;<pos:position pos:line="330" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="331" pos:column="5">const<pos:position pos:line="331" pos:column="10"/></specifier> <name pos:line="331" pos:column="11">char<pos:position pos:line="331" pos:column="15"/></name> <modifier pos:line="331" pos:column="16">*<pos:position pos:line="331" pos:column="17"/></modifier></type><name pos:line="331" pos:column="17">user_name<pos:position pos:line="331" pos:column="26"/></name></decl>;<pos:position pos:line="331" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="332" pos:column="5">const<pos:position pos:line="332" pos:column="10"/></specifier> <name pos:line="332" pos:column="11">char<pos:position pos:line="332" pos:column="15"/></name> <modifier pos:line="332" pos:column="16">*<pos:position pos:line="332" pos:column="17"/></modifier></type><name pos:line="332" pos:column="17">passwd<pos:position pos:line="332" pos:column="23"/></name></decl>;<pos:position pos:line="332" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="334" pos:column="5">debug<pos:position pos:line="334" pos:column="10"/></name><argument_list pos:line="334" pos:column="10">(<argument><expr><literal type="string" pos:line="334" pos:column="11">"cmgr: decoding pub: '%s'\n"<pos:position pos:line="334" pos:column="39"/></literal></expr></argument>, <argument><expr><call><name pos:line="334" pos:column="41">safe_str<pos:position pos:line="334" pos:column="49"/></name><argument_list pos:line="334" pos:column="49">(<argument><expr><name><name pos:line="334" pos:column="50">req<pos:position pos:line="334" pos:column="53"/></name><operator pos:line="334" pos:column="53">-&gt;<pos:position pos:line="334" pos:column="58"/></operator><name pos:line="334" pos:column="55">pub_auth<pos:position pos:line="334" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="334" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="334" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="334" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="335" pos:column="5">safe_free<pos:position pos:line="335" pos:column="14"/></name><argument_list pos:line="335" pos:column="14">(<argument><expr><name><name pos:line="335" pos:column="15">req<pos:position pos:line="335" pos:column="18"/></name><operator pos:line="335" pos:column="18">-&gt;<pos:position pos:line="335" pos:column="23"/></operator><name pos:line="335" pos:column="20">passwd<pos:position pos:line="335" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="335" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="28"/></expr_stmt>

    <if pos:line="337" pos:column="5">if <condition pos:line="337" pos:column="8">(<expr><operator pos:line="337" pos:column="9">!<pos:position pos:line="337" pos:column="10"/></operator><name><name pos:line="337" pos:column="10">req<pos:position pos:line="337" pos:column="13"/></name><operator pos:line="337" pos:column="13">-&gt;<pos:position pos:line="337" pos:column="18"/></operator><name pos:line="337" pos:column="15">pub_auth<pos:position pos:line="337" pos:column="23"/></name></name> <operator pos:line="337" pos:column="24">||<pos:position pos:line="337" pos:column="26"/></operator> <call><name pos:line="337" pos:column="27">strlen<pos:position pos:line="337" pos:column="33"/></name><argument_list pos:line="337" pos:column="33">(<argument><expr><name><name pos:line="337" pos:column="34">req<pos:position pos:line="337" pos:column="37"/></name><operator pos:line="337" pos:column="37">-&gt;<pos:position pos:line="337" pos:column="42"/></operator><name pos:line="337" pos:column="39">pub_auth<pos:position pos:line="337" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="337" pos:column="48"/></argument_list></call> <operator pos:line="337" pos:column="49">&lt;<pos:position pos:line="337" pos:column="53"/></operator> <literal type="number" pos:line="337" pos:column="51">4<pos:position pos:line="337" pos:column="52"/></literal> <operator pos:line="337" pos:column="53">+<pos:position pos:line="337" pos:column="54"/></operator> <call><name pos:line="337" pos:column="55">strlen<pos:position pos:line="337" pos:column="61"/></name><argument_list pos:line="337" pos:column="61">(<argument><expr><call><name pos:line="337" pos:column="62">safe_str<pos:position pos:line="337" pos:column="70"/></name><argument_list pos:line="337" pos:column="70">(<argument><expr><name><name pos:line="337" pos:column="71">req<pos:position pos:line="337" pos:column="74"/></name><operator pos:line="337" pos:column="74">-&gt;<pos:position pos:line="337" pos:column="79"/></operator><name pos:line="337" pos:column="76">hostname<pos:position pos:line="337" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="337" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="337" pos:column="86"/></argument_list></call></expr>)<pos:position pos:line="337" pos:column="87"/></condition><then pos:line="337" pos:column="87">
        <block type="pseudo"><return pos:line="338" pos:column="9">return;<pos:position pos:line="338" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="340" pos:column="5">const<pos:position pos:line="340" pos:column="10"/></specifier> <name pos:line="340" pos:column="11">int<pos:position pos:line="340" pos:column="14"/></name></type> <name pos:line="340" pos:column="15">decodedLen<pos:position pos:line="340" pos:column="25"/></name> <init pos:line="340" pos:column="26">= <expr><call><name pos:line="340" pos:column="28">base64_decode_len<pos:position pos:line="340" pos:column="45"/></name><argument_list pos:line="340" pos:column="45">(<argument><expr><name><name pos:line="340" pos:column="46">req<pos:position pos:line="340" pos:column="49"/></name><operator pos:line="340" pos:column="49">-&gt;<pos:position pos:line="340" pos:column="54"/></operator><name pos:line="340" pos:column="51">pub_auth<pos:position pos:line="340" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="340" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="340" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><name pos:line="341" pos:column="5">buf<pos:position pos:line="341" pos:column="8"/></name> <operator pos:line="341" pos:column="9">=<pos:position pos:line="341" pos:column="10"/></operator> <operator pos:line="341" pos:column="11">(<pos:position pos:line="341" pos:column="12"/></operator><name pos:line="341" pos:column="12">char<pos:position pos:line="341" pos:column="16"/></name><operator pos:line="341" pos:column="16">*<pos:position pos:line="341" pos:column="17"/></operator><operator pos:line="341" pos:column="17">)<pos:position pos:line="341" pos:column="18"/></operator><call><name pos:line="341" pos:column="18">xmalloc<pos:position pos:line="341" pos:column="25"/></name><argument_list pos:line="341" pos:column="25">(<argument><expr><name pos:line="341" pos:column="26">decodedLen<pos:position pos:line="341" pos:column="36"/></name></expr></argument>)<pos:position pos:line="341" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="341" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="342" pos:column="5">base64_decode<pos:position pos:line="342" pos:column="18"/></name><argument_list pos:line="342" pos:column="18">(<argument><expr><name pos:line="342" pos:column="19">buf<pos:position pos:line="342" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="342" pos:column="24">decodedLen<pos:position pos:line="342" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="342" pos:column="36">req<pos:position pos:line="342" pos:column="39"/></name><operator pos:line="342" pos:column="39">-&gt;<pos:position pos:line="342" pos:column="44"/></operator><name pos:line="342" pos:column="41">pub_auth<pos:position pos:line="342" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="342" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="342" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="344" pos:column="5">debug<pos:position pos:line="344" pos:column="10"/></name><argument_list pos:line="344" pos:column="10">(<argument><expr><literal type="string" pos:line="344" pos:column="11">"cmgr: length ok\n"<pos:position pos:line="344" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="344" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="346" pos:column="5">/* parse ( a lot of memory leaks, but that is cachemgr style :) */</comment>
    <if pos:line="347" pos:column="5">if <condition pos:line="347" pos:column="8">(<expr><operator pos:line="347" pos:column="9">(<pos:position pos:line="347" pos:column="10"/></operator><name pos:line="347" pos:column="10">host_name<pos:position pos:line="347" pos:column="19"/></name> <operator pos:line="347" pos:column="20">=<pos:position pos:line="347" pos:column="21"/></operator> <call><name pos:line="347" pos:column="22">strtok<pos:position pos:line="347" pos:column="28"/></name><argument_list pos:line="347" pos:column="28">(<argument><expr><name pos:line="347" pos:column="29">buf<pos:position pos:line="347" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="347" pos:column="34">"|"<pos:position pos:line="347" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="347" pos:column="38"/></argument_list></call><operator pos:line="347" pos:column="38">)<pos:position pos:line="347" pos:column="39"/></operator> <operator pos:line="347" pos:column="40">==<pos:position pos:line="347" pos:column="42"/></operator> <name pos:line="347" pos:column="43">NULL<pos:position pos:line="347" pos:column="47"/></name></expr>)<pos:position pos:line="347" pos:column="48"/></condition><then pos:line="347" pos:column="48"> <block pos:line="347" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="348" pos:column="9">xfree<pos:position pos:line="348" pos:column="14"/></name><argument_list pos:line="348" pos:column="14">(<argument><expr><name pos:line="348" pos:column="15">buf<pos:position pos:line="348" pos:column="18"/></name></expr></argument>)<pos:position pos:line="348" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="348" pos:column="20"/></expr_stmt>
        <return pos:line="349" pos:column="9">return;<pos:position pos:line="349" pos:column="16"/></return>
    }<pos:position pos:line="350" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="352" pos:column="5">debug<pos:position pos:line="352" pos:column="10"/></name><argument_list pos:line="352" pos:column="10">(<argument><expr><literal type="string" pos:line="352" pos:column="11">"cmgr: decoded host: '%s'\n"<pos:position pos:line="352" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="352" pos:column="41">host_name<pos:position pos:line="352" pos:column="50"/></name></expr></argument>)<pos:position pos:line="352" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="352" pos:column="52"/></expr_stmt>

    <if pos:line="354" pos:column="5">if <condition pos:line="354" pos:column="8">(<expr><operator pos:line="354" pos:column="9">(<pos:position pos:line="354" pos:column="10"/></operator><name pos:line="354" pos:column="10">time_str<pos:position pos:line="354" pos:column="18"/></name> <operator pos:line="354" pos:column="19">=<pos:position pos:line="354" pos:column="20"/></operator> <call><name pos:line="354" pos:column="21">strtok<pos:position pos:line="354" pos:column="27"/></name><argument_list pos:line="354" pos:column="27">(<argument><expr><name pos:line="354" pos:column="28">NULL<pos:position pos:line="354" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="354" pos:column="34">"|"<pos:position pos:line="354" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="354" pos:column="38"/></argument_list></call><operator pos:line="354" pos:column="38">)<pos:position pos:line="354" pos:column="39"/></operator> <operator pos:line="354" pos:column="40">==<pos:position pos:line="354" pos:column="42"/></operator> <name pos:line="354" pos:column="43">NULL<pos:position pos:line="354" pos:column="47"/></name></expr>)<pos:position pos:line="354" pos:column="48"/></condition><then pos:line="354" pos:column="48"> <block pos:line="354" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="355" pos:column="9">xfree<pos:position pos:line="355" pos:column="14"/></name><argument_list pos:line="355" pos:column="14">(<argument><expr><name pos:line="355" pos:column="15">buf<pos:position pos:line="355" pos:column="18"/></name></expr></argument>)<pos:position pos:line="355" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="355" pos:column="20"/></expr_stmt>
        <return pos:line="356" pos:column="9">return;<pos:position pos:line="356" pos:column="16"/></return>
    }<pos:position pos:line="357" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="359" pos:column="5">debug<pos:position pos:line="359" pos:column="10"/></name><argument_list pos:line="359" pos:column="10">(<argument><expr><literal type="string" pos:line="359" pos:column="11">"cmgr: decoded time: '%s' (now: %d)\n"<pos:position pos:line="359" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="359" pos:column="51">time_str<pos:position pos:line="359" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="359" pos:column="61">(<pos:position pos:line="359" pos:column="62"/></operator><name pos:line="359" pos:column="62">int<pos:position pos:line="359" pos:column="65"/></name><operator pos:line="359" pos:column="65">)<pos:position pos:line="359" pos:column="66"/></operator> <name pos:line="359" pos:column="67">now<pos:position pos:line="359" pos:column="70"/></name></expr></argument>)<pos:position pos:line="359" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="359" pos:column="72"/></expr_stmt>

    <if pos:line="361" pos:column="5">if <condition pos:line="361" pos:column="8">(<expr><operator pos:line="361" pos:column="9">(<pos:position pos:line="361" pos:column="10"/></operator><name pos:line="361" pos:column="10">user_name<pos:position pos:line="361" pos:column="19"/></name> <operator pos:line="361" pos:column="20">=<pos:position pos:line="361" pos:column="21"/></operator> <call><name pos:line="361" pos:column="22">strtok<pos:position pos:line="361" pos:column="28"/></name><argument_list pos:line="361" pos:column="28">(<argument><expr><name pos:line="361" pos:column="29">NULL<pos:position pos:line="361" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="361" pos:column="35">"|"<pos:position pos:line="361" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="361" pos:column="39"/></argument_list></call><operator pos:line="361" pos:column="39">)<pos:position pos:line="361" pos:column="40"/></operator> <operator pos:line="361" pos:column="41">==<pos:position pos:line="361" pos:column="43"/></operator> <name pos:line="361" pos:column="44">NULL<pos:position pos:line="361" pos:column="48"/></name></expr>)<pos:position pos:line="361" pos:column="49"/></condition><then pos:line="361" pos:column="49"> <block pos:line="361" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="362" pos:column="9">xfree<pos:position pos:line="362" pos:column="14"/></name><argument_list pos:line="362" pos:column="14">(<argument><expr><name pos:line="362" pos:column="15">buf<pos:position pos:line="362" pos:column="18"/></name></expr></argument>)<pos:position pos:line="362" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="362" pos:column="20"/></expr_stmt>
        <return pos:line="363" pos:column="9">return;<pos:position pos:line="363" pos:column="16"/></return>
    }<pos:position pos:line="364" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="366" pos:column="5">debug<pos:position pos:line="366" pos:column="10"/></name><argument_list pos:line="366" pos:column="10">(<argument><expr><literal type="string" pos:line="366" pos:column="11">"cmgr: decoded uname: '%s'\n"<pos:position pos:line="366" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="366" pos:column="42">user_name<pos:position pos:line="366" pos:column="51"/></name></expr></argument>)<pos:position pos:line="366" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="366" pos:column="53"/></expr_stmt>

    <if pos:line="368" pos:column="5">if <condition pos:line="368" pos:column="8">(<expr><operator pos:line="368" pos:column="9">(<pos:position pos:line="368" pos:column="10"/></operator><name pos:line="368" pos:column="10">passwd<pos:position pos:line="368" pos:column="16"/></name> <operator pos:line="368" pos:column="17">=<pos:position pos:line="368" pos:column="18"/></operator> <call><name pos:line="368" pos:column="19">strtok<pos:position pos:line="368" pos:column="25"/></name><argument_list pos:line="368" pos:column="25">(<argument><expr><name pos:line="368" pos:column="26">NULL<pos:position pos:line="368" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="368" pos:column="32">"|"<pos:position pos:line="368" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="368" pos:column="36"/></argument_list></call><operator pos:line="368" pos:column="36">)<pos:position pos:line="368" pos:column="37"/></operator> <operator pos:line="368" pos:column="38">==<pos:position pos:line="368" pos:column="40"/></operator> <name pos:line="368" pos:column="41">NULL<pos:position pos:line="368" pos:column="45"/></name></expr>)<pos:position pos:line="368" pos:column="46"/></condition><then pos:line="368" pos:column="46"> <block pos:line="368" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="369" pos:column="9">xfree<pos:position pos:line="369" pos:column="14"/></name><argument_list pos:line="369" pos:column="14">(<argument><expr><name pos:line="369" pos:column="15">buf<pos:position pos:line="369" pos:column="18"/></name></expr></argument>)<pos:position pos:line="369" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="369" pos:column="20"/></expr_stmt>
        <return pos:line="370" pos:column="9">return;<pos:position pos:line="370" pos:column="16"/></return>
    }<pos:position pos:line="371" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="373" pos:column="5">debug<pos:position pos:line="373" pos:column="10"/></name><argument_list pos:line="373" pos:column="10">(<argument><expr><literal type="string" pos:line="373" pos:column="11">"cmgr: decoded passwd: '%s'\n"<pos:position pos:line="373" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="373" pos:column="43">passwd<pos:position pos:line="373" pos:column="49"/></name></expr></argument>)<pos:position pos:line="373" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="51"/></expr_stmt>

    <comment type="block" pos:line="375" pos:column="5">/* verify freshness and validity */</comment>
    <if pos:line="376" pos:column="5">if <condition pos:line="376" pos:column="8">(<expr><call><name pos:line="376" pos:column="9">atoi<pos:position pos:line="376" pos:column="13"/></name><argument_list pos:line="376" pos:column="13">(<argument><expr><name pos:line="376" pos:column="14">time_str<pos:position pos:line="376" pos:column="22"/></name></expr></argument>)<pos:position pos:line="376" pos:column="23"/></argument_list></call> <operator pos:line="376" pos:column="24">+<pos:position pos:line="376" pos:column="25"/></operator> <name pos:line="376" pos:column="26">passwd_ttl<pos:position pos:line="376" pos:column="36"/></name> <operator pos:line="376" pos:column="37">&lt;<pos:position pos:line="376" pos:column="41"/></operator> <name pos:line="376" pos:column="39">now<pos:position pos:line="376" pos:column="42"/></name></expr>)<pos:position pos:line="376" pos:column="43"/></condition><then pos:line="376" pos:column="43"> <block pos:line="376" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="377" pos:column="9">xfree<pos:position pos:line="377" pos:column="14"/></name><argument_list pos:line="377" pos:column="14">(<argument><expr><name pos:line="377" pos:column="15">buf<pos:position pos:line="377" pos:column="18"/></name></expr></argument>)<pos:position pos:line="377" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="377" pos:column="20"/></expr_stmt>
        <return pos:line="378" pos:column="9">return;<pos:position pos:line="378" pos:column="16"/></return>
    }<pos:position pos:line="379" pos:column="6"/></block></then></if>

    <if pos:line="381" pos:column="5">if <condition pos:line="381" pos:column="8">(<expr><call><name pos:line="381" pos:column="9">strcasecmp<pos:position pos:line="381" pos:column="19"/></name><argument_list pos:line="381" pos:column="19">(<argument><expr><name pos:line="381" pos:column="20">host_name<pos:position pos:line="381" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="381" pos:column="31">req<pos:position pos:line="381" pos:column="34"/></name><operator pos:line="381" pos:column="34">-&gt;<pos:position pos:line="381" pos:column="39"/></operator><name pos:line="381" pos:column="36">hostname<pos:position pos:line="381" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="381" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="381" pos:column="46"/></condition><then pos:line="381" pos:column="46"> <block pos:line="381" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="382" pos:column="9">xfree<pos:position pos:line="382" pos:column="14"/></name><argument_list pos:line="382" pos:column="14">(<argument><expr><name pos:line="382" pos:column="15">buf<pos:position pos:line="382" pos:column="18"/></name></expr></argument>)<pos:position pos:line="382" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="382" pos:column="20"/></expr_stmt>
        <return pos:line="383" pos:column="9">return;<pos:position pos:line="383" pos:column="16"/></return>
    }<pos:position pos:line="384" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="386" pos:column="5">debug<pos:position pos:line="386" pos:column="10"/></name><argument_list pos:line="386" pos:column="10">(<argument><expr><literal type="string" pos:line="386" pos:column="11">"cmgr: verified auth. info.\n"<pos:position pos:line="386" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="386" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="386" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="388" pos:column="5">/* ok, accept */</comment>
    <expr_stmt><expr><call><name pos:line="389" pos:column="5">safe_free<pos:position pos:line="389" pos:column="14"/></name><argument_list pos:line="389" pos:column="14">(<argument><expr><name><name pos:line="389" pos:column="15">req<pos:position pos:line="389" pos:column="18"/></name><operator pos:line="389" pos:column="18">-&gt;<pos:position pos:line="389" pos:column="23"/></operator><name pos:line="389" pos:column="20">user_name<pos:position pos:line="389" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="389" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="391" pos:column="5">req<pos:position pos:line="391" pos:column="8"/></name><operator pos:line="391" pos:column="8">-&gt;<pos:position pos:line="391" pos:column="13"/></operator><name pos:line="391" pos:column="10">user_name<pos:position pos:line="391" pos:column="19"/></name></name> <operator pos:line="391" pos:column="20">=<pos:position pos:line="391" pos:column="21"/></operator> <call><name pos:line="391" pos:column="22">xstrdup<pos:position pos:line="391" pos:column="29"/></name><argument_list pos:line="391" pos:column="29">(<argument><expr><name pos:line="391" pos:column="30">user_name<pos:position pos:line="391" pos:column="39"/></name></expr></argument>)<pos:position pos:line="391" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="391" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="393" pos:column="5">req<pos:position pos:line="393" pos:column="8"/></name><operator pos:line="393" pos:column="8">-&gt;<pos:position pos:line="393" pos:column="13"/></operator><name pos:line="393" pos:column="10">passwd<pos:position pos:line="393" pos:column="16"/></name></name> <operator pos:line="393" pos:column="17">=<pos:position pos:line="393" pos:column="18"/></operator> <call><name pos:line="393" pos:column="19">xstrdup<pos:position pos:line="393" pos:column="26"/></name><argument_list pos:line="393" pos:column="26">(<argument><expr><name pos:line="393" pos:column="27">passwd<pos:position pos:line="393" pos:column="33"/></name></expr></argument>)<pos:position pos:line="393" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="393" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="395" pos:column="5">xfree<pos:position pos:line="395" pos:column="10"/></name><argument_list pos:line="395" pos:column="10">(<argument><expr><name pos:line="395" pos:column="11">buf<pos:position pos:line="395" pos:column="14"/></name></expr></argument>)<pos:position pos:line="395" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="395" pos:column="16"/></expr_stmt>
}<pos:position pos:line="396" pos:column="2"/></block></function>

<function><specifier pos:line="398" pos:column="1">static<pos:position pos:line="398" pos:column="7"/></specifier> <type><name pos:line="398" pos:column="8">void<pos:position pos:line="398" pos:column="12"/></name></type>
<name pos:line="399" pos:column="1">reset_auth<pos:position pos:line="399" pos:column="11"/></name><parameter_list pos:line="399" pos:column="11">(<parameter><decl><type><name pos:line="399" pos:column="12">cachemgr_request<pos:position pos:line="399" pos:column="28"/></name> <modifier pos:line="399" pos:column="29">*<pos:position pos:line="399" pos:column="30"/></modifier></type> <name pos:line="399" pos:column="31">req<pos:position pos:line="399" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="399" pos:column="35"/></parameter_list>
<block pos:line="400" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="401" pos:column="5">safe_free<pos:position pos:line="401" pos:column="14"/></name><argument_list pos:line="401" pos:column="14">(<argument><expr><name><name pos:line="401" pos:column="15">req<pos:position pos:line="401" pos:column="18"/></name><operator pos:line="401" pos:column="18">-&gt;<pos:position pos:line="401" pos:column="23"/></operator><name pos:line="401" pos:column="20">passwd<pos:position pos:line="401" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="401" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="401" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="402" pos:column="5">safe_free<pos:position pos:line="402" pos:column="14"/></name><argument_list pos:line="402" pos:column="14">(<argument><expr><name><name pos:line="402" pos:column="15">req<pos:position pos:line="402" pos:column="18"/></name><operator pos:line="402" pos:column="18">-&gt;<pos:position pos:line="402" pos:column="23"/></operator><name pos:line="402" pos:column="20">pub_auth<pos:position pos:line="402" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="402" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="402" pos:column="30"/></expr_stmt>
}<pos:position pos:line="403" pos:column="2"/></block></function>

<function><specifier pos:line="405" pos:column="1">static<pos:position pos:line="405" pos:column="7"/></specifier> <type><specifier pos:line="405" pos:column="8">const<pos:position pos:line="405" pos:column="13"/></specifier> <name pos:line="405" pos:column="14">char<pos:position pos:line="405" pos:column="18"/></name> <modifier pos:line="405" pos:column="19">*<pos:position pos:line="405" pos:column="20"/></modifier></type>
<name pos:line="406" pos:column="1">make_auth_header<pos:position pos:line="406" pos:column="17"/></name><parameter_list pos:line="406" pos:column="17">(<parameter><decl><type><specifier pos:line="406" pos:column="18">const<pos:position pos:line="406" pos:column="23"/></specifier> <name pos:line="406" pos:column="24">cachemgr_request<pos:position pos:line="406" pos:column="40"/></name> <modifier pos:line="406" pos:column="41">*<pos:position pos:line="406" pos:column="42"/></modifier></type> <name pos:line="406" pos:column="43">req<pos:position pos:line="406" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="406" pos:column="47"/></parameter_list>
<block pos:line="407" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="408" pos:column="5">static<pos:position pos:line="408" pos:column="11"/></specifier> <type><name pos:line="408" pos:column="12">char<pos:position pos:line="408" pos:column="16"/></name></type> <name><name pos:line="408" pos:column="17">buf<pos:position pos:line="408" pos:column="20"/></name><index pos:line="408" pos:column="20">[<expr><literal type="number" pos:line="408" pos:column="21">1024<pos:position pos:line="408" pos:column="25"/></literal></expr>]<pos:position pos:line="408" pos:column="26"/></index></name></decl>;<pos:position pos:line="408" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="409" pos:column="5">size_t<pos:position pos:line="409" pos:column="11"/></name></type> <name pos:line="409" pos:column="12">stringLength<pos:position pos:line="409" pos:column="24"/></name> <init pos:line="409" pos:column="25">= <expr><literal type="number" pos:line="409" pos:column="27">0<pos:position pos:line="409" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="409" pos:column="29"/></decl_stmt>

    <if pos:line="411" pos:column="5">if <condition pos:line="411" pos:column="8">(<expr><operator pos:line="411" pos:column="9">!<pos:position pos:line="411" pos:column="10"/></operator><name><name pos:line="411" pos:column="10">req<pos:position pos:line="411" pos:column="13"/></name><operator pos:line="411" pos:column="13">-&gt;<pos:position pos:line="411" pos:column="18"/></operator><name pos:line="411" pos:column="15">passwd<pos:position pos:line="411" pos:column="21"/></name></name></expr>)<pos:position pos:line="411" pos:column="22"/></condition><then pos:line="411" pos:column="22">
        <block type="pseudo"><return pos:line="412" pos:column="9">return <expr><literal type="string" pos:line="412" pos:column="16">""<pos:position pos:line="412" pos:column="18"/></literal></expr>;<pos:position pos:line="412" pos:column="19"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="414" pos:column="5">int<pos:position pos:line="414" pos:column="8"/></name></type> <name pos:line="414" pos:column="9">bufLen<pos:position pos:line="414" pos:column="15"/></name> <init pos:line="414" pos:column="16">= <expr><call><name pos:line="414" pos:column="18">snprintf<pos:position pos:line="414" pos:column="26"/></name><argument_list pos:line="414" pos:column="26">(<argument><expr><name pos:line="414" pos:column="27">buf<pos:position pos:line="414" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="414" pos:column="32">sizeof<argument_list pos:line="414" pos:column="38">(<argument><expr><name pos:line="414" pos:column="39">buf<pos:position pos:line="414" pos:column="42"/></name></expr></argument>)<pos:position pos:line="414" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="414" pos:column="45">"%s:%s"<pos:position pos:line="414" pos:column="52"/></literal></expr></argument>,
                          <argument><expr><ternary><condition><expr><name><name pos:line="415" pos:column="27">req<pos:position pos:line="415" pos:column="30"/></name><operator pos:line="415" pos:column="30">-&gt;<pos:position pos:line="415" pos:column="35"/></operator><name pos:line="415" pos:column="32">user_name<pos:position pos:line="415" pos:column="41"/></name></name></expr> ?<pos:position pos:line="415" pos:column="43"/></condition><then pos:line="415" pos:column="43"> <expr><name><name pos:line="415" pos:column="44">req<pos:position pos:line="415" pos:column="47"/></name><operator pos:line="415" pos:column="47">-&gt;<pos:position pos:line="415" pos:column="52"/></operator><name pos:line="415" pos:column="49">user_name<pos:position pos:line="415" pos:column="58"/></name></name></expr> <pos:position pos:line="415" pos:column="59"/></then><else pos:line="415" pos:column="59">: <expr><literal type="string" pos:line="415" pos:column="61">""<pos:position pos:line="415" pos:column="63"/></literal></expr></else></ternary></expr></argument>,
                          <argument><expr><name><name pos:line="416" pos:column="27">req<pos:position pos:line="416" pos:column="30"/></name><operator pos:line="416" pos:column="30">-&gt;<pos:position pos:line="416" pos:column="35"/></operator><name pos:line="416" pos:column="32">passwd<pos:position pos:line="416" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="416" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="416" pos:column="40"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="418" pos:column="5">int<pos:position pos:line="418" pos:column="8"/></name></type> <name pos:line="418" pos:column="9">encodedLen<pos:position pos:line="418" pos:column="19"/></name> <init pos:line="418" pos:column="20">= <expr><call><name pos:line="418" pos:column="22">base64_encode_len<pos:position pos:line="418" pos:column="39"/></name><argument_list pos:line="418" pos:column="39">(<argument><expr><name pos:line="418" pos:column="40">bufLen<pos:position pos:line="418" pos:column="46"/></name></expr></argument>)<pos:position pos:line="418" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="418" pos:column="48"/></decl_stmt>
    <if pos:line="419" pos:column="5">if <condition pos:line="419" pos:column="8">(<expr><name pos:line="419" pos:column="9">encodedLen<pos:position pos:line="419" pos:column="19"/></name> <operator pos:line="419" pos:column="20">&lt;=<pos:position pos:line="419" pos:column="25"/></operator> <literal type="number" pos:line="419" pos:column="23">0<pos:position pos:line="419" pos:column="24"/></literal></expr>)<pos:position pos:line="419" pos:column="25"/></condition><then pos:line="419" pos:column="25">
        <block type="pseudo"><return pos:line="420" pos:column="9">return <expr><literal type="string" pos:line="420" pos:column="16">""<pos:position pos:line="420" pos:column="18"/></literal></expr>;<pos:position pos:line="420" pos:column="19"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="422" pos:column="5">char<pos:position pos:line="422" pos:column="9"/></name> <modifier pos:line="422" pos:column="10">*<pos:position pos:line="422" pos:column="11"/></modifier></type><name pos:line="422" pos:column="11">str64<pos:position pos:line="422" pos:column="16"/></name> <init pos:line="422" pos:column="17">= <expr><cast type="static" pos:line="422" pos:column="19">static_cast<argument_list type="generic" pos:line="422" pos:column="30">&lt;<argument><expr><name pos:line="422" pos:column="31">char<pos:position pos:line="422" pos:column="35"/></name><operator pos:line="422" pos:column="35">*<pos:position pos:line="422" pos:column="36"/></operator></expr></argument>&gt;<pos:position pos:line="422" pos:column="40"/></argument_list><argument_list pos:line="422" pos:column="37">(<argument><expr><call><name pos:line="422" pos:column="38">xmalloc<pos:position pos:line="422" pos:column="45"/></name><argument_list pos:line="422" pos:column="45">(<argument><expr><name pos:line="422" pos:column="46">encodedLen<pos:position pos:line="422" pos:column="56"/></name></expr></argument>)<pos:position pos:line="422" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="422" pos:column="58"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="422" pos:column="59"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="423" pos:column="5">base64_encode_str<pos:position pos:line="423" pos:column="22"/></name><argument_list pos:line="423" pos:column="22">(<argument><expr><name pos:line="423" pos:column="23">str64<pos:position pos:line="423" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="423" pos:column="30">encodedLen<pos:position pos:line="423" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="423" pos:column="42">buf<pos:position pos:line="423" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="423" pos:column="47">bufLen<pos:position pos:line="423" pos:column="53"/></name></expr></argument>)<pos:position pos:line="423" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="423" pos:column="55"/></expr_stmt>

    <expr_stmt><expr><name pos:line="425" pos:column="5">stringLength<pos:position pos:line="425" pos:column="17"/></name> <operator pos:line="425" pos:column="18">+=<pos:position pos:line="425" pos:column="20"/></operator> <call><name pos:line="425" pos:column="21">snprintf<pos:position pos:line="425" pos:column="29"/></name><argument_list pos:line="425" pos:column="29">(<argument><expr><name pos:line="425" pos:column="30">buf<pos:position pos:line="425" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="425" pos:column="35">sizeof<argument_list pos:line="425" pos:column="41">(<argument><expr><name pos:line="425" pos:column="42">buf<pos:position pos:line="425" pos:column="45"/></name></expr></argument>)<pos:position pos:line="425" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="425" pos:column="48">"Authorization: Basic %s\r\n"<pos:position pos:line="425" pos:column="77"/></literal></expr></argument>, <argument><expr><name pos:line="425" pos:column="79">str64<pos:position pos:line="425" pos:column="84"/></name></expr></argument>)<pos:position pos:line="425" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="425" pos:column="86"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="427" pos:column="5">assert<pos:position pos:line="427" pos:column="11"/></name><argument_list pos:line="427" pos:column="11">(<argument><expr><name pos:line="427" pos:column="12">stringLength<pos:position pos:line="427" pos:column="24"/></name> <operator pos:line="427" pos:column="25">&lt;<pos:position pos:line="427" pos:column="29"/></operator> <sizeof pos:line="427" pos:column="27">sizeof<argument_list pos:line="427" pos:column="33">(<argument><expr><name pos:line="427" pos:column="34">buf<pos:position pos:line="427" pos:column="37"/></name></expr></argument>)<pos:position pos:line="427" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="427" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="427" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="429" pos:column="5">snprintf<pos:position pos:line="429" pos:column="13"/></name><argument_list pos:line="429" pos:column="13">(<argument><expr><operator pos:line="429" pos:column="14">&amp;<pos:position pos:line="429" pos:column="19"/></operator><name><name pos:line="429" pos:column="15">buf<pos:position pos:line="429" pos:column="18"/></name><index pos:line="429" pos:column="18">[<expr><name pos:line="429" pos:column="19">stringLength<pos:position pos:line="429" pos:column="31"/></name></expr>]<pos:position pos:line="429" pos:column="32"/></index></name></expr></argument>, <argument><expr><sizeof pos:line="429" pos:column="34">sizeof<argument_list pos:line="429" pos:column="40">(<argument><expr><name pos:line="429" pos:column="41">buf<pos:position pos:line="429" pos:column="44"/></name></expr></argument>)<pos:position pos:line="429" pos:column="45"/></argument_list></sizeof> <operator pos:line="429" pos:column="46">-<pos:position pos:line="429" pos:column="47"/></operator> <name pos:line="429" pos:column="48">stringLength<pos:position pos:line="429" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="429" pos:column="62">"Proxy-Authorization: Basic %s\r\n"<pos:position pos:line="429" pos:column="97"/></literal></expr></argument>, <argument><expr><name pos:line="429" pos:column="99">str64<pos:position pos:line="429" pos:column="104"/></name></expr></argument>)<pos:position pos:line="429" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="429" pos:column="106"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="431" pos:column="5">xfree<pos:position pos:line="431" pos:column="10"/></name><argument_list pos:line="431" pos:column="10">(<argument><expr><name pos:line="431" pos:column="11">str64<pos:position pos:line="431" pos:column="16"/></name></expr></argument>)<pos:position pos:line="431" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="431" pos:column="18"/></expr_stmt>
    <return pos:line="432" pos:column="5">return <expr><name pos:line="432" pos:column="12">buf<pos:position pos:line="432" pos:column="15"/></name></expr>;<pos:position pos:line="432" pos:column="16"/></return>
}<pos:position pos:line="433" pos:column="2"/></block></function>

<function><specifier pos:line="435" pos:column="1">static<pos:position pos:line="435" pos:column="7"/></specifier> <type><name pos:line="435" pos:column="8">int<pos:position pos:line="435" pos:column="11"/></name></type>
<name pos:line="436" pos:column="1">check_target_acl<pos:position pos:line="436" pos:column="17"/></name><parameter_list pos:line="436" pos:column="17">(<parameter><decl><type><specifier pos:line="436" pos:column="18">const<pos:position pos:line="436" pos:column="23"/></specifier> <name pos:line="436" pos:column="24">char<pos:position pos:line="436" pos:column="28"/></name> <modifier pos:line="436" pos:column="29">*<pos:position pos:line="436" pos:column="30"/></modifier></type><name pos:line="436" pos:column="30">hostname<pos:position pos:line="436" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="436" pos:column="40">int<pos:position pos:line="436" pos:column="43"/></name></type> <name pos:line="436" pos:column="44">port<pos:position pos:line="436" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="436" pos:column="49"/></parameter_list>
<block pos:line="437" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="438" pos:column="5">char<pos:position pos:line="438" pos:column="9"/></name></type> <name><name pos:line="438" pos:column="10">config_line<pos:position pos:line="438" pos:column="21"/></name><index pos:line="438" pos:column="21">[<expr><name pos:line="438" pos:column="22">BUFSIZ<pos:position pos:line="438" pos:column="28"/></name></expr>]<pos:position pos:line="438" pos:column="29"/></index></name></decl>;<pos:position pos:line="438" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="439" pos:column="5">FILE<pos:position pos:line="439" pos:column="9"/></name> <modifier pos:line="439" pos:column="10">*<pos:position pos:line="439" pos:column="11"/></modifier></type><name pos:line="439" pos:column="11">fp<pos:position pos:line="439" pos:column="13"/></name> <init pos:line="439" pos:column="14">= <expr><name pos:line="439" pos:column="16">NULL<pos:position pos:line="439" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="439" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="440" pos:column="5">int<pos:position pos:line="440" pos:column="8"/></name></type> <name pos:line="440" pos:column="9">ret<pos:position pos:line="440" pos:column="12"/></name> <init pos:line="440" pos:column="13">= <expr><literal type="number" pos:line="440" pos:column="15">0<pos:position pos:line="440" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="440" pos:column="17"/></decl_stmt>
    <expr_stmt><expr><name pos:line="441" pos:column="5">fp<pos:position pos:line="441" pos:column="7"/></name> <operator pos:line="441" pos:column="8">=<pos:position pos:line="441" pos:column="9"/></operator> <call><name pos:line="441" pos:column="10">fopen<pos:position pos:line="441" pos:column="15"/></name><argument_list pos:line="441" pos:column="15">(<argument><expr><literal type="string" pos:line="441" pos:column="16">"cachemgr.conf"<pos:position pos:line="441" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="441" pos:column="33">"r"<pos:position pos:line="441" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="441" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="441" pos:column="38"/></expr_stmt>

    <if pos:line="443" pos:column="5">if <condition pos:line="443" pos:column="8">(<expr><name pos:line="443" pos:column="9">fp<pos:position pos:line="443" pos:column="11"/></name> <operator pos:line="443" pos:column="12">==<pos:position pos:line="443" pos:column="14"/></operator> <name pos:line="443" pos:column="15">NULL<pos:position pos:line="443" pos:column="19"/></name></expr>)<pos:position pos:line="443" pos:column="20"/></condition><then pos:line="443" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name pos:line="444" pos:column="9">fp<pos:position pos:line="444" pos:column="11"/></name> <operator pos:line="444" pos:column="12">=<pos:position pos:line="444" pos:column="13"/></operator> <call><name pos:line="444" pos:column="14">fopen<pos:position pos:line="444" pos:column="19"/></name><argument_list pos:line="444" pos:column="19">(<argument><expr><name pos:line="444" pos:column="20">DEFAULT_CACHEMGR_CONFIG<pos:position pos:line="444" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="444" pos:column="45">"r"<pos:position pos:line="444" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="444" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="444" pos:column="50"/></expr_stmt></block></then></if>

    <if pos:line="446" pos:column="5">if <condition pos:line="446" pos:column="8">(<expr><name pos:line="446" pos:column="9">fp<pos:position pos:line="446" pos:column="11"/></name> <operator pos:line="446" pos:column="12">==<pos:position pos:line="446" pos:column="14"/></operator> <name pos:line="446" pos:column="15">NULL<pos:position pos:line="446" pos:column="19"/></name></expr>)<pos:position pos:line="446" pos:column="20"/></condition><then pos:line="446" pos:column="20"> <block pos:line="446" pos:column="21">{
<cpp:ifdef pos:line="447" pos:column="1">#<cpp:directive pos:line="447" pos:column="2">ifdef<pos:position pos:line="447" pos:column="7"/></cpp:directive> <name pos:line="447" pos:column="8">CACHEMGR_HOSTNAME_DEFINED<pos:position pos:line="447" pos:column="33"/></name></cpp:ifdef>

        <if pos:line="449" pos:column="9">if <condition pos:line="449" pos:column="12">(<expr><call><name pos:line="449" pos:column="13">strcmp<pos:position pos:line="449" pos:column="19"/></name><argument_list pos:line="449" pos:column="19">(<argument><expr><name pos:line="449" pos:column="20">hostname<pos:position pos:line="449" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="449" pos:column="30">CACHEMGR_HOSTNAME<pos:position pos:line="449" pos:column="47"/></name></expr></argument>)<pos:position pos:line="449" pos:column="48"/></argument_list></call> <operator pos:line="449" pos:column="49">==<pos:position pos:line="449" pos:column="51"/></operator> <literal type="number" pos:line="449" pos:column="52">0<pos:position pos:line="449" pos:column="53"/></literal> <operator pos:line="449" pos:column="54">&amp;&amp;<pos:position pos:line="449" pos:column="64"/></operator> <name pos:line="449" pos:column="57">port<pos:position pos:line="449" pos:column="61"/></name> <operator pos:line="449" pos:column="62">==<pos:position pos:line="449" pos:column="64"/></operator> <name pos:line="449" pos:column="65">CACHE_HTTP_PORT<pos:position pos:line="449" pos:column="80"/></name></expr>)<pos:position pos:line="449" pos:column="81"/></condition><then pos:line="449" pos:column="81">
            <block type="pseudo"><return pos:line="450" pos:column="13">return <expr><literal type="number" pos:line="450" pos:column="20">1<pos:position pos:line="450" pos:column="21"/></literal></expr>;<pos:position pos:line="450" pos:column="22"/></return></block></then></if>

<cpp:else pos:line="452" pos:column="1">#<cpp:directive pos:line="452" pos:column="2">else<pos:position pos:line="452" pos:column="6"/></cpp:directive></cpp:else>

        <if pos:line="454" pos:column="9">if <condition pos:line="454" pos:column="12">(<expr><call><name pos:line="454" pos:column="13">strcmp<pos:position pos:line="454" pos:column="19"/></name><argument_list pos:line="454" pos:column="19">(<argument><expr><name pos:line="454" pos:column="20">hostname<pos:position pos:line="454" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="454" pos:column="30">"localhost"<pos:position pos:line="454" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="454" pos:column="42"/></argument_list></call> <operator pos:line="454" pos:column="43">==<pos:position pos:line="454" pos:column="45"/></operator> <literal type="number" pos:line="454" pos:column="46">0<pos:position pos:line="454" pos:column="47"/></literal></expr>)<pos:position pos:line="454" pos:column="48"/></condition><then pos:line="454" pos:column="48">
            <block type="pseudo"><return pos:line="455" pos:column="13">return <expr><literal type="number" pos:line="455" pos:column="20">1<pos:position pos:line="455" pos:column="21"/></literal></expr>;<pos:position pos:line="455" pos:column="22"/></return></block></then></if>

        <if pos:line="457" pos:column="9">if <condition pos:line="457" pos:column="12">(<expr><call><name pos:line="457" pos:column="13">strcmp<pos:position pos:line="457" pos:column="19"/></name><argument_list pos:line="457" pos:column="19">(<argument><expr><name pos:line="457" pos:column="20">hostname<pos:position pos:line="457" pos:column="28"/></name></expr></argument>, <argument><expr><call><name pos:line="457" pos:column="30">getfullhostname<pos:position pos:line="457" pos:column="45"/></name><argument_list pos:line="457" pos:column="45">()<pos:position pos:line="457" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="457" pos:column="48"/></argument_list></call> <operator pos:line="457" pos:column="49">==<pos:position pos:line="457" pos:column="51"/></operator> <literal type="number" pos:line="457" pos:column="52">0<pos:position pos:line="457" pos:column="53"/></literal></expr>)<pos:position pos:line="457" pos:column="54"/></condition><then pos:line="457" pos:column="54">
            <block type="pseudo"><return pos:line="458" pos:column="13">return <expr><literal type="number" pos:line="458" pos:column="20">1<pos:position pos:line="458" pos:column="21"/></literal></expr>;<pos:position pos:line="458" pos:column="22"/></return></block></then></if>

<cpp:endif pos:line="460" pos:column="1">#<cpp:directive pos:line="460" pos:column="2">endif<pos:position pos:line="460" pos:column="7"/></cpp:directive></cpp:endif>

        <return pos:line="462" pos:column="9">return <expr><literal type="number" pos:line="462" pos:column="16">0<pos:position pos:line="462" pos:column="17"/></literal></expr>;<pos:position pos:line="462" pos:column="18"/></return>
    }<pos:position pos:line="463" pos:column="6"/></block></then></if>

    <while pos:line="465" pos:column="5">while <condition pos:line="465" pos:column="11">(<expr><call><name pos:line="465" pos:column="12">fgets<pos:position pos:line="465" pos:column="17"/></name><argument_list pos:line="465" pos:column="17">(<argument><expr><name pos:line="465" pos:column="18">config_line<pos:position pos:line="465" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="465" pos:column="31">BUFSIZ<pos:position pos:line="465" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="465" pos:column="39">fp<pos:position pos:line="465" pos:column="41"/></name></expr></argument>)<pos:position pos:line="465" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="465" pos:column="43"/></condition> <block pos:line="465" pos:column="44">{
        <decl_stmt><decl><type><name pos:line="466" pos:column="9">char<pos:position pos:line="466" pos:column="13"/></name> <modifier pos:line="466" pos:column="14">*<pos:position pos:line="466" pos:column="15"/></modifier></type><name pos:line="466" pos:column="15">token<pos:position pos:line="466" pos:column="20"/></name> <init pos:line="466" pos:column="21">= <expr><name pos:line="466" pos:column="23">NULL<pos:position pos:line="466" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="466" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="467" pos:column="9">strtok<pos:position pos:line="467" pos:column="15"/></name><argument_list pos:line="467" pos:column="15">(<argument><expr><name pos:line="467" pos:column="16">config_line<pos:position pos:line="467" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="467" pos:column="29">" \r\n\t"<pos:position pos:line="467" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="467" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="467" pos:column="40"/></expr_stmt>

        <if pos:line="469" pos:column="9">if <condition pos:line="469" pos:column="12">(<expr><name><name pos:line="469" pos:column="13">config_line<pos:position pos:line="469" pos:column="24"/></name><index pos:line="469" pos:column="24">[<expr><literal type="number" pos:line="469" pos:column="25">0<pos:position pos:line="469" pos:column="26"/></literal></expr>]<pos:position pos:line="469" pos:column="27"/></index></name> <operator pos:line="469" pos:column="28">==<pos:position pos:line="469" pos:column="30"/></operator> <literal type="char" pos:line="469" pos:column="31">'#'<pos:position pos:line="469" pos:column="34"/></literal></expr>)<pos:position pos:line="469" pos:column="35"/></condition><then pos:line="469" pos:column="35">
            <block type="pseudo"><continue pos:line="470" pos:column="13">continue;<pos:position pos:line="470" pos:column="22"/></continue></block></then></if>

        <if pos:line="472" pos:column="9">if <condition pos:line="472" pos:column="12">(<expr><name><name pos:line="472" pos:column="13">config_line<pos:position pos:line="472" pos:column="24"/></name><index pos:line="472" pos:column="24">[<expr><literal type="number" pos:line="472" pos:column="25">0<pos:position pos:line="472" pos:column="26"/></literal></expr>]<pos:position pos:line="472" pos:column="27"/></index></name> <operator pos:line="472" pos:column="28">==<pos:position pos:line="472" pos:column="30"/></operator> <literal type="char" pos:line="472" pos:column="31">'\0'<pos:position pos:line="472" pos:column="35"/></literal></expr>)<pos:position pos:line="472" pos:column="36"/></condition><then pos:line="472" pos:column="36">
            <block type="pseudo"><continue pos:line="473" pos:column="13">continue;<pos:position pos:line="473" pos:column="22"/></continue></block></then></if>

        <if pos:line="475" pos:column="9">if <condition pos:line="475" pos:column="12">(<expr><operator pos:line="475" pos:column="13">(<pos:position pos:line="475" pos:column="14"/></operator><name pos:line="475" pos:column="14">token<pos:position pos:line="475" pos:column="19"/></name> <operator pos:line="475" pos:column="20">=<pos:position pos:line="475" pos:column="21"/></operator> <call><name pos:line="475" pos:column="22">strtok<pos:position pos:line="475" pos:column="28"/></name><argument_list pos:line="475" pos:column="28">(<argument><expr><name pos:line="475" pos:column="29">config_line<pos:position pos:line="475" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="475" pos:column="42">":"<pos:position pos:line="475" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="475" pos:column="46"/></argument_list></call><operator pos:line="475" pos:column="46">)<pos:position pos:line="475" pos:column="47"/></operator> <operator pos:line="475" pos:column="48">==<pos:position pos:line="475" pos:column="50"/></operator> <name pos:line="475" pos:column="51">NULL<pos:position pos:line="475" pos:column="55"/></name></expr>)<pos:position pos:line="475" pos:column="56"/></condition><then pos:line="475" pos:column="56">
            <block type="pseudo"><continue pos:line="476" pos:column="13">continue;<pos:position pos:line="476" pos:column="22"/></continue></block></then></if>

<cpp:if pos:line="478" pos:column="1">#<cpp:directive pos:line="478" pos:column="2">if<pos:position pos:line="478" pos:column="4"/></cpp:directive> <expr><name pos:line="478" pos:column="5">HAVE_FNMATCH_H<pos:position pos:line="478" pos:column="19"/></name></expr></cpp:if>

        <if pos:line="480" pos:column="9">if <condition pos:line="480" pos:column="12">(<expr><call><name pos:line="480" pos:column="13">fnmatch<pos:position pos:line="480" pos:column="20"/></name><argument_list pos:line="480" pos:column="20">(<argument><expr><name pos:line="480" pos:column="21">token<pos:position pos:line="480" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="480" pos:column="28">hostname<pos:position pos:line="480" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="480" pos:column="38">0<pos:position pos:line="480" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="480" pos:column="40"/></argument_list></call> <operator pos:line="480" pos:column="41">!=<pos:position pos:line="480" pos:column="43"/></operator> <literal type="number" pos:line="480" pos:column="44">0<pos:position pos:line="480" pos:column="45"/></literal></expr>)<pos:position pos:line="480" pos:column="46"/></condition><then pos:line="480" pos:column="46">
            <block type="pseudo"><continue pos:line="481" pos:column="13">continue;<pos:position pos:line="481" pos:column="22"/></continue></block></then></if>

<cpp:else pos:line="483" pos:column="1">#<cpp:directive pos:line="483" pos:column="2">else<pos:position pos:line="483" pos:column="6"/></cpp:directive></cpp:else>

        <if pos:line="485" pos:column="9">if <condition pos:line="485" pos:column="12">(<expr><call><name pos:line="485" pos:column="13">strcmp<pos:position pos:line="485" pos:column="19"/></name><argument_list pos:line="485" pos:column="19">(<argument><expr><name pos:line="485" pos:column="20">token<pos:position pos:line="485" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="485" pos:column="27">hostname<pos:position pos:line="485" pos:column="35"/></name></expr></argument>)<pos:position pos:line="485" pos:column="36"/></argument_list></call> <operator pos:line="485" pos:column="37">!=<pos:position pos:line="485" pos:column="39"/></operator> <literal type="number" pos:line="485" pos:column="40">0<pos:position pos:line="485" pos:column="41"/></literal></expr>)<pos:position pos:line="485" pos:column="42"/></condition><then pos:line="485" pos:column="42">
            <block type="pseudo"><continue pos:line="486" pos:column="13">continue;<pos:position pos:line="486" pos:column="22"/></continue></block></then></if>

<cpp:endif pos:line="488" pos:column="1">#<cpp:directive pos:line="488" pos:column="2">endif<pos:position pos:line="488" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="490" pos:column="9">if <condition pos:line="490" pos:column="12">(<expr><operator pos:line="490" pos:column="13">(<pos:position pos:line="490" pos:column="14"/></operator><name pos:line="490" pos:column="14">token<pos:position pos:line="490" pos:column="19"/></name> <operator pos:line="490" pos:column="20">=<pos:position pos:line="490" pos:column="21"/></operator> <call><name pos:line="490" pos:column="22">strtok<pos:position pos:line="490" pos:column="28"/></name><argument_list pos:line="490" pos:column="28">(<argument><expr><name pos:line="490" pos:column="29">NULL<pos:position pos:line="490" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="490" pos:column="35">":"<pos:position pos:line="490" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="490" pos:column="39"/></argument_list></call><operator pos:line="490" pos:column="39">)<pos:position pos:line="490" pos:column="40"/></operator> <operator pos:line="490" pos:column="41">!=<pos:position pos:line="490" pos:column="43"/></operator> <name pos:line="490" pos:column="44">NULL<pos:position pos:line="490" pos:column="48"/></name></expr>)<pos:position pos:line="490" pos:column="49"/></condition><then pos:line="490" pos:column="49"> <block pos:line="490" pos:column="50">{
            <decl_stmt><decl><type><name pos:line="491" pos:column="13">int<pos:position pos:line="491" pos:column="16"/></name></type> <name pos:line="491" pos:column="17">i<pos:position pos:line="491" pos:column="18"/></name></decl>;<pos:position pos:line="491" pos:column="19"/></decl_stmt>

            <if pos:line="493" pos:column="13">if <condition pos:line="493" pos:column="16">(<expr><call><name pos:line="493" pos:column="17">strcmp<pos:position pos:line="493" pos:column="23"/></name><argument_list pos:line="493" pos:column="23">(<argument><expr><name pos:line="493" pos:column="24">token<pos:position pos:line="493" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="493" pos:column="31">"*"<pos:position pos:line="493" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="493" pos:column="35"/></argument_list></call> <operator pos:line="493" pos:column="36">==<pos:position pos:line="493" pos:column="38"/></operator> <literal type="number" pos:line="493" pos:column="39">0<pos:position pos:line="493" pos:column="40"/></literal></expr>)<pos:position pos:line="493" pos:column="41"/></condition><then pos:line="493" pos:column="41">

                <block type="pseudo"><empty_stmt pos:line="495" pos:column="17">;<pos:position pos:line="495" pos:column="18"/></empty_stmt></block></then>   <comment type="block" pos:line="495" pos:column="21">/* Wildcard port specification */</comment>
            <elseif pos:line="496" pos:column="13">else <if pos:line="496" pos:column="18">if <condition pos:line="496" pos:column="21">(<expr><call><name pos:line="496" pos:column="22">strcmp<pos:position pos:line="496" pos:column="28"/></name><argument_list pos:line="496" pos:column="28">(<argument><expr><name pos:line="496" pos:column="29">token<pos:position pos:line="496" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="496" pos:column="36">"any"<pos:position pos:line="496" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="496" pos:column="42"/></argument_list></call> <operator pos:line="496" pos:column="43">==<pos:position pos:line="496" pos:column="45"/></operator> <literal type="number" pos:line="496" pos:column="46">0<pos:position pos:line="496" pos:column="47"/></literal></expr>)<pos:position pos:line="496" pos:column="48"/></condition><then pos:line="496" pos:column="48">

                <block type="pseudo"><empty_stmt pos:line="498" pos:column="17">;<pos:position pos:line="498" pos:column="18"/></empty_stmt></block></then></if></elseif>   <comment type="block" pos:line="498" pos:column="21">/* Wildcard port specification */</comment>
            <elseif pos:line="499" pos:column="13">else <if pos:line="499" pos:column="18">if <condition pos:line="499" pos:column="21">(<expr><call><name pos:line="499" pos:column="22">sscanf<pos:position pos:line="499" pos:column="28"/></name><argument_list pos:line="499" pos:column="28">(<argument><expr><name pos:line="499" pos:column="29">token<pos:position pos:line="499" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="499" pos:column="36">"%d"<pos:position pos:line="499" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="499" pos:column="42">&amp;<pos:position pos:line="499" pos:column="47"/></operator><name pos:line="499" pos:column="43">i<pos:position pos:line="499" pos:column="44"/></name></expr></argument>)<pos:position pos:line="499" pos:column="45"/></argument_list></call> <operator pos:line="499" pos:column="46">!=<pos:position pos:line="499" pos:column="48"/></operator> <literal type="number" pos:line="499" pos:column="49">1<pos:position pos:line="499" pos:column="50"/></literal></expr>)<pos:position pos:line="499" pos:column="51"/></condition><then pos:line="499" pos:column="51">
                <block type="pseudo"><continue pos:line="500" pos:column="17">continue;<pos:position pos:line="500" pos:column="26"/></continue></block></then></if></elseif>

            <elseif pos:line="502" pos:column="13">else <if pos:line="502" pos:column="18">if <condition pos:line="502" pos:column="21">(<expr><name pos:line="502" pos:column="22">i<pos:position pos:line="502" pos:column="23"/></name> <operator pos:line="502" pos:column="24">!=<pos:position pos:line="502" pos:column="26"/></operator> <name pos:line="502" pos:column="27">port<pos:position pos:line="502" pos:column="31"/></name></expr>)<pos:position pos:line="502" pos:column="32"/></condition><then pos:line="502" pos:column="32">
                <block type="pseudo"><continue pos:line="503" pos:column="17">continue;<pos:position pos:line="503" pos:column="26"/></continue></block></then></if></elseif></if>
        }<pos:position pos:line="504" pos:column="10"/></block></then> <elseif pos:line="504" pos:column="11">else <if pos:line="504" pos:column="16">if <condition pos:line="504" pos:column="19">(<expr><name pos:line="504" pos:column="20">port<pos:position pos:line="504" pos:column="24"/></name> <operator pos:line="504" pos:column="25">!=<pos:position pos:line="504" pos:column="27"/></operator> <name pos:line="504" pos:column="28">CACHE_HTTP_PORT<pos:position pos:line="504" pos:column="43"/></name></expr>)<pos:position pos:line="504" pos:column="44"/></condition><then pos:line="504" pos:column="44">
            <block type="pseudo"><continue pos:line="505" pos:column="13">continue;<pos:position pos:line="505" pos:column="22"/></continue></block></then></if></elseif></if>

        <expr_stmt><expr><name pos:line="507" pos:column="9">ret<pos:position pos:line="507" pos:column="12"/></name> <operator pos:line="507" pos:column="13">=<pos:position pos:line="507" pos:column="14"/></operator> <literal type="number" pos:line="507" pos:column="15">1<pos:position pos:line="507" pos:column="16"/></literal></expr>;<pos:position pos:line="507" pos:column="17"/></expr_stmt>

        <break pos:line="509" pos:column="9">break;<pos:position pos:line="509" pos:column="15"/></break>
    }<pos:position pos:line="510" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="512" pos:column="5">fclose<pos:position pos:line="512" pos:column="11"/></name><argument_list pos:line="512" pos:column="11">(<argument><expr><name pos:line="512" pos:column="12">fp<pos:position pos:line="512" pos:column="14"/></name></expr></argument>)<pos:position pos:line="512" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="512" pos:column="16"/></expr_stmt>
    <return pos:line="513" pos:column="5">return <expr><name pos:line="513" pos:column="12">ret<pos:position pos:line="513" pos:column="15"/></name></expr>;<pos:position pos:line="513" pos:column="16"/></return>
}<pos:position pos:line="514" pos:column="2"/></block></function></block></function></unit>
