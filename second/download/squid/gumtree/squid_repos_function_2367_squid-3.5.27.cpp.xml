<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2367_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">connectStart<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">()<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><call><name><name pos:line="4" pos:column="12">serverDestinations<pos:position pos:line="4" pos:column="30"/></name><operator pos:line="4" pos:column="30">.<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="31">size<pos:position pos:line="4" pos:column="35"/></name></name><argument_list pos:line="4" pos:column="35">()<pos:position pos:line="4" pos:column="37"/></argument_list></call> <operator pos:line="4" pos:column="38">&gt;<pos:position pos:line="4" pos:column="42"/></operator> <literal type="number" pos:line="4" pos:column="40">0<pos:position pos:line="4" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">17<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">3<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"fwdConnectStart: "<pos:position pos:line="6" pos:column="38"/></literal> <operator pos:line="6" pos:column="39">&lt;&lt;<pos:position pos:line="6" pos:column="47"/></operator> <call><name><name pos:line="6" pos:column="42">entry<pos:position pos:line="6" pos:column="47"/></name><operator pos:line="6" pos:column="47">-&gt;<pos:position pos:line="6" pos:column="52"/></operator><name pos:line="6" pos:column="49">url<pos:position pos:line="6" pos:column="52"/></name></name><argument_list pos:line="6" pos:column="52">()<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="56"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">request<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">-&gt;<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="14">hier<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">.<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="19">startPeerClock<pos:position pos:line="8" pos:column="33"/></name></name><argument_list pos:line="8" pos:column="33">()<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>

    <comment type="line" pos:line="10" pos:column="5">// Do not fowrward bumped connections to parent proxy unless it is an</comment>
    <comment type="line" pos:line="11" pos:column="5">// origin server</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">serverDestinations<pos:position pos:line="12" pos:column="27"/></name><index pos:line="12" pos:column="27">[<expr><literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr>]<pos:position pos:line="12" pos:column="30"/></index></name><operator pos:line="12" pos:column="30">-&gt;<pos:position pos:line="12" pos:column="35"/></operator><call><name pos:line="12" pos:column="32">getPeer<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">()<pos:position pos:line="12" pos:column="41"/></argument_list></call> <operator pos:line="12" pos:column="42">&amp;&amp;<pos:position pos:line="12" pos:column="52"/></operator> <operator pos:line="12" pos:column="45">!<pos:position pos:line="12" pos:column="46"/></operator><name><name pos:line="12" pos:column="46">serverDestinations<pos:position pos:line="12" pos:column="64"/></name><index pos:line="12" pos:column="64">[<expr><literal type="number" pos:line="12" pos:column="65">0<pos:position pos:line="12" pos:column="66"/></literal></expr>]<pos:position pos:line="12" pos:column="67"/></index></name><operator pos:line="12" pos:column="67">-&gt;<pos:position pos:line="12" pos:column="72"/></operator><call><name pos:line="12" pos:column="69">getPeer<pos:position pos:line="12" pos:column="76"/></name><argument_list pos:line="12" pos:column="76">()<pos:position pos:line="12" pos:column="78"/></argument_list></call><operator pos:line="12" pos:column="78">-&gt;<pos:position pos:line="12" pos:column="83"/></operator><name><name pos:line="12" pos:column="80">options<pos:position pos:line="12" pos:column="87"/></name><operator pos:line="12" pos:column="87">.<pos:position pos:line="12" pos:column="88"/></operator><name pos:line="12" pos:column="88">originserver<pos:position pos:line="12" pos:column="100"/></name></name> <operator pos:line="12" pos:column="101">&amp;&amp;<pos:position pos:line="12" pos:column="111"/></operator> <name><name pos:line="12" pos:column="104">request<pos:position pos:line="12" pos:column="111"/></name><operator pos:line="12" pos:column="111">-&gt;<pos:position pos:line="12" pos:column="116"/></operator><name pos:line="12" pos:column="113">flags<pos:position pos:line="12" pos:column="118"/></name><operator pos:line="12" pos:column="118">.<pos:position pos:line="12" pos:column="119"/></operator><name pos:line="12" pos:column="119">sslBumped<pos:position pos:line="12" pos:column="128"/></name></name></expr>)<pos:position pos:line="12" pos:column="129"/></condition><then pos:line="12" pos:column="129"> <block pos:line="12" pos:column="130">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">50<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="20">4<pos:position pos:line="13" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="23">"fwdConnectStart: Ssl bumped connections through parent proxy are not allowed"<pos:position pos:line="13" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="103"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">ErrorState<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">anErr<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><operator pos:line="14" pos:column="29">new<pos:position pos:line="14" pos:column="32"/></operator> <call><name pos:line="14" pos:column="33">ErrorState<pos:position pos:line="14" pos:column="43"/></name><argument_list pos:line="14" pos:column="43">(<argument><expr><name pos:line="14" pos:column="44">ERR_CANNOT_FORWARD<pos:position pos:line="14" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="64">Http<pos:position pos:line="14" pos:column="68"/></name><operator pos:line="14" pos:column="68">::<pos:position pos:line="14" pos:column="70"/></operator><name pos:line="14" pos:column="70">scServiceUnavailable<pos:position pos:line="14" pos:column="90"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="92">request<pos:position pos:line="14" pos:column="99"/></name></expr></argument>)<pos:position pos:line="14" pos:column="100"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="101"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">fail<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name pos:line="15" pos:column="14">anErr<pos:position pos:line="15" pos:column="19"/></name></expr></argument>)<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="16" pos:column="9">self<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <name pos:line="16" pos:column="16">NULL<pos:position pos:line="16" pos:column="20"/></name></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt> <comment type="line" pos:line="16" pos:column="22">// refcounted</comment>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="20" pos:column="5">request<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">flags<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">.<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">pinned<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <literal type="boolean" pos:line="20" pos:column="29">false<pos:position pos:line="20" pos:column="34"/></literal></expr>;<pos:position pos:line="20" pos:column="35"/></expr_stmt> <comment type="line" pos:line="20" pos:column="36">// XXX: what if the ConnStateData set this to flag existing credentials?</comment>
    <comment type="line" pos:line="21" pos:column="5">// XXX: answer: the peer selection *should* catch it and give us only the pinned peer. so we reverse the =0 step below.</comment>
    <comment type="line" pos:line="22" pos:column="5">// XXX: also, logs will now lie if pinning is broken and leads to an error message.</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">serverDestinations<pos:position pos:line="23" pos:column="27"/></name><index pos:line="23" pos:column="27">[<expr><literal type="number" pos:line="23" pos:column="28">0<pos:position pos:line="23" pos:column="29"/></literal></expr>]<pos:position pos:line="23" pos:column="30"/></index></name><operator pos:line="23" pos:column="30">-&gt;<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="32">peerType<pos:position pos:line="23" pos:column="40"/></name> <operator pos:line="23" pos:column="41">==<pos:position pos:line="23" pos:column="43"/></operator> <name pos:line="23" pos:column="44">PINNED<pos:position pos:line="23" pos:column="50"/></name></expr>)<pos:position pos:line="23" pos:column="51"/></condition><then pos:line="23" pos:column="51"> <block pos:line="23" pos:column="52">{
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">ConnStateData<pos:position pos:line="24" pos:column="22"/></name> <modifier pos:line="24" pos:column="23">*<pos:position pos:line="24" pos:column="24"/></modifier></type><name pos:line="24" pos:column="24">pinned_connection<pos:position pos:line="24" pos:column="41"/></name> <init pos:line="24" pos:column="42">= <expr><call><name><name pos:line="24" pos:column="44">request<pos:position pos:line="24" pos:column="51"/></name><operator pos:line="24" pos:column="51">-&gt;<pos:position pos:line="24" pos:column="56"/></operator><name pos:line="24" pos:column="53">pinnedConnection<pos:position pos:line="24" pos:column="69"/></name></name><argument_list pos:line="24" pos:column="69">()<pos:position pos:line="24" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="72"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">17<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="25" pos:column="19">7<pos:position pos:line="25" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="22">"pinned peer connection: "<pos:position pos:line="25" pos:column="48"/></literal> <operator pos:line="25" pos:column="49">&lt;&lt;<pos:position pos:line="25" pos:column="57"/></operator> <name pos:line="25" pos:column="52">pinned_connection<pos:position pos:line="25" pos:column="69"/></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt>
        <comment type="line" pos:line="26" pos:column="9">// pinned_connection may become nil after a pconn race</comment>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">pinned_connection<pos:position pos:line="27" pos:column="30"/></name></expr>)<pos:position pos:line="27" pos:column="31"/></condition><then pos:line="27" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="13">serverConn<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <call><name><name pos:line="28" pos:column="26">pinned_connection<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">-&gt;<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="45">borrowPinnedConnection<pos:position pos:line="28" pos:column="67"/></name></name><argument_list pos:line="28" pos:column="67">(<argument><expr><name pos:line="28" pos:column="68">request<pos:position pos:line="28" pos:column="75"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="77">serverDestinations<pos:position pos:line="28" pos:column="95"/></name><index pos:line="28" pos:column="95">[<expr><literal type="number" pos:line="28" pos:column="96">0<pos:position pos:line="28" pos:column="97"/></literal></expr>]<pos:position pos:line="28" pos:column="98"/></index></name><operator pos:line="28" pos:column="98">-&gt;<pos:position pos:line="28" pos:column="103"/></operator><call><name pos:line="28" pos:column="100">getPeer<pos:position pos:line="28" pos:column="107"/></name><argument_list pos:line="28" pos:column="107">()<pos:position pos:line="28" pos:column="109"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="111"/></expr_stmt></block></then>
        <else pos:line="29" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="13">serverConn<pos:position pos:line="30" pos:column="23"/></name> <operator pos:line="30" pos:column="24">=<pos:position pos:line="30" pos:column="25"/></operator> <name pos:line="30" pos:column="26">NULL<pos:position pos:line="30" pos:column="30"/></name></expr>;<pos:position pos:line="30" pos:column="31"/></expr_stmt></block></else></if>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name><name pos:line="31" pos:column="13">Comm<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">::<pos:position pos:line="31" pos:column="19"/></operator><name pos:line="31" pos:column="19">IsConnOpen<pos:position pos:line="31" pos:column="29"/></name></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">serverConn<pos:position pos:line="31" pos:column="40"/></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="42"/></condition><then pos:line="31" pos:column="42"> <block pos:line="31" pos:column="43">{
            <expr_stmt><expr><call><name><name pos:line="32" pos:column="13">pinned_connection<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">-&gt;<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="32">stopPinnedConnectionMonitoring<pos:position pos:line="32" pos:column="62"/></name></name><argument_list pos:line="32" pos:column="62">()<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="33" pos:column="13">flags<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">.<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="19">connected_okay<pos:position pos:line="33" pos:column="33"/></name></name> <operator pos:line="33" pos:column="34">=<pos:position pos:line="33" pos:column="35"/></operator> <literal type="boolean" pos:line="33" pos:column="36">true<pos:position pos:line="33" pos:column="40"/></literal></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="34" pos:column="13">++<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">n_tries<pos:position pos:line="34" pos:column="22"/></name></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="35" pos:column="13">request<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">-&gt;<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="22">flags<pos:position pos:line="35" pos:column="27"/></name><operator pos:line="35" pos:column="27">.<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="28">pinned<pos:position pos:line="35" pos:column="34"/></name></name> <operator pos:line="35" pos:column="35">=<pos:position pos:line="35" pos:column="36"/></operator> <literal type="boolean" pos:line="35" pos:column="37">true<pos:position pos:line="35" pos:column="41"/></literal></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><call><name><name pos:line="36" pos:column="17">pinned_connection<pos:position pos:line="36" pos:column="34"/></name><operator pos:line="36" pos:column="34">-&gt;<pos:position pos:line="36" pos:column="39"/></operator><name pos:line="36" pos:column="36">pinnedAuth<pos:position pos:line="36" pos:column="46"/></name></name><argument_list pos:line="36" pos:column="46">()<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="49"/></condition><then pos:line="36" pos:column="49">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="37" pos:column="17">request<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">-&gt;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="26">flags<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">.<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="32">auth<pos:position pos:line="37" pos:column="36"/></name></name> <operator pos:line="37" pos:column="37">=<pos:position pos:line="37" pos:column="38"/></operator> <literal type="boolean" pos:line="37" pos:column="39">true<pos:position pos:line="37" pos:column="43"/></literal></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt></block></then></if>

            <expr_stmt><expr><name pos:line="39" pos:column="13">closeHandler<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">=<pos:position pos:line="39" pos:column="27"/></operator> <call><name pos:line="39" pos:column="28">comm_add_close_handler<pos:position pos:line="39" pos:column="50"/></name><argument_list pos:line="39" pos:column="50">(<argument><expr><name><name pos:line="39" pos:column="51">serverConn<pos:position pos:line="39" pos:column="61"/></name><operator pos:line="39" pos:column="61">-&gt;<pos:position pos:line="39" pos:column="66"/></operator><name pos:line="39" pos:column="63">fd<pos:position pos:line="39" pos:column="65"/></name></name></expr></argument>,  <argument><expr><name pos:line="39" pos:column="68">fwdServerClosedWrapper<pos:position pos:line="39" pos:column="90"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="92">this<pos:position pos:line="39" pos:column="96"/></name></expr></argument>)<pos:position pos:line="39" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="98"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="41" pos:column="13">syncWithServerConn<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name><name pos:line="41" pos:column="32">pinned_connection<pos:position pos:line="41" pos:column="49"/></name><operator pos:line="41" pos:column="49">-&gt;<pos:position pos:line="41" pos:column="54"/></operator><name pos:line="41" pos:column="51">pinning<pos:position pos:line="41" pos:column="58"/></name><operator pos:line="41" pos:column="58">.<pos:position pos:line="41" pos:column="59"/></operator><name pos:line="41" pos:column="59">host<pos:position pos:line="41" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="65"/></expr_stmt>

            <comment type="line" pos:line="43" pos:column="13">// the server may close the pinned connection before this request</comment>
            <expr_stmt><expr><name pos:line="44" pos:column="13">pconnRace<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">=<pos:position pos:line="44" pos:column="24"/></operator> <name pos:line="44" pos:column="25">racePossible<pos:position pos:line="44" pos:column="37"/></name></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">dispatch<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">()<pos:position pos:line="45" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="24"/></expr_stmt>
            <return pos:line="46" pos:column="13">return;<pos:position pos:line="46" pos:column="20"/></return>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="48" pos:column="9">// Pinned connection failure.</comment>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">debugs<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="number" pos:line="49" pos:column="16">17<pos:position pos:line="49" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="49" pos:column="19">2<pos:position pos:line="49" pos:column="20"/></literal></expr></argument>,<argument><expr><name pos:line="49" pos:column="21">HERE<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">&lt;&lt;<pos:position pos:line="49" pos:column="34"/></operator> <literal type="string" pos:line="49" pos:column="29">"Pinned connection failed: "<pos:position pos:line="49" pos:column="57"/></literal> <operator pos:line="49" pos:column="58">&lt;&lt;<pos:position pos:line="49" pos:column="66"/></operator> <name pos:line="49" pos:column="61">pinned_connection<pos:position pos:line="49" pos:column="78"/></name></expr></argument>)<pos:position pos:line="49" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="80"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">ErrorState<pos:position pos:line="50" pos:column="19"/></name> <modifier pos:line="50" pos:column="20">*<pos:position pos:line="50" pos:column="21"/></modifier></type><name pos:line="50" pos:column="21">anErr<pos:position pos:line="50" pos:column="26"/></name> <init pos:line="50" pos:column="27">= <expr><operator pos:line="50" pos:column="29">new<pos:position pos:line="50" pos:column="32"/></operator> <call><name pos:line="50" pos:column="33">ErrorState<pos:position pos:line="50" pos:column="43"/></name><argument_list pos:line="50" pos:column="43">(<argument><expr><name pos:line="50" pos:column="44">ERR_ZERO_SIZE_OBJECT<pos:position pos:line="50" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="66">Http<pos:position pos:line="50" pos:column="70"/></name><operator pos:line="50" pos:column="70">::<pos:position pos:line="50" pos:column="72"/></operator><name pos:line="50" pos:column="72">scServiceUnavailable<pos:position pos:line="50" pos:column="92"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="94">request<pos:position pos:line="50" pos:column="101"/></name></expr></argument>)<pos:position pos:line="50" pos:column="102"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="103"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">fail<pos:position pos:line="51" pos:column="13"/></name><argument_list pos:line="51" pos:column="13">(<argument><expr><name pos:line="51" pos:column="14">anErr<pos:position pos:line="51" pos:column="19"/></name></expr></argument>)<pos:position pos:line="51" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">self<pos:position pos:line="52" pos:column="13"/></name> <operator pos:line="52" pos:column="14">=<pos:position pos:line="52" pos:column="15"/></operator> <name pos:line="52" pos:column="16">NULL<pos:position pos:line="52" pos:column="20"/></name></expr>;<pos:position pos:line="52" pos:column="21"/></expr_stmt> <comment type="line" pos:line="52" pos:column="22">// refcounted</comment>
        <return pos:line="53" pos:column="9">return;<pos:position pos:line="53" pos:column="16"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="56" pos:column="5">// Use pconn to avoid opening a new connection.</comment>
    <decl_stmt><decl><type><specifier pos:line="57" pos:column="5">const<pos:position pos:line="57" pos:column="10"/></specifier> <name pos:line="57" pos:column="11">char<pos:position pos:line="57" pos:column="15"/></name> <modifier pos:line="57" pos:column="16">*<pos:position pos:line="57" pos:column="17"/></modifier></type><name pos:line="57" pos:column="17">host<pos:position pos:line="57" pos:column="21"/></name> <init pos:line="57" pos:column="22">= <expr><name pos:line="57" pos:column="24">NULL<pos:position pos:line="57" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="57" pos:column="29"/></decl_stmt>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><operator pos:line="58" pos:column="9">!<pos:position pos:line="58" pos:column="10"/></operator><name><name pos:line="58" pos:column="10">serverDestinations<pos:position pos:line="58" pos:column="28"/></name><index pos:line="58" pos:column="28">[<expr><literal type="number" pos:line="58" pos:column="29">0<pos:position pos:line="58" pos:column="30"/></literal></expr>]<pos:position pos:line="58" pos:column="31"/></index></name><operator pos:line="58" pos:column="31">-&gt;<pos:position pos:line="58" pos:column="36"/></operator><call><name pos:line="58" pos:column="33">getPeer<pos:position pos:line="58" pos:column="40"/></name><argument_list pos:line="58" pos:column="40">()<pos:position pos:line="58" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="43"/></condition><then pos:line="58" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="9">host<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">=<pos:position pos:line="59" pos:column="15"/></operator> <call><name><name pos:line="59" pos:column="16">request<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">-&gt;<pos:position pos:line="59" pos:column="28"/></operator><name pos:line="59" pos:column="25">GetHost<pos:position pos:line="59" pos:column="32"/></name></name><argument_list pos:line="59" pos:column="32">()<pos:position pos:line="59" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="35"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="61" pos:column="5">Comm<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">::<pos:position pos:line="61" pos:column="11"/></operator><name pos:line="61" pos:column="11">ConnectionPointer<pos:position pos:line="61" pos:column="28"/></name></name></type> <name pos:line="61" pos:column="29">temp<pos:position pos:line="61" pos:column="33"/></name></decl>;<pos:position pos:line="61" pos:column="34"/></decl_stmt>
    <comment type="line" pos:line="62" pos:column="5">// Avoid pconns after races so that the same client does not suffer twice.</comment>
    <comment type="line" pos:line="63" pos:column="5">// This does not increase the total number of connections because we just</comment>
    <comment type="line" pos:line="64" pos:column="5">// closed the connection that failed the race. And re-pinning assumes this.</comment>
    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name pos:line="65" pos:column="9">pconnRace<pos:position pos:line="65" pos:column="18"/></name> <operator pos:line="65" pos:column="19">!=<pos:position pos:line="65" pos:column="21"/></operator> <name pos:line="65" pos:column="22">raceHappened<pos:position pos:line="65" pos:column="34"/></name></expr>)<pos:position pos:line="65" pos:column="35"/></condition><then pos:line="65" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="9">temp<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <call><name pos:line="66" pos:column="16">pconnPop<pos:position pos:line="66" pos:column="24"/></name><argument_list pos:line="66" pos:column="24">(<argument><expr><name><name pos:line="66" pos:column="25">serverDestinations<pos:position pos:line="66" pos:column="43"/></name><index pos:line="66" pos:column="43">[<expr><literal type="number" pos:line="66" pos:column="44">0<pos:position pos:line="66" pos:column="45"/></literal></expr>]<pos:position pos:line="66" pos:column="46"/></index></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="48">host<pos:position pos:line="66" pos:column="52"/></name></expr></argument>)<pos:position pos:line="66" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="54"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="68" pos:column="5">const<pos:position pos:line="68" pos:column="10"/></specifier> <name pos:line="68" pos:column="11">bool<pos:position pos:line="68" pos:column="15"/></name></type> <name pos:line="68" pos:column="16">openedPconn<pos:position pos:line="68" pos:column="27"/></name> <init pos:line="68" pos:column="28">= <expr><call><name><name pos:line="68" pos:column="30">Comm<pos:position pos:line="68" pos:column="34"/></name><operator pos:line="68" pos:column="34">::<pos:position pos:line="68" pos:column="36"/></operator><name pos:line="68" pos:column="36">IsConnOpen<pos:position pos:line="68" pos:column="46"/></name></name><argument_list pos:line="68" pos:column="46">(<argument><expr><name pos:line="68" pos:column="47">temp<pos:position pos:line="68" pos:column="51"/></name></expr></argument>)<pos:position pos:line="68" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="68" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><name pos:line="69" pos:column="5">pconnRace<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <ternary><condition><expr><name pos:line="69" pos:column="17">openedPconn<pos:position pos:line="69" pos:column="28"/></name></expr> ?<pos:position pos:line="69" pos:column="30"/></condition><then pos:line="69" pos:column="30"> <expr><name pos:line="69" pos:column="31">racePossible<pos:position pos:line="69" pos:column="43"/></name></expr> <pos:position pos:line="69" pos:column="44"/></then><else pos:line="69" pos:column="44">: <expr><name pos:line="69" pos:column="46">raceImpossible<pos:position pos:line="69" pos:column="60"/></name></expr></else></ternary></expr>;<pos:position pos:line="69" pos:column="61"/></expr_stmt>

    <comment type="line" pos:line="71" pos:column="5">// if we found an open persistent connection to use. use it.</comment>
    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name pos:line="72" pos:column="9">openedPconn<pos:position pos:line="72" pos:column="20"/></name></expr>)<pos:position pos:line="72" pos:column="21"/></condition><then pos:line="72" pos:column="21"> <block pos:line="72" pos:column="22">{
        <expr_stmt><expr><name pos:line="73" pos:column="9">serverConn<pos:position pos:line="73" pos:column="19"/></name> <operator pos:line="73" pos:column="20">=<pos:position pos:line="73" pos:column="21"/></operator> <name pos:line="73" pos:column="22">temp<pos:position pos:line="73" pos:column="26"/></name></expr>;<pos:position pos:line="73" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="74" pos:column="9">flags<pos:position pos:line="74" pos:column="14"/></name><operator pos:line="74" pos:column="14">.<pos:position pos:line="74" pos:column="15"/></operator><name pos:line="74" pos:column="15">connected_okay<pos:position pos:line="74" pos:column="29"/></name></name> <operator pos:line="74" pos:column="30">=<pos:position pos:line="74" pos:column="31"/></operator> <literal type="boolean" pos:line="74" pos:column="32">true<pos:position pos:line="74" pos:column="36"/></literal></expr>;<pos:position pos:line="74" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">debugs<pos:position pos:line="75" pos:column="15"/></name><argument_list pos:line="75" pos:column="15">(<argument><expr><literal type="number" pos:line="75" pos:column="16">17<pos:position pos:line="75" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="20">3<pos:position pos:line="75" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="23">HERE<pos:position pos:line="75" pos:column="27"/></name> <operator pos:line="75" pos:column="28">&lt;&lt;<pos:position pos:line="75" pos:column="36"/></operator> <literal type="string" pos:line="75" pos:column="31">"reusing pconn "<pos:position pos:line="75" pos:column="47"/></literal> <operator pos:line="75" pos:column="48">&lt;&lt;<pos:position pos:line="75" pos:column="56"/></operator> <call><name pos:line="75" pos:column="51">serverConnection<pos:position pos:line="75" pos:column="67"/></name><argument_list pos:line="75" pos:column="67">()<pos:position pos:line="75" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="75" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="76" pos:column="9">++<pos:position pos:line="76" pos:column="11"/></operator><name pos:line="76" pos:column="11">n_tries<pos:position pos:line="76" pos:column="18"/></name></expr>;<pos:position pos:line="76" pos:column="19"/></expr_stmt>

        <expr_stmt><expr><name pos:line="78" pos:column="9">closeHandler<pos:position pos:line="78" pos:column="21"/></name> <operator pos:line="78" pos:column="22">=<pos:position pos:line="78" pos:column="23"/></operator> <call><name pos:line="78" pos:column="24">comm_add_close_handler<pos:position pos:line="78" pos:column="46"/></name><argument_list pos:line="78" pos:column="46">(<argument><expr><call><name pos:line="78" pos:column="47">serverConnection<pos:position pos:line="78" pos:column="63"/></name><argument_list pos:line="78" pos:column="63">()<pos:position pos:line="78" pos:column="65"/></argument_list></call><operator pos:line="78" pos:column="65">-&gt;<pos:position pos:line="78" pos:column="70"/></operator><name pos:line="78" pos:column="67">fd<pos:position pos:line="78" pos:column="69"/></name></expr></argument>,  <argument><expr><name pos:line="78" pos:column="72">fwdServerClosedWrapper<pos:position pos:line="78" pos:column="94"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="96">this<pos:position pos:line="78" pos:column="100"/></name></expr></argument>)<pos:position pos:line="78" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="102"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="80" pos:column="9">syncWithServerConn<pos:position pos:line="80" pos:column="27"/></name><argument_list pos:line="80" pos:column="27">(<argument><expr><call><name><name pos:line="80" pos:column="28">request<pos:position pos:line="80" pos:column="35"/></name><operator pos:line="80" pos:column="35">-&gt;<pos:position pos:line="80" pos:column="40"/></operator><name pos:line="80" pos:column="37">GetHost<pos:position pos:line="80" pos:column="44"/></name></name><argument_list pos:line="80" pos:column="44">()<pos:position pos:line="80" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="48"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="82" pos:column="9">dispatch<pos:position pos:line="82" pos:column="17"/></name><argument_list pos:line="82" pos:column="17">()<pos:position pos:line="82" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="20"/></expr_stmt>
        <return pos:line="83" pos:column="9">return;<pos:position pos:line="83" pos:column="16"/></return>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="86" pos:column="5">// We will try to open a new connection, possibly to the same destination.</comment>
    <comment type="line" pos:line="87" pos:column="5">// We reset serverDestinations[0] in case we are using it again because</comment>
    <comment type="line" pos:line="88" pos:column="5">// ConnOpener modifies its destination argument.</comment>
    <expr_stmt><expr><name><name pos:line="89" pos:column="5">serverDestinations<pos:position pos:line="89" pos:column="23"/></name><index pos:line="89" pos:column="23">[<expr><literal type="number" pos:line="89" pos:column="24">0<pos:position pos:line="89" pos:column="25"/></literal></expr>]<pos:position pos:line="89" pos:column="26"/></index></name><operator pos:line="89" pos:column="26">-&gt;<pos:position pos:line="89" pos:column="31"/></operator><call><name><name pos:line="89" pos:column="28">local<pos:position pos:line="89" pos:column="33"/></name><operator pos:line="89" pos:column="33">.<pos:position pos:line="89" pos:column="34"/></operator><name pos:line="89" pos:column="34">port<pos:position pos:line="89" pos:column="38"/></name></name><argument_list pos:line="89" pos:column="38">(<argument><expr><literal type="number" pos:line="89" pos:column="39">0<pos:position pos:line="89" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="90" pos:column="5">serverConn<pos:position pos:line="90" pos:column="15"/></name> <operator pos:line="90" pos:column="16">=<pos:position pos:line="90" pos:column="17"/></operator> <name pos:line="90" pos:column="18">NULL<pos:position pos:line="90" pos:column="22"/></name></expr>;<pos:position pos:line="90" pos:column="23"/></expr_stmt>

<cpp:if pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">if<pos:position pos:line="92" pos:column="4"/></cpp:directive> <expr><name pos:line="92" pos:column="5">URL_CHECKSUM_DEBUG<pos:position pos:line="92" pos:column="23"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="93" pos:column="5">entry<pos:position pos:line="93" pos:column="10"/></name><operator pos:line="93" pos:column="10">-&gt;<pos:position pos:line="93" pos:column="15"/></operator><name pos:line="93" pos:column="12">mem_obj<pos:position pos:line="93" pos:column="19"/></name><operator pos:line="93" pos:column="19">-&gt;<pos:position pos:line="93" pos:column="24"/></operator><name pos:line="93" pos:column="21">checkUrlChecksum<pos:position pos:line="93" pos:column="37"/></name></name><argument_list pos:line="93" pos:column="37">()<pos:position pos:line="93" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="96" pos:column="5">GetMarkingsToServer<pos:position pos:line="96" pos:column="24"/></name><argument_list pos:line="96" pos:column="24">(<argument><expr><name pos:line="96" pos:column="25">request<pos:position pos:line="96" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="34">*<pos:position pos:line="96" pos:column="35"/></operator><name><name pos:line="96" pos:column="35">serverDestinations<pos:position pos:line="96" pos:column="53"/></name><index pos:line="96" pos:column="53">[<expr><literal type="number" pos:line="96" pos:column="54">0<pos:position pos:line="96" pos:column="55"/></literal></expr>]<pos:position pos:line="96" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="96" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="58"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="98" pos:column="5">calls<pos:position pos:line="98" pos:column="10"/></name><operator pos:line="98" pos:column="10">.<pos:position pos:line="98" pos:column="11"/></operator><name pos:line="98" pos:column="11">connector<pos:position pos:line="98" pos:column="20"/></name></name> <operator pos:line="98" pos:column="21">=<pos:position pos:line="98" pos:column="22"/></operator> <call><name pos:line="98" pos:column="23">commCbCall<pos:position pos:line="98" pos:column="33"/></name><argument_list pos:line="98" pos:column="33">(<argument><expr><literal type="number" pos:line="98" pos:column="34">17<pos:position pos:line="98" pos:column="36"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="98" pos:column="37">3<pos:position pos:line="98" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="40">"fwdConnectDoneWrapper"<pos:position pos:line="98" pos:column="63"/></literal></expr></argument>, <argument><expr><call><name pos:line="98" pos:column="65">CommConnectCbPtrFun<pos:position pos:line="98" pos:column="84"/></name><argument_list pos:line="98" pos:column="84">(<argument><expr><name pos:line="98" pos:column="85">fwdConnectDoneWrapper<pos:position pos:line="98" pos:column="106"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="108">this<pos:position pos:line="98" pos:column="112"/></name></expr></argument>)<pos:position pos:line="98" pos:column="113"/></argument_list></call></expr></argument>)<pos:position pos:line="98" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="115"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="99" pos:column="5">Comm<pos:position pos:line="99" pos:column="9"/></name><operator pos:line="99" pos:column="9">::<pos:position pos:line="99" pos:column="11"/></operator><name pos:line="99" pos:column="11">ConnOpener<pos:position pos:line="99" pos:column="21"/></name></name> <modifier pos:line="99" pos:column="22">*<pos:position pos:line="99" pos:column="23"/></modifier></type><name pos:line="99" pos:column="23">cs<pos:position pos:line="99" pos:column="25"/></name> <init pos:line="99" pos:column="26">= <expr><operator pos:line="99" pos:column="28">new<pos:position pos:line="99" pos:column="31"/></operator> <call><name><name pos:line="99" pos:column="32">Comm<pos:position pos:line="99" pos:column="36"/></name><operator pos:line="99" pos:column="36">::<pos:position pos:line="99" pos:column="38"/></operator><name pos:line="99" pos:column="38">ConnOpener<pos:position pos:line="99" pos:column="48"/></name></name><argument_list pos:line="99" pos:column="48">(<argument><expr><name><name pos:line="99" pos:column="49">serverDestinations<pos:position pos:line="99" pos:column="67"/></name><index pos:line="99" pos:column="67">[<expr><literal type="number" pos:line="99" pos:column="68">0<pos:position pos:line="99" pos:column="69"/></literal></expr>]<pos:position pos:line="99" pos:column="70"/></index></name></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="72">calls<pos:position pos:line="99" pos:column="77"/></name><operator pos:line="99" pos:column="77">.<pos:position pos:line="99" pos:column="78"/></operator><name pos:line="99" pos:column="78">connector<pos:position pos:line="99" pos:column="87"/></name></name></expr></argument>, <argument><expr><call><name pos:line="99" pos:column="89">timeLeft<pos:position pos:line="99" pos:column="97"/></name><argument_list pos:line="99" pos:column="97">()<pos:position pos:line="99" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="99" pos:column="100"/></argument_list></call></expr></init></decl>;<pos:position pos:line="99" pos:column="101"/></decl_stmt>
    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><name pos:line="100" pos:column="9">host<pos:position pos:line="100" pos:column="13"/></name></expr>)<pos:position pos:line="100" pos:column="14"/></condition><then pos:line="100" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="101" pos:column="9">cs<pos:position pos:line="101" pos:column="11"/></name><operator pos:line="101" pos:column="11">-&gt;<pos:position pos:line="101" pos:column="16"/></operator><name pos:line="101" pos:column="13">setHost<pos:position pos:line="101" pos:column="20"/></name></name><argument_list pos:line="101" pos:column="20">(<argument><expr><name pos:line="101" pos:column="21">host<pos:position pos:line="101" pos:column="25"/></name></expr></argument>)<pos:position pos:line="101" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="27"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="102" pos:column="5">AsyncJob<pos:position pos:line="102" pos:column="13"/></name><operator pos:line="102" pos:column="13">::<pos:position pos:line="102" pos:column="15"/></operator><name pos:line="102" pos:column="15">Start<pos:position pos:line="102" pos:column="20"/></name></name><argument_list pos:line="102" pos:column="20">(<argument><expr><name pos:line="102" pos:column="21">cs<pos:position pos:line="102" pos:column="23"/></name></expr></argument>)<pos:position pos:line="102" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="25"/></expr_stmt>
}<pos:position pos:line="103" pos:column="2"/></block></function></unit>
