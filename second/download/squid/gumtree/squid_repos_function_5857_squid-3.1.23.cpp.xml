<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5857_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">CaseSensitiveCheck<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">Trie<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">aTrie<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">aTrie<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">.<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">add<pos:position pos:line="6" pos:column="19"/></name></name> <argument_list pos:line="6" pos:column="20">(<argument><expr><literal type="string" pos:line="6" pos:column="21">"User-Agent"<pos:position pos:line="6" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="35">10<pos:position pos:line="6" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="6" pos:column="39">(<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="40">void<pos:position pos:line="6" pos:column="44"/></name> <operator pos:line="6" pos:column="45">*<pos:position pos:line="6" pos:column="46"/></operator><operator pos:line="6" pos:column="46">)<pos:position pos:line="6" pos:column="47"/></operator><literal type="number" pos:line="6" pos:column="47">1<pos:position pos:line="6" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="50"/></condition><then pos:line="6" pos:column="50"> <block pos:line="6" pos:column="51">{
        <expr_stmt><expr><name><name pos:line="7" pos:column="9">std<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">::<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">cerr<pos:position pos:line="7" pos:column="18"/></name></name> <operator pos:line="7" pos:column="19">&lt;&lt;<pos:position pos:line="7" pos:column="27"/></operator> <literal type="string" pos:line="7" pos:column="22">"Could not add User-Agent"<pos:position pos:line="7" pos:column="48"/></literal> <operator pos:line="7" pos:column="49">&lt;&lt;<pos:position pos:line="7" pos:column="57"/></operator> <name><name pos:line="7" pos:column="52">std<pos:position pos:line="7" pos:column="55"/></name><operator pos:line="7" pos:column="55">::<pos:position pos:line="7" pos:column="57"/></operator><name pos:line="7" pos:column="57">endl<pos:position pos:line="7" pos:column="61"/></name></name></expr>;<pos:position pos:line="7" pos:column="62"/></expr_stmt>
        <return pos:line="8" pos:column="9">return <expr><literal type="number" pos:line="8" pos:column="16">1<pos:position pos:line="8" pos:column="17"/></literal></expr>;<pos:position pos:line="8" pos:column="18"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name><name pos:line="11" pos:column="9">aTrie<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">add<pos:position pos:line="11" pos:column="18"/></name></name> <argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="string" pos:line="11" pos:column="20">"User-Agent"<pos:position pos:line="11" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="34">10<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="38">(<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="39">void<pos:position pos:line="11" pos:column="43"/></name> <operator pos:line="11" pos:column="44">*<pos:position pos:line="11" pos:column="45"/></operator><operator pos:line="11" pos:column="45">)<pos:position pos:line="11" pos:column="46"/></operator><literal type="number" pos:line="11" pos:column="46">2<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="49"/></condition><then pos:line="11" pos:column="49"> <block pos:line="11" pos:column="50">{
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">std<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">::<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">cerr<pos:position pos:line="12" pos:column="18"/></name></name> <operator pos:line="12" pos:column="19">&lt;&lt;<pos:position pos:line="12" pos:column="27"/></operator> <literal type="string" pos:line="12" pos:column="22">"Could add duplicate User-Agent"<pos:position pos:line="12" pos:column="54"/></literal> <operator pos:line="12" pos:column="55">&lt;&lt;<pos:position pos:line="12" pos:column="63"/></operator> <name><name pos:line="12" pos:column="58">std<pos:position pos:line="12" pos:column="61"/></name><operator pos:line="12" pos:column="61">::<pos:position pos:line="12" pos:column="63"/></operator><name pos:line="12" pos:column="63">endl<pos:position pos:line="12" pos:column="67"/></name></name></expr>;<pos:position pos:line="12" pos:column="68"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><literal type="number" pos:line="13" pos:column="16">1<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><call><name><name pos:line="16" pos:column="10">aTrie<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">.<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">add<pos:position pos:line="16" pos:column="19"/></name></name> <argument_list pos:line="16" pos:column="20">(<argument><expr><literal type="string" pos:line="16" pos:column="21">"Alphabet"<pos:position pos:line="16" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="33">8<pos:position pos:line="16" pos:column="34"/></literal></expr></argument>, <argument><expr><operator pos:line="16" pos:column="36">(<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="37">void<pos:position pos:line="16" pos:column="41"/></name> <operator pos:line="16" pos:column="42">*<pos:position pos:line="16" pos:column="43"/></operator><operator pos:line="16" pos:column="43">)<pos:position pos:line="16" pos:column="44"/></operator><literal type="number" pos:line="16" pos:column="44">3<pos:position pos:line="16" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="47"/></condition><then pos:line="16" pos:column="47"> <block pos:line="16" pos:column="48">{
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">std<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">::<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">cerr<pos:position pos:line="17" pos:column="18"/></name></name> <operator pos:line="17" pos:column="19">&lt;&lt;<pos:position pos:line="17" pos:column="27"/></operator> <literal type="string" pos:line="17" pos:column="22">"Could not add Alphabet"<pos:position pos:line="17" pos:column="46"/></literal> <operator pos:line="17" pos:column="47">&lt;&lt;<pos:position pos:line="17" pos:column="55"/></operator> <name><name pos:line="17" pos:column="50">std<pos:position pos:line="17" pos:column="53"/></name><operator pos:line="17" pos:column="53">::<pos:position pos:line="17" pos:column="55"/></operator><name pos:line="17" pos:column="55">endl<pos:position pos:line="17" pos:column="59"/></name></name></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><literal type="number" pos:line="18" pos:column="16">1<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><call><name><name pos:line="21" pos:column="10">aTrie<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">.<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">add<pos:position pos:line="21" pos:column="19"/></name></name> <argument_list pos:line="21" pos:column="20">(<argument><expr><literal type="string" pos:line="21" pos:column="21">"Uprefix"<pos:position pos:line="21" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="32">8<pos:position pos:line="21" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="21" pos:column="35">(<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="36">void<pos:position pos:line="21" pos:column="40"/></name> <operator pos:line="21" pos:column="41">*<pos:position pos:line="21" pos:column="42"/></operator><operator pos:line="21" pos:column="42">)<pos:position pos:line="21" pos:column="43"/></operator><literal type="number" pos:line="21" pos:column="43">3<pos:position pos:line="21" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="46"/></condition><then pos:line="21" pos:column="46"> <block pos:line="21" pos:column="47">{
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">std<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">::<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">cerr<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">&lt;&lt;<pos:position pos:line="22" pos:column="27"/></operator> <literal type="string" pos:line="22" pos:column="22">"Could not add Uprefix"<pos:position pos:line="22" pos:column="45"/></literal> <operator pos:line="22" pos:column="46">&lt;&lt;<pos:position pos:line="22" pos:column="54"/></operator> <name><name pos:line="22" pos:column="49">std<pos:position pos:line="22" pos:column="52"/></name><operator pos:line="22" pos:column="52">::<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="54">endl<pos:position pos:line="22" pos:column="58"/></name></name></expr>;<pos:position pos:line="22" pos:column="59"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><literal type="number" pos:line="23" pos:column="16">1<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name><name pos:line="26" pos:column="9">aTrie<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">.<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">find<pos:position pos:line="26" pos:column="19"/></name></name> <argument_list pos:line="26" pos:column="20">(<argument><expr><literal type="string" pos:line="26" pos:column="21">"User-Agent"<pos:position pos:line="26" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="35">10<pos:position pos:line="26" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call> <operator pos:line="26" pos:column="39">!=<pos:position pos:line="26" pos:column="41"/></operator> <operator pos:line="26" pos:column="42">(<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="43">void<pos:position pos:line="26" pos:column="47"/></name> <operator pos:line="26" pos:column="48">*<pos:position pos:line="26" pos:column="49"/></operator><operator pos:line="26" pos:column="49">)<pos:position pos:line="26" pos:column="50"/></operator><literal type="number" pos:line="26" pos:column="50">1<pos:position pos:line="26" pos:column="51"/></literal></expr>)<pos:position pos:line="26" pos:column="52"/></condition><then pos:line="26" pos:column="52"> <block pos:line="26" pos:column="53">{
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">std<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">::<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">cerr<pos:position pos:line="27" pos:column="18"/></name></name> <operator pos:line="27" pos:column="19">&lt;&lt;<pos:position pos:line="27" pos:column="27"/></operator> <literal type="string" pos:line="27" pos:column="22">"Could not find User-Agent"<pos:position pos:line="27" pos:column="49"/></literal> <operator pos:line="27" pos:column="50">&lt;&lt;<pos:position pos:line="27" pos:column="58"/></operator> <name><name pos:line="27" pos:column="53">std<pos:position pos:line="27" pos:column="56"/></name><operator pos:line="27" pos:column="56">::<pos:position pos:line="27" pos:column="58"/></operator><name pos:line="27" pos:column="58">endl<pos:position pos:line="27" pos:column="62"/></name></name></expr>;<pos:position pos:line="27" pos:column="63"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">1<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><call><name><name pos:line="31" pos:column="9">aTrie<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">.<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">find<pos:position pos:line="31" pos:column="19"/></name></name> <argument_list pos:line="31" pos:column="20">(<argument><expr><literal type="string" pos:line="31" pos:column="21">"user-agent"<pos:position pos:line="31" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="35">10<pos:position pos:line="31" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="38"/></argument_list></call> <operator pos:line="31" pos:column="39">==<pos:position pos:line="31" pos:column="41"/></operator> <operator pos:line="31" pos:column="42">(<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="43">void<pos:position pos:line="31" pos:column="47"/></name> <operator pos:line="31" pos:column="48">*<pos:position pos:line="31" pos:column="49"/></operator><operator pos:line="31" pos:column="49">)<pos:position pos:line="31" pos:column="50"/></operator><literal type="number" pos:line="31" pos:column="50">1<pos:position pos:line="31" pos:column="51"/></literal></expr>)<pos:position pos:line="31" pos:column="52"/></condition><then pos:line="31" pos:column="52"> <block pos:line="31" pos:column="53">{
        <expr_stmt><expr><name><name pos:line="32" pos:column="9">std<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">::<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">cerr<pos:position pos:line="32" pos:column="18"/></name></name> <operator pos:line="32" pos:column="19">&lt;&lt;<pos:position pos:line="32" pos:column="27"/></operator> <literal type="string" pos:line="32" pos:column="22">"found user-agent"<pos:position pos:line="32" pos:column="40"/></literal> <operator pos:line="32" pos:column="41">&lt;&lt;<pos:position pos:line="32" pos:column="49"/></operator> <name><name pos:line="32" pos:column="44">std<pos:position pos:line="32" pos:column="47"/></name><operator pos:line="32" pos:column="47">::<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="49">endl<pos:position pos:line="32" pos:column="53"/></name></name></expr>;<pos:position pos:line="32" pos:column="54"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">1<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name><name pos:line="36" pos:column="9">aTrie<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">.<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">findPrefix<pos:position pos:line="36" pos:column="25"/></name></name><argument_list pos:line="36" pos:column="25">(<argument><expr><literal type="string" pos:line="36" pos:column="26">"User-AgentFoo"<pos:position pos:line="36" pos:column="41"/></literal></expr></argument> , <argument><expr><literal type="number" pos:line="36" pos:column="44">13<pos:position pos:line="36" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call> <operator pos:line="36" pos:column="48">!=<pos:position pos:line="36" pos:column="50"/></operator> <operator pos:line="36" pos:column="51">(<pos:position pos:line="36" pos:column="52"/></operator><name pos:line="36" pos:column="52">void<pos:position pos:line="36" pos:column="56"/></name> <operator pos:line="36" pos:column="57">*<pos:position pos:line="36" pos:column="58"/></operator><operator pos:line="36" pos:column="58">)<pos:position pos:line="36" pos:column="59"/></operator><literal type="number" pos:line="36" pos:column="59">1<pos:position pos:line="36" pos:column="60"/></literal></expr>)<pos:position pos:line="36" pos:column="61"/></condition><then pos:line="36" pos:column="61"> <block pos:line="36" pos:column="62">{
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">std<pos:position pos:line="37" pos:column="12"/></name><operator pos:line="37" pos:column="12">::<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">cerr<pos:position pos:line="37" pos:column="18"/></name></name> <operator pos:line="37" pos:column="19">&lt;&lt;<pos:position pos:line="37" pos:column="27"/></operator> <literal type="string" pos:line="37" pos:column="22">"Could not find User prefix"<pos:position pos:line="37" pos:column="50"/></literal> <operator pos:line="37" pos:column="51">&lt;&lt;<pos:position pos:line="37" pos:column="59"/></operator> <name><name pos:line="37" pos:column="54">std<pos:position pos:line="37" pos:column="57"/></name><operator pos:line="37" pos:column="57">::<pos:position pos:line="37" pos:column="59"/></operator><name pos:line="37" pos:column="59">endl<pos:position pos:line="37" pos:column="63"/></name></name></expr>;<pos:position pos:line="37" pos:column="64"/></expr_stmt>
        <return pos:line="38" pos:column="9">return <expr><literal type="number" pos:line="38" pos:column="16">1<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name><name pos:line="41" pos:column="9">aTrie<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">.<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">findPrefix<pos:position pos:line="41" pos:column="25"/></name></name><argument_list pos:line="41" pos:column="25">(<argument><expr><literal type="string" pos:line="41" pos:column="26">"user-agentFoo"<pos:position pos:line="41" pos:column="41"/></literal></expr></argument> , <argument><expr><literal type="number" pos:line="41" pos:column="44">13<pos:position pos:line="41" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call> <operator pos:line="41" pos:column="48">==<pos:position pos:line="41" pos:column="50"/></operator> <operator pos:line="41" pos:column="51">(<pos:position pos:line="41" pos:column="52"/></operator><name pos:line="41" pos:column="52">void<pos:position pos:line="41" pos:column="56"/></name> <operator pos:line="41" pos:column="57">*<pos:position pos:line="41" pos:column="58"/></operator><operator pos:line="41" pos:column="58">)<pos:position pos:line="41" pos:column="59"/></operator><literal type="number" pos:line="41" pos:column="59">1<pos:position pos:line="41" pos:column="60"/></literal></expr>)<pos:position pos:line="41" pos:column="61"/></condition><then pos:line="41" pos:column="61"> <block pos:line="41" pos:column="62">{
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">std<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">::<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">cerr<pos:position pos:line="42" pos:column="18"/></name></name> <operator pos:line="42" pos:column="19">&lt;&lt;<pos:position pos:line="42" pos:column="27"/></operator> <literal type="string" pos:line="42" pos:column="22">"found user prefix"<pos:position pos:line="42" pos:column="41"/></literal> <operator pos:line="42" pos:column="42">&lt;&lt;<pos:position pos:line="42" pos:column="50"/></operator> <name><name pos:line="42" pos:column="45">std<pos:position pos:line="42" pos:column="48"/></name><operator pos:line="42" pos:column="48">::<pos:position pos:line="42" pos:column="50"/></operator><name pos:line="42" pos:column="50">endl<pos:position pos:line="42" pos:column="54"/></name></name></expr>;<pos:position pos:line="42" pos:column="55"/></expr_stmt>
        <return pos:line="43" pos:column="9">return <expr><literal type="number" pos:line="43" pos:column="16">1<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <return pos:line="46" pos:column="5">return <expr><literal type="number" pos:line="46" pos:column="12">0<pos:position pos:line="46" pos:column="13"/></literal></expr>;<pos:position pos:line="46" pos:column="14"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
