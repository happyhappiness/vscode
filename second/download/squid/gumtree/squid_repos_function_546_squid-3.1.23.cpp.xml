<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_546_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">asn_parse_header<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">u_char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type> <name pos:line="2" pos:column="27">data<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">datalength<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">u_char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type> <name pos:line="2" pos:column="59">type<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<comment type="block" pos:line="3" pos:column="1">/*    u_char  *data;       IN - pointer to start of object */</comment>
<comment type="block" pos:line="4" pos:column="1">/*    int     *datalength; IN/OUT - # of valid bytes left in buffer */</comment>
<comment type="block" pos:line="5" pos:column="1">/*    u_char  *type;       OUT - ASN type of object */</comment>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">u_char<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">bufp<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><name pos:line="7" pos:column="20">data<pos:position pos:line="7" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">header_len<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">u_int<pos:position pos:line="9" pos:column="10"/></name></type> <name pos:line="9" pos:column="11">asn_length<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* this only works on data types &lt; 30, i.e. no extension octets */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">IS_EXTENSION_ID<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><operator pos:line="12" pos:column="25">*<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="26">bufp<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32"> <block pos:line="12" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">snmp_set_api_error<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">SNMPERR_ASN_DECODE<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><operator pos:line="14" pos:column="16">(<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">NULL<pos:position pos:line="14" pos:column="21"/></name><operator pos:line="14" pos:column="21">)<pos:position pos:line="14" pos:column="22"/></operator></expr>;<pos:position pos:line="14" pos:column="23"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="16" pos:column="5">*<pos:position pos:line="16" pos:column="6"/></operator><name pos:line="16" pos:column="6">type<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <operator pos:line="16" pos:column="13">*<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">bufp<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">bufp<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">asn_parse_length<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">bufp<pos:position pos:line="17" pos:column="33"/></name> <operator pos:line="17" pos:column="34">+<pos:position pos:line="17" pos:column="35"/></operator> <literal type="number" pos:line="17" pos:column="36">1<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">asn_length<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">bufp<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">==<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">NULL<pos:position pos:line="18" pos:column="21"/></name></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22">
        <block type="pseudo"><return pos:line="19" pos:column="9">return <expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="17">NULL<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">)<pos:position pos:line="19" pos:column="22"/></operator></expr>;<pos:position pos:line="19" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="21" pos:column="5">header_len<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="18">bufp<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">-<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">data<pos:position pos:line="21" pos:column="29"/></name></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">header_len<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">+<pos:position pos:line="22" pos:column="21"/></operator> <name pos:line="22" pos:column="22">asn_length<pos:position pos:line="22" pos:column="32"/></name> <operator pos:line="22" pos:column="33">&gt;<pos:position pos:line="22" pos:column="37"/></operator> <operator pos:line="22" pos:column="35">*<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="36">datalength<pos:position pos:line="22" pos:column="46"/></name> <operator pos:line="22" pos:column="47">||<pos:position pos:line="22" pos:column="49"/></operator> <name pos:line="22" pos:column="50">asn_length<pos:position pos:line="22" pos:column="60"/></name> <operator pos:line="22" pos:column="61">&gt;<pos:position pos:line="22" pos:column="65"/></operator> <call pos:line="22" pos:column="63">(<name pos:line="22" pos:column="64">u_int<pos:position pos:line="22" pos:column="69"/></name>)<argument_list pos:line="22" pos:column="70">(<argument><expr><literal type="number" pos:line="22" pos:column="71">2<pos:position pos:line="22" pos:column="72"/></literal> <operator pos:line="22" pos:column="73">&lt;&lt;<pos:position pos:line="22" pos:column="81"/></operator> <literal type="number" pos:line="22" pos:column="76">18<pos:position pos:line="22" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr> )<pos:position pos:line="22" pos:column="81"/></condition><then pos:line="22" pos:column="81"> <block pos:line="22" pos:column="82">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">snmp_set_api_error<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">SNMPERR_ASN_DECODE<pos:position pos:line="23" pos:column="46"/></name></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><operator pos:line="24" pos:column="16">(<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">NULL<pos:position pos:line="24" pos:column="21"/></name><operator pos:line="24" pos:column="21">)<pos:position pos:line="24" pos:column="22"/></operator></expr>;<pos:position pos:line="24" pos:column="23"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="26" pos:column="5">*<pos:position pos:line="26" pos:column="6"/></operator><name pos:line="26" pos:column="6">datalength<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator> <operator pos:line="26" pos:column="19">(<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">int<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">)<pos:position pos:line="26" pos:column="24"/></operator> <name pos:line="26" pos:column="25">asn_length<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><operator pos:line="27" pos:column="12">(<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">bufp<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">)<pos:position pos:line="27" pos:column="18"/></operator></expr>;<pos:position pos:line="27" pos:column="19"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
