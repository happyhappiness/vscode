<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6946_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ipc<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">UdsSender<pos:position pos:line="1" pos:column="20"/></name><operator pos:line="1" pos:column="20">::<pos:position pos:line="1" pos:column="22"/></operator><name pos:line="1" pos:column="22">DelayedRetry<pos:position pos:line="1" pos:column="34"/></name></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">void<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">data<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">Pointer<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">ptr<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><cast type="static" pos:line="3" pos:column="20">static_cast<argument_list type="generic" pos:line="3" pos:column="31">&lt;<argument><expr><name pos:line="3" pos:column="32">Pointer<pos:position pos:line="3" pos:column="39"/></name><operator pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></operator></expr></argument>&gt;<pos:position pos:line="3" pos:column="44"/></argument_list><argument_list pos:line="3" pos:column="41">(<argument><expr><name pos:line="3" pos:column="42">data<pos:position pos:line="3" pos:column="46"/></name></expr></argument>)<pos:position pos:line="3" pos:column="47"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="3" pos:column="48"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">ptr<pos:position pos:line="4" pos:column="15"/></name></expr></argument>)<pos:position pos:line="4" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="17"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<decl><type><name pos:line="5" pos:column="9">UdsSender<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">us<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><cast type="dynamic" pos:line="5" pos:column="25">dynamic_cast<argument_list type="generic" pos:line="5" pos:column="37">&lt;<argument><expr><name pos:line="5" pos:column="38">UdsSender<pos:position pos:line="5" pos:column="47"/></name><operator pos:line="5" pos:column="47">*<pos:position pos:line="5" pos:column="48"/></operator></expr></argument>&gt;<pos:position pos:line="5" pos:column="52"/></argument_list><argument_list pos:line="5" pos:column="49">(<argument><expr><call><name><name pos:line="5" pos:column="50">ptr<pos:position pos:line="5" pos:column="53"/></name><operator pos:line="5" pos:column="53">-&gt;<pos:position pos:line="5" pos:column="58"/></operator><name pos:line="5" pos:column="55">valid<pos:position pos:line="5" pos:column="60"/></name></name><argument_list pos:line="5" pos:column="60">()<pos:position pos:line="5" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="63"/></argument_list></cast></expr></init></decl>)<pos:position pos:line="5" pos:column="64"/></condition><then pos:line="5" pos:column="64"> <block pos:line="5" pos:column="65">{
        <comment type="line" pos:line="6" pos:column="9">// get back inside AsyncJob protection by scheduling an async job call</comment>
        <typedef pos:line="7" pos:column="9">typedef <type><name><name pos:line="7" pos:column="17">NullaryMemFunT<pos:position pos:line="7" pos:column="31"/></name><argument_list type="generic" pos:line="7" pos:column="31">&lt;<argument><expr><name><name pos:line="7" pos:column="32">Ipc<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">::<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">UdsSender<pos:position pos:line="7" pos:column="46"/></name></name></expr></argument>&gt;<pos:position pos:line="7" pos:column="50"/></argument_list></name></type> <name pos:line="7" pos:column="48">Dialer<pos:position pos:line="7" pos:column="54"/></name>;<pos:position pos:line="7" pos:column="55"/></typedef>
        <decl_stmt><decl><type><name><name pos:line="8" pos:column="9">AsyncCall<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">::<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">Pointer<pos:position pos:line="8" pos:column="27"/></name></name></type> <name pos:line="8" pos:column="28">call<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><call><name pos:line="8" pos:column="35">JobCallback<pos:position pos:line="8" pos:column="46"/></name><argument_list pos:line="8" pos:column="46">(<argument><expr><literal type="number" pos:line="8" pos:column="47">54<pos:position pos:line="8" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="51">4<pos:position pos:line="8" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="54">Dialer<pos:position pos:line="8" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="62">us<pos:position pos:line="8" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="66">Ipc<pos:position pos:line="8" pos:column="69"/></name><operator pos:line="8" pos:column="69">::<pos:position pos:line="8" pos:column="71"/></operator><name pos:line="8" pos:column="71">UdsSender<pos:position pos:line="8" pos:column="80"/></name><operator pos:line="8" pos:column="80">::<pos:position pos:line="8" pos:column="82"/></operator><name pos:line="8" pos:column="82">delayedRetry<pos:position pos:line="8" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="96"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">ScheduleCallHere<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">call<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="11" pos:column="5">delete<pos:position pos:line="11" pos:column="11"/></operator> <name pos:line="11" pos:column="12">ptr<pos:position pos:line="11" pos:column="15"/></name></expr>;<pos:position pos:line="11" pos:column="16"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
