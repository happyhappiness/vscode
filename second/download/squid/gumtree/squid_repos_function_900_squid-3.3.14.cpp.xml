<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_900_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">commSetNonBlocking<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">int<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">fd<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><operator pos:line="4" pos:column="5">!<pos:position pos:line="4" pos:column="6"/></operator><name pos:line="4" pos:column="6">_SQUID_WINDOWS_<pos:position pos:line="4" pos:column="21"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">flags<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">dummy<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="8" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">nonblocking<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><name pos:line="9" pos:column="23">TRUE<pos:position pos:line="9" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">_SQUID_CYGWIN_<pos:position pos:line="11" pos:column="19"/></name></expr></cpp:if>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">fd_table<pos:position pos:line="12" pos:column="17"/></name><index pos:line="12" pos:column="17">[<expr><name pos:line="12" pos:column="18">fd<pos:position pos:line="12" pos:column="20"/></name></expr>]<pos:position pos:line="12" pos:column="21"/></index></name><operator pos:line="12" pos:column="21">.<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">type<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">!=<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="30">FD_PIPE<pos:position pos:line="12" pos:column="37"/></name></expr>)<pos:position pos:line="12" pos:column="38"/></condition><then pos:line="12" pos:column="38"> <block pos:line="12" pos:column="39">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">ioctl<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">fd<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="23">FIONBIO<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="32">&amp;<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="33">nonblocking<pos:position pos:line="15" pos:column="44"/></name></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call> <operator pos:line="15" pos:column="46">&lt;<pos:position pos:line="15" pos:column="50"/></operator> <literal type="number" pos:line="15" pos:column="48">0<pos:position pos:line="15" pos:column="49"/></literal></expr>)<pos:position pos:line="15" pos:column="50"/></condition><then pos:line="15" pos:column="50"> <block pos:line="15" pos:column="51">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">debugs<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><literal type="number" pos:line="16" pos:column="20">50<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="27">"commSetNonBlocking: FD "<pos:position pos:line="16" pos:column="52"/></literal> <operator pos:line="16" pos:column="53">&lt;&lt;<pos:position pos:line="16" pos:column="61"/></operator> <name pos:line="16" pos:column="56">fd<pos:position pos:line="16" pos:column="58"/></name> <operator pos:line="16" pos:column="59">&lt;&lt;<pos:position pos:line="16" pos:column="67"/></operator> <literal type="string" pos:line="16" pos:column="62">": "<pos:position pos:line="16" pos:column="66"/></literal> <operator pos:line="16" pos:column="67">&lt;&lt;<pos:position pos:line="16" pos:column="75"/></operator> <call><name pos:line="16" pos:column="70">xstrerror<pos:position pos:line="16" pos:column="79"/></name><argument_list pos:line="16" pos:column="79">()<pos:position pos:line="16" pos:column="81"/></argument_list></call> <operator pos:line="16" pos:column="82">&lt;&lt;<pos:position pos:line="16" pos:column="90"/></operator> <literal type="string" pos:line="16" pos:column="85">" "<pos:position pos:line="16" pos:column="88"/></literal> <operator pos:line="16" pos:column="89">&lt;&lt;<pos:position pos:line="16" pos:column="97"/></operator> <name><name pos:line="16" pos:column="92">fd_table<pos:position pos:line="16" pos:column="100"/></name><index pos:line="16" pos:column="100">[<expr><name pos:line="16" pos:column="101">fd<pos:position pos:line="16" pos:column="103"/></name></expr>]<pos:position pos:line="16" pos:column="104"/></index></name><operator pos:line="16" pos:column="104">.<pos:position pos:line="16" pos:column="105"/></operator><name pos:line="16" pos:column="105">type<pos:position pos:line="16" pos:column="109"/></name></expr></argument>)<pos:position pos:line="16" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="111"/></expr_stmt>
            <return pos:line="17" pos:column="13">return <expr><name pos:line="17" pos:column="20">COMM_ERROR<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">_SQUID_CYGWIN_<pos:position pos:line="20" pos:column="19"/></name></expr></cpp:if>
    }<pos:position pos:line="21" pos:column="6"/></block></then> <else pos:line="21" pos:column="7">else <block pos:line="21" pos:column="12">{
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><operator pos:line="24" pos:column="5">!<pos:position pos:line="24" pos:column="6"/></operator><name pos:line="24" pos:column="6">_SQUID_WINDOWS_<pos:position pos:line="24" pos:column="21"/></name></expr></cpp:if>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">(<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">flags<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <call><name pos:line="26" pos:column="22">fcntl<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">fd<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="32">F_GETFL<pos:position pos:line="26" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="41">dummy<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call><operator pos:line="26" pos:column="47">)<pos:position pos:line="26" pos:column="48"/></operator> <operator pos:line="26" pos:column="49">&lt;<pos:position pos:line="26" pos:column="53"/></operator> <literal type="number" pos:line="26" pos:column="51">0<pos:position pos:line="26" pos:column="52"/></literal></expr>)<pos:position pos:line="26" pos:column="53"/></condition><then pos:line="26" pos:column="53"> <block pos:line="26" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">debugs<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">(<argument><expr><literal type="number" pos:line="27" pos:column="20">50<pos:position pos:line="27" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="24">0<pos:position pos:line="27" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="27">"FD "<pos:position pos:line="27" pos:column="32"/></literal> <operator pos:line="27" pos:column="33">&lt;&lt;<pos:position pos:line="27" pos:column="41"/></operator> <name pos:line="27" pos:column="36">fd<pos:position pos:line="27" pos:column="38"/></name> <operator pos:line="27" pos:column="39">&lt;&lt;<pos:position pos:line="27" pos:column="47"/></operator> <literal type="string" pos:line="27" pos:column="42">": fcntl F_GETFL: "<pos:position pos:line="27" pos:column="61"/></literal> <operator pos:line="27" pos:column="62">&lt;&lt;<pos:position pos:line="27" pos:column="70"/></operator> <call><name pos:line="27" pos:column="65">xstrerror<pos:position pos:line="27" pos:column="74"/></name><argument_list pos:line="27" pos:column="74">()<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="78"/></expr_stmt>
            <return pos:line="28" pos:column="13">return <expr><name pos:line="28" pos:column="20">COMM_ERROR<pos:position pos:line="28" pos:column="30"/></name></expr>;<pos:position pos:line="28" pos:column="31"/></return>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>

        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">fcntl<pos:position pos:line="31" pos:column="18"/></name><argument_list pos:line="31" pos:column="18">(<argument><expr><name pos:line="31" pos:column="19">fd<pos:position pos:line="31" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="23">F_SETFL<pos:position pos:line="31" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="32">flags<pos:position pos:line="31" pos:column="37"/></name> <operator pos:line="31" pos:column="38">|<pos:position pos:line="31" pos:column="39"/></operator> <name pos:line="31" pos:column="40">SQUID_NONBLOCK<pos:position pos:line="31" pos:column="54"/></name></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call> <operator pos:line="31" pos:column="56">&lt;<pos:position pos:line="31" pos:column="60"/></operator> <literal type="number" pos:line="31" pos:column="58">0<pos:position pos:line="31" pos:column="59"/></literal></expr>)<pos:position pos:line="31" pos:column="60"/></condition><then pos:line="31" pos:column="60"> <block pos:line="31" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">debugs<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><literal type="number" pos:line="32" pos:column="20">50<pos:position pos:line="32" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="24">0<pos:position pos:line="32" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="27">"commSetNonBlocking: FD "<pos:position pos:line="32" pos:column="52"/></literal> <operator pos:line="32" pos:column="53">&lt;&lt;<pos:position pos:line="32" pos:column="61"/></operator> <name pos:line="32" pos:column="56">fd<pos:position pos:line="32" pos:column="58"/></name> <operator pos:line="32" pos:column="59">&lt;&lt;<pos:position pos:line="32" pos:column="67"/></operator> <literal type="string" pos:line="32" pos:column="62">": "<pos:position pos:line="32" pos:column="66"/></literal> <operator pos:line="32" pos:column="67">&lt;&lt;<pos:position pos:line="32" pos:column="75"/></operator> <call><name pos:line="32" pos:column="70">xstrerror<pos:position pos:line="32" pos:column="79"/></name><argument_list pos:line="32" pos:column="79">()<pos:position pos:line="32" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="83"/></expr_stmt>
            <return pos:line="33" pos:column="13">return <expr><name pos:line="33" pos:column="20">COMM_ERROR<pos:position pos:line="33" pos:column="30"/></name></expr>;<pos:position pos:line="33" pos:column="31"/></return>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>

<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">if<pos:position pos:line="37" pos:column="4"/></cpp:directive> <expr><name pos:line="37" pos:column="5">_SQUID_CYGWIN_<pos:position pos:line="37" pos:column="19"/></name></expr></cpp:if>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">fd_table<pos:position pos:line="40" pos:column="13"/></name><index pos:line="40" pos:column="13">[<expr><name pos:line="40" pos:column="14">fd<pos:position pos:line="40" pos:column="16"/></name></expr>]<pos:position pos:line="40" pos:column="17"/></index></name><operator pos:line="40" pos:column="17">.<pos:position pos:line="40" pos:column="18"/></operator><name><name pos:line="40" pos:column="18">flags<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">.<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="24">nonblocking<pos:position pos:line="40" pos:column="35"/></name></name> <operator pos:line="40" pos:column="36">=<pos:position pos:line="40" pos:column="37"/></operator> <literal type="number" pos:line="40" pos:column="38">1<pos:position pos:line="40" pos:column="39"/></literal></expr>;<pos:position pos:line="40" pos:column="40"/></expr_stmt>

    <return pos:line="42" pos:column="5">return <expr><literal type="number" pos:line="42" pos:column="12">0<pos:position pos:line="42" pos:column="13"/></literal></expr>;<pos:position pos:line="42" pos:column="14"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
