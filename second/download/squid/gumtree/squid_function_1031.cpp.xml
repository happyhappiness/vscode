<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1031.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">SwapDir<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">create<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">()<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">path<pos:position pos:line="4" pos:column="16"/></name></expr></argument>)<pos:position pos:line="4" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">filePath<pos:position pos:line="5" pos:column="20"/></name></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">UsingSmp<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">()<pos:position pos:line="7" pos:column="19"/></argument_list></call> <operator pos:line="7" pos:column="20">&amp;&amp;<pos:position pos:line="7" pos:column="30"/></operator> <operator pos:line="7" pos:column="23">!<pos:position pos:line="7" pos:column="24"/></operator><call><name pos:line="7" pos:column="24">IamDiskProcess<pos:position pos:line="7" pos:column="38"/></name><argument_list pos:line="7" pos:column="38">()<pos:position pos:line="7" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="41"/></condition><then pos:line="7" pos:column="41"> <block pos:line="7" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name> <argument_list pos:line="8" pos:column="16">(<argument><expr><literal type="number" pos:line="8" pos:column="17">47<pos:position pos:line="8" pos:column="19"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="8" pos:column="20">3<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="23">HERE<pos:position pos:line="8" pos:column="27"/></name> <operator pos:line="8" pos:column="28">&lt;&lt;<pos:position pos:line="8" pos:column="36"/></operator> <literal type="string" pos:line="8" pos:column="31">"disker will create in "<pos:position pos:line="8" pos:column="55"/></literal> <operator pos:line="8" pos:column="56">&lt;&lt;<pos:position pos:line="8" pos:column="64"/></operator> <name pos:line="8" pos:column="59">path<pos:position pos:line="8" pos:column="63"/></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name> <argument_list pos:line="12" pos:column="12">(<argument><expr><literal type="number" pos:line="12" pos:column="13">47<pos:position pos:line="12" pos:column="15"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="16">3<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="19">HERE<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">&lt;&lt;<pos:position pos:line="12" pos:column="32"/></operator> <literal type="string" pos:line="12" pos:column="27">"creating in "<pos:position pos:line="12" pos:column="41"/></literal> <operator pos:line="12" pos:column="42">&lt;&lt;<pos:position pos:line="12" pos:column="50"/></operator> <name pos:line="12" pos:column="45">path<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">struct<pos:position pos:line="14" pos:column="11"/></name> <name pos:line="14" pos:column="12">stat<pos:position pos:line="14" pos:column="16"/></name></name></type> <name pos:line="14" pos:column="17">dir_sb<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name><operator pos:line="15" pos:column="9">::<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">stat<pos:position pos:line="15" pos:column="15"/></name></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">path<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="22">&amp;<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="23">dir_sb<pos:position pos:line="15" pos:column="29"/></name></expr></argument>)<pos:position pos:line="15" pos:column="30"/></argument_list></call> <operator pos:line="15" pos:column="31">==<pos:position pos:line="15" pos:column="33"/></operator> <literal type="number" pos:line="15" pos:column="34">0<pos:position pos:line="15" pos:column="35"/></literal></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <block pos:line="15" pos:column="37">{
        <decl_stmt><decl><type><name><name pos:line="16" pos:column="9">struct<pos:position pos:line="16" pos:column="15"/></name> <name pos:line="16" pos:column="16">stat<pos:position pos:line="16" pos:column="20"/></name></name></type> <name pos:line="16" pos:column="21">file_sb<pos:position pos:line="16" pos:column="28"/></name></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name><operator pos:line="17" pos:column="13">::<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">stat<pos:position pos:line="17" pos:column="19"/></name></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">filePath<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="30">&amp;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="31">file_sb<pos:position pos:line="17" pos:column="38"/></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call> <operator pos:line="17" pos:column="40">==<pos:position pos:line="17" pos:column="42"/></operator> <literal type="number" pos:line="17" pos:column="43">0<pos:position pos:line="17" pos:column="44"/></literal></expr>)<pos:position pos:line="17" pos:column="45"/></condition><then pos:line="17" pos:column="45"> <block pos:line="17" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">debugs<pos:position pos:line="18" pos:column="19"/></name> <argument_list pos:line="18" pos:column="20">(<argument><expr><literal type="number" pos:line="18" pos:column="21">47<pos:position pos:line="18" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="25">DBG_IMPORTANT<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="40">"Skipping existing Rock db: "<pos:position pos:line="18" pos:column="69"/></literal> <operator pos:line="18" pos:column="70">&lt;&lt;<pos:position pos:line="18" pos:column="78"/></operator> <name pos:line="18" pos:column="73">filePath<pos:position pos:line="18" pos:column="81"/></name></expr></argument>)<pos:position pos:line="18" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="83"/></expr_stmt>
            <return pos:line="19" pos:column="13">return;<pos:position pos:line="19" pos:column="20"/></return>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="21" pos:column="9">// else the db file is not there or is not accessible, and we will try</comment>
        <comment type="line" pos:line="22" pos:column="9">// to create it later below, generating a detailed error on failures.</comment>
    }<pos:position pos:line="23" pos:column="6"/></block></then> <else pos:line="23" pos:column="7">else <block pos:line="23" pos:column="12">{ <comment type="line" pos:line="23" pos:column="14">// path does not exist or is inaccessible</comment>
        <comment type="line" pos:line="24" pos:column="9">// If path exists but is not accessible, mkdir() below will fail, and</comment>
        <comment type="line" pos:line="25" pos:column="9">// the admin should see the error and act accordingly, so there is</comment>
        <comment type="line" pos:line="26" pos:column="9">// no need to distinguish ENOENT from other possible stat() errors.</comment>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name> <argument_list pos:line="27" pos:column="16">(<argument><expr><literal type="number" pos:line="27" pos:column="17">47<pos:position pos:line="27" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="21">DBG_IMPORTANT<pos:position pos:line="27" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="36">"Creating Rock db directory: "<pos:position pos:line="27" pos:column="66"/></literal> <operator pos:line="27" pos:column="67">&lt;&lt;<pos:position pos:line="27" pos:column="75"/></operator> <name pos:line="27" pos:column="70">path<pos:position pos:line="27" pos:column="74"/></name></expr></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="76"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">const<pos:position pos:line="28" pos:column="14"/></specifier> <name pos:line="28" pos:column="15">int<pos:position pos:line="28" pos:column="18"/></name></type> <name pos:line="28" pos:column="19">res<pos:position pos:line="28" pos:column="22"/></name> <init pos:line="28" pos:column="23">= <expr><call><name pos:line="28" pos:column="25">mkdir<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">path<pos:position pos:line="28" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="37">0700<pos:position pos:line="28" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="43"/></decl_stmt>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">res<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">!=<pos:position pos:line="29" pos:column="19"/></operator> <literal type="number" pos:line="29" pos:column="20">0<pos:position pos:line="29" pos:column="21"/></literal></expr>)<pos:position pos:line="29" pos:column="22"/></condition><then pos:line="29" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="13">createError<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><literal type="string" pos:line="30" pos:column="25">"mkdir"<pos:position pos:line="30" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">debugs<pos:position pos:line="33" pos:column="11"/></name> <argument_list pos:line="33" pos:column="12">(<argument><expr><literal type="number" pos:line="33" pos:column="13">47<pos:position pos:line="33" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="17">DBG_IMPORTANT<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="32">"Creating Rock db: "<pos:position pos:line="33" pos:column="52"/></literal> <operator pos:line="33" pos:column="53">&lt;&lt;<pos:position pos:line="33" pos:column="61"/></operator> <name pos:line="33" pos:column="56">filePath<pos:position pos:line="33" pos:column="64"/></name></expr></argument>)<pos:position pos:line="33" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="66"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="34" pos:column="5">const<pos:position pos:line="34" pos:column="10"/></specifier> <name pos:line="34" pos:column="11">int<pos:position pos:line="34" pos:column="14"/></name></type> <name pos:line="34" pos:column="15">swap<pos:position pos:line="34" pos:column="19"/></name> <init pos:line="34" pos:column="20">= <expr><call><name pos:line="34" pos:column="22">open<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">filePath<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">O_WRONLY<pos:position pos:line="34" pos:column="45"/></name><operator pos:line="34" pos:column="45">|<pos:position pos:line="34" pos:column="46"/></operator><name pos:line="34" pos:column="46">O_CREAT<pos:position pos:line="34" pos:column="53"/></name><operator pos:line="34" pos:column="53">|<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="54">O_TRUNC<pos:position pos:line="34" pos:column="61"/></name><operator pos:line="34" pos:column="61">|<pos:position pos:line="34" pos:column="62"/></operator><name pos:line="34" pos:column="62">O_BINARY<pos:position pos:line="34" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="72">0600<pos:position pos:line="34" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="78"/></decl_stmt>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">swap<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">&lt;<pos:position pos:line="35" pos:column="18"/></operator> <literal type="number" pos:line="35" pos:column="16">0<pos:position pos:line="35" pos:column="17"/></literal></expr>)<pos:position pos:line="35" pos:column="18"/></condition><then pos:line="35" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="9">createError<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><literal type="string" pos:line="36" pos:column="21">"create"<pos:position pos:line="36" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt></block></then></if>

<cpp:if pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">if<pos:position pos:line="38" pos:column="4"/></cpp:directive> <expr><name pos:line="38" pos:column="5">SLOWLY_FILL_WITH_ZEROS<pos:position pos:line="38" pos:column="27"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="39" pos:column="5">char<pos:position pos:line="39" pos:column="9"/></name></type> <name><name pos:line="39" pos:column="10">block<pos:position pos:line="39" pos:column="15"/></name><index pos:line="39" pos:column="15">[<expr><literal type="number" pos:line="39" pos:column="16">1024<pos:position pos:line="39" pos:column="20"/></literal></expr>]<pos:position pos:line="39" pos:column="21"/></index></name></decl>;<pos:position pos:line="39" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">Must<pos:position pos:line="40" pos:column="9"/></name><argument_list pos:line="40" pos:column="9">(<argument><expr><call><name pos:line="40" pos:column="10">maxSize<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">()<pos:position pos:line="40" pos:column="19"/></argument_list></call> <operator pos:line="40" pos:column="20">%<pos:position pos:line="40" pos:column="21"/></operator> <sizeof pos:line="40" pos:column="22">sizeof<argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">block<pos:position pos:line="40" pos:column="34"/></name></expr></argument>)<pos:position pos:line="40" pos:column="35"/></argument_list></sizeof> <operator pos:line="40" pos:column="36">==<pos:position pos:line="40" pos:column="38"/></operator> <literal type="number" pos:line="40" pos:column="39">0<pos:position pos:line="40" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">memset<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><name pos:line="41" pos:column="12">block<pos:position pos:line="41" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="19">'\0'<pos:position pos:line="41" pos:column="23"/></literal></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="25">sizeof<argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">block<pos:position pos:line="41" pos:column="37"/></name></expr></argument>)<pos:position pos:line="41" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>

    <for pos:line="43" pos:column="5">for <control pos:line="43" pos:column="9">(<init><decl><type><name pos:line="43" pos:column="10">off_t<pos:position pos:line="43" pos:column="15"/></name></type> <name pos:line="43" pos:column="16">offset<pos:position pos:line="43" pos:column="22"/></name> <init pos:line="43" pos:column="23">= <expr><literal type="number" pos:line="43" pos:column="25">0<pos:position pos:line="43" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="43" pos:column="27"/></init> <condition><expr><name pos:line="43" pos:column="28">offset<pos:position pos:line="43" pos:column="34"/></name> <operator pos:line="43" pos:column="35">&lt;<pos:position pos:line="43" pos:column="39"/></operator> <call><name pos:line="43" pos:column="37">maxSize<pos:position pos:line="43" pos:column="44"/></name><argument_list pos:line="43" pos:column="44">()<pos:position pos:line="43" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="47"/></condition> <incr><expr><name pos:line="43" pos:column="48">offset<pos:position pos:line="43" pos:column="54"/></name> <operator pos:line="43" pos:column="55">+=<pos:position pos:line="43" pos:column="57"/></operator> <sizeof pos:line="43" pos:column="58">sizeof<argument_list pos:line="43" pos:column="64">(<argument><expr><name pos:line="43" pos:column="65">block<pos:position pos:line="43" pos:column="70"/></name></expr></argument>)<pos:position pos:line="43" pos:column="71"/></argument_list></sizeof></expr></incr>)<pos:position pos:line="43" pos:column="72"/></control> <block pos:line="43" pos:column="73">{
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">write<pos:position pos:line="44" pos:column="18"/></name><argument_list pos:line="44" pos:column="18">(<argument><expr><name pos:line="44" pos:column="19">swap<pos:position pos:line="44" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="25">block<pos:position pos:line="44" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="32">sizeof<argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">block<pos:position pos:line="44" pos:column="44"/></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call> <operator pos:line="44" pos:column="47">!=<pos:position pos:line="44" pos:column="49"/></operator> <sizeof pos:line="44" pos:column="50">sizeof<argument_list pos:line="44" pos:column="56">(<argument><expr><name pos:line="44" pos:column="57">block<pos:position pos:line="44" pos:column="62"/></name></expr></argument>)<pos:position pos:line="44" pos:column="63"/></argument_list></sizeof></expr>)<pos:position pos:line="44" pos:column="64"/></condition><then pos:line="44" pos:column="64">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="45" pos:column="13">createError<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><literal type="string" pos:line="45" pos:column="25">"write"<pos:position pos:line="45" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="34"/></expr_stmt></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></for>
<cpp:else pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">else<pos:position pos:line="47" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><call><name pos:line="48" pos:column="9">ftruncate<pos:position pos:line="48" pos:column="18"/></name><argument_list pos:line="48" pos:column="18">(<argument><expr><name pos:line="48" pos:column="19">swap<pos:position pos:line="48" pos:column="23"/></name></expr></argument>, <argument><expr><call><name pos:line="48" pos:column="25">maxSize<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">()<pos:position pos:line="48" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="35"/></argument_list></call> <operator pos:line="48" pos:column="36">!=<pos:position pos:line="48" pos:column="38"/></operator> <literal type="number" pos:line="48" pos:column="39">0<pos:position pos:line="48" pos:column="40"/></literal></expr>)<pos:position pos:line="48" pos:column="41"/></condition><then pos:line="48" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="9">createError<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><literal type="string" pos:line="49" pos:column="21">"truncate"<pos:position pos:line="49" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="51" pos:column="5">char<pos:position pos:line="51" pos:column="9"/></name></type> <name><name pos:line="51" pos:column="10">header<pos:position pos:line="51" pos:column="16"/></name><index pos:line="51" pos:column="16">[<expr><name pos:line="51" pos:column="17">HeaderSize<pos:position pos:line="51" pos:column="27"/></name></expr>]<pos:position pos:line="51" pos:column="28"/></index></name></decl>;<pos:position pos:line="51" pos:column="29"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">memset<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><name pos:line="52" pos:column="12">header<pos:position pos:line="52" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="52" pos:column="20">'\0'<pos:position pos:line="52" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="26">sizeof<argument_list pos:line="52" pos:column="32">(<argument><expr><name pos:line="52" pos:column="33">header<pos:position pos:line="52" pos:column="39"/></name></expr></argument>)<pos:position pos:line="52" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><call><name pos:line="53" pos:column="9">write<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">swap<pos:position pos:line="53" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="21">header<pos:position pos:line="53" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="29">sizeof<argument_list pos:line="53" pos:column="35">(<argument><expr><name pos:line="53" pos:column="36">header<pos:position pos:line="53" pos:column="42"/></name></expr></argument>)<pos:position pos:line="53" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="44"/></argument_list></call> <operator pos:line="53" pos:column="45">!=<pos:position pos:line="53" pos:column="47"/></operator> <sizeof pos:line="53" pos:column="48">sizeof<argument_list pos:line="53" pos:column="54">(<argument><expr><name pos:line="53" pos:column="55">header<pos:position pos:line="53" pos:column="61"/></name></expr></argument>)<pos:position pos:line="53" pos:column="62"/></argument_list></sizeof></expr>)<pos:position pos:line="53" pos:column="63"/></condition><then pos:line="53" pos:column="63">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="9">createError<pos:position pos:line="54" pos:column="20"/></name><argument_list pos:line="54" pos:column="20">(<argument><expr><literal type="string" pos:line="54" pos:column="21">"write"<pos:position pos:line="54" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="30"/></expr_stmt></block></then></if>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="57" pos:column="5">close<pos:position pos:line="57" pos:column="10"/></name><argument_list pos:line="57" pos:column="10">(<argument><expr><name pos:line="57" pos:column="11">swap<pos:position pos:line="57" pos:column="15"/></name></expr></argument>)<pos:position pos:line="57" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="17"/></expr_stmt>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
