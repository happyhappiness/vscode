<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6250_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">DiskThreadsIOStrategy<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">callback<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">()<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">squidaio_result_t<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">resultp<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">squidaio_ctrl_t<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">ctrlp<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">retval<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">initialised<pos:position pos:line="8" pos:column="23"/></name></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="9" pos:column="5">++<pos:position pos:line="9" pos:column="7"/></operator><name><name pos:line="9" pos:column="7">squidaio_counts<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">.<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">check_callback<pos:position pos:line="9" pos:column="37"/></name></name></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>

    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init pos:line="11" pos:column="10">;<pos:position pos:line="11" pos:column="11"/></init><condition pos:line="11" pos:column="11">;<pos:position pos:line="11" pos:column="12"/></condition><incr/>)<pos:position pos:line="11" pos:column="13"/></control> <block pos:line="11" pos:column="14">{
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">resultp<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <call><name pos:line="12" pos:column="24">squidaio_poll_done<pos:position pos:line="12" pos:column="42"/></name><argument_list pos:line="12" pos:column="42">()<pos:position pos:line="12" pos:column="44"/></argument_list></call><operator pos:line="12" pos:column="44">)<pos:position pos:line="12" pos:column="45"/></operator> <operator pos:line="12" pos:column="46">==<pos:position pos:line="12" pos:column="48"/></operator> <name pos:line="12" pos:column="49">NULL<pos:position pos:line="12" pos:column="53"/></name></expr>)<pos:position pos:line="12" pos:column="54"/></condition><then pos:line="12" pos:column="54">
            <block type="pseudo"><break pos:line="13" pos:column="13">break;<pos:position pos:line="13" pos:column="19"/></break></block></then></if>

        <expr_stmt><expr><name pos:line="15" pos:column="9">ctrlp<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <operator pos:line="15" pos:column="17">(<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">squidaio_ctrl_t<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">*<pos:position pos:line="15" pos:column="35"/></operator><operator pos:line="15" pos:column="35">)<pos:position pos:line="15" pos:column="36"/></operator> <name><name pos:line="15" pos:column="37">resultp<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">-&gt;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="46">data<pos:position pos:line="15" pos:column="50"/></name></name></expr>;<pos:position pos:line="15" pos:column="51"/></expr_stmt>

        <switch pos:line="17" pos:column="9">switch <condition pos:line="17" pos:column="16">(<expr><name><name pos:line="17" pos:column="17">resultp<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">-&gt;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="26">result_type<pos:position pos:line="17" pos:column="37"/></name></name></expr>)<pos:position pos:line="17" pos:column="38"/></condition> <block pos:line="17" pos:column="39">{

        <case pos:line="19" pos:column="9">case <expr><name pos:line="19" pos:column="14">_AIO_OP_NONE<pos:position pos:line="19" pos:column="26"/></name></expr>:<pos:position pos:line="19" pos:column="27"/></case>

        <case pos:line="21" pos:column="9">case <expr><name pos:line="21" pos:column="14">_AIO_OP_OPENDIR<pos:position pos:line="21" pos:column="29"/></name></expr>:<pos:position pos:line="21" pos:column="30"/></case>
            <break pos:line="22" pos:column="13">break;<pos:position pos:line="22" pos:column="19"/></break>

        <case pos:line="24" pos:column="9">case <expr><name pos:line="24" pos:column="14">_AIO_OP_OPEN<pos:position pos:line="24" pos:column="26"/></name></expr>:<pos:position pos:line="24" pos:column="27"/></case>
            <expr_stmt><expr><operator pos:line="25" pos:column="13">++<pos:position pos:line="25" pos:column="15"/></operator><name><name pos:line="25" pos:column="15">squidaio_counts<pos:position pos:line="25" pos:column="30"/></name><operator pos:line="25" pos:column="30">.<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">open_finish<pos:position pos:line="25" pos:column="42"/></name></name></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
            <break pos:line="26" pos:column="13">break;<pos:position pos:line="26" pos:column="19"/></break>

        <case pos:line="28" pos:column="9">case <expr><name pos:line="28" pos:column="14">_AIO_OP_READ<pos:position pos:line="28" pos:column="26"/></name></expr>:<pos:position pos:line="28" pos:column="27"/></case>
            <expr_stmt><expr><operator pos:line="29" pos:column="13">++<pos:position pos:line="29" pos:column="15"/></operator><name><name pos:line="29" pos:column="15">squidaio_counts<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">.<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="31">read_finish<pos:position pos:line="29" pos:column="42"/></name></name></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
            <break pos:line="30" pos:column="13">break;<pos:position pos:line="30" pos:column="19"/></break>

        <case pos:line="32" pos:column="9">case <expr><name pos:line="32" pos:column="14">_AIO_OP_WRITE<pos:position pos:line="32" pos:column="27"/></name></expr>:<pos:position pos:line="32" pos:column="28"/></case>
            <expr_stmt><expr><operator pos:line="33" pos:column="13">++<pos:position pos:line="33" pos:column="15"/></operator><name><name pos:line="33" pos:column="15">squidaio_counts<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">.<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="31">write_finish<pos:position pos:line="33" pos:column="43"/></name></name></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
            <break pos:line="34" pos:column="13">break;<pos:position pos:line="34" pos:column="19"/></break>

        <case pos:line="36" pos:column="9">case <expr><name pos:line="36" pos:column="14">_AIO_OP_CLOSE<pos:position pos:line="36" pos:column="27"/></name></expr>:<pos:position pos:line="36" pos:column="28"/></case>
            <expr_stmt><expr><operator pos:line="37" pos:column="13">++<pos:position pos:line="37" pos:column="15"/></operator><name><name pos:line="37" pos:column="15">squidaio_counts<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">.<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="31">close_finish<pos:position pos:line="37" pos:column="43"/></name></name></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
            <break pos:line="38" pos:column="13">break;<pos:position pos:line="38" pos:column="19"/></break>

        <case pos:line="40" pos:column="9">case <expr><name pos:line="40" pos:column="14">_AIO_OP_UNLINK<pos:position pos:line="40" pos:column="28"/></name></expr>:<pos:position pos:line="40" pos:column="29"/></case>
            <expr_stmt><expr><operator pos:line="41" pos:column="13">++<pos:position pos:line="41" pos:column="15"/></operator><name><name pos:line="41" pos:column="15">squidaio_counts<pos:position pos:line="41" pos:column="30"/></name><operator pos:line="41" pos:column="30">.<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="31">unlink_finish<pos:position pos:line="41" pos:column="44"/></name></name></expr>;<pos:position pos:line="41" pos:column="45"/></expr_stmt>
            <break pos:line="42" pos:column="13">break;<pos:position pos:line="42" pos:column="19"/></break>

        <case pos:line="44" pos:column="9">case <expr><name pos:line="44" pos:column="14">_AIO_OP_STAT<pos:position pos:line="44" pos:column="26"/></name></expr>:<pos:position pos:line="44" pos:column="27"/></case>
            <expr_stmt><expr><operator pos:line="45" pos:column="13">++<pos:position pos:line="45" pos:column="15"/></operator><name><name pos:line="45" pos:column="15">squidaio_counts<pos:position pos:line="45" pos:column="30"/></name><operator pos:line="45" pos:column="30">.<pos:position pos:line="45" pos:column="31"/></operator><name pos:line="45" pos:column="31">stat_finish<pos:position pos:line="45" pos:column="42"/></name></name></expr>;<pos:position pos:line="45" pos:column="43"/></expr_stmt>
            <break pos:line="46" pos:column="13">break;<pos:position pos:line="46" pos:column="19"/></break>
        }<pos:position pos:line="47" pos:column="10"/></block></switch>

        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">ctrlp<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">==<pos:position pos:line="49" pos:column="21"/></operator> <name pos:line="49" pos:column="22">NULL<pos:position pos:line="49" pos:column="26"/></name></expr>)<pos:position pos:line="49" pos:column="27"/></condition><then pos:line="49" pos:column="27">
            <block type="pseudo"><continue pos:line="50" pos:column="13">continue;<pos:position pos:line="50" pos:column="22"/></continue></block></then></if>       <comment type="block" pos:line="50" pos:column="29">/* XXX Should not happen */</comment>

        <expr_stmt><expr><call><name pos:line="52" pos:column="9">dlinkDelete<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><operator pos:line="52" pos:column="21">&amp;<pos:position pos:line="52" pos:column="26"/></operator><name><name pos:line="52" pos:column="22">ctrlp<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">node<pos:position pos:line="52" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="35">&amp;<pos:position pos:line="52" pos:column="40"/></operator><name pos:line="52" pos:column="36">used_list<pos:position pos:line="52" pos:column="45"/></name></expr></argument>)<pos:position pos:line="52" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt>

        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name><name pos:line="54" pos:column="13">ctrlp<pos:position pos:line="54" pos:column="18"/></name><operator pos:line="54" pos:column="18">-&gt;<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="20">done_handler<pos:position pos:line="54" pos:column="32"/></name></name></expr>)<pos:position pos:line="54" pos:column="33"/></condition><then pos:line="54" pos:column="33"> <block pos:line="54" pos:column="34">{
            <decl_stmt><decl><type><name pos:line="55" pos:column="13">AIOCB<pos:position pos:line="55" pos:column="18"/></name> <modifier pos:line="55" pos:column="19">*<pos:position pos:line="55" pos:column="20"/></modifier></type><name pos:line="55" pos:column="20">done_callback<pos:position pos:line="55" pos:column="33"/></name> <init pos:line="55" pos:column="34">= <expr><name><name pos:line="55" pos:column="36">ctrlp<pos:position pos:line="55" pos:column="41"/></name><operator pos:line="55" pos:column="41">-&gt;<pos:position pos:line="55" pos:column="46"/></operator><name pos:line="55" pos:column="43">done_handler<pos:position pos:line="55" pos:column="55"/></name></name></expr></init></decl>;<pos:position pos:line="55" pos:column="56"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">void<pos:position pos:line="56" pos:column="17"/></name> <modifier pos:line="56" pos:column="18">*<pos:position pos:line="56" pos:column="19"/></modifier></type><name pos:line="56" pos:column="19">cbdata<pos:position pos:line="56" pos:column="25"/></name></decl>;<pos:position pos:line="56" pos:column="26"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="57" pos:column="13">ctrlp<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">-&gt;<pos:position pos:line="57" pos:column="23"/></operator><name pos:line="57" pos:column="20">done_handler<pos:position pos:line="57" pos:column="32"/></name></name> <operator pos:line="57" pos:column="33">=<pos:position pos:line="57" pos:column="34"/></operator> <name pos:line="57" pos:column="35">NULL<pos:position pos:line="57" pos:column="39"/></name></expr>;<pos:position pos:line="57" pos:column="40"/></expr_stmt>

            <if pos:line="59" pos:column="13">if <condition pos:line="59" pos:column="16">(<expr><call><name pos:line="59" pos:column="17">cbdataReferenceValidDone<pos:position pos:line="59" pos:column="41"/></name><argument_list pos:line="59" pos:column="41">(<argument><expr><name><name pos:line="59" pos:column="42">ctrlp<pos:position pos:line="59" pos:column="47"/></name><operator pos:line="59" pos:column="47">-&gt;<pos:position pos:line="59" pos:column="52"/></operator><name pos:line="59" pos:column="49">done_handler_data<pos:position pos:line="59" pos:column="66"/></name></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="68">&amp;<pos:position pos:line="59" pos:column="73"/></operator><name pos:line="59" pos:column="69">cbdata<pos:position pos:line="59" pos:column="75"/></name></expr></argument>)<pos:position pos:line="59" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="77"/></condition><then pos:line="59" pos:column="77"> <block pos:line="59" pos:column="78">{
                <expr_stmt><expr><name pos:line="60" pos:column="17">retval<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">=<pos:position pos:line="60" pos:column="25"/></operator> <literal type="number" pos:line="60" pos:column="26">1<pos:position pos:line="60" pos:column="27"/></literal></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt> <comment type="block" pos:line="60" pos:column="29">/* Return that we've actually done some work */</comment>
                <expr_stmt><expr><call><name pos:line="61" pos:column="17">done_callback<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><name><name pos:line="61" pos:column="31">ctrlp<pos:position pos:line="61" pos:column="36"/></name><operator pos:line="61" pos:column="36">-&gt;<pos:position pos:line="61" pos:column="41"/></operator><name pos:line="61" pos:column="38">fd<pos:position pos:line="61" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="42">cbdata<pos:position pos:line="61" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="50">ctrlp<pos:position pos:line="61" pos:column="55"/></name><operator pos:line="61" pos:column="55">-&gt;<pos:position pos:line="61" pos:column="60"/></operator><name pos:line="61" pos:column="57">bufp<pos:position pos:line="61" pos:column="61"/></name></name></expr></argument>,
                              <argument><expr><name><name pos:line="62" pos:column="31">ctrlp<pos:position pos:line="62" pos:column="36"/></name><operator pos:line="62" pos:column="36">-&gt;<pos:position pos:line="62" pos:column="41"/></operator><name pos:line="62" pos:column="38">result<pos:position pos:line="62" pos:column="44"/></name><operator pos:line="62" pos:column="44">.<pos:position pos:line="62" pos:column="45"/></operator><name pos:line="62" pos:column="45">aio_return<pos:position pos:line="62" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="57">ctrlp<pos:position pos:line="62" pos:column="62"/></name><operator pos:line="62" pos:column="62">-&gt;<pos:position pos:line="62" pos:column="67"/></operator><name pos:line="62" pos:column="64">result<pos:position pos:line="62" pos:column="70"/></name><operator pos:line="62" pos:column="70">.<pos:position pos:line="62" pos:column="71"/></operator><name pos:line="62" pos:column="71">aio_errno<pos:position pos:line="62" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="82"/></expr_stmt>
            }<pos:position pos:line="63" pos:column="14"/></block></then> <else pos:line="63" pos:column="15">else <block pos:line="63" pos:column="20">{
                <if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name><name pos:line="64" pos:column="21">ctrlp<pos:position pos:line="64" pos:column="26"/></name><operator pos:line="64" pos:column="26">-&gt;<pos:position pos:line="64" pos:column="31"/></operator><name pos:line="64" pos:column="28">operation<pos:position pos:line="64" pos:column="37"/></name></name> <operator pos:line="64" pos:column="38">==<pos:position pos:line="64" pos:column="40"/></operator> <name pos:line="64" pos:column="41">_AIO_OPEN<pos:position pos:line="64" pos:column="50"/></name></expr>)<pos:position pos:line="64" pos:column="51"/></condition><then pos:line="64" pos:column="51"> <block pos:line="64" pos:column="52">{
                    <comment type="block" pos:line="65" pos:column="21">/* The open operation was aborted.. */</comment>
                    <decl_stmt><decl><type><name pos:line="66" pos:column="21">int<pos:position pos:line="66" pos:column="24"/></name></type> <name pos:line="66" pos:column="25">fd<pos:position pos:line="66" pos:column="27"/></name> <init pos:line="66" pos:column="28">= <expr><name><name pos:line="66" pos:column="30">ctrlp<pos:position pos:line="66" pos:column="35"/></name><operator pos:line="66" pos:column="35">-&gt;<pos:position pos:line="66" pos:column="40"/></operator><name pos:line="66" pos:column="37">result<pos:position pos:line="66" pos:column="43"/></name><operator pos:line="66" pos:column="43">.<pos:position pos:line="66" pos:column="44"/></operator><name pos:line="66" pos:column="44">aio_return<pos:position pos:line="66" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="66" pos:column="55"/></decl_stmt>

                    <if pos:line="68" pos:column="21">if <condition pos:line="68" pos:column="24">(<expr><name pos:line="68" pos:column="25">fd<pos:position pos:line="68" pos:column="27"/></name> <operator pos:line="68" pos:column="28">&gt;=<pos:position pos:line="68" pos:column="33"/></operator> <literal type="number" pos:line="68" pos:column="31">0<pos:position pos:line="68" pos:column="32"/></literal></expr>)<pos:position pos:line="68" pos:column="33"/></condition><then pos:line="68" pos:column="33">
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="25">aioClose<pos:position pos:line="69" pos:column="33"/></name><argument_list pos:line="69" pos:column="33">(<argument><expr><name pos:line="69" pos:column="34">fd<pos:position pos:line="69" pos:column="36"/></name></expr></argument>)<pos:position pos:line="69" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="38"/></expr_stmt></block></then></if>
                }<pos:position pos:line="70" pos:column="18"/></block></then></if>
            }<pos:position pos:line="71" pos:column="14"/></block></else></if>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="74" pos:column="9">/* free data if requested to aioWrite() */</comment>
        <if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name><name pos:line="75" pos:column="13">ctrlp<pos:position pos:line="75" pos:column="18"/></name><operator pos:line="75" pos:column="18">-&gt;<pos:position pos:line="75" pos:column="23"/></operator><name pos:line="75" pos:column="20">free_func<pos:position pos:line="75" pos:column="29"/></name></name></expr>)<pos:position pos:line="75" pos:column="30"/></condition><then pos:line="75" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="76" pos:column="13">ctrlp<pos:position pos:line="76" pos:column="18"/></name><operator pos:line="76" pos:column="18">-&gt;<pos:position pos:line="76" pos:column="23"/></operator><name pos:line="76" pos:column="20">free_func<pos:position pos:line="76" pos:column="29"/></name></name><argument_list pos:line="76" pos:column="29">(<argument><expr><name><name pos:line="76" pos:column="30">ctrlp<pos:position pos:line="76" pos:column="35"/></name><operator pos:line="76" pos:column="35">-&gt;<pos:position pos:line="76" pos:column="40"/></operator><name pos:line="76" pos:column="37">bufp<pos:position pos:line="76" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="43"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="78" pos:column="9">/* free temporary read buffer */</comment>
        <if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name><name pos:line="79" pos:column="13">ctrlp<pos:position pos:line="79" pos:column="18"/></name><operator pos:line="79" pos:column="18">-&gt;<pos:position pos:line="79" pos:column="23"/></operator><name pos:line="79" pos:column="20">operation<pos:position pos:line="79" pos:column="29"/></name></name> <operator pos:line="79" pos:column="30">==<pos:position pos:line="79" pos:column="32"/></operator> <name pos:line="79" pos:column="33">_AIO_READ<pos:position pos:line="79" pos:column="42"/></name></expr>)<pos:position pos:line="79" pos:column="43"/></condition><then pos:line="79" pos:column="43">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="80" pos:column="13">squidaio_xfree<pos:position pos:line="80" pos:column="27"/></name><argument_list pos:line="80" pos:column="27">(<argument><expr><name><name pos:line="80" pos:column="28">ctrlp<pos:position pos:line="80" pos:column="33"/></name><operator pos:line="80" pos:column="33">-&gt;<pos:position pos:line="80" pos:column="38"/></operator><name pos:line="80" pos:column="35">bufp<pos:position pos:line="80" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="41">ctrlp<pos:position pos:line="80" pos:column="46"/></name><operator pos:line="80" pos:column="46">-&gt;<pos:position pos:line="80" pos:column="51"/></operator><name pos:line="80" pos:column="48">len<pos:position pos:line="80" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="53"/></expr_stmt></block></then></if>

        <expr_stmt><expr><operator pos:line="82" pos:column="9">delete<pos:position pos:line="82" pos:column="15"/></operator> <name pos:line="82" pos:column="16">ctrlp<pos:position pos:line="82" pos:column="21"/></name></expr>;<pos:position pos:line="82" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></for>

    <return pos:line="85" pos:column="5">return <expr><name pos:line="85" pos:column="12">retval<pos:position pos:line="85" pos:column="18"/></name></expr>;<pos:position pos:line="85" pos:column="19"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
