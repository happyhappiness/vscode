<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2589_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">cache_key<pos:position pos:line="1" pos:column="16"/></name> <modifier pos:line="1" pos:column="17">*<pos:position pos:line="1" pos:column="18"/></modifier></type>
<name pos:line="2" pos:column="1">storeKeyPrivate<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">()<pos:position pos:line="2" pos:column="18"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// only the count field is required</comment>
    <comment type="line" pos:line="5" pos:column="5">// others just simplify searching for keys in a multi-process cache.log</comment>
    <struct><specifier pos:line="6" pos:column="5">static<pos:position pos:line="6" pos:column="11"/></specifier> struct <block pos:line="6" pos:column="19">{<public type="default" pos:line="6" pos:column="20">
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">uint64_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">count<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">pid_t<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">pid<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">int32_t<pos:position pos:line="9" pos:column="16"/></name></type> <name pos:line="9" pos:column="17">kid<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
    <pos:position pos:line="10" pos:column="5"/></public>}<pos:position pos:line="10" pos:column="6"/></block> <decl><name pos:line="10" pos:column="7">key<pos:position pos:line="10" pos:column="10"/></name> <init pos:line="10" pos:column="11">= <expr><block pos:line="10" pos:column="13">{ <expr><literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr>, <expr><call><name pos:line="10" pos:column="18">getpid<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">()<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>, <expr><name pos:line="10" pos:column="28">KidIdentifier<pos:position pos:line="10" pos:column="41"/></name></expr> }<pos:position pos:line="10" pos:column="43"/></block></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></struct>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><sizeof pos:line="11" pos:column="12">sizeof<argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">key<pos:position pos:line="11" pos:column="22"/></name></expr></argument>)<pos:position pos:line="11" pos:column="23"/></argument_list></sizeof> <operator pos:line="11" pos:column="24">==<pos:position pos:line="11" pos:column="26"/></operator> <name pos:line="11" pos:column="27">SQUID_MD5_DIGEST_LENGTH<pos:position pos:line="11" pos:column="50"/></name></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="12" pos:column="5">++<pos:position pos:line="12" pos:column="7"/></operator><name><name pos:line="12" pos:column="7">key<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">.<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">count<pos:position pos:line="12" pos:column="16"/></name></name></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><cast type="reinterpret" pos:line="13" pos:column="12">reinterpret_cast<argument_list type="generic" pos:line="13" pos:column="28">&lt;<argument><expr><name pos:line="13" pos:column="29">cache_key<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">*<pos:position pos:line="13" pos:column="39"/></operator></expr></argument>&gt;<pos:position pos:line="13" pos:column="43"/></argument_list><argument_list pos:line="13" pos:column="40">(<argument><expr><operator pos:line="13" pos:column="41">&amp;<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="42">key<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></cast></expr>;<pos:position pos:line="13" pos:column="47"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
