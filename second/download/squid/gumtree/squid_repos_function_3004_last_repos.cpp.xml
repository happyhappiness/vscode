<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3004_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">clientSocketRecipient<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">clientStreamNode<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type> <name pos:line="2" pos:column="42">node<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">ClientHttpRequest<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type> <name pos:line="2" pos:column="68">http<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>,
                      <parameter><decl><type><name pos:line="3" pos:column="23">HttpReply<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type> <name pos:line="3" pos:column="35">rep<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="40">StoreIOBuffer<pos:position pos:line="3" pos:column="53"/></name></type> <name pos:line="3" pos:column="54">receivedData<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="67"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <comment type="line" pos:line="5" pos:column="5">// dont tryt to deliver if client already ABORTED</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">http<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">getConn<pos:position pos:line="6" pos:column="23"/></name></name><argument_list pos:line="6" pos:column="23">()<pos:position pos:line="6" pos:column="25"/></argument_list></call> <operator pos:line="6" pos:column="26">||<pos:position pos:line="6" pos:column="28"/></operator> <operator pos:line="6" pos:column="29">!<pos:position pos:line="6" pos:column="30"/></operator><call><name pos:line="6" pos:column="30">cbdataReferenceValid<pos:position pos:line="6" pos:column="50"/></name><argument_list pos:line="6" pos:column="50">(<argument><expr><call><name><name pos:line="6" pos:column="51">http<pos:position pos:line="6" pos:column="55"/></name><operator pos:line="6" pos:column="55">-&gt;<pos:position pos:line="6" pos:column="60"/></operator><name pos:line="6" pos:column="57">getConn<pos:position pos:line="6" pos:column="64"/></name></name><argument_list pos:line="6" pos:column="64">()<pos:position pos:line="6" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call> <operator pos:line="6" pos:column="68">||<pos:position pos:line="6" pos:column="70"/></operator> <operator pos:line="6" pos:column="71">!<pos:position pos:line="6" pos:column="72"/></operator><call><name><name pos:line="6" pos:column="72">Comm<pos:position pos:line="6" pos:column="76"/></name><operator pos:line="6" pos:column="76">::<pos:position pos:line="6" pos:column="78"/></operator><name pos:line="6" pos:column="78">IsConnOpen<pos:position pos:line="6" pos:column="88"/></name></name><argument_list pos:line="6" pos:column="88">(<argument><expr><call><name><name pos:line="6" pos:column="89">http<pos:position pos:line="6" pos:column="93"/></name><operator pos:line="6" pos:column="93">-&gt;<pos:position pos:line="6" pos:column="98"/></operator><name pos:line="6" pos:column="95">getConn<pos:position pos:line="6" pos:column="102"/></name></name><argument_list pos:line="6" pos:column="102">()<pos:position pos:line="6" pos:column="104"/></argument_list></call><operator pos:line="6" pos:column="104">-&gt;<pos:position pos:line="6" pos:column="109"/></operator><name pos:line="6" pos:column="106">clientConnection<pos:position pos:line="6" pos:column="122"/></name></expr></argument>)<pos:position pos:line="6" pos:column="123"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="124"/></condition><then pos:line="6" pos:column="124">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="9" pos:column="5">/* Test preconditions */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">node<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">!=<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">NULL<pos:position pos:line="10" pos:column="24"/></name></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">PROF_start<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">clientSocketRecipient<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
    <comment type="block" pos:line="12" pos:column="5">/* TODO: handle this rather than asserting
     * - it should only ever happen if we cause an abort and
     * the callback chain loops back to here, so we can simply return.
     * However, that itself shouldn't happen, so it stays as an assert for now.
     */</comment>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">assert<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><call><name pos:line="17" pos:column="12">cbdataReferenceValid<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">node<pos:position pos:line="17" pos:column="37"/></name></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name><name pos:line="18" pos:column="12">node<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">node<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">.<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">next<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">==<pos:position pos:line="18" pos:column="30"/></operator> <name pos:line="18" pos:column="31">NULL<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="19" pos:column="5">Http<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">::<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">StreamPointer<pos:position pos:line="19" pos:column="24"/></name></name></type> <name pos:line="19" pos:column="25">context<pos:position pos:line="19" pos:column="32"/></name> <init pos:line="19" pos:column="33">= <expr><cast type="dynamic" pos:line="19" pos:column="35">dynamic_cast<argument_list type="generic" pos:line="19" pos:column="47">&lt;<argument><expr><name><name pos:line="19" pos:column="48">Http<pos:position pos:line="19" pos:column="52"/></name><operator pos:line="19" pos:column="52">::<pos:position pos:line="19" pos:column="54"/></operator><name pos:line="19" pos:column="54">Stream<pos:position pos:line="19" pos:column="60"/></name></name> <operator pos:line="19" pos:column="61">*<pos:position pos:line="19" pos:column="62"/></operator></expr></argument>&gt;<pos:position pos:line="19" pos:column="66"/></argument_list><argument_list pos:line="19" pos:column="63">(<argument><expr><call><name><name pos:line="19" pos:column="64">node<pos:position pos:line="19" pos:column="68"/></name><operator pos:line="19" pos:column="68">-&gt;<pos:position pos:line="19" pos:column="73"/></operator><name pos:line="19" pos:column="70">data<pos:position pos:line="19" pos:column="74"/></name><operator pos:line="19" pos:column="74">.<pos:position pos:line="19" pos:column="75"/></operator><name pos:line="19" pos:column="75">getRaw<pos:position pos:line="19" pos:column="81"/></name></name><argument_list pos:line="19" pos:column="81">()<pos:position pos:line="19" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="84"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="19" pos:column="85"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">assert<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">context<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">!=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">NULL<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* TODO: check offset is what we asked for */</comment>

    <comment type="line" pos:line="24" pos:column="5">// TODO: enforces HTTP/1 MUST on pipeline order, but is irrelevant to HTTP/2</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">context<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">!=<pos:position pos:line="25" pos:column="19"/></operator> <call><name><name pos:line="25" pos:column="20">http<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">-&gt;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="26">getConn<pos:position pos:line="25" pos:column="33"/></name></name><argument_list pos:line="25" pos:column="33">()<pos:position pos:line="25" pos:column="35"/></argument_list></call><operator pos:line="25" pos:column="35">-&gt;<pos:position pos:line="25" pos:column="40"/></operator><call><name><name pos:line="25" pos:column="37">pipeline<pos:position pos:line="25" pos:column="45"/></name><operator pos:line="25" pos:column="45">.<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="46">front<pos:position pos:line="25" pos:column="51"/></name></name><argument_list pos:line="25" pos:column="51">()<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="54"/></condition><then pos:line="25" pos:column="54">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="26" pos:column="9">context<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">deferRecipientForLater<pos:position pos:line="26" pos:column="40"/></name></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">node<pos:position pos:line="26" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="47">rep<pos:position pos:line="26" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">receivedData<pos:position pos:line="26" pos:column="64"/></name></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="66"/></expr_stmt></block></then>
    <elseif pos:line="27" pos:column="5">else <if pos:line="27" pos:column="10">if <condition pos:line="27" pos:column="13">(<expr><call><name><name pos:line="27" pos:column="14">http<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">-&gt;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="20">getConn<pos:position pos:line="27" pos:column="27"/></name></name><argument_list pos:line="27" pos:column="27">()<pos:position pos:line="27" pos:column="29"/></argument_list></call><operator pos:line="27" pos:column="29">-&gt;<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="31">cbControlMsgSent<pos:position pos:line="27" pos:column="47"/></name></expr>)<pos:position pos:line="27" pos:column="48"/></condition><then pos:line="27" pos:column="48"> <comment type="line" pos:line="27" pos:column="49">// 1xx to the user is pending</comment>
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="28" pos:column="9">context<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">deferRecipientForLater<pos:position pos:line="28" pos:column="40"/></name></name><argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">node<pos:position pos:line="28" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="47">rep<pos:position pos:line="28" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="52">receivedData<pos:position pos:line="28" pos:column="64"/></name></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt></block></then></if></elseif>
    <else pos:line="29" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="30" pos:column="9">http<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">-&gt;<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="15">getConn<pos:position pos:line="30" pos:column="22"/></name></name><argument_list pos:line="30" pos:column="22">()<pos:position pos:line="30" pos:column="24"/></argument_list></call><operator pos:line="30" pos:column="24">-&gt;<pos:position pos:line="30" pos:column="29"/></operator><call><name pos:line="30" pos:column="26">handleReply<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">(<argument><expr><name pos:line="30" pos:column="38">rep<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">receivedData<pos:position pos:line="30" pos:column="55"/></name></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="57"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">PROF_stop<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">clientSocketRecipient<pos:position pos:line="32" pos:column="36"/></name></expr></argument>)<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
