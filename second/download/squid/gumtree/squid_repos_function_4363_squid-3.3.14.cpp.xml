<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4363_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ssl<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">CertificateDb<pos:position pos:line="1" pos:column="24"/></name><operator pos:line="1" pos:column="24">::<pos:position pos:line="1" pos:column="26"/></operator><name pos:line="1" pos:column="26">sq_TXT_DB_delete_row<pos:position pos:line="1" pos:column="46"/></name></name><parameter_list pos:line="1" pos:column="46">(<parameter><decl><type><name pos:line="1" pos:column="47">TXT_DB<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">db<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">idx<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list> <block pos:line="1" pos:column="68">{
    <decl_stmt><decl><type><name pos:line="2" pos:column="5">char<pos:position pos:line="2" pos:column="9"/></name> <modifier pos:line="2" pos:column="10">*<pos:position pos:line="2" pos:column="11"/></modifier><modifier pos:line="2" pos:column="11">*<pos:position pos:line="2" pos:column="12"/></modifier></type><name pos:line="2" pos:column="12">rrow<pos:position pos:line="2" pos:column="16"/></name></decl>;<pos:position pos:line="2" pos:column="17"/></decl_stmt>
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">SQUID_SSLTXTDB_PSTRINGDATA<pos:position pos:line="3" pos:column="31"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="4" pos:column="5">rrow<pos:position pos:line="4" pos:column="9"/></name> <operator pos:line="4" pos:column="10">=<pos:position pos:line="4" pos:column="11"/></operator> <operator pos:line="4" pos:column="12">(<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">char<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></operator><operator pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></operator><operator pos:line="4" pos:column="20">)<pos:position pos:line="4" pos:column="21"/></operator><call><name pos:line="4" pos:column="21">sk_OPENSSL_PSTRING_delete<pos:position pos:line="4" pos:column="46"/></name><argument_list pos:line="4" pos:column="46">(<argument><expr><name><name pos:line="4" pos:column="47">db<pos:position pos:line="4" pos:column="49"/></name><operator pos:line="4" pos:column="49">-&gt;<pos:position pos:line="4" pos:column="54"/></operator><name pos:line="4" pos:column="51">data<pos:position pos:line="4" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="57">idx<pos:position pos:line="4" pos:column="60"/></name></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="62"/></expr_stmt>
<cpp:else pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">else<pos:position pos:line="5" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="6" pos:column="5">rrow<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">=<pos:position pos:line="6" pos:column="11"/></operator> <operator pos:line="6" pos:column="12">(<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="13">char<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></operator><operator pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></operator><operator pos:line="6" pos:column="20">)<pos:position pos:line="6" pos:column="21"/></operator><call><name pos:line="6" pos:column="21">sk_delete<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name><name pos:line="6" pos:column="31">db<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">data<pos:position pos:line="6" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="41">idx<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">rrow<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15">
        <block type="pseudo"><return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">Row<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">row<pos:position pos:line="12" pos:column="12"/></name><argument_list pos:line="12" pos:column="12">(<argument><expr><name pos:line="12" pos:column="13">rrow<pos:position pos:line="12" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="19">cnlNumber<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt> <comment type="line" pos:line="12" pos:column="31">// row wrapper used to free the rrow</comment>

    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">Columns<pos:position pos:line="14" pos:column="18"/></name></type> <name><name pos:line="14" pos:column="19">db_indexes<pos:position pos:line="14" pos:column="29"/></name><index pos:line="14" pos:column="29">[]<pos:position pos:line="14" pos:column="31"/></index></name><init pos:line="14" pos:column="31">=<expr><block pos:line="14" pos:column="32">{<expr><name pos:line="14" pos:column="33">cnlSerial<pos:position pos:line="14" pos:column="42"/></name></expr>, <expr><name pos:line="14" pos:column="44">cnlName<pos:position pos:line="14" pos:column="51"/></name></expr>}<pos:position pos:line="14" pos:column="52"/></block></expr></init></decl>;<pos:position pos:line="14" pos:column="53"/></decl_stmt>
    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init><decl><type><name pos:line="15" pos:column="10">unsigned<pos:position pos:line="15" pos:column="18"/></name> <name pos:line="15" pos:column="19">int<pos:position pos:line="15" pos:column="22"/></name></type> <name pos:line="15" pos:column="23">i<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">= <expr><literal type="number" pos:line="15" pos:column="27">0<pos:position pos:line="15" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="29"/></init> <condition><expr><name pos:line="15" pos:column="30">i<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">&lt;<pos:position pos:line="15" pos:column="36"/></operator> <call><name pos:line="15" pos:column="34">countof<pos:position pos:line="15" pos:column="41"/></name><argument_list pos:line="15" pos:column="41">(<argument><expr><name pos:line="15" pos:column="42">db_indexes<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="54"/></condition> <incr><expr><operator pos:line="15" pos:column="55">++<pos:position pos:line="15" pos:column="57"/></operator><name pos:line="15" pos:column="57">i<pos:position pos:line="15" pos:column="58"/></name></expr></incr>)<pos:position pos:line="15" pos:column="59"/></control> <block pos:line="15" pos:column="60">{
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">void<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">data<pos:position pos:line="16" pos:column="19"/></name> <init pos:line="16" pos:column="20">= <expr><name pos:line="16" pos:column="22">NULL<pos:position pos:line="16" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="27"/></decl_stmt>
<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><name pos:line="17" pos:column="5">SQUID_SSLTXTDB_PSTRINGDATA<pos:position pos:line="17" pos:column="31"/></name></expr></cpp:if>
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><call><name pos:line="18" pos:column="13">LHASH_OF<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">OPENSSL_STRING<pos:position pos:line="18" pos:column="36"/></name></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call> <operator pos:line="18" pos:column="38">*<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="39">fieldIndex<pos:position pos:line="18" pos:column="49"/></name> <operator pos:line="18" pos:column="50">=<pos:position pos:line="18" pos:column="51"/></operator>  <name><name pos:line="18" pos:column="53">db<pos:position pos:line="18" pos:column="55"/></name><operator pos:line="18" pos:column="55">-&gt;<pos:position pos:line="18" pos:column="60"/></operator><name pos:line="18" pos:column="57">index<pos:position pos:line="18" pos:column="62"/></name><index pos:line="18" pos:column="62">[<expr><name><name pos:line="18" pos:column="63">db_indexes<pos:position pos:line="18" pos:column="73"/></name><index pos:line="18" pos:column="73">[<expr><name pos:line="18" pos:column="74">i<pos:position pos:line="18" pos:column="75"/></name></expr>]<pos:position pos:line="18" pos:column="76"/></index></name></expr>]<pos:position pos:line="18" pos:column="77"/></index></name></expr>)<pos:position pos:line="18" pos:column="78"/></condition><then pos:line="18" pos:column="78">
            <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="13">data<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <call><name pos:line="19" pos:column="20">lh_OPENSSL_STRING_delete<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">(<argument><expr><name pos:line="19" pos:column="45">fieldIndex<pos:position pos:line="19" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="57">rrow<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt></block></then></if>
<cpp:else pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">else<pos:position pos:line="20" pos:column="6"/></cpp:directive></cpp:else>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<decl><type><name pos:line="21" pos:column="13">LHASH<pos:position pos:line="21" pos:column="18"/></name> <modifier pos:line="21" pos:column="19">*<pos:position pos:line="21" pos:column="20"/></modifier></type><name pos:line="21" pos:column="20">fieldIndex<pos:position pos:line="21" pos:column="30"/></name> <init pos:line="21" pos:column="31">= <expr><name><name pos:line="21" pos:column="33">db<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">index<pos:position pos:line="21" pos:column="42"/></name><index pos:line="21" pos:column="42">[<expr><name><name pos:line="21" pos:column="43">db_indexes<pos:position pos:line="21" pos:column="53"/></name><index pos:line="21" pos:column="53">[<expr><name pos:line="21" pos:column="54">i<pos:position pos:line="21" pos:column="55"/></name></expr>]<pos:position pos:line="21" pos:column="56"/></index></name></expr>]<pos:position pos:line="21" pos:column="57"/></index></name></expr></init></decl>)<pos:position pos:line="21" pos:column="58"/></condition><then pos:line="21" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="13">data<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <call><name pos:line="22" pos:column="20">lh_delete<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">fieldIndex<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="42">rrow<pos:position pos:line="22" pos:column="46"/></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt></block></then></if>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">data<pos:position pos:line="24" pos:column="17"/></name></expr>)<pos:position pos:line="24" pos:column="18"/></condition><then pos:line="24" pos:column="18">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="13">assert<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><name pos:line="25" pos:column="20">data<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">==<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="28">rrow<pos:position pos:line="25" pos:column="32"/></name></expr></argument>)<pos:position pos:line="25" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt></block></then></if>
    }<pos:position pos:line="26" pos:column="6"/></block></for>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
