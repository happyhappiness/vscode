<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3538_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">getAvailableBufferLength<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">()<pos:position pos:line="2" pos:column="42"/></parameter_list> <specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><name><name pos:line="4" pos:column="13">in<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">.<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">allocatedSize<pos:position pos:line="4" pos:column="29"/></name></name> <operator pos:line="4" pos:column="30">&gt;<pos:position pos:line="4" pos:column="34"/></operator> <name><name pos:line="4" pos:column="32">in<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">.<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">notYetUsed<pos:position pos:line="4" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="47"/></expr_stmt> <comment type="line" pos:line="4" pos:column="48">// allocated more than used</comment>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">size_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">result<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name><name pos:line="5" pos:column="27">in<pos:position pos:line="5" pos:column="29"/></name><operator pos:line="5" pos:column="29">.<pos:position pos:line="5" pos:column="30"/></operator><name pos:line="5" pos:column="30">allocatedSize<pos:position pos:line="5" pos:column="43"/></name></name> <operator pos:line="5" pos:column="44">-<pos:position pos:line="5" pos:column="45"/></operator> <name><name pos:line="5" pos:column="46">in<pos:position pos:line="5" pos:column="48"/></name><operator pos:line="5" pos:column="48">.<pos:position pos:line="5" pos:column="49"/></operator><name pos:line="5" pos:column="49">notYetUsed<pos:position pos:line="5" pos:column="59"/></name></name> <operator pos:line="5" pos:column="60">-<pos:position pos:line="5" pos:column="61"/></operator> <literal type="number" pos:line="5" pos:column="62">1<pos:position pos:line="5" pos:column="63"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="64"/></decl_stmt>
    <comment type="line" pos:line="6" pos:column="5">// huge request_header_max_size may lead to more than INT_MAX unused space</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name> <argument_list pos:line="7" pos:column="12">(<argument><expr><cast type="static" pos:line="7" pos:column="13">static_cast<argument_list type="generic" pos:line="7" pos:column="24">&lt;<argument><expr><name pos:line="7" pos:column="25">ssize_t<pos:position pos:line="7" pos:column="32"/></name></expr></argument>&gt;<pos:position pos:line="7" pos:column="36"/></argument_list><argument_list pos:line="7" pos:column="33">(<argument><expr><name pos:line="7" pos:column="34">result<pos:position pos:line="7" pos:column="40"/></name></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></cast> <operator pos:line="7" pos:column="42">&lt;=<pos:position pos:line="7" pos:column="47"/></operator> <name pos:line="7" pos:column="45">INT_MAX<pos:position pos:line="7" pos:column="52"/></name></expr></argument>)<pos:position pos:line="7" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="54"/></expr_stmt>
    <return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">result<pos:position pos:line="8" pos:column="18"/></name></expr>;<pos:position pos:line="8" pos:column="19"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
