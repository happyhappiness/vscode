<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5931_last_repos.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">make_challenge<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">domain<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">domain_controller<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* trying to circumvent some strange problem wih pointers in SMBLib */</comment>
    <comment type="block" pos:line="5" pos:column="5">/* Ugly as hell, but the lib is going to be dropped... */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">strncpy<pos:position pos:line="6" pos:column="12"/></name><argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">my_domain<pos:position pos:line="6" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="24">domain<pos:position pos:line="6" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="6" pos:column="32">sizeof<argument_list pos:line="6" pos:column="38">(<argument><expr><name pos:line="6" pos:column="39">my_domain<pos:position pos:line="6" pos:column="48"/></name></expr></argument>)<pos:position pos:line="6" pos:column="49"/></argument_list></sizeof><operator pos:line="6" pos:column="49">-<pos:position pos:line="6" pos:column="50"/></operator><literal type="number" pos:line="6" pos:column="50">1<pos:position pos:line="6" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">my_domain<pos:position pos:line="7" pos:column="14"/></name><index pos:line="7" pos:column="14">[<expr><sizeof pos:line="7" pos:column="15">sizeof<argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">my_domain<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></sizeof><operator pos:line="7" pos:column="32">-<pos:position pos:line="7" pos:column="33"/></operator><literal type="number" pos:line="7" pos:column="33">1<pos:position pos:line="7" pos:column="34"/></literal></expr>]<pos:position pos:line="7" pos:column="35"/></index></name> <operator pos:line="7" pos:column="36">=<pos:position pos:line="7" pos:column="37"/></operator> <literal type="char" pos:line="7" pos:column="38">'\0'<pos:position pos:line="7" pos:column="42"/></literal></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">strncpy<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">my_domain_controller<pos:position pos:line="8" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="35">domain_controller<pos:position pos:line="8" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="54">sizeof<argument_list pos:line="8" pos:column="60">(<argument><expr><name pos:line="8" pos:column="61">my_domain_controller<pos:position pos:line="8" pos:column="81"/></name></expr></argument>)<pos:position pos:line="8" pos:column="82"/></argument_list></sizeof><operator pos:line="8" pos:column="82">-<pos:position pos:line="8" pos:column="83"/></operator><literal type="number" pos:line="8" pos:column="83">1<pos:position pos:line="8" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="86"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">my_domain_controller<pos:position pos:line="9" pos:column="25"/></name><index pos:line="9" pos:column="25">[<expr><sizeof pos:line="9" pos:column="26">sizeof<argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">my_domain_controller<pos:position pos:line="9" pos:column="53"/></name></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></sizeof><operator pos:line="9" pos:column="54">-<pos:position pos:line="9" pos:column="55"/></operator><literal type="number" pos:line="9" pos:column="55">1<pos:position pos:line="9" pos:column="56"/></literal></expr>]<pos:position pos:line="9" pos:column="57"/></index></name> <operator pos:line="9" pos:column="58">=<pos:position pos:line="9" pos:column="59"/></operator> <literal type="char" pos:line="9" pos:column="60">'\0'<pos:position pos:line="9" pos:column="64"/></literal></expr>;<pos:position pos:line="9" pos:column="65"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">init_challenge<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">my_domain<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="35">my_domain_controller<pos:position pos:line="11" pos:column="55"/></name></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call> <operator pos:line="11" pos:column="57">&gt;<pos:position pos:line="11" pos:column="61"/></operator> <literal type="number" pos:line="11" pos:column="59">0<pos:position pos:line="11" pos:column="60"/></literal></expr>)<pos:position pos:line="11" pos:column="61"/></condition><then pos:line="11" pos:column="61"> <block pos:line="11" pos:column="62">{
        <return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">NULL<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">ntlm_challenge<pos:position pos:line="15" pos:column="19"/></name></type> <name pos:line="15" pos:column="20">chal<pos:position pos:line="15" pos:column="24"/></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">uint32_t<pos:position pos:line="16" pos:column="13"/></name></type> <name pos:line="16" pos:column="14">flags<pos:position pos:line="16" pos:column="19"/></name> <init pos:line="16" pos:column="20">= <expr><name pos:line="16" pos:column="22">NTLM_REQUEST_NON_NT_SESSION_KEY<pos:position pos:line="16" pos:column="53"/></name> <operator pos:line="16" pos:column="54">|<pos:position pos:line="16" pos:column="55"/></operator>
                     <name pos:line="17" pos:column="22">NTLM_CHALLENGE_TARGET_IS_DOMAIN<pos:position pos:line="17" pos:column="53"/></name> <operator pos:line="17" pos:column="54">|<pos:position pos:line="17" pos:column="55"/></operator>
                     <name pos:line="18" pos:column="22">NTLM_NEGOTIATE_ALWAYS_SIGN<pos:position pos:line="18" pos:column="48"/></name> <operator pos:line="18" pos:column="49">|<pos:position pos:line="18" pos:column="50"/></operator>
                     <name pos:line="19" pos:column="22">NTLM_NEGOTIATE_USE_NTLM<pos:position pos:line="19" pos:column="45"/></name> <operator pos:line="19" pos:column="46">|<pos:position pos:line="19" pos:column="47"/></operator>
                     <name pos:line="20" pos:column="22">NTLM_NEGOTIATE_USE_LM<pos:position pos:line="20" pos:column="43"/></name> <operator pos:line="20" pos:column="44">|<pos:position pos:line="20" pos:column="45"/></operator>
                     <name pos:line="21" pos:column="22">NTLM_NEGOTIATE_ASCII<pos:position pos:line="21" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ntlm_make_challenge<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><operator pos:line="22" pos:column="25">&amp;<pos:position pos:line="22" pos:column="30"/></operator><name pos:line="22" pos:column="26">chal<pos:position pos:line="22" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="32">my_domain<pos:position pos:line="22" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="43">my_domain_controller<pos:position pos:line="22" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="65">(<pos:position pos:line="22" pos:column="66"/></operator><name pos:line="22" pos:column="66">char<pos:position pos:line="22" pos:column="70"/></name> <operator pos:line="22" pos:column="71">*<pos:position pos:line="22" pos:column="72"/></operator><operator pos:line="22" pos:column="72">)<pos:position pos:line="22" pos:column="73"/></operator><name pos:line="22" pos:column="73">challenge<pos:position pos:line="22" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="84">NTLM_NONCE_LEN<pos:position pos:line="22" pos:column="98"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="100">flags<pos:position pos:line="22" pos:column="105"/></name></expr></argument>)<pos:position pos:line="22" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="107"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="24" pos:column="5">size_t<pos:position pos:line="24" pos:column="11"/></name></type> <name pos:line="24" pos:column="12">len<pos:position pos:line="24" pos:column="15"/></name> <init pos:line="24" pos:column="16">= <expr><sizeof pos:line="24" pos:column="18">sizeof<argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">chal<pos:position pos:line="24" pos:column="29"/></name></expr></argument>)<pos:position pos:line="24" pos:column="30"/></argument_list></sizeof> <operator pos:line="24" pos:column="31">-<pos:position pos:line="24" pos:column="32"/></operator> <sizeof pos:line="24" pos:column="33">sizeof<argument_list pos:line="24" pos:column="39">(<argument><expr><name><name pos:line="24" pos:column="40">chal<pos:position pos:line="24" pos:column="44"/></name><operator pos:line="24" pos:column="44">.<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="45">payload<pos:position pos:line="24" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="53"/></argument_list></sizeof> <operator pos:line="24" pos:column="54">+<pos:position pos:line="24" pos:column="55"/></operator> <call><name pos:line="24" pos:column="56">le16toh<pos:position pos:line="24" pos:column="63"/></name><argument_list pos:line="24" pos:column="63">(<argument><expr><name><name pos:line="24" pos:column="64">chal<pos:position pos:line="24" pos:column="68"/></name><operator pos:line="24" pos:column="68">.<pos:position pos:line="24" pos:column="69"/></operator><name pos:line="24" pos:column="69">target<pos:position pos:line="24" pos:column="75"/></name><operator pos:line="24" pos:column="75">.<pos:position pos:line="24" pos:column="76"/></operator><name pos:line="24" pos:column="76">maxlen<pos:position pos:line="24" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="84"/></decl_stmt>
    <comment type="line" pos:line="25" pos:column="5">// for lack of a good NTLM token size limit, allow up to what the helper input can be</comment>
    <comment type="line" pos:line="26" pos:column="5">// validations later will expect to be limited to that size.</comment>
    <decl_stmt><decl><specifier pos:line="27" pos:column="5">static<pos:position pos:line="27" pos:column="11"/></specifier> <type><name pos:line="27" pos:column="12">uint8_t<pos:position pos:line="27" pos:column="19"/></name></type> <name><name pos:line="27" pos:column="20">b64buf<pos:position pos:line="27" pos:column="26"/></name><index pos:line="27" pos:column="26">[<expr><name pos:line="27" pos:column="27">HELPER_INPUT_BUFFER<pos:position pos:line="27" pos:column="46"/></name><operator pos:line="27" pos:column="46">-<pos:position pos:line="27" pos:column="47"/></operator><literal type="number" pos:line="27" pos:column="47">10<pos:position pos:line="27" pos:column="49"/></literal></expr>]<pos:position pos:line="27" pos:column="50"/></index></name></decl>;<pos:position pos:line="27" pos:column="51"/></decl_stmt> <comment type="block" pos:line="27" pos:column="52">/* 10 for other line fields, delimiters and terminator */</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name pos:line="28" pos:column="9">base64_encode_len<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name pos:line="28" pos:column="27">len<pos:position pos:line="28" pos:column="30"/></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></call> <operator pos:line="28" pos:column="32">&lt;<pos:position pos:line="28" pos:column="36"/></operator> <sizeof pos:line="28" pos:column="34">sizeof<argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">b64buf<pos:position pos:line="28" pos:column="47"/></name></expr></argument>)<pos:position pos:line="28" pos:column="48"/></argument_list></sizeof><operator pos:line="28" pos:column="48">-<pos:position pos:line="28" pos:column="49"/></operator><literal type="number" pos:line="28" pos:column="49">1<pos:position pos:line="28" pos:column="50"/></literal></expr>)<pos:position pos:line="28" pos:column="51"/></condition><then pos:line="28" pos:column="51"> <block pos:line="28" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debug<pos:position pos:line="29" pos:column="14"/></name><argument_list pos:line="29" pos:column="14">(<argument><expr><literal type="string" pos:line="29" pos:column="15">"base64 encoding of the token challenge will exceed %"<pos:position pos:line="29" pos:column="69"/></literal> <name pos:line="29" pos:column="70">PRIuSIZE<pos:position pos:line="29" pos:column="78"/></name> <literal type="string" pos:line="29" pos:column="79">" bytes"<pos:position pos:line="29" pos:column="87"/></literal></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="89">sizeof<argument_list pos:line="29" pos:column="95">(<argument><expr><name pos:line="29" pos:column="96">b64buf<pos:position pos:line="29" pos:column="102"/></name></expr></argument>)<pos:position pos:line="29" pos:column="103"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="105"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">NULL<pos:position pos:line="30" pos:column="20"/></name></expr>;<pos:position pos:line="30" pos:column="21"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="33" pos:column="5">struct<pos:position pos:line="33" pos:column="11"/></name> <name pos:line="33" pos:column="12">base64_encode_ctx<pos:position pos:line="33" pos:column="29"/></name></name></type> <name pos:line="33" pos:column="30">ctx<pos:position pos:line="33" pos:column="33"/></name></decl>;<pos:position pos:line="33" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">base64_encode_init<pos:position pos:line="34" pos:column="23"/></name><argument_list pos:line="34" pos:column="23">(<argument><expr><operator pos:line="34" pos:column="24">&amp;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="25">ctx<pos:position pos:line="34" pos:column="28"/></name></expr></argument>)<pos:position pos:line="34" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="30"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">size_t<pos:position pos:line="35" pos:column="11"/></name></type> <name pos:line="35" pos:column="12">blen<pos:position pos:line="35" pos:column="16"/></name> <init pos:line="35" pos:column="17">= <expr><call><name pos:line="35" pos:column="19">base64_encode_update<pos:position pos:line="35" pos:column="39"/></name><argument_list pos:line="35" pos:column="39">(<argument><expr><operator pos:line="35" pos:column="40">&amp;<pos:position pos:line="35" pos:column="45"/></operator><name pos:line="35" pos:column="41">ctx<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="46">b64buf<pos:position pos:line="35" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">len<pos:position pos:line="35" pos:column="57"/></name></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="35" pos:column="59">reinterpret_cast<argument_list type="generic" pos:line="35" pos:column="75">&lt;<argument><expr><specifier pos:line="35" pos:column="76">const<pos:position pos:line="35" pos:column="81"/></specifier> <name pos:line="35" pos:column="82">uint8_t<pos:position pos:line="35" pos:column="89"/></name> <operator pos:line="35" pos:column="90">*<pos:position pos:line="35" pos:column="91"/></operator></expr></argument>&gt;<pos:position pos:line="35" pos:column="95"/></argument_list><argument_list pos:line="35" pos:column="92">(<argument><expr><operator pos:line="35" pos:column="93">&amp;<pos:position pos:line="35" pos:column="98"/></operator><name pos:line="35" pos:column="94">chal<pos:position pos:line="35" pos:column="98"/></name></expr></argument>)<pos:position pos:line="35" pos:column="99"/></argument_list></cast></expr></argument>)<pos:position pos:line="35" pos:column="100"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="101"/></decl_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">blen<pos:position pos:line="36" pos:column="9"/></name> <operator pos:line="36" pos:column="10">+=<pos:position pos:line="36" pos:column="12"/></operator> <call><name pos:line="36" pos:column="13">base64_encode_final<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><operator pos:line="36" pos:column="33">&amp;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="34">ctx<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="39">b64buf<pos:position pos:line="36" pos:column="45"/></name><operator pos:line="36" pos:column="45">+<pos:position pos:line="36" pos:column="46"/></operator><name pos:line="36" pos:column="46">blen<pos:position pos:line="36" pos:column="50"/></name></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">b64buf<pos:position pos:line="37" pos:column="11"/></name><index pos:line="37" pos:column="11">[<expr><name pos:line="37" pos:column="12">blen<pos:position pos:line="37" pos:column="16"/></name></expr>]<pos:position pos:line="37" pos:column="17"/></index></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <literal type="char" pos:line="37" pos:column="20">'\0'<pos:position pos:line="37" pos:column="24"/></literal></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
    <return pos:line="38" pos:column="5">return <expr><cast type="reinterpret" pos:line="38" pos:column="12">reinterpret_cast<argument_list type="generic" pos:line="38" pos:column="28">&lt;<argument><expr><specifier pos:line="38" pos:column="29">const<pos:position pos:line="38" pos:column="34"/></specifier> <name pos:line="38" pos:column="35">char<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">*<pos:position pos:line="38" pos:column="40"/></operator></expr></argument>&gt;<pos:position pos:line="38" pos:column="44"/></argument_list><argument_list pos:line="38" pos:column="41">(<argument><expr><name pos:line="38" pos:column="42">b64buf<pos:position pos:line="38" pos:column="48"/></name></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></cast></expr>;<pos:position pos:line="38" pos:column="50"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
