<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2042_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int64_t<pos:position pos:line="1" pos:column="8"/></name></type>
<name><name pos:line="2" pos:column="1">mem_hdr<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">freeDataUpto<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">int64_t<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">target_offset<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* keep the last one to avoid change to other part of code */</comment>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">SplayNode<pos:position pos:line="6" pos:column="14"/></name><argument_list type="generic" pos:line="6" pos:column="14">&lt;<argument><expr><name pos:line="6" pos:column="15">mem_node<pos:position pos:line="6" pos:column="23"/></name><modifier pos:line="6" pos:column="23">*<pos:position pos:line="6" pos:column="24"/></modifier></expr></argument>&gt;<pos:position pos:line="6" pos:column="28"/></argument_list></name> <specifier pos:line="6" pos:column="26">const<pos:position pos:line="6" pos:column="31"/></specifier> <modifier pos:line="6" pos:column="32">*<pos:position pos:line="6" pos:column="33"/></modifier></type> <name pos:line="6" pos:column="34">theStart<pos:position pos:line="6" pos:column="42"/></name> <init pos:line="6" pos:column="43">= <expr><call><name><name pos:line="6" pos:column="45">nodes<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">.<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="51">start<pos:position pos:line="6" pos:column="56"/></name></name><argument_list pos:line="6" pos:column="56">()<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">theStart<pos:position pos:line="8" pos:column="21"/></name> <operator pos:line="8" pos:column="22">=<pos:position pos:line="8" pos:column="23"/></operator> <call><name><name pos:line="8" pos:column="24">nodes<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">.<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="30">start<pos:position pos:line="8" pos:column="35"/></name></name><argument_list pos:line="8" pos:column="35">()<pos:position pos:line="8" pos:column="37"/></argument_list></call><operator pos:line="8" pos:column="37">)<pos:position pos:line="8" pos:column="38"/></operator></expr>)<pos:position pos:line="8" pos:column="39"/></condition> <block pos:line="8" pos:column="40">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">theStart<pos:position pos:line="9" pos:column="21"/></name> <operator pos:line="9" pos:column="22">==<pos:position pos:line="9" pos:column="24"/></operator> <call><name><name pos:line="9" pos:column="25">nodes<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">.<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">finish<pos:position pos:line="9" pos:column="37"/></name></name><argument_list pos:line="9" pos:column="37">()<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40">
            <block type="pseudo"><break pos:line="10" pos:column="13">break;<pos:position pos:line="10" pos:column="19"/></break></block></then></if>

        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><call><name><name pos:line="12" pos:column="13">theStart<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">-&gt;<pos:position pos:line="12" pos:column="26"/></operator><name pos:line="12" pos:column="23">data<pos:position pos:line="12" pos:column="27"/></name><operator pos:line="12" pos:column="27">-&gt;<pos:position pos:line="12" pos:column="32"/></operator><name pos:line="12" pos:column="29">end<pos:position pos:line="12" pos:column="32"/></name></name><argument_list pos:line="12" pos:column="32">()<pos:position pos:line="12" pos:column="34"/></argument_list></call> <operator pos:line="12" pos:column="35">&gt;<pos:position pos:line="12" pos:column="39"/></operator> <name pos:line="12" pos:column="37">target_offset<pos:position pos:line="12" pos:column="50"/></name></expr> )<pos:position pos:line="12" pos:column="52"/></condition><then pos:line="12" pos:column="52">
            <block type="pseudo"><break pos:line="13" pos:column="13">break;<pos:position pos:line="13" pos:column="19"/></break></block></then></if>

        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><call><name pos:line="15" pos:column="14">unlink<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name><name pos:line="15" pos:column="21">theStart<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">data<pos:position pos:line="15" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="37"/></condition><then pos:line="15" pos:column="37">
            <block type="pseudo"><break pos:line="16" pos:column="13">break;<pos:position pos:line="16" pos:column="19"/></break></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name> <argument_list pos:line="19" pos:column="12">(<argument><expr><call><name pos:line="19" pos:column="13">lowestOffset<pos:position pos:line="19" pos:column="25"/></name> <argument_list pos:line="19" pos:column="26">()<pos:position pos:line="19" pos:column="28"/></argument_list></call> <operator pos:line="19" pos:column="29">&lt;=<pos:position pos:line="19" pos:column="34"/></operator> <name pos:line="19" pos:column="32">target_offset<pos:position pos:line="19" pos:column="45"/></name></expr></argument>)<pos:position pos:line="19" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="47"/></expr_stmt>

    <return pos:line="21" pos:column="5">return <expr><call><name pos:line="21" pos:column="12">lowestOffset<pos:position pos:line="21" pos:column="24"/></name> <argument_list pos:line="21" pos:column="25">()<pos:position pos:line="21" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="28"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
