<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1749_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">mem_hdr<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">NodeCompare<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">mem_node<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier> <specifier pos:line="2" pos:column="33">const<pos:position pos:line="2" pos:column="38"/></specifier> <modifier pos:line="2" pos:column="39">&amp;<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="40">left<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">mem_node<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier> <specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <modifier pos:line="2" pos:column="63">&amp;<pos:position pos:line="2" pos:column="68"/></modifier></type><name pos:line="2" pos:column="64">right<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// possibly Range can help us at some point.</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name><name pos:line="6" pos:column="9">left<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">dataRange<pos:position pos:line="6" pos:column="24"/></name></name><argument_list pos:line="6" pos:column="24">()<pos:position pos:line="6" pos:column="26"/></argument_list></call><operator pos:line="6" pos:column="26">.<pos:position pos:line="6" pos:column="27"/></operator><call><name pos:line="6" pos:column="27">intersection<pos:position pos:line="6" pos:column="39"/></name><argument_list pos:line="6" pos:column="39">(<argument><expr><call><name><name pos:line="6" pos:column="40">right<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">-&gt;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="47">dataRange<pos:position pos:line="6" pos:column="56"/></name></name><argument_list pos:line="6" pos:column="56">()<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call><operator pos:line="6" pos:column="59">.<pos:position pos:line="6" pos:column="60"/></operator><call><name pos:line="6" pos:column="60">size<pos:position pos:line="6" pos:column="64"/></name><argument_list pos:line="6" pos:column="64">()<pos:position pos:line="6" pos:column="66"/></argument_list></call> <operator pos:line="6" pos:column="67">&gt;<pos:position pos:line="6" pos:column="71"/></operator> <literal type="number" pos:line="6" pos:column="69">0<pos:position pos:line="6" pos:column="70"/></literal></expr>)<pos:position pos:line="6" pos:column="71"/></condition><then pos:line="6" pos:column="71">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr>;<pos:position pos:line="7" pos:column="18"/></return></block></then></if>

    <return pos:line="9" pos:column="5">return <expr><ternary><condition><expr><operator pos:line="9" pos:column="12">*<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">left<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">&lt;<pos:position pos:line="9" pos:column="22"/></operator> <operator pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">right<pos:position pos:line="9" pos:column="26"/></name></expr> ?<pos:position pos:line="9" pos:column="28"/></condition><then pos:line="9" pos:column="28"> <expr><operator pos:line="9" pos:column="29">-<pos:position pos:line="9" pos:column="30"/></operator><literal type="number" pos:line="9" pos:column="30">1<pos:position pos:line="9" pos:column="31"/></literal></expr> <pos:position pos:line="9" pos:column="32"/></then><else pos:line="9" pos:column="32">: <expr><literal type="number" pos:line="9" pos:column="34">1<pos:position pos:line="9" pos:column="35"/></literal></expr></else></ternary></expr>;<pos:position pos:line="9" pos:column="36"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
