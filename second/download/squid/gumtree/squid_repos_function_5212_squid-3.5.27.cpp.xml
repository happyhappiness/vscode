<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5212_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">write<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">buf<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">size_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">size<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">off_t<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">coreOff<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">FREE<pos:position pos:line="2" pos:column="71"/></name> <modifier pos:line="2" pos:column="72">*<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="73">dtor<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">bool<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">success<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="boolean" pos:line="4" pos:column="20">false<pos:position pos:line="4" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <try pos:line="5" pos:column="5">try <block pos:line="5" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">tryWrite<pos:position pos:line="6" pos:column="17"/></name><argument_list pos:line="6" pos:column="17">(<argument><expr><name pos:line="6" pos:column="18">buf<pos:position pos:line="6" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="23">size<pos:position pos:line="6" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="29">coreOff<pos:position pos:line="6" pos:column="36"/></name></expr></argument>)<pos:position pos:line="6" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="7" pos:column="9">success<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">=<pos:position pos:line="7" pos:column="18"/></operator> <literal type="boolean" pos:line="7" pos:column="19">true<pos:position pos:line="7" pos:column="23"/></literal></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block> <catch pos:line="8" pos:column="7">catch <parameter_list pos:line="8" pos:column="13">(<parameter><decl><type><specifier pos:line="8" pos:column="14">const<pos:position pos:line="8" pos:column="19"/></specifier> <name><name pos:line="8" pos:column="20">std<pos:position pos:line="8" pos:column="23"/></name><operator pos:line="8" pos:column="23">::<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">exception<pos:position pos:line="8" pos:column="34"/></name></name> <modifier pos:line="8" pos:column="35">&amp;<pos:position pos:line="8" pos:column="40"/></modifier></type><name pos:line="8" pos:column="36">ex<pos:position pos:line="8" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="8" pos:column="39"/></parameter_list> <block pos:line="8" pos:column="40">{ <comment type="line" pos:line="8" pos:column="42">// TODO: should we catch ... as well?</comment>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">79<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">2<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"db write error: "<pos:position pos:line="9" pos:column="41"/></literal> <operator pos:line="9" pos:column="42">&lt;&lt;<pos:position pos:line="9" pos:column="50"/></operator> <call><name><name pos:line="9" pos:column="45">ex<pos:position pos:line="9" pos:column="47"/></name><operator pos:line="9" pos:column="47">.<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="48">what<pos:position pos:line="9" pos:column="52"/></name></name><argument_list pos:line="9" pos:column="52">()<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">dir<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">writeError<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">(<argument><expr><operator pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">e<pos:position pos:line="10" pos:column="27"/></name></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">finishedWriting<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">DISK_ERROR<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
        <comment type="line" pos:line="12" pos:column="9">// 'this' might be gone beyond this point; fall through to free buf</comment>
    }<pos:position pos:line="13" pos:column="6"/></block></catch></try>

    <comment type="line" pos:line="15" pos:column="5">// careful: 'this' might be gone here</comment>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">dtor<pos:position pos:line="17" pos:column="13"/></name></expr>)<pos:position pos:line="17" pos:column="14"/></condition><then pos:line="17" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><call pos:line="18" pos:column="9">(<name pos:line="18" pos:column="10">dtor<pos:position pos:line="18" pos:column="14"/></name>)<argument_list pos:line="18" pos:column="15">(<argument><expr><cast type="const" pos:line="18" pos:column="16">const_cast<argument_list type="generic" pos:line="18" pos:column="26">&lt;<argument><expr><name pos:line="18" pos:column="27">char<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">*<pos:position pos:line="18" pos:column="32"/></operator></expr></argument>&gt;<pos:position pos:line="18" pos:column="36"/></argument_list><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">buf<pos:position pos:line="18" pos:column="37"/></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></cast></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt></block></then></if> <comment type="line" pos:line="18" pos:column="41">// cast due to a broken API?</comment>

    <return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">success<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
