<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1773_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">uint64_t<pos:position pos:line="1" pos:column="16"/></name></type>
<name pos:line="2" pos:column="1">storeDigestCalcCap<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/*
     * To-Do: Bloom proved that the optimal filter utilization is 50% (half of
     * the bits are off). However, we do not have a formula to calculate the
     * number of _entries_ we want to pre-allocate for.
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">uint64_t<pos:position pos:line="9" pos:column="19"/></name></type> <name pos:line="9" pos:column="20">hi_cap<pos:position pos:line="9" pos:column="26"/></name> <init pos:line="9" pos:column="27">= <expr><call><name><name pos:line="9" pos:column="29">Store<pos:position pos:line="9" pos:column="34"/></name><operator pos:line="9" pos:column="34">::<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="36">Root<pos:position pos:line="9" pos:column="40"/></name></name><argument_list pos:line="9" pos:column="40">()<pos:position pos:line="9" pos:column="42"/></argument_list></call><operator pos:line="9" pos:column="42">.<pos:position pos:line="9" pos:column="43"/></operator><call><name pos:line="9" pos:column="43">maxSize<pos:position pos:line="9" pos:column="50"/></name><argument_list pos:line="9" pos:column="50">()<pos:position pos:line="9" pos:column="52"/></argument_list></call> <operator pos:line="9" pos:column="53">/<pos:position pos:line="9" pos:column="54"/></operator> <name><name pos:line="9" pos:column="55">Config<pos:position pos:line="9" pos:column="61"/></name><operator pos:line="9" pos:column="61">.<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="62">Store<pos:position pos:line="9" pos:column="67"/></name><operator pos:line="9" pos:column="67">.<pos:position pos:line="9" pos:column="68"/></operator><name pos:line="9" pos:column="68">avgObjectSize<pos:position pos:line="9" pos:column="81"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="82"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">uint64_t<pos:position pos:line="10" pos:column="19"/></name></type> <name pos:line="10" pos:column="20">lo_cap<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><literal type="number" pos:line="10" pos:column="29">1<pos:position pos:line="10" pos:column="30"/></literal> <operator pos:line="10" pos:column="31">+<pos:position pos:line="10" pos:column="32"/></operator> <call><name><name pos:line="10" pos:column="33">Store<pos:position pos:line="10" pos:column="38"/></name><operator pos:line="10" pos:column="38">::<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="40">Root<pos:position pos:line="10" pos:column="44"/></name></name><argument_list pos:line="10" pos:column="44">()<pos:position pos:line="10" pos:column="46"/></argument_list></call><operator pos:line="10" pos:column="46">.<pos:position pos:line="10" pos:column="47"/></operator><call><name pos:line="10" pos:column="47">currentSize<pos:position pos:line="10" pos:column="58"/></name><argument_list pos:line="10" pos:column="58">()<pos:position pos:line="10" pos:column="60"/></argument_list></call> <operator pos:line="10" pos:column="61">/<pos:position pos:line="10" pos:column="62"/></operator> <name><name pos:line="10" pos:column="63">Config<pos:position pos:line="10" pos:column="69"/></name><operator pos:line="10" pos:column="69">.<pos:position pos:line="10" pos:column="70"/></operator><name pos:line="10" pos:column="70">Store<pos:position pos:line="10" pos:column="75"/></name><operator pos:line="10" pos:column="75">.<pos:position pos:line="10" pos:column="76"/></operator><name pos:line="10" pos:column="76">avgObjectSize<pos:position pos:line="10" pos:column="89"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="90"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">uint64_t<pos:position pos:line="11" pos:column="19"/></name></type> <name pos:line="11" pos:column="20">e_count<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><call><name><name pos:line="11" pos:column="30">StoreEntry<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">::<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="42">inUseCount<pos:position pos:line="11" pos:column="52"/></name></name><argument_list pos:line="11" pos:column="52">()<pos:position pos:line="11" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="55"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">uint64_t<pos:position pos:line="12" pos:column="13"/></name></type> <name pos:line="12" pos:column="14">cap<pos:position pos:line="12" pos:column="17"/></name> <init pos:line="12" pos:column="18">= <expr><ternary><condition><expr><name pos:line="12" pos:column="20">e_count<pos:position pos:line="12" pos:column="27"/></name></expr> ?<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29"> <expr><name pos:line="12" pos:column="30">e_count<pos:position pos:line="12" pos:column="37"/></name></expr> <pos:position pos:line="12" pos:column="38"/></then><else pos:line="12" pos:column="38">: <expr><name pos:line="12" pos:column="40">hi_cap<pos:position pos:line="12" pos:column="46"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="12" pos:column="47"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">71<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">2<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"have: "<pos:position pos:line="13" pos:column="27"/></literal> <operator pos:line="13" pos:column="28">&lt;&lt;<pos:position pos:line="13" pos:column="36"/></operator> <name pos:line="13" pos:column="31">e_count<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">&lt;&lt;<pos:position pos:line="13" pos:column="47"/></operator> <literal type="string" pos:line="13" pos:column="42">", want "<pos:position pos:line="13" pos:column="51"/></literal> <operator pos:line="13" pos:column="52">&lt;&lt;<pos:position pos:line="13" pos:column="60"/></operator> <name pos:line="13" pos:column="55">cap<pos:position pos:line="13" pos:column="58"/></name> <operator pos:line="13" pos:column="59">&lt;&lt;<pos:position pos:line="13" pos:column="67"/></operator>
           <literal type="string" pos:line="14" pos:column="12">" entries; limits: ["<pos:position pos:line="14" pos:column="33"/></literal> <operator pos:line="14" pos:column="34">&lt;&lt;<pos:position pos:line="14" pos:column="42"/></operator> <name pos:line="14" pos:column="37">lo_cap<pos:position pos:line="14" pos:column="43"/></name> <operator pos:line="14" pos:column="44">&lt;&lt;<pos:position pos:line="14" pos:column="52"/></operator> <literal type="string" pos:line="14" pos:column="47">", "<pos:position pos:line="14" pos:column="51"/></literal> <operator pos:line="14" pos:column="52">&lt;&lt;<pos:position pos:line="14" pos:column="60"/></operator> <name pos:line="14" pos:column="55">hi_cap<pos:position pos:line="14" pos:column="61"/></name> <operator pos:line="14" pos:column="62">&lt;&lt;<pos:position pos:line="14" pos:column="70"/></operator> <literal type="string" pos:line="14" pos:column="65">"]"<pos:position pos:line="14" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="70"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">cap<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">&lt;<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="15">lo_cap<pos:position pos:line="16" pos:column="21"/></name></expr>)<pos:position pos:line="16" pos:column="22"/></condition><then pos:line="16" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="9">cap<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">lo_cap<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/* do not enforce hi_cap limit, average-based estimation may be wrong
     *if (cap &gt; hi_cap)
     *  cap = hi_cap;
     */</comment>

    <comment type="line" pos:line="24" pos:column="5">// Bug 4534: we still have to set an upper-limit at some reasonable value though.</comment>
    <comment type="line" pos:line="25" pos:column="5">// this matches cacheDigestCalcMaskSize doing (cap*bpe)+7 &lt; INT_MAX</comment>
    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">const<pos:position pos:line="26" pos:column="10"/></specifier> <name pos:line="26" pos:column="11">uint64_t<pos:position pos:line="26" pos:column="19"/></name></type> <name pos:line="26" pos:column="20">absolute_max<pos:position pos:line="26" pos:column="32"/></name> <init pos:line="26" pos:column="33">= <expr><operator pos:line="26" pos:column="35">(<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="36">INT_MAX<pos:position pos:line="26" pos:column="43"/></name> <operator pos:line="26" pos:column="44">-<pos:position pos:line="26" pos:column="45"/></operator><literal type="number" pos:line="26" pos:column="45">8<pos:position pos:line="26" pos:column="46"/></literal><operator pos:line="26" pos:column="46">)<pos:position pos:line="26" pos:column="47"/></operator> <operator pos:line="26" pos:column="48">/<pos:position pos:line="26" pos:column="49"/></operator> <name><name pos:line="26" pos:column="50">Config<pos:position pos:line="26" pos:column="56"/></name><operator pos:line="26" pos:column="56">.<pos:position pos:line="26" pos:column="57"/></operator><name pos:line="26" pos:column="57">digest<pos:position pos:line="26" pos:column="63"/></name><operator pos:line="26" pos:column="63">.<pos:position pos:line="26" pos:column="64"/></operator><name pos:line="26" pos:column="64">bits_per_entry<pos:position pos:line="26" pos:column="78"/></name></name></expr></init></decl>;<pos:position pos:line="26" pos:column="79"/></decl_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">cap<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">&gt;<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="15">absolute_max<pos:position pos:line="27" pos:column="27"/></name></expr>)<pos:position pos:line="27" pos:column="28"/></condition><then pos:line="27" pos:column="28"> <block pos:line="27" pos:column="29">{
        <decl_stmt><decl><specifier pos:line="28" pos:column="9">static<pos:position pos:line="28" pos:column="15"/></specifier> <type><name pos:line="28" pos:column="16">time_t<pos:position pos:line="28" pos:column="22"/></name></type> <name pos:line="28" pos:column="23">last_loud<pos:position pos:line="28" pos:column="32"/></name> <init pos:line="28" pos:column="33">= <expr><literal type="number" pos:line="28" pos:column="35">0<pos:position pos:line="28" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="37"/></decl_stmt>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">last_loud<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">&lt;<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="25">squid_curtime<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">-<pos:position pos:line="29" pos:column="40"/></operator> <literal type="number" pos:line="29" pos:column="41">86400<pos:position pos:line="29" pos:column="46"/></literal></expr>)<pos:position pos:line="29" pos:column="47"/></condition><then pos:line="29" pos:column="47"> <block pos:line="29" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">debugs<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><literal type="number" pos:line="30" pos:column="20">71<pos:position pos:line="30" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="24">DBG_IMPORTANT<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="39">"WARNING: Cache Digest cannot store "<pos:position pos:line="30" pos:column="76"/></literal> <operator pos:line="30" pos:column="77">&lt;&lt;<pos:position pos:line="30" pos:column="85"/></operator> <name pos:line="30" pos:column="80">cap<pos:position pos:line="30" pos:column="83"/></name> <operator pos:line="30" pos:column="84">&lt;&lt;<pos:position pos:line="30" pos:column="92"/></operator> <literal type="string" pos:line="30" pos:column="87">" entries. Limiting to "<pos:position pos:line="30" pos:column="111"/></literal> <operator pos:line="30" pos:column="112">&lt;&lt;<pos:position pos:line="30" pos:column="120"/></operator> <name pos:line="30" pos:column="115">absolute_max<pos:position pos:line="30" pos:column="127"/></name></expr></argument>)<pos:position pos:line="30" pos:column="128"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="129"/></expr_stmt>
            <expr_stmt><expr><name pos:line="31" pos:column="13">last_loud<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">=<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="25">squid_curtime<pos:position pos:line="31" pos:column="38"/></name></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></then> <else pos:line="32" pos:column="11">else <block pos:line="32" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">debugs<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><literal type="number" pos:line="33" pos:column="20">71<pos:position pos:line="33" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="24">3<pos:position pos:line="33" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="27">"WARNING: Cache Digest cannot store "<pos:position pos:line="33" pos:column="64"/></literal> <operator pos:line="33" pos:column="65">&lt;&lt;<pos:position pos:line="33" pos:column="73"/></operator> <name pos:line="33" pos:column="68">cap<pos:position pos:line="33" pos:column="71"/></name> <operator pos:line="33" pos:column="72">&lt;&lt;<pos:position pos:line="33" pos:column="80"/></operator> <literal type="string" pos:line="33" pos:column="75">" entries. Limiting to "<pos:position pos:line="33" pos:column="99"/></literal> <operator pos:line="33" pos:column="100">&lt;&lt;<pos:position pos:line="33" pos:column="108"/></operator> <name pos:line="33" pos:column="103">absolute_max<pos:position pos:line="33" pos:column="115"/></name></expr></argument>)<pos:position pos:line="33" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="117"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="35" pos:column="9">cap<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <name pos:line="35" pos:column="15">absolute_max<pos:position pos:line="35" pos:column="27"/></name></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">cap<pos:position pos:line="38" pos:column="15"/></name></expr>;<pos:position pos:line="38" pos:column="16"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
