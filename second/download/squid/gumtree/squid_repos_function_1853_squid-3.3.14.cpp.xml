<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1853_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">neighborsUdpPing<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">HttpRequest<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type> <name pos:line="2" pos:column="32">request<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>,
                 <parameter><decl><type><name pos:line="3" pos:column="18">StoreEntry<pos:position pos:line="3" pos:column="28"/></name> <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type> <name pos:line="3" pos:column="31">entry<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>,
                 <parameter><decl><type><name pos:line="4" pos:column="18">IRCB<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type> <name pos:line="4" pos:column="25">callback<pos:position pos:line="4" pos:column="33"/></name></decl></parameter>,
                 <parameter><decl><type><name pos:line="5" pos:column="18">void<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">callback_data<pos:position pos:line="5" pos:column="37"/></name></decl></parameter>,
                 <parameter><decl><type><name pos:line="6" pos:column="18">int<pos:position pos:line="6" pos:column="21"/></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">exprep<pos:position pos:line="6" pos:column="29"/></name></decl></parameter>,
                 <parameter><decl><type><name pos:line="7" pos:column="18">int<pos:position pos:line="7" pos:column="21"/></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">timeout<pos:position pos:line="7" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="31"/></parameter_list>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">url<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><call><name><name pos:line="9" pos:column="23">entry<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">url<pos:position pos:line="9" pos:column="33"/></name></name><argument_list pos:line="9" pos:column="33">()<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">MemObject<pos:position pos:line="10" pos:column="14"/></name> <modifier pos:line="10" pos:column="15">*<pos:position pos:line="10" pos:column="16"/></modifier></type><name pos:line="10" pos:column="16">mem<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><name><name pos:line="10" pos:column="22">entry<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">-&gt;<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="29">mem_obj<pos:position pos:line="10" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">CachePeer<pos:position pos:line="11" pos:column="14"/></name> <modifier pos:line="11" pos:column="15">*<pos:position pos:line="11" pos:column="16"/></modifier></type><name pos:line="11" pos:column="16">p<pos:position pos:line="11" pos:column="17"/></name> <init pos:line="11" pos:column="18">= <expr><name pos:line="11" pos:column="20">NULL<pos:position pos:line="11" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">i<pos:position pos:line="12" pos:column="10"/></name></decl>;<pos:position pos:line="12" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">reqnum<pos:position pos:line="13" pos:column="15"/></name> <init pos:line="13" pos:column="16">= <expr><literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">flags<pos:position pos:line="14" pos:column="14"/></name></decl>;<pos:position pos:line="14" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">icp_common_t<pos:position pos:line="15" pos:column="17"/></name> <modifier pos:line="15" pos:column="18">*<pos:position pos:line="15" pos:column="19"/></modifier></type><name pos:line="15" pos:column="19">query<pos:position pos:line="15" pos:column="24"/></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">queries_sent<pos:position pos:line="16" pos:column="21"/></name> <init pos:line="16" pos:column="22">= <expr><literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">peers_pinged<pos:position pos:line="17" pos:column="21"/></name> <init pos:line="17" pos:column="22">= <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">parent_timeout<pos:position pos:line="18" pos:column="23"/></name> <init pos:line="18" pos:column="24">= <expr><literal type="number" pos:line="18" pos:column="26">0<pos:position pos:line="18" pos:column="27"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="18" pos:column="29">parent_exprep<pos:position pos:line="18" pos:column="42"/></name> <init pos:line="18" pos:column="43">= <expr><literal type="number" pos:line="18" pos:column="45">0<pos:position pos:line="18" pos:column="46"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">sibling_timeout<pos:position pos:line="19" pos:column="24"/></name> <init pos:line="19" pos:column="25">= <expr><literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="19" pos:column="30">sibling_exprep<pos:position pos:line="19" pos:column="44"/></name> <init pos:line="19" pos:column="45">= <expr><literal type="number" pos:line="19" pos:column="47">0<pos:position pos:line="19" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">int<pos:position pos:line="20" pos:column="8"/></name></type> <name pos:line="20" pos:column="9">mcast_timeout<pos:position pos:line="20" pos:column="22"/></name> <init pos:line="20" pos:column="23">= <expr><literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="28">mcast_exprep<pos:position pos:line="20" pos:column="40"/></name> <init pos:line="20" pos:column="41">= <expr><literal type="number" pos:line="20" pos:column="43">0<pos:position pos:line="20" pos:column="44"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="45"/></decl_stmt>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name><name pos:line="22" pos:column="9">Config<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">.<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="16">peers<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">==<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">NULL<pos:position pos:line="22" pos:column="29"/></name></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30">
        <block type="pseudo"><return pos:line="23" pos:column="9">return <expr><literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">assert<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><name><name pos:line="25" pos:column="12">entry<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">-&gt;<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="19">swap_status<pos:position pos:line="25" pos:column="30"/></name></name> <operator pos:line="25" pos:column="31">==<pos:position pos:line="25" pos:column="33"/></operator> <name pos:line="25" pos:column="34">SWAPOUT_NONE<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="27" pos:column="5">mem<pos:position pos:line="27" pos:column="8"/></name><operator pos:line="27" pos:column="8">-&gt;<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="10">start_ping<pos:position pos:line="27" pos:column="20"/></name></name> <operator pos:line="27" pos:column="21">=<pos:position pos:line="27" pos:column="22"/></operator> <name pos:line="27" pos:column="23">current_time<pos:position pos:line="27" pos:column="35"/></name></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="29" pos:column="5">mem<pos:position pos:line="29" pos:column="8"/></name><operator pos:line="29" pos:column="8">-&gt;<pos:position pos:line="29" pos:column="13"/></operator><name pos:line="29" pos:column="10">ping_reply_callback<pos:position pos:line="29" pos:column="29"/></name></name> <operator pos:line="29" pos:column="30">=<pos:position pos:line="29" pos:column="31"/></operator> <name pos:line="29" pos:column="32">callback<pos:position pos:line="29" pos:column="40"/></name></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="31" pos:column="5">mem<pos:position pos:line="31" pos:column="8"/></name><operator pos:line="31" pos:column="8">-&gt;<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="10">ircb_data<pos:position pos:line="31" pos:column="19"/></name></name> <operator pos:line="31" pos:column="20">=<pos:position pos:line="31" pos:column="21"/></operator> <name pos:line="31" pos:column="22">callback_data<pos:position pos:line="31" pos:column="35"/></name></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name pos:line="33" pos:column="5">reqnum<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <call><name pos:line="33" pos:column="14">icpSetCacheKey<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><operator pos:line="33" pos:column="29">(<pos:position pos:line="33" pos:column="30"/></operator><specifier pos:line="33" pos:column="30">const<pos:position pos:line="33" pos:column="35"/></specifier> <name pos:line="33" pos:column="36">cache_key<pos:position pos:line="33" pos:column="45"/></name> <operator pos:line="33" pos:column="46">*<pos:position pos:line="33" pos:column="47"/></operator><operator pos:line="33" pos:column="47">)<pos:position pos:line="33" pos:column="48"/></operator><name><name pos:line="33" pos:column="48">entry<pos:position pos:line="33" pos:column="53"/></name><operator pos:line="33" pos:column="53">-&gt;<pos:position pos:line="33" pos:column="58"/></operator><name pos:line="33" pos:column="55">key<pos:position pos:line="33" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="60"/></expr_stmt>

    <for pos:line="35" pos:column="5">for <control pos:line="35" pos:column="9">(<init><expr><name pos:line="35" pos:column="10">i<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <literal type="number" pos:line="35" pos:column="14">0<pos:position pos:line="35" pos:column="15"/></literal></expr><operator pos:line="35" pos:column="15">,<pos:position pos:line="35" pos:column="16"/></operator> <expr><name pos:line="35" pos:column="17">p<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">first_ping<pos:position pos:line="35" pos:column="31"/></name></expr>;<pos:position pos:line="35" pos:column="32"/></init> <condition><expr><name pos:line="35" pos:column="33">i<pos:position pos:line="35" pos:column="34"/></name><operator pos:line="35" pos:column="34">++<pos:position pos:line="35" pos:column="36"/></operator> <operator pos:line="35" pos:column="37">&lt;<pos:position pos:line="35" pos:column="41"/></operator> <name><name pos:line="35" pos:column="39">Config<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">.<pos:position pos:line="35" pos:column="46"/></operator><name pos:line="35" pos:column="46">npeers<pos:position pos:line="35" pos:column="52"/></name></name></expr>;<pos:position pos:line="35" pos:column="53"/></condition> <incr><expr><name pos:line="35" pos:column="54">p<pos:position pos:line="35" pos:column="55"/></name> <operator pos:line="35" pos:column="56">=<pos:position pos:line="35" pos:column="57"/></operator> <name><name pos:line="35" pos:column="58">p<pos:position pos:line="35" pos:column="59"/></name><operator pos:line="35" pos:column="59">-&gt;<pos:position pos:line="35" pos:column="64"/></operator><name pos:line="35" pos:column="61">next<pos:position pos:line="35" pos:column="65"/></name></name></expr></incr>)<pos:position pos:line="35" pos:column="66"/></control> <block pos:line="35" pos:column="67">{
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">p<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">==<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">NULL<pos:position pos:line="36" pos:column="22"/></name></expr>)<pos:position pos:line="36" pos:column="23"/></condition><then pos:line="36" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="13">p<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <name><name pos:line="37" pos:column="17">Config<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">.<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="24">peers<pos:position pos:line="37" pos:column="29"/></name></name></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">15<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="20">5<pos:position pos:line="39" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="23">"neighborsUdpPing: Peer "<pos:position pos:line="39" pos:column="48"/></literal> <operator pos:line="39" pos:column="49">&lt;&lt;<pos:position pos:line="39" pos:column="57"/></operator> <name><name pos:line="39" pos:column="52">p<pos:position pos:line="39" pos:column="53"/></name><operator pos:line="39" pos:column="53">-&gt;<pos:position pos:line="39" pos:column="58"/></operator><name pos:line="39" pos:column="55">host<pos:position pos:line="39" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="61"/></expr_stmt>

        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><operator pos:line="41" pos:column="13">!<pos:position pos:line="41" pos:column="14"/></operator><call><name pos:line="41" pos:column="14">peerWouldBePinged<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">p<pos:position pos:line="41" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="35">request<pos:position pos:line="41" pos:column="42"/></name></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="44"/></condition><then pos:line="41" pos:column="44">
            <block type="pseudo"><continue pos:line="42" pos:column="13">continue;<pos:position pos:line="42" pos:column="22"/></continue></block></then></if>		<comment type="block" pos:line="42" pos:column="33">/* next CachePeer */</comment>

        <expr_stmt><expr><operator pos:line="44" pos:column="9">++<pos:position pos:line="44" pos:column="11"/></operator><name pos:line="44" pos:column="11">peers_pinged<pos:position pos:line="44" pos:column="23"/></name></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="46" pos:column="9">debugs<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><literal type="number" pos:line="46" pos:column="16">15<pos:position pos:line="46" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="20">4<pos:position pos:line="46" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="23">"neighborsUdpPing: pinging peer "<pos:position pos:line="46" pos:column="56"/></literal> <operator pos:line="46" pos:column="57">&lt;&lt;<pos:position pos:line="46" pos:column="65"/></operator> <name><name pos:line="46" pos:column="60">p<pos:position pos:line="46" pos:column="61"/></name><operator pos:line="46" pos:column="61">-&gt;<pos:position pos:line="46" pos:column="66"/></operator><name pos:line="46" pos:column="63">host<pos:position pos:line="46" pos:column="67"/></name></name> <operator pos:line="46" pos:column="68">&lt;&lt;<pos:position pos:line="46" pos:column="76"/></operator> <literal type="string" pos:line="46" pos:column="71">" for '"<pos:position pos:line="46" pos:column="79"/></literal> <operator pos:line="46" pos:column="80">&lt;&lt;<pos:position pos:line="46" pos:column="88"/></operator> <name pos:line="46" pos:column="83">url<pos:position pos:line="46" pos:column="86"/></name> <operator pos:line="46" pos:column="87">&lt;&lt;<pos:position pos:line="46" pos:column="95"/></operator> <literal type="string" pos:line="46" pos:column="90">"'"<pos:position pos:line="46" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="95"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="48" pos:column="9">debugs<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><literal type="number" pos:line="48" pos:column="16">15<pos:position pos:line="48" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="20">3<pos:position pos:line="48" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="23">"neighborsUdpPing: key = '"<pos:position pos:line="48" pos:column="50"/></literal> <operator pos:line="48" pos:column="51">&lt;&lt;<pos:position pos:line="48" pos:column="59"/></operator> <call><name><name pos:line="48" pos:column="54">entry<pos:position pos:line="48" pos:column="59"/></name><operator pos:line="48" pos:column="59">-&gt;<pos:position pos:line="48" pos:column="64"/></operator><name pos:line="48" pos:column="61">getMD5Text<pos:position pos:line="48" pos:column="71"/></name></name><argument_list pos:line="48" pos:column="71">()<pos:position pos:line="48" pos:column="73"/></argument_list></call> <operator pos:line="48" pos:column="74">&lt;&lt;<pos:position pos:line="48" pos:column="82"/></operator> <literal type="string" pos:line="48" pos:column="77">"'"<pos:position pos:line="48" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="82"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="50" pos:column="9">debugs<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><literal type="number" pos:line="50" pos:column="16">15<pos:position pos:line="50" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="20">3<pos:position pos:line="50" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="23">"neighborsUdpPing: reqnum = "<pos:position pos:line="50" pos:column="52"/></literal> <operator pos:line="50" pos:column="53">&lt;&lt;<pos:position pos:line="50" pos:column="61"/></operator> <name pos:line="50" pos:column="56">reqnum<pos:position pos:line="50" pos:column="62"/></name></expr></argument>)<pos:position pos:line="50" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="64"/></expr_stmt>

<cpp:if pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">if<pos:position pos:line="52" pos:column="4"/></cpp:directive> <expr><name pos:line="52" pos:column="5">USE_HTCP<pos:position pos:line="52" pos:column="13"/></name></expr></cpp:if>
        <if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">p<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">-&gt;<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="16">options<pos:position pos:line="53" pos:column="23"/></name><operator pos:line="53" pos:column="23">.<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="24">htcp<pos:position pos:line="53" pos:column="28"/></name></name> <operator pos:line="53" pos:column="29">&amp;&amp;<pos:position pos:line="53" pos:column="39"/></operator> <operator pos:line="53" pos:column="32">!<pos:position pos:line="53" pos:column="33"/></operator><name><name pos:line="53" pos:column="33">p<pos:position pos:line="53" pos:column="34"/></name><operator pos:line="53" pos:column="34">-&gt;<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="36">options<pos:position pos:line="53" pos:column="43"/></name><operator pos:line="53" pos:column="43">.<pos:position pos:line="53" pos:column="44"/></operator><name pos:line="53" pos:column="44">htcp_only_clr<pos:position pos:line="53" pos:column="57"/></name></name></expr>)<pos:position pos:line="53" pos:column="58"/></condition><then pos:line="53" pos:column="58"> <block pos:line="53" pos:column="59">{
            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><name><name pos:line="54" pos:column="17">Config<pos:position pos:line="54" pos:column="23"/></name><operator pos:line="54" pos:column="23">.<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="24">Port<pos:position pos:line="54" pos:column="28"/></name><operator pos:line="54" pos:column="28">.<pos:position pos:line="54" pos:column="29"/></operator><name pos:line="54" pos:column="29">htcp<pos:position pos:line="54" pos:column="33"/></name></name> <operator pos:line="54" pos:column="34">&lt;=<pos:position pos:line="54" pos:column="39"/></operator> <literal type="number" pos:line="54" pos:column="37">0<pos:position pos:line="54" pos:column="38"/></literal></expr>)<pos:position pos:line="54" pos:column="39"/></condition><then pos:line="54" pos:column="39"> <block pos:line="54" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="55" pos:column="17">debugs<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><literal type="number" pos:line="55" pos:column="24">15<pos:position pos:line="55" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="28">DBG_CRITICAL<pos:position pos:line="55" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="42">"HTCP is disabled! Cannot send HTCP request to peer."<pos:position pos:line="55" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="97"/></expr_stmt>
                <continue pos:line="56" pos:column="17">continue;<pos:position pos:line="56" pos:column="26"/></continue>
            }<pos:position pos:line="57" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="59" pos:column="13">debugs<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><literal type="number" pos:line="59" pos:column="20">15<pos:position pos:line="59" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="24">3<pos:position pos:line="59" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="27">"neighborsUdpPing: sending HTCP query"<pos:position pos:line="59" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="67"/></expr_stmt>
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><call><name pos:line="60" pos:column="17">htcpQuery<pos:position pos:line="60" pos:column="26"/></name><argument_list pos:line="60" pos:column="26">(<argument><expr><name pos:line="60" pos:column="27">entry<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="34">request<pos:position pos:line="60" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="43">p<pos:position pos:line="60" pos:column="44"/></name></expr></argument>)<pos:position pos:line="60" pos:column="45"/></argument_list></call> <operator pos:line="60" pos:column="46">&lt;=<pos:position pos:line="60" pos:column="51"/></operator> <literal type="number" pos:line="60" pos:column="49">0<pos:position pos:line="60" pos:column="50"/></literal></expr>)<pos:position pos:line="60" pos:column="51"/></condition><then pos:line="60" pos:column="51">
                <block type="pseudo"><continue pos:line="61" pos:column="17">continue;<pos:position pos:line="61" pos:column="26"/></continue></block></then></if> <comment type="line" pos:line="61" pos:column="27">// unable to send.</comment>
        }<pos:position pos:line="62" pos:column="10"/></block></then> <else pos:line="62" pos:column="11">else
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="64" pos:column="9">{
            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><name><name pos:line="65" pos:column="17">Config<pos:position pos:line="65" pos:column="23"/></name><operator pos:line="65" pos:column="23">.<pos:position pos:line="65" pos:column="24"/></operator><name pos:line="65" pos:column="24">Port<pos:position pos:line="65" pos:column="28"/></name><operator pos:line="65" pos:column="28">.<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="29">icp<pos:position pos:line="65" pos:column="32"/></name></name> <operator pos:line="65" pos:column="33">&lt;=<pos:position pos:line="65" pos:column="38"/></operator> <literal type="number" pos:line="65" pos:column="36">0<pos:position pos:line="65" pos:column="37"/></literal> <operator pos:line="65" pos:column="38">||<pos:position pos:line="65" pos:column="40"/></operator> <operator pos:line="65" pos:column="41">!<pos:position pos:line="65" pos:column="42"/></operator><call><name><name pos:line="65" pos:column="42">Comm<pos:position pos:line="65" pos:column="46"/></name><operator pos:line="65" pos:column="46">::<pos:position pos:line="65" pos:column="48"/></operator><name pos:line="65" pos:column="48">IsConnOpen<pos:position pos:line="65" pos:column="58"/></name></name><argument_list pos:line="65" pos:column="58">(<argument><expr><name pos:line="65" pos:column="59">icpOutgoingConn<pos:position pos:line="65" pos:column="74"/></name></expr></argument>)<pos:position pos:line="65" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="76"/></condition><then pos:line="65" pos:column="76"> <block pos:line="65" pos:column="77">{
                <expr_stmt><expr><call><name pos:line="66" pos:column="17">debugs<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><literal type="number" pos:line="66" pos:column="24">15<pos:position pos:line="66" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="28">DBG_CRITICAL<pos:position pos:line="66" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="42">"ICP is disabled! Cannot send ICP request to peer."<pos:position pos:line="66" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="95"/></expr_stmt>
                <continue pos:line="67" pos:column="17">continue;<pos:position pos:line="67" pos:column="26"/></continue>
            }<pos:position pos:line="68" pos:column="14"/></block></then> <else pos:line="68" pos:column="15">else <block pos:line="68" pos:column="20">{

                <if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name><name pos:line="70" pos:column="21">p<pos:position pos:line="70" pos:column="22"/></name><operator pos:line="70" pos:column="22">-&gt;<pos:position pos:line="70" pos:column="27"/></operator><name pos:line="70" pos:column="24">type<pos:position pos:line="70" pos:column="28"/></name></name> <operator pos:line="70" pos:column="29">==<pos:position pos:line="70" pos:column="31"/></operator> <name pos:line="70" pos:column="32">PEER_MULTICAST<pos:position pos:line="70" pos:column="46"/></name></expr>)<pos:position pos:line="70" pos:column="47"/></condition><then pos:line="70" pos:column="47">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="21">mcastSetTtl<pos:position pos:line="71" pos:column="32"/></name><argument_list pos:line="71" pos:column="32">(<argument><expr><name><name pos:line="71" pos:column="33">icpOutgoingConn<pos:position pos:line="71" pos:column="48"/></name><operator pos:line="71" pos:column="48">-&gt;<pos:position pos:line="71" pos:column="53"/></operator><name pos:line="71" pos:column="50">fd<pos:position pos:line="71" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="54">p<pos:position pos:line="71" pos:column="55"/></name><operator pos:line="71" pos:column="55">-&gt;<pos:position pos:line="71" pos:column="60"/></operator><name pos:line="71" pos:column="57">mcast<pos:position pos:line="71" pos:column="62"/></name><operator pos:line="71" pos:column="62">.<pos:position pos:line="71" pos:column="63"/></operator><name pos:line="71" pos:column="63">ttl<pos:position pos:line="71" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="68"/></expr_stmt></block></then></if>

                <if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name><name pos:line="73" pos:column="21">p<pos:position pos:line="73" pos:column="22"/></name><operator pos:line="73" pos:column="22">-&gt;<pos:position pos:line="73" pos:column="27"/></operator><name pos:line="73" pos:column="24">icp<pos:position pos:line="73" pos:column="27"/></name><operator pos:line="73" pos:column="27">.<pos:position pos:line="73" pos:column="28"/></operator><name pos:line="73" pos:column="28">port<pos:position pos:line="73" pos:column="32"/></name></name> <operator pos:line="73" pos:column="33">==<pos:position pos:line="73" pos:column="35"/></operator> <name pos:line="73" pos:column="36">echo_port<pos:position pos:line="73" pos:column="45"/></name></expr>)<pos:position pos:line="73" pos:column="46"/></condition><then pos:line="73" pos:column="46"> <block pos:line="73" pos:column="47">{
                    <expr_stmt><expr><call><name pos:line="74" pos:column="21">debugs<pos:position pos:line="74" pos:column="27"/></name><argument_list pos:line="74" pos:column="27">(<argument><expr><literal type="number" pos:line="74" pos:column="28">15<pos:position pos:line="74" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="32">4<pos:position pos:line="74" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="35">"neighborsUdpPing: Looks like a dumb cache, send DECHO ping"<pos:position pos:line="74" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="97"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="75" pos:column="21">query<pos:position pos:line="75" pos:column="26"/></name> <operator pos:line="75" pos:column="27">=<pos:position pos:line="75" pos:column="28"/></operator> <call><name><name pos:line="75" pos:column="29">_icp_common_t<pos:position pos:line="75" pos:column="42"/></name><operator pos:line="75" pos:column="42">::<pos:position pos:line="75" pos:column="44"/></operator><name pos:line="75" pos:column="44">createMessage<pos:position pos:line="75" pos:column="57"/></name></name><argument_list pos:line="75" pos:column="57">(<argument><expr><name pos:line="75" pos:column="58">ICP_DECHO<pos:position pos:line="75" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="69">0<pos:position pos:line="75" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="72">url<pos:position pos:line="75" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="77">reqnum<pos:position pos:line="75" pos:column="83"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="85">0<pos:position pos:line="75" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="88"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="76" pos:column="21">icpUdpSend<pos:position pos:line="76" pos:column="31"/></name><argument_list pos:line="76" pos:column="31">(<argument><expr><name><name pos:line="76" pos:column="32">icpOutgoingConn<pos:position pos:line="76" pos:column="47"/></name><operator pos:line="76" pos:column="47">-&gt;<pos:position pos:line="76" pos:column="52"/></operator><name pos:line="76" pos:column="49">fd<pos:position pos:line="76" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="53">p<pos:position pos:line="76" pos:column="54"/></name><operator pos:line="76" pos:column="54">-&gt;<pos:position pos:line="76" pos:column="59"/></operator><name pos:line="76" pos:column="56">in_addr<pos:position pos:line="76" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="65">query<pos:position pos:line="76" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="72">LOG_ICP_QUERY<pos:position pos:line="76" pos:column="85"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="87">0<pos:position pos:line="76" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="90"/></expr_stmt>
                }<pos:position pos:line="77" pos:column="18"/></block></then> <else pos:line="77" pos:column="19">else <block pos:line="77" pos:column="24">{
                    <expr_stmt><expr><name pos:line="78" pos:column="21">flags<pos:position pos:line="78" pos:column="26"/></name> <operator pos:line="78" pos:column="27">=<pos:position pos:line="78" pos:column="28"/></operator> <literal type="number" pos:line="78" pos:column="29">0<pos:position pos:line="78" pos:column="30"/></literal></expr>;<pos:position pos:line="78" pos:column="31"/></expr_stmt>

                    <if pos:line="80" pos:column="21">if <condition pos:line="80" pos:column="24">(<expr><name><name pos:line="80" pos:column="25">Config<pos:position pos:line="80" pos:column="31"/></name><operator pos:line="80" pos:column="31">.<pos:position pos:line="80" pos:column="32"/></operator><name pos:line="80" pos:column="32">onoff<pos:position pos:line="80" pos:column="37"/></name><operator pos:line="80" pos:column="37">.<pos:position pos:line="80" pos:column="38"/></operator><name pos:line="80" pos:column="38">query_icmp<pos:position pos:line="80" pos:column="48"/></name></name></expr>)<pos:position pos:line="80" pos:column="49"/></condition><then pos:line="80" pos:column="49">
                        <block type="pseudo"><if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><name><name pos:line="81" pos:column="29">p<pos:position pos:line="81" pos:column="30"/></name><operator pos:line="81" pos:column="30">-&gt;<pos:position pos:line="81" pos:column="35"/></operator><name pos:line="81" pos:column="32">icp<pos:position pos:line="81" pos:column="35"/></name><operator pos:line="81" pos:column="35">.<pos:position pos:line="81" pos:column="36"/></operator><name pos:line="81" pos:column="36">version<pos:position pos:line="81" pos:column="43"/></name></name> <operator pos:line="81" pos:column="44">==<pos:position pos:line="81" pos:column="46"/></operator> <name pos:line="81" pos:column="47">ICP_VERSION_2<pos:position pos:line="81" pos:column="60"/></name></expr>)<pos:position pos:line="81" pos:column="61"/></condition><then pos:line="81" pos:column="61">
                            <block type="pseudo"><expr_stmt><expr><name pos:line="82" pos:column="29">flags<pos:position pos:line="82" pos:column="34"/></name> <operator pos:line="82" pos:column="35">|=<pos:position pos:line="82" pos:column="37"/></operator> <name pos:line="82" pos:column="38">ICP_FLAG_SRC_RTT<pos:position pos:line="82" pos:column="54"/></name></expr>;<pos:position pos:line="82" pos:column="55"/></expr_stmt></block></then></if></block></then></if>

                    <expr_stmt><expr><name pos:line="84" pos:column="21">query<pos:position pos:line="84" pos:column="26"/></name> <operator pos:line="84" pos:column="27">=<pos:position pos:line="84" pos:column="28"/></operator> <call><name><name pos:line="84" pos:column="29">_icp_common_t<pos:position pos:line="84" pos:column="42"/></name><operator pos:line="84" pos:column="42">::<pos:position pos:line="84" pos:column="44"/></operator><name pos:line="84" pos:column="44">createMessage<pos:position pos:line="84" pos:column="57"/></name></name><argument_list pos:line="84" pos:column="57">(<argument><expr><name pos:line="84" pos:column="58">ICP_QUERY<pos:position pos:line="84" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="69">flags<pos:position pos:line="84" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="76">url<pos:position pos:line="84" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="81">reqnum<pos:position pos:line="84" pos:column="87"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="89">0<pos:position pos:line="84" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="92"/></expr_stmt>

                    <expr_stmt><expr><call><name pos:line="86" pos:column="21">icpUdpSend<pos:position pos:line="86" pos:column="31"/></name><argument_list pos:line="86" pos:column="31">(<argument><expr><name><name pos:line="86" pos:column="32">icpOutgoingConn<pos:position pos:line="86" pos:column="47"/></name><operator pos:line="86" pos:column="47">-&gt;<pos:position pos:line="86" pos:column="52"/></operator><name pos:line="86" pos:column="49">fd<pos:position pos:line="86" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="53">p<pos:position pos:line="86" pos:column="54"/></name><operator pos:line="86" pos:column="54">-&gt;<pos:position pos:line="86" pos:column="59"/></operator><name pos:line="86" pos:column="56">in_addr<pos:position pos:line="86" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="65">query<pos:position pos:line="86" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="72">LOG_ICP_QUERY<pos:position pos:line="86" pos:column="85"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="87">0<pos:position pos:line="86" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="90"/></expr_stmt>
                }<pos:position pos:line="87" pos:column="18"/></block></else></if>
            }<pos:position pos:line="88" pos:column="14"/></block></else></if>
        }<pos:position pos:line="89" pos:column="10"/></block></else></if>

        <expr_stmt><expr><operator pos:line="91" pos:column="9">++<pos:position pos:line="91" pos:column="11"/></operator><name pos:line="91" pos:column="11">queries_sent<pos:position pos:line="91" pos:column="23"/></name></expr>;<pos:position pos:line="91" pos:column="24"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="93" pos:column="9">++<pos:position pos:line="93" pos:column="11"/></operator> <name><name pos:line="93" pos:column="12">p<pos:position pos:line="93" pos:column="13"/></name><operator pos:line="93" pos:column="13">-&gt;<pos:position pos:line="93" pos:column="18"/></operator><name pos:line="93" pos:column="15">stats<pos:position pos:line="93" pos:column="20"/></name><operator pos:line="93" pos:column="20">.<pos:position pos:line="93" pos:column="21"/></operator><name pos:line="93" pos:column="21">pings_sent<pos:position pos:line="93" pos:column="31"/></name></name></expr>;<pos:position pos:line="93" pos:column="32"/></expr_stmt>

        <if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><name><name pos:line="95" pos:column="13">p<pos:position pos:line="95" pos:column="14"/></name><operator pos:line="95" pos:column="14">-&gt;<pos:position pos:line="95" pos:column="19"/></operator><name pos:line="95" pos:column="16">type<pos:position pos:line="95" pos:column="20"/></name></name> <operator pos:line="95" pos:column="21">==<pos:position pos:line="95" pos:column="23"/></operator> <name pos:line="95" pos:column="24">PEER_MULTICAST<pos:position pos:line="95" pos:column="38"/></name></expr>)<pos:position pos:line="95" pos:column="39"/></condition><then pos:line="95" pos:column="39"> <block pos:line="95" pos:column="40">{
            <expr_stmt><expr><name pos:line="96" pos:column="13">mcast_exprep<pos:position pos:line="96" pos:column="25"/></name> <operator pos:line="96" pos:column="26">+=<pos:position pos:line="96" pos:column="28"/></operator> <name><name pos:line="96" pos:column="29">p<pos:position pos:line="96" pos:column="30"/></name><operator pos:line="96" pos:column="30">-&gt;<pos:position pos:line="96" pos:column="35"/></operator><name pos:line="96" pos:column="32">mcast<pos:position pos:line="96" pos:column="37"/></name><operator pos:line="96" pos:column="37">.<pos:position pos:line="96" pos:column="38"/></operator><name pos:line="96" pos:column="38">n_replies_expected<pos:position pos:line="96" pos:column="56"/></name></name></expr>;<pos:position pos:line="96" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name pos:line="97" pos:column="13">mcast_timeout<pos:position pos:line="97" pos:column="26"/></name> <operator pos:line="97" pos:column="27">+=<pos:position pos:line="97" pos:column="29"/></operator> <operator pos:line="97" pos:column="30">(<pos:position pos:line="97" pos:column="31"/></operator><name><name pos:line="97" pos:column="31">p<pos:position pos:line="97" pos:column="32"/></name><operator pos:line="97" pos:column="32">-&gt;<pos:position pos:line="97" pos:column="37"/></operator><name pos:line="97" pos:column="34">stats<pos:position pos:line="97" pos:column="39"/></name><operator pos:line="97" pos:column="39">.<pos:position pos:line="97" pos:column="40"/></operator><name pos:line="97" pos:column="40">rtt<pos:position pos:line="97" pos:column="43"/></name></name> <operator pos:line="97" pos:column="44">*<pos:position pos:line="97" pos:column="45"/></operator> <name><name pos:line="97" pos:column="46">p<pos:position pos:line="97" pos:column="47"/></name><operator pos:line="97" pos:column="47">-&gt;<pos:position pos:line="97" pos:column="52"/></operator><name pos:line="97" pos:column="49">mcast<pos:position pos:line="97" pos:column="54"/></name><operator pos:line="97" pos:column="54">.<pos:position pos:line="97" pos:column="55"/></operator><name pos:line="97" pos:column="55">n_replies_expected<pos:position pos:line="97" pos:column="73"/></name></name><operator pos:line="97" pos:column="73">)<pos:position pos:line="97" pos:column="74"/></operator></expr>;<pos:position pos:line="97" pos:column="75"/></expr_stmt>
        }<pos:position pos:line="98" pos:column="10"/></block></then> <elseif pos:line="98" pos:column="11">else <if pos:line="98" pos:column="16">if <condition pos:line="98" pos:column="19">(<expr><call><name pos:line="98" pos:column="20">neighborUp<pos:position pos:line="98" pos:column="30"/></name><argument_list pos:line="98" pos:column="30">(<argument><expr><name pos:line="98" pos:column="31">p<pos:position pos:line="98" pos:column="32"/></name></expr></argument>)<pos:position pos:line="98" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="34"/></condition><then pos:line="98" pos:column="34"> <block pos:line="98" pos:column="35">{
            <comment type="block" pos:line="99" pos:column="13">/* its alive, expect a reply from it */</comment>

            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><call><name pos:line="101" pos:column="17">neighborType<pos:position pos:line="101" pos:column="29"/></name><argument_list pos:line="101" pos:column="29">(<argument><expr><name pos:line="101" pos:column="30">p<pos:position pos:line="101" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="33">request<pos:position pos:line="101" pos:column="40"/></name></expr></argument>)<pos:position pos:line="101" pos:column="41"/></argument_list></call> <operator pos:line="101" pos:column="42">==<pos:position pos:line="101" pos:column="44"/></operator> <name pos:line="101" pos:column="45">PEER_PARENT<pos:position pos:line="101" pos:column="56"/></name></expr>)<pos:position pos:line="101" pos:column="57"/></condition><then pos:line="101" pos:column="57"> <block pos:line="101" pos:column="58">{
                <expr_stmt><expr><operator pos:line="102" pos:column="17">++<pos:position pos:line="102" pos:column="19"/></operator><name pos:line="102" pos:column="19">parent_exprep<pos:position pos:line="102" pos:column="32"/></name></expr>;<pos:position pos:line="102" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name pos:line="103" pos:column="17">parent_timeout<pos:position pos:line="103" pos:column="31"/></name> <operator pos:line="103" pos:column="32">+=<pos:position pos:line="103" pos:column="34"/></operator> <name><name pos:line="103" pos:column="35">p<pos:position pos:line="103" pos:column="36"/></name><operator pos:line="103" pos:column="36">-&gt;<pos:position pos:line="103" pos:column="41"/></operator><name pos:line="103" pos:column="38">stats<pos:position pos:line="103" pos:column="43"/></name><operator pos:line="103" pos:column="43">.<pos:position pos:line="103" pos:column="44"/></operator><name pos:line="103" pos:column="44">rtt<pos:position pos:line="103" pos:column="47"/></name></name></expr>;<pos:position pos:line="103" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="104" pos:column="14"/></block></then> <else pos:line="104" pos:column="15">else <block pos:line="104" pos:column="20">{
                <expr_stmt><expr><operator pos:line="105" pos:column="17">++<pos:position pos:line="105" pos:column="19"/></operator><name pos:line="105" pos:column="19">sibling_exprep<pos:position pos:line="105" pos:column="33"/></name></expr>;<pos:position pos:line="105" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name pos:line="106" pos:column="17">sibling_timeout<pos:position pos:line="106" pos:column="32"/></name> <operator pos:line="106" pos:column="33">+=<pos:position pos:line="106" pos:column="35"/></operator> <name><name pos:line="106" pos:column="36">p<pos:position pos:line="106" pos:column="37"/></name><operator pos:line="106" pos:column="37">-&gt;<pos:position pos:line="106" pos:column="42"/></operator><name pos:line="106" pos:column="39">stats<pos:position pos:line="106" pos:column="44"/></name><operator pos:line="106" pos:column="44">.<pos:position pos:line="106" pos:column="45"/></operator><name pos:line="106" pos:column="45">rtt<pos:position pos:line="106" pos:column="48"/></name></name></expr>;<pos:position pos:line="106" pos:column="49"/></expr_stmt>
            }<pos:position pos:line="107" pos:column="14"/></block></else></if>
        }<pos:position pos:line="108" pos:column="10"/></block></then></if></elseif> <else pos:line="108" pos:column="11">else <block pos:line="108" pos:column="16">{
            <comment type="block" pos:line="109" pos:column="13">/* Neighbor is dead; ping it anyway, but don't expect a reply */</comment>
            <comment type="block" pos:line="110" pos:column="13">/* log it once at the threshold */</comment>

            <if pos:line="112" pos:column="13">if <condition pos:line="112" pos:column="16">(<expr><name><name pos:line="112" pos:column="17">p<pos:position pos:line="112" pos:column="18"/></name><operator pos:line="112" pos:column="18">-&gt;<pos:position pos:line="112" pos:column="23"/></operator><name pos:line="112" pos:column="20">stats<pos:position pos:line="112" pos:column="25"/></name><operator pos:line="112" pos:column="25">.<pos:position pos:line="112" pos:column="26"/></operator><name pos:line="112" pos:column="26">logged_state<pos:position pos:line="112" pos:column="38"/></name></name> <operator pos:line="112" pos:column="39">==<pos:position pos:line="112" pos:column="41"/></operator> <name pos:line="112" pos:column="42">PEER_ALIVE<pos:position pos:line="112" pos:column="52"/></name></expr>)<pos:position pos:line="112" pos:column="53"/></condition><then pos:line="112" pos:column="53"> <block pos:line="112" pos:column="54">{
                <expr_stmt><expr><call><name pos:line="113" pos:column="17">debugs<pos:position pos:line="113" pos:column="23"/></name><argument_list pos:line="113" pos:column="23">(<argument><expr><literal type="number" pos:line="113" pos:column="24">15<pos:position pos:line="113" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="28">DBG_IMPORTANT<pos:position pos:line="113" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="43">"Detected DEAD "<pos:position pos:line="113" pos:column="59"/></literal> <operator pos:line="113" pos:column="60">&lt;&lt;<pos:position pos:line="113" pos:column="68"/></operator> <call><name pos:line="113" pos:column="63">neighborTypeStr<pos:position pos:line="113" pos:column="78"/></name><argument_list pos:line="113" pos:column="78">(<argument><expr><name pos:line="113" pos:column="79">p<pos:position pos:line="113" pos:column="80"/></name></expr></argument>)<pos:position pos:line="113" pos:column="81"/></argument_list></call> <operator pos:line="113" pos:column="82">&lt;&lt;<pos:position pos:line="113" pos:column="90"/></operator> <literal type="string" pos:line="113" pos:column="85">": "<pos:position pos:line="113" pos:column="89"/></literal> <operator pos:line="113" pos:column="90">&lt;&lt;<pos:position pos:line="113" pos:column="98"/></operator> <name><name pos:line="113" pos:column="93">p<pos:position pos:line="113" pos:column="94"/></name><operator pos:line="113" pos:column="94">-&gt;<pos:position pos:line="113" pos:column="99"/></operator><name pos:line="113" pos:column="96">name<pos:position pos:line="113" pos:column="100"/></name></name></expr></argument>)<pos:position pos:line="113" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="102"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="114" pos:column="17">p<pos:position pos:line="114" pos:column="18"/></name><operator pos:line="114" pos:column="18">-&gt;<pos:position pos:line="114" pos:column="23"/></operator><name pos:line="114" pos:column="20">stats<pos:position pos:line="114" pos:column="25"/></name><operator pos:line="114" pos:column="25">.<pos:position pos:line="114" pos:column="26"/></operator><name pos:line="114" pos:column="26">logged_state<pos:position pos:line="114" pos:column="38"/></name></name> <operator pos:line="114" pos:column="39">=<pos:position pos:line="114" pos:column="40"/></operator> <name pos:line="114" pos:column="41">PEER_DEAD<pos:position pos:line="114" pos:column="50"/></name></expr>;<pos:position pos:line="114" pos:column="51"/></expr_stmt>
            }<pos:position pos:line="115" pos:column="14"/></block></then></if>
        }<pos:position pos:line="116" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name><name pos:line="118" pos:column="9">p<pos:position pos:line="118" pos:column="10"/></name><operator pos:line="118" pos:column="10">-&gt;<pos:position pos:line="118" pos:column="15"/></operator><name pos:line="118" pos:column="12">stats<pos:position pos:line="118" pos:column="17"/></name><operator pos:line="118" pos:column="17">.<pos:position pos:line="118" pos:column="18"/></operator><name pos:line="118" pos:column="18">last_query<pos:position pos:line="118" pos:column="28"/></name></name> <operator pos:line="118" pos:column="29">=<pos:position pos:line="118" pos:column="30"/></operator> <name pos:line="118" pos:column="31">squid_curtime<pos:position pos:line="118" pos:column="44"/></name></expr>;<pos:position pos:line="118" pos:column="45"/></expr_stmt>

        <comment type="block" pos:line="120" pos:column="9">/*
         * keep probe_start == 0 for a multicast CachePeer,
         * so neighborUp() never says this CachePeer is dead.
         */</comment>

        <if pos:line="125" pos:column="9">if <condition pos:line="125" pos:column="12">(<expr><operator pos:line="125" pos:column="13">(<pos:position pos:line="125" pos:column="14"/></operator><name><name pos:line="125" pos:column="14">p<pos:position pos:line="125" pos:column="15"/></name><operator pos:line="125" pos:column="15">-&gt;<pos:position pos:line="125" pos:column="20"/></operator><name pos:line="125" pos:column="17">type<pos:position pos:line="125" pos:column="21"/></name></name> <operator pos:line="125" pos:column="22">!=<pos:position pos:line="125" pos:column="24"/></operator> <name pos:line="125" pos:column="25">PEER_MULTICAST<pos:position pos:line="125" pos:column="39"/></name><operator pos:line="125" pos:column="39">)<pos:position pos:line="125" pos:column="40"/></operator> <operator pos:line="125" pos:column="41">&amp;&amp;<pos:position pos:line="125" pos:column="51"/></operator> <operator pos:line="125" pos:column="44">(<pos:position pos:line="125" pos:column="45"/></operator><name><name pos:line="125" pos:column="45">p<pos:position pos:line="125" pos:column="46"/></name><operator pos:line="125" pos:column="46">-&gt;<pos:position pos:line="125" pos:column="51"/></operator><name pos:line="125" pos:column="48">stats<pos:position pos:line="125" pos:column="53"/></name><operator pos:line="125" pos:column="53">.<pos:position pos:line="125" pos:column="54"/></operator><name pos:line="125" pos:column="54">probe_start<pos:position pos:line="125" pos:column="65"/></name></name> <operator pos:line="125" pos:column="66">==<pos:position pos:line="125" pos:column="68"/></operator> <literal type="number" pos:line="125" pos:column="69">0<pos:position pos:line="125" pos:column="70"/></literal><operator pos:line="125" pos:column="70">)<pos:position pos:line="125" pos:column="71"/></operator></expr>)<pos:position pos:line="125" pos:column="72"/></condition><then pos:line="125" pos:column="72">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="126" pos:column="13">p<pos:position pos:line="126" pos:column="14"/></name><operator pos:line="126" pos:column="14">-&gt;<pos:position pos:line="126" pos:column="19"/></operator><name pos:line="126" pos:column="16">stats<pos:position pos:line="126" pos:column="21"/></name><operator pos:line="126" pos:column="21">.<pos:position pos:line="126" pos:column="22"/></operator><name pos:line="126" pos:column="22">probe_start<pos:position pos:line="126" pos:column="33"/></name></name> <operator pos:line="126" pos:column="34">=<pos:position pos:line="126" pos:column="35"/></operator> <name pos:line="126" pos:column="36">squid_curtime<pos:position pos:line="126" pos:column="49"/></name></expr>;<pos:position pos:line="126" pos:column="50"/></expr_stmt></block></then></if>
    }<pos:position pos:line="127" pos:column="6"/></block></for>

    <if pos:line="129" pos:column="5">if <condition pos:line="129" pos:column="8">(<expr><operator pos:line="129" pos:column="9">(<pos:position pos:line="129" pos:column="10"/></operator><name pos:line="129" pos:column="10">first_ping<pos:position pos:line="129" pos:column="20"/></name> <operator pos:line="129" pos:column="21">=<pos:position pos:line="129" pos:column="22"/></operator> <name><name pos:line="129" pos:column="23">first_ping<pos:position pos:line="129" pos:column="33"/></name><operator pos:line="129" pos:column="33">-&gt;<pos:position pos:line="129" pos:column="38"/></operator><name pos:line="129" pos:column="35">next<pos:position pos:line="129" pos:column="39"/></name></name><operator pos:line="129" pos:column="39">)<pos:position pos:line="129" pos:column="40"/></operator> <operator pos:line="129" pos:column="41">==<pos:position pos:line="129" pos:column="43"/></operator> <name pos:line="129" pos:column="44">NULL<pos:position pos:line="129" pos:column="48"/></name></expr>)<pos:position pos:line="129" pos:column="49"/></condition><then pos:line="129" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><name pos:line="130" pos:column="9">first_ping<pos:position pos:line="130" pos:column="19"/></name> <operator pos:line="130" pos:column="20">=<pos:position pos:line="130" pos:column="21"/></operator> <name><name pos:line="130" pos:column="22">Config<pos:position pos:line="130" pos:column="28"/></name><operator pos:line="130" pos:column="28">.<pos:position pos:line="130" pos:column="29"/></operator><name pos:line="130" pos:column="29">peers<pos:position pos:line="130" pos:column="34"/></name></name></expr>;<pos:position pos:line="130" pos:column="35"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="132" pos:column="5">/*
     * How many replies to expect?
     */</comment>
    <expr_stmt><expr><operator pos:line="135" pos:column="5">*<pos:position pos:line="135" pos:column="6"/></operator><name pos:line="135" pos:column="6">exprep<pos:position pos:line="135" pos:column="12"/></name> <operator pos:line="135" pos:column="13">=<pos:position pos:line="135" pos:column="14"/></operator> <name pos:line="135" pos:column="15">parent_exprep<pos:position pos:line="135" pos:column="28"/></name> <operator pos:line="135" pos:column="29">+<pos:position pos:line="135" pos:column="30"/></operator> <name pos:line="135" pos:column="31">sibling_exprep<pos:position pos:line="135" pos:column="45"/></name> <operator pos:line="135" pos:column="46">+<pos:position pos:line="135" pos:column="47"/></operator> <name pos:line="135" pos:column="48">mcast_exprep<pos:position pos:line="135" pos:column="60"/></name></expr>;<pos:position pos:line="135" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="137" pos:column="5">/*
     * If there is a configured timeout, use it
     */</comment>
    <if pos:line="140" pos:column="5">if <condition pos:line="140" pos:column="8">(<expr><name><name pos:line="140" pos:column="9">Config<pos:position pos:line="140" pos:column="15"/></name><operator pos:line="140" pos:column="15">.<pos:position pos:line="140" pos:column="16"/></operator><name pos:line="140" pos:column="16">Timeout<pos:position pos:line="140" pos:column="23"/></name><operator pos:line="140" pos:column="23">.<pos:position pos:line="140" pos:column="24"/></operator><name pos:line="140" pos:column="24">icp_query<pos:position pos:line="140" pos:column="33"/></name></name></expr>)<pos:position pos:line="140" pos:column="34"/></condition><then pos:line="140" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="141" pos:column="9">*<pos:position pos:line="141" pos:column="10"/></operator><name pos:line="141" pos:column="10">timeout<pos:position pos:line="141" pos:column="17"/></name> <operator pos:line="141" pos:column="18">=<pos:position pos:line="141" pos:column="19"/></operator> <name><name pos:line="141" pos:column="20">Config<pos:position pos:line="141" pos:column="26"/></name><operator pos:line="141" pos:column="26">.<pos:position pos:line="141" pos:column="27"/></operator><name pos:line="141" pos:column="27">Timeout<pos:position pos:line="141" pos:column="34"/></name><operator pos:line="141" pos:column="34">.<pos:position pos:line="141" pos:column="35"/></operator><name pos:line="141" pos:column="35">icp_query<pos:position pos:line="141" pos:column="44"/></name></name></expr>;<pos:position pos:line="141" pos:column="45"/></expr_stmt></block></then>
    <else pos:line="142" pos:column="5">else <block pos:line="142" pos:column="10">{
        <if pos:line="143" pos:column="9">if <condition pos:line="143" pos:column="12">(<expr><operator pos:line="143" pos:column="13">*<pos:position pos:line="143" pos:column="14"/></operator><name pos:line="143" pos:column="14">exprep<pos:position pos:line="143" pos:column="20"/></name> <operator pos:line="143" pos:column="21">&gt;<pos:position pos:line="143" pos:column="25"/></operator> <literal type="number" pos:line="143" pos:column="23">0<pos:position pos:line="143" pos:column="24"/></literal></expr>)<pos:position pos:line="143" pos:column="25"/></condition><then pos:line="143" pos:column="25"> <block pos:line="143" pos:column="26">{
            <if pos:line="144" pos:column="13">if <condition pos:line="144" pos:column="16">(<expr><name pos:line="144" pos:column="17">parent_exprep<pos:position pos:line="144" pos:column="30"/></name></expr>)<pos:position pos:line="144" pos:column="31"/></condition><then pos:line="144" pos:column="31">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="145" pos:column="17">*<pos:position pos:line="145" pos:column="18"/></operator><name pos:line="145" pos:column="18">timeout<pos:position pos:line="145" pos:column="25"/></name> <operator pos:line="145" pos:column="26">=<pos:position pos:line="145" pos:column="27"/></operator> <literal type="number" pos:line="145" pos:column="28">2<pos:position pos:line="145" pos:column="29"/></literal> <operator pos:line="145" pos:column="30">*<pos:position pos:line="145" pos:column="31"/></operator> <name pos:line="145" pos:column="32">parent_timeout<pos:position pos:line="145" pos:column="46"/></name> <operator pos:line="145" pos:column="47">/<pos:position pos:line="145" pos:column="48"/></operator> <name pos:line="145" pos:column="49">parent_exprep<pos:position pos:line="145" pos:column="62"/></name></expr>;<pos:position pos:line="145" pos:column="63"/></expr_stmt></block></then>
            <elseif pos:line="146" pos:column="13">else <if pos:line="146" pos:column="18">if <condition pos:line="146" pos:column="21">(<expr><name pos:line="146" pos:column="22">mcast_exprep<pos:position pos:line="146" pos:column="34"/></name></expr>)<pos:position pos:line="146" pos:column="35"/></condition><then pos:line="146" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="147" pos:column="17">*<pos:position pos:line="147" pos:column="18"/></operator><name pos:line="147" pos:column="18">timeout<pos:position pos:line="147" pos:column="25"/></name> <operator pos:line="147" pos:column="26">=<pos:position pos:line="147" pos:column="27"/></operator> <literal type="number" pos:line="147" pos:column="28">2<pos:position pos:line="147" pos:column="29"/></literal> <operator pos:line="147" pos:column="30">*<pos:position pos:line="147" pos:column="31"/></operator> <name pos:line="147" pos:column="32">mcast_timeout<pos:position pos:line="147" pos:column="45"/></name> <operator pos:line="147" pos:column="46">/<pos:position pos:line="147" pos:column="47"/></operator> <name pos:line="147" pos:column="48">mcast_exprep<pos:position pos:line="147" pos:column="60"/></name></expr>;<pos:position pos:line="147" pos:column="61"/></expr_stmt></block></then></if></elseif>
            <else pos:line="148" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><operator pos:line="149" pos:column="17">*<pos:position pos:line="149" pos:column="18"/></operator><name pos:line="149" pos:column="18">timeout<pos:position pos:line="149" pos:column="25"/></name> <operator pos:line="149" pos:column="26">=<pos:position pos:line="149" pos:column="27"/></operator> <literal type="number" pos:line="149" pos:column="28">2<pos:position pos:line="149" pos:column="29"/></literal> <operator pos:line="149" pos:column="30">*<pos:position pos:line="149" pos:column="31"/></operator> <name pos:line="149" pos:column="32">sibling_timeout<pos:position pos:line="149" pos:column="47"/></name> <operator pos:line="149" pos:column="48">/<pos:position pos:line="149" pos:column="49"/></operator> <name pos:line="149" pos:column="50">sibling_exprep<pos:position pos:line="149" pos:column="64"/></name></expr>;<pos:position pos:line="149" pos:column="65"/></expr_stmt></block></else></if>
        }<pos:position pos:line="150" pos:column="10"/></block></then> <else pos:line="150" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><operator pos:line="151" pos:column="13">*<pos:position pos:line="151" pos:column="14"/></operator><name pos:line="151" pos:column="14">timeout<pos:position pos:line="151" pos:column="21"/></name> <operator pos:line="151" pos:column="22">=<pos:position pos:line="151" pos:column="23"/></operator> <literal type="number" pos:line="151" pos:column="24">2000<pos:position pos:line="151" pos:column="28"/></literal></expr>;<pos:position pos:line="151" pos:column="29"/></expr_stmt></block></else></if>	<comment type="block" pos:line="151" pos:column="33">/* 2 seconds */</comment>

        <if pos:line="153" pos:column="9">if <condition pos:line="153" pos:column="12">(<expr><name><name pos:line="153" pos:column="13">Config<pos:position pos:line="153" pos:column="19"/></name><operator pos:line="153" pos:column="19">.<pos:position pos:line="153" pos:column="20"/></operator><name pos:line="153" pos:column="20">Timeout<pos:position pos:line="153" pos:column="27"/></name><operator pos:line="153" pos:column="27">.<pos:position pos:line="153" pos:column="28"/></operator><name pos:line="153" pos:column="28">icp_query_max<pos:position pos:line="153" pos:column="41"/></name></name></expr>)<pos:position pos:line="153" pos:column="42"/></condition><then pos:line="153" pos:column="42">
            <block type="pseudo"><if pos:line="154" pos:column="13">if <condition pos:line="154" pos:column="16">(<expr><operator pos:line="154" pos:column="17">*<pos:position pos:line="154" pos:column="18"/></operator><name pos:line="154" pos:column="18">timeout<pos:position pos:line="154" pos:column="25"/></name> <operator pos:line="154" pos:column="26">&gt;<pos:position pos:line="154" pos:column="30"/></operator> <name><name pos:line="154" pos:column="28">Config<pos:position pos:line="154" pos:column="34"/></name><operator pos:line="154" pos:column="34">.<pos:position pos:line="154" pos:column="35"/></operator><name pos:line="154" pos:column="35">Timeout<pos:position pos:line="154" pos:column="42"/></name><operator pos:line="154" pos:column="42">.<pos:position pos:line="154" pos:column="43"/></operator><name pos:line="154" pos:column="43">icp_query_max<pos:position pos:line="154" pos:column="56"/></name></name></expr>)<pos:position pos:line="154" pos:column="57"/></condition><then pos:line="154" pos:column="57">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="155" pos:column="17">*<pos:position pos:line="155" pos:column="18"/></operator><name pos:line="155" pos:column="18">timeout<pos:position pos:line="155" pos:column="25"/></name> <operator pos:line="155" pos:column="26">=<pos:position pos:line="155" pos:column="27"/></operator> <name><name pos:line="155" pos:column="28">Config<pos:position pos:line="155" pos:column="34"/></name><operator pos:line="155" pos:column="34">.<pos:position pos:line="155" pos:column="35"/></operator><name pos:line="155" pos:column="35">Timeout<pos:position pos:line="155" pos:column="42"/></name><operator pos:line="155" pos:column="42">.<pos:position pos:line="155" pos:column="43"/></operator><name pos:line="155" pos:column="43">icp_query_max<pos:position pos:line="155" pos:column="56"/></name></name></expr>;<pos:position pos:line="155" pos:column="57"/></expr_stmt></block></then></if></block></then></if>

        <if pos:line="157" pos:column="9">if <condition pos:line="157" pos:column="12">(<expr><operator pos:line="157" pos:column="13">*<pos:position pos:line="157" pos:column="14"/></operator><name pos:line="157" pos:column="14">timeout<pos:position pos:line="157" pos:column="21"/></name> <operator pos:line="157" pos:column="22">&lt;<pos:position pos:line="157" pos:column="26"/></operator> <name><name pos:line="157" pos:column="24">Config<pos:position pos:line="157" pos:column="30"/></name><operator pos:line="157" pos:column="30">.<pos:position pos:line="157" pos:column="31"/></operator><name pos:line="157" pos:column="31">Timeout<pos:position pos:line="157" pos:column="38"/></name><operator pos:line="157" pos:column="38">.<pos:position pos:line="157" pos:column="39"/></operator><name pos:line="157" pos:column="39">icp_query_min<pos:position pos:line="157" pos:column="52"/></name></name></expr>)<pos:position pos:line="157" pos:column="53"/></condition><then pos:line="157" pos:column="53">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="158" pos:column="13">*<pos:position pos:line="158" pos:column="14"/></operator><name pos:line="158" pos:column="14">timeout<pos:position pos:line="158" pos:column="21"/></name> <operator pos:line="158" pos:column="22">=<pos:position pos:line="158" pos:column="23"/></operator> <name><name pos:line="158" pos:column="24">Config<pos:position pos:line="158" pos:column="30"/></name><operator pos:line="158" pos:column="30">.<pos:position pos:line="158" pos:column="31"/></operator><name pos:line="158" pos:column="31">Timeout<pos:position pos:line="158" pos:column="38"/></name><operator pos:line="158" pos:column="38">.<pos:position pos:line="158" pos:column="39"/></operator><name pos:line="158" pos:column="39">icp_query_min<pos:position pos:line="158" pos:column="52"/></name></name></expr>;<pos:position pos:line="158" pos:column="53"/></expr_stmt></block></then></if>
    }<pos:position pos:line="159" pos:column="6"/></block></else></if>

    <return pos:line="161" pos:column="5">return <expr><name pos:line="161" pos:column="12">peers_pinged<pos:position pos:line="161" pos:column="24"/></name></expr>;<pos:position pos:line="161" pos:column="25"/></return>
}<pos:position pos:line="162" pos:column="2"/></block></function></unit>
