<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4965_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">SwapDir<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">readCompleted<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">rlen<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">errflag<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="67">RefCount<pos:position pos:line="2" pos:column="75"/></name><argument_list type="generic" pos:line="2" pos:column="75">&lt; <argument><expr><name><operator pos:line="2" pos:column="77">::<pos:position pos:line="2" pos:column="79"/></operator><name pos:line="2" pos:column="79">ReadRequest<pos:position pos:line="2" pos:column="90"/></name></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="94"/></argument_list></name></type> <name pos:line="2" pos:column="92">r<pos:position pos:line="2" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="94"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ReadRequest<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">request<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><cast type="dynamic" pos:line="4" pos:column="28">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="40">&lt;<argument><expr><name><name pos:line="4" pos:column="41">Rock<pos:position pos:line="4" pos:column="45"/></name><operator pos:line="4" pos:column="45">::<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="47">ReadRequest<pos:position pos:line="4" pos:column="58"/></name></name><operator pos:line="4" pos:column="58">*<pos:position pos:line="4" pos:column="59"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="63"/></argument_list><argument_list pos:line="4" pos:column="60">(<argument><expr><call><name><name pos:line="4" pos:column="61">r<pos:position pos:line="4" pos:column="62"/></name><operator pos:line="4" pos:column="62">.<pos:position pos:line="4" pos:column="63"/></operator><name pos:line="4" pos:column="63">getRaw<pos:position pos:line="4" pos:column="69"/></name></name><argument_list pos:line="4" pos:column="69">()<pos:position pos:line="4" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="72"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="73"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">request<pos:position pos:line="5" pos:column="19"/></name></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">IoState<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">::<pos:position pos:line="6" pos:column="14"/></operator><name pos:line="6" pos:column="14">Pointer<pos:position pos:line="6" pos:column="21"/></name></name></type> <name pos:line="6" pos:column="22">sio<pos:position pos:line="6" pos:column="25"/></name> <init pos:line="6" pos:column="26">= <expr><name><name pos:line="6" pos:column="28">request<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">-&gt;<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="37">sio<pos:position pos:line="6" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">errflag<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">==<pos:position pos:line="8" pos:column="19"/></operator> <name pos:line="8" pos:column="20">DISK_OK<pos:position pos:line="8" pos:column="27"/></name> <operator pos:line="8" pos:column="28">&amp;&amp;<pos:position pos:line="8" pos:column="38"/></operator> <name pos:line="8" pos:column="31">rlen<pos:position pos:line="8" pos:column="35"/></name> <operator pos:line="8" pos:column="36">&gt;<pos:position pos:line="8" pos:column="40"/></operator> <literal type="number" pos:line="8" pos:column="38">0<pos:position pos:line="8" pos:column="39"/></literal></expr>)<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="9" pos:column="9">sio<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">offset_<pos:position pos:line="9" pos:column="21"/></name></name> <operator pos:line="9" pos:column="22">+=<pos:position pos:line="9" pos:column="24"/></operator> <name pos:line="9" pos:column="25">rlen<pos:position pos:line="9" pos:column="29"/></name></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">sio<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">-&gt;<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="10">callReaderBack<pos:position pos:line="11" pos:column="24"/></name></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name><name pos:line="11" pos:column="25">r<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">-&gt;<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="28">buf<pos:position pos:line="11" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="33">rlen<pos:position pos:line="11" pos:column="37"/></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
