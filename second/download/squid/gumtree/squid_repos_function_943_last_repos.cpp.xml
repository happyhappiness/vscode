<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_943_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Instance<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">WriteOurPid<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">()<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Instance code assumes that we do not support PID filename reconfiguration</comment>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name pos:line="5" pos:column="12">bool<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">called<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><literal type="boolean" pos:line="5" pos:column="26">false<pos:position pos:line="5" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><operator pos:line="6" pos:column="10">!<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">called<pos:position pos:line="6" pos:column="17"/></name></expr></argument>)<pos:position pos:line="6" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">called<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <literal type="boolean" pos:line="7" pos:column="14">true<pos:position pos:line="7" pos:column="18"/></literal></expr>;<pos:position pos:line="7" pos:column="19"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <specifier pos:line="9" pos:column="11">auto<pos:position pos:line="9" pos:column="15"/></specifier></type> <name pos:line="9" pos:column="16">filename<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><call><name pos:line="9" pos:column="27">PidFilename<pos:position pos:line="9" pos:column="38"/></name><argument_list pos:line="9" pos:column="38">()<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="41"/></decl_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name><name pos:line="10" pos:column="9">filename<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">.<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="18">isEmpty<pos:position pos:line="10" pos:column="25"/></name></name><argument_list pos:line="10" pos:column="25">()<pos:position pos:line="10" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="28"/></condition><then pos:line="10" pos:column="28">
        <block type="pseudo"><return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="11" pos:column="17">// nothing to do</comment>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">File<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">pidFile<pos:position pos:line="13" pos:column="17"/></name><argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">filename<pos:position pos:line="13" pos:column="26"/></name></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="28">File<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">::<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">Be<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">::<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">ReadWrite<pos:position pos:line="13" pos:column="47"/></name></name><argument_list pos:line="13" pos:column="47">()<pos:position pos:line="13" pos:column="49"/></argument_list></call><operator pos:line="13" pos:column="49">.<pos:position pos:line="13" pos:column="50"/></operator><call><name pos:line="13" pos:column="50">locked<pos:position pos:line="13" pos:column="56"/></name><argument_list pos:line="13" pos:column="56">()<pos:position pos:line="13" pos:column="58"/></argument_list></call><operator pos:line="13" pos:column="58">.<pos:position pos:line="13" pos:column="59"/></operator><call><name pos:line="13" pos:column="59">createdIfMissing<pos:position pos:line="13" pos:column="75"/></name><argument_list pos:line="13" pos:column="75">()<pos:position pos:line="13" pos:column="77"/></argument_list></call><operator pos:line="13" pos:column="77">.<pos:position pos:line="13" pos:column="78"/></operator><call><name pos:line="13" pos:column="78">openedByRoot<pos:position pos:line="13" pos:column="90"/></name><argument_list pos:line="13" pos:column="90">()<pos:position pos:line="13" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="93"/></argument_list></decl>;<pos:position pos:line="13" pos:column="94"/></decl_stmt>

    <comment type="line" pos:line="15" pos:column="5">// another instance may have started after the caller checked (if it did)</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">ThrowIfAlreadyRunningWith<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">pidFile<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* now we know that we own the PID file created and/or locked above */</comment>

    <comment type="line" pos:line="20" pos:column="5">// Cleanup is scheduled through atexit() to ensure both:</comment>
    <comment type="line" pos:line="21" pos:column="5">// - cleanup upon fatal() and similar "unplanned" exits and</comment>
    <comment type="line" pos:line="22" pos:column="5">// - enter_suid() existence and proper logging support during cleanup.</comment>
    <comment type="line" pos:line="23" pos:column="5">// Even without PID filename reconfiguration support, we have to remember</comment>
    <comment type="line" pos:line="24" pos:column="5">// the file name we have used because Config.pidFilename may change!</comment>
    <expr_stmt><expr><operator pos:line="25" pos:column="5">(<pos:position pos:line="25" pos:column="6"/></operator><name pos:line="25" pos:column="6">void<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">)<pos:position pos:line="25" pos:column="11"/></operator><call><name><name pos:line="25" pos:column="11">std<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">::<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="16">atexit<pos:position pos:line="25" pos:column="22"/></name></name><argument_list pos:line="25" pos:column="22">(<argument><expr><operator pos:line="25" pos:column="23">&amp;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="24">RemoveInstance<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt> <comment type="line" pos:line="25" pos:column="41">// failures leave the PID file on disk</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">ThePidFileToRemove<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">=<pos:position pos:line="26" pos:column="25"/></operator> <name pos:line="26" pos:column="26">filename<pos:position pos:line="26" pos:column="34"/></name></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="28" pos:column="5">/* write our PID to the locked file */</comment>
    <decl_stmt><decl><type><name pos:line="29" pos:column="5">SBuf<pos:position pos:line="29" pos:column="9"/></name></type> <name pos:line="29" pos:column="10">pidBuf<pos:position pos:line="29" pos:column="16"/></name></decl>;<pos:position pos:line="29" pos:column="17"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="30" pos:column="5">pidBuf<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">.<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">Printf<pos:position pos:line="30" pos:column="18"/></name></name><argument_list pos:line="30" pos:column="18">(<argument><expr><literal type="string" pos:line="30" pos:column="19">"%d\n"<pos:position pos:line="30" pos:column="25"/></literal></expr></argument>, <argument><expr><cast type="static" pos:line="30" pos:column="27">static_cast<argument_list type="generic" pos:line="30" pos:column="38">&lt;<argument><expr><name pos:line="30" pos:column="39">int<pos:position pos:line="30" pos:column="42"/></name></expr></argument>&gt;<pos:position pos:line="30" pos:column="46"/></argument_list><argument_list pos:line="30" pos:column="43">(<argument><expr><call><name pos:line="30" pos:column="44">getpid<pos:position pos:line="30" pos:column="50"/></name><argument_list pos:line="30" pos:column="50">()<pos:position pos:line="30" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></cast></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="31" pos:column="5">pidFile<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">.<pos:position pos:line="31" pos:column="13"/></operator><name pos:line="31" pos:column="13">truncate<pos:position pos:line="31" pos:column="21"/></name></name><argument_list pos:line="31" pos:column="21">()<pos:position pos:line="31" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">pidFile<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">.<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">writeAll<pos:position pos:line="32" pos:column="21"/></name></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">pidBuf<pos:position pos:line="32" pos:column="28"/></name></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>

    <comment type="line" pos:line="34" pos:column="5">// We must fsync before releasing the lock or other Squid processes may not see</comment>
    <comment type="line" pos:line="35" pos:column="5">// our written PID (and decide that they are dealing with a corrupted PID file).</comment>
    <expr_stmt><expr><call><name><name pos:line="36" pos:column="5">pidFile<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">.<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">synchronize<pos:position pos:line="36" pos:column="24"/></name></name><argument_list pos:line="36" pos:column="24">()<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">debugs<pos:position pos:line="38" pos:column="11"/></name><argument_list pos:line="38" pos:column="11">(<argument><expr><literal type="number" pos:line="38" pos:column="12">50<pos:position pos:line="38" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="16">DBG_IMPORTANT<pos:position pos:line="38" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="31">"Created "<pos:position pos:line="38" pos:column="41"/></literal> <operator pos:line="38" pos:column="42">&lt;&lt;<pos:position pos:line="38" pos:column="50"/></operator> <name pos:line="38" pos:column="45">TheFile<pos:position pos:line="38" pos:column="52"/></name></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="54"/></expr_stmt>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
