<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6697_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">rfc1035RRUnpack<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">char<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">buf<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">size_t<pos:position pos:line="2" pos:column="40"/></name></type> <name pos:line="2" pos:column="41">sz<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">unsigned<pos:position pos:line="2" pos:column="53"/></name> <name pos:line="2" pos:column="54">int<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">off<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="64">rfc1035_rr<pos:position pos:line="2" pos:column="74"/></name> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier></type> <name pos:line="2" pos:column="77">RR<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="80"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">short<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">s<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">int<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">i<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">short<pos:position pos:line="6" pos:column="19"/></name></type> <name pos:line="6" pos:column="20">rdlength<pos:position pos:line="6" pos:column="28"/></name></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">int<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">rdata_off<pos:position pos:line="7" pos:column="27"/></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">rfc1035NameUnpack<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">buf<pos:position pos:line="8" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="32">sz<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="36">off<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">NULL<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="47">RR<pos:position pos:line="8" pos:column="49"/></name><operator pos:line="8" pos:column="49">-&gt;<pos:position pos:line="8" pos:column="54"/></operator><name pos:line="8" pos:column="51">name<pos:position pos:line="8" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="57">RFC1035_MAXHOSTNAMESZ<pos:position pos:line="8" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="80">0<pos:position pos:line="8" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="83"/></condition><then pos:line="8" pos:column="83"> <block pos:line="8" pos:column="84">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">RFC1035_UNPACK_DEBUG<pos:position pos:line="9" pos:column="29"/></name></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">memset<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">RR<pos:position pos:line="10" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="20">'\0'<pos:position pos:line="10" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="26">sizeof<argument_list pos:line="10" pos:column="32">(<argument><expr><operator pos:line="10" pos:column="33">*<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="34">RR<pos:position pos:line="10" pos:column="36"/></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><literal type="number" pos:line="11" pos:column="16">1<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="13" pos:column="5">/*
     * Make sure the remaining message has enough octets for the
     * rest of the RR fields.
     */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><operator pos:line="17" pos:column="10">*<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">off<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">)<pos:position pos:line="17" pos:column="15"/></operator> <operator pos:line="17" pos:column="16">+<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">10<pos:position pos:line="17" pos:column="20"/></literal> <operator pos:line="17" pos:column="21">&gt;<pos:position pos:line="17" pos:column="25"/></operator> <name pos:line="17" pos:column="23">sz<pos:position pos:line="17" pos:column="25"/></name></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26"> <block pos:line="17" pos:column="27">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">RFC1035_UNPACK_DEBUG<pos:position pos:line="18" pos:column="29"/></name></expr>;<pos:position pos:line="18" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">memset<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">RR<pos:position pos:line="19" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="20">'\0'<pos:position pos:line="19" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="26">sizeof<argument_list pos:line="19" pos:column="32">(<argument><expr><operator pos:line="19" pos:column="33">*<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="34">RR<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="39"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><literal type="number" pos:line="20" pos:column="16">1<pos:position pos:line="20" pos:column="17"/></literal></expr>;<pos:position pos:line="20" pos:column="18"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">memcpy<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><operator pos:line="22" pos:column="12">&amp;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="13">s<pos:position pos:line="22" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="16">buf<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">+<pos:position pos:line="22" pos:column="21"/></operator> <operator pos:line="22" pos:column="22">(<pos:position pos:line="22" pos:column="23"/></operator><operator pos:line="22" pos:column="23">*<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">off<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">)<pos:position pos:line="22" pos:column="28"/></operator></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="30">sizeof<argument_list pos:line="22" pos:column="36">(<argument><expr><name pos:line="22" pos:column="37">s<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="23" pos:column="5">(<pos:position pos:line="23" pos:column="6"/></operator><operator pos:line="23" pos:column="6">*<pos:position pos:line="23" pos:column="7"/></operator><name pos:line="23" pos:column="7">off<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">)<pos:position pos:line="23" pos:column="11"/></operator> <operator pos:line="23" pos:column="12">+=<pos:position pos:line="23" pos:column="14"/></operator> <sizeof pos:line="23" pos:column="15">sizeof<argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">s<pos:position pos:line="23" pos:column="23"/></name></expr></argument>)<pos:position pos:line="23" pos:column="24"/></argument_list></sizeof></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">RR<pos:position pos:line="24" pos:column="7"/></name><operator pos:line="24" pos:column="7">-&gt;<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="9">type<pos:position pos:line="24" pos:column="13"/></name></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <call><name pos:line="24" pos:column="16">ntohs<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">s<pos:position pos:line="24" pos:column="23"/></name></expr></argument>)<pos:position pos:line="24" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">memcpy<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><operator pos:line="25" pos:column="12">&amp;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="13">s<pos:position pos:line="25" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="16">buf<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">+<pos:position pos:line="25" pos:column="21"/></operator> <operator pos:line="25" pos:column="22">(<pos:position pos:line="25" pos:column="23"/></operator><operator pos:line="25" pos:column="23">*<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">off<pos:position pos:line="25" pos:column="27"/></name><operator pos:line="25" pos:column="27">)<pos:position pos:line="25" pos:column="28"/></operator></expr></argument>, <argument><expr><sizeof pos:line="25" pos:column="30">sizeof<argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">s<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="26" pos:column="5">(<pos:position pos:line="26" pos:column="6"/></operator><operator pos:line="26" pos:column="6">*<pos:position pos:line="26" pos:column="7"/></operator><name pos:line="26" pos:column="7">off<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">)<pos:position pos:line="26" pos:column="11"/></operator> <operator pos:line="26" pos:column="12">+=<pos:position pos:line="26" pos:column="14"/></operator> <sizeof pos:line="26" pos:column="15">sizeof<argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">s<pos:position pos:line="26" pos:column="23"/></name></expr></argument>)<pos:position pos:line="26" pos:column="24"/></argument_list></sizeof></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">RR<pos:position pos:line="27" pos:column="7"/></name><operator pos:line="27" pos:column="7">-&gt;<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="9">_class<pos:position pos:line="27" pos:column="15"/></name></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <call><name pos:line="27" pos:column="18">ntohs<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><name pos:line="27" pos:column="24">s<pos:position pos:line="27" pos:column="25"/></name></expr></argument>)<pos:position pos:line="27" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">memcpy<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><operator pos:line="28" pos:column="12">&amp;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="13">i<pos:position pos:line="28" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="16">buf<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">+<pos:position pos:line="28" pos:column="21"/></operator> <operator pos:line="28" pos:column="22">(<pos:position pos:line="28" pos:column="23"/></operator><operator pos:line="28" pos:column="23">*<pos:position pos:line="28" pos:column="24"/></operator><name pos:line="28" pos:column="24">off<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">)<pos:position pos:line="28" pos:column="28"/></operator></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="30">sizeof<argument_list pos:line="28" pos:column="36">(<argument><expr><name pos:line="28" pos:column="37">i<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="29" pos:column="5">(<pos:position pos:line="29" pos:column="6"/></operator><operator pos:line="29" pos:column="6">*<pos:position pos:line="29" pos:column="7"/></operator><name pos:line="29" pos:column="7">off<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">)<pos:position pos:line="29" pos:column="11"/></operator> <operator pos:line="29" pos:column="12">+=<pos:position pos:line="29" pos:column="14"/></operator> <sizeof pos:line="29" pos:column="15">sizeof<argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">i<pos:position pos:line="29" pos:column="23"/></name></expr></argument>)<pos:position pos:line="29" pos:column="24"/></argument_list></sizeof></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">RR<pos:position pos:line="30" pos:column="7"/></name><operator pos:line="30" pos:column="7">-&gt;<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="9">ttl<pos:position pos:line="30" pos:column="12"/></name></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <call><name pos:line="30" pos:column="15">ntohl<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">i<pos:position pos:line="30" pos:column="22"/></name></expr></argument>)<pos:position pos:line="30" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">memcpy<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><operator pos:line="31" pos:column="12">&amp;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="13">s<pos:position pos:line="31" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="16">buf<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">+<pos:position pos:line="31" pos:column="21"/></operator> <operator pos:line="31" pos:column="22">(<pos:position pos:line="31" pos:column="23"/></operator><operator pos:line="31" pos:column="23">*<pos:position pos:line="31" pos:column="24"/></operator><name pos:line="31" pos:column="24">off<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">)<pos:position pos:line="31" pos:column="28"/></operator></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="30">sizeof<argument_list pos:line="31" pos:column="36">(<argument><expr><name pos:line="31" pos:column="37">s<pos:position pos:line="31" pos:column="38"/></name></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="32" pos:column="5">(<pos:position pos:line="32" pos:column="6"/></operator><operator pos:line="32" pos:column="6">*<pos:position pos:line="32" pos:column="7"/></operator><name pos:line="32" pos:column="7">off<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">)<pos:position pos:line="32" pos:column="11"/></operator> <operator pos:line="32" pos:column="12">+=<pos:position pos:line="32" pos:column="14"/></operator> <sizeof pos:line="32" pos:column="15">sizeof<argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">s<pos:position pos:line="32" pos:column="23"/></name></expr></argument>)<pos:position pos:line="32" pos:column="24"/></argument_list></sizeof></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">rdlength<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <call><name pos:line="33" pos:column="16">ntohs<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">s<pos:position pos:line="33" pos:column="23"/></name></expr></argument>)<pos:position pos:line="33" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">(<pos:position pos:line="34" pos:column="10"/></operator><operator pos:line="34" pos:column="10">*<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="11">off<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">)<pos:position pos:line="34" pos:column="15"/></operator> <operator pos:line="34" pos:column="16">+<pos:position pos:line="34" pos:column="17"/></operator> <name pos:line="34" pos:column="18">rdlength<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">&gt;<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="29">sz<pos:position pos:line="34" pos:column="31"/></name></expr>)<pos:position pos:line="34" pos:column="32"/></condition><then pos:line="34" pos:column="32"> <block pos:line="34" pos:column="33">{
        <comment type="block" pos:line="35" pos:column="9">/*
         * We got a truncated packet.  'dnscache' truncates UDP
         * replies at 512 octets, as per RFC 1035.
         */</comment>
        <expr_stmt><expr><name pos:line="39" pos:column="9">RFC1035_UNPACK_DEBUG<pos:position pos:line="39" pos:column="29"/></name></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">memset<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">RR<pos:position pos:line="40" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="40" pos:column="20">'\0'<pos:position pos:line="40" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="26">sizeof<argument_list pos:line="40" pos:column="32">(<argument><expr><operator pos:line="40" pos:column="33">*<pos:position pos:line="40" pos:column="34"/></operator><name pos:line="40" pos:column="34">RR<pos:position pos:line="40" pos:column="36"/></name></expr></argument>)<pos:position pos:line="40" pos:column="37"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><literal type="number" pos:line="41" pos:column="16">1<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="43" pos:column="5">RR<pos:position pos:line="43" pos:column="7"/></name><operator pos:line="43" pos:column="7">-&gt;<pos:position pos:line="43" pos:column="12"/></operator><name pos:line="43" pos:column="9">rdlength<pos:position pos:line="43" pos:column="17"/></name></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <name pos:line="43" pos:column="20">rdlength<pos:position pos:line="43" pos:column="28"/></name></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
    <switch pos:line="44" pos:column="5">switch <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">RR<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">type<pos:position pos:line="44" pos:column="21"/></name></name></expr>)<pos:position pos:line="44" pos:column="22"/></condition> <block pos:line="44" pos:column="23">{
<cpp:if pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">if<pos:position pos:line="45" pos:column="4"/></cpp:directive> <expr><name pos:line="45" pos:column="5">DNS_CNAME<pos:position pos:line="45" pos:column="14"/></name></expr></cpp:if>
    <case pos:line="46" pos:column="5">case <expr><name pos:line="46" pos:column="10">RFC1035_TYPE_CNAME<pos:position pos:line="46" pos:column="28"/></name></expr>:<pos:position pos:line="46" pos:column="29"/></case>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="48" pos:column="5">case <expr><name pos:line="48" pos:column="10">RFC1035_TYPE_PTR<pos:position pos:line="48" pos:column="26"/></name></expr>:<pos:position pos:line="48" pos:column="27"/></case>
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">RR<pos:position pos:line="49" pos:column="11"/></name><operator pos:line="49" pos:column="11">-&gt;<pos:position pos:line="49" pos:column="16"/></operator><name pos:line="49" pos:column="13">rdata<pos:position pos:line="49" pos:column="18"/></name></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <operator pos:line="49" pos:column="21">(<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">char<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">*<pos:position pos:line="49" pos:column="27"/></operator><operator pos:line="49" pos:column="27">)<pos:position pos:line="49" pos:column="28"/></operator><call><name pos:line="49" pos:column="28">xmalloc<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">RFC1035_MAXHOSTNAMESZ<pos:position pos:line="49" pos:column="57"/></name></expr></argument>)<pos:position pos:line="49" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name pos:line="50" pos:column="9">rdata_off<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <operator pos:line="50" pos:column="21">*<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">off<pos:position pos:line="50" pos:column="25"/></name></expr>;<pos:position pos:line="50" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="51" pos:column="9">RR<pos:position pos:line="51" pos:column="11"/></name><operator pos:line="51" pos:column="11">-&gt;<pos:position pos:line="51" pos:column="16"/></operator><name pos:line="51" pos:column="13">rdlength<pos:position pos:line="51" pos:column="21"/></name></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <literal type="number" pos:line="51" pos:column="24">0<pos:position pos:line="51" pos:column="25"/></literal></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>	<comment type="block" pos:line="51" pos:column="33">/* Filled in by rfc1035NameUnpack */</comment>
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">rfc1035NameUnpack<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><name pos:line="52" pos:column="31">buf<pos:position pos:line="52" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="36">sz<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="40">&amp;<pos:position pos:line="52" pos:column="45"/></operator><name pos:line="52" pos:column="41">rdata_off<pos:position pos:line="52" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="52">&amp;<pos:position pos:line="52" pos:column="57"/></operator><name><name pos:line="52" pos:column="53">RR<pos:position pos:line="52" pos:column="55"/></name><operator pos:line="52" pos:column="55">-&gt;<pos:position pos:line="52" pos:column="60"/></operator><name pos:line="52" pos:column="57">rdlength<pos:position pos:line="52" pos:column="65"/></name></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="67">RR<pos:position pos:line="52" pos:column="69"/></name><operator pos:line="52" pos:column="69">-&gt;<pos:position pos:line="52" pos:column="74"/></operator><name pos:line="52" pos:column="71">rdata<pos:position pos:line="52" pos:column="76"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="78">RFC1035_MAXHOSTNAMESZ<pos:position pos:line="52" pos:column="99"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="101">0<pos:position pos:line="52" pos:column="102"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="103"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="104"/></condition><then pos:line="52" pos:column="104"> <block pos:line="52" pos:column="105">{
            <expr_stmt><expr><name pos:line="53" pos:column="13">RFC1035_UNPACK_DEBUG<pos:position pos:line="53" pos:column="33"/></name></expr>;<pos:position pos:line="53" pos:column="34"/></expr_stmt>
            <return pos:line="54" pos:column="13">return <expr><literal type="number" pos:line="54" pos:column="20">1<pos:position pos:line="54" pos:column="21"/></literal></expr>;<pos:position pos:line="54" pos:column="22"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>
        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">rdata_off<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">&gt;<pos:position pos:line="56" pos:column="27"/></operator> <operator pos:line="56" pos:column="25">(<pos:position pos:line="56" pos:column="26"/></operator><operator pos:line="56" pos:column="26">(<pos:position pos:line="56" pos:column="27"/></operator><operator pos:line="56" pos:column="27">*<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="28">off<pos:position pos:line="56" pos:column="31"/></name><operator pos:line="56" pos:column="31">)<pos:position pos:line="56" pos:column="32"/></operator> <operator pos:line="56" pos:column="33">+<pos:position pos:line="56" pos:column="34"/></operator> <name pos:line="56" pos:column="35">rdlength<pos:position pos:line="56" pos:column="43"/></name><operator pos:line="56" pos:column="43">)<pos:position pos:line="56" pos:column="44"/></operator></expr>)<pos:position pos:line="56" pos:column="45"/></condition><then pos:line="56" pos:column="45"> <block pos:line="56" pos:column="46">{
            <comment type="block" pos:line="57" pos:column="13">/*
             * This probably doesn't happen for valid packets, but
             * I want to make sure that NameUnpack doesn't go beyond
             * the RDATA area.
             */</comment>
            <expr_stmt><expr><name pos:line="62" pos:column="13">RFC1035_UNPACK_DEBUG<pos:position pos:line="62" pos:column="33"/></name></expr>;<pos:position pos:line="62" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">xfree<pos:position pos:line="63" pos:column="18"/></name><argument_list pos:line="63" pos:column="18">(<argument><expr><name><name pos:line="63" pos:column="19">RR<pos:position pos:line="63" pos:column="21"/></name><operator pos:line="63" pos:column="21">-&gt;<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="23">rdata<pos:position pos:line="63" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="64" pos:column="13">memset<pos:position pos:line="64" pos:column="19"/></name><argument_list pos:line="64" pos:column="19">(<argument><expr><name pos:line="64" pos:column="20">RR<pos:position pos:line="64" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="64" pos:column="24">'\0'<pos:position pos:line="64" pos:column="28"/></literal></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="30">sizeof<argument_list pos:line="64" pos:column="36">(<argument><expr><operator pos:line="64" pos:column="37">*<pos:position pos:line="64" pos:column="38"/></operator><name pos:line="64" pos:column="38">RR<pos:position pos:line="64" pos:column="40"/></name></expr></argument>)<pos:position pos:line="64" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="64" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="43"/></expr_stmt>
            <return pos:line="65" pos:column="13">return <expr><literal type="number" pos:line="65" pos:column="20">1<pos:position pos:line="65" pos:column="21"/></literal></expr>;<pos:position pos:line="65" pos:column="22"/></return>
        }<pos:position pos:line="66" pos:column="10"/></block></then></if>
        <break pos:line="67" pos:column="9">break;<pos:position pos:line="67" pos:column="15"/></break>
    <case pos:line="68" pos:column="5">case <expr><name pos:line="68" pos:column="10">RFC1035_TYPE_A<pos:position pos:line="68" pos:column="24"/></name></expr>:<pos:position pos:line="68" pos:column="25"/></case>
    <default pos:line="69" pos:column="5">default:<pos:position pos:line="69" pos:column="13"/></default>
        <expr_stmt><expr><name><name pos:line="70" pos:column="9">RR<pos:position pos:line="70" pos:column="11"/></name><operator pos:line="70" pos:column="11">-&gt;<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="13">rdata<pos:position pos:line="70" pos:column="18"/></name></name> <operator pos:line="70" pos:column="19">=<pos:position pos:line="70" pos:column="20"/></operator> <operator pos:line="70" pos:column="21">(<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="22">char<pos:position pos:line="70" pos:column="26"/></name><operator pos:line="70" pos:column="26">*<pos:position pos:line="70" pos:column="27"/></operator><operator pos:line="70" pos:column="27">)<pos:position pos:line="70" pos:column="28"/></operator><call><name pos:line="70" pos:column="28">xmalloc<pos:position pos:line="70" pos:column="35"/></name><argument_list pos:line="70" pos:column="35">(<argument><expr><name pos:line="70" pos:column="36">rdlength<pos:position pos:line="70" pos:column="44"/></name></expr></argument>)<pos:position pos:line="70" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">memcpy<pos:position pos:line="71" pos:column="15"/></name><argument_list pos:line="71" pos:column="15">(<argument><expr><name><name pos:line="71" pos:column="16">RR<pos:position pos:line="71" pos:column="18"/></name><operator pos:line="71" pos:column="18">-&gt;<pos:position pos:line="71" pos:column="23"/></operator><name pos:line="71" pos:column="20">rdata<pos:position pos:line="71" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="27">buf<pos:position pos:line="71" pos:column="30"/></name> <operator pos:line="71" pos:column="31">+<pos:position pos:line="71" pos:column="32"/></operator> <operator pos:line="71" pos:column="33">(<pos:position pos:line="71" pos:column="34"/></operator><operator pos:line="71" pos:column="34">*<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="35">off<pos:position pos:line="71" pos:column="38"/></name><operator pos:line="71" pos:column="38">)<pos:position pos:line="71" pos:column="39"/></operator></expr></argument>, <argument><expr><name pos:line="71" pos:column="41">rdlength<pos:position pos:line="71" pos:column="49"/></name></expr></argument>)<pos:position pos:line="71" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="51"/></expr_stmt>
        <break pos:line="72" pos:column="9">break;<pos:position pos:line="72" pos:column="15"/></break>
    }<pos:position pos:line="73" pos:column="6"/></block></switch>
    <expr_stmt><expr><operator pos:line="74" pos:column="5">(<pos:position pos:line="74" pos:column="6"/></operator><operator pos:line="74" pos:column="6">*<pos:position pos:line="74" pos:column="7"/></operator><name pos:line="74" pos:column="7">off<pos:position pos:line="74" pos:column="10"/></name><operator pos:line="74" pos:column="10">)<pos:position pos:line="74" pos:column="11"/></operator> <operator pos:line="74" pos:column="12">+=<pos:position pos:line="74" pos:column="14"/></operator> <name pos:line="74" pos:column="15">rdlength<pos:position pos:line="74" pos:column="23"/></name></expr>;<pos:position pos:line="74" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">assert<pos:position pos:line="75" pos:column="11"/></name><argument_list pos:line="75" pos:column="11">(<argument><expr><operator pos:line="75" pos:column="12">(<pos:position pos:line="75" pos:column="13"/></operator><operator pos:line="75" pos:column="13">*<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="14">off<pos:position pos:line="75" pos:column="17"/></name><operator pos:line="75" pos:column="17">)<pos:position pos:line="75" pos:column="18"/></operator> <operator pos:line="75" pos:column="19">&lt;=<pos:position pos:line="75" pos:column="24"/></operator> <name pos:line="75" pos:column="22">sz<pos:position pos:line="75" pos:column="24"/></name></expr></argument>)<pos:position pos:line="75" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="26"/></expr_stmt>
    <return pos:line="76" pos:column="5">return <expr><literal type="number" pos:line="76" pos:column="12">0<pos:position pos:line="76" pos:column="13"/></literal></expr>;<pos:position pos:line="76" pos:column="14"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
