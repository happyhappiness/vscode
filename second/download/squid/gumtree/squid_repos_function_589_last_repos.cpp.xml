<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_589_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">comm_udp_sendto<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">int<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">fd<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name><name pos:line="3" pos:column="23">Ip<pos:position pos:line="3" pos:column="25"/></name><operator pos:line="3" pos:column="25">::<pos:position pos:line="3" pos:column="27"/></operator><name pos:line="3" pos:column="27">Address<pos:position pos:line="3" pos:column="34"/></name></name> <modifier pos:line="3" pos:column="35">&amp;<pos:position pos:line="3" pos:column="40"/></modifier></type><name pos:line="3" pos:column="36">to_addr<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="4" pos:column="17">const<pos:position pos:line="4" pos:column="22"/></specifier> <name pos:line="4" pos:column="23">void<pos:position pos:line="4" pos:column="27"/></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">buf<pos:position pos:line="4" pos:column="32"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="5" pos:column="17">int<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">len<pos:position pos:line="5" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="25"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">PROF_start<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">comm_udp_sendto<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="8" pos:column="5">++<pos:position pos:line="8" pos:column="7"/></operator> <name><name pos:line="8" pos:column="8">statCounter<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">.<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">syscalls<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">.<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">sock<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">.<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="34">sendtos<pos:position pos:line="8" pos:column="41"/></name></name></expr>;<pos:position pos:line="8" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">50<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">3<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="19">"comm_udp_sendto: Attempt to send UDP packet to "<pos:position pos:line="10" pos:column="68"/></literal> <operator pos:line="10" pos:column="69">&lt;&lt;<pos:position pos:line="10" pos:column="77"/></operator> <name pos:line="10" pos:column="72">to_addr<pos:position pos:line="10" pos:column="79"/></name> <operator pos:line="10" pos:column="80">&lt;&lt;<pos:position pos:line="10" pos:column="88"/></operator>
           <literal type="string" pos:line="11" pos:column="12">" using FD "<pos:position pos:line="11" pos:column="24"/></literal> <operator pos:line="11" pos:column="25">&lt;&lt;<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="28">fd<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">&lt;&lt;<pos:position pos:line="11" pos:column="39"/></operator> <literal type="string" pos:line="11" pos:column="34">" using Port "<pos:position pos:line="11" pos:column="48"/></literal> <operator pos:line="11" pos:column="49">&lt;&lt;<pos:position pos:line="11" pos:column="57"/></operator> <call><name pos:line="11" pos:column="52">comm_local_port<pos:position pos:line="11" pos:column="67"/></name><argument_list pos:line="11" pos:column="67">(<argument><expr><name pos:line="11" pos:column="68">fd<pos:position pos:line="11" pos:column="70"/></name></expr></argument>)<pos:position pos:line="11" pos:column="71"/></argument_list></call></expr></argument> )<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">struct<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">addrinfo<pos:position pos:line="13" pos:column="20"/></name></name> <modifier pos:line="13" pos:column="21">*<pos:position pos:line="13" pos:column="22"/></modifier></type><name pos:line="13" pos:column="22">AI<pos:position pos:line="13" pos:column="24"/></name> <init pos:line="13" pos:column="25">= <expr><name pos:line="13" pos:column="27">NULL<pos:position pos:line="13" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">to_addr<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">.<pos:position pos:line="14" pos:column="13"/></operator><name pos:line="14" pos:column="13">getAddrInfo<pos:position pos:line="14" pos:column="24"/></name></name><argument_list pos:line="14" pos:column="24">(<argument><expr><name pos:line="14" pos:column="25">AI<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="29">fd_table<pos:position pos:line="14" pos:column="37"/></name><index pos:line="14" pos:column="37">[<expr><name pos:line="14" pos:column="38">fd<pos:position pos:line="14" pos:column="40"/></name></expr>]<pos:position pos:line="14" pos:column="41"/></index></name><operator pos:line="14" pos:column="41">.<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="42">sock_family<pos:position pos:line="14" pos:column="53"/></name></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">x<pos:position pos:line="15" pos:column="10"/></name> <init pos:line="15" pos:column="11">= <expr><call><name pos:line="15" pos:column="13">sendto<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">fd<pos:position pos:line="15" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="24">buf<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="29">len<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="34">0<pos:position pos:line="15" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="37">AI<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">-&gt;<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="41">ai_addr<pos:position pos:line="15" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="50">AI<pos:position pos:line="15" pos:column="52"/></name><operator pos:line="15" pos:column="52">-&gt;<pos:position pos:line="15" pos:column="57"/></operator><name pos:line="15" pos:column="54">ai_addrlen<pos:position pos:line="15" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="66"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">xerrno<pos:position pos:line="16" pos:column="15"/></name> <init pos:line="16" pos:column="16">= <expr><name pos:line="16" pos:column="18">errno<pos:position pos:line="16" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">Ip<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">::<pos:position pos:line="17" pos:column="9"/></operator><name pos:line="17" pos:column="9">Address<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">::<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">FreeAddr<pos:position pos:line="17" pos:column="26"/></name></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">AI<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">PROF_stop<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">comm_udp_sendto<pos:position pos:line="19" pos:column="30"/></name></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">x<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">&gt;=<pos:position pos:line="21" pos:column="16"/></operator> <literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr>)<pos:position pos:line="21" pos:column="16"/></condition><then pos:line="21" pos:column="16"> <block pos:line="21" pos:column="17">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">errno<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <name pos:line="22" pos:column="17">xerrno<pos:position pos:line="22" pos:column="23"/></name></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt> <comment type="line" pos:line="22" pos:column="25">// restore for caller to use</comment>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">x<pos:position pos:line="23" pos:column="17"/></name></expr>;<pos:position pos:line="23" pos:column="18"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">_SQUID_LINUX_<pos:position pos:line="26" pos:column="18"/></name></expr></cpp:if>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">ECONNREFUSED<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">!=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">xerrno<pos:position pos:line="27" pos:column="31"/></name></expr>)<pos:position pos:line="27" pos:column="32"/></condition><then pos:line="27" pos:column="32">
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">50<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="20">DBG_IMPORTANT<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">MYNAME<pos:position pos:line="29" pos:column="41"/></name> <operator pos:line="29" pos:column="42">&lt;&lt;<pos:position pos:line="29" pos:column="50"/></operator> <literal type="string" pos:line="29" pos:column="45">"FD "<pos:position pos:line="29" pos:column="50"/></literal> <operator pos:line="29" pos:column="51">&lt;&lt;<pos:position pos:line="29" pos:column="59"/></operator> <name pos:line="29" pos:column="54">fd<pos:position pos:line="29" pos:column="56"/></name> <operator pos:line="29" pos:column="57">&lt;&lt;<pos:position pos:line="29" pos:column="65"/></operator> <literal type="string" pos:line="29" pos:column="60">", (family="<pos:position pos:line="29" pos:column="72"/></literal> <operator pos:line="29" pos:column="73">&lt;&lt;<pos:position pos:line="29" pos:column="81"/></operator> <name><name pos:line="29" pos:column="76">fd_table<pos:position pos:line="29" pos:column="84"/></name><index pos:line="29" pos:column="84">[<expr><name pos:line="29" pos:column="85">fd<pos:position pos:line="29" pos:column="87"/></name></expr>]<pos:position pos:line="29" pos:column="88"/></index></name><operator pos:line="29" pos:column="88">.<pos:position pos:line="29" pos:column="89"/></operator><name pos:line="29" pos:column="89">sock_family<pos:position pos:line="29" pos:column="100"/></name> <operator pos:line="29" pos:column="101">&lt;&lt;<pos:position pos:line="29" pos:column="109"/></operator> <literal type="string" pos:line="29" pos:column="104">") "<pos:position pos:line="29" pos:column="108"/></literal> <operator pos:line="29" pos:column="109">&lt;&lt;<pos:position pos:line="29" pos:column="117"/></operator> <name pos:line="29" pos:column="112">to_addr<pos:position pos:line="29" pos:column="119"/></name> <operator pos:line="29" pos:column="120">&lt;&lt;<pos:position pos:line="29" pos:column="128"/></operator> <literal type="string" pos:line="29" pos:column="123">": "<pos:position pos:line="29" pos:column="127"/></literal> <operator pos:line="29" pos:column="128">&lt;&lt;<pos:position pos:line="29" pos:column="136"/></operator> <call><name pos:line="29" pos:column="131">xstrerr<pos:position pos:line="29" pos:column="138"/></name><argument_list pos:line="29" pos:column="138">(<argument><expr><name pos:line="29" pos:column="139">xerrno<pos:position pos:line="29" pos:column="145"/></name></expr></argument>)<pos:position pos:line="29" pos:column="146"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="147"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="148"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">errno<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <name pos:line="31" pos:column="13">xerrno<pos:position pos:line="31" pos:column="19"/></name></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt> <comment type="line" pos:line="31" pos:column="21">// restore for caller to use</comment>
    <return pos:line="32" pos:column="5">return <expr><name><name pos:line="32" pos:column="12">Comm<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">::<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">COMM_ERROR<pos:position pos:line="32" pos:column="28"/></name></name></expr>;<pos:position pos:line="32" pos:column="29"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
