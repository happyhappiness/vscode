<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_889_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">_comm_close<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">int<pos:position pos:line="2" pos:column="16"/></name></type> <name pos:line="2" pos:column="17">fd<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">file<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">int<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">line<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">5<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="18">"comm_close: start closing FD "<pos:position pos:line="4" pos:column="49"/></literal> <operator pos:line="4" pos:column="50">&lt;&lt;<pos:position pos:line="4" pos:column="58"/></operator> <name pos:line="4" pos:column="53">fd<pos:position pos:line="4" pos:column="55"/></name></expr></argument>)<pos:position pos:line="4" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">fd<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">&gt;=<pos:position pos:line="5" pos:column="20"/></operator> <literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">fd<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">&lt;<pos:position pos:line="6" pos:column="19"/></operator> <name pos:line="6" pos:column="17">Squid_MaxFD<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">fde<pos:position pos:line="8" pos:column="8"/></name> <modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type><name pos:line="8" pos:column="10">F<pos:position pos:line="8" pos:column="11"/></name> <init pos:line="8" pos:column="12">= <expr><operator pos:line="8" pos:column="14">&amp;<pos:position pos:line="8" pos:column="19"/></operator><name><name pos:line="8" pos:column="15">fd_table<pos:position pos:line="8" pos:column="23"/></name><index pos:line="8" pos:column="23">[<expr><name pos:line="8" pos:column="24">fd<pos:position pos:line="8" pos:column="26"/></name></expr>]<pos:position pos:line="8" pos:column="27"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">fdd_table<pos:position pos:line="9" pos:column="14"/></name><index pos:line="9" pos:column="14">[<expr><name pos:line="9" pos:column="15">fd<pos:position pos:line="9" pos:column="17"/></name></expr>]<pos:position pos:line="9" pos:column="18"/></index></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">close_file<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">=<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="32">file<pos:position pos:line="9" pos:column="36"/></name></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">fdd_table<pos:position pos:line="10" pos:column="14"/></name><index pos:line="10" pos:column="14">[<expr><name pos:line="10" pos:column="15">fd<pos:position pos:line="10" pos:column="17"/></name></expr>]<pos:position pos:line="10" pos:column="18"/></index></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">close_line<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">=<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="32">line<pos:position pos:line="10" pos:column="36"/></name></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name><name pos:line="12" pos:column="9">F<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">closing<pos:position pos:line="12" pos:column="19"/></name></name><argument_list pos:line="12" pos:column="19">()<pos:position pos:line="12" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22">
        <block type="pseudo"><return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* XXX: is this obsolete behind F-&gt;closing() ? */</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">( <expr><operator pos:line="16" pos:column="10">(<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">shutting_down<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">||<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">reconfiguring<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">)<pos:position pos:line="16" pos:column="42"/></operator> <operator pos:line="16" pos:column="43">&amp;&amp;<pos:position pos:line="16" pos:column="53"/></operator> <operator pos:line="16" pos:column="46">(<pos:position pos:line="16" pos:column="47"/></operator><operator pos:line="16" pos:column="47">!<pos:position pos:line="16" pos:column="48"/></operator><name><name pos:line="16" pos:column="48">F<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">flags<pos:position pos:line="16" pos:column="56"/></name><operator pos:line="16" pos:column="56">.<pos:position pos:line="16" pos:column="57"/></operator><name pos:line="16" pos:column="57">open<pos:position pos:line="16" pos:column="61"/></name></name> <operator pos:line="16" pos:column="62">||<pos:position pos:line="16" pos:column="64"/></operator> <name><name pos:line="16" pos:column="65">F<pos:position pos:line="16" pos:column="66"/></name><operator pos:line="16" pos:column="66">-&gt;<pos:position pos:line="16" pos:column="71"/></operator><name pos:line="16" pos:column="68">type<pos:position pos:line="16" pos:column="72"/></name></name> <operator pos:line="16" pos:column="73">==<pos:position pos:line="16" pos:column="75"/></operator> <name pos:line="16" pos:column="76">FD_FILE<pos:position pos:line="16" pos:column="83"/></name><operator pos:line="16" pos:column="83">)<pos:position pos:line="16" pos:column="84"/></operator></expr>)<pos:position pos:line="16" pos:column="85"/></condition><then pos:line="16" pos:column="85">
        <block type="pseudo"><return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/* The following fails because ipc.c is doing calls to pipe() to create sockets! */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">assert<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><call><name pos:line="20" pos:column="12">isOpen<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">fd<pos:position pos:line="20" pos:column="21"/></name></expr></argument>)<pos:position pos:line="20" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">assert<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name><name pos:line="22" pos:column="12">F<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">type<pos:position pos:line="22" pos:column="19"/></name></name> <operator pos:line="22" pos:column="20">!=<pos:position pos:line="22" pos:column="22"/></operator> <name pos:line="22" pos:column="23">FD_FILE<pos:position pos:line="22" pos:column="30"/></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">PROF_start<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">comm_close<pos:position pos:line="24" pos:column="26"/></name></expr></argument>)<pos:position pos:line="24" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="26" pos:column="5">F<pos:position pos:line="26" pos:column="6"/></name><operator pos:line="26" pos:column="6">-&gt;<pos:position pos:line="26" pos:column="11"/></operator><name pos:line="26" pos:column="8">flags<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">.<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">close_request<pos:position pos:line="26" pos:column="27"/></name></name> <operator pos:line="26" pos:column="28">=<pos:position pos:line="26" pos:column="29"/></operator> <literal type="number" pos:line="26" pos:column="30">1<pos:position pos:line="26" pos:column="31"/></literal></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="28" pos:column="5">AsyncCall<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">::<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">Pointer<pos:position pos:line="28" pos:column="23"/></name></name></type> <name pos:line="28" pos:column="24">startCall<pos:position pos:line="28" pos:column="33"/></name><init pos:line="28" pos:column="33">=<expr><call><name pos:line="28" pos:column="34">commCbCall<pos:position pos:line="28" pos:column="44"/></name><argument_list pos:line="28" pos:column="44">(<argument><expr><literal type="number" pos:line="28" pos:column="45">5<pos:position pos:line="28" pos:column="46"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="28" pos:column="47">4<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="50">"comm_close_start"<pos:position pos:line="28" pos:column="68"/></literal></expr></argument>,
                                            <argument><expr><call><name pos:line="29" pos:column="45">CommCloseCbPtrFun<pos:position pos:line="29" pos:column="62"/></name><argument_list pos:line="29" pos:column="62">(<argument><expr><name pos:line="29" pos:column="63">comm_close_start<pos:position pos:line="29" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="81">NULL<pos:position pos:line="29" pos:column="85"/></name></expr></argument>)<pos:position pos:line="29" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="88"/></decl_stmt>
    <typedef pos:line="30" pos:column="5">typedef <type><name pos:line="30" pos:column="13">CommCloseCbParams<pos:position pos:line="30" pos:column="30"/></name></type> <name pos:line="30" pos:column="31">Params<pos:position pos:line="30" pos:column="37"/></name>;<pos:position pos:line="30" pos:column="38"/></typedef>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">Params<pos:position pos:line="31" pos:column="11"/></name> <modifier pos:line="31" pos:column="12">&amp;<pos:position pos:line="31" pos:column="17"/></modifier></type><name pos:line="31" pos:column="13">startParams<pos:position pos:line="31" pos:column="24"/></name> <init pos:line="31" pos:column="25">= <expr><call><name><name pos:line="31" pos:column="27">GetCommParams<pos:position pos:line="31" pos:column="40"/></name><argument_list type="generic" pos:line="31" pos:column="40">&lt;<argument><expr><name pos:line="31" pos:column="41">Params<pos:position pos:line="31" pos:column="47"/></name></expr></argument>&gt;<pos:position pos:line="31" pos:column="51"/></argument_list></name><argument_list pos:line="31" pos:column="48">(<argument><expr><name pos:line="31" pos:column="49">startCall<pos:position pos:line="31" pos:column="58"/></name></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="60"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">startParams<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">.<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">fd<pos:position pos:line="32" pos:column="19"/></name></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <name pos:line="32" pos:column="22">fd<pos:position pos:line="32" pos:column="24"/></name></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">ScheduleCallHere<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">startCall<pos:position pos:line="33" pos:column="31"/></name></expr></argument>)<pos:position pos:line="33" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="33"/></expr_stmt>

    <comment type="line" pos:line="35" pos:column="5">// a half-closed fd may lack a reader, so we stop monitoring explicitly</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name pos:line="36" pos:column="9">commHasHalfClosedMonitor<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name pos:line="36" pos:column="34">fd<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="38"/></condition><then pos:line="36" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="37" pos:column="9">commStopHalfClosedMonitor<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">fd<pos:position pos:line="37" pos:column="37"/></name></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">commSetTimeout<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><name pos:line="38" pos:column="20">fd<pos:position pos:line="38" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="24">-<pos:position pos:line="38" pos:column="25"/></operator><literal type="number" pos:line="38" pos:column="25">1<pos:position pos:line="38" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="28">NULL<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="34">NULL<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>

    <comment type="line" pos:line="40" pos:column="5">// notify read/write handlers</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name pos:line="41" pos:column="9">commio_has_callback<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">fd<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="33">IOCB_WRITE<pos:position pos:line="41" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="45">COMMIO_FD_WRITECB<pos:position pos:line="41" pos:column="62"/></name><argument_list pos:line="41" pos:column="62">(<argument><expr><name pos:line="41" pos:column="63">fd<pos:position pos:line="41" pos:column="65"/></name></expr></argument>)<pos:position pos:line="41" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="68"/></condition><then pos:line="41" pos:column="68"> <block pos:line="41" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">commio_finish_callback<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">fd<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="36">COMMIO_FD_WRITECB<pos:position pos:line="42" pos:column="53"/></name><argument_list pos:line="42" pos:column="53">(<argument><expr><name pos:line="42" pos:column="54">fd<pos:position pos:line="42" pos:column="56"/></name></expr></argument>)<pos:position pos:line="42" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="42" pos:column="59">COMM_ERR_CLOSING<pos:position pos:line="42" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="77">errno<pos:position pos:line="42" pos:column="82"/></name></expr></argument>)<pos:position pos:line="42" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="84"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name pos:line="44" pos:column="9">commio_has_callback<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">fd<pos:position pos:line="44" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="33">IOCB_READ<pos:position pos:line="44" pos:column="42"/></name></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="44">COMMIO_FD_READCB<pos:position pos:line="44" pos:column="60"/></name><argument_list pos:line="44" pos:column="60">(<argument><expr><name pos:line="44" pos:column="61">fd<pos:position pos:line="44" pos:column="63"/></name></expr></argument>)<pos:position pos:line="44" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="66"/></condition><then pos:line="44" pos:column="66"> <block pos:line="44" pos:column="67">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">commio_finish_callback<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name pos:line="45" pos:column="32">fd<pos:position pos:line="45" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="36">COMMIO_FD_READCB<pos:position pos:line="45" pos:column="52"/></name><argument_list pos:line="45" pos:column="52">(<argument><expr><name pos:line="45" pos:column="53">fd<pos:position pos:line="45" pos:column="55"/></name></expr></argument>)<pos:position pos:line="45" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="45" pos:column="58">COMM_ERR_CLOSING<pos:position pos:line="45" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="76">errno<pos:position pos:line="45" pos:column="81"/></name></expr></argument>)<pos:position pos:line="45" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="83"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="48" pos:column="5">// notify accept handlers</comment>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">fdc_table<pos:position pos:line="49" pos:column="14"/></name><index pos:line="49" pos:column="14">[<expr><name pos:line="49" pos:column="15">fd<pos:position pos:line="49" pos:column="17"/></name></expr>]<pos:position pos:line="49" pos:column="18"/></index></name><operator pos:line="49" pos:column="18">.<pos:position pos:line="49" pos:column="19"/></operator><call><name pos:line="49" pos:column="19">notify<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">(<argument><expr><operator pos:line="49" pos:column="26">-<pos:position pos:line="49" pos:column="27"/></operator><literal type="number" pos:line="49" pos:column="27">1<pos:position pos:line="49" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="30">COMM_ERR_CLOSING<pos:position pos:line="49" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="48">0<pos:position pos:line="49" pos:column="49"/></literal></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="51">ConnectionDetail<pos:position pos:line="49" pos:column="67"/></name><argument_list pos:line="49" pos:column="67">()<pos:position pos:line="49" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="71"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="51" pos:column="5">commCallCloseHandlers<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">fd<pos:position pos:line="51" pos:column="29"/></name></expr></argument>)<pos:position pos:line="51" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name><name pos:line="53" pos:column="9">F<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">-&gt;<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="12">pconn<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">.<pos:position pos:line="53" pos:column="18"/></operator><name pos:line="53" pos:column="18">uses<pos:position pos:line="53" pos:column="22"/></name></name></expr>)<pos:position pos:line="53" pos:column="23"/></condition><then pos:line="53" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="54" pos:column="9">F<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">-&gt;<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="12">pconn<pos:position pos:line="54" pos:column="17"/></name><operator pos:line="54" pos:column="17">.<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="18">pool<pos:position pos:line="54" pos:column="22"/></name><operator pos:line="54" pos:column="22">-&gt;<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="24">count<pos:position pos:line="54" pos:column="29"/></name></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name><name pos:line="54" pos:column="30">F<pos:position pos:line="54" pos:column="31"/></name><operator pos:line="54" pos:column="31">-&gt;<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="33">pconn<pos:position pos:line="54" pos:column="38"/></name><operator pos:line="54" pos:column="38">.<pos:position pos:line="54" pos:column="39"/></operator><name pos:line="54" pos:column="39">uses<pos:position pos:line="54" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="56" pos:column="5">comm_empty_os_read_buffers<pos:position pos:line="56" pos:column="31"/></name><argument_list pos:line="56" pos:column="31">(<argument><expr><name pos:line="56" pos:column="32">fd<pos:position pos:line="56" pos:column="34"/></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>


    <decl_stmt><decl><type><name><name pos:line="59" pos:column="5">AsyncCall<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">::<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="16">Pointer<pos:position pos:line="59" pos:column="23"/></name></name></type> <name pos:line="59" pos:column="24">completeCall<pos:position pos:line="59" pos:column="36"/></name><init pos:line="59" pos:column="36">=<expr><call><name pos:line="59" pos:column="37">commCbCall<pos:position pos:line="59" pos:column="47"/></name><argument_list pos:line="59" pos:column="47">(<argument><expr><literal type="number" pos:line="59" pos:column="48">5<pos:position pos:line="59" pos:column="49"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="59" pos:column="50">4<pos:position pos:line="59" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="53">"comm_close_complete"<pos:position pos:line="59" pos:column="74"/></literal></expr></argument>,
                                    <argument><expr><call><name pos:line="60" pos:column="37">CommCloseCbPtrFun<pos:position pos:line="60" pos:column="54"/></name><argument_list pos:line="60" pos:column="54">(<argument><expr><name pos:line="60" pos:column="55">comm_close_complete<pos:position pos:line="60" pos:column="74"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="76">NULL<pos:position pos:line="60" pos:column="80"/></name></expr></argument>)<pos:position pos:line="60" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="60" pos:column="83"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="61" pos:column="5">Params<pos:position pos:line="61" pos:column="11"/></name> <modifier pos:line="61" pos:column="12">&amp;<pos:position pos:line="61" pos:column="17"/></modifier></type><name pos:line="61" pos:column="13">completeParams<pos:position pos:line="61" pos:column="27"/></name> <init pos:line="61" pos:column="28">= <expr><call><name><name pos:line="61" pos:column="30">GetCommParams<pos:position pos:line="61" pos:column="43"/></name><argument_list type="generic" pos:line="61" pos:column="43">&lt;<argument><expr><name pos:line="61" pos:column="44">Params<pos:position pos:line="61" pos:column="50"/></name></expr></argument>&gt;<pos:position pos:line="61" pos:column="54"/></argument_list></name><argument_list pos:line="61" pos:column="51">(<argument><expr><name pos:line="61" pos:column="52">completeCall<pos:position pos:line="61" pos:column="64"/></name></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="61" pos:column="66"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="62" pos:column="5">completeParams<pos:position pos:line="62" pos:column="19"/></name><operator pos:line="62" pos:column="19">.<pos:position pos:line="62" pos:column="20"/></operator><name pos:line="62" pos:column="20">fd<pos:position pos:line="62" pos:column="22"/></name></name> <operator pos:line="62" pos:column="23">=<pos:position pos:line="62" pos:column="24"/></operator> <name pos:line="62" pos:column="25">fd<pos:position pos:line="62" pos:column="27"/></name></expr>;<pos:position pos:line="62" pos:column="28"/></expr_stmt>
    <comment type="line" pos:line="63" pos:column="5">// must use async call to wait for all callbacks</comment>
    <comment type="line" pos:line="64" pos:column="5">// scheduled before comm_close() to finish</comment>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">ScheduleCallHere<pos:position pos:line="65" pos:column="21"/></name><argument_list pos:line="65" pos:column="21">(<argument><expr><name pos:line="65" pos:column="22">completeCall<pos:position pos:line="65" pos:column="34"/></name></expr></argument>)<pos:position pos:line="65" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="67" pos:column="5">PROF_stop<pos:position pos:line="67" pos:column="14"/></name><argument_list pos:line="67" pos:column="14">(<argument><expr><name pos:line="67" pos:column="15">comm_close<pos:position pos:line="67" pos:column="25"/></name></expr></argument>)<pos:position pos:line="67" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="27"/></expr_stmt>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
