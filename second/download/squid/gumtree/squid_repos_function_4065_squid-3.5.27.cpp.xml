<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4065_squid-3.5.27.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name><name pos:line="1" pos:column="7">libecap<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">Area<pos:position pos:line="1" pos:column="20"/></name></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">masterxSharedValue<pos:position pos:line="2" pos:column="49"/></name></name><parameter_list pos:line="2" pos:column="49">(<parameter><decl><type><specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <name><name pos:line="2" pos:column="56">libecap<pos:position pos:line="2" pos:column="63"/></name><operator pos:line="2" pos:column="63">::<pos:position pos:line="2" pos:column="65"/></operator><name pos:line="2" pos:column="65">Name<pos:position pos:line="2" pos:column="69"/></name></name> <modifier pos:line="2" pos:column="70">&amp;<pos:position pos:line="2" pos:column="75"/></modifier></type><name pos:line="2" pos:column="71">name<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list> <specifier pos:line="2" pos:column="77">const<pos:position pos:line="2" pos:column="82"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">HttpRequest<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">request<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><cast type="dynamic" pos:line="4" pos:column="34">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="46">&lt;<argument><expr><specifier pos:line="4" pos:column="47">const<pos:position pos:line="4" pos:column="52"/></specifier> <name pos:line="4" pos:column="53">HttpRequest<pos:position pos:line="4" pos:column="64"/></name><operator pos:line="4" pos:column="64">*<pos:position pos:line="4" pos:column="65"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="69"/></argument_list><argument_list pos:line="4" pos:column="66">(<argument><expr><ternary><condition><expr><name pos:line="4" pos:column="67">theCauseRep<pos:position pos:line="4" pos:column="78"/></name></expr> ?<pos:position pos:line="4" pos:column="80"/></condition><then pos:line="4" pos:column="80">
                                 <expr><call><name><name pos:line="5" pos:column="34">theCauseRep<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">-&gt;<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="47">raw<pos:position pos:line="5" pos:column="50"/></name></name><argument_list pos:line="5" pos:column="50">()<pos:position pos:line="5" pos:column="52"/></argument_list></call><operator pos:line="5" pos:column="52">.<pos:position pos:line="5" pos:column="53"/></operator><name pos:line="5" pos:column="53">header<pos:position pos:line="5" pos:column="59"/></name></expr> <pos:position pos:line="5" pos:column="60"/></then><else pos:line="5" pos:column="60">: <expr><call><name><name pos:line="5" pos:column="62">theVirginRep<pos:position pos:line="5" pos:column="74"/></name><operator pos:line="5" pos:column="74">.<pos:position pos:line="5" pos:column="75"/></operator><name pos:line="5" pos:column="75">raw<pos:position pos:line="5" pos:column="78"/></name></name><argument_list pos:line="5" pos:column="78">()<pos:position pos:line="5" pos:column="80"/></argument_list></call><operator pos:line="5" pos:column="80">.<pos:position pos:line="5" pos:column="81"/></operator><name pos:line="5" pos:column="81">header<pos:position pos:line="5" pos:column="87"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="5" pos:column="88"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="5" pos:column="89"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name pos:line="6" pos:column="10">request<pos:position pos:line="6" pos:column="17"/></name></expr></argument>)<pos:position pos:line="6" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><name pos:line="7" pos:column="9">name<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">.<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">known<pos:position pos:line="7" pos:column="19"/></name></name><argument_list pos:line="7" pos:column="19">()<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="22"/></condition><then pos:line="7" pos:column="22"> <block pos:line="7" pos:column="23">{ <comment type="line" pos:line="7" pos:column="25">// must check to avoid empty names matching unset cfg</comment>
        <decl_stmt><decl><type><name><name pos:line="8" pos:column="9">Adaptation<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">::<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">History<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">::<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="30">Pointer<pos:position pos:line="8" pos:column="37"/></name></name></type> <name pos:line="8" pos:column="38">ah<pos:position pos:line="8" pos:column="40"/></name> <init pos:line="8" pos:column="41">= <expr><call><name><name pos:line="8" pos:column="43">request<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">-&gt;<pos:position pos:line="8" pos:column="55"/></operator><name pos:line="8" pos:column="52">adaptHistory<pos:position pos:line="8" pos:column="64"/></name></name><argument_list pos:line="8" pos:column="64">(<argument><expr><literal type="boolean" pos:line="8" pos:column="65">false<pos:position pos:line="8" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="72"/></decl_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">ah<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">!=<pos:position pos:line="9" pos:column="18"/></operator> <name pos:line="9" pos:column="19">NULL<pos:position pos:line="9" pos:column="23"/></name></expr>)<pos:position pos:line="9" pos:column="24"/></condition><then pos:line="9" pos:column="24"> <block pos:line="9" pos:column="25">{
            <decl_stmt><decl><type><name pos:line="10" pos:column="13">String<pos:position pos:line="10" pos:column="19"/></name></type> <name pos:line="10" pos:column="20">name<pos:position pos:line="10" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="26">value<pos:position pos:line="10" pos:column="31"/></name></decl>;<pos:position pos:line="10" pos:column="32"/></decl_stmt>
            <if pos:line="11" pos:column="13">if <condition pos:line="11" pos:column="16">(<expr><call><name><name pos:line="11" pos:column="17">ah<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">getXxRecord<pos:position pos:line="11" pos:column="32"/></name></name><argument_list pos:line="11" pos:column="32">(<argument><expr><name pos:line="11" pos:column="33">name<pos:position pos:line="11" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="39">value<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="46"/></condition><then pos:line="11" pos:column="46">
                <block type="pseudo"><return pos:line="12" pos:column="17">return <expr><call><name><name pos:line="12" pos:column="24">libecap<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">::<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">Area<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">::<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="39">FromTempBuffer<pos:position pos:line="12" pos:column="53"/></name></name><argument_list pos:line="12" pos:column="53">(<argument><expr><call><name><name pos:line="12" pos:column="54">value<pos:position pos:line="12" pos:column="59"/></name><operator pos:line="12" pos:column="59">.<pos:position pos:line="12" pos:column="60"/></operator><name pos:line="12" pos:column="60">rawBuf<pos:position pos:line="12" pos:column="66"/></name></name><argument_list pos:line="12" pos:column="66">()<pos:position pos:line="12" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="12" pos:column="70">value<pos:position pos:line="12" pos:column="75"/></name><operator pos:line="12" pos:column="75">.<pos:position pos:line="12" pos:column="76"/></operator><name pos:line="12" pos:column="76">size<pos:position pos:line="12" pos:column="80"/></name></name><argument_list pos:line="12" pos:column="80">()<pos:position pos:line="12" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="84"/></return></block></then></if>
        }<pos:position pos:line="13" pos:column="10"/></block></then></if>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <return pos:line="15" pos:column="5">return <expr><call><name><name pos:line="15" pos:column="12">libecap<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">::<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="21">Area<pos:position pos:line="15" pos:column="25"/></name></name><argument_list pos:line="15" pos:column="25">()<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="28"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
