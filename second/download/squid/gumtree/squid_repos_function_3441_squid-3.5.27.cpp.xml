<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3441_squid-3.5.27.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">snmpDebugOid<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">oid<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type> <name pos:line="2" pos:column="20">Name<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">snint<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">Len<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">MemBuf<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">&amp;<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="45">outbuf<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">mbuf<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><literal type="number" pos:line="4" pos:column="15">16<pos:position pos:line="4" pos:column="17"/></literal></expr>]<pos:position pos:line="4" pos:column="18"/></index></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">x<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name><name pos:line="6" pos:column="9">outbuf<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">.<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">isNull<pos:position pos:line="6" pos:column="22"/></name></name><argument_list pos:line="6" pos:column="22">()<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="7" pos:column="9">outbuf<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">init<pos:position pos:line="7" pos:column="20"/></name></name><argument_list pos:line="7" pos:column="20">(<argument><expr><literal type="number" pos:line="7" pos:column="21">16<pos:position pos:line="7" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="25">MAX_IPSTRLEN<pos:position pos:line="7" pos:column="37"/></name></expr></argument>)<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="39"/></expr_stmt></block></then></if>

    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><expr><name pos:line="9" pos:column="10">x<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>;<pos:position pos:line="9" pos:column="16"/></init> <condition><expr><name pos:line="9" pos:column="17">x<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">&lt;<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="21">Len<pos:position pos:line="9" pos:column="24"/></name></expr>;<pos:position pos:line="9" pos:column="25"/></condition> <incr><expr><operator pos:line="9" pos:column="26">++<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">x<pos:position pos:line="9" pos:column="29"/></name></expr></incr>)<pos:position pos:line="9" pos:column="30"/></control> <block pos:line="9" pos:column="31">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">size_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">bytes<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><call><name pos:line="10" pos:column="24">snprintf<pos:position pos:line="10" pos:column="32"/></name><argument_list pos:line="10" pos:column="32">(<argument><expr><name pos:line="10" pos:column="33">mbuf<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="39">sizeof<argument_list pos:line="10" pos:column="45">(<argument><expr><name pos:line="10" pos:column="46">mbuf<pos:position pos:line="10" pos:column="50"/></name></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="53">".%u"<pos:position pos:line="10" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="60">(<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="61">unsigned<pos:position pos:line="10" pos:column="69"/></name> <name pos:line="10" pos:column="70">int<pos:position pos:line="10" pos:column="73"/></name><operator pos:line="10" pos:column="73">)<pos:position pos:line="10" pos:column="74"/></operator> <name><name pos:line="10" pos:column="75">Name<pos:position pos:line="10" pos:column="79"/></name><index pos:line="10" pos:column="79">[<expr><name pos:line="10" pos:column="80">x<pos:position pos:line="10" pos:column="81"/></name></expr>]<pos:position pos:line="10" pos:column="82"/></index></name></expr></argument>)<pos:position pos:line="10" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="84"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="11" pos:column="9">outbuf<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">.<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="16">append<pos:position pos:line="11" pos:column="22"/></name></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">mbuf<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">bytes<pos:position pos:line="11" pos:column="34"/></name></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></for>
    <return pos:line="13" pos:column="5">return <expr><call><name><name pos:line="13" pos:column="12">outbuf<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">content<pos:position pos:line="13" pos:column="26"/></name></name><argument_list pos:line="13" pos:column="26">()<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
