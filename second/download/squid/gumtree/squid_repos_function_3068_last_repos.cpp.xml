<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3068_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">fakeAConnectRequest<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">(<parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">reason<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="56">const<pos:position pos:line="2" pos:column="61"/></specifier> <name pos:line="2" pos:column="62">SBuf<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">&amp;<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="68">payload<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">33<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">2<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"fake a CONNECT request to force connState to tunnel for "<pos:position pos:line="4" pos:column="77"/></literal> <operator pos:line="4" pos:column="78">&lt;&lt;<pos:position pos:line="4" pos:column="86"/></operator> <name pos:line="4" pos:column="81">reason<pos:position pos:line="4" pos:column="87"/></name></expr></argument>)<pos:position pos:line="4" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="89"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">SBuf<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">connectHost<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><call><name pos:line="7" pos:column="12">transparent<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">()<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">unsigned<pos:position pos:line="8" pos:column="19"/></name> <name pos:line="8" pos:column="20">short<pos:position pos:line="8" pos:column="25"/></name></type> <name pos:line="8" pos:column="26">connectPort<pos:position pos:line="8" pos:column="37"/></name> <init pos:line="8" pos:column="38">= <expr><call><name><name pos:line="8" pos:column="40">clientConnection<pos:position pos:line="8" pos:column="56"/></name><operator pos:line="8" pos:column="56">-&gt;<pos:position pos:line="8" pos:column="61"/></operator><name pos:line="8" pos:column="58">local<pos:position pos:line="8" pos:column="63"/></name><operator pos:line="8" pos:column="63">.<pos:position pos:line="8" pos:column="64"/></operator><name pos:line="8" pos:column="64">port<pos:position pos:line="8" pos:column="68"/></name></name><argument_list pos:line="8" pos:column="68">()<pos:position pos:line="8" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="71"/></decl_stmt>

<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">USE_OPENSSL<pos:position pos:line="10" pos:column="16"/></name></expr></cpp:if>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name><name pos:line="11" pos:column="10">tlsClientSni_<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">.<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="24">isEmpty<pos:position pos:line="11" pos:column="31"/></name></name><argument_list pos:line="11" pos:column="31">()<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="12" pos:column="9">connectHost<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">.<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">assign<pos:position pos:line="12" pos:column="27"/></name></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">tlsClientSni_<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt></block></then>
    <else pos:line="13" pos:column="5">else
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="15" pos:column="5">{
        <decl_stmt><decl><specifier pos:line="16" pos:column="9">static<pos:position pos:line="16" pos:column="15"/></specifier> <type><name pos:line="16" pos:column="16">char<pos:position pos:line="16" pos:column="20"/></name></type> <name><name pos:line="16" pos:column="21">ip<pos:position pos:line="16" pos:column="23"/></name><index pos:line="16" pos:column="23">[<expr><name pos:line="16" pos:column="24">MAX_IPSTRLEN<pos:position pos:line="16" pos:column="36"/></name></expr>]<pos:position pos:line="16" pos:column="37"/></index></name></decl>;<pos:position pos:line="16" pos:column="38"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">clientConnection<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">local<pos:position pos:line="17" pos:column="32"/></name><operator pos:line="17" pos:column="32">.<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">toHostStr<pos:position pos:line="17" pos:column="42"/></name></name><argument_list pos:line="17" pos:column="42">(<argument><expr><name pos:line="17" pos:column="43">ip<pos:position pos:line="17" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="17" pos:column="47">sizeof<argument_list pos:line="17" pos:column="53">(<argument><expr><name pos:line="17" pos:column="54">ip<pos:position pos:line="17" pos:column="56"/></name></expr></argument>)<pos:position pos:line="17" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="18" pos:column="9">connectHost<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">.<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">assign<pos:position pos:line="18" pos:column="27"/></name></name><argument_list pos:line="18" pos:column="27">(<argument><expr><name pos:line="18" pos:column="28">ip<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></else></if>

    <decl_stmt><decl><type><name pos:line="21" pos:column="5">ClientHttpRequest<pos:position pos:line="21" pos:column="22"/></name> <modifier pos:line="21" pos:column="23">*<pos:position pos:line="21" pos:column="24"/></modifier></type><name pos:line="21" pos:column="24">http<pos:position pos:line="21" pos:column="28"/></name> <init pos:line="21" pos:column="29">= <expr><call><name pos:line="21" pos:column="31">buildFakeRequest<pos:position pos:line="21" pos:column="47"/></name><argument_list pos:line="21" pos:column="47">(<argument><expr><name><name pos:line="21" pos:column="48">Http<pos:position pos:line="21" pos:column="52"/></name><operator pos:line="21" pos:column="52">::<pos:position pos:line="21" pos:column="54"/></operator><name pos:line="21" pos:column="54">METHOD_CONNECT<pos:position pos:line="21" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="70">connectHost<pos:position pos:line="21" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="83">connectPort<pos:position pos:line="21" pos:column="94"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="96">payload<pos:position pos:line="21" pos:column="103"/></name></expr></argument>)<pos:position pos:line="21" pos:column="104"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="105"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="23" pos:column="5">http<pos:position pos:line="23" pos:column="9"/></name><operator pos:line="23" pos:column="9">-&gt;<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="11">calloutContext<pos:position pos:line="23" pos:column="25"/></name></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <operator pos:line="23" pos:column="28">new<pos:position pos:line="23" pos:column="31"/></operator> <call><name pos:line="23" pos:column="32">ClientRequestContext<pos:position pos:line="23" pos:column="52"/></name><argument_list pos:line="23" pos:column="52">(<argument><expr><name pos:line="23" pos:column="53">http<pos:position pos:line="23" pos:column="57"/></name></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="24" pos:column="5">HttpRequest<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">::<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">Pointer<pos:position pos:line="24" pos:column="25"/></name></name></type> <name pos:line="24" pos:column="26">request<pos:position pos:line="24" pos:column="33"/></name> <init pos:line="24" pos:column="34">= <expr><name><name pos:line="24" pos:column="36">http<pos:position pos:line="24" pos:column="40"/></name><operator pos:line="24" pos:column="40">-&gt;<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="42">request<pos:position pos:line="24" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="24" pos:column="50"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="25" pos:column="5">http<pos:position pos:line="25" pos:column="9"/></name><operator pos:line="25" pos:column="9">-&gt;<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="11">doCallouts<pos:position pos:line="25" pos:column="21"/></name></name><argument_list pos:line="25" pos:column="21">()<pos:position pos:line="25" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">clientProcessRequestFinished<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">this<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="40">request<pos:position pos:line="26" pos:column="47"/></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><literal type="boolean" pos:line="27" pos:column="12">true<pos:position pos:line="27" pos:column="16"/></literal></expr>;<pos:position pos:line="27" pos:column="17"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
