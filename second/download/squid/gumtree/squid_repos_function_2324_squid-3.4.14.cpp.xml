<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2324_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemObject<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">isContiguous<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">()<pos:position pos:line="2" pos:column="26"/></parameter_list> <specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">bool<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">result<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><call><name><name pos:line="4" pos:column="19">data_hdr<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">.<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">hasContigousContentRange<pos:position pos:line="4" pos:column="52"/></name></name> <argument_list pos:line="4" pos:column="53">(<argument><expr><call><name><name pos:line="4" pos:column="54">Range<pos:position pos:line="4" pos:column="59"/></name><argument_list type="generic" pos:line="4" pos:column="59">&lt;<argument><expr><name pos:line="4" pos:column="60">int64_t<pos:position pos:line="4" pos:column="67"/></name></expr></argument>&gt;<pos:position pos:line="4" pos:column="71"/></argument_list></name><argument_list pos:line="4" pos:column="68">(<argument><expr><name pos:line="4" pos:column="69">inmem_lo<pos:position pos:line="4" pos:column="77"/></name></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="79">endOffset<pos:position pos:line="4" pos:column="88"/></name><argument_list pos:line="4" pos:column="88">()<pos:position pos:line="4" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="92"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="93"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* XXX : make this higher level */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><literal type="number" pos:line="6" pos:column="13">19<pos:position pos:line="6" pos:column="15"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="6" pos:column="17">result<pos:position pos:line="6" pos:column="23"/></name></expr> ?<pos:position pos:line="6" pos:column="25"/></condition><then pos:line="6" pos:column="25"> <expr><literal type="number" pos:line="6" pos:column="26">4<pos:position pos:line="6" pos:column="27"/></literal></expr> <pos:position pos:line="6" pos:column="28"/></then><else pos:line="6" pos:column="28">:<expr><literal type="number" pos:line="6" pos:column="29">3<pos:position pos:line="6" pos:column="30"/></literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="32">"MemObject::isContiguous: Returning "<pos:position pos:line="6" pos:column="69"/></literal> <operator pos:line="6" pos:column="70">&lt;&lt;<pos:position pos:line="6" pos:column="78"/></operator> <operator pos:line="6" pos:column="73">(<pos:position pos:line="6" pos:column="74"/></operator><ternary><condition><expr><name pos:line="6" pos:column="74">result<pos:position pos:line="6" pos:column="80"/></name></expr> ?<pos:position pos:line="6" pos:column="82"/></condition><then pos:line="6" pos:column="82"> <expr><literal type="string" pos:line="6" pos:column="83">"true"<pos:position pos:line="6" pos:column="89"/></literal></expr> <pos:position pos:line="6" pos:column="90"/></then><else pos:line="6" pos:column="90">: <expr><literal type="string" pos:line="6" pos:column="92">"false"<pos:position pos:line="6" pos:column="99"/></literal></expr></else></ternary><operator pos:line="6" pos:column="99">)<pos:position pos:line="6" pos:column="100"/></operator></expr></argument>)<pos:position pos:line="6" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="102"/></expr_stmt>
    <return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">result<pos:position pos:line="7" pos:column="18"/></name></expr>;<pos:position pos:line="7" pos:column="19"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
