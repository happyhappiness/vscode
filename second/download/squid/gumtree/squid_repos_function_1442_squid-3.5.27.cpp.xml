<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1442_squid-3.5.27.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">std<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name pos:line="1" pos:column="6">ostream<pos:position pos:line="1" pos:column="13"/></name></name><modifier pos:line="1" pos:column="13">&amp;<pos:position pos:line="1" pos:column="18"/></modifier></type>
<name><name pos:line="2" pos:column="1">SBuf<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">print<pos:position pos:line="2" pos:column="12"/></name></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name><name pos:line="2" pos:column="13">std<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">ostream<pos:position pos:line="2" pos:column="25"/></name></name> <modifier pos:line="2" pos:column="26">&amp;<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="27">os<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list> <specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">os<pos:position pos:line="4" pos:column="7"/></name><operator pos:line="4" pos:column="7">.<pos:position pos:line="4" pos:column="8"/></operator><name pos:line="4" pos:column="8">write<pos:position pos:line="4" pos:column="13"/></name></name><argument_list pos:line="4" pos:column="13">(<argument><expr><call><name pos:line="4" pos:column="14">buf<pos:position pos:line="4" pos:column="17"/></name><argument_list pos:line="4" pos:column="17">()<pos:position pos:line="4" pos:column="19"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="21">length<pos:position pos:line="4" pos:column="27"/></name><argument_list pos:line="4" pos:column="27">()<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="5" pos:column="5">++<pos:position pos:line="5" pos:column="7"/></operator><name><name pos:line="5" pos:column="7">stats<pos:position pos:line="5" pos:column="12"/></name><operator pos:line="5" pos:column="12">.<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">toStream<pos:position pos:line="5" pos:column="21"/></name></name></expr>;<pos:position pos:line="5" pos:column="22"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">os<pos:position pos:line="6" pos:column="14"/></name></expr>;<pos:position pos:line="6" pos:column="15"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
