<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1431_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">peerDigestFetchReply<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">void<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">data<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">buf<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">ssize_t<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">size<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DigestFetchState<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">fetch<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><operator pos:line="4" pos:column="31">(<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">DigestFetchState<pos:position pos:line="4" pos:column="48"/></name> <operator pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></operator><operator pos:line="4" pos:column="50">)<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="51">data<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">PeerDigest<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">pd<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name><name pos:line="5" pos:column="22">fetch<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">-&gt;<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="29">pd<pos:position pos:line="5" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">hdr_size<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">pd<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&amp;&amp;<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="18">buf<pos:position pos:line="7" pos:column="21"/></name></expr></argument>)<pos:position pos:line="7" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><operator pos:line="8" pos:column="12">!<pos:position pos:line="8" pos:column="13"/></operator><name><name pos:line="8" pos:column="13">fetch<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">offset<pos:position pos:line="8" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name><name pos:line="10" pos:column="12">fetch<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">state<pos:position pos:line="10" pos:column="24"/></name></name> <operator pos:line="10" pos:column="25">==<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="28">DIGEST_READ_REPLY<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">peerDigestFetchedEnough<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">fetch<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">buf<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">size<pos:position pos:line="12" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="51">"peerDigestFetchReply"<pos:position pos:line="12" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="75"/></condition><then pos:line="12" pos:column="75">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">-<pos:position pos:line="13" pos:column="17"/></operator><literal type="number" pos:line="13" pos:column="17">1<pos:position pos:line="13" pos:column="18"/></literal></expr>;<pos:position pos:line="13" pos:column="19"/></return></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">(<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">hdr_size<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <call><name pos:line="15" pos:column="21">headersEnd<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">buf<pos:position pos:line="15" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="37">size<pos:position pos:line="15" pos:column="41"/></name></expr></argument>)<pos:position pos:line="15" pos:column="42"/></argument_list></call><operator pos:line="15" pos:column="42">)<pos:position pos:line="15" pos:column="43"/></operator></expr>)<pos:position pos:line="15" pos:column="44"/></condition><then pos:line="15" pos:column="44"> <block pos:line="15" pos:column="45">{
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">HttpReply<pos:position pos:line="16" pos:column="18"/></name> <specifier pos:line="16" pos:column="19">const<pos:position pos:line="16" pos:column="24"/></specifier> <modifier pos:line="16" pos:column="25">*<pos:position pos:line="16" pos:column="26"/></modifier></type><name pos:line="16" pos:column="26">reply<pos:position pos:line="16" pos:column="31"/></name> <init pos:line="16" pos:column="32">= <expr><call><name><name pos:line="16" pos:column="34">fetch<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">-&gt;<pos:position pos:line="16" pos:column="44"/></operator><name pos:line="16" pos:column="41">entry<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">-&gt;<pos:position pos:line="16" pos:column="51"/></operator><name pos:line="16" pos:column="48">getReply<pos:position pos:line="16" pos:column="56"/></name></name><argument_list pos:line="16" pos:column="56">()<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="59"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">assert<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name pos:line="17" pos:column="16">reply<pos:position pos:line="17" pos:column="21"/></name></expr></argument>)<pos:position pos:line="17" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">assert<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><call><name><name pos:line="18" pos:column="16">reply<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">sline<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">.<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">status<pos:position pos:line="18" pos:column="35"/></name></name><argument_list pos:line="18" pos:column="35">()<pos:position pos:line="18" pos:column="37"/></argument_list></call> <operator pos:line="18" pos:column="38">!=<pos:position pos:line="18" pos:column="40"/></operator> <name><name pos:line="18" pos:column="41">Http<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">::<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="47">scNone<pos:position pos:line="18" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="19" pos:column="9">const<pos:position pos:line="19" pos:column="14"/></specifier> <name><name pos:line="19" pos:column="15">Http<pos:position pos:line="19" pos:column="19"/></name><operator pos:line="19" pos:column="19">::<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">StatusCode<pos:position pos:line="19" pos:column="31"/></name></name></type> <name pos:line="19" pos:column="32">status<pos:position pos:line="19" pos:column="38"/></name> <init pos:line="19" pos:column="39">= <expr><call><name><name pos:line="19" pos:column="41">reply<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">-&gt;<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="48">sline<pos:position pos:line="19" pos:column="53"/></name><operator pos:line="19" pos:column="53">.<pos:position pos:line="19" pos:column="54"/></operator><name pos:line="19" pos:column="54">status<pos:position pos:line="19" pos:column="60"/></name></name><argument_list pos:line="19" pos:column="60">()<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="63"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">72<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="20">3<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="23">"peerDigestFetchReply: "<pos:position pos:line="20" pos:column="47"/></literal> <operator pos:line="20" pos:column="48">&lt;&lt;<pos:position pos:line="20" pos:column="56"/></operator> <name><name pos:line="20" pos:column="51">pd<pos:position pos:line="20" pos:column="53"/></name><operator pos:line="20" pos:column="53">-&gt;<pos:position pos:line="20" pos:column="58"/></operator><name pos:line="20" pos:column="55">host<pos:position pos:line="20" pos:column="59"/></name></name> <operator pos:line="20" pos:column="60">&lt;&lt;<pos:position pos:line="20" pos:column="68"/></operator> <literal type="string" pos:line="20" pos:column="63">" status: "<pos:position pos:line="20" pos:column="74"/></literal> <operator pos:line="20" pos:column="75">&lt;&lt;<pos:position pos:line="20" pos:column="83"/></operator> <name pos:line="20" pos:column="78">status<pos:position pos:line="20" pos:column="84"/></name> <operator pos:line="20" pos:column="85">&lt;&lt;<pos:position pos:line="20" pos:column="93"/></operator>
               <literal type="string" pos:line="21" pos:column="16">", expires: "<pos:position pos:line="21" pos:column="29"/></literal> <operator pos:line="21" pos:column="30">&lt;&lt;<pos:position pos:line="21" pos:column="38"/></operator> <operator pos:line="21" pos:column="33">(<pos:position pos:line="21" pos:column="34"/></operator><name pos:line="21" pos:column="34">long<pos:position pos:line="21" pos:column="38"/></name> <name pos:line="21" pos:column="39">int<pos:position pos:line="21" pos:column="42"/></name><operator pos:line="21" pos:column="42">)<pos:position pos:line="21" pos:column="43"/></operator> <name><name pos:line="21" pos:column="44">reply<pos:position pos:line="21" pos:column="49"/></name><operator pos:line="21" pos:column="49">-&gt;<pos:position pos:line="21" pos:column="54"/></operator><name pos:line="21" pos:column="51">expires<pos:position pos:line="21" pos:column="58"/></name></name> <operator pos:line="21" pos:column="59">&lt;&lt;<pos:position pos:line="21" pos:column="67"/></operator> <literal type="string" pos:line="21" pos:column="62">" ("<pos:position pos:line="21" pos:column="66"/></literal> <operator pos:line="21" pos:column="67">&lt;&lt;<pos:position pos:line="21" pos:column="75"/></operator> <name><name pos:line="21" pos:column="70">std<pos:position pos:line="21" pos:column="73"/></name><operator pos:line="21" pos:column="73">::<pos:position pos:line="21" pos:column="75"/></operator><name pos:line="21" pos:column="75">showpos<pos:position pos:line="21" pos:column="82"/></name></name> <operator pos:line="21" pos:column="83">&lt;&lt;<pos:position pos:line="21" pos:column="91"/></operator>
               <call pos:line="22" pos:column="16">(<name pos:line="22" pos:column="17">int<pos:position pos:line="22" pos:column="20"/></name>) <argument_list pos:line="22" pos:column="22">(<argument><expr><name><name pos:line="22" pos:column="23">reply<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">-&gt;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="30">expires<pos:position pos:line="22" pos:column="37"/></name></name> <operator pos:line="22" pos:column="38">-<pos:position pos:line="22" pos:column="39"/></operator> <name pos:line="22" pos:column="40">squid_curtime<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call> <operator pos:line="22" pos:column="55">&lt;&lt;<pos:position pos:line="22" pos:column="63"/></operator> <literal type="string" pos:line="22" pos:column="58">")"<pos:position pos:line="22" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="63"/></expr_stmt>

        <comment type="block" pos:line="24" pos:column="9">/* this "if" is based on clientHandleIMSReply() */</comment>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">status<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">==<pos:position pos:line="26" pos:column="22"/></operator> <name><name pos:line="26" pos:column="23">Http<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">::<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">scNotModified<pos:position pos:line="26" pos:column="42"/></name></name></expr>)<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43"> <block pos:line="26" pos:column="44">{
            <comment type="block" pos:line="27" pos:column="13">/* our old entry is fine */</comment>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">assert<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name><name pos:line="28" pos:column="20">fetch<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">old_entry<pos:position pos:line="28" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>

            <if pos:line="30" pos:column="13">if <condition pos:line="30" pos:column="16">(<expr><operator pos:line="30" pos:column="17">!<pos:position pos:line="30" pos:column="18"/></operator><name><name pos:line="30" pos:column="18">fetch<pos:position pos:line="30" pos:column="23"/></name><operator pos:line="30" pos:column="23">-&gt;<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="25">old_entry<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">-&gt;<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="36">mem_obj<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">-&gt;<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="45">request<pos:position pos:line="30" pos:column="52"/></name></name></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53"> <block pos:line="30" pos:column="54">{
                <expr_stmt><expr><name><name pos:line="31" pos:column="17">fetch<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">-&gt;<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="24">old_entry<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">-&gt;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="35">mem_obj<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">-&gt;<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="44">request<pos:position pos:line="31" pos:column="51"/></name></name> <operator pos:line="31" pos:column="52">=<pos:position pos:line="31" pos:column="53"/></operator> <name><name pos:line="31" pos:column="54">fetch<pos:position pos:line="31" pos:column="59"/></name><operator pos:line="31" pos:column="59">-&gt;<pos:position pos:line="31" pos:column="64"/></operator><name pos:line="31" pos:column="61">entry<pos:position pos:line="31" pos:column="66"/></name><operator pos:line="31" pos:column="66">-&gt;<pos:position pos:line="31" pos:column="71"/></operator><name pos:line="31" pos:column="68">mem_obj<pos:position pos:line="31" pos:column="75"/></name><operator pos:line="31" pos:column="75">-&gt;<pos:position pos:line="31" pos:column="80"/></operator><name pos:line="31" pos:column="77">request<pos:position pos:line="31" pos:column="84"/></name></name></expr>;<pos:position pos:line="31" pos:column="85"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="32" pos:column="17">HTTPMSGLOCK<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name><name pos:line="32" pos:column="29">fetch<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">-&gt;<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="36">old_entry<pos:position pos:line="32" pos:column="45"/></name><operator pos:line="32" pos:column="45">-&gt;<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="47">mem_obj<pos:position pos:line="32" pos:column="54"/></name><operator pos:line="32" pos:column="54">-&gt;<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="56">request<pos:position pos:line="32" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt>
            }<pos:position pos:line="33" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="35" pos:column="13">assert<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name><name pos:line="35" pos:column="20">fetch<pos:position pos:line="35" pos:column="25"/></name><operator pos:line="35" pos:column="25">-&gt;<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="27">old_entry<pos:position pos:line="35" pos:column="36"/></name><operator pos:line="35" pos:column="36">-&gt;<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="38">mem_obj<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">-&gt;<pos:position pos:line="35" pos:column="50"/></operator><name pos:line="35" pos:column="47">request<pos:position pos:line="35" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="56"/></expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="37" pos:column="13">Store<pos:position pos:line="37" pos:column="18"/></name><operator pos:line="37" pos:column="18">::<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">Root<pos:position pos:line="37" pos:column="24"/></name></name><argument_list pos:line="37" pos:column="24">()<pos:position pos:line="37" pos:column="26"/></argument_list></call><operator pos:line="37" pos:column="26">.<pos:position pos:line="37" pos:column="27"/></operator><call><name pos:line="37" pos:column="27">updateOnNotModified<pos:position pos:line="37" pos:column="46"/></name><argument_list pos:line="37" pos:column="46">(<argument><expr><name><name pos:line="37" pos:column="47">fetch<pos:position pos:line="37" pos:column="52"/></name><operator pos:line="37" pos:column="52">-&gt;<pos:position pos:line="37" pos:column="57"/></operator><name pos:line="37" pos:column="54">old_entry<pos:position pos:line="37" pos:column="63"/></name></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="65">*<pos:position pos:line="37" pos:column="66"/></operator><name><name pos:line="37" pos:column="66">fetch<pos:position pos:line="37" pos:column="71"/></name><operator pos:line="37" pos:column="71">-&gt;<pos:position pos:line="37" pos:column="76"/></operator><name pos:line="37" pos:column="73">entry<pos:position pos:line="37" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="80"/></expr_stmt>

            <comment type="block" pos:line="39" pos:column="13">/* get rid of 304 reply */</comment>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">storeUnregister<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name><name pos:line="40" pos:column="29">fetch<pos:position pos:line="40" pos:column="34"/></name><operator pos:line="40" pos:column="34">-&gt;<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="36">sc<pos:position pos:line="40" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="40">fetch<pos:position pos:line="40" pos:column="45"/></name><operator pos:line="40" pos:column="45">-&gt;<pos:position pos:line="40" pos:column="50"/></operator><name pos:line="40" pos:column="47">entry<pos:position pos:line="40" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="54">fetch<pos:position pos:line="40" pos:column="59"/></name></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="42" pos:column="13">fetch<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">-&gt;<pos:position pos:line="42" pos:column="23"/></operator><name pos:line="42" pos:column="20">entry<pos:position pos:line="42" pos:column="25"/></name><operator pos:line="42" pos:column="25">-&gt;<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="27">unlock<pos:position pos:line="42" pos:column="33"/></name></name><argument_list pos:line="42" pos:column="33">(<argument><expr><literal type="string" pos:line="42" pos:column="34">"peerDigestFetchReply 304"<pos:position pos:line="42" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="62"/></expr_stmt>

            <expr_stmt><expr><name><name pos:line="44" pos:column="13">fetch<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">-&gt;<pos:position pos:line="44" pos:column="23"/></operator><name pos:line="44" pos:column="20">entry<pos:position pos:line="44" pos:column="25"/></name></name> <operator pos:line="44" pos:column="26">=<pos:position pos:line="44" pos:column="27"/></operator> <name><name pos:line="44" pos:column="28">fetch<pos:position pos:line="44" pos:column="33"/></name><operator pos:line="44" pos:column="33">-&gt;<pos:position pos:line="44" pos:column="38"/></operator><name pos:line="44" pos:column="35">old_entry<pos:position pos:line="44" pos:column="44"/></name></name></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt>

            <expr_stmt><expr><name><name pos:line="46" pos:column="13">fetch<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">-&gt;<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="20">old_entry<pos:position pos:line="46" pos:column="29"/></name></name> <operator pos:line="46" pos:column="30">=<pos:position pos:line="46" pos:column="31"/></operator> <name pos:line="46" pos:column="32">NULL<pos:position pos:line="46" pos:column="36"/></name></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>

            <comment type="block" pos:line="48" pos:column="13">/* preserve request -- we need its size to update counters */</comment>
            <comment type="block" pos:line="49" pos:column="13">/* requestUnlink(r); */</comment>
            <comment type="block" pos:line="50" pos:column="13">/* fetch-&gt;entry-&gt;mem_obj-&gt;request = NULL; */</comment>
        }<pos:position pos:line="51" pos:column="10"/></block></then> <elseif pos:line="51" pos:column="11">else <if pos:line="51" pos:column="16">if <condition pos:line="51" pos:column="19">(<expr><name pos:line="51" pos:column="20">status<pos:position pos:line="51" pos:column="26"/></name> <operator pos:line="51" pos:column="27">==<pos:position pos:line="51" pos:column="29"/></operator> <name><name pos:line="51" pos:column="30">Http<pos:position pos:line="51" pos:column="34"/></name><operator pos:line="51" pos:column="34">::<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="36">scOkay<pos:position pos:line="51" pos:column="42"/></name></name></expr>)<pos:position pos:line="51" pos:column="43"/></condition><then pos:line="51" pos:column="43"> <block pos:line="51" pos:column="44">{
            <comment type="block" pos:line="52" pos:column="13">/* get rid of old entry if any */</comment>

            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><name><name pos:line="54" pos:column="17">fetch<pos:position pos:line="54" pos:column="22"/></name><operator pos:line="54" pos:column="22">-&gt;<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="24">old_entry<pos:position pos:line="54" pos:column="33"/></name></name></expr>)<pos:position pos:line="54" pos:column="34"/></condition><then pos:line="54" pos:column="34"> <block pos:line="54" pos:column="35">{
                <expr_stmt><expr><call><name pos:line="55" pos:column="17">debugs<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><literal type="number" pos:line="55" pos:column="24">72<pos:position pos:line="55" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="28">3<pos:position pos:line="55" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="31">"peerDigestFetchReply: got new digest, releasing old one"<pos:position pos:line="55" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="90"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">storeUnregister<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">(<argument><expr><name><name pos:line="56" pos:column="33">fetch<pos:position pos:line="56" pos:column="38"/></name><operator pos:line="56" pos:column="38">-&gt;<pos:position pos:line="56" pos:column="43"/></operator><name pos:line="56" pos:column="40">old_sc<pos:position pos:line="56" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="48">fetch<pos:position pos:line="56" pos:column="53"/></name><operator pos:line="56" pos:column="53">-&gt;<pos:position pos:line="56" pos:column="58"/></operator><name pos:line="56" pos:column="55">old_entry<pos:position pos:line="56" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="66">fetch<pos:position pos:line="56" pos:column="71"/></name></expr></argument>)<pos:position pos:line="56" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="73"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="57" pos:column="17">fetch<pos:position pos:line="57" pos:column="22"/></name><operator pos:line="57" pos:column="22">-&gt;<pos:position pos:line="57" pos:column="27"/></operator><name pos:line="57" pos:column="24">old_entry<pos:position pos:line="57" pos:column="33"/></name><operator pos:line="57" pos:column="33">-&gt;<pos:position pos:line="57" pos:column="38"/></operator><name pos:line="57" pos:column="35">releaseRequest<pos:position pos:line="57" pos:column="49"/></name></name><argument_list pos:line="57" pos:column="49">()<pos:position pos:line="57" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="58" pos:column="17">fetch<pos:position pos:line="58" pos:column="22"/></name><operator pos:line="58" pos:column="22">-&gt;<pos:position pos:line="58" pos:column="27"/></operator><name pos:line="58" pos:column="24">old_entry<pos:position pos:line="58" pos:column="33"/></name><operator pos:line="58" pos:column="33">-&gt;<pos:position pos:line="58" pos:column="38"/></operator><name pos:line="58" pos:column="35">unlock<pos:position pos:line="58" pos:column="41"/></name></name><argument_list pos:line="58" pos:column="41">(<argument><expr><literal type="string" pos:line="58" pos:column="42">"peerDigestFetchReply 200"<pos:position pos:line="58" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="70"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="59" pos:column="17">fetch<pos:position pos:line="59" pos:column="22"/></name><operator pos:line="59" pos:column="22">-&gt;<pos:position pos:line="59" pos:column="27"/></operator><name pos:line="59" pos:column="24">old_entry<pos:position pos:line="59" pos:column="33"/></name></name> <operator pos:line="59" pos:column="34">=<pos:position pos:line="59" pos:column="35"/></operator> <name pos:line="59" pos:column="36">NULL<pos:position pos:line="59" pos:column="40"/></name></expr>;<pos:position pos:line="59" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="60" pos:column="14"/></block></then></if>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if></elseif> <else pos:line="61" pos:column="11">else <block pos:line="61" pos:column="16">{
            <comment type="block" pos:line="62" pos:column="13">/* some kind of a bug */</comment>
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">peerDigestFetchAbort<pos:position pos:line="63" pos:column="33"/></name><argument_list pos:line="63" pos:column="33">(<argument><expr><name pos:line="63" pos:column="34">fetch<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="41">buf<pos:position pos:line="63" pos:column="44"/></name></expr></argument>, <argument><expr><call><name><name pos:line="63" pos:column="46">reply<pos:position pos:line="63" pos:column="51"/></name><operator pos:line="63" pos:column="51">-&gt;<pos:position pos:line="63" pos:column="56"/></operator><name pos:line="63" pos:column="53">sline<pos:position pos:line="63" pos:column="58"/></name><operator pos:line="63" pos:column="58">.<pos:position pos:line="63" pos:column="59"/></operator><name pos:line="63" pos:column="59">reason<pos:position pos:line="63" pos:column="65"/></name></name><argument_list pos:line="63" pos:column="65">()<pos:position pos:line="63" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="69"/></expr_stmt>
            <return pos:line="64" pos:column="13">return <expr><operator pos:line="64" pos:column="20">-<pos:position pos:line="64" pos:column="21"/></operator><literal type="number" pos:line="64" pos:column="21">1<pos:position pos:line="64" pos:column="22"/></literal></expr>;<pos:position pos:line="64" pos:column="23"/></return>      <comment type="block" pos:line="64" pos:column="29">/* XXX -1 will abort stuff in ReadReply! */</comment>
        }<pos:position pos:line="65" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="67" pos:column="9">/* must have a ready-to-use store entry if we got here */</comment>
        <comment type="block" pos:line="68" pos:column="9">/* can we stay with the old in-memory digest? */</comment>
        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">status<pos:position pos:line="69" pos:column="19"/></name> <operator pos:line="69" pos:column="20">==<pos:position pos:line="69" pos:column="22"/></operator> <name><name pos:line="69" pos:column="23">Http<pos:position pos:line="69" pos:column="27"/></name><operator pos:line="69" pos:column="27">::<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="29">scNotModified<pos:position pos:line="69" pos:column="42"/></name></name> <operator pos:line="69" pos:column="43">&amp;&amp;<pos:position pos:line="69" pos:column="53"/></operator> <name><name pos:line="69" pos:column="46">fetch<pos:position pos:line="69" pos:column="51"/></name><operator pos:line="69" pos:column="51">-&gt;<pos:position pos:line="69" pos:column="56"/></operator><name pos:line="69" pos:column="53">pd<pos:position pos:line="69" pos:column="55"/></name><operator pos:line="69" pos:column="55">-&gt;<pos:position pos:line="69" pos:column="60"/></operator><name pos:line="69" pos:column="57">cd<pos:position pos:line="69" pos:column="59"/></name></name></expr>)<pos:position pos:line="69" pos:column="60"/></condition><then pos:line="69" pos:column="60"> <block pos:line="69" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">peerDigestFetchStop<pos:position pos:line="70" pos:column="32"/></name><argument_list pos:line="70" pos:column="32">(<argument><expr><name pos:line="70" pos:column="33">fetch<pos:position pos:line="70" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="40">buf<pos:position pos:line="70" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="45">"Not modified"<pos:position pos:line="70" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="71" pos:column="13">fetch<pos:position pos:line="71" pos:column="18"/></name><operator pos:line="71" pos:column="18">-&gt;<pos:position pos:line="71" pos:column="23"/></operator><name pos:line="71" pos:column="20">state<pos:position pos:line="71" pos:column="25"/></name></name> <operator pos:line="71" pos:column="26">=<pos:position pos:line="71" pos:column="27"/></operator> <name pos:line="71" pos:column="28">DIGEST_READ_DONE<pos:position pos:line="71" pos:column="44"/></name></expr>;<pos:position pos:line="71" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="72" pos:column="10"/></block></then> <else pos:line="72" pos:column="11">else <block pos:line="72" pos:column="16">{
            <expr_stmt><expr><name><name pos:line="73" pos:column="13">fetch<pos:position pos:line="73" pos:column="18"/></name><operator pos:line="73" pos:column="18">-&gt;<pos:position pos:line="73" pos:column="23"/></operator><name pos:line="73" pos:column="20">state<pos:position pos:line="73" pos:column="25"/></name></name> <operator pos:line="73" pos:column="26">=<pos:position pos:line="73" pos:column="27"/></operator> <name pos:line="73" pos:column="28">DIGEST_READ_HEADERS<pos:position pos:line="73" pos:column="47"/></name></expr>;<pos:position pos:line="73" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="74" pos:column="10"/></block></else></if>
    }<pos:position pos:line="75" pos:column="6"/></block></then> <else pos:line="75" pos:column="7">else <block pos:line="75" pos:column="12">{
        <comment type="block" pos:line="76" pos:column="9">/* need more data, do we have space? */</comment>

        <if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">size<pos:position pos:line="78" pos:column="17"/></name> <operator pos:line="78" pos:column="18">&gt;=<pos:position pos:line="78" pos:column="23"/></operator> <name pos:line="78" pos:column="21">SM_PAGE_SIZE<pos:position pos:line="78" pos:column="33"/></name></expr>)<pos:position pos:line="78" pos:column="34"/></condition><then pos:line="78" pos:column="34">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="13">peerDigestFetchAbort<pos:position pos:line="79" pos:column="33"/></name><argument_list pos:line="79" pos:column="33">(<argument><expr><name pos:line="79" pos:column="34">fetch<pos:position pos:line="79" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="41">buf<pos:position pos:line="79" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="46">"reply header too big"<pos:position pos:line="79" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="70"/></expr_stmt></block></then></if>
    }<pos:position pos:line="80" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="82" pos:column="5">/* We don't want to actually ack that we've handled anything,
     * otherwise SwapInHeaders() won't get the reply line .. */</comment>
    <return pos:line="84" pos:column="5">return <expr><literal type="number" pos:line="84" pos:column="12">0<pos:position pos:line="84" pos:column="13"/></literal></expr>;<pos:position pos:line="84" pos:column="14"/></return>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
