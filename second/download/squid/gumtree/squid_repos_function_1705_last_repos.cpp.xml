<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1705_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">maybeMakeSpaceAvailable<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">(<parameter><decl><type><name pos:line="2" pos:column="40">bool<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">doGrow<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// how much we are allowed to buffer</comment>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">int<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">limitBuffer<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><operator pos:line="5" pos:column="29">(<pos:position pos:line="5" pos:column="30"/></operator><ternary><condition><expr><name><name pos:line="5" pos:column="30">flags<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">.<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="36">headers_parsed<pos:position pos:line="5" pos:column="50"/></name></name></expr> ?<pos:position pos:line="5" pos:column="52"/></condition><then pos:line="5" pos:column="52"> <expr><name><name pos:line="5" pos:column="53">Config<pos:position pos:line="5" pos:column="59"/></name><operator pos:line="5" pos:column="59">.<pos:position pos:line="5" pos:column="60"/></operator><name pos:line="5" pos:column="60">readAheadGap<pos:position pos:line="5" pos:column="72"/></name></name></expr> <pos:position pos:line="5" pos:column="73"/></then><else pos:line="5" pos:column="73">: <expr><name><name pos:line="5" pos:column="75">Config<pos:position pos:line="5" pos:column="81"/></name><operator pos:line="5" pos:column="81">.<pos:position pos:line="5" pos:column="82"/></operator><name pos:line="5" pos:column="82">maxReplyHeaderSize<pos:position pos:line="5" pos:column="100"/></name></name></expr></else></ternary><operator pos:line="5" pos:column="100">)<pos:position pos:line="5" pos:column="101"/></operator></expr></init></decl>;<pos:position pos:line="5" pos:column="102"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">limitBuffer<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">&lt;<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal> <operator pos:line="7" pos:column="25">||<pos:position pos:line="7" pos:column="27"/></operator> <call><name><name pos:line="7" pos:column="28">inBuf<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">.<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="34">length<pos:position pos:line="7" pos:column="40"/></name></name><argument_list pos:line="7" pos:column="40">()<pos:position pos:line="7" pos:column="42"/></argument_list></call> <operator pos:line="7" pos:column="43">&gt;=<pos:position pos:line="7" pos:column="48"/></operator> <operator pos:line="7" pos:column="46">(<pos:position pos:line="7" pos:column="47"/></operator><name><name pos:line="7" pos:column="47">SBuf<pos:position pos:line="7" pos:column="51"/></name><operator pos:line="7" pos:column="51">::<pos:position pos:line="7" pos:column="53"/></operator><name pos:line="7" pos:column="53">size_type<pos:position pos:line="7" pos:column="62"/></name></name><operator pos:line="7" pos:column="62">)<pos:position pos:line="7" pos:column="63"/></operator><name pos:line="7" pos:column="63">limitBuffer<pos:position pos:line="7" pos:column="74"/></name></expr>)<pos:position pos:line="7" pos:column="75"/></condition><then pos:line="7" pos:column="75"> <block pos:line="7" pos:column="76">{
        <comment type="line" pos:line="8" pos:column="9">// when buffer is at or over limit already</comment>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">11<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">7<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"wont read up to "<pos:position pos:line="9" pos:column="41"/></literal> <operator pos:line="9" pos:column="42">&lt;&lt;<pos:position pos:line="9" pos:column="50"/></operator> <name pos:line="9" pos:column="45">limitBuffer<pos:position pos:line="9" pos:column="56"/></name> <operator pos:line="9" pos:column="57">&lt;&lt;<pos:position pos:line="9" pos:column="65"/></operator> <literal type="string" pos:line="9" pos:column="60">". buffer has ("<pos:position pos:line="9" pos:column="76"/></literal> <operator pos:line="9" pos:column="77">&lt;&lt;<pos:position pos:line="9" pos:column="85"/></operator> <call><name><name pos:line="9" pos:column="80">inBuf<pos:position pos:line="9" pos:column="85"/></name><operator pos:line="9" pos:column="85">.<pos:position pos:line="9" pos:column="86"/></operator><name pos:line="9" pos:column="86">length<pos:position pos:line="9" pos:column="92"/></name></name><argument_list pos:line="9" pos:column="92">()<pos:position pos:line="9" pos:column="94"/></argument_list></call> <operator pos:line="9" pos:column="95">&lt;&lt;<pos:position pos:line="9" pos:column="103"/></operator> <literal type="string" pos:line="9" pos:column="98">"/"<pos:position pos:line="9" pos:column="101"/></literal> <operator pos:line="9" pos:column="102">&lt;&lt;<pos:position pos:line="9" pos:column="110"/></operator> <call><name><name pos:line="9" pos:column="105">inBuf<pos:position pos:line="9" pos:column="110"/></name><operator pos:line="9" pos:column="110">.<pos:position pos:line="9" pos:column="111"/></operator><name pos:line="9" pos:column="111">spaceSize<pos:position pos:line="9" pos:column="120"/></name></name><argument_list pos:line="9" pos:column="120">()<pos:position pos:line="9" pos:column="122"/></argument_list></call> <operator pos:line="9" pos:column="123">&lt;&lt;<pos:position pos:line="9" pos:column="131"/></operator> <literal type="string" pos:line="9" pos:column="126">") from "<pos:position pos:line="9" pos:column="135"/></literal> <operator pos:line="9" pos:column="136">&lt;&lt;<pos:position pos:line="9" pos:column="144"/></operator> <name pos:line="9" pos:column="139">serverConnection<pos:position pos:line="9" pos:column="155"/></name></expr></argument>)<pos:position pos:line="9" pos:column="156"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="157"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">11<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="20">DBG_DATA<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="30">"buffer has {"<pos:position pos:line="10" pos:column="44"/></literal> <operator pos:line="10" pos:column="45">&lt;&lt;<pos:position pos:line="10" pos:column="53"/></operator> <name pos:line="10" pos:column="48">inBuf<pos:position pos:line="10" pos:column="53"/></name> <operator pos:line="10" pos:column="54">&lt;&lt;<pos:position pos:line="10" pos:column="62"/></operator> <literal type="string" pos:line="10" pos:column="57">"}"<pos:position pos:line="10" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt>
        <comment type="line" pos:line="11" pos:column="9">// Process next response from buffer</comment>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">processReply<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">()<pos:position pos:line="12" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><literal type="boolean" pos:line="13" pos:column="16">false<pos:position pos:line="13" pos:column="21"/></literal></expr>;<pos:position pos:line="13" pos:column="22"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="16" pos:column="5">// how much we want to read</comment>
    <decl_stmt><decl><type><specifier pos:line="17" pos:column="5">const<pos:position pos:line="17" pos:column="10"/></specifier> <name pos:line="17" pos:column="11">size_t<pos:position pos:line="17" pos:column="17"/></name></type> <name pos:line="17" pos:column="18">read_size<pos:position pos:line="17" pos:column="27"/></name> <init pos:line="17" pos:column="28">= <expr><call><name pos:line="17" pos:column="30">calcBufferSpaceToReserve<pos:position pos:line="17" pos:column="54"/></name><argument_list pos:line="17" pos:column="54">(<argument><expr><call><name><name pos:line="17" pos:column="55">inBuf<pos:position pos:line="17" pos:column="60"/></name><operator pos:line="17" pos:column="60">.<pos:position pos:line="17" pos:column="61"/></operator><name pos:line="17" pos:column="61">spaceSize<pos:position pos:line="17" pos:column="70"/></name></name><argument_list pos:line="17" pos:column="70">()<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="17" pos:column="74">(<pos:position pos:line="17" pos:column="75"/></operator><name pos:line="17" pos:column="75">limitBuffer<pos:position pos:line="17" pos:column="86"/></name> <operator pos:line="17" pos:column="87">-<pos:position pos:line="17" pos:column="88"/></operator> <call><name><name pos:line="17" pos:column="89">inBuf<pos:position pos:line="17" pos:column="94"/></name><operator pos:line="17" pos:column="94">.<pos:position pos:line="17" pos:column="95"/></operator><name pos:line="17" pos:column="95">length<pos:position pos:line="17" pos:column="101"/></name></name><argument_list pos:line="17" pos:column="101">()<pos:position pos:line="17" pos:column="103"/></argument_list></call><operator pos:line="17" pos:column="103">)<pos:position pos:line="17" pos:column="104"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="105"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="106"/></decl_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">read_size<pos:position pos:line="19" pos:column="19"/></name></expr>)<pos:position pos:line="19" pos:column="20"/></condition><then pos:line="19" pos:column="20"> <block pos:line="19" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">11<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="20">7<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="23">"wont read up to "<pos:position pos:line="20" pos:column="41"/></literal> <operator pos:line="20" pos:column="42">&lt;&lt;<pos:position pos:line="20" pos:column="50"/></operator> <name pos:line="20" pos:column="45">read_size<pos:position pos:line="20" pos:column="54"/></name> <operator pos:line="20" pos:column="55">&lt;&lt;<pos:position pos:line="20" pos:column="63"/></operator> <literal type="string" pos:line="20" pos:column="58">" into buffer ("<pos:position pos:line="20" pos:column="74"/></literal> <operator pos:line="20" pos:column="75">&lt;&lt;<pos:position pos:line="20" pos:column="83"/></operator> <call><name><name pos:line="20" pos:column="78">inBuf<pos:position pos:line="20" pos:column="83"/></name><operator pos:line="20" pos:column="83">.<pos:position pos:line="20" pos:column="84"/></operator><name pos:line="20" pos:column="84">length<pos:position pos:line="20" pos:column="90"/></name></name><argument_list pos:line="20" pos:column="90">()<pos:position pos:line="20" pos:column="92"/></argument_list></call> <operator pos:line="20" pos:column="93">&lt;&lt;<pos:position pos:line="20" pos:column="101"/></operator> <literal type="string" pos:line="20" pos:column="96">"/"<pos:position pos:line="20" pos:column="99"/></literal> <operator pos:line="20" pos:column="100">&lt;&lt;<pos:position pos:line="20" pos:column="108"/></operator> <call><name><name pos:line="20" pos:column="103">inBuf<pos:position pos:line="20" pos:column="108"/></name><operator pos:line="20" pos:column="108">.<pos:position pos:line="20" pos:column="109"/></operator><name pos:line="20" pos:column="109">spaceSize<pos:position pos:line="20" pos:column="118"/></name></name><argument_list pos:line="20" pos:column="118">()<pos:position pos:line="20" pos:column="120"/></argument_list></call> <operator pos:line="20" pos:column="121">&lt;&lt;<pos:position pos:line="20" pos:column="129"/></operator> <literal type="string" pos:line="20" pos:column="124">") from "<pos:position pos:line="20" pos:column="133"/></literal> <operator pos:line="20" pos:column="134">&lt;&lt;<pos:position pos:line="20" pos:column="142"/></operator> <name pos:line="20" pos:column="137">serverConnection<pos:position pos:line="20" pos:column="153"/></name></expr></argument>)<pos:position pos:line="20" pos:column="154"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="155"/></expr_stmt>
        <return pos:line="21" pos:column="9">return <expr><literal type="boolean" pos:line="21" pos:column="16">false<pos:position pos:line="21" pos:column="21"/></literal></expr>;<pos:position pos:line="21" pos:column="22"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="24" pos:column="5">// just report whether we could grow or not, dont actually do it</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">doGrow<pos:position pos:line="25" pos:column="15"/></name></expr>)<pos:position pos:line="25" pos:column="16"/></condition><then pos:line="25" pos:column="16">
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><operator pos:line="26" pos:column="16">(<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="17">read_size<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">&gt;=<pos:position pos:line="26" pos:column="32"/></operator> <literal type="number" pos:line="26" pos:column="30">2<pos:position pos:line="26" pos:column="31"/></literal><operator pos:line="26" pos:column="31">)<pos:position pos:line="26" pos:column="32"/></operator></expr>;<pos:position pos:line="26" pos:column="33"/></return></block></then></if>

    <comment type="line" pos:line="28" pos:column="5">// we may need to grow the buffer</comment>
    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">inBuf<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">.<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">reserveSpace<pos:position pos:line="29" pos:column="23"/></name></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name pos:line="29" pos:column="24">read_size<pos:position pos:line="29" pos:column="33"/></name></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">debugs<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><literal type="number" pos:line="30" pos:column="12">11<pos:position pos:line="30" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="16">8<pos:position pos:line="30" pos:column="17"/></literal></expr></argument>, <argument><expr><operator pos:line="30" pos:column="19">(<pos:position pos:line="30" pos:column="20"/></operator><ternary><condition><expr><operator pos:line="30" pos:column="20">!<pos:position pos:line="30" pos:column="21"/></operator><name><name pos:line="30" pos:column="21">flags<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">.<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="27">do_next_read<pos:position pos:line="30" pos:column="39"/></name></name></expr> ?<pos:position pos:line="30" pos:column="41"/></condition><then pos:line="30" pos:column="41"> <expr><literal type="string" pos:line="30" pos:column="42">"wont"<pos:position pos:line="30" pos:column="48"/></literal></expr> <pos:position pos:line="30" pos:column="49"/></then><else pos:line="30" pos:column="49">: <expr><literal type="string" pos:line="30" pos:column="51">"may"<pos:position pos:line="30" pos:column="56"/></literal></expr></else></ternary><operator pos:line="30" pos:column="56">)<pos:position pos:line="30" pos:column="57"/></operator> <operator pos:line="30" pos:column="58">&lt;&lt;<pos:position pos:line="30" pos:column="66"/></operator>
           <literal type="string" pos:line="31" pos:column="12">" read up to "<pos:position pos:line="31" pos:column="26"/></literal> <operator pos:line="31" pos:column="27">&lt;&lt;<pos:position pos:line="31" pos:column="35"/></operator> <name pos:line="31" pos:column="30">read_size<pos:position pos:line="31" pos:column="39"/></name> <operator pos:line="31" pos:column="40">&lt;&lt;<pos:position pos:line="31" pos:column="48"/></operator> <literal type="string" pos:line="31" pos:column="43">" bytes info buf("<pos:position pos:line="31" pos:column="61"/></literal> <operator pos:line="31" pos:column="62">&lt;&lt;<pos:position pos:line="31" pos:column="70"/></operator> <call><name><name pos:line="31" pos:column="65">inBuf<pos:position pos:line="31" pos:column="70"/></name><operator pos:line="31" pos:column="70">.<pos:position pos:line="31" pos:column="71"/></operator><name pos:line="31" pos:column="71">length<pos:position pos:line="31" pos:column="77"/></name></name><argument_list pos:line="31" pos:column="77">()<pos:position pos:line="31" pos:column="79"/></argument_list></call> <operator pos:line="31" pos:column="80">&lt;&lt;<pos:position pos:line="31" pos:column="88"/></operator> <literal type="string" pos:line="31" pos:column="83">"/"<pos:position pos:line="31" pos:column="86"/></literal> <operator pos:line="31" pos:column="87">&lt;&lt;<pos:position pos:line="31" pos:column="95"/></operator> <call><name><name pos:line="31" pos:column="90">inBuf<pos:position pos:line="31" pos:column="95"/></name><operator pos:line="31" pos:column="95">.<pos:position pos:line="31" pos:column="96"/></operator><name pos:line="31" pos:column="96">spaceSize<pos:position pos:line="31" pos:column="105"/></name></name><argument_list pos:line="31" pos:column="105">()<pos:position pos:line="31" pos:column="107"/></argument_list></call> <operator pos:line="31" pos:column="108">&lt;&lt;<pos:position pos:line="31" pos:column="116"/></operator>
           <literal type="string" pos:line="32" pos:column="12">") from "<pos:position pos:line="32" pos:column="21"/></literal> <operator pos:line="32" pos:column="22">&lt;&lt;<pos:position pos:line="32" pos:column="30"/></operator> <name pos:line="32" pos:column="25">serverConnection<pos:position pos:line="32" pos:column="41"/></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>

    <return pos:line="34" pos:column="5">return <expr><operator pos:line="34" pos:column="12">(<pos:position pos:line="34" pos:column="13"/></operator><call><name><name pos:line="34" pos:column="13">inBuf<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">.<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="19">spaceSize<pos:position pos:line="34" pos:column="28"/></name></name><argument_list pos:line="34" pos:column="28">()<pos:position pos:line="34" pos:column="30"/></argument_list></call> <operator pos:line="34" pos:column="31">&gt;=<pos:position pos:line="34" pos:column="36"/></operator> <literal type="number" pos:line="34" pos:column="34">2<pos:position pos:line="34" pos:column="35"/></literal><operator pos:line="34" pos:column="35">)<pos:position pos:line="34" pos:column="36"/></operator></expr>;<pos:position pos:line="34" pos:column="37"/></return> <comment type="line" pos:line="34" pos:column="38">// only read if there is 1+ bytes of space available</comment>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
