<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3817_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">squid_bio_write<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">BIO<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">table<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">buf<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">int<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">size<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Ssl<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">::<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">Bio<pos:position pos:line="4" pos:column="13"/></name></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">bio<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><cast type="static" pos:line="4" pos:column="21">static_cast<argument_list type="generic" pos:line="4" pos:column="32">&lt;<argument><expr><name><name pos:line="4" pos:column="33">Ssl<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">::<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">Bio<pos:position pos:line="4" pos:column="41"/></name></name><operator pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="46"/></argument_list><argument_list pos:line="4" pos:column="43">(<argument><expr><call><name pos:line="4" pos:column="44">BIO_get_data<pos:position pos:line="4" pos:column="56"/></name><argument_list pos:line="4" pos:column="56">(<argument><expr><name pos:line="4" pos:column="57">table<pos:position pos:line="4" pos:column="62"/></name></expr></argument>)<pos:position pos:line="4" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="64"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="65"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">bio<pos:position pos:line="5" pos:column="15"/></name></expr></argument>)<pos:position pos:line="5" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="17"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><call><name><name pos:line="6" pos:column="12">bio<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">-&gt;<pos:position pos:line="6" pos:column="20"/></operator><name pos:line="6" pos:column="17">write<pos:position pos:line="6" pos:column="22"/></name></name><argument_list pos:line="6" pos:column="22">(<argument><expr><name pos:line="6" pos:column="23">buf<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="28">size<pos:position pos:line="6" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="34">table<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
