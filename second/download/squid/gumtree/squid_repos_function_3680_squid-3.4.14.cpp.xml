<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3680_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrRangeIter<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">updateSpec<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">()<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">debt_size<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">==<pos:position pos:line="4" pos:column="25"/></operator> <literal type="number" pos:line="4" pos:column="26">0<pos:position pos:line="4" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name> <argument_list pos:line="5" pos:column="12">(<argument><expr><name pos:line="5" pos:column="13">valid<pos:position pos:line="5" pos:column="18"/></name></expr></argument>)<pos:position pos:line="5" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><name pos:line="7" pos:column="9">pos<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">.<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">incrementable<pos:position pos:line="7" pos:column="26"/></name></name><argument_list pos:line="7" pos:column="26">()<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29"> <block pos:line="7" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debt<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><call><name pos:line="8" pos:column="14">currentSpec<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">()<pos:position pos:line="8" pos:column="27"/></argument_list></call><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">length<pos:position pos:line="8" pos:column="35"/></name></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
