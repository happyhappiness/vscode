<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3807_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ServerBio<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">readAndGive<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">buf<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">int<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">size<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">BIO<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">table<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// If we have unused buffered bytes, give those bytes to OpenSSL now,</comment>
    <comment type="line" pos:line="5" pos:column="5">// before reading more. TODO: Read if we have buffered less than size?</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">rbufConsumePos<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">&lt;<pos:position pos:line="6" pos:column="28"/></operator> <call><name><name pos:line="6" pos:column="26">rbuf<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">.<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="31">length<pos:position pos:line="6" pos:column="37"/></name></name><argument_list pos:line="6" pos:column="37">()<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="40"/></condition><then pos:line="6" pos:column="40">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><call><name pos:line="7" pos:column="16">giveBuffered<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name pos:line="7" pos:column="29">buf<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">size<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></return></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">record_<pos:position pos:line="9" pos:column="16"/></name></expr>)<pos:position pos:line="9" pos:column="17"/></condition><then pos:line="9" pos:column="17"> <block pos:line="9" pos:column="18">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">int<pos:position pos:line="10" pos:column="18"/></name></type> <name pos:line="10" pos:column="19">result<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><call><name pos:line="10" pos:column="28">readAndBuffer<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">(<argument><expr><name pos:line="10" pos:column="42">table<pos:position pos:line="10" pos:column="47"/></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="49"/></decl_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">result<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">&lt;=<pos:position pos:line="11" pos:column="25"/></operator> <literal type="number" pos:line="11" pos:column="23">0<pos:position pos:line="11" pos:column="24"/></literal></expr>)<pos:position pos:line="11" pos:column="25"/></condition><then pos:line="11" pos:column="25">
            <block type="pseudo"><return pos:line="12" pos:column="13">return <expr><name pos:line="12" pos:column="20">result<pos:position pos:line="12" pos:column="26"/></name></expr>;<pos:position pos:line="12" pos:column="27"/></return></block></then></if>
        <return pos:line="13" pos:column="9">return <expr><call><name pos:line="13" pos:column="16">giveBuffered<pos:position pos:line="13" pos:column="28"/></name><argument_list pos:line="13" pos:column="28">(<argument><expr><name pos:line="13" pos:column="29">buf<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="34">size<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="40"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <return pos:line="16" pos:column="5">return <expr><call><name><name pos:line="16" pos:column="12">Ssl<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">::<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">Bio<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">::<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">read<pos:position pos:line="16" pos:column="26"/></name></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">buf<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">size<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">table<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
