<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_927_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ClientInfo<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">refillBucket<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">()<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// all these times are in seconds, with double precision</comment>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">double<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">currTime<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name pos:line="5" pos:column="29">current_dtime<pos:position pos:line="5" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">double<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">timePassed<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name pos:line="6" pos:column="31">currTime<pos:position pos:line="6" pos:column="39"/></name> <operator pos:line="6" pos:column="40">-<pos:position pos:line="6" pos:column="41"/></operator> <name pos:line="6" pos:column="42">prevTime<pos:position pos:line="6" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="51"/></decl_stmt>

    <comment type="line" pos:line="8" pos:column="5">// Calculate allowance for the time passed. Use double to avoid</comment>
    <comment type="line" pos:line="9" pos:column="5">// accumulating rounding errors for small intervals. For example, always</comment>
    <comment type="line" pos:line="10" pos:column="5">// adding 1 byte instead of 1.4 results in 29% bandwidth allocation error.</comment>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">double<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">gain<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><name pos:line="11" pos:column="25">timePassed<pos:position pos:line="11" pos:column="35"/></name> <operator pos:line="11" pos:column="36">*<pos:position pos:line="11" pos:column="37"/></operator> <name pos:line="11" pos:column="38">writeSpeedLimit<pos:position pos:line="11" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="54"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">77<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="13" pos:column="15">5<pos:position pos:line="13" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="18">HERE<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&lt;&lt;<pos:position pos:line="13" pos:column="31"/></operator> <name pos:line="13" pos:column="26">currTime<pos:position pos:line="13" pos:column="34"/></name> <operator pos:line="13" pos:column="35">&lt;&lt;<pos:position pos:line="13" pos:column="43"/></operator> <literal type="string" pos:line="13" pos:column="38">" clt"<pos:position pos:line="13" pos:column="44"/></literal> <operator pos:line="13" pos:column="45">&lt;&lt;<pos:position pos:line="13" pos:column="53"/></operator> <operator pos:line="13" pos:column="48">(<pos:position pos:line="13" pos:column="49"/></operator><specifier pos:line="13" pos:column="49">const<pos:position pos:line="13" pos:column="54"/></specifier> <name pos:line="13" pos:column="55">char<pos:position pos:line="13" pos:column="59"/></name><operator pos:line="13" pos:column="59">*<pos:position pos:line="13" pos:column="60"/></operator><operator pos:line="13" pos:column="60">)<pos:position pos:line="13" pos:column="61"/></operator><name><name pos:line="13" pos:column="61">hash<pos:position pos:line="13" pos:column="65"/></name><operator pos:line="13" pos:column="65">.<pos:position pos:line="13" pos:column="66"/></operator><name pos:line="13" pos:column="66">key<pos:position pos:line="13" pos:column="69"/></name></name> <operator pos:line="13" pos:column="70">&lt;&lt;<pos:position pos:line="13" pos:column="78"/></operator> <literal type="string" pos:line="13" pos:column="73">": "<pos:position pos:line="13" pos:column="77"/></literal> <operator pos:line="13" pos:column="78">&lt;&lt;<pos:position pos:line="13" pos:column="86"/></operator>
           <name pos:line="14" pos:column="12">bucketSize<pos:position pos:line="14" pos:column="22"/></name> <operator pos:line="14" pos:column="23">&lt;&lt;<pos:position pos:line="14" pos:column="31"/></operator> <literal type="string" pos:line="14" pos:column="26">" + ("<pos:position pos:line="14" pos:column="32"/></literal> <operator pos:line="14" pos:column="33">&lt;&lt;<pos:position pos:line="14" pos:column="41"/></operator> <name pos:line="14" pos:column="36">timePassed<pos:position pos:line="14" pos:column="46"/></name> <operator pos:line="14" pos:column="47">&lt;&lt;<pos:position pos:line="14" pos:column="55"/></operator> <literal type="string" pos:line="14" pos:column="50">" * "<pos:position pos:line="14" pos:column="55"/></literal> <operator pos:line="14" pos:column="56">&lt;&lt;<pos:position pos:line="14" pos:column="64"/></operator> <name pos:line="14" pos:column="59">writeSpeedLimit<pos:position pos:line="14" pos:column="74"/></name> <operator pos:line="14" pos:column="75">&lt;&lt;<pos:position pos:line="14" pos:column="83"/></operator>
           <literal type="string" pos:line="15" pos:column="12">" = "<pos:position pos:line="15" pos:column="17"/></literal> <operator pos:line="15" pos:column="18">&lt;&lt;<pos:position pos:line="15" pos:column="26"/></operator> <name pos:line="15" pos:column="21">gain<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">&lt;&lt;<pos:position pos:line="15" pos:column="34"/></operator> <literal type="char" pos:line="15" pos:column="29">')'<pos:position pos:line="15" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>

    <comment type="line" pos:line="17" pos:column="5">// to further combat error accumulation during micro updates,</comment>
    <comment type="line" pos:line="18" pos:column="5">// quit before updating time if we cannot add at least one byte</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">gain<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">&lt;<pos:position pos:line="19" pos:column="18"/></operator> <literal type="number" pos:line="19" pos:column="16">1.0<pos:position pos:line="19" pos:column="19"/></literal></expr>)<pos:position pos:line="19" pos:column="20"/></condition><then pos:line="19" pos:column="20">
        <block type="pseudo"><return pos:line="20" pos:column="9">return;<pos:position pos:line="20" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="22" pos:column="5">prevTime<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">currTime<pos:position pos:line="22" pos:column="24"/></name></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>

    <comment type="line" pos:line="24" pos:column="5">// for "first" connections, drain initial fat before refilling but keep</comment>
    <comment type="line" pos:line="25" pos:column="5">// updating prevTime to avoid bursts after the fat is gone</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">bucketSize<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">&gt;<pos:position pos:line="26" pos:column="24"/></operator> <name pos:line="26" pos:column="22">bucketSizeLimit<pos:position pos:line="26" pos:column="37"/></name></expr>)<pos:position pos:line="26" pos:column="38"/></condition><then pos:line="26" pos:column="38"> <block pos:line="26" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">77<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="19">4<pos:position pos:line="27" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="22">HERE<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">&lt;&lt;<pos:position pos:line="27" pos:column="35"/></operator> <literal type="string" pos:line="27" pos:column="30">"not refilling while draining initial fat"<pos:position pos:line="27" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></expr_stmt>
        <return pos:line="28" pos:column="9">return;<pos:position pos:line="28" pos:column="16"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">bucketSize<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">+=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">gain<pos:position pos:line="31" pos:column="23"/></name></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>

    <comment type="line" pos:line="33" pos:column="5">// obey quota limits</comment>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">bucketSize<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">&gt;<pos:position pos:line="34" pos:column="24"/></operator> <name pos:line="34" pos:column="22">bucketSizeLimit<pos:position pos:line="34" pos:column="37"/></name></expr>)<pos:position pos:line="34" pos:column="38"/></condition><then pos:line="34" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="9">bucketSize<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <name pos:line="35" pos:column="22">bucketSizeLimit<pos:position pos:line="35" pos:column="37"/></name></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt></block></then></if>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
