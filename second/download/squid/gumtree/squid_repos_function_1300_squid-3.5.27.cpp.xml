<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1300_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">PeerPoolMgr<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">handleOpenedConnection<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">(<parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">CommConnectCbParams<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">&amp;<pos:position pos:line="2" pos:column="68"/></modifier></type><name pos:line="2" pos:column="64">params<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">opener<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <name pos:line="4" pos:column="14">NULL<pos:position pos:line="4" pos:column="18"/></name></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name pos:line="6" pos:column="10">validPeer<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">()<pos:position pos:line="6" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22"> <block pos:line="6" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">48<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">3<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="23">"peer gone"<pos:position pos:line="7" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="36"/></expr_stmt>
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">params<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">.<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">conn<pos:position pos:line="8" pos:column="24"/></name></name> <operator pos:line="8" pos:column="25">!=<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="28">NULL<pos:position pos:line="8" pos:column="32"/></name></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="9" pos:column="13">params<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">.<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">conn<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">-&gt;<pos:position pos:line="9" pos:column="29"/></operator><name pos:line="9" pos:column="26">close<pos:position pos:line="9" pos:column="31"/></name></name><argument_list pos:line="9" pos:column="31">()<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt></block></then></if>
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">params<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">flag<pos:position pos:line="13" pos:column="20"/></name></name> <operator pos:line="13" pos:column="21">!=<pos:position pos:line="13" pos:column="23"/></operator> <name><name pos:line="13" pos:column="24">Comm<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">::<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">OK<pos:position pos:line="13" pos:column="32"/></name></name></expr>)<pos:position pos:line="13" pos:column="33"/></condition><then pos:line="13" pos:column="33"> <block pos:line="13" pos:column="34">{
        <comment type="block" pos:line="14" pos:column="9">/* it might have been a timeout with a partially open link */</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">params<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">.<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">conn<pos:position pos:line="15" pos:column="24"/></name></name> <operator pos:line="15" pos:column="25">!=<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">NULL<pos:position pos:line="15" pos:column="32"/></name></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="16" pos:column="13">params<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">.<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">conn<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">-&gt;<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="26">close<pos:position pos:line="16" pos:column="31"/></name></name><argument_list pos:line="16" pos:column="31">()<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">peerConnectFailed<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">peer<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">checkpoint<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><literal type="string" pos:line="18" pos:column="20">"conn opening failure"<pos:position pos:line="18" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt> <comment type="line" pos:line="18" pos:column="45">// may retry</comment>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">Must<pos:position pos:line="22" pos:column="9"/></name><argument_list pos:line="22" pos:column="9">(<argument><expr><name><name pos:line="22" pos:column="10">params<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">.<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">conn<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">!=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">NULL<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>

<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><name pos:line="24" pos:column="5">USE_OPENSSL<pos:position pos:line="24" pos:column="16"/></name></expr></cpp:if>
    <comment type="line" pos:line="25" pos:column="5">// Handle SSL peers.</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">peer<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">use_ssl<pos:position pos:line="26" pos:column="22"/></name></name></expr>)<pos:position pos:line="26" pos:column="23"/></condition><then pos:line="26" pos:column="23"> <block pos:line="26" pos:column="24">{
        <typedef pos:line="27" pos:column="9">typedef <type><name><name pos:line="27" pos:column="17">CommCbMemFunT<pos:position pos:line="27" pos:column="30"/></name><argument_list type="generic" pos:line="27" pos:column="30">&lt;<argument><expr><name pos:line="27" pos:column="31">PeerPoolMgr<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">CommCloseCbParams<pos:position pos:line="27" pos:column="61"/></name></expr></argument>&gt;<pos:position pos:line="27" pos:column="65"/></argument_list></name></type> <name pos:line="27" pos:column="63">CloserDialer<pos:position pos:line="27" pos:column="75"/></name>;<pos:position pos:line="27" pos:column="76"/></typedef>
        <expr_stmt><expr><name pos:line="28" pos:column="9">closer<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">JobCallback<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><literal type="number" pos:line="28" pos:column="30">48<pos:position pos:line="28" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="34">3<pos:position pos:line="28" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="37">CloserDialer<pos:position pos:line="28" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="51">this<pos:position pos:line="28" pos:column="55"/></name></expr></argument>,
                             <argument><expr><name><name pos:line="29" pos:column="30">PeerPoolMgr<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">::<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="43">handleSecureClosure<pos:position pos:line="29" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">comm_add_close_handler<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name><name pos:line="30" pos:column="32">params<pos:position pos:line="30" pos:column="38"/></name><operator pos:line="30" pos:column="38">.<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="39">conn<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">-&gt;<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="45">fd<pos:position pos:line="30" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">closer<pos:position pos:line="30" pos:column="55"/></name></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="57"/></expr_stmt>

        <expr_stmt><expr><name pos:line="32" pos:column="9">securer<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">=<pos:position pos:line="32" pos:column="18"/></operator> <call><name pos:line="32" pos:column="19">asyncCall<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><literal type="number" pos:line="32" pos:column="29">48<pos:position pos:line="32" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="33">4<pos:position pos:line="32" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="36">"PeerPoolMgr::handleSecuredPeer"<pos:position pos:line="32" pos:column="68"/></literal></expr></argument>,
                            <argument><expr><call><name pos:line="33" pos:column="29">MyAnswerDialer<pos:position pos:line="33" pos:column="43"/></name><argument_list pos:line="33" pos:column="43">(<argument><expr><name pos:line="33" pos:column="44">this<pos:position pos:line="33" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="50">&amp;<pos:position pos:line="33" pos:column="55"/></operator><name><name pos:line="33" pos:column="51">PeerPoolMgr<pos:position pos:line="33" pos:column="62"/></name><operator pos:line="33" pos:column="62">::<pos:position pos:line="33" pos:column="64"/></operator><name pos:line="33" pos:column="64">handleSecuredPeer<pos:position pos:line="33" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="84"/></expr_stmt>

        <decl_stmt><decl><type><specifier pos:line="35" pos:column="9">const<pos:position pos:line="35" pos:column="14"/></specifier> <name pos:line="35" pos:column="15">int<pos:position pos:line="35" pos:column="18"/></name></type> <name pos:line="35" pos:column="19">peerTimeout<pos:position pos:line="35" pos:column="30"/></name> <init pos:line="35" pos:column="31">= <expr><ternary><condition><expr><name><name pos:line="35" pos:column="33">peer<pos:position pos:line="35" pos:column="37"/></name><operator pos:line="35" pos:column="37">-&gt;<pos:position pos:line="35" pos:column="42"/></operator><name pos:line="35" pos:column="39">connect_timeout<pos:position pos:line="35" pos:column="54"/></name></name> <operator pos:line="35" pos:column="55">&gt;<pos:position pos:line="35" pos:column="59"/></operator> <literal type="number" pos:line="35" pos:column="57">0<pos:position pos:line="35" pos:column="58"/></literal></expr> ?<pos:position pos:line="35" pos:column="60"/></condition><then pos:line="35" pos:column="60">
                                <expr><name><name pos:line="36" pos:column="33">peer<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">-&gt;<pos:position pos:line="36" pos:column="42"/></operator><name pos:line="36" pos:column="39">connect_timeout<pos:position pos:line="36" pos:column="54"/></name></name></expr> <pos:position pos:line="36" pos:column="55"/></then><else pos:line="36" pos:column="55">: <expr><name><name pos:line="36" pos:column="57">Config<pos:position pos:line="36" pos:column="63"/></name><operator pos:line="36" pos:column="63">.<pos:position pos:line="36" pos:column="64"/></operator><name pos:line="36" pos:column="64">Timeout<pos:position pos:line="36" pos:column="71"/></name><operator pos:line="36" pos:column="71">.<pos:position pos:line="36" pos:column="72"/></operator><name pos:line="36" pos:column="72">peer_connect<pos:position pos:line="36" pos:column="84"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="36" pos:column="85"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">const<pos:position pos:line="37" pos:column="14"/></specifier> <name pos:line="37" pos:column="15">int<pos:position pos:line="37" pos:column="18"/></name></type> <name pos:line="37" pos:column="19">timeUsed<pos:position pos:line="37" pos:column="27"/></name> <init pos:line="37" pos:column="28">= <expr><name pos:line="37" pos:column="30">squid_curtime<pos:position pos:line="37" pos:column="43"/></name> <operator pos:line="37" pos:column="44">-<pos:position pos:line="37" pos:column="45"/></operator> <call><name><name pos:line="37" pos:column="46">params<pos:position pos:line="37" pos:column="52"/></name><operator pos:line="37" pos:column="52">.<pos:position pos:line="37" pos:column="53"/></operator><name pos:line="37" pos:column="53">conn<pos:position pos:line="37" pos:column="57"/></name><operator pos:line="37" pos:column="57">-&gt;<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="59">startTime<pos:position pos:line="37" pos:column="68"/></name></name><argument_list pos:line="37" pos:column="68">()<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="71"/></decl_stmt>
        <comment type="line" pos:line="38" pos:column="9">// Use positive timeout when less than one second is left for conn.</comment>
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">const<pos:position pos:line="39" pos:column="14"/></specifier> <name pos:line="39" pos:column="15">int<pos:position pos:line="39" pos:column="18"/></name></type> <name pos:line="39" pos:column="19">timeLeft<pos:position pos:line="39" pos:column="27"/></name> <init pos:line="39" pos:column="28">= <expr><call><name pos:line="39" pos:column="30">max<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><literal type="number" pos:line="39" pos:column="34">1<pos:position pos:line="39" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="39" pos:column="37">(<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="38">peerTimeout<pos:position pos:line="39" pos:column="49"/></name> <operator pos:line="39" pos:column="50">-<pos:position pos:line="39" pos:column="51"/></operator> <name pos:line="39" pos:column="52">timeUsed<pos:position pos:line="39" pos:column="60"/></name><operator pos:line="39" pos:column="60">)<pos:position pos:line="39" pos:column="61"/></operator></expr></argument>)<pos:position pos:line="39" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="39" pos:column="63"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="40" pos:column="9">Ssl<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">::<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="14">PeerConnector<pos:position pos:line="40" pos:column="27"/></name></name> <modifier pos:line="40" pos:column="28">*<pos:position pos:line="40" pos:column="29"/></modifier></type><name pos:line="40" pos:column="29">connector<pos:position pos:line="40" pos:column="38"/></name> <init pos:line="40" pos:column="39">=
            <expr><operator pos:line="41" pos:column="13">new<pos:position pos:line="41" pos:column="16"/></operator> <call><name><name pos:line="41" pos:column="17">Ssl<pos:position pos:line="41" pos:column="20"/></name><operator pos:line="41" pos:column="20">::<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">PeerConnector<pos:position pos:line="41" pos:column="35"/></name></name><argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">request<pos:position pos:line="41" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="45">params<pos:position pos:line="41" pos:column="51"/></name><operator pos:line="41" pos:column="51">.<pos:position pos:line="41" pos:column="52"/></operator><name pos:line="41" pos:column="52">conn<pos:position pos:line="41" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">NULL<pos:position pos:line="41" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="64">securer<pos:position pos:line="41" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="73">timeLeft<pos:position pos:line="41" pos:column="81"/></name></expr></argument>)<pos:position pos:line="41" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="83"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="42" pos:column="9">AsyncJob<pos:position pos:line="42" pos:column="17"/></name><operator pos:line="42" pos:column="17">::<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="19">Start<pos:position pos:line="42" pos:column="24"/></name></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">connector<pos:position pos:line="42" pos:column="34"/></name></expr></argument>)<pos:position pos:line="42" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="36"/></expr_stmt> <comment type="line" pos:line="42" pos:column="37">// will call our callback</comment>
        <return pos:line="43" pos:column="9">return;<pos:position pos:line="43" pos:column="16"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">pushNewConnection<pos:position pos:line="47" pos:column="22"/></name><argument_list pos:line="47" pos:column="22">(<argument><expr><name><name pos:line="47" pos:column="23">params<pos:position pos:line="47" pos:column="29"/></name><operator pos:line="47" pos:column="29">.<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="30">conn<pos:position pos:line="47" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
