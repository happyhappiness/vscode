<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1276_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">memClean<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name pos:line="2" pos:column="10">void<pos:position pos:line="2" pos:column="14"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="15"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">MemPoolGlobalStats<pos:position pos:line="4" pos:column="23"/></name></type> <name pos:line="4" pos:column="24">stats<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">Config<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">.<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">MemPools<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">.<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">limit<pos:position pos:line="5" pos:column="30"/></name></name> <operator pos:line="5" pos:column="31">&gt;<pos:position pos:line="5" pos:column="35"/></operator> <literal type="number" pos:line="5" pos:column="33">0<pos:position pos:line="5" pos:column="34"/></literal></expr>)<pos:position pos:line="5" pos:column="35"/></condition><then pos:line="5" pos:column="35"> <comment type="line" pos:line="5" pos:column="36">// do not reset if disabled or same</comment>
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="6" pos:column="9">MemPools<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">::<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">GetInstance<pos:position pos:line="6" pos:column="30"/></name></name><argument_list pos:line="6" pos:column="30">()<pos:position pos:line="6" pos:column="32"/></argument_list></call><operator pos:line="6" pos:column="32">.<pos:position pos:line="6" pos:column="33"/></operator><call><name pos:line="6" pos:column="33">setIdleLimit<pos:position pos:line="6" pos:column="45"/></name><argument_list pos:line="6" pos:column="45">(<argument><expr><literal type="number" pos:line="6" pos:column="46">0<pos:position pos:line="6" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="49"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">MemPools<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">::<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">GetInstance<pos:position pos:line="7" pos:column="26"/></name></name><argument_list pos:line="7" pos:column="26">()<pos:position pos:line="7" pos:column="28"/></argument_list></call><operator pos:line="7" pos:column="28">.<pos:position pos:line="7" pos:column="29"/></operator><call><name pos:line="7" pos:column="29">clean<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><literal type="number" pos:line="7" pos:column="35">0<pos:position pos:line="7" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">memPoolGetGlobalStats<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><operator pos:line="8" pos:column="27">&amp;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="28">stats<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">stats<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">.<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">tot_items_inuse<pos:position pos:line="10" pos:column="30"/></name></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">13<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">2<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"memCleanModule: "<pos:position pos:line="11" pos:column="41"/></literal> <operator pos:line="11" pos:column="42">&lt;&lt;<pos:position pos:line="11" pos:column="50"/></operator> <name><name pos:line="11" pos:column="45">stats<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">.<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="51">tot_items_inuse<pos:position pos:line="11" pos:column="66"/></name></name> <operator pos:line="11" pos:column="67">&lt;&lt;<pos:position pos:line="11" pos:column="75"/></operator>
               <literal type="string" pos:line="12" pos:column="16">" items in "<pos:position pos:line="12" pos:column="28"/></literal> <operator pos:line="12" pos:column="29">&lt;&lt;<pos:position pos:line="12" pos:column="37"/></operator> <name><name pos:line="12" pos:column="32">stats<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">.<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="38">tot_chunks_inuse<pos:position pos:line="12" pos:column="54"/></name></name> <operator pos:line="12" pos:column="55">&lt;&lt;<pos:position pos:line="12" pos:column="63"/></operator> <literal type="string" pos:line="12" pos:column="58">" chunks and "<pos:position pos:line="12" pos:column="72"/></literal> <operator pos:line="12" pos:column="73">&lt;&lt;<pos:position pos:line="12" pos:column="81"/></operator>
               <name><name pos:line="13" pos:column="16">stats<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">.<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">tot_pools_inuse<pos:position pos:line="13" pos:column="37"/></name></name> <operator pos:line="13" pos:column="38">&lt;&lt;<pos:position pos:line="13" pos:column="46"/></operator> <literal type="string" pos:line="13" pos:column="41">" pools are left dirty"<pos:position pos:line="13" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt></block></then></if>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
