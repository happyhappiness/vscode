<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4884_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">RequestParser<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">parseMethodField<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">(<parameter><decl><type><name><name pos:line="2" pos:column="44">Http1<pos:position pos:line="2" pos:column="49"/></name><operator pos:line="2" pos:column="49">::<pos:position pos:line="2" pos:column="51"/></operator><name pos:line="2" pos:column="51">Tokenizer<pos:position pos:line="2" pos:column="60"/></name></name> <modifier pos:line="2" pos:column="61">&amp;<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="62">tok<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// method field is a sequence of TCHAR.</comment>
    <comment type="line" pos:line="5" pos:column="5">// Limit to 32 characters to prevent overly long sequences of non-HTTP</comment>
    <comment type="line" pos:line="6" pos:column="5">// being sucked in before mismatch is detected. 32 is itself annoyingly</comment>
    <comment type="line" pos:line="7" pos:column="5">// big but there are methods registered by IANA that reach 17 bytes:</comment>
    <comment type="line" pos:line="8" pos:column="5">//  http://www.iana.org/assignments/http-methods</comment>
    <decl_stmt><decl><specifier pos:line="9" pos:column="5">static<pos:position pos:line="9" pos:column="11"/></specifier> <type><specifier pos:line="9" pos:column="12">const<pos:position pos:line="9" pos:column="17"/></specifier> <name pos:line="9" pos:column="18">size_t<pos:position pos:line="9" pos:column="24"/></name></type> <name pos:line="9" pos:column="25">maxMethodLength<pos:position pos:line="9" pos:column="40"/></name> <init pos:line="9" pos:column="41">= <expr><literal type="number" pos:line="9" pos:column="43">32<pos:position pos:line="9" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="46"/></decl_stmt> <comment type="line" pos:line="9" pos:column="47">// TODO: make this configurable?</comment>

    <decl_stmt><decl><type><name pos:line="11" pos:column="5">SBuf<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">methodFound<pos:position pos:line="11" pos:column="21"/></name></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><call><name><name pos:line="12" pos:column="10">tok<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">.<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">prefix<pos:position pos:line="12" pos:column="20"/></name></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">methodFound<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="34">CharacterSet<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">::<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="48">TCHAR<pos:position pos:line="12" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="55">maxMethodLength<pos:position pos:line="12" pos:column="70"/></name></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="72"/></condition><then pos:line="12" pos:column="72"> <block pos:line="12" pos:column="73">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">33<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="20">ErrorLevel<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">()<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="34">"invalid request-line: missing or malformed method"<pos:position pos:line="13" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="87"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">parseStatusCode<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">=<pos:position pos:line="14" pos:column="26"/></operator> <name><name pos:line="14" pos:column="27">Http<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">::<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="33">scBadRequest<pos:position pos:line="14" pos:column="45"/></name></name></expr>;<pos:position pos:line="14" pos:column="46"/></expr_stmt>
        <return pos:line="15" pos:column="9">return <expr><literal type="boolean" pos:line="15" pos:column="16">false<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="17" pos:column="5">method_<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">HttpRequestMethod<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">methodFound<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><call><name pos:line="19" pos:column="10">skipDelimiter<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><call><name><name pos:line="19" pos:column="24">tok<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">.<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="28">skipAll<pos:position pos:line="19" pos:column="35"/></name></name><argument_list pos:line="19" pos:column="35">(<argument><expr><call><name pos:line="19" pos:column="36">DelimiterCharacters<pos:position pos:line="19" pos:column="55"/></name><argument_list pos:line="19" pos:column="55">()<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="60">"after method"<pos:position pos:line="19" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="76"/></condition><then pos:line="19" pos:column="76">
        <block type="pseudo"><return pos:line="20" pos:column="9">return <expr><literal type="boolean" pos:line="20" pos:column="16">false<pos:position pos:line="20" pos:column="21"/></literal></expr>;<pos:position pos:line="20" pos:column="22"/></return></block></then></if>

    <return pos:line="22" pos:column="5">return <expr><literal type="boolean" pos:line="22" pos:column="12">true<pos:position pos:line="22" pos:column="16"/></literal></expr>;<pos:position pos:line="22" pos:column="17"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
