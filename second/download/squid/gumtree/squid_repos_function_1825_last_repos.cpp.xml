<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1825_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FwdState<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">Start<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name><name pos:line="2" pos:column="23">Comm<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">ConnectionPointer<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">&amp;<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="48">clientConn<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">StoreEntry<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">entry<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="79">HttpRequest<pos:position pos:line="2" pos:column="90"/></name> <modifier pos:line="2" pos:column="91">*<pos:position pos:line="2" pos:column="92"/></modifier></type><name pos:line="2" pos:column="92">request<pos:position pos:line="2" pos:column="99"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="101">const<pos:position pos:line="2" pos:column="106"/></specifier> <name pos:line="2" pos:column="107">AccessLogEntryPointer<pos:position pos:line="2" pos:column="128"/></name> <modifier pos:line="2" pos:column="129">&amp;<pos:position pos:line="2" pos:column="134"/></modifier></type><name pos:line="2" pos:column="130">al<pos:position pos:line="2" pos:column="132"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="133"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" format="doxygen" pos:line="4" pos:column="5">/** \note
     * client_addr == no_addr indicates this is an "internal" request
     * from peer_digest.c, asn.c, netdb.c, etc and should always
     * be allowed.  yuck, I know.
     */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">( <expr><name><name pos:line="10" pos:column="10">Config<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">.<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">accessList<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">.<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">miss<pos:position pos:line="10" pos:column="32"/></name></name> <operator pos:line="10" pos:column="33">&amp;&amp;<pos:position pos:line="10" pos:column="43"/></operator> <operator pos:line="10" pos:column="36">!<pos:position pos:line="10" pos:column="37"/></operator><call><name><name pos:line="10" pos:column="37">request<pos:position pos:line="10" pos:column="44"/></name><operator pos:line="10" pos:column="44">-&gt;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="46">client_addr<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">.<pos:position pos:line="10" pos:column="58"/></operator><name pos:line="10" pos:column="58">isNoAddr<pos:position pos:line="10" pos:column="66"/></name></name><argument_list pos:line="10" pos:column="66">()<pos:position pos:line="10" pos:column="68"/></argument_list></call> <operator pos:line="10" pos:column="69">&amp;&amp;<pos:position pos:line="10" pos:column="79"/></operator>
            <operator pos:line="11" pos:column="13">!<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">request<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">-&gt;<pos:position pos:line="11" pos:column="26"/></operator><name pos:line="11" pos:column="23">flags<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">.<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">internal<pos:position pos:line="11" pos:column="37"/></name></name> <operator pos:line="11" pos:column="38">&amp;&amp;<pos:position pos:line="11" pos:column="48"/></operator> <call><name><name pos:line="11" pos:column="41">request<pos:position pos:line="11" pos:column="48"/></name><operator pos:line="11" pos:column="48">-&gt;<pos:position pos:line="11" pos:column="53"/></operator><name pos:line="11" pos:column="50">url<pos:position pos:line="11" pos:column="53"/></name><operator pos:line="11" pos:column="53">.<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="54">getScheme<pos:position pos:line="11" pos:column="63"/></name></name><argument_list pos:line="11" pos:column="63">()<pos:position pos:line="11" pos:column="65"/></argument_list></call> <operator pos:line="11" pos:column="66">!=<pos:position pos:line="11" pos:column="68"/></operator> <name><name pos:line="11" pos:column="69">AnyP<pos:position pos:line="11" pos:column="73"/></name><operator pos:line="11" pos:column="73">::<pos:position pos:line="11" pos:column="75"/></operator><name pos:line="11" pos:column="75">PROTO_CACHE_OBJECT<pos:position pos:line="11" pos:column="93"/></name></name></expr>)<pos:position pos:line="11" pos:column="94"/></condition><then pos:line="11" pos:column="94"> <block pos:line="11" pos:column="95">{
        <comment type="block" format="doxygen" pos:line="12" pos:column="9">/**
         * Check if this host is allowed to fetch MISSES from us (miss_access).
         * Intentionally replace the src_addr automatically selected by the checklist code
         * we do NOT want the indirect client address to be tested here.
         */</comment>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">ACLFilledChecklist<pos:position pos:line="17" pos:column="27"/></name></type> <name pos:line="17" pos:column="28">ch<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><name><name pos:line="17" pos:column="31">Config<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">.<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="38">accessList<pos:position pos:line="17" pos:column="48"/></name><operator pos:line="17" pos:column="48">.<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="49">miss<pos:position pos:line="17" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="55">request<pos:position pos:line="17" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="64">NULL<pos:position pos:line="17" pos:column="68"/></name></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></decl>;<pos:position pos:line="17" pos:column="70"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">ch<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">src_addr<pos:position pos:line="18" pos:column="20"/></name></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <name><name pos:line="18" pos:column="23">request<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">client_addr<pos:position pos:line="18" pos:column="43"/></name></name></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name><name pos:line="19" pos:column="13">ch<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">fastCheck<pos:position pos:line="19" pos:column="25"/></name></name><argument_list pos:line="19" pos:column="25">()<pos:position pos:line="19" pos:column="27"/></argument_list></call><operator pos:line="19" pos:column="27">.<pos:position pos:line="19" pos:column="28"/></operator><call><name pos:line="19" pos:column="28">denied<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">()<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="37"/></condition><then pos:line="19" pos:column="37"> <block pos:line="19" pos:column="38">{
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">err_type<pos:position pos:line="20" pos:column="21"/></name></type> <name pos:line="20" pos:column="22">page_id<pos:position pos:line="20" pos:column="29"/></name></decl>;<pos:position pos:line="20" pos:column="30"/></decl_stmt>
            <expr_stmt><expr><name pos:line="21" pos:column="13">page_id<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">aclGetDenyInfoPage<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><operator pos:line="21" pos:column="42">&amp;<pos:position pos:line="21" pos:column="47"/></operator><name><name pos:line="21" pos:column="43">Config<pos:position pos:line="21" pos:column="49"/></name><operator pos:line="21" pos:column="49">.<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="50">denyInfoList<pos:position pos:line="21" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="64">AclMatchedName<pos:position pos:line="21" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="80">1<pos:position pos:line="21" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="83"/></expr_stmt>

            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">(<expr><name pos:line="23" pos:column="17">page_id<pos:position pos:line="23" pos:column="24"/></name> <operator pos:line="23" pos:column="25">==<pos:position pos:line="23" pos:column="27"/></operator> <name pos:line="23" pos:column="28">ERR_NONE<pos:position pos:line="23" pos:column="36"/></name></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37">
                <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="17">page_id<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">=<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">ERR_FORWARDING_DENIED<pos:position pos:line="24" pos:column="48"/></name></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt></block></then></if>

            <decl_stmt><decl><type><name pos:line="26" pos:column="13">ErrorState<pos:position pos:line="26" pos:column="23"/></name> <modifier pos:line="26" pos:column="24">*<pos:position pos:line="26" pos:column="25"/></modifier></type><name pos:line="26" pos:column="25">anErr<pos:position pos:line="26" pos:column="30"/></name> <init pos:line="26" pos:column="31">= <expr><operator pos:line="26" pos:column="33">new<pos:position pos:line="26" pos:column="36"/></operator> <call><name pos:line="26" pos:column="37">ErrorState<pos:position pos:line="26" pos:column="47"/></name><argument_list pos:line="26" pos:column="47">(<argument><expr><name pos:line="26" pos:column="48">page_id<pos:position pos:line="26" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="57">Http<pos:position pos:line="26" pos:column="61"/></name><operator pos:line="26" pos:column="61">::<pos:position pos:line="26" pos:column="63"/></operator><name pos:line="26" pos:column="63">scForbidden<pos:position pos:line="26" pos:column="74"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="76">request<pos:position pos:line="26" pos:column="83"/></name></expr></argument>)<pos:position pos:line="26" pos:column="84"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="85"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">errorAppendEntry<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">entry<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">anErr<pos:position pos:line="27" pos:column="42"/></name></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt> <comment type="line" pos:line="27" pos:column="45">// frees anErr</comment>
            <return pos:line="28" pos:column="13">return;<pos:position pos:line="28" pos:column="20"/></return>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">debugs<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><literal type="number" pos:line="32" pos:column="12">17<pos:position pos:line="32" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="16">3<pos:position pos:line="32" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="19">HERE<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">&lt;&lt;<pos:position pos:line="32" pos:column="32"/></operator> <literal type="string" pos:line="32" pos:column="27">"'"<pos:position pos:line="32" pos:column="30"/></literal> <operator pos:line="32" pos:column="31">&lt;&lt;<pos:position pos:line="32" pos:column="39"/></operator> <call><name><name pos:line="32" pos:column="34">entry<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">-&gt;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="41">url<pos:position pos:line="32" pos:column="44"/></name></name><argument_list pos:line="32" pos:column="44">()<pos:position pos:line="32" pos:column="46"/></argument_list></call> <operator pos:line="32" pos:column="47">&lt;&lt;<pos:position pos:line="32" pos:column="55"/></operator> <literal type="string" pos:line="32" pos:column="50">"'"<pos:position pos:line="32" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>
    <comment type="block" pos:line="33" pos:column="5">/*
     * This seems like an odd place to bind mem_obj and request.
     * Might want to assert that request is NULL at this point
     */</comment>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">entry<pos:position pos:line="37" pos:column="10"/></name><operator pos:line="37" pos:column="10">-&gt;<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="12">mem_obj<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">-&gt;<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="21">request<pos:position pos:line="37" pos:column="28"/></name></name> <operator pos:line="37" pos:column="29">=<pos:position pos:line="37" pos:column="30"/></operator> <name pos:line="37" pos:column="31">request<pos:position pos:line="37" pos:column="38"/></name></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">HTTPMSGLOCK<pos:position pos:line="38" pos:column="16"/></name><argument_list pos:line="38" pos:column="16">(<argument><expr><name><name pos:line="38" pos:column="17">entry<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">-&gt;<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="24">mem_obj<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">-&gt;<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="33">request<pos:position pos:line="38" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="42"/></expr_stmt>
<cpp:if pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">if<pos:position pos:line="39" pos:column="4"/></cpp:directive> <expr><name pos:line="39" pos:column="5">URL_CHECKSUM_DEBUG<pos:position pos:line="39" pos:column="23"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name><name pos:line="41" pos:column="5">entry<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">-&gt;<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="12">mem_obj<pos:position pos:line="41" pos:column="19"/></name><operator pos:line="41" pos:column="19">-&gt;<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="21">checkUrlChecksum<pos:position pos:line="41" pos:column="37"/></name></name><argument_list pos:line="41" pos:column="37">()<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">shutting_down<pos:position pos:line="44" pos:column="22"/></name></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23"> <block pos:line="44" pos:column="24">{
        <comment type="block" pos:line="45" pos:column="9">/* more yuck */</comment>
        <decl_stmt><decl><type><name pos:line="46" pos:column="9">ErrorState<pos:position pos:line="46" pos:column="19"/></name> <modifier pos:line="46" pos:column="20">*<pos:position pos:line="46" pos:column="21"/></modifier></type><name pos:line="46" pos:column="21">anErr<pos:position pos:line="46" pos:column="26"/></name> <init pos:line="46" pos:column="27">= <expr><operator pos:line="46" pos:column="29">new<pos:position pos:line="46" pos:column="32"/></operator> <call><name pos:line="46" pos:column="33">ErrorState<pos:position pos:line="46" pos:column="43"/></name><argument_list pos:line="46" pos:column="43">(<argument><expr><name pos:line="46" pos:column="44">ERR_SHUTTING_DOWN<pos:position pos:line="46" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="63">Http<pos:position pos:line="46" pos:column="67"/></name><operator pos:line="46" pos:column="67">::<pos:position pos:line="46" pos:column="69"/></operator><name pos:line="46" pos:column="69">scServiceUnavailable<pos:position pos:line="46" pos:column="89"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="91">request<pos:position pos:line="46" pos:column="98"/></name></expr></argument>)<pos:position pos:line="46" pos:column="99"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="100"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">errorAppendEntry<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">entry<pos:position pos:line="47" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="33">anErr<pos:position pos:line="47" pos:column="38"/></name></expr></argument>)<pos:position pos:line="47" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt> <comment type="line" pos:line="47" pos:column="41">// frees anErr</comment>
        <return pos:line="48" pos:column="9">return;<pos:position pos:line="48" pos:column="16"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name><name pos:line="51" pos:column="9">request<pos:position pos:line="51" pos:column="16"/></name><operator pos:line="51" pos:column="16">-&gt;<pos:position pos:line="51" pos:column="21"/></operator><name pos:line="51" pos:column="18">flags<pos:position pos:line="51" pos:column="23"/></name><operator pos:line="51" pos:column="23">.<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="24">internal<pos:position pos:line="51" pos:column="32"/></name></name></expr>)<pos:position pos:line="51" pos:column="33"/></condition><then pos:line="51" pos:column="33"> <block pos:line="51" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">debugs<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><literal type="number" pos:line="52" pos:column="16">17<pos:position pos:line="52" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="20">2<pos:position pos:line="52" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="23">"calling internalStart() due to request flag"<pos:position pos:line="52" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">internalStart<pos:position pos:line="53" pos:column="22"/></name><argument_list pos:line="53" pos:column="22">(<argument><expr><name pos:line="53" pos:column="23">clientConn<pos:position pos:line="53" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="35">request<pos:position pos:line="53" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="44">entry<pos:position pos:line="53" pos:column="49"/></name></expr></argument>)<pos:position pos:line="53" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="51"/></expr_stmt>
        <return pos:line="54" pos:column="9">return;<pos:position pos:line="54" pos:column="16"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <switch pos:line="57" pos:column="5">switch <condition pos:line="57" pos:column="12">(<expr><call><name><name pos:line="57" pos:column="13">request<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">-&gt;<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="22">url<pos:position pos:line="57" pos:column="25"/></name><operator pos:line="57" pos:column="25">.<pos:position pos:line="57" pos:column="26"/></operator><name pos:line="57" pos:column="26">getScheme<pos:position pos:line="57" pos:column="35"/></name></name><argument_list pos:line="57" pos:column="35">()<pos:position pos:line="57" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="38"/></condition> <block pos:line="57" pos:column="39">{

    <case pos:line="59" pos:column="5">case <expr><name><name pos:line="59" pos:column="10">AnyP<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">::<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="16">PROTO_CACHE_OBJECT<pos:position pos:line="59" pos:column="34"/></name></name></expr>:<pos:position pos:line="59" pos:column="35"/></case>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">debugs<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><literal type="number" pos:line="60" pos:column="16">17<pos:position pos:line="60" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="20">2<pos:position pos:line="60" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="23">"calling CacheManager due to request scheme "<pos:position pos:line="60" pos:column="68"/></literal> <operator pos:line="60" pos:column="69">&lt;&lt;<pos:position pos:line="60" pos:column="77"/></operator> <call><name><name pos:line="60" pos:column="72">request<pos:position pos:line="60" pos:column="79"/></name><operator pos:line="60" pos:column="79">-&gt;<pos:position pos:line="60" pos:column="84"/></operator><name pos:line="60" pos:column="81">url<pos:position pos:line="60" pos:column="84"/></name><operator pos:line="60" pos:column="84">.<pos:position pos:line="60" pos:column="85"/></operator><name pos:line="60" pos:column="85">getScheme<pos:position pos:line="60" pos:column="94"/></name></name><argument_list pos:line="60" pos:column="94">()<pos:position pos:line="60" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="98"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="61" pos:column="9">CacheManager<pos:position pos:line="61" pos:column="21"/></name><operator pos:line="61" pos:column="21">::<pos:position pos:line="61" pos:column="23"/></operator><name pos:line="61" pos:column="23">GetInstance<pos:position pos:line="61" pos:column="34"/></name></name><argument_list pos:line="61" pos:column="34">()<pos:position pos:line="61" pos:column="36"/></argument_list></call><operator pos:line="61" pos:column="36">-&gt;<pos:position pos:line="61" pos:column="41"/></operator><call><name pos:line="61" pos:column="38">Start<pos:position pos:line="61" pos:column="43"/></name><argument_list pos:line="61" pos:column="43">(<argument><expr><name pos:line="61" pos:column="44">clientConn<pos:position pos:line="61" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="56">request<pos:position pos:line="61" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="65">entry<pos:position pos:line="61" pos:column="70"/></name></expr></argument>)<pos:position pos:line="61" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="72"/></expr_stmt>
        <return pos:line="62" pos:column="9">return;<pos:position pos:line="62" pos:column="16"/></return>

    <case pos:line="64" pos:column="5">case <expr><name><name pos:line="64" pos:column="10">AnyP<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">::<pos:position pos:line="64" pos:column="16"/></operator><name pos:line="64" pos:column="16">PROTO_URN<pos:position pos:line="64" pos:column="25"/></name></name></expr>:<pos:position pos:line="64" pos:column="26"/></case>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">urnStart<pos:position pos:line="65" pos:column="17"/></name><argument_list pos:line="65" pos:column="17">(<argument><expr><name pos:line="65" pos:column="18">request<pos:position pos:line="65" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="27">entry<pos:position pos:line="65" pos:column="32"/></name></expr></argument>)<pos:position pos:line="65" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="34"/></expr_stmt>
        <return pos:line="66" pos:column="9">return;<pos:position pos:line="66" pos:column="16"/></return>

    <default pos:line="68" pos:column="5">default:<pos:position pos:line="68" pos:column="13"/></default>
        <decl_stmt><decl><type><name><name pos:line="69" pos:column="9">FwdState<pos:position pos:line="69" pos:column="17"/></name><operator pos:line="69" pos:column="17">::<pos:position pos:line="69" pos:column="19"/></operator><name pos:line="69" pos:column="19">Pointer<pos:position pos:line="69" pos:column="26"/></name></name></type> <name pos:line="69" pos:column="27">fwd<pos:position pos:line="69" pos:column="30"/></name> <init pos:line="69" pos:column="31">= <expr><operator pos:line="69" pos:column="33">new<pos:position pos:line="69" pos:column="36"/></operator> <call><name pos:line="69" pos:column="37">FwdState<pos:position pos:line="69" pos:column="45"/></name><argument_list pos:line="69" pos:column="45">(<argument><expr><name pos:line="69" pos:column="46">clientConn<pos:position pos:line="69" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="58">entry<pos:position pos:line="69" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="65">request<pos:position pos:line="69" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="74">al<pos:position pos:line="69" pos:column="76"/></name></expr></argument>)<pos:position pos:line="69" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="69" pos:column="78"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="70" pos:column="9">fwd<pos:position pos:line="70" pos:column="12"/></name><operator pos:line="70" pos:column="12">-&gt;<pos:position pos:line="70" pos:column="17"/></operator><name pos:line="70" pos:column="14">start<pos:position pos:line="70" pos:column="19"/></name></name><argument_list pos:line="70" pos:column="19">(<argument><expr><name pos:line="70" pos:column="20">fwd<pos:position pos:line="70" pos:column="23"/></name></expr></argument>)<pos:position pos:line="70" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="25"/></expr_stmt>
        <return pos:line="71" pos:column="9">return;<pos:position pos:line="71" pos:column="16"/></return>
    }<pos:position pos:line="72" pos:column="6"/></block></switch>

    <comment type="block" pos:line="74" pos:column="5">/* NOTREACHED */</comment>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
