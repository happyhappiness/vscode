<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6633_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Range<pos:position pos:line="1" pos:column="6"/></name><argument_list type="generic" pos:line="1" pos:column="6">&lt;<argument><expr><specifier pos:line="1" pos:column="7">const<pos:position pos:line="1" pos:column="12"/></specifier> <name pos:line="1" pos:column="13">u_char<pos:position pos:line="1" pos:column="19"/></name><modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></expr></argument>&gt;<pos:position pos:line="1" pos:column="24"/></argument_list></name></type>
<name><name pos:line="2" pos:column="1">Snmp<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Var<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">asString<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list> <specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">type<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">==<pos:position pos:line="4" pos:column="17"/></operator> <name pos:line="4" pos:column="18">SMI_STRING<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><name><name pos:line="5" pos:column="10">val<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">.<pos:position pos:line="5" pos:column="14"/></operator><name pos:line="5" pos:column="14">string<pos:position pos:line="5" pos:column="20"/></name></name> <operator pos:line="5" pos:column="21">!=<pos:position pos:line="5" pos:column="23"/></operator> <name pos:line="5" pos:column="24">NULL<pos:position pos:line="5" pos:column="28"/></name> <operator pos:line="5" pos:column="29">&amp;&amp;<pos:position pos:line="5" pos:column="39"/></operator> <name pos:line="5" pos:column="32">val_len<pos:position pos:line="5" pos:column="39"/></name> <operator pos:line="5" pos:column="40">&gt;<pos:position pos:line="5" pos:column="44"/></operator> <literal type="number" pos:line="5" pos:column="42">0<pos:position pos:line="5" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="45"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><call><name><name pos:line="6" pos:column="12">Range<pos:position pos:line="6" pos:column="17"/></name><argument_list type="generic" pos:line="6" pos:column="17">&lt;<argument><expr><specifier pos:line="6" pos:column="18">const<pos:position pos:line="6" pos:column="23"/></specifier> <name pos:line="6" pos:column="24">u_char<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">*<pos:position pos:line="6" pos:column="31"/></operator></expr></argument>&gt;<pos:position pos:line="6" pos:column="35"/></argument_list></name><argument_list pos:line="6" pos:column="32">(<argument><expr><name><name pos:line="6" pos:column="33">val<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">.<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="37">string<pos:position pos:line="6" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="45">val<pos:position pos:line="6" pos:column="48"/></name><operator pos:line="6" pos:column="48">.<pos:position pos:line="6" pos:column="49"/></operator><name pos:line="6" pos:column="49">string<pos:position pos:line="6" pos:column="55"/></name></name> <operator pos:line="6" pos:column="56">+<pos:position pos:line="6" pos:column="57"/></operator> <name pos:line="6" pos:column="58">val_len<pos:position pos:line="6" pos:column="65"/></name></expr></argument>)<pos:position pos:line="6" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="67"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
