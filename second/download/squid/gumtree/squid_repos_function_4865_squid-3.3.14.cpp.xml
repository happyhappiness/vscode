<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4865_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">read_<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">buf<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">size_t<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">len<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">off_t<pos:position pos:line="2" pos:column="50"/></name></type> <name pos:line="2" pos:column="51">coreOff<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">STRCB<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type><name pos:line="2" pos:column="67">cb<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="71">void<pos:position pos:line="2" pos:column="75"/></name> <modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="77">data<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="82"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">theFile<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">!=<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">coreOff<pos:position pos:line="5" pos:column="19"/></name> <operator pos:line="5" pos:column="20">&gt;=<pos:position pos:line="5" pos:column="25"/></operator> <literal type="number" pos:line="5" pos:column="23">0<pos:position pos:line="5" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">offset_<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <name pos:line="6" pos:column="15">coreOff<pos:position pos:line="6" pos:column="22"/></name></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>

    <comment type="line" pos:line="8" pos:column="5">// we skip our cell header; it is only read when building the map</comment>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">int64_t<pos:position pos:line="9" pos:column="18"/></name></type> <name pos:line="9" pos:column="19">cellOffset<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><sizeof pos:line="9" pos:column="32">sizeof<argument_list pos:line="9" pos:column="38">(<argument><expr><name pos:line="9" pos:column="39">DbCellHeader<pos:position pos:line="9" pos:column="51"/></name></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></sizeof> <operator pos:line="9" pos:column="53">+<pos:position pos:line="9" pos:column="54"/></operator>
                               <cast type="static" pos:line="10" pos:column="32">static_cast<argument_list type="generic" pos:line="10" pos:column="43">&lt;<argument><expr><name pos:line="10" pos:column="44">int64_t<pos:position pos:line="10" pos:column="51"/></name></expr></argument>&gt;<pos:position pos:line="10" pos:column="55"/></argument_list><argument_list pos:line="10" pos:column="52">(<argument><expr><name pos:line="10" pos:column="53">coreOff<pos:position pos:line="10" pos:column="60"/></name></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="10" pos:column="62"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">cellOffset<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">&lt;=<pos:position pos:line="11" pos:column="28"/></operator> <name pos:line="11" pos:column="26">payloadEnd<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>

    <comment type="line" pos:line="13" pos:column="5">// Core specifies buffer length, but we must not exceed stored entry size</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">cellOffset<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">+<pos:position pos:line="14" pos:column="21"/></operator> <operator pos:line="14" pos:column="22">(<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">int64_t<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">)<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="31">len<pos:position pos:line="14" pos:column="34"/></name> <operator pos:line="14" pos:column="35">&gt;<pos:position pos:line="14" pos:column="39"/></operator> <name pos:line="14" pos:column="37">payloadEnd<pos:position pos:line="14" pos:column="47"/></name></expr>)<pos:position pos:line="14" pos:column="48"/></condition><then pos:line="14" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">len<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <name pos:line="15" pos:column="15">payloadEnd<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">-<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">cellOffset<pos:position pos:line="15" pos:column="38"/></name></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">assert<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name><name pos:line="17" pos:column="12">read<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">.<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">callback<pos:position pos:line="17" pos:column="25"/></name></name> <operator pos:line="17" pos:column="26">==<pos:position pos:line="17" pos:column="28"/></operator> <name pos:line="17" pos:column="29">NULL<pos:position pos:line="17" pos:column="33"/></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name><name pos:line="18" pos:column="12">read<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">.<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">callback_data<pos:position pos:line="18" pos:column="30"/></name></name> <operator pos:line="18" pos:column="31">==<pos:position pos:line="18" pos:column="33"/></operator> <name pos:line="18" pos:column="34">NULL<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">read<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">.<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">callback<pos:position pos:line="19" pos:column="18"/></name></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">cb<pos:position pos:line="19" pos:column="23"/></name></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">read<pos:position pos:line="20" pos:column="9"/></name><operator pos:line="20" pos:column="9">.<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">callback_data<pos:position pos:line="20" pos:column="23"/></name></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <call><name pos:line="20" pos:column="26">cbdataReference<pos:position pos:line="20" pos:column="41"/></name><argument_list pos:line="20" pos:column="41">(<argument><expr><name pos:line="20" pos:column="42">data<pos:position pos:line="20" pos:column="46"/></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">theFile<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">read<pos:position pos:line="22" pos:column="18"/></name></name><argument_list pos:line="22" pos:column="18">(<argument><expr><operator pos:line="22" pos:column="19">new<pos:position pos:line="22" pos:column="22"/></operator> <call><name pos:line="22" pos:column="23">ReadRequest<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(
                      <argument><expr><call><name><operator pos:line="23" pos:column="23">::<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="25">ReadRequest<pos:position pos:line="23" pos:column="36"/></name></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">buf<pos:position pos:line="23" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="42">diskOffset<pos:position pos:line="23" pos:column="52"/></name> <operator pos:line="23" pos:column="53">+<pos:position pos:line="23" pos:column="54"/></operator> <name pos:line="23" pos:column="55">cellOffset<pos:position pos:line="23" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="67">len<pos:position pos:line="23" pos:column="70"/></name></expr></argument>)<pos:position pos:line="23" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="73">this<pos:position pos:line="23" pos:column="77"/></name></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="80"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
