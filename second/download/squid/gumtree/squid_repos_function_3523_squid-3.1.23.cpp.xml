<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3523_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">parseRequestChunks<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><name pos:line="2" pos:column="35">HttpParser<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">33<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"parsing chunked request body at "<pos:position pos:line="4" pos:column="60"/></literal> <operator pos:line="4" pos:column="61">&lt;&lt;<pos:position pos:line="4" pos:column="69"/></operator>
           <name><name pos:line="5" pos:column="12">in<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">.<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">chunkedSeen<pos:position pos:line="5" pos:column="26"/></name></name> <operator pos:line="5" pos:column="27">&lt;&lt;<pos:position pos:line="5" pos:column="35"/></operator> <literal type="string" pos:line="5" pos:column="30">" &lt; "<pos:position pos:line="5" pos:column="38"/></literal> <operator pos:line="5" pos:column="36">&lt;&lt;<pos:position pos:line="5" pos:column="44"/></operator> <name><name pos:line="5" pos:column="39">in<pos:position pos:line="5" pos:column="41"/></name><operator pos:line="5" pos:column="41">.<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="42">notYetUsed<pos:position pos:line="5" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">in<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">.<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">bodyParser<pos:position pos:line="6" pos:column="25"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">in<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">.<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">dechunkingState<pos:position pos:line="7" pos:column="30"/></name></name> <operator pos:line="7" pos:column="31">==<pos:position pos:line="7" pos:column="33"/></operator> <name pos:line="7" pos:column="34">chunkParsing<pos:position pos:line="7" pos:column="46"/></name></expr></argument>)<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">in<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">.<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="15">chunkedSeen<pos:position pos:line="9" pos:column="26"/></name></name> <operator pos:line="9" pos:column="27">&lt;=<pos:position pos:line="9" pos:column="32"/></operator> <name><name pos:line="9" pos:column="30">in<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">.<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">notYetUsed<pos:position pos:line="9" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">mb_size_t<pos:position pos:line="10" pos:column="20"/></name></type> <name pos:line="10" pos:column="21">fresh<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><name><name pos:line="10" pos:column="29">in<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">.<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="32">notYetUsed<pos:position pos:line="10" pos:column="42"/></name></name> <operator pos:line="10" pos:column="43">-<pos:position pos:line="10" pos:column="44"/></operator> <name><name pos:line="10" pos:column="45">in<pos:position pos:line="10" pos:column="47"/></name><operator pos:line="10" pos:column="47">.<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="48">chunkedSeen<pos:position pos:line="10" pos:column="59"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="60"/></decl_stmt>

    <comment type="line" pos:line="12" pos:column="5">// be safe: count some chunked coding metadata towards the total body size</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">fresh<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">+<pos:position pos:line="13" pos:column="16"/></operator> <call><name><name pos:line="13" pos:column="17">in<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">dechunked<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">.<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">contentSize<pos:position pos:line="13" pos:column="41"/></name></name><argument_list pos:line="13" pos:column="41">()<pos:position pos:line="13" pos:column="43"/></argument_list></call> <operator pos:line="13" pos:column="44">&gt;<pos:position pos:line="13" pos:column="48"/></operator> <name><name pos:line="13" pos:column="46">Config<pos:position pos:line="13" pos:column="52"/></name><operator pos:line="13" pos:column="52">.<pos:position pos:line="13" pos:column="53"/></operator><name pos:line="13" pos:column="53">maxChunkedRequestBodySize<pos:position pos:line="13" pos:column="78"/></name></name></expr>)<pos:position pos:line="13" pos:column="79"/></condition><then pos:line="13" pos:column="79"> <block pos:line="13" pos:column="80">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">33<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="14" pos:column="19">3<pos:position pos:line="14" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="22">HERE<pos:position pos:line="14" pos:column="26"/></name> <operator pos:line="14" pos:column="27">&lt;&lt;<pos:position pos:line="14" pos:column="35"/></operator> <literal type="string" pos:line="14" pos:column="30">"chunked body ("<pos:position pos:line="14" pos:column="46"/></literal> <operator pos:line="14" pos:column="47">&lt;&lt;<pos:position pos:line="14" pos:column="55"/></operator> <name pos:line="14" pos:column="50">fresh<pos:position pos:line="14" pos:column="55"/></name> <operator pos:line="14" pos:column="56">&lt;&lt;<pos:position pos:line="14" pos:column="64"/></operator> <literal type="string" pos:line="14" pos:column="59">" + "<pos:position pos:line="14" pos:column="64"/></literal> <operator pos:line="14" pos:column="65">&lt;&lt;<pos:position pos:line="14" pos:column="73"/></operator>
               <call><name><name pos:line="15" pos:column="16">in<pos:position pos:line="15" pos:column="18"/></name><operator pos:line="15" pos:column="18">.<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">dechunked<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">.<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">contentSize<pos:position pos:line="15" pos:column="40"/></name></name><argument_list pos:line="15" pos:column="40">()<pos:position pos:line="15" pos:column="42"/></argument_list></call> <operator pos:line="15" pos:column="43">&lt;&lt;<pos:position pos:line="15" pos:column="51"/></operator> <literal type="string" pos:line="15" pos:column="46">" may exceed "<pos:position pos:line="15" pos:column="60"/></literal> <operator pos:line="15" pos:column="61">&lt;&lt;<pos:position pos:line="15" pos:column="69"/></operator>
               <literal type="string" pos:line="16" pos:column="16">"chunked_request_body_max_size="<pos:position pos:line="16" pos:column="48"/></literal> <operator pos:line="16" pos:column="49">&lt;&lt;<pos:position pos:line="16" pos:column="57"/></operator>
               <name><name pos:line="17" pos:column="16">Config<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">.<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="23">maxChunkedRequestBodySize<pos:position pos:line="17" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">in<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">dechunkingState<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">chunkError<pos:position pos:line="18" pos:column="40"/></name></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><literal type="boolean" pos:line="19" pos:column="16">false<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">fresh<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">&gt;<pos:position pos:line="22" pos:column="19"/></operator> <call><name><name pos:line="22" pos:column="17">in<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">.<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">chunked<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">.<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="28">potentialSpaceSize<pos:position pos:line="22" pos:column="46"/></name></name><argument_list pos:line="22" pos:column="46">()<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="49"/></condition><then pos:line="22" pos:column="49"> <block pos:line="22" pos:column="50">{
        <comment type="line" pos:line="23" pos:column="9">// should not happen if Config.maxChunkedRequestBodySize is reasonable</comment>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">33<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="24" pos:column="19">1<pos:position pos:line="24" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="22">HERE<pos:position pos:line="24" pos:column="26"/></name> <operator pos:line="24" pos:column="27">&lt;&lt;<pos:position pos:line="24" pos:column="35"/></operator> <literal type="string" pos:line="24" pos:column="30">"request_body_max_size exceeds chunked buffer "<pos:position pos:line="24" pos:column="77"/></literal> <operator pos:line="24" pos:column="78">&lt;&lt;<pos:position pos:line="24" pos:column="86"/></operator>
               <literal type="string" pos:line="25" pos:column="16">"size: "<pos:position pos:line="25" pos:column="24"/></literal> <operator pos:line="25" pos:column="25">&lt;&lt;<pos:position pos:line="25" pos:column="33"/></operator> <name pos:line="25" pos:column="28">fresh<pos:position pos:line="25" pos:column="33"/></name> <operator pos:line="25" pos:column="34">&lt;&lt;<pos:position pos:line="25" pos:column="42"/></operator> <literal type="string" pos:line="25" pos:column="37">" + "<pos:position pos:line="25" pos:column="42"/></literal> <operator pos:line="25" pos:column="43">&lt;&lt;<pos:position pos:line="25" pos:column="51"/></operator> <call><name><name pos:line="25" pos:column="46">in<pos:position pos:line="25" pos:column="48"/></name><operator pos:line="25" pos:column="48">.<pos:position pos:line="25" pos:column="49"/></operator><name pos:line="25" pos:column="49">chunked<pos:position pos:line="25" pos:column="56"/></name><operator pos:line="25" pos:column="56">.<pos:position pos:line="25" pos:column="57"/></operator><name pos:line="25" pos:column="57">contentSize<pos:position pos:line="25" pos:column="68"/></name></name><argument_list pos:line="25" pos:column="68">()<pos:position pos:line="25" pos:column="70"/></argument_list></call> <operator pos:line="25" pos:column="71">&lt;&lt;<pos:position pos:line="25" pos:column="79"/></operator> <literal type="string" pos:line="25" pos:column="74">" &gt; "<pos:position pos:line="25" pos:column="82"/></literal> <operator pos:line="25" pos:column="80">&lt;&lt;<pos:position pos:line="25" pos:column="88"/></operator>
               <call><name><name pos:line="26" pos:column="16">in<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">.<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">chunked<pos:position pos:line="26" pos:column="26"/></name><operator pos:line="26" pos:column="26">.<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="27">potentialSpaceSize<pos:position pos:line="26" pos:column="45"/></name></name><argument_list pos:line="26" pos:column="45">()<pos:position pos:line="26" pos:column="47"/></argument_list></call> <operator pos:line="26" pos:column="48">&lt;&lt;<pos:position pos:line="26" pos:column="56"/></operator> <literal type="string" pos:line="26" pos:column="51">" with "<pos:position pos:line="26" pos:column="59"/></literal> <operator pos:line="26" pos:column="60">&lt;&lt;<pos:position pos:line="26" pos:column="68"/></operator>
               <literal type="string" pos:line="27" pos:column="16">"chunked_request_body_max_size="<pos:position pos:line="27" pos:column="48"/></literal> <operator pos:line="27" pos:column="49">&lt;&lt;<pos:position pos:line="27" pos:column="57"/></operator>
               <name><name pos:line="28" pos:column="16">Config<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">.<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">maxChunkedRequestBodySize<pos:position pos:line="28" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">in<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">.<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">dechunkingState<pos:position pos:line="29" pos:column="27"/></name></name> <operator pos:line="29" pos:column="28">=<pos:position pos:line="29" pos:column="29"/></operator> <name pos:line="29" pos:column="30">chunkError<pos:position pos:line="29" pos:column="40"/></name></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><literal type="boolean" pos:line="30" pos:column="16">false<pos:position pos:line="30" pos:column="21"/></literal></expr>;<pos:position pos:line="30" pos:column="22"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">in<pos:position pos:line="32" pos:column="7"/></name><operator pos:line="32" pos:column="7">.<pos:position pos:line="32" pos:column="8"/></operator><name pos:line="32" pos:column="8">chunked<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">.<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">append<pos:position pos:line="32" pos:column="22"/></name></name><argument_list pos:line="32" pos:column="22">(<argument><expr><name><name pos:line="32" pos:column="23">in<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">.<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="26">buf<pos:position pos:line="32" pos:column="29"/></name></name> <operator pos:line="32" pos:column="30">+<pos:position pos:line="32" pos:column="31"/></operator> <name><name pos:line="32" pos:column="32">in<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">.<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">chunkedSeen<pos:position pos:line="32" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="48">fresh<pos:position pos:line="32" pos:column="53"/></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">in<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">.<pos:position pos:line="33" pos:column="8"/></operator><name pos:line="33" pos:column="8">chunkedSeen<pos:position pos:line="33" pos:column="19"/></name></name> <operator pos:line="33" pos:column="20">+=<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="23">fresh<pos:position pos:line="33" pos:column="28"/></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>

    <try pos:line="35" pos:column="5">try <block pos:line="35" pos:column="9">{ <comment type="line" pos:line="35" pos:column="11">// the parser will throw on errors</comment>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><call><name><name pos:line="36" pos:column="13">in<pos:position pos:line="36" pos:column="15"/></name><operator pos:line="36" pos:column="15">.<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="16">bodyParser<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">-&gt;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="28">parse<pos:position pos:line="36" pos:column="33"/></name></name><argument_list pos:line="36" pos:column="33">(<argument><expr><operator pos:line="36" pos:column="34">&amp;<pos:position pos:line="36" pos:column="39"/></operator><name><name pos:line="36" pos:column="35">in<pos:position pos:line="36" pos:column="37"/></name><operator pos:line="36" pos:column="37">.<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="38">chunked<pos:position pos:line="36" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="47">&amp;<pos:position pos:line="36" pos:column="52"/></operator><name><name pos:line="36" pos:column="48">in<pos:position pos:line="36" pos:column="50"/></name><operator pos:line="36" pos:column="50">.<pos:position pos:line="36" pos:column="51"/></operator><name pos:line="36" pos:column="51">dechunked<pos:position pos:line="36" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="62"/></condition><then pos:line="36" pos:column="62">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="37" pos:column="13">in<pos:position pos:line="37" pos:column="15"/></name><operator pos:line="37" pos:column="15">.<pos:position pos:line="37" pos:column="16"/></operator><name pos:line="37" pos:column="16">dechunkingState<pos:position pos:line="37" pos:column="31"/></name></name> <operator pos:line="37" pos:column="32">=<pos:position pos:line="37" pos:column="33"/></operator> <name pos:line="37" pos:column="34">chunkReady<pos:position pos:line="37" pos:column="44"/></name></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt></block></then> <comment type="line" pos:line="37" pos:column="46">// successfully parsed all chunks</comment>
        <else pos:line="38" pos:column="9">else
            <block type="pseudo"><return pos:line="39" pos:column="13">return <expr><literal type="boolean" pos:line="39" pos:column="20">true<pos:position pos:line="39" pos:column="24"/></literal></expr>;<pos:position pos:line="39" pos:column="25"/></return></block></else></if> <comment type="line" pos:line="39" pos:column="26">// need more, keep the same state</comment>
    }<pos:position pos:line="40" pos:column="6"/></block> <catch pos:line="40" pos:column="7">catch <parameter_list pos:line="40" pos:column="13">(<parameter><decl><type><modifier pos:line="40" pos:column="14">...<pos:position pos:line="40" pos:column="17"/></modifier></type></decl></parameter>)<pos:position pos:line="40" pos:column="18"/></parameter_list> <block pos:line="40" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">debugs<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><literal type="number" pos:line="41" pos:column="16">33<pos:position pos:line="41" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="41" pos:column="19">3<pos:position pos:line="41" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="22">HERE<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">&lt;&lt;<pos:position pos:line="41" pos:column="35"/></operator> <literal type="string" pos:line="41" pos:column="30">"chunk parsing error"<pos:position pos:line="41" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">in<pos:position pos:line="42" pos:column="11"/></name><operator pos:line="42" pos:column="11">.<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="12">dechunkingState<pos:position pos:line="42" pos:column="27"/></name></name> <operator pos:line="42" pos:column="28">=<pos:position pos:line="42" pos:column="29"/></operator> <name pos:line="42" pos:column="30">chunkError<pos:position pos:line="42" pos:column="40"/></name></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></catch></try>
    <return pos:line="44" pos:column="5">return <expr><literal type="boolean" pos:line="44" pos:column="12">false<pos:position pos:line="44" pos:column="17"/></literal></expr>;<pos:position pos:line="44" pos:column="18"/></return> <comment type="line" pos:line="44" pos:column="19">// error, unsupported, or done</comment>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
