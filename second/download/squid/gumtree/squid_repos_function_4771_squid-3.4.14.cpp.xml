<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4771_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Acl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">InnerNode<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">lineParse<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// XXX: not precise, may change when looping or parsing multiple lines</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">cfgline<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="6" pos:column="9">cfgline<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">=<pos:position pos:line="6" pos:column="18"/></operator> <call><name pos:line="6" pos:column="19">xstrdup<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">config_input_line<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="8" pos:column="5">// expect a list of ACL names, each possibly preceeded by '!' for negation</comment>

    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<decl><type><specifier pos:line="10" pos:column="12">const<pos:position pos:line="10" pos:column="17"/></specifier> <name pos:line="10" pos:column="18">char<pos:position pos:line="10" pos:column="22"/></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier></type><name pos:line="10" pos:column="24">t<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><call><name><name pos:line="10" pos:column="28">ConfigParser<pos:position pos:line="10" pos:column="40"/></name><operator pos:line="10" pos:column="40">::<pos:position pos:line="10" pos:column="42"/></operator><name pos:line="10" pos:column="42">strtokFile<pos:position pos:line="10" pos:column="52"/></name></name><argument_list pos:line="10" pos:column="52">()<pos:position pos:line="10" pos:column="54"/></argument_list></call></expr></init></decl>)<pos:position pos:line="10" pos:column="55"/></condition> <block pos:line="10" pos:column="56">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">bool<pos:position pos:line="11" pos:column="19"/></name></type> <name pos:line="11" pos:column="20">negated<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><operator pos:line="11" pos:column="30">(<pos:position pos:line="11" pos:column="31"/></operator><operator pos:line="11" pos:column="31">*<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">t<pos:position pos:line="11" pos:column="33"/></name> <operator pos:line="11" pos:column="34">==<pos:position pos:line="11" pos:column="36"/></operator> <literal type="char" pos:line="11" pos:column="37">'!'<pos:position pos:line="11" pos:column="40"/></literal><operator pos:line="11" pos:column="40">)<pos:position pos:line="11" pos:column="41"/></operator></expr></init></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">negated<pos:position pos:line="12" pos:column="20"/></name></expr>)<pos:position pos:line="12" pos:column="21"/></condition><then pos:line="12" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="13" pos:column="13">++<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">t<pos:position pos:line="13" pos:column="16"/></name></expr>;<pos:position pos:line="13" pos:column="17"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">28<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="20">3<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="23">"looking for ACL "<pos:position pos:line="15" pos:column="41"/></literal> <operator pos:line="15" pos:column="42">&lt;&lt;<pos:position pos:line="15" pos:column="50"/></operator> <name pos:line="15" pos:column="45">t<pos:position pos:line="15" pos:column="46"/></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">ACL<pos:position pos:line="16" pos:column="12"/></name> <modifier pos:line="16" pos:column="13">*<pos:position pos:line="16" pos:column="14"/></modifier></type><name pos:line="16" pos:column="14">a<pos:position pos:line="16" pos:column="15"/></name> <init pos:line="16" pos:column="16">= <expr><call><name><name pos:line="16" pos:column="18">ACL<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">::<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">FindByName<pos:position pos:line="16" pos:column="33"/></name></name><argument_list pos:line="16" pos:column="33">(<argument><expr><name pos:line="16" pos:column="34">t<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="37"/></decl_stmt>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">a<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">==<pos:position pos:line="18" pos:column="17"/></operator> <name pos:line="18" pos:column="18">NULL<pos:position pos:line="18" pos:column="22"/></name></expr>)<pos:position pos:line="18" pos:column="23"/></condition><then pos:line="18" pos:column="23"> <block pos:line="18" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">debugs<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><literal type="number" pos:line="19" pos:column="20">28<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">DBG_CRITICAL<pos:position pos:line="19" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="38">"ACL not found: "<pos:position pos:line="19" pos:column="55"/></literal> <operator pos:line="19" pos:column="56">&lt;&lt;<pos:position pos:line="19" pos:column="64"/></operator> <name pos:line="19" pos:column="59">t<pos:position pos:line="19" pos:column="60"/></name></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">self_destruct<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">()<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
            <return pos:line="21" pos:column="13">return;<pos:position pos:line="21" pos:column="20"/></return>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="24" pos:column="9">// append(negated ? new NotNode(a) : a);</comment>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">negated<pos:position pos:line="25" pos:column="20"/></name></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="13">add<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><operator pos:line="26" pos:column="17">new<pos:position pos:line="26" pos:column="20"/></operator> <call><name pos:line="26" pos:column="21">NotNode<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">a<pos:position pos:line="26" pos:column="30"/></name></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt></block></then>
        <else pos:line="27" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="13">add<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">a<pos:position pos:line="28" pos:column="18"/></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt></block></else></if>
    }<pos:position pos:line="29" pos:column="6"/></block></while>

    <return pos:line="31" pos:column="5">return;<pos:position pos:line="31" pos:column="12"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
