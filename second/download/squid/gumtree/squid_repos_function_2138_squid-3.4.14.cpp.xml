<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2138_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">mem_hdr<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">write<pos:position pos:line="2" pos:column="15"/></name></name> <parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">StoreIOBuffer<pos:position pos:line="2" pos:column="30"/></name> <specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <modifier pos:line="2" pos:column="37">&amp;<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="38">writeBuffer<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">PROF_start<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">mem_hdr_write<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">debugs<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="number" pos:line="5" pos:column="12">19<pos:position pos:line="5" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="16">6<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="19">"mem_hdr::write: "<pos:position pos:line="5" pos:column="37"/></literal> <operator pos:line="5" pos:column="38">&lt;&lt;<pos:position pos:line="5" pos:column="46"/></operator> <name pos:line="5" pos:column="41">this<pos:position pos:line="5" pos:column="45"/></name> <operator pos:line="5" pos:column="46">&lt;&lt;<pos:position pos:line="5" pos:column="54"/></operator> <literal type="string" pos:line="5" pos:column="49">" "<pos:position pos:line="5" pos:column="52"/></literal> <operator pos:line="5" pos:column="53">&lt;&lt;<pos:position pos:line="5" pos:column="61"/></operator> <call><name><name pos:line="5" pos:column="56">writeBuffer<pos:position pos:line="5" pos:column="67"/></name><operator pos:line="5" pos:column="67">.<pos:position pos:line="5" pos:column="68"/></operator><name pos:line="5" pos:column="68">range<pos:position pos:line="5" pos:column="73"/></name></name><argument_list pos:line="5" pos:column="73">()<pos:position pos:line="5" pos:column="75"/></argument_list></call> <operator pos:line="5" pos:column="76">&lt;&lt;<pos:position pos:line="5" pos:column="84"/></operator> <literal type="string" pos:line="5" pos:column="79">" object end "<pos:position pos:line="5" pos:column="93"/></literal> <operator pos:line="5" pos:column="94">&lt;&lt;<pos:position pos:line="5" pos:column="102"/></operator> <call><name pos:line="5" pos:column="97">endOffset<pos:position pos:line="5" pos:column="106"/></name><argument_list pos:line="5" pos:column="106">()<pos:position pos:line="5" pos:column="108"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="110"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">unionNotEmpty<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">writeBuffer<pos:position pos:line="7" pos:column="34"/></name></expr></argument>)<pos:position pos:line="7" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="36"/></condition><then pos:line="7" pos:column="36"> <block pos:line="7" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">19<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">DBG_CRITICAL<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="34">"mem_hdr::write: writeBuffer: "<pos:position pos:line="8" pos:column="65"/></literal> <operator pos:line="8" pos:column="66">&lt;&lt;<pos:position pos:line="8" pos:column="74"/></operator> <call><name><name pos:line="8" pos:column="69">writeBuffer<pos:position pos:line="8" pos:column="80"/></name><operator pos:line="8" pos:column="80">.<pos:position pos:line="8" pos:column="81"/></operator><name pos:line="8" pos:column="81">range<pos:position pos:line="8" pos:column="86"/></name></name><argument_list pos:line="8" pos:column="86">()<pos:position pos:line="8" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="90"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugDump<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">()<pos:position pos:line="9" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">fatal<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><literal type="string" pos:line="10" pos:column="15">"Attempt to overwrite already in-memory data. Preceeding this there should be a mem_hdr::write output that lists the attempted write, and the currently present data. Please get a 'backtrace full' from this error - using the generated core, and file a bug report with the squid developers including the last 10 lines of cache.log and the backtrace.\n"<pos:position pos:line="10" pos:column="365"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="366"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="367"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">PROF_stop<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">mem_hdr_write<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><literal type="boolean" pos:line="12" pos:column="16">false<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><name><name pos:line="15" pos:column="13">writeBuffer<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">.<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">offset<pos:position pos:line="15" pos:column="31"/></name></name> <operator pos:line="15" pos:column="32">&gt;=<pos:position pos:line="15" pos:column="37"/></operator> <literal type="number" pos:line="15" pos:column="35">0<pos:position pos:line="15" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="17" pos:column="5">mem_node<pos:position pos:line="17" pos:column="13"/></name> <modifier pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></modifier></type><name pos:line="17" pos:column="15">target<pos:position pos:line="17" pos:column="21"/></name></decl>;<pos:position pos:line="17" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int64_t<pos:position pos:line="18" pos:column="12"/></name></type> <name pos:line="18" pos:column="13">currentOffset<pos:position pos:line="18" pos:column="26"/></name> <init pos:line="18" pos:column="27">= <expr><name><name pos:line="18" pos:column="29">writeBuffer<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">.<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="41">offset<pos:position pos:line="18" pos:column="47"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name> <modifier pos:line="19" pos:column="10">*<pos:position pos:line="19" pos:column="11"/></modifier></type><name pos:line="19" pos:column="11">currentSource<pos:position pos:line="19" pos:column="24"/></name> <init pos:line="19" pos:column="25">= <expr><name><name pos:line="19" pos:column="27">writeBuffer<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">.<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="39">data<pos:position pos:line="19" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">size_t<pos:position pos:line="20" pos:column="11"/></name></type> <name pos:line="20" pos:column="12">len<pos:position pos:line="20" pos:column="15"/></name> <init pos:line="20" pos:column="16">= <expr><name><name pos:line="20" pos:column="18">writeBuffer<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">.<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">length<pos:position pos:line="20" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="20" pos:column="37"/></decl_stmt>

    <while pos:line="22" pos:column="5">while <condition pos:line="22" pos:column="11">(<expr><name pos:line="22" pos:column="12">len<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">&amp;&amp;<pos:position pos:line="22" pos:column="26"/></operator> <operator pos:line="22" pos:column="19">(<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">target<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">=<pos:position pos:line="22" pos:column="28"/></operator> <call><name pos:line="22" pos:column="29">nodeToRecieve<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name pos:line="22" pos:column="43">currentOffset<pos:position pos:line="22" pos:column="56"/></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call><operator pos:line="22" pos:column="57">)<pos:position pos:line="22" pos:column="58"/></operator></expr>)<pos:position pos:line="22" pos:column="59"/></condition> <block pos:line="22" pos:column="60">{
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">size_t<pos:position pos:line="23" pos:column="15"/></name></type> <name pos:line="23" pos:column="16">wrote<pos:position pos:line="23" pos:column="21"/></name> <init pos:line="23" pos:column="22">= <expr><call><name pos:line="23" pos:column="24">writeAvailable<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><name pos:line="23" pos:column="39">target<pos:position pos:line="23" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="47">currentOffset<pos:position pos:line="23" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="62">len<pos:position pos:line="23" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="67">currentSource<pos:position pos:line="23" pos:column="80"/></name></expr></argument>)<pos:position pos:line="23" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="82"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">assert<pos:position pos:line="24" pos:column="15"/></name> <argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">wrote<pos:position pos:line="24" pos:column="22"/></name></expr></argument>)<pos:position pos:line="24" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">len<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">-=<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">wrote<pos:position pos:line="25" pos:column="21"/></name></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">currentOffset<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">+=<pos:position pos:line="26" pos:column="25"/></operator> <name pos:line="26" pos:column="26">wrote<pos:position pos:line="26" pos:column="31"/></name></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="27" pos:column="9">currentSource<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">+=<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">wrote<pos:position pos:line="27" pos:column="31"/></name></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">PROF_stop<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">mem_hdr_write<pos:position pos:line="30" pos:column="28"/></name></expr></argument>)<pos:position pos:line="30" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><literal type="boolean" pos:line="31" pos:column="12">true<pos:position pos:line="31" pos:column="16"/></literal></expr>;<pos:position pos:line="31" pos:column="17"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
