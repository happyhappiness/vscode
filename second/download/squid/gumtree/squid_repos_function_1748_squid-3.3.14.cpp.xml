<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1748_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">peerDigestFetchedEnough<pos:position pos:line="2" pos:column="24"/></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">DigestFetchState<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type> <name pos:line="2" pos:column="44">fetch<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">char<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">buf<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="62">ssize_t<pos:position pos:line="2" pos:column="69"/></name></type> <name pos:line="2" pos:column="70">size<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="76">const<pos:position pos:line="2" pos:column="81"/></specifier> <name pos:line="2" pos:column="82">char<pos:position pos:line="2" pos:column="86"/></name> <modifier pos:line="2" pos:column="87">*<pos:position pos:line="2" pos:column="88"/></modifier></type><name pos:line="2" pos:column="88">step_name<pos:position pos:line="2" pos:column="97"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="98"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">PeerDigest<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">pd<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name pos:line="4" pos:column="22">NULL<pos:position pos:line="4" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">host<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><literal type="string" pos:line="5" pos:column="24">"&lt;unknown&gt;"<pos:position pos:line="5" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>	<comment type="block" pos:line="5" pos:column="41">/* peer host */</comment>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">reason<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><name pos:line="6" pos:column="26">NULL<pos:position pos:line="6" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>	<comment type="block" pos:line="6" pos:column="33">/* reason for completion */</comment>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">no_bug<pos:position pos:line="7" pos:column="23"/></name> <init pos:line="7" pos:column="24">= <expr><name pos:line="7" pos:column="26">NULL<pos:position pos:line="7" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>	<comment type="block" pos:line="7" pos:column="33">/* successful completion if set */</comment>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">int<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">pdcb_valid<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><call><name pos:line="8" pos:column="28">cbdataReferenceValid<pos:position pos:line="8" pos:column="48"/></name><argument_list pos:line="8" pos:column="48">(<argument><expr><name><name pos:line="8" pos:column="49">fetch<pos:position pos:line="8" pos:column="54"/></name><operator pos:line="8" pos:column="54">-&gt;<pos:position pos:line="8" pos:column="59"/></operator><name pos:line="8" pos:column="56">pd<pos:position pos:line="8" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">int<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">pcb_valid<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><call><name pos:line="9" pos:column="27">cbdataReferenceValid<pos:position pos:line="9" pos:column="47"/></name><argument_list pos:line="9" pos:column="47">(<argument><expr><name><name pos:line="9" pos:column="48">fetch<pos:position pos:line="9" pos:column="53"/></name><operator pos:line="9" pos:column="53">-&gt;<pos:position pos:line="9" pos:column="58"/></operator><name pos:line="9" pos:column="55">pd<pos:position pos:line="9" pos:column="57"/></name><operator pos:line="9" pos:column="57">-&gt;<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="59">peer<pos:position pos:line="9" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="65"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* test possible exiting conditions (the same for most steps!)
     * cases marked with '?!' should not happen */</comment>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">reason<pos:position pos:line="14" pos:column="16"/></name></expr>)<pos:position pos:line="14" pos:column="17"/></condition><then pos:line="14" pos:column="17"> <block pos:line="14" pos:column="18">{
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><operator pos:line="15" pos:column="14">(<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">pd<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <name><name pos:line="15" pos:column="20">fetch<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">-&gt;<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="27">pd<pos:position pos:line="15" pos:column="29"/></name></name><operator pos:line="15" pos:column="29">)<pos:position pos:line="15" pos:column="30"/></operator></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="13">reason<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <literal type="string" pos:line="16" pos:column="22">"peer digest disappeared?!"<pos:position pos:line="16" pos:column="49"/></literal></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt></block></then>

<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if<pos:position pos:line="18" pos:column="4"/></cpp:directive> <expr><name pos:line="18" pos:column="5">DONT<pos:position pos:line="18" pos:column="9"/></name></expr></cpp:if>			<comment type="block" pos:line="18" pos:column="33">/* WHY NOT? /HNO */</comment>

        <elseif pos:line="20" pos:column="9">else <if pos:line="20" pos:column="14">if <condition pos:line="20" pos:column="17">(<expr><operator pos:line="20" pos:column="18">!<pos:position pos:line="20" pos:column="19"/></operator><call><name pos:line="20" pos:column="19">cbdataReferenceValid<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">pd<pos:position pos:line="20" pos:column="42"/></name></expr></argument>)<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44">
            <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="13">reason<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <literal type="string" pos:line="21" pos:column="22">"invalidated peer digest?!"<pos:position pos:line="21" pos:column="49"/></literal></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt></block></then></if></elseif>

<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

        <else pos:line="25" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="13">host<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">=<pos:position pos:line="26" pos:column="19"/></operator> <call><name><name pos:line="26" pos:column="20">pd<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">-&gt;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="24">host<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">.<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">termedBuf<pos:position pos:line="26" pos:column="38"/></name></name><argument_list pos:line="26" pos:column="38">()<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt></block></else></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">debugs<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><literal type="number" pos:line="29" pos:column="12">72<pos:position pos:line="29" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="16">6<pos:position pos:line="29" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="19">step_name<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">&lt;&lt;<pos:position pos:line="29" pos:column="37"/></operator> <literal type="string" pos:line="29" pos:column="32">": peer "<pos:position pos:line="29" pos:column="41"/></literal> <operator pos:line="29" pos:column="42">&lt;&lt;<pos:position pos:line="29" pos:column="50"/></operator> <name pos:line="29" pos:column="45">host<pos:position pos:line="29" pos:column="49"/></name> <operator pos:line="29" pos:column="50">&lt;&lt;<pos:position pos:line="29" pos:column="58"/></operator> <literal type="string" pos:line="29" pos:column="53">", offset: "<pos:position pos:line="29" pos:column="65"/></literal> <operator pos:line="29" pos:column="66">&lt;&lt;<pos:position pos:line="29" pos:column="74"/></operator>
           <name><name pos:line="30" pos:column="12">fetch<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">-&gt;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="19">offset<pos:position pos:line="30" pos:column="25"/></name></name> <operator pos:line="30" pos:column="26">&lt;&lt;<pos:position pos:line="30" pos:column="34"/></operator> <literal type="string" pos:line="30" pos:column="29">" size: "<pos:position pos:line="30" pos:column="38"/></literal> <operator pos:line="30" pos:column="39">&lt;&lt;<pos:position pos:line="30" pos:column="47"/></operator> <name pos:line="30" pos:column="42">size<pos:position pos:line="30" pos:column="46"/></name> <operator pos:line="30" pos:column="47">&lt;&lt;<pos:position pos:line="30" pos:column="55"/></operator> <literal type="string" pos:line="30" pos:column="50">"."<pos:position pos:line="30" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="55"/></expr_stmt>

    <comment type="block" pos:line="32" pos:column="5">/* continue checking (with pd and host known and valid) */</comment>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">!<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">reason<pos:position pos:line="34" pos:column="16"/></name></expr>)<pos:position pos:line="34" pos:column="17"/></condition><then pos:line="34" pos:column="17"> <block pos:line="34" pos:column="18">{
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><call><name pos:line="35" pos:column="14">cbdataReferenceValid<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">(<argument><expr><name><name pos:line="35" pos:column="35">pd<pos:position pos:line="35" pos:column="37"/></name><operator pos:line="35" pos:column="37">-&gt;<pos:position pos:line="35" pos:column="42"/></operator><name pos:line="35" pos:column="39">peer<pos:position pos:line="35" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="45"/></condition><then pos:line="35" pos:column="45">
            <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="13">reason<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <literal type="string" pos:line="36" pos:column="22">"peer disappeared"<pos:position pos:line="36" pos:column="40"/></literal></expr>;<pos:position pos:line="36" pos:column="41"/></expr_stmt></block></then>
        <elseif pos:line="37" pos:column="9">else <if pos:line="37" pos:column="14">if <condition pos:line="37" pos:column="17">(<expr><name pos:line="37" pos:column="18">size<pos:position pos:line="37" pos:column="22"/></name> <operator pos:line="37" pos:column="23">&lt;<pos:position pos:line="37" pos:column="27"/></operator> <literal type="number" pos:line="37" pos:column="25">0<pos:position pos:line="37" pos:column="26"/></literal></expr>)<pos:position pos:line="37" pos:column="27"/></condition><then pos:line="37" pos:column="27">
            <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="13">reason<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <literal type="string" pos:line="38" pos:column="22">"swap failure"<pos:position pos:line="38" pos:column="36"/></literal></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="39" pos:column="9">else <if pos:line="39" pos:column="14">if <condition pos:line="39" pos:column="17">(<expr><operator pos:line="39" pos:column="18">!<pos:position pos:line="39" pos:column="19"/></operator><name><name pos:line="39" pos:column="19">fetch<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">-&gt;<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="26">entry<pos:position pos:line="39" pos:column="31"/></name></name></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32">
            <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="13">reason<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator> <literal type="string" pos:line="40" pos:column="22">"swap aborted?!"<pos:position pos:line="40" pos:column="38"/></literal></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="41" pos:column="9">else <if pos:line="41" pos:column="14">if <condition pos:line="41" pos:column="17">(<expr><call><name pos:line="41" pos:column="18">EBIT_TEST<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name><name pos:line="41" pos:column="28">fetch<pos:position pos:line="41" pos:column="33"/></name><operator pos:line="41" pos:column="33">-&gt;<pos:position pos:line="41" pos:column="38"/></operator><name pos:line="41" pos:column="35">entry<pos:position pos:line="41" pos:column="40"/></name><operator pos:line="41" pos:column="40">-&gt;<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="42">flags<pos:position pos:line="41" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="49">ENTRY_ABORTED<pos:position pos:line="41" pos:column="62"/></name></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="64"/></condition><then pos:line="41" pos:column="64">
            <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="13">reason<pos:position pos:line="42" pos:column="19"/></name> <operator pos:line="42" pos:column="20">=<pos:position pos:line="42" pos:column="21"/></operator> <literal type="string" pos:line="42" pos:column="22">"swap aborted"<pos:position pos:line="42" pos:column="36"/></literal></expr>;<pos:position pos:line="42" pos:column="37"/></expr_stmt></block></then></if></elseif></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* continue checking (maybe-successful eof case) */</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><operator pos:line="46" pos:column="9">!<pos:position pos:line="46" pos:column="10"/></operator><name pos:line="46" pos:column="10">reason<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">&amp;&amp;<pos:position pos:line="46" pos:column="27"/></operator> <operator pos:line="46" pos:column="20">!<pos:position pos:line="46" pos:column="21"/></operator><name pos:line="46" pos:column="21">size<pos:position pos:line="46" pos:column="25"/></name></expr>)<pos:position pos:line="46" pos:column="26"/></condition><then pos:line="46" pos:column="26"> <block pos:line="46" pos:column="27">{
        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><name><name pos:line="47" pos:column="14">pd<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">-&gt;<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="18">cd<pos:position pos:line="47" pos:column="20"/></name></name></expr>)<pos:position pos:line="47" pos:column="21"/></condition><then pos:line="47" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="13">reason<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <literal type="string" pos:line="48" pos:column="22">"null digest?!"<pos:position pos:line="48" pos:column="37"/></literal></expr>;<pos:position pos:line="48" pos:column="38"/></expr_stmt></block></then>
        <elseif pos:line="49" pos:column="9">else <if pos:line="49" pos:column="14">if <condition pos:line="49" pos:column="17">(<expr><name><name pos:line="49" pos:column="18">fetch<pos:position pos:line="49" pos:column="23"/></name><operator pos:line="49" pos:column="23">-&gt;<pos:position pos:line="49" pos:column="28"/></operator><name pos:line="49" pos:column="25">mask_offset<pos:position pos:line="49" pos:column="36"/></name></name> <operator pos:line="49" pos:column="37">!=<pos:position pos:line="49" pos:column="39"/></operator> <operator pos:line="49" pos:column="40">(<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="41">int<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">)<pos:position pos:line="49" pos:column="45"/></operator><name><name pos:line="49" pos:column="45">pd<pos:position pos:line="49" pos:column="47"/></name><operator pos:line="49" pos:column="47">-&gt;<pos:position pos:line="49" pos:column="52"/></operator><name pos:line="49" pos:column="49">cd<pos:position pos:line="49" pos:column="51"/></name><operator pos:line="49" pos:column="51">-&gt;<pos:position pos:line="49" pos:column="56"/></operator><name pos:line="49" pos:column="53">mask_size<pos:position pos:line="49" pos:column="62"/></name></name></expr>)<pos:position pos:line="49" pos:column="63"/></condition><then pos:line="49" pos:column="63">
            <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="13">reason<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">=<pos:position pos:line="50" pos:column="21"/></operator> <literal type="string" pos:line="50" pos:column="22">"premature end of digest?!"<pos:position pos:line="50" pos:column="49"/></literal></expr>;<pos:position pos:line="50" pos:column="50"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="51" pos:column="9">else <if pos:line="51" pos:column="14">if <condition pos:line="51" pos:column="17">(<expr><operator pos:line="51" pos:column="18">!<pos:position pos:line="51" pos:column="19"/></operator><call><name pos:line="51" pos:column="19">peerDigestUseful<pos:position pos:line="51" pos:column="35"/></name><argument_list pos:line="51" pos:column="35">(<argument><expr><name pos:line="51" pos:column="36">pd<pos:position pos:line="51" pos:column="38"/></name></expr></argument>)<pos:position pos:line="51" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="40"/></condition><then pos:line="51" pos:column="40">
            <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="13">reason<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">=<pos:position pos:line="52" pos:column="21"/></operator> <literal type="string" pos:line="52" pos:column="22">"useless digest"<pos:position pos:line="52" pos:column="38"/></literal></expr>;<pos:position pos:line="52" pos:column="39"/></expr_stmt></block></then></if></elseif>
        <else pos:line="53" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="13">reason<pos:position pos:line="54" pos:column="19"/></name> <operator pos:line="54" pos:column="20">=<pos:position pos:line="54" pos:column="21"/></operator> <name pos:line="54" pos:column="22">no_bug<pos:position pos:line="54" pos:column="28"/></name> <operator pos:line="54" pos:column="29">=<pos:position pos:line="54" pos:column="30"/></operator> <literal type="string" pos:line="54" pos:column="31">"success"<pos:position pos:line="54" pos:column="40"/></literal></expr>;<pos:position pos:line="54" pos:column="41"/></expr_stmt></block></else></if>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="57" pos:column="5">/* finish if we have a reason */</comment>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">reason<pos:position pos:line="58" pos:column="15"/></name></expr>)<pos:position pos:line="58" pos:column="16"/></condition><then pos:line="58" pos:column="16"> <block pos:line="58" pos:column="17">{
        <decl_stmt><decl><type><specifier pos:line="59" pos:column="9">const<pos:position pos:line="59" pos:column="14"/></specifier> <name pos:line="59" pos:column="15">int<pos:position pos:line="59" pos:column="18"/></name></type> <name pos:line="59" pos:column="19">level<pos:position pos:line="59" pos:column="24"/></name> <init pos:line="59" pos:column="25">= <expr><ternary><condition><expr><call><name pos:line="59" pos:column="27">strstr<pos:position pos:line="59" pos:column="33"/></name><argument_list pos:line="59" pos:column="33">(<argument><expr><name pos:line="59" pos:column="34">reason<pos:position pos:line="59" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="42">"?!"<pos:position pos:line="59" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr> ?<pos:position pos:line="59" pos:column="49"/></condition><then pos:line="59" pos:column="49"> <expr><literal type="number" pos:line="59" pos:column="50">1<pos:position pos:line="59" pos:column="51"/></literal></expr> <pos:position pos:line="59" pos:column="52"/></then><else pos:line="59" pos:column="52">: <expr><literal type="number" pos:line="59" pos:column="54">3<pos:position pos:line="59" pos:column="55"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="59" pos:column="56"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">debugs<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><literal type="number" pos:line="60" pos:column="16">72<pos:position pos:line="60" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="20">level<pos:position pos:line="60" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="27">""<pos:position pos:line="60" pos:column="29"/></literal> <operator pos:line="60" pos:column="30">&lt;&lt;<pos:position pos:line="60" pos:column="38"/></operator> <name pos:line="60" pos:column="33">step_name<pos:position pos:line="60" pos:column="42"/></name> <operator pos:line="60" pos:column="43">&lt;&lt;<pos:position pos:line="60" pos:column="51"/></operator> <literal type="string" pos:line="60" pos:column="46">": peer "<pos:position pos:line="60" pos:column="55"/></literal> <operator pos:line="60" pos:column="56">&lt;&lt;<pos:position pos:line="60" pos:column="64"/></operator> <name pos:line="60" pos:column="59">host<pos:position pos:line="60" pos:column="63"/></name> <operator pos:line="60" pos:column="64">&lt;&lt;<pos:position pos:line="60" pos:column="72"/></operator> <literal type="string" pos:line="60" pos:column="67">", exiting after '"<pos:position pos:line="60" pos:column="86"/></literal> <operator pos:line="60" pos:column="87">&lt;&lt;<pos:position pos:line="60" pos:column="95"/></operator> <name pos:line="60" pos:column="90">reason<pos:position pos:line="60" pos:column="96"/></name> <operator pos:line="60" pos:column="97">&lt;&lt;<pos:position pos:line="60" pos:column="105"/></operator> <literal type="string" pos:line="60" pos:column="100">"'"<pos:position pos:line="60" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="105"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">peerDigestReqFinish<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">fetch<pos:position pos:line="61" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="36">buf<pos:position pos:line="61" pos:column="39"/></name></expr></argument>,
                            <argument><expr><literal type="number" pos:line="62" pos:column="29">1<pos:position pos:line="62" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="32">pdcb_valid<pos:position pos:line="62" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="44">pcb_valid<pos:position pos:line="62" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="55">reason<pos:position pos:line="62" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="63">!<pos:position pos:line="62" pos:column="64"/></operator><name pos:line="62" pos:column="64">no_bug<pos:position pos:line="62" pos:column="70"/></name></expr></argument>)<pos:position pos:line="62" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="63" pos:column="6"/></block></then> <else pos:line="63" pos:column="7">else <block pos:line="63" pos:column="12">{
        <comment type="block" pos:line="64" pos:column="9">/* paranoid check */</comment>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">assert<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><name pos:line="65" pos:column="16">pdcb_valid<pos:position pos:line="65" pos:column="26"/></name> <operator pos:line="65" pos:column="27">&amp;&amp;<pos:position pos:line="65" pos:column="37"/></operator> <name pos:line="65" pos:column="30">pcb_valid<pos:position pos:line="65" pos:column="39"/></name></expr></argument>)<pos:position pos:line="65" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></else></if>

    <return pos:line="68" pos:column="5">return <expr><name pos:line="68" pos:column="12">reason<pos:position pos:line="68" pos:column="18"/></name> <operator pos:line="68" pos:column="19">!=<pos:position pos:line="68" pos:column="21"/></operator> <name pos:line="68" pos:column="22">NULL<pos:position pos:line="68" pos:column="26"/></name></expr>;<pos:position pos:line="68" pos:column="27"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
