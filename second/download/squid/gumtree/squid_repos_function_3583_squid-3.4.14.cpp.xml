<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3583_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">clientReadRequest<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">(<parameter><decl><type><specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier> <name pos:line="2" pos:column="40">CommIoCbParams<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">&amp;<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="56">io<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">33<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">5<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>,<argument><expr><name pos:line="4" pos:column="17">HERE<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">&lt;&lt;<pos:position pos:line="4" pos:column="30"/></operator> <name><name pos:line="4" pos:column="25">io<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">.<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">conn<pos:position pos:line="4" pos:column="32"/></name></name> <operator pos:line="4" pos:column="33">&lt;&lt;<pos:position pos:line="4" pos:column="41"/></operator> <literal type="string" pos:line="4" pos:column="36">" size "<pos:position pos:line="4" pos:column="44"/></literal> <operator pos:line="4" pos:column="45">&lt;&lt;<pos:position pos:line="4" pos:column="53"/></operator> <name><name pos:line="4" pos:column="48">io<pos:position pos:line="4" pos:column="50"/></name><operator pos:line="4" pos:column="50">.<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="51">size<pos:position pos:line="4" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><call><name pos:line="5" pos:column="10">reading<pos:position pos:line="5" pos:column="17"/></name><argument_list pos:line="5" pos:column="17">()<pos:position pos:line="5" pos:column="19"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">reader<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <name pos:line="6" pos:column="14">NULL<pos:position pos:line="6" pos:column="18"/></name></expr>;<pos:position pos:line="6" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* Bail out quickly on COMM_ERR_CLOSING - close handlers will tidy up */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">io<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">.<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">flag<pos:position pos:line="10" pos:column="16"/></name></name> <operator pos:line="10" pos:column="17">==<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">COMM_ERR_CLOSING<pos:position pos:line="10" pos:column="36"/></name></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37"> <block pos:line="10" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">33<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="11" pos:column="19">5<pos:position pos:line="11" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="22">HERE<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">&lt;&lt;<pos:position pos:line="11" pos:column="35"/></operator> <name><name pos:line="11" pos:column="30">io<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">.<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">conn<pos:position pos:line="11" pos:column="37"/></name></name> <operator pos:line="11" pos:column="38">&lt;&lt;<pos:position pos:line="11" pos:column="46"/></operator> <literal type="string" pos:line="11" pos:column="41">" closing Bailout."<pos:position pos:line="11" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="62"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><call><name><name pos:line="15" pos:column="12">Comm<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">::<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">IsConnOpen<pos:position pos:line="15" pos:column="28"/></name></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">clientConnection<pos:position pos:line="15" pos:column="45"/></name></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">assert<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name><name pos:line="16" pos:column="12">io<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">.<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">conn<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">fd<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">==<pos:position pos:line="16" pos:column="26"/></operator> <name><name pos:line="16" pos:column="27">clientConnection<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">-&gt;<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="45">fd<pos:position pos:line="16" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/*
     * Don't reset the timeout value here.  The timeout value will be
     * set to Config.Timeout.request by httpAccept() and
     * clientWriteComplete(), and should apply to the request as a
     * whole, not individual read() calls.  Plus, it breaks our
     * lame half-close detection
     */</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><call><name pos:line="25" pos:column="9">connReadWasError<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name><name pos:line="25" pos:column="26">io<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">.<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="29">flag<pos:position pos:line="25" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="35">io<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">.<pos:position pos:line="25" pos:column="38"/></operator><name pos:line="25" pos:column="38">size<pos:position pos:line="25" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="44">io<pos:position pos:line="25" pos:column="46"/></name><operator pos:line="25" pos:column="46">.<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="47">xerrno<pos:position pos:line="25" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="55"/></condition><then pos:line="25" pos:column="55"> <block pos:line="25" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">notifyAllContexts<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name><name pos:line="26" pos:column="27">io<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">.<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">xerrno<pos:position pos:line="26" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="27" pos:column="9">io<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">conn<pos:position pos:line="27" pos:column="16"/></name><operator pos:line="27" pos:column="16">-&gt;<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="18">close<pos:position pos:line="27" pos:column="23"/></name></name><argument_list pos:line="27" pos:column="23">()<pos:position pos:line="27" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
        <return pos:line="28" pos:column="9">return;<pos:position pos:line="28" pos:column="16"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">io<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">.<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="12">flag<pos:position pos:line="31" pos:column="16"/></name></name> <operator pos:line="31" pos:column="17">==<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">COMM_OK<pos:position pos:line="31" pos:column="27"/></name></expr>)<pos:position pos:line="31" pos:column="28"/></condition><then pos:line="31" pos:column="28"> <block pos:line="31" pos:column="29">{
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">io<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">.<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">size<pos:position pos:line="32" pos:column="20"/></name></name> <operator pos:line="32" pos:column="21">&gt;<pos:position pos:line="32" pos:column="25"/></operator> <literal type="number" pos:line="32" pos:column="23">0<pos:position pos:line="32" pos:column="24"/></literal></expr>)<pos:position pos:line="32" pos:column="25"/></condition><then pos:line="32" pos:column="25"> <block pos:line="32" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">kb_incr<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><operator pos:line="33" pos:column="21">&amp;<pos:position pos:line="33" pos:column="26"/></operator><operator pos:line="33" pos:column="22">(<pos:position pos:line="33" pos:column="23"/></operator><name><name pos:line="33" pos:column="23">statCounter<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">.<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="35">client_http<pos:position pos:line="33" pos:column="46"/></name><operator pos:line="33" pos:column="46">.<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="47">kbytes_in<pos:position pos:line="33" pos:column="56"/></name></name><operator pos:line="33" pos:column="56">)<pos:position pos:line="33" pos:column="57"/></operator></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="59">io<pos:position pos:line="33" pos:column="61"/></name><operator pos:line="33" pos:column="61">.<pos:position pos:line="33" pos:column="62"/></operator><name pos:line="33" pos:column="62">size<pos:position pos:line="33" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="68"/></expr_stmt>

            <comment type="line" pos:line="35" pos:column="13">// may comm_close or setReplyToError</comment>
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><operator pos:line="36" pos:column="17">!<pos:position pos:line="36" pos:column="18"/></operator><call><name pos:line="36" pos:column="18">handleReadData<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name><name pos:line="36" pos:column="33">io<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">.<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="36">buf<pos:position pos:line="36" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="41">io<pos:position pos:line="36" pos:column="43"/></name><operator pos:line="36" pos:column="43">.<pos:position pos:line="36" pos:column="44"/></operator><name pos:line="36" pos:column="44">size<pos:position pos:line="36" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="50"/></condition><then pos:line="36" pos:column="50">
                <block type="pseudo"><return pos:line="37" pos:column="17">return;<pos:position pos:line="37" pos:column="24"/></return></block></then></if>

        }<pos:position pos:line="39" pos:column="10"/></block></then> <elseif pos:line="39" pos:column="11">else <if pos:line="39" pos:column="16">if <condition pos:line="39" pos:column="19">(<expr><name><name pos:line="39" pos:column="20">io<pos:position pos:line="39" pos:column="22"/></name><operator pos:line="39" pos:column="22">.<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="23">size<pos:position pos:line="39" pos:column="27"/></name></name> <operator pos:line="39" pos:column="28">==<pos:position pos:line="39" pos:column="30"/></operator> <literal type="number" pos:line="39" pos:column="31">0<pos:position pos:line="39" pos:column="32"/></literal></expr>)<pos:position pos:line="39" pos:column="33"/></condition><then pos:line="39" pos:column="33"> <block pos:line="39" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">debugs<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><literal type="number" pos:line="40" pos:column="20">33<pos:position pos:line="40" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="24">5<pos:position pos:line="40" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="27">HERE<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">&lt;&lt;<pos:position pos:line="40" pos:column="40"/></operator> <name><name pos:line="40" pos:column="35">io<pos:position pos:line="40" pos:column="37"/></name><operator pos:line="40" pos:column="37">.<pos:position pos:line="40" pos:column="38"/></operator><name pos:line="40" pos:column="38">conn<pos:position pos:line="40" pos:column="42"/></name></name> <operator pos:line="40" pos:column="43">&lt;&lt;<pos:position pos:line="40" pos:column="51"/></operator> <literal type="string" pos:line="40" pos:column="46">" closed?"<pos:position pos:line="40" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt>

            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><call><name pos:line="42" pos:column="17">connFinishedWithConn<pos:position pos:line="42" pos:column="37"/></name><argument_list pos:line="42" pos:column="37">(<argument><expr><name><name pos:line="42" pos:column="38">io<pos:position pos:line="42" pos:column="40"/></name><operator pos:line="42" pos:column="40">.<pos:position pos:line="42" pos:column="41"/></operator><name pos:line="42" pos:column="41">size<pos:position pos:line="42" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="47"/></condition><then pos:line="42" pos:column="47"> <block pos:line="42" pos:column="48">{
                <expr_stmt><expr><call><name><name pos:line="43" pos:column="17">clientConnection<pos:position pos:line="43" pos:column="33"/></name><operator pos:line="43" pos:column="33">-&gt;<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="35">close<pos:position pos:line="43" pos:column="40"/></name></name><argument_list pos:line="43" pos:column="40">()<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
                <return pos:line="44" pos:column="17">return;<pos:position pos:line="44" pos:column="24"/></return>
            }<pos:position pos:line="45" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="47" pos:column="13">/* It might be half-closed, we can't tell */</comment>
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">fd_table<pos:position pos:line="48" pos:column="21"/></name><index pos:line="48" pos:column="21">[<expr><name><name pos:line="48" pos:column="22">io<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">.<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">conn<pos:position pos:line="48" pos:column="29"/></name><operator pos:line="48" pos:column="29">-&gt;<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="31">fd<pos:position pos:line="48" pos:column="33"/></name></name></expr>]<pos:position pos:line="48" pos:column="34"/></index></name><operator pos:line="48" pos:column="34">.<pos:position pos:line="48" pos:column="35"/></operator><name><name pos:line="48" pos:column="35">flags<pos:position pos:line="48" pos:column="40"/></name><operator pos:line="48" pos:column="40">.<pos:position pos:line="48" pos:column="41"/></operator><name pos:line="48" pos:column="41">socket_eof<pos:position pos:line="48" pos:column="51"/></name></name> <operator pos:line="48" pos:column="52">=<pos:position pos:line="48" pos:column="53"/></operator> <literal type="boolean" pos:line="48" pos:column="54">true<pos:position pos:line="48" pos:column="58"/></literal></expr>;<pos:position pos:line="48" pos:column="59"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="50" pos:column="13">commMarkHalfClosed<pos:position pos:line="50" pos:column="31"/></name><argument_list pos:line="50" pos:column="31">(<argument><expr><name><name pos:line="50" pos:column="32">io<pos:position pos:line="50" pos:column="34"/></name><operator pos:line="50" pos:column="34">.<pos:position pos:line="50" pos:column="35"/></operator><name pos:line="50" pos:column="35">conn<pos:position pos:line="50" pos:column="39"/></name><operator pos:line="50" pos:column="39">-&gt;<pos:position pos:line="50" pos:column="44"/></operator><name pos:line="50" pos:column="41">fd<pos:position pos:line="50" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="45"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="52" pos:column="13">fd_note<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name><name pos:line="52" pos:column="21">io<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">.<pos:position pos:line="52" pos:column="24"/></operator><name pos:line="52" pos:column="24">conn<pos:position pos:line="52" pos:column="28"/></name><operator pos:line="52" pos:column="28">-&gt;<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="30">fd<pos:position pos:line="52" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="34">"half-closed"<pos:position pos:line="52" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="49"/></expr_stmt>

            <comment type="block" pos:line="54" pos:column="13">/* There is one more close check at the end, to detect aborted
             * (partial) requests. At this point we can't tell if the request
             * is partial.
             */</comment>
            <comment type="block" pos:line="58" pos:column="13">/* Continue to process previously read data */</comment>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="62" pos:column="5">/* Process next request */</comment>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><call><name pos:line="63" pos:column="9">getConcurrentRequestCount<pos:position pos:line="63" pos:column="34"/></name><argument_list pos:line="63" pos:column="34">()<pos:position pos:line="63" pos:column="36"/></argument_list></call> <operator pos:line="63" pos:column="37">==<pos:position pos:line="63" pos:column="39"/></operator> <literal type="number" pos:line="63" pos:column="40">0<pos:position pos:line="63" pos:column="41"/></literal></expr>)<pos:position pos:line="63" pos:column="42"/></condition><then pos:line="63" pos:column="42">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="9">fd_note<pos:position pos:line="64" pos:column="16"/></name><argument_list pos:line="64" pos:column="16">(<argument><expr><name><name pos:line="64" pos:column="17">io<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">.<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="20">fd<pos:position pos:line="64" pos:column="22"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="24">"Reading next request"<pos:position pos:line="64" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="48"/></expr_stmt></block></then></if>

    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><operator pos:line="66" pos:column="9">!<pos:position pos:line="66" pos:column="10"/></operator><call><name pos:line="66" pos:column="10">clientParseRequests<pos:position pos:line="66" pos:column="29"/></name><argument_list pos:line="66" pos:column="29">()<pos:position pos:line="66" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="32"/></condition><then pos:line="66" pos:column="32"> <block pos:line="66" pos:column="33">{
        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><operator pos:line="67" pos:column="13">!<pos:position pos:line="67" pos:column="14"/></operator><call><name pos:line="67" pos:column="14">isOpen<pos:position pos:line="67" pos:column="20"/></name><argument_list pos:line="67" pos:column="20">()<pos:position pos:line="67" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="23"/></condition><then pos:line="67" pos:column="23">
            <block type="pseudo"><return pos:line="68" pos:column="13">return;<pos:position pos:line="68" pos:column="20"/></return></block></then></if>
        <comment type="block" pos:line="69" pos:column="9">/*
         * If the client here is half closed and we failed
         * to parse a request, close the connection.
         * The above check with connFinishedWithConn() only
         * succeeds _if_ the buffer is empty which it won't
         * be if we have an incomplete request.
         * XXX: This duplicates ClientSocketContext::keepaliveNextRequest
         */</comment>
        <if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><call><name pos:line="77" pos:column="13">getConcurrentRequestCount<pos:position pos:line="77" pos:column="38"/></name><argument_list pos:line="77" pos:column="38">()<pos:position pos:line="77" pos:column="40"/></argument_list></call> <operator pos:line="77" pos:column="41">==<pos:position pos:line="77" pos:column="43"/></operator> <literal type="number" pos:line="77" pos:column="44">0<pos:position pos:line="77" pos:column="45"/></literal> <operator pos:line="77" pos:column="46">&amp;&amp;<pos:position pos:line="77" pos:column="56"/></operator> <call><name pos:line="77" pos:column="49">commIsHalfClosed<pos:position pos:line="77" pos:column="65"/></name><argument_list pos:line="77" pos:column="65">(<argument><expr><name><name pos:line="77" pos:column="66">io<pos:position pos:line="77" pos:column="68"/></name><operator pos:line="77" pos:column="68">.<pos:position pos:line="77" pos:column="69"/></operator><name pos:line="77" pos:column="69">fd<pos:position pos:line="77" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="77" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="73"/></condition><then pos:line="77" pos:column="73"> <block pos:line="77" pos:column="74">{
            <expr_stmt><expr><call><name pos:line="78" pos:column="13">debugs<pos:position pos:line="78" pos:column="19"/></name><argument_list pos:line="78" pos:column="19">(<argument><expr><literal type="number" pos:line="78" pos:column="20">33<pos:position pos:line="78" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="78" pos:column="24">5<pos:position pos:line="78" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="27">HERE<pos:position pos:line="78" pos:column="31"/></name> <operator pos:line="78" pos:column="32">&lt;&lt;<pos:position pos:line="78" pos:column="40"/></operator> <name><name pos:line="78" pos:column="35">io<pos:position pos:line="78" pos:column="37"/></name><operator pos:line="78" pos:column="37">.<pos:position pos:line="78" pos:column="38"/></operator><name pos:line="78" pos:column="38">conn<pos:position pos:line="78" pos:column="42"/></name></name> <operator pos:line="78" pos:column="43">&lt;&lt;<pos:position pos:line="78" pos:column="51"/></operator> <literal type="string" pos:line="78" pos:column="46">": half-closed connection, no completed request parsed, connection closing."<pos:position pos:line="78" pos:column="122"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="123"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="124"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="79" pos:column="13">clientConnection<pos:position pos:line="79" pos:column="29"/></name><operator pos:line="79" pos:column="29">-&gt;<pos:position pos:line="79" pos:column="34"/></operator><name pos:line="79" pos:column="31">close<pos:position pos:line="79" pos:column="36"/></name></name><argument_list pos:line="79" pos:column="36">()<pos:position pos:line="79" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="39"/></expr_stmt>
            <return pos:line="80" pos:column="13">return;<pos:position pos:line="80" pos:column="20"/></return>
        }<pos:position pos:line="81" pos:column="10"/></block></then></if>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <if pos:line="84" pos:column="5">if <condition pos:line="84" pos:column="8">(<expr><operator pos:line="84" pos:column="9">!<pos:position pos:line="84" pos:column="10"/></operator><call><name pos:line="84" pos:column="10">isOpen<pos:position pos:line="84" pos:column="16"/></name><argument_list pos:line="84" pos:column="16">()<pos:position pos:line="84" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="19"/></condition><then pos:line="84" pos:column="19">
        <block type="pseudo"><return pos:line="85" pos:column="9">return;<pos:position pos:line="85" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="87" pos:column="5">clientAfterReadingRequests<pos:position pos:line="87" pos:column="31"/></name><argument_list pos:line="87" pos:column="31">()<pos:position pos:line="87" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="34"/></expr_stmt>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
