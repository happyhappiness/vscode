<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3449_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">clientSocketRecipient<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">clientStreamNode<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type> <name pos:line="2" pos:column="42">node<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">ClientHttpRequest<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier></type> <name pos:line="2" pos:column="68">http<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>,
                      <parameter><decl><type><name pos:line="3" pos:column="23">HttpReply<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type> <name pos:line="3" pos:column="35">rep<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="40">StoreIOBuffer<pos:position pos:line="3" pos:column="53"/></name></type> <name pos:line="3" pos:column="54">receivedData<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="67"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">fd<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
    <comment type="block" pos:line="6" pos:column="5">/* Test preconditions */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">node<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">!=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">NULL<pos:position pos:line="7" pos:column="24"/></name></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">PROF_start<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">clientSocketRecipient<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>
    <comment type="block" pos:line="9" pos:column="5">/* TODO: handle this rather than asserting
     * - it should only ever happen if we cause an abort and
     * the callback chain loops back to here, so we can simply return.
     * However, that itself shouldn't happen, so it stays as an assert for now.
     */</comment>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">assert<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><call><name pos:line="14" pos:column="12">cbdataReferenceValid<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">node<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name><name pos:line="15" pos:column="12">node<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">-&gt;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="18">node<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">.<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">next<pos:position pos:line="15" pos:column="27"/></name></name> <operator pos:line="15" pos:column="28">==<pos:position pos:line="15" pos:column="30"/></operator> <name pos:line="15" pos:column="31">NULL<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">ClientSocketContext<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">::<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="26">Pointer<pos:position pos:line="16" pos:column="33"/></name></name></type> <name pos:line="16" pos:column="34">context<pos:position pos:line="16" pos:column="41"/></name> <init pos:line="16" pos:column="42">= <expr><cast type="dynamic" pos:line="16" pos:column="44">dynamic_cast<argument_list type="generic" pos:line="16" pos:column="56">&lt;<argument><expr><name pos:line="16" pos:column="57">ClientSocketContext<pos:position pos:line="16" pos:column="76"/></name> <operator pos:line="16" pos:column="77">*<pos:position pos:line="16" pos:column="78"/></operator></expr></argument>&gt;<pos:position pos:line="16" pos:column="82"/></argument_list><argument_list pos:line="16" pos:column="79">(<argument><expr><call><name><name pos:line="16" pos:column="80">node<pos:position pos:line="16" pos:column="84"/></name><operator pos:line="16" pos:column="84">-&gt;<pos:position pos:line="16" pos:column="89"/></operator><name pos:line="16" pos:column="86">data<pos:position pos:line="16" pos:column="90"/></name><operator pos:line="16" pos:column="90">.<pos:position pos:line="16" pos:column="91"/></operator><name pos:line="16" pos:column="91">getRaw<pos:position pos:line="16" pos:column="97"/></name></name><argument_list pos:line="16" pos:column="97">()<pos:position pos:line="16" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="100"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="16" pos:column="101"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">assert<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">context<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">!=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">NULL<pos:position pos:line="17" pos:column="27"/></name></expr></argument>)<pos:position pos:line="17" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><call><name pos:line="18" pos:column="12">connIsUsable<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><call><name><name pos:line="18" pos:column="25">http<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">getConn<pos:position pos:line="18" pos:column="38"/></name></name><argument_list pos:line="18" pos:column="38">()<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">fd<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <call><name><name pos:line="19" pos:column="10">http<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">-&gt;<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="16">getConn<pos:position pos:line="19" pos:column="23"/></name></name><argument_list pos:line="19" pos:column="23">()<pos:position pos:line="19" pos:column="25"/></argument_list></call><operator pos:line="19" pos:column="25">-&gt;<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="27">fd<pos:position pos:line="19" pos:column="29"/></name></expr>;<pos:position pos:line="19" pos:column="30"/></expr_stmt>
    <comment type="block" pos:line="20" pos:column="5">/* TODO: check offset is what we asked for */</comment>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">context<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">!=<pos:position pos:line="22" pos:column="19"/></operator> <call><name><name pos:line="22" pos:column="20">http<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">-&gt;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="26">getConn<pos:position pos:line="22" pos:column="33"/></name></name><argument_list pos:line="22" pos:column="33">()<pos:position pos:line="22" pos:column="35"/></argument_list></call><operator pos:line="22" pos:column="35">-&gt;<pos:position pos:line="22" pos:column="40"/></operator><call><name pos:line="22" pos:column="37">getCurrentContext<pos:position pos:line="22" pos:column="54"/></name><argument_list pos:line="22" pos:column="54">()<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="57"/></condition><then pos:line="22" pos:column="57"> <block pos:line="22" pos:column="58">{
        <expr_stmt><expr><call><name><name pos:line="23" pos:column="9">context<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">deferRecipientForLater<pos:position pos:line="23" pos:column="40"/></name></name><argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">node<pos:position pos:line="23" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="47">rep<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="52">receivedData<pos:position pos:line="23" pos:column="64"/></name></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">PROF_stop<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">clientSocketRecipient<pos:position pos:line="24" pos:column="40"/></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
        <return pos:line="25" pos:column="9">return;<pos:position pos:line="25" pos:column="16"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name pos:line="28" pos:column="9">responseFinishedOrFailed<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">rep<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="39">receivedData<pos:position pos:line="28" pos:column="51"/></name></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="53"/></condition><then pos:line="28" pos:column="53"> <block pos:line="28" pos:column="54">{
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">context<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">writeComplete<pos:position pos:line="29" pos:column="31"/></name></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">fd<pos:position pos:line="29" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="36">NULL<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="42">0<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="45">COMM_OK<pos:position pos:line="29" pos:column="52"/></name></expr></argument>)<pos:position pos:line="29" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">PROF_stop<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name pos:line="30" pos:column="19">clientSocketRecipient<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
        <return pos:line="31" pos:column="9">return;<pos:position pos:line="31" pos:column="16"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">!<pos:position pos:line="34" pos:column="10"/></operator><call><name><name pos:line="34" pos:column="10">context<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">-&gt;<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="19">startOfOutput<pos:position pos:line="34" pos:column="32"/></name></name><argument_list pos:line="34" pos:column="32">()<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="35"/></condition><then pos:line="34" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="35" pos:column="9">context<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">sendBody<pos:position pos:line="35" pos:column="26"/></name></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">rep<pos:position pos:line="35" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="32">receivedData<pos:position pos:line="35" pos:column="44"/></name></expr></argument>)<pos:position pos:line="35" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="46"/></expr_stmt></block></then>
    <else pos:line="36" pos:column="5">else <block pos:line="36" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">assert<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">rep<pos:position pos:line="37" pos:column="19"/></name></expr></argument>)<pos:position pos:line="37" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="38" pos:column="9">http<pos:position pos:line="38" pos:column="13"/></name><operator pos:line="38" pos:column="13">-&gt;<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="15">al<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">.<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">reply<pos:position pos:line="38" pos:column="23"/></name></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <call><name pos:line="38" pos:column="26">HTTPMSGLOCK<pos:position pos:line="38" pos:column="37"/></name><argument_list pos:line="38" pos:column="37">(<argument><expr><name pos:line="38" pos:column="38">rep<pos:position pos:line="38" pos:column="41"/></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="39" pos:column="9">context<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">sendStartOfMessage<pos:position pos:line="39" pos:column="36"/></name></name><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">rep<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="42">receivedData<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="42" pos:column="5">PROF_stop<pos:position pos:line="42" pos:column="14"/></name><argument_list pos:line="42" pos:column="14">(<argument><expr><name pos:line="42" pos:column="15">clientSocketRecipient<pos:position pos:line="42" pos:column="36"/></name></expr></argument>)<pos:position pos:line="42" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
