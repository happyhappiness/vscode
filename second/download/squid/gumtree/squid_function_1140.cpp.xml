<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1140.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">TunnelStateData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">handleConnectResponse<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">(<parameter><decl><type><specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier> <name pos:line="2" pos:column="46">size_t<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">chunkSize<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><call><name pos:line="4" pos:column="12">waitingForConnectResponse<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">()<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="41"/></expr_stmt>

    <comment type="line" pos:line="6" pos:column="5">// Ideally, client and server should use MemBuf or better, but current code</comment>
    <comment type="line" pos:line="7" pos:column="5">// never accumulates more than one read when shoveling data (XXX) so it does</comment>
    <comment type="line" pos:line="8" pos:column="5">// not need to deal with MemBuf complexity. To keep it simple, we use a</comment>
    <comment type="line" pos:line="9" pos:column="5">// dedicated MemBuf for accumulating CONNECT responses. TODO: When shoveling</comment>
    <comment type="line" pos:line="10" pos:column="5">// is optimized, reuse server.buf for CONNEC response accumulation instead.</comment>

    <comment type="block" pos:line="12" pos:column="5">/* mimic the basic parts of HttpStateData::processReplyHeader() */</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">HttpReply<pos:position pos:line="13" pos:column="14"/></name></type> <name pos:line="13" pos:column="15">rep<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">Http<pos:position pos:line="14" pos:column="9"/></name><operator pos:line="14" pos:column="9">::<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">StatusCode<pos:position pos:line="14" pos:column="21"/></name></name></type> <name pos:line="14" pos:column="22">parseErr<pos:position pos:line="14" pos:column="30"/></name> <init pos:line="14" pos:column="31">= <expr><name><name pos:line="14" pos:column="33">Http<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">::<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">scNone<pos:position pos:line="14" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">bool<pos:position pos:line="15" pos:column="15"/></name></type> <name pos:line="15" pos:column="16">eof<pos:position pos:line="15" pos:column="19"/></name> <init pos:line="15" pos:column="20">= <expr><operator pos:line="15" pos:column="22">!<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">chunkSize<pos:position pos:line="15" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">bool<pos:position pos:line="16" pos:column="15"/></name></type> <name pos:line="16" pos:column="16">parsed<pos:position pos:line="16" pos:column="22"/></name> <init pos:line="16" pos:column="23">= <expr><call><name><name pos:line="16" pos:column="25">rep<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">.<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">parse<pos:position pos:line="16" pos:column="34"/></name></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">connectRespBuf<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">eof<pos:position pos:line="16" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="56">&amp;<pos:position pos:line="16" pos:column="61"/></operator><name pos:line="16" pos:column="57">parseErr<pos:position pos:line="16" pos:column="65"/></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="67"/></decl_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">parsed<pos:position pos:line="17" pos:column="16"/></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17"> <block pos:line="17" pos:column="18">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">parseErr<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">&gt;<pos:position pos:line="18" pos:column="26"/></operator> <literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr>)<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26"> <block pos:line="18" pos:column="27">{ <comment type="line" pos:line="18" pos:column="29">// unrecoverable parsing error</comment>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">informUserOfPeerError<pos:position pos:line="19" pos:column="34"/></name><argument_list pos:line="19" pos:column="34">(<argument><expr><literal type="string" pos:line="19" pos:column="35">"malformed CONNECT response from peer"<pos:position pos:line="19" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="75"/></expr_stmt>
            <return pos:line="20" pos:column="13">return;<pos:position pos:line="20" pos:column="20"/></return>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="23" pos:column="9">// need more data</comment>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">assert<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><operator pos:line="24" pos:column="16">!<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">eof<pos:position pos:line="24" pos:column="20"/></name></expr></argument>)<pos:position pos:line="24" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">assert<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><operator pos:line="25" pos:column="16">!<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="17">parseErr<pos:position pos:line="25" pos:column="25"/></name></expr></argument>)<pos:position pos:line="25" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>

        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><call><name><name pos:line="27" pos:column="14">connectRespBuf<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">-&gt;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="30">hasSpace<pos:position pos:line="27" pos:column="38"/></name></name><argument_list pos:line="27" pos:column="38">()<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="41"/></condition><then pos:line="27" pos:column="41"> <block pos:line="27" pos:column="42">{
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">informUserOfPeerError<pos:position pos:line="28" pos:column="34"/></name><argument_list pos:line="28" pos:column="34">(<argument><expr><literal type="string" pos:line="28" pos:column="35">"huge CONNECT response from peer"<pos:position pos:line="28" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="70"/></expr_stmt>
            <return pos:line="29" pos:column="13">return;<pos:position pos:line="29" pos:column="20"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="32" pos:column="9">// keep reading</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">readConnectResponse<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">()<pos:position pos:line="33" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
        <return pos:line="34" pos:column="9">return;<pos:position pos:line="34" pos:column="16"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="37" pos:column="5">// CONNECT response was successfully parsed</comment>
    <expr_stmt><expr><operator pos:line="38" pos:column="5">*<pos:position pos:line="38" pos:column="6"/></operator><name pos:line="38" pos:column="6">status_ptr<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">=<pos:position pos:line="38" pos:column="18"/></operator> <call><name><name pos:line="38" pos:column="19">rep<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">.<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">sline<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">.<pos:position pos:line="38" pos:column="29"/></operator><name pos:line="38" pos:column="29">status<pos:position pos:line="38" pos:column="35"/></name></name><argument_list pos:line="38" pos:column="35">()<pos:position pos:line="38" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>

    <comment type="line" pos:line="40" pos:column="5">// bail if we did not get an HTTP 200 (Connection Established) response</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name><name pos:line="41" pos:column="9">rep<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">.<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">sline<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">.<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">status<pos:position pos:line="41" pos:column="25"/></name></name><argument_list pos:line="41" pos:column="25">()<pos:position pos:line="41" pos:column="27"/></argument_list></call> <operator pos:line="41" pos:column="28">!=<pos:position pos:line="41" pos:column="30"/></operator> <name><name pos:line="41" pos:column="31">Http<pos:position pos:line="41" pos:column="35"/></name><operator pos:line="41" pos:column="35">::<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="37">scOkay<pos:position pos:line="41" pos:column="43"/></name></name></expr>)<pos:position pos:line="41" pos:column="44"/></condition><then pos:line="41" pos:column="44"> <block pos:line="41" pos:column="45">{
        <comment type="line" pos:line="42" pos:column="9">// if we ever decide to reuse the peer connection, we must extract the error response first</comment>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">informUserOfPeerError<pos:position pos:line="43" pos:column="30"/></name><argument_list pos:line="43" pos:column="30">(<argument><expr><literal type="string" pos:line="43" pos:column="31">"unsupported CONNECT response status code"<pos:position pos:line="43" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="75"/></expr_stmt>
        <return pos:line="44" pos:column="9">return;<pos:position pos:line="44" pos:column="16"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name><name pos:line="47" pos:column="9">rep<pos:position pos:line="47" pos:column="12"/></name><operator pos:line="47" pos:column="12">.<pos:position pos:line="47" pos:column="13"/></operator><name pos:line="47" pos:column="13">hdr_sz<pos:position pos:line="47" pos:column="19"/></name></name> <operator pos:line="47" pos:column="20">&lt;<pos:position pos:line="47" pos:column="24"/></operator> <call><name><name pos:line="47" pos:column="22">connectRespBuf<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">-&gt;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="38">contentSize<pos:position pos:line="47" pos:column="49"/></name></name><argument_list pos:line="47" pos:column="49">()<pos:position pos:line="47" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="52"/></condition><then pos:line="47" pos:column="52"> <block pos:line="47" pos:column="53">{
        <comment type="line" pos:line="48" pos:column="9">// preserve bytes that the server already sent after the CONNECT response</comment>
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">server<pos:position pos:line="49" pos:column="15"/></name><operator pos:line="49" pos:column="15">.<pos:position pos:line="49" pos:column="16"/></operator><name pos:line="49" pos:column="16">len<pos:position pos:line="49" pos:column="19"/></name></name> <operator pos:line="49" pos:column="20">=<pos:position pos:line="49" pos:column="21"/></operator> <call><name><name pos:line="49" pos:column="22">connectRespBuf<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">-&gt;<pos:position pos:line="49" pos:column="41"/></operator><name pos:line="49" pos:column="38">contentSize<pos:position pos:line="49" pos:column="49"/></name></name><argument_list pos:line="49" pos:column="49">()<pos:position pos:line="49" pos:column="51"/></argument_list></call> <operator pos:line="49" pos:column="52">-<pos:position pos:line="49" pos:column="53"/></operator> <name><name pos:line="49" pos:column="54">rep<pos:position pos:line="49" pos:column="57"/></name><operator pos:line="49" pos:column="57">.<pos:position pos:line="49" pos:column="58"/></operator><name pos:line="49" pos:column="58">hdr_sz<pos:position pos:line="49" pos:column="64"/></name></name></expr>;<pos:position pos:line="49" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">memcpy<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><name><name pos:line="50" pos:column="16">server<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">.<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">buf<pos:position pos:line="50" pos:column="26"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="50" pos:column="28">connectRespBuf<pos:position pos:line="50" pos:column="42"/></name><operator pos:line="50" pos:column="42">-&gt;<pos:position pos:line="50" pos:column="47"/></operator><name pos:line="50" pos:column="44">content<pos:position pos:line="50" pos:column="51"/></name></name><argument_list pos:line="50" pos:column="51">()<pos:position pos:line="50" pos:column="53"/></argument_list></call><operator pos:line="50" pos:column="53">+<pos:position pos:line="50" pos:column="54"/></operator><name><name pos:line="50" pos:column="54">rep<pos:position pos:line="50" pos:column="57"/></name><operator pos:line="50" pos:column="57">.<pos:position pos:line="50" pos:column="58"/></operator><name pos:line="50" pos:column="58">hdr_sz<pos:position pos:line="50" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="66">server<pos:position pos:line="50" pos:column="72"/></name><operator pos:line="50" pos:column="72">.<pos:position pos:line="50" pos:column="73"/></operator><name pos:line="50" pos:column="73">len<pos:position pos:line="50" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then> <else pos:line="51" pos:column="7">else <block pos:line="51" pos:column="12">{
        <comment type="line" pos:line="52" pos:column="9">// reset; delay pools were using this field to throttle CONNECT response</comment>
        <expr_stmt><expr><name><name pos:line="53" pos:column="9">server<pos:position pos:line="53" pos:column="15"/></name><operator pos:line="53" pos:column="15">.<pos:position pos:line="53" pos:column="16"/></operator><name pos:line="53" pos:column="16">len<pos:position pos:line="53" pos:column="19"/></name></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <literal type="number" pos:line="53" pos:column="22">0<pos:position pos:line="53" pos:column="23"/></literal></expr>;<pos:position pos:line="53" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></else></if>

    <expr_stmt><expr><operator pos:line="56" pos:column="5">delete<pos:position pos:line="56" pos:column="11"/></operator> <name pos:line="56" pos:column="12">connectRespBuf<pos:position pos:line="56" pos:column="26"/></name></expr>;<pos:position pos:line="56" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="57" pos:column="5">connectRespBuf<pos:position pos:line="57" pos:column="19"/></name> <operator pos:line="57" pos:column="20">=<pos:position pos:line="57" pos:column="21"/></operator> <name pos:line="57" pos:column="22">NULL<pos:position pos:line="57" pos:column="26"/></name></expr>;<pos:position pos:line="57" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">connectExchangeCheckpoint<pos:position pos:line="58" pos:column="30"/></name><argument_list pos:line="58" pos:column="30">()<pos:position pos:line="58" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
