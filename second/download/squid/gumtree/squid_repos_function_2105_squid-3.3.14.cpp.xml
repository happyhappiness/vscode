<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2105_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">diskHandleRead<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">int<pos:position pos:line="2" pos:column="19"/></name></type> <name pos:line="2" pos:column="20">fd<pos:position pos:line="2" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="24">void<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">data<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">dread_ctrl<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">ctrl_dat<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><operator pos:line="4" pos:column="28">(<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="29">dread_ctrl<pos:position pos:line="4" pos:column="39"/></name> <operator pos:line="4" pos:column="40">*<pos:position pos:line="4" pos:column="41"/></operator><operator pos:line="4" pos:column="41">)<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="42">data<pos:position pos:line="4" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">fde<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">F<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><operator pos:line="5" pos:column="14">&amp;<pos:position pos:line="5" pos:column="19"/></operator><name><name pos:line="5" pos:column="15">fd_table<pos:position pos:line="5" pos:column="23"/></name><index pos:line="5" pos:column="23">[<expr><name pos:line="5" pos:column="24">fd<pos:position pos:line="5" pos:column="26"/></name></expr>]<pos:position pos:line="5" pos:column="27"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">len<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">rc<pos:position pos:line="7" pos:column="11"/></name> <init pos:line="7" pos:column="12">= <expr><name pos:line="7" pos:column="14">DISK_OK<pos:position pos:line="7" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <comment type="block" pos:line="8" pos:column="5">/*
     * FD &lt; 0 indicates premature close; we just have to free
     * the state data.
     */</comment>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">fd<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&lt;<pos:position pos:line="13" pos:column="16"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>)<pos:position pos:line="13" pos:column="16"/></condition><then pos:line="13" pos:column="16"> <block pos:line="13" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">memFree<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">ctrl_dat<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">MEM_DREAD_CTRL<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">PROF_start<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">diskHandleRead<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">WRITES_MAINTAIN_DISK_OFFSET<pos:position pos:line="20" pos:column="32"/></name></expr></cpp:if>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">F<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">disk<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">.<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">offset<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">!=<pos:position pos:line="21" pos:column="26"/></operator> <name><name pos:line="21" pos:column="27">ctrl_dat<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">-&gt;<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="37">offset<pos:position pos:line="21" pos:column="43"/></name></name></expr>)<pos:position pos:line="21" pos:column="44"/></condition><then pos:line="21" pos:column="44"> <block pos:line="21" pos:column="45">{
<cpp:else pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">else<pos:position pos:line="22" pos:column="6"/></cpp:directive></cpp:else>
    <block pos:line="23" pos:column="5">{
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">6<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="19">3<pos:position pos:line="25" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="22">"diskHandleRead: FD "<pos:position pos:line="25" pos:column="43"/></literal> <operator pos:line="25" pos:column="44">&lt;&lt;<pos:position pos:line="25" pos:column="52"/></operator> <name pos:line="25" pos:column="47">fd<pos:position pos:line="25" pos:column="49"/></name> <operator pos:line="25" pos:column="50">&lt;&lt;<pos:position pos:line="25" pos:column="58"/></operator> <literal type="string" pos:line="25" pos:column="53">" seeking to offset "<pos:position pos:line="25" pos:column="74"/></literal> <operator pos:line="25" pos:column="75">&lt;&lt;<pos:position pos:line="25" pos:column="83"/></operator> <name><name pos:line="25" pos:column="78">ctrl_dat<pos:position pos:line="25" pos:column="86"/></name><operator pos:line="25" pos:column="86">-&gt;<pos:position pos:line="25" pos:column="91"/></operator><name pos:line="25" pos:column="88">offset<pos:position pos:line="25" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="96"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">lseek<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><name pos:line="26" pos:column="15">fd<pos:position pos:line="26" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="19">ctrl_dat<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">offset<pos:position pos:line="26" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="37">SEEK_SET<pos:position pos:line="26" pos:column="45"/></name></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt>	<comment type="block" pos:line="26" pos:column="49">/* XXX ignore return? */</comment>
        <expr_stmt><expr><operator pos:line="27" pos:column="9">++<pos:position pos:line="27" pos:column="11"/></operator> <name><name pos:line="27" pos:column="12">statCounter<pos:position pos:line="27" pos:column="23"/></name><operator pos:line="27" pos:column="23">.<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">syscalls<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">.<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="33">disk<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">.<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="38">seeks<pos:position pos:line="27" pos:column="43"/></name></name></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">F<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">disk<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">.<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">offset<pos:position pos:line="28" pos:column="23"/></name></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <name><name pos:line="28" pos:column="26">ctrl_dat<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">-&gt;<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="36">offset<pos:position pos:line="28" pos:column="42"/></name></name></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block>

    <expr_stmt><expr><name pos:line="31" pos:column="5">errno<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">=<pos:position pos:line="31" pos:column="12"/></operator> <literal type="number" pos:line="31" pos:column="13">0<pos:position pos:line="31" pos:column="14"/></literal></expr>;<pos:position pos:line="31" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">len<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">FD_READ_METHOD<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">fd<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="30">ctrl_dat<pos:position pos:line="32" pos:column="38"/></name><operator pos:line="32" pos:column="38">-&gt;<pos:position pos:line="32" pos:column="43"/></operator><name pos:line="32" pos:column="40">buf<pos:position pos:line="32" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="45">ctrl_dat<pos:position pos:line="32" pos:column="53"/></name><operator pos:line="32" pos:column="53">-&gt;<pos:position pos:line="32" pos:column="58"/></operator><name pos:line="32" pos:column="55">req_len<pos:position pos:line="32" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="64"/></expr_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">len<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">&gt;<pos:position pos:line="34" pos:column="17"/></operator> <literal type="number" pos:line="34" pos:column="15">0<pos:position pos:line="34" pos:column="16"/></literal></expr>)<pos:position pos:line="34" pos:column="17"/></condition><then pos:line="34" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="35" pos:column="9">F<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">-&gt;<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="12">disk<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">.<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="17">offset<pos:position pos:line="35" pos:column="23"/></name></name> <operator pos:line="35" pos:column="24">+=<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">len<pos:position pos:line="35" pos:column="30"/></name></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt></block></then></if>

    <expr_stmt><expr><operator pos:line="37" pos:column="5">++<pos:position pos:line="37" pos:column="7"/></operator> <name><name pos:line="37" pos:column="8">statCounter<pos:position pos:line="37" pos:column="19"/></name><operator pos:line="37" pos:column="19">.<pos:position pos:line="37" pos:column="20"/></operator><name pos:line="37" pos:column="20">syscalls<pos:position pos:line="37" pos:column="28"/></name><operator pos:line="37" pos:column="28">.<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="29">disk<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">.<pos:position pos:line="37" pos:column="34"/></operator><name pos:line="37" pos:column="34">reads<pos:position pos:line="37" pos:column="39"/></name></name></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="39" pos:column="5">fd_bytes<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><name pos:line="39" pos:column="14">fd<pos:position pos:line="39" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="18">len<pos:position pos:line="39" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="23">FD_READ<pos:position pos:line="39" pos:column="30"/></name></expr></argument>)<pos:position pos:line="39" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="32"/></expr_stmt>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">len<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">&lt;<pos:position pos:line="41" pos:column="17"/></operator> <literal type="number" pos:line="41" pos:column="15">0<pos:position pos:line="41" pos:column="16"/></literal></expr>)<pos:position pos:line="41" pos:column="17"/></condition><then pos:line="41" pos:column="17"> <block pos:line="41" pos:column="18">{
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><call><name pos:line="42" pos:column="13">ignoreErrno<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">errno<pos:position pos:line="42" pos:column="30"/></name></expr></argument>)<pos:position pos:line="42" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="32"/></condition><then pos:line="42" pos:column="32"> <block pos:line="42" pos:column="33">{
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">Comm<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">::<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">SetSelect<pos:position pos:line="43" pos:column="28"/></name></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">fd<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="33">COMM_SELECT_READ<pos:position pos:line="43" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="51">diskHandleRead<pos:position pos:line="43" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="67">ctrl_dat<pos:position pos:line="43" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="77">0<pos:position pos:line="43" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="80"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">PROF_stop<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><name pos:line="44" pos:column="23">diskHandleRead<pos:position pos:line="44" pos:column="37"/></name></expr></argument>)<pos:position pos:line="44" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>
            <return pos:line="45" pos:column="13">return;<pos:position pos:line="45" pos:column="20"/></return>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="48" pos:column="9">debugs<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><literal type="number" pos:line="48" pos:column="16">50<pos:position pos:line="48" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="20">DBG_IMPORTANT<pos:position pos:line="48" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="35">"diskHandleRead: FD "<pos:position pos:line="48" pos:column="56"/></literal> <operator pos:line="48" pos:column="57">&lt;&lt;<pos:position pos:line="48" pos:column="65"/></operator> <name pos:line="48" pos:column="60">fd<pos:position pos:line="48" pos:column="62"/></name> <operator pos:line="48" pos:column="63">&lt;&lt;<pos:position pos:line="48" pos:column="71"/></operator> <literal type="string" pos:line="48" pos:column="66">": "<pos:position pos:line="48" pos:column="70"/></literal> <operator pos:line="48" pos:column="71">&lt;&lt;<pos:position pos:line="48" pos:column="79"/></operator> <call><name pos:line="48" pos:column="74">xstrerror<pos:position pos:line="48" pos:column="83"/></name><argument_list pos:line="48" pos:column="83">()<pos:position pos:line="48" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="87"/></expr_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">len<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <literal type="number" pos:line="49" pos:column="15">0<pos:position pos:line="49" pos:column="16"/></literal></expr>;<pos:position pos:line="49" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="50" pos:column="9">rc<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <name pos:line="50" pos:column="14">DISK_ERROR<pos:position pos:line="50" pos:column="24"/></name></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then> <elseif pos:line="51" pos:column="7">else <if pos:line="51" pos:column="12">if <condition pos:line="51" pos:column="15">(<expr><name pos:line="51" pos:column="16">len<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">==<pos:position pos:line="51" pos:column="22"/></operator> <literal type="number" pos:line="51" pos:column="23">0<pos:position pos:line="51" pos:column="24"/></literal></expr>)<pos:position pos:line="51" pos:column="25"/></condition><then pos:line="51" pos:column="25"> <block pos:line="51" pos:column="26">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">rc<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <name pos:line="52" pos:column="14">DISK_EOF<pos:position pos:line="52" pos:column="22"/></name></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><call><name pos:line="55" pos:column="9">cbdataReferenceValid<pos:position pos:line="55" pos:column="29"/></name><argument_list pos:line="55" pos:column="29">(<argument><expr><name><name pos:line="55" pos:column="30">ctrl_dat<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">-&gt;<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="40">client_data<pos:position pos:line="55" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="53"/></condition><then pos:line="55" pos:column="53">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="56" pos:column="9">ctrl_dat<pos:position pos:line="56" pos:column="17"/></name><operator pos:line="56" pos:column="17">-&gt;<pos:position pos:line="56" pos:column="22"/></operator><name pos:line="56" pos:column="19">handler<pos:position pos:line="56" pos:column="26"/></name></name><argument_list pos:line="56" pos:column="26">(<argument><expr><name pos:line="56" pos:column="27">fd<pos:position pos:line="56" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="31">ctrl_dat<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">-&gt;<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="41">buf<pos:position pos:line="56" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="46">len<pos:position pos:line="56" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="51">rc<pos:position pos:line="56" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="55">ctrl_dat<pos:position pos:line="56" pos:column="63"/></name><operator pos:line="56" pos:column="63">-&gt;<pos:position pos:line="56" pos:column="68"/></operator><name pos:line="56" pos:column="65">client_data<pos:position pos:line="56" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="78"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">cbdataReferenceDone<pos:position pos:line="58" pos:column="24"/></name><argument_list pos:line="58" pos:column="24">(<argument><expr><name><name pos:line="58" pos:column="25">ctrl_dat<pos:position pos:line="58" pos:column="33"/></name><operator pos:line="58" pos:column="33">-&gt;<pos:position pos:line="58" pos:column="38"/></operator><name pos:line="58" pos:column="35">client_data<pos:position pos:line="58" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">memFree<pos:position pos:line="60" pos:column="12"/></name><argument_list pos:line="60" pos:column="12">(<argument><expr><name pos:line="60" pos:column="13">ctrl_dat<pos:position pos:line="60" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="23">MEM_DREAD_CTRL<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">PROF_stop<pos:position pos:line="62" pos:column="14"/></name><argument_list pos:line="62" pos:column="14">(<argument><expr><name pos:line="62" pos:column="15">diskHandleRead<pos:position pos:line="62" pos:column="29"/></name></expr></argument>)<pos:position pos:line="62" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="31"/></expr_stmt>
}<pos:position pos:line="63" pos:column="2"/></block></then></if>

<comment type="block" pos:line="65" pos:column="1">/* start read operation */</comment>
<comment type="block" pos:line="66" pos:column="1">/* buffer must be allocated from the caller.
 * It must have at least req_len space in there.
 * call handler when a reading is complete. */</comment>
<function><type><name pos:line="69" pos:column="1">void<pos:position pos:line="69" pos:column="5"/></name></type>
<name pos:line="70" pos:column="1">file_read<pos:position pos:line="70" pos:column="10"/></name><parameter_list pos:line="70" pos:column="10">(<parameter><decl><type><name pos:line="70" pos:column="11">int<pos:position pos:line="70" pos:column="14"/></name></type> <name pos:line="70" pos:column="15">fd<pos:position pos:line="70" pos:column="17"/></name></decl></parameter>, <parameter><decl><type><name pos:line="70" pos:column="19">char<pos:position pos:line="70" pos:column="23"/></name> <modifier pos:line="70" pos:column="24">*<pos:position pos:line="70" pos:column="25"/></modifier></type><name pos:line="70" pos:column="25">buf<pos:position pos:line="70" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="70" pos:column="30">int<pos:position pos:line="70" pos:column="33"/></name></type> <name pos:line="70" pos:column="34">req_len<pos:position pos:line="70" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="70" pos:column="43">off_t<pos:position pos:line="70" pos:column="48"/></name></type> <name pos:line="70" pos:column="49">offset<pos:position pos:line="70" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="70" pos:column="57">DRCB<pos:position pos:line="70" pos:column="61"/></name> <modifier pos:line="70" pos:column="62">*<pos:position pos:line="70" pos:column="63"/></modifier></type> <name pos:line="70" pos:column="64">handler<pos:position pos:line="70" pos:column="71"/></name></decl></parameter>, <parameter><decl><type><name pos:line="70" pos:column="73">void<pos:position pos:line="70" pos:column="77"/></name> <modifier pos:line="70" pos:column="78">*<pos:position pos:line="70" pos:column="79"/></modifier></type><name pos:line="70" pos:column="79">client_data<pos:position pos:line="70" pos:column="90"/></name></decl></parameter>)<pos:position pos:line="70" pos:column="91"/></parameter_list>
<block pos:line="71" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="72" pos:column="5">dread_ctrl<pos:position pos:line="72" pos:column="15"/></name> <modifier pos:line="72" pos:column="16">*<pos:position pos:line="72" pos:column="17"/></modifier></type><name pos:line="72" pos:column="17">ctrl_dat<pos:position pos:line="72" pos:column="25"/></name></decl>;<pos:position pos:line="72" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">PROF_start<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><name pos:line="73" pos:column="16">file_read<pos:position pos:line="73" pos:column="25"/></name></expr></argument>)<pos:position pos:line="73" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">assert<pos:position pos:line="74" pos:column="11"/></name><argument_list pos:line="74" pos:column="11">(<argument><expr><name pos:line="74" pos:column="12">fd<pos:position pos:line="74" pos:column="14"/></name> <operator pos:line="74" pos:column="15">&gt;=<pos:position pos:line="74" pos:column="20"/></operator> <literal type="number" pos:line="74" pos:column="18">0<pos:position pos:line="74" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="75" pos:column="5">ctrl_dat<pos:position pos:line="75" pos:column="13"/></name> <operator pos:line="75" pos:column="14">=<pos:position pos:line="75" pos:column="15"/></operator> <operator pos:line="75" pos:column="16">(<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="17">dread_ctrl<pos:position pos:line="75" pos:column="27"/></name> <operator pos:line="75" pos:column="28">*<pos:position pos:line="75" pos:column="29"/></operator><operator pos:line="75" pos:column="29">)<pos:position pos:line="75" pos:column="30"/></operator><call><name pos:line="75" pos:column="30">memAllocate<pos:position pos:line="75" pos:column="41"/></name><argument_list pos:line="75" pos:column="41">(<argument><expr><name pos:line="75" pos:column="42">MEM_DREAD_CTRL<pos:position pos:line="75" pos:column="56"/></name></expr></argument>)<pos:position pos:line="75" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="76" pos:column="5">ctrl_dat<pos:position pos:line="76" pos:column="13"/></name><operator pos:line="76" pos:column="13">-&gt;<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="15">fd<pos:position pos:line="76" pos:column="17"/></name></name> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <name pos:line="76" pos:column="20">fd<pos:position pos:line="76" pos:column="22"/></name></expr>;<pos:position pos:line="76" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="77" pos:column="5">ctrl_dat<pos:position pos:line="77" pos:column="13"/></name><operator pos:line="77" pos:column="13">-&gt;<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="15">offset<pos:position pos:line="77" pos:column="21"/></name></name> <operator pos:line="77" pos:column="22">=<pos:position pos:line="77" pos:column="23"/></operator> <name pos:line="77" pos:column="24">offset<pos:position pos:line="77" pos:column="30"/></name></expr>;<pos:position pos:line="77" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="78" pos:column="5">ctrl_dat<pos:position pos:line="78" pos:column="13"/></name><operator pos:line="78" pos:column="13">-&gt;<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="15">req_len<pos:position pos:line="78" pos:column="22"/></name></name> <operator pos:line="78" pos:column="23">=<pos:position pos:line="78" pos:column="24"/></operator> <name pos:line="78" pos:column="25">req_len<pos:position pos:line="78" pos:column="32"/></name></expr>;<pos:position pos:line="78" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="79" pos:column="5">ctrl_dat<pos:position pos:line="79" pos:column="13"/></name><operator pos:line="79" pos:column="13">-&gt;<pos:position pos:line="79" pos:column="18"/></operator><name pos:line="79" pos:column="15">buf<pos:position pos:line="79" pos:column="18"/></name></name> <operator pos:line="79" pos:column="19">=<pos:position pos:line="79" pos:column="20"/></operator> <name pos:line="79" pos:column="21">buf<pos:position pos:line="79" pos:column="24"/></name></expr>;<pos:position pos:line="79" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="80" pos:column="5">ctrl_dat<pos:position pos:line="80" pos:column="13"/></name><operator pos:line="80" pos:column="13">-&gt;<pos:position pos:line="80" pos:column="18"/></operator><name pos:line="80" pos:column="15">end_of_file<pos:position pos:line="80" pos:column="26"/></name></name> <operator pos:line="80" pos:column="27">=<pos:position pos:line="80" pos:column="28"/></operator> <literal type="number" pos:line="80" pos:column="29">0<pos:position pos:line="80" pos:column="30"/></literal></expr>;<pos:position pos:line="80" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="81" pos:column="5">ctrl_dat<pos:position pos:line="81" pos:column="13"/></name><operator pos:line="81" pos:column="13">-&gt;<pos:position pos:line="81" pos:column="18"/></operator><name pos:line="81" pos:column="15">handler<pos:position pos:line="81" pos:column="22"/></name></name> <operator pos:line="81" pos:column="23">=<pos:position pos:line="81" pos:column="24"/></operator> <name pos:line="81" pos:column="25">handler<pos:position pos:line="81" pos:column="32"/></name></expr>;<pos:position pos:line="81" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="82" pos:column="5">ctrl_dat<pos:position pos:line="82" pos:column="13"/></name><operator pos:line="82" pos:column="13">-&gt;<pos:position pos:line="82" pos:column="18"/></operator><name pos:line="82" pos:column="15">client_data<pos:position pos:line="82" pos:column="26"/></name></name> <operator pos:line="82" pos:column="27">=<pos:position pos:line="82" pos:column="28"/></operator> <call><name pos:line="82" pos:column="29">cbdataReference<pos:position pos:line="82" pos:column="44"/></name><argument_list pos:line="82" pos:column="44">(<argument><expr><name pos:line="82" pos:column="45">client_data<pos:position pos:line="82" pos:column="56"/></name></expr></argument>)<pos:position pos:line="82" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">diskHandleRead<pos:position pos:line="83" pos:column="19"/></name><argument_list pos:line="83" pos:column="19">(<argument><expr><name pos:line="83" pos:column="20">fd<pos:position pos:line="83" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="24">ctrl_dat<pos:position pos:line="83" pos:column="32"/></name></expr></argument>)<pos:position pos:line="83" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">PROF_stop<pos:position pos:line="84" pos:column="14"/></name><argument_list pos:line="84" pos:column="14">(<argument><expr><name pos:line="84" pos:column="15">file_read<pos:position pos:line="84" pos:column="24"/></name></expr></argument>)<pos:position pos:line="84" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="26"/></expr_stmt>
}<pos:position pos:line="85" pos:column="2"/></block></function>

<function><type><name pos:line="87" pos:column="1">void<pos:position pos:line="87" pos:column="5"/></name></type>
<name pos:line="88" pos:column="1">safeunlink<pos:position pos:line="88" pos:column="11"/></name><parameter_list pos:line="88" pos:column="11">(<parameter><decl><type><specifier pos:line="88" pos:column="12">const<pos:position pos:line="88" pos:column="17"/></specifier> <name pos:line="88" pos:column="18">char<pos:position pos:line="88" pos:column="22"/></name> <modifier pos:line="88" pos:column="23">*<pos:position pos:line="88" pos:column="24"/></modifier></type><name pos:line="88" pos:column="24">s<pos:position pos:line="88" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="88" pos:column="27">int<pos:position pos:line="88" pos:column="30"/></name></type> <name pos:line="88" pos:column="31">quiet<pos:position pos:line="88" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="88" pos:column="37"/></parameter_list>
<block pos:line="89" pos:column="1">{
    <expr_stmt><expr><operator pos:line="90" pos:column="5">++<pos:position pos:line="90" pos:column="7"/></operator> <name><name pos:line="90" pos:column="8">statCounter<pos:position pos:line="90" pos:column="19"/></name><operator pos:line="90" pos:column="19">.<pos:position pos:line="90" pos:column="20"/></operator><name pos:line="90" pos:column="20">syscalls<pos:position pos:line="90" pos:column="28"/></name><operator pos:line="90" pos:column="28">.<pos:position pos:line="90" pos:column="29"/></operator><name pos:line="90" pos:column="29">disk<pos:position pos:line="90" pos:column="33"/></name><operator pos:line="90" pos:column="33">.<pos:position pos:line="90" pos:column="34"/></operator><name pos:line="90" pos:column="34">unlinks<pos:position pos:line="90" pos:column="41"/></name></name></expr>;<pos:position pos:line="90" pos:column="42"/></expr_stmt>

    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><call><name pos:line="92" pos:column="9">unlink<pos:position pos:line="92" pos:column="15"/></name><argument_list pos:line="92" pos:column="15">(<argument><expr><name pos:line="92" pos:column="16">s<pos:position pos:line="92" pos:column="17"/></name></expr></argument>)<pos:position pos:line="92" pos:column="18"/></argument_list></call> <operator pos:line="92" pos:column="19">&lt;<pos:position pos:line="92" pos:column="23"/></operator> <literal type="number" pos:line="92" pos:column="21">0<pos:position pos:line="92" pos:column="22"/></literal> <operator pos:line="92" pos:column="23">&amp;&amp;<pos:position pos:line="92" pos:column="33"/></operator> <operator pos:line="92" pos:column="26">!<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="27">quiet<pos:position pos:line="92" pos:column="32"/></name></expr>)<pos:position pos:line="92" pos:column="33"/></condition><then pos:line="92" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="9">debugs<pos:position pos:line="93" pos:column="15"/></name><argument_list pos:line="93" pos:column="15">(<argument><expr><literal type="number" pos:line="93" pos:column="16">50<pos:position pos:line="93" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="20">DBG_IMPORTANT<pos:position pos:line="93" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="35">"safeunlink: Couldn't delete "<pos:position pos:line="93" pos:column="65"/></literal> <operator pos:line="93" pos:column="66">&lt;&lt;<pos:position pos:line="93" pos:column="74"/></operator> <name pos:line="93" pos:column="69">s<pos:position pos:line="93" pos:column="70"/></name> <operator pos:line="93" pos:column="71">&lt;&lt;<pos:position pos:line="93" pos:column="79"/></operator> <literal type="string" pos:line="93" pos:column="74">": "<pos:position pos:line="93" pos:column="78"/></literal> <operator pos:line="93" pos:column="79">&lt;&lt;<pos:position pos:line="93" pos:column="87"/></operator> <call><name pos:line="93" pos:column="82">xstrerror<pos:position pos:line="93" pos:column="91"/></name><argument_list pos:line="93" pos:column="91">()<pos:position pos:line="93" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="93" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="95"/></expr_stmt></block></then></if>
}<pos:position pos:line="94" pos:column="2"/></block></function>

<comment type="block" pos:line="96" pos:column="1">/*
 * Same as rename(2) but complains if something goes wrong;
 * the caller is responsible for handing and explaining the
 * consequences of errors.
 */</comment>
<function><type><name pos:line="101" pos:column="1">int<pos:position pos:line="101" pos:column="4"/></name></type>
<name pos:line="102" pos:column="1">xrename<pos:position pos:line="102" pos:column="8"/></name><parameter_list pos:line="102" pos:column="8">(<parameter><decl><type><specifier pos:line="102" pos:column="9">const<pos:position pos:line="102" pos:column="14"/></specifier> <name pos:line="102" pos:column="15">char<pos:position pos:line="102" pos:column="19"/></name> <modifier pos:line="102" pos:column="20">*<pos:position pos:line="102" pos:column="21"/></modifier></type><name pos:line="102" pos:column="21">from<pos:position pos:line="102" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="102" pos:column="27">const<pos:position pos:line="102" pos:column="32"/></specifier> <name pos:line="102" pos:column="33">char<pos:position pos:line="102" pos:column="37"/></name> <modifier pos:line="102" pos:column="38">*<pos:position pos:line="102" pos:column="39"/></modifier></type><name pos:line="102" pos:column="39">to<pos:position pos:line="102" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="102" pos:column="42"/></parameter_list>
<block pos:line="103" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">debugs<pos:position pos:line="104" pos:column="11"/></name><argument_list pos:line="104" pos:column="11">(<argument><expr><literal type="number" pos:line="104" pos:column="12">21<pos:position pos:line="104" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="104" pos:column="16">2<pos:position pos:line="104" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="19">"xrename: renaming "<pos:position pos:line="104" pos:column="39"/></literal> <operator pos:line="104" pos:column="40">&lt;&lt;<pos:position pos:line="104" pos:column="48"/></operator> <name pos:line="104" pos:column="43">from<pos:position pos:line="104" pos:column="47"/></name> <operator pos:line="104" pos:column="48">&lt;&lt;<pos:position pos:line="104" pos:column="56"/></operator> <literal type="string" pos:line="104" pos:column="51">" to "<pos:position pos:line="104" pos:column="57"/></literal> <operator pos:line="104" pos:column="58">&lt;&lt;<pos:position pos:line="104" pos:column="66"/></operator> <name pos:line="104" pos:column="61">to<pos:position pos:line="104" pos:column="63"/></name></expr></argument>)<pos:position pos:line="104" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="65"/></expr_stmt>
<cpp:if pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">if<pos:position pos:line="105" pos:column="4"/></cpp:directive> <expr><name pos:line="105" pos:column="5">_SQUID_OS2_<pos:position pos:line="105" pos:column="16"/></name> <operator pos:line="105" pos:column="17">||<pos:position pos:line="105" pos:column="19"/></operator> <name pos:line="105" pos:column="20">_SQUID_WINDOWS_<pos:position pos:line="105" pos:column="35"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="106" pos:column="5">remove<pos:position pos:line="106" pos:column="11"/></name><argument_list pos:line="106" pos:column="11">(<argument><expr><name pos:line="106" pos:column="12">to<pos:position pos:line="106" pos:column="14"/></name></expr></argument>)<pos:position pos:line="106" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">endif<pos:position pos:line="107" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="109" pos:column="5">if <condition pos:line="109" pos:column="8">(<expr><literal type="number" pos:line="109" pos:column="9">0<pos:position pos:line="109" pos:column="10"/></literal> <operator pos:line="109" pos:column="11">==<pos:position pos:line="109" pos:column="13"/></operator> <call><name pos:line="109" pos:column="14">rename<pos:position pos:line="109" pos:column="20"/></name><argument_list pos:line="109" pos:column="20">(<argument><expr><name pos:line="109" pos:column="21">from<pos:position pos:line="109" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="27">to<pos:position pos:line="109" pos:column="29"/></name></expr></argument>)<pos:position pos:line="109" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="31"/></condition><then pos:line="109" pos:column="31">
        <block type="pseudo"><return pos:line="110" pos:column="9">return <expr><literal type="number" pos:line="110" pos:column="16">0<pos:position pos:line="110" pos:column="17"/></literal></expr>;<pos:position pos:line="110" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="112" pos:column="5">debugs<pos:position pos:line="112" pos:column="11"/></name><argument_list pos:line="112" pos:column="11">(<argument><expr><literal type="number" pos:line="112" pos:column="12">21<pos:position pos:line="112" pos:column="14"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="112" pos:column="16">errno<pos:position pos:line="112" pos:column="21"/></name> <operator pos:line="112" pos:column="22">==<pos:position pos:line="112" pos:column="24"/></operator> <name pos:line="112" pos:column="25">ENOENT<pos:position pos:line="112" pos:column="31"/></name></expr> ?<pos:position pos:line="112" pos:column="33"/></condition><then pos:line="112" pos:column="33"> <expr><literal type="number" pos:line="112" pos:column="34">2<pos:position pos:line="112" pos:column="35"/></literal></expr> <pos:position pos:line="112" pos:column="36"/></then><else pos:line="112" pos:column="36">: <expr><literal type="number" pos:line="112" pos:column="38">1<pos:position pos:line="112" pos:column="39"/></literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="41">"xrename: Cannot rename "<pos:position pos:line="112" pos:column="66"/></literal> <operator pos:line="112" pos:column="67">&lt;&lt;<pos:position pos:line="112" pos:column="75"/></operator> <name pos:line="112" pos:column="70">from<pos:position pos:line="112" pos:column="74"/></name> <operator pos:line="112" pos:column="75">&lt;&lt;<pos:position pos:line="112" pos:column="83"/></operator> <literal type="string" pos:line="112" pos:column="78">" to "<pos:position pos:line="112" pos:column="84"/></literal> <operator pos:line="112" pos:column="85">&lt;&lt;<pos:position pos:line="112" pos:column="93"/></operator> <name pos:line="112" pos:column="88">to<pos:position pos:line="112" pos:column="90"/></name> <operator pos:line="112" pos:column="91">&lt;&lt;<pos:position pos:line="112" pos:column="99"/></operator> <literal type="string" pos:line="112" pos:column="94">": "<pos:position pos:line="112" pos:column="98"/></literal> <operator pos:line="112" pos:column="99">&lt;&lt;<pos:position pos:line="112" pos:column="107"/></operator> <call><name pos:line="112" pos:column="102">xstrerror<pos:position pos:line="112" pos:column="111"/></name><argument_list pos:line="112" pos:column="111">()<pos:position pos:line="112" pos:column="113"/></argument_list></call></expr></argument>)<pos:position pos:line="112" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="115"/></expr_stmt>

    <return pos:line="114" pos:column="5">return <expr><operator pos:line="114" pos:column="12">-<pos:position pos:line="114" pos:column="13"/></operator><literal type="number" pos:line="114" pos:column="13">1<pos:position pos:line="114" pos:column="14"/></literal></expr>;<pos:position pos:line="114" pos:column="15"/></return>
}<pos:position pos:line="115" pos:column="2"/></block></function></block></function></unit>
