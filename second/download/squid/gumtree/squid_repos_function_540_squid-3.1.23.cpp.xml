<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_540_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">asn_parse_int<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">u_char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type> <name pos:line="2" pos:column="24">data<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">datalength<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>,
              <parameter><decl><type><name pos:line="3" pos:column="15">u_char<pos:position pos:line="3" pos:column="21"/></name> <modifier pos:line="3" pos:column="22">*<pos:position pos:line="3" pos:column="23"/></modifier></type> <name pos:line="3" pos:column="24">type<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="30">int<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">intp<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="41">int<pos:position pos:line="3" pos:column="44"/></name></type> <name pos:line="3" pos:column="45">intsize<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="53"/></parameter_list>
<comment type="block" pos:line="4" pos:column="1">/*    u_char *data;        IN     - pointer to start of object */</comment>
<comment type="block" pos:line="5" pos:column="1">/*    int    *datalength;  IN/OUT - # of valid bytes left in buffer */</comment>
<comment type="block" pos:line="6" pos:column="1">/*    u_char *type;        OUT    - asn type of object */</comment>
<comment type="block" pos:line="7" pos:column="1">/*    int   *intp;         IN/OUT - pointer to start of output buffer */</comment>
<comment type="block" pos:line="8" pos:column="1">/*    int     intsize;     IN     - size of output buffer */</comment>
<block pos:line="9" pos:column="1">{
    <comment type="block" pos:line="10" pos:column="5">/*
     * ASN.1 integer ::= 0x02 asnlength byte {byte}*
     */</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">u_char<pos:position pos:line="13" pos:column="11"/></name> <modifier pos:line="13" pos:column="12">*<pos:position pos:line="13" pos:column="13"/></modifier></type><name pos:line="13" pos:column="13">bufp<pos:position pos:line="13" pos:column="17"/></name> <init pos:line="13" pos:column="18">= <expr><name pos:line="13" pos:column="20">data<pos:position pos:line="13" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">u_int<pos:position pos:line="14" pos:column="10"/></name></type> <name pos:line="14" pos:column="11">asn_length<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">value<pos:position pos:line="15" pos:column="14"/></name> <init pos:line="15" pos:column="15">= <expr><literal type="number" pos:line="15" pos:column="17">0<pos:position pos:line="15" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="17" pos:column="5">/* Room to store int? */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">intsize<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">!=<pos:position pos:line="18" pos:column="19"/></operator> <sizeof pos:line="18" pos:column="20">sizeof<argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">int<pos:position pos:line="18" pos:column="30"/></name></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></sizeof></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <block pos:line="18" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">snmp_set_api_error<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">SNMPERR_ASN_DECODE<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><operator pos:line="20" pos:column="16">(<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">NULL<pos:position pos:line="20" pos:column="21"/></name><operator pos:line="20" pos:column="21">)<pos:position pos:line="20" pos:column="22"/></operator></expr>;<pos:position pos:line="20" pos:column="23"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="22" pos:column="5">/* Type */</comment>
    <expr_stmt><expr><operator pos:line="23" pos:column="5">*<pos:position pos:line="23" pos:column="6"/></operator><name pos:line="23" pos:column="6">type<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">=<pos:position pos:line="23" pos:column="12"/></operator> <operator pos:line="23" pos:column="13">*<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">bufp<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">++<pos:position pos:line="23" pos:column="20"/></operator></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* Extract length */</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">bufp<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">=<pos:position pos:line="26" pos:column="11"/></operator> <call><name pos:line="26" pos:column="12">asn_parse_length<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><name pos:line="26" pos:column="29">bufp<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="36">asn_length<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">bufp<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">==<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">NULL<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22">
        <block type="pseudo"><return pos:line="28" pos:column="9">return <expr><operator pos:line="28" pos:column="16">(<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">NULL<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">)<pos:position pos:line="28" pos:column="22"/></operator></expr>;<pos:position pos:line="28" pos:column="23"/></return></block></then></if>

    <comment type="block" pos:line="30" pos:column="5">/* Make sure the entire int is in the buffer */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">asn_length<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">+<pos:position pos:line="31" pos:column="21"/></operator> <operator pos:line="31" pos:column="22">(<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">bufp<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">-<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">data<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">)<pos:position pos:line="31" pos:column="35"/></operator> <operator pos:line="31" pos:column="36">&gt;<pos:position pos:line="31" pos:column="40"/></operator> <operator pos:line="31" pos:column="38">*<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="39">datalength<pos:position pos:line="31" pos:column="49"/></name></expr>)<pos:position pos:line="31" pos:column="50"/></condition><then pos:line="31" pos:column="50"> <block pos:line="31" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">snmp_set_api_error<pos:position pos:line="32" pos:column="27"/></name><argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">SNMPERR_ASN_DECODE<pos:position pos:line="32" pos:column="46"/></name></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><operator pos:line="33" pos:column="16">(<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="17">NULL<pos:position pos:line="33" pos:column="21"/></name><operator pos:line="33" pos:column="21">)<pos:position pos:line="33" pos:column="22"/></operator></expr>;<pos:position pos:line="33" pos:column="23"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="35" pos:column="5">/* Can we store this int? */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">asn_length<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">&gt;<pos:position pos:line="36" pos:column="24"/></operator> <name pos:line="36" pos:column="22">intsize<pos:position pos:line="36" pos:column="29"/></name></expr>)<pos:position pos:line="36" pos:column="30"/></condition><then pos:line="36" pos:column="30"> <block pos:line="36" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">snmp_set_api_error<pos:position pos:line="37" pos:column="27"/></name><argument_list pos:line="37" pos:column="27">(<argument><expr><name pos:line="37" pos:column="28">SNMPERR_ASN_DECODE<pos:position pos:line="37" pos:column="46"/></name></expr></argument>)<pos:position pos:line="37" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>
        <return pos:line="38" pos:column="9">return <expr><operator pos:line="38" pos:column="16">(<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">NULL<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">)<pos:position pos:line="38" pos:column="22"/></operator></expr>;<pos:position pos:line="38" pos:column="23"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="40" pos:column="5">/* Remaining data */</comment>
    <expr_stmt><expr><operator pos:line="41" pos:column="5">*<pos:position pos:line="41" pos:column="6"/></operator><name pos:line="41" pos:column="6">datalength<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">-=<pos:position pos:line="41" pos:column="19"/></operator> <operator pos:line="41" pos:column="20">(<pos:position pos:line="41" pos:column="21"/></operator><name pos:line="41" pos:column="21">int<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">)<pos:position pos:line="41" pos:column="25"/></operator> <name pos:line="41" pos:column="26">asn_length<pos:position pos:line="41" pos:column="36"/></name> <operator pos:line="41" pos:column="37">+<pos:position pos:line="41" pos:column="38"/></operator> <operator pos:line="41" pos:column="39">(<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="40">bufp<pos:position pos:line="41" pos:column="44"/></name> <operator pos:line="41" pos:column="45">-<pos:position pos:line="41" pos:column="46"/></operator> <name pos:line="41" pos:column="47">data<pos:position pos:line="41" pos:column="51"/></name><operator pos:line="41" pos:column="51">)<pos:position pos:line="41" pos:column="52"/></operator></expr>;<pos:position pos:line="41" pos:column="53"/></expr_stmt>

    <comment type="block" pos:line="43" pos:column="5">/* Is the int negative? */</comment>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><operator pos:line="44" pos:column="9">*<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">bufp<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">&amp;<pos:position pos:line="44" pos:column="20"/></operator> <literal type="number" pos:line="44" pos:column="17">0x80<pos:position pos:line="44" pos:column="21"/></literal></expr>)<pos:position pos:line="44" pos:column="22"/></condition><then pos:line="44" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="9">value<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">=<pos:position pos:line="45" pos:column="16"/></operator> <operator pos:line="45" pos:column="17">-<pos:position pos:line="45" pos:column="18"/></operator><literal type="number" pos:line="45" pos:column="18">1<pos:position pos:line="45" pos:column="19"/></literal></expr>;<pos:position pos:line="45" pos:column="20"/></expr_stmt></block></then></if>		<comment type="block" pos:line="45" pos:column="33">/* integer is negative */</comment>

    <comment type="block" pos:line="47" pos:column="5">/* Extract the bytes */</comment>
    <while pos:line="48" pos:column="5">while <condition pos:line="48" pos:column="11">(<expr><name pos:line="48" pos:column="12">asn_length<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">--<pos:position pos:line="48" pos:column="24"/></operator></expr>)<pos:position pos:line="48" pos:column="25"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="9">value<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <operator pos:line="49" pos:column="17">(<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">value<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">&lt;&lt;<pos:position pos:line="49" pos:column="32"/></operator> <literal type="number" pos:line="49" pos:column="27">8<pos:position pos:line="49" pos:column="28"/></literal><operator pos:line="49" pos:column="28">)<pos:position pos:line="49" pos:column="29"/></operator> <operator pos:line="49" pos:column="30">|<pos:position pos:line="49" pos:column="31"/></operator> <operator pos:line="49" pos:column="32">*<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="33">bufp<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">++<pos:position pos:line="49" pos:column="39"/></operator></expr>;<pos:position pos:line="49" pos:column="40"/></expr_stmt></block></while>

    <comment type="block" pos:line="51" pos:column="5">/* That's it! */</comment>
    <expr_stmt><expr><operator pos:line="52" pos:column="5">*<pos:position pos:line="52" pos:column="6"/></operator><name pos:line="52" pos:column="6">intp<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <name pos:line="52" pos:column="13">value<pos:position pos:line="52" pos:column="18"/></name></expr>;<pos:position pos:line="52" pos:column="19"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><operator pos:line="53" pos:column="12">(<pos:position pos:line="53" pos:column="13"/></operator><name pos:line="53" pos:column="13">bufp<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">)<pos:position pos:line="53" pos:column="18"/></operator></expr>;<pos:position pos:line="53" pos:column="19"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
