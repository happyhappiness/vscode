<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4515_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int64_t<pos:position pos:line="1" pos:column="15"/></name></type>
<name pos:line="2" pos:column="1">objectSizeForDirSelection<pos:position pos:line="2" pos:column="26"/></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">StoreEntry<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">&amp;<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="45">entry<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// entry.objectLen() is negative here when we are still STORE_PENDING</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int64_t<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">minSize<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><call><name><name pos:line="5" pos:column="23">entry<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">.<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">mem_obj<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">-&gt;<pos:position pos:line="5" pos:column="41"/></operator><name pos:line="5" pos:column="38">expectedReplySize<pos:position pos:line="5" pos:column="55"/></name></name><argument_list pos:line="5" pos:column="55">()<pos:position pos:line="5" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="58"/></decl_stmt>

    <comment type="line" pos:line="7" pos:column="5">// If entry size is unknown, use already accumulated bytes as an estimate.</comment>
    <comment type="line" pos:line="8" pos:column="5">// Controller::accumulateMore() guarantees that there are enough of them.</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">minSize<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">&lt;<pos:position pos:line="9" pos:column="21"/></operator> <literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="9">minSize<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <call><name><name pos:line="10" pos:column="19">entry<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">.<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">mem_obj<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">endOffset<pos:position pos:line="10" pos:column="43"/></name></name><argument_list pos:line="10" pos:column="43">()<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="46"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">minSize<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">&gt;=<pos:position pos:line="12" pos:column="25"/></operator> <literal type="number" pos:line="12" pos:column="23">0<pos:position pos:line="12" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">minSize<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">+=<pos:position pos:line="13" pos:column="15"/></operator> <name><name pos:line="13" pos:column="16">entry<pos:position pos:line="13" pos:column="21"/></name><operator pos:line="13" pos:column="21">.<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="22">mem_obj<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">swap_hdr_sz<pos:position pos:line="13" pos:column="42"/></name></name></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><name pos:line="14" pos:column="12">minSize<pos:position pos:line="14" pos:column="19"/></name></expr>;<pos:position pos:line="14" pos:column="20"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
