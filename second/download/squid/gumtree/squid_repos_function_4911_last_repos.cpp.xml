<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4911_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">TeChunkedParser<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">parseChunkExtension<pos:position pos:line="2" pos:column="48"/></name></name><parameter_list pos:line="2" pos:column="48">(<parameter><decl><type><name><name pos:line="2" pos:column="49">Http1<pos:position pos:line="2" pos:column="54"/></name><operator pos:line="2" pos:column="54">::<pos:position pos:line="2" pos:column="56"/></operator><name pos:line="2" pos:column="56">Tokenizer<pos:position pos:line="2" pos:column="65"/></name></name> <modifier pos:line="2" pos:column="66">&amp;<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="67">tok<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="72">bool<pos:position pos:line="2" pos:column="76"/></name></type> <name pos:line="2" pos:column="77">skipKnown<pos:position pos:line="2" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="87"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SBuf<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">ext<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">SBuf<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">value<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(
        <expr><call><name pos:line="7" pos:column="9">ParseBws<pos:position pos:line="7" pos:column="17"/></name><argument_list pos:line="7" pos:column="17">(<argument><expr><name pos:line="7" pos:column="18">tok<pos:position pos:line="7" pos:column="21"/></name></expr></argument>)<pos:position pos:line="7" pos:column="22"/></argument_list></call> <operator pos:line="7" pos:column="23">&amp;&amp;<pos:position pos:line="7" pos:column="33"/></operator> <comment type="line" pos:line="7" pos:column="26">// Bug 4492: IBM_HTTP_Server sends SP after chunk-size</comment>
        <call><name><name pos:line="8" pos:column="9">tok<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">.<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">skip<pos:position pos:line="8" pos:column="17"/></name></name><argument_list pos:line="8" pos:column="17">(<argument><expr><literal type="char" pos:line="8" pos:column="18">';'<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="22"/></argument_list></call> <operator pos:line="8" pos:column="23">&amp;&amp;<pos:position pos:line="8" pos:column="33"/></operator>
        <call><name pos:line="9" pos:column="9">ParseBws<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">tok<pos:position pos:line="9" pos:column="21"/></name></expr></argument>)<pos:position pos:line="9" pos:column="22"/></argument_list></call> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <comment type="line" pos:line="9" pos:column="26">// Bug 4492: ICAP servers send SP before chunk-ext-name</comment>
        <call><name><name pos:line="10" pos:column="9">tok<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">.<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">prefix<pos:position pos:line="10" pos:column="19"/></name></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">ext<pos:position pos:line="10" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="25">CharacterSet<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">::<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="39">TCHAR<pos:position pos:line="10" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="46"/></condition> <block pos:line="10" pos:column="47">{ <comment type="line" pos:line="10" pos:column="49">// chunk-ext-name</comment>

        <comment type="line" pos:line="12" pos:column="9">// whole value part is optional. if no '=' expect next chunk-ext</comment>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">ParseBws<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">tok<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call> <operator pos:line="13" pos:column="27">&amp;&amp;<pos:position pos:line="13" pos:column="37"/></operator> <call><name><name pos:line="13" pos:column="30">tok<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">.<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">skip<pos:position pos:line="13" pos:column="38"/></name></name><argument_list pos:line="13" pos:column="38">(<argument><expr><literal type="char" pos:line="13" pos:column="39">'='<pos:position pos:line="13" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call> <operator pos:line="13" pos:column="44">&amp;&amp;<pos:position pos:line="13" pos:column="54"/></operator> <call><name pos:line="13" pos:column="47">ParseBws<pos:position pos:line="13" pos:column="55"/></name><argument_list pos:line="13" pos:column="55">(<argument><expr><name pos:line="13" pos:column="56">tok<pos:position pos:line="13" pos:column="59"/></name></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="61"/></condition><then pos:line="13" pos:column="61"> <block pos:line="13" pos:column="62">{

            <if pos:line="15" pos:column="13">if <condition pos:line="15" pos:column="16">(<expr><operator pos:line="15" pos:column="17">!<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">skipKnown<pos:position pos:line="15" pos:column="27"/></name></expr>)<pos:position pos:line="15" pos:column="28"/></condition><then pos:line="15" pos:column="28"> <block pos:line="15" pos:column="29">{
                <if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><call><name><name pos:line="16" pos:column="21">ext<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">.<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="25">cmp<pos:position pos:line="16" pos:column="28"/></name></name><argument_list pos:line="16" pos:column="28">(<argument><expr><literal type="string" pos:line="16" pos:column="29">"use-original-body"<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="16" pos:column="49">17<pos:position pos:line="16" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call> <operator pos:line="16" pos:column="53">==<pos:position pos:line="16" pos:column="55"/></operator> <literal type="number" pos:line="16" pos:column="56">0<pos:position pos:line="16" pos:column="57"/></literal> <operator pos:line="16" pos:column="58">&amp;&amp;<pos:position pos:line="16" pos:column="68"/></operator> <call><name><name pos:line="16" pos:column="61">tok<pos:position pos:line="16" pos:column="64"/></name><operator pos:line="16" pos:column="64">.<pos:position pos:line="16" pos:column="65"/></operator><name pos:line="16" pos:column="65">int64<pos:position pos:line="16" pos:column="70"/></name></name><argument_list pos:line="16" pos:column="70">(<argument><expr><name pos:line="16" pos:column="71">useOriginBody<pos:position pos:line="16" pos:column="84"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="86">10<pos:position pos:line="16" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="89"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="90"/></condition><then pos:line="16" pos:column="90"> <block pos:line="16" pos:column="91">{
                    <expr_stmt><expr><call><name pos:line="17" pos:column="21">debugs<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><literal type="number" pos:line="17" pos:column="28">94<pos:position pos:line="17" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="32">3<pos:position pos:line="17" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="35">"Found chunk extension "<pos:position pos:line="17" pos:column="59"/></literal> <operator pos:line="17" pos:column="60">&lt;&lt;<pos:position pos:line="17" pos:column="68"/></operator> <name pos:line="17" pos:column="63">ext<pos:position pos:line="17" pos:column="66"/></name> <operator pos:line="17" pos:column="67">&lt;&lt;<pos:position pos:line="17" pos:column="75"/></operator> <literal type="string" pos:line="17" pos:column="70">"="<pos:position pos:line="17" pos:column="73"/></literal> <operator pos:line="17" pos:column="74">&lt;&lt;<pos:position pos:line="17" pos:column="82"/></operator> <name pos:line="17" pos:column="77">useOriginBody<pos:position pos:line="17" pos:column="90"/></name></expr></argument>)<pos:position pos:line="17" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="92"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="18" pos:column="21">buf_<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <call><name><name pos:line="18" pos:column="28">tok<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">.<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="32">remaining<pos:position pos:line="18" pos:column="41"/></name></name><argument_list pos:line="18" pos:column="41">()<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt> <comment type="line" pos:line="18" pos:column="45">// parse checkpoint</comment>
                    <continue pos:line="19" pos:column="21">continue;<pos:position pos:line="19" pos:column="30"/></continue>
                }<pos:position pos:line="20" pos:column="18"/></block></then></if>
            }<pos:position pos:line="21" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="23" pos:column="13">debugs<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="number" pos:line="23" pos:column="20">94<pos:position pos:line="23" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="24">5<pos:position pos:line="23" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="27">"skipping unknown chunk extension "<pos:position pos:line="23" pos:column="62"/></literal> <operator pos:line="23" pos:column="63">&lt;&lt;<pos:position pos:line="23" pos:column="71"/></operator> <name pos:line="23" pos:column="66">ext<pos:position pos:line="23" pos:column="69"/></name></expr></argument>)<pos:position pos:line="23" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="71"/></expr_stmt>

            <comment type="line" pos:line="25" pos:column="13">// unknown might have a value token or quoted-string</comment>
            <if pos:line="26" pos:column="13">if <condition pos:line="26" pos:column="16">(<expr><call><name><name pos:line="26" pos:column="17">tok<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">.<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">quotedStringOrToken<pos:position pos:line="26" pos:column="40"/></name></name><argument_list pos:line="26" pos:column="40">(<argument><expr><name pos:line="26" pos:column="41">value<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></call> <operator pos:line="26" pos:column="48">&amp;&amp;<pos:position pos:line="26" pos:column="58"/></operator> <operator pos:line="26" pos:column="51">!<pos:position pos:line="26" pos:column="52"/></operator><call><name><name pos:line="26" pos:column="52">tok<pos:position pos:line="26" pos:column="55"/></name><operator pos:line="26" pos:column="55">.<pos:position pos:line="26" pos:column="56"/></operator><name pos:line="26" pos:column="56">atEnd<pos:position pos:line="26" pos:column="61"/></name></name><argument_list pos:line="26" pos:column="61">()<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="64"/></condition><then pos:line="26" pos:column="64"> <block pos:line="26" pos:column="65">{
                <expr_stmt><expr><name pos:line="27" pos:column="17">buf_<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <call><name><name pos:line="27" pos:column="24">tok<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">.<pos:position pos:line="27" pos:column="28"/></operator><name pos:line="27" pos:column="28">remaining<pos:position pos:line="27" pos:column="37"/></name></name><argument_list pos:line="27" pos:column="37">()<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt> <comment type="line" pos:line="27" pos:column="41">// parse checkpoint</comment>
                <continue pos:line="28" pos:column="17">continue;<pos:position pos:line="28" pos:column="26"/></continue>
            }<pos:position pos:line="29" pos:column="14"/></block></then></if>

            <comment type="line" pos:line="31" pos:column="13">// otherwise need more data OR corrupt syntax</comment>
            <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>

        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><call><name><name pos:line="35" pos:column="14">tok<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">.<pos:position pos:line="35" pos:column="18"/></operator><name pos:line="35" pos:column="18">atEnd<pos:position pos:line="35" pos:column="23"/></name></name><argument_list pos:line="35" pos:column="23">()<pos:position pos:line="35" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="26"/></condition><then pos:line="35" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><name pos:line="36" pos:column="13">buf_<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <call><name><name pos:line="36" pos:column="20">tok<pos:position pos:line="36" pos:column="23"/></name><operator pos:line="36" pos:column="23">.<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="24">remaining<pos:position pos:line="36" pos:column="33"/></name></name><argument_list pos:line="36" pos:column="33">()<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt></block></then></if> <comment type="line" pos:line="36" pos:column="37">// parse checkpoint (unless there might be more token name)</comment>
    }<pos:position pos:line="37" pos:column="6"/></block></while>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name pos:line="39" pos:column="9">skipLineTerminator<pos:position pos:line="39" pos:column="27"/></name><argument_list pos:line="39" pos:column="27">(<argument><expr><name pos:line="39" pos:column="28">tok<pos:position pos:line="39" pos:column="31"/></name></expr></argument>)<pos:position pos:line="39" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="33"/></condition><then pos:line="39" pos:column="33"> <block pos:line="39" pos:column="34">{
        <expr_stmt><expr><name pos:line="40" pos:column="9">buf_<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <call><name><name pos:line="40" pos:column="16">tok<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">.<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="20">remaining<pos:position pos:line="40" pos:column="29"/></name></name><argument_list pos:line="40" pos:column="29">()<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="32"/></expr_stmt> <comment type="line" pos:line="40" pos:column="33">// checkpoint</comment>
        <comment type="line" pos:line="41" pos:column="9">// non-0 chunk means data, 0-size means optional Trailer follows</comment>
        <expr_stmt><expr><name pos:line="42" pos:column="9">parsingStage_<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">=<pos:position pos:line="42" pos:column="24"/></operator> <ternary><condition><expr><name pos:line="42" pos:column="25">theChunkSize<pos:position pos:line="42" pos:column="37"/></name></expr> ?<pos:position pos:line="42" pos:column="39"/></condition><then pos:line="42" pos:column="39"> <expr><name><name pos:line="42" pos:column="40">Http1<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">::<pos:position pos:line="42" pos:column="47"/></operator><name pos:line="42" pos:column="47">HTTP_PARSE_CHUNK<pos:position pos:line="42" pos:column="63"/></name></name></expr> <pos:position pos:line="42" pos:column="64"/></then><else pos:line="42" pos:column="64">: <expr><name><name pos:line="42" pos:column="66">Http1<pos:position pos:line="42" pos:column="71"/></name><operator pos:line="42" pos:column="71">::<pos:position pos:line="42" pos:column="73"/></operator><name pos:line="42" pos:column="73">HTTP_PARSE_MIME<pos:position pos:line="42" pos:column="88"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="42" pos:column="89"/></expr_stmt>
        <return pos:line="43" pos:column="9">return <expr><literal type="boolean" pos:line="43" pos:column="16">true<pos:position pos:line="43" pos:column="20"/></literal></expr>;<pos:position pos:line="43" pos:column="21"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <return pos:line="46" pos:column="5">return <expr><literal type="boolean" pos:line="46" pos:column="12">false<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
