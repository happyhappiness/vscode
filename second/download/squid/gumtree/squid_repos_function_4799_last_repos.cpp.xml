<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4799_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Parser<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">BinaryTokenizer<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">got<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">SBuf<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">&amp;<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="42">value<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">uint64_t<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">size<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="64">const<pos:position pos:line="2" pos:column="69"/></specifier> <name pos:line="2" pos:column="70">char<pos:position pos:line="2" pos:column="74"/></name> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier></type><name pos:line="2" pos:column="76">description<pos:position pos:line="2" pos:column="87"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="88"/></parameter_list> <specifier pos:line="2" pos:column="89">const<pos:position pos:line="2" pos:column="94"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">24<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">7<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">context<pos:position pos:line="4" pos:column="26"/></name> <operator pos:line="4" pos:column="27">&lt;&lt;<pos:position pos:line="4" pos:column="35"/></operator> <name pos:line="4" pos:column="30">description<pos:position pos:line="4" pos:column="41"/></name> <operator pos:line="4" pos:column="42">&lt;&lt;<pos:position pos:line="4" pos:column="50"/></operator> <literal type="char" pos:line="4" pos:column="45">'='<pos:position pos:line="4" pos:column="48"/></literal> <operator pos:line="4" pos:column="49">&lt;&lt;<pos:position pos:line="4" pos:column="57"/></operator>
           <call><name pos:line="5" pos:column="12">Raw<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="null" pos:line="5" pos:column="16">nullptr<pos:position pos:line="5" pos:column="23"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="5" pos:column="25">value<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">.<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="31">rawContent<pos:position pos:line="5" pos:column="41"/></name></name><argument_list pos:line="5" pos:column="41">()<pos:position pos:line="5" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="5" pos:column="45">value<pos:position pos:line="5" pos:column="50"/></name><operator pos:line="5" pos:column="50">.<pos:position pos:line="5" pos:column="51"/></operator><name pos:line="5" pos:column="51">length<pos:position pos:line="5" pos:column="57"/></name></name><argument_list pos:line="5" pos:column="57">()<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="60"/></argument_list></call><operator pos:line="5" pos:column="60">.<pos:position pos:line="5" pos:column="61"/></operator><call><name pos:line="5" pos:column="61">hex<pos:position pos:line="5" pos:column="64"/></name><argument_list pos:line="5" pos:column="64">()<pos:position pos:line="5" pos:column="66"/></argument_list></call> <operator pos:line="5" pos:column="67">&lt;&lt;<pos:position pos:line="5" pos:column="75"/></operator>
           <call><name pos:line="6" pos:column="12">BinaryTokenizer_tail<pos:position pos:line="6" pos:column="32"/></name><argument_list pos:line="6" pos:column="32">(<argument><expr><name pos:line="6" pos:column="33">size<pos:position pos:line="6" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="39">parsed_<pos:position pos:line="6" pos:column="46"/></name> <operator pos:line="6" pos:column="47">-<pos:position pos:line="6" pos:column="48"/></operator> <name pos:line="6" pos:column="49">size<pos:position pos:line="6" pos:column="53"/></name></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="56"/></expr_stmt>

}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
