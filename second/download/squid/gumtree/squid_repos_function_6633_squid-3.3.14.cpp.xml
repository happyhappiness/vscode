<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6633_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:define pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">define<pos:position pos:line="4" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="4" pos:column="9">PACKET_BUFSZ<pos:position pos:line="4" pos:column="21"/></name></cpp:macro>		<cpp:value pos:line="4" pos:column="33">1024<pos:position pos:line="4" pos:column="37"/></cpp:value></cpp:define>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">input<pos:position pos:line="5" pos:column="15"/></name><index pos:line="5" pos:column="15">[<expr><name pos:line="5" pos:column="16">PACKET_BUFSZ<pos:position pos:line="5" pos:column="28"/></name></expr>]<pos:position pos:line="5" pos:column="29"/></index></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">buf<pos:position pos:line="6" pos:column="13"/></name><index pos:line="6" pos:column="13">[<expr><name pos:line="6" pos:column="14">PACKET_BUFSZ<pos:position pos:line="6" pos:column="26"/></name></expr>]<pos:position pos:line="6" pos:column="27"/></index></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">rbuf<pos:position pos:line="7" pos:column="14"/></name><index pos:line="7" pos:column="14">[<expr><name pos:line="7" pos:column="15">PACKET_BUFSZ<pos:position pos:line="7" pos:column="27"/></name></expr>]<pos:position pos:line="7" pos:column="28"/></index></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">sz<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><name pos:line="8" pos:column="17">PACKET_BUFSZ<pos:position pos:line="8" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">unsigned<pos:position pos:line="9" pos:column="13"/></name> <name pos:line="9" pos:column="14">short<pos:position pos:line="9" pos:column="19"/></name></type> <name pos:line="9" pos:column="20">sid<pos:position pos:line="9" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="25">sidb<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">s<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">rl<pos:position pos:line="11" pos:column="11"/></name></decl>;<pos:position pos:line="11" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">ssize_t<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">edns_max<pos:position pos:line="12" pos:column="21"/></name> <init pos:line="12" pos:column="22">= <expr><operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">struct<pos:position pos:line="14" pos:column="11"/></name> <name pos:line="14" pos:column="12">sockaddr<pos:position pos:line="14" pos:column="20"/></name></name><modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type> <name pos:line="14" pos:column="22">S<pos:position pos:line="14" pos:column="23"/></name></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">var<pos:position pos:line="15" pos:column="12"/></name> <init pos:line="15" pos:column="13">= <expr><literal type="number" pos:line="15" pos:column="15">1<pos:position pos:line="15" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="17"/></decl_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">( <expr><name><name pos:line="17" pos:column="10">argc<pos:position pos:line="17" pos:column="14"/></name> <argument_list type="generic" pos:line="17" pos:column="15">&lt; <argument><expr><literal type="number" pos:line="17" pos:column="17">3<pos:position pos:line="17" pos:column="18"/></literal> <operator pos:line="17" pos:column="19">||<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="22">argc<pos:position pos:line="17" pos:column="26"/></name></expr></argument> &gt;<pos:position pos:line="17" pos:column="31"/></argument_list></name> <literal type="number" pos:line="17" pos:column="29">4<pos:position pos:line="17" pos:column="30"/></literal></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31"> <block pos:line="17" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">fprintf<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">(<argument><expr><name pos:line="18" pos:column="17">stderr<pos:position pos:line="18" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="25">"usage: %s [-6|-4] ip port\n"<pos:position pos:line="18" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="56">argv<pos:position pos:line="18" pos:column="60"/></name><index pos:line="18" pos:column="60">[<expr><literal type="number" pos:line="18" pos:column="61">0<pos:position pos:line="18" pos:column="62"/></literal></expr>]<pos:position pos:line="18" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="65"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><literal type="number" pos:line="19" pos:column="16">1<pos:position pos:line="19" pos:column="17"/></literal></expr>;<pos:position pos:line="19" pos:column="18"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">setbuf<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name pos:line="22" pos:column="12">stdout<pos:position pos:line="22" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="20">NULL<pos:position pos:line="22" pos:column="24"/></name></expr></argument>)<pos:position pos:line="22" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">setbuf<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name pos:line="23" pos:column="12">stderr<pos:position pos:line="23" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="20">NULL<pos:position pos:line="23" pos:column="24"/></name></expr></argument>)<pos:position pos:line="23" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">argv<pos:position pos:line="25" pos:column="13"/></name><index pos:line="25" pos:column="13">[<expr><name pos:line="25" pos:column="14">var<pos:position pos:line="25" pos:column="17"/></name></expr>]<pos:position pos:line="25" pos:column="18"/></index><index pos:line="25" pos:column="18">[<expr><literal type="number" pos:line="25" pos:column="19">0<pos:position pos:line="25" pos:column="20"/></literal></expr>]<pos:position pos:line="25" pos:column="21"/></index></name> <operator pos:line="25" pos:column="22">==<pos:position pos:line="25" pos:column="24"/></operator> <literal type="char" pos:line="25" pos:column="25">'-'<pos:position pos:line="25" pos:column="28"/></literal></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29"> <block pos:line="25" pos:column="30">{
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name><name pos:line="26" pos:column="13">argv<pos:position pos:line="26" pos:column="17"/></name><index pos:line="26" pos:column="17">[<expr><name pos:line="26" pos:column="18">var<pos:position pos:line="26" pos:column="21"/></name></expr>]<pos:position pos:line="26" pos:column="22"/></index><index pos:line="26" pos:column="22">[<expr><literal type="number" pos:line="26" pos:column="23">1<pos:position pos:line="26" pos:column="24"/></literal></expr>]<pos:position pos:line="26" pos:column="25"/></index></name> <operator pos:line="26" pos:column="26">==<pos:position pos:line="26" pos:column="28"/></operator> <literal type="char" pos:line="26" pos:column="29">'4'<pos:position pos:line="26" pos:column="32"/></literal></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="13">prefer<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <name pos:line="27" pos:column="22">AF_INET<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt></block></then>
        <elseif pos:line="28" pos:column="9">else <if pos:line="28" pos:column="14">if <condition pos:line="28" pos:column="17">(<expr><name><name pos:line="28" pos:column="18">argv<pos:position pos:line="28" pos:column="22"/></name><index pos:line="28" pos:column="22">[<expr><name pos:line="28" pos:column="23">var<pos:position pos:line="28" pos:column="26"/></name></expr>]<pos:position pos:line="28" pos:column="27"/></index><index pos:line="28" pos:column="27">[<expr><literal type="number" pos:line="28" pos:column="28">1<pos:position pos:line="28" pos:column="29"/></literal></expr>]<pos:position pos:line="28" pos:column="30"/></index></name> <operator pos:line="28" pos:column="31">==<pos:position pos:line="28" pos:column="33"/></operator> <literal type="char" pos:line="28" pos:column="34">'6'<pos:position pos:line="28" pos:column="37"/></literal></expr>)<pos:position pos:line="28" pos:column="38"/></condition><then pos:line="28" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="13">prefer<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <name pos:line="29" pos:column="22">AF_INET6<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="30" pos:column="9">else <if pos:line="30" pos:column="14">if <condition pos:line="30" pos:column="17">(<expr><name><name pos:line="30" pos:column="18">argv<pos:position pos:line="30" pos:column="22"/></name><index pos:line="30" pos:column="22">[<expr><name pos:line="30" pos:column="23">var<pos:position pos:line="30" pos:column="26"/></name></expr>]<pos:position pos:line="30" pos:column="27"/></index><index pos:line="30" pos:column="27">[<expr><literal type="number" pos:line="30" pos:column="28">1<pos:position pos:line="30" pos:column="29"/></literal></expr>]<pos:position pos:line="30" pos:column="30"/></index></name> <operator pos:line="30" pos:column="31">==<pos:position pos:line="30" pos:column="33"/></operator> <literal type="char" pos:line="30" pos:column="34">'E'<pos:position pos:line="30" pos:column="37"/></literal></expr>)<pos:position pos:line="30" pos:column="38"/></condition><then pos:line="30" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="13">edns_max<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <call><name pos:line="31" pos:column="24">atoi<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><name><name pos:line="31" pos:column="29">argv<pos:position pos:line="31" pos:column="33"/></name><index pos:line="31" pos:column="33">[<expr><name pos:line="31" pos:column="34">var<pos:position pos:line="31" pos:column="37"/></name><operator pos:line="31" pos:column="37">++<pos:position pos:line="31" pos:column="39"/></operator></expr>]<pos:position pos:line="31" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt></block></then></if></elseif>
        <else pos:line="32" pos:column="9">else <block pos:line="32" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">fprintf<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">stderr<pos:position pos:line="33" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="29">"usage: %s [-6|-4] [-E packet-size] ip port\n"<pos:position pos:line="33" pos:column="75"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="77">argv<pos:position pos:line="33" pos:column="81"/></name><index pos:line="33" pos:column="81">[<expr><literal type="number" pos:line="33" pos:column="82">0<pos:position pos:line="33" pos:column="83"/></literal></expr>]<pos:position pos:line="33" pos:column="84"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="86"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">fprintf<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name pos:line="34" pos:column="21">stderr<pos:position pos:line="34" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="29">"  EDNS packets my be up to %d\n"<pos:position pos:line="34" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="64">PACKET_BUFSZ<pos:position pos:line="34" pos:column="76"/></name></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="78"/></expr_stmt>
            <return pos:line="35" pos:column="13">return <expr><literal type="number" pos:line="35" pos:column="20">1<pos:position pos:line="35" pos:column="21"/></literal></expr>;<pos:position pos:line="35" pos:column="22"/></return>
        }<pos:position pos:line="36" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name pos:line="38" pos:column="9">var<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">++<pos:position pos:line="38" pos:column="14"/></operator></expr>;<pos:position pos:line="38" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="41" pos:column="5">s<pos:position pos:line="41" pos:column="6"/></name> <operator pos:line="41" pos:column="7">=<pos:position pos:line="41" pos:column="8"/></operator> <call><name pos:line="41" pos:column="9">socket<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">PF_INET<pos:position pos:line="41" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="25">SOCK_DGRAM<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="37">0<pos:position pos:line="41" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">s<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">&lt;<pos:position pos:line="43" pos:column="15"/></operator> <literal type="number" pos:line="43" pos:column="13">0<pos:position pos:line="43" pos:column="14"/></literal></expr>)<pos:position pos:line="43" pos:column="15"/></condition><then pos:line="43" pos:column="15"> <block pos:line="43" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">perror<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="string" pos:line="44" pos:column="16">"socket"<pos:position pos:line="44" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="26"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><literal type="number" pos:line="45" pos:column="16">1<pos:position pos:line="45" pos:column="17"/></literal></expr>;<pos:position pos:line="45" pos:column="18"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="48" pos:column="5">memset<pos:position pos:line="48" pos:column="11"/></name><argument_list pos:line="48" pos:column="11">(<argument><expr><operator pos:line="48" pos:column="12">&amp;<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="13">S<pos:position pos:line="48" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="48" pos:column="16">'\0'<pos:position pos:line="48" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="22">sizeof<argument_list pos:line="48" pos:column="28">(<argument><expr><name pos:line="48" pos:column="29">S<pos:position pos:line="48" pos:column="30"/></name></expr></argument>)<pos:position pos:line="48" pos:column="31"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">prefer<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">==<pos:position pos:line="50" pos:column="18"/></operator> <literal type="number" pos:line="50" pos:column="19">6<pos:position pos:line="50" pos:column="20"/></literal></expr>)<pos:position pos:line="50" pos:column="21"/></condition><then pos:line="50" pos:column="21"> <block pos:line="50" pos:column="22">{
        <expr_stmt><expr><name pos:line="51" pos:column="9">S<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">=<pos:position pos:line="51" pos:column="12"/></operator> <operator pos:line="51" pos:column="13">(<pos:position pos:line="51" pos:column="14"/></operator>struct <name pos:line="51" pos:column="21">sockaddr<pos:position pos:line="51" pos:column="29"/></name> <operator pos:line="51" pos:column="30">*<pos:position pos:line="51" pos:column="31"/></operator><operator pos:line="51" pos:column="31">)<pos:position pos:line="51" pos:column="32"/></operator> <operator pos:line="51" pos:column="33">new<pos:position pos:line="51" pos:column="36"/></operator> <name pos:line="51" pos:column="37">sockaddr_in6<pos:position pos:line="51" pos:column="49"/></name></expr>;<pos:position pos:line="51" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">memset<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><name pos:line="52" pos:column="16">S<pos:position pos:line="52" pos:column="17"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal></expr></argument>,<argument><expr><sizeof pos:line="52" pos:column="20">sizeof<argument_list pos:line="52" pos:column="26">(<argument><expr pos:line="52" pos:column="27">struct <name pos:line="52" pos:column="34">sockaddr_in6<pos:position pos:line="52" pos:column="46"/></name></expr></argument>)<pos:position pos:line="52" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="49"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="54" pos:column="9">(<pos:position pos:line="54" pos:column="10"/></operator><operator pos:line="54" pos:column="10">(<pos:position pos:line="54" pos:column="11"/></operator>struct <name pos:line="54" pos:column="18">sockaddr_in6<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">*<pos:position pos:line="54" pos:column="32"/></operator><operator pos:line="54" pos:column="32">)<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="33">S<pos:position pos:line="54" pos:column="34"/></name><operator pos:line="54" pos:column="34">)<pos:position pos:line="54" pos:column="35"/></operator><operator pos:line="54" pos:column="35">-&gt;<pos:position pos:line="54" pos:column="40"/></operator><name pos:line="54" pos:column="37">sin6_family<pos:position pos:line="54" pos:column="48"/></name> <operator pos:line="54" pos:column="49">=<pos:position pos:line="54" pos:column="50"/></operator> <name pos:line="54" pos:column="51">AF_INET6<pos:position pos:line="54" pos:column="59"/></name></expr>;<pos:position pos:line="54" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="55" pos:column="9">(<pos:position pos:line="55" pos:column="10"/></operator><operator pos:line="55" pos:column="10">(<pos:position pos:line="55" pos:column="11"/></operator>struct <name pos:line="55" pos:column="18">sockaddr_in6<pos:position pos:line="55" pos:column="30"/></name> <operator pos:line="55" pos:column="31">*<pos:position pos:line="55" pos:column="32"/></operator><operator pos:line="55" pos:column="32">)<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="33">S<pos:position pos:line="55" pos:column="34"/></name><operator pos:line="55" pos:column="34">)<pos:position pos:line="55" pos:column="35"/></operator><operator pos:line="55" pos:column="35">-&gt;<pos:position pos:line="55" pos:column="40"/></operator><name pos:line="55" pos:column="37">sin6_port<pos:position pos:line="55" pos:column="46"/></name> <operator pos:line="55" pos:column="47">=<pos:position pos:line="55" pos:column="48"/></operator> <call><name pos:line="55" pos:column="49">htons<pos:position pos:line="55" pos:column="54"/></name><argument_list pos:line="55" pos:column="54">(<argument><expr><call><name pos:line="55" pos:column="55">atoi<pos:position pos:line="55" pos:column="59"/></name><argument_list pos:line="55" pos:column="59">(<argument><expr><name><name pos:line="55" pos:column="60">argv<pos:position pos:line="55" pos:column="64"/></name><index pos:line="55" pos:column="64">[<expr><name pos:line="55" pos:column="65">var<pos:position pos:line="55" pos:column="68"/></name><operator pos:line="55" pos:column="68">+<pos:position pos:line="55" pos:column="69"/></operator><literal type="number" pos:line="55" pos:column="69">1<pos:position pos:line="55" pos:column="70"/></literal></expr>]<pos:position pos:line="55" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="55" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="74"/></expr_stmt>

        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">( <expr><operator pos:line="57" pos:column="14">!<pos:position pos:line="57" pos:column="15"/></operator> <call><name pos:line="57" pos:column="16">inet_pton<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">(<argument><expr><name pos:line="57" pos:column="26">AF_INET6<pos:position pos:line="57" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="36">argv<pos:position pos:line="57" pos:column="40"/></name><index pos:line="57" pos:column="40">[<expr><name pos:line="57" pos:column="41">var<pos:position pos:line="57" pos:column="44"/></name></expr>]<pos:position pos:line="57" pos:column="45"/></index></name></expr></argument>, <argument><expr><operator pos:line="57" pos:column="47">&amp;<pos:position pos:line="57" pos:column="52"/></operator><operator pos:line="57" pos:column="48">(<pos:position pos:line="57" pos:column="49"/></operator><operator pos:line="57" pos:column="49">(<pos:position pos:line="57" pos:column="50"/></operator>struct <name pos:line="57" pos:column="57">sockaddr_in6<pos:position pos:line="57" pos:column="69"/></name> <operator pos:line="57" pos:column="70">*<pos:position pos:line="57" pos:column="71"/></operator><operator pos:line="57" pos:column="71">)<pos:position pos:line="57" pos:column="72"/></operator><name pos:line="57" pos:column="72">S<pos:position pos:line="57" pos:column="73"/></name><operator pos:line="57" pos:column="73">)<pos:position pos:line="57" pos:column="74"/></operator><operator pos:line="57" pos:column="74">-&gt;<pos:position pos:line="57" pos:column="79"/></operator><name><name pos:line="57" pos:column="76">sin6_addr<pos:position pos:line="57" pos:column="85"/></name><operator pos:line="57" pos:column="85">.<pos:position pos:line="57" pos:column="86"/></operator><name pos:line="57" pos:column="86">s_addr<pos:position pos:line="57" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="93"/></argument_list></call></expr> )<pos:position pos:line="57" pos:column="95"/></condition><then pos:line="57" pos:column="95"> <block pos:line="57" pos:column="96">{
            <expr_stmt><expr><call><name pos:line="58" pos:column="13">perror<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><literal type="string" pos:line="58" pos:column="20">"listen address"<pos:position pos:line="58" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt>
            <return pos:line="59" pos:column="13">return <expr><literal type="number" pos:line="59" pos:column="20">1<pos:position pos:line="59" pos:column="21"/></literal></expr>;<pos:position pos:line="59" pos:column="22"/></return>
        }<pos:position pos:line="60" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="62" pos:column="9">s<pos:position pos:line="62" pos:column="10"/></name> <operator pos:line="62" pos:column="11">=<pos:position pos:line="62" pos:column="12"/></operator> <call><name pos:line="62" pos:column="13">socket<pos:position pos:line="62" pos:column="19"/></name><argument_list pos:line="62" pos:column="19">(<argument><expr><name pos:line="62" pos:column="20">PF_INET6<pos:position pos:line="62" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="30">SOCK_DGRAM<pos:position pos:line="62" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="42">0<pos:position pos:line="62" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="63" pos:column="6"/></block></then> <else pos:line="63" pos:column="7">else <block pos:line="63" pos:column="12">{
        <expr_stmt><expr><name pos:line="64" pos:column="9">S<pos:position pos:line="64" pos:column="10"/></name> <operator pos:line="64" pos:column="11">=<pos:position pos:line="64" pos:column="12"/></operator> <operator pos:line="64" pos:column="13">(<pos:position pos:line="64" pos:column="14"/></operator>struct <name pos:line="64" pos:column="21">sockaddr<pos:position pos:line="64" pos:column="29"/></name> <operator pos:line="64" pos:column="30">*<pos:position pos:line="64" pos:column="31"/></operator><operator pos:line="64" pos:column="31">)<pos:position pos:line="64" pos:column="32"/></operator> <operator pos:line="64" pos:column="33">new<pos:position pos:line="64" pos:column="36"/></operator> <name pos:line="64" pos:column="37">sockaddr_in<pos:position pos:line="64" pos:column="48"/></name></expr>;<pos:position pos:line="64" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">memset<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><name pos:line="65" pos:column="16">S<pos:position pos:line="65" pos:column="17"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="65" pos:column="18">0<pos:position pos:line="65" pos:column="19"/></literal></expr></argument>,<argument><expr><sizeof pos:line="65" pos:column="20">sizeof<argument_list pos:line="65" pos:column="26">(<argument><expr pos:line="65" pos:column="27">struct <name pos:line="65" pos:column="34">sockaddr_in<pos:position pos:line="65" pos:column="45"/></name></expr></argument>)<pos:position pos:line="65" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="48"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="67" pos:column="9">(<pos:position pos:line="67" pos:column="10"/></operator><operator pos:line="67" pos:column="10">(<pos:position pos:line="67" pos:column="11"/></operator>struct <name pos:line="67" pos:column="18">sockaddr_in<pos:position pos:line="67" pos:column="29"/></name> <operator pos:line="67" pos:column="30">*<pos:position pos:line="67" pos:column="31"/></operator><operator pos:line="67" pos:column="31">)<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="32">S<pos:position pos:line="67" pos:column="33"/></name><operator pos:line="67" pos:column="33">)<pos:position pos:line="67" pos:column="34"/></operator><operator pos:line="67" pos:column="34">-&gt;<pos:position pos:line="67" pos:column="39"/></operator><name pos:line="67" pos:column="36">sin_family<pos:position pos:line="67" pos:column="46"/></name> <operator pos:line="67" pos:column="47">=<pos:position pos:line="67" pos:column="48"/></operator> <name pos:line="67" pos:column="49">AF_INET<pos:position pos:line="67" pos:column="56"/></name></expr>;<pos:position pos:line="67" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="68" pos:column="9">(<pos:position pos:line="68" pos:column="10"/></operator><operator pos:line="68" pos:column="10">(<pos:position pos:line="68" pos:column="11"/></operator>struct <name pos:line="68" pos:column="18">sockaddr_in<pos:position pos:line="68" pos:column="29"/></name> <operator pos:line="68" pos:column="30">*<pos:position pos:line="68" pos:column="31"/></operator><operator pos:line="68" pos:column="31">)<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="32">S<pos:position pos:line="68" pos:column="33"/></name><operator pos:line="68" pos:column="33">)<pos:position pos:line="68" pos:column="34"/></operator><operator pos:line="68" pos:column="34">-&gt;<pos:position pos:line="68" pos:column="39"/></operator><name pos:line="68" pos:column="36">sin_port<pos:position pos:line="68" pos:column="44"/></name> <operator pos:line="68" pos:column="45">=<pos:position pos:line="68" pos:column="46"/></operator> <call><name pos:line="68" pos:column="47">htons<pos:position pos:line="68" pos:column="52"/></name><argument_list pos:line="68" pos:column="52">(<argument><expr><call><name pos:line="68" pos:column="53">atoi<pos:position pos:line="68" pos:column="57"/></name><argument_list pos:line="68" pos:column="57">(<argument><expr><name><name pos:line="68" pos:column="58">argv<pos:position pos:line="68" pos:column="62"/></name><index pos:line="68" pos:column="62">[<expr><name pos:line="68" pos:column="63">var<pos:position pos:line="68" pos:column="66"/></name><operator pos:line="68" pos:column="66">+<pos:position pos:line="68" pos:column="67"/></operator><literal type="number" pos:line="68" pos:column="67">1<pos:position pos:line="68" pos:column="68"/></literal></expr>]<pos:position pos:line="68" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="68" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="68" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="72"/></expr_stmt>

        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">( <expr><operator pos:line="70" pos:column="14">!<pos:position pos:line="70" pos:column="15"/></operator> <call><name pos:line="70" pos:column="16">inet_pton<pos:position pos:line="70" pos:column="25"/></name><argument_list pos:line="70" pos:column="25">(<argument><expr><name pos:line="70" pos:column="26">AF_INET<pos:position pos:line="70" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="35">argv<pos:position pos:line="70" pos:column="39"/></name><index pos:line="70" pos:column="39">[<expr><name pos:line="70" pos:column="40">var<pos:position pos:line="70" pos:column="43"/></name></expr>]<pos:position pos:line="70" pos:column="44"/></index></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="46">&amp;<pos:position pos:line="70" pos:column="51"/></operator><operator pos:line="70" pos:column="47">(<pos:position pos:line="70" pos:column="48"/></operator><operator pos:line="70" pos:column="48">(<pos:position pos:line="70" pos:column="49"/></operator>struct <name pos:line="70" pos:column="56">sockaddr_in<pos:position pos:line="70" pos:column="67"/></name> <operator pos:line="70" pos:column="68">*<pos:position pos:line="70" pos:column="69"/></operator><operator pos:line="70" pos:column="69">)<pos:position pos:line="70" pos:column="70"/></operator><name pos:line="70" pos:column="70">S<pos:position pos:line="70" pos:column="71"/></name><operator pos:line="70" pos:column="71">)<pos:position pos:line="70" pos:column="72"/></operator><operator pos:line="70" pos:column="72">-&gt;<pos:position pos:line="70" pos:column="77"/></operator><name><name pos:line="70" pos:column="74">sin_addr<pos:position pos:line="70" pos:column="82"/></name><operator pos:line="70" pos:column="82">.<pos:position pos:line="70" pos:column="83"/></operator><name pos:line="70" pos:column="83">s_addr<pos:position pos:line="70" pos:column="89"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="90"/></argument_list></call></expr> )<pos:position pos:line="70" pos:column="92"/></condition><then pos:line="70" pos:column="92">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="13">perror<pos:position pos:line="71" pos:column="19"/></name><argument_list pos:line="71" pos:column="19">(<argument><expr><literal type="string" pos:line="71" pos:column="20">"listen address"<pos:position pos:line="71" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="38"/></expr_stmt></block></then></if>
        <return pos:line="72" pos:column="9">return <expr><literal type="number" pos:line="72" pos:column="16">1<pos:position pos:line="72" pos:column="17"/></literal></expr>;<pos:position pos:line="72" pos:column="18"/></return>
    }<pos:position pos:line="73" pos:column="6"/></block></else></if>
}<pos:position pos:line="74" pos:column="2"/></block></function></unit>
