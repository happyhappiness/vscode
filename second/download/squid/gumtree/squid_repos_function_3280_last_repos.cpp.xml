<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3280_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Service<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">wants<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">ServiceFilter<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">filter<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list> <specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">cfg<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">()<pos:position pos:line="4" pos:column="14"/></argument_list></call><operator pos:line="4" pos:column="14">.<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">method<pos:position pos:line="4" pos:column="21"/></name> <operator pos:line="4" pos:column="22">!=<pos:position pos:line="4" pos:column="24"/></operator> <name><name pos:line="4" pos:column="25">filter<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">.<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">method<pos:position pos:line="4" pos:column="38"/></name></name></expr>)<pos:position pos:line="4" pos:column="39"/></condition><then pos:line="4" pos:column="39">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">cfg<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">()<pos:position pos:line="7" pos:column="14"/></argument_list></call><operator pos:line="7" pos:column="14">.<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">point<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">!=<pos:position pos:line="7" pos:column="23"/></operator> <name><name pos:line="7" pos:column="24">filter<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">.<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="31">point<pos:position pos:line="7" pos:column="36"/></name></name></expr>)<pos:position pos:line="7" pos:column="37"/></condition><then pos:line="7" pos:column="37">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="10" pos:column="5">// sending a message to a broken service is likely to cause errors</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">cfg<pos:position pos:line="11" pos:column="12"/></name><argument_list pos:line="11" pos:column="12">()<pos:position pos:line="11" pos:column="14"/></argument_list></call><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">bypass<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">&amp;&amp;<pos:position pos:line="11" pos:column="32"/></operator> <call><name pos:line="11" pos:column="25">broken<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">()<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34">
        <block type="pseudo"><return pos:line="12" pos:column="9">return <expr><literal type="boolean" pos:line="12" pos:column="16">false<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></return></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">up<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">()<pos:position pos:line="14" pos:column="13"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="14"/></condition><then pos:line="14" pos:column="14"> <block pos:line="14" pos:column="15">{
        <comment type="line" pos:line="15" pos:column="9">// Sending a message to a service that does not want it is useless.</comment>
        <comment type="line" pos:line="16" pos:column="9">// note that we cannot check wantsUrl for service that is not "up"</comment>
        <comment type="line" pos:line="17" pos:column="9">// note that even essential services are skipped on unwanted URLs!</comment>
        <return pos:line="18" pos:column="9">return <expr><call><name pos:line="18" pos:column="16">wantsUrl<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><call><name><name pos:line="18" pos:column="25">filter<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">.<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="32">request<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">url<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">.<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">path<pos:position pos:line="18" pos:column="49"/></name></name><argument_list pos:line="18" pos:column="49">()<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="21" pos:column="5">// The service is down and is either not bypassable or not probed due</comment>
    <comment type="line" pos:line="22" pos:column="5">// to the bypass &amp;&amp; broken() test above. Thus, we want to use it!</comment>
    <return pos:line="23" pos:column="5">return <expr><literal type="boolean" pos:line="23" pos:column="12">true<pos:position pos:line="23" pos:column="16"/></literal></expr>;<pos:position pos:line="23" pos:column="17"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
