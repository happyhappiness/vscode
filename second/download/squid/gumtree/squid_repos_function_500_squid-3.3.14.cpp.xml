<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_500_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">rotate<pos:position pos:line="2" pos:column="7"/></name><parameter_list pos:line="2" pos:column="7">(<parameter><decl><type><specifier pos:line="2" pos:column="8">const<pos:position pos:line="2" pos:column="13"/></specifier> <name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier></type><name pos:line="2" pos:column="20">path<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">int<pos:position pos:line="2" pos:column="29"/></name></type> <name pos:line="2" pos:column="30">rotate_count<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">S_ISREG<pos:position pos:line="4" pos:column="15"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">stat<pos:position pos:line="5" pos:column="16"/></name></name></type> <name pos:line="5" pos:column="17">sb<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">i<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">from<pos:position pos:line="8" pos:column="14"/></name><index pos:line="8" pos:column="14">[<expr><name pos:line="8" pos:column="15">MAXPATHLEN<pos:position pos:line="8" pos:column="25"/></name></expr>]<pos:position pos:line="8" pos:column="26"/></index></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name></type> <name><name pos:line="9" pos:column="10">to<pos:position pos:line="9" pos:column="12"/></name><index pos:line="9" pos:column="12">[<expr><name pos:line="9" pos:column="13">MAXPATHLEN<pos:position pos:line="9" pos:column="23"/></name></expr>]<pos:position pos:line="9" pos:column="24"/></index></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">path<pos:position pos:line="10" pos:column="16"/></name></expr></argument>)<pos:position pos:line="10" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="18"/></expr_stmt>
<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef<pos:position pos:line="11" pos:column="7"/></cpp:directive> <name pos:line="11" pos:column="8">S_ISREG<pos:position pos:line="11" pos:column="15"/></name></cpp:ifdef>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">stat<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">path<pos:position pos:line="12" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="20">&amp;<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="21">sb<pos:position pos:line="12" pos:column="23"/></name></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call> <operator pos:line="12" pos:column="25">==<pos:position pos:line="12" pos:column="27"/></operator> <literal type="number" pos:line="12" pos:column="28">0<pos:position pos:line="12" pos:column="29"/></literal></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
        <block type="pseudo"><if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><call><name pos:line="13" pos:column="13">S_ISREG<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name><name pos:line="13" pos:column="21">sb<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">.<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">st_mode<pos:position pos:line="13" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call> <operator pos:line="13" pos:column="33">==<pos:position pos:line="13" pos:column="35"/></operator> <literal type="number" pos:line="13" pos:column="36">0<pos:position pos:line="13" pos:column="37"/></literal></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38">
            <block type="pseudo"><return pos:line="14" pos:column="13">return;<pos:position pos:line="14" pos:column="20"/></return></block></then></if></block></then></if>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="16" pos:column="5">/* Rotate numbers 0 through N up one */</comment>
    <for pos:line="17" pos:column="5">for <control pos:line="17" pos:column="9">(<init><expr><name pos:line="17" pos:column="10">i<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <name pos:line="17" pos:column="14">rotate_count<pos:position pos:line="17" pos:column="26"/></name></expr>;<pos:position pos:line="17" pos:column="27"/></init> <condition><expr><name pos:line="17" pos:column="28">i<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">&gt;<pos:position pos:line="17" pos:column="34"/></operator> <literal type="number" pos:line="17" pos:column="32">1<pos:position pos:line="17" pos:column="33"/></literal></expr>;<pos:position pos:line="17" pos:column="34"/></condition><incr/>)<pos:position pos:line="17" pos:column="35"/></control> <block pos:line="17" pos:column="36">{
        <expr_stmt><expr><operator pos:line="18" pos:column="9">--<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">i<pos:position pos:line="18" pos:column="12"/></name></expr>;<pos:position pos:line="18" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">snprintf<pos:position pos:line="19" pos:column="17"/></name><argument_list pos:line="19" pos:column="17">(<argument><expr><name pos:line="19" pos:column="18">from<pos:position pos:line="19" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">MAXPATHLEN<pos:position pos:line="19" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="36">"%s.%d"<pos:position pos:line="19" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">path<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">i<pos:position pos:line="19" pos:column="52"/></name> <operator pos:line="19" pos:column="53">-<pos:position pos:line="19" pos:column="54"/></operator> <literal type="number" pos:line="19" pos:column="55">1<pos:position pos:line="19" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">snprintf<pos:position pos:line="20" pos:column="17"/></name><argument_list pos:line="20" pos:column="17">(<argument><expr><name pos:line="20" pos:column="18">to<pos:position pos:line="20" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="22">MAXPATHLEN<pos:position pos:line="20" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="34">"%s.%d"<pos:position pos:line="20" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="43">path<pos:position pos:line="20" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="49">i<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
<cpp:if pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">if<pos:position pos:line="21" pos:column="4"/></cpp:directive> <expr><name pos:line="21" pos:column="5">_SQUID_OS2_<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">||<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">_SQUID_WINDOWS_<pos:position pos:line="21" pos:column="35"/></name></expr></cpp:if>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">remove<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">to<pos:position pos:line="22" pos:column="22"/></name></expr></argument>)<pos:position pos:line="22" pos:column="23"/></argument_list></call> <operator pos:line="22" pos:column="24">&lt;<pos:position pos:line="22" pos:column="28"/></operator> <literal type="number" pos:line="22" pos:column="26">0<pos:position pos:line="22" pos:column="27"/></literal></expr>)<pos:position pos:line="22" pos:column="28"/></condition><then pos:line="22" pos:column="28"> <block pos:line="22" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">fprintf<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">stderr<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="29">"WARNING: remove '%s' failure: %s\n"<pos:position pos:line="23" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="67">to<pos:position pos:line="23" pos:column="69"/></name></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="71">xstrerror<pos:position pos:line="23" pos:column="80"/></name><argument_list pos:line="23" pos:column="80">()<pos:position pos:line="23" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="84"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">rename<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">from<pos:position pos:line="26" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="26">to<pos:position pos:line="26" pos:column="28"/></name></expr></argument>)<pos:position pos:line="26" pos:column="29"/></argument_list></call> <operator pos:line="26" pos:column="30">&lt;<pos:position pos:line="26" pos:column="34"/></operator> <literal type="number" pos:line="26" pos:column="32">0<pos:position pos:line="26" pos:column="33"/></literal> <operator pos:line="26" pos:column="34">&amp;&amp;<pos:position pos:line="26" pos:column="44"/></operator> <name pos:line="26" pos:column="37">errno<pos:position pos:line="26" pos:column="42"/></name> <operator pos:line="26" pos:column="43">!=<pos:position pos:line="26" pos:column="45"/></operator> <name pos:line="26" pos:column="46">ENOENT<pos:position pos:line="26" pos:column="52"/></name></expr>)<pos:position pos:line="26" pos:column="53"/></condition><then pos:line="26" pos:column="53"> <block pos:line="26" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">fprintf<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">stderr<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="29">"WARNING: rename '%s' to '%s' failure: %s\n"<pos:position pos:line="27" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="75">from<pos:position pos:line="27" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="81">to<pos:position pos:line="27" pos:column="83"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="85">xstrerror<pos:position pos:line="27" pos:column="94"/></name><argument_list pos:line="27" pos:column="94">()<pos:position pos:line="27" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="98"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
    }<pos:position pos:line="29" pos:column="6"/></block></for>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">rotate_count<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">&gt;<pos:position pos:line="30" pos:column="26"/></operator> <literal type="number" pos:line="30" pos:column="24">0<pos:position pos:line="30" pos:column="25"/></literal></expr>)<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26"> <block pos:line="30" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">snprintf<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">to<pos:position pos:line="31" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="22">MAXPATHLEN<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="34">"%s.%d"<pos:position pos:line="31" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">path<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="49">0<pos:position pos:line="31" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="52"/></expr_stmt>
<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><name pos:line="32" pos:column="5">_SQUID_OS2_<pos:position pos:line="32" pos:column="16"/></name> <operator pos:line="32" pos:column="17">||<pos:position pos:line="32" pos:column="19"/></operator> <name pos:line="32" pos:column="20">_SQUID_WINDOWS_<pos:position pos:line="32" pos:column="35"/></name></expr></cpp:if>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">remove<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">to<pos:position pos:line="33" pos:column="22"/></name></expr></argument>)<pos:position pos:line="33" pos:column="23"/></argument_list></call> <operator pos:line="33" pos:column="24">&lt;<pos:position pos:line="33" pos:column="28"/></operator> <literal type="number" pos:line="33" pos:column="26">0<pos:position pos:line="33" pos:column="27"/></literal></expr>)<pos:position pos:line="33" pos:column="28"/></condition><then pos:line="33" pos:column="28"> <block pos:line="33" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">fprintf<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name pos:line="34" pos:column="21">stderr<pos:position pos:line="34" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="29">"WARNING: remove '%s' failure: %s\n"<pos:position pos:line="34" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="67">to<pos:position pos:line="34" pos:column="69"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="71">xstrerror<pos:position pos:line="34" pos:column="80"/></name><argument_list pos:line="34" pos:column="80">()<pos:position pos:line="34" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="84"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">rename<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name pos:line="37" pos:column="20">path<pos:position pos:line="37" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="26">to<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call> <operator pos:line="37" pos:column="30">&lt;<pos:position pos:line="37" pos:column="34"/></operator> <literal type="number" pos:line="37" pos:column="32">0<pos:position pos:line="37" pos:column="33"/></literal> <operator pos:line="37" pos:column="34">&amp;&amp;<pos:position pos:line="37" pos:column="44"/></operator> <name pos:line="37" pos:column="37">errno<pos:position pos:line="37" pos:column="42"/></name> <operator pos:line="37" pos:column="43">!=<pos:position pos:line="37" pos:column="45"/></operator> <name pos:line="37" pos:column="46">ENOENT<pos:position pos:line="37" pos:column="52"/></name></expr>)<pos:position pos:line="37" pos:column="53"/></condition><then pos:line="37" pos:column="53"> <block pos:line="37" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">fprintf<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">stderr<pos:position pos:line="38" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="29">"WARNING: rename %s to %s failure: %s\n"<pos:position pos:line="38" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="71">path<pos:position pos:line="38" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="77">to<pos:position pos:line="38" pos:column="79"/></name></expr></argument>, <argument><expr><call><name pos:line="38" pos:column="81">xstrerror<pos:position pos:line="38" pos:column="90"/></name><argument_list pos:line="38" pos:column="90">()<pos:position pos:line="38" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="94"/></expr_stmt>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
