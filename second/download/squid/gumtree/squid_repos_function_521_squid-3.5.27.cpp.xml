<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_521_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">getLoginConfig<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(
    <parameter><decl><type><name pos:line="2" pos:column="5">LDAP<pos:position pos:line="2" pos:column="9"/></name>     <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">ld<pos:position pos:line="2" pos:column="17"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name>     <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">objectDN<pos:position pos:line="3" pos:column="23"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">int<pos:position pos:line="4" pos:column="17"/></name></type>  <name pos:line="4" pos:column="19">methodIDLen<pos:position pos:line="4" pos:column="30"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">int<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">methodID<pos:position pos:line="5" pos:column="27"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name>     <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">tag<pos:position pos:line="6" pos:column="18"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="7" pos:column="5">size_t<pos:position pos:line="7" pos:column="11"/></name>   <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">dataLen<pos:position pos:line="7" pos:column="22"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="8" pos:column="5">void<pos:position pos:line="8" pos:column="9"/></name>     <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">data<pos:position pos:line="8" pos:column="19"/></name></decl></parameter> )<pos:position pos:line="8" pos:column="21"/></parameter_list>
<block pos:line="9" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type>     <name pos:line="10" pos:column="13">err<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name>  <name pos:line="11" pos:column="13">berval<pos:position pos:line="11" pos:column="19"/></name></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">requestBV<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><name pos:line="11" pos:column="33">NULL<pos:position pos:line="11" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name>    <modifier pos:line="12" pos:column="13">*<pos:position pos:line="12" pos:column="14"/></modifier></type><name pos:line="12" pos:column="14">replyOID<pos:position pos:line="12" pos:column="22"/></name> <init pos:line="12" pos:column="23">= <expr><name pos:line="12" pos:column="25">NULL<pos:position pos:line="12" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">struct<pos:position pos:line="13" pos:column="11"/></name>  <name pos:line="13" pos:column="13">berval<pos:position pos:line="13" pos:column="19"/></name></name> <modifier pos:line="13" pos:column="20">*<pos:position pos:line="13" pos:column="21"/></modifier></type><name pos:line="13" pos:column="21">replyBV<pos:position pos:line="13" pos:column="28"/></name> <init pos:line="13" pos:column="29">= <expr><name pos:line="13" pos:column="31">NULL<pos:position pos:line="13" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type>     <name pos:line="14" pos:column="13">serverVersion<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><literal type="number" pos:line="14" pos:column="29">0<pos:position pos:line="14" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="31"/></decl_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* Validate unicode parameters. */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><call><name pos:line="17" pos:column="10">strlen<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><name pos:line="17" pos:column="17">objectDN<pos:position pos:line="17" pos:column="25"/></name></expr></argument>)<pos:position pos:line="17" pos:column="26"/></argument_list></call> <operator pos:line="17" pos:column="27">==<pos:position pos:line="17" pos:column="29"/></operator> <literal type="number" pos:line="17" pos:column="30">0<pos:position pos:line="17" pos:column="31"/></literal><operator pos:line="17" pos:column="31">)<pos:position pos:line="17" pos:column="32"/></operator> <operator pos:line="17" pos:column="33">||<pos:position pos:line="17" pos:column="35"/></operator> <name pos:line="17" pos:column="36">ld<pos:position pos:line="17" pos:column="38"/></name> <operator pos:line="17" pos:column="39">==<pos:position pos:line="17" pos:column="41"/></operator> <name pos:line="17" pos:column="42">NULL<pos:position pos:line="17" pos:column="46"/></name></expr>)<pos:position pos:line="17" pos:column="47"/></condition><then pos:line="17" pos:column="47"> <block pos:line="17" pos:column="48">{
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">LDAP_NO_SUCH_ATTRIBUTE<pos:position pos:line="18" pos:column="38"/></name></expr>;<pos:position pos:line="18" pos:column="39"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="21" pos:column="5">err<pos:position pos:line="21" pos:column="8"/></name> <operator pos:line="21" pos:column="9">=<pos:position pos:line="21" pos:column="10"/></operator> <call><name pos:line="21" pos:column="11">berEncodeLoginData<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><operator pos:line="21" pos:column="30">&amp;<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="31">requestBV<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="42">objectDN<pos:position pos:line="21" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="52">methodIDLen<pos:position pos:line="21" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="65">methodID<pos:position pos:line="21" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="75">tag<pos:position pos:line="21" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="80">0<pos:position pos:line="21" pos:column="81"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="83">NULL<pos:position pos:line="21" pos:column="87"/></name></expr></argument>)<pos:position pos:line="21" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="89"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">err<pos:position pos:line="22" pos:column="12"/></name></expr>)<pos:position pos:line="22" pos:column="13"/></condition><then pos:line="22" pos:column="13"> <block pos:line="22" pos:column="14">{
        <empty_stmt pos:line="23" pos:column="9">;<pos:position pos:line="23" pos:column="10"/></empty_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then> <elseif pos:line="24" pos:column="7">else <if pos:line="24" pos:column="12">if <condition pos:line="24" pos:column="15">(<expr><operator pos:line="24" pos:column="16">!<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">err<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">&amp;&amp;<pos:position pos:line="24" pos:column="31"/></operator> <operator pos:line="24" pos:column="24">(<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">err<pos:position pos:line="24" pos:column="28"/></name> <operator pos:line="24" pos:column="29">=<pos:position pos:line="24" pos:column="30"/></operator> <call><name pos:line="24" pos:column="31">ldap_extended_operation_s<pos:position pos:line="24" pos:column="56"/></name><argument_list pos:line="24" pos:column="56">(<argument><expr><name pos:line="24" pos:column="57">ld<pos:position pos:line="24" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="61">NMASLDAP_GET_LOGIN_CONFIG_REQUEST<pos:position pos:line="24" pos:column="94"/></name></expr></argument>,
                              <argument><expr><name pos:line="25" pos:column="31">requestBV<pos:position pos:line="25" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="42">NULL<pos:position pos:line="25" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="48">NULL<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="54">&amp;<pos:position pos:line="25" pos:column="59"/></operator><name pos:line="25" pos:column="55">replyOID<pos:position pos:line="25" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="65">&amp;<pos:position pos:line="25" pos:column="70"/></operator><name pos:line="25" pos:column="66">replyBV<pos:position pos:line="25" pos:column="73"/></name></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call><operator pos:line="25" pos:column="74">)<pos:position pos:line="25" pos:column="75"/></operator></expr>)<pos:position pos:line="25" pos:column="76"/></condition><then pos:line="25" pos:column="76"> <block pos:line="25" pos:column="77">{
        <comment type="block" pos:line="26" pos:column="9">/* Call the ldap_extended_operation (synchronously) */</comment>
        <empty_stmt pos:line="27" pos:column="9">;<pos:position pos:line="27" pos:column="10"/></empty_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if></elseif> <elseif pos:line="28" pos:column="7">else <if pos:line="28" pos:column="12">if <condition pos:line="28" pos:column="15">(<expr><operator pos:line="28" pos:column="16">!<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">replyOID<pos:position pos:line="28" pos:column="25"/></name></expr>)<pos:position pos:line="28" pos:column="26"/></condition><then pos:line="28" pos:column="26"> <block pos:line="28" pos:column="27">{
        <comment type="block" pos:line="29" pos:column="9">/* Make sure there is a return OID */</comment>
        <expr_stmt><expr><name pos:line="30" pos:column="9">err<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <name pos:line="30" pos:column="15">LDAP_NOT_SUPPORTED<pos:position pos:line="30" pos:column="33"/></name></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if></elseif> <elseif pos:line="31" pos:column="7">else <if pos:line="31" pos:column="12">if <condition pos:line="31" pos:column="15">(<expr><call><name pos:line="31" pos:column="16">strcmp<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">replyOID<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="33">NMASLDAP_GET_LOGIN_CONFIG_RESPONSE<pos:position pos:line="31" pos:column="67"/></name></expr></argument>)<pos:position pos:line="31" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="69"/></condition><then pos:line="31" pos:column="69"> <block pos:line="31" pos:column="70">{
        <comment type="block" pos:line="32" pos:column="9">/* Is this what we were expecting to get back. */</comment>
        <expr_stmt><expr><name pos:line="33" pos:column="9">err<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">LDAP_NOT_SUPPORTED<pos:position pos:line="33" pos:column="33"/></name></expr>;<pos:position pos:line="33" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if></elseif> <elseif pos:line="34" pos:column="7">else <if pos:line="34" pos:column="12">if <condition pos:line="34" pos:column="15">(<expr><operator pos:line="34" pos:column="16">!<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">replyBV<pos:position pos:line="34" pos:column="24"/></name></expr>)<pos:position pos:line="34" pos:column="25"/></condition><then pos:line="34" pos:column="25"> <block pos:line="34" pos:column="26">{
        <comment type="block" pos:line="35" pos:column="9">/* Do we have a good returned berval? */</comment>

        <comment type="block" pos:line="37" pos:column="9">/* No; returned berval means we experienced a rather drastic error. */</comment>
        <comment type="block" pos:line="38" pos:column="9">/* Return operations error. */</comment>
        <expr_stmt><expr><name pos:line="39" pos:column="9">err<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <name pos:line="39" pos:column="15">LDAP_OPERATIONS_ERROR<pos:position pos:line="39" pos:column="36"/></name></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if></elseif> <else pos:line="40" pos:column="7">else <block pos:line="40" pos:column="12">{

        <expr_stmt><expr><name pos:line="42" pos:column="9">err<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <call><name pos:line="42" pos:column="15">berDecodeLoginData<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">replyBV<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="43">&amp;<pos:position pos:line="42" pos:column="48"/></operator><name pos:line="42" pos:column="44">serverVersion<pos:position pos:line="42" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="59">dataLen<pos:position pos:line="42" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="68">data<pos:position pos:line="42" pos:column="72"/></name></expr></argument>)<pos:position pos:line="42" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="74"/></expr_stmt>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">serverVersion<pos:position pos:line="44" pos:column="26"/></name> <operator pos:line="44" pos:column="27">!=<pos:position pos:line="44" pos:column="29"/></operator> <name pos:line="44" pos:column="30">NMAS_LDAP_EXT_VERSION<pos:position pos:line="44" pos:column="51"/></name></expr>)<pos:position pos:line="44" pos:column="52"/></condition><then pos:line="44" pos:column="52"> <block pos:line="44" pos:column="53">{
            <expr_stmt><expr><name pos:line="45" pos:column="13">err<pos:position pos:line="45" pos:column="16"/></name> <operator pos:line="45" pos:column="17">=<pos:position pos:line="45" pos:column="18"/></operator> <name pos:line="45" pos:column="19">LDAP_OPERATIONS_ERROR<pos:position pos:line="45" pos:column="40"/></name></expr>;<pos:position pos:line="45" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></else></if>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">replyBV<pos:position pos:line="49" pos:column="16"/></name></expr>)<pos:position pos:line="49" pos:column="17"/></condition><then pos:line="49" pos:column="17"> <block pos:line="49" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">ber_bvfree<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><name pos:line="50" pos:column="20">replyBV<pos:position pos:line="50" pos:column="27"/></name></expr></argument>)<pos:position pos:line="50" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="53" pos:column="5">/* Free the return OID string if one was returned. */</comment>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">replyOID<pos:position pos:line="54" pos:column="17"/></name></expr>)<pos:position pos:line="54" pos:column="18"/></condition><then pos:line="54" pos:column="18"> <block pos:line="54" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">ldap_memfree<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument><expr><name pos:line="55" pos:column="22">replyOID<pos:position pos:line="55" pos:column="30"/></name></expr></argument>)<pos:position pos:line="55" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="58" pos:column="5">/* Free memory allocated while building the request ber and berval. */</comment>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">requestBV<pos:position pos:line="59" pos:column="18"/></name></expr>)<pos:position pos:line="59" pos:column="19"/></condition><then pos:line="59" pos:column="19"> <block pos:line="59" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">ber_bvfree<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><name pos:line="60" pos:column="20">requestBV<pos:position pos:line="60" pos:column="29"/></name></expr></argument>)<pos:position pos:line="60" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="63" pos:column="5">/* Return the appropriate error/success code. */</comment>
    <return pos:line="64" pos:column="5">return <expr><name pos:line="64" pos:column="12">err<pos:position pos:line="64" pos:column="15"/></name></expr>;<pos:position pos:line="64" pos:column="16"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
