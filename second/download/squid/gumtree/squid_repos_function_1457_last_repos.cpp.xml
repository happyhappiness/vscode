<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1457_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">msghdr_write_method<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">fd<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">buf<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">int<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">len<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">PROF_start<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">write<pos:position pos:line="4" pos:column="21"/></name></expr></argument>)<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="23"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">int<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">i<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><call><name pos:line="5" pos:column="19">sendmsg<pos:position pos:line="5" pos:column="26"/></name><argument_list pos:line="5" pos:column="26">(<argument><expr><name pos:line="5" pos:column="27">fd<pos:position pos:line="5" pos:column="29"/></name></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="5" pos:column="31">reinterpret_cast<argument_list type="generic" pos:line="5" pos:column="47">&lt;<argument><expr><specifier pos:line="5" pos:column="48">const<pos:position pos:line="5" pos:column="53"/></specifier> <name pos:line="5" pos:column="54">msghdr<pos:position pos:line="5" pos:column="60"/></name><operator pos:line="5" pos:column="60">*<pos:position pos:line="5" pos:column="61"/></operator></expr></argument>&gt;<pos:position pos:line="5" pos:column="65"/></argument_list><argument_list pos:line="5" pos:column="62">(<argument><expr><name pos:line="5" pos:column="63">buf<pos:position pos:line="5" pos:column="66"/></name></expr></argument>)<pos:position pos:line="5" pos:column="67"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="5" pos:column="69">MSG_NOSIGNAL<pos:position pos:line="5" pos:column="81"/></name></expr></argument>)<pos:position pos:line="5" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="83"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">PROF_stop<pos:position pos:line="6" pos:column="14"/></name><argument_list pos:line="6" pos:column="14">(<argument><expr><name pos:line="6" pos:column="15">write<pos:position pos:line="6" pos:column="20"/></name></expr></argument>)<pos:position pos:line="6" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="22"/></expr_stmt>
    <return pos:line="7" pos:column="5">return <expr><ternary><condition><expr><name pos:line="7" pos:column="12">i<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">&gt;<pos:position pos:line="7" pos:column="18"/></operator> <literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr> ?<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19"> <expr><name pos:line="7" pos:column="20">len<pos:position pos:line="7" pos:column="23"/></name></expr> <pos:position pos:line="7" pos:column="24"/></then><else pos:line="7" pos:column="24">: <expr><name pos:line="7" pos:column="26">i<pos:position pos:line="7" pos:column="27"/></name></expr></else></ternary></expr>;<pos:position pos:line="7" pos:column="28"/></return> <comment type="line" pos:line="7" pos:column="29">// len is imprecise but the caller expects a match</comment>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
