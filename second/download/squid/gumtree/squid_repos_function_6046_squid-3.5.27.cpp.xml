<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6046_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Log<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">TcpLogger<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">DelayedReconnect<pos:position pos:line="2" pos:column="33"/></name></name><parameter_list pos:line="2" pos:column="33">(<parameter><decl><type><name pos:line="2" pos:column="34">void<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">data<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">Pointer<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">ptr<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><cast type="static" pos:line="4" pos:column="20">static_cast<argument_list type="generic" pos:line="4" pos:column="31">&lt;<argument><expr><name pos:line="4" pos:column="32">Pointer<pos:position pos:line="4" pos:column="39"/></name><operator pos:line="4" pos:column="39">*<pos:position pos:line="4" pos:column="40"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="44"/></argument_list><argument_list pos:line="4" pos:column="41">(<argument><expr><name pos:line="4" pos:column="42">data<pos:position pos:line="4" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4" pos:column="47"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">ptr<pos:position pos:line="5" pos:column="15"/></name></expr></argument>)<pos:position pos:line="5" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="17"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<decl><type><name pos:line="6" pos:column="9">TcpLogger<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">logger<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><call><name><name pos:line="6" pos:column="29">ptr<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">-&gt;<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="34">valid<pos:position pos:line="6" pos:column="39"/></name></name><argument_list pos:line="6" pos:column="39">()<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr></init></decl>)<pos:position pos:line="6" pos:column="42"/></condition><then pos:line="6" pos:column="42"> <block pos:line="6" pos:column="43">{
        <comment type="line" pos:line="7" pos:column="9">// Get back inside AsyncJob protections by scheduling another call.</comment>
        <typedef pos:line="8" pos:column="9">typedef <type><name><name pos:line="8" pos:column="17">NullaryMemFunT<pos:position pos:line="8" pos:column="31"/></name><argument_list type="generic" pos:line="8" pos:column="31">&lt;<argument><expr><name pos:line="8" pos:column="32">TcpLogger<pos:position pos:line="8" pos:column="41"/></name></expr></argument>&gt;<pos:position pos:line="8" pos:column="45"/></argument_list></name></type> <name pos:line="8" pos:column="43">Dialer<pos:position pos:line="8" pos:column="49"/></name>;<pos:position pos:line="8" pos:column="50"/></typedef>
        <decl_stmt><decl><type><name><name pos:line="9" pos:column="9">AsyncCall<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">::<pos:position pos:line="9" pos:column="20"/></operator><name pos:line="9" pos:column="20">Pointer<pos:position pos:line="9" pos:column="27"/></name></name></type> <name pos:line="9" pos:column="28">call<pos:position pos:line="9" pos:column="32"/></name> <init pos:line="9" pos:column="33">= <expr><call><name pos:line="9" pos:column="35">JobCallback<pos:position pos:line="9" pos:column="46"/></name><argument_list pos:line="9" pos:column="46">(<argument><expr><name pos:line="9" pos:column="47">MY_DEBUG_SECTION<pos:position pos:line="9" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="65">5<pos:position pos:line="9" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="68">Dialer<pos:position pos:line="9" pos:column="74"/></name></expr></argument>,
                                              <argument><expr><name pos:line="10" pos:column="47">logger<pos:position pos:line="10" pos:column="53"/></name></expr></argument>,
                                              <argument><expr><name><name pos:line="11" pos:column="47">Log<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">::<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="52">TcpLogger<pos:position pos:line="11" pos:column="61"/></name><operator pos:line="11" pos:column="61">::<pos:position pos:line="11" pos:column="63"/></operator><name pos:line="11" pos:column="63">delayedReconnect<pos:position pos:line="11" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="81"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">ScheduleCallHere<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">call<pos:position pos:line="12" pos:column="30"/></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="14" pos:column="5">delete<pos:position pos:line="14" pos:column="11"/></operator> <name pos:line="14" pos:column="12">ptr<pos:position pos:line="14" pos:column="15"/></name></expr>;<pos:position pos:line="14" pos:column="16"/></expr_stmt>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
