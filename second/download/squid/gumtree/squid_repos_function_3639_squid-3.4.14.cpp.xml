<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3639_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">storeRebuildParseEntry<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">MemBuf<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">&amp;<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="32">buf<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">StoreEntry<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">tmpe<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">cache_key<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">key<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
                       <parameter><decl><type><name pos:line="3" pos:column="24">StoreRebuildData<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">&amp;<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="42">stats<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>,
                       <parameter><decl><type><name pos:line="4" pos:column="24">uint64_t<pos:position pos:line="4" pos:column="32"/></name></type> <name pos:line="4" pos:column="33">expectedSize<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="46"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">swap_hdr_len<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><literal type="number" pos:line="6" pos:column="24">0<pos:position pos:line="6" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">StoreMetaUnpacker<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">aBuilder<pos:position pos:line="7" pos:column="31"/></name><argument_list pos:line="7" pos:column="31">(<argument><expr><call><name><name pos:line="7" pos:column="32">buf<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">.<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="36">content<pos:position pos:line="7" pos:column="43"/></name></name><argument_list pos:line="7" pos:column="43">()<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="47">buf<pos:position pos:line="7" pos:column="50"/></name><operator pos:line="7" pos:column="50">.<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="51">contentSize<pos:position pos:line="7" pos:column="62"/></name></name><argument_list pos:line="7" pos:column="62">()<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="7" pos:column="66">&amp;<pos:position pos:line="7" pos:column="71"/></operator><name pos:line="7" pos:column="67">swap_hdr_len<pos:position pos:line="7" pos:column="79"/></name></expr></argument>)<pos:position pos:line="7" pos:column="80"/></argument_list></decl>;<pos:position pos:line="7" pos:column="81"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name><name pos:line="8" pos:column="9">aBuilder<pos:position pos:line="8" pos:column="17"/></name><operator pos:line="8" pos:column="17">.<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="18">isBufferZero<pos:position pos:line="8" pos:column="30"/></name></name><argument_list pos:line="8" pos:column="30">()<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33"> <block pos:line="8" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">47<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="9" pos:column="19">5<pos:position pos:line="9" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="22">HERE<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">&lt;&lt;<pos:position pos:line="9" pos:column="35"/></operator> <literal type="string" pos:line="9" pos:column="30">"skipping empty record."<pos:position pos:line="9" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name><name pos:line="13" pos:column="10">aBuilder<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">isBufferSane<pos:position pos:line="13" pos:column="31"/></name></name><argument_list pos:line="13" pos:column="31">()<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="34"/></condition><then pos:line="13" pos:column="34"> <block pos:line="13" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">47<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="20">DBG_IMPORTANT<pos:position pos:line="14" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="35">"WARNING: Ignoring malformed cache entry."<pos:position pos:line="14" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="79"/></expr_stmt>
        <return pos:line="15" pos:column="9">return <expr><literal type="boolean" pos:line="15" pos:column="16">false<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">StoreMeta<pos:position pos:line="18" pos:column="14"/></name> <modifier pos:line="18" pos:column="15">*<pos:position pos:line="18" pos:column="16"/></modifier></type><name pos:line="18" pos:column="16">tlv_list<pos:position pos:line="18" pos:column="24"/></name> <init pos:line="18" pos:column="25">= <expr><call><name><name pos:line="18" pos:column="27">aBuilder<pos:position pos:line="18" pos:column="35"/></name><operator pos:line="18" pos:column="35">.<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="36">createStoreMeta<pos:position pos:line="18" pos:column="51"/></name></name><argument_list pos:line="18" pos:column="51">()<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="54"/></decl_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">tlv_list<pos:position pos:line="19" pos:column="18"/></name></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19"> <block pos:line="19" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">47<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="20">DBG_IMPORTANT<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="35">"WARNING: Ignoring cache entry with invalid "<pos:position pos:line="20" pos:column="80"/></literal> <operator pos:line="20" pos:column="81">&lt;&lt;<pos:position pos:line="20" pos:column="89"/></operator>
               <literal type="string" pos:line="21" pos:column="16">"meta data"<pos:position pos:line="21" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><literal type="boolean" pos:line="22" pos:column="16">false<pos:position pos:line="22" pos:column="21"/></literal></expr>;<pos:position pos:line="22" pos:column="22"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="25" pos:column="5">// TODO: consume parsed metadata?</comment>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">debugs<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="number" pos:line="27" pos:column="12">47<pos:position pos:line="27" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="27" pos:column="15">7<pos:position pos:line="27" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="18">HERE<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;&lt;<pos:position pos:line="27" pos:column="31"/></operator> <literal type="string" pos:line="27" pos:column="26">"successful swap meta unpacking"<pos:position pos:line="27" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">memset<pos:position pos:line="28" pos:column="11"/></name><argument_list pos:line="28" pos:column="11">(<argument><expr><name pos:line="28" pos:column="12">key<pos:position pos:line="28" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="17">'\0'<pos:position pos:line="28" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="23">SQUID_MD5_DIGEST_LENGTH<pos:position pos:line="28" pos:column="46"/></name></expr></argument>)<pos:position pos:line="28" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="48"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="30" pos:column="5">InitStoreEntry<pos:position pos:line="30" pos:column="19"/></name></type> <name pos:line="30" pos:column="20">visitor<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><operator pos:line="30" pos:column="28">&amp;<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="29">tmpe<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="35">key<pos:position pos:line="30" pos:column="38"/></name></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></decl>;<pos:position pos:line="30" pos:column="40"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">for_each<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><operator pos:line="31" pos:column="14">*<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">tlv_list<pos:position pos:line="31" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="25">visitor<pos:position pos:line="31" pos:column="32"/></name></expr></argument>)<pos:position pos:line="31" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">storeSwapTLVFree<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">tlv_list<pos:position pos:line="32" pos:column="30"/></name></expr></argument>)<pos:position pos:line="32" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="33" pos:column="5">tlv_list<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <name pos:line="33" pos:column="16">NULL<pos:position pos:line="33" pos:column="20"/></name></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">storeKeyNull<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">key<pos:position pos:line="35" pos:column="25"/></name></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="27"/></condition><then pos:line="35" pos:column="27"> <block pos:line="35" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">debugs<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><literal type="number" pos:line="36" pos:column="16">47<pos:position pos:line="36" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="20">DBG_IMPORTANT<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="35">"WARNING: Ignoring keyless cache entry"<pos:position pos:line="36" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="76"/></expr_stmt>
        <return pos:line="37" pos:column="9">return <expr><literal type="boolean" pos:line="37" pos:column="16">false<pos:position pos:line="37" pos:column="21"/></literal></expr>;<pos:position pos:line="37" pos:column="22"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="40" pos:column="5">tmpe<pos:position pos:line="40" pos:column="9"/></name><operator pos:line="40" pos:column="9">.<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="10">key<pos:position pos:line="40" pos:column="13"/></name></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">key<pos:position pos:line="40" pos:column="19"/></name></expr>;<pos:position pos:line="40" pos:column="20"/></expr_stmt>
    <comment type="block" pos:line="41" pos:column="5">/* check sizes */</comment>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">expectedSize<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">&gt;<pos:position pos:line="43" pos:column="26"/></operator> <literal type="number" pos:line="43" pos:column="24">0<pos:position pos:line="43" pos:column="25"/></literal></expr>)<pos:position pos:line="43" pos:column="26"/></condition><then pos:line="43" pos:column="26"> <block pos:line="43" pos:column="27">{
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">tmpe<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">.<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">swap_file_sz<pos:position pos:line="44" pos:column="30"/></name></name> <operator pos:line="44" pos:column="31">==<pos:position pos:line="44" pos:column="33"/></operator> <literal type="number" pos:line="44" pos:column="34">0<pos:position pos:line="44" pos:column="35"/></literal></expr>)<pos:position pos:line="44" pos:column="36"/></condition><then pos:line="44" pos:column="36"> <block pos:line="44" pos:column="37">{
            <expr_stmt><expr><name><name pos:line="45" pos:column="13">tmpe<pos:position pos:line="45" pos:column="17"/></name><operator pos:line="45" pos:column="17">.<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="18">swap_file_sz<pos:position pos:line="45" pos:column="30"/></name></name> <operator pos:line="45" pos:column="31">=<pos:position pos:line="45" pos:column="32"/></operator> <name pos:line="45" pos:column="33">expectedSize<pos:position pos:line="45" pos:column="45"/></name></expr>;<pos:position pos:line="45" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></then> <elseif pos:line="46" pos:column="11">else <if pos:line="46" pos:column="16">if <condition pos:line="46" pos:column="19">(<expr><name><name pos:line="46" pos:column="20">tmpe<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">.<pos:position pos:line="46" pos:column="25"/></operator><name pos:line="46" pos:column="25">swap_file_sz<pos:position pos:line="46" pos:column="37"/></name></name> <operator pos:line="46" pos:column="38">==<pos:position pos:line="46" pos:column="40"/></operator> <call pos:line="46" pos:column="41">(<name pos:line="46" pos:column="42">uint64_t<pos:position pos:line="46" pos:column="50"/></name>)<argument_list pos:line="46" pos:column="51">(<argument><expr><name pos:line="46" pos:column="52">expectedSize<pos:position pos:line="46" pos:column="64"/></name> <operator pos:line="46" pos:column="65">-<pos:position pos:line="46" pos:column="66"/></operator> <name pos:line="46" pos:column="67">swap_hdr_len<pos:position pos:line="46" pos:column="79"/></name></expr></argument>)<pos:position pos:line="46" pos:column="80"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="81"/></condition><then pos:line="46" pos:column="81"> <block pos:line="46" pos:column="82">{
            <expr_stmt><expr><name><name pos:line="47" pos:column="13">tmpe<pos:position pos:line="47" pos:column="17"/></name><operator pos:line="47" pos:column="17">.<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">swap_file_sz<pos:position pos:line="47" pos:column="30"/></name></name> <operator pos:line="47" pos:column="31">=<pos:position pos:line="47" pos:column="32"/></operator> <name pos:line="47" pos:column="33">expectedSize<pos:position pos:line="47" pos:column="45"/></name></expr>;<pos:position pos:line="47" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if></elseif> <elseif pos:line="48" pos:column="11">else <if pos:line="48" pos:column="16">if <condition pos:line="48" pos:column="19">(<expr><name><name pos:line="48" pos:column="20">tmpe<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">.<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">swap_file_sz<pos:position pos:line="48" pos:column="37"/></name></name> <operator pos:line="48" pos:column="38">!=<pos:position pos:line="48" pos:column="40"/></operator> <name pos:line="48" pos:column="41">expectedSize<pos:position pos:line="48" pos:column="53"/></name></expr>)<pos:position pos:line="48" pos:column="54"/></condition><then pos:line="48" pos:column="54"> <block pos:line="48" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">debugs<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><literal type="number" pos:line="49" pos:column="20">47<pos:position pos:line="49" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="24">DBG_IMPORTANT<pos:position pos:line="49" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="39">"WARNING: Ignoring cache entry due to a "<pos:position pos:line="49" pos:column="80"/></literal> <operator pos:line="49" pos:column="81">&lt;&lt;<pos:position pos:line="49" pos:column="89"/></operator>
                   <literal type="string" pos:line="50" pos:column="20">"SIZE MISMATCH "<pos:position pos:line="50" pos:column="36"/></literal> <operator pos:line="50" pos:column="37">&lt;&lt;<pos:position pos:line="50" pos:column="45"/></operator> <name><name pos:line="50" pos:column="40">tmpe<pos:position pos:line="50" pos:column="44"/></name><operator pos:line="50" pos:column="44">.<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="45">swap_file_sz<pos:position pos:line="50" pos:column="57"/></name></name> <operator pos:line="50" pos:column="58">&lt;&lt;<pos:position pos:line="50" pos:column="66"/></operator> <literal type="string" pos:line="50" pos:column="61">"!="<pos:position pos:line="50" pos:column="65"/></literal> <operator pos:line="50" pos:column="66">&lt;&lt;<pos:position pos:line="50" pos:column="74"/></operator> <name pos:line="50" pos:column="69">expectedSize<pos:position pos:line="50" pos:column="81"/></name></expr></argument>)<pos:position pos:line="50" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="83"/></expr_stmt>
            <return pos:line="51" pos:column="13">return <expr><literal type="boolean" pos:line="51" pos:column="20">false<pos:position pos:line="51" pos:column="25"/></literal></expr>;<pos:position pos:line="51" pos:column="26"/></return>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="53" pos:column="6"/></block></then> <elseif pos:line="53" pos:column="7">else <if pos:line="53" pos:column="12">if <condition pos:line="53" pos:column="15">(<expr><name><name pos:line="53" pos:column="16">tmpe<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">.<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="21">swap_file_sz<pos:position pos:line="53" pos:column="33"/></name></name> <operator pos:line="53" pos:column="34">&lt;=<pos:position pos:line="53" pos:column="39"/></operator> <literal type="number" pos:line="53" pos:column="37">0<pos:position pos:line="53" pos:column="38"/></literal></expr>)<pos:position pos:line="53" pos:column="39"/></condition><then pos:line="53" pos:column="39"> <block pos:line="53" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">debugs<pos:position pos:line="54" pos:column="15"/></name><argument_list pos:line="54" pos:column="15">(<argument><expr><literal type="number" pos:line="54" pos:column="16">47<pos:position pos:line="54" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="20">DBG_IMPORTANT<pos:position pos:line="54" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="35">"WARNING: Ignoring cache entry with "<pos:position pos:line="54" pos:column="72"/></literal> <operator pos:line="54" pos:column="73">&lt;&lt;<pos:position pos:line="54" pos:column="81"/></operator>
               <literal type="string" pos:line="55" pos:column="16">"unknown size: "<pos:position pos:line="55" pos:column="32"/></literal> <operator pos:line="55" pos:column="33">&lt;&lt;<pos:position pos:line="55" pos:column="41"/></operator> <name pos:line="55" pos:column="36">tmpe<pos:position pos:line="55" pos:column="40"/></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>
        <return pos:line="56" pos:column="9">return <expr><literal type="boolean" pos:line="56" pos:column="16">false<pos:position pos:line="56" pos:column="21"/></literal></expr>;<pos:position pos:line="56" pos:column="22"/></return>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><call><name pos:line="59" pos:column="9">EBIT_TEST<pos:position pos:line="59" pos:column="18"/></name><argument_list pos:line="59" pos:column="18">(<argument><expr><name><name pos:line="59" pos:column="19">tmpe<pos:position pos:line="59" pos:column="23"/></name><operator pos:line="59" pos:column="23">.<pos:position pos:line="59" pos:column="24"/></operator><name pos:line="59" pos:column="24">flags<pos:position pos:line="59" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="31">KEY_PRIVATE<pos:position pos:line="59" pos:column="42"/></name></expr></argument>)<pos:position pos:line="59" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="44"/></condition><then pos:line="59" pos:column="44"> <block pos:line="59" pos:column="45">{
        <expr_stmt><expr><operator pos:line="60" pos:column="9">++<pos:position pos:line="60" pos:column="11"/></operator> <name><name pos:line="60" pos:column="12">stats<pos:position pos:line="60" pos:column="17"/></name><operator pos:line="60" pos:column="17">.<pos:position pos:line="60" pos:column="18"/></operator><name pos:line="60" pos:column="18">badflags<pos:position pos:line="60" pos:column="26"/></name></name></expr>;<pos:position pos:line="60" pos:column="27"/></expr_stmt>
        <return pos:line="61" pos:column="9">return <expr><literal type="boolean" pos:line="61" pos:column="16">false<pos:position pos:line="61" pos:column="21"/></literal></expr>;<pos:position pos:line="61" pos:column="22"/></return>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>

    <return pos:line="64" pos:column="5">return <expr><literal type="boolean" pos:line="64" pos:column="12">true<pos:position pos:line="64" pos:column="16"/></literal></expr>;<pos:position pos:line="64" pos:column="17"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
