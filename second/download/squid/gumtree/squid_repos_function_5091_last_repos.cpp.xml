<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5091_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Fs<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Ufs<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">RebuildState<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">rebuildFromSwapLog<pos:position pos:line="2" pos:column="42"/></name></name><parameter_list pos:line="2" pos:column="42">()<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">StoreSwapLogData<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">swapData<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name><name pos:line="6" pos:column="9">LogParser<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">-&gt;<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="20">ReadRecord<pos:position pos:line="6" pos:column="30"/></name></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">swapData<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call> <operator pos:line="6" pos:column="41">!=<pos:position pos:line="6" pos:column="43"/></operator> <literal type="number" pos:line="6" pos:column="44">1<pos:position pos:line="6" pos:column="45"/></literal></expr>)<pos:position pos:line="6" pos:column="46"/></condition><then pos:line="6" pos:column="46"> <block pos:line="6" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">47<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">DBG_IMPORTANT<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="35">"Done reading "<pos:position pos:line="7" pos:column="50"/></literal> <operator pos:line="7" pos:column="51">&lt;&lt;<pos:position pos:line="7" pos:column="59"/></operator> <name><name pos:line="7" pos:column="54">sd<pos:position pos:line="7" pos:column="56"/></name><operator pos:line="7" pos:column="56">-&gt;<pos:position pos:line="7" pos:column="61"/></operator><name pos:line="7" pos:column="58">path<pos:position pos:line="7" pos:column="62"/></name></name> <operator pos:line="7" pos:column="63">&lt;&lt;<pos:position pos:line="7" pos:column="71"/></operator> <literal type="string" pos:line="7" pos:column="66">" swaplog ("<pos:position pos:line="7" pos:column="78"/></literal> <operator pos:line="7" pos:column="79">&lt;&lt;<pos:position pos:line="7" pos:column="87"/></operator> <name pos:line="7" pos:column="82">n_read<pos:position pos:line="7" pos:column="88"/></name> <operator pos:line="7" pos:column="89">&lt;&lt;<pos:position pos:line="7" pos:column="97"/></operator> <literal type="string" pos:line="7" pos:column="92">" entries)"<pos:position pos:line="7" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="105"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">LogParser<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">Close<pos:position pos:line="8" pos:column="25"/></name></name><argument_list pos:line="8" pos:column="25">()<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="9" pos:column="9">delete<pos:position pos:line="9" pos:column="15"/></operator> <name pos:line="9" pos:column="16">LogParser<pos:position pos:line="9" pos:column="25"/></name></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="10" pos:column="9">LogParser<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">=<pos:position pos:line="10" pos:column="20"/></operator> <name pos:line="10" pos:column="21">NULL<pos:position pos:line="10" pos:column="25"/></name></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="11" pos:column="9">_done<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">=<pos:position pos:line="11" pos:column="16"/></operator> <literal type="boolean" pos:line="11" pos:column="17">true<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="15" pos:column="5">++<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">n_read<pos:position pos:line="15" pos:column="13"/></name></expr>;<pos:position pos:line="15" pos:column="14"/></expr_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><call><name><name pos:line="17" pos:column="10">swapData<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">sane<pos:position pos:line="17" pos:column="23"/></name></name><argument_list pos:line="17" pos:column="23">()<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26"> <block pos:line="17" pos:column="27">{
        <expr_stmt><expr><operator pos:line="18" pos:column="9">++<pos:position pos:line="18" pos:column="11"/></operator><name><name pos:line="18" pos:column="11">counts<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">.<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">invalid<pos:position pos:line="18" pos:column="25"/></name></name></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="22" pos:column="5">/*
     * BC: during 2.4 development, we changed the way swap file
     * numbers are assigned and stored.  The high 16 bits used
     * to encode the SD index number.  There used to be a call
     * to storeDirProperFileno here that re-assigned the index
     * bits.  Now, for backwards compatibility, we just need
     * to mask it off.
     */</comment>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">swapData<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">.<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">swap_filen<pos:position pos:line="30" pos:column="24"/></name></name> <operator pos:line="30" pos:column="25">&amp;=<pos:position pos:line="30" pos:column="31"/></operator> <literal type="number" pos:line="30" pos:column="28">0x00FFFFFF<pos:position pos:line="30" pos:column="38"/></literal></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">debugs<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><literal type="number" pos:line="32" pos:column="12">47<pos:position pos:line="32" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="16">3<pos:position pos:line="32" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="19">HERE<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">&lt;&lt;<pos:position pos:line="32" pos:column="32"/></operator> <name><name pos:line="32" pos:column="27">swap_log_op_str<pos:position pos:line="32" pos:column="42"/></name><index pos:line="32" pos:column="42">[<expr><operator pos:line="32" pos:column="43">(<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="44">int<pos:position pos:line="32" pos:column="47"/></name><operator pos:line="32" pos:column="47">)<pos:position pos:line="32" pos:column="48"/></operator> <name><name pos:line="32" pos:column="49">swapData<pos:position pos:line="32" pos:column="57"/></name><operator pos:line="32" pos:column="57">.<pos:position pos:line="32" pos:column="58"/></operator><name pos:line="32" pos:column="58">op<pos:position pos:line="32" pos:column="60"/></name></name></expr>]<pos:position pos:line="32" pos:column="61"/></index></name>  <operator pos:line="32" pos:column="63">&lt;&lt;<pos:position pos:line="32" pos:column="71"/></operator> <literal type="string" pos:line="32" pos:column="66">" "<pos:position pos:line="32" pos:column="69"/></literal> <operator pos:line="32" pos:column="70">&lt;&lt;<pos:position pos:line="32" pos:column="78"/></operator>
           <call><name pos:line="33" pos:column="12">storeKeyText<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><name><name pos:line="33" pos:column="25">swapData<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">.<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">key<pos:position pos:line="33" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="38"/></argument_list></call>  <operator pos:line="33" pos:column="40">&lt;&lt;<pos:position pos:line="33" pos:column="48"/></operator> <literal type="string" pos:line="33" pos:column="43">" "<pos:position pos:line="33" pos:column="46"/></literal><operator pos:line="33" pos:column="46">&lt;&lt;<pos:position pos:line="33" pos:column="54"/></operator> <call><name><name pos:line="33" pos:column="49">std<pos:position pos:line="33" pos:column="52"/></name><operator pos:line="33" pos:column="52">::<pos:position pos:line="33" pos:column="54"/></operator><name pos:line="33" pos:column="54">setfill<pos:position pos:line="33" pos:column="61"/></name></name><argument_list pos:line="33" pos:column="61">(<argument><expr><literal type="char" pos:line="33" pos:column="62">'0'<pos:position pos:line="33" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="66"/></argument_list></call> <operator pos:line="33" pos:column="67">&lt;&lt;<pos:position pos:line="33" pos:column="75"/></operator>
           <name><name pos:line="34" pos:column="12">std<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">::<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">hex<pos:position pos:line="34" pos:column="20"/></name></name> <operator pos:line="34" pos:column="21">&lt;&lt;<pos:position pos:line="34" pos:column="29"/></operator> <name><name pos:line="34" pos:column="24">std<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">::<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="29">uppercase<pos:position pos:line="34" pos:column="38"/></name></name> <operator pos:line="34" pos:column="39">&lt;&lt;<pos:position pos:line="34" pos:column="47"/></operator> <call><name><name pos:line="34" pos:column="42">std<pos:position pos:line="34" pos:column="45"/></name><operator pos:line="34" pos:column="45">::<pos:position pos:line="34" pos:column="47"/></operator><name pos:line="34" pos:column="47">setw<pos:position pos:line="34" pos:column="51"/></name></name><argument_list pos:line="34" pos:column="51">(<argument><expr><literal type="number" pos:line="34" pos:column="52">8<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call> <operator pos:line="34" pos:column="55">&lt;&lt;<pos:position pos:line="34" pos:column="63"/></operator>
           <name><name pos:line="35" pos:column="12">swapData<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">.<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="21">swap_filen<pos:position pos:line="35" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name><name pos:line="37" pos:column="9">swapData<pos:position pos:line="37" pos:column="17"/></name><operator pos:line="37" pos:column="17">.<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="18">op<pos:position pos:line="37" pos:column="20"/></name></name> <operator pos:line="37" pos:column="21">==<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">SWAP_LOG_ADD<pos:position pos:line="37" pos:column="36"/></name></expr>)<pos:position pos:line="37" pos:column="37"/></condition><then pos:line="37" pos:column="37"> <block pos:line="37" pos:column="38">{
        <expr_stmt><expr><operator pos:line="38" pos:column="9">(<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="10">void<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">)<pos:position pos:line="38" pos:column="15"/></operator> <literal type="number" pos:line="38" pos:column="16">0<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then> <elseif pos:line="39" pos:column="7">else <if pos:line="39" pos:column="12">if <condition pos:line="39" pos:column="15">(<expr><name><name pos:line="39" pos:column="16">swapData<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">.<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">op<pos:position pos:line="39" pos:column="27"/></name></name> <operator pos:line="39" pos:column="28">==<pos:position pos:line="39" pos:column="30"/></operator> <name pos:line="39" pos:column="31">SWAP_LOG_DEL<pos:position pos:line="39" pos:column="43"/></name></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44"> <block pos:line="39" pos:column="45">{
        <comment type="block" pos:line="40" pos:column="9">/* Delete unless we already have a newer copy anywhere in any store */</comment>
        <comment type="block" pos:line="41" pos:column="9">/* this needs to become
         * 1) unpack url
         * 2) make synthetic request with headers ?? or otherwise search
         * for a matching object in the store
         * TODO FIXME change to new async api
         */</comment>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">currentEntry<pos:position pos:line="47" pos:column="21"/></name> <argument_list pos:line="47" pos:column="22">(<argument><expr><call><name><name pos:line="47" pos:column="23">Store<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">::<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="30">Root<pos:position pos:line="47" pos:column="34"/></name></name><argument_list pos:line="47" pos:column="34">()<pos:position pos:line="47" pos:column="36"/></argument_list></call><operator pos:line="47" pos:column="36">.<pos:position pos:line="47" pos:column="37"/></operator><call><name pos:line="47" pos:column="37">get<pos:position pos:line="47" pos:column="40"/></name><argument_list pos:line="47" pos:column="40">(<argument><expr><name><name pos:line="47" pos:column="41">swapData<pos:position pos:line="47" pos:column="49"/></name><operator pos:line="47" pos:column="49">.<pos:position pos:line="47" pos:column="50"/></operator><name pos:line="47" pos:column="50">key<pos:position pos:line="47" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt>

        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">currentEntry<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">()<pos:position pos:line="49" pos:column="27"/></argument_list></call> <operator pos:line="49" pos:column="28">!=<pos:position pos:line="49" pos:column="30"/></operator> <name pos:line="49" pos:column="31">NULL<pos:position pos:line="49" pos:column="35"/></name> <operator pos:line="49" pos:column="36">&amp;&amp;<pos:position pos:line="49" pos:column="46"/></operator> <name><name pos:line="49" pos:column="39">swapData<pos:position pos:line="49" pos:column="47"/></name><operator pos:line="49" pos:column="47">.<pos:position pos:line="49" pos:column="48"/></operator><name pos:line="49" pos:column="48">lastref<pos:position pos:line="49" pos:column="55"/></name></name> <operator pos:line="49" pos:column="56">&gt;=<pos:position pos:line="49" pos:column="61"/></operator> <name><name pos:line="49" pos:column="59">e<pos:position pos:line="49" pos:column="60"/></name><operator pos:line="49" pos:column="60">-&gt;<pos:position pos:line="49" pos:column="65"/></operator><name pos:line="49" pos:column="62">lastref<pos:position pos:line="49" pos:column="69"/></name></name></expr>)<pos:position pos:line="49" pos:column="70"/></condition><then pos:line="49" pos:column="70"> <block pos:line="49" pos:column="71">{
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">undoAdd<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">()<pos:position pos:line="50" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="51" pos:column="13">--<pos:position pos:line="51" pos:column="15"/></operator><name><name pos:line="51" pos:column="15">counts<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">.<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">objcount<pos:position pos:line="51" pos:column="30"/></name></name></expr>;<pos:position pos:line="51" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="52" pos:column="13">++<pos:position pos:line="52" pos:column="15"/></operator><name><name pos:line="52" pos:column="15">counts<pos:position pos:line="52" pos:column="21"/></name><operator pos:line="52" pos:column="21">.<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">cancelcount<pos:position pos:line="52" pos:column="33"/></name></name></expr>;<pos:position pos:line="52" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <return pos:line="54" pos:column="9">return;<pos:position pos:line="54" pos:column="16"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if></elseif> <else pos:line="55" pos:column="7">else <block pos:line="55" pos:column="12">{
        <decl_stmt><decl><type><specifier pos:line="56" pos:column="9">const<pos:position pos:line="56" pos:column="14"/></specifier> <name pos:line="56" pos:column="15">double<pos:position pos:line="56" pos:column="21"/></name></type>
        <name pos:line="57" pos:column="9">x<pos:position pos:line="57" pos:column="10"/></name> <init pos:line="57" pos:column="11">= <expr><call><name><operator pos:line="57" pos:column="13">::<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="15">log<pos:position pos:line="57" pos:column="18"/></name></name><argument_list pos:line="57" pos:column="18">(<argument><expr><cast type="static" pos:line="57" pos:column="19">static_cast<argument_list type="generic" pos:line="57" pos:column="30">&lt;<argument><expr><name pos:line="57" pos:column="31">double<pos:position pos:line="57" pos:column="37"/></name></expr></argument>&gt;<pos:position pos:line="57" pos:column="41"/></argument_list><argument_list pos:line="57" pos:column="38">(<argument><expr><operator pos:line="57" pos:column="39">++<pos:position pos:line="57" pos:column="41"/></operator><name><name pos:line="57" pos:column="41">counts<pos:position pos:line="57" pos:column="47"/></name><operator pos:line="57" pos:column="47">.<pos:position pos:line="57" pos:column="48"/></operator><name pos:line="57" pos:column="48">bad_log_op<pos:position pos:line="57" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="59"/></argument_list></cast></expr></argument>)<pos:position pos:line="57" pos:column="60"/></argument_list></call> <operator pos:line="57" pos:column="61">/<pos:position pos:line="57" pos:column="62"/></operator> <call><name><operator pos:line="57" pos:column="63">::<pos:position pos:line="57" pos:column="65"/></operator><name pos:line="57" pos:column="65">log<pos:position pos:line="57" pos:column="68"/></name></name><argument_list pos:line="57" pos:column="68">(<argument><expr><literal type="number" pos:line="57" pos:column="69">10.0<pos:position pos:line="57" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="57" pos:column="75"/></decl_stmt>

        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><literal type="number" pos:line="59" pos:column="13">0.0<pos:position pos:line="59" pos:column="16"/></literal> <operator pos:line="59" pos:column="17">==<pos:position pos:line="59" pos:column="19"/></operator> <name pos:line="59" pos:column="20">x<pos:position pos:line="59" pos:column="21"/></name> <operator pos:line="59" pos:column="22">-<pos:position pos:line="59" pos:column="23"/></operator> <operator pos:line="59" pos:column="24">(<pos:position pos:line="59" pos:column="25"/></operator><name pos:line="59" pos:column="25">double<pos:position pos:line="59" pos:column="31"/></name><operator pos:line="59" pos:column="31">)<pos:position pos:line="59" pos:column="32"/></operator> <operator pos:line="59" pos:column="33">(<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="34">int<pos:position pos:line="59" pos:column="37"/></name><operator pos:line="59" pos:column="37">)<pos:position pos:line="59" pos:column="38"/></operator> <name pos:line="59" pos:column="39">x<pos:position pos:line="59" pos:column="40"/></name></expr>)<pos:position pos:line="59" pos:column="41"/></condition><then pos:line="59" pos:column="41">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="13">debugs<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><literal type="number" pos:line="60" pos:column="20">47<pos:position pos:line="60" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="24">DBG_IMPORTANT<pos:position pos:line="60" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="39">"WARNING: "<pos:position pos:line="60" pos:column="50"/></literal> <operator pos:line="60" pos:column="51">&lt;&lt;<pos:position pos:line="60" pos:column="59"/></operator> <name><name pos:line="60" pos:column="54">counts<pos:position pos:line="60" pos:column="60"/></name><operator pos:line="60" pos:column="60">.<pos:position pos:line="60" pos:column="61"/></operator><name pos:line="60" pos:column="61">bad_log_op<pos:position pos:line="60" pos:column="71"/></name></name> <operator pos:line="60" pos:column="72">&lt;&lt;<pos:position pos:line="60" pos:column="80"/></operator> <literal type="string" pos:line="60" pos:column="75">" invalid swap log entries found"<pos:position pos:line="60" pos:column="108"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="110"/></expr_stmt></block></then></if>

        <expr_stmt><expr><operator pos:line="62" pos:column="9">++<pos:position pos:line="62" pos:column="11"/></operator><name><name pos:line="62" pos:column="11">counts<pos:position pos:line="62" pos:column="17"/></name><operator pos:line="62" pos:column="17">.<pos:position pos:line="62" pos:column="18"/></operator><name pos:line="62" pos:column="18">invalid<pos:position pos:line="62" pos:column="25"/></name></name></expr>;<pos:position pos:line="62" pos:column="26"/></expr_stmt>

        <return pos:line="64" pos:column="9">return;<pos:position pos:line="64" pos:column="16"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></else></if>

    <expr_stmt><expr><operator pos:line="67" pos:column="5">++<pos:position pos:line="67" pos:column="7"/></operator><name><name pos:line="67" pos:column="7">counts<pos:position pos:line="67" pos:column="13"/></name><operator pos:line="67" pos:column="13">.<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">scancount<pos:position pos:line="67" pos:column="23"/></name></name></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt> <comment type="line" pos:line="67" pos:column="25">// XXX: should not this be incremented earlier?</comment>

    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><operator pos:line="69" pos:column="9">!<pos:position pos:line="69" pos:column="10"/></operator><call><name><name pos:line="69" pos:column="10">sd<pos:position pos:line="69" pos:column="12"/></name><operator pos:line="69" pos:column="12">-&gt;<pos:position pos:line="69" pos:column="17"/></operator><name pos:line="69" pos:column="14">validFileno<pos:position pos:line="69" pos:column="25"/></name></name><argument_list pos:line="69" pos:column="25">(<argument><expr><name><name pos:line="69" pos:column="26">swapData<pos:position pos:line="69" pos:column="34"/></name><operator pos:line="69" pos:column="34">.<pos:position pos:line="69" pos:column="35"/></operator><name pos:line="69" pos:column="35">swap_filen<pos:position pos:line="69" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="47">0<pos:position pos:line="69" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="50"/></condition><then pos:line="69" pos:column="50"> <block pos:line="69" pos:column="51">{
        <expr_stmt><expr><operator pos:line="70" pos:column="9">++<pos:position pos:line="70" pos:column="11"/></operator><name><name pos:line="70" pos:column="11">counts<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">.<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="18">invalid<pos:position pos:line="70" pos:column="25"/></name></name></expr>;<pos:position pos:line="70" pos:column="26"/></expr_stmt>
        <return pos:line="71" pos:column="9">return;<pos:position pos:line="71" pos:column="16"/></return>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if>

    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><call><name pos:line="74" pos:column="9">EBIT_TEST<pos:position pos:line="74" pos:column="18"/></name><argument_list pos:line="74" pos:column="18">(<argument><expr><name><name pos:line="74" pos:column="19">swapData<pos:position pos:line="74" pos:column="27"/></name><operator pos:line="74" pos:column="27">.<pos:position pos:line="74" pos:column="28"/></operator><name pos:line="74" pos:column="28">flags<pos:position pos:line="74" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="35">KEY_PRIVATE<pos:position pos:line="74" pos:column="46"/></name></expr></argument>)<pos:position pos:line="74" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="48"/></condition><then pos:line="74" pos:column="48"> <block pos:line="74" pos:column="49">{
        <expr_stmt><expr><operator pos:line="75" pos:column="9">++<pos:position pos:line="75" pos:column="11"/></operator><name><name pos:line="75" pos:column="11">counts<pos:position pos:line="75" pos:column="17"/></name><operator pos:line="75" pos:column="17">.<pos:position pos:line="75" pos:column="18"/></operator><name pos:line="75" pos:column="18">badflags<pos:position pos:line="75" pos:column="26"/></name></name></expr>;<pos:position pos:line="75" pos:column="27"/></expr_stmt>
        <return pos:line="76" pos:column="9">return;<pos:position pos:line="76" pos:column="16"/></return>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="79" pos:column="5">/* this needs to become
     * 1) unpack url
     * 2) make synthetic request with headers ?? or otherwise search
     * for a matching object in the store
     * TODO FIXME change to new async api
     */</comment>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">currentEntry<pos:position pos:line="85" pos:column="17"/></name> <argument_list pos:line="85" pos:column="18">(<argument><expr><call><name><name pos:line="85" pos:column="19">Store<pos:position pos:line="85" pos:column="24"/></name><operator pos:line="85" pos:column="24">::<pos:position pos:line="85" pos:column="26"/></operator><name pos:line="85" pos:column="26">Root<pos:position pos:line="85" pos:column="30"/></name></name><argument_list pos:line="85" pos:column="30">()<pos:position pos:line="85" pos:column="32"/></argument_list></call><operator pos:line="85" pos:column="32">.<pos:position pos:line="85" pos:column="33"/></operator><call><name pos:line="85" pos:column="33">get<pos:position pos:line="85" pos:column="36"/></name><argument_list pos:line="85" pos:column="36">(<argument><expr><name><name pos:line="85" pos:column="37">swapData<pos:position pos:line="85" pos:column="45"/></name><operator pos:line="85" pos:column="45">.<pos:position pos:line="85" pos:column="46"/></operator><name pos:line="85" pos:column="46">key<pos:position pos:line="85" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="52"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="87" pos:column="5">int<pos:position pos:line="87" pos:column="8"/></name></type> <name pos:line="87" pos:column="9">used<pos:position pos:line="87" pos:column="13"/></name></decl>;<pos:position pos:line="87" pos:column="14"/></decl_stmt>           <comment type="block" pos:line="87" pos:column="25">/* is swapfile already in use? */</comment>

    <expr_stmt><expr><name pos:line="89" pos:column="5">used<pos:position pos:line="89" pos:column="9"/></name> <operator pos:line="89" pos:column="10">=<pos:position pos:line="89" pos:column="11"/></operator> <call><name><name pos:line="89" pos:column="12">sd<pos:position pos:line="89" pos:column="14"/></name><operator pos:line="89" pos:column="14">-&gt;<pos:position pos:line="89" pos:column="19"/></operator><name pos:line="89" pos:column="16">mapBitTest<pos:position pos:line="89" pos:column="26"/></name></name><argument_list pos:line="89" pos:column="26">(<argument><expr><name><name pos:line="89" pos:column="27">swapData<pos:position pos:line="89" pos:column="35"/></name><operator pos:line="89" pos:column="35">.<pos:position pos:line="89" pos:column="36"/></operator><name pos:line="89" pos:column="36">swap_filen<pos:position pos:line="89" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="48"/></expr_stmt>

    <comment type="block" pos:line="91" pos:column="5">/* If this URL already exists in the cache, does the swap log
     * appear to have a newer entry?  Compare 'lastref' from the
     * swap log to e-&gt;lastref. */</comment>
    <comment type="block" pos:line="94" pos:column="5">/* is the log entry newer than current entry? */</comment>
    <decl_stmt><decl><type><name pos:line="95" pos:column="5">int<pos:position pos:line="95" pos:column="8"/></name></type> <name pos:line="95" pos:column="9">disk_entry_newer<pos:position pos:line="95" pos:column="25"/></name> <init pos:line="95" pos:column="26">= <expr><ternary><condition><expr><call><name pos:line="95" pos:column="28">currentEntry<pos:position pos:line="95" pos:column="40"/></name><argument_list pos:line="95" pos:column="40">()<pos:position pos:line="95" pos:column="42"/></argument_list></call></expr> ?<pos:position pos:line="95" pos:column="44"/></condition><then pos:line="95" pos:column="44"> <expr><operator pos:line="95" pos:column="45">(<pos:position pos:line="95" pos:column="46"/></operator><ternary><condition><expr><name><name pos:line="95" pos:column="46">swapData<pos:position pos:line="95" pos:column="54"/></name><operator pos:line="95" pos:column="54">.<pos:position pos:line="95" pos:column="55"/></operator><name pos:line="95" pos:column="55">lastref<pos:position pos:line="95" pos:column="62"/></name></name> <operator pos:line="95" pos:column="63">&gt;<pos:position pos:line="95" pos:column="67"/></operator> <call><name pos:line="95" pos:column="65">currentEntry<pos:position pos:line="95" pos:column="77"/></name><argument_list pos:line="95" pos:column="77">()<pos:position pos:line="95" pos:column="79"/></argument_list></call><operator pos:line="95" pos:column="79">-&gt;<pos:position pos:line="95" pos:column="84"/></operator><name pos:line="95" pos:column="81">lastref<pos:position pos:line="95" pos:column="88"/></name></expr> ?<pos:position pos:line="95" pos:column="90"/></condition><then pos:line="95" pos:column="90"> <expr><literal type="number" pos:line="95" pos:column="91">1<pos:position pos:line="95" pos:column="92"/></literal></expr> <pos:position pos:line="95" pos:column="93"/></then><else pos:line="95" pos:column="93">: <expr><literal type="number" pos:line="95" pos:column="95">0<pos:position pos:line="95" pos:column="96"/></literal></expr></else></ternary><operator pos:line="95" pos:column="96">)<pos:position pos:line="95" pos:column="97"/></operator></expr> <pos:position pos:line="95" pos:column="98"/></then><else pos:line="95" pos:column="98">: <expr><literal type="number" pos:line="95" pos:column="100">0<pos:position pos:line="95" pos:column="101"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="95" pos:column="102"/></decl_stmt>

    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><name pos:line="97" pos:column="9">used<pos:position pos:line="97" pos:column="13"/></name> <operator pos:line="97" pos:column="14">&amp;&amp;<pos:position pos:line="97" pos:column="24"/></operator> <operator pos:line="97" pos:column="17">!<pos:position pos:line="97" pos:column="18"/></operator><name pos:line="97" pos:column="18">disk_entry_newer<pos:position pos:line="97" pos:column="34"/></name></expr>)<pos:position pos:line="97" pos:column="35"/></condition><then pos:line="97" pos:column="35"> <block pos:line="97" pos:column="36">{
        <comment type="block" pos:line="98" pos:column="9">/* log entry is old, ignore it */</comment>
        <expr_stmt><expr><operator pos:line="99" pos:column="9">++<pos:position pos:line="99" pos:column="11"/></operator><name><name pos:line="99" pos:column="11">counts<pos:position pos:line="99" pos:column="17"/></name><operator pos:line="99" pos:column="17">.<pos:position pos:line="99" pos:column="18"/></operator><name pos:line="99" pos:column="18">clashcount<pos:position pos:line="99" pos:column="28"/></name></name></expr>;<pos:position pos:line="99" pos:column="29"/></expr_stmt>
        <return pos:line="100" pos:column="9">return;<pos:position pos:line="100" pos:column="16"/></return>
    }<pos:position pos:line="101" pos:column="6"/></block></then> <elseif pos:line="101" pos:column="7">else <if pos:line="101" pos:column="12">if <condition pos:line="101" pos:column="15">(<expr><name pos:line="101" pos:column="16">used<pos:position pos:line="101" pos:column="20"/></name> <operator pos:line="101" pos:column="21">&amp;&amp;<pos:position pos:line="101" pos:column="31"/></operator> <call><name pos:line="101" pos:column="24">currentEntry<pos:position pos:line="101" pos:column="36"/></name><argument_list pos:line="101" pos:column="36">()<pos:position pos:line="101" pos:column="38"/></argument_list></call> <operator pos:line="101" pos:column="39">&amp;&amp;<pos:position pos:line="101" pos:column="49"/></operator> <call><name pos:line="101" pos:column="42">currentEntry<pos:position pos:line="101" pos:column="54"/></name><argument_list pos:line="101" pos:column="54">()<pos:position pos:line="101" pos:column="56"/></argument_list></call><operator pos:line="101" pos:column="56">-&gt;<pos:position pos:line="101" pos:column="61"/></operator><name pos:line="101" pos:column="58">swap_filen<pos:position pos:line="101" pos:column="68"/></name> <operator pos:line="101" pos:column="69">==<pos:position pos:line="101" pos:column="71"/></operator> <name><name pos:line="101" pos:column="72">swapData<pos:position pos:line="101" pos:column="80"/></name><operator pos:line="101" pos:column="80">.<pos:position pos:line="101" pos:column="81"/></operator><name pos:line="101" pos:column="81">swap_filen<pos:position pos:line="101" pos:column="91"/></name></name> <operator pos:line="101" pos:column="92">&amp;&amp;<pos:position pos:line="101" pos:column="102"/></operator> <call><name pos:line="101" pos:column="95">currentEntry<pos:position pos:line="101" pos:column="107"/></name><argument_list pos:line="101" pos:column="107">()<pos:position pos:line="101" pos:column="109"/></argument_list></call><operator pos:line="101" pos:column="109">-&gt;<pos:position pos:line="101" pos:column="114"/></operator><name pos:line="101" pos:column="111">swap_dirn<pos:position pos:line="101" pos:column="120"/></name> <operator pos:line="101" pos:column="121">==<pos:position pos:line="101" pos:column="123"/></operator> <name><name pos:line="101" pos:column="124">sd<pos:position pos:line="101" pos:column="126"/></name><operator pos:line="101" pos:column="126">-&gt;<pos:position pos:line="101" pos:column="131"/></operator><name pos:line="101" pos:column="128">index<pos:position pos:line="101" pos:column="133"/></name></name></expr>)<pos:position pos:line="101" pos:column="134"/></condition><then pos:line="101" pos:column="134"> <block pos:line="101" pos:column="135">{
        <comment type="block" pos:line="102" pos:column="9">/* swapfile taken, same URL, newer, update meta */</comment>

        <if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><call><name pos:line="104" pos:column="13">currentEntry<pos:position pos:line="104" pos:column="25"/></name><argument_list pos:line="104" pos:column="25">()<pos:position pos:line="104" pos:column="27"/></argument_list></call><operator pos:line="104" pos:column="27">-&gt;<pos:position pos:line="104" pos:column="32"/></operator><name pos:line="104" pos:column="29">store_status<pos:position pos:line="104" pos:column="41"/></name> <operator pos:line="104" pos:column="42">==<pos:position pos:line="104" pos:column="44"/></operator> <name pos:line="104" pos:column="45">STORE_OK<pos:position pos:line="104" pos:column="53"/></name></expr>)<pos:position pos:line="104" pos:column="54"/></condition><then pos:line="104" pos:column="54"> <block pos:line="104" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">currentEntry<pos:position pos:line="105" pos:column="25"/></name><argument_list pos:line="105" pos:column="25">()<pos:position pos:line="105" pos:column="27"/></argument_list></call><operator pos:line="105" pos:column="27">-&gt;<pos:position pos:line="105" pos:column="32"/></operator><name pos:line="105" pos:column="29">lastref<pos:position pos:line="105" pos:column="36"/></name> <operator pos:line="105" pos:column="37">=<pos:position pos:line="105" pos:column="38"/></operator> <name><name pos:line="105" pos:column="39">swapData<pos:position pos:line="105" pos:column="47"/></name><operator pos:line="105" pos:column="47">.<pos:position pos:line="105" pos:column="48"/></operator><name pos:line="105" pos:column="48">timestamp<pos:position pos:line="105" pos:column="57"/></name></name></expr>;<pos:position pos:line="105" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">currentEntry<pos:position pos:line="106" pos:column="25"/></name><argument_list pos:line="106" pos:column="25">()<pos:position pos:line="106" pos:column="27"/></argument_list></call><operator pos:line="106" pos:column="27">-&gt;<pos:position pos:line="106" pos:column="32"/></operator><name pos:line="106" pos:column="29">timestamp<pos:position pos:line="106" pos:column="38"/></name> <operator pos:line="106" pos:column="39">=<pos:position pos:line="106" pos:column="40"/></operator> <name><name pos:line="106" pos:column="41">swapData<pos:position pos:line="106" pos:column="49"/></name><operator pos:line="106" pos:column="49">.<pos:position pos:line="106" pos:column="50"/></operator><name pos:line="106" pos:column="50">timestamp<pos:position pos:line="106" pos:column="59"/></name></name></expr>;<pos:position pos:line="106" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="107" pos:column="13">currentEntry<pos:position pos:line="107" pos:column="25"/></name><argument_list pos:line="107" pos:column="25">()<pos:position pos:line="107" pos:column="27"/></argument_list></call><operator pos:line="107" pos:column="27">-&gt;<pos:position pos:line="107" pos:column="32"/></operator><name pos:line="107" pos:column="29">expires<pos:position pos:line="107" pos:column="36"/></name> <operator pos:line="107" pos:column="37">=<pos:position pos:line="107" pos:column="38"/></operator> <name><name pos:line="107" pos:column="39">swapData<pos:position pos:line="107" pos:column="47"/></name><operator pos:line="107" pos:column="47">.<pos:position pos:line="107" pos:column="48"/></operator><name pos:line="107" pos:column="48">expires<pos:position pos:line="107" pos:column="55"/></name></name></expr>;<pos:position pos:line="107" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="108" pos:column="13">currentEntry<pos:position pos:line="108" pos:column="25"/></name><argument_list pos:line="108" pos:column="25">()<pos:position pos:line="108" pos:column="27"/></argument_list></call><operator pos:line="108" pos:column="27">-&gt;<pos:position pos:line="108" pos:column="32"/></operator><call><name pos:line="108" pos:column="29">lastModified<pos:position pos:line="108" pos:column="41"/></name><argument_list pos:line="108" pos:column="41">(<argument><expr><name><name pos:line="108" pos:column="42">swapData<pos:position pos:line="108" pos:column="50"/></name><operator pos:line="108" pos:column="50">.<pos:position pos:line="108" pos:column="51"/></operator><name pos:line="108" pos:column="51">lastmod<pos:position pos:line="108" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="108" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">currentEntry<pos:position pos:line="109" pos:column="25"/></name><argument_list pos:line="109" pos:column="25">()<pos:position pos:line="109" pos:column="27"/></argument_list></call><operator pos:line="109" pos:column="27">-&gt;<pos:position pos:line="109" pos:column="32"/></operator><name pos:line="109" pos:column="29">flags<pos:position pos:line="109" pos:column="34"/></name> <operator pos:line="109" pos:column="35">=<pos:position pos:line="109" pos:column="36"/></operator> <name><name pos:line="109" pos:column="37">swapData<pos:position pos:line="109" pos:column="45"/></name><operator pos:line="109" pos:column="45">.<pos:position pos:line="109" pos:column="46"/></operator><name pos:line="109" pos:column="46">flags<pos:position pos:line="109" pos:column="51"/></name></name></expr>;<pos:position pos:line="109" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">currentEntry<pos:position pos:line="110" pos:column="25"/></name><argument_list pos:line="110" pos:column="25">()<pos:position pos:line="110" pos:column="27"/></argument_list></call><operator pos:line="110" pos:column="27">-&gt;<pos:position pos:line="110" pos:column="32"/></operator><name pos:line="110" pos:column="29">refcount<pos:position pos:line="110" pos:column="37"/></name> <operator pos:line="110" pos:column="38">+=<pos:position pos:line="110" pos:column="40"/></operator> <name><name pos:line="110" pos:column="41">swapData<pos:position pos:line="110" pos:column="49"/></name><operator pos:line="110" pos:column="49">.<pos:position pos:line="110" pos:column="50"/></operator><name pos:line="110" pos:column="50">refcount<pos:position pos:line="110" pos:column="58"/></name></name></expr>;<pos:position pos:line="110" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="111" pos:column="13">sd<pos:position pos:line="111" pos:column="15"/></name><operator pos:line="111" pos:column="15">-&gt;<pos:position pos:line="111" pos:column="20"/></operator><name pos:line="111" pos:column="17">dereference<pos:position pos:line="111" pos:column="28"/></name></name><argument_list pos:line="111" pos:column="28">(<argument><expr><operator pos:line="111" pos:column="29">*<pos:position pos:line="111" pos:column="30"/></operator><call><name pos:line="111" pos:column="30">currentEntry<pos:position pos:line="111" pos:column="42"/></name><argument_list pos:line="111" pos:column="42">()<pos:position pos:line="111" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="111" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="112" pos:column="10"/></block></then> <else pos:line="112" pos:column="11">else <block pos:line="112" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="113" pos:column="13">debug_trap<pos:position pos:line="113" pos:column="23"/></name><argument_list pos:line="113" pos:column="23">(<argument><expr><literal type="string" pos:line="113" pos:column="24">"commonUfsDirRebuildFromSwapLog: bad condition"<pos:position pos:line="113" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="73"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="114" pos:column="13">debugs<pos:position pos:line="114" pos:column="19"/></name><argument_list pos:line="114" pos:column="19">(<argument><expr><literal type="number" pos:line="114" pos:column="20">47<pos:position pos:line="114" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="24">DBG_IMPORTANT<pos:position pos:line="114" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="39">HERE<pos:position pos:line="114" pos:column="43"/></name> <operator pos:line="114" pos:column="44">&lt;&lt;<pos:position pos:line="114" pos:column="52"/></operator> <literal type="string" pos:line="114" pos:column="47">"bad condition"<pos:position pos:line="114" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="115" pos:column="10"/></block></else></if>
        <return pos:line="116" pos:column="9">return;<pos:position pos:line="116" pos:column="16"/></return>
    }<pos:position pos:line="117" pos:column="6"/></block></then></if></elseif> <elseif pos:line="117" pos:column="7">else <if pos:line="117" pos:column="12">if <condition pos:line="117" pos:column="15">(<expr><name pos:line="117" pos:column="16">used<pos:position pos:line="117" pos:column="20"/></name></expr>)<pos:position pos:line="117" pos:column="21"/></condition><then pos:line="117" pos:column="21"> <block pos:line="117" pos:column="22">{
        <comment type="block" pos:line="118" pos:column="9">/* swapfile in use, not by this URL, log entry is newer */</comment>
        <comment type="block" pos:line="119" pos:column="9">/* This is sorta bad: the log entry should NOT be newer at this
         * point.  If the log is dirty, the filesize check should have
         * caught this.  If the log is clean, there should never be a
         * newer entry. */</comment>
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">debugs<pos:position pos:line="123" pos:column="15"/></name><argument_list pos:line="123" pos:column="15">(<argument><expr><literal type="number" pos:line="123" pos:column="16">47<pos:position pos:line="123" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="20">DBG_IMPORTANT<pos:position pos:line="123" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="35">"WARNING: newer swaplog entry for dirno "<pos:position pos:line="123" pos:column="76"/></literal> <operator pos:line="123" pos:column="77">&lt;&lt;<pos:position pos:line="123" pos:column="85"/></operator>
               <name><name pos:line="124" pos:column="16">sd<pos:position pos:line="124" pos:column="18"/></name><operator pos:line="124" pos:column="18">-&gt;<pos:position pos:line="124" pos:column="23"/></operator><name pos:line="124" pos:column="20">index<pos:position pos:line="124" pos:column="25"/></name></name>  <operator pos:line="124" pos:column="27">&lt;&lt;<pos:position pos:line="124" pos:column="35"/></operator> <literal type="string" pos:line="124" pos:column="30">", fileno "<pos:position pos:line="124" pos:column="41"/></literal><operator pos:line="124" pos:column="41">&lt;&lt;<pos:position pos:line="124" pos:column="49"/></operator> <call><name><name pos:line="124" pos:column="44">std<pos:position pos:line="124" pos:column="47"/></name><operator pos:line="124" pos:column="47">::<pos:position pos:line="124" pos:column="49"/></operator><name pos:line="124" pos:column="49">setfill<pos:position pos:line="124" pos:column="56"/></name></name><argument_list pos:line="124" pos:column="56">(<argument><expr><literal type="char" pos:line="124" pos:column="57">'0'<pos:position pos:line="124" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="61"/></argument_list></call> <operator pos:line="124" pos:column="62">&lt;&lt;<pos:position pos:line="124" pos:column="70"/></operator> <name><name pos:line="124" pos:column="65">std<pos:position pos:line="124" pos:column="68"/></name><operator pos:line="124" pos:column="68">::<pos:position pos:line="124" pos:column="70"/></operator><name pos:line="124" pos:column="70">hex<pos:position pos:line="124" pos:column="73"/></name></name> <operator pos:line="124" pos:column="74">&lt;&lt;<pos:position pos:line="124" pos:column="82"/></operator>
               <name><name pos:line="125" pos:column="16">std<pos:position pos:line="125" pos:column="19"/></name><operator pos:line="125" pos:column="19">::<pos:position pos:line="125" pos:column="21"/></operator><name pos:line="125" pos:column="21">uppercase<pos:position pos:line="125" pos:column="30"/></name></name> <operator pos:line="125" pos:column="31">&lt;&lt;<pos:position pos:line="125" pos:column="39"/></operator> <call><name><name pos:line="125" pos:column="34">std<pos:position pos:line="125" pos:column="37"/></name><operator pos:line="125" pos:column="37">::<pos:position pos:line="125" pos:column="39"/></operator><name pos:line="125" pos:column="39">setw<pos:position pos:line="125" pos:column="43"/></name></name><argument_list pos:line="125" pos:column="43">(<argument><expr><literal type="number" pos:line="125" pos:column="44">8<pos:position pos:line="125" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="46"/></argument_list></call> <operator pos:line="125" pos:column="47">&lt;&lt;<pos:position pos:line="125" pos:column="55"/></operator> <name><name pos:line="125" pos:column="50">swapData<pos:position pos:line="125" pos:column="58"/></name><operator pos:line="125" pos:column="58">.<pos:position pos:line="125" pos:column="59"/></operator><name pos:line="125" pos:column="59">swap_filen<pos:position pos:line="125" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="125" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="71"/></expr_stmt>

        <comment type="block" pos:line="127" pos:column="9">/* I'm tempted to remove the swapfile here just to be safe,
         * but there is a bad race condition in the NOVM version if
         * the swapfile has recently been opened for writing, but
         * not yet opened for reading.  Because we can't map
         * swapfiles back to StoreEntrys, we don't know the state
         * of the entry using that file.  */</comment>
        <comment type="block" pos:line="133" pos:column="9">/* We'll assume the existing entry is valid, probably because
         * were in a slow rebuild and the the swap file number got taken
         * and the validation procedure hasn't run. */</comment>
        <expr_stmt><expr><call><name pos:line="136" pos:column="9">assert<pos:position pos:line="136" pos:column="15"/></name><argument_list pos:line="136" pos:column="15">(<argument><expr><name><name pos:line="136" pos:column="16">flags<pos:position pos:line="136" pos:column="21"/></name><operator pos:line="136" pos:column="21">.<pos:position pos:line="136" pos:column="22"/></operator><name pos:line="136" pos:column="22">need_to_validate<pos:position pos:line="136" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="136" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="137" pos:column="9">++<pos:position pos:line="137" pos:column="11"/></operator><name><name pos:line="137" pos:column="11">counts<pos:position pos:line="137" pos:column="17"/></name><operator pos:line="137" pos:column="17">.<pos:position pos:line="137" pos:column="18"/></operator><name pos:line="137" pos:column="18">clashcount<pos:position pos:line="137" pos:column="28"/></name></name></expr>;<pos:position pos:line="137" pos:column="29"/></expr_stmt>
        <return pos:line="138" pos:column="9">return;<pos:position pos:line="138" pos:column="16"/></return>
    }<pos:position pos:line="139" pos:column="6"/></block></then></if></elseif> <elseif pos:line="139" pos:column="7">else <if pos:line="139" pos:column="12">if <condition pos:line="139" pos:column="15">(<expr><call><name pos:line="139" pos:column="16">currentEntry<pos:position pos:line="139" pos:column="28"/></name><argument_list pos:line="139" pos:column="28">()<pos:position pos:line="139" pos:column="30"/></argument_list></call> <operator pos:line="139" pos:column="31">&amp;&amp;<pos:position pos:line="139" pos:column="41"/></operator> <operator pos:line="139" pos:column="34">!<pos:position pos:line="139" pos:column="35"/></operator><name pos:line="139" pos:column="35">disk_entry_newer<pos:position pos:line="139" pos:column="51"/></name></expr>)<pos:position pos:line="139" pos:column="52"/></condition><then pos:line="139" pos:column="52"> <block pos:line="139" pos:column="53">{
        <comment type="block" pos:line="140" pos:column="9">/* key already exists, current entry is newer */</comment>
        <comment type="block" pos:line="141" pos:column="9">/* keep old, ignore new */</comment>
        <expr_stmt><expr><operator pos:line="142" pos:column="9">++<pos:position pos:line="142" pos:column="11"/></operator><name><name pos:line="142" pos:column="11">counts<pos:position pos:line="142" pos:column="17"/></name><operator pos:line="142" pos:column="17">.<pos:position pos:line="142" pos:column="18"/></operator><name pos:line="142" pos:column="18">dupcount<pos:position pos:line="142" pos:column="26"/></name></name></expr>;<pos:position pos:line="142" pos:column="27"/></expr_stmt>
        <return pos:line="143" pos:column="9">return;<pos:position pos:line="143" pos:column="16"/></return>
    }<pos:position pos:line="144" pos:column="6"/></block></then></if></elseif> <elseif pos:line="144" pos:column="7">else <if pos:line="144" pos:column="12">if <condition pos:line="144" pos:column="15">(<expr><call><name pos:line="144" pos:column="16">currentEntry<pos:position pos:line="144" pos:column="28"/></name><argument_list pos:line="144" pos:column="28">()<pos:position pos:line="144" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="144" pos:column="31"/></condition><then pos:line="144" pos:column="31"> <block pos:line="144" pos:column="32">{
        <comment type="block" pos:line="145" pos:column="9">/* key already exists, this swapfile not being used */</comment>
        <comment type="block" pos:line="146" pos:column="9">/* junk old, load new */</comment>
        <expr_stmt><expr><call><name pos:line="147" pos:column="9">undoAdd<pos:position pos:line="147" pos:column="16"/></name><argument_list pos:line="147" pos:column="16">()<pos:position pos:line="147" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="148" pos:column="9">--<pos:position pos:line="148" pos:column="11"/></operator><name><name pos:line="148" pos:column="11">counts<pos:position pos:line="148" pos:column="17"/></name><operator pos:line="148" pos:column="17">.<pos:position pos:line="148" pos:column="18"/></operator><name pos:line="148" pos:column="18">objcount<pos:position pos:line="148" pos:column="26"/></name></name></expr>;<pos:position pos:line="148" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="149" pos:column="9">++<pos:position pos:line="149" pos:column="11"/></operator><name><name pos:line="149" pos:column="11">counts<pos:position pos:line="149" pos:column="17"/></name><operator pos:line="149" pos:column="17">.<pos:position pos:line="149" pos:column="18"/></operator><name pos:line="149" pos:column="18">dupcount<pos:position pos:line="149" pos:column="26"/></name></name></expr>;<pos:position pos:line="149" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="150" pos:column="6"/></block></then></if></elseif> <else pos:line="150" pos:column="7">else <block pos:line="150" pos:column="12">{
        <comment type="block" pos:line="151" pos:column="9">/* URL doesnt exist, swapfile not in use */</comment>
        <comment type="block" pos:line="152" pos:column="9">/* load new */</comment>
        <expr_stmt><expr><operator pos:line="153" pos:column="9">(<pos:position pos:line="153" pos:column="10"/></operator><name pos:line="153" pos:column="10">void<pos:position pos:line="153" pos:column="14"/></name><operator pos:line="153" pos:column="14">)<pos:position pos:line="153" pos:column="15"/></operator> <literal type="number" pos:line="153" pos:column="16">0<pos:position pos:line="153" pos:column="17"/></literal></expr>;<pos:position pos:line="153" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="154" pos:column="6"/></block></else></if>

    <expr_stmt><expr><operator pos:line="156" pos:column="5">++<pos:position pos:line="156" pos:column="7"/></operator><name><name pos:line="156" pos:column="7">counts<pos:position pos:line="156" pos:column="13"/></name><operator pos:line="156" pos:column="13">.<pos:position pos:line="156" pos:column="14"/></operator><name pos:line="156" pos:column="14">objcount<pos:position pos:line="156" pos:column="22"/></name></name></expr>;<pos:position pos:line="156" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="158" pos:column="5">currentEntry<pos:position pos:line="158" pos:column="17"/></name><argument_list pos:line="158" pos:column="17">(<argument><expr><call><name><name pos:line="158" pos:column="18">sd<pos:position pos:line="158" pos:column="20"/></name><operator pos:line="158" pos:column="20">-&gt;<pos:position pos:line="158" pos:column="25"/></operator><name pos:line="158" pos:column="22">addDiskRestore<pos:position pos:line="158" pos:column="36"/></name></name><argument_list pos:line="158" pos:column="36">(<argument><expr><name><name pos:line="158" pos:column="37">swapData<pos:position pos:line="158" pos:column="45"/></name><operator pos:line="158" pos:column="45">.<pos:position pos:line="158" pos:column="46"/></operator><name pos:line="158" pos:column="46">key<pos:position pos:line="158" pos:column="49"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="159" pos:column="37">swapData<pos:position pos:line="159" pos:column="45"/></name><operator pos:line="159" pos:column="45">.<pos:position pos:line="159" pos:column="46"/></operator><name pos:line="159" pos:column="46">swap_filen<pos:position pos:line="159" pos:column="56"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="160" pos:column="37">swapData<pos:position pos:line="160" pos:column="45"/></name><operator pos:line="160" pos:column="45">.<pos:position pos:line="160" pos:column="46"/></operator><name pos:line="160" pos:column="46">swap_file_sz<pos:position pos:line="160" pos:column="58"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="161" pos:column="37">swapData<pos:position pos:line="161" pos:column="45"/></name><operator pos:line="161" pos:column="45">.<pos:position pos:line="161" pos:column="46"/></operator><name pos:line="161" pos:column="46">expires<pos:position pos:line="161" pos:column="53"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="162" pos:column="37">swapData<pos:position pos:line="162" pos:column="45"/></name><operator pos:line="162" pos:column="45">.<pos:position pos:line="162" pos:column="46"/></operator><name pos:line="162" pos:column="46">timestamp<pos:position pos:line="162" pos:column="55"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="163" pos:column="37">swapData<pos:position pos:line="163" pos:column="45"/></name><operator pos:line="163" pos:column="45">.<pos:position pos:line="163" pos:column="46"/></operator><name pos:line="163" pos:column="46">lastref<pos:position pos:line="163" pos:column="53"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="164" pos:column="37">swapData<pos:position pos:line="164" pos:column="45"/></name><operator pos:line="164" pos:column="45">.<pos:position pos:line="164" pos:column="46"/></operator><name pos:line="164" pos:column="46">lastmod<pos:position pos:line="164" pos:column="53"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="165" pos:column="37">swapData<pos:position pos:line="165" pos:column="45"/></name><operator pos:line="165" pos:column="45">.<pos:position pos:line="165" pos:column="46"/></operator><name pos:line="165" pos:column="46">refcount<pos:position pos:line="165" pos:column="54"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="166" pos:column="37">swapData<pos:position pos:line="166" pos:column="45"/></name><operator pos:line="166" pos:column="45">.<pos:position pos:line="166" pos:column="46"/></operator><name pos:line="166" pos:column="46">flags<pos:position pos:line="166" pos:column="51"/></name></name></expr></argument>,
                                    <argument><expr><operator pos:line="167" pos:column="37">(<pos:position pos:line="167" pos:column="38"/></operator><name pos:line="167" pos:column="38">int<pos:position pos:line="167" pos:column="41"/></name><operator pos:line="167" pos:column="41">)<pos:position pos:line="167" pos:column="42"/></operator> <name><name pos:line="167" pos:column="43">flags<pos:position pos:line="167" pos:column="48"/></name><operator pos:line="167" pos:column="48">.<pos:position pos:line="167" pos:column="49"/></operator><name pos:line="167" pos:column="49">clean<pos:position pos:line="167" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="167" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="167" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="57"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="169" pos:column="5">storeDirSwapLog<pos:position pos:line="169" pos:column="20"/></name><argument_list pos:line="169" pos:column="20">(<argument><expr><call><name pos:line="169" pos:column="21">currentEntry<pos:position pos:line="169" pos:column="33"/></name><argument_list pos:line="169" pos:column="33">()<pos:position pos:line="169" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="169" pos:column="37">SWAP_LOG_ADD<pos:position pos:line="169" pos:column="49"/></name></expr></argument>)<pos:position pos:line="169" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="51"/></expr_stmt>
}<pos:position pos:line="170" pos:column="2"/></block></function></unit>
