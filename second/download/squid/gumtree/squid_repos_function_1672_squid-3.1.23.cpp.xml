<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1672_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">peerDigestHandleReply<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">void<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">data<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">StoreIOBuffer<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">receivedData<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DigestFetchState<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">fetch<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><operator pos:line="4" pos:column="31">(<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">DigestFetchState<pos:position pos:line="4" pos:column="48"/></name> <operator pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></operator><operator pos:line="4" pos:column="50">)<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="51">data<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">retsize<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><operator pos:line="5" pos:column="19">-<pos:position pos:line="5" pos:column="20"/></operator><literal type="number" pos:line="5" pos:column="20">1<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">digest_read_state_t<pos:position pos:line="6" pos:column="24"/></name></type> <name pos:line="6" pos:column="25">prevstate<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">newsize<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">fetch<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">-&gt;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="19">pd<pos:position pos:line="9" pos:column="21"/></name></name> <operator pos:line="9" pos:column="22">&amp;&amp;<pos:position pos:line="9" pos:column="32"/></operator> <name><name pos:line="9" pos:column="25">receivedData<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">.<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="38">data<pos:position pos:line="9" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="44"/></expr_stmt>
    <comment type="block" pos:line="10" pos:column="5">/* The existing code assumes that the received pointer is
     * where we asked the data to be put
     */</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name><name pos:line="13" pos:column="12">fetch<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">-&gt;<pos:position pos:line="13" pos:column="22"/></operator><name pos:line="13" pos:column="19">buf<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">+<pos:position pos:line="13" pos:column="24"/></operator> <name><name pos:line="13" pos:column="25">fetch<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">-&gt;<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="32">bufofs<pos:position pos:line="13" pos:column="38"/></name></name> <operator pos:line="13" pos:column="39">==<pos:position pos:line="13" pos:column="41"/></operator> <name><name pos:line="13" pos:column="42">receivedData<pos:position pos:line="13" pos:column="54"/></name><operator pos:line="13" pos:column="54">.<pos:position pos:line="13" pos:column="55"/></operator><name pos:line="13" pos:column="55">data<pos:position pos:line="13" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="61"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* Update the buffer size */</comment>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">fetch<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">-&gt;<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="12">bufofs<pos:position pos:line="16" pos:column="18"/></name></name> <operator pos:line="16" pos:column="19">+=<pos:position pos:line="16" pos:column="21"/></operator> <name><name pos:line="16" pos:column="22">receivedData<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">.<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="35">length<pos:position pos:line="16" pos:column="41"/></name></name></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name><name pos:line="18" pos:column="12">fetch<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">bufofs<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">&lt;=<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="29">SM_PAGE_SIZE<pos:position pos:line="18" pos:column="41"/></name></expr></argument>)<pos:position pos:line="18" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* If we've fetched enough, return */</comment>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name pos:line="22" pos:column="9">peerDigestFetchedEnough<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">fetch<pos:position pos:line="22" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="40">fetch<pos:position pos:line="22" pos:column="45"/></name><operator pos:line="22" pos:column="45">-&gt;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="47">buf<pos:position pos:line="22" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="52">fetch<pos:position pos:line="22" pos:column="57"/></name><operator pos:line="22" pos:column="57">-&gt;<pos:position pos:line="22" pos:column="62"/></operator><name pos:line="22" pos:column="59">bufofs<pos:position pos:line="22" pos:column="65"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="67">"peerDigestHandleReply"<pos:position pos:line="22" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="91"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="92"/></condition><then pos:line="22" pos:column="92">
        <block type="pseudo"><return pos:line="23" pos:column="9">return;<pos:position pos:line="23" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="25" pos:column="5">/* Call the right function based on the state */</comment>
    <comment type="block" pos:line="26" pos:column="5">/* (Those functions will update the state if needed) */</comment>

    <comment type="block" pos:line="28" pos:column="5">/* Give us a temporary reference. Some of the calls we make may
     * try to destroy the fetch structure, and we like to know if they
     * do
     */</comment>
    <expr_stmt><expr><name pos:line="32" pos:column="5">fetch<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <call><name pos:line="32" pos:column="13">cbdataReference<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name pos:line="32" pos:column="29">fetch<pos:position pos:line="32" pos:column="34"/></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* Repeat this loop until we're out of data OR the state changes */</comment>
    <comment type="block" pos:line="35" pos:column="5">/* (So keep going if the state has changed and we still have data */</comment>
    <do pos:line="36" pos:column="5">do <block pos:line="36" pos:column="8">{
        <expr_stmt><expr><name pos:line="37" pos:column="9">prevstate<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <name><name pos:line="37" pos:column="21">fetch<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">-&gt;<pos:position pos:line="37" pos:column="31"/></operator><name pos:line="37" pos:column="28">state<pos:position pos:line="37" pos:column="33"/></name></name></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>

        <switch pos:line="39" pos:column="9">switch <condition pos:line="39" pos:column="16">(<expr><name><name pos:line="39" pos:column="17">fetch<pos:position pos:line="39" pos:column="22"/></name><operator pos:line="39" pos:column="22">-&gt;<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="24">state<pos:position pos:line="39" pos:column="29"/></name></name></expr>)<pos:position pos:line="39" pos:column="30"/></condition> <block pos:line="39" pos:column="31">{

        <case pos:line="41" pos:column="9">case <expr><name pos:line="41" pos:column="14">DIGEST_READ_REPLY<pos:position pos:line="41" pos:column="31"/></name></expr>:<pos:position pos:line="41" pos:column="32"/></case>
            <expr_stmt><expr><name pos:line="42" pos:column="13">retsize<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">peerDigestFetchReply<pos:position pos:line="42" pos:column="43"/></name><argument_list pos:line="42" pos:column="43">(<argument><expr><name pos:line="42" pos:column="44">fetch<pos:position pos:line="42" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="51">fetch<pos:position pos:line="42" pos:column="56"/></name><operator pos:line="42" pos:column="56">-&gt;<pos:position pos:line="42" pos:column="61"/></operator><name pos:line="42" pos:column="58">buf<pos:position pos:line="42" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="63">fetch<pos:position pos:line="42" pos:column="68"/></name><operator pos:line="42" pos:column="68">-&gt;<pos:position pos:line="42" pos:column="73"/></operator><name pos:line="42" pos:column="70">bufofs<pos:position pos:line="42" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="78"/></expr_stmt>
            <break pos:line="43" pos:column="13">break;<pos:position pos:line="43" pos:column="19"/></break>

        <case pos:line="45" pos:column="9">case <expr><name pos:line="45" pos:column="14">DIGEST_READ_HEADERS<pos:position pos:line="45" pos:column="33"/></name></expr>:<pos:position pos:line="45" pos:column="34"/></case>
            <expr_stmt><expr><name pos:line="46" pos:column="13">retsize<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">=<pos:position pos:line="46" pos:column="22"/></operator> <call><name pos:line="46" pos:column="23">peerDigestSwapInHeaders<pos:position pos:line="46" pos:column="46"/></name><argument_list pos:line="46" pos:column="46">(<argument><expr><name pos:line="46" pos:column="47">fetch<pos:position pos:line="46" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="54">fetch<pos:position pos:line="46" pos:column="59"/></name><operator pos:line="46" pos:column="59">-&gt;<pos:position pos:line="46" pos:column="64"/></operator><name pos:line="46" pos:column="61">buf<pos:position pos:line="46" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="66">fetch<pos:position pos:line="46" pos:column="71"/></name><operator pos:line="46" pos:column="71">-&gt;<pos:position pos:line="46" pos:column="76"/></operator><name pos:line="46" pos:column="73">bufofs<pos:position pos:line="46" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="81"/></expr_stmt>
            <break pos:line="47" pos:column="13">break;<pos:position pos:line="47" pos:column="19"/></break>

        <case pos:line="49" pos:column="9">case <expr><name pos:line="49" pos:column="14">DIGEST_READ_CBLOCK<pos:position pos:line="49" pos:column="32"/></name></expr>:<pos:position pos:line="49" pos:column="33"/></case>
            <expr_stmt><expr><name pos:line="50" pos:column="13">retsize<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <call><name pos:line="50" pos:column="23">peerDigestSwapInCBlock<pos:position pos:line="50" pos:column="45"/></name><argument_list pos:line="50" pos:column="45">(<argument><expr><name pos:line="50" pos:column="46">fetch<pos:position pos:line="50" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="53">fetch<pos:position pos:line="50" pos:column="58"/></name><operator pos:line="50" pos:column="58">-&gt;<pos:position pos:line="50" pos:column="63"/></operator><name pos:line="50" pos:column="60">buf<pos:position pos:line="50" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="65">fetch<pos:position pos:line="50" pos:column="70"/></name><operator pos:line="50" pos:column="70">-&gt;<pos:position pos:line="50" pos:column="75"/></operator><name pos:line="50" pos:column="72">bufofs<pos:position pos:line="50" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="80"/></expr_stmt>
            <break pos:line="51" pos:column="13">break;<pos:position pos:line="51" pos:column="19"/></break>

        <case pos:line="53" pos:column="9">case <expr><name pos:line="53" pos:column="14">DIGEST_READ_MASK<pos:position pos:line="53" pos:column="30"/></name></expr>:<pos:position pos:line="53" pos:column="31"/></case>
            <expr_stmt><expr><name pos:line="54" pos:column="13">retsize<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <call><name pos:line="54" pos:column="23">peerDigestSwapInMask<pos:position pos:line="54" pos:column="43"/></name><argument_list pos:line="54" pos:column="43">(<argument><expr><name pos:line="54" pos:column="44">fetch<pos:position pos:line="54" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="51">fetch<pos:position pos:line="54" pos:column="56"/></name><operator pos:line="54" pos:column="56">-&gt;<pos:position pos:line="54" pos:column="61"/></operator><name pos:line="54" pos:column="58">buf<pos:position pos:line="54" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="63">fetch<pos:position pos:line="54" pos:column="68"/></name><operator pos:line="54" pos:column="68">-&gt;<pos:position pos:line="54" pos:column="73"/></operator><name pos:line="54" pos:column="70">bufofs<pos:position pos:line="54" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="78"/></expr_stmt>
            <break pos:line="55" pos:column="13">break;<pos:position pos:line="55" pos:column="19"/></break>

        <case pos:line="57" pos:column="9">case <expr><name pos:line="57" pos:column="14">DIGEST_READ_NONE<pos:position pos:line="57" pos:column="30"/></name></expr>:<pos:position pos:line="57" pos:column="31"/></case>
            <break pos:line="58" pos:column="13">break;<pos:position pos:line="58" pos:column="19"/></break>

        <case pos:line="60" pos:column="9">case <expr><name pos:line="60" pos:column="14">DIGEST_READ_DONE<pos:position pos:line="60" pos:column="30"/></name></expr>:<pos:position pos:line="60" pos:column="31"/></case>
            <goto pos:line="61" pos:column="13">goto <name pos:line="61" pos:column="18">finish<pos:position pos:line="61" pos:column="24"/></name>;<pos:position pos:line="61" pos:column="25"/></goto>
            <break pos:line="62" pos:column="13">break;<pos:position pos:line="62" pos:column="19"/></break>

        <default pos:line="64" pos:column="9">default:<pos:position pos:line="64" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">fatal<pos:position pos:line="65" pos:column="18"/></name><argument_list pos:line="65" pos:column="18">(<argument><expr><literal type="string" pos:line="65" pos:column="19">"Bad digest transfer mode!\n"<pos:position pos:line="65" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="66" pos:column="10"/></block></switch>

        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">retsize<pos:position pos:line="68" pos:column="20"/></name> <operator pos:line="68" pos:column="21">&lt;<pos:position pos:line="68" pos:column="25"/></operator> <literal type="number" pos:line="68" pos:column="23">0<pos:position pos:line="68" pos:column="24"/></literal></expr>)<pos:position pos:line="68" pos:column="25"/></condition><then pos:line="68" pos:column="25">
            <block type="pseudo"><goto pos:line="69" pos:column="13">goto <name pos:line="69" pos:column="18">finish<pos:position pos:line="69" pos:column="24"/></name>;<pos:position pos:line="69" pos:column="25"/></goto></block></then></if>

        <comment type="block" pos:line="71" pos:column="9">/*
         * The returned size indicates how much of the buffer was read -
         * so move the remainder of the buffer to the beginning
         * and update the bufofs / bufsize
         */</comment>
        <expr_stmt><expr><name pos:line="76" pos:column="9">newsize<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name><name pos:line="76" pos:column="19">fetch<pos:position pos:line="76" pos:column="24"/></name><operator pos:line="76" pos:column="24">-&gt;<pos:position pos:line="76" pos:column="29"/></operator><name pos:line="76" pos:column="26">bufofs<pos:position pos:line="76" pos:column="32"/></name></name> <operator pos:line="76" pos:column="33">-<pos:position pos:line="76" pos:column="34"/></operator> <name pos:line="76" pos:column="35">retsize<pos:position pos:line="76" pos:column="42"/></name></expr>;<pos:position pos:line="76" pos:column="43"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="78" pos:column="9">xmemmove<pos:position pos:line="78" pos:column="17"/></name><argument_list pos:line="78" pos:column="17">(<argument><expr><name><name pos:line="78" pos:column="18">fetch<pos:position pos:line="78" pos:column="23"/></name><operator pos:line="78" pos:column="23">-&gt;<pos:position pos:line="78" pos:column="28"/></operator><name pos:line="78" pos:column="25">buf<pos:position pos:line="78" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="30">fetch<pos:position pos:line="78" pos:column="35"/></name><operator pos:line="78" pos:column="35">-&gt;<pos:position pos:line="78" pos:column="40"/></operator><name pos:line="78" pos:column="37">buf<pos:position pos:line="78" pos:column="40"/></name></name> <operator pos:line="78" pos:column="41">+<pos:position pos:line="78" pos:column="42"/></operator> <name pos:line="78" pos:column="43">retsize<pos:position pos:line="78" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="52">fetch<pos:position pos:line="78" pos:column="57"/></name><operator pos:line="78" pos:column="57">-&gt;<pos:position pos:line="78" pos:column="62"/></operator><name pos:line="78" pos:column="59">bufofs<pos:position pos:line="78" pos:column="65"/></name></name> <operator pos:line="78" pos:column="66">-<pos:position pos:line="78" pos:column="67"/></operator> <name pos:line="78" pos:column="68">newsize<pos:position pos:line="78" pos:column="75"/></name></expr></argument>)<pos:position pos:line="78" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="77"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="80" pos:column="9">fetch<pos:position pos:line="80" pos:column="14"/></name><operator pos:line="80" pos:column="14">-&gt;<pos:position pos:line="80" pos:column="19"/></operator><name pos:line="80" pos:column="16">bufofs<pos:position pos:line="80" pos:column="22"/></name></name> <operator pos:line="80" pos:column="23">=<pos:position pos:line="80" pos:column="24"/></operator> <name pos:line="80" pos:column="25">newsize<pos:position pos:line="80" pos:column="32"/></name></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt>

    }<pos:position pos:line="82" pos:column="6"/></block> while <condition pos:line="82" pos:column="13">(<expr><call><name pos:line="82" pos:column="14">cbdataReferenceValid<pos:position pos:line="82" pos:column="34"/></name><argument_list pos:line="82" pos:column="34">(<argument><expr><name pos:line="82" pos:column="35">fetch<pos:position pos:line="82" pos:column="40"/></name></expr></argument>)<pos:position pos:line="82" pos:column="41"/></argument_list></call> <operator pos:line="82" pos:column="42">&amp;&amp;<pos:position pos:line="82" pos:column="52"/></operator> <name pos:line="82" pos:column="45">prevstate<pos:position pos:line="82" pos:column="54"/></name> <operator pos:line="82" pos:column="55">!=<pos:position pos:line="82" pos:column="57"/></operator> <name><name pos:line="82" pos:column="58">fetch<pos:position pos:line="82" pos:column="63"/></name><operator pos:line="82" pos:column="63">-&gt;<pos:position pos:line="82" pos:column="68"/></operator><name pos:line="82" pos:column="65">state<pos:position pos:line="82" pos:column="70"/></name></name> <operator pos:line="82" pos:column="71">&amp;&amp;<pos:position pos:line="82" pos:column="81"/></operator> <name><name pos:line="82" pos:column="74">fetch<pos:position pos:line="82" pos:column="79"/></name><operator pos:line="82" pos:column="79">-&gt;<pos:position pos:line="82" pos:column="84"/></operator><name pos:line="82" pos:column="81">bufofs<pos:position pos:line="82" pos:column="87"/></name></name> <operator pos:line="82" pos:column="88">&gt;<pos:position pos:line="82" pos:column="92"/></operator> <literal type="number" pos:line="82" pos:column="90">0<pos:position pos:line="82" pos:column="91"/></literal></expr>)<pos:position pos:line="82" pos:column="92"/></condition>;<pos:position pos:line="82" pos:column="93"/></do>

    <comment type="block" pos:line="84" pos:column="5">/* Update the copy offset */</comment>
    <expr_stmt><expr><name><name pos:line="85" pos:column="5">fetch<pos:position pos:line="85" pos:column="10"/></name><operator pos:line="85" pos:column="10">-&gt;<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="12">offset<pos:position pos:line="85" pos:column="18"/></name></name> <operator pos:line="85" pos:column="19">+=<pos:position pos:line="85" pos:column="21"/></operator> <name><name pos:line="85" pos:column="22">receivedData<pos:position pos:line="85" pos:column="34"/></name><operator pos:line="85" pos:column="34">.<pos:position pos:line="85" pos:column="35"/></operator><name pos:line="85" pos:column="35">length<pos:position pos:line="85" pos:column="41"/></name></name></expr>;<pos:position pos:line="85" pos:column="42"/></expr_stmt>

    <comment type="block" pos:line="87" pos:column="5">/* Schedule another copy */</comment>
    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><call><name pos:line="88" pos:column="9">cbdataReferenceValid<pos:position pos:line="88" pos:column="29"/></name><argument_list pos:line="88" pos:column="29">(<argument><expr><name pos:line="88" pos:column="30">fetch<pos:position pos:line="88" pos:column="35"/></name></expr></argument>)<pos:position pos:line="88" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="37"/></condition><then pos:line="88" pos:column="37"> <block pos:line="88" pos:column="38">{
        <decl_stmt><decl><type><name pos:line="89" pos:column="9">StoreIOBuffer<pos:position pos:line="89" pos:column="22"/></name></type> <name pos:line="89" pos:column="23">tempBuffer<pos:position pos:line="89" pos:column="33"/></name></decl>;<pos:position pos:line="89" pos:column="34"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="90" pos:column="9">tempBuffer<pos:position pos:line="90" pos:column="19"/></name><operator pos:line="90" pos:column="19">.<pos:position pos:line="90" pos:column="20"/></operator><name pos:line="90" pos:column="20">offset<pos:position pos:line="90" pos:column="26"/></name></name> <operator pos:line="90" pos:column="27">=<pos:position pos:line="90" pos:column="28"/></operator> <name><name pos:line="90" pos:column="29">fetch<pos:position pos:line="90" pos:column="34"/></name><operator pos:line="90" pos:column="34">-&gt;<pos:position pos:line="90" pos:column="39"/></operator><name pos:line="90" pos:column="36">offset<pos:position pos:line="90" pos:column="42"/></name></name></expr>;<pos:position pos:line="90" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="91" pos:column="9">tempBuffer<pos:position pos:line="91" pos:column="19"/></name><operator pos:line="91" pos:column="19">.<pos:position pos:line="91" pos:column="20"/></operator><name pos:line="91" pos:column="20">length<pos:position pos:line="91" pos:column="26"/></name></name> <operator pos:line="91" pos:column="27">=<pos:position pos:line="91" pos:column="28"/></operator> <name pos:line="91" pos:column="29">SM_PAGE_SIZE<pos:position pos:line="91" pos:column="41"/></name> <operator pos:line="91" pos:column="42">-<pos:position pos:line="91" pos:column="43"/></operator> <name><name pos:line="91" pos:column="44">fetch<pos:position pos:line="91" pos:column="49"/></name><operator pos:line="91" pos:column="49">-&gt;<pos:position pos:line="91" pos:column="54"/></operator><name pos:line="91" pos:column="51">bufofs<pos:position pos:line="91" pos:column="57"/></name></name></expr>;<pos:position pos:line="91" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="92" pos:column="9">tempBuffer<pos:position pos:line="92" pos:column="19"/></name><operator pos:line="92" pos:column="19">.<pos:position pos:line="92" pos:column="20"/></operator><name pos:line="92" pos:column="20">data<pos:position pos:line="92" pos:column="24"/></name></name> <operator pos:line="92" pos:column="25">=<pos:position pos:line="92" pos:column="26"/></operator> <name><name pos:line="92" pos:column="27">fetch<pos:position pos:line="92" pos:column="32"/></name><operator pos:line="92" pos:column="32">-&gt;<pos:position pos:line="92" pos:column="37"/></operator><name pos:line="92" pos:column="34">buf<pos:position pos:line="92" pos:column="37"/></name></name> <operator pos:line="92" pos:column="38">+<pos:position pos:line="92" pos:column="39"/></operator> <name><name pos:line="92" pos:column="40">fetch<pos:position pos:line="92" pos:column="45"/></name><operator pos:line="92" pos:column="45">-&gt;<pos:position pos:line="92" pos:column="50"/></operator><name pos:line="92" pos:column="47">bufofs<pos:position pos:line="92" pos:column="53"/></name></name></expr>;<pos:position pos:line="92" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">storeClientCopy<pos:position pos:line="93" pos:column="24"/></name><argument_list pos:line="93" pos:column="24">(<argument><expr><name><name pos:line="93" pos:column="25">fetch<pos:position pos:line="93" pos:column="30"/></name><operator pos:line="93" pos:column="30">-&gt;<pos:position pos:line="93" pos:column="35"/></operator><name pos:line="93" pos:column="32">sc<pos:position pos:line="93" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="36">fetch<pos:position pos:line="93" pos:column="41"/></name><operator pos:line="93" pos:column="41">-&gt;<pos:position pos:line="93" pos:column="46"/></operator><name pos:line="93" pos:column="43">entry<pos:position pos:line="93" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="50">tempBuffer<pos:position pos:line="93" pos:column="60"/></name></expr></argument>,
                        <argument><expr><name pos:line="94" pos:column="25">peerDigestHandleReply<pos:position pos:line="94" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="48">fetch<pos:position pos:line="94" pos:column="53"/></name></expr></argument>)<pos:position pos:line="94" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="95" pos:column="6"/></block></then></if>

<label><name pos:line="97" pos:column="1">finish<pos:position pos:line="97" pos:column="7"/></name>:<pos:position pos:line="97" pos:column="8"/></label>
    <comment type="block" pos:line="98" pos:column="5">/* Get rid of our reference, we've finished with it for now */</comment>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">cbdataReferenceDone<pos:position pos:line="99" pos:column="24"/></name><argument_list pos:line="99" pos:column="24">(<argument><expr><name pos:line="99" pos:column="25">fetch<pos:position pos:line="99" pos:column="30"/></name></expr></argument>)<pos:position pos:line="99" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="32"/></expr_stmt>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
