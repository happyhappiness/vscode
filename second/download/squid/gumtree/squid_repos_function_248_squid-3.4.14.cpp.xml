<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_248_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">HRESULT<pos:position pos:line="1" pos:column="8"/></name></type>
<name pos:line="2" pos:column="1">Recursive_Memberof<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">IADs<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type> <name pos:line="2" pos:column="27">pObj<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">VARIANT<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">var<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">long<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">lBound<pos:position pos:line="5" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="18">uBound<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">HRESULT<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">hr<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">VariantInit<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><operator pos:line="8" pos:column="17">&amp;<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="18">var<pos:position pos:line="8" pos:column="21"/></name></expr></argument>)<pos:position pos:line="8" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name pos:line="9" pos:column="5">hr<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <call><name><name pos:line="9" pos:column="10">pObj<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">-&gt;<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="16">lpVtbl<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">-&gt;<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="24">Get<pos:position pos:line="9" pos:column="27"/></name></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">pObj<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="34">L"memberOf"<pos:position pos:line="9" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="9" pos:column="47">&amp;<pos:position pos:line="9" pos:column="52"/></operator><name pos:line="9" pos:column="48">var<pos:position pos:line="9" pos:column="51"/></name></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="53"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">SUCCEEDED<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">hr<pos:position pos:line="10" pos:column="21"/></name></expr></argument>)<pos:position pos:line="10" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <block pos:line="10" pos:column="24">{
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">VT_BSTR<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">==<pos:position pos:line="11" pos:column="23"/></operator> <name><name pos:line="11" pos:column="24">var<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">.<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">n1<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">.<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">n2<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">.<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">vt<pos:position pos:line="11" pos:column="36"/></name></name></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37"> <block pos:line="11" pos:column="38">{
            <if pos:line="12" pos:column="13">if <condition pos:line="12" pos:column="16">(<expr><call><name pos:line="12" pos:column="17">add_User_Group<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name><name pos:line="12" pos:column="32">var<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">.<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="36">n1<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">.<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="39">n2<pos:position pos:line="12" pos:column="41"/></name><operator pos:line="12" pos:column="41">.<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="42">n3<pos:position pos:line="12" pos:column="44"/></name><operator pos:line="12" pos:column="44">.<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="45">bstrVal<pos:position pos:line="12" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="54"/></condition><then pos:line="12" pos:column="54"> <block pos:line="12" pos:column="55">{
                <decl_stmt><decl><type><name pos:line="13" pos:column="17">wchar_t<pos:position pos:line="13" pos:column="24"/></name> <modifier pos:line="13" pos:column="25">*<pos:position pos:line="13" pos:column="26"/></modifier></type><name pos:line="13" pos:column="26">Group_Path<pos:position pos:line="13" pos:column="36"/></name></decl>;<pos:position pos:line="13" pos:column="37"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="14" pos:column="17">IADs<pos:position pos:line="14" pos:column="21"/></name> <modifier pos:line="14" pos:column="22">*<pos:position pos:line="14" pos:column="23"/></modifier></type><name pos:line="14" pos:column="23">pGrp<pos:position pos:line="14" pos:column="27"/></name></decl>;<pos:position pos:line="14" pos:column="28"/></decl_stmt>

                <expr_stmt><expr><name pos:line="16" pos:column="17">Group_Path<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">=<pos:position pos:line="16" pos:column="29"/></operator> <call><name pos:line="16" pos:column="30">GetLDAPPath<pos:position pos:line="16" pos:column="41"/></name><argument_list pos:line="16" pos:column="41">(<argument><expr><name><name pos:line="16" pos:column="42">var<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">.<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">n1<pos:position pos:line="16" pos:column="48"/></name><operator pos:line="16" pos:column="48">.<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="49">n2<pos:position pos:line="16" pos:column="51"/></name><operator pos:line="16" pos:column="51">.<pos:position pos:line="16" pos:column="52"/></operator><name pos:line="16" pos:column="52">n3<pos:position pos:line="16" pos:column="54"/></name><operator pos:line="16" pos:column="54">.<pos:position pos:line="16" pos:column="55"/></operator><name pos:line="16" pos:column="55">bstrVal<pos:position pos:line="16" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="64">GC_MODE<pos:position pos:line="16" pos:column="71"/></name></expr></argument>)<pos:position pos:line="16" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="73"/></expr_stmt>
                <expr_stmt><expr><name pos:line="17" pos:column="17">hr<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <call><name pos:line="17" pos:column="22">ADsGetObject<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">Group_Path<pos:position pos:line="17" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="47">&amp;<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="48">IID_IADs<pos:position pos:line="17" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="58">(<pos:position pos:line="17" pos:column="59"/></operator><name pos:line="17" pos:column="59">void<pos:position pos:line="17" pos:column="63"/></name> <operator pos:line="17" pos:column="64">*<pos:position pos:line="17" pos:column="65"/></operator><operator pos:line="17" pos:column="65">*<pos:position pos:line="17" pos:column="66"/></operator><operator pos:line="17" pos:column="66">)<pos:position pos:line="17" pos:column="67"/></operator> <operator pos:line="17" pos:column="68">&amp;<pos:position pos:line="17" pos:column="73"/></operator><name pos:line="17" pos:column="69">pGrp<pos:position pos:line="17" pos:column="73"/></name></expr></argument>)<pos:position pos:line="17" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="75"/></expr_stmt>
                <if pos:line="18" pos:column="17">if <condition pos:line="18" pos:column="20">(<expr><call><name pos:line="18" pos:column="21">SUCCEEDED<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name pos:line="18" pos:column="31">hr<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="35"/></condition><then pos:line="18" pos:column="35"> <block pos:line="18" pos:column="36">{
                    <expr_stmt><expr><name pos:line="19" pos:column="21">hr<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <call><name pos:line="19" pos:column="26">Recursive_Memberof<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">(<argument><expr><name pos:line="19" pos:column="45">pGrp<pos:position pos:line="19" pos:column="49"/></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="51"/></expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="20" pos:column="21">pGrp<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">-&gt;<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="27">lpVtbl<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">Release<pos:position pos:line="20" pos:column="42"/></name></name><argument_list pos:line="20" pos:column="42">(<argument><expr><name pos:line="20" pos:column="43">pGrp<pos:position pos:line="20" pos:column="47"/></name></expr></argument>)<pos:position pos:line="20" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="49"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="21" pos:column="21">safe_free<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">Group_Path<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="22" pos:column="21">Group_Path<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">=<pos:position pos:line="22" pos:column="33"/></operator> <call><name pos:line="22" pos:column="34">GetLDAPPath<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><name><name pos:line="22" pos:column="46">var<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">.<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="50">n1<pos:position pos:line="22" pos:column="52"/></name><operator pos:line="22" pos:column="52">.<pos:position pos:line="22" pos:column="53"/></operator><name pos:line="22" pos:column="53">n2<pos:position pos:line="22" pos:column="55"/></name><operator pos:line="22" pos:column="55">.<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="56">n3<pos:position pos:line="22" pos:column="58"/></name><operator pos:line="22" pos:column="58">.<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="59">bstrVal<pos:position pos:line="22" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="68">LDAP_MODE<pos:position pos:line="22" pos:column="77"/></name></expr></argument>)<pos:position pos:line="22" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="79"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="23" pos:column="21">hr<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <call><name pos:line="23" pos:column="26">ADsGetObject<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><name pos:line="23" pos:column="39">Group_Path<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="51">&amp;<pos:position pos:line="23" pos:column="56"/></operator><name pos:line="23" pos:column="52">IID_IADs<pos:position pos:line="23" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="62">(<pos:position pos:line="23" pos:column="63"/></operator><name pos:line="23" pos:column="63">void<pos:position pos:line="23" pos:column="67"/></name> <operator pos:line="23" pos:column="68">*<pos:position pos:line="23" pos:column="69"/></operator><operator pos:line="23" pos:column="69">*<pos:position pos:line="23" pos:column="70"/></operator><operator pos:line="23" pos:column="70">)<pos:position pos:line="23" pos:column="71"/></operator> <operator pos:line="23" pos:column="72">&amp;<pos:position pos:line="23" pos:column="77"/></operator><name pos:line="23" pos:column="73">pGrp<pos:position pos:line="23" pos:column="77"/></name></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="79"/></expr_stmt>
                    <if pos:line="24" pos:column="21">if <condition pos:line="24" pos:column="24">(<expr><call><name pos:line="24" pos:column="25">SUCCEEDED<pos:position pos:line="24" pos:column="34"/></name><argument_list pos:line="24" pos:column="34">(<argument><expr><name pos:line="24" pos:column="35">hr<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="39"/></condition><then pos:line="24" pos:column="39"> <block pos:line="24" pos:column="40">{
                        <expr_stmt><expr><name pos:line="25" pos:column="25">hr<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">=<pos:position pos:line="25" pos:column="29"/></operator> <call><name pos:line="25" pos:column="30">Recursive_Memberof<pos:position pos:line="25" pos:column="48"/></name><argument_list pos:line="25" pos:column="48">(<argument><expr><name pos:line="25" pos:column="49">pGrp<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
                        <expr_stmt><expr><call><name><name pos:line="26" pos:column="25">pGrp<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">-&gt;<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="31">lpVtbl<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">-&gt;<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="39">Release<pos:position pos:line="26" pos:column="46"/></name></name><argument_list pos:line="26" pos:column="46">(<argument><expr><name pos:line="26" pos:column="47">pGrp<pos:position pos:line="26" pos:column="51"/></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="53"/></expr_stmt>
                    }<pos:position pos:line="27" pos:column="22"/></block></then> <else pos:line="27" pos:column="23">else
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="25">debug<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><literal type="string" pos:line="28" pos:column="31">"Recursive_Memberof: ERROR ADsGetObject for %S failed: %s\n"<pos:position pos:line="28" pos:column="91"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="93">Group_Path<pos:position pos:line="28" pos:column="103"/></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="105">Get_WIN32_ErrorMessage<pos:position pos:line="28" pos:column="127"/></name><argument_list pos:line="28" pos:column="127">(<argument><expr><name pos:line="28" pos:column="128">hr<pos:position pos:line="28" pos:column="130"/></name></expr></argument>)<pos:position pos:line="28" pos:column="131"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="132"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="133"/></expr_stmt></block></else></if>
                }<pos:position pos:line="29" pos:column="18"/></block></then> <else pos:line="29" pos:column="19">else
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="21">debug<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><literal type="string" pos:line="30" pos:column="27">"Recursive_Memberof: ERROR ADsGetObject for %S failed: %s\n"<pos:position pos:line="30" pos:column="87"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="89">Group_Path<pos:position pos:line="30" pos:column="99"/></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="101">Get_WIN32_ErrorMessage<pos:position pos:line="30" pos:column="123"/></name><argument_list pos:line="30" pos:column="123">(<argument><expr><name pos:line="30" pos:column="124">hr<pos:position pos:line="30" pos:column="126"/></name></expr></argument>)<pos:position pos:line="30" pos:column="127"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="128"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="129"/></expr_stmt></block></else></if>
                <expr_stmt><expr><call><name pos:line="31" pos:column="17">safe_free<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">Group_Path<pos:position pos:line="31" pos:column="37"/></name></expr></argument>)<pos:position pos:line="31" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="32" pos:column="14"/></block></then></if>
        }<pos:position pos:line="33" pos:column="10"/></block></then> <else pos:line="33" pos:column="11">else <block pos:line="33" pos:column="16">{
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><call><name pos:line="34" pos:column="17">SUCCEEDED<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><call><name pos:line="34" pos:column="27">SafeArrayGetLBound<pos:position pos:line="34" pos:column="45"/></name><argument_list pos:line="34" pos:column="45">(<argument><expr><call><name pos:line="34" pos:column="46">V_ARRAY<pos:position pos:line="34" pos:column="53"/></name><argument_list pos:line="34" pos:column="53">(<argument><expr><operator pos:line="34" pos:column="54">&amp;<pos:position pos:line="34" pos:column="59"/></operator><name pos:line="34" pos:column="55">var<pos:position pos:line="34" pos:column="58"/></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="61">1<pos:position pos:line="34" pos:column="62"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="64">&amp;<pos:position pos:line="34" pos:column="69"/></operator><name pos:line="34" pos:column="65">lBound<pos:position pos:line="34" pos:column="71"/></name></expr></argument>)<pos:position pos:line="34" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call> <operator pos:line="34" pos:column="74">&amp;&amp;<pos:position pos:line="34" pos:column="84"/></operator>
                    <call><name pos:line="35" pos:column="21">SUCCEEDED<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">(<argument><expr><call><name pos:line="35" pos:column="31">SafeArrayGetUBound<pos:position pos:line="35" pos:column="49"/></name><argument_list pos:line="35" pos:column="49">(<argument><expr><call><name pos:line="35" pos:column="50">V_ARRAY<pos:position pos:line="35" pos:column="57"/></name><argument_list pos:line="35" pos:column="57">(<argument><expr><operator pos:line="35" pos:column="58">&amp;<pos:position pos:line="35" pos:column="63"/></operator><name pos:line="35" pos:column="59">var<pos:position pos:line="35" pos:column="62"/></name></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="65">1<pos:position pos:line="35" pos:column="66"/></literal></expr></argument>, <argument><expr><operator pos:line="35" pos:column="68">&amp;<pos:position pos:line="35" pos:column="73"/></operator><name pos:line="35" pos:column="69">uBound<pos:position pos:line="35" pos:column="75"/></name></expr></argument>)<pos:position pos:line="35" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="78"/></condition><then pos:line="35" pos:column="78"> <block pos:line="35" pos:column="79">{
                <decl_stmt><decl><type><name pos:line="36" pos:column="17">VARIANT<pos:position pos:line="36" pos:column="24"/></name></type> <name pos:line="36" pos:column="25">elem<pos:position pos:line="36" pos:column="29"/></name></decl>;<pos:position pos:line="36" pos:column="30"/></decl_stmt>
                <while pos:line="37" pos:column="17">while <condition pos:line="37" pos:column="23">(<expr><name pos:line="37" pos:column="24">lBound<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">&lt;=<pos:position pos:line="37" pos:column="36"/></operator> <name pos:line="37" pos:column="34">uBound<pos:position pos:line="37" pos:column="40"/></name></expr>)<pos:position pos:line="37" pos:column="41"/></condition> <block pos:line="37" pos:column="42">{
                    <expr_stmt><expr><name pos:line="38" pos:column="21">hr<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <call><name pos:line="38" pos:column="26">SafeArrayGetElement<pos:position pos:line="38" pos:column="45"/></name><argument_list pos:line="38" pos:column="45">(<argument><expr><call><name pos:line="38" pos:column="46">V_ARRAY<pos:position pos:line="38" pos:column="53"/></name><argument_list pos:line="38" pos:column="53">(<argument><expr><operator pos:line="38" pos:column="54">&amp;<pos:position pos:line="38" pos:column="59"/></operator><name pos:line="38" pos:column="55">var<pos:position pos:line="38" pos:column="58"/></name></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="38" pos:column="61">&amp;<pos:position pos:line="38" pos:column="66"/></operator><name pos:line="38" pos:column="62">lBound<pos:position pos:line="38" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="70">&amp;<pos:position pos:line="38" pos:column="75"/></operator><name pos:line="38" pos:column="71">elem<pos:position pos:line="38" pos:column="75"/></name></expr></argument>)<pos:position pos:line="38" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="77"/></expr_stmt>
                    <if pos:line="39" pos:column="21">if <condition pos:line="39" pos:column="24">(<expr><call><name pos:line="39" pos:column="25">SUCCEEDED<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">(<argument><expr><name pos:line="39" pos:column="35">hr<pos:position pos:line="39" pos:column="37"/></name></expr></argument>)<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="39"/></condition><then pos:line="39" pos:column="39"> <block pos:line="39" pos:column="40">{
                        <if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><call><name pos:line="40" pos:column="29">add_User_Group<pos:position pos:line="40" pos:column="43"/></name><argument_list pos:line="40" pos:column="43">(<argument><expr><name><name pos:line="40" pos:column="44">elem<pos:position pos:line="40" pos:column="48"/></name><operator pos:line="40" pos:column="48">.<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="49">n1<pos:position pos:line="40" pos:column="51"/></name><operator pos:line="40" pos:column="51">.<pos:position pos:line="40" pos:column="52"/></operator><name pos:line="40" pos:column="52">n2<pos:position pos:line="40" pos:column="54"/></name><operator pos:line="40" pos:column="54">.<pos:position pos:line="40" pos:column="55"/></operator><name pos:line="40" pos:column="55">n3<pos:position pos:line="40" pos:column="57"/></name><operator pos:line="40" pos:column="57">.<pos:position pos:line="40" pos:column="58"/></operator><name pos:line="40" pos:column="58">bstrVal<pos:position pos:line="40" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="67"/></condition><then pos:line="40" pos:column="67"> <block pos:line="40" pos:column="68">{
                            <decl_stmt><decl><type><name pos:line="41" pos:column="29">wchar_t<pos:position pos:line="41" pos:column="36"/></name> <modifier pos:line="41" pos:column="37">*<pos:position pos:line="41" pos:column="38"/></modifier></type><name pos:line="41" pos:column="38">Group_Path<pos:position pos:line="41" pos:column="48"/></name></decl>;<pos:position pos:line="41" pos:column="49"/></decl_stmt>
                            <decl_stmt><decl><type><name pos:line="42" pos:column="29">IADs<pos:position pos:line="42" pos:column="33"/></name> <modifier pos:line="42" pos:column="34">*<pos:position pos:line="42" pos:column="35"/></modifier></type><name pos:line="42" pos:column="35">pGrp<pos:position pos:line="42" pos:column="39"/></name></decl>;<pos:position pos:line="42" pos:column="40"/></decl_stmt>

                            <expr_stmt><expr><name pos:line="44" pos:column="29">Group_Path<pos:position pos:line="44" pos:column="39"/></name> <operator pos:line="44" pos:column="40">=<pos:position pos:line="44" pos:column="41"/></operator> <call><name pos:line="44" pos:column="42">GetLDAPPath<pos:position pos:line="44" pos:column="53"/></name><argument_list pos:line="44" pos:column="53">(<argument><expr><name><name pos:line="44" pos:column="54">elem<pos:position pos:line="44" pos:column="58"/></name><operator pos:line="44" pos:column="58">.<pos:position pos:line="44" pos:column="59"/></operator><name pos:line="44" pos:column="59">n1<pos:position pos:line="44" pos:column="61"/></name><operator pos:line="44" pos:column="61">.<pos:position pos:line="44" pos:column="62"/></operator><name pos:line="44" pos:column="62">n2<pos:position pos:line="44" pos:column="64"/></name><operator pos:line="44" pos:column="64">.<pos:position pos:line="44" pos:column="65"/></operator><name pos:line="44" pos:column="65">n3<pos:position pos:line="44" pos:column="67"/></name><operator pos:line="44" pos:column="67">.<pos:position pos:line="44" pos:column="68"/></operator><name pos:line="44" pos:column="68">bstrVal<pos:position pos:line="44" pos:column="75"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="77">GC_MODE<pos:position pos:line="44" pos:column="84"/></name></expr></argument>)<pos:position pos:line="44" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="86"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="45" pos:column="29">hr<pos:position pos:line="45" pos:column="31"/></name> <operator pos:line="45" pos:column="32">=<pos:position pos:line="45" pos:column="33"/></operator> <call><name pos:line="45" pos:column="34">ADsGetObject<pos:position pos:line="45" pos:column="46"/></name><argument_list pos:line="45" pos:column="46">(<argument><expr><name pos:line="45" pos:column="47">Group_Path<pos:position pos:line="45" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="59">&amp;<pos:position pos:line="45" pos:column="64"/></operator><name pos:line="45" pos:column="60">IID_IADs<pos:position pos:line="45" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="70">(<pos:position pos:line="45" pos:column="71"/></operator><name pos:line="45" pos:column="71">void<pos:position pos:line="45" pos:column="75"/></name> <operator pos:line="45" pos:column="76">*<pos:position pos:line="45" pos:column="77"/></operator><operator pos:line="45" pos:column="77">*<pos:position pos:line="45" pos:column="78"/></operator><operator pos:line="45" pos:column="78">)<pos:position pos:line="45" pos:column="79"/></operator> <operator pos:line="45" pos:column="80">&amp;<pos:position pos:line="45" pos:column="85"/></operator><name pos:line="45" pos:column="81">pGrp<pos:position pos:line="45" pos:column="85"/></name></expr></argument>)<pos:position pos:line="45" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="87"/></expr_stmt>
                            <if pos:line="46" pos:column="29">if <condition pos:line="46" pos:column="32">(<expr><call><name pos:line="46" pos:column="33">SUCCEEDED<pos:position pos:line="46" pos:column="42"/></name><argument_list pos:line="46" pos:column="42">(<argument><expr><name pos:line="46" pos:column="43">hr<pos:position pos:line="46" pos:column="45"/></name></expr></argument>)<pos:position pos:line="46" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="47"/></condition><then pos:line="46" pos:column="47"> <block pos:line="46" pos:column="48">{
                                <expr_stmt><expr><name pos:line="47" pos:column="33">hr<pos:position pos:line="47" pos:column="35"/></name> <operator pos:line="47" pos:column="36">=<pos:position pos:line="47" pos:column="37"/></operator> <call><name pos:line="47" pos:column="38">Recursive_Memberof<pos:position pos:line="47" pos:column="56"/></name><argument_list pos:line="47" pos:column="56">(<argument><expr><name pos:line="47" pos:column="57">pGrp<pos:position pos:line="47" pos:column="61"/></name></expr></argument>)<pos:position pos:line="47" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="63"/></expr_stmt>
                                <expr_stmt><expr><call><name><name pos:line="48" pos:column="33">pGrp<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">-&gt;<pos:position pos:line="48" pos:column="42"/></operator><name pos:line="48" pos:column="39">lpVtbl<pos:position pos:line="48" pos:column="45"/></name><operator pos:line="48" pos:column="45">-&gt;<pos:position pos:line="48" pos:column="50"/></operator><name pos:line="48" pos:column="47">Release<pos:position pos:line="48" pos:column="54"/></name></name><argument_list pos:line="48" pos:column="54">(<argument><expr><name pos:line="48" pos:column="55">pGrp<pos:position pos:line="48" pos:column="59"/></name></expr></argument>)<pos:position pos:line="48" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="61"/></expr_stmt>
                                <expr_stmt><expr><call><name pos:line="49" pos:column="33">safe_free<pos:position pos:line="49" pos:column="42"/></name><argument_list pos:line="49" pos:column="42">(<argument><expr><name pos:line="49" pos:column="43">Group_Path<pos:position pos:line="49" pos:column="53"/></name></expr></argument>)<pos:position pos:line="49" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="55"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="50" pos:column="33">Group_Path<pos:position pos:line="50" pos:column="43"/></name> <operator pos:line="50" pos:column="44">=<pos:position pos:line="50" pos:column="45"/></operator> <call><name pos:line="50" pos:column="46">GetLDAPPath<pos:position pos:line="50" pos:column="57"/></name><argument_list pos:line="50" pos:column="57">(<argument><expr><name><name pos:line="50" pos:column="58">elem<pos:position pos:line="50" pos:column="62"/></name><operator pos:line="50" pos:column="62">.<pos:position pos:line="50" pos:column="63"/></operator><name pos:line="50" pos:column="63">n1<pos:position pos:line="50" pos:column="65"/></name><operator pos:line="50" pos:column="65">.<pos:position pos:line="50" pos:column="66"/></operator><name pos:line="50" pos:column="66">n2<pos:position pos:line="50" pos:column="68"/></name><operator pos:line="50" pos:column="68">.<pos:position pos:line="50" pos:column="69"/></operator><name pos:line="50" pos:column="69">n3<pos:position pos:line="50" pos:column="71"/></name><operator pos:line="50" pos:column="71">.<pos:position pos:line="50" pos:column="72"/></operator><name pos:line="50" pos:column="72">bstrVal<pos:position pos:line="50" pos:column="79"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="81">LDAP_MODE<pos:position pos:line="50" pos:column="90"/></name></expr></argument>)<pos:position pos:line="50" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="92"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="51" pos:column="33">hr<pos:position pos:line="51" pos:column="35"/></name> <operator pos:line="51" pos:column="36">=<pos:position pos:line="51" pos:column="37"/></operator> <call><name pos:line="51" pos:column="38">ADsGetObject<pos:position pos:line="51" pos:column="50"/></name><argument_list pos:line="51" pos:column="50">(<argument><expr><name pos:line="51" pos:column="51">Group_Path<pos:position pos:line="51" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="63">&amp;<pos:position pos:line="51" pos:column="68"/></operator><name pos:line="51" pos:column="64">IID_IADs<pos:position pos:line="51" pos:column="72"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="74">(<pos:position pos:line="51" pos:column="75"/></operator><name pos:line="51" pos:column="75">void<pos:position pos:line="51" pos:column="79"/></name> <operator pos:line="51" pos:column="80">*<pos:position pos:line="51" pos:column="81"/></operator><operator pos:line="51" pos:column="81">*<pos:position pos:line="51" pos:column="82"/></operator><operator pos:line="51" pos:column="82">)<pos:position pos:line="51" pos:column="83"/></operator> <operator pos:line="51" pos:column="84">&amp;<pos:position pos:line="51" pos:column="89"/></operator><name pos:line="51" pos:column="85">pGrp<pos:position pos:line="51" pos:column="89"/></name></expr></argument>)<pos:position pos:line="51" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="91"/></expr_stmt>
                                <if pos:line="52" pos:column="33">if <condition pos:line="52" pos:column="36">(<expr><call><name pos:line="52" pos:column="37">SUCCEEDED<pos:position pos:line="52" pos:column="46"/></name><argument_list pos:line="52" pos:column="46">(<argument><expr><name pos:line="52" pos:column="47">hr<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="51"/></condition><then pos:line="52" pos:column="51"> <block pos:line="52" pos:column="52">{
                                    <expr_stmt><expr><name pos:line="53" pos:column="37">hr<pos:position pos:line="53" pos:column="39"/></name> <operator pos:line="53" pos:column="40">=<pos:position pos:line="53" pos:column="41"/></operator> <call><name pos:line="53" pos:column="42">Recursive_Memberof<pos:position pos:line="53" pos:column="60"/></name><argument_list pos:line="53" pos:column="60">(<argument><expr><name pos:line="53" pos:column="61">pGrp<pos:position pos:line="53" pos:column="65"/></name></expr></argument>)<pos:position pos:line="53" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="67"/></expr_stmt>
                                    <expr_stmt><expr><call><name><name pos:line="54" pos:column="37">pGrp<pos:position pos:line="54" pos:column="41"/></name><operator pos:line="54" pos:column="41">-&gt;<pos:position pos:line="54" pos:column="46"/></operator><name pos:line="54" pos:column="43">lpVtbl<pos:position pos:line="54" pos:column="49"/></name><operator pos:line="54" pos:column="49">-&gt;<pos:position pos:line="54" pos:column="54"/></operator><name pos:line="54" pos:column="51">Release<pos:position pos:line="54" pos:column="58"/></name></name><argument_list pos:line="54" pos:column="58">(<argument><expr><name pos:line="54" pos:column="59">pGrp<pos:position pos:line="54" pos:column="63"/></name></expr></argument>)<pos:position pos:line="54" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="65"/></expr_stmt>
                                    <expr_stmt><expr><call><name pos:line="55" pos:column="37">safe_free<pos:position pos:line="55" pos:column="46"/></name><argument_list pos:line="55" pos:column="46">(<argument><expr><name pos:line="55" pos:column="47">Group_Path<pos:position pos:line="55" pos:column="57"/></name></expr></argument>)<pos:position pos:line="55" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="59"/></expr_stmt>
                                }<pos:position pos:line="56" pos:column="34"/></block></then> <else pos:line="56" pos:column="35">else
                                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="57" pos:column="37">debug<pos:position pos:line="57" pos:column="42"/></name><argument_list pos:line="57" pos:column="42">(<argument><expr><literal type="string" pos:line="57" pos:column="43">"Recursive_Memberof: ERROR ADsGetObject for %S failed: %s\n"<pos:position pos:line="57" pos:column="103"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="105">Group_Path<pos:position pos:line="57" pos:column="115"/></name></expr></argument>, <argument><expr><call><name pos:line="57" pos:column="117">Get_WIN32_ErrorMessage<pos:position pos:line="57" pos:column="139"/></name><argument_list pos:line="57" pos:column="139">(<argument><expr><name pos:line="57" pos:column="140">hr<pos:position pos:line="57" pos:column="142"/></name></expr></argument>)<pos:position pos:line="57" pos:column="143"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="144"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="145"/></expr_stmt></block></else></if>
                            }<pos:position pos:line="58" pos:column="30"/></block></then> <else pos:line="58" pos:column="31">else
                                <block type="pseudo"><expr_stmt><expr><call><name pos:line="59" pos:column="33">debug<pos:position pos:line="59" pos:column="38"/></name><argument_list pos:line="59" pos:column="38">(<argument><expr><literal type="string" pos:line="59" pos:column="39">"Recursive_Memberof: ERROR ADsGetObject for %S failed: %s\n"<pos:position pos:line="59" pos:column="99"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="101">Group_Path<pos:position pos:line="59" pos:column="111"/></name></expr></argument>, <argument><expr><call><name pos:line="59" pos:column="113">Get_WIN32_ErrorMessage<pos:position pos:line="59" pos:column="135"/></name><argument_list pos:line="59" pos:column="135">(<argument><expr><name pos:line="59" pos:column="136">hr<pos:position pos:line="59" pos:column="138"/></name></expr></argument>)<pos:position pos:line="59" pos:column="139"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="140"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="141"/></expr_stmt></block></else></if>
                            <expr_stmt><expr><call><name pos:line="60" pos:column="29">safe_free<pos:position pos:line="60" pos:column="38"/></name><argument_list pos:line="60" pos:column="38">(<argument><expr><name pos:line="60" pos:column="39">Group_Path<pos:position pos:line="60" pos:column="49"/></name></expr></argument>)<pos:position pos:line="60" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="51"/></expr_stmt>
                        }<pos:position pos:line="61" pos:column="26"/></block></then></if>
                        <expr_stmt><expr><call><name pos:line="62" pos:column="25">VariantClear<pos:position pos:line="62" pos:column="37"/></name><argument_list pos:line="62" pos:column="37">(<argument><expr><operator pos:line="62" pos:column="38">&amp;<pos:position pos:line="62" pos:column="43"/></operator><name pos:line="62" pos:column="39">elem<pos:position pos:line="62" pos:column="43"/></name></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt>
                    }<pos:position pos:line="63" pos:column="22"/></block></then> <else pos:line="63" pos:column="23">else <block pos:line="63" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="64" pos:column="25">debug<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><literal type="string" pos:line="64" pos:column="31">"Recursive_Memberof: ERROR SafeArrayGetElement failed: %s\n"<pos:position pos:line="64" pos:column="91"/></literal></expr></argument>, <argument><expr><call><name pos:line="64" pos:column="93">Get_WIN32_ErrorMessage<pos:position pos:line="64" pos:column="115"/></name><argument_list pos:line="64" pos:column="115">(<argument><expr><name pos:line="64" pos:column="116">hr<pos:position pos:line="64" pos:column="118"/></name></expr></argument>)<pos:position pos:line="64" pos:column="119"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="121"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="65" pos:column="25">VariantClear<pos:position pos:line="65" pos:column="37"/></name><argument_list pos:line="65" pos:column="37">(<argument><expr><operator pos:line="65" pos:column="38">&amp;<pos:position pos:line="65" pos:column="43"/></operator><name pos:line="65" pos:column="39">elem<pos:position pos:line="65" pos:column="43"/></name></expr></argument>)<pos:position pos:line="65" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="45"/></expr_stmt>
                    }<pos:position pos:line="66" pos:column="22"/></block></else></if>
                    <expr_stmt><expr><operator pos:line="67" pos:column="21">++<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="23">lBound<pos:position pos:line="67" pos:column="29"/></name></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt>
                }<pos:position pos:line="68" pos:column="18"/></block></while>
            }<pos:position pos:line="69" pos:column="14"/></block></then> <else pos:line="69" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="17">debug<pos:position pos:line="70" pos:column="22"/></name><argument_list pos:line="70" pos:column="22">(<argument><expr><literal type="string" pos:line="70" pos:column="23">"Recursive_Memberof: ERROR SafeArrayGetxBound failed: %s\n"<pos:position pos:line="70" pos:column="82"/></literal></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="84">Get_WIN32_ErrorMessage<pos:position pos:line="70" pos:column="106"/></name><argument_list pos:line="70" pos:column="106">(<argument><expr><name pos:line="70" pos:column="107">hr<pos:position pos:line="70" pos:column="109"/></name></expr></argument>)<pos:position pos:line="70" pos:column="110"/></argument_list></call></expr></argument>)<pos:position pos:line="70" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="112"/></expr_stmt></block></else></if>
        }<pos:position pos:line="71" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">VariantClear<pos:position pos:line="72" pos:column="21"/></name><argument_list pos:line="72" pos:column="21">(<argument><expr><operator pos:line="72" pos:column="22">&amp;<pos:position pos:line="72" pos:column="27"/></operator><name pos:line="72" pos:column="23">var<pos:position pos:line="72" pos:column="26"/></name></expr></argument>)<pos:position pos:line="72" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then> <else pos:line="73" pos:column="7">else <block pos:line="73" pos:column="12">{
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">hr<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">!=<pos:position pos:line="74" pos:column="18"/></operator> <name pos:line="74" pos:column="19">E_ADS_PROPERTY_NOT_FOUND<pos:position pos:line="74" pos:column="43"/></name></expr>)<pos:position pos:line="74" pos:column="44"/></condition><then pos:line="74" pos:column="44">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="75" pos:column="13">debug<pos:position pos:line="75" pos:column="18"/></name><argument_list pos:line="75" pos:column="18">(<argument><expr><literal type="string" pos:line="75" pos:column="19">"Recursive_Memberof: ERROR getting memberof attribute: %s\n"<pos:position pos:line="75" pos:column="79"/></literal></expr></argument>, <argument><expr><call><name pos:line="75" pos:column="81">Get_WIN32_ErrorMessage<pos:position pos:line="75" pos:column="103"/></name><argument_list pos:line="75" pos:column="103">(<argument><expr><name pos:line="75" pos:column="104">hr<pos:position pos:line="75" pos:column="106"/></name></expr></argument>)<pos:position pos:line="75" pos:column="107"/></argument_list></call></expr></argument>)<pos:position pos:line="75" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="109"/></expr_stmt></block></then></if>
    }<pos:position pos:line="76" pos:column="6"/></block></else></if>
    <return pos:line="77" pos:column="5">return <expr><name pos:line="77" pos:column="12">hr<pos:position pos:line="77" pos:column="14"/></name></expr>;<pos:position pos:line="77" pos:column="15"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
