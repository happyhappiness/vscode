<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4889_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">RequestParser<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">skipDelimiter<pos:position pos:line="2" pos:column="40"/></name></name><parameter_list pos:line="2" pos:column="40">(<parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">size_t<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">count<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="61">const<pos:position pos:line="2" pos:column="66"/></specifier> <name pos:line="2" pos:column="67">char<pos:position pos:line="2" pos:column="71"/></name> <modifier pos:line="2" pos:column="72">*<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="73">where<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">count<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">&lt;=<pos:position pos:line="4" pos:column="20"/></operator> <literal type="number" pos:line="4" pos:column="18">0<pos:position pos:line="4" pos:column="19"/></literal></expr>)<pos:position pos:line="4" pos:column="20"/></condition><then pos:line="4" pos:column="20"> <block pos:line="4" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">33<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="5" pos:column="20">ErrorLevel<pos:position pos:line="5" pos:column="30"/></name><argument_list pos:line="5" pos:column="30">()<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="34">"invalid request-line: missing delimiter "<pos:position pos:line="5" pos:column="76"/></literal> <operator pos:line="5" pos:column="77">&lt;&lt;<pos:position pos:line="5" pos:column="85"/></operator> <name pos:line="5" pos:column="80">where<pos:position pos:line="5" pos:column="85"/></name></expr></argument>)<pos:position pos:line="5" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="87"/></expr_stmt>
        <expr_stmt><expr><name pos:line="6" pos:column="9">parseStatusCode<pos:position pos:line="6" pos:column="24"/></name> <operator pos:line="6" pos:column="25">=<pos:position pos:line="6" pos:column="26"/></operator> <name><name pos:line="6" pos:column="27">Http<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">::<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="33">scBadRequest<pos:position pos:line="6" pos:column="45"/></name></name></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="10" pos:column="5">// tolerant parser allows multiple whitespace characters between request-line fields</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">count<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">&gt;<pos:position pos:line="11" pos:column="19"/></operator> <literal type="number" pos:line="11" pos:column="17">1<pos:position pos:line="11" pos:column="18"/></literal> <operator pos:line="11" pos:column="19">&amp;&amp;<pos:position pos:line="11" pos:column="29"/></operator> <operator pos:line="11" pos:column="22">!<pos:position pos:line="11" pos:column="23"/></operator><name><name pos:line="11" pos:column="23">Config<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">.<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">onoff<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">.<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="36">relaxed_header_parser<pos:position pos:line="11" pos:column="57"/></name></name></expr>)<pos:position pos:line="11" pos:column="58"/></condition><then pos:line="11" pos:column="58"> <block pos:line="11" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">33<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="20">ErrorLevel<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">()<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="34">"invalid request-line: too many delimiters "<pos:position pos:line="12" pos:column="78"/></literal> <operator pos:line="12" pos:column="79">&lt;&lt;<pos:position pos:line="12" pos:column="87"/></operator> <name pos:line="12" pos:column="82">where<pos:position pos:line="12" pos:column="87"/></name></expr></argument>)<pos:position pos:line="12" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="89"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">parseStatusCode<pos:position pos:line="13" pos:column="24"/></name> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <name><name pos:line="13" pos:column="27">Http<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">::<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="33">scBadRequest<pos:position pos:line="13" pos:column="45"/></name></name></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><literal type="boolean" pos:line="14" pos:column="16">false<pos:position pos:line="14" pos:column="21"/></literal></expr>;<pos:position pos:line="14" pos:column="22"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <return pos:line="17" pos:column="5">return <expr><literal type="boolean" pos:line="17" pos:column="12">true<pos:position pos:line="17" pos:column="16"/></literal></expr>;<pos:position pos:line="17" pos:column="17"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
