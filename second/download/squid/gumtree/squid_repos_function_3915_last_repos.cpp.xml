<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3915_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ParseErrorString<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">name<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="41">Security<pos:position pos:line="2" pos:column="49"/></name><operator pos:line="2" pos:column="49">::<pos:position pos:line="2" pos:column="51"/></operator><name pos:line="2" pos:column="51">Errors<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">&amp;<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="59">errors<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">name<pos:position pos:line="4" pos:column="16"/></name></expr></argument>)<pos:position pos:line="4" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="18"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name><name pos:line="6" pos:column="11">Security<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">::<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="21">ErrorCode<pos:position pos:line="6" pos:column="30"/></name></name></type> <name pos:line="6" pos:column="31">ssl_error<pos:position pos:line="6" pos:column="40"/></name> <init pos:line="6" pos:column="41">= <expr><call><name pos:line="6" pos:column="43">GetErrorCode<pos:position pos:line="6" pos:column="55"/></name><argument_list pos:line="6" pos:column="55">(<argument><expr><name pos:line="6" pos:column="56">name<pos:position pos:line="6" pos:column="60"/></name></expr></argument>)<pos:position pos:line="6" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="62"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">ssl_error<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">!=<pos:position pos:line="7" pos:column="21"/></operator> <name pos:line="7" pos:column="22">SSL_ERROR_NONE<pos:position pos:line="7" pos:column="36"/></name></expr>)<pos:position pos:line="7" pos:column="37"/></condition><then pos:line="7" pos:column="37"> <block pos:line="7" pos:column="38">{
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">errors<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">emplace<pos:position pos:line="8" pos:column="23"/></name></name><argument_list pos:line="8" pos:column="23">(<argument><expr><name pos:line="8" pos:column="24">ssl_error<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
        <return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">true<pos:position pos:line="9" pos:column="20"/></literal></expr>;<pos:position pos:line="9" pos:column="21"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">xisdigit<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><operator pos:line="12" pos:column="18">*<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">name<pos:position pos:line="12" pos:column="23"/></name></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25"> <block pos:line="12" pos:column="26">{
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">long<pos:position pos:line="13" pos:column="19"/></name> <name pos:line="13" pos:column="20">int<pos:position pos:line="13" pos:column="23"/></name></type> <name pos:line="13" pos:column="24">value<pos:position pos:line="13" pos:column="29"/></name> <init pos:line="13" pos:column="30">= <expr><call><name pos:line="13" pos:column="32">strtol<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">name<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="45">NULL<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="51">0<pos:position pos:line="13" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="54"/></decl_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">SQUID_SSL_ERROR_MIN<pos:position pos:line="14" pos:column="32"/></name> <operator pos:line="14" pos:column="33">&lt;=<pos:position pos:line="14" pos:column="38"/></operator> <name pos:line="14" pos:column="36">value<pos:position pos:line="14" pos:column="41"/></name> <operator pos:line="14" pos:column="42">&amp;&amp;<pos:position pos:line="14" pos:column="52"/></operator> <name pos:line="14" pos:column="45">value<pos:position pos:line="14" pos:column="50"/></name> <operator pos:line="14" pos:column="51">&lt;=<pos:position pos:line="14" pos:column="56"/></operator> <name pos:line="14" pos:column="54">SQUID_SSL_ERROR_MAX<pos:position pos:line="14" pos:column="73"/></name></expr>)<pos:position pos:line="14" pos:column="74"/></condition><then pos:line="14" pos:column="74"> <block pos:line="14" pos:column="75">{
            <expr_stmt><expr><call><name><name pos:line="15" pos:column="13">errors<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">.<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">emplace<pos:position pos:line="15" pos:column="27"/></name></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">value<pos:position pos:line="15" pos:column="33"/></name></expr></argument>)<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
            <return pos:line="16" pos:column="13">return <expr><literal type="boolean" pos:line="16" pos:column="20">true<pos:position pos:line="16" pos:column="24"/></literal></expr>;<pos:position pos:line="16" pos:column="25"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">fatalf<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="string" pos:line="18" pos:column="16">"Too small or too big TLS error code '%s'"<pos:position pos:line="18" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="60">name<pos:position pos:line="18" pos:column="64"/></name></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name><name pos:line="21" pos:column="9">TheSslErrorShortcuts<pos:position pos:line="21" pos:column="29"/></name><operator pos:line="21" pos:column="29">.<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">empty<pos:position pos:line="21" pos:column="35"/></name></name><argument_list pos:line="21" pos:column="35">()<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="38"/></condition><then pos:line="21" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="9">loadSslErrorShortcutsMap<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">()<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="24" pos:column="5">const<pos:position pos:line="24" pos:column="10"/></specifier> <name><name pos:line="24" pos:column="11">SslErrorShortcuts<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">::<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">const_iterator<pos:position pos:line="24" pos:column="44"/></name></name></type> <name pos:line="24" pos:column="45">it<pos:position pos:line="24" pos:column="47"/></name> <init pos:line="24" pos:column="48">= <expr><call><name><name pos:line="24" pos:column="50">TheSslErrorShortcuts<pos:position pos:line="24" pos:column="70"/></name><operator pos:line="24" pos:column="70">.<pos:position pos:line="24" pos:column="71"/></operator><name pos:line="24" pos:column="71">find<pos:position pos:line="24" pos:column="75"/></name></name><argument_list pos:line="24" pos:column="75">(<argument><expr><name pos:line="24" pos:column="76">name<pos:position pos:line="24" pos:column="80"/></name></expr></argument>)<pos:position pos:line="24" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="82"/></decl_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">it<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">!=<pos:position pos:line="25" pos:column="14"/></operator> <call><name><name pos:line="25" pos:column="15">TheSslErrorShortcuts<pos:position pos:line="25" pos:column="35"/></name><operator pos:line="25" pos:column="35">.<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="36">end<pos:position pos:line="25" pos:column="39"/></name></name><argument_list pos:line="25" pos:column="39">()<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="42"/></condition><then pos:line="25" pos:column="42"> <block pos:line="25" pos:column="43">{
        <comment type="line" pos:line="26" pos:column="9">// Should not be empty...</comment>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">assert<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name><name pos:line="27" pos:column="16">it<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">-&gt;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="20">second<pos:position pos:line="27" pos:column="26"/></name><index pos:line="27" pos:column="26">[<expr><literal type="number" pos:line="27" pos:column="27">0<pos:position pos:line="27" pos:column="28"/></literal></expr>]<pos:position pos:line="27" pos:column="29"/></index></name> <operator pos:line="27" pos:column="30">!=<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="33">SSL_ERROR_NONE<pos:position pos:line="27" pos:column="47"/></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
        <for pos:line="28" pos:column="9">for <control pos:line="28" pos:column="13">(<init><decl><type><name pos:line="28" pos:column="14">int<pos:position pos:line="28" pos:column="17"/></name></type> <name pos:line="28" pos:column="18">i<pos:position pos:line="28" pos:column="19"/></name> <init pos:line="28" pos:column="20">= <expr><literal type="number" pos:line="28" pos:column="22">0<pos:position pos:line="28" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="28" pos:column="24"/></init> <condition><expr><name><name pos:line="28" pos:column="25">it<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">-&gt;<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="29">second<pos:position pos:line="28" pos:column="35"/></name><index pos:line="28" pos:column="35">[<expr><name pos:line="28" pos:column="36">i<pos:position pos:line="28" pos:column="37"/></name></expr>]<pos:position pos:line="28" pos:column="38"/></index></name> <operator pos:line="28" pos:column="39">!=<pos:position pos:line="28" pos:column="41"/></operator> <name pos:line="28" pos:column="42">SSL_ERROR_NONE<pos:position pos:line="28" pos:column="56"/></name></expr>;<pos:position pos:line="28" pos:column="57"/></condition> <incr><expr><operator pos:line="28" pos:column="58">++<pos:position pos:line="28" pos:column="60"/></operator><name pos:line="28" pos:column="60">i<pos:position pos:line="28" pos:column="61"/></name></expr></incr>)<pos:position pos:line="28" pos:column="62"/></control> <block pos:line="28" pos:column="63">{
            <expr_stmt><expr><call><name><name pos:line="29" pos:column="13">errors<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">.<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">emplace<pos:position pos:line="29" pos:column="27"/></name></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name><name pos:line="29" pos:column="28">it<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">second<pos:position pos:line="29" pos:column="38"/></name><index pos:line="29" pos:column="38">[<expr><name pos:line="29" pos:column="39">i<pos:position pos:line="29" pos:column="40"/></name></expr>]<pos:position pos:line="29" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></for>
        <return pos:line="31" pos:column="9">return <expr><literal type="boolean" pos:line="31" pos:column="16">true<pos:position pos:line="31" pos:column="20"/></literal></expr>;<pos:position pos:line="31" pos:column="21"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">fatalf<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><literal type="string" pos:line="34" pos:column="12">"Unknown TLS error name '%s'"<pos:position pos:line="34" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="43">name<pos:position pos:line="34" pos:column="47"/></name></expr></argument>)<pos:position pos:line="34" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="49"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><literal type="boolean" pos:line="35" pos:column="12">false<pos:position pos:line="35" pos:column="17"/></literal></expr>;<pos:position pos:line="35" pos:column="18"/></return> <comment type="line" pos:line="35" pos:column="19">// not reached</comment>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
