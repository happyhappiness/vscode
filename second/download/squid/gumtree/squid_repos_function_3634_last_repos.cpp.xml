<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3634_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">Xaction<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">parseHttpMsg<pos:position pos:line="1" pos:column="45"/></name></name><parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><name pos:line="1" pos:column="46">HttpMsg<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">msg<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">debugs<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="number" pos:line="3" pos:column="12">93<pos:position pos:line="3" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="16">5<pos:position pos:line="3" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="19">"have "<pos:position pos:line="3" pos:column="26"/></literal> <operator pos:line="3" pos:column="27">&lt;&lt;<pos:position pos:line="3" pos:column="35"/></operator> <call><name><name pos:line="3" pos:column="30">readBuf<pos:position pos:line="3" pos:column="37"/></name><operator pos:line="3" pos:column="37">.<pos:position pos:line="3" pos:column="38"/></operator><name pos:line="3" pos:column="38">length<pos:position pos:line="3" pos:column="44"/></name></name><argument_list pos:line="3" pos:column="44">()<pos:position pos:line="3" pos:column="46"/></argument_list></call> <operator pos:line="3" pos:column="47">&lt;&lt;<pos:position pos:line="3" pos:column="55"/></operator> <literal type="string" pos:line="3" pos:column="50">" head bytes to parse"<pos:position pos:line="3" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="74"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">Http<pos:position pos:line="5" pos:column="9"/></name><operator pos:line="5" pos:column="9">::<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="11">StatusCode<pos:position pos:line="5" pos:column="21"/></name></name></type> <name pos:line="5" pos:column="22">error<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><name><name pos:line="5" pos:column="30">Http<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">::<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="36">scNone<pos:position pos:line="5" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <comment type="line" pos:line="6" pos:column="5">// XXX: performance regression c_str() data copies</comment>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">buf<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><call><name><name pos:line="7" pos:column="23">readBuf<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">.<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="31">c_str<pos:position pos:line="7" pos:column="36"/></name></name><argument_list pos:line="7" pos:column="36">()<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">bool<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">parsed<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><call><name><name pos:line="8" pos:column="25">msg<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">-&gt;<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="30">parse<pos:position pos:line="8" pos:column="35"/></name></name><argument_list pos:line="8" pos:column="35">(<argument><expr><name pos:line="8" pos:column="36">buf<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><call><name><name pos:line="8" pos:column="41">readBuf<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">.<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="49">length<pos:position pos:line="8" pos:column="55"/></name></name><argument_list pos:line="8" pos:column="55">()<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="8" pos:column="59">commEof<pos:position pos:line="8" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="68">&amp;<pos:position pos:line="8" pos:column="73"/></operator><name pos:line="8" pos:column="69">error<pos:position pos:line="8" pos:column="74"/></name></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="76"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">Must<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name pos:line="9" pos:column="10">parsed<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">||<pos:position pos:line="9" pos:column="19"/></operator> <operator pos:line="9" pos:column="20">!<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">error<pos:position pos:line="9" pos:column="26"/></name></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt> <comment type="line" pos:line="9" pos:column="29">// success or need more data</comment>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">parsed<pos:position pos:line="11" pos:column="16"/></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <block pos:line="11" pos:column="18">{  <comment type="line" pos:line="11" pos:column="21">// need more data</comment>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">Must<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><call><name pos:line="12" pos:column="14">mayReadMore<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">()<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">msg<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">reset<pos:position pos:line="13" pos:column="19"/></name></name><argument_list pos:line="13" pos:column="19">()<pos:position pos:line="13" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><literal type="boolean" pos:line="14" pos:column="16">false<pos:position pos:line="14" pos:column="21"/></literal></expr>;<pos:position pos:line="14" pos:column="22"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">readBuf<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">consume<pos:position pos:line="17" pos:column="20"/></name></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name><name pos:line="17" pos:column="21">msg<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">-&gt;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="26">hdr_sz<pos:position pos:line="17" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
    <return pos:line="18" pos:column="5">return <expr><literal type="boolean" pos:line="18" pos:column="12">true<pos:position pos:line="18" pos:column="16"/></literal></expr>;<pos:position pos:line="18" pos:column="17"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
