<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4423_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Bio<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">sslFeatures<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">parseV3Hello<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">(<parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">unsigned<pos:position pos:line="2" pos:column="51"/></name> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">messageContainer<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="76">size_t<pos:position pos:line="2" pos:column="82"/></name></type> <name pos:line="2" pos:column="83">messageContainerSize<pos:position pos:line="2" pos:column="103"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="104"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Parse a ClientHello Handshake message</comment>
    <comment type="line" pos:line="5" pos:column="5">// RFC5246 section 7.4, 7.4.1.2</comment>
    <comment type="line" pos:line="6" pos:column="5">// The ClientHello starts at messageContainer + 5</comment>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">unsigned<pos:position pos:line="7" pos:column="19"/></name> <name pos:line="7" pos:column="20">char<pos:position pos:line="7" pos:column="24"/></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type> <name pos:line="7" pos:column="27">clientHello<pos:position pos:line="7" pos:column="38"/></name> <init pos:line="7" pos:column="39">= <expr><name pos:line="7" pos:column="41">messageContainer<pos:position pos:line="7" pos:column="57"/></name> <operator pos:line="7" pos:column="58">+<pos:position pos:line="7" pos:column="59"/></operator> <literal type="number" pos:line="7" pos:column="60">5<pos:position pos:line="7" pos:column="61"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="62"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">83<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">7<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"Get fake features from v3 ClientHello message."<pos:position pos:line="9" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="69"/></expr_stmt>
    <comment type="line" pos:line="10" pos:column="5">// The Length field (bytes 1-3) plus 4 bytes of the clientHello message header (1 handshake type + 3 hello length)</comment>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">size_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">helloSize<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><operator pos:line="11" pos:column="30">(<pos:position pos:line="11" pos:column="31"/></operator><operator pos:line="11" pos:column="31">(<pos:position pos:line="11" pos:column="32"/></operator><name><name pos:line="11" pos:column="32">clientHello<pos:position pos:line="11" pos:column="43"/></name><index pos:line="11" pos:column="43">[<expr><literal type="number" pos:line="11" pos:column="44">1<pos:position pos:line="11" pos:column="45"/></literal></expr>]<pos:position pos:line="11" pos:column="46"/></index></name> <operator pos:line="11" pos:column="47">&lt;&lt;<pos:position pos:line="11" pos:column="55"/></operator> <literal type="number" pos:line="11" pos:column="50">16<pos:position pos:line="11" pos:column="52"/></literal><operator pos:line="11" pos:column="52">)<pos:position pos:line="11" pos:column="53"/></operator> <operator pos:line="11" pos:column="54">|<pos:position pos:line="11" pos:column="55"/></operator> <operator pos:line="11" pos:column="56">(<pos:position pos:line="11" pos:column="57"/></operator><name><name pos:line="11" pos:column="57">clientHello<pos:position pos:line="11" pos:column="68"/></name><index pos:line="11" pos:column="68">[<expr><literal type="number" pos:line="11" pos:column="69">2<pos:position pos:line="11" pos:column="70"/></literal></expr>]<pos:position pos:line="11" pos:column="71"/></index></name> <operator pos:line="11" pos:column="72">&lt;&lt;<pos:position pos:line="11" pos:column="80"/></operator> <literal type="number" pos:line="11" pos:column="75">8<pos:position pos:line="11" pos:column="76"/></literal><operator pos:line="11" pos:column="76">)<pos:position pos:line="11" pos:column="77"/></operator> <operator pos:line="11" pos:column="78">|<pos:position pos:line="11" pos:column="79"/></operator> <name><name pos:line="11" pos:column="80">clientHello<pos:position pos:line="11" pos:column="91"/></name><index pos:line="11" pos:column="91">[<expr><literal type="number" pos:line="11" pos:column="92">3<pos:position pos:line="11" pos:column="93"/></literal></expr>]<pos:position pos:line="11" pos:column="94"/></index></name><operator pos:line="11" pos:column="94">)<pos:position pos:line="11" pos:column="95"/></operator> <operator pos:line="11" pos:column="96">+<pos:position pos:line="11" pos:column="97"/></operator> <literal type="number" pos:line="11" pos:column="98">4<pos:position pos:line="11" pos:column="99"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="100"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">83<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="16">7<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="19">"ClientHello message size: "<pos:position pos:line="12" pos:column="47"/></literal> <operator pos:line="12" pos:column="48">&lt;&lt;<pos:position pos:line="12" pos:column="56"/></operator> <name pos:line="12" pos:column="51">helloSize<pos:position pos:line="12" pos:column="60"/></name></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="62"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">helloSize<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&gt;<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="21">messageContainerSize<pos:position pos:line="13" pos:column="41"/></name></expr>)<pos:position pos:line="13" pos:column="42"/></condition><then pos:line="13" pos:column="42"> <block pos:line="13" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">83<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="20">2<pos:position pos:line="14" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="23">"ClientHello parse error"<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
        <return pos:line="15" pos:column="9">return <expr><literal type="boolean" pos:line="15" pos:column="16">false<pos:position pos:line="15" pos:column="21"/></literal></expr>;<pos:position pos:line="15" pos:column="22"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="18" pos:column="5">// helloSize should be at least 38 bytes long:</comment>
    <comment type="line" pos:line="19" pos:column="5">// (SSL Version(2) + Random(32) + SessionId Length(1) + Cipher Suite Length(2) + Compression Method Length(1))</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">helloSize<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">&lt;<pos:position pos:line="20" pos:column="23"/></operator> <literal type="number" pos:line="20" pos:column="21">38<pos:position pos:line="20" pos:column="23"/></literal></expr>)<pos:position pos:line="20" pos:column="24"/></condition><then pos:line="20" pos:column="24"> <block pos:line="20" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">83<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="20">2<pos:position pos:line="21" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="23">"Too short ClientHello message"<pos:position pos:line="21" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="56"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><literal type="boolean" pos:line="22" pos:column="16">false<pos:position pos:line="22" pos:column="21"/></literal></expr>;<pos:position pos:line="22" pos:column="22"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="25" pos:column="5">//For SSLv3 or TLSv1.* protocols we can get some more informations</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">messageContainer<pos:position pos:line="26" pos:column="25"/></name><index pos:line="26" pos:column="25">[<expr><literal type="number" pos:line="26" pos:column="26">1<pos:position pos:line="26" pos:column="27"/></literal></expr>]<pos:position pos:line="26" pos:column="28"/></index></name> <operator pos:line="26" pos:column="29">!=<pos:position pos:line="26" pos:column="31"/></operator> <literal type="number" pos:line="26" pos:column="32">0x3<pos:position pos:line="26" pos:column="35"/></literal> <operator pos:line="26" pos:column="36">||<pos:position pos:line="26" pos:column="38"/></operator> <name><name pos:line="26" pos:column="39">clientHello<pos:position pos:line="26" pos:column="50"/></name><index pos:line="26" pos:column="50">[<expr><literal type="number" pos:line="26" pos:column="51">0<pos:position pos:line="26" pos:column="52"/></literal></expr>]<pos:position pos:line="26" pos:column="53"/></index></name> <operator pos:line="26" pos:column="54">!=<pos:position pos:line="26" pos:column="56"/></operator> <literal type="number" pos:line="26" pos:column="57">0x1<pos:position pos:line="26" pos:column="60"/></literal></expr> <comment type="block" pos:line="26" pos:column="61">/*HELLO A message*/</comment>)<pos:position pos:line="26" pos:column="81"/></condition><then pos:line="26" pos:column="81"> <block pos:line="26" pos:column="82">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">83<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">2<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"Not an SSLv3/TLSv1.x client hello message, stop parsing here"<pos:position pos:line="27" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="87"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><literal type="boolean" pos:line="28" pos:column="16">true<pos:position pos:line="28" pos:column="20"/></literal></expr>;<pos:position pos:line="28" pos:column="21"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="31" pos:column="5">// Get the correct version of the sub-hello message</comment>
    <expr_stmt><expr><name pos:line="32" pos:column="5">sslVersion<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <operator pos:line="32" pos:column="18">(<pos:position pos:line="32" pos:column="19"/></operator><name><name pos:line="32" pos:column="19">clientHello<pos:position pos:line="32" pos:column="30"/></name><index pos:line="32" pos:column="30">[<expr><literal type="number" pos:line="32" pos:column="31">4<pos:position pos:line="32" pos:column="32"/></literal></expr>]<pos:position pos:line="32" pos:column="33"/></index></name> <operator pos:line="32" pos:column="34">&lt;&lt;<pos:position pos:line="32" pos:column="42"/></operator> <literal type="number" pos:line="32" pos:column="37">8<pos:position pos:line="32" pos:column="38"/></literal><operator pos:line="32" pos:column="38">)<pos:position pos:line="32" pos:column="39"/></operator> <operator pos:line="32" pos:column="40">|<pos:position pos:line="32" pos:column="41"/></operator> <name><name pos:line="32" pos:column="42">clientHello<pos:position pos:line="32" pos:column="53"/></name><index pos:line="32" pos:column="53">[<expr><literal type="number" pos:line="32" pos:column="54">5<pos:position pos:line="32" pos:column="55"/></literal></expr>]<pos:position pos:line="32" pos:column="56"/></index></name></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
    <comment type="line" pos:line="33" pos:column="5">//Get Client Random number. It starts on the position 6 of clientHello message</comment>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">memcpy<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><name pos:line="34" pos:column="12">client_random<pos:position pos:line="34" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="27">clientHello<pos:position pos:line="34" pos:column="38"/></name> <operator pos:line="34" pos:column="39">+<pos:position pos:line="34" pos:column="40"/></operator> <literal type="number" pos:line="34" pos:column="41">6<pos:position pos:line="34" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="44">SSL3_RANDOM_SIZE<pos:position pos:line="34" pos:column="60"/></name></expr></argument>)<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">debugs<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><literal type="number" pos:line="35" pos:column="12">83<pos:position pos:line="35" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="16">7<pos:position pos:line="35" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="19">"Client random: "<pos:position pos:line="35" pos:column="36"/></literal> <operator pos:line="35" pos:column="37">&lt;&lt;<pos:position pos:line="35" pos:column="45"/></operator>  <call><name pos:line="35" pos:column="41">objToString<pos:position pos:line="35" pos:column="52"/></name><argument_list pos:line="35" pos:column="52">(<argument><expr><name pos:line="35" pos:column="53">client_random<pos:position pos:line="35" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="68">SSL3_RANDOM_SIZE<pos:position pos:line="35" pos:column="84"/></name></expr></argument>)<pos:position pos:line="35" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="87"/></expr_stmt>

    <comment type="line" pos:line="37" pos:column="5">// At the position 38 (6+SSL3_RANDOM_SIZE)</comment>
    <decl_stmt><decl><type><specifier pos:line="38" pos:column="5">const<pos:position pos:line="38" pos:column="10"/></specifier> <name pos:line="38" pos:column="11">size_t<pos:position pos:line="38" pos:column="17"/></name></type> <name pos:line="38" pos:column="18">sessIDLen<pos:position pos:line="38" pos:column="27"/></name> <init pos:line="38" pos:column="28">= <expr><cast type="static" pos:line="38" pos:column="30">static_cast<argument_list type="generic" pos:line="38" pos:column="41">&lt;<argument><expr><name pos:line="38" pos:column="42">size_t<pos:position pos:line="38" pos:column="48"/></name></expr></argument>&gt;<pos:position pos:line="38" pos:column="52"/></argument_list><argument_list pos:line="38" pos:column="49">(<argument><expr><name><name pos:line="38" pos:column="50">clientHello<pos:position pos:line="38" pos:column="61"/></name><index pos:line="38" pos:column="61">[<expr><literal type="number" pos:line="38" pos:column="62">38<pos:position pos:line="38" pos:column="64"/></literal></expr>]<pos:position pos:line="38" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="66"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="38" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">debugs<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><literal type="number" pos:line="39" pos:column="12">83<pos:position pos:line="39" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="16">7<pos:position pos:line="39" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="19">"Session ID Length: "<pos:position pos:line="39" pos:column="40"/></literal> <operator pos:line="39" pos:column="41">&lt;&lt;<pos:position pos:line="39" pos:column="49"/></operator>  <name pos:line="39" pos:column="45">sessIDLen<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>

    <comment type="line" pos:line="41" pos:column="5">// The helloSize should be enough to hold at least the following</comment>
    <comment type="line" pos:line="42" pos:column="5">// 1 handshake type + 3 hello Length</comment>
    <comment type="line" pos:line="43" pos:column="5">// + 2 (SSL Version) + 32 (random) + 1 (sessionId length)</comment>
    <comment type="line" pos:line="44" pos:column="5">// + sessIdLength + 2 (cipher suite length) + 1 (compression method length)</comment>
    <comment type="line" pos:line="45" pos:column="5">// = 42 + sessIdLength</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><literal type="number" pos:line="46" pos:column="9">42<pos:position pos:line="46" pos:column="11"/></literal> <operator pos:line="46" pos:column="12">+<pos:position pos:line="46" pos:column="13"/></operator> <name pos:line="46" pos:column="14">sessIDLen<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">&gt;<pos:position pos:line="46" pos:column="28"/></operator> <name pos:line="46" pos:column="26">helloSize<pos:position pos:line="46" pos:column="35"/></name></expr>)<pos:position pos:line="46" pos:column="36"/></condition><then pos:line="46" pos:column="36"> <block pos:line="46" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">debugs<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="number" pos:line="47" pos:column="16">83<pos:position pos:line="47" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="20">2<pos:position pos:line="47" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="23">"Session ID length parse error"<pos:position pos:line="47" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt>
        <return pos:line="48" pos:column="9">return <expr><literal type="boolean" pos:line="48" pos:column="16">false<pos:position pos:line="48" pos:column="21"/></literal></expr>;<pos:position pos:line="48" pos:column="22"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="51" pos:column="5">// The sessionID stored art 39 position, after sessionID length field</comment>
    <expr_stmt><expr><call><name><name pos:line="52" pos:column="5">sessionId<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">.<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="15">assign<pos:position pos:line="52" pos:column="21"/></name></name><argument_list pos:line="52" pos:column="21">(<argument><expr><cast type="reinterpret" pos:line="52" pos:column="22">reinterpret_cast<argument_list type="generic" pos:line="52" pos:column="38">&lt;<argument><expr><specifier pos:line="52" pos:column="39">const<pos:position pos:line="52" pos:column="44"/></specifier> <name pos:line="52" pos:column="45">char<pos:position pos:line="52" pos:column="49"/></name> <operator pos:line="52" pos:column="50">*<pos:position pos:line="52" pos:column="51"/></operator></expr></argument>&gt;<pos:position pos:line="52" pos:column="55"/></argument_list><argument_list pos:line="52" pos:column="52">(<argument><expr><name pos:line="52" pos:column="53">clientHello<pos:position pos:line="52" pos:column="64"/></name> <operator pos:line="52" pos:column="65">+<pos:position pos:line="52" pos:column="66"/></operator> <literal type="number" pos:line="52" pos:column="67">39<pos:position pos:line="52" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="70"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="52" pos:column="72">sessIDLen<pos:position pos:line="52" pos:column="81"/></name></expr></argument>)<pos:position pos:line="52" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="83"/></expr_stmt>

    <comment type="line" pos:line="54" pos:column="5">//Ciphers list. It is stored after the Session ID.</comment>
    <comment type="line" pos:line="55" pos:column="5">// It is a variable-length vector(RFC5246 section 4.3)</comment>
    <decl_stmt><decl><type><specifier pos:line="56" pos:column="5">const<pos:position pos:line="56" pos:column="10"/></specifier> <name pos:line="56" pos:column="11">unsigned<pos:position pos:line="56" pos:column="19"/></name> <name pos:line="56" pos:column="20">char<pos:position pos:line="56" pos:column="24"/></name> <modifier pos:line="56" pos:column="25">*<pos:position pos:line="56" pos:column="26"/></modifier></type><name pos:line="56" pos:column="26">ciphers<pos:position pos:line="56" pos:column="33"/></name> <init pos:line="56" pos:column="34">= <expr><name pos:line="56" pos:column="36">clientHello<pos:position pos:line="56" pos:column="47"/></name> <operator pos:line="56" pos:column="48">+<pos:position pos:line="56" pos:column="49"/></operator> <literal type="number" pos:line="56" pos:column="50">39<pos:position pos:line="56" pos:column="52"/></literal> <operator pos:line="56" pos:column="53">+<pos:position pos:line="56" pos:column="54"/></operator> <name pos:line="56" pos:column="55">sessIDLen<pos:position pos:line="56" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="56" pos:column="65"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="57" pos:column="5">const<pos:position pos:line="57" pos:column="10"/></specifier> <name pos:line="57" pos:column="11">size_t<pos:position pos:line="57" pos:column="17"/></name></type> <name pos:line="57" pos:column="18">ciphersLen<pos:position pos:line="57" pos:column="28"/></name> <init pos:line="57" pos:column="29">= <expr><operator pos:line="57" pos:column="31">(<pos:position pos:line="57" pos:column="32"/></operator><name><name pos:line="57" pos:column="32">ciphers<pos:position pos:line="57" pos:column="39"/></name><index pos:line="57" pos:column="39">[<expr><literal type="number" pos:line="57" pos:column="40">0<pos:position pos:line="57" pos:column="41"/></literal></expr>]<pos:position pos:line="57" pos:column="42"/></index></name> <operator pos:line="57" pos:column="43">&lt;&lt;<pos:position pos:line="57" pos:column="51"/></operator> <literal type="number" pos:line="57" pos:column="46">8<pos:position pos:line="57" pos:column="47"/></literal><operator pos:line="57" pos:column="47">)<pos:position pos:line="57" pos:column="48"/></operator> <operator pos:line="57" pos:column="49">|<pos:position pos:line="57" pos:column="50"/></operator> <name><name pos:line="57" pos:column="51">ciphers<pos:position pos:line="57" pos:column="58"/></name><index pos:line="57" pos:column="58">[<expr><literal type="number" pos:line="57" pos:column="59">1<pos:position pos:line="57" pos:column="60"/></literal></expr>]<pos:position pos:line="57" pos:column="61"/></index></name></expr></init></decl>;<pos:position pos:line="57" pos:column="62"/></decl_stmt>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><literal type="number" pos:line="58" pos:column="9">42<pos:position pos:line="58" pos:column="11"/></literal> <operator pos:line="58" pos:column="12">+<pos:position pos:line="58" pos:column="13"/></operator> <name pos:line="58" pos:column="14">sessIDLen<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">+<pos:position pos:line="58" pos:column="25"/></operator> <name pos:line="58" pos:column="26">ciphersLen<pos:position pos:line="58" pos:column="36"/></name> <operator pos:line="58" pos:column="37">&gt;<pos:position pos:line="58" pos:column="41"/></operator> <name pos:line="58" pos:column="39">helloSize<pos:position pos:line="58" pos:column="48"/></name></expr>)<pos:position pos:line="58" pos:column="49"/></condition><then pos:line="58" pos:column="49"> <block pos:line="58" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">debugs<pos:position pos:line="59" pos:column="15"/></name><argument_list pos:line="59" pos:column="15">(<argument><expr><literal type="number" pos:line="59" pos:column="16">83<pos:position pos:line="59" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="20">2<pos:position pos:line="59" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="23">"ciphers length parse error"<pos:position pos:line="59" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="53"/></expr_stmt>
        <return pos:line="60" pos:column="9">return <expr><literal type="boolean" pos:line="60" pos:column="16">false<pos:position pos:line="60" pos:column="21"/></literal></expr>;<pos:position pos:line="60" pos:column="22"/></return>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="63" pos:column="5">ciphers<pos:position pos:line="63" pos:column="12"/></name> <operator pos:line="63" pos:column="13">+=<pos:position pos:line="63" pos:column="15"/></operator> <literal type="number" pos:line="63" pos:column="16">2<pos:position pos:line="63" pos:column="17"/></literal></expr>;<pos:position pos:line="63" pos:column="18"/></expr_stmt>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">ciphersLen<pos:position pos:line="64" pos:column="19"/></name></expr>)<pos:position pos:line="64" pos:column="20"/></condition><then pos:line="64" pos:column="20"> <block pos:line="64" pos:column="21">{
<cpp:if pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">if<pos:position pos:line="65" pos:column="4"/></cpp:directive> <expr><operator pos:line="65" pos:column="5">(<pos:position pos:line="65" pos:column="6"/></operator><name pos:line="65" pos:column="6">OPENSSL_VERSION_NUMBER<pos:position pos:line="65" pos:column="28"/></name> <operator pos:line="65" pos:column="29">&gt;=<pos:position pos:line="65" pos:column="34"/></operator> <literal type="number" pos:line="65" pos:column="32">0x10100000L<pos:position pos:line="65" pos:column="43"/></literal><operator pos:line="65" pos:column="43">)<pos:position pos:line="65" pos:column="44"/></operator></expr></cpp:if>
        <decl_stmt><decl><type><specifier pos:line="66" pos:column="9">const<pos:position pos:line="66" pos:column="14"/></specifier> <name pos:line="66" pos:column="15">SSL_METHOD<pos:position pos:line="66" pos:column="25"/></name> <modifier pos:line="66" pos:column="26">*<pos:position pos:line="66" pos:column="27"/></modifier></type><name pos:line="66" pos:column="27">method<pos:position pos:line="66" pos:column="33"/></name> <init pos:line="66" pos:column="34">= <expr><call><name pos:line="66" pos:column="36">TLS_method<pos:position pos:line="66" pos:column="46"/></name><argument_list pos:line="66" pos:column="46">()<pos:position pos:line="66" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="66" pos:column="49"/></decl_stmt>
<cpp:else pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">else<pos:position pos:line="67" pos:column="6"/></cpp:directive></cpp:else>
        <decl_stmt><decl><type><specifier pos:line="68" pos:column="9">const<pos:position pos:line="68" pos:column="14"/></specifier> <name pos:line="68" pos:column="15">SSL_METHOD<pos:position pos:line="68" pos:column="25"/></name> <modifier pos:line="68" pos:column="26">*<pos:position pos:line="68" pos:column="27"/></modifier></type><name pos:line="68" pos:column="27">method<pos:position pos:line="68" pos:column="33"/></name> <init pos:line="68" pos:column="34">= <expr><call><name pos:line="68" pos:column="36">SSLv23_method<pos:position pos:line="68" pos:column="49"/></name><argument_list pos:line="68" pos:column="49">()<pos:position pos:line="68" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="68" pos:column="52"/></decl_stmt>
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>
        <for pos:line="70" pos:column="9">for <control pos:line="70" pos:column="13">(<init><decl><type><name pos:line="70" pos:column="14">size_t<pos:position pos:line="70" pos:column="20"/></name></type> <name pos:line="70" pos:column="21">i<pos:position pos:line="70" pos:column="22"/></name> <init pos:line="70" pos:column="23">= <expr><literal type="number" pos:line="70" pos:column="25">0<pos:position pos:line="70" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="70" pos:column="27"/></init> <condition><expr><name pos:line="70" pos:column="28">i<pos:position pos:line="70" pos:column="29"/></name> <operator pos:line="70" pos:column="30">&lt;<pos:position pos:line="70" pos:column="34"/></operator> <name pos:line="70" pos:column="32">ciphersLen<pos:position pos:line="70" pos:column="42"/></name></expr>;<pos:position pos:line="70" pos:column="43"/></condition> <incr><expr><name pos:line="70" pos:column="44">i<pos:position pos:line="70" pos:column="45"/></name> <operator pos:line="70" pos:column="46">+=<pos:position pos:line="70" pos:column="48"/></operator> <literal type="number" pos:line="70" pos:column="49">2<pos:position pos:line="70" pos:column="50"/></literal></expr></incr>)<pos:position pos:line="70" pos:column="51"/></control> <block pos:line="70" pos:column="52">{
            <comment type="line" pos:line="71" pos:column="13">// each cipher in v3/tls  HELLO message is of size 2</comment>
            <decl_stmt><decl><type><specifier pos:line="72" pos:column="13">const<pos:position pos:line="72" pos:column="18"/></specifier> <name pos:line="72" pos:column="19">SSL_CIPHER<pos:position pos:line="72" pos:column="29"/></name> <modifier pos:line="72" pos:column="30">*<pos:position pos:line="72" pos:column="31"/></modifier></type><name pos:line="72" pos:column="31">c<pos:position pos:line="72" pos:column="32"/></name> <init pos:line="72" pos:column="33">= <expr><call><name><name pos:line="72" pos:column="35">method<pos:position pos:line="72" pos:column="41"/></name><operator pos:line="72" pos:column="41">-&gt;<pos:position pos:line="72" pos:column="46"/></operator><name pos:line="72" pos:column="43">get_cipher_by_char<pos:position pos:line="72" pos:column="61"/></name></name><argument_list pos:line="72" pos:column="61">(<argument><expr><operator pos:line="72" pos:column="62">(<pos:position pos:line="72" pos:column="63"/></operator><name pos:line="72" pos:column="63">ciphers<pos:position pos:line="72" pos:column="70"/></name> <operator pos:line="72" pos:column="71">+<pos:position pos:line="72" pos:column="72"/></operator> <name pos:line="72" pos:column="73">i<pos:position pos:line="72" pos:column="74"/></name><operator pos:line="72" pos:column="74">)<pos:position pos:line="72" pos:column="75"/></operator></expr></argument>)<pos:position pos:line="72" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="72" pos:column="77"/></decl_stmt>
            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">(<expr><name pos:line="73" pos:column="17">c<pos:position pos:line="73" pos:column="18"/></name> <operator pos:line="73" pos:column="19">!=<pos:position pos:line="73" pos:column="21"/></operator> <name pos:line="73" pos:column="22">NULL<pos:position pos:line="73" pos:column="26"/></name></expr>)<pos:position pos:line="73" pos:column="27"/></condition><then pos:line="73" pos:column="27"> <block pos:line="73" pos:column="28">{
                <if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><operator pos:line="74" pos:column="21">!<pos:position pos:line="74" pos:column="22"/></operator><call><name><name pos:line="74" pos:column="22">clientRequestedCiphers<pos:position pos:line="74" pos:column="44"/></name><operator pos:line="74" pos:column="44">.<pos:position pos:line="74" pos:column="45"/></operator><name pos:line="74" pos:column="45">empty<pos:position pos:line="74" pos:column="50"/></name></name><argument_list pos:line="74" pos:column="50">()<pos:position pos:line="74" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="53"/></condition><then pos:line="74" pos:column="53">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="75" pos:column="21">clientRequestedCiphers<pos:position pos:line="75" pos:column="43"/></name><operator pos:line="75" pos:column="43">.<pos:position pos:line="75" pos:column="44"/></operator><name pos:line="75" pos:column="44">append<pos:position pos:line="75" pos:column="50"/></name></name><argument_list pos:line="75" pos:column="50">(<argument><expr><literal type="string" pos:line="75" pos:column="51">":"<pos:position pos:line="75" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="56"/></expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name pos:line="76" pos:column="17">clientRequestedCiphers<pos:position pos:line="76" pos:column="39"/></name><operator pos:line="76" pos:column="39">.<pos:position pos:line="76" pos:column="40"/></operator><name pos:line="76" pos:column="40">append<pos:position pos:line="76" pos:column="46"/></name></name><argument_list pos:line="76" pos:column="46">(<argument><expr><name><name pos:line="76" pos:column="47">c<pos:position pos:line="76" pos:column="48"/></name><operator pos:line="76" pos:column="48">-&gt;<pos:position pos:line="76" pos:column="53"/></operator><name pos:line="76" pos:column="50">name<pos:position pos:line="76" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="56"/></expr_stmt>
            }<pos:position pos:line="77" pos:column="14"/></block></then> <else pos:line="77" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="78" pos:column="17">unknownCiphers<pos:position pos:line="78" pos:column="31"/></name> <operator pos:line="78" pos:column="32">=<pos:position pos:line="78" pos:column="33"/></operator> <literal type="boolean" pos:line="78" pos:column="34">true<pos:position pos:line="78" pos:column="38"/></literal></expr>;<pos:position pos:line="78" pos:column="39"/></expr_stmt></block></else></if>
        }<pos:position pos:line="79" pos:column="10"/></block></for>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">debugs<pos:position pos:line="81" pos:column="11"/></name><argument_list pos:line="81" pos:column="11">(<argument><expr><literal type="number" pos:line="81" pos:column="12">83<pos:position pos:line="81" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="16">7<pos:position pos:line="81" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="19">"Ciphers requested by client: "<pos:position pos:line="81" pos:column="50"/></literal> <operator pos:line="81" pos:column="51">&lt;&lt;<pos:position pos:line="81" pos:column="59"/></operator> <name pos:line="81" pos:column="54">clientRequestedCiphers<pos:position pos:line="81" pos:column="76"/></name></expr></argument>)<pos:position pos:line="81" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="78"/></expr_stmt>

    <comment type="line" pos:line="83" pos:column="5">// Compression field: 1 bytes the number of compression methods and</comment>
    <comment type="line" pos:line="84" pos:column="5">// 1 byte for each compression method</comment>
    <decl_stmt><decl><type><specifier pos:line="85" pos:column="5">const<pos:position pos:line="85" pos:column="10"/></specifier> <name pos:line="85" pos:column="11">unsigned<pos:position pos:line="85" pos:column="19"/></name> <name pos:line="85" pos:column="20">char<pos:position pos:line="85" pos:column="24"/></name> <modifier pos:line="85" pos:column="25">*<pos:position pos:line="85" pos:column="26"/></modifier></type><name pos:line="85" pos:column="26">compression<pos:position pos:line="85" pos:column="37"/></name> <init pos:line="85" pos:column="38">= <expr><name pos:line="85" pos:column="40">ciphers<pos:position pos:line="85" pos:column="47"/></name> <operator pos:line="85" pos:column="48">+<pos:position pos:line="85" pos:column="49"/></operator> <name pos:line="85" pos:column="50">ciphersLen<pos:position pos:line="85" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="85" pos:column="61"/></decl_stmt>
    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name><name pos:line="86" pos:column="9">compression<pos:position pos:line="86" pos:column="20"/></name><index pos:line="86" pos:column="20">[<expr><literal type="number" pos:line="86" pos:column="21">0<pos:position pos:line="86" pos:column="22"/></literal></expr>]<pos:position pos:line="86" pos:column="23"/></index></name> <operator pos:line="86" pos:column="24">&gt;<pos:position pos:line="86" pos:column="28"/></operator> <literal type="number" pos:line="86" pos:column="26">1<pos:position pos:line="86" pos:column="27"/></literal></expr>)<pos:position pos:line="86" pos:column="28"/></condition><then pos:line="86" pos:column="28">
        <block type="pseudo"><expr_stmt><expr><name pos:line="87" pos:column="9">compressMethod<pos:position pos:line="87" pos:column="23"/></name> <operator pos:line="87" pos:column="24">=<pos:position pos:line="87" pos:column="25"/></operator> <literal type="number" pos:line="87" pos:column="26">1<pos:position pos:line="87" pos:column="27"/></literal></expr>;<pos:position pos:line="87" pos:column="28"/></expr_stmt></block></then>
    <else pos:line="88" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="89" pos:column="9">compressMethod<pos:position pos:line="89" pos:column="23"/></name> <operator pos:line="89" pos:column="24">=<pos:position pos:line="89" pos:column="25"/></operator> <literal type="number" pos:line="89" pos:column="26">0<pos:position pos:line="89" pos:column="27"/></literal></expr>;<pos:position pos:line="89" pos:column="28"/></expr_stmt></block></else></if>
    <expr_stmt><expr><call><name pos:line="90" pos:column="5">debugs<pos:position pos:line="90" pos:column="11"/></name><argument_list pos:line="90" pos:column="11">(<argument><expr><literal type="number" pos:line="90" pos:column="12">83<pos:position pos:line="90" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="16">7<pos:position pos:line="90" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="19">"SSL compression methods number: "<pos:position pos:line="90" pos:column="53"/></literal> <operator pos:line="90" pos:column="54">&lt;&lt;<pos:position pos:line="90" pos:column="62"/></operator> <cast type="static" pos:line="90" pos:column="57">static_cast<argument_list type="generic" pos:line="90" pos:column="68">&lt;<argument><expr><name pos:line="90" pos:column="69">int<pos:position pos:line="90" pos:column="72"/></name></expr></argument>&gt;<pos:position pos:line="90" pos:column="76"/></argument_list><argument_list pos:line="90" pos:column="73">(<argument><expr><name><name pos:line="90" pos:column="74">compression<pos:position pos:line="90" pos:column="85"/></name><index pos:line="90" pos:column="85">[<expr><literal type="number" pos:line="90" pos:column="86">0<pos:position pos:line="90" pos:column="87"/></literal></expr>]<pos:position pos:line="90" pos:column="88"/></index></name></expr></argument>)<pos:position pos:line="90" pos:column="89"/></argument_list></cast></expr></argument>)<pos:position pos:line="90" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="91"/></expr_stmt>

    <comment type="line" pos:line="92" pos:column="5">// Parse Extensions, RFC5246 section 7.4.1.4</comment>
    <decl_stmt><decl><type><specifier pos:line="93" pos:column="5">const<pos:position pos:line="93" pos:column="10"/></specifier> <name pos:line="93" pos:column="11">unsigned<pos:position pos:line="93" pos:column="19"/></name> <name pos:line="93" pos:column="20">char<pos:position pos:line="93" pos:column="24"/></name> <modifier pos:line="93" pos:column="25">*<pos:position pos:line="93" pos:column="26"/></modifier></type><name pos:line="93" pos:column="26">pToExtensions<pos:position pos:line="93" pos:column="39"/></name> <init pos:line="93" pos:column="40">= <expr><name pos:line="93" pos:column="42">compression<pos:position pos:line="93" pos:column="53"/></name> <operator pos:line="93" pos:column="54">+<pos:position pos:line="93" pos:column="55"/></operator> <literal type="number" pos:line="93" pos:column="56">1<pos:position pos:line="93" pos:column="57"/></literal> <operator pos:line="93" pos:column="58">+<pos:position pos:line="93" pos:column="59"/></operator> <cast type="static" pos:line="93" pos:column="60">static_cast<argument_list type="generic" pos:line="93" pos:column="71">&lt;<argument><expr><name pos:line="93" pos:column="72">int<pos:position pos:line="93" pos:column="75"/></name></expr></argument>&gt;<pos:position pos:line="93" pos:column="79"/></argument_list><argument_list pos:line="93" pos:column="76">(<argument><expr><name><name pos:line="93" pos:column="77">compression<pos:position pos:line="93" pos:column="88"/></name><index pos:line="93" pos:column="88">[<expr><literal type="number" pos:line="93" pos:column="89">0<pos:position pos:line="93" pos:column="90"/></literal></expr>]<pos:position pos:line="93" pos:column="91"/></index></name></expr></argument>)<pos:position pos:line="93" pos:column="92"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="93" pos:column="93"/></decl_stmt>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><call pos:line="94" pos:column="9">(<name pos:line="94" pos:column="10">size_t<pos:position pos:line="94" pos:column="16"/></name>)<argument_list pos:line="94" pos:column="17">(<argument><expr><operator pos:line="94" pos:column="18">(<pos:position pos:line="94" pos:column="19"/></operator><name pos:line="94" pos:column="19">pToExtensions<pos:position pos:line="94" pos:column="32"/></name> <operator pos:line="94" pos:column="33">-<pos:position pos:line="94" pos:column="34"/></operator> <name pos:line="94" pos:column="35">clientHello<pos:position pos:line="94" pos:column="46"/></name><operator pos:line="94" pos:column="46">)<pos:position pos:line="94" pos:column="47"/></operator> <operator pos:line="94" pos:column="48">+<pos:position pos:line="94" pos:column="49"/></operator> <literal type="number" pos:line="94" pos:column="50">2<pos:position pos:line="94" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="52"/></argument_list></call> <operator pos:line="94" pos:column="53">&lt;<pos:position pos:line="94" pos:column="57"/></operator> <name pos:line="94" pos:column="55">helloSize<pos:position pos:line="94" pos:column="64"/></name></expr>)<pos:position pos:line="94" pos:column="65"/></condition><then pos:line="94" pos:column="65"> <block pos:line="94" pos:column="66">{
        <decl_stmt><decl><type><specifier pos:line="95" pos:column="9">const<pos:position pos:line="95" pos:column="14"/></specifier> <name pos:line="95" pos:column="15">size_t<pos:position pos:line="95" pos:column="21"/></name></type> <name pos:line="95" pos:column="22">extensionsLen<pos:position pos:line="95" pos:column="35"/></name> <init pos:line="95" pos:column="36">= <expr><operator pos:line="95" pos:column="38">(<pos:position pos:line="95" pos:column="39"/></operator><name><name pos:line="95" pos:column="39">pToExtensions<pos:position pos:line="95" pos:column="52"/></name><index pos:line="95" pos:column="52">[<expr><literal type="number" pos:line="95" pos:column="53">0<pos:position pos:line="95" pos:column="54"/></literal></expr>]<pos:position pos:line="95" pos:column="55"/></index></name> <operator pos:line="95" pos:column="56">&lt;&lt;<pos:position pos:line="95" pos:column="64"/></operator> <literal type="number" pos:line="95" pos:column="59">8<pos:position pos:line="95" pos:column="60"/></literal><operator pos:line="95" pos:column="60">)<pos:position pos:line="95" pos:column="61"/></operator> <operator pos:line="95" pos:column="62">|<pos:position pos:line="95" pos:column="63"/></operator> <name><name pos:line="95" pos:column="64">pToExtensions<pos:position pos:line="95" pos:column="77"/></name><index pos:line="95" pos:column="77">[<expr><literal type="number" pos:line="95" pos:column="78">1<pos:position pos:line="95" pos:column="79"/></literal></expr>]<pos:position pos:line="95" pos:column="80"/></index></name></expr></init></decl>;<pos:position pos:line="95" pos:column="81"/></decl_stmt>
        <if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><operator pos:line="96" pos:column="13">(<pos:position pos:line="96" pos:column="14"/></operator><name pos:line="96" pos:column="14">pToExtensions<pos:position pos:line="96" pos:column="27"/></name> <operator pos:line="96" pos:column="28">-<pos:position pos:line="96" pos:column="29"/></operator> <name pos:line="96" pos:column="30">clientHello<pos:position pos:line="96" pos:column="41"/></name><operator pos:line="96" pos:column="41">)<pos:position pos:line="96" pos:column="42"/></operator> <operator pos:line="96" pos:column="43">+<pos:position pos:line="96" pos:column="44"/></operator> <literal type="number" pos:line="96" pos:column="45">2<pos:position pos:line="96" pos:column="46"/></literal> <operator pos:line="96" pos:column="47">+<pos:position pos:line="96" pos:column="48"/></operator> <name pos:line="96" pos:column="49">extensionsLen<pos:position pos:line="96" pos:column="62"/></name> <operator pos:line="96" pos:column="63">&gt;<pos:position pos:line="96" pos:column="67"/></operator> <name pos:line="96" pos:column="65">helloSize<pos:position pos:line="96" pos:column="74"/></name></expr>)<pos:position pos:line="96" pos:column="75"/></condition><then pos:line="96" pos:column="75"> <block pos:line="96" pos:column="76">{
            <expr_stmt><expr><call><name pos:line="97" pos:column="13">debugs<pos:position pos:line="97" pos:column="19"/></name><argument_list pos:line="97" pos:column="19">(<argument><expr><literal type="number" pos:line="97" pos:column="20">83<pos:position pos:line="97" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="24">2<pos:position pos:line="97" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="97" pos:column="27">"Extensions length parse error"<pos:position pos:line="97" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="60"/></expr_stmt>
            <return pos:line="98" pos:column="13">return <expr><literal type="boolean" pos:line="98" pos:column="20">false<pos:position pos:line="98" pos:column="25"/></literal></expr>;<pos:position pos:line="98" pos:column="26"/></return>
        }<pos:position pos:line="99" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="101" pos:column="9">pToExtensions<pos:position pos:line="101" pos:column="22"/></name> <operator pos:line="101" pos:column="23">+=<pos:position pos:line="101" pos:column="25"/></operator> <literal type="number" pos:line="101" pos:column="26">2<pos:position pos:line="101" pos:column="27"/></literal></expr>;<pos:position pos:line="101" pos:column="28"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="102" pos:column="9">const<pos:position pos:line="102" pos:column="14"/></specifier> <name pos:line="102" pos:column="15">unsigned<pos:position pos:line="102" pos:column="23"/></name> <name pos:line="102" pos:column="24">char<pos:position pos:line="102" pos:column="28"/></name> <modifier pos:line="102" pos:column="29">*<pos:position pos:line="102" pos:column="30"/></modifier></type><name pos:line="102" pos:column="30">ext<pos:position pos:line="102" pos:column="33"/></name> <init pos:line="102" pos:column="34">= <expr><name pos:line="102" pos:column="36">pToExtensions<pos:position pos:line="102" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="102" pos:column="50"/></decl_stmt>
        <while pos:line="103" pos:column="9">while <condition pos:line="103" pos:column="15">(<expr><name pos:line="103" pos:column="16">ext<pos:position pos:line="103" pos:column="19"/></name> <operator pos:line="103" pos:column="20">+<pos:position pos:line="103" pos:column="21"/></operator> <literal type="number" pos:line="103" pos:column="22">4<pos:position pos:line="103" pos:column="23"/></literal> <operator pos:line="103" pos:column="24">&lt;=<pos:position pos:line="103" pos:column="29"/></operator> <name pos:line="103" pos:column="27">pToExtensions<pos:position pos:line="103" pos:column="40"/></name> <operator pos:line="103" pos:column="41">+<pos:position pos:line="103" pos:column="42"/></operator> <name pos:line="103" pos:column="43">extensionsLen<pos:position pos:line="103" pos:column="56"/></name></expr>)<pos:position pos:line="103" pos:column="57"/></condition> <block pos:line="103" pos:column="58">{
            <decl_stmt><decl><type><specifier pos:line="104" pos:column="13">const<pos:position pos:line="104" pos:column="18"/></specifier> <name pos:line="104" pos:column="19">size_t<pos:position pos:line="104" pos:column="25"/></name></type> <name pos:line="104" pos:column="26">extType<pos:position pos:line="104" pos:column="33"/></name> <init pos:line="104" pos:column="34">= <expr><operator pos:line="104" pos:column="36">(<pos:position pos:line="104" pos:column="37"/></operator><name><name pos:line="104" pos:column="37">ext<pos:position pos:line="104" pos:column="40"/></name><index pos:line="104" pos:column="40">[<expr><literal type="number" pos:line="104" pos:column="41">0<pos:position pos:line="104" pos:column="42"/></literal></expr>]<pos:position pos:line="104" pos:column="43"/></index></name> <operator pos:line="104" pos:column="44">&lt;&lt;<pos:position pos:line="104" pos:column="52"/></operator> <literal type="number" pos:line="104" pos:column="47">8<pos:position pos:line="104" pos:column="48"/></literal><operator pos:line="104" pos:column="48">)<pos:position pos:line="104" pos:column="49"/></operator> <operator pos:line="104" pos:column="50">|<pos:position pos:line="104" pos:column="51"/></operator> <name><name pos:line="104" pos:column="52">ext<pos:position pos:line="104" pos:column="55"/></name><index pos:line="104" pos:column="55">[<expr><literal type="number" pos:line="104" pos:column="56">1<pos:position pos:line="104" pos:column="57"/></literal></expr>]<pos:position pos:line="104" pos:column="58"/></index></name></expr></init></decl>;<pos:position pos:line="104" pos:column="59"/></decl_stmt>
            <expr_stmt><expr><name pos:line="105" pos:column="13">ext<pos:position pos:line="105" pos:column="16"/></name> <operator pos:line="105" pos:column="17">+=<pos:position pos:line="105" pos:column="19"/></operator> <literal type="number" pos:line="105" pos:column="20">2<pos:position pos:line="105" pos:column="21"/></literal></expr>;<pos:position pos:line="105" pos:column="22"/></expr_stmt>
            <decl_stmt><decl><type><specifier pos:line="106" pos:column="13">const<pos:position pos:line="106" pos:column="18"/></specifier> <name pos:line="106" pos:column="19">size_t<pos:position pos:line="106" pos:column="25"/></name></type> <name pos:line="106" pos:column="26">extLen<pos:position pos:line="106" pos:column="32"/></name> <init pos:line="106" pos:column="33">= <expr><operator pos:line="106" pos:column="35">(<pos:position pos:line="106" pos:column="36"/></operator><name><name pos:line="106" pos:column="36">ext<pos:position pos:line="106" pos:column="39"/></name><index pos:line="106" pos:column="39">[<expr><literal type="number" pos:line="106" pos:column="40">0<pos:position pos:line="106" pos:column="41"/></literal></expr>]<pos:position pos:line="106" pos:column="42"/></index></name> <operator pos:line="106" pos:column="43">&lt;&lt;<pos:position pos:line="106" pos:column="51"/></operator> <literal type="number" pos:line="106" pos:column="46">8<pos:position pos:line="106" pos:column="47"/></literal><operator pos:line="106" pos:column="47">)<pos:position pos:line="106" pos:column="48"/></operator> <operator pos:line="106" pos:column="49">|<pos:position pos:line="106" pos:column="50"/></operator> <name><name pos:line="106" pos:column="51">ext<pos:position pos:line="106" pos:column="54"/></name><index pos:line="106" pos:column="54">[<expr><literal type="number" pos:line="106" pos:column="55">1<pos:position pos:line="106" pos:column="56"/></literal></expr>]<pos:position pos:line="106" pos:column="57"/></index></name></expr></init></decl>;<pos:position pos:line="106" pos:column="58"/></decl_stmt>
            <expr_stmt><expr><name pos:line="107" pos:column="13">ext<pos:position pos:line="107" pos:column="16"/></name> <operator pos:line="107" pos:column="17">+=<pos:position pos:line="107" pos:column="19"/></operator> <literal type="number" pos:line="107" pos:column="20">2<pos:position pos:line="107" pos:column="21"/></literal></expr>;<pos:position pos:line="107" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="108" pos:column="13">debugs<pos:position pos:line="108" pos:column="19"/></name><argument_list pos:line="108" pos:column="19">(<argument><expr><literal type="number" pos:line="108" pos:column="20">83<pos:position pos:line="108" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="24">7<pos:position pos:line="108" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="27">"TLS Extension: "<pos:position pos:line="108" pos:column="44"/></literal> <operator pos:line="108" pos:column="45">&lt;&lt;<pos:position pos:line="108" pos:column="53"/></operator> <name><name pos:line="108" pos:column="48">std<pos:position pos:line="108" pos:column="51"/></name><operator pos:line="108" pos:column="51">::<pos:position pos:line="108" pos:column="53"/></operator><name pos:line="108" pos:column="53">hex<pos:position pos:line="108" pos:column="56"/></name></name> <operator pos:line="108" pos:column="57">&lt;&lt;<pos:position pos:line="108" pos:column="65"/></operator> <name pos:line="108" pos:column="60">extType<pos:position pos:line="108" pos:column="67"/></name> <operator pos:line="108" pos:column="68">&lt;&lt;<pos:position pos:line="108" pos:column="76"/></operator> <literal type="string" pos:line="108" pos:column="71">" of size:"<pos:position pos:line="108" pos:column="82"/></literal> <operator pos:line="108" pos:column="83">&lt;&lt;<pos:position pos:line="108" pos:column="91"/></operator> <name pos:line="108" pos:column="86">extLen<pos:position pos:line="108" pos:column="92"/></name></expr></argument>)<pos:position pos:line="108" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="94"/></expr_stmt>

            <if pos:line="110" pos:column="13">if <condition pos:line="110" pos:column="16">(<expr><name pos:line="110" pos:column="17">ext<pos:position pos:line="110" pos:column="20"/></name> <operator pos:line="110" pos:column="21">+<pos:position pos:line="110" pos:column="22"/></operator> <name pos:line="110" pos:column="23">extLen<pos:position pos:line="110" pos:column="29"/></name> <operator pos:line="110" pos:column="30">&gt;<pos:position pos:line="110" pos:column="34"/></operator> <name pos:line="110" pos:column="32">pToExtensions<pos:position pos:line="110" pos:column="45"/></name> <operator pos:line="110" pos:column="46">+<pos:position pos:line="110" pos:column="47"/></operator> <name pos:line="110" pos:column="48">extensionsLen<pos:position pos:line="110" pos:column="61"/></name></expr>)<pos:position pos:line="110" pos:column="62"/></condition><then pos:line="110" pos:column="62"> <block pos:line="110" pos:column="63">{
                <expr_stmt><expr><call><name pos:line="111" pos:column="17">debugs<pos:position pos:line="111" pos:column="23"/></name><argument_list pos:line="111" pos:column="23">(<argument><expr><literal type="number" pos:line="111" pos:column="24">83<pos:position pos:line="111" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="111" pos:column="28">2<pos:position pos:line="111" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="31">"Extension "<pos:position pos:line="111" pos:column="43"/></literal> <operator pos:line="111" pos:column="44">&lt;&lt;<pos:position pos:line="111" pos:column="52"/></operator> <name><name pos:line="111" pos:column="47">std<pos:position pos:line="111" pos:column="50"/></name><operator pos:line="111" pos:column="50">::<pos:position pos:line="111" pos:column="52"/></operator><name pos:line="111" pos:column="52">hex<pos:position pos:line="111" pos:column="55"/></name></name> <operator pos:line="111" pos:column="56">&lt;&lt;<pos:position pos:line="111" pos:column="64"/></operator> <name pos:line="111" pos:column="59">extType<pos:position pos:line="111" pos:column="66"/></name> <operator pos:line="111" pos:column="67">&lt;&lt;<pos:position pos:line="111" pos:column="75"/></operator> <literal type="string" pos:line="111" pos:column="70">" length parser error"<pos:position pos:line="111" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="94"/></expr_stmt>
                <return pos:line="112" pos:column="17">return <expr><literal type="boolean" pos:line="112" pos:column="24">false<pos:position pos:line="112" pos:column="29"/></literal></expr>;<pos:position pos:line="112" pos:column="30"/></return>
            }<pos:position pos:line="113" pos:column="14"/></block></then></if>

            <comment type="line" pos:line="115" pos:column="13">//The SNI extension has the type 0 (extType == 0)</comment>
            <comment type="line" pos:line="116" pos:column="13">// RFC6066 sections 3, 10.2</comment>
            <comment type="line" pos:line="117" pos:column="13">// The two first bytes indicates the length of the SNI data (should be extLen-2)</comment>
            <comment type="line" pos:line="118" pos:column="13">// The next byte is the hostname type, it should be '0' for normal hostname (ext[2] == 0)</comment>
            <comment type="line" pos:line="119" pos:column="13">// The 3rd and 4th bytes are the length of the hostname</comment>
            <if pos:line="120" pos:column="13">if <condition pos:line="120" pos:column="16">(<expr><name pos:line="120" pos:column="17">extType<pos:position pos:line="120" pos:column="24"/></name> <operator pos:line="120" pos:column="25">==<pos:position pos:line="120" pos:column="27"/></operator> <literal type="number" pos:line="120" pos:column="28">0<pos:position pos:line="120" pos:column="29"/></literal> <operator pos:line="120" pos:column="30">&amp;&amp;<pos:position pos:line="120" pos:column="40"/></operator> <name><name pos:line="120" pos:column="33">ext<pos:position pos:line="120" pos:column="36"/></name><index pos:line="120" pos:column="36">[<expr><literal type="number" pos:line="120" pos:column="37">2<pos:position pos:line="120" pos:column="38"/></literal></expr>]<pos:position pos:line="120" pos:column="39"/></index></name> <operator pos:line="120" pos:column="40">==<pos:position pos:line="120" pos:column="42"/></operator> <literal type="number" pos:line="120" pos:column="43">0<pos:position pos:line="120" pos:column="44"/></literal></expr>)<pos:position pos:line="120" pos:column="45"/></condition><then pos:line="120" pos:column="45"> <block pos:line="120" pos:column="46">{
                <decl_stmt><decl><type><specifier pos:line="121" pos:column="17">const<pos:position pos:line="121" pos:column="22"/></specifier> <name pos:line="121" pos:column="23">size_t<pos:position pos:line="121" pos:column="29"/></name></type> <name pos:line="121" pos:column="30">hostLen<pos:position pos:line="121" pos:column="37"/></name> <init pos:line="121" pos:column="38">= <expr><operator pos:line="121" pos:column="40">(<pos:position pos:line="121" pos:column="41"/></operator><name><name pos:line="121" pos:column="41">ext<pos:position pos:line="121" pos:column="44"/></name><index pos:line="121" pos:column="44">[<expr><literal type="number" pos:line="121" pos:column="45">3<pos:position pos:line="121" pos:column="46"/></literal></expr>]<pos:position pos:line="121" pos:column="47"/></index></name> <operator pos:line="121" pos:column="48">&lt;&lt;<pos:position pos:line="121" pos:column="56"/></operator> <literal type="number" pos:line="121" pos:column="51">8<pos:position pos:line="121" pos:column="52"/></literal><operator pos:line="121" pos:column="52">)<pos:position pos:line="121" pos:column="53"/></operator> <operator pos:line="121" pos:column="54">|<pos:position pos:line="121" pos:column="55"/></operator> <name><name pos:line="121" pos:column="56">ext<pos:position pos:line="121" pos:column="59"/></name><index pos:line="121" pos:column="59">[<expr><literal type="number" pos:line="121" pos:column="60">4<pos:position pos:line="121" pos:column="61"/></literal></expr>]<pos:position pos:line="121" pos:column="62"/></index></name></expr></init></decl>;<pos:position pos:line="121" pos:column="63"/></decl_stmt>
                <if pos:line="122" pos:column="17">if <condition pos:line="122" pos:column="20">(<expr><name pos:line="122" pos:column="21">hostLen<pos:position pos:line="122" pos:column="28"/></name> <operator pos:line="122" pos:column="29">&lt;<pos:position pos:line="122" pos:column="33"/></operator> <name pos:line="122" pos:column="31">extLen<pos:position pos:line="122" pos:column="37"/></name></expr>)<pos:position pos:line="122" pos:column="38"/></condition><then pos:line="122" pos:column="38">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="123" pos:column="21">serverName<pos:position pos:line="123" pos:column="31"/></name><operator pos:line="123" pos:column="31">.<pos:position pos:line="123" pos:column="32"/></operator><name pos:line="123" pos:column="32">assign<pos:position pos:line="123" pos:column="38"/></name></name><argument_list pos:line="123" pos:column="38">(<argument><expr><cast type="reinterpret" pos:line="123" pos:column="39">reinterpret_cast<argument_list type="generic" pos:line="123" pos:column="55">&lt;<argument><expr><specifier pos:line="123" pos:column="56">const<pos:position pos:line="123" pos:column="61"/></specifier> <name pos:line="123" pos:column="62">char<pos:position pos:line="123" pos:column="66"/></name> <operator pos:line="123" pos:column="67">*<pos:position pos:line="123" pos:column="68"/></operator></expr></argument>&gt;<pos:position pos:line="123" pos:column="72"/></argument_list><argument_list pos:line="123" pos:column="69">(<argument><expr><name pos:line="123" pos:column="70">ext<pos:position pos:line="123" pos:column="73"/></name><operator pos:line="123" pos:column="73">+<pos:position pos:line="123" pos:column="74"/></operator><literal type="number" pos:line="123" pos:column="74">5<pos:position pos:line="123" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="76"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="123" pos:column="78">hostLen<pos:position pos:line="123" pos:column="85"/></name></expr></argument>)<pos:position pos:line="123" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="87"/></expr_stmt></block></then></if>
                <expr_stmt><expr><call><name pos:line="124" pos:column="17">debugs<pos:position pos:line="124" pos:column="23"/></name><argument_list pos:line="124" pos:column="23">(<argument><expr><literal type="number" pos:line="124" pos:column="24">83<pos:position pos:line="124" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="28">7<pos:position pos:line="124" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="31">"Found server name: "<pos:position pos:line="124" pos:column="52"/></literal> <operator pos:line="124" pos:column="53">&lt;&lt;<pos:position pos:line="124" pos:column="61"/></operator> <name pos:line="124" pos:column="56">serverName<pos:position pos:line="124" pos:column="66"/></name></expr></argument>)<pos:position pos:line="124" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="68"/></expr_stmt>
            }<pos:position pos:line="125" pos:column="14"/></block></then> <elseif pos:line="125" pos:column="15">else <if pos:line="125" pos:column="20">if <condition pos:line="125" pos:column="23">(<expr><name pos:line="125" pos:column="24">extType<pos:position pos:line="125" pos:column="31"/></name> <operator pos:line="125" pos:column="32">==<pos:position pos:line="125" pos:column="34"/></operator> <literal type="number" pos:line="125" pos:column="35">15<pos:position pos:line="125" pos:column="37"/></literal> <operator pos:line="125" pos:column="38">&amp;&amp;<pos:position pos:line="125" pos:column="48"/></operator> <name><name pos:line="125" pos:column="41">ext<pos:position pos:line="125" pos:column="44"/></name><index pos:line="125" pos:column="44">[<expr><literal type="number" pos:line="125" pos:column="45">0<pos:position pos:line="125" pos:column="46"/></literal></expr>]<pos:position pos:line="125" pos:column="47"/></index></name> <operator pos:line="125" pos:column="48">!=<pos:position pos:line="125" pos:column="50"/></operator> <literal type="number" pos:line="125" pos:column="51">0<pos:position pos:line="125" pos:column="52"/></literal></expr>)<pos:position pos:line="125" pos:column="53"/></condition><then pos:line="125" pos:column="53"> <block pos:line="125" pos:column="54">{
                <comment type="line" pos:line="126" pos:column="17">// The heartBeats are the type 15, RFC6520</comment>
                <expr_stmt><expr><name pos:line="127" pos:column="17">doHeartBeats<pos:position pos:line="127" pos:column="29"/></name> <operator pos:line="127" pos:column="30">=<pos:position pos:line="127" pos:column="31"/></operator> <literal type="boolean" pos:line="127" pos:column="32">true<pos:position pos:line="127" pos:column="36"/></literal></expr>;<pos:position pos:line="127" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="128" pos:column="14"/></block></then></if></elseif> <elseif pos:line="128" pos:column="15">else <if pos:line="128" pos:column="20">if <condition pos:line="128" pos:column="23">(<expr><name pos:line="128" pos:column="24">extType<pos:position pos:line="128" pos:column="31"/></name> <operator pos:line="128" pos:column="32">==<pos:position pos:line="128" pos:column="34"/></operator> <literal type="number" pos:line="128" pos:column="35">0x23<pos:position pos:line="128" pos:column="39"/></literal></expr>)<pos:position pos:line="128" pos:column="40"/></condition><then pos:line="128" pos:column="40"> <block pos:line="128" pos:column="41">{
                <comment type="line" pos:line="129" pos:column="17">//SessionTicket TLS Extension RFC5077</comment>
                <expr_stmt><expr><name pos:line="130" pos:column="17">tlsTicketsExtension<pos:position pos:line="130" pos:column="36"/></name> <operator pos:line="130" pos:column="37">=<pos:position pos:line="130" pos:column="38"/></operator> <literal type="boolean" pos:line="130" pos:column="39">true<pos:position pos:line="130" pos:column="43"/></literal></expr>;<pos:position pos:line="130" pos:column="44"/></expr_stmt>
                <if pos:line="131" pos:column="17">if <condition pos:line="131" pos:column="20">(<expr><name pos:line="131" pos:column="21">extLen<pos:position pos:line="131" pos:column="27"/></name> <operator pos:line="131" pos:column="28">!=<pos:position pos:line="131" pos:column="30"/></operator> <literal type="number" pos:line="131" pos:column="31">0<pos:position pos:line="131" pos:column="32"/></literal></expr>)<pos:position pos:line="131" pos:column="33"/></condition><then pos:line="131" pos:column="33">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="132" pos:column="21">hasTlsTicket<pos:position pos:line="132" pos:column="33"/></name> <operator pos:line="132" pos:column="34">=<pos:position pos:line="132" pos:column="35"/></operator> <literal type="boolean" pos:line="132" pos:column="36">true<pos:position pos:line="132" pos:column="40"/></literal></expr>;<pos:position pos:line="132" pos:column="41"/></expr_stmt></block></then></if>
            }<pos:position pos:line="133" pos:column="14"/></block></then></if></elseif> <elseif pos:line="133" pos:column="15">else <if pos:line="133" pos:column="20">if <condition pos:line="133" pos:column="23">(<expr><name pos:line="133" pos:column="24">extType<pos:position pos:line="133" pos:column="31"/></name> <operator pos:line="133" pos:column="32">==<pos:position pos:line="133" pos:column="34"/></operator> <literal type="number" pos:line="133" pos:column="35">0x05<pos:position pos:line="133" pos:column="39"/></literal></expr>)<pos:position pos:line="133" pos:column="40"/></condition><then pos:line="133" pos:column="40"> <block pos:line="133" pos:column="41">{
                <comment type="line" pos:line="134" pos:column="17">// RFC6066 sections 8, 10.2</comment>
                <expr_stmt><expr><name pos:line="135" pos:column="17">tlsStatusRequest<pos:position pos:line="135" pos:column="33"/></name> <operator pos:line="135" pos:column="34">=<pos:position pos:line="135" pos:column="35"/></operator> <literal type="boolean" pos:line="135" pos:column="36">true<pos:position pos:line="135" pos:column="40"/></literal></expr>;<pos:position pos:line="135" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="136" pos:column="14"/></block></then></if></elseif> <elseif pos:line="136" pos:column="15">else <if pos:line="136" pos:column="20">if <condition pos:line="136" pos:column="23">(<expr><name pos:line="136" pos:column="24">extType<pos:position pos:line="136" pos:column="31"/></name> <operator pos:line="136" pos:column="32">==<pos:position pos:line="136" pos:column="34"/></operator> <literal type="number" pos:line="136" pos:column="35">0x3374<pos:position pos:line="136" pos:column="41"/></literal></expr>)<pos:position pos:line="136" pos:column="42"/></condition><then pos:line="136" pos:column="42"> <block pos:line="136" pos:column="43">{
                <comment type="line" pos:line="137" pos:column="17">// detected TLS next protocol negotiate extension</comment>
            }<pos:position pos:line="138" pos:column="14"/></block></then></if></elseif> <elseif pos:line="138" pos:column="15">else <if pos:line="138" pos:column="20">if <condition pos:line="138" pos:column="23">(<expr><name pos:line="138" pos:column="24">extType<pos:position pos:line="138" pos:column="31"/></name> <operator pos:line="138" pos:column="32">==<pos:position pos:line="138" pos:column="34"/></operator> <literal type="number" pos:line="138" pos:column="35">0x10<pos:position pos:line="138" pos:column="39"/></literal></expr>)<pos:position pos:line="138" pos:column="40"/></condition><then pos:line="138" pos:column="40"> <block pos:line="138" pos:column="41">{
                <comment type="line" pos:line="139" pos:column="17">// Application-Layer Protocol Negotiation Extension, RFC7301</comment>
                <decl_stmt><decl><type><specifier pos:line="140" pos:column="17">const<pos:position pos:line="140" pos:column="22"/></specifier> <name pos:line="140" pos:column="23">size_t<pos:position pos:line="140" pos:column="29"/></name></type> <name pos:line="140" pos:column="30">listLen<pos:position pos:line="140" pos:column="37"/></name> <init pos:line="140" pos:column="38">= <expr><operator pos:line="140" pos:column="40">(<pos:position pos:line="140" pos:column="41"/></operator><name><name pos:line="140" pos:column="41">ext<pos:position pos:line="140" pos:column="44"/></name><index pos:line="140" pos:column="44">[<expr><literal type="number" pos:line="140" pos:column="45">0<pos:position pos:line="140" pos:column="46"/></literal></expr>]<pos:position pos:line="140" pos:column="47"/></index></name> <operator pos:line="140" pos:column="48">&lt;&lt;<pos:position pos:line="140" pos:column="56"/></operator> <literal type="number" pos:line="140" pos:column="51">8<pos:position pos:line="140" pos:column="52"/></literal><operator pos:line="140" pos:column="52">)<pos:position pos:line="140" pos:column="53"/></operator> <operator pos:line="140" pos:column="54">|<pos:position pos:line="140" pos:column="55"/></operator> <name><name pos:line="140" pos:column="56">ext<pos:position pos:line="140" pos:column="59"/></name><index pos:line="140" pos:column="59">[<expr><literal type="number" pos:line="140" pos:column="60">1<pos:position pos:line="140" pos:column="61"/></literal></expr>]<pos:position pos:line="140" pos:column="62"/></index></name></expr></init></decl>;<pos:position pos:line="140" pos:column="63"/></decl_stmt>
                <if pos:line="141" pos:column="17">if <condition pos:line="141" pos:column="20">(<expr><name pos:line="141" pos:column="21">listLen<pos:position pos:line="141" pos:column="28"/></name> <operator pos:line="141" pos:column="29">&lt;<pos:position pos:line="141" pos:column="33"/></operator> <name pos:line="141" pos:column="31">extLen<pos:position pos:line="141" pos:column="37"/></name></expr>)<pos:position pos:line="141" pos:column="38"/></condition><then pos:line="141" pos:column="38">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="142" pos:column="21">tlsAppLayerProtoNeg<pos:position pos:line="142" pos:column="40"/></name><operator pos:line="142" pos:column="40">.<pos:position pos:line="142" pos:column="41"/></operator><name pos:line="142" pos:column="41">assign<pos:position pos:line="142" pos:column="47"/></name></name><argument_list pos:line="142" pos:column="47">(<argument><expr><cast type="reinterpret" pos:line="142" pos:column="48">reinterpret_cast<argument_list type="generic" pos:line="142" pos:column="64">&lt;<argument><expr><specifier pos:line="142" pos:column="65">const<pos:position pos:line="142" pos:column="70"/></specifier> <name pos:line="142" pos:column="71">char<pos:position pos:line="142" pos:column="75"/></name> <operator pos:line="142" pos:column="76">*<pos:position pos:line="142" pos:column="77"/></operator></expr></argument>&gt;<pos:position pos:line="142" pos:column="81"/></argument_list><argument_list pos:line="142" pos:column="78">(<argument><expr><name pos:line="142" pos:column="79">ext<pos:position pos:line="142" pos:column="82"/></name><operator pos:line="142" pos:column="82">+<pos:position pos:line="142" pos:column="83"/></operator><literal type="number" pos:line="142" pos:column="83">5<pos:position pos:line="142" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="142" pos:column="85"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="142" pos:column="87">listLen<pos:position pos:line="142" pos:column="94"/></name></expr></argument>)<pos:position pos:line="142" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="96"/></expr_stmt></block></then></if>
            }<pos:position pos:line="143" pos:column="14"/></block></then></if></elseif> <else pos:line="143" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="144" pos:column="17">extensions<pos:position pos:line="144" pos:column="27"/></name><operator pos:line="144" pos:column="27">.<pos:position pos:line="144" pos:column="28"/></operator><name pos:line="144" pos:column="28">push_back<pos:position pos:line="144" pos:column="37"/></name></name><argument_list pos:line="144" pos:column="37">(<argument><expr><name pos:line="144" pos:column="38">extType<pos:position pos:line="144" pos:column="45"/></name></expr></argument>)<pos:position pos:line="144" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="47"/></expr_stmt></block></else></if>

            <expr_stmt><expr><name pos:line="146" pos:column="13">ext<pos:position pos:line="146" pos:column="16"/></name> <operator pos:line="146" pos:column="17">+=<pos:position pos:line="146" pos:column="19"/></operator> <name pos:line="146" pos:column="20">extLen<pos:position pos:line="146" pos:column="26"/></name></expr>;<pos:position pos:line="146" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="147" pos:column="10"/></block></while>
    }<pos:position pos:line="148" pos:column="6"/></block></then></if>
    <return pos:line="149" pos:column="5">return <expr><literal type="boolean" pos:line="149" pos:column="12">true<pos:position pos:line="149" pos:column="16"/></literal></expr>;<pos:position pos:line="149" pos:column="17"/></return>
}<pos:position pos:line="150" pos:column="2"/></block></function></unit>
