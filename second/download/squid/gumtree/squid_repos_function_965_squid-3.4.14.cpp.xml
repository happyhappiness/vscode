<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_965_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">httpMsgIsolateHeaders<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier><modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">parse_start<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">l<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="56">const<pos:position pos:line="2" pos:column="61"/></specifier> <name pos:line="2" pos:column="62">char<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">*<pos:position pos:line="2" pos:column="68"/></modifier><modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">blk_start<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="80">const<pos:position pos:line="2" pos:column="85"/></specifier> <name pos:line="2" pos:column="86">char<pos:position pos:line="2" pos:column="90"/></name> <modifier pos:line="2" pos:column="91">*<pos:position pos:line="2" pos:column="92"/></modifier><modifier pos:line="2" pos:column="92">*<pos:position pos:line="2" pos:column="93"/></modifier></type><name pos:line="2" pos:column="93">blk_end<pos:position pos:line="2" pos:column="100"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="101"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/*
     * parse_start points to the first line of HTTP message *headers*,
     * not including the request or status lines
     */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">end<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><call><name pos:line="8" pos:column="18">headersEnd<pos:position pos:line="8" pos:column="28"/></name><argument_list pos:line="8" pos:column="28">(<argument><expr><operator pos:line="8" pos:column="29">*<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="30">parse_start<pos:position pos:line="8" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="43">l<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">nnl<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">end<pos:position pos:line="11" pos:column="12"/></name></expr>)<pos:position pos:line="11" pos:column="13"/></condition><then pos:line="11" pos:column="13"> <block pos:line="11" pos:column="14">{
        <expr_stmt><expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">blk_start<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <operator pos:line="12" pos:column="22">*<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">parse_start<pos:position pos:line="12" pos:column="34"/></name></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">blk_end<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <operator pos:line="13" pos:column="20">*<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">parse_start<pos:position pos:line="13" pos:column="32"/></name> <operator pos:line="13" pos:column="33">+<pos:position pos:line="13" pos:column="34"/></operator> <name pos:line="13" pos:column="35">end<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">-<pos:position pos:line="13" pos:column="40"/></operator> <literal type="number" pos:line="13" pos:column="41">1<pos:position pos:line="13" pos:column="42"/></literal></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
        <comment type="block" pos:line="14" pos:column="9">/*
         * leave blk_end pointing to the first character after the
         * first newline which terminates the headers
         */</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">assert<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><operator pos:line="18" pos:column="16">*<pos:position pos:line="18" pos:column="17"/></operator><operator pos:line="18" pos:column="17">*<pos:position pos:line="18" pos:column="18"/></operator><name pos:line="18" pos:column="18">blk_end<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">==<pos:position pos:line="18" pos:column="28"/></operator> <literal type="char" pos:line="18" pos:column="29">'\n'<pos:position pos:line="18" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>

        <while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><operator pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></operator><operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator><operator pos:line="20" pos:column="18">*<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">blk_end<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">-<pos:position pos:line="20" pos:column="28"/></operator> <literal type="number" pos:line="20" pos:column="29">1<pos:position pos:line="20" pos:column="30"/></literal><operator pos:line="20" pos:column="30">)<pos:position pos:line="20" pos:column="31"/></operator> <operator pos:line="20" pos:column="32">==<pos:position pos:line="20" pos:column="34"/></operator> <literal type="char" pos:line="20" pos:column="35">'\r'<pos:position pos:line="20" pos:column="39"/></literal></expr>)<pos:position pos:line="20" pos:column="40"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="13">--<pos:position pos:line="21" pos:column="15"/></operator><operator pos:line="21" pos:column="15">(<pos:position pos:line="21" pos:column="16"/></operator><operator pos:line="21" pos:column="16">*<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="17">blk_end<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">)<pos:position pos:line="21" pos:column="25"/></operator></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt></block></while>

        <expr_stmt><expr><call><name pos:line="23" pos:column="9">assert<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><operator pos:line="23" pos:column="16">*<pos:position pos:line="23" pos:column="17"/></operator><operator pos:line="23" pos:column="17">(<pos:position pos:line="23" pos:column="18"/></operator><operator pos:line="23" pos:column="18">*<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">blk_end<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">-<pos:position pos:line="23" pos:column="28"/></operator> <literal type="number" pos:line="23" pos:column="29">1<pos:position pos:line="23" pos:column="30"/></literal><operator pos:line="23" pos:column="30">)<pos:position pos:line="23" pos:column="31"/></operator> <operator pos:line="23" pos:column="32">==<pos:position pos:line="23" pos:column="34"/></operator> <literal type="char" pos:line="23" pos:column="35">'\n'<pos:position pos:line="23" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="25" pos:column="9">*<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">parse_start<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">+=<pos:position pos:line="25" pos:column="24"/></operator> <name pos:line="25" pos:column="25">end<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></expr_stmt>

        <return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">1<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="30" pos:column="5">/*
     * If we didn't find the end of headers, and parse_start does
     * NOT point to a CR or NL character, then return failure
     */</comment>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">*<pos:position pos:line="34" pos:column="10"/></operator><operator pos:line="34" pos:column="10">*<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="11">parse_start<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">!=<pos:position pos:line="34" pos:column="25"/></operator> <literal type="char" pos:line="34" pos:column="26">'\r'<pos:position pos:line="34" pos:column="30"/></literal> <operator pos:line="34" pos:column="31">&amp;&amp;<pos:position pos:line="34" pos:column="41"/></operator> <operator pos:line="34" pos:column="34">*<pos:position pos:line="34" pos:column="35"/></operator><operator pos:line="34" pos:column="35">*<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="36">parse_start<pos:position pos:line="34" pos:column="47"/></name> <operator pos:line="34" pos:column="48">!=<pos:position pos:line="34" pos:column="50"/></operator> <literal type="char" pos:line="34" pos:column="51">'\n'<pos:position pos:line="34" pos:column="55"/></literal></expr>)<pos:position pos:line="34" pos:column="56"/></condition><then pos:line="34" pos:column="56">
        <block type="pseudo"><return pos:line="35" pos:column="9">return <expr><literal type="number" pos:line="35" pos:column="16">0<pos:position pos:line="35" pos:column="17"/></literal></expr>;<pos:position pos:line="35" pos:column="18"/></return></block></then></if>		<comment type="block" pos:line="35" pos:column="33">/* failure */</comment>

    <comment type="block" pos:line="37" pos:column="5">/*
     * If we didn't find the end of headers, and parse_start does point
     * to an empty line, then we have empty headers.  Skip all CR and
     * NL characters up to the first NL.  Leave parse_start pointing at
     * the first character after the first NL.
     */</comment>
    <expr_stmt><expr><operator pos:line="43" pos:column="5">*<pos:position pos:line="43" pos:column="6"/></operator><name pos:line="43" pos:column="6">blk_start<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <operator pos:line="43" pos:column="18">*<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">parse_start<pos:position pos:line="43" pos:column="30"/></name></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="45" pos:column="5">*<pos:position pos:line="45" pos:column="6"/></operator><name pos:line="45" pos:column="6">blk_end<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <operator pos:line="45" pos:column="16">*<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">blk_start<pos:position pos:line="45" pos:column="26"/></name></expr>;<pos:position pos:line="45" pos:column="27"/></expr_stmt>

    <for pos:line="47" pos:column="5">for <control pos:line="47" pos:column="9">(<init><expr><name pos:line="47" pos:column="10">nnl<pos:position pos:line="47" pos:column="13"/></name> <operator pos:line="47" pos:column="14">=<pos:position pos:line="47" pos:column="15"/></operator> <literal type="number" pos:line="47" pos:column="16">0<pos:position pos:line="47" pos:column="17"/></literal></expr>;<pos:position pos:line="47" pos:column="18"/></init> <condition><expr><name pos:line="47" pos:column="19">nnl<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">==<pos:position pos:line="47" pos:column="25"/></operator> <literal type="number" pos:line="47" pos:column="26">0<pos:position pos:line="47" pos:column="27"/></literal></expr>;<pos:position pos:line="47" pos:column="28"/></condition> <incr><expr><operator pos:line="47" pos:column="29">++<pos:position pos:line="47" pos:column="31"/></operator><operator pos:line="47" pos:column="31">(<pos:position pos:line="47" pos:column="32"/></operator><operator pos:line="47" pos:column="32">*<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="33">parse_start<pos:position pos:line="47" pos:column="44"/></name><operator pos:line="47" pos:column="44">)<pos:position pos:line="47" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="47" pos:column="46"/></control> <block pos:line="47" pos:column="47">{
        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><operator pos:line="48" pos:column="13">*<pos:position pos:line="48" pos:column="14"/></operator><operator pos:line="48" pos:column="14">*<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="15">parse_start<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">==<pos:position pos:line="48" pos:column="29"/></operator> <literal type="char" pos:line="48" pos:column="30">'\r'<pos:position pos:line="48" pos:column="34"/></literal></expr>)<pos:position pos:line="48" pos:column="35"/></condition><then pos:line="48" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="49" pos:column="13">(<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">void<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">)<pos:position pos:line="49" pos:column="19"/></operator> <literal type="number" pos:line="49" pos:column="20">0<pos:position pos:line="49" pos:column="21"/></literal></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt></block></then>
        <elseif pos:line="50" pos:column="9">else <if pos:line="50" pos:column="14">if <condition pos:line="50" pos:column="17">(<expr><operator pos:line="50" pos:column="18">*<pos:position pos:line="50" pos:column="19"/></operator><operator pos:line="50" pos:column="19">*<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="20">parse_start<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">==<pos:position pos:line="50" pos:column="34"/></operator> <literal type="char" pos:line="50" pos:column="35">'\n'<pos:position pos:line="50" pos:column="39"/></literal></expr>)<pos:position pos:line="50" pos:column="40"/></condition><then pos:line="50" pos:column="40">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="51" pos:column="13">++<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="15">nnl<pos:position pos:line="51" pos:column="18"/></name></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt></block></then></if></elseif>
        <else pos:line="52" pos:column="9">else
            <block type="pseudo"><break pos:line="53" pos:column="13">break;<pos:position pos:line="53" pos:column="19"/></break></block></else></if>
    }<pos:position pos:line="54" pos:column="6"/></block></for>

    <return pos:line="56" pos:column="5">return <expr><literal type="number" pos:line="56" pos:column="12">1<pos:position pos:line="56" pos:column="13"/></literal></expr>;<pos:position pos:line="56" pos:column="14"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
