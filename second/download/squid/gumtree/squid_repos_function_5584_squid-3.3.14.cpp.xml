<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5584_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MmappedFile<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">write<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">WriteRequest<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">aRequest<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">79<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <literal type="string" pos:line="4" pos:column="26">"(FD "<pos:position pos:line="4" pos:column="32"/></literal> <operator pos:line="4" pos:column="33">&lt;&lt;<pos:position pos:line="4" pos:column="41"/></operator> <name pos:line="4" pos:column="36">fd<pos:position pos:line="4" pos:column="38"/></name> <operator pos:line="4" pos:column="39">&lt;&lt;<pos:position pos:line="4" pos:column="47"/></operator> <literal type="string" pos:line="4" pos:column="42">", "<pos:position pos:line="4" pos:column="46"/></literal> <operator pos:line="4" pos:column="47">&lt;&lt;<pos:position pos:line="4" pos:column="55"/></operator> <name><name pos:line="4" pos:column="50">aRequest<pos:position pos:line="4" pos:column="58"/></name><operator pos:line="4" pos:column="58">-&gt;<pos:position pos:line="4" pos:column="63"/></operator><name pos:line="4" pos:column="60">len<pos:position pos:line="4" pos:column="63"/></name></name> <operator pos:line="4" pos:column="64">&lt;&lt;<pos:position pos:line="4" pos:column="72"/></operator> <literal type="string" pos:line="4" pos:column="67">", "<pos:position pos:line="4" pos:column="71"/></literal> <operator pos:line="4" pos:column="72">&lt;&lt;<pos:position pos:line="4" pos:column="80"/></operator>
           <name><name pos:line="5" pos:column="12">aRequest<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">-&gt;<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="22">offset<pos:position pos:line="5" pos:column="28"/></name></name> <operator pos:line="5" pos:column="29">&lt;&lt;<pos:position pos:line="5" pos:column="37"/></operator> <literal type="string" pos:line="5" pos:column="32">")"<pos:position pos:line="5" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">fd<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">&gt;=<pos:position pos:line="7" pos:column="20"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">ioRequestor<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">!=<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="27">NULL<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">aRequest<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">len<pos:position pos:line="9" pos:column="25"/></name></name> <operator pos:line="9" pos:column="26">&gt;<pos:position pos:line="9" pos:column="30"/></operator> <literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt> <comment type="line" pos:line="9" pos:column="32">// TODO: work around mmap failures on zero-len?</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name><name pos:line="10" pos:column="12">aRequest<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">-&gt;<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="22">offset<pos:position pos:line="10" pos:column="28"/></name></name> <operator pos:line="10" pos:column="29">&gt;=<pos:position pos:line="10" pos:column="34"/></operator> <literal type="number" pos:line="10" pos:column="32">0<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><operator pos:line="11" pos:column="12">!<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">error_<pos:position pos:line="11" pos:column="19"/></name></expr></argument>)<pos:position pos:line="11" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt> <comment type="line" pos:line="11" pos:column="22">// TODO: propagate instead?</comment>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name pos:line="13" pos:column="12">minOffset<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">&lt;<pos:position pos:line="13" pos:column="26"/></operator> <literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal> <operator pos:line="13" pos:column="26">||<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">minOffset<pos:position pos:line="13" pos:column="38"/></name> <operator pos:line="13" pos:column="39">&lt;=<pos:position pos:line="13" pos:column="44"/></operator> <name><name pos:line="13" pos:column="42">aRequest<pos:position pos:line="13" pos:column="50"/></name><operator pos:line="13" pos:column="50">-&gt;<pos:position pos:line="13" pos:column="55"/></operator><name pos:line="13" pos:column="52">offset<pos:position pos:line="13" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">assert<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><name pos:line="14" pos:column="12">maxOffset<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">&lt;<pos:position pos:line="14" pos:column="26"/></operator> <literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal> <operator pos:line="14" pos:column="26">||<pos:position pos:line="14" pos:column="28"/></operator> <cast type="static" pos:line="14" pos:column="29">static_cast<argument_list type="generic" pos:line="14" pos:column="40">&lt;<argument><expr><name pos:line="14" pos:column="41">uint64_t<pos:position pos:line="14" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="14" pos:column="53"/></argument_list><argument_list pos:line="14" pos:column="50">(<argument><expr><name><name pos:line="14" pos:column="51">aRequest<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">-&gt;<pos:position pos:line="14" pos:column="64"/></operator><name pos:line="14" pos:column="61">offset<pos:position pos:line="14" pos:column="67"/></name></name> <operator pos:line="14" pos:column="68">+<pos:position pos:line="14" pos:column="69"/></operator> <name><name pos:line="14" pos:column="70">aRequest<pos:position pos:line="14" pos:column="78"/></name><operator pos:line="14" pos:column="78">-&gt;<pos:position pos:line="14" pos:column="83"/></operator><name pos:line="14" pos:column="80">len<pos:position pos:line="14" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="84"/></argument_list></cast> <operator pos:line="14" pos:column="85">&lt;=<pos:position pos:line="14" pos:column="90"/></operator> <cast type="static" pos:line="14" pos:column="88">static_cast<argument_list type="generic" pos:line="14" pos:column="99">&lt;<argument><expr><name pos:line="14" pos:column="100">uint64_t<pos:position pos:line="14" pos:column="108"/></name></expr></argument>&gt;<pos:position pos:line="14" pos:column="112"/></argument_list><argument_list pos:line="14" pos:column="109">(<argument><expr><name pos:line="14" pos:column="110">maxOffset<pos:position pos:line="14" pos:column="119"/></name></expr></argument>)<pos:position pos:line="14" pos:column="120"/></argument_list></cast></expr></argument>)<pos:position pos:line="14" pos:column="121"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="122"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">ssize_t<pos:position pos:line="16" pos:column="18"/></name></type> <name pos:line="16" pos:column="19">written<pos:position pos:line="16" pos:column="26"/></name> <init pos:line="16" pos:column="27">=
        <expr><call><name pos:line="17" pos:column="9">pwrite<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name pos:line="17" pos:column="16">fd<pos:position pos:line="17" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="20">aRequest<pos:position pos:line="17" pos:column="28"/></name><operator pos:line="17" pos:column="28">-&gt;<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="30">buf<pos:position pos:line="17" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="35">aRequest<pos:position pos:line="17" pos:column="43"/></name><operator pos:line="17" pos:column="43">-&gt;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="45">len<pos:position pos:line="17" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="50">aRequest<pos:position pos:line="17" pos:column="58"/></name><operator pos:line="17" pos:column="58">-&gt;<pos:position pos:line="17" pos:column="63"/></operator><name pos:line="17" pos:column="60">offset<pos:position pos:line="17" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="68"/></decl_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">written<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">&lt;<pos:position pos:line="18" pos:column="21"/></operator> <literal type="number" pos:line="18" pos:column="19">0<pos:position pos:line="18" pos:column="20"/></literal></expr>)<pos:position pos:line="18" pos:column="21"/></condition><then pos:line="18" pos:column="21"> <block pos:line="18" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">79<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">DBG_IMPORTANT<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">HERE<pos:position pos:line="19" pos:column="39"/></name> <operator pos:line="19" pos:column="40">&lt;&lt;<pos:position pos:line="19" pos:column="48"/></operator> <literal type="string" pos:line="19" pos:column="43">"error: "<pos:position pos:line="19" pos:column="52"/></literal> <operator pos:line="19" pos:column="53">&lt;&lt;<pos:position pos:line="19" pos:column="61"/></operator> <call><name pos:line="19" pos:column="56">xstrerr<pos:position pos:line="19" pos:column="63"/></name><argument_list pos:line="19" pos:column="63">(<argument><expr><name pos:line="19" pos:column="64">errno<pos:position pos:line="19" pos:column="69"/></name></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">error_<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">=<pos:position pos:line="20" pos:column="17"/></operator> <literal type="boolean" pos:line="20" pos:column="18">true<pos:position pos:line="20" pos:column="22"/></literal></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then> <elseif pos:line="21" pos:column="7">else <if pos:line="21" pos:column="12">if <condition pos:line="21" pos:column="15">(<expr><cast type="static" pos:line="21" pos:column="16">static_cast<argument_list type="generic" pos:line="21" pos:column="27">&lt;<argument><expr><name pos:line="21" pos:column="28">size_t<pos:position pos:line="21" pos:column="34"/></name></expr></argument>&gt;<pos:position pos:line="21" pos:column="38"/></argument_list><argument_list pos:line="21" pos:column="35">(<argument><expr><name pos:line="21" pos:column="36">written<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></cast> <operator pos:line="21" pos:column="45">!=<pos:position pos:line="21" pos:column="47"/></operator> <name><name pos:line="21" pos:column="48">aRequest<pos:position pos:line="21" pos:column="56"/></name><operator pos:line="21" pos:column="56">-&gt;<pos:position pos:line="21" pos:column="61"/></operator><name pos:line="21" pos:column="58">len<pos:position pos:line="21" pos:column="61"/></name></name></expr>)<pos:position pos:line="21" pos:column="62"/></condition><then pos:line="21" pos:column="62"> <block pos:line="21" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">debugs<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="number" pos:line="22" pos:column="16">79<pos:position pos:line="22" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="20">DBG_IMPORTANT<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="35">HERE<pos:position pos:line="22" pos:column="39"/></name> <operator pos:line="22" pos:column="40">&lt;&lt;<pos:position pos:line="22" pos:column="48"/></operator> <literal type="string" pos:line="22" pos:column="43">"problem: "<pos:position pos:line="22" pos:column="54"/></literal> <operator pos:line="22" pos:column="55">&lt;&lt;<pos:position pos:line="22" pos:column="63"/></operator> <name pos:line="22" pos:column="58">written<pos:position pos:line="22" pos:column="65"/></name> <operator pos:line="22" pos:column="66">&lt;&lt;<pos:position pos:line="22" pos:column="74"/></operator> <literal type="string" pos:line="22" pos:column="69">" &lt; "<pos:position pos:line="22" pos:column="77"/></literal> <operator pos:line="22" pos:column="75">&lt;&lt;<pos:position pos:line="22" pos:column="83"/></operator> <name><name pos:line="22" pos:column="78">aRequest<pos:position pos:line="22" pos:column="86"/></name><operator pos:line="22" pos:column="86">-&gt;<pos:position pos:line="22" pos:column="91"/></operator><name pos:line="22" pos:column="88">len<pos:position pos:line="22" pos:column="91"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="93"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">error_<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <literal type="boolean" pos:line="23" pos:column="18">true<pos:position pos:line="23" pos:column="22"/></literal></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if></elseif></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">aRequest<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">free_func<pos:position pos:line="26" pos:column="28"/></name></name></expr>)<pos:position pos:line="26" pos:column="29"/></condition><then pos:line="26" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call pos:line="27" pos:column="9">(<name><name pos:line="27" pos:column="10">aRequest<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">-&gt;<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="20">free_func<pos:position pos:line="27" pos:column="29"/></name></name>)<argument_list pos:line="27" pos:column="30">(<argument><expr><cast type="const" pos:line="27" pos:column="31">const_cast<argument_list type="generic" pos:line="27" pos:column="41">&lt;<argument><expr><name pos:line="27" pos:column="42">char<pos:position pos:line="27" pos:column="46"/></name><operator pos:line="27" pos:column="46">*<pos:position pos:line="27" pos:column="47"/></operator></expr></argument>&gt;<pos:position pos:line="27" pos:column="51"/></argument_list><argument_list pos:line="27" pos:column="48">(<argument><expr><name><name pos:line="27" pos:column="49">aRequest<pos:position pos:line="27" pos:column="57"/></name><operator pos:line="27" pos:column="57">-&gt;<pos:position pos:line="27" pos:column="62"/></operator><name pos:line="27" pos:column="59">buf<pos:position pos:line="27" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="63"/></argument_list></cast></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="65"/></expr_stmt></block></then></if> <comment type="line" pos:line="27" pos:column="66">// broken API?</comment>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">!<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">error_<pos:position pos:line="29" pos:column="16"/></name></expr>)<pos:position pos:line="29" pos:column="17"/></condition><then pos:line="29" pos:column="17"> <block pos:line="29" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">79<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="30" pos:column="19">5<pos:position pos:line="30" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="22">HERE<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">&lt;&lt;<pos:position pos:line="30" pos:column="35"/></operator> <literal type="string" pos:line="30" pos:column="30">"wrote "<pos:position pos:line="30" pos:column="38"/></literal> <operator pos:line="30" pos:column="39">&lt;&lt;<pos:position pos:line="30" pos:column="47"/></operator> <name><name pos:line="30" pos:column="42">aRequest<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">-&gt;<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="52">len<pos:position pos:line="30" pos:column="55"/></name></name> <operator pos:line="30" pos:column="56">&lt;&lt;<pos:position pos:line="30" pos:column="64"/></operator> <literal type="string" pos:line="30" pos:column="59">" to FD "<pos:position pos:line="30" pos:column="68"/></literal> <operator pos:line="30" pos:column="69">&lt;&lt;<pos:position pos:line="30" pos:column="77"/></operator> <name pos:line="30" pos:column="72">fd<pos:position pos:line="30" pos:column="74"/></name> <operator pos:line="30" pos:column="75">&lt;&lt;<pos:position pos:line="30" pos:column="83"/></operator> <literal type="string" pos:line="30" pos:column="78">" at "<pos:position pos:line="30" pos:column="84"/></literal> <operator pos:line="30" pos:column="85">&lt;&lt;<pos:position pos:line="30" pos:column="93"/></operator> <name><name pos:line="30" pos:column="88">aRequest<pos:position pos:line="30" pos:column="96"/></name><operator pos:line="30" pos:column="96">-&gt;<pos:position pos:line="30" pos:column="101"/></operator><name pos:line="30" pos:column="98">offset<pos:position pos:line="30" pos:column="104"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="106"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then> <else pos:line="31" pos:column="7">else <block pos:line="31" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">doClose<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">()<pos:position pos:line="32" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></else></if>

    <decl_stmt><decl><type><specifier pos:line="35" pos:column="5">const<pos:position pos:line="35" pos:column="10"/></specifier> <name pos:line="35" pos:column="11">ssize_t<pos:position pos:line="35" pos:column="18"/></name></type> <name pos:line="35" pos:column="19">rlen<pos:position pos:line="35" pos:column="23"/></name> <init pos:line="35" pos:column="24">= <expr><ternary><condition><expr><name pos:line="35" pos:column="26">error_<pos:position pos:line="35" pos:column="32"/></name></expr> ?<pos:position pos:line="35" pos:column="34"/></condition><then pos:line="35" pos:column="34"> <expr><literal type="number" pos:line="35" pos:column="35">0<pos:position pos:line="35" pos:column="36"/></literal></expr> <pos:position pos:line="35" pos:column="37"/></then><else pos:line="35" pos:column="37">: <expr><operator pos:line="35" pos:column="39">(<pos:position pos:line="35" pos:column="40"/></operator><name pos:line="35" pos:column="40">ssize_t<pos:position pos:line="35" pos:column="47"/></name><operator pos:line="35" pos:column="47">)<pos:position pos:line="35" pos:column="48"/></operator><name><name pos:line="35" pos:column="48">aRequest<pos:position pos:line="35" pos:column="56"/></name><operator pos:line="35" pos:column="56">-&gt;<pos:position pos:line="35" pos:column="61"/></operator><name pos:line="35" pos:column="58">len<pos:position pos:line="35" pos:column="61"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="35" pos:column="62"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="36" pos:column="5">const<pos:position pos:line="36" pos:column="10"/></specifier> <name pos:line="36" pos:column="11">int<pos:position pos:line="36" pos:column="14"/></name></type> <name pos:line="36" pos:column="15">errflag<pos:position pos:line="36" pos:column="22"/></name> <init pos:line="36" pos:column="23">= <expr><ternary><condition><expr><name pos:line="36" pos:column="25">error_<pos:position pos:line="36" pos:column="31"/></name></expr> ?<pos:position pos:line="36" pos:column="33"/></condition><then pos:line="36" pos:column="33"> <expr><name pos:line="36" pos:column="34">DISK_ERROR<pos:position pos:line="36" pos:column="44"/></name></expr> <pos:position pos:line="36" pos:column="45"/></then><else pos:line="36" pos:column="45">:<expr><name pos:line="36" pos:column="46">DISK_OK<pos:position pos:line="36" pos:column="53"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="36" pos:column="54"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="37" pos:column="5">ioRequestor<pos:position pos:line="37" pos:column="16"/></name><operator pos:line="37" pos:column="16">-&gt;<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="18">writeCompleted<pos:position pos:line="37" pos:column="32"/></name></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">errflag<pos:position pos:line="37" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="42">rlen<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">aRequest<pos:position pos:line="37" pos:column="56"/></name></expr></argument>)<pos:position pos:line="37" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="58"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
