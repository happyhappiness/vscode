<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2991_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">setPublicKey<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">()<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">StoreEntry<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">e2<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name pos:line="4" pos:column="22">NULL<pos:position pos:line="4" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">cache_key<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">newkey<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">key<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">&amp;&amp;<pos:position pos:line="7" pos:column="23"/></operator> <operator pos:line="7" pos:column="16">!<pos:position pos:line="7" pos:column="17"/></operator><call><name pos:line="7" pos:column="17">EBIT_TEST<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">flags<pos:position pos:line="7" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="34">KEY_PRIVATE<pos:position pos:line="7" pos:column="45"/></name></expr></argument>)<pos:position pos:line="7" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="47"/></condition><then pos:line="7" pos:column="47">
        <block type="pseudo"><return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return></block></then></if>                 <comment type="block" pos:line="8" pos:column="33">/* is already public */</comment>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name pos:line="10" pos:column="12">mem_obj<pos:position pos:line="10" pos:column="19"/></name></expr></argument>)<pos:position pos:line="10" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="12" pos:column="5">/*
     * We can't make RELEASE_REQUEST objects public.  Depending on
     * when RELEASE_REQUEST gets set, we might not be swapping out
     * the object.  If we're not swapping out, then subsequent
     * store clients won't be able to access object data which has
     * been freed from memory.
     *
     * If RELEASE_REQUEST is set, then ENTRY_CACHABLE should not
     * be set, and StoreEntry::setPublicKey() should not be called.
     */</comment>
<cpp:if pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">if<pos:position pos:line="22" pos:column="4"/></cpp:directive> <expr><name pos:line="22" pos:column="5">MORE_DEBUG_OUTPUT<pos:position pos:line="22" pos:column="22"/></name></expr></cpp:if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><call><name pos:line="24" pos:column="9">EBIT_TEST<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">flags<pos:position pos:line="24" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="26">RELEASE_REQUEST<pos:position pos:line="24" pos:column="41"/></name></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="43"/></condition><then pos:line="24" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">20<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">DBG_IMPORTANT<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="35">"assertion failed: RELEASE key "<pos:position pos:line="25" pos:column="67"/></literal> <operator pos:line="25" pos:column="68">&lt;&lt;<pos:position pos:line="25" pos:column="76"/></operator> <name pos:line="25" pos:column="71">key<pos:position pos:line="25" pos:column="74"/></name> <operator pos:line="25" pos:column="75">&lt;&lt;<pos:position pos:line="25" pos:column="83"/></operator> <literal type="string" pos:line="25" pos:column="78">", url "<pos:position pos:line="25" pos:column="86"/></literal> <operator pos:line="25" pos:column="87">&lt;&lt;<pos:position pos:line="25" pos:column="95"/></operator> <name><name pos:line="25" pos:column="90">mem_obj<pos:position pos:line="25" pos:column="97"/></name><operator pos:line="25" pos:column="97">-&gt;<pos:position pos:line="25" pos:column="102"/></operator><name pos:line="25" pos:column="99">url<pos:position pos:line="25" pos:column="102"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="104"/></expr_stmt></block></then></if>

<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">assert<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><operator pos:line="29" pos:column="12">!<pos:position pos:line="29" pos:column="13"/></operator><call><name pos:line="29" pos:column="13">EBIT_TEST<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">flags<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="30">RELEASE_REQUEST<pos:position pos:line="29" pos:column="45"/></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="48"/></expr_stmt>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">mem_obj<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">request<pos:position pos:line="31" pos:column="25"/></name></name></expr>)<pos:position pos:line="31" pos:column="26"/></condition><then pos:line="31" pos:column="26"> <block pos:line="31" pos:column="27">{
        <decl_stmt><decl><type><name pos:line="32" pos:column="9">HttpRequest<pos:position pos:line="32" pos:column="20"/></name> <modifier pos:line="32" pos:column="21">*<pos:position pos:line="32" pos:column="22"/></modifier></type><name pos:line="32" pos:column="22">request<pos:position pos:line="32" pos:column="29"/></name> <init pos:line="32" pos:column="30">= <expr><name><name pos:line="32" pos:column="32">mem_obj<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">-&gt;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="41">request<pos:position pos:line="32" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="32" pos:column="49"/></decl_stmt>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">!<pos:position pos:line="34" pos:column="14"/></operator><name><name pos:line="34" pos:column="14">mem_obj<pos:position pos:line="34" pos:column="21"/></name><operator pos:line="34" pos:column="21">-&gt;<pos:position pos:line="34" pos:column="26"/></operator><name pos:line="34" pos:column="23">vary_headers<pos:position pos:line="34" pos:column="35"/></name></name></expr>)<pos:position pos:line="34" pos:column="36"/></condition><then pos:line="34" pos:column="36"> <block pos:line="34" pos:column="37">{
            <comment type="block" pos:line="35" pos:column="13">/* First handle the case where the object no longer varies */</comment>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">safe_free<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name><name pos:line="36" pos:column="23">request<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">-&gt;<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="32">vary_headers<pos:position pos:line="36" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then> <else pos:line="37" pos:column="11">else <block pos:line="37" pos:column="16">{
            <if pos:line="38" pos:column="13">if <condition pos:line="38" pos:column="16">(<expr><name><name pos:line="38" pos:column="17">request<pos:position pos:line="38" pos:column="24"/></name><operator pos:line="38" pos:column="24">-&gt;<pos:position pos:line="38" pos:column="29"/></operator><name pos:line="38" pos:column="26">vary_headers<pos:position pos:line="38" pos:column="38"/></name></name> <operator pos:line="38" pos:column="39">&amp;&amp;<pos:position pos:line="38" pos:column="49"/></operator> <call><name pos:line="38" pos:column="42">strcmp<pos:position pos:line="38" pos:column="48"/></name><argument_list pos:line="38" pos:column="48">(<argument><expr><name><name pos:line="38" pos:column="49">request<pos:position pos:line="38" pos:column="56"/></name><operator pos:line="38" pos:column="56">-&gt;<pos:position pos:line="38" pos:column="61"/></operator><name pos:line="38" pos:column="58">vary_headers<pos:position pos:line="38" pos:column="70"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="72">mem_obj<pos:position pos:line="38" pos:column="79"/></name><operator pos:line="38" pos:column="79">-&gt;<pos:position pos:line="38" pos:column="84"/></operator><name pos:line="38" pos:column="81">vary_headers<pos:position pos:line="38" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="94"/></argument_list></call> <operator pos:line="38" pos:column="95">!=<pos:position pos:line="38" pos:column="97"/></operator> <literal type="number" pos:line="38" pos:column="98">0<pos:position pos:line="38" pos:column="99"/></literal></expr>)<pos:position pos:line="38" pos:column="100"/></condition><then pos:line="38" pos:column="100"> <block pos:line="38" pos:column="101">{
                <comment type="block" pos:line="39" pos:column="17">/* Oops.. the variance has changed. Kill the base object
                 * to record the new variance key
                 */</comment>
                <expr_stmt><expr><call><name pos:line="42" pos:column="17">safe_free<pos:position pos:line="42" pos:column="26"/></name><argument_list pos:line="42" pos:column="26">(<argument><expr><name><name pos:line="42" pos:column="27">request<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">-&gt;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="36">vary_headers<pos:position pos:line="42" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="50"/></expr_stmt>       <comment type="block" pos:line="42" pos:column="57">/* free old "bad" variance key */</comment>
                <decl_stmt><decl><type><name pos:line="43" pos:column="17">StoreEntry<pos:position pos:line="43" pos:column="27"/></name> <modifier pos:line="43" pos:column="28">*<pos:position pos:line="43" pos:column="29"/></modifier></type><name pos:line="43" pos:column="29">pe<pos:position pos:line="43" pos:column="31"/></name> <init pos:line="43" pos:column="32">= <expr><call><name pos:line="43" pos:column="34">storeGetPublic<pos:position pos:line="43" pos:column="48"/></name><argument_list pos:line="43" pos:column="48">(<argument><expr><name><name pos:line="43" pos:column="49">mem_obj<pos:position pos:line="43" pos:column="56"/></name><operator pos:line="43" pos:column="56">-&gt;<pos:position pos:line="43" pos:column="61"/></operator><name pos:line="43" pos:column="58">url<pos:position pos:line="43" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="63">mem_obj<pos:position pos:line="43" pos:column="70"/></name><operator pos:line="43" pos:column="70">-&gt;<pos:position pos:line="43" pos:column="75"/></operator><name pos:line="43" pos:column="72">method<pos:position pos:line="43" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="43" pos:column="80"/></decl_stmt>

                <if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><name pos:line="45" pos:column="21">pe<pos:position pos:line="45" pos:column="23"/></name></expr>)<pos:position pos:line="45" pos:column="24"/></condition><then pos:line="45" pos:column="24">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="46" pos:column="21">pe<pos:position pos:line="46" pos:column="23"/></name><operator pos:line="46" pos:column="23">-&gt;<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="25">release<pos:position pos:line="46" pos:column="32"/></name></name><argument_list pos:line="46" pos:column="32">()<pos:position pos:line="46" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt></block></then></if>
            }<pos:position pos:line="47" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="49" pos:column="13">/* Make sure the request knows the variance status */</comment>
            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><operator pos:line="50" pos:column="17">!<pos:position pos:line="50" pos:column="18"/></operator><name><name pos:line="50" pos:column="18">request<pos:position pos:line="50" pos:column="25"/></name><operator pos:line="50" pos:column="25">-&gt;<pos:position pos:line="50" pos:column="30"/></operator><name pos:line="50" pos:column="27">vary_headers<pos:position pos:line="50" pos:column="39"/></name></name></expr>)<pos:position pos:line="50" pos:column="40"/></condition><then pos:line="50" pos:column="40"> <block pos:line="50" pos:column="41">{
                <decl_stmt><decl><type><specifier pos:line="51" pos:column="17">const<pos:position pos:line="51" pos:column="22"/></specifier> <name pos:line="51" pos:column="23">char<pos:position pos:line="51" pos:column="27"/></name> <modifier pos:line="51" pos:column="28">*<pos:position pos:line="51" pos:column="29"/></modifier></type><name pos:line="51" pos:column="29">vary<pos:position pos:line="51" pos:column="33"/></name> <init pos:line="51" pos:column="34">= <expr><call><name pos:line="51" pos:column="36">httpMakeVaryMark<pos:position pos:line="51" pos:column="52"/></name><argument_list pos:line="51" pos:column="52">(<argument><expr><name pos:line="51" pos:column="53">request<pos:position pos:line="51" pos:column="60"/></name></expr></argument>, <argument><expr><call><name><name pos:line="51" pos:column="62">mem_obj<pos:position pos:line="51" pos:column="69"/></name><operator pos:line="51" pos:column="69">-&gt;<pos:position pos:line="51" pos:column="74"/></operator><name pos:line="51" pos:column="71">getReply<pos:position pos:line="51" pos:column="79"/></name></name><argument_list pos:line="51" pos:column="79">()<pos:position pos:line="51" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="51" pos:column="83"/></decl_stmt>

                <if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><name pos:line="53" pos:column="21">vary<pos:position pos:line="53" pos:column="25"/></name></expr>)<pos:position pos:line="53" pos:column="26"/></condition><then pos:line="53" pos:column="26">
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="21">request<pos:position pos:line="54" pos:column="28"/></name><operator pos:line="54" pos:column="28">-&gt;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="30">vary_headers<pos:position pos:line="54" pos:column="42"/></name></name> <operator pos:line="54" pos:column="43">=<pos:position pos:line="54" pos:column="44"/></operator> <call><name pos:line="54" pos:column="45">xstrdup<pos:position pos:line="54" pos:column="52"/></name><argument_list pos:line="54" pos:column="52">(<argument><expr><name pos:line="54" pos:column="53">vary<pos:position pos:line="54" pos:column="57"/></name></expr></argument>)<pos:position pos:line="54" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="59"/></expr_stmt></block></then></if>
            }<pos:position pos:line="55" pos:column="14"/></block></then></if>
        }<pos:position pos:line="56" pos:column="10"/></block></else></if>

        <comment type="line" pos:line="58" pos:column="9">// TODO: storeGetPublic() calls below may create unlocked entries.</comment>
        <comment type="line" pos:line="59" pos:column="9">// We should add/use storeHas() API or lock/unlock those entries.</comment>
        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name><name pos:line="60" pos:column="13">mem_obj<pos:position pos:line="60" pos:column="20"/></name><operator pos:line="60" pos:column="20">-&gt;<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="22">vary_headers<pos:position pos:line="60" pos:column="34"/></name></name> <operator pos:line="60" pos:column="35">&amp;&amp;<pos:position pos:line="60" pos:column="45"/></operator> <operator pos:line="60" pos:column="38">!<pos:position pos:line="60" pos:column="39"/></operator><call><name pos:line="60" pos:column="39">storeGetPublic<pos:position pos:line="60" pos:column="53"/></name><argument_list pos:line="60" pos:column="53">(<argument><expr><name><name pos:line="60" pos:column="54">mem_obj<pos:position pos:line="60" pos:column="61"/></name><operator pos:line="60" pos:column="61">-&gt;<pos:position pos:line="60" pos:column="66"/></operator><name pos:line="60" pos:column="63">url<pos:position pos:line="60" pos:column="66"/></name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="68">mem_obj<pos:position pos:line="60" pos:column="75"/></name><operator pos:line="60" pos:column="75">-&gt;<pos:position pos:line="60" pos:column="80"/></operator><name pos:line="60" pos:column="77">method<pos:position pos:line="60" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="84"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="85"/></condition><then pos:line="60" pos:column="85"> <block pos:line="60" pos:column="86">{
            <comment type="block" pos:line="61" pos:column="13">/* Create "vary" base object */</comment>
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">String<pos:position pos:line="62" pos:column="19"/></name></type> <name pos:line="62" pos:column="20">vary<pos:position pos:line="62" pos:column="24"/></name></decl>;<pos:position pos:line="62" pos:column="25"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">StoreEntry<pos:position pos:line="63" pos:column="23"/></name> <modifier pos:line="63" pos:column="24">*<pos:position pos:line="63" pos:column="25"/></modifier></type><name pos:line="63" pos:column="25">pe<pos:position pos:line="63" pos:column="27"/></name> <init pos:line="63" pos:column="28">= <expr><call><name pos:line="63" pos:column="30">storeCreateEntry<pos:position pos:line="63" pos:column="46"/></name><argument_list pos:line="63" pos:column="46">(<argument><expr><name><name pos:line="63" pos:column="47">mem_obj<pos:position pos:line="63" pos:column="54"/></name><operator pos:line="63" pos:column="54">-&gt;<pos:position pos:line="63" pos:column="59"/></operator><name pos:line="63" pos:column="56">url<pos:position pos:line="63" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="61">mem_obj<pos:position pos:line="63" pos:column="68"/></name><operator pos:line="63" pos:column="68">-&gt;<pos:position pos:line="63" pos:column="73"/></operator><name pos:line="63" pos:column="70">log_url<pos:position pos:line="63" pos:column="77"/></name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="79">request<pos:position pos:line="63" pos:column="86"/></name><operator pos:line="63" pos:column="86">-&gt;<pos:position pos:line="63" pos:column="91"/></operator><name pos:line="63" pos:column="88">flags<pos:position pos:line="63" pos:column="93"/></name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="95">request<pos:position pos:line="63" pos:column="102"/></name><operator pos:line="63" pos:column="102">-&gt;<pos:position pos:line="63" pos:column="107"/></operator><name pos:line="63" pos:column="104">method<pos:position pos:line="63" pos:column="110"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="111"/></argument_list></call></expr></init></decl>;<pos:position pos:line="63" pos:column="112"/></decl_stmt>
            <comment type="block" pos:line="64" pos:column="13">/* We are allowed to do this typecast */</comment>
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">HttpReply<pos:position pos:line="65" pos:column="22"/></name> <modifier pos:line="65" pos:column="23">*<pos:position pos:line="65" pos:column="24"/></modifier></type><name pos:line="65" pos:column="24">rep<pos:position pos:line="65" pos:column="27"/></name> <init pos:line="65" pos:column="28">= <expr><operator pos:line="65" pos:column="30">new<pos:position pos:line="65" pos:column="33"/></operator> <name pos:line="65" pos:column="34">HttpReply<pos:position pos:line="65" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="65" pos:column="44"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="66" pos:column="13">rep<pos:position pos:line="66" pos:column="16"/></name><operator pos:line="66" pos:column="16">-&gt;<pos:position pos:line="66" pos:column="21"/></operator><name pos:line="66" pos:column="18">setHeaders<pos:position pos:line="66" pos:column="28"/></name></name><argument_list pos:line="66" pos:column="28">(<argument><expr><name pos:line="66" pos:column="29">HTTP_OK<pos:position pos:line="66" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="38">"Internal marker object"<pos:position pos:line="66" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="64">"x-squid-internal/vary"<pos:position pos:line="66" pos:column="87"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="89">0<pos:position pos:line="66" pos:column="90"/></literal></expr></argument>, <argument><expr><operator pos:line="66" pos:column="92">-<pos:position pos:line="66" pos:column="93"/></operator><literal type="number" pos:line="66" pos:column="93">1<pos:position pos:line="66" pos:column="94"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="96">squid_curtime<pos:position pos:line="66" pos:column="109"/></name> <operator pos:line="66" pos:column="110">+<pos:position pos:line="66" pos:column="111"/></operator> <literal type="number" pos:line="66" pos:column="112">100000<pos:position pos:line="66" pos:column="118"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="120"/></expr_stmt>
            <expr_stmt><expr><name pos:line="67" pos:column="13">vary<pos:position pos:line="67" pos:column="17"/></name> <operator pos:line="67" pos:column="18">=<pos:position pos:line="67" pos:column="19"/></operator> <call><name><name pos:line="67" pos:column="20">mem_obj<pos:position pos:line="67" pos:column="27"/></name><operator pos:line="67" pos:column="27">-&gt;<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="29">getReply<pos:position pos:line="67" pos:column="37"/></name></name><argument_list pos:line="67" pos:column="37">()<pos:position pos:line="67" pos:column="39"/></argument_list></call><operator pos:line="67" pos:column="39">-&gt;<pos:position pos:line="67" pos:column="44"/></operator><call><name><name pos:line="67" pos:column="41">header<pos:position pos:line="67" pos:column="47"/></name><operator pos:line="67" pos:column="47">.<pos:position pos:line="67" pos:column="48"/></operator><name pos:line="67" pos:column="48">getList<pos:position pos:line="67" pos:column="55"/></name></name><argument_list pos:line="67" pos:column="55">(<argument><expr><name pos:line="67" pos:column="56">HDR_VARY<pos:position pos:line="67" pos:column="64"/></name></expr></argument>)<pos:position pos:line="67" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="66"/></expr_stmt>

            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><call><name><name pos:line="69" pos:column="17">vary<pos:position pos:line="69" pos:column="21"/></name><operator pos:line="69" pos:column="21">.<pos:position pos:line="69" pos:column="22"/></operator><name pos:line="69" pos:column="22">size<pos:position pos:line="69" pos:column="26"/></name></name><argument_list pos:line="69" pos:column="26">()<pos:position pos:line="69" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="69" pos:column="29"/></condition><then pos:line="69" pos:column="29"> <block pos:line="69" pos:column="30">{
                <comment type="block" pos:line="70" pos:column="17">/* Again, we own this structure layout */</comment>
                <expr_stmt><expr><call><name><name pos:line="71" pos:column="17">rep<pos:position pos:line="71" pos:column="20"/></name><operator pos:line="71" pos:column="20">-&gt;<pos:position pos:line="71" pos:column="25"/></operator><name pos:line="71" pos:column="22">header<pos:position pos:line="71" pos:column="28"/></name><operator pos:line="71" pos:column="28">.<pos:position pos:line="71" pos:column="29"/></operator><name pos:line="71" pos:column="29">putStr<pos:position pos:line="71" pos:column="35"/></name></name><argument_list pos:line="71" pos:column="35">(<argument><expr><name pos:line="71" pos:column="36">HDR_VARY<pos:position pos:line="71" pos:column="44"/></name></expr></argument>, <argument><expr><call><name><name pos:line="71" pos:column="46">vary<pos:position pos:line="71" pos:column="50"/></name><operator pos:line="71" pos:column="50">.<pos:position pos:line="71" pos:column="51"/></operator><name pos:line="71" pos:column="51">termedBuf<pos:position pos:line="71" pos:column="60"/></name></name><argument_list pos:line="71" pos:column="60">()<pos:position pos:line="71" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="71" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="64"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="72" pos:column="17">vary<pos:position pos:line="72" pos:column="21"/></name><operator pos:line="72" pos:column="21">.<pos:position pos:line="72" pos:column="22"/></operator><name pos:line="72" pos:column="22">clean<pos:position pos:line="72" pos:column="27"/></name></name><argument_list pos:line="72" pos:column="27">()<pos:position pos:line="72" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="73" pos:column="14"/></block></then></if>

<cpp:if pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">if<pos:position pos:line="75" pos:column="4"/></cpp:directive> <expr><name pos:line="75" pos:column="5">X_ACCELERATOR_VARY<pos:position pos:line="75" pos:column="23"/></name></expr></cpp:if>
            <expr_stmt><expr><name pos:line="76" pos:column="13">vary<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <call><name><name pos:line="76" pos:column="20">mem_obj<pos:position pos:line="76" pos:column="27"/></name><operator pos:line="76" pos:column="27">-&gt;<pos:position pos:line="76" pos:column="32"/></operator><name pos:line="76" pos:column="29">getReply<pos:position pos:line="76" pos:column="37"/></name></name><argument_list pos:line="76" pos:column="37">()<pos:position pos:line="76" pos:column="39"/></argument_list></call><operator pos:line="76" pos:column="39">-&gt;<pos:position pos:line="76" pos:column="44"/></operator><call><name><name pos:line="76" pos:column="41">header<pos:position pos:line="76" pos:column="47"/></name><operator pos:line="76" pos:column="47">.<pos:position pos:line="76" pos:column="48"/></operator><name pos:line="76" pos:column="48">getList<pos:position pos:line="76" pos:column="55"/></name></name><argument_list pos:line="76" pos:column="55">(<argument><expr><name pos:line="76" pos:column="56">HDR_X_ACCELERATOR_VARY<pos:position pos:line="76" pos:column="78"/></name></expr></argument>)<pos:position pos:line="76" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="80"/></expr_stmt>

            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><call><name><name pos:line="78" pos:column="17">vary<pos:position pos:line="78" pos:column="21"/></name><operator pos:line="78" pos:column="21">.<pos:position pos:line="78" pos:column="22"/></operator><name pos:line="78" pos:column="22">defined<pos:position pos:line="78" pos:column="29"/></name></name><argument_list pos:line="78" pos:column="29">()<pos:position pos:line="78" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="32"/></condition><then pos:line="78" pos:column="32"> <block pos:line="78" pos:column="33">{
                <comment type="block" pos:line="79" pos:column="17">/* Again, we own this structure layout */</comment>
                <expr_stmt><expr><call><name><name pos:line="80" pos:column="17">rep<pos:position pos:line="80" pos:column="20"/></name><operator pos:line="80" pos:column="20">-&gt;<pos:position pos:line="80" pos:column="25"/></operator><name pos:line="80" pos:column="22">header<pos:position pos:line="80" pos:column="28"/></name><operator pos:line="80" pos:column="28">.<pos:position pos:line="80" pos:column="29"/></operator><name pos:line="80" pos:column="29">putStr<pos:position pos:line="80" pos:column="35"/></name></name><argument_list pos:line="80" pos:column="35">(<argument><expr><name pos:line="80" pos:column="36">HDR_X_ACCELERATOR_VARY<pos:position pos:line="80" pos:column="58"/></name></expr></argument>, <argument><expr><call><name><name pos:line="80" pos:column="60">vary<pos:position pos:line="80" pos:column="64"/></name><operator pos:line="80" pos:column="64">.<pos:position pos:line="80" pos:column="65"/></operator><name pos:line="80" pos:column="65">termedBuf<pos:position pos:line="80" pos:column="74"/></name></name><argument_list pos:line="80" pos:column="74">()<pos:position pos:line="80" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="78"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="81" pos:column="17">vary<pos:position pos:line="81" pos:column="21"/></name><operator pos:line="81" pos:column="21">.<pos:position pos:line="81" pos:column="22"/></operator><name pos:line="81" pos:column="22">clean<pos:position pos:line="81" pos:column="27"/></name></name><argument_list pos:line="81" pos:column="27">()<pos:position pos:line="81" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="82" pos:column="14"/></block></then></if>

<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name><name pos:line="85" pos:column="13">pe<pos:position pos:line="85" pos:column="15"/></name><operator pos:line="85" pos:column="15">-&gt;<pos:position pos:line="85" pos:column="20"/></operator><name pos:line="85" pos:column="17">replaceHttpReply<pos:position pos:line="85" pos:column="33"/></name></name><argument_list pos:line="85" pos:column="33">(<argument><expr><name pos:line="85" pos:column="34">rep<pos:position pos:line="85" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="85" pos:column="39">false<pos:position pos:line="85" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="46"/></expr_stmt> <comment type="line" pos:line="85" pos:column="47">// no write until key is public</comment>

            <expr_stmt><expr><call><name><name pos:line="87" pos:column="13">pe<pos:position pos:line="87" pos:column="15"/></name><operator pos:line="87" pos:column="15">-&gt;<pos:position pos:line="87" pos:column="20"/></operator><name pos:line="87" pos:column="17">timestampsSet<pos:position pos:line="87" pos:column="30"/></name></name><argument_list pos:line="87" pos:column="30">()<pos:position pos:line="87" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="33"/></expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">pe<pos:position pos:line="89" pos:column="15"/></name><operator pos:line="89" pos:column="15">-&gt;<pos:position pos:line="89" pos:column="20"/></operator><name pos:line="89" pos:column="17">makePublic<pos:position pos:line="89" pos:column="27"/></name></name><argument_list pos:line="89" pos:column="27">()<pos:position pos:line="89" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="30"/></expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="91" pos:column="13">pe<pos:position pos:line="91" pos:column="15"/></name><operator pos:line="91" pos:column="15">-&gt;<pos:position pos:line="91" pos:column="20"/></operator><name pos:line="91" pos:column="17">startWriting<pos:position pos:line="91" pos:column="29"/></name></name><argument_list pos:line="91" pos:column="29">()<pos:position pos:line="91" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="32"/></expr_stmt> <comment type="line" pos:line="91" pos:column="33">// after makePublic()</comment>

            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">pe<pos:position pos:line="93" pos:column="15"/></name><operator pos:line="93" pos:column="15">-&gt;<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="17">complete<pos:position pos:line="93" pos:column="25"/></name></name><argument_list pos:line="93" pos:column="25">()<pos:position pos:line="93" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="28"/></expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="95" pos:column="13">pe<pos:position pos:line="95" pos:column="15"/></name><operator pos:line="95" pos:column="15">-&gt;<pos:position pos:line="95" pos:column="20"/></operator><name pos:line="95" pos:column="17">unlock<pos:position pos:line="95" pos:column="23"/></name></name><argument_list pos:line="95" pos:column="23">()<pos:position pos:line="95" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="96" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="98" pos:column="9">newkey<pos:position pos:line="98" pos:column="15"/></name> <operator pos:line="98" pos:column="16">=<pos:position pos:line="98" pos:column="17"/></operator> <call><name pos:line="98" pos:column="18">storeKeyPublicByRequest<pos:position pos:line="98" pos:column="41"/></name><argument_list pos:line="98" pos:column="41">(<argument><expr><name><name pos:line="98" pos:column="42">mem_obj<pos:position pos:line="98" pos:column="49"/></name><operator pos:line="98" pos:column="49">-&gt;<pos:position pos:line="98" pos:column="54"/></operator><name pos:line="98" pos:column="51">request<pos:position pos:line="98" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="98" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="99" pos:column="6"/></block></then> <else pos:line="99" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="100" pos:column="9">newkey<pos:position pos:line="100" pos:column="15"/></name> <operator pos:line="100" pos:column="16">=<pos:position pos:line="100" pos:column="17"/></operator> <call><name pos:line="100" pos:column="18">storeKeyPublic<pos:position pos:line="100" pos:column="32"/></name><argument_list pos:line="100" pos:column="32">(<argument><expr><name><name pos:line="100" pos:column="33">mem_obj<pos:position pos:line="100" pos:column="40"/></name><operator pos:line="100" pos:column="40">-&gt;<pos:position pos:line="100" pos:column="45"/></operator><name pos:line="100" pos:column="42">url<pos:position pos:line="100" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="47">mem_obj<pos:position pos:line="100" pos:column="54"/></name><operator pos:line="100" pos:column="54">-&gt;<pos:position pos:line="100" pos:column="59"/></operator><name pos:line="100" pos:column="56">method<pos:position pos:line="100" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="64"/></expr_stmt></block></else></if>

    <if pos:line="102" pos:column="5">if <condition pos:line="102" pos:column="8">(<expr><operator pos:line="102" pos:column="9">(<pos:position pos:line="102" pos:column="10"/></operator><name pos:line="102" pos:column="10">e2<pos:position pos:line="102" pos:column="12"/></name> <operator pos:line="102" pos:column="13">=<pos:position pos:line="102" pos:column="14"/></operator> <operator pos:line="102" pos:column="15">(<pos:position pos:line="102" pos:column="16"/></operator><name pos:line="102" pos:column="16">StoreEntry<pos:position pos:line="102" pos:column="26"/></name> <operator pos:line="102" pos:column="27">*<pos:position pos:line="102" pos:column="28"/></operator><operator pos:line="102" pos:column="28">)<pos:position pos:line="102" pos:column="29"/></operator> <call><name pos:line="102" pos:column="30">hash_lookup<pos:position pos:line="102" pos:column="41"/></name><argument_list pos:line="102" pos:column="41">(<argument><expr><name pos:line="102" pos:column="42">store_table<pos:position pos:line="102" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="55">newkey<pos:position pos:line="102" pos:column="61"/></name></expr></argument>)<pos:position pos:line="102" pos:column="62"/></argument_list></call><operator pos:line="102" pos:column="62">)<pos:position pos:line="102" pos:column="63"/></operator></expr>)<pos:position pos:line="102" pos:column="64"/></condition><then pos:line="102" pos:column="64"> <block pos:line="102" pos:column="65">{
        <expr_stmt><expr><call><name pos:line="103" pos:column="9">debugs<pos:position pos:line="103" pos:column="15"/></name><argument_list pos:line="103" pos:column="15">(<argument><expr><literal type="number" pos:line="103" pos:column="16">20<pos:position pos:line="103" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="20">3<pos:position pos:line="103" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="103" pos:column="23">"StoreEntry::setPublicKey: Making old '"<pos:position pos:line="103" pos:column="63"/></literal> <operator pos:line="103" pos:column="64">&lt;&lt;<pos:position pos:line="103" pos:column="72"/></operator> <name><name pos:line="103" pos:column="67">mem_obj<pos:position pos:line="103" pos:column="74"/></name><operator pos:line="103" pos:column="74">-&gt;<pos:position pos:line="103" pos:column="79"/></operator><name pos:line="103" pos:column="76">url<pos:position pos:line="103" pos:column="79"/></name></name> <operator pos:line="103" pos:column="80">&lt;&lt;<pos:position pos:line="103" pos:column="88"/></operator> <literal type="string" pos:line="103" pos:column="83">"' private."<pos:position pos:line="103" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="97"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="104" pos:column="9">e2<pos:position pos:line="104" pos:column="11"/></name><operator pos:line="104" pos:column="11">-&gt;<pos:position pos:line="104" pos:column="16"/></operator><name pos:line="104" pos:column="13">setPrivateKey<pos:position pos:line="104" pos:column="26"/></name></name><argument_list pos:line="104" pos:column="26">()<pos:position pos:line="104" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="105" pos:column="9">e2<pos:position pos:line="105" pos:column="11"/></name><operator pos:line="105" pos:column="11">-&gt;<pos:position pos:line="105" pos:column="16"/></operator><name pos:line="105" pos:column="13">release<pos:position pos:line="105" pos:column="20"/></name></name><argument_list pos:line="105" pos:column="20">()<pos:position pos:line="105" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="23"/></expr_stmt>

        <if pos:line="107" pos:column="9">if <condition pos:line="107" pos:column="12">(<expr><name><name pos:line="107" pos:column="13">mem_obj<pos:position pos:line="107" pos:column="20"/></name><operator pos:line="107" pos:column="20">-&gt;<pos:position pos:line="107" pos:column="25"/></operator><name pos:line="107" pos:column="22">request<pos:position pos:line="107" pos:column="29"/></name></name></expr>)<pos:position pos:line="107" pos:column="30"/></condition><then pos:line="107" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><name pos:line="108" pos:column="13">newkey<pos:position pos:line="108" pos:column="19"/></name> <operator pos:line="108" pos:column="20">=<pos:position pos:line="108" pos:column="21"/></operator> <call><name pos:line="108" pos:column="22">storeKeyPublicByRequest<pos:position pos:line="108" pos:column="45"/></name><argument_list pos:line="108" pos:column="45">(<argument><expr><name><name pos:line="108" pos:column="46">mem_obj<pos:position pos:line="108" pos:column="53"/></name><operator pos:line="108" pos:column="53">-&gt;<pos:position pos:line="108" pos:column="58"/></operator><name pos:line="108" pos:column="55">request<pos:position pos:line="108" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="108" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="64"/></expr_stmt></block></then>
        <else pos:line="109" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="110" pos:column="13">newkey<pos:position pos:line="110" pos:column="19"/></name> <operator pos:line="110" pos:column="20">=<pos:position pos:line="110" pos:column="21"/></operator> <call><name pos:line="110" pos:column="22">storeKeyPublic<pos:position pos:line="110" pos:column="36"/></name><argument_list pos:line="110" pos:column="36">(<argument><expr><name><name pos:line="110" pos:column="37">mem_obj<pos:position pos:line="110" pos:column="44"/></name><operator pos:line="110" pos:column="44">-&gt;<pos:position pos:line="110" pos:column="49"/></operator><name pos:line="110" pos:column="46">url<pos:position pos:line="110" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="51">mem_obj<pos:position pos:line="110" pos:column="58"/></name><operator pos:line="110" pos:column="58">-&gt;<pos:position pos:line="110" pos:column="63"/></operator><name pos:line="110" pos:column="60">method<pos:position pos:line="110" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="68"/></expr_stmt></block></else></if>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if>

    <if pos:line="113" pos:column="5">if <condition pos:line="113" pos:column="8">(<expr><name pos:line="113" pos:column="9">key<pos:position pos:line="113" pos:column="12"/></name></expr>)<pos:position pos:line="113" pos:column="13"/></condition><then pos:line="113" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="114" pos:column="9">hashDelete<pos:position pos:line="114" pos:column="19"/></name><argument_list pos:line="114" pos:column="19">()<pos:position pos:line="114" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="22"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="116" pos:column="5">EBIT_CLR<pos:position pos:line="116" pos:column="13"/></name><argument_list pos:line="116" pos:column="13">(<argument><expr><name pos:line="116" pos:column="14">flags<pos:position pos:line="116" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="21">KEY_PRIVATE<pos:position pos:line="116" pos:column="32"/></name></expr></argument>)<pos:position pos:line="116" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="118" pos:column="5">hashInsert<pos:position pos:line="118" pos:column="15"/></name><argument_list pos:line="118" pos:column="15">(<argument><expr><name pos:line="118" pos:column="16">newkey<pos:position pos:line="118" pos:column="22"/></name></expr></argument>)<pos:position pos:line="118" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="24"/></expr_stmt>

    <if pos:line="120" pos:column="5">if <condition pos:line="120" pos:column="8">(<expr><name pos:line="120" pos:column="9">swap_filen<pos:position pos:line="120" pos:column="19"/></name> <operator pos:line="120" pos:column="20">&gt;<pos:position pos:line="120" pos:column="24"/></operator> <operator pos:line="120" pos:column="22">-<pos:position pos:line="120" pos:column="23"/></operator><literal type="number" pos:line="120" pos:column="23">1<pos:position pos:line="120" pos:column="24"/></literal></expr>)<pos:position pos:line="120" pos:column="25"/></condition><then pos:line="120" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="121" pos:column="9">storeDirSwapLog<pos:position pos:line="121" pos:column="24"/></name><argument_list pos:line="121" pos:column="24">(<argument><expr><name pos:line="121" pos:column="25">this<pos:position pos:line="121" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="31">SWAP_LOG_ADD<pos:position pos:line="121" pos:column="43"/></name></expr></argument>)<pos:position pos:line="121" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="45"/></expr_stmt></block></then></if>
}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
