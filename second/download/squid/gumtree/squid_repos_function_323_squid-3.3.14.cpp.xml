<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_323_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">manage_request<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">()<pos:position pos:line="2" pos:column="17"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">HELPER_INPUT_BUFFER<pos:position pos:line="4" pos:column="33"/></name></expr>]<pos:position pos:line="4" pos:column="34"/></index></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">decoded<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><name pos:line="5" pos:column="18">HELPER_INPUT_BUFFER<pos:position pos:line="5" pos:column="37"/></name></expr>]<pos:position pos:line="5" pos:column="38"/></index></name></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">decodedLen<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">helper_command<pos:position pos:line="7" pos:column="24"/></name><index pos:line="7" pos:column="24">[<expr><literal type="number" pos:line="7" pos:column="25">3<pos:position pos:line="7" pos:column="26"/></literal></expr>]<pos:position pos:line="7" pos:column="27"/></index></name></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">c<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">status<pos:position pos:line="9" pos:column="15"/></name></decl>;<pos:position pos:line="9" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">oversized<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">ErrorMessage<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="12" pos:column="5">static<pos:position pos:line="12" pos:column="11"/></specifier> <type><name pos:line="12" pos:column="12">char<pos:position pos:line="12" pos:column="16"/></name></type> <name><name pos:line="12" pos:column="17">cred<pos:position pos:line="12" pos:column="21"/></name><index pos:line="12" pos:column="21">[<expr><name pos:line="12" pos:column="22">SSP_MAX_CRED_LEN<pos:position pos:line="12" pos:column="38"/></name> <operator pos:line="12" pos:column="39">+<pos:position pos:line="12" pos:column="40"/></operator> <literal type="number" pos:line="12" pos:column="41">1<pos:position pos:line="12" pos:column="42"/></literal></expr>]<pos:position pos:line="12" pos:column="43"/></index></name></decl>;<pos:position pos:line="12" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">BOOL<pos:position pos:line="13" pos:column="9"/></name></type> <name pos:line="13" pos:column="10">Done<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><name pos:line="13" pos:column="17">FALSE<pos:position pos:line="13" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt>

<label><name pos:line="15" pos:column="1">try_again<pos:position pos:line="15" pos:column="10"/></name>:<pos:position pos:line="15" pos:column="11"/></label>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">fgets<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">buf<pos:position pos:line="16" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="20">HELPER_INPUT_BUFFER<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="41">stdin<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="48"/></condition><then pos:line="16" pos:column="48">
        <block type="pseudo"><return pos:line="17" pos:column="9">return <expr><literal type="number" pos:line="17" pos:column="16">0<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="19" pos:column="5">c<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <call><name pos:line="19" pos:column="9">memchr<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">buf<pos:position pos:line="19" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="21">'\n'<pos:position pos:line="19" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="27">HELPER_INPUT_BUFFER<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>		<comment type="block" pos:line="19" pos:column="57">/* safer against overrun than strchr */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">c<pos:position pos:line="20" pos:column="10"/></name></expr>)<pos:position pos:line="20" pos:column="11"/></condition><then pos:line="20" pos:column="11"> <block pos:line="20" pos:column="12">{
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">oversized<pos:position pos:line="21" pos:column="22"/></name></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23"> <block pos:line="21" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">SEND<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><literal type="string" pos:line="22" pos:column="18">"BH illegal request received"<pos:position pos:line="22" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">fprintf<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">stderr<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="29">"ERROR: Illegal request received: '%s'\n"<pos:position pos:line="23" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="72">buf<pos:position pos:line="23" pos:column="75"/></name></expr></argument>)<pos:position pos:line="23" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="77"/></expr_stmt>
            <return pos:line="24" pos:column="13">return <expr><literal type="number" pos:line="24" pos:column="20">1<pos:position pos:line="24" pos:column="21"/></literal></expr>;<pos:position pos:line="24" pos:column="22"/></return>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="26" pos:column="9">*<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">c<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <literal type="char" pos:line="26" pos:column="14">'\0'<pos:position pos:line="26" pos:column="18"/></literal></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then> <else pos:line="27" pos:column="7">else <block pos:line="27" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">fprintf<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">stderr<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="25">"No newline in '%s'\n"<pos:position pos:line="28" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">buf<pos:position pos:line="28" pos:column="52"/></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name pos:line="29" pos:column="9">oversized<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <literal type="number" pos:line="29" pos:column="21">1<pos:position pos:line="29" pos:column="22"/></literal></expr>;<pos:position pos:line="29" pos:column="23"/></expr_stmt>
        <goto pos:line="30" pos:column="9">goto <name pos:line="30" pos:column="14">try_again<pos:position pos:line="30" pos:column="23"/></name>;<pos:position pos:line="30" pos:column="24"/></goto>
    }<pos:position pos:line="31" pos:column="6"/></block></else></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">(<pos:position pos:line="33" pos:column="10"/></operator><call><name pos:line="33" pos:column="10">strlen<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><name pos:line="33" pos:column="17">buf<pos:position pos:line="33" pos:column="20"/></name></expr></argument>)<pos:position pos:line="33" pos:column="21"/></argument_list></call> <operator pos:line="33" pos:column="22">&gt;<pos:position pos:line="33" pos:column="26"/></operator> <literal type="number" pos:line="33" pos:column="24">3<pos:position pos:line="33" pos:column="25"/></literal><operator pos:line="33" pos:column="25">)<pos:position pos:line="33" pos:column="26"/></operator> <operator pos:line="33" pos:column="27">&amp;&amp;<pos:position pos:line="33" pos:column="37"/></operator> <name pos:line="33" pos:column="30">Negotiate_packet_debug_enabled<pos:position pos:line="33" pos:column="60"/></name></expr>)<pos:position pos:line="33" pos:column="61"/></condition><then pos:line="33" pos:column="61"> <block pos:line="33" pos:column="62">{
        <expr_stmt><expr><name pos:line="34" pos:column="9">decodedLen<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <call><name pos:line="34" pos:column="22">base64_decode<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><name pos:line="34" pos:column="36">decoded<pos:position pos:line="34" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="45">sizeof<argument_list pos:line="34" pos:column="51">(<argument><expr><name pos:line="34" pos:column="52">decoded<pos:position pos:line="34" pos:column="59"/></name></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="34" pos:column="62">buf<pos:position pos:line="34" pos:column="65"/></name><operator pos:line="34" pos:column="65">+<pos:position pos:line="34" pos:column="66"/></operator><literal type="number" pos:line="34" pos:column="66">3<pos:position pos:line="34" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">strncpy<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><name pos:line="35" pos:column="17">helper_command<pos:position pos:line="35" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="33">buf<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="38">2<pos:position pos:line="35" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">debug<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><literal type="string" pos:line="36" pos:column="15">"Got '%s' from Squid with data:\n"<pos:position pos:line="36" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="51">helper_command<pos:position pos:line="36" pos:column="65"/></name></expr></argument>)<pos:position pos:line="36" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">hex_dump<pos:position pos:line="37" pos:column="17"/></name><argument_list pos:line="37" pos:column="17">(<argument><expr><name pos:line="37" pos:column="18">decoded<pos:position pos:line="37" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="27">decodedLen<pos:position pos:line="37" pos:column="37"/></name></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then> <else pos:line="38" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="39" pos:column="9">debug<pos:position pos:line="39" pos:column="14"/></name><argument_list pos:line="39" pos:column="14">(<argument><expr><literal type="string" pos:line="39" pos:column="15">"Got '%s' from Squid\n"<pos:position pos:line="39" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="40">buf<pos:position pos:line="39" pos:column="43"/></name></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt></block></else></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name pos:line="41" pos:column="9">memcmp<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">buf<pos:position pos:line="41" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="21">"YR "<pos:position pos:line="41" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="28">3<pos:position pos:line="41" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call> <operator pos:line="41" pos:column="31">==<pos:position pos:line="41" pos:column="33"/></operator> <literal type="number" pos:line="41" pos:column="34">0<pos:position pos:line="41" pos:column="35"/></literal></expr>)<pos:position pos:line="41" pos:column="36"/></condition><then pos:line="41" pos:column="36"> <block pos:line="41" pos:column="37">{	<comment type="block" pos:line="41" pos:column="41">/* refresh-request */</comment>
        <comment type="block" pos:line="42" pos:column="9">/* figure out what we got */</comment>
        <expr_stmt><expr><name pos:line="43" pos:column="9">decoded<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <call><name pos:line="43" pos:column="19">base64_decode<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">buf<pos:position pos:line="43" pos:column="36"/></name> <operator pos:line="43" pos:column="37">+<pos:position pos:line="43" pos:column="38"/></operator> <literal type="number" pos:line="43" pos:column="39">3<pos:position pos:line="43" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">(<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">size_t<pos:position pos:line="44" pos:column="20"/></name><operator pos:line="44" pos:column="20">)<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="21">decodedLen<pos:position pos:line="44" pos:column="31"/></name> <operator pos:line="44" pos:column="32">&lt;<pos:position pos:line="44" pos:column="36"/></operator> <sizeof pos:line="44" pos:column="34">sizeof<argument_list pos:line="44" pos:column="40">(<argument><expr><name pos:line="44" pos:column="41">ntlmhdr<pos:position pos:line="44" pos:column="48"/></name></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="44" pos:column="50"/></condition><then pos:line="44" pos:column="50"> <block pos:line="44" pos:column="51">{		<comment type="block" pos:line="44" pos:column="65">/* decoding failure, return error */</comment>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">SEND<pos:position pos:line="45" pos:column="17"/></name><argument_list pos:line="45" pos:column="17">(<argument><expr><literal type="string" pos:line="45" pos:column="18">"NA * Packet format error, couldn't base64-decode"<pos:position pos:line="45" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></expr_stmt>
            <return pos:line="46" pos:column="13">return <expr><literal type="number" pos:line="46" pos:column="20">1<pos:position pos:line="46" pos:column="21"/></literal></expr>;<pos:position pos:line="46" pos:column="22"/></return>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="48" pos:column="9">/* Obtain server blob against SSPI */</comment>
        <expr_stmt><expr><name pos:line="49" pos:column="9">c<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <operator pos:line="49" pos:column="13">(<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">char<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">*<pos:position pos:line="49" pos:column="20"/></operator><operator pos:line="49" pos:column="20">)<pos:position pos:line="49" pos:column="21"/></operator> <call><name pos:line="49" pos:column="22">SSP_MakeNegotiateBlob<pos:position pos:line="49" pos:column="43"/></name><argument_list pos:line="49" pos:column="43">(<argument><expr><name pos:line="49" pos:column="44">decoded<pos:position pos:line="49" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="53">decodedLen<pos:position pos:line="49" pos:column="63"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="65">&amp;<pos:position pos:line="49" pos:column="70"/></operator><name pos:line="49" pos:column="66">Done<pos:position pos:line="49" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="72">&amp;<pos:position pos:line="49" pos:column="77"/></operator><name pos:line="49" pos:column="73">status<pos:position pos:line="49" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="81">cred<pos:position pos:line="49" pos:column="85"/></name></expr></argument>)<pos:position pos:line="49" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="87"/></expr_stmt>

        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">status<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">==<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">SSP_OK<pos:position pos:line="51" pos:column="29"/></name></expr>)<pos:position pos:line="51" pos:column="30"/></condition><then pos:line="51" pos:column="30"> <block pos:line="51" pos:column="31">{
            <if pos:line="52" pos:column="13">if <condition pos:line="52" pos:column="16">(<expr><name pos:line="52" pos:column="17">Done<pos:position pos:line="52" pos:column="21"/></name></expr>)<pos:position pos:line="52" pos:column="22"/></condition><then pos:line="52" pos:column="22"> <block pos:line="52" pos:column="23">{
                <expr_stmt><expr><call><name pos:line="53" pos:column="17">lc<pos:position pos:line="53" pos:column="19"/></name><argument_list pos:line="53" pos:column="19">(<argument><expr><name pos:line="53" pos:column="20">cred<pos:position pos:line="53" pos:column="24"/></name></expr></argument>)<pos:position pos:line="53" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>	<comment type="block" pos:line="53" pos:column="33">/* let's lowercase them for our convenience */</comment>
                <expr_stmt><expr><name pos:line="54" pos:column="17">have_serverblob<pos:position pos:line="54" pos:column="32"/></name> <operator pos:line="54" pos:column="33">=<pos:position pos:line="54" pos:column="34"/></operator> <literal type="number" pos:line="54" pos:column="35">0<pos:position pos:line="54" pos:column="36"/></literal></expr>;<pos:position pos:line="54" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name pos:line="55" pos:column="17">Done<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">=<pos:position pos:line="55" pos:column="23"/></operator> <name pos:line="55" pos:column="24">FALSE<pos:position pos:line="55" pos:column="29"/></name></expr>;<pos:position pos:line="55" pos:column="30"/></expr_stmt>
                <if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><name pos:line="56" pos:column="21">Negotiate_packet_debug_enabled<pos:position pos:line="56" pos:column="51"/></name></expr>)<pos:position pos:line="56" pos:column="52"/></condition><then pos:line="56" pos:column="52"> <block pos:line="56" pos:column="53">{
                    <expr_stmt><expr><name pos:line="57" pos:column="21">decodedLen<pos:position pos:line="57" pos:column="31"/></name> <operator pos:line="57" pos:column="32">=<pos:position pos:line="57" pos:column="33"/></operator> <call><name pos:line="57" pos:column="34">base64_decode<pos:position pos:line="57" pos:column="47"/></name><argument_list pos:line="57" pos:column="47">(<argument><expr><name pos:line="57" pos:column="48">decoded<pos:position pos:line="57" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="57">sizeof<argument_list pos:line="57" pos:column="63">(<argument><expr><name pos:line="57" pos:column="64">decoded<pos:position pos:line="57" pos:column="71"/></name></expr></argument>)<pos:position pos:line="57" pos:column="72"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="57" pos:column="74">c<pos:position pos:line="57" pos:column="75"/></name></expr></argument>)<pos:position pos:line="57" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="77"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="58" pos:column="21">debug<pos:position pos:line="58" pos:column="26"/></name><argument_list pos:line="58" pos:column="26">(<argument><expr><literal type="string" pos:line="58" pos:column="27">"sending 'AF' %s to squid with data:\n"<pos:position pos:line="58" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="68">cred<pos:position pos:line="58" pos:column="72"/></name></expr></argument>)<pos:position pos:line="58" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="74"/></expr_stmt>
                    <if pos:line="59" pos:column="21">if <condition pos:line="59" pos:column="24">(<expr><name pos:line="59" pos:column="25">c<pos:position pos:line="59" pos:column="26"/></name> <operator pos:line="59" pos:column="27">!=<pos:position pos:line="59" pos:column="29"/></operator> <name pos:line="59" pos:column="30">NULL<pos:position pos:line="59" pos:column="34"/></name></expr>)<pos:position pos:line="59" pos:column="35"/></condition><then pos:line="59" pos:column="35">
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="25">hex_dump<pos:position pos:line="60" pos:column="33"/></name><argument_list pos:line="60" pos:column="33">(<argument><expr><name pos:line="60" pos:column="34">decoded<pos:position pos:line="60" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="43">decodedLen<pos:position pos:line="60" pos:column="53"/></name></expr></argument>)<pos:position pos:line="60" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="55"/></expr_stmt></block></then>
                    <else pos:line="61" pos:column="21">else
                        <block type="pseudo"><expr_stmt><expr><call><name pos:line="62" pos:column="25">fprintf<pos:position pos:line="62" pos:column="32"/></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name pos:line="62" pos:column="33">stderr<pos:position pos:line="62" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="41">"No data available.\n"<pos:position pos:line="62" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="65"/></expr_stmt></block></else></if>
                    <expr_stmt><expr><call><name pos:line="63" pos:column="21">printf<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><literal type="string" pos:line="63" pos:column="28">"AF %s %s\n"<pos:position pos:line="63" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="42">c<pos:position pos:line="63" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="45">cred<pos:position pos:line="63" pos:column="49"/></name></expr></argument>)<pos:position pos:line="63" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="51"/></expr_stmt>
                }<pos:position pos:line="64" pos:column="18"/></block></then> <else pos:line="64" pos:column="19">else
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="65" pos:column="21">SEND3<pos:position pos:line="65" pos:column="26"/></name><argument_list pos:line="65" pos:column="26">(<argument><expr><literal type="string" pos:line="65" pos:column="27">"AF %s %s"<pos:position pos:line="65" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="39">c<pos:position pos:line="65" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="42">cred<pos:position pos:line="65" pos:column="46"/></name></expr></argument>)<pos:position pos:line="65" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="48"/></expr_stmt></block></else></if>
            }<pos:position pos:line="66" pos:column="14"/></block></then> <else pos:line="66" pos:column="15">else <block pos:line="66" pos:column="20">{
                <if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">Negotiate_packet_debug_enabled<pos:position pos:line="67" pos:column="51"/></name></expr>)<pos:position pos:line="67" pos:column="52"/></condition><then pos:line="67" pos:column="52"> <block pos:line="67" pos:column="53">{
                    <expr_stmt><expr><name pos:line="68" pos:column="21">decodedLen<pos:position pos:line="68" pos:column="31"/></name> <operator pos:line="68" pos:column="32">=<pos:position pos:line="68" pos:column="33"/></operator> <call><name pos:line="68" pos:column="34">base64_decode<pos:position pos:line="68" pos:column="47"/></name><argument_list pos:line="68" pos:column="47">(<argument><expr><name pos:line="68" pos:column="48">decoded<pos:position pos:line="68" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="68" pos:column="57">sizeof<argument_list pos:line="68" pos:column="63">(<argument><expr><name pos:line="68" pos:column="64">decoded<pos:position pos:line="68" pos:column="71"/></name></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="68" pos:column="74">c<pos:position pos:line="68" pos:column="75"/></name></expr></argument>)<pos:position pos:line="68" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="77"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="69" pos:column="21">debug<pos:position pos:line="69" pos:column="26"/></name><argument_list pos:line="69" pos:column="26">(<argument><expr><literal type="string" pos:line="69" pos:column="27">"sending 'TT' to squid with data:\n"<pos:position pos:line="69" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="65"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="70" pos:column="21">hex_dump<pos:position pos:line="70" pos:column="29"/></name><argument_list pos:line="70" pos:column="29">(<argument><expr><name pos:line="70" pos:column="30">decoded<pos:position pos:line="70" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="39">decodedLen<pos:position pos:line="70" pos:column="49"/></name></expr></argument>)<pos:position pos:line="70" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="51"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="71" pos:column="21">printf<pos:position pos:line="71" pos:column="27"/></name><argument_list pos:line="71" pos:column="27">(<argument><expr><literal type="string" pos:line="71" pos:column="28">"TT %s\n"<pos:position pos:line="71" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="39">c<pos:position pos:line="71" pos:column="40"/></name></expr></argument>)<pos:position pos:line="71" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="72" pos:column="18"/></block></then> <else pos:line="72" pos:column="19">else <block pos:line="72" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="73" pos:column="21">SEND2<pos:position pos:line="73" pos:column="26"/></name><argument_list pos:line="73" pos:column="26">(<argument><expr><literal type="string" pos:line="73" pos:column="27">"TT %s"<pos:position pos:line="73" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="36">c<pos:position pos:line="73" pos:column="37"/></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="39"/></expr_stmt>
                }<pos:position pos:line="74" pos:column="18"/></block></else></if>
                <expr_stmt><expr><name pos:line="75" pos:column="17">have_serverblob<pos:position pos:line="75" pos:column="32"/></name> <operator pos:line="75" pos:column="33">=<pos:position pos:line="75" pos:column="34"/></operator> <literal type="number" pos:line="75" pos:column="35">1<pos:position pos:line="75" pos:column="36"/></literal></expr>;<pos:position pos:line="75" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="76" pos:column="14"/></block></else></if>
        }<pos:position pos:line="77" pos:column="10"/></block></then> <else pos:line="77" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="13">SEND<pos:position pos:line="78" pos:column="17"/></name><argument_list pos:line="78" pos:column="17">(<argument><expr><literal type="string" pos:line="78" pos:column="18">"BH can't obtain server blob"<pos:position pos:line="78" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="49"/></expr_stmt></block></else></if>
        <return pos:line="79" pos:column="9">return <expr><literal type="number" pos:line="79" pos:column="16">1<pos:position pos:line="79" pos:column="17"/></literal></expr>;<pos:position pos:line="79" pos:column="18"/></return>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>
    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><call><name pos:line="81" pos:column="9">memcmp<pos:position pos:line="81" pos:column="15"/></name><argument_list pos:line="81" pos:column="15">(<argument><expr><name pos:line="81" pos:column="16">buf<pos:position pos:line="81" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="21">"KK "<pos:position pos:line="81" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="28">3<pos:position pos:line="81" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="30"/></argument_list></call> <operator pos:line="81" pos:column="31">==<pos:position pos:line="81" pos:column="33"/></operator> <literal type="number" pos:line="81" pos:column="34">0<pos:position pos:line="81" pos:column="35"/></literal></expr>)<pos:position pos:line="81" pos:column="36"/></condition><then pos:line="81" pos:column="36"> <block pos:line="81" pos:column="37">{	<comment type="block" pos:line="81" pos:column="41">/* authenticate-request */</comment>
        <if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><operator pos:line="82" pos:column="13">!<pos:position pos:line="82" pos:column="14"/></operator><name pos:line="82" pos:column="14">have_serverblob<pos:position pos:line="82" pos:column="29"/></name></expr>)<pos:position pos:line="82" pos:column="30"/></condition><then pos:line="82" pos:column="30"> <block pos:line="82" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">SEND<pos:position pos:line="83" pos:column="17"/></name><argument_list pos:line="83" pos:column="17">(<argument><expr><literal type="string" pos:line="83" pos:column="18">"BH invalid server blob"<pos:position pos:line="83" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="44"/></expr_stmt>
            <return pos:line="84" pos:column="13">return <expr><literal type="number" pos:line="84" pos:column="20">1<pos:position pos:line="84" pos:column="21"/></literal></expr>;<pos:position pos:line="84" pos:column="22"/></return>
        }<pos:position pos:line="85" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="86" pos:column="9">/* figure out what we got */</comment>
        <expr_stmt><expr><name pos:line="87" pos:column="9">decodedLen<pos:position pos:line="87" pos:column="19"/></name> <operator pos:line="87" pos:column="20">=<pos:position pos:line="87" pos:column="21"/></operator> <call><name pos:line="87" pos:column="22">base64_decode<pos:position pos:line="87" pos:column="35"/></name><argument_list pos:line="87" pos:column="35">(<argument><expr><name pos:line="87" pos:column="36">decoded<pos:position pos:line="87" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="87" pos:column="45">sizeof<argument_list pos:line="87" pos:column="51">(<argument><expr><name pos:line="87" pos:column="52">decoded<pos:position pos:line="87" pos:column="59"/></name></expr></argument>)<pos:position pos:line="87" pos:column="60"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="87" pos:column="62">buf<pos:position pos:line="87" pos:column="65"/></name><operator pos:line="87" pos:column="65">+<pos:position pos:line="87" pos:column="66"/></operator><literal type="number" pos:line="87" pos:column="66">3<pos:position pos:line="87" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="69"/></expr_stmt>
        <if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><operator pos:line="88" pos:column="13">(<pos:position pos:line="88" pos:column="14"/></operator><name pos:line="88" pos:column="14">size_t<pos:position pos:line="88" pos:column="20"/></name><operator pos:line="88" pos:column="20">)<pos:position pos:line="88" pos:column="21"/></operator><name pos:line="88" pos:column="21">decodedLen<pos:position pos:line="88" pos:column="31"/></name> <operator pos:line="88" pos:column="32">&lt;<pos:position pos:line="88" pos:column="36"/></operator> <sizeof pos:line="88" pos:column="34">sizeof<argument_list pos:line="88" pos:column="40">(<argument><expr><name pos:line="88" pos:column="41">ntlmhdr<pos:position pos:line="88" pos:column="48"/></name></expr></argument>)<pos:position pos:line="88" pos:column="49"/></argument_list></sizeof></expr>)<pos:position pos:line="88" pos:column="50"/></condition><then pos:line="88" pos:column="50"> <block pos:line="88" pos:column="51">{		<comment type="block" pos:line="88" pos:column="65">/* decoding failure, return error */</comment>
            <expr_stmt><expr><call><name pos:line="89" pos:column="13">SEND<pos:position pos:line="89" pos:column="17"/></name><argument_list pos:line="89" pos:column="17">(<argument><expr><literal type="string" pos:line="89" pos:column="18">"NA * Packet format error, couldn't base64-decode"<pos:position pos:line="89" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="70"/></expr_stmt>
            <return pos:line="90" pos:column="13">return <expr><literal type="number" pos:line="90" pos:column="20">1<pos:position pos:line="90" pos:column="21"/></literal></expr>;<pos:position pos:line="90" pos:column="22"/></return>
        }<pos:position pos:line="91" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="92" pos:column="9">/* check against SSPI */</comment>
        <expr_stmt><expr><name pos:line="93" pos:column="9">c<pos:position pos:line="93" pos:column="10"/></name> <operator pos:line="93" pos:column="11">=<pos:position pos:line="93" pos:column="12"/></operator> <operator pos:line="93" pos:column="13">(<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="14">char<pos:position pos:line="93" pos:column="18"/></name> <operator pos:line="93" pos:column="19">*<pos:position pos:line="93" pos:column="20"/></operator><operator pos:line="93" pos:column="20">)<pos:position pos:line="93" pos:column="21"/></operator> <call><name pos:line="93" pos:column="22">SSP_ValidateNegotiateCredentials<pos:position pos:line="93" pos:column="54"/></name><argument_list pos:line="93" pos:column="54">(<argument><expr><name pos:line="93" pos:column="55">decoded<pos:position pos:line="93" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="64">decodedLen<pos:position pos:line="93" pos:column="74"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="76">&amp;<pos:position pos:line="93" pos:column="81"/></operator><name pos:line="93" pos:column="77">Done<pos:position pos:line="93" pos:column="81"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="83">&amp;<pos:position pos:line="93" pos:column="88"/></operator><name pos:line="93" pos:column="84">status<pos:position pos:line="93" pos:column="90"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="92">cred<pos:position pos:line="93" pos:column="96"/></name></expr></argument>)<pos:position pos:line="93" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="98"/></expr_stmt>

        <if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><name pos:line="95" pos:column="13">status<pos:position pos:line="95" pos:column="19"/></name> <operator pos:line="95" pos:column="20">==<pos:position pos:line="95" pos:column="22"/></operator> <name pos:line="95" pos:column="23">SSP_ERROR<pos:position pos:line="95" pos:column="32"/></name></expr>)<pos:position pos:line="95" pos:column="33"/></condition><then pos:line="95" pos:column="33"> <block pos:line="95" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="96" pos:column="13">FormatMessage<pos:position pos:line="96" pos:column="26"/></name><argument_list pos:line="96" pos:column="26">(<argument><expr><name pos:line="96" pos:column="27">FORMAT_MESSAGE_ALLOCATE_BUFFER<pos:position pos:line="96" pos:column="57"/></name> <operator pos:line="96" pos:column="58">|<pos:position pos:line="96" pos:column="59"/></operator> <name pos:line="96" pos:column="60">FORMAT_MESSAGE_FROM_SYSTEM<pos:position pos:line="96" pos:column="86"/></name> <operator pos:line="96" pos:column="87">|<pos:position pos:line="96" pos:column="88"/></operator>
                          <name pos:line="97" pos:column="27">FORMAT_MESSAGE_IGNORE_INSERTS<pos:position pos:line="97" pos:column="56"/></name></expr></argument>,
                          <argument><expr><name pos:line="98" pos:column="27">NULL<pos:position pos:line="98" pos:column="31"/></name></expr></argument>,
                          <argument><expr><call><name pos:line="99" pos:column="27">GetLastError<pos:position pos:line="99" pos:column="39"/></name><argument_list pos:line="99" pos:column="39">()<pos:position pos:line="99" pos:column="41"/></argument_list></call></expr></argument>,
                          <argument><expr><call><name pos:line="100" pos:column="27">MAKELANGID<pos:position pos:line="100" pos:column="37"/></name><argument_list pos:line="100" pos:column="37">(<argument><expr><name pos:line="100" pos:column="38">LANG_NEUTRAL<pos:position pos:line="100" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="52">SUBLANG_DEFAULT<pos:position pos:line="100" pos:column="67"/></name></expr></argument>)<pos:position pos:line="100" pos:column="68"/></argument_list></call></expr></argument>,	<comment type="block" pos:line="100" pos:column="73">/* Default language */</comment>
                          <argument><expr><operator pos:line="101" pos:column="27">(<pos:position pos:line="101" pos:column="28"/></operator><name pos:line="101" pos:column="28">LPTSTR<pos:position pos:line="101" pos:column="34"/></name><operator pos:line="101" pos:column="34">)<pos:position pos:line="101" pos:column="35"/></operator> <operator pos:line="101" pos:column="36">&amp;<pos:position pos:line="101" pos:column="41"/></operator> <name pos:line="101" pos:column="38">ErrorMessage<pos:position pos:line="101" pos:column="50"/></name></expr></argument>,
                          <argument><expr><literal type="number" pos:line="102" pos:column="27">0<pos:position pos:line="102" pos:column="28"/></literal></expr></argument>,
                          <argument><expr><name pos:line="103" pos:column="27">NULL<pos:position pos:line="103" pos:column="31"/></name></expr></argument>)<pos:position pos:line="103" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="33"/></expr_stmt>
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name><name pos:line="104" pos:column="17">ErrorMessage<pos:position pos:line="104" pos:column="29"/></name><index pos:line="104" pos:column="29">[<expr><call><name pos:line="104" pos:column="30">strlen<pos:position pos:line="104" pos:column="36"/></name><argument_list pos:line="104" pos:column="36">(<argument><expr><name pos:line="104" pos:column="37">ErrorMessage<pos:position pos:line="104" pos:column="49"/></name></expr></argument>)<pos:position pos:line="104" pos:column="50"/></argument_list></call> <operator pos:line="104" pos:column="51">-<pos:position pos:line="104" pos:column="52"/></operator> <literal type="number" pos:line="104" pos:column="53">1<pos:position pos:line="104" pos:column="54"/></literal></expr>]<pos:position pos:line="104" pos:column="55"/></index></name> <operator pos:line="104" pos:column="56">==<pos:position pos:line="104" pos:column="58"/></operator> <literal type="char" pos:line="104" pos:column="59">'\n'<pos:position pos:line="104" pos:column="63"/></literal></expr>)<pos:position pos:line="104" pos:column="64"/></condition><then pos:line="104" pos:column="64">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="105" pos:column="17">ErrorMessage<pos:position pos:line="105" pos:column="29"/></name><index pos:line="105" pos:column="29">[<expr><call><name pos:line="105" pos:column="30">strlen<pos:position pos:line="105" pos:column="36"/></name><argument_list pos:line="105" pos:column="36">(<argument><expr><name pos:line="105" pos:column="37">ErrorMessage<pos:position pos:line="105" pos:column="49"/></name></expr></argument>)<pos:position pos:line="105" pos:column="50"/></argument_list></call> <operator pos:line="105" pos:column="51">-<pos:position pos:line="105" pos:column="52"/></operator> <literal type="number" pos:line="105" pos:column="53">1<pos:position pos:line="105" pos:column="54"/></literal></expr>]<pos:position pos:line="105" pos:column="55"/></index></name> <operator pos:line="105" pos:column="56">=<pos:position pos:line="105" pos:column="57"/></operator> <literal type="char" pos:line="105" pos:column="58">'\0'<pos:position pos:line="105" pos:column="62"/></literal></expr>;<pos:position pos:line="105" pos:column="63"/></expr_stmt></block></then></if>
            <if pos:line="106" pos:column="13">if <condition pos:line="106" pos:column="16">(<expr><name><name pos:line="106" pos:column="17">ErrorMessage<pos:position pos:line="106" pos:column="29"/></name><index pos:line="106" pos:column="29">[<expr><call><name pos:line="106" pos:column="30">strlen<pos:position pos:line="106" pos:column="36"/></name><argument_list pos:line="106" pos:column="36">(<argument><expr><name pos:line="106" pos:column="37">ErrorMessage<pos:position pos:line="106" pos:column="49"/></name></expr></argument>)<pos:position pos:line="106" pos:column="50"/></argument_list></call> <operator pos:line="106" pos:column="51">-<pos:position pos:line="106" pos:column="52"/></operator> <literal type="number" pos:line="106" pos:column="53">1<pos:position pos:line="106" pos:column="54"/></literal></expr>]<pos:position pos:line="106" pos:column="55"/></index></name> <operator pos:line="106" pos:column="56">==<pos:position pos:line="106" pos:column="58"/></operator> <literal type="char" pos:line="106" pos:column="59">'\r'<pos:position pos:line="106" pos:column="63"/></literal></expr>)<pos:position pos:line="106" pos:column="64"/></condition><then pos:line="106" pos:column="64">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="107" pos:column="17">ErrorMessage<pos:position pos:line="107" pos:column="29"/></name><index pos:line="107" pos:column="29">[<expr><call><name pos:line="107" pos:column="30">strlen<pos:position pos:line="107" pos:column="36"/></name><argument_list pos:line="107" pos:column="36">(<argument><expr><name pos:line="107" pos:column="37">ErrorMessage<pos:position pos:line="107" pos:column="49"/></name></expr></argument>)<pos:position pos:line="107" pos:column="50"/></argument_list></call> <operator pos:line="107" pos:column="51">-<pos:position pos:line="107" pos:column="52"/></operator> <literal type="number" pos:line="107" pos:column="53">1<pos:position pos:line="107" pos:column="54"/></literal></expr>]<pos:position pos:line="107" pos:column="55"/></index></name> <operator pos:line="107" pos:column="56">=<pos:position pos:line="107" pos:column="57"/></operator> <literal type="char" pos:line="107" pos:column="58">'\0'<pos:position pos:line="107" pos:column="62"/></literal></expr>;<pos:position pos:line="107" pos:column="63"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="108" pos:column="13">SEND2<pos:position pos:line="108" pos:column="18"/></name><argument_list pos:line="108" pos:column="18">(<argument><expr><literal type="string" pos:line="108" pos:column="19">"NA * %s"<pos:position pos:line="108" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="30">ErrorMessage<pos:position pos:line="108" pos:column="42"/></name></expr></argument>)<pos:position pos:line="108" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">LocalFree<pos:position pos:line="109" pos:column="22"/></name><argument_list pos:line="109" pos:column="22">(<argument><expr><name pos:line="109" pos:column="23">ErrorMessage<pos:position pos:line="109" pos:column="35"/></name></expr></argument>)<pos:position pos:line="109" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="37"/></expr_stmt>
            <return pos:line="110" pos:column="13">return <expr><literal type="number" pos:line="110" pos:column="20">1<pos:position pos:line="110" pos:column="21"/></literal></expr>;<pos:position pos:line="110" pos:column="22"/></return>
        }<pos:position pos:line="111" pos:column="10"/></block></then></if>
        <if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><name pos:line="112" pos:column="13">Done<pos:position pos:line="112" pos:column="17"/></name></expr>)<pos:position pos:line="112" pos:column="18"/></condition><then pos:line="112" pos:column="18"> <block pos:line="112" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="113" pos:column="13">lc<pos:position pos:line="113" pos:column="15"/></name><argument_list pos:line="113" pos:column="15">(<argument><expr><name pos:line="113" pos:column="16">cred<pos:position pos:line="113" pos:column="20"/></name></expr></argument>)<pos:position pos:line="113" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="22"/></expr_stmt>		<comment type="block" pos:line="113" pos:column="33">/* let's lowercase them for our convenience */</comment>
            <expr_stmt><expr><name pos:line="114" pos:column="13">have_serverblob<pos:position pos:line="114" pos:column="28"/></name> <operator pos:line="114" pos:column="29">=<pos:position pos:line="114" pos:column="30"/></operator> <literal type="number" pos:line="114" pos:column="31">0<pos:position pos:line="114" pos:column="32"/></literal></expr>;<pos:position pos:line="114" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name pos:line="115" pos:column="13">Done<pos:position pos:line="115" pos:column="17"/></name> <operator pos:line="115" pos:column="18">=<pos:position pos:line="115" pos:column="19"/></operator> <name pos:line="115" pos:column="20">FALSE<pos:position pos:line="115" pos:column="25"/></name></expr>;<pos:position pos:line="115" pos:column="26"/></expr_stmt>
            <if pos:line="116" pos:column="13">if <condition pos:line="116" pos:column="16">(<expr><name pos:line="116" pos:column="17">Negotiate_packet_debug_enabled<pos:position pos:line="116" pos:column="47"/></name></expr>)<pos:position pos:line="116" pos:column="48"/></condition><then pos:line="116" pos:column="48"> <block pos:line="116" pos:column="49">{
                <expr_stmt><expr><name pos:line="117" pos:column="17">decodedLen<pos:position pos:line="117" pos:column="27"/></name> <operator pos:line="117" pos:column="28">=<pos:position pos:line="117" pos:column="29"/></operator> <call><name pos:line="117" pos:column="30">base64_decode<pos:position pos:line="117" pos:column="43"/></name><argument_list pos:line="117" pos:column="43">(<argument><expr><name pos:line="117" pos:column="44">decoded<pos:position pos:line="117" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="117" pos:column="53">sizeof<argument_list pos:line="117" pos:column="59">(<argument><expr><name pos:line="117" pos:column="60">decoded<pos:position pos:line="117" pos:column="67"/></name></expr></argument>)<pos:position pos:line="117" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="117" pos:column="70">c<pos:position pos:line="117" pos:column="71"/></name></expr></argument>)<pos:position pos:line="117" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="73"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="118" pos:column="17">debug<pos:position pos:line="118" pos:column="22"/></name><argument_list pos:line="118" pos:column="22">(<argument><expr><literal type="string" pos:line="118" pos:column="23">"sending 'AF' %s to squid with data:\n"<pos:position pos:line="118" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="118" pos:column="64">cred<pos:position pos:line="118" pos:column="68"/></name></expr></argument>)<pos:position pos:line="118" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="70"/></expr_stmt>
                <if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><name pos:line="119" pos:column="21">c<pos:position pos:line="119" pos:column="22"/></name> <operator pos:line="119" pos:column="23">!=<pos:position pos:line="119" pos:column="25"/></operator> <name pos:line="119" pos:column="26">NULL<pos:position pos:line="119" pos:column="30"/></name></expr>)<pos:position pos:line="119" pos:column="31"/></condition><then pos:line="119" pos:column="31">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="120" pos:column="21">hex_dump<pos:position pos:line="120" pos:column="29"/></name><argument_list pos:line="120" pos:column="29">(<argument><expr><name pos:line="120" pos:column="30">decoded<pos:position pos:line="120" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="39">decodedLen<pos:position pos:line="120" pos:column="49"/></name></expr></argument>)<pos:position pos:line="120" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="51"/></expr_stmt></block></then>
                <else pos:line="121" pos:column="17">else
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="122" pos:column="21">fprintf<pos:position pos:line="122" pos:column="28"/></name><argument_list pos:line="122" pos:column="28">(<argument><expr><name pos:line="122" pos:column="29">stderr<pos:position pos:line="122" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="37">"No data available.\n"<pos:position pos:line="122" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="61"/></expr_stmt></block></else></if>
                <expr_stmt><expr><call><name pos:line="123" pos:column="17">printf<pos:position pos:line="123" pos:column="23"/></name><argument_list pos:line="123" pos:column="23">(<argument><expr><literal type="string" pos:line="123" pos:column="24">"AF %s %s\n"<pos:position pos:line="123" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="38">c<pos:position pos:line="123" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="41">cred<pos:position pos:line="123" pos:column="45"/></name></expr></argument>)<pos:position pos:line="123" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="124" pos:column="14"/></block></then> <else pos:line="124" pos:column="15">else <block pos:line="124" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="125" pos:column="17">SEND3<pos:position pos:line="125" pos:column="22"/></name><argument_list pos:line="125" pos:column="22">(<argument><expr><literal type="string" pos:line="125" pos:column="23">"AF %s %s"<pos:position pos:line="125" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="35">c<pos:position pos:line="125" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="38">cred<pos:position pos:line="125" pos:column="42"/></name></expr></argument>)<pos:position pos:line="125" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="44"/></expr_stmt>
            }<pos:position pos:line="126" pos:column="14"/></block></else></if>
            <return pos:line="127" pos:column="13">return <expr><literal type="number" pos:line="127" pos:column="20">1<pos:position pos:line="127" pos:column="21"/></literal></expr>;<pos:position pos:line="127" pos:column="22"/></return>
        }<pos:position pos:line="128" pos:column="10"/></block></then> <else pos:line="128" pos:column="11">else <block pos:line="128" pos:column="16">{
            <if pos:line="129" pos:column="13">if <condition pos:line="129" pos:column="16">(<expr><name pos:line="129" pos:column="17">Negotiate_packet_debug_enabled<pos:position pos:line="129" pos:column="47"/></name></expr>)<pos:position pos:line="129" pos:column="48"/></condition><then pos:line="129" pos:column="48"> <block pos:line="129" pos:column="49">{
                <expr_stmt><expr><name pos:line="130" pos:column="17">decodedLen<pos:position pos:line="130" pos:column="27"/></name> <operator pos:line="130" pos:column="28">=<pos:position pos:line="130" pos:column="29"/></operator> <call><name pos:line="130" pos:column="30">base64_decode<pos:position pos:line="130" pos:column="43"/></name><argument_list pos:line="130" pos:column="43">(<argument><expr><name pos:line="130" pos:column="44">decoded<pos:position pos:line="130" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="130" pos:column="53">sizeof<argument_list pos:line="130" pos:column="59">(<argument><expr><name pos:line="130" pos:column="60">decoded<pos:position pos:line="130" pos:column="67"/></name></expr></argument>)<pos:position pos:line="130" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="130" pos:column="70">c<pos:position pos:line="130" pos:column="71"/></name></expr></argument>)<pos:position pos:line="130" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="73"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="131" pos:column="17">debug<pos:position pos:line="131" pos:column="22"/></name><argument_list pos:line="131" pos:column="22">(<argument><expr><literal type="string" pos:line="131" pos:column="23">"sending 'TT' to squid with data:\n"<pos:position pos:line="131" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="61"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="132" pos:column="17">hex_dump<pos:position pos:line="132" pos:column="25"/></name><argument_list pos:line="132" pos:column="25">(<argument><expr><name pos:line="132" pos:column="26">decoded<pos:position pos:line="132" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="35">decodedLen<pos:position pos:line="132" pos:column="45"/></name></expr></argument>)<pos:position pos:line="132" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="47"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="133" pos:column="17">printf<pos:position pos:line="133" pos:column="23"/></name><argument_list pos:line="133" pos:column="23">(<argument><expr><literal type="string" pos:line="133" pos:column="24">"TT %s\n"<pos:position pos:line="133" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="35">c<pos:position pos:line="133" pos:column="36"/></name></expr></argument>)<pos:position pos:line="133" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="134" pos:column="14"/></block></then> <else pos:line="134" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="135" pos:column="17">SEND2<pos:position pos:line="135" pos:column="22"/></name><argument_list pos:line="135" pos:column="22">(<argument><expr><literal type="string" pos:line="135" pos:column="23">"TT %s"<pos:position pos:line="135" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="32">c<pos:position pos:line="135" pos:column="33"/></name></expr></argument>)<pos:position pos:line="135" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="35"/></expr_stmt></block></else></if>
            <return pos:line="136" pos:column="13">return <expr><literal type="number" pos:line="136" pos:column="20">1<pos:position pos:line="136" pos:column="21"/></literal></expr>;<pos:position pos:line="136" pos:column="22"/></return>
        }<pos:position pos:line="137" pos:column="10"/></block></else></if>

    }<pos:position pos:line="139" pos:column="6"/></block></then> <else pos:line="139" pos:column="7">else <block pos:line="139" pos:column="12">{			<comment type="block" pos:line="139" pos:column="33">/* not an auth-request */</comment>
        <expr_stmt><expr><call><name pos:line="140" pos:column="9">SEND<pos:position pos:line="140" pos:column="13"/></name><argument_list pos:line="140" pos:column="13">(<argument><expr><literal type="string" pos:line="140" pos:column="14">"BH illegal request received"<pos:position pos:line="140" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="141" pos:column="9">fprintf<pos:position pos:line="141" pos:column="16"/></name><argument_list pos:line="141" pos:column="16">(<argument><expr><name pos:line="141" pos:column="17">stderr<pos:position pos:line="141" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="25">"Illegal request received: '%s'\n"<pos:position pos:line="141" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="61">buf<pos:position pos:line="141" pos:column="64"/></name></expr></argument>)<pos:position pos:line="141" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="66"/></expr_stmt>
        <return pos:line="142" pos:column="9">return <expr><literal type="number" pos:line="142" pos:column="16">1<pos:position pos:line="142" pos:column="17"/></literal></expr>;<pos:position pos:line="142" pos:column="18"/></return>
    }<pos:position pos:line="143" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="144" pos:column="5">SEND<pos:position pos:line="144" pos:column="9"/></name><argument_list pos:line="144" pos:column="9">(<argument><expr><literal type="string" pos:line="144" pos:column="10">"BH detected protocol error"<pos:position pos:line="144" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="144" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="40"/></expr_stmt>
    <return pos:line="145" pos:column="5">return <expr><literal type="number" pos:line="145" pos:column="12">1<pos:position pos:line="145" pos:column="13"/></literal></expr>;<pos:position pos:line="145" pos:column="14"/></return>
    <comment type="block" format="doxygen" pos:line="146" pos:column="5">/********* END ********/</comment>
}<pos:position pos:line="147" pos:column="2"/></block></function></unit>
