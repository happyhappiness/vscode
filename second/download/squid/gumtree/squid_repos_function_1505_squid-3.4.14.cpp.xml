<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1505_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">SquidShutdown<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">()<pos:position pos:line="2" pos:column="16"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* XXX: This function is called after the main loop has quit, which
     * means that no AsyncCalls would be called, including close handlers.
     * TODO: We need to close/shut/free everything that needs calls before
     * exiting the loop.
     */</comment>

<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="10" pos:column="22"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">WIN32_svcstatusupdate<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">SERVICE_STOP_PENDING<pos:position pos:line="11" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="49">10000<pos:position pos:line="11" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debugs<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">1<pos:position pos:line="14" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="15">DBG_IMPORTANT<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="30">"Shutting down..."<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">dnsShutdown<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">()<pos:position pos:line="15" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">USE_SSL_CRTD<pos:position pos:line="16" pos:column="17"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">Ssl<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">::<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">Helper<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">::<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">GetInstance<pos:position pos:line="17" pos:column="29"/></name></name><argument_list pos:line="17" pos:column="29">()<pos:position pos:line="17" pos:column="31"/></argument_list></call><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><call><name pos:line="17" pos:column="33">Shutdown<pos:position pos:line="17" pos:column="41"/></name><argument_list pos:line="17" pos:column="41">()<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">if<pos:position pos:line="19" pos:column="4"/></cpp:directive> <expr><name pos:line="19" pos:column="5">USE_SSL<pos:position pos:line="19" pos:column="12"/></name></expr></cpp:if>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name><name pos:line="20" pos:column="9">Ssl<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">::<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">CertValidationHelper<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">::<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="36">GetInstance<pos:position pos:line="20" pos:column="47"/></name></name><argument_list pos:line="20" pos:column="47">()<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="21" pos:column="9">Ssl<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">::<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">CertValidationHelper<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">::<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="36">GetInstance<pos:position pos:line="21" pos:column="47"/></name></name><argument_list pos:line="21" pos:column="47">()<pos:position pos:line="21" pos:column="49"/></argument_list></call><operator pos:line="21" pos:column="49">-&gt;<pos:position pos:line="21" pos:column="54"/></operator><call><name pos:line="21" pos:column="51">Shutdown<pos:position pos:line="21" pos:column="59"/></name><argument_list pos:line="21" pos:column="59">()<pos:position pos:line="21" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="62"/></expr_stmt></block></then></if>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">redirectShutdown<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">()<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">externalAclShutdown<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">()<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">icpClosePorts<pos:position pos:line="25" pos:column="18"/></name><argument_list pos:line="25" pos:column="18">()<pos:position pos:line="25" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="21"/></expr_stmt>
<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">USE_HTCP<pos:position pos:line="26" pos:column="13"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">htcpClosePorts<pos:position pos:line="27" pos:column="19"/></name><argument_list pos:line="27" pos:column="19">()<pos:position pos:line="27" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">SQUID_SNMP<pos:position pos:line="29" pos:column="15"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">snmpClosePorts<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">()<pos:position pos:line="30" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><name pos:line="32" pos:column="5">USE_WCCP<pos:position pos:line="32" pos:column="13"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">wccpConnectionClose<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">()<pos:position pos:line="34" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">if<pos:position pos:line="36" pos:column="4"/></cpp:directive> <expr><name pos:line="36" pos:column="5">USE_WCCPv2<pos:position pos:line="36" pos:column="15"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">wccp2ConnectionClose<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">()<pos:position pos:line="38" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">releaseServerSockets<pos:position pos:line="41" pos:column="25"/></name><argument_list pos:line="41" pos:column="25">()<pos:position pos:line="41" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">commCloseAllSockets<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">()<pos:position pos:line="42" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>

<cpp:if pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">if<pos:position pos:line="44" pos:column="4"/></cpp:directive> <expr><name pos:line="44" pos:column="5">USE_SQUID_ESI<pos:position pos:line="44" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="45" pos:column="5">Esi<pos:position pos:line="45" pos:column="8"/></name><operator pos:line="45" pos:column="8">::<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">Clean<pos:position pos:line="45" pos:column="15"/></name></name><argument_list pos:line="45" pos:column="15">()<pos:position pos:line="45" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="18"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">if<pos:position pos:line="48" pos:column="4"/></cpp:directive> <expr><name pos:line="48" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="48" pos:column="20"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="49" pos:column="5">DelayPools<pos:position pos:line="49" pos:column="15"/></name><operator pos:line="49" pos:column="15">::<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="17">FreePools<pos:position pos:line="49" pos:column="26"/></name></name><argument_list pos:line="49" pos:column="26">()<pos:position pos:line="49" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">if<pos:position pos:line="51" pos:column="4"/></cpp:directive> <expr><name pos:line="51" pos:column="5">USE_AUTH<pos:position pos:line="51" pos:column="13"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">authenticateReset<pos:position pos:line="52" pos:column="22"/></name><argument_list pos:line="52" pos:column="22">()<pos:position pos:line="52" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="25"/></expr_stmt>
<cpp:endif pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">endif<pos:position pos:line="53" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">if<pos:position pos:line="54" pos:column="4"/></cpp:directive> <expr><name pos:line="54" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="54" pos:column="22"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="56" pos:column="5">WIN32_svcstatusupdate<pos:position pos:line="56" pos:column="26"/></name><argument_list pos:line="56" pos:column="26">(<argument><expr><name pos:line="56" pos:column="27">SERVICE_STOP_PENDING<pos:position pos:line="56" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="49">10000<pos:position pos:line="56" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name pos:line="59" pos:column="5">Store<pos:position pos:line="59" pos:column="10"/></name><operator pos:line="59" pos:column="10">::<pos:position pos:line="59" pos:column="12"/></operator><name pos:line="59" pos:column="12">Root<pos:position pos:line="59" pos:column="16"/></name></name><argument_list pos:line="59" pos:column="16">()<pos:position pos:line="59" pos:column="18"/></argument_list></call><operator pos:line="59" pos:column="18">.<pos:position pos:line="59" pos:column="19"/></operator><call><name pos:line="59" pos:column="19">sync<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">()<pos:position pos:line="59" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="26"/></expr_stmt> <comment type="block" pos:line="59" pos:column="27">/* Flush pending object writes/unlinks */</comment>

    <expr_stmt><expr><call><name pos:line="61" pos:column="5">unlinkdClose<pos:position pos:line="61" pos:column="17"/></name><argument_list pos:line="61" pos:column="17">()<pos:position pos:line="61" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="20"/></expr_stmt>	  <comment type="block" pos:line="61" pos:column="27">/* after sync/flush. NOP if !USE_UNLINKD */</comment>

    <expr_stmt><expr><call><name pos:line="63" pos:column="5">storeDirWriteCleanLogs<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><literal type="number" pos:line="63" pos:column="28">0<pos:position pos:line="63" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">PrintRusage<pos:position pos:line="64" pos:column="16"/></name><argument_list pos:line="64" pos:column="16">()<pos:position pos:line="64" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">dumpMallocStats<pos:position pos:line="65" pos:column="20"/></name><argument_list pos:line="65" pos:column="20">()<pos:position pos:line="65" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="66" pos:column="5">Store<pos:position pos:line="66" pos:column="10"/></name><operator pos:line="66" pos:column="10">::<pos:position pos:line="66" pos:column="12"/></operator><name pos:line="66" pos:column="12">Root<pos:position pos:line="66" pos:column="16"/></name></name><argument_list pos:line="66" pos:column="16">()<pos:position pos:line="66" pos:column="18"/></argument_list></call><operator pos:line="66" pos:column="18">.<pos:position pos:line="66" pos:column="19"/></operator><call><name pos:line="66" pos:column="19">sync<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">()<pos:position pos:line="66" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="26"/></expr_stmt>		<comment type="block" pos:line="66" pos:column="41">/* Flush log writes */</comment>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">storeLogClose<pos:position pos:line="67" pos:column="18"/></name><argument_list pos:line="67" pos:column="18">()<pos:position pos:line="67" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="68" pos:column="5">accessLogClose<pos:position pos:line="68" pos:column="19"/></name><argument_list pos:line="68" pos:column="19">()<pos:position pos:line="68" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="69" pos:column="5">Store<pos:position pos:line="69" pos:column="10"/></name><operator pos:line="69" pos:column="10">::<pos:position pos:line="69" pos:column="12"/></operator><name pos:line="69" pos:column="12">Root<pos:position pos:line="69" pos:column="16"/></name></name><argument_list pos:line="69" pos:column="16">()<pos:position pos:line="69" pos:column="18"/></argument_list></call><operator pos:line="69" pos:column="18">.<pos:position pos:line="69" pos:column="19"/></operator><call><name pos:line="69" pos:column="19">sync<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">()<pos:position pos:line="69" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt>		<comment type="block" pos:line="69" pos:column="41">/* Flush log close */</comment>
    <expr_stmt><expr><call><name><name pos:line="70" pos:column="5">StoreFileSystem<pos:position pos:line="70" pos:column="20"/></name><operator pos:line="70" pos:column="20">::<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="22">FreeAllFs<pos:position pos:line="70" pos:column="31"/></name></name><argument_list pos:line="70" pos:column="31">()<pos:position pos:line="70" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="71" pos:column="5">DiskIOModule<pos:position pos:line="71" pos:column="17"/></name><operator pos:line="71" pos:column="17">::<pos:position pos:line="71" pos:column="19"/></operator><name pos:line="71" pos:column="19">FreeAllModules<pos:position pos:line="71" pos:column="33"/></name></name><argument_list pos:line="71" pos:column="33">()<pos:position pos:line="71" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">DeactivateRegistered<pos:position pos:line="72" pos:column="25"/></name><argument_list pos:line="72" pos:column="25">(<argument><expr><name pos:line="72" pos:column="26">rrAfterConfig<pos:position pos:line="72" pos:column="39"/></name></expr></argument>)<pos:position pos:line="72" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">DeactivateRegistered<pos:position pos:line="73" pos:column="25"/></name><argument_list pos:line="73" pos:column="25">(<argument><expr><name pos:line="73" pos:column="26">rrClaimMemoryNeeds<pos:position pos:line="73" pos:column="44"/></name></expr></argument>)<pos:position pos:line="73" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">DeactivateRegistered<pos:position pos:line="74" pos:column="25"/></name><argument_list pos:line="74" pos:column="25">(<argument><expr><name pos:line="74" pos:column="26">rrFinalizeConfig<pos:position pos:line="74" pos:column="42"/></name></expr></argument>)<pos:position pos:line="74" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="44"/></expr_stmt>
<cpp:if pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">if<pos:position pos:line="75" pos:column="4"/></cpp:directive> <expr><name pos:line="75" pos:column="5">LEAK_CHECK_MODE<pos:position pos:line="75" pos:column="20"/></name> <operator pos:line="75" pos:column="21">&amp;&amp;<pos:position pos:line="75" pos:column="31"/></operator> <literal type="number" pos:line="75" pos:column="24">0<pos:position pos:line="75" pos:column="25"/></literal></expr></cpp:if> <comment type="block" pos:line="75" pos:column="26">/* doesn't work at the moment */</comment>

    <expr_stmt><expr><call><name pos:line="77" pos:column="5">configFreeMemory<pos:position pos:line="77" pos:column="21"/></name><argument_list pos:line="77" pos:column="21">()<pos:position pos:line="77" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">storeFreeMemory<pos:position pos:line="78" pos:column="20"/></name><argument_list pos:line="78" pos:column="20">()<pos:position pos:line="78" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="23"/></expr_stmt>
    <comment type="block" pos:line="79" pos:column="5">/*stmemFreeMemory(); */</comment>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">netdbFreeMemory<pos:position pos:line="80" pos:column="20"/></name><argument_list pos:line="80" pos:column="20">()<pos:position pos:line="80" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">ipcacheFreeMemory<pos:position pos:line="81" pos:column="22"/></name><argument_list pos:line="81" pos:column="22">()<pos:position pos:line="81" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">fqdncacheFreeMemory<pos:position pos:line="82" pos:column="24"/></name><argument_list pos:line="82" pos:column="24">()<pos:position pos:line="82" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">asnFreeMemory<pos:position pos:line="83" pos:column="18"/></name><argument_list pos:line="83" pos:column="18">()<pos:position pos:line="83" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">clientdbFreeMemory<pos:position pos:line="84" pos:column="23"/></name><argument_list pos:line="84" pos:column="23">()<pos:position pos:line="84" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">httpHeaderCleanModule<pos:position pos:line="85" pos:column="26"/></name><argument_list pos:line="85" pos:column="26">()<pos:position pos:line="85" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">statFreeMemory<pos:position pos:line="86" pos:column="19"/></name><argument_list pos:line="86" pos:column="19">()<pos:position pos:line="86" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">eventFreeMemory<pos:position pos:line="87" pos:column="20"/></name><argument_list pos:line="87" pos:column="20">()<pos:position pos:line="87" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">mimeFreeMemory<pos:position pos:line="88" pos:column="19"/></name><argument_list pos:line="88" pos:column="19">()<pos:position pos:line="88" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">errorClean<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">()<pos:position pos:line="89" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="18"/></expr_stmt>
<cpp:endif pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">endif<pos:position pos:line="90" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="line" pos:line="91" pos:column="5">// clear StoreController</comment>
    <expr_stmt><expr><call><name><name pos:line="92" pos:column="5">Store<pos:position pos:line="92" pos:column="10"/></name><operator pos:line="92" pos:column="10">::<pos:position pos:line="92" pos:column="12"/></operator><name pos:line="92" pos:column="12">Root<pos:position pos:line="92" pos:column="16"/></name></name><argument_list pos:line="92" pos:column="16">(<argument><expr><name pos:line="92" pos:column="17">NULL<pos:position pos:line="92" pos:column="21"/></name></expr></argument>)<pos:position pos:line="92" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="94" pos:column="5">fdDumpOpen<pos:position pos:line="94" pos:column="15"/></name><argument_list pos:line="94" pos:column="15">()<pos:position pos:line="94" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="18"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="96" pos:column="5">comm_exit<pos:position pos:line="96" pos:column="14"/></name><argument_list pos:line="96" pos:column="14">()<pos:position pos:line="96" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="17"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="98" pos:column="5">memClean<pos:position pos:line="98" pos:column="13"/></name><argument_list pos:line="98" pos:column="13">()<pos:position pos:line="98" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="16"/></expr_stmt>

<cpp:if pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">if<pos:position pos:line="100" pos:column="4"/></cpp:directive> <expr><name pos:line="100" pos:column="5">MEM_GEN_TRACE<pos:position pos:line="100" pos:column="18"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="102" pos:column="5">log_trace_done<pos:position pos:line="102" pos:column="19"/></name><argument_list pos:line="102" pos:column="19">()<pos:position pos:line="102" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="22"/></expr_stmt>

<cpp:endif pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">endif<pos:position pos:line="104" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="106" pos:column="5">if <condition pos:line="106" pos:column="8">(<expr><call><name pos:line="106" pos:column="9">IamPrimaryProcess<pos:position pos:line="106" pos:column="26"/></name><argument_list pos:line="106" pos:column="26">()<pos:position pos:line="106" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="29"/></condition><then pos:line="106" pos:column="29"> <block pos:line="106" pos:column="30">{
        <if pos:line="107" pos:column="9">if <condition pos:line="107" pos:column="12">(<expr><name><name pos:line="107" pos:column="13">Config<pos:position pos:line="107" pos:column="19"/></name><operator pos:line="107" pos:column="19">.<pos:position pos:line="107" pos:column="20"/></operator><name pos:line="107" pos:column="20">pidFilename<pos:position pos:line="107" pos:column="31"/></name></name> <operator pos:line="107" pos:column="32">&amp;&amp;<pos:position pos:line="107" pos:column="42"/></operator> <call><name pos:line="107" pos:column="35">strcmp<pos:position pos:line="107" pos:column="41"/></name><argument_list pos:line="107" pos:column="41">(<argument><expr><name><name pos:line="107" pos:column="42">Config<pos:position pos:line="107" pos:column="48"/></name><operator pos:line="107" pos:column="48">.<pos:position pos:line="107" pos:column="49"/></operator><name pos:line="107" pos:column="49">pidFilename<pos:position pos:line="107" pos:column="60"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="62">"none"<pos:position pos:line="107" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="69"/></argument_list></call> <operator pos:line="107" pos:column="70">!=<pos:position pos:line="107" pos:column="72"/></operator> <literal type="number" pos:line="107" pos:column="73">0<pos:position pos:line="107" pos:column="74"/></literal></expr>)<pos:position pos:line="107" pos:column="75"/></condition><then pos:line="107" pos:column="75"> <block pos:line="107" pos:column="76">{
            <expr_stmt><expr><call><name pos:line="108" pos:column="13">enter_suid<pos:position pos:line="108" pos:column="23"/></name><argument_list pos:line="108" pos:column="23">()<pos:position pos:line="108" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">safeunlink<pos:position pos:line="109" pos:column="23"/></name><argument_list pos:line="109" pos:column="23">(<argument><expr><name><name pos:line="109" pos:column="24">Config<pos:position pos:line="109" pos:column="30"/></name><operator pos:line="109" pos:column="30">.<pos:position pos:line="109" pos:column="31"/></operator><name pos:line="109" pos:column="31">pidFilename<pos:position pos:line="109" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="109" pos:column="44">0<pos:position pos:line="109" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">leave_suid<pos:position pos:line="110" pos:column="23"/></name><argument_list pos:line="110" pos:column="23">()<pos:position pos:line="110" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="111" pos:column="10"/></block></then></if>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="114" pos:column="5">debugs<pos:position pos:line="114" pos:column="11"/></name><argument_list pos:line="114" pos:column="11">(<argument><expr><literal type="number" pos:line="114" pos:column="12">1<pos:position pos:line="114" pos:column="13"/></literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="15">DBG_IMPORTANT<pos:position pos:line="114" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="30">"Squid Cache (Version "<pos:position pos:line="114" pos:column="53"/></literal> <operator pos:line="114" pos:column="54">&lt;&lt;<pos:position pos:line="114" pos:column="62"/></operator> <name pos:line="114" pos:column="57">version_string<pos:position pos:line="114" pos:column="71"/></name> <operator pos:line="114" pos:column="72">&lt;&lt;<pos:position pos:line="114" pos:column="80"/></operator> <literal type="string" pos:line="114" pos:column="75">"): Exiting normally."<pos:position pos:line="114" pos:column="97"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="99"/></expr_stmt>

    <comment type="block" pos:line="116" pos:column="5">/*
     * DPW 2006-10-23
     * We used to fclose(debug_log) here if it was set, but then
     * we forgot to set it to NULL.  That caused some coredumps
     * because exit() ends up calling a bunch of destructors and
     * such.   So rather than forcing the debug_log to close, we'll
     * leave it open so that those destructors can write some
     * debugging if necessary.  The file will be closed anyway when
     * the process truly exits.
     */</comment>

    <expr_stmt><expr><call><name pos:line="127" pos:column="5">exit<pos:position pos:line="127" pos:column="9"/></name><argument_list pos:line="127" pos:column="9">(<argument><expr><name pos:line="127" pos:column="10">shutdown_status<pos:position pos:line="127" pos:column="25"/></name></expr></argument>)<pos:position pos:line="127" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="27"/></expr_stmt>
}<pos:position pos:line="128" pos:column="2"/></block></function></unit>
