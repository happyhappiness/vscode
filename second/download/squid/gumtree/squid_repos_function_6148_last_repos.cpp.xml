<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6148_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">logfileHandleWrite<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">int<pos:position pos:line="2" pos:column="23"/></name></type></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">void<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">data<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">Logfile<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">lf<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><cast type="static" pos:line="4" pos:column="19">static_cast<argument_list type="generic" pos:line="4" pos:column="30">&lt;<argument><expr><name pos:line="4" pos:column="31">Logfile<pos:position pos:line="4" pos:column="38"/></name> <operator pos:line="4" pos:column="39">*<pos:position pos:line="4" pos:column="40"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="44"/></argument_list><argument_list pos:line="4" pos:column="41">(<argument><expr><name pos:line="4" pos:column="42">data<pos:position pos:line="4" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4" pos:column="47"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">l_daemon_t<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">ll<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><cast type="static" pos:line="5" pos:column="22">static_cast<argument_list type="generic" pos:line="5" pos:column="33">&lt;<argument><expr><name pos:line="5" pos:column="34">l_daemon_t<pos:position pos:line="5" pos:column="44"/></name> <operator pos:line="5" pos:column="45">*<pos:position pos:line="5" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="5" pos:column="50"/></argument_list><argument_list pos:line="5" pos:column="47">(<argument><expr><name><name pos:line="5" pos:column="48">lf<pos:position pos:line="5" pos:column="50"/></name><operator pos:line="5" pos:column="50">-&gt;<pos:position pos:line="5" pos:column="55"/></operator><name pos:line="5" pos:column="52">data<pos:position pos:line="5" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="57"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="5" pos:column="58"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/*
     * We'll try writing the first entry until its done - if we
     * get a partial write then we'll re-schedule until its completed.
     * Its naive but it'll do for now.
     */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><name><name pos:line="12" pos:column="10">ll<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">bufs<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">.<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="19">head<pos:position pos:line="12" pos:column="23"/></name></name></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24"> <comment type="line" pos:line="12" pos:column="25">// abort if there is nothing pending right now.</comment>
        <block type="pseudo"><return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">logfile_buffer_t<pos:position pos:line="15" pos:column="21"/></name> <modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier></type><name pos:line="15" pos:column="23">b<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">= <expr><cast type="static" pos:line="15" pos:column="27">static_cast<argument_list type="generic" pos:line="15" pos:column="38">&lt;<argument><expr><name pos:line="15" pos:column="39">logfile_buffer_t<pos:position pos:line="15" pos:column="55"/></name><operator pos:line="15" pos:column="55">*<pos:position pos:line="15" pos:column="56"/></operator></expr></argument>&gt;<pos:position pos:line="15" pos:column="60"/></argument_list><argument_list pos:line="15" pos:column="57">(<argument><expr><name><name pos:line="15" pos:column="58">ll<pos:position pos:line="15" pos:column="60"/></name><operator pos:line="15" pos:column="60">-&gt;<pos:position pos:line="15" pos:column="65"/></operator><name pos:line="15" pos:column="62">bufs<pos:position pos:line="15" pos:column="66"/></name><operator pos:line="15" pos:column="66">.<pos:position pos:line="15" pos:column="67"/></operator><name pos:line="15" pos:column="67">head<pos:position pos:line="15" pos:column="71"/></name><operator pos:line="15" pos:column="71">-&gt;<pos:position pos:line="15" pos:column="76"/></operator><name pos:line="15" pos:column="73">data<pos:position pos:line="15" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="78"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="15" pos:column="79"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">assert<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">b<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">!=<pos:position pos:line="16" pos:column="16"/></operator> <name pos:line="16" pos:column="17">NULL<pos:position pos:line="16" pos:column="21"/></name></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">ll<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">-&gt;<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="9">flush_pending<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <literal type="number" pos:line="17" pos:column="25">0<pos:position pos:line="17" pos:column="26"/></literal></expr>;<pos:position pos:line="17" pos:column="27"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">ret<pos:position pos:line="19" pos:column="12"/></name> <init pos:line="19" pos:column="13">= <expr><call><name pos:line="19" pos:column="15">FD_WRITE_METHOD<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name><name pos:line="19" pos:column="31">ll<pos:position pos:line="19" pos:column="33"/></name><operator pos:line="19" pos:column="33">-&gt;<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="35">wfd<pos:position pos:line="19" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="40">b<pos:position pos:line="19" pos:column="41"/></name><operator pos:line="19" pos:column="41">-&gt;<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="43">buf<pos:position pos:line="19" pos:column="46"/></name></name> <operator pos:line="19" pos:column="47">+<pos:position pos:line="19" pos:column="48"/></operator> <name><name pos:line="19" pos:column="49">b<pos:position pos:line="19" pos:column="50"/></name><operator pos:line="19" pos:column="50">-&gt;<pos:position pos:line="19" pos:column="55"/></operator><name pos:line="19" pos:column="52">written_len<pos:position pos:line="19" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="65">b<pos:position pos:line="19" pos:column="66"/></name><operator pos:line="19" pos:column="66">-&gt;<pos:position pos:line="19" pos:column="71"/></operator><name pos:line="19" pos:column="68">len<pos:position pos:line="19" pos:column="71"/></name></name> <operator pos:line="19" pos:column="72">-<pos:position pos:line="19" pos:column="73"/></operator> <name><name pos:line="19" pos:column="74">b<pos:position pos:line="19" pos:column="75"/></name><operator pos:line="19" pos:column="75">-&gt;<pos:position pos:line="19" pos:column="80"/></operator><name pos:line="19" pos:column="77">written_len<pos:position pos:line="19" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="90"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">int<pos:position pos:line="20" pos:column="8"/></name></type> <name pos:line="20" pos:column="9">xerrno<pos:position pos:line="20" pos:column="15"/></name> <init pos:line="20" pos:column="16">= <expr><name pos:line="20" pos:column="18">errno<pos:position pos:line="20" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">debugs<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><literal type="number" pos:line="21" pos:column="12">50<pos:position pos:line="21" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="16">3<pos:position pos:line="21" pos:column="17"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="19">lf<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">-&gt;<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="23">path<pos:position pos:line="21" pos:column="27"/></name></name> <operator pos:line="21" pos:column="28">&lt;&lt;<pos:position pos:line="21" pos:column="36"/></operator> <literal type="string" pos:line="21" pos:column="31">": write returned "<pos:position pos:line="21" pos:column="50"/></literal> <operator pos:line="21" pos:column="51">&lt;&lt;<pos:position pos:line="21" pos:column="59"/></operator> <name pos:line="21" pos:column="54">ret<pos:position pos:line="21" pos:column="57"/></name></expr></argument>)<pos:position pos:line="21" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="59"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">ret<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">&lt;<pos:position pos:line="22" pos:column="17"/></operator> <literal type="number" pos:line="22" pos:column="15">0<pos:position pos:line="22" pos:column="16"/></literal></expr>)<pos:position pos:line="22" pos:column="17"/></condition><then pos:line="22" pos:column="17"> <block pos:line="22" pos:column="18">{
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">ignoreErrno<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">xerrno<pos:position pos:line="23" pos:column="31"/></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="33"/></condition><then pos:line="23" pos:column="33"> <block pos:line="23" pos:column="34">{
            <comment type="block" pos:line="24" pos:column="13">/* something temporary */</comment>
            <expr_stmt><expr><call><name><name pos:line="25" pos:column="13">Comm<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">::<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="19">SetSelect<pos:position pos:line="25" pos:column="28"/></name></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name><name pos:line="25" pos:column="29">ll<pos:position pos:line="25" pos:column="31"/></name><operator pos:line="25" pos:column="31">-&gt;<pos:position pos:line="25" pos:column="36"/></operator><name pos:line="25" pos:column="33">wfd<pos:position pos:line="25" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">COMM_SELECT_WRITE<pos:position pos:line="25" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="57">logfileHandleWrite<pos:position pos:line="25" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="77">lf<pos:position pos:line="25" pos:column="79"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="81">0<pos:position pos:line="25" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="84"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="26" pos:column="13">ll<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">-&gt;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="17">flush_pending<pos:position pos:line="26" pos:column="30"/></name></name> <operator pos:line="26" pos:column="31">=<pos:position pos:line="26" pos:column="32"/></operator> <literal type="number" pos:line="26" pos:column="33">1<pos:position pos:line="26" pos:column="34"/></literal></expr>;<pos:position pos:line="26" pos:column="35"/></expr_stmt>
            <return pos:line="27" pos:column="13">return;<pos:position pos:line="27" pos:column="20"/></return>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">50<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="20">DBG_IMPORTANT<pos:position pos:line="29" pos:column="33"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="29" pos:column="34">"logfileHandleWrite: "<pos:position pos:line="29" pos:column="56"/></literal> <operator pos:line="29" pos:column="57">&lt;&lt;<pos:position pos:line="29" pos:column="65"/></operator> <name><name pos:line="29" pos:column="60">lf<pos:position pos:line="29" pos:column="62"/></name><operator pos:line="29" pos:column="62">-&gt;<pos:position pos:line="29" pos:column="67"/></operator><name pos:line="29" pos:column="64">path<pos:position pos:line="29" pos:column="68"/></name></name> <operator pos:line="29" pos:column="69">&lt;&lt;<pos:position pos:line="29" pos:column="77"/></operator> <literal type="string" pos:line="29" pos:column="72">": error writing ("<pos:position pos:line="29" pos:column="91"/></literal> <operator pos:line="29" pos:column="92">&lt;&lt;<pos:position pos:line="29" pos:column="100"/></operator> <call><name pos:line="29" pos:column="95">xstrerr<pos:position pos:line="29" pos:column="102"/></name><argument_list pos:line="29" pos:column="102">(<argument><expr><name pos:line="29" pos:column="103">xerrno<pos:position pos:line="29" pos:column="109"/></name></expr></argument>)<pos:position pos:line="29" pos:column="110"/></argument_list></call> <operator pos:line="29" pos:column="111">&lt;&lt;<pos:position pos:line="29" pos:column="119"/></operator> <literal type="string" pos:line="29" pos:column="114">")"<pos:position pos:line="29" pos:column="117"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="119"/></expr_stmt>
        <comment type="block" pos:line="30" pos:column="9">/* XXX should handle this better */</comment>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">fatal<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><literal type="string" pos:line="31" pos:column="15">"I don't handle this error well!"<pos:position pos:line="31" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">ret<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">==<pos:position pos:line="33" pos:column="15"/></operator> <literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr>)<pos:position pos:line="33" pos:column="18"/></condition><then pos:line="33" pos:column="18"> <block pos:line="33" pos:column="19">{
        <comment type="block" pos:line="34" pos:column="9">/* error? */</comment>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">50<pos:position pos:line="35" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="20">DBG_IMPORTANT<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="35">"logfileHandleWrite: "<pos:position pos:line="35" pos:column="57"/></literal> <operator pos:line="35" pos:column="58">&lt;&lt;<pos:position pos:line="35" pos:column="66"/></operator> <name><name pos:line="35" pos:column="61">lf<pos:position pos:line="35" pos:column="63"/></name><operator pos:line="35" pos:column="63">-&gt;<pos:position pos:line="35" pos:column="68"/></operator><name pos:line="35" pos:column="65">path<pos:position pos:line="35" pos:column="69"/></name></name> <operator pos:line="35" pos:column="70">&lt;&lt;<pos:position pos:line="35" pos:column="78"/></operator> <literal type="string" pos:line="35" pos:column="73">": wrote 0 bytes?"<pos:position pos:line="35" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="93"/></expr_stmt>
        <comment type="block" pos:line="36" pos:column="9">/* XXX should handle this better */</comment>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">fatal<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><literal type="string" pos:line="37" pos:column="15">"I don't handle this error well!"<pos:position pos:line="37" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="39" pos:column="5">/* ret &gt; 0, so something was written */</comment>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">b<pos:position pos:line="40" pos:column="6"/></name><operator pos:line="40" pos:column="6">-&gt;<pos:position pos:line="40" pos:column="11"/></operator><name pos:line="40" pos:column="8">written_len<pos:position pos:line="40" pos:column="19"/></name></name> <operator pos:line="40" pos:column="20">+=<pos:position pos:line="40" pos:column="22"/></operator> <name pos:line="40" pos:column="23">ret<pos:position pos:line="40" pos:column="26"/></name></expr>;<pos:position pos:line="40" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">assert<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><name><name pos:line="41" pos:column="12">b<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">-&gt;<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="15">written_len<pos:position pos:line="41" pos:column="26"/></name></name> <operator pos:line="41" pos:column="27">&lt;=<pos:position pos:line="41" pos:column="32"/></operator> <name><name pos:line="41" pos:column="30">b<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">-&gt;<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="33">len<pos:position pos:line="41" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="38"/></expr_stmt>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name><name pos:line="42" pos:column="9">b<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">-&gt;<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="12">written_len<pos:position pos:line="42" pos:column="23"/></name></name> <operator pos:line="42" pos:column="24">==<pos:position pos:line="42" pos:column="26"/></operator> <name><name pos:line="42" pos:column="27">b<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">-&gt;<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="30">len<pos:position pos:line="42" pos:column="33"/></name></name></expr>)<pos:position pos:line="42" pos:column="34"/></condition><then pos:line="42" pos:column="34"> <block pos:line="42" pos:column="35">{
        <comment type="block" pos:line="43" pos:column="9">/* written the whole buffer! */</comment>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">logfileFreeBuffer<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">lf<pos:position pos:line="44" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="31">b<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="45" pos:column="9">b<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <name pos:line="45" pos:column="13">NULL<pos:position pos:line="45" pos:column="17"/></name></expr>;<pos:position pos:line="45" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="47" pos:column="5">/* Is there more to write? */</comment>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><operator pos:line="48" pos:column="9">!<pos:position pos:line="48" pos:column="10"/></operator><name><name pos:line="48" pos:column="10">ll<pos:position pos:line="48" pos:column="12"/></name><operator pos:line="48" pos:column="12">-&gt;<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="14">bufs<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">.<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="19">head<pos:position pos:line="48" pos:column="23"/></name></name></expr>)<pos:position pos:line="48" pos:column="24"/></condition><then pos:line="48" pos:column="24">
        <block type="pseudo"><return pos:line="49" pos:column="9">return;<pos:position pos:line="49" pos:column="16"/></return></block></then></if>
    <comment type="block" pos:line="50" pos:column="5">/* there is, so schedule more */</comment>

    <expr_stmt><expr><call><name><name pos:line="52" pos:column="5">Comm<pos:position pos:line="52" pos:column="9"/></name><operator pos:line="52" pos:column="9">::<pos:position pos:line="52" pos:column="11"/></operator><name pos:line="52" pos:column="11">SetSelect<pos:position pos:line="52" pos:column="20"/></name></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name><name pos:line="52" pos:column="21">ll<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">-&gt;<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="25">wfd<pos:position pos:line="52" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="30">COMM_SELECT_WRITE<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="49">logfileHandleWrite<pos:position pos:line="52" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="69">lf<pos:position pos:line="52" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="73">0<pos:position pos:line="52" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="76"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">ll<pos:position pos:line="53" pos:column="7"/></name><operator pos:line="53" pos:column="7">-&gt;<pos:position pos:line="53" pos:column="12"/></operator><name pos:line="53" pos:column="9">flush_pending<pos:position pos:line="53" pos:column="22"/></name></name> <operator pos:line="53" pos:column="23">=<pos:position pos:line="53" pos:column="24"/></operator> <literal type="number" pos:line="53" pos:column="25">1<pos:position pos:line="53" pos:column="26"/></literal></expr>;<pos:position pos:line="53" pos:column="27"/></expr_stmt>
    <return pos:line="54" pos:column="5">return;<pos:position pos:line="54" pos:column="12"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
