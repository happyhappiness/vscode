<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5162_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">SwapDir<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">writeError<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">StoreEntry<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">&amp;<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="39">e<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Do not abortWriting here. The entry should keep the write lock</comment>
    <comment type="line" pos:line="5" pos:column="5">// instead of losing association with the store and confusing core.</comment>
    <expr_stmt><expr><call><name><name pos:line="6" pos:column="5">map<pos:position pos:line="6" pos:column="8"/></name><operator pos:line="6" pos:column="8">-&gt;<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="10">freeEntry<pos:position pos:line="6" pos:column="19"/></name></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name><name pos:line="6" pos:column="20">e<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">.<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">swap_filen<pos:position pos:line="6" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="34"/></expr_stmt> <comment type="line" pos:line="6" pos:column="35">// will mark as unusable, just in case</comment>

    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">Store<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">::<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="12">Root<pos:position pos:line="8" pos:column="16"/></name></name><argument_list pos:line="8" pos:column="16">()<pos:position pos:line="8" pos:column="18"/></argument_list></call><operator pos:line="8" pos:column="18">.<pos:position pos:line="8" pos:column="19"/></operator><call><name pos:line="8" pos:column="19">transientsAbandon<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name pos:line="8" pos:column="37">e<pos:position pos:line="8" pos:column="38"/></name></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="40"/></expr_stmt>

    <comment type="line" pos:line="10" pos:column="5">// All callers must also call IoState callback, to propagate the error.</comment>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
