<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3437_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">clientReplyContext<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">storeNotOKTransferDone<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">()<pos:position pos:line="2" pos:column="45"/></parameter_list> <specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/*
     * Now, handle STORE_PENDING objects
     */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">MemObject<pos:position pos:line="7" pos:column="14"/></name> <modifier pos:line="7" pos:column="15">*<pos:position pos:line="7" pos:column="16"/></modifier></type><name pos:line="7" pos:column="16">mem<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><call><name><name pos:line="7" pos:column="22">http<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">storeEntry<pos:position pos:line="7" pos:column="38"/></name></name><argument_list pos:line="7" pos:column="38">()<pos:position pos:line="7" pos:column="40"/></argument_list></call><operator pos:line="7" pos:column="40">-&gt;<pos:position pos:line="7" pos:column="45"/></operator><name pos:line="7" pos:column="42">mem_obj<pos:position pos:line="7" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="50"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">mem<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">!=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">NULL<pos:position pos:line="8" pos:column="23"/></name></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">assert<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">http<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">request<pos:position pos:line="9" pos:column="25"/></name></name> <operator pos:line="9" pos:column="26">!=<pos:position pos:line="9" pos:column="28"/></operator> <name pos:line="9" pos:column="29">NULL<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="35"/></expr_stmt>
    <comment type="block" pos:line="10" pos:column="5">/* mem-&gt;reply was wrong because it uses the UPSTREAM header length!!! */</comment>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">HttpReply<pos:position pos:line="11" pos:column="14"/></name> <specifier pos:line="11" pos:column="15">const<pos:position pos:line="11" pos:column="20"/></specifier> <modifier pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></modifier></type><name pos:line="11" pos:column="22">curReply<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><call><name><name pos:line="11" pos:column="33">mem<pos:position pos:line="11" pos:column="36"/></name><operator pos:line="11" pos:column="36">-&gt;<pos:position pos:line="11" pos:column="41"/></operator><name pos:line="11" pos:column="38">getReply<pos:position pos:line="11" pos:column="46"/></name></name><argument_list pos:line="11" pos:column="46">()<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="49"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">headers_sz<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">==<pos:position pos:line="13" pos:column="22"/></operator> <literal type="number" pos:line="13" pos:column="23">0<pos:position pos:line="13" pos:column="24"/></literal></expr>)<pos:position pos:line="13" pos:column="25"/></condition><then pos:line="13" pos:column="25">
        <comment type="block" pos:line="14" pos:column="9">/* haven't found end of headers yet */</comment>
        <block type="pseudo"><return pos:line="15" pos:column="9">return <expr><literal type="number" pos:line="15" pos:column="16">0<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="17" pos:column="5">/*
     * Figure out how much data we are supposed to send.
     * If we are sending a body and we don't have a content-length,
     * then we must wait for the object to become STORE_OK.
     */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name><name pos:line="22" pos:column="9">curReply<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">-&gt;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="19">content_length<pos:position pos:line="22" pos:column="33"/></name></name> <operator pos:line="22" pos:column="34">&lt;<pos:position pos:line="22" pos:column="38"/></operator> <literal type="number" pos:line="22" pos:column="36">0<pos:position pos:line="22" pos:column="37"/></literal></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38">
        <block type="pseudo"><return pos:line="23" pos:column="9">return <expr><literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal></expr>;<pos:position pos:line="23" pos:column="18"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="25" pos:column="5">int64_t<pos:position pos:line="25" pos:column="12"/></name></type> <name pos:line="25" pos:column="13">expectedLength<pos:position pos:line="25" pos:column="27"/></name> <init pos:line="25" pos:column="28">= <expr><name><name pos:line="25" pos:column="30">curReply<pos:position pos:line="25" pos:column="38"/></name><operator pos:line="25" pos:column="38">-&gt;<pos:position pos:line="25" pos:column="43"/></operator><name pos:line="25" pos:column="40">content_length<pos:position pos:line="25" pos:column="54"/></name></name> <operator pos:line="25" pos:column="55">+<pos:position pos:line="25" pos:column="56"/></operator> <name><name pos:line="25" pos:column="57">http<pos:position pos:line="25" pos:column="61"/></name><operator pos:line="25" pos:column="61">-&gt;<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="63">out<pos:position pos:line="25" pos:column="66"/></name><operator pos:line="25" pos:column="66">.<pos:position pos:line="25" pos:column="67"/></operator><name pos:line="25" pos:column="67">headers_sz<pos:position pos:line="25" pos:column="77"/></name></name></expr></init></decl>;<pos:position pos:line="25" pos:column="78"/></decl_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">http<pos:position pos:line="27" pos:column="13"/></name><operator pos:line="27" pos:column="13">-&gt;<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="15">out<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">.<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">size<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">&lt;<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="26">expectedLength<pos:position pos:line="27" pos:column="40"/></name></expr>)<pos:position pos:line="27" pos:column="41"/></condition><then pos:line="27" pos:column="41">
        <block type="pseudo"><return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return></block></then>
    <else pos:line="29" pos:column="5">else <block pos:line="29" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">88<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="30" pos:column="19">3<pos:position pos:line="30" pos:column="20"/></literal></expr></argument>,<argument><expr><name pos:line="30" pos:column="21">HERE<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">&lt;&lt;<pos:position pos:line="30" pos:column="34"/></operator> <literal type="string" pos:line="30" pos:column="29">"storeNotOKTransferDone "<pos:position pos:line="30" pos:column="54"/></literal> <operator pos:line="30" pos:column="55">&lt;&lt;<pos:position pos:line="30" pos:column="63"/></operator>
               <literal type="string" pos:line="31" pos:column="16">" out.size="<pos:position pos:line="31" pos:column="28"/></literal> <operator pos:line="31" pos:column="29">&lt;&lt;<pos:position pos:line="31" pos:column="37"/></operator> <name><name pos:line="31" pos:column="32">http<pos:position pos:line="31" pos:column="36"/></name><operator pos:line="31" pos:column="36">-&gt;<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="38">out<pos:position pos:line="31" pos:column="41"/></name><operator pos:line="31" pos:column="41">.<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="42">size<pos:position pos:line="31" pos:column="46"/></name></name> <operator pos:line="31" pos:column="47">&lt;&lt;<pos:position pos:line="31" pos:column="55"/></operator>
               <literal type="string" pos:line="32" pos:column="16">" expectedLength="<pos:position pos:line="32" pos:column="34"/></literal> <operator pos:line="32" pos:column="35">&lt;&lt;<pos:position pos:line="32" pos:column="43"/></operator> <name pos:line="32" pos:column="38">expectedLength<pos:position pos:line="32" pos:column="52"/></name></expr></argument>)<pos:position pos:line="32" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="54"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">1<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
