<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2625_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">writePidFile<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">void<pos:position pos:line="2" pos:column="18"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">fd<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">f<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">mode_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">old_umask<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">buf<pos:position pos:line="7" pos:column="13"/></name><index pos:line="7" pos:column="13">[<expr><literal type="number" pos:line="7" pos:column="14">32<pos:position pos:line="7" pos:column="16"/></literal></expr>]<pos:position pos:line="7" pos:column="17"/></index></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name pos:line="9" pos:column="10">IamPrimaryProcess<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">()<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30">
        <block type="pseudo"><return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">f<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <name><name pos:line="12" pos:column="14">Config<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">.<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">pidFilename<pos:position pos:line="12" pos:column="32"/></name></name><operator pos:line="12" pos:column="32">)<pos:position pos:line="12" pos:column="33"/></operator> <operator pos:line="12" pos:column="34">==<pos:position pos:line="12" pos:column="36"/></operator> <name pos:line="12" pos:column="37">NULL<pos:position pos:line="12" pos:column="41"/></name></expr>)<pos:position pos:line="12" pos:column="42"/></condition><then pos:line="12" pos:column="42">
        <block type="pseudo"><return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">strcmp<pos:position pos:line="15" pos:column="16"/></name><argument_list pos:line="15" pos:column="16">(<argument><expr><name><name pos:line="15" pos:column="17">Config<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">.<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">pidFilename<pos:position pos:line="15" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="37">"none"<pos:position pos:line="15" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="45"/></condition><then pos:line="15" pos:column="45">
        <block type="pseudo"><return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">enter_suid<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">()<pos:position pos:line="18" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>

    <expr_stmt><expr><name pos:line="20" pos:column="5">old_umask<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <call><name pos:line="20" pos:column="17">umask<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><literal type="number" pos:line="20" pos:column="23">022<pos:position pos:line="20" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name pos:line="22" pos:column="5">fd<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator> <call><name pos:line="22" pos:column="10">file_open<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">f<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="23">O_WRONLY<pos:position pos:line="22" pos:column="31"/></name> <operator pos:line="22" pos:column="32">|<pos:position pos:line="22" pos:column="33"/></operator> <name pos:line="22" pos:column="34">O_CREAT<pos:position pos:line="22" pos:column="41"/></name> <operator pos:line="22" pos:column="42">|<pos:position pos:line="22" pos:column="43"/></operator> <name pos:line="22" pos:column="44">O_TRUNC<pos:position pos:line="22" pos:column="51"/></name> <operator pos:line="22" pos:column="52">|<pos:position pos:line="22" pos:column="53"/></operator> <name pos:line="22" pos:column="54">O_TEXT<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">umask<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><name pos:line="24" pos:column="11">old_umask<pos:position pos:line="24" pos:column="20"/></name></expr></argument>)<pos:position pos:line="24" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">leave_suid<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">()<pos:position pos:line="26" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="18"/></expr_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">fd<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">&lt;<pos:position pos:line="28" pos:column="16"/></operator> <literal type="number" pos:line="28" pos:column="14">0<pos:position pos:line="28" pos:column="15"/></literal></expr>)<pos:position pos:line="28" pos:column="16"/></condition><then pos:line="28" pos:column="16"> <block pos:line="28" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">50<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="20">DBG_CRITICAL<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="34">""<pos:position pos:line="29" pos:column="36"/></literal> <operator pos:line="29" pos:column="37">&lt;&lt;<pos:position pos:line="29" pos:column="45"/></operator> <name pos:line="29" pos:column="40">f<pos:position pos:line="29" pos:column="41"/></name> <operator pos:line="29" pos:column="42">&lt;&lt;<pos:position pos:line="29" pos:column="50"/></operator> <literal type="string" pos:line="29" pos:column="45">": "<pos:position pos:line="29" pos:column="49"/></literal> <operator pos:line="29" pos:column="50">&lt;&lt;<pos:position pos:line="29" pos:column="58"/></operator> <call><name pos:line="29" pos:column="53">xstrerror<pos:position pos:line="29" pos:column="62"/></name><argument_list pos:line="29" pos:column="62">()<pos:position pos:line="29" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debug_trap<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><literal type="string" pos:line="30" pos:column="20">"Could not write pid file"<pos:position pos:line="30" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="48"/></expr_stmt>
        <return pos:line="31" pos:column="9">return;<pos:position pos:line="31" pos:column="16"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">snprintf<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">buf<pos:position pos:line="34" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="19">32<pos:position pos:line="34" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="23">"%d\n"<pos:position pos:line="34" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="31">(<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="32">int<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">)<pos:position pos:line="34" pos:column="36"/></operator> <call><name pos:line="34" pos:column="37">getpid<pos:position pos:line="34" pos:column="43"/></name><argument_list pos:line="34" pos:column="43">()<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">FD_WRITE_METHOD<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">fd<pos:position pos:line="35" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="25">buf<pos:position pos:line="35" pos:column="28"/></name></expr></argument>, <argument><expr><call><name pos:line="35" pos:column="30">strlen<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><name pos:line="35" pos:column="37">buf<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">file_close<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><name pos:line="36" pos:column="16">fd<pos:position pos:line="36" pos:column="18"/></name></expr></argument>)<pos:position pos:line="36" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
