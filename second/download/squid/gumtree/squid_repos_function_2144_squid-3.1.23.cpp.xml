<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2144_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ServerStateData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">handleMoreAdaptedBodyAvailable<pos:position pos:line="2" pos:column="48"/></name></name><parameter_list pos:line="2" pos:column="48">()<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">abortOnBadEntry<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><literal type="string" pos:line="4" pos:column="25">"entry refuses adapted body"<pos:position pos:line="4" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="55"/></condition><then pos:line="4" pos:column="55">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">entry<pos:position pos:line="7" pos:column="17"/></name></expr></argument>)<pos:position pos:line="7" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="19"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">size_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">contentSize<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><call><name><name pos:line="9" pos:column="26">adaptedBodySource<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">-&gt;<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="45">buf<pos:position pos:line="9" pos:column="48"/></name></name><argument_list pos:line="9" pos:column="48">()<pos:position pos:line="9" pos:column="50"/></argument_list></call><operator pos:line="9" pos:column="50">.<pos:position pos:line="9" pos:column="51"/></operator><call><name pos:line="9" pos:column="51">contentSize<pos:position pos:line="9" pos:column="62"/></name><argument_list pos:line="9" pos:column="62">()<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="65"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">contentSize<pos:position pos:line="11" pos:column="21"/></name></expr>)<pos:position pos:line="11" pos:column="22"/></condition><then pos:line="11" pos:column="22">
        <block type="pseudo"><return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="12" pos:column="17">// XXX: bytesWanted asserts on zero-size ranges</comment>

    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">size_t<pos:position pos:line="14" pos:column="17"/></name></type> <name pos:line="14" pos:column="18">spaceAvailable<pos:position pos:line="14" pos:column="32"/></name> <init pos:line="14" pos:column="33">= <expr><call><name><name pos:line="14" pos:column="35">entry<pos:position pos:line="14" pos:column="40"/></name><operator pos:line="14" pos:column="40">-&gt;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="42">bytesWanted<pos:position pos:line="14" pos:column="53"/></name></name><argument_list pos:line="14" pos:column="53">(<argument><expr><call><name><name pos:line="14" pos:column="54">Range<pos:position pos:line="14" pos:column="59"/></name><argument_list type="generic" pos:line="14" pos:column="59">&lt;<argument><expr><name pos:line="14" pos:column="60">size_t<pos:position pos:line="14" pos:column="66"/></name></expr></argument>&gt;<pos:position pos:line="14" pos:column="70"/></argument_list></name><argument_list pos:line="14" pos:column="67">(<argument><expr><literal type="number" pos:line="14" pos:column="68">0<pos:position pos:line="14" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="71">contentSize<pos:position pos:line="14" pos:column="82"/></name></expr></argument>)<pos:position pos:line="14" pos:column="83"/></argument_list></call></expr></argument>, <argument><expr><literal type="boolean" pos:line="14" pos:column="85">true<pos:position pos:line="14" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="90"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="91"/></decl_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">spaceAvailable<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">&lt;<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="26">contentSize<pos:position pos:line="16" pos:column="37"/></name></expr> )<pos:position pos:line="16" pos:column="39"/></condition><then pos:line="16" pos:column="39"> <block pos:line="16" pos:column="40">{
        <comment type="line" pos:line="17" pos:column="9">// No or partial body data consuming</comment>
        <typedef pos:line="18" pos:column="9">typedef <type><name><name pos:line="18" pos:column="17">NullaryMemFunT<pos:position pos:line="18" pos:column="31"/></name><argument_list type="generic" pos:line="18" pos:column="31">&lt;<argument><expr><name pos:line="18" pos:column="32">ServerStateData<pos:position pos:line="18" pos:column="47"/></name></expr></argument>&gt;<pos:position pos:line="18" pos:column="51"/></argument_list></name></type> <name pos:line="18" pos:column="49">Dialer<pos:position pos:line="18" pos:column="55"/></name>;<pos:position pos:line="18" pos:column="56"/></typedef>
        <decl_stmt><decl><type><name><name pos:line="19" pos:column="9">AsyncCall<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">::<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">Pointer<pos:position pos:line="19" pos:column="27"/></name></name></type> <name pos:line="19" pos:column="28">call<pos:position pos:line="19" pos:column="32"/></name> <init pos:line="19" pos:column="33">= <expr><call><name pos:line="19" pos:column="35">asyncCall<pos:position pos:line="19" pos:column="44"/></name><argument_list pos:line="19" pos:column="44">(<argument><expr><literal type="number" pos:line="19" pos:column="45">93<pos:position pos:line="19" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="49">5<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="52">"ServerStateData::resumeBodyStorage"<pos:position pos:line="19" pos:column="88"/></literal></expr></argument>,
                                            <argument><expr><call><name pos:line="20" pos:column="45">Dialer<pos:position pos:line="20" pos:column="51"/></name><argument_list pos:line="20" pos:column="51">(<argument><expr><name pos:line="20" pos:column="52">this<pos:position pos:line="20" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="58">&amp;<pos:position pos:line="20" pos:column="63"/></operator><name><name pos:line="20" pos:column="59">ServerStateData<pos:position pos:line="20" pos:column="74"/></name><operator pos:line="20" pos:column="74">::<pos:position pos:line="20" pos:column="76"/></operator><name pos:line="20" pos:column="76">resumeBodyStorage<pos:position pos:line="20" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="94"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="96"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">entry<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">deferProducer<pos:position pos:line="21" pos:column="29"/></name></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name pos:line="21" pos:column="30">call<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">!<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">spaceAvailable<pos:position pos:line="24" pos:column="24"/></name></expr>)<pos:position pos:line="24" pos:column="25"/></condition><then pos:line="24" pos:column="25">  <block pos:line="24" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">11<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="20">5<pos:position pos:line="25" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="23">HERE<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">&lt;&lt;<pos:position pos:line="25" pos:column="36"/></operator> <literal type="string" pos:line="25" pos:column="31">"NOT storing "<pos:position pos:line="25" pos:column="45"/></literal> <operator pos:line="25" pos:column="46">&lt;&lt;<pos:position pos:line="25" pos:column="54"/></operator> <name pos:line="25" pos:column="49">contentSize<pos:position pos:line="25" pos:column="60"/></name> <operator pos:line="25" pos:column="61">&lt;&lt;<pos:position pos:line="25" pos:column="69"/></operator> <literal type="string" pos:line="25" pos:column="64">" bytes of adapted "<pos:position pos:line="25" pos:column="84"/></literal> <operator pos:line="25" pos:column="85">&lt;&lt;<pos:position pos:line="25" pos:column="93"/></operator>
               <literal type="string" pos:line="26" pos:column="16">"response body at offset "<pos:position pos:line="26" pos:column="42"/></literal> <operator pos:line="26" pos:column="43">&lt;&lt;<pos:position pos:line="26" pos:column="51"/></operator> <call><name><name pos:line="26" pos:column="46">adaptedBodySource<pos:position pos:line="26" pos:column="63"/></name><operator pos:line="26" pos:column="63">-&gt;<pos:position pos:line="26" pos:column="68"/></operator><name pos:line="26" pos:column="65">consumedSize<pos:position pos:line="26" pos:column="77"/></name></name><argument_list pos:line="26" pos:column="77">()<pos:position pos:line="26" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="81"/></expr_stmt>
        <return pos:line="27" pos:column="9">return;<pos:position pos:line="27" pos:column="16"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">spaceAvailable<pos:position pos:line="30" pos:column="23"/></name> <operator pos:line="30" pos:column="24">&lt;<pos:position pos:line="30" pos:column="28"/></operator> <name pos:line="30" pos:column="26">contentSize<pos:position pos:line="30" pos:column="37"/></name></expr> )<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39"> <block pos:line="30" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">11<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="20">5<pos:position pos:line="31" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="23">HERE<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">&lt;&lt;<pos:position pos:line="31" pos:column="36"/></operator> <literal type="string" pos:line="31" pos:column="31">"postponing storage of "<pos:position pos:line="31" pos:column="55"/></literal> <operator pos:line="31" pos:column="56">&lt;&lt;<pos:position pos:line="31" pos:column="64"/></operator>
               <operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">contentSize<pos:position pos:line="32" pos:column="28"/></name> <operator pos:line="32" pos:column="29">-<pos:position pos:line="32" pos:column="30"/></operator> <name pos:line="32" pos:column="31">spaceAvailable<pos:position pos:line="32" pos:column="45"/></name><operator pos:line="32" pos:column="45">)<pos:position pos:line="32" pos:column="46"/></operator> <operator pos:line="32" pos:column="47">&lt;&lt;<pos:position pos:line="32" pos:column="55"/></operator> <literal type="string" pos:line="32" pos:column="50">" body bytes"<pos:position pos:line="32" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><name pos:line="33" pos:column="9">contentSize<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="23">spaceAvailable<pos:position pos:line="33" pos:column="37"/></name></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">debugs<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="number" pos:line="36" pos:column="12">11<pos:position pos:line="36" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="36" pos:column="15">5<pos:position pos:line="36" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="18">HERE<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">&lt;&lt;<pos:position pos:line="36" pos:column="31"/></operator> <literal type="string" pos:line="36" pos:column="26">"storing "<pos:position pos:line="36" pos:column="36"/></literal> <operator pos:line="36" pos:column="37">&lt;&lt;<pos:position pos:line="36" pos:column="45"/></operator> <name pos:line="36" pos:column="40">contentSize<pos:position pos:line="36" pos:column="51"/></name> <operator pos:line="36" pos:column="52">&lt;&lt;<pos:position pos:line="36" pos:column="60"/></operator> <literal type="string" pos:line="36" pos:column="55">" bytes of adapted "<pos:position pos:line="36" pos:column="75"/></literal> <operator pos:line="36" pos:column="76">&lt;&lt;<pos:position pos:line="36" pos:column="84"/></operator>
           <literal type="string" pos:line="37" pos:column="12">"response body at offset "<pos:position pos:line="37" pos:column="38"/></literal> <operator pos:line="37" pos:column="39">&lt;&lt;<pos:position pos:line="37" pos:column="47"/></operator> <call><name><name pos:line="37" pos:column="42">adaptedBodySource<pos:position pos:line="37" pos:column="59"/></name><operator pos:line="37" pos:column="59">-&gt;<pos:position pos:line="37" pos:column="64"/></operator><name pos:line="37" pos:column="61">consumedSize<pos:position pos:line="37" pos:column="73"/></name></name><argument_list pos:line="37" pos:column="73">()<pos:position pos:line="37" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="77"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="39" pos:column="5">BodyPipeCheckout<pos:position pos:line="39" pos:column="21"/></name></type> <name pos:line="39" pos:column="22">bpc<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><operator pos:line="39" pos:column="26">*<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="27">adaptedBodySource<pos:position pos:line="39" pos:column="44"/></name></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></decl>;<pos:position pos:line="39" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="40" pos:column="5">const<pos:position pos:line="40" pos:column="10"/></specifier> <name pos:line="40" pos:column="11">StoreIOBuffer<pos:position pos:line="40" pos:column="24"/></name></type> <name pos:line="40" pos:column="25">ioBuf<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><operator pos:line="40" pos:column="31">&amp;<pos:position pos:line="40" pos:column="36"/></operator><name><name pos:line="40" pos:column="32">bpc<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">.<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="36">buf<pos:position pos:line="40" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="41">currentOffset<pos:position pos:line="40" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="56">contentSize<pos:position pos:line="40" pos:column="67"/></name></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></decl>;<pos:position pos:line="40" pos:column="69"/></decl_stmt>
    <expr_stmt><expr><name pos:line="41" pos:column="5">currentOffset<pos:position pos:line="41" pos:column="18"/></name> <operator pos:line="41" pos:column="19">+=<pos:position pos:line="41" pos:column="21"/></operator> <name><name pos:line="41" pos:column="22">ioBuf<pos:position pos:line="41" pos:column="27"/></name><operator pos:line="41" pos:column="27">.<pos:position pos:line="41" pos:column="28"/></operator><name pos:line="41" pos:column="28">length<pos:position pos:line="41" pos:column="34"/></name></name></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="42" pos:column="5">entry<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">-&gt;<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="12">write<pos:position pos:line="42" pos:column="17"/></name></name><argument_list pos:line="42" pos:column="17">(<argument><expr><name pos:line="42" pos:column="18">ioBuf<pos:position pos:line="42" pos:column="23"/></name></expr></argument>)<pos:position pos:line="42" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="43" pos:column="5">bpc<pos:position pos:line="43" pos:column="8"/></name><operator pos:line="43" pos:column="8">.<pos:position pos:line="43" pos:column="9"/></operator><name pos:line="43" pos:column="9">buf<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">.<pos:position pos:line="43" pos:column="13"/></operator><name pos:line="43" pos:column="13">consume<pos:position pos:line="43" pos:column="20"/></name></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">contentSize<pos:position pos:line="43" pos:column="32"/></name></expr></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="44" pos:column="5">bpc<pos:position pos:line="44" pos:column="8"/></name><operator pos:line="44" pos:column="8">.<pos:position pos:line="44" pos:column="9"/></operator><name pos:line="44" pos:column="9">checkIn<pos:position pos:line="44" pos:column="16"/></name></name><argument_list pos:line="44" pos:column="16">()<pos:position pos:line="44" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="19"/></expr_stmt>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
