<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1881_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemObject<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">stat<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">MemBuf<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">mb<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list> <specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">mb<pos:position pos:line="4" pos:column="7"/></name><operator pos:line="4" pos:column="7">-&gt;<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="9">appendf<pos:position pos:line="4" pos:column="16"/></name></name><argument_list pos:line="4" pos:column="16">(<argument><expr><literal type="string" pos:line="4" pos:column="17">"\t"<pos:position pos:line="4" pos:column="21"/></literal> <name pos:line="4" pos:column="22">SQUIDSBUFPH<pos:position pos:line="4" pos:column="33"/></name> <literal type="string" pos:line="4" pos:column="34">" %s\n"<pos:position pos:line="4" pos:column="41"/></literal></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="43">SQUIDSBUFPRINT<pos:position pos:line="4" pos:column="57"/></name><argument_list pos:line="4" pos:column="57">(<argument><expr><call><name><name pos:line="4" pos:column="58">method<pos:position pos:line="4" pos:column="64"/></name><operator pos:line="4" pos:column="64">.<pos:position pos:line="4" pos:column="65"/></operator><name pos:line="4" pos:column="65">image<pos:position pos:line="4" pos:column="70"/></name></name><argument_list pos:line="4" pos:column="70">()<pos:position pos:line="4" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="73"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="75">logUri<pos:position pos:line="4" pos:column="81"/></name><argument_list pos:line="4" pos:column="81">()<pos:position pos:line="4" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="85"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><call><name><name pos:line="5" pos:column="10">vary_headers<pos:position pos:line="5" pos:column="22"/></name><operator pos:line="5" pos:column="22">.<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="23">isEmpty<pos:position pos:line="5" pos:column="30"/></name></name><argument_list pos:line="5" pos:column="30">()<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="33"/></condition><then pos:line="5" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="6" pos:column="9">mb<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">appendf<pos:position pos:line="6" pos:column="20"/></name></name><argument_list pos:line="6" pos:column="20">(<argument><expr><literal type="string" pos:line="6" pos:column="21">"\tvary_headers: "<pos:position pos:line="6" pos:column="39"/></literal> <name pos:line="6" pos:column="40">SQUIDSBUFPH<pos:position pos:line="6" pos:column="51"/></name> <literal type="string" pos:line="6" pos:column="52">"\n"<pos:position pos:line="6" pos:column="56"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="58">SQUIDSBUFPRINT<pos:position pos:line="6" pos:column="72"/></name><argument_list pos:line="6" pos:column="72">(<argument><expr><name pos:line="6" pos:column="73">vary_headers<pos:position pos:line="6" pos:column="85"/></name></expr></argument>)<pos:position pos:line="6" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="88"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">mb<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">-&gt;<pos:position pos:line="7" pos:column="12"/></operator><name pos:line="7" pos:column="9">appendf<pos:position pos:line="7" pos:column="16"/></name></name><argument_list pos:line="7" pos:column="16">(<argument><expr><literal type="string" pos:line="7" pos:column="17">"\tinmem_lo: %"<pos:position pos:line="7" pos:column="32"/></literal> <name pos:line="7" pos:column="33">PRId64<pos:position pos:line="7" pos:column="39"/></name> <literal type="string" pos:line="7" pos:column="40">"\n"<pos:position pos:line="7" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="46">inmem_lo<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">mb<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">-&gt;<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="9">appendf<pos:position pos:line="8" pos:column="16"/></name></name><argument_list pos:line="8" pos:column="16">(<argument><expr><literal type="string" pos:line="8" pos:column="17">"\tinmem_hi: %"<pos:position pos:line="8" pos:column="32"/></literal> <name pos:line="8" pos:column="33">PRId64<pos:position pos:line="8" pos:column="39"/></name> <literal type="string" pos:line="8" pos:column="40">"\n"<pos:position pos:line="8" pos:column="44"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="8" pos:column="46">data_hdr<pos:position pos:line="8" pos:column="54"/></name><operator pos:line="8" pos:column="54">.<pos:position pos:line="8" pos:column="55"/></operator><name pos:line="8" pos:column="55">endOffset<pos:position pos:line="8" pos:column="64"/></name></name><argument_list pos:line="8" pos:column="64">()<pos:position pos:line="8" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">mb<pos:position pos:line="9" pos:column="7"/></name><operator pos:line="9" pos:column="7">-&gt;<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="9">appendf<pos:position pos:line="9" pos:column="16"/></name></name><argument_list pos:line="9" pos:column="16">(<argument><expr><literal type="string" pos:line="9" pos:column="17">"\tswapout: %"<pos:position pos:line="9" pos:column="31"/></literal> <name pos:line="9" pos:column="32">PRId64<pos:position pos:line="9" pos:column="38"/></name> <literal type="string" pos:line="9" pos:column="39">" bytes queued\n"<pos:position pos:line="9" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="58">swapout<pos:position pos:line="9" pos:column="65"/></name><operator pos:line="9" pos:column="65">.<pos:position pos:line="9" pos:column="66"/></operator><name pos:line="9" pos:column="66">queue_offset<pos:position pos:line="9" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="80"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name><name pos:line="11" pos:column="9">swapout<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">sio<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">.<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="21">getRaw<pos:position pos:line="11" pos:column="27"/></name></name><argument_list pos:line="11" pos:column="27">()<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="12" pos:column="9">mb<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">-&gt;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="13">appendf<pos:position pos:line="12" pos:column="20"/></name></name><argument_list pos:line="12" pos:column="20">(<argument><expr><literal type="string" pos:line="12" pos:column="21">"\tswapout: %"<pos:position pos:line="12" pos:column="35"/></literal> <name pos:line="12" pos:column="36">PRId64<pos:position pos:line="12" pos:column="42"/></name> <literal type="string" pos:line="12" pos:column="43">" bytes written\n"<pos:position pos:line="12" pos:column="61"/></literal></expr></argument>, <argument><expr><operator pos:line="12" pos:column="63">(<pos:position pos:line="12" pos:column="64"/></operator><name pos:line="12" pos:column="64">int64_t<pos:position pos:line="12" pos:column="71"/></name><operator pos:line="12" pos:column="71">)<pos:position pos:line="12" pos:column="72"/></operator> <call><name><name pos:line="12" pos:column="73">swapout<pos:position pos:line="12" pos:column="80"/></name><operator pos:line="12" pos:column="80">.<pos:position pos:line="12" pos:column="81"/></operator><name pos:line="12" pos:column="81">sio<pos:position pos:line="12" pos:column="84"/></name><operator pos:line="12" pos:column="84">-&gt;<pos:position pos:line="12" pos:column="89"/></operator><name pos:line="12" pos:column="86">offset<pos:position pos:line="12" pos:column="92"/></name></name><argument_list pos:line="12" pos:column="92">()<pos:position pos:line="12" pos:column="94"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="96"/></expr_stmt></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">xitTable<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">.<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">index<pos:position pos:line="14" pos:column="23"/></name></name> <operator pos:line="14" pos:column="24">&gt;=<pos:position pos:line="14" pos:column="29"/></operator> <literal type="number" pos:line="14" pos:column="27">0<pos:position pos:line="14" pos:column="28"/></literal></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="15" pos:column="9">mb<pos:position pos:line="15" pos:column="11"/></name><operator pos:line="15" pos:column="11">-&gt;<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="13">appendf<pos:position pos:line="15" pos:column="20"/></name></name><argument_list pos:line="15" pos:column="20">(<argument><expr><literal type="string" pos:line="15" pos:column="21">"\ttransient index: %d state: %d\n"<pos:position pos:line="15" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="58">xitTable<pos:position pos:line="15" pos:column="66"/></name><operator pos:line="15" pos:column="66">.<pos:position pos:line="15" pos:column="67"/></operator><name pos:line="15" pos:column="67">index<pos:position pos:line="15" pos:column="72"/></name></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="74">xitTable<pos:position pos:line="15" pos:column="82"/></name><operator pos:line="15" pos:column="82">.<pos:position pos:line="15" pos:column="83"/></operator><name pos:line="15" pos:column="83">io<pos:position pos:line="15" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="87"/></expr_stmt></block></then></if>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">memCache<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">.<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">index<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">&gt;=<pos:position pos:line="16" pos:column="29"/></operator> <literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="17" pos:column="9">mb<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">appendf<pos:position pos:line="17" pos:column="20"/></name></name><argument_list pos:line="17" pos:column="20">(<argument><expr><literal type="string" pos:line="17" pos:column="21">"\tmem-cache index: %d state: %d offset: %"<pos:position pos:line="17" pos:column="64"/></literal> <name pos:line="17" pos:column="65">PRId64<pos:position pos:line="17" pos:column="71"/></name> <literal type="string" pos:line="17" pos:column="72">"\n"<pos:position pos:line="17" pos:column="76"/></literal></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="78">memCache<pos:position pos:line="17" pos:column="86"/></name><operator pos:line="17" pos:column="86">.<pos:position pos:line="17" pos:column="87"/></operator><name pos:line="17" pos:column="87">index<pos:position pos:line="17" pos:column="92"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="94">memCache<pos:position pos:line="17" pos:column="102"/></name><operator pos:line="17" pos:column="102">.<pos:position pos:line="17" pos:column="103"/></operator><name pos:line="17" pos:column="103">io<pos:position pos:line="17" pos:column="105"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="107">memCache<pos:position pos:line="17" pos:column="115"/></name><operator pos:line="17" pos:column="115">.<pos:position pos:line="17" pos:column="116"/></operator><name pos:line="17" pos:column="116">offset<pos:position pos:line="17" pos:column="122"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="123"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="124"/></expr_stmt></block></then></if>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">object_sz<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&gt;=<pos:position pos:line="18" pos:column="24"/></operator> <literal type="number" pos:line="18" pos:column="22">0<pos:position pos:line="18" pos:column="23"/></literal></expr>)<pos:position pos:line="18" pos:column="24"/></condition><then pos:line="18" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="19" pos:column="9">mb<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">-&gt;<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="13">appendf<pos:position pos:line="19" pos:column="20"/></name></name><argument_list pos:line="19" pos:column="20">(<argument><expr><literal type="string" pos:line="19" pos:column="21">"\tobject_sz: %"<pos:position pos:line="19" pos:column="37"/></literal> <name pos:line="19" pos:column="38">PRId64<pos:position pos:line="19" pos:column="44"/></name> <literal type="string" pos:line="19" pos:column="45">"\n"<pos:position pos:line="19" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">object_sz<pos:position pos:line="19" pos:column="60"/></name></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="62"/></expr_stmt></block></then></if>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">smpCollapsed<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="21" pos:column="9">mb<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">-&gt;<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="13">appendf<pos:position pos:line="21" pos:column="20"/></name></name><argument_list pos:line="21" pos:column="20">(<argument><expr><literal type="string" pos:line="21" pos:column="21">"\tsmp-collapsed\n"<pos:position pos:line="21" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="23" pos:column="5">StoreClientStats<pos:position pos:line="23" pos:column="21"/></name></type> <name pos:line="23" pos:column="22">statsVisitor<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">mb<pos:position pos:line="23" pos:column="37"/></name></expr></argument>)<pos:position pos:line="23" pos:column="38"/></argument_list></decl>;<pos:position pos:line="23" pos:column="39"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="25" pos:column="5">for_each<pos:position pos:line="25" pos:column="13"/></name><argument_list type="generic" pos:line="25" pos:column="13">&lt;<argument><expr><name pos:line="25" pos:column="14">StoreClientStats<pos:position pos:line="25" pos:column="30"/></name></expr></argument>&gt;<pos:position pos:line="25" pos:column="34"/></argument_list></name><argument_list pos:line="25" pos:column="31">(<argument><expr><name pos:line="25" pos:column="32">clients<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">statsVisitor<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
