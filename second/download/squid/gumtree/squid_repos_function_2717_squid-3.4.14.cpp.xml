<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2717_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">htcpSocketShutdown<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">void<pos:position pos:line="2" pos:column="24"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name><name pos:line="4" pos:column="10">Comm<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">::<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">IsConnOpen<pos:position pos:line="4" pos:column="26"/></name></name><argument_list pos:line="4" pos:column="26">(<argument><expr><name pos:line="4" pos:column="27">htcpIncomingConn<pos:position pos:line="4" pos:column="43"/></name></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="45"/></condition><then pos:line="4" pos:column="45">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">12<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="16">DBG_IMPORTANT<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="31">"Stop accepting HTCP on "<pos:position pos:line="7" pos:column="56"/></literal> <operator pos:line="7" pos:column="57">&lt;&lt;<pos:position pos:line="7" pos:column="65"/></operator> <name><name pos:line="7" pos:column="60">htcpIncomingConn<pos:position pos:line="7" pos:column="76"/></name><operator pos:line="7" pos:column="76">-&gt;<pos:position pos:line="7" pos:column="81"/></operator><name pos:line="7" pos:column="78">local<pos:position pos:line="7" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="85"/></expr_stmt>
    <comment type="block" pos:line="8" pos:column="5">/*
     * Here we just unlink htcpIncomingConn because the HTCP 'in'
     * and 'out' sockets might be just one FD.  This prevents this
     * function from executing repeatedly.  When we are really ready to
     * exit or restart, main will comm_close the 'out' descriptor.
     */</comment>
    <expr_stmt><expr><name pos:line="14" pos:column="5">htcpIncomingConn<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <name pos:line="14" pos:column="24">NULL<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/*
     * Normally we only write to the outgoing HTCP socket, but
     * we also have a read handler there to catch messages sent
     * to that specific interface.  During shutdown, we must
     * disable reading on the outgoing socket.
     */</comment>
    <comment type="block" pos:line="22" pos:column="5">/* XXX Don't we need this handler to read replies while shutting down?
     * I think there should be a separate hander for reading replies..
     */</comment>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">assert<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><call><name><name pos:line="25" pos:column="12">Comm<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">::<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">IsConnOpen<pos:position pos:line="25" pos:column="28"/></name></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">htcpOutgoingConn<pos:position pos:line="25" pos:column="45"/></name></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="27" pos:column="5">Comm<pos:position pos:line="27" pos:column="9"/></name><operator pos:line="27" pos:column="9">::<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">SetSelect<pos:position pos:line="27" pos:column="20"/></name></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name><name pos:line="27" pos:column="21">htcpOutgoingConn<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">-&gt;<pos:position pos:line="27" pos:column="42"/></operator><name pos:line="27" pos:column="39">fd<pos:position pos:line="27" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="43">COMM_SELECT_READ<pos:position pos:line="27" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="61">NULL<pos:position pos:line="27" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="67">NULL<pos:position pos:line="27" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="73">0<pos:position pos:line="27" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="76"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
