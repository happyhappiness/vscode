<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3316_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">clientReplyContext<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">processExpired<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">()<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">url<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><name><name pos:line="4" pos:column="17">http<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">-&gt;<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="23">uri<pos:position pos:line="4" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">StoreEntry<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">entry<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name pos:line="5" pos:column="25">NULL<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">88<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">3<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"clientReplyContext::processExpired: '"<pos:position pos:line="6" pos:column="58"/></literal> <operator pos:line="6" pos:column="59">&lt;&lt;<pos:position pos:line="6" pos:column="67"/></operator> <name><name pos:line="6" pos:column="62">http<pos:position pos:line="6" pos:column="66"/></name><operator pos:line="6" pos:column="66">-&gt;<pos:position pos:line="6" pos:column="71"/></operator><name pos:line="6" pos:column="68">uri<pos:position pos:line="6" pos:column="71"/></name></name> <operator pos:line="6" pos:column="72">&lt;&lt;<pos:position pos:line="6" pos:column="80"/></operator> <literal type="string" pos:line="6" pos:column="75">"'"<pos:position pos:line="6" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="80"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><call><name><name pos:line="7" pos:column="12">http<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">storeEntry<pos:position pos:line="7" pos:column="28"/></name></name><argument_list pos:line="7" pos:column="28">()<pos:position pos:line="7" pos:column="30"/></argument_list></call><operator pos:line="7" pos:column="30">-&gt;<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="32">lastmod<pos:position pos:line="7" pos:column="39"/></name> <operator pos:line="7" pos:column="40">&gt;=<pos:position pos:line="7" pos:column="45"/></operator> <literal type="number" pos:line="7" pos:column="43">0<pos:position pos:line="7" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></expr_stmt>
    <comment type="block" pos:line="8" pos:column="5">/*
     * check if we are allowed to contact other servers
     * @?@: Instead of a 504 (Gateway Timeout) reply, we may want to return
     *      a stale entry *if* it matches client requirements
     */</comment>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name><name pos:line="14" pos:column="9">http<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">-&gt;<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="15">onlyIfCached<pos:position pos:line="14" pos:column="27"/></name></name><argument_list pos:line="14" pos:column="27">()<pos:position pos:line="14" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30"> <block pos:line="14" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">processOnlyIfCachedMiss<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">()<pos:position pos:line="15" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="19" pos:column="5">http<pos:position pos:line="19" pos:column="9"/></name><operator pos:line="19" pos:column="9">-&gt;<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="11">request<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">flags<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">.<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">refresh<pos:position pos:line="19" pos:column="33"/></name></name> <operator pos:line="19" pos:column="34">=<pos:position pos:line="19" pos:column="35"/></operator> <literal type="number" pos:line="19" pos:column="36">1<pos:position pos:line="19" pos:column="37"/></literal></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">STORE_CLIENT_LIST_DEBUG<pos:position pos:line="20" pos:column="28"/></name></expr></cpp:if>
    <comment type="block" pos:line="21" pos:column="5">/* Prevent a race with the store client memory free routines
     */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">assert<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><call><name pos:line="23" pos:column="12">storeClientIsThisAClient<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">sc<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">this<pos:position pos:line="23" pos:column="45"/></name></expr></argument>)<pos:position pos:line="23" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="25" pos:column="5">/* Prepare to make a new temporary request */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">saveState<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">()<pos:position pos:line="26" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">entry<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <call><name pos:line="27" pos:column="13">storeCreateEntry<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">url<pos:position pos:line="27" pos:column="33"/></name></expr></argument>,
                             <argument><expr><name><name pos:line="28" pos:column="30">http<pos:position pos:line="28" pos:column="34"/></name><operator pos:line="28" pos:column="34">-&gt;<pos:position pos:line="28" pos:column="39"/></operator><name pos:line="28" pos:column="36">log_uri<pos:position pos:line="28" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="45">http<pos:position pos:line="28" pos:column="49"/></name><operator pos:line="28" pos:column="49">-&gt;<pos:position pos:line="28" pos:column="54"/></operator><name pos:line="28" pos:column="51">request<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">-&gt;<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="60">flags<pos:position pos:line="28" pos:column="65"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="67">http<pos:position pos:line="28" pos:column="71"/></name><operator pos:line="28" pos:column="71">-&gt;<pos:position pos:line="28" pos:column="76"/></operator><name pos:line="28" pos:column="73">request<pos:position pos:line="28" pos:column="80"/></name><operator pos:line="28" pos:column="80">-&gt;<pos:position pos:line="28" pos:column="85"/></operator><name pos:line="28" pos:column="82">method<pos:position pos:line="28" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="90"/></expr_stmt>
    <comment type="block" pos:line="29" pos:column="5">/* NOTE, don't call StoreEntry-&gt;lock(), storeCreateEntry() does it */</comment>
    <expr_stmt><expr><name pos:line="30" pos:column="5">sc<pos:position pos:line="30" pos:column="7"/></name> <operator pos:line="30" pos:column="8">=<pos:position pos:line="30" pos:column="9"/></operator> <call><name pos:line="30" pos:column="10">storeClientListAdd<pos:position pos:line="30" pos:column="28"/></name><argument_list pos:line="30" pos:column="28">(<argument><expr><name pos:line="30" pos:column="29">entry<pos:position pos:line="30" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="36">this<pos:position pos:line="30" pos:column="40"/></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
<cpp:if pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">if<pos:position pos:line="31" pos:column="4"/></cpp:directive> <expr><name pos:line="31" pos:column="5">DELAY_POOLS<pos:position pos:line="31" pos:column="16"/></name></expr></cpp:if>
    <comment type="block" pos:line="32" pos:column="5">/* delay_id is already set on original store client */</comment>
    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">sc<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">-&gt;<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="9">setDelayId<pos:position pos:line="33" pos:column="19"/></name></name><argument_list pos:line="33" pos:column="19">(<argument><expr><call><name><name pos:line="33" pos:column="20">DelayId<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">::<pos:position pos:line="33" pos:column="29"/></operator><name pos:line="33" pos:column="29">DelayClient<pos:position pos:line="33" pos:column="40"/></name></name><argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">http<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name pos:line="36" pos:column="5">http<pos:position pos:line="36" pos:column="9"/></name><operator pos:line="36" pos:column="9">-&gt;<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="11">request<pos:position pos:line="36" pos:column="18"/></name><operator pos:line="36" pos:column="18">-&gt;<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="20">lastmod<pos:position pos:line="36" pos:column="27"/></name></name> <operator pos:line="36" pos:column="28">=<pos:position pos:line="36" pos:column="29"/></operator> <name><name pos:line="36" pos:column="30">old_entry<pos:position pos:line="36" pos:column="39"/></name><operator pos:line="36" pos:column="39">-&gt;<pos:position pos:line="36" pos:column="44"/></operator><name pos:line="36" pos:column="41">lastmod<pos:position pos:line="36" pos:column="48"/></name></name></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">debugs<pos:position pos:line="37" pos:column="11"/></name><argument_list pos:line="37" pos:column="11">(<argument><expr><literal type="number" pos:line="37" pos:column="12">88<pos:position pos:line="37" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="16">5<pos:position pos:line="37" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="19">"clientReplyContext::processExpired : lastmod "<pos:position pos:line="37" pos:column="66"/></literal> <operator pos:line="37" pos:column="67">&lt;&lt;<pos:position pos:line="37" pos:column="75"/></operator> <name><name pos:line="37" pos:column="70">entry<pos:position pos:line="37" pos:column="75"/></name><operator pos:line="37" pos:column="75">-&gt;<pos:position pos:line="37" pos:column="80"/></operator><name pos:line="37" pos:column="77">lastmod<pos:position pos:line="37" pos:column="84"/></name></name></expr></argument> )<pos:position pos:line="37" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="87"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="38" pos:column="5">http<pos:position pos:line="38" pos:column="9"/></name><operator pos:line="38" pos:column="9">-&gt;<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="11">storeEntry<pos:position pos:line="38" pos:column="21"/></name></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">entry<pos:position pos:line="38" pos:column="27"/></name></expr></argument>)<pos:position pos:line="38" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">assert<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><name><name pos:line="39" pos:column="12">http<pos:position pos:line="39" pos:column="16"/></name><operator pos:line="39" pos:column="16">-&gt;<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="18">out<pos:position pos:line="39" pos:column="21"/></name><operator pos:line="39" pos:column="21">.<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">offset<pos:position pos:line="39" pos:column="28"/></name></name> <operator pos:line="39" pos:column="29">==<pos:position pos:line="39" pos:column="31"/></operator> <literal type="number" pos:line="39" pos:column="32">0<pos:position pos:line="39" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="41" pos:column="5">/*
     * A refcounted pointer so that FwdState stays around as long as
     * this clientReplyContext does
     */</comment>
    <expr_stmt><expr><call><name><name pos:line="45" pos:column="5">FwdState<pos:position pos:line="45" pos:column="13"/></name><operator pos:line="45" pos:column="13">::<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="15">fwdStart<pos:position pos:line="45" pos:column="23"/></name></name><argument_list pos:line="45" pos:column="23">(<argument><expr><ternary><condition><expr><call><name><name pos:line="45" pos:column="24">http<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">-&gt;<pos:position pos:line="45" pos:column="33"/></operator><name pos:line="45" pos:column="30">getConn<pos:position pos:line="45" pos:column="37"/></name></name><argument_list pos:line="45" pos:column="37">()<pos:position pos:line="45" pos:column="39"/></argument_list></call> <operator pos:line="45" pos:column="40">!=<pos:position pos:line="45" pos:column="42"/></operator> <name pos:line="45" pos:column="43">NULL<pos:position pos:line="45" pos:column="47"/></name></expr> ?<pos:position pos:line="45" pos:column="49"/></condition><then pos:line="45" pos:column="49"> <expr><call><name><name pos:line="45" pos:column="50">http<pos:position pos:line="45" pos:column="54"/></name><operator pos:line="45" pos:column="54">-&gt;<pos:position pos:line="45" pos:column="59"/></operator><name pos:line="45" pos:column="56">getConn<pos:position pos:line="45" pos:column="63"/></name></name><argument_list pos:line="45" pos:column="63">()<pos:position pos:line="45" pos:column="65"/></argument_list></call><operator pos:line="45" pos:column="65">-&gt;<pos:position pos:line="45" pos:column="70"/></operator><name pos:line="45" pos:column="67">fd<pos:position pos:line="45" pos:column="69"/></name></expr> <pos:position pos:line="45" pos:column="70"/></then><else pos:line="45" pos:column="70">: <expr><operator pos:line="45" pos:column="72">-<pos:position pos:line="45" pos:column="73"/></operator><literal type="number" pos:line="45" pos:column="73">1<pos:position pos:line="45" pos:column="74"/></literal></expr></else></ternary></expr></argument>,
                       <argument><expr><call><name><name pos:line="46" pos:column="24">http<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">-&gt;<pos:position pos:line="46" pos:column="33"/></operator><name pos:line="46" pos:column="30">storeEntry<pos:position pos:line="46" pos:column="40"/></name></name><argument_list pos:line="46" pos:column="40">()<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr></argument>,
                       <argument><expr><name><name pos:line="47" pos:column="24">http<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">-&gt;<pos:position pos:line="47" pos:column="33"/></operator><name pos:line="47" pos:column="30">request<pos:position pos:line="47" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>
    <comment type="block" pos:line="48" pos:column="5">/* Register with storage manager to receive updates when data comes in. */</comment>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><call><name pos:line="50" pos:column="9">EBIT_TEST<pos:position pos:line="50" pos:column="18"/></name><argument_list pos:line="50" pos:column="18">(<argument><expr><name><name pos:line="50" pos:column="19">entry<pos:position pos:line="50" pos:column="24"/></name><operator pos:line="50" pos:column="24">-&gt;<pos:position pos:line="50" pos:column="29"/></operator><name pos:line="50" pos:column="26">flags<pos:position pos:line="50" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="33">ENTRY_ABORTED<pos:position pos:line="50" pos:column="46"/></name></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="48"/></condition><then pos:line="50" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="9">debugs<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><literal type="number" pos:line="51" pos:column="16">88<pos:position pos:line="51" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="20">0<pos:position pos:line="51" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="23">"clientReplyContext::processExpired: Found ENTRY_ABORTED object"<pos:position pos:line="51" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="89"/></expr_stmt></block></then></if>

    <block pos:line="53" pos:column="5">{
        <comment type="block" pos:line="54" pos:column="9">/* start counting the length from 0 */</comment>
        <decl_stmt><decl><type><name pos:line="55" pos:column="9">StoreIOBuffer<pos:position pos:line="55" pos:column="22"/></name></type> <name pos:line="55" pos:column="23">localTempBuffer<pos:position pos:line="55" pos:column="38"/></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name pos:line="55" pos:column="39">HTTP_REQBUF_SZ<pos:position pos:line="55" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="55">0<pos:position pos:line="55" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="58">tempbuf<pos:position pos:line="55" pos:column="65"/></name></expr></argument>)<pos:position pos:line="55" pos:column="66"/></argument_list></decl>;<pos:position pos:line="55" pos:column="67"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">storeClientCopy<pos:position pos:line="56" pos:column="24"/></name><argument_list pos:line="56" pos:column="24">(<argument><expr><name pos:line="56" pos:column="25">sc<pos:position pos:line="56" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="29">entry<pos:position pos:line="56" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="36">localTempBuffer<pos:position pos:line="56" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="53">HandleIMSReply<pos:position pos:line="56" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="69">this<pos:position pos:line="56" pos:column="73"/></name></expr></argument>)<pos:position pos:line="56" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
