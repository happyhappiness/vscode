<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1161_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parsePortCfg<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name><name pos:line="2" pos:column="14">AnyP<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">PortCfg<pos:position pos:line="2" pos:column="27"/></name></name> <modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier><modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type> <name pos:line="2" pos:column="31">head<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">optionName<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">protocol<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">NULL<pos:position pos:line="4" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name pos:line="5" pos:column="9">strcmp<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">optionName<pos:position pos:line="5" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="28">"http_port"<pos:position pos:line="5" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="40"/></argument_list></call> <operator pos:line="5" pos:column="41">==<pos:position pos:line="5" pos:column="43"/></operator> <literal type="number" pos:line="5" pos:column="44">0<pos:position pos:line="5" pos:column="45"/></literal> <operator pos:line="5" pos:column="46">||<pos:position pos:line="5" pos:column="48"/></operator>
            <call><name pos:line="6" pos:column="13">strcmp<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name pos:line="6" pos:column="20">optionName<pos:position pos:line="6" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="32">"ascii_port"<pos:position pos:line="6" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call> <operator pos:line="6" pos:column="46">==<pos:position pos:line="6" pos:column="48"/></operator> <literal type="number" pos:line="6" pos:column="49">0<pos:position pos:line="6" pos:column="50"/></literal></expr>)<pos:position pos:line="6" pos:column="51"/></condition><then pos:line="6" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="9">protocol<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <literal type="string" pos:line="7" pos:column="20">"http"<pos:position pos:line="7" pos:column="26"/></literal></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt></block></then>
    <elseif pos:line="8" pos:column="5">else <if pos:line="8" pos:column="10">if <condition pos:line="8" pos:column="13">(<expr><call><name pos:line="8" pos:column="14">strcmp<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">optionName<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="33">"https_port"<pos:position pos:line="8" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call> <operator pos:line="8" pos:column="47">==<pos:position pos:line="8" pos:column="49"/></operator> <literal type="number" pos:line="8" pos:column="50">0<pos:position pos:line="8" pos:column="51"/></literal></expr>)<pos:position pos:line="8" pos:column="52"/></condition><then pos:line="8" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">protocol<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <literal type="string" pos:line="9" pos:column="20">"https"<pos:position pos:line="9" pos:column="27"/></literal></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt></block></then></if></elseif></if>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">protocol<pos:position pos:line="10" pos:column="18"/></name></expr>)<pos:position pos:line="10" pos:column="19"/></condition><then pos:line="10" pos:column="19"> <block pos:line="10" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">self_destruct<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">char<pos:position pos:line="15" pos:column="9"/></name> <modifier pos:line="15" pos:column="10">*<pos:position pos:line="15" pos:column="11"/></modifier></type><name pos:line="15" pos:column="11">token<pos:position pos:line="15" pos:column="16"/></name> <init pos:line="15" pos:column="17">= <expr><call><name pos:line="15" pos:column="19">strtok<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name pos:line="15" pos:column="26">NULL<pos:position pos:line="15" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">w_space<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="41"/></decl_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">token<pos:position pos:line="17" pos:column="15"/></name></expr>)<pos:position pos:line="17" pos:column="16"/></condition><then pos:line="17" pos:column="16"> <block pos:line="17" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">self_destruct<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">()<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="22" pos:column="5">AnyP<pos:position pos:line="22" pos:column="9"/></name><operator pos:line="22" pos:column="9">::<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">PortCfg<pos:position pos:line="22" pos:column="18"/></name></name> <modifier pos:line="22" pos:column="19">*<pos:position pos:line="22" pos:column="20"/></modifier></type><name pos:line="22" pos:column="20">s<pos:position pos:line="22" pos:column="21"/></name> <init pos:line="22" pos:column="22">= <expr><operator pos:line="22" pos:column="24">new<pos:position pos:line="22" pos:column="27"/></operator> <call><name><name pos:line="22" pos:column="28">AnyP<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">::<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="34">PortCfg<pos:position pos:line="22" pos:column="41"/></name></name><argument_list pos:line="22" pos:column="41">(<argument><expr><name pos:line="22" pos:column="42">protocol<pos:position pos:line="22" pos:column="50"/></name></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="52"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">parsePortSpecification<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">s<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="31">token<pos:position pos:line="23" pos:column="36"/></name></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* parse options ... */</comment>
    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">token<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <call><name pos:line="26" pos:column="21">strtok<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">NULL<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">w_space<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call><operator pos:line="26" pos:column="42">)<pos:position pos:line="26" pos:column="43"/></operator></expr>)<pos:position pos:line="26" pos:column="44"/></condition> <block pos:line="26" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">parse_port_option<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">s<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">token<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></while>

<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">USE_SSL<pos:position pos:line="30" pos:column="12"/></name></expr></cpp:if>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><call><name pos:line="31" pos:column="9">strcasecmp<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">protocol<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="30">"https"<pos:position pos:line="31" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="38"/></argument_list></call> <operator pos:line="31" pos:column="39">==<pos:position pos:line="31" pos:column="41"/></operator> <literal type="number" pos:line="31" pos:column="42">0<pos:position pos:line="31" pos:column="43"/></literal></expr>)<pos:position pos:line="31" pos:column="44"/></condition><then pos:line="31" pos:column="44"> <block pos:line="31" pos:column="45">{
        <comment type="block" pos:line="32" pos:column="9">/* ssl-bump on https_port configuration requires either tproxy or intercept, and vice versa */</comment>
        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">const<pos:position pos:line="33" pos:column="14"/></specifier> <name pos:line="33" pos:column="15">bool<pos:position pos:line="33" pos:column="19"/></name></type> <name pos:line="33" pos:column="20">hijacked<pos:position pos:line="33" pos:column="28"/></name> <init pos:line="33" pos:column="29">= <expr><name><name pos:line="33" pos:column="31">s<pos:position pos:line="33" pos:column="32"/></name><operator pos:line="33" pos:column="32">-&gt;<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="34">spoof_client_ip<pos:position pos:line="33" pos:column="49"/></name></name> <operator pos:line="33" pos:column="50">||<pos:position pos:line="33" pos:column="52"/></operator> <name><name pos:line="33" pos:column="53">s<pos:position pos:line="33" pos:column="54"/></name><operator pos:line="33" pos:column="54">-&gt;<pos:position pos:line="33" pos:column="59"/></operator><name pos:line="33" pos:column="56">intercepted<pos:position pos:line="33" pos:column="67"/></name></name></expr></init></decl>;<pos:position pos:line="33" pos:column="68"/></decl_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name><name pos:line="34" pos:column="13">s<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">-&gt;<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="16">sslBump<pos:position pos:line="34" pos:column="23"/></name></name> <operator pos:line="34" pos:column="24">&amp;&amp;<pos:position pos:line="34" pos:column="34"/></operator> <operator pos:line="34" pos:column="27">!<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="28">hijacked<pos:position pos:line="34" pos:column="36"/></name></expr>)<pos:position pos:line="34" pos:column="37"/></condition><then pos:line="34" pos:column="37"> <block pos:line="34" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">debugs<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><literal type="number" pos:line="35" pos:column="20">3<pos:position pos:line="35" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="23">DBG_CRITICAL<pos:position pos:line="35" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="37">"FATAL: ssl-bump on https_port requires tproxy/intercept which is missing."<pos:position pos:line="35" pos:column="112"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="114"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">self_destruct<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">()<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">hijacked<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">&amp;&amp;<pos:position pos:line="38" pos:column="32"/></operator> <operator pos:line="38" pos:column="25">!<pos:position pos:line="38" pos:column="26"/></operator><name><name pos:line="38" pos:column="26">s<pos:position pos:line="38" pos:column="27"/></name><operator pos:line="38" pos:column="27">-&gt;<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="29">sslBump<pos:position pos:line="38" pos:column="36"/></name></name></expr>)<pos:position pos:line="38" pos:column="37"/></condition><then pos:line="38" pos:column="37"> <block pos:line="38" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">debugs<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><literal type="number" pos:line="39" pos:column="20">3<pos:position pos:line="39" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="23">DBG_CRITICAL<pos:position pos:line="39" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="37">"FATAL: tproxy/intercept on https_port requires ssl-bump which is missing."<pos:position pos:line="39" pos:column="112"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="114"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">self_destruct<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">()<pos:position pos:line="40" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name><name pos:line="45" pos:column="9">Ip<pos:position pos:line="45" pos:column="11"/></name><operator pos:line="45" pos:column="11">::<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="13">EnableIpv6<pos:position pos:line="45" pos:column="23"/></name></name><operator pos:line="45" pos:column="23">&amp;<pos:position pos:line="45" pos:column="28"/></operator><name pos:line="45" pos:column="24">IPV6_SPECIAL_SPLITSTACK<pos:position pos:line="45" pos:column="47"/></name> <operator pos:line="45" pos:column="48">&amp;&amp;<pos:position pos:line="45" pos:column="58"/></operator> <call><name><name pos:line="45" pos:column="51">s<pos:position pos:line="45" pos:column="52"/></name><operator pos:line="45" pos:column="52">-&gt;<pos:position pos:line="45" pos:column="57"/></operator><name pos:line="45" pos:column="54">s<pos:position pos:line="45" pos:column="55"/></name><operator pos:line="45" pos:column="55">.<pos:position pos:line="45" pos:column="56"/></operator><name pos:line="45" pos:column="56">IsAnyAddr<pos:position pos:line="45" pos:column="65"/></name></name><argument_list pos:line="45" pos:column="65">()<pos:position pos:line="45" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="68"/></condition><then pos:line="45" pos:column="68"> <block pos:line="45" pos:column="69">{
        <comment type="line" pos:line="46" pos:column="9">// clone the port options from *s to *(s-&gt;next)</comment>
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">s<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">-&gt;<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="12">next<pos:position pos:line="47" pos:column="16"/></name></name> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <call><name pos:line="47" pos:column="19">cbdataReference<pos:position pos:line="47" pos:column="34"/></name><argument_list pos:line="47" pos:column="34">(<argument><expr><call><name><name pos:line="47" pos:column="35">s<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">-&gt;<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="38">clone<pos:position pos:line="47" pos:column="43"/></name></name><argument_list pos:line="47" pos:column="43">()<pos:position pos:line="47" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="48" pos:column="9">s<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">-&gt;<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="12">next<pos:position pos:line="48" pos:column="16"/></name><operator pos:line="48" pos:column="16">-&gt;<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="18">s<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">.<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">SetIPv4<pos:position pos:line="48" pos:column="27"/></name></name><argument_list pos:line="48" pos:column="27">()<pos:position pos:line="48" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">debugs<pos:position pos:line="49" pos:column="15"/></name><argument_list pos:line="49" pos:column="15">(<argument><expr><literal type="number" pos:line="49" pos:column="16">3<pos:position pos:line="49" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="19">3<pos:position pos:line="49" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="22">protocol<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">&lt;&lt;<pos:position pos:line="49" pos:column="39"/></operator> <literal type="string" pos:line="49" pos:column="34">"_port: clone wildcard address for split-stack: "<pos:position pos:line="49" pos:column="83"/></literal> <operator pos:line="49" pos:column="84">&lt;&lt;<pos:position pos:line="49" pos:column="92"/></operator> <name><name pos:line="49" pos:column="87">s<pos:position pos:line="49" pos:column="88"/></name><operator pos:line="49" pos:column="88">-&gt;<pos:position pos:line="49" pos:column="93"/></operator><name pos:line="49" pos:column="90">s<pos:position pos:line="49" pos:column="91"/></name></name> <operator pos:line="49" pos:column="92">&lt;&lt;<pos:position pos:line="49" pos:column="100"/></operator> <literal type="string" pos:line="49" pos:column="95">" and "<pos:position pos:line="49" pos:column="102"/></literal> <operator pos:line="49" pos:column="103">&lt;&lt;<pos:position pos:line="49" pos:column="111"/></operator> <name><name pos:line="49" pos:column="106">s<pos:position pos:line="49" pos:column="107"/></name><operator pos:line="49" pos:column="107">-&gt;<pos:position pos:line="49" pos:column="112"/></operator><name pos:line="49" pos:column="109">next<pos:position pos:line="49" pos:column="113"/></name><operator pos:line="49" pos:column="113">-&gt;<pos:position pos:line="49" pos:column="118"/></operator><name pos:line="49" pos:column="115">s<pos:position pos:line="49" pos:column="116"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="118"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <while pos:line="52" pos:column="5">while <condition pos:line="52" pos:column="11">(<expr><operator pos:line="52" pos:column="12">*<pos:position pos:line="52" pos:column="13"/></operator><name pos:line="52" pos:column="13">head<pos:position pos:line="52" pos:column="17"/></name></expr>)<pos:position pos:line="52" pos:column="18"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="9">head<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <operator pos:line="53" pos:column="16">&amp;<pos:position pos:line="53" pos:column="21"/></operator><name><operator pos:line="53" pos:column="17">(<pos:position pos:line="53" pos:column="18"/></operator><operator pos:line="53" pos:column="18">*<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="19">head<pos:position pos:line="53" pos:column="23"/></name><operator pos:line="53" pos:column="23">)<pos:position pos:line="53" pos:column="24"/></operator><operator pos:line="53" pos:column="24">-&gt;<pos:position pos:line="53" pos:column="29"/></operator><name pos:line="53" pos:column="26">next<pos:position pos:line="53" pos:column="30"/></name></name></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt></block></while>

    <expr_stmt><expr><operator pos:line="55" pos:column="5">*<pos:position pos:line="55" pos:column="6"/></operator><name pos:line="55" pos:column="6">head<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <call><name pos:line="55" pos:column="13">cbdataReference<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">s<pos:position pos:line="55" pos:column="30"/></name></expr></argument>)<pos:position pos:line="55" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="32"/></expr_stmt>
}<pos:position pos:line="56" pos:column="2"/></block></function></unit>
