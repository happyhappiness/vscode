<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2265_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeader<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">getList<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name><name pos:line="2" pos:column="21">Http<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">HdrType<pos:position pos:line="2" pos:column="34"/></name></name></type> <name pos:line="2" pos:column="35">id<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">String<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">s<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list> <specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">55<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">9<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">this<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">" joining for id "<pos:position pos:line="4" pos:column="45"/></literal> <operator pos:line="4" pos:column="46">&lt;&lt;<pos:position pos:line="4" pos:column="54"/></operator> <name pos:line="4" pos:column="49">id<pos:position pos:line="4" pos:column="51"/></name></expr></argument>)<pos:position pos:line="4" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="53"/></expr_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* only fields from ListHeaders array can be "listed" */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><call><name><name pos:line="6" pos:column="12">Http<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">::<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="18">HeaderLookupTable<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">.<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="36">lookup<pos:position pos:line="6" pos:column="42"/></name></name><argument_list pos:line="6" pos:column="42">(<argument><expr><name pos:line="6" pos:column="43">id<pos:position pos:line="6" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call><operator pos:line="6" pos:column="46">.<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="47">list<pos:position pos:line="6" pos:column="51"/></name></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="53"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name pos:line="8" pos:column="10">CBIT_TEST<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">mask<pos:position pos:line="8" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="26">id<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">false<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></return></block></then></if>

    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><decl><type><name pos:line="11" pos:column="10">auto<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">e<pos:position pos:line="11" pos:column="16"/></name><range pos:line="11" pos:column="16">: <expr><name pos:line="11" pos:column="18">entries<pos:position pos:line="11" pos:column="25"/></name></expr></range></decl></init>)<pos:position pos:line="11" pos:column="26"/></control> <block pos:line="11" pos:column="27">{
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">e<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">&amp;&amp;<pos:position pos:line="12" pos:column="25"/></operator> <name><name pos:line="12" pos:column="18">e<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">-&gt;<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="21">id<pos:position pos:line="12" pos:column="23"/></name></name> <operator pos:line="12" pos:column="24">==<pos:position pos:line="12" pos:column="26"/></operator> <name pos:line="12" pos:column="27">id<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="13" pos:column="13">strListAdd<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">s<pos:position pos:line="13" pos:column="25"/></name></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="27">e<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">-&gt;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="30">value<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">.<pos:position pos:line="13" pos:column="36"/></operator><name pos:line="13" pos:column="36">termedBuf<pos:position pos:line="13" pos:column="45"/></name></name><argument_list pos:line="13" pos:column="45">()<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><literal type="char" pos:line="13" pos:column="49">','<pos:position pos:line="13" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt></block></then></if>
    }<pos:position pos:line="14" pos:column="6"/></block></for>

    <comment type="block" pos:line="16" pos:column="5">/*
     * note: we might get an empty (size==0) string if there was an "empty"
     * header. This results in an empty length String, which may have a NULL
     * buffer.
     */</comment>
    <comment type="block" pos:line="21" pos:column="5">/* temporary warning: remove it? (Is it useful for diagnostics ?) */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><call><name><name pos:line="22" pos:column="10">s<pos:position pos:line="22" pos:column="11"/></name><operator pos:line="22" pos:column="11">-&gt;<pos:position pos:line="22" pos:column="16"/></operator><name pos:line="22" pos:column="13">size<pos:position pos:line="22" pos:column="17"/></name></name><argument_list pos:line="22" pos:column="17">()<pos:position pos:line="22" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="20"/></condition><then pos:line="22" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">55<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="20">3<pos:position pos:line="23" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="23">"empty list header: "<pos:position pos:line="23" pos:column="44"/></literal> <operator pos:line="23" pos:column="45">&lt;&lt;<pos:position pos:line="23" pos:column="53"/></operator> <call><name><name pos:line="23" pos:column="48">Http<pos:position pos:line="23" pos:column="52"/></name><operator pos:line="23" pos:column="52">::<pos:position pos:line="23" pos:column="54"/></operator><name pos:line="23" pos:column="54">HeaderLookupTable<pos:position pos:line="23" pos:column="71"/></name><operator pos:line="23" pos:column="71">.<pos:position pos:line="23" pos:column="72"/></operator><name pos:line="23" pos:column="72">lookup<pos:position pos:line="23" pos:column="78"/></name></name><argument_list pos:line="23" pos:column="78">(<argument><expr><name pos:line="23" pos:column="79">id<pos:position pos:line="23" pos:column="81"/></name></expr></argument>)<pos:position pos:line="23" pos:column="82"/></argument_list></call><operator pos:line="23" pos:column="82">.<pos:position pos:line="23" pos:column="83"/></operator><name pos:line="23" pos:column="83">name<pos:position pos:line="23" pos:column="87"/></name> <operator pos:line="23" pos:column="88">&lt;&lt;<pos:position pos:line="23" pos:column="96"/></operator> <literal type="string" pos:line="23" pos:column="91">"("<pos:position pos:line="23" pos:column="94"/></literal> <operator pos:line="23" pos:column="95">&lt;&lt;<pos:position pos:line="23" pos:column="103"/></operator> <name pos:line="23" pos:column="98">id<pos:position pos:line="23" pos:column="100"/></name> <operator pos:line="23" pos:column="101">&lt;&lt;<pos:position pos:line="23" pos:column="109"/></operator> <literal type="string" pos:line="23" pos:column="104">")"<pos:position pos:line="23" pos:column="107"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="108"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="109"/></expr_stmt></block></then>
    <else pos:line="24" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">55<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="20">6<pos:position pos:line="25" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="23">this<pos:position pos:line="25" pos:column="27"/></name> <operator pos:line="25" pos:column="28">&lt;&lt;<pos:position pos:line="25" pos:column="36"/></operator> <literal type="string" pos:line="25" pos:column="31">": joined for id "<pos:position pos:line="25" pos:column="49"/></literal> <operator pos:line="25" pos:column="50">&lt;&lt;<pos:position pos:line="25" pos:column="58"/></operator> <name pos:line="25" pos:column="53">id<pos:position pos:line="25" pos:column="55"/></name> <operator pos:line="25" pos:column="56">&lt;&lt;<pos:position pos:line="25" pos:column="64"/></operator> <literal type="string" pos:line="25" pos:column="59">": "<pos:position pos:line="25" pos:column="63"/></literal> <operator pos:line="25" pos:column="64">&lt;&lt;<pos:position pos:line="25" pos:column="72"/></operator> <name pos:line="25" pos:column="67">s<pos:position pos:line="25" pos:column="68"/></name></expr></argument>)<pos:position pos:line="25" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="70"/></expr_stmt></block></else></if>

    <return pos:line="27" pos:column="5">return <expr><literal type="boolean" pos:line="27" pos:column="12">true<pos:position pos:line="27" pos:column="16"/></literal></expr>;<pos:position pos:line="27" pos:column="17"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
