<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_63_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemBuf<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">grow<pos:position pos:line="2" pos:column="13"/></name></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">mb_size_t<pos:position pos:line="2" pos:column="23"/></name></type> <name pos:line="2" pos:column="24">min_cap<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">new_cap<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">buf_cap<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><operator pos:line="7" pos:column="12">!<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">stolen<pos:position pos:line="7" pos:column="19"/></name></expr></argument>)<pos:position pos:line="7" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">capacity<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">&lt;<pos:position pos:line="8" pos:column="25"/></operator> <name pos:line="8" pos:column="23">min_cap<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">PROF_start<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">MemBuf_grow<pos:position pos:line="10" pos:column="27"/></name></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* determine next capacity */</comment>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">min_cap<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">&gt;<pos:position pos:line="14" pos:column="21"/></operator> <literal type="number" pos:line="14" pos:column="19">64<pos:position pos:line="14" pos:column="21"/></literal> <operator pos:line="14" pos:column="22">*<pos:position pos:line="14" pos:column="23"/></operator> <literal type="number" pos:line="14" pos:column="24">1024<pos:position pos:line="14" pos:column="28"/></literal></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29"> <block pos:line="14" pos:column="30">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">new_cap<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">=<pos:position pos:line="15" pos:column="18"/></operator> <literal type="number" pos:line="15" pos:column="19">64<pos:position pos:line="15" pos:column="21"/></literal> <operator pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="24">1024<pos:position pos:line="15" pos:column="28"/></literal></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>

        <while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><name pos:line="17" pos:column="16">new_cap<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">&lt;<pos:position pos:line="17" pos:column="28"/></operator> <operator pos:line="17" pos:column="26">(<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">size_t<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">)<pos:position pos:line="17" pos:column="34"/></operator> <name pos:line="17" pos:column="35">min_cap<pos:position pos:line="17" pos:column="42"/></name></expr>)<pos:position pos:line="17" pos:column="43"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="13">new_cap<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">+=<pos:position pos:line="18" pos:column="23"/></operator> <literal type="number" pos:line="18" pos:column="24">64<pos:position pos:line="18" pos:column="26"/></literal> <operator pos:line="18" pos:column="27">*<pos:position pos:line="18" pos:column="28"/></operator> <literal type="number" pos:line="18" pos:column="29">1024<pos:position pos:line="18" pos:column="33"/></literal></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt></block></while>   <comment type="block" pos:line="18" pos:column="37">/* increase in reasonable steps */</comment>
    }<pos:position pos:line="19" pos:column="6"/></block></then> <else pos:line="19" pos:column="7">else <block pos:line="19" pos:column="12">{
        <expr_stmt><expr><name pos:line="20" pos:column="9">new_cap<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <operator pos:line="20" pos:column="19">(<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">size_t<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">)<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="28">min_cap<pos:position pos:line="20" pos:column="35"/></name></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="23" pos:column="5">/* last chance to fit before we assert(!overflow) */</comment>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">new_cap<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">&gt;<pos:position pos:line="24" pos:column="21"/></operator> <operator pos:line="24" pos:column="19">(<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">size_t<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">)<pos:position pos:line="24" pos:column="27"/></operator> <name pos:line="24" pos:column="28">max_capacity<pos:position pos:line="24" pos:column="40"/></name></expr>)<pos:position pos:line="24" pos:column="41"/></condition><then pos:line="24" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="9">new_cap<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <operator pos:line="25" pos:column="19">(<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="20">size_t<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">)<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="28">max_capacity<pos:position pos:line="25" pos:column="40"/></name></expr>;<pos:position pos:line="25" pos:column="41"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">assert<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><name pos:line="27" pos:column="12">new_cap<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">&lt;=<pos:position pos:line="27" pos:column="25"/></operator> <operator pos:line="27" pos:column="23">(<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="24">size_t<pos:position pos:line="27" pos:column="30"/></name><operator pos:line="27" pos:column="30">)<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="32">max_capacity<pos:position pos:line="27" pos:column="44"/></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>   <comment type="block" pos:line="27" pos:column="49">/* no overflow */</comment>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">assert<pos:position pos:line="29" pos:column="11"/></name><argument_list pos:line="29" pos:column="11">(<argument><expr><name pos:line="29" pos:column="12">new_cap<pos:position pos:line="29" pos:column="19"/></name> <operator pos:line="29" pos:column="20">&gt;<pos:position pos:line="29" pos:column="24"/></operator> <operator pos:line="29" pos:column="22">(<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">size_t<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">)<pos:position pos:line="29" pos:column="30"/></operator> <name pos:line="29" pos:column="31">capacity<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>    <comment type="block" pos:line="29" pos:column="45">/* progress */</comment>

    <expr_stmt><expr><name pos:line="31" pos:column="5">buf_cap<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <operator pos:line="31" pos:column="15">(<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">size_t<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">)<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="24">capacity<pos:position pos:line="31" pos:column="32"/></name></expr>;<pos:position pos:line="31" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><name pos:line="33" pos:column="5">buf<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">=<pos:position pos:line="33" pos:column="10"/></operator> <operator pos:line="33" pos:column="11">(<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">char<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></operator><operator pos:line="33" pos:column="18">)<pos:position pos:line="33" pos:column="19"/></operator><call><name pos:line="33" pos:column="19">memReallocBuf<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">buf<pos:position pos:line="33" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="38">new_cap<pos:position pos:line="33" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="47">&amp;<pos:position pos:line="33" pos:column="52"/></operator><name pos:line="33" pos:column="48">buf_cap<pos:position pos:line="33" pos:column="55"/></name></expr></argument>)<pos:position pos:line="33" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="57"/></expr_stmt>

    <comment type="block" pos:line="35" pos:column="5">/* done */</comment>
    <expr_stmt><expr><name pos:line="36" pos:column="5">capacity<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">=<pos:position pos:line="36" pos:column="15"/></operator> <operator pos:line="36" pos:column="16">(<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="17">mb_size_t<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">)<pos:position pos:line="36" pos:column="27"/></operator> <name pos:line="36" pos:column="28">buf_cap<pos:position pos:line="36" pos:column="35"/></name></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">PROF_stop<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">(<argument><expr><name pos:line="37" pos:column="15">MemBuf_grow<pos:position pos:line="37" pos:column="26"/></name></expr></argument>)<pos:position pos:line="37" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
