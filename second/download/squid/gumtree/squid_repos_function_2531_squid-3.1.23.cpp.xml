<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2531_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">FtpStateData<pos:position pos:line="1" pos:column="18"/></name><operator pos:line="1" pos:column="18">::<pos:position pos:line="1" pos:column="20"/></operator><name pos:line="1" pos:column="20">ftpReadControlReply<pos:position pos:line="1" pos:column="39"/></name></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><specifier pos:line="1" pos:column="40">const<pos:position pos:line="1" pos:column="45"/></specifier> <name pos:line="1" pos:column="46">CommIoCbParams<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">&amp;<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="62">io<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">debugs<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="number" pos:line="3" pos:column="12">9<pos:position pos:line="3" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="15">3<pos:position pos:line="3" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="18">"ftpReadControlReply: FD "<pos:position pos:line="3" pos:column="44"/></literal> <operator pos:line="3" pos:column="45">&lt;&lt;<pos:position pos:line="3" pos:column="53"/></operator> <name><name pos:line="3" pos:column="48">io<pos:position pos:line="3" pos:column="50"/></name><operator pos:line="3" pos:column="50">.<pos:position pos:line="3" pos:column="51"/></operator><name pos:line="3" pos:column="51">fd<pos:position pos:line="3" pos:column="53"/></name></name> <operator pos:line="3" pos:column="54">&lt;&lt;<pos:position pos:line="3" pos:column="62"/></operator> <literal type="string" pos:line="3" pos:column="57">", Read "<pos:position pos:line="3" pos:column="66"/></literal> <operator pos:line="3" pos:column="67">&lt;&lt;<pos:position pos:line="3" pos:column="75"/></operator> <name><name pos:line="3" pos:column="70">io<pos:position pos:line="3" pos:column="72"/></name><operator pos:line="3" pos:column="72">.<pos:position pos:line="3" pos:column="73"/></operator><name pos:line="3" pos:column="73">size<pos:position pos:line="3" pos:column="77"/></name></name> <operator pos:line="3" pos:column="78">&lt;&lt;<pos:position pos:line="3" pos:column="86"/></operator> <literal type="string" pos:line="3" pos:column="81">" bytes"<pos:position pos:line="3" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="91"/></expr_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">io<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">.<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">size<pos:position pos:line="5" pos:column="16"/></name></name> <operator pos:line="5" pos:column="17">&gt;<pos:position pos:line="5" pos:column="21"/></operator> <literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21"> <block pos:line="5" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">kb_incr<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><operator pos:line="6" pos:column="17">&amp;<pos:position pos:line="6" pos:column="22"/></operator><name><name pos:line="6" pos:column="18">statCounter<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">.<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">server<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">.<pos:position pos:line="6" pos:column="37"/></operator><name pos:line="6" pos:column="37">all<pos:position pos:line="6" pos:column="40"/></name><operator pos:line="6" pos:column="40">.<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="41">kbytes_in<pos:position pos:line="6" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="52">io<pos:position pos:line="6" pos:column="54"/></name><operator pos:line="6" pos:column="54">.<pos:position pos:line="6" pos:column="55"/></operator><name pos:line="6" pos:column="55">size<pos:position pos:line="6" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">kb_incr<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><operator pos:line="7" pos:column="17">&amp;<pos:position pos:line="7" pos:column="22"/></operator><name><name pos:line="7" pos:column="18">statCounter<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">.<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">server<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">.<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">ftp<pos:position pos:line="7" pos:column="40"/></name><operator pos:line="7" pos:column="40">.<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="41">kbytes_in<pos:position pos:line="7" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="52">io<pos:position pos:line="7" pos:column="54"/></name><operator pos:line="7" pos:column="54">.<pos:position pos:line="7" pos:column="55"/></operator><name pos:line="7" pos:column="55">size<pos:position pos:line="7" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">io<pos:position pos:line="10" pos:column="11"/></name><operator pos:line="10" pos:column="11">.<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">flag<pos:position pos:line="10" pos:column="16"/></name></name> <operator pos:line="10" pos:column="17">==<pos:position pos:line="10" pos:column="19"/></operator> <name pos:line="10" pos:column="20">COMM_ERR_CLOSING<pos:position pos:line="10" pos:column="36"/></name></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37">
        <block type="pseudo"><return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name pos:line="13" pos:column="9">EBIT_TEST<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name><name pos:line="13" pos:column="19">entry<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">flags<pos:position pos:line="13" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="33">ENTRY_ABORTED<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="48"/></condition><then pos:line="13" pos:column="48"> <block pos:line="13" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">abortTransaction<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><literal type="string" pos:line="14" pos:column="26">"entry aborted during control reply read"<pos:position pos:line="14" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><name><name pos:line="18" pos:column="12">ctrl<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">.<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">offset<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">&lt;<pos:position pos:line="18" pos:column="28"/></operator> <name><name pos:line="18" pos:column="26">ctrl<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">.<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">size<pos:position pos:line="18" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">io<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">.<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">flag<pos:position pos:line="20" pos:column="16"/></name></name> <operator pos:line="20" pos:column="17">==<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">COMM_OK<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">&amp;&amp;<pos:position pos:line="20" pos:column="38"/></operator> <name><name pos:line="20" pos:column="31">io<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">.<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="34">size<pos:position pos:line="20" pos:column="38"/></name></name> <operator pos:line="20" pos:column="39">&gt;<pos:position pos:line="20" pos:column="43"/></operator> <literal type="number" pos:line="20" pos:column="41">0<pos:position pos:line="20" pos:column="42"/></literal></expr>)<pos:position pos:line="20" pos:column="43"/></condition><then pos:line="20" pos:column="43"> <block pos:line="20" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">fd_bytes<pos:position pos:line="21" pos:column="17"/></name><argument_list pos:line="21" pos:column="17">(<argument><expr><name><name pos:line="21" pos:column="18">io<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">.<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="21">fd<pos:position pos:line="21" pos:column="23"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="25">io<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">.<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="28">size<pos:position pos:line="21" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="34">FD_READ<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">io<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">.<pos:position pos:line="24" pos:column="12"/></operator><name pos:line="24" pos:column="12">flag<pos:position pos:line="24" pos:column="16"/></name></name> <operator pos:line="24" pos:column="17">!=<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">COMM_OK<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28"> <block pos:line="24" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">50<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="25" pos:column="20">ignoreErrno<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><name><name pos:line="25" pos:column="32">io<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">.<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">xerrno<pos:position pos:line="25" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr> ?<pos:position pos:line="25" pos:column="44"/></condition><then pos:line="25" pos:column="44"> <expr><literal type="number" pos:line="25" pos:column="45">3<pos:position pos:line="25" pos:column="46"/></literal></expr> <pos:position pos:line="25" pos:column="47"/></then><else pos:line="25" pos:column="47">: <expr><name pos:line="25" pos:column="49">DBG_IMPORTANT<pos:position pos:line="25" pos:column="62"/></name></expr></else></ternary></expr></argument>,
               <argument><expr><literal type="string" pos:line="26" pos:column="16">"ftpReadControlReply: read error: "<pos:position pos:line="26" pos:column="51"/></literal> <operator pos:line="26" pos:column="52">&lt;&lt;<pos:position pos:line="26" pos:column="60"/></operator> <call><name pos:line="26" pos:column="55">xstrerr<pos:position pos:line="26" pos:column="62"/></name><argument_list pos:line="26" pos:column="62">(<argument><expr><name><name pos:line="26" pos:column="63">io<pos:position pos:line="26" pos:column="65"/></name><operator pos:line="26" pos:column="65">.<pos:position pos:line="26" pos:column="66"/></operator><name pos:line="26" pos:column="66">xerrno<pos:position pos:line="26" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="75"/></expr_stmt>

        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">ignoreErrno<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name><name pos:line="28" pos:column="25">io<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">.<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="28">xerrno<pos:position pos:line="28" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="36"/></condition><then pos:line="28" pos:column="36"> <block pos:line="28" pos:column="37">{
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">scheduleReadControlReply<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><literal type="number" pos:line="29" pos:column="38">0<pos:position pos:line="29" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></then> <else pos:line="30" pos:column="11">else <block pos:line="30" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">failed<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">ERR_READ_ERROR<pos:position pos:line="31" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="36">io<pos:position pos:line="31" pos:column="38"/></name><operator pos:line="31" pos:column="38">.<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="39">xerrno<pos:position pos:line="31" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="47"/></expr_stmt>
            <comment type="block" pos:line="32" pos:column="13">/* failed closes ctrl.fd and frees ftpState */</comment>
        }<pos:position pos:line="33" pos:column="10"/></block></else></if>
        <return pos:line="34" pos:column="9">return;<pos:position pos:line="34" pos:column="16"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name><name pos:line="37" pos:column="9">io<pos:position pos:line="37" pos:column="11"/></name><operator pos:line="37" pos:column="11">.<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="12">size<pos:position pos:line="37" pos:column="16"/></name></name> <operator pos:line="37" pos:column="17">==<pos:position pos:line="37" pos:column="19"/></operator> <literal type="number" pos:line="37" pos:column="20">0<pos:position pos:line="37" pos:column="21"/></literal></expr>)<pos:position pos:line="37" pos:column="22"/></condition><then pos:line="37" pos:column="22"> <block pos:line="37" pos:column="23">{
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name><name pos:line="38" pos:column="13">entry<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">-&gt;<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="20">store_status<pos:position pos:line="38" pos:column="32"/></name></name> <operator pos:line="38" pos:column="33">==<pos:position pos:line="38" pos:column="35"/></operator> <name pos:line="38" pos:column="36">STORE_PENDING<pos:position pos:line="38" pos:column="49"/></name></expr>)<pos:position pos:line="38" pos:column="50"/></condition><then pos:line="38" pos:column="50"> <block pos:line="38" pos:column="51">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">failed<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><name pos:line="39" pos:column="20">ERR_FTP_FAILURE<pos:position pos:line="39" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="37">0<pos:position pos:line="39" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="40"/></expr_stmt>
            <comment type="block" pos:line="40" pos:column="13">/* failed closes ctrl.fd and frees ftpState */</comment>
            <return pos:line="41" pos:column="13">return;<pos:position pos:line="41" pos:column="20"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="44" pos:column="9">/* XXX this may end up having to be serverComplete() .. */</comment>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">abortTransaction<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><literal type="string" pos:line="45" pos:column="26">"zero control reply read"<pos:position pos:line="45" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>
        <return pos:line="46" pos:column="9">return;<pos:position pos:line="46" pos:column="16"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="49" pos:column="5">unsigned<pos:position pos:line="49" pos:column="13"/></name> <name pos:line="49" pos:column="14">int<pos:position pos:line="49" pos:column="17"/></name></type> <name pos:line="49" pos:column="18">len<pos:position pos:line="49" pos:column="21"/></name> <init pos:line="49" pos:column="22">=<expr><name><name pos:line="49" pos:column="23">io<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">.<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="26">size<pos:position pos:line="49" pos:column="30"/></name></name> <operator pos:line="49" pos:column="31">+<pos:position pos:line="49" pos:column="32"/></operator> <name><name pos:line="49" pos:column="33">ctrl<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">.<pos:position pos:line="49" pos:column="38"/></operator><name pos:line="49" pos:column="38">offset<pos:position pos:line="49" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="49" pos:column="45"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">ctrl<pos:position pos:line="50" pos:column="9"/></name><operator pos:line="50" pos:column="9">.<pos:position pos:line="50" pos:column="10"/></operator><name pos:line="50" pos:column="10">offset<pos:position pos:line="50" pos:column="16"/></name></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <name pos:line="50" pos:column="19">len<pos:position pos:line="50" pos:column="22"/></name></expr>;<pos:position pos:line="50" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">assert<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><name pos:line="51" pos:column="12">len<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">&lt;=<pos:position pos:line="51" pos:column="21"/></operator> <name><name pos:line="51" pos:column="19">ctrl<pos:position pos:line="51" pos:column="23"/></name><operator pos:line="51" pos:column="23">.<pos:position pos:line="51" pos:column="24"/></operator><name pos:line="51" pos:column="24">size<pos:position pos:line="51" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">handleControlReply<pos:position pos:line="52" pos:column="23"/></name><argument_list pos:line="52" pos:column="23">()<pos:position pos:line="52" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="26"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
