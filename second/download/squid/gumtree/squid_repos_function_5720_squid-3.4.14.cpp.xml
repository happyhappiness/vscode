<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5720_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">DiskdIOStrategy<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">handle<pos:position pos:line="2" pos:column="24"/></name></name><parameter_list pos:line="2" pos:column="24">(<parameter><decl><type><name pos:line="2" pos:column="25">diomsg<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type> <name pos:line="2" pos:column="34">M<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name pos:line="4" pos:column="10">cbdataReferenceValid<pos:position pos:line="4" pos:column="30"/></name> <argument_list pos:line="4" pos:column="31">(<argument><expr><name><name pos:line="4" pos:column="32">M<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">-&gt;<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="35">callback_data<pos:position pos:line="4" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="50"/></condition><then pos:line="4" pos:column="50"> <block pos:line="4" pos:column="51">{
        <comment type="block" pos:line="5" pos:column="9">/* I.e. already closed file
         * - say when we have a error opening after
         *   a read was already queued
         */</comment>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">79<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">3<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"storeDiskdHandle: Invalid callback_data "<pos:position pos:line="9" pos:column="65"/></literal> <operator pos:line="9" pos:column="66">&lt;&lt;<pos:position pos:line="9" pos:column="74"/></operator> <name><name pos:line="9" pos:column="69">M<pos:position pos:line="9" pos:column="70"/></name><operator pos:line="9" pos:column="70">-&gt;<pos:position pos:line="9" pos:column="75"/></operator><name pos:line="9" pos:column="72">callback_data<pos:position pos:line="9" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="87"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">cbdataReferenceDone<pos:position pos:line="10" pos:column="28"/></name> <argument_list pos:line="10" pos:column="29">(<argument><expr><name><name pos:line="10" pos:column="30">M<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">callback_data<pos:position pos:line="10" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="14" pos:column="5">/* set errno passed from diskd.  makes debugging more meaningful */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">M<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">status<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">&lt;<pos:position pos:line="15" pos:column="23"/></operator> <literal type="number" pos:line="15" pos:column="21">0<pos:position pos:line="15" pos:column="22"/></literal></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">errno<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">=<pos:position pos:line="16" pos:column="16"/></operator> <operator pos:line="16" pos:column="17">-<pos:position pos:line="16" pos:column="18"/></operator><name><name pos:line="16" pos:column="18">M<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">status<pos:position pos:line="16" pos:column="27"/></name></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">M<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">-&gt;<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="12">newstyle<pos:position pos:line="18" pos:column="20"/></name></name></expr>)<pos:position pos:line="18" pos:column="21"/></condition><then pos:line="18" pos:column="21"> <block pos:line="18" pos:column="22">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">DiskdFile<pos:position pos:line="19" pos:column="18"/></name> <modifier pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></modifier></type><name pos:line="19" pos:column="20">theFile<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><operator pos:line="19" pos:column="30">(<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="31">DiskdFile<pos:position pos:line="19" pos:column="40"/></name> <operator pos:line="19" pos:column="41">*<pos:position pos:line="19" pos:column="42"/></operator><operator pos:line="19" pos:column="42">)<pos:position pos:line="19" pos:column="43"/></operator><name><name pos:line="19" pos:column="43">M<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">-&gt;<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="46">callback_data<pos:position pos:line="19" pos:column="59"/></name></name></expr></init></decl>;<pos:position pos:line="19" pos:column="60"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="20" pos:column="9">theFile<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">unlock<pos:position pos:line="20" pos:column="24"/></name></name><argument_list pos:line="20" pos:column="24">()<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">theFile<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">completed<pos:position pos:line="21" pos:column="27"/></name></name> <argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">M<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then> <else pos:line="22" pos:column="7">else
        <block type="pseudo"><switch pos:line="23" pos:column="9">switch <condition pos:line="23" pos:column="16">(<expr><name><name pos:line="23" pos:column="17">M<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">mtype<pos:position pos:line="23" pos:column="25"/></name></name></expr>)<pos:position pos:line="23" pos:column="26"/></condition> <block pos:line="23" pos:column="27">{

        <case pos:line="25" pos:column="9">case <expr><name pos:line="25" pos:column="14">_MQD_OPEN<pos:position pos:line="25" pos:column="23"/></name></expr>:<pos:position pos:line="25" pos:column="24"/></case>

        <case pos:line="27" pos:column="9">case <expr><name pos:line="27" pos:column="14">_MQD_CREATE<pos:position pos:line="27" pos:column="25"/></name></expr>:<pos:position pos:line="27" pos:column="26"/></case>

        <case pos:line="29" pos:column="9">case <expr><name pos:line="29" pos:column="14">_MQD_CLOSE<pos:position pos:line="29" pos:column="24"/></name></expr>:<pos:position pos:line="29" pos:column="25"/></case>

        <case pos:line="31" pos:column="9">case <expr><name pos:line="31" pos:column="14">_MQD_READ<pos:position pos:line="31" pos:column="23"/></name></expr>:<pos:position pos:line="31" pos:column="24"/></case>

        <case pos:line="33" pos:column="9">case <expr><name pos:line="33" pos:column="14">_MQD_WRITE<pos:position pos:line="33" pos:column="24"/></name></expr>:<pos:position pos:line="33" pos:column="25"/></case>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">assert<pos:position pos:line="34" pos:column="19"/></name> <argument_list pos:line="34" pos:column="20">(<argument><expr><literal type="number" pos:line="34" pos:column="21">0<pos:position pos:line="34" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>
            <break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break>

        <case pos:line="37" pos:column="9">case <expr><name pos:line="37" pos:column="14">_MQD_UNLINK<pos:position pos:line="37" pos:column="25"/></name></expr>:<pos:position pos:line="37" pos:column="26"/></case>
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">unlinkDone<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">M<pos:position pos:line="38" pos:column="25"/></name></expr></argument>)<pos:position pos:line="38" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="27"/></expr_stmt>
            <break pos:line="39" pos:column="13">break;<pos:position pos:line="39" pos:column="19"/></break>

        <default pos:line="41" pos:column="9">default:<pos:position pos:line="41" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">assert<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><literal type="number" pos:line="42" pos:column="20">0<pos:position pos:line="42" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="23"/></expr_stmt>
            <break pos:line="43" pos:column="13">break;<pos:position pos:line="43" pos:column="19"/></break>
        }<pos:position pos:line="44" pos:column="10"/></block></switch></block></else></if>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">cbdataReferenceDone<pos:position pos:line="46" pos:column="24"/></name> <argument_list pos:line="46" pos:column="25">(<argument><expr><name><name pos:line="46" pos:column="26">M<pos:position pos:line="46" pos:column="27"/></name><operator pos:line="46" pos:column="27">-&gt;<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="29">callback_data<pos:position pos:line="46" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="44"/></expr_stmt>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
