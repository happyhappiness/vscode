<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3760_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Initiate<pos:position pos:line="1" pos:column="26"/></name><operator pos:line="1" pos:column="26">::<pos:position pos:line="1" pos:column="28"/></operator><name pos:line="1" pos:column="28">swanSong<pos:position pos:line="1" pos:column="36"/></name></name><parameter_list pos:line="1" pos:column="36">()<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">debugs<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="number" pos:line="3" pos:column="12">93<pos:position pos:line="3" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="16">5<pos:position pos:line="3" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="3" pos:column="19">HERE<pos:position pos:line="3" pos:column="23"/></name> <operator pos:line="3" pos:column="24">&lt;&lt;<pos:position pos:line="3" pos:column="32"/></operator> <literal type="string" pos:line="3" pos:column="27">"swan sings"<pos:position pos:line="3" pos:column="39"/></literal> <operator pos:line="3" pos:column="40">&lt;&lt;<pos:position pos:line="3" pos:column="48"/></operator> <call><name pos:line="3" pos:column="43">status<pos:position pos:line="3" pos:column="49"/></name><argument_list pos:line="3" pos:column="49">()<pos:position pos:line="3" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="53"/></expr_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name><name pos:line="5" pos:column="9">theInitiator<pos:position pos:line="5" pos:column="21"/></name><operator pos:line="5" pos:column="21">.<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">set<pos:position pos:line="5" pos:column="25"/></name></name><argument_list pos:line="5" pos:column="25">()<pos:position pos:line="5" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="28"/></condition><then pos:line="5" pos:column="28"> <block pos:line="5" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">93<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="20">3<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="23">HERE<pos:position pos:line="6" pos:column="27"/></name> <operator pos:line="6" pos:column="28">&lt;&lt;<pos:position pos:line="6" pos:column="36"/></operator> <literal type="string" pos:line="6" pos:column="31">"fatal failure; sending abort notification"<pos:position pos:line="6" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">tellQueryAborted<pos:position pos:line="7" pos:column="25"/></name><argument_list pos:line="7" pos:column="25">(<argument><expr><literal type="boolean" pos:line="7" pos:column="26">true<pos:position pos:line="7" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="32"/></expr_stmt> <comment type="line" pos:line="7" pos:column="33">// final by default</comment>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">93<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">5<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="19">HERE<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&lt;&lt;<pos:position pos:line="10" pos:column="32"/></operator> <literal type="string" pos:line="10" pos:column="27">"swan sang"<pos:position pos:line="10" pos:column="38"/></literal> <operator pos:line="10" pos:column="39">&lt;&lt;<pos:position pos:line="10" pos:column="47"/></operator> <call><name pos:line="10" pos:column="42">status<pos:position pos:line="10" pos:column="48"/></name><argument_list pos:line="10" pos:column="48">()<pos:position pos:line="10" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="52"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
