<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2120_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">mem_node<pos:position pos:line="1" pos:column="9"/></name> <modifier pos:line="1" pos:column="10">*<pos:position pos:line="1" pos:column="11"/></modifier></type>
<name><name pos:line="2" pos:column="1">mem_hdr<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">getBlockContainingLocation<pos:position pos:line="2" pos:column="36"/></name></name> <parameter_list pos:line="2" pos:column="37">(<parameter><decl><type><name pos:line="2" pos:column="38">int64_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">location<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list> <specifier pos:line="2" pos:column="56">const<pos:position pos:line="2" pos:column="61"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Optimize: do not create a whole mem_node just to store location</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">mem_node<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">target<pos:position pos:line="5" pos:column="20"/></name> <argument_list pos:line="5" pos:column="21">(<argument><expr><name pos:line="5" pos:column="22">location<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">target<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">.<pos:position pos:line="6" pos:column="12"/></operator><name pos:line="6" pos:column="12">nodeBuffer<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">.<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">length<pos:position pos:line="6" pos:column="29"/></name></name> <operator pos:line="6" pos:column="30">=<pos:position pos:line="6" pos:column="31"/></operator> <literal type="number" pos:line="6" pos:column="32">1<pos:position pos:line="6" pos:column="33"/></literal></expr>;<pos:position pos:line="6" pos:column="34"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">mem_node<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier><specifier pos:line="7" pos:column="15">const<pos:position pos:line="7" pos:column="20"/></specifier> <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type><name pos:line="7" pos:column="22">result<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><call><name><name pos:line="7" pos:column="31">nodes<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">.<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="37">find<pos:position pos:line="7" pos:column="41"/></name></name> <argument_list pos:line="7" pos:column="42">(<argument><expr><operator pos:line="7" pos:column="43">&amp;<pos:position pos:line="7" pos:column="48"/></operator><name pos:line="7" pos:column="44">target<pos:position pos:line="7" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="52">NodeCompare<pos:position pos:line="7" pos:column="63"/></name></expr></argument>)<pos:position pos:line="7" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="65"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">result<pos:position pos:line="9" pos:column="15"/></name></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><operator pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">result<pos:position pos:line="10" pos:column="23"/></name></expr>;<pos:position pos:line="10" pos:column="24"/></return></block></then></if>

    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
