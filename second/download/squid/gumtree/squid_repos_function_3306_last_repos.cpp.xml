<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3306_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">AccessCheck<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">AccessCheckCallbackWrapper<pos:position pos:line="2" pos:column="52"/></name></name><parameter_list pos:line="2" pos:column="52">(<parameter><decl><type><name pos:line="2" pos:column="53">allow_t<pos:position pos:line="2" pos:column="60"/></name></type> <name pos:line="2" pos:column="61">answer<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="69">void<pos:position pos:line="2" pos:column="73"/></name> <modifier pos:line="2" pos:column="74">*<pos:position pos:line="2" pos:column="75"/></modifier></type><name pos:line="2" pos:column="75">data<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="80"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">93<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">8<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">"callback answer="<pos:position pos:line="4" pos:column="45"/></literal> <operator pos:line="4" pos:column="46">&lt;&lt;<pos:position pos:line="4" pos:column="54"/></operator> <name pos:line="4" pos:column="49">answer<pos:position pos:line="4" pos:column="55"/></name></expr></argument>)<pos:position pos:line="4" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="57"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">AccessCheck<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">ac<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><operator pos:line="5" pos:column="23">(<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">AccessCheck<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">*<pos:position pos:line="5" pos:column="36"/></operator><operator pos:line="5" pos:column="36">)<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="37">data<pos:position pos:line="5" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>

    <comment type="block" format="doxygen" pos:line="7" pos:column="5">/** \todo AYJ 2008-06-12: If answer == ACCESS_AUTH_REQUIRED
     * we should be kicking off an authentication before continuing
     * with this request. see bug 2400 for details.
     */</comment>

    <comment type="line" pos:line="12" pos:column="5">// convert to async call to get async call protections and features</comment>
    <typedef pos:line="13" pos:column="5">typedef <type><name><name pos:line="13" pos:column="13">UnaryMemFunT<pos:position pos:line="13" pos:column="25"/></name><argument_list type="generic" pos:line="13" pos:column="25">&lt;<argument><expr><name pos:line="13" pos:column="26">AccessCheck<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="39">allow_t<pos:position pos:line="13" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="13" pos:column="50"/></argument_list></name></type> <name pos:line="13" pos:column="48">MyDialer<pos:position pos:line="13" pos:column="56"/></name>;<pos:position pos:line="13" pos:column="57"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">AsyncCall<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">::<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">Pointer<pos:position pos:line="14" pos:column="23"/></name></name></type> <name pos:line="14" pos:column="24">call<pos:position pos:line="14" pos:column="28"/></name> <init pos:line="14" pos:column="29">=
        <expr><call><name pos:line="15" pos:column="9">asyncCall<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><literal type="number" pos:line="15" pos:column="19">93<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="15" pos:column="22">7<pos:position pos:line="15" pos:column="23"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="25">"Adaptation::AccessCheck::noteAnswer"<pos:position pos:line="15" pos:column="62"/></literal></expr></argument>,
                  <argument><expr><call><name pos:line="16" pos:column="19">MyDialer<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">ac<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="32">&amp;<pos:position pos:line="16" pos:column="37"/></operator><name><name pos:line="16" pos:column="33">Adaptation<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">::<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="45">AccessCheck<pos:position pos:line="16" pos:column="56"/></name><operator pos:line="16" pos:column="56">::<pos:position pos:line="16" pos:column="58"/></operator><name pos:line="16" pos:column="58">noteAnswer<pos:position pos:line="16" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="70">answer<pos:position pos:line="16" pos:column="76"/></name></expr></argument>)<pos:position pos:line="16" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="79"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">ScheduleCallHere<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">call<pos:position pos:line="17" pos:column="26"/></name></expr></argument>)<pos:position pos:line="17" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>

}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
