<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5654_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">TcpAcceptor<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">doAccept<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">fd<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">void<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">data<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <try pos:line="4" pos:column="5">try <block pos:line="4" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">5<pos:position pos:line="5" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="19">2<pos:position pos:line="5" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="22">HERE<pos:position pos:line="5" pos:column="26"/></name> <operator pos:line="5" pos:column="27">&lt;&lt;<pos:position pos:line="5" pos:column="35"/></operator> <literal type="string" pos:line="5" pos:column="30">"New connection on FD "<pos:position pos:line="5" pos:column="53"/></literal> <operator pos:line="5" pos:column="54">&lt;&lt;<pos:position pos:line="5" pos:column="62"/></operator> <name pos:line="5" pos:column="57">fd<pos:position pos:line="5" pos:column="59"/></name></expr></argument>)<pos:position pos:line="5" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="61"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="7" pos:column="9">Must<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><call><name pos:line="7" pos:column="14">isOpen<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">fd<pos:position pos:line="7" pos:column="23"/></name></expr></argument>)<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">TcpAcceptor<pos:position pos:line="8" pos:column="20"/></name> <modifier pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></modifier></type><name pos:line="8" pos:column="22">afd<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><cast type="static" pos:line="8" pos:column="28">static_cast<argument_list type="generic" pos:line="8" pos:column="39">&lt;<argument><expr><name pos:line="8" pos:column="40">TcpAcceptor<pos:position pos:line="8" pos:column="51"/></name><operator pos:line="8" pos:column="51">*<pos:position pos:line="8" pos:column="52"/></operator></expr></argument>&gt;<pos:position pos:line="8" pos:column="56"/></argument_list><argument_list pos:line="8" pos:column="53">(<argument><expr><name pos:line="8" pos:column="54">data<pos:position pos:line="8" pos:column="58"/></name></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>

        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name pos:line="10" pos:column="14">okToAccept<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">()<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27"> <block pos:line="10" pos:column="28">{
            <expr_stmt><expr><call><name><name pos:line="11" pos:column="13">AcceptLimiter<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">::<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">Instance<pos:position pos:line="11" pos:column="36"/></name></name><argument_list pos:line="11" pos:column="36">()<pos:position pos:line="11" pos:column="38"/></argument_list></call><operator pos:line="11" pos:column="38">.<pos:position pos:line="11" pos:column="39"/></operator><call><name pos:line="11" pos:column="39">defer<pos:position pos:line="11" pos:column="44"/></name><argument_list pos:line="11" pos:column="44">(<argument><expr><name pos:line="11" pos:column="45">afd<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="12" pos:column="10"/></block></then> <else pos:line="12" pos:column="11">else <block pos:line="12" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="13" pos:column="13">afd<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">acceptNext<pos:position pos:line="13" pos:column="28"/></name></name><argument_list pos:line="13" pos:column="28">()<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">SetSelect<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">fd<pos:position pos:line="15" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="23">COMM_SELECT_READ<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="41">Comm<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">::<pos:position pos:line="15" pos:column="47"/></operator><name pos:line="15" pos:column="47">TcpAcceptor<pos:position pos:line="15" pos:column="58"/></name><operator pos:line="15" pos:column="58">::<pos:position pos:line="15" pos:column="60"/></operator><name pos:line="15" pos:column="60">doAccept<pos:position pos:line="15" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="70">afd<pos:position pos:line="15" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="75">0<pos:position pos:line="15" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="78"/></expr_stmt>

    }<pos:position pos:line="17" pos:column="6"/></block> <catch pos:line="17" pos:column="7">catch <parameter_list pos:line="17" pos:column="13">(<parameter><decl><type><specifier pos:line="17" pos:column="14">const<pos:position pos:line="17" pos:column="19"/></specifier> <name><name pos:line="17" pos:column="20">std<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">::<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="25">exception<pos:position pos:line="17" pos:column="34"/></name></name> <modifier pos:line="17" pos:column="35">&amp;<pos:position pos:line="17" pos:column="40"/></modifier></type><name pos:line="17" pos:column="36">e<pos:position pos:line="17" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="17" pos:column="38"/></parameter_list> <block pos:line="17" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">fatalf<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="string" pos:line="18" pos:column="16">"FATAL: error while accepting new client connection: %s\n"<pos:position pos:line="18" pos:column="74"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="18" pos:column="76">e<pos:position pos:line="18" pos:column="77"/></name><operator pos:line="18" pos:column="77">.<pos:position pos:line="18" pos:column="78"/></operator><name pos:line="18" pos:column="78">what<pos:position pos:line="18" pos:column="82"/></name></name><argument_list pos:line="18" pos:column="82">()<pos:position pos:line="18" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="86"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></catch> <catch pos:line="19" pos:column="7">catch <parameter_list pos:line="19" pos:column="13">(<parameter><decl><type><modifier pos:line="19" pos:column="14">...<pos:position pos:line="19" pos:column="17"/></modifier></type></decl></parameter>)<pos:position pos:line="19" pos:column="18"/></parameter_list> <block pos:line="19" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">fatal<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><literal type="string" pos:line="20" pos:column="15">"FATAL: error while accepting new client connection: [unkown]\n"<pos:position pos:line="20" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></catch></try>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
