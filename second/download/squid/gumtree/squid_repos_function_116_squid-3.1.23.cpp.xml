<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_116_squid-3.1.23.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">ip_user_dict<pos:position pos:line="1" pos:column="20"/></name></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type>
<name pos:line="2" pos:column="1">load_dict<pos:position pos:line="2" pos:column="10"/></name> <parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">FILE<pos:position pos:line="2" pos:column="16"/></name> <modifier pos:line="2" pos:column="17">*<pos:position pos:line="2" pos:column="18"/></modifier></type> <name pos:line="2" pos:column="19">FH<pos:position pos:line="2" pos:column="21"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="22"/></parameter_list> <block pos:line="2" pos:column="23">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">ip_user_dict<pos:position pos:line="3" pos:column="24"/></name></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">current_entry<pos:position pos:line="3" pos:column="39"/></name></decl>;<pos:position pos:line="3" pos:column="40"/></decl_stmt>	<comment type="block" pos:line="3" pos:column="41">/* the structure used to
					   store data */</comment>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">ip_user_dict<pos:position pos:line="5" pos:column="24"/></name></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">first_entry<pos:position pos:line="5" pos:column="37"/></name> <init pos:line="5" pos:column="38">= <expr><name pos:line="5" pos:column="40">NULL<pos:position pos:line="5" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>	<comment type="block" pos:line="5" pos:column="49">/* the head of the
						   linked list */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">line<pos:position pos:line="7" pos:column="14"/></name><index pos:line="7" pos:column="14">[<expr><name pos:line="7" pos:column="15">BUFSIZE<pos:position pos:line="7" pos:column="22"/></name></expr>]<pos:position pos:line="7" pos:column="23"/></index></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>		<comment type="block" pos:line="7" pos:column="33">/* the buffer for the lines read
				   from the dict file */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">cp<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>			<comment type="block" pos:line="9" pos:column="33">/* a char pointer used to parse
				   each line */</comment>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">username<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>		<comment type="block" pos:line="11" pos:column="33">/* for the username */</comment>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type><name pos:line="12" pos:column="11">tmpbuf<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>			<comment type="block" pos:line="12" pos:column="41">/* for the address before the
				   bitwise AND */</comment>

    <comment type="block" pos:line="15" pos:column="5">/* the pointer to the first entry in the linked list */</comment>
    <expr_stmt><expr><name pos:line="16" pos:column="5">first_entry<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <call><name pos:line="16" pos:column="19">malloc<pos:position pos:line="16" pos:column="25"/></name> <argument_list pos:line="16" pos:column="26">(<argument><expr><sizeof pos:line="16" pos:column="27">sizeof <argument_list pos:line="16" pos:column="34">(<argument><expr pos:line="16" pos:column="35">struct <name pos:line="16" pos:column="42">ip_user_dict<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">current_entry<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">first_entry<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>

    <while pos:line="19" pos:column="5">while <condition pos:line="19" pos:column="11">(<expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">cp<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">fgets<pos:position pos:line="19" pos:column="23"/></name> <argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">line<pos:position pos:line="19" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="31">sizeof <argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">line<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="19" pos:column="46">FH<pos:position pos:line="19" pos:column="48"/></name></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call><operator pos:line="19" pos:column="49">)<pos:position pos:line="19" pos:column="50"/></operator> <operator pos:line="19" pos:column="51">!=<pos:position pos:line="19" pos:column="53"/></operator> <name pos:line="19" pos:column="54">NULL<pos:position pos:line="19" pos:column="58"/></name></expr>)<pos:position pos:line="19" pos:column="59"/></condition> <block pos:line="19" pos:column="60">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">line<pos:position pos:line="20" pos:column="17"/></name><index pos:line="20" pos:column="17">[<expr><literal type="number" pos:line="20" pos:column="18">0<pos:position pos:line="20" pos:column="19"/></literal></expr>]<pos:position pos:line="20" pos:column="20"/></index></name> <operator pos:line="20" pos:column="21">==<pos:position pos:line="20" pos:column="23"/></operator> <literal type="char" pos:line="20" pos:column="24">'#'<pos:position pos:line="20" pos:column="27"/></literal></expr>)<pos:position pos:line="20" pos:column="28"/></condition><then pos:line="20" pos:column="28"> <block pos:line="20" pos:column="29">{
            <continue pos:line="21" pos:column="13">continue;<pos:position pos:line="21" pos:column="22"/></continue>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">cp<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <call><name pos:line="23" pos:column="19">strchr<pos:position pos:line="23" pos:column="25"/></name> <argument_list pos:line="23" pos:column="26">(<argument><expr><name pos:line="23" pos:column="27">line<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="33">'\n'<pos:position pos:line="23" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="38"/></argument_list></call><operator pos:line="23" pos:column="38">)<pos:position pos:line="23" pos:column="39"/></operator> <operator pos:line="23" pos:column="40">!=<pos:position pos:line="23" pos:column="42"/></operator> <name pos:line="23" pos:column="43">NULL<pos:position pos:line="23" pos:column="47"/></name></expr>)<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48"> <block pos:line="23" pos:column="49">{
            <comment type="block" pos:line="24" pos:column="13">/* chop \n characters */</comment>
            <expr_stmt><expr><operator pos:line="25" pos:column="13">*<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">cp<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <literal type="char" pos:line="25" pos:column="19">'\0'<pos:position pos:line="25" pos:column="23"/></literal></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">(<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">cp<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <call><name pos:line="27" pos:column="19">strtok<pos:position pos:line="27" pos:column="25"/></name> <argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">line<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="33">"\t "<pos:position pos:line="27" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call><operator pos:line="27" pos:column="39">)<pos:position pos:line="27" pos:column="40"/></operator> <operator pos:line="27" pos:column="41">!=<pos:position pos:line="27" pos:column="43"/></operator> <name pos:line="27" pos:column="44">NULL<pos:position pos:line="27" pos:column="48"/></name></expr>)<pos:position pos:line="27" pos:column="49"/></condition><then pos:line="27" pos:column="49"> <block pos:line="27" pos:column="50">{
            <comment type="block" pos:line="28" pos:column="13">/* get the username */</comment>
            <expr_stmt><expr><name pos:line="29" pos:column="13">username<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <call><name pos:line="29" pos:column="24">strtok<pos:position pos:line="29" pos:column="30"/></name> <argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">NULL<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="38">"\t "<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>
            <comment type="block" pos:line="30" pos:column="13">/* look for a netmask */</comment>
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">cp<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <call><name pos:line="31" pos:column="23">strtok<pos:position pos:line="31" pos:column="29"/></name> <argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">line<pos:position pos:line="31" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="37">"/"<pos:position pos:line="31" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call><operator pos:line="31" pos:column="41">)<pos:position pos:line="31" pos:column="42"/></operator> <operator pos:line="31" pos:column="43">!=<pos:position pos:line="31" pos:column="45"/></operator> <name pos:line="31" pos:column="46">NULL<pos:position pos:line="31" pos:column="50"/></name></expr>)<pos:position pos:line="31" pos:column="51"/></condition><then pos:line="31" pos:column="51"> <block pos:line="31" pos:column="52">{
                <comment type="block" pos:line="32" pos:column="17">/* store the ip address in a temporary buffer */</comment>
                <expr_stmt><expr><name pos:line="33" pos:column="17">tmpbuf<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">=<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="26">cp<pos:position pos:line="33" pos:column="28"/></name></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><name pos:line="34" pos:column="17">cp<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <call><name pos:line="34" pos:column="22">strtok<pos:position pos:line="34" pos:column="28"/></name> <argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">NULL<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="36">"/"<pos:position pos:line="34" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt>
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">cp<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">!=<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">NULL<pos:position pos:line="35" pos:column="31"/></name></expr>)<pos:position pos:line="35" pos:column="32"/></condition><then pos:line="35" pos:column="32"> <block pos:line="35" pos:column="33">{
                    <comment type="block" pos:line="36" pos:column="21">/* if we have a slash in the lhs, we have a netmask */</comment>
                    <expr_stmt><expr><name><name pos:line="37" pos:column="21">current_entry<pos:position pos:line="37" pos:column="34"/></name><operator pos:line="37" pos:column="34">-&gt;<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="36">netmask<pos:position pos:line="37" pos:column="43"/></name></name> <operator pos:line="37" pos:column="44">=<pos:position pos:line="37" pos:column="45"/></operator> <operator pos:line="37" pos:column="46">(<pos:position pos:line="37" pos:column="47"/></operator><call><name pos:line="37" pos:column="47">inet_addr<pos:position pos:line="37" pos:column="56"/></name> <argument_list pos:line="37" pos:column="57">(<argument><expr><name pos:line="37" pos:column="58">cp<pos:position pos:line="37" pos:column="60"/></name></expr></argument>)<pos:position pos:line="37" pos:column="61"/></argument_list></call><operator pos:line="37" pos:column="61">)<pos:position pos:line="37" pos:column="62"/></operator></expr>;<pos:position pos:line="37" pos:column="63"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="38" pos:column="21">current_entry<pos:position pos:line="38" pos:column="34"/></name><operator pos:line="38" pos:column="34">-&gt;<pos:position pos:line="38" pos:column="39"/></operator><name pos:line="38" pos:column="36">address<pos:position pos:line="38" pos:column="43"/></name></name> <operator pos:line="38" pos:column="44">=<pos:position pos:line="38" pos:column="45"/></operator>
                        <operator pos:line="39" pos:column="25">(<pos:position pos:line="39" pos:column="26"/></operator><operator pos:line="39" pos:column="26">(<pos:position pos:line="39" pos:column="27"/></operator><operator pos:line="39" pos:column="27">(<pos:position pos:line="39" pos:column="28"/></operator><call><name pos:line="39" pos:column="28">inet_addr<pos:position pos:line="39" pos:column="37"/></name> <argument_list pos:line="39" pos:column="38">(<argument><expr><name pos:line="39" pos:column="39">tmpbuf<pos:position pos:line="39" pos:column="45"/></name></expr></argument>)<pos:position pos:line="39" pos:column="46"/></argument_list></call><operator pos:line="39" pos:column="46">)<pos:position pos:line="39" pos:column="47"/></operator><operator pos:line="39" pos:column="47">)<pos:position pos:line="39" pos:column="48"/></operator> <operator pos:line="39" pos:column="49">&amp;<pos:position pos:line="39" pos:column="54"/></operator> <name><name pos:line="39" pos:column="51">current_entry<pos:position pos:line="39" pos:column="64"/></name><operator pos:line="39" pos:column="64">-&gt;<pos:position pos:line="39" pos:column="69"/></operator><name pos:line="39" pos:column="66">netmask<pos:position pos:line="39" pos:column="73"/></name></name><operator pos:line="39" pos:column="73">)<pos:position pos:line="39" pos:column="74"/></operator></expr>;<pos:position pos:line="39" pos:column="75"/></expr_stmt>
                }<pos:position pos:line="40" pos:column="18"/></block></then> <else pos:line="40" pos:column="19">else <block pos:line="40" pos:column="24">{
                    <comment type="block" pos:line="41" pos:column="21">/* when theres no slash, we figure the netmask is /32 */</comment>
                    <expr_stmt><expr><name><name pos:line="42" pos:column="21">current_entry<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">-&gt;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="36">address<pos:position pos:line="42" pos:column="43"/></name></name> <operator pos:line="42" pos:column="44">=<pos:position pos:line="42" pos:column="45"/></operator> <operator pos:line="42" pos:column="46">(<pos:position pos:line="42" pos:column="47"/></operator><call><name pos:line="42" pos:column="47">inet_addr<pos:position pos:line="42" pos:column="56"/></name> <argument_list pos:line="42" pos:column="57">(<argument><expr><name pos:line="42" pos:column="58">tmpbuf<pos:position pos:line="42" pos:column="64"/></name></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></call><operator pos:line="42" pos:column="65">)<pos:position pos:line="42" pos:column="66"/></operator></expr>;<pos:position pos:line="42" pos:column="67"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="43" pos:column="21">current_entry<pos:position pos:line="43" pos:column="34"/></name><operator pos:line="43" pos:column="34">-&gt;<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="36">netmask<pos:position pos:line="43" pos:column="43"/></name></name> <operator pos:line="43" pos:column="44">=<pos:position pos:line="43" pos:column="45"/></operator> <operator pos:line="43" pos:column="46">(<pos:position pos:line="43" pos:column="47"/></operator><call><name pos:line="43" pos:column="47">inet_addr<pos:position pos:line="43" pos:column="56"/></name> <argument_list pos:line="43" pos:column="57">(<argument><expr><literal type="string" pos:line="43" pos:column="58">"255.255.255.255"<pos:position pos:line="43" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="76"/></argument_list></call><operator pos:line="43" pos:column="76">)<pos:position pos:line="43" pos:column="77"/></operator></expr>;<pos:position pos:line="43" pos:column="78"/></expr_stmt>
                }<pos:position pos:line="44" pos:column="18"/></block></else></if>
            }<pos:position pos:line="45" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="46" pos:column="13">/* get space for the username */</comment>
            <expr_stmt><expr><name><name pos:line="47" pos:column="13">current_entry<pos:position pos:line="47" pos:column="26"/></name><operator pos:line="47" pos:column="26">-&gt;<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="28">username<pos:position pos:line="47" pos:column="36"/></name></name> <operator pos:line="47" pos:column="37">=<pos:position pos:line="47" pos:column="38"/></operator>
                <call><name pos:line="48" pos:column="17">calloc<pos:position pos:line="48" pos:column="23"/></name> <argument_list pos:line="48" pos:column="24">(<argument><expr><call><name pos:line="48" pos:column="25">strlen<pos:position pos:line="48" pos:column="31"/></name> <argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">username<pos:position pos:line="48" pos:column="41"/></name></expr></argument>)<pos:position pos:line="48" pos:column="42"/></argument_list></call> <operator pos:line="48" pos:column="43">+<pos:position pos:line="48" pos:column="44"/></operator> <literal type="number" pos:line="48" pos:column="45">1<pos:position pos:line="48" pos:column="46"/></literal></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="48">sizeof <argument_list pos:line="48" pos:column="55">(<argument><expr><name pos:line="48" pos:column="56">char<pos:position pos:line="48" pos:column="60"/></name></expr></argument>)<pos:position pos:line="48" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="48" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="63"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">strcpy<pos:position pos:line="49" pos:column="19"/></name> <argument_list pos:line="49" pos:column="20">(<argument><expr><name><name pos:line="49" pos:column="21">current_entry<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">username<pos:position pos:line="49" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="46">username<pos:position pos:line="49" pos:column="54"/></name></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="56"/></expr_stmt>

            <comment type="block" pos:line="51" pos:column="13">/* get space and point current_entry to the new entry */</comment>
            <expr_stmt><expr><name><name pos:line="52" pos:column="13">current_entry<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">-&gt;<pos:position pos:line="52" pos:column="31"/></operator><name pos:line="52" pos:column="28">next_entry<pos:position pos:line="52" pos:column="38"/></name></name> <operator pos:line="52" pos:column="39">=<pos:position pos:line="52" pos:column="40"/></operator>
                <call><name pos:line="53" pos:column="17">malloc<pos:position pos:line="53" pos:column="23"/></name> <argument_list pos:line="53" pos:column="24">(<argument><expr><sizeof pos:line="53" pos:column="25">sizeof <argument_list pos:line="53" pos:column="32">(<argument><expr pos:line="53" pos:column="33">struct <name pos:line="53" pos:column="40">ip_user_dict<pos:position pos:line="53" pos:column="52"/></name></expr></argument>)<pos:position pos:line="53" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><name pos:line="54" pos:column="13">current_entry<pos:position pos:line="54" pos:column="26"/></name> <operator pos:line="54" pos:column="27">=<pos:position pos:line="54" pos:column="28"/></operator> <name><name pos:line="54" pos:column="29">current_entry<pos:position pos:line="54" pos:column="42"/></name><operator pos:line="54" pos:column="42">-&gt;<pos:position pos:line="54" pos:column="47"/></operator><name pos:line="54" pos:column="44">next_entry<pos:position pos:line="54" pos:column="54"/></name></name></expr>;<pos:position pos:line="54" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>

    }<pos:position pos:line="57" pos:column="6"/></block></while>

    <comment type="block" pos:line="59" pos:column="5">/* Return a pointer to the first entry linked list */</comment>
    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">first_entry<pos:position pos:line="60" pos:column="23"/></name></expr>;<pos:position pos:line="60" pos:column="24"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
