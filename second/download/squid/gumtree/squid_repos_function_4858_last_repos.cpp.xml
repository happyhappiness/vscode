<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4858_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ContentLengthInterpreter<pos:position pos:line="2" pos:column="31"/></name><operator pos:line="2" pos:column="31">::<pos:position pos:line="2" pos:column="33"/></operator><name pos:line="2" pos:column="33">checkValue<pos:position pos:line="2" pos:column="43"/></name></name><parameter_list pos:line="2" pos:column="43">(<parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">rawValue<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="66">const<pos:position pos:line="2" pos:column="71"/></specifier> <name pos:line="2" pos:column="72">int<pos:position pos:line="2" pos:column="75"/></name></type> <name pos:line="2" pos:column="76">valueSize<pos:position pos:line="2" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="86"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><operator pos:line="4" pos:column="10">!<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">sawBad<pos:position pos:line="4" pos:column="17"/></name></expr></argument>)<pos:position pos:line="4" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="19"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int64_t<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">latestValue<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><operator pos:line="6" pos:column="27">-<pos:position pos:line="6" pos:column="28"/></operator><literal type="number" pos:line="6" pos:column="28">1<pos:position pos:line="6" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">suffix<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="null" pos:line="7" pos:column="20">nullptr<pos:position pos:line="7" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
    <comment type="line" pos:line="8" pos:column="5">// TODO: Handle malformed values with leading signs (e.g., "-0" or "+1").</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name pos:line="9" pos:column="10">httpHeaderParseOffset<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">rawValue<pos:position pos:line="9" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="42">&amp;<pos:position pos:line="9" pos:column="47"/></operator><name pos:line="9" pos:column="43">latestValue<pos:position pos:line="9" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="56">&amp;<pos:position pos:line="9" pos:column="61"/></operator><name pos:line="9" pos:column="57">suffix<pos:position pos:line="9" pos:column="63"/></name></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="65"/></condition><then pos:line="9" pos:column="65"> <block pos:line="9" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">55<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="20">DBG_IMPORTANT<pos:position pos:line="10" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="35">"WARNING: Malformed"<pos:position pos:line="10" pos:column="55"/></literal> <operator pos:line="10" pos:column="56">&lt;&lt;<pos:position pos:line="10" pos:column="64"/></operator> <call><name pos:line="10" pos:column="59">Raw<pos:position pos:line="10" pos:column="62"/></name><argument_list pos:line="10" pos:column="62">(<argument><expr><literal type="string" pos:line="10" pos:column="63">"Content-Length"<pos:position pos:line="10" pos:column="79"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="81">rawValue<pos:position pos:line="10" pos:column="89"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="91">valueSize<pos:position pos:line="10" pos:column="100"/></name></expr></argument>)<pos:position pos:line="10" pos:column="101"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="103"/></expr_stmt>
        <expr_stmt><expr><name pos:line="11" pos:column="9">sawBad<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <literal type="boolean" pos:line="11" pos:column="18">true<pos:position pos:line="11" pos:column="22"/></literal></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><literal type="boolean" pos:line="12" pos:column="16">false<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">latestValue<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">&lt;<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>)<pos:position pos:line="15" pos:column="25"/></condition><then pos:line="15" pos:column="25"> <block pos:line="15" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">55<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="20">debugLevel<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="32">"WARNING: Negative"<pos:position pos:line="16" pos:column="51"/></literal> <operator pos:line="16" pos:column="52">&lt;&lt;<pos:position pos:line="16" pos:column="60"/></operator> <call><name pos:line="16" pos:column="55">Raw<pos:position pos:line="16" pos:column="58"/></name><argument_list pos:line="16" pos:column="58">(<argument><expr><literal type="string" pos:line="16" pos:column="59">"Content-Length"<pos:position pos:line="16" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="77">rawValue<pos:position pos:line="16" pos:column="85"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="87">valueSize<pos:position pos:line="16" pos:column="96"/></name></expr></argument>)<pos:position pos:line="16" pos:column="97"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="99"/></expr_stmt>
        <expr_stmt><expr><name pos:line="17" pos:column="9">sawBad<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="boolean" pos:line="17" pos:column="18">true<pos:position pos:line="17" pos:column="22"/></literal></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><literal type="boolean" pos:line="18" pos:column="16">false<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="21" pos:column="5">// check for garbage after the number</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">!<pos:position pos:line="22" pos:column="10"/></operator><call><name pos:line="22" pos:column="10">goodSuffix<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">suffix<pos:position pos:line="22" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="29">rawValue<pos:position pos:line="22" pos:column="37"/></name> <operator pos:line="22" pos:column="38">+<pos:position pos:line="22" pos:column="39"/></operator> <name pos:line="22" pos:column="40">valueSize<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="51"/></condition><then pos:line="22" pos:column="51"> <block pos:line="22" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">55<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="20">debugLevel<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="32">"WARNING: Trailing garbage in"<pos:position pos:line="23" pos:column="62"/></literal> <operator pos:line="23" pos:column="63">&lt;&lt;<pos:position pos:line="23" pos:column="71"/></operator> <call><name pos:line="23" pos:column="66">Raw<pos:position pos:line="23" pos:column="69"/></name><argument_list pos:line="23" pos:column="69">(<argument><expr><literal type="string" pos:line="23" pos:column="70">"Content-Length"<pos:position pos:line="23" pos:column="86"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="88">rawValue<pos:position pos:line="23" pos:column="96"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="98">valueSize<pos:position pos:line="23" pos:column="107"/></name></expr></argument>)<pos:position pos:line="23" pos:column="108"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="110"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">sawBad<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <literal type="boolean" pos:line="24" pos:column="18">true<pos:position pos:line="24" pos:column="22"/></literal></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
        <return pos:line="25" pos:column="9">return <expr><literal type="boolean" pos:line="25" pos:column="16">false<pos:position pos:line="25" pos:column="21"/></literal></expr>;<pos:position pos:line="25" pos:column="22"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">sawGood<pos:position pos:line="28" pos:column="16"/></name></expr>)<pos:position pos:line="28" pos:column="17"/></condition><then pos:line="28" pos:column="17"> <block pos:line="28" pos:column="18">{
        <comment type="block" pos:line="29" pos:column="9">/* we have found at least two, possibly identical values */</comment>

        <expr_stmt><expr><name pos:line="31" pos:column="9">needsSanitizing<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">=<pos:position pos:line="31" pos:column="26"/></operator> <literal type="boolean" pos:line="31" pos:column="27">true<pos:position pos:line="31" pos:column="31"/></literal></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt> <comment type="line" pos:line="31" pos:column="33">// replace identical values with a single value</comment>

        <decl_stmt><decl><type><specifier pos:line="33" pos:column="9">const<pos:position pos:line="33" pos:column="14"/></specifier> <name pos:line="33" pos:column="15">bool<pos:position pos:line="33" pos:column="19"/></name></type> <name pos:line="33" pos:column="20">conflicting<pos:position pos:line="33" pos:column="31"/></name> <init pos:line="33" pos:column="32">= <expr><name pos:line="33" pos:column="34">value<pos:position pos:line="33" pos:column="39"/></name> <operator pos:line="33" pos:column="40">!=<pos:position pos:line="33" pos:column="42"/></operator> <name pos:line="33" pos:column="43">latestValue<pos:position pos:line="33" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="55"/></decl_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">conflicting<pos:position pos:line="34" pos:column="24"/></name></expr>)<pos:position pos:line="34" pos:column="25"/></condition><then pos:line="34" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="13">headerWideProblem<pos:position pos:line="35" pos:column="30"/></name> <operator pos:line="35" pos:column="31">=<pos:position pos:line="35" pos:column="32"/></operator> <literal type="string" pos:line="35" pos:column="33">"Conflicting"<pos:position pos:line="35" pos:column="46"/></literal></expr>;<pos:position pos:line="35" pos:column="47"/></expr_stmt></block></then> <comment type="line" pos:line="35" pos:column="48">// overwrite any lesser problem</comment>
        <elseif pos:line="36" pos:column="9">else <if pos:line="36" pos:column="14">if <condition pos:line="36" pos:column="17">(<expr><operator pos:line="36" pos:column="18">!<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="19">headerWideProblem<pos:position pos:line="36" pos:column="36"/></name></expr>)<pos:position pos:line="36" pos:column="37"/></condition><then pos:line="36" pos:column="37"> <comment type="line" pos:line="36" pos:column="38">// preserve a possibly worse problem</comment>
            <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="13">headerWideProblem<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator> <literal type="string" pos:line="37" pos:column="33">"Duplicate"<pos:position pos:line="37" pos:column="44"/></literal></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt></block></then></if></elseif></if>

        <comment type="line" pos:line="39" pos:column="9">// with relaxed_header_parser, identical values are permitted</comment>
        <expr_stmt><expr><name pos:line="40" pos:column="9">sawBad<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <operator pos:line="40" pos:column="18">!<pos:position pos:line="40" pos:column="19"/></operator><name><name pos:line="40" pos:column="19">Config<pos:position pos:line="40" pos:column="25"/></name><operator pos:line="40" pos:column="25">.<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="26">onoff<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">.<pos:position pos:line="40" pos:column="32"/></operator><name pos:line="40" pos:column="32">relaxed_header_parser<pos:position pos:line="40" pos:column="53"/></name></name> <operator pos:line="40" pos:column="54">||<pos:position pos:line="40" pos:column="56"/></operator> <name pos:line="40" pos:column="57">conflicting<pos:position pos:line="40" pos:column="68"/></name></expr>;<pos:position pos:line="40" pos:column="69"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><literal type="boolean" pos:line="41" pos:column="16">false<pos:position pos:line="41" pos:column="21"/></literal></expr>;<pos:position pos:line="41" pos:column="22"/></return> <comment type="line" pos:line="41" pos:column="23">// conflicting or duplicate</comment>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="44" pos:column="5">sawGood<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <literal type="boolean" pos:line="44" pos:column="15">true<pos:position pos:line="44" pos:column="19"/></literal></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="45" pos:column="5">value<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <name pos:line="45" pos:column="13">latestValue<pos:position pos:line="45" pos:column="24"/></name></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>
    <return pos:line="46" pos:column="5">return <expr><literal type="boolean" pos:line="46" pos:column="12">true<pos:position pos:line="46" pos:column="16"/></literal></expr>;<pos:position pos:line="46" pos:column="17"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
