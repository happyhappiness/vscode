<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7288_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">SquidMD5Update<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name><name pos:line="2" pos:column="16">struct<pos:position pos:line="2" pos:column="22"/></name> <name pos:line="2" pos:column="23">SquidMD5Context<pos:position pos:line="2" pos:column="38"/></name></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">ctx<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">void<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">_buf<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="63">unsigned<pos:position pos:line="2" pos:column="71"/></name></type> <name pos:line="2" pos:column="72">len<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">uint8_t<pos:position pos:line="4" pos:column="12"/></name> <specifier pos:line="4" pos:column="13">const<pos:position pos:line="4" pos:column="18"/></specifier> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">buf<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><name pos:line="4" pos:column="26">_buf<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">uint32_t<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">t<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* Update byte count */</comment>

    <expr_stmt><expr><name pos:line="9" pos:column="5">t<pos:position pos:line="9" pos:column="6"/></name> <operator pos:line="9" pos:column="7">=<pos:position pos:line="9" pos:column="8"/></operator> <name><name pos:line="9" pos:column="9">ctx<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">bytes<pos:position pos:line="9" pos:column="19"/></name><index pos:line="9" pos:column="19">[<expr><literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr>]<pos:position pos:line="9" pos:column="22"/></index></name></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name><name pos:line="10" pos:column="10">ctx<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">bytes<pos:position pos:line="10" pos:column="20"/></name><index pos:line="10" pos:column="20">[<expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr>]<pos:position pos:line="10" pos:column="23"/></index></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">t<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">+<pos:position pos:line="10" pos:column="29"/></operator> <name pos:line="10" pos:column="30">len<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">)<pos:position pos:line="10" pos:column="34"/></operator> <operator pos:line="10" pos:column="35">&lt;<pos:position pos:line="10" pos:column="39"/></operator> <name pos:line="10" pos:column="37">t<pos:position pos:line="10" pos:column="38"/></name></expr>)<pos:position pos:line="10" pos:column="39"/></condition><then pos:line="10" pos:column="39">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="11" pos:column="9">ctx<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">bytes<pos:position pos:line="11" pos:column="19"/></name><index pos:line="11" pos:column="19">[<expr><literal type="number" pos:line="11" pos:column="20">1<pos:position pos:line="11" pos:column="21"/></literal></expr>]<pos:position pos:line="11" pos:column="22"/></index></name><operator pos:line="11" pos:column="22">++<pos:position pos:line="11" pos:column="24"/></operator></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt></block></then></if>    <comment type="block" pos:line="11" pos:column="29">/* Carry from low to high */</comment>

    <expr_stmt><expr><name pos:line="13" pos:column="5">t<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <literal type="number" pos:line="13" pos:column="9">64<pos:position pos:line="13" pos:column="11"/></literal> <operator pos:line="13" pos:column="12">-<pos:position pos:line="13" pos:column="13"/></operator> <operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">t<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">&amp;<pos:position pos:line="13" pos:column="22"/></operator> <literal type="number" pos:line="13" pos:column="19">0x3f<pos:position pos:line="13" pos:column="23"/></literal><operator pos:line="13" pos:column="23">)<pos:position pos:line="13" pos:column="24"/></operator></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>    <comment type="block" pos:line="13" pos:column="29">/* Space available in ctx-&gt;in (at least 1) */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">t<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">&gt;<pos:position pos:line="14" pos:column="15"/></operator> <name pos:line="14" pos:column="13">len<pos:position pos:line="14" pos:column="16"/></name></expr>)<pos:position pos:line="14" pos:column="17"/></condition><then pos:line="14" pos:column="17"> <block pos:line="14" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">memcpy<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">uint8_t<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">*<pos:position pos:line="15" pos:column="26"/></operator><operator pos:line="15" pos:column="26">)<pos:position pos:line="15" pos:column="27"/></operator> <name><name pos:line="15" pos:column="28">ctx<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">in<pos:position pos:line="15" pos:column="35"/></name></name> <operator pos:line="15" pos:column="36">+<pos:position pos:line="15" pos:column="37"/></operator> <literal type="number" pos:line="15" pos:column="38">64<pos:position pos:line="15" pos:column="40"/></literal> <operator pos:line="15" pos:column="41">-<pos:position pos:line="15" pos:column="42"/></operator> <name pos:line="15" pos:column="43">t<pos:position pos:line="15" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">buf<pos:position pos:line="15" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="51">len<pos:position pos:line="15" pos:column="54"/></name></expr></argument>)<pos:position pos:line="15" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="56"/></expr_stmt>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="18" pos:column="5">/* First chunk is an odd size */</comment>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">memcpy<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><operator pos:line="19" pos:column="12">(<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">uint8_t<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">*<pos:position pos:line="19" pos:column="22"/></operator><operator pos:line="19" pos:column="22">)<pos:position pos:line="19" pos:column="23"/></operator> <name><name pos:line="19" pos:column="24">ctx<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">in<pos:position pos:line="19" pos:column="31"/></name></name> <operator pos:line="19" pos:column="32">+<pos:position pos:line="19" pos:column="33"/></operator> <literal type="number" pos:line="19" pos:column="34">64<pos:position pos:line="19" pos:column="36"/></literal> <operator pos:line="19" pos:column="37">-<pos:position pos:line="19" pos:column="38"/></operator> <name pos:line="19" pos:column="39">t<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="42">buf<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">t<pos:position pos:line="19" pos:column="48"/></name></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">byteSwap<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name><name pos:line="20" pos:column="14">ctx<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">-&gt;<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="19">in<pos:position pos:line="20" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="23">16<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">SquidMD5Transform<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name><name pos:line="21" pos:column="23">ctx<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">-&gt;<pos:position pos:line="21" pos:column="31"/></operator><name pos:line="21" pos:column="28">buf<pos:position pos:line="21" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="33">ctx<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">in<pos:position pos:line="21" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">buf<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">+=<pos:position pos:line="22" pos:column="11"/></operator> <name pos:line="22" pos:column="12">t<pos:position pos:line="22" pos:column="13"/></name></expr>;<pos:position pos:line="22" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">len<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">-=<pos:position pos:line="23" pos:column="11"/></operator> <name pos:line="23" pos:column="12">t<pos:position pos:line="23" pos:column="13"/></name></expr>;<pos:position pos:line="23" pos:column="14"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/* Process data in 64-byte chunks */</comment>
    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><name pos:line="26" pos:column="12">len<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">&gt;=<pos:position pos:line="26" pos:column="21"/></operator> <literal type="number" pos:line="26" pos:column="19">64<pos:position pos:line="26" pos:column="21"/></literal></expr>)<pos:position pos:line="26" pos:column="22"/></condition> <block pos:line="26" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">memcpy<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name><name pos:line="27" pos:column="16">ctx<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">-&gt;<pos:position pos:line="27" pos:column="24"/></operator><name pos:line="27" pos:column="21">in<pos:position pos:line="27" pos:column="23"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="25">buf<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="30">64<pos:position pos:line="27" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">byteSwap<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><name><name pos:line="28" pos:column="18">ctx<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">-&gt;<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="23">in<pos:position pos:line="28" pos:column="25"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="27">16<pos:position pos:line="28" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">SquidMD5Transform<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name><name pos:line="29" pos:column="27">ctx<pos:position pos:line="29" pos:column="30"/></name><operator pos:line="29" pos:column="30">-&gt;<pos:position pos:line="29" pos:column="35"/></operator><name pos:line="29" pos:column="32">buf<pos:position pos:line="29" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="37">ctx<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">-&gt;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="42">in<pos:position pos:line="29" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name pos:line="30" pos:column="9">buf<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">+=<pos:position pos:line="30" pos:column="15"/></operator> <literal type="number" pos:line="30" pos:column="16">64<pos:position pos:line="30" pos:column="18"/></literal></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">len<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">-=<pos:position pos:line="31" pos:column="15"/></operator> <literal type="number" pos:line="31" pos:column="16">64<pos:position pos:line="31" pos:column="18"/></literal></expr>;<pos:position pos:line="31" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></while>

    <comment type="block" pos:line="34" pos:column="5">/* Handle any remaining bytes of data. */</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">memcpy<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><name><name pos:line="35" pos:column="12">ctx<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">-&gt;<pos:position pos:line="35" pos:column="20"/></operator><name pos:line="35" pos:column="17">in<pos:position pos:line="35" pos:column="19"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="21">buf<pos:position pos:line="35" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="26">len<pos:position pos:line="35" pos:column="29"/></name></expr></argument>)<pos:position pos:line="35" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
