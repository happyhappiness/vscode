<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4806_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLChecklist<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">nonBlockingCheck<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><name pos:line="2" pos:column="32">ACLCB<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type> <name pos:line="2" pos:column="40">callback_<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">void<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">callback_data_<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">preCheck<pos:position pos:line="4" pos:column="13"/></name><argument_list pos:line="4" pos:column="13">(<argument><expr><literal type="string" pos:line="4" pos:column="14">"slow rules"<pos:position pos:line="4" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">callback<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">=<pos:position pos:line="5" pos:column="15"/></operator> <name pos:line="5" pos:column="16">callback_<pos:position pos:line="5" pos:column="25"/></name></expr>;<pos:position pos:line="5" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">callback_data<pos:position pos:line="6" pos:column="18"/></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <call><name pos:line="6" pos:column="21">cbdataReference<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name pos:line="6" pos:column="37">callback_data_<pos:position pos:line="6" pos:column="51"/></name></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">asyncCaller_<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <literal type="boolean" pos:line="7" pos:column="20">true<pos:position pos:line="7" pos:column="24"/></literal></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>

    <comment type="block" format="doxygen" pos:line="9" pos:column="5">/** The ACL List should NEVER be NULL when calling this method.
     * Always caller should check for NULL and handle appropriate to its needs first.
     * We cannot select a sensible default for all callers here. */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">accessList<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">==<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">NULL<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28"> <block pos:line="12" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">28<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="20">DBG_CRITICAL<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="34">"SECURITY ERROR: ACL "<pos:position pos:line="13" pos:column="56"/></literal> <operator pos:line="13" pos:column="57">&lt;&lt;<pos:position pos:line="13" pos:column="65"/></operator> <name pos:line="13" pos:column="60">this<pos:position pos:line="13" pos:column="64"/></name> <operator pos:line="13" pos:column="65">&lt;&lt;<pos:position pos:line="13" pos:column="73"/></operator> <literal type="string" pos:line="13" pos:column="68">" checked with nothing to match against!!"<pos:position pos:line="13" pos:column="110"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="112"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">checkCallback<pos:position pos:line="14" pos:column="22"/></name><argument_list pos:line="14" pos:column="22">(<argument><expr><name pos:line="14" pos:column="23">ACCESS_DUNNO<pos:position pos:line="14" pos:column="35"/></name></expr></argument>)<pos:position pos:line="14" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">prepNonBlocking<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">()<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="27"/></condition><then pos:line="18" pos:column="27"> <block pos:line="18" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">matchAndFinish<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">()<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt> <comment type="line" pos:line="19" pos:column="27">// calls markFinished() on success</comment>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">!<pos:position pos:line="20" pos:column="14"/></operator><call><name pos:line="20" pos:column="14">asyncInProgress<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">()<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="13">completeNonBlocking<pos:position pos:line="21" pos:column="32"/></name><argument_list pos:line="21" pos:column="32">()<pos:position pos:line="21" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if> <comment type="line" pos:line="22" pos:column="7">// else checkCallback() has been called</comment>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
