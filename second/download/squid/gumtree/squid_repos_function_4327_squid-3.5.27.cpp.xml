<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4327_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ParseIpPort<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name pos:line="2" pos:column="24">char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">buf<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">forceIp<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="56">Ip<pos:position pos:line="2" pos:column="58"/></name><operator pos:line="2" pos:column="58">::<pos:position pos:line="2" pos:column="60"/></operator><name pos:line="2" pos:column="60">Address<pos:position pos:line="2" pos:column="67"/></name></name> <modifier pos:line="2" pos:column="68">&amp;<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="69">addr<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">h1<pos:position pos:line="4" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="13">h2<pos:position pos:line="4" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="17">h3<pos:position pos:line="4" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="21">h4<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">p1<pos:position pos:line="5" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="13">p2<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">int<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">n<pos:position pos:line="6" pos:column="16"/></name> <init pos:line="6" pos:column="17">= <expr><call><name pos:line="6" pos:column="19">sscanf<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name pos:line="6" pos:column="26">buf<pos:position pos:line="6" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="31">"%d,%d,%d,%d,%d,%d"<pos:position pos:line="6" pos:column="50"/></literal></expr></argument>,
                         <argument><expr><operator pos:line="7" pos:column="26">&amp;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="27">h1<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="31">&amp;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="32">h2<pos:position pos:line="7" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="36">&amp;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="37">h3<pos:position pos:line="7" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="41">&amp;<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="42">h4<pos:position pos:line="7" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="46">&amp;<pos:position pos:line="7" pos:column="51"/></operator><name pos:line="7" pos:column="47">p1<pos:position pos:line="7" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="51">&amp;<pos:position pos:line="7" pos:column="56"/></operator><name pos:line="7" pos:column="52">p2<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="56"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">n<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">!=<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">6<pos:position pos:line="9" pos:column="15"/></literal> <operator pos:line="9" pos:column="16">||<pos:position pos:line="9" pos:column="18"/></operator> <name><name pos:line="9" pos:column="19">p1<pos:position pos:line="9" pos:column="21"/></name> <argument_list type="generic" pos:line="9" pos:column="22">&lt; <argument><expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal> <operator pos:line="9" pos:column="26">||<pos:position pos:line="9" pos:column="28"/></operator> <name><name pos:line="9" pos:column="29">p2<pos:position pos:line="9" pos:column="31"/></name> <argument_list type="generic" pos:line="9" pos:column="32">&lt; <argument><expr><literal type="number" pos:line="9" pos:column="34">0<pos:position pos:line="9" pos:column="35"/></literal> <operator pos:line="9" pos:column="36">||<pos:position pos:line="9" pos:column="38"/></operator> <name pos:line="9" pos:column="39">p1<pos:position pos:line="9" pos:column="41"/></name></expr></argument> &gt;<pos:position pos:line="9" pos:column="46"/></argument_list></name> <literal type="number" pos:line="9" pos:column="44">255<pos:position pos:line="9" pos:column="47"/></literal> <operator pos:line="9" pos:column="48">||<pos:position pos:line="9" pos:column="50"/></operator> <name pos:line="9" pos:column="51">p2<pos:position pos:line="9" pos:column="53"/></name></expr></argument> &gt;<pos:position pos:line="9" pos:column="58"/></argument_list></name> <literal type="number" pos:line="9" pos:column="56">255<pos:position pos:line="9" pos:column="59"/></literal></expr>)<pos:position pos:line="9" pos:column="60"/></condition><then pos:line="9" pos:column="60">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">forceIp<pos:position pos:line="12" pos:column="16"/></name></expr>)<pos:position pos:line="12" pos:column="17"/></condition><then pos:line="12" pos:column="17"> <block pos:line="12" pos:column="18">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">addr<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">forceIp<pos:position pos:line="13" pos:column="23"/></name></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt> <comment type="line" pos:line="13" pos:column="25">// but the above code still validates the IP we got</comment>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <else pos:line="14" pos:column="7">else <block pos:line="14" pos:column="12">{
        <decl_stmt><decl><specifier pos:line="15" pos:column="9">static<pos:position pos:line="15" pos:column="15"/></specifier> <type><name pos:line="15" pos:column="16">char<pos:position pos:line="15" pos:column="20"/></name></type> <name><name pos:line="15" pos:column="21">ipBuf<pos:position pos:line="15" pos:column="26"/></name><index pos:line="15" pos:column="26">[<expr><literal type="number" pos:line="15" pos:column="27">1024<pos:position pos:line="15" pos:column="31"/></literal></expr>]<pos:position pos:line="15" pos:column="32"/></index></name></decl>;<pos:position pos:line="15" pos:column="33"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">snprintf<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><name pos:line="16" pos:column="18">ipBuf<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="25">sizeof<argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">ipBuf<pos:position pos:line="16" pos:column="37"/></name></expr></argument>)<pos:position pos:line="16" pos:column="38"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="40">"%d.%d.%d.%d"<pos:position pos:line="16" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="55">h1<pos:position pos:line="16" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="59">h2<pos:position pos:line="16" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="63">h3<pos:position pos:line="16" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="67">h4<pos:position pos:line="16" pos:column="69"/></name></expr></argument>)<pos:position pos:line="16" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><name pos:line="17" pos:column="9">addr<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">ipBuf<pos:position pos:line="17" pos:column="21"/></name></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>

        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name><name pos:line="19" pos:column="13">addr<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">.<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">isAnyAddr<pos:position pos:line="19" pos:column="27"/></name></name><argument_list pos:line="19" pos:column="27">()<pos:position pos:line="19" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30">
            <block type="pseudo"><return pos:line="20" pos:column="13">return <expr><literal type="boolean" pos:line="20" pos:column="20">false<pos:position pos:line="20" pos:column="25"/></literal></expr>;<pos:position pos:line="20" pos:column="26"/></return></block></then></if>
    }<pos:position pos:line="21" pos:column="6"/></block></else></if>

    <decl_stmt><decl><type><specifier pos:line="23" pos:column="5">const<pos:position pos:line="23" pos:column="10"/></specifier> <name pos:line="23" pos:column="11">int<pos:position pos:line="23" pos:column="14"/></name></type> <name pos:line="23" pos:column="15">port<pos:position pos:line="23" pos:column="19"/></name> <init pos:line="23" pos:column="20">= <expr><operator pos:line="23" pos:column="22">(<pos:position pos:line="23" pos:column="23"/></operator><operator pos:line="23" pos:column="23">(<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">p1<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">&lt;&lt;<pos:position pos:line="23" pos:column="35"/></operator> <literal type="number" pos:line="23" pos:column="30">8<pos:position pos:line="23" pos:column="31"/></literal><operator pos:line="23" pos:column="31">)<pos:position pos:line="23" pos:column="32"/></operator> <operator pos:line="23" pos:column="33">+<pos:position pos:line="23" pos:column="34"/></operator> <name pos:line="23" pos:column="35">p2<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">)<pos:position pos:line="23" pos:column="38"/></operator></expr></init></decl>;<pos:position pos:line="23" pos:column="39"/></decl_stmt>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">port<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">&lt;=<pos:position pos:line="25" pos:column="19"/></operator> <literal type="number" pos:line="25" pos:column="17">0<pos:position pos:line="25" pos:column="18"/></literal></expr>)<pos:position pos:line="25" pos:column="19"/></condition><then pos:line="25" pos:column="19">
        <block type="pseudo"><return pos:line="26" pos:column="9">return <expr><literal type="boolean" pos:line="26" pos:column="16">false<pos:position pos:line="26" pos:column="21"/></literal></expr>;<pos:position pos:line="26" pos:column="22"/></return></block></then></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name><name pos:line="28" pos:column="9">Config<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">.<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">Ftp<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">.<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">sanitycheck<pos:position pos:line="28" pos:column="31"/></name></name> <operator pos:line="28" pos:column="32">&amp;&amp;<pos:position pos:line="28" pos:column="42"/></operator> <name pos:line="28" pos:column="35">port<pos:position pos:line="28" pos:column="39"/></name> <operator pos:line="28" pos:column="40">&lt;<pos:position pos:line="28" pos:column="44"/></operator> <literal type="number" pos:line="28" pos:column="42">1024<pos:position pos:line="28" pos:column="46"/></literal></expr>)<pos:position pos:line="28" pos:column="47"/></condition><then pos:line="28" pos:column="47">
        <block type="pseudo"><return pos:line="29" pos:column="9">return <expr><literal type="boolean" pos:line="29" pos:column="16">false<pos:position pos:line="29" pos:column="21"/></literal></expr>;<pos:position pos:line="29" pos:column="22"/></return></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="31" pos:column="5">addr<pos:position pos:line="31" pos:column="9"/></name><operator pos:line="31" pos:column="9">.<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">port<pos:position pos:line="31" pos:column="14"/></name></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">port<pos:position pos:line="31" pos:column="19"/></name></expr></argument>)<pos:position pos:line="31" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><literal type="boolean" pos:line="32" pos:column="12">true<pos:position pos:line="32" pos:column="16"/></literal></expr>;<pos:position pos:line="32" pos:column="17"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
