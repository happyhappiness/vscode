<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_250_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">SMB_TreeDisconnect<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">SMB_Tree_Handle<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">Tree_Handle<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">BOOL<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">discard<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">RFCNB_Pkt<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">pkt<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">pkt_len<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">pkt_len<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <name pos:line="7" pos:column="15">SMB_tdis_len<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name pos:line="9" pos:column="5">pkt<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <operator pos:line="9" pos:column="11">(<pos:position pos:line="9" pos:column="12"/></operator>struct <name pos:line="9" pos:column="19">RFCNB_Pkt<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">*<pos:position pos:line="9" pos:column="30"/></operator><operator pos:line="9" pos:column="30">)<pos:position pos:line="9" pos:column="31"/></operator> <call><name pos:line="9" pos:column="32">RFCNB_Alloc_Pkt<pos:position pos:line="9" pos:column="47"/></name><argument_list pos:line="9" pos:column="47">(<argument><expr><name pos:line="9" pos:column="48">pkt_len<pos:position pos:line="9" pos:column="55"/></name></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">pkt<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">==<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">NULL<pos:position pos:line="11" pos:column="20"/></name></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21"> <block pos:line="11" pos:column="22">{

        <expr_stmt><expr><name pos:line="13" pos:column="9">SMBlib_errno<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">SMBlibE_NoSpace<pos:position pos:line="13" pos:column="39"/></name></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><operator pos:line="14" pos:column="16">(<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="17">SMBlibE_BAD<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">)<pos:position pos:line="14" pos:column="29"/></operator></expr>;<pos:position pos:line="14" pos:column="30"/></return>	<comment type="block" pos:line="14" pos:column="33">/* Should handle the error */</comment>

    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="17" pos:column="5">/* Now plug in the values ... */</comment>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">memset<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><call><name pos:line="19" pos:column="12">SMB_Hdr<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><name pos:line="19" pos:column="20">pkt<pos:position pos:line="19" pos:column="23"/></name></expr></argument>)<pos:position pos:line="19" pos:column="24"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="26">0<pos:position pos:line="19" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="29">SMB_tdis_len<pos:position pos:line="19" pos:column="41"/></name></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">SIVAL<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><call><name pos:line="20" pos:column="11">SMB_Hdr<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">pkt<pos:position pos:line="20" pos:column="22"/></name></expr></argument>)<pos:position pos:line="20" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="20" pos:column="25">SMB_hdr_idf_offset<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="45">SMB_DEF_IDF<pos:position pos:line="20" pos:column="56"/></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="58"/></expr_stmt>	<comment type="block" pos:line="20" pos:column="65">/* Plunk in IDF */</comment>
    <expr_stmt><expr><operator pos:line="21" pos:column="5">*<pos:position pos:line="21" pos:column="6"/></operator><operator pos:line="21" pos:column="6">(<pos:position pos:line="21" pos:column="7"/></operator><call><name pos:line="21" pos:column="7">SMB_Hdr<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><name pos:line="21" pos:column="15">pkt<pos:position pos:line="21" pos:column="18"/></name></expr></argument>)<pos:position pos:line="21" pos:column="19"/></argument_list></call> <operator pos:line="21" pos:column="20">+<pos:position pos:line="21" pos:column="21"/></operator> <name pos:line="21" pos:column="22">SMB_hdr_com_offset<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">)<pos:position pos:line="21" pos:column="41"/></operator> <operator pos:line="21" pos:column="42">=<pos:position pos:line="21" pos:column="43"/></operator> <name pos:line="21" pos:column="44">SMBtdis<pos:position pos:line="21" pos:column="51"/></name></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">SSVAL<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><call><name pos:line="22" pos:column="11">SMB_Hdr<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">pkt<pos:position pos:line="22" pos:column="22"/></name></expr></argument>)<pos:position pos:line="22" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="22" pos:column="25">SMB_hdr_pid_offset<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="45">Tree_Handle<pos:position pos:line="22" pos:column="56"/></name><operator pos:line="22" pos:column="56">-&gt;<pos:position pos:line="22" pos:column="61"/></operator><name pos:line="22" pos:column="58">con<pos:position pos:line="22" pos:column="61"/></name><operator pos:line="22" pos:column="61">-&gt;<pos:position pos:line="22" pos:column="66"/></operator><name pos:line="22" pos:column="63">pid<pos:position pos:line="22" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">SSVAL<pos:position pos:line="23" pos:column="10"/></name><argument_list pos:line="23" pos:column="10">(<argument><expr><call><name pos:line="23" pos:column="11">SMB_Hdr<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">pkt<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="23" pos:column="25">SMB_hdr_mid_offset<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="45">Tree_Handle<pos:position pos:line="23" pos:column="56"/></name><operator pos:line="23" pos:column="56">-&gt;<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="58">con<pos:position pos:line="23" pos:column="61"/></name><operator pos:line="23" pos:column="61">-&gt;<pos:position pos:line="23" pos:column="66"/></operator><name pos:line="23" pos:column="63">mid<pos:position pos:line="23" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">SSVAL<pos:position pos:line="24" pos:column="10"/></name><argument_list pos:line="24" pos:column="10">(<argument><expr><call><name pos:line="24" pos:column="11">SMB_Hdr<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">pkt<pos:position pos:line="24" pos:column="22"/></name></expr></argument>)<pos:position pos:line="24" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="24" pos:column="25">SMB_hdr_uid_offset<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="45">Tree_Handle<pos:position pos:line="24" pos:column="56"/></name><operator pos:line="24" pos:column="56">-&gt;<pos:position pos:line="24" pos:column="61"/></operator><name pos:line="24" pos:column="58">con<pos:position pos:line="24" pos:column="61"/></name><operator pos:line="24" pos:column="61">-&gt;<pos:position pos:line="24" pos:column="66"/></operator><name pos:line="24" pos:column="63">uid<pos:position pos:line="24" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="25" pos:column="5">*<pos:position pos:line="25" pos:column="6"/></operator><operator pos:line="25" pos:column="6">(<pos:position pos:line="25" pos:column="7"/></operator><call><name pos:line="25" pos:column="7">SMB_Hdr<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">pkt<pos:position pos:line="25" pos:column="18"/></name></expr></argument>)<pos:position pos:line="25" pos:column="19"/></argument_list></call> <operator pos:line="25" pos:column="20">+<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="22">SMB_hdr_wct_offset<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">)<pos:position pos:line="25" pos:column="41"/></operator> <operator pos:line="25" pos:column="42">=<pos:position pos:line="25" pos:column="43"/></operator> <literal type="number" pos:line="25" pos:column="44">0<pos:position pos:line="25" pos:column="45"/></literal></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">SSVAL<pos:position pos:line="27" pos:column="10"/></name><argument_list pos:line="27" pos:column="10">(<argument><expr><call><name pos:line="27" pos:column="11">SMB_Hdr<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">(<argument><expr><name pos:line="27" pos:column="19">pkt<pos:position pos:line="27" pos:column="22"/></name></expr></argument>)<pos:position pos:line="27" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="27" pos:column="25">SMB_hdr_tid_offset<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="45">Tree_Handle<pos:position pos:line="27" pos:column="56"/></name><operator pos:line="27" pos:column="56">-&gt;<pos:position pos:line="27" pos:column="61"/></operator><name pos:line="27" pos:column="58">tid<pos:position pos:line="27" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">SSVAL<pos:position pos:line="28" pos:column="10"/></name><argument_list pos:line="28" pos:column="10">(<argument><expr><call><name pos:line="28" pos:column="11">SMB_Hdr<pos:position pos:line="28" pos:column="18"/></name><argument_list pos:line="28" pos:column="18">(<argument><expr><name pos:line="28" pos:column="19">pkt<pos:position pos:line="28" pos:column="22"/></name></expr></argument>)<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="25">SMB_tcon_bcc_offset<pos:position pos:line="28" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="46">0<pos:position pos:line="28" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/* Now send the packet and sit back ... */</comment>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><call><name pos:line="32" pos:column="9">RFCNB_Send<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name><name pos:line="32" pos:column="20">Tree_Handle<pos:position pos:line="32" pos:column="31"/></name><operator pos:line="32" pos:column="31">-&gt;<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="33">con<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">-&gt;<pos:position pos:line="32" pos:column="41"/></operator><name pos:line="32" pos:column="38">Trans_Connect<pos:position pos:line="32" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="53">pkt<pos:position pos:line="32" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="58">pkt_len<pos:position pos:line="32" pos:column="65"/></name></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call> <operator pos:line="32" pos:column="67">&lt;<pos:position pos:line="32" pos:column="71"/></operator> <literal type="number" pos:line="32" pos:column="69">0<pos:position pos:line="32" pos:column="70"/></literal></expr>)<pos:position pos:line="32" pos:column="71"/></condition><then pos:line="32" pos:column="71"> <block pos:line="32" pos:column="72">{

<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">DEBUG<pos:position pos:line="34" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">fprintf<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><name pos:line="35" pos:column="17">stderr<pos:position pos:line="35" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="25">"Error sending TDis request\n"<pos:position pos:line="35" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="38" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">pkt<pos:position pos:line="38" pos:column="27"/></name></expr></argument>)<pos:position pos:line="38" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">SMBlib_errno<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <operator pos:line="39" pos:column="24">-<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="25">SMBlibE_SendFailed<pos:position pos:line="39" pos:column="43"/></name></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>
        <return pos:line="40" pos:column="9">return <expr><operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="17">SMBlibE_BAD<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">)<pos:position pos:line="40" pos:column="29"/></operator></expr>;<pos:position pos:line="40" pos:column="30"/></return>

    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="43" pos:column="5">/* Now get the response ... */</comment>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><call><name pos:line="45" pos:column="9">RFCNB_Recv<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><name><name pos:line="45" pos:column="20">Tree_Handle<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">-&gt;<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="33">con<pos:position pos:line="45" pos:column="36"/></name><operator pos:line="45" pos:column="36">-&gt;<pos:position pos:line="45" pos:column="41"/></operator><name pos:line="45" pos:column="38">Trans_Connect<pos:position pos:line="45" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="53">pkt<pos:position pos:line="45" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="58">pkt_len<pos:position pos:line="45" pos:column="65"/></name></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></call> <operator pos:line="45" pos:column="67">&lt;<pos:position pos:line="45" pos:column="71"/></operator> <literal type="number" pos:line="45" pos:column="69">0<pos:position pos:line="45" pos:column="70"/></literal></expr>)<pos:position pos:line="45" pos:column="71"/></condition><then pos:line="45" pos:column="71"> <block pos:line="45" pos:column="72">{

<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef<pos:position pos:line="47" pos:column="7"/></cpp:directive> <name pos:line="47" pos:column="8">DEBUG<pos:position pos:line="47" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">fprintf<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">(<argument><expr><name pos:line="48" pos:column="17">stderr<pos:position pos:line="48" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="25">"Error receiving response to TCon\n"<pos:position pos:line="48" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="51" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><name pos:line="51" pos:column="24">pkt<pos:position pos:line="51" pos:column="27"/></name></expr></argument>)<pos:position pos:line="51" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="52" pos:column="9">SMBlib_errno<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <operator pos:line="52" pos:column="24">-<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="25">SMBlibE_RecvFailed<pos:position pos:line="52" pos:column="43"/></name></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>
        <return pos:line="53" pos:column="9">return <expr><operator pos:line="53" pos:column="16">(<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="17">SMBlibE_BAD<pos:position pos:line="53" pos:column="28"/></name><operator pos:line="53" pos:column="28">)<pos:position pos:line="53" pos:column="29"/></operator></expr>;<pos:position pos:line="53" pos:column="30"/></return>

    }<pos:position pos:line="55" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="56" pos:column="5">/* Check out the response type ... */</comment>

    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><call><name pos:line="58" pos:column="9">CVAL<pos:position pos:line="58" pos:column="13"/></name><argument_list pos:line="58" pos:column="13">(<argument><expr><call><name pos:line="58" pos:column="14">SMB_Hdr<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument><expr><name pos:line="58" pos:column="22">pkt<pos:position pos:line="58" pos:column="25"/></name></expr></argument>)<pos:position pos:line="58" pos:column="26"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="58" pos:column="28">SMB_hdr_rcls_offset<pos:position pos:line="58" pos:column="47"/></name></expr></argument>)<pos:position pos:line="58" pos:column="48"/></argument_list></call> <operator pos:line="58" pos:column="49">!=<pos:position pos:line="58" pos:column="51"/></operator> <name pos:line="58" pos:column="52">SMBC_SUCCESS<pos:position pos:line="58" pos:column="64"/></name></expr>)<pos:position pos:line="58" pos:column="65"/></condition><then pos:line="58" pos:column="65"> <block pos:line="58" pos:column="66">{	<comment type="block" pos:line="58" pos:column="73">/* Process error */</comment>

<cpp:ifdef pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">ifdef<pos:position pos:line="60" pos:column="7"/></cpp:directive> <name pos:line="60" pos:column="8">DEBUG<pos:position pos:line="60" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">fprintf<pos:position pos:line="61" pos:column="16"/></name><argument_list pos:line="61" pos:column="16">(<argument><expr><name pos:line="61" pos:column="17">stderr<pos:position pos:line="61" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="25">"SMB_TDis failed with errorclass = %i, Error Code = %i\n"<pos:position pos:line="61" pos:column="82"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="62" pos:column="17">CVAL<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">(<argument><expr><call><name pos:line="62" pos:column="22">SMB_Hdr<pos:position pos:line="62" pos:column="29"/></name><argument_list pos:line="62" pos:column="29">(<argument><expr><name pos:line="62" pos:column="30">pkt<pos:position pos:line="62" pos:column="33"/></name></expr></argument>)<pos:position pos:line="62" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="62" pos:column="36">SMB_hdr_rcls_offset<pos:position pos:line="62" pos:column="55"/></name></expr></argument>)<pos:position pos:line="62" pos:column="56"/></argument_list></call></expr></argument>,
                <argument><expr><call><name pos:line="63" pos:column="17">SVAL<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><call><name pos:line="63" pos:column="22">SMB_Hdr<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">pkt<pos:position pos:line="63" pos:column="33"/></name></expr></argument>)<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="63" pos:column="36">SMB_hdr_err_offset<pos:position pos:line="63" pos:column="54"/></name></expr></argument>)<pos:position pos:line="63" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><name pos:line="66" pos:column="9">SMBlib_SMB_Error<pos:position pos:line="66" pos:column="25"/></name> <operator pos:line="66" pos:column="26">=<pos:position pos:line="66" pos:column="27"/></operator> <call><name pos:line="66" pos:column="28">IVAL<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(<argument><expr><call><name pos:line="66" pos:column="33">SMB_Hdr<pos:position pos:line="66" pos:column="40"/></name><argument_list pos:line="66" pos:column="40">(<argument><expr><name pos:line="66" pos:column="41">pkt<pos:position pos:line="66" pos:column="44"/></name></expr></argument>)<pos:position pos:line="66" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="66" pos:column="47">SMB_hdr_rcls_offset<pos:position pos:line="66" pos:column="66"/></name></expr></argument>)<pos:position pos:line="66" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="67" pos:column="23"/></name><argument_list pos:line="67" pos:column="23">(<argument><expr><name pos:line="67" pos:column="24">pkt<pos:position pos:line="67" pos:column="27"/></name></expr></argument>)<pos:position pos:line="67" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="68" pos:column="9">SMBlib_errno<pos:position pos:line="68" pos:column="21"/></name> <operator pos:line="68" pos:column="22">=<pos:position pos:line="68" pos:column="23"/></operator> <name pos:line="68" pos:column="24">SMBlibE_Remote<pos:position pos:line="68" pos:column="38"/></name></expr>;<pos:position pos:line="68" pos:column="39"/></expr_stmt>
        <return pos:line="69" pos:column="9">return <expr><operator pos:line="69" pos:column="16">(<pos:position pos:line="69" pos:column="17"/></operator><name pos:line="69" pos:column="17">SMBlibE_BAD<pos:position pos:line="69" pos:column="28"/></name><operator pos:line="69" pos:column="28">)<pos:position pos:line="69" pos:column="29"/></operator></expr>;<pos:position pos:line="69" pos:column="30"/></return>

    }<pos:position pos:line="71" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="72" pos:column="5">Tree_Handle<pos:position pos:line="72" pos:column="16"/></name><operator pos:line="72" pos:column="16">-&gt;<pos:position pos:line="72" pos:column="21"/></operator><name pos:line="72" pos:column="18">tid<pos:position pos:line="72" pos:column="21"/></name></name> <operator pos:line="72" pos:column="22">=<pos:position pos:line="72" pos:column="23"/></operator> <literal type="number" pos:line="72" pos:column="24">0xFFFF<pos:position pos:line="72" pos:column="30"/></literal></expr>;<pos:position pos:line="72" pos:column="31"/></expr_stmt>	<comment type="block" pos:line="72" pos:column="33">/* Invalid TID */</comment>
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">Tree_Handle<pos:position pos:line="73" pos:column="16"/></name><operator pos:line="73" pos:column="16">-&gt;<pos:position pos:line="73" pos:column="21"/></operator><name pos:line="73" pos:column="18">mbs<pos:position pos:line="73" pos:column="21"/></name></name> <operator pos:line="73" pos:column="22">=<pos:position pos:line="73" pos:column="23"/></operator> <literal type="number" pos:line="73" pos:column="24">0<pos:position pos:line="73" pos:column="25"/></literal></expr>;<pos:position pos:line="73" pos:column="26"/></expr_stmt>	<comment type="block" pos:line="73" pos:column="33">/* Invalid     */</comment>

<cpp:ifdef pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">ifdef<pos:position pos:line="75" pos:column="7"/></cpp:directive> <name pos:line="75" pos:column="8">DEBUG<pos:position pos:line="75" pos:column="13"/></name></cpp:ifdef>

    <expr_stmt><expr><call><name pos:line="77" pos:column="5">fprintf<pos:position pos:line="77" pos:column="12"/></name><argument_list pos:line="77" pos:column="12">(<argument><expr><name pos:line="77" pos:column="13">stderr<pos:position pos:line="77" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="21">"Tree disconnect successful ...\n"<pos:position pos:line="77" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="57"/></expr_stmt>

<cpp:endif pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">endif<pos:position pos:line="79" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="81" pos:column="5">/* What about the tree handle ? */</comment>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name pos:line="83" pos:column="9">discard<pos:position pos:line="83" pos:column="16"/></name> <operator pos:line="83" pos:column="17">==<pos:position pos:line="83" pos:column="19"/></operator> <name pos:line="83" pos:column="20">TRUE<pos:position pos:line="83" pos:column="24"/></name></expr>)<pos:position pos:line="83" pos:column="25"/></condition><then pos:line="83" pos:column="25"> <block pos:line="83" pos:column="26">{	<comment type="block" pos:line="83" pos:column="33">/* Unlink it and free it ... */</comment>

        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name><name pos:line="85" pos:column="13">Tree_Handle<pos:position pos:line="85" pos:column="24"/></name><operator pos:line="85" pos:column="24">-&gt;<pos:position pos:line="85" pos:column="29"/></operator><name pos:line="85" pos:column="26">next<pos:position pos:line="85" pos:column="30"/></name></name> <operator pos:line="85" pos:column="31">==<pos:position pos:line="85" pos:column="33"/></operator> <name pos:line="85" pos:column="34">NULL<pos:position pos:line="85" pos:column="38"/></name></expr>)<pos:position pos:line="85" pos:column="39"/></condition><then pos:line="85" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="86" pos:column="13">Tree_Handle<pos:position pos:line="86" pos:column="24"/></name><operator pos:line="86" pos:column="24">-&gt;<pos:position pos:line="86" pos:column="29"/></operator><name pos:line="86" pos:column="26">con<pos:position pos:line="86" pos:column="29"/></name><operator pos:line="86" pos:column="29">-&gt;<pos:position pos:line="86" pos:column="34"/></operator><name pos:line="86" pos:column="31">first_tree<pos:position pos:line="86" pos:column="41"/></name></name> <operator pos:line="86" pos:column="42">=<pos:position pos:line="86" pos:column="43"/></operator> <name><name pos:line="86" pos:column="44">Tree_Handle<pos:position pos:line="86" pos:column="55"/></name><operator pos:line="86" pos:column="55">-&gt;<pos:position pos:line="86" pos:column="60"/></operator><name pos:line="86" pos:column="57">prev<pos:position pos:line="86" pos:column="61"/></name></name></expr>;<pos:position pos:line="86" pos:column="62"/></expr_stmt></block></then>
        <else pos:line="87" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="88" pos:column="13">Tree_Handle<pos:position pos:line="88" pos:column="24"/></name><operator pos:line="88" pos:column="24">-&gt;<pos:position pos:line="88" pos:column="29"/></operator><name pos:line="88" pos:column="26">next<pos:position pos:line="88" pos:column="30"/></name><operator pos:line="88" pos:column="30">-&gt;<pos:position pos:line="88" pos:column="35"/></operator><name pos:line="88" pos:column="32">prev<pos:position pos:line="88" pos:column="36"/></name></name> <operator pos:line="88" pos:column="37">=<pos:position pos:line="88" pos:column="38"/></operator> <name><name pos:line="88" pos:column="39">Tree_Handle<pos:position pos:line="88" pos:column="50"/></name><operator pos:line="88" pos:column="50">-&gt;<pos:position pos:line="88" pos:column="55"/></operator><name pos:line="88" pos:column="52">prev<pos:position pos:line="88" pos:column="56"/></name></name></expr>;<pos:position pos:line="88" pos:column="57"/></expr_stmt></block></else></if>

        <if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><name><name pos:line="90" pos:column="13">Tree_Handle<pos:position pos:line="90" pos:column="24"/></name><operator pos:line="90" pos:column="24">-&gt;<pos:position pos:line="90" pos:column="29"/></operator><name pos:line="90" pos:column="26">prev<pos:position pos:line="90" pos:column="30"/></name></name> <operator pos:line="90" pos:column="31">==<pos:position pos:line="90" pos:column="33"/></operator> <name pos:line="90" pos:column="34">NULL<pos:position pos:line="90" pos:column="38"/></name></expr>)<pos:position pos:line="90" pos:column="39"/></condition><then pos:line="90" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="91" pos:column="13">Tree_Handle<pos:position pos:line="91" pos:column="24"/></name><operator pos:line="91" pos:column="24">-&gt;<pos:position pos:line="91" pos:column="29"/></operator><name pos:line="91" pos:column="26">con<pos:position pos:line="91" pos:column="29"/></name><operator pos:line="91" pos:column="29">-&gt;<pos:position pos:line="91" pos:column="34"/></operator><name pos:line="91" pos:column="31">last_tree<pos:position pos:line="91" pos:column="40"/></name></name> <operator pos:line="91" pos:column="41">=<pos:position pos:line="91" pos:column="42"/></operator> <name><name pos:line="91" pos:column="43">Tree_Handle<pos:position pos:line="91" pos:column="54"/></name><operator pos:line="91" pos:column="54">-&gt;<pos:position pos:line="91" pos:column="59"/></operator><name pos:line="91" pos:column="56">next<pos:position pos:line="91" pos:column="60"/></name></name></expr>;<pos:position pos:line="91" pos:column="61"/></expr_stmt></block></then>
        <else pos:line="92" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="93" pos:column="13">Tree_Handle<pos:position pos:line="93" pos:column="24"/></name><operator pos:line="93" pos:column="24">-&gt;<pos:position pos:line="93" pos:column="29"/></operator><name pos:line="93" pos:column="26">prev<pos:position pos:line="93" pos:column="30"/></name><operator pos:line="93" pos:column="30">-&gt;<pos:position pos:line="93" pos:column="35"/></operator><name pos:line="93" pos:column="32">next<pos:position pos:line="93" pos:column="36"/></name></name> <operator pos:line="93" pos:column="37">=<pos:position pos:line="93" pos:column="38"/></operator> <name><name pos:line="93" pos:column="39">Tree_Handle<pos:position pos:line="93" pos:column="50"/></name><operator pos:line="93" pos:column="50">-&gt;<pos:position pos:line="93" pos:column="55"/></operator><name pos:line="93" pos:column="52">next<pos:position pos:line="93" pos:column="56"/></name></name></expr>;<pos:position pos:line="93" pos:column="57"/></expr_stmt></block></else></if>

    }<pos:position pos:line="95" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="96" pos:column="5">RFCNB_Free_Pkt<pos:position pos:line="96" pos:column="19"/></name><argument_list pos:line="96" pos:column="19">(<argument><expr><name pos:line="96" pos:column="20">pkt<pos:position pos:line="96" pos:column="23"/></name></expr></argument>)<pos:position pos:line="96" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="25"/></expr_stmt>
    <return pos:line="97" pos:column="5">return <expr><operator pos:line="97" pos:column="12">(<pos:position pos:line="97" pos:column="13"/></operator><literal type="number" pos:line="97" pos:column="13">0<pos:position pos:line="97" pos:column="14"/></literal><operator pos:line="97" pos:column="14">)<pos:position pos:line="97" pos:column="15"/></operator></expr>;<pos:position pos:line="97" pos:column="16"/></return>

}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
