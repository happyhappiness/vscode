<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_715_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">lt_module<pos:position pos:line="1" pos:column="17"/></name></type>
<name pos:line="2" pos:column="1">vm_open<pos:position pos:line="2" pos:column="8"/></name> <parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name pos:line="2" pos:column="10">lt_user_data<pos:position pos:line="2" pos:column="22"/></name> <name pos:line="2" pos:column="23">loader_data<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">LT__UNUSED<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier> <name pos:line="2" pos:column="53">char<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">filename<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>,
         <parameter><decl><type><name pos:line="3" pos:column="10">lt_dladvise<pos:position pos:line="3" pos:column="21"/></name></type> <name pos:line="3" pos:column="22">advise<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="29"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type>		<name pos:line="5" pos:column="17">module_flags<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name pos:line="5" pos:column="32">LT_LAZY_OR_NOW<pos:position pos:line="5" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="47"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">lt_module<pos:position pos:line="6" pos:column="12"/></name></type>	<name pos:line="6" pos:column="17">module<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">RTLD_MEMBER<pos:position pos:line="7" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="8" pos:column="3">int<pos:position pos:line="8" pos:column="6"/></name></type>		<name pos:line="8" pos:column="17">len<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><call><name pos:line="8" pos:column="23">LT_STRLEN<pos:position pos:line="8" pos:column="32"/></name> <argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">filename<pos:position pos:line="8" pos:column="42"/></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">advise<pos:position pos:line="11" pos:column="13"/></name></expr>)<pos:position pos:line="11" pos:column="14"/></condition><then pos:line="11" pos:column="14">
    <block pos:line="12" pos:column="5">{
<cpp:ifdef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifdef<pos:position pos:line="13" pos:column="7"/></cpp:directive> <name pos:line="13" pos:column="8">RTLD_GLOBAL<pos:position pos:line="13" pos:column="19"/></name></cpp:ifdef>
      <comment type="block" pos:line="14" pos:column="7">/* If there is some means of asking for global symbol resolution,
         do so.  */</comment>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><name><name pos:line="16" pos:column="11">advise<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">-&gt;<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="19">is_symglobal<pos:position pos:line="16" pos:column="31"/></name></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="9">module_flags<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">|=<pos:position pos:line="17" pos:column="24"/></operator> <name pos:line="17" pos:column="25">RTLD_GLOBAL<pos:position pos:line="17" pos:column="36"/></name></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt></block></then></if>
<cpp:else pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">else<pos:position pos:line="18" pos:column="6"/></cpp:directive></cpp:else>
      <comment type="block" pos:line="19" pos:column="7">/* Otherwise, reset that bit so the caller can tell it wasn't
         acted on.  */</comment>
      <expr_stmt><expr><name><name pos:line="21" pos:column="7">advise<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">is_symglobal<pos:position pos:line="21" pos:column="27"/></name></name> <operator pos:line="21" pos:column="28">=<pos:position pos:line="21" pos:column="29"/></operator> <literal type="number" pos:line="21" pos:column="30">0<pos:position pos:line="21" pos:column="31"/></literal></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="24" pos:column="1">/* And similarly for local only symbol resolution.  */</comment>
<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">RTLD_LOCAL<pos:position pos:line="25" pos:column="18"/></name></cpp:ifdef>
      <if pos:line="26" pos:column="7">if <condition pos:line="26" pos:column="10">(<expr><name><name pos:line="26" pos:column="11">advise<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">is_symlocal<pos:position pos:line="26" pos:column="30"/></name></name></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="9">module_flags<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">|=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">RTLD_LOCAL<pos:position pos:line="27" pos:column="35"/></name></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt></block></then></if>
<cpp:else pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">else<pos:position pos:line="28" pos:column="6"/></cpp:directive></cpp:else>
      <expr_stmt><expr><name><name pos:line="29" pos:column="7">advise<pos:position pos:line="29" pos:column="13"/></name><operator pos:line="29" pos:column="13">-&gt;<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="15">is_symlocal<pos:position pos:line="29" pos:column="26"/></name></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <literal type="number" pos:line="29" pos:column="29">0<pos:position pos:line="29" pos:column="30"/></literal></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifdef<pos:position pos:line="33" pos:column="7"/></cpp:directive> <name pos:line="33" pos:column="8">RTLD_MEMBER<pos:position pos:line="33" pos:column="19"/></name></cpp:ifdef> <comment type="block" pos:line="33" pos:column="20">/* AIX */</comment>
  <if pos:line="34" pos:column="3">if <condition pos:line="34" pos:column="6">(<expr><name pos:line="34" pos:column="7">len<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">&gt;=<pos:position pos:line="34" pos:column="16"/></operator> <literal type="number" pos:line="34" pos:column="14">4<pos:position pos:line="34" pos:column="15"/></literal></expr>)<pos:position pos:line="34" pos:column="16"/></condition><then pos:line="34" pos:column="16"> <comment type="block" pos:line="34" pos:column="17">/* at least "l(m)" */</comment>
    <block pos:line="35" pos:column="5">{
      <comment type="block" pos:line="36" pos:column="7">/* Advise loading an archive member only if the filename really
	 contains both the opening and closing parent, and a member. */</comment>
      <if pos:line="38" pos:column="7">if <condition pos:line="38" pos:column="10">(<expr><name><name pos:line="38" pos:column="11">filename<pos:position pos:line="38" pos:column="19"/></name><index pos:line="38" pos:column="19">[<expr><name pos:line="38" pos:column="20">len<pos:position pos:line="38" pos:column="23"/></name><operator pos:line="38" pos:column="23">-<pos:position pos:line="38" pos:column="24"/></operator><literal type="number" pos:line="38" pos:column="24">1<pos:position pos:line="38" pos:column="25"/></literal></expr>]<pos:position pos:line="38" pos:column="26"/></index></name> <operator pos:line="38" pos:column="27">==<pos:position pos:line="38" pos:column="29"/></operator> <literal type="char" pos:line="38" pos:column="30">')'<pos:position pos:line="38" pos:column="33"/></literal></expr>)<pos:position pos:line="38" pos:column="34"/></condition><then pos:line="38" pos:column="34">
	<block pos:line="39" pos:column="9">{
	  <decl_stmt><decl><type><specifier pos:line="40" pos:column="11">const<pos:position pos:line="40" pos:column="16"/></specifier> <name pos:line="40" pos:column="17">char<pos:position pos:line="40" pos:column="21"/></name> <modifier pos:line="40" pos:column="22">*<pos:position pos:line="40" pos:column="23"/></modifier></type><name pos:line="40" pos:column="23">opening<pos:position pos:line="40" pos:column="30"/></name> <init pos:line="40" pos:column="31">= <expr><call><name pos:line="40" pos:column="33">strrchr<pos:position pos:line="40" pos:column="40"/></name><argument_list pos:line="40" pos:column="40">(<argument><expr><name pos:line="40" pos:column="41">filename<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="40" pos:column="51">'('<pos:position pos:line="40" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="56"/></decl_stmt>
	  <if pos:line="41" pos:column="11">if <condition pos:line="41" pos:column="14">(<expr><name pos:line="41" pos:column="15">opening<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">&amp;&amp;<pos:position pos:line="41" pos:column="33"/></operator> <name pos:line="41" pos:column="26">opening<pos:position pos:line="41" pos:column="33"/></name> <operator pos:line="41" pos:column="34">&lt;<pos:position pos:line="41" pos:column="38"/></operator> <operator pos:line="41" pos:column="36">(<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="37">filename<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">+<pos:position pos:line="41" pos:column="46"/></operator><name pos:line="41" pos:column="46">len<pos:position pos:line="41" pos:column="49"/></name><operator pos:line="41" pos:column="49">-<pos:position pos:line="41" pos:column="50"/></operator><literal type="number" pos:line="41" pos:column="50">2<pos:position pos:line="41" pos:column="51"/></literal><operator pos:line="41" pos:column="51">)<pos:position pos:line="41" pos:column="52"/></operator> <operator pos:line="41" pos:column="53">&amp;&amp;<pos:position pos:line="41" pos:column="63"/></operator> <call><name pos:line="41" pos:column="56">strchr<pos:position pos:line="41" pos:column="62"/></name><argument_list pos:line="41" pos:column="62">(<argument><expr><name pos:line="41" pos:column="63">opening<pos:position pos:line="41" pos:column="70"/></name><operator pos:line="41" pos:column="70">+<pos:position pos:line="41" pos:column="71"/></operator><literal type="number" pos:line="41" pos:column="71">1<pos:position pos:line="41" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="74">'/'<pos:position pos:line="41" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="78"/></argument_list></call> <operator pos:line="41" pos:column="79">==<pos:position pos:line="41" pos:column="81"/></operator> <name pos:line="41" pos:column="82">NULL<pos:position pos:line="41" pos:column="86"/></name></expr>)<pos:position pos:line="41" pos:column="87"/></condition><then pos:line="41" pos:column="87">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="13">module_flags<pos:position pos:line="42" pos:column="25"/></name> <operator pos:line="42" pos:column="26">|=<pos:position pos:line="42" pos:column="28"/></operator> <name pos:line="42" pos:column="29">RTLD_MEMBER<pos:position pos:line="42" pos:column="40"/></name></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt></block></then></if>
	}<pos:position pos:line="43" pos:column="10"/></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>

  <expr_stmt><expr><name pos:line="47" pos:column="3">module<pos:position pos:line="47" pos:column="9"/></name> <operator pos:line="47" pos:column="10">=<pos:position pos:line="47" pos:column="11"/></operator> <call><name pos:line="47" pos:column="12">dlopen<pos:position pos:line="47" pos:column="18"/></name> <argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">filename<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="30">module_flags<pos:position pos:line="47" pos:column="42"/></name></expr></argument>)<pos:position pos:line="47" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="44"/></expr_stmt>

<cpp:if pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">if<pos:position pos:line="49" pos:column="4"/></cpp:directive> <expr><name pos:line="49" pos:column="5">defined<pos:position pos:line="49" pos:column="12"/></name> <name pos:line="49" pos:column="13">RTLD_MEMBER<pos:position pos:line="49" pos:column="24"/></name> <operator pos:line="49" pos:column="25">&amp;&amp;<pos:position pos:line="49" pos:column="35"/></operator> <name pos:line="49" pos:column="28">defined<pos:position pos:line="49" pos:column="35"/></name> <name pos:line="49" pos:column="36">LT_SHARED_LIB_MEMBER<pos:position pos:line="49" pos:column="56"/></name></expr></cpp:if>
  <if pos:line="50" pos:column="3">if <condition pos:line="50" pos:column="6">(<expr><operator pos:line="50" pos:column="7">!<pos:position pos:line="50" pos:column="8"/></operator><name pos:line="50" pos:column="8">module<pos:position pos:line="50" pos:column="14"/></name> <operator pos:line="50" pos:column="15">&amp;&amp;<pos:position pos:line="50" pos:column="25"/></operator> <name pos:line="50" pos:column="18">len<pos:position pos:line="50" pos:column="21"/></name> <operator pos:line="50" pos:column="22">&amp;&amp;<pos:position pos:line="50" pos:column="32"/></operator> <operator pos:line="50" pos:column="25">!<pos:position pos:line="50" pos:column="26"/></operator><operator pos:line="50" pos:column="26">(<pos:position pos:line="50" pos:column="27"/></operator><name pos:line="50" pos:column="27">module_flags<pos:position pos:line="50" pos:column="39"/></name> <operator pos:line="50" pos:column="40">&amp;<pos:position pos:line="50" pos:column="45"/></operator> <name pos:line="50" pos:column="42">RTLD_MEMBER<pos:position pos:line="50" pos:column="53"/></name><operator pos:line="50" pos:column="53">)<pos:position pos:line="50" pos:column="54"/></operator> <operator pos:line="50" pos:column="55">&amp;&amp;<pos:position pos:line="50" pos:column="65"/></operator> <name pos:line="50" pos:column="58">errno<pos:position pos:line="50" pos:column="63"/></name> <operator pos:line="50" pos:column="64">==<pos:position pos:line="50" pos:column="66"/></operator> <name pos:line="50" pos:column="67">ENOEXEC<pos:position pos:line="50" pos:column="74"/></name></expr>)<pos:position pos:line="50" pos:column="75"/></condition><then pos:line="50" pos:column="75">
    <block pos:line="51" pos:column="5">{
      <comment type="block" pos:line="52" pos:column="7">/* Loading without a member specified failed with "Exec format error".
	 So the file is there, but either has wrong bitwidth, or is an
	 archive eventually containing the default shared archive member.
	 Retry with default member, getting same error in worst case. */</comment>
      <decl_stmt><decl><type><specifier pos:line="56" pos:column="7">const<pos:position pos:line="56" pos:column="12"/></specifier> <name pos:line="56" pos:column="13">char<pos:position pos:line="56" pos:column="17"/></name> <modifier pos:line="56" pos:column="18">*<pos:position pos:line="56" pos:column="19"/></modifier></type><name pos:line="56" pos:column="19">member<pos:position pos:line="56" pos:column="25"/></name> <init pos:line="56" pos:column="26">= <expr><name pos:line="56" pos:column="28">LT_SHARED_LIB_MEMBER<pos:position pos:line="56" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="56" pos:column="49"/></decl_stmt>

      <decl_stmt><decl><type><name pos:line="58" pos:column="7">char<pos:position pos:line="58" pos:column="11"/></name> <modifier pos:line="58" pos:column="12">*<pos:position pos:line="58" pos:column="13"/></modifier></type><name pos:line="58" pos:column="13">attempt<pos:position pos:line="58" pos:column="20"/></name> <init pos:line="58" pos:column="21">= <expr><call><name pos:line="58" pos:column="23">MALLOC<pos:position pos:line="58" pos:column="29"/></name> <argument_list pos:line="58" pos:column="30">(<argument><expr><name pos:line="58" pos:column="31">char<pos:position pos:line="58" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="37">len<pos:position pos:line="58" pos:column="40"/></name> <operator pos:line="58" pos:column="41">+<pos:position pos:line="58" pos:column="42"/></operator> <call><name pos:line="58" pos:column="43">strlen<pos:position pos:line="58" pos:column="49"/></name> <argument_list pos:line="58" pos:column="50">(<argument><expr><name pos:line="58" pos:column="51">member<pos:position pos:line="58" pos:column="57"/></name></expr></argument>)<pos:position pos:line="58" pos:column="58"/></argument_list></call> <operator pos:line="58" pos:column="59">+<pos:position pos:line="58" pos:column="60"/></operator> <literal type="number" pos:line="58" pos:column="61">1<pos:position pos:line="58" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="58" pos:column="64"/></decl_stmt>
      <if pos:line="59" pos:column="7">if <condition pos:line="59" pos:column="10">(<expr><operator pos:line="59" pos:column="11">!<pos:position pos:line="59" pos:column="12"/></operator><name pos:line="59" pos:column="12">attempt<pos:position pos:line="59" pos:column="19"/></name></expr>)<pos:position pos:line="59" pos:column="20"/></condition><then pos:line="59" pos:column="20">
	<block pos:line="60" pos:column="9">{
	  <expr_stmt><expr><call><name pos:line="61" pos:column="11">LT__SETERROR<pos:position pos:line="61" pos:column="23"/></name> <argument_list pos:line="61" pos:column="24">(<argument><expr><name pos:line="61" pos:column="25">NO_MEMORY<pos:position pos:line="61" pos:column="34"/></name></expr></argument>)<pos:position pos:line="61" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="36"/></expr_stmt>
	  <return pos:line="62" pos:column="11">return <expr><name pos:line="62" pos:column="18">module<pos:position pos:line="62" pos:column="24"/></name></expr>;<pos:position pos:line="62" pos:column="25"/></return>
	}<pos:position pos:line="63" pos:column="10"/></block></then></if>

      <expr_stmt><expr><call><name pos:line="65" pos:column="7">sprintf<pos:position pos:line="65" pos:column="14"/></name> <argument_list pos:line="65" pos:column="15">(<argument><expr><name pos:line="65" pos:column="16">attempt<pos:position pos:line="65" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="25">"%s%s"<pos:position pos:line="65" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="33">filename<pos:position pos:line="65" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="43">member<pos:position pos:line="65" pos:column="49"/></name></expr></argument>)<pos:position pos:line="65" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="51"/></expr_stmt>
      <expr_stmt><expr><name pos:line="66" pos:column="7">module<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <call><name pos:line="66" pos:column="16">vm_open<pos:position pos:line="66" pos:column="23"/></name> <argument_list pos:line="66" pos:column="24">(<argument><expr><name pos:line="66" pos:column="25">loader_data<pos:position pos:line="66" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="38">attempt<pos:position pos:line="66" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="47">advise<pos:position pos:line="66" pos:column="53"/></name></expr></argument>)<pos:position pos:line="66" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="55"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="67" pos:column="7">FREE<pos:position pos:line="67" pos:column="11"/></name> <argument_list pos:line="67" pos:column="12">(<argument><expr><name pos:line="67" pos:column="13">attempt<pos:position pos:line="67" pos:column="20"/></name></expr></argument>)<pos:position pos:line="67" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="22"/></expr_stmt>
      <return pos:line="68" pos:column="7">return <expr><name pos:line="68" pos:column="14">module<pos:position pos:line="68" pos:column="20"/></name></expr>;<pos:position pos:line="68" pos:column="21"/></return>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif>

  <if pos:line="72" pos:column="3">if <condition pos:line="72" pos:column="6">(<expr><operator pos:line="72" pos:column="7">!<pos:position pos:line="72" pos:column="8"/></operator><name pos:line="72" pos:column="8">module<pos:position pos:line="72" pos:column="14"/></name></expr>)<pos:position pos:line="72" pos:column="15"/></condition><then pos:line="72" pos:column="15">
    <block pos:line="73" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="74" pos:column="7">DL__SETERROR<pos:position pos:line="74" pos:column="19"/></name> <argument_list pos:line="74" pos:column="20">(<argument><expr><name pos:line="74" pos:column="21">CANNOT_OPEN<pos:position pos:line="74" pos:column="32"/></name></expr></argument>)<pos:position pos:line="74" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if>

  <return pos:line="77" pos:column="3">return <expr><name pos:line="77" pos:column="10">module<pos:position pos:line="77" pos:column="16"/></name></expr>;<pos:position pos:line="77" pos:column="17"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
