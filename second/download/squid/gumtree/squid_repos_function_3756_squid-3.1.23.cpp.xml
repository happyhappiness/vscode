<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3756_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">ServiceConfig<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">grokUri<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">(<parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">value<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// TODO: find core code that parses URLs and extracts various parts</comment>
    <comment type="line" pos:line="5" pos:column="5">// AYJ: most of this is duplicate of urlParse() in src/url.cc</comment>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">value<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">||<pos:position pos:line="7" pos:column="18"/></operator> <operator pos:line="7" pos:column="19">!<pos:position pos:line="7" pos:column="20"/></operator><operator pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="21">value<pos:position pos:line="7" pos:column="26"/></name></expr>)<pos:position pos:line="7" pos:column="27"/></condition><then pos:line="7" pos:column="27"> <block pos:line="7" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">3<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="22">HERE<pos:position pos:line="8" pos:column="26"/></name> <operator pos:line="8" pos:column="27">&lt;&lt;<pos:position pos:line="8" pos:column="35"/></operator> <name pos:line="8" pos:column="30">cfg_filename<pos:position pos:line="8" pos:column="42"/></name> <operator pos:line="8" pos:column="43">&lt;&lt;<pos:position pos:line="8" pos:column="51"/></operator> <literal type="char" pos:line="8" pos:column="46">':'<pos:position pos:line="8" pos:column="49"/></literal> <operator pos:line="8" pos:column="50">&lt;&lt;<pos:position pos:line="8" pos:column="58"/></operator> <name pos:line="8" pos:column="53">config_lineno<pos:position pos:line="8" pos:column="66"/></name> <operator pos:line="8" pos:column="67">&lt;&lt;<pos:position pos:line="8" pos:column="75"/></operator> <literal type="string" pos:line="8" pos:column="70">": "<pos:position pos:line="8" pos:column="74"/></literal> <operator pos:line="8" pos:column="75">&lt;&lt;<pos:position pos:line="8" pos:column="83"/></operator>
               <literal type="string" pos:line="9" pos:column="16">"empty adaptation service URI"<pos:position pos:line="9" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="48"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="13" pos:column="5">uri<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <name pos:line="13" pos:column="11">value<pos:position pos:line="13" pos:column="16"/></name></expr>;<pos:position pos:line="13" pos:column="17"/></expr_stmt>

    <comment type="line" pos:line="15" pos:column="5">// extract scheme and use it as the service_configConfig protocol</comment>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">char<pos:position pos:line="16" pos:column="15"/></name> <modifier pos:line="16" pos:column="16">*<pos:position pos:line="16" pos:column="17"/></modifier></type><name pos:line="16" pos:column="17">schemeSuffix<pos:position pos:line="16" pos:column="29"/></name> <init pos:line="16" pos:column="30">= <expr><literal type="string" pos:line="16" pos:column="32">"://"<pos:position pos:line="16" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="17" pos:column="5">const<pos:position pos:line="17" pos:column="10"/></specifier> <name><name pos:line="17" pos:column="11">String<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">::<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="19">size_type<pos:position pos:line="17" pos:column="28"/></name></name></type> <name pos:line="17" pos:column="29">schemeEnd<pos:position pos:line="17" pos:column="38"/></name> <init pos:line="17" pos:column="39">= <expr><call><name><name pos:line="17" pos:column="41">uri<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">.<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="45">find<pos:position pos:line="17" pos:column="49"/></name></name><argument_list pos:line="17" pos:column="49">(<argument><expr><name pos:line="17" pos:column="50">schemeSuffix<pos:position pos:line="17" pos:column="62"/></name></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="64"/></decl_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">schemeEnd<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">!=<pos:position pos:line="18" pos:column="21"/></operator> <name><name pos:line="18" pos:column="22">String<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">::<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="30">npos<pos:position pos:line="18" pos:column="34"/></name></name></expr>)<pos:position pos:line="18" pos:column="35"/></condition><then pos:line="18" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">protocol<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator><call><name><name pos:line="19" pos:column="18">uri<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">substr<pos:position pos:line="19" pos:column="28"/></name></name><argument_list pos:line="19" pos:column="28">(<argument><expr><literal type="number" pos:line="19" pos:column="29">0<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>,<argument><expr><name pos:line="19" pos:column="31">schemeEnd<pos:position pos:line="19" pos:column="40"/></name></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">debugs<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><literal type="number" pos:line="21" pos:column="12">3<pos:position pos:line="21" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="15">5<pos:position pos:line="21" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="18">HERE<pos:position pos:line="21" pos:column="22"/></name> <operator pos:line="21" pos:column="23">&lt;&lt;<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="26">cfg_filename<pos:position pos:line="21" pos:column="38"/></name> <operator pos:line="21" pos:column="39">&lt;&lt;<pos:position pos:line="21" pos:column="47"/></operator> <literal type="char" pos:line="21" pos:column="42">':'<pos:position pos:line="21" pos:column="45"/></literal> <operator pos:line="21" pos:column="46">&lt;&lt;<pos:position pos:line="21" pos:column="54"/></operator> <name pos:line="21" pos:column="49">config_lineno<pos:position pos:line="21" pos:column="62"/></name> <operator pos:line="21" pos:column="63">&lt;&lt;<pos:position pos:line="21" pos:column="71"/></operator> <literal type="string" pos:line="21" pos:column="66">": "<pos:position pos:line="21" pos:column="70"/></literal> <operator pos:line="21" pos:column="71">&lt;&lt;<pos:position pos:line="21" pos:column="79"/></operator>
           <literal type="string" pos:line="22" pos:column="12">"service protocol is "<pos:position pos:line="22" pos:column="34"/></literal> <operator pos:line="22" pos:column="35">&lt;&lt;<pos:position pos:line="22" pos:column="43"/></operator> <name pos:line="22" pos:column="38">protocol<pos:position pos:line="22" pos:column="46"/></name></expr></argument>)<pos:position pos:line="22" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="48"/></expr_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><call><name><name pos:line="24" pos:column="9">protocol<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">size<pos:position pos:line="24" pos:column="22"/></name></name><argument_list pos:line="24" pos:column="22">()<pos:position pos:line="24" pos:column="24"/></argument_list></call> <operator pos:line="24" pos:column="25">==<pos:position pos:line="24" pos:column="27"/></operator> <literal type="number" pos:line="24" pos:column="28">0<pos:position pos:line="24" pos:column="29"/></literal></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30">
        <block type="pseudo"><return pos:line="25" pos:column="9">return <expr><literal type="boolean" pos:line="25" pos:column="16">false<pos:position pos:line="25" pos:column="21"/></literal></expr>;<pos:position pos:line="25" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="27" pos:column="5">// skip scheme</comment>
    <decl_stmt><decl><type><specifier pos:line="28" pos:column="5">const<pos:position pos:line="28" pos:column="10"/></specifier> <name pos:line="28" pos:column="11">char<pos:position pos:line="28" pos:column="15"/></name> <modifier pos:line="28" pos:column="16">*<pos:position pos:line="28" pos:column="17"/></modifier></type><name pos:line="28" pos:column="17">s<pos:position pos:line="28" pos:column="18"/></name> <init pos:line="28" pos:column="19">= <expr><call><name><name pos:line="28" pos:column="21">uri<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">.<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="25">termedBuf<pos:position pos:line="28" pos:column="34"/></name></name><argument_list pos:line="28" pos:column="34">()<pos:position pos:line="28" pos:column="36"/></argument_list></call> <operator pos:line="28" pos:column="37">+<pos:position pos:line="28" pos:column="38"/></operator> <call><name><name pos:line="28" pos:column="39">protocol<pos:position pos:line="28" pos:column="47"/></name><operator pos:line="28" pos:column="47">.<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="48">size<pos:position pos:line="28" pos:column="52"/></name></name><argument_list pos:line="28" pos:column="52">()<pos:position pos:line="28" pos:column="54"/></argument_list></call> <operator pos:line="28" pos:column="55">+<pos:position pos:line="28" pos:column="56"/></operator> <call><name pos:line="28" pos:column="57">strlen<pos:position pos:line="28" pos:column="63"/></name><argument_list pos:line="28" pos:column="63">(<argument><expr><name pos:line="28" pos:column="64">schemeSuffix<pos:position pos:line="28" pos:column="76"/></name></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="78"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="30" pos:column="5">const<pos:position pos:line="30" pos:column="10"/></specifier> <name pos:line="30" pos:column="11">char<pos:position pos:line="30" pos:column="15"/></name> <modifier pos:line="30" pos:column="16">*<pos:position pos:line="30" pos:column="17"/></modifier></type><name pos:line="30" pos:column="17">e<pos:position pos:line="30" pos:column="18"/></name></decl>;<pos:position pos:line="30" pos:column="19"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="32" pos:column="5">bool<pos:position pos:line="32" pos:column="9"/></name></type> <name pos:line="32" pos:column="10">have_port<pos:position pos:line="32" pos:column="19"/></name> <init pos:line="32" pos:column="20">= <expr><literal type="boolean" pos:line="32" pos:column="22">false<pos:position pos:line="32" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="28"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="34" pos:column="5">int<pos:position pos:line="34" pos:column="8"/></name></type> <name pos:line="34" pos:column="9">len<pos:position pos:line="34" pos:column="12"/></name> <init pos:line="34" pos:column="13">= <expr><literal type="number" pos:line="34" pos:column="15">0<pos:position pos:line="34" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="34" pos:column="17"/></decl_stmt>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">*<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">s<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">==<pos:position pos:line="35" pos:column="14"/></operator> <literal type="char" pos:line="35" pos:column="15">'['<pos:position pos:line="35" pos:column="18"/></literal></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19"> <block pos:line="35" pos:column="20">{
        <decl_stmt><decl><type><specifier pos:line="36" pos:column="9">const<pos:position pos:line="36" pos:column="14"/></specifier> <name pos:line="36" pos:column="15">char<pos:position pos:line="36" pos:column="19"/></name> <modifier pos:line="36" pos:column="20">*<pos:position pos:line="36" pos:column="21"/></modifier></type><name pos:line="36" pos:column="21">t<pos:position pos:line="36" pos:column="22"/></name></decl>;<pos:position pos:line="36" pos:column="23"/></decl_stmt>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><operator pos:line="37" pos:column="13">(<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="14">t<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">strchr<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">s<pos:position pos:line="37" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="37" pos:column="28">']'<pos:position pos:line="37" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="32"/></argument_list></call><operator pos:line="37" pos:column="32">)<pos:position pos:line="37" pos:column="33"/></operator> <operator pos:line="37" pos:column="34">==<pos:position pos:line="37" pos:column="36"/></operator> <name pos:line="37" pos:column="37">NULL<pos:position pos:line="37" pos:column="41"/></name></expr>)<pos:position pos:line="37" pos:column="42"/></condition><then pos:line="37" pos:column="42">
            <block type="pseudo"><return pos:line="38" pos:column="13">return <expr><literal type="boolean" pos:line="38" pos:column="20">false<pos:position pos:line="38" pos:column="25"/></literal></expr>;<pos:position pos:line="38" pos:column="26"/></return></block></then></if>

        <expr_stmt><expr><name pos:line="40" pos:column="9">s<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">++<pos:position pos:line="40" pos:column="12"/></operator></expr>;<pos:position pos:line="40" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">len<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <name pos:line="41" pos:column="15">t<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">-<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">s<pos:position pos:line="41" pos:column="20"/></name></expr>;<pos:position pos:line="41" pos:column="21"/></expr_stmt>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">(<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">e<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <call><name pos:line="42" pos:column="18">strchr<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name pos:line="42" pos:column="25">t<pos:position pos:line="42" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="42" pos:column="28">':'<pos:position pos:line="42" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="32"/></argument_list></call><operator pos:line="42" pos:column="32">)<pos:position pos:line="42" pos:column="33"/></operator> <operator pos:line="42" pos:column="34">!=<pos:position pos:line="42" pos:column="36"/></operator> <name pos:line="42" pos:column="37">NULL<pos:position pos:line="42" pos:column="41"/></name></expr>)<pos:position pos:line="42" pos:column="42"/></condition><then pos:line="42" pos:column="42"> <block pos:line="42" pos:column="43">{
            <expr_stmt><expr><name pos:line="43" pos:column="13">have_port<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <literal type="boolean" pos:line="43" pos:column="25">true<pos:position pos:line="43" pos:column="29"/></literal></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></then> <elseif pos:line="44" pos:column="11">else <if pos:line="44" pos:column="16">if <condition pos:line="44" pos:column="19">(<expr><operator pos:line="44" pos:column="20">(<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="21">e<pos:position pos:line="44" pos:column="22"/></name> <operator pos:line="44" pos:column="23">=<pos:position pos:line="44" pos:column="24"/></operator> <call><name pos:line="44" pos:column="25">strchr<pos:position pos:line="44" pos:column="31"/></name><argument_list pos:line="44" pos:column="31">(<argument><expr><name pos:line="44" pos:column="32">t<pos:position pos:line="44" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="44" pos:column="35">'/'<pos:position pos:line="44" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="39"/></argument_list></call><operator pos:line="44" pos:column="39">)<pos:position pos:line="44" pos:column="40"/></operator> <operator pos:line="44" pos:column="41">!=<pos:position pos:line="44" pos:column="43"/></operator> <name pos:line="44" pos:column="44">NULL<pos:position pos:line="44" pos:column="48"/></name></expr>)<pos:position pos:line="44" pos:column="49"/></condition><then pos:line="44" pos:column="49"> <block pos:line="44" pos:column="50">{
            <expr_stmt><expr><name pos:line="45" pos:column="13">have_port<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">=<pos:position pos:line="45" pos:column="24"/></operator> <literal type="boolean" pos:line="45" pos:column="25">false<pos:position pos:line="45" pos:column="30"/></literal></expr>;<pos:position pos:line="45" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if></elseif> <else pos:line="46" pos:column="11">else <block pos:line="46" pos:column="16">{
            <return pos:line="47" pos:column="13">return <expr><literal type="boolean" pos:line="47" pos:column="20">false<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></return>
        }<pos:position pos:line="48" pos:column="10"/></block></else></if>
    }<pos:position pos:line="49" pos:column="6"/></block></then> <else pos:line="49" pos:column="7">else <block pos:line="49" pos:column="12">{
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">(<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">e<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">=<pos:position pos:line="50" pos:column="17"/></operator> <call><name pos:line="50" pos:column="18">strchr<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">s<pos:position pos:line="50" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="50" pos:column="28">':'<pos:position pos:line="50" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call><operator pos:line="50" pos:column="32">)<pos:position pos:line="50" pos:column="33"/></operator> <operator pos:line="50" pos:column="34">!=<pos:position pos:line="50" pos:column="36"/></operator> <name pos:line="50" pos:column="37">NULL<pos:position pos:line="50" pos:column="41"/></name></expr>)<pos:position pos:line="50" pos:column="42"/></condition><then pos:line="50" pos:column="42"> <block pos:line="50" pos:column="43">{
            <expr_stmt><expr><name pos:line="51" pos:column="13">have_port<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <literal type="boolean" pos:line="51" pos:column="25">true<pos:position pos:line="51" pos:column="29"/></literal></expr>;<pos:position pos:line="51" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="52" pos:column="10"/></block></then> <elseif pos:line="52" pos:column="11">else <if pos:line="52" pos:column="16">if <condition pos:line="52" pos:column="19">(<expr><operator pos:line="52" pos:column="20">(<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="21">e<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <call><name pos:line="52" pos:column="25">strchr<pos:position pos:line="52" pos:column="31"/></name><argument_list pos:line="52" pos:column="31">(<argument><expr><name pos:line="52" pos:column="32">s<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="52" pos:column="35">'/'<pos:position pos:line="52" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></call><operator pos:line="52" pos:column="39">)<pos:position pos:line="52" pos:column="40"/></operator> <operator pos:line="52" pos:column="41">!=<pos:position pos:line="52" pos:column="43"/></operator> <name pos:line="52" pos:column="44">NULL<pos:position pos:line="52" pos:column="48"/></name></expr>)<pos:position pos:line="52" pos:column="49"/></condition><then pos:line="52" pos:column="49"> <block pos:line="52" pos:column="50">{
            <expr_stmt><expr><name pos:line="53" pos:column="13">have_port<pos:position pos:line="53" pos:column="22"/></name> <operator pos:line="53" pos:column="23">=<pos:position pos:line="53" pos:column="24"/></operator> <literal type="boolean" pos:line="53" pos:column="25">false<pos:position pos:line="53" pos:column="30"/></literal></expr>;<pos:position pos:line="53" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></then></if></elseif> <else pos:line="54" pos:column="11">else <block pos:line="54" pos:column="16">{
            <return pos:line="55" pos:column="13">return <expr><literal type="boolean" pos:line="55" pos:column="20">false<pos:position pos:line="55" pos:column="25"/></literal></expr>;<pos:position pos:line="55" pos:column="26"/></return>
        }<pos:position pos:line="56" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="57" pos:column="9">len<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">=<pos:position pos:line="57" pos:column="14"/></operator> <name pos:line="57" pos:column="15">e<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">-<pos:position pos:line="57" pos:column="18"/></operator> <name pos:line="57" pos:column="19">s<pos:position pos:line="57" pos:column="20"/></name></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="60" pos:column="5">host<pos:position pos:line="60" pos:column="9"/></name><operator pos:line="60" pos:column="9">.<pos:position pos:line="60" pos:column="10"/></operator><name pos:line="60" pos:column="10">limitInit<pos:position pos:line="60" pos:column="19"/></name></name><argument_list pos:line="60" pos:column="19">(<argument><expr><name pos:line="60" pos:column="20">s<pos:position pos:line="60" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="23">len<pos:position pos:line="60" pos:column="26"/></name></expr></argument>)<pos:position pos:line="60" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="61" pos:column="5">s<pos:position pos:line="61" pos:column="6"/></name> <operator pos:line="61" pos:column="7">=<pos:position pos:line="61" pos:column="8"/></operator> <name pos:line="61" pos:column="9">e<pos:position pos:line="61" pos:column="10"/></name></expr>;<pos:position pos:line="61" pos:column="11"/></expr_stmt>

    <expr_stmt><expr><name pos:line="63" pos:column="5">port<pos:position pos:line="63" pos:column="9"/></name> <operator pos:line="63" pos:column="10">=<pos:position pos:line="63" pos:column="11"/></operator> <operator pos:line="63" pos:column="12">-<pos:position pos:line="63" pos:column="13"/></operator><literal type="number" pos:line="63" pos:column="13">1<pos:position pos:line="63" pos:column="14"/></literal></expr>;<pos:position pos:line="63" pos:column="15"/></expr_stmt>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">have_port<pos:position pos:line="64" pos:column="18"/></name></expr>)<pos:position pos:line="64" pos:column="19"/></condition><then pos:line="64" pos:column="19"> <block pos:line="64" pos:column="20">{
        <expr_stmt><expr><name pos:line="65" pos:column="9">s<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">++<pos:position pos:line="65" pos:column="12"/></operator></expr>;<pos:position pos:line="65" pos:column="13"/></expr_stmt>

        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><operator pos:line="67" pos:column="13">(<pos:position pos:line="67" pos:column="14"/></operator><name pos:line="67" pos:column="14">e<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <call><name pos:line="67" pos:column="18">strchr<pos:position pos:line="67" pos:column="24"/></name><argument_list pos:line="67" pos:column="24">(<argument><expr><name pos:line="67" pos:column="25">s<pos:position pos:line="67" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="67" pos:column="28">'/'<pos:position pos:line="67" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="32"/></argument_list></call><operator pos:line="67" pos:column="32">)<pos:position pos:line="67" pos:column="33"/></operator> <operator pos:line="67" pos:column="34">!=<pos:position pos:line="67" pos:column="36"/></operator> <name pos:line="67" pos:column="37">NULL<pos:position pos:line="67" pos:column="41"/></name></expr>)<pos:position pos:line="67" pos:column="42"/></condition><then pos:line="67" pos:column="42"> <block pos:line="67" pos:column="43">{
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">char<pos:position pos:line="68" pos:column="17"/></name> <modifier pos:line="68" pos:column="18">*<pos:position pos:line="68" pos:column="19"/></modifier></type><name pos:line="68" pos:column="19">t<pos:position pos:line="68" pos:column="20"/></name></decl>;<pos:position pos:line="68" pos:column="21"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="69" pos:column="13">const<pos:position pos:line="69" pos:column="18"/></specifier> <name pos:line="69" pos:column="19">unsigned<pos:position pos:line="69" pos:column="27"/></name> <name pos:line="69" pos:column="28">long<pos:position pos:line="69" pos:column="32"/></name></type> <name pos:line="69" pos:column="33">p<pos:position pos:line="69" pos:column="34"/></name> <init pos:line="69" pos:column="35">= <expr><call><name pos:line="69" pos:column="37">strtoul<pos:position pos:line="69" pos:column="44"/></name><argument_list pos:line="69" pos:column="44">(<argument><expr><name pos:line="69" pos:column="45">s<pos:position pos:line="69" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="48">&amp;<pos:position pos:line="69" pos:column="53"/></operator><name pos:line="69" pos:column="49">t<pos:position pos:line="69" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="52">0<pos:position pos:line="69" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="69" pos:column="55"/></decl_stmt>

            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><name pos:line="71" pos:column="17">p<pos:position pos:line="71" pos:column="18"/></name> <operator pos:line="71" pos:column="19">&gt;<pos:position pos:line="71" pos:column="23"/></operator> <literal type="number" pos:line="71" pos:column="21">65535<pos:position pos:line="71" pos:column="26"/></literal></expr>)<pos:position pos:line="71" pos:column="27"/></condition><then pos:line="71" pos:column="27"> <comment type="line" pos:line="71" pos:column="28">// port value is too high</comment>
                <block type="pseudo"><return pos:line="72" pos:column="17">return <expr><literal type="boolean" pos:line="72" pos:column="24">false<pos:position pos:line="72" pos:column="29"/></literal></expr>;<pos:position pos:line="72" pos:column="30"/></return></block></then></if>

            <expr_stmt><expr><name pos:line="74" pos:column="13">port<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">=<pos:position pos:line="74" pos:column="19"/></operator> <cast type="static" pos:line="74" pos:column="20">static_cast<argument_list type="generic" pos:line="74" pos:column="31">&lt;<argument><expr><name pos:line="74" pos:column="32">int<pos:position pos:line="74" pos:column="35"/></name></expr></argument>&gt;<pos:position pos:line="74" pos:column="39"/></argument_list><argument_list pos:line="74" pos:column="36">(<argument><expr><name pos:line="74" pos:column="37">p<pos:position pos:line="74" pos:column="38"/></name></expr></argument>)<pos:position pos:line="74" pos:column="39"/></argument_list></cast></expr>;<pos:position pos:line="74" pos:column="40"/></expr_stmt>

            <if pos:line="76" pos:column="13">if <condition pos:line="76" pos:column="16">(<expr><name pos:line="76" pos:column="17">t<pos:position pos:line="76" pos:column="18"/></name> <operator pos:line="76" pos:column="19">!=<pos:position pos:line="76" pos:column="21"/></operator> <name pos:line="76" pos:column="22">e<pos:position pos:line="76" pos:column="23"/></name></expr>)<pos:position pos:line="76" pos:column="24"/></condition><then pos:line="76" pos:column="24"> <comment type="line" pos:line="76" pos:column="25">// extras after the port</comment>
                <block type="pseudo"><return pos:line="77" pos:column="17">return <expr><literal type="boolean" pos:line="77" pos:column="24">false<pos:position pos:line="77" pos:column="29"/></literal></expr>;<pos:position pos:line="77" pos:column="30"/></return></block></then></if>

            <expr_stmt><expr><name pos:line="79" pos:column="13">s<pos:position pos:line="79" pos:column="14"/></name> <operator pos:line="79" pos:column="15">=<pos:position pos:line="79" pos:column="16"/></operator> <name pos:line="79" pos:column="17">e<pos:position pos:line="79" pos:column="18"/></name></expr>;<pos:position pos:line="79" pos:column="19"/></expr_stmt>

            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><name><name pos:line="81" pos:column="17">s<pos:position pos:line="81" pos:column="18"/></name><index pos:line="81" pos:column="18">[<expr><literal type="number" pos:line="81" pos:column="19">0<pos:position pos:line="81" pos:column="20"/></literal></expr>]<pos:position pos:line="81" pos:column="21"/></index></name> <operator pos:line="81" pos:column="22">!=<pos:position pos:line="81" pos:column="24"/></operator> <literal type="char" pos:line="81" pos:column="25">'/'<pos:position pos:line="81" pos:column="28"/></literal></expr>)<pos:position pos:line="81" pos:column="29"/></condition><then pos:line="81" pos:column="29">
                <block type="pseudo"><return pos:line="82" pos:column="17">return <expr><literal type="boolean" pos:line="82" pos:column="24">false<pos:position pos:line="82" pos:column="29"/></literal></expr>;<pos:position pos:line="82" pos:column="30"/></return></block></then></if>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="86" pos:column="5">// if no port, the caller may use service_configConfigs or supply the default if neeeded</comment>

    <expr_stmt><expr><name pos:line="88" pos:column="5">s<pos:position pos:line="88" pos:column="6"/></name><operator pos:line="88" pos:column="6">++<pos:position pos:line="88" pos:column="8"/></operator></expr>;<pos:position pos:line="88" pos:column="9"/></expr_stmt>
    <expr_stmt><expr><name pos:line="89" pos:column="5">e<pos:position pos:line="89" pos:column="6"/></name> <operator pos:line="89" pos:column="7">=<pos:position pos:line="89" pos:column="8"/></operator> <call><name pos:line="89" pos:column="9">strchr<pos:position pos:line="89" pos:column="15"/></name><argument_list pos:line="89" pos:column="15">(<argument><expr><name pos:line="89" pos:column="16">s<pos:position pos:line="89" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="89" pos:column="19">'\0'<pos:position pos:line="89" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="90" pos:column="5">len<pos:position pos:line="90" pos:column="8"/></name> <operator pos:line="90" pos:column="9">=<pos:position pos:line="90" pos:column="10"/></operator> <name pos:line="90" pos:column="11">e<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">-<pos:position pos:line="90" pos:column="14"/></operator> <name pos:line="90" pos:column="15">s<pos:position pos:line="90" pos:column="16"/></name></expr>;<pos:position pos:line="90" pos:column="17"/></expr_stmt>

    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name pos:line="92" pos:column="9">len<pos:position pos:line="92" pos:column="12"/></name> <operator pos:line="92" pos:column="13">&gt;<pos:position pos:line="92" pos:column="17"/></operator> <literal type="number" pos:line="92" pos:column="15">1024<pos:position pos:line="92" pos:column="19"/></literal></expr>)<pos:position pos:line="92" pos:column="20"/></condition><then pos:line="92" pos:column="20"> <block pos:line="92" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">debugs<pos:position pos:line="93" pos:column="15"/></name><argument_list pos:line="93" pos:column="15">(<argument><expr><literal type="number" pos:line="93" pos:column="16">3<pos:position pos:line="93" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="19">0<pos:position pos:line="93" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="22">HERE<pos:position pos:line="93" pos:column="26"/></name> <operator pos:line="93" pos:column="27">&lt;&lt;<pos:position pos:line="93" pos:column="35"/></operator> <name pos:line="93" pos:column="30">cfg_filename<pos:position pos:line="93" pos:column="42"/></name> <operator pos:line="93" pos:column="43">&lt;&lt;<pos:position pos:line="93" pos:column="51"/></operator> <literal type="char" pos:line="93" pos:column="46">':'<pos:position pos:line="93" pos:column="49"/></literal> <operator pos:line="93" pos:column="50">&lt;&lt;<pos:position pos:line="93" pos:column="58"/></operator> <name pos:line="93" pos:column="53">config_lineno<pos:position pos:line="93" pos:column="66"/></name> <operator pos:line="93" pos:column="67">&lt;&lt;<pos:position pos:line="93" pos:column="75"/></operator> <literal type="string" pos:line="93" pos:column="70">": "<pos:position pos:line="93" pos:column="74"/></literal> <operator pos:line="93" pos:column="75">&lt;&lt;<pos:position pos:line="93" pos:column="83"/></operator>
               <literal type="string" pos:line="94" pos:column="16">"long resource name (&gt;1024), probably wrong"<pos:position pos:line="94" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="95" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="97" pos:column="5">resource<pos:position pos:line="97" pos:column="13"/></name><operator pos:line="97" pos:column="13">.<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="14">limitInit<pos:position pos:line="97" pos:column="23"/></name></name><argument_list pos:line="97" pos:column="23">(<argument><expr><name pos:line="97" pos:column="24">s<pos:position pos:line="97" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="27">len<pos:position pos:line="97" pos:column="30"/></name> <operator pos:line="97" pos:column="31">+<pos:position pos:line="97" pos:column="32"/></operator> <literal type="number" pos:line="97" pos:column="33">1<pos:position pos:line="97" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="36"/></expr_stmt>
    <return pos:line="98" pos:column="5">return <expr><literal type="boolean" pos:line="98" pos:column="12">true<pos:position pos:line="98" pos:column="16"/></literal></expr>;<pos:position pos:line="98" pos:column="17"/></return>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
