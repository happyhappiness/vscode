<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_584_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_reset_close<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier> <name><name pos:line="2" pos:column="24">Comm<pos:position pos:line="2" pos:column="28"/></name><operator pos:line="2" pos:column="28">::<pos:position pos:line="2" pos:column="30"/></operator><name pos:line="2" pos:column="30">ConnectionPointer<pos:position pos:line="2" pos:column="47"/></name></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">conn<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">linger<pos:position pos:line="4" pos:column="18"/></name></name></type> <name pos:line="4" pos:column="19">L<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="5" pos:column="5">L<pos:position pos:line="5" pos:column="6"/></name><operator pos:line="5" pos:column="6">.<pos:position pos:line="5" pos:column="7"/></operator><name pos:line="5" pos:column="7">l_onoff<pos:position pos:line="5" pos:column="14"/></name></name> <operator pos:line="5" pos:column="15">=<pos:position pos:line="5" pos:column="16"/></operator> <literal type="number" pos:line="5" pos:column="17">1<pos:position pos:line="5" pos:column="18"/></literal></expr>;<pos:position pos:line="5" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">L<pos:position pos:line="6" pos:column="6"/></name><operator pos:line="6" pos:column="6">.<pos:position pos:line="6" pos:column="7"/></operator><name pos:line="6" pos:column="7">l_linger<pos:position pos:line="6" pos:column="15"/></name></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <literal type="number" pos:line="6" pos:column="18">0<pos:position pos:line="6" pos:column="19"/></literal></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">setsockopt<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name><name pos:line="8" pos:column="20">conn<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">fd<pos:position pos:line="8" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="30">SOL_SOCKET<pos:position pos:line="8" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="42">SO_LINGER<pos:position pos:line="8" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="53">(<pos:position pos:line="8" pos:column="54"/></operator><name pos:line="8" pos:column="54">char<pos:position pos:line="8" pos:column="58"/></name> <operator pos:line="8" pos:column="59">*<pos:position pos:line="8" pos:column="60"/></operator><operator pos:line="8" pos:column="60">)<pos:position pos:line="8" pos:column="61"/></operator> <operator pos:line="8" pos:column="62">&amp;<pos:position pos:line="8" pos:column="67"/></operator><name pos:line="8" pos:column="63">L<pos:position pos:line="8" pos:column="64"/></name></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="66">sizeof<argument_list pos:line="8" pos:column="72">(<argument><expr><name pos:line="8" pos:column="73">L<pos:position pos:line="8" pos:column="74"/></name></expr></argument>)<pos:position pos:line="8" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="76"/></argument_list></call> <operator pos:line="8" pos:column="77">&lt;<pos:position pos:line="8" pos:column="81"/></operator> <literal type="number" pos:line="8" pos:column="79">0<pos:position pos:line="8" pos:column="80"/></literal></expr>)<pos:position pos:line="8" pos:column="81"/></condition><then pos:line="8" pos:column="81"> <block pos:line="8" pos:column="82">{
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">xerrno<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><name pos:line="9" pos:column="22">errno<pos:position pos:line="9" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">50<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="20">DBG_CRITICAL<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="34">"ERROR: Closing "<pos:position pos:line="10" pos:column="51"/></literal> <operator pos:line="10" pos:column="52">&lt;&lt;<pos:position pos:line="10" pos:column="60"/></operator> <name pos:line="10" pos:column="55">conn<pos:position pos:line="10" pos:column="59"/></name> <operator pos:line="10" pos:column="60">&lt;&lt;<pos:position pos:line="10" pos:column="68"/></operator> <literal type="string" pos:line="10" pos:column="63">" with TCP RST: "<pos:position pos:line="10" pos:column="80"/></literal> <operator pos:line="10" pos:column="81">&lt;&lt;<pos:position pos:line="10" pos:column="89"/></operator> <call><name pos:line="10" pos:column="84">xstrerr<pos:position pos:line="10" pos:column="91"/></name><argument_list pos:line="10" pos:column="91">(<argument><expr><name pos:line="10" pos:column="92">xerrno<pos:position pos:line="10" pos:column="98"/></name></expr></argument>)<pos:position pos:line="10" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="101"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="12" pos:column="5">conn<pos:position pos:line="12" pos:column="9"/></name><operator pos:line="12" pos:column="9">-&gt;<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="11">close<pos:position pos:line="12" pos:column="16"/></name></name><argument_list pos:line="12" pos:column="16">()<pos:position pos:line="12" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
