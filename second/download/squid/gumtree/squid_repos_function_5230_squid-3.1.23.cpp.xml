<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5230_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">AIODiskFile<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">close<pos:position pos:line="2" pos:column="19"/></name></name> <parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><operator pos:line="4" pos:column="13">!<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">closed<pos:position pos:line="4" pos:column="20"/></name></expr></argument>)<pos:position pos:line="4" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="22"/></expr_stmt>
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">_SQUID_WIN32_<pos:position pos:line="5" pos:column="21"/></name></cpp:ifdef>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">aio_close<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">fd<pos:position pos:line="7" pos:column="17"/></name></expr></argument>)<pos:position pos:line="7" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="19"/></expr_stmt>
<cpp:else pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">else<pos:position pos:line="8" pos:column="6"/></cpp:directive></cpp:else>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">file_close<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">fd<pos:position pos:line="10" pos:column="18"/></name></expr></argument>)<pos:position pos:line="10" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="13" pos:column="5">fd<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <operator pos:line="13" pos:column="10">-<pos:position pos:line="13" pos:column="11"/></operator><literal type="number" pos:line="13" pos:column="11">1<pos:position pos:line="13" pos:column="12"/></literal></expr>;<pos:position pos:line="13" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">closed<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <literal type="boolean" pos:line="14" pos:column="14">true<pos:position pos:line="14" pos:column="18"/></literal></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">ioRequestor<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">!=<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">NULL<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">ioRequestor<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">closeCompleted<pos:position pos:line="16" pos:column="32"/></name></name><argument_list pos:line="16" pos:column="32">()<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
