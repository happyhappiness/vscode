<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5677_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IpcIoFile<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">canWait<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">()<pos:position pos:line="2" pos:column="21"/></parameter_list> <specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name><name pos:line="4" pos:column="10">config<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">.<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">ioTimeout<pos:position pos:line="4" pos:column="26"/></name></name></expr>)<pos:position pos:line="4" pos:column="27"/></condition><then pos:line="4" pos:column="27">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">true<pos:position pos:line="5" pos:column="20"/></literal></expr>;<pos:position pos:line="5" pos:column="21"/></return></block></then></if> <comment type="line" pos:line="5" pos:column="22">// no timeout specified</comment>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">IpcIoMsg<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">oldestIo<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name><name pos:line="8" pos:column="10">queue<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">findOldest<pos:position pos:line="8" pos:column="27"/></name></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name pos:line="8" pos:column="28">diskId<pos:position pos:line="8" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="36">oldestIo<pos:position pos:line="8" pos:column="44"/></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call> <operator pos:line="8" pos:column="46">||<pos:position pos:line="8" pos:column="48"/></operator> <name><name pos:line="8" pos:column="49">oldestIo<pos:position pos:line="8" pos:column="57"/></name><operator pos:line="8" pos:column="57">.<pos:position pos:line="8" pos:column="58"/></operator><name pos:line="8" pos:column="58">start<pos:position pos:line="8" pos:column="63"/></name><operator pos:line="8" pos:column="63">.<pos:position pos:line="8" pos:column="64"/></operator><name pos:line="8" pos:column="64">tv_sec<pos:position pos:line="8" pos:column="70"/></name></name> <operator pos:line="8" pos:column="71">&lt;=<pos:position pos:line="8" pos:column="76"/></operator> <literal type="number" pos:line="8" pos:column="74">0<pos:position pos:line="8" pos:column="75"/></literal></expr>)<pos:position pos:line="8" pos:column="76"/></condition><then pos:line="8" pos:column="76">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">true<pos:position pos:line="9" pos:column="20"/></literal></expr>;<pos:position pos:line="9" pos:column="21"/></return></block></then></if> <comment type="line" pos:line="9" pos:column="22">// we cannot estimate expected wait time; assume it is OK</comment>

    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">int<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">oldestWait<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><call><name pos:line="11" pos:column="28">tvSubMsec<pos:position pos:line="11" pos:column="37"/></name><argument_list pos:line="11" pos:column="37">(<argument><expr><name><name pos:line="11" pos:column="38">oldestIo<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">.<pos:position pos:line="11" pos:column="47"/></operator><name pos:line="11" pos:column="47">start<pos:position pos:line="11" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="54">current_time<pos:position pos:line="11" pos:column="66"/></name></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="68"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">rateWait<pos:position pos:line="13" pos:column="17"/></name> <init pos:line="13" pos:column="18">= <expr><operator pos:line="13" pos:column="20">-<pos:position pos:line="13" pos:column="21"/></operator><literal type="number" pos:line="13" pos:column="21">1<pos:position pos:line="13" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="23"/></decl_stmt> <comment type="line" pos:line="13" pos:column="24">// time in millisecons</comment>
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name><name pos:line="14" pos:column="11">Ipc<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">::<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">QueueReader<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">::<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">Rate<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">::<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="35">Value<pos:position pos:line="14" pos:column="40"/></name></name></type> <name pos:line="14" pos:column="41">ioRate<pos:position pos:line="14" pos:column="47"/></name> <init pos:line="14" pos:column="48">= <expr><call><name><name pos:line="14" pos:column="50">queue<pos:position pos:line="14" pos:column="55"/></name><operator pos:line="14" pos:column="55">-&gt;<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="57">rateLimit<pos:position pos:line="14" pos:column="66"/></name></name><argument_list pos:line="14" pos:column="66">(<argument><expr><name pos:line="14" pos:column="67">diskId<pos:position pos:line="14" pos:column="73"/></name></expr></argument>)<pos:position pos:line="14" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="75"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">ioRate<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">&gt;<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20"> <block pos:line="15" pos:column="21">{
        <comment type="line" pos:line="16" pos:column="9">// if there are N requests pending, the new one will wait at</comment>
        <comment type="line" pos:line="17" pos:column="9">// least N/max-swap-rate seconds</comment>
        <expr_stmt><expr><name pos:line="18" pos:column="9">rateWait<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <cast type="static" pos:line="18" pos:column="20">static_cast<argument_list type="generic" pos:line="18" pos:column="31">&lt;<argument><expr><name pos:line="18" pos:column="32">int<pos:position pos:line="18" pos:column="35"/></name></expr></argument>&gt;<pos:position pos:line="18" pos:column="39"/></argument_list><argument_list pos:line="18" pos:column="36">(<argument><expr><literal type="number" pos:line="18" pos:column="37">1e3<pos:position pos:line="18" pos:column="40"/></literal> <operator pos:line="18" pos:column="41">*<pos:position pos:line="18" pos:column="42"/></operator> <call><name><name pos:line="18" pos:column="43">queue<pos:position pos:line="18" pos:column="48"/></name><operator pos:line="18" pos:column="48">-&gt;<pos:position pos:line="18" pos:column="53"/></operator><name pos:line="18" pos:column="50">outSize<pos:position pos:line="18" pos:column="57"/></name></name><argument_list pos:line="18" pos:column="57">(<argument><expr><name pos:line="18" pos:column="58">diskId<pos:position pos:line="18" pos:column="64"/></name></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call> <operator pos:line="18" pos:column="66">/<pos:position pos:line="18" pos:column="67"/></operator> <name pos:line="18" pos:column="68">ioRate<pos:position pos:line="18" pos:column="74"/></name></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></cast></expr>;<pos:position pos:line="18" pos:column="76"/></expr_stmt>
        <comment type="line" pos:line="19" pos:column="9">// adjust N/max-swap-rate value based on the queue "balance"</comment>
        <comment type="line" pos:line="20" pos:column="9">// member, in case we have been borrowing time against future</comment>
        <comment type="line" pos:line="21" pos:column="9">// I/O already</comment>
        <expr_stmt><expr><name pos:line="22" pos:column="9">rateWait<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">+=<pos:position pos:line="22" pos:column="20"/></operator> <call><name><name pos:line="22" pos:column="21">queue<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">-&gt;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="28">balance<pos:position pos:line="22" pos:column="35"/></name></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">diskId<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="25" pos:column="5">const<pos:position pos:line="25" pos:column="10"/></specifier> <name pos:line="25" pos:column="11">int<pos:position pos:line="25" pos:column="14"/></name></type> <name pos:line="25" pos:column="15">expectedWait<pos:position pos:line="25" pos:column="27"/></name> <init pos:line="25" pos:column="28">= <expr><call><name pos:line="25" pos:column="30">max<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">oldestWait<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">rateWait<pos:position pos:line="25" pos:column="54"/></name></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="56"/></decl_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">expectedWait<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">&lt;<pos:position pos:line="26" pos:column="26"/></operator> <literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal> <operator pos:line="26" pos:column="26">||<pos:position pos:line="26" pos:column="28"/></operator>
            <cast type="static" pos:line="27" pos:column="13">static_cast<argument_list type="generic" pos:line="27" pos:column="24">&lt;<argument><expr><name pos:line="27" pos:column="25">time_msec_t<pos:position pos:line="27" pos:column="36"/></name></expr></argument>&gt;<pos:position pos:line="27" pos:column="40"/></argument_list><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">expectedWait<pos:position pos:line="27" pos:column="50"/></name></expr></argument>)<pos:position pos:line="27" pos:column="51"/></argument_list></cast> <operator pos:line="27" pos:column="52">&lt;<pos:position pos:line="27" pos:column="56"/></operator> <name><name pos:line="27" pos:column="54">config<pos:position pos:line="27" pos:column="60"/></name><operator pos:line="27" pos:column="60">.<pos:position pos:line="27" pos:column="61"/></operator><name pos:line="27" pos:column="61">ioTimeout<pos:position pos:line="27" pos:column="70"/></name></name></expr>)<pos:position pos:line="27" pos:column="71"/></condition><then pos:line="27" pos:column="71">
        <block type="pseudo"><return pos:line="28" pos:column="9">return <expr><literal type="boolean" pos:line="28" pos:column="16">true<pos:position pos:line="28" pos:column="20"/></literal></expr>;<pos:position pos:line="28" pos:column="21"/></return></block></then></if> <comment type="line" pos:line="28" pos:column="22">// expected wait time is acceptible</comment>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">debugs<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><literal type="number" pos:line="30" pos:column="12">47<pos:position pos:line="30" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="30" pos:column="15">2<pos:position pos:line="30" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="18">HERE<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">&lt;&lt;<pos:position pos:line="30" pos:column="31"/></operator> <literal type="string" pos:line="30" pos:column="26">"cannot wait: "<pos:position pos:line="30" pos:column="41"/></literal> <operator pos:line="30" pos:column="42">&lt;&lt;<pos:position pos:line="30" pos:column="50"/></operator> <name pos:line="30" pos:column="45">expectedWait<pos:position pos:line="30" pos:column="57"/></name> <operator pos:line="30" pos:column="58">&lt;&lt;<pos:position pos:line="30" pos:column="66"/></operator>
           <literal type="string" pos:line="31" pos:column="12">" oldest: "<pos:position pos:line="31" pos:column="23"/></literal> <operator pos:line="31" pos:column="24">&lt;&lt;<pos:position pos:line="31" pos:column="32"/></operator> <call><name pos:line="31" pos:column="27">SipcIo<pos:position pos:line="31" pos:column="33"/></name><argument_list pos:line="31" pos:column="33">(<argument><expr><name pos:line="31" pos:column="34">KidIdentifier<pos:position pos:line="31" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="49">oldestIo<pos:position pos:line="31" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="59">diskId<pos:position pos:line="31" pos:column="65"/></name></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="68"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><literal type="boolean" pos:line="32" pos:column="12">false<pos:position pos:line="32" pos:column="17"/></literal></expr>;<pos:position pos:line="32" pos:column="18"/></return> <comment type="line" pos:line="32" pos:column="19">// do not want to wait that long</comment>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
