<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_534_squid-3.1.23.cpp" pos:tabs="8"><decl_stmt><decl><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">read_objid<pos:position pos:line="2" pos:column="11"/></name><argument_list pos:line="2" pos:column="11">(<argument><expr><name pos:line="2" pos:column="12">input<pos:position pos:line="2" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="19">output<pos:position pos:line="2" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="27">out_len<pos:position pos:line="2" pos:column="34"/></name></expr></argument>)<pos:position pos:line="2" pos:column="35"/></argument_list>
<name pos:line="3" pos:column="1">char<pos:position pos:line="3" pos:column="5"/></name> <modifier pos:line="3" pos:column="6">*<pos:position pos:line="3" pos:column="7"/></modifier><name pos:line="3" pos:column="7">input<pos:position pos:line="3" pos:column="12"/></name></decl>;<pos:position pos:line="3" pos:column="13"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="4" pos:column="1">oid<pos:position pos:line="4" pos:column="4"/></name> <modifier pos:line="4" pos:column="5">*<pos:position pos:line="4" pos:column="6"/></modifier></type><name pos:line="4" pos:column="6">output<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">int<pos:position pos:line="5" pos:column="4"/></name> <modifier pos:line="5" pos:column="5">*<pos:position pos:line="5" pos:column="6"/></modifier></type><name pos:line="5" pos:column="6">out_len<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>		<comment type="block" pos:line="5" pos:column="25">/* number of subid's in "output" */</comment>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">snmp_mib_tree<pos:position pos:line="7" pos:column="25"/></name></name> <modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type><name pos:line="7" pos:column="27">root<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><name pos:line="7" pos:column="34">Mib<pos:position pos:line="7" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">oid<pos:position pos:line="8" pos:column="8"/></name> <modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type><name pos:line="8" pos:column="10">op<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name pos:line="8" pos:column="15">output<pos:position pos:line="8" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">i<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">input<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">==<pos:position pos:line="11" pos:column="18"/></operator> <literal type="char" pos:line="11" pos:column="19">'.'<pos:position pos:line="11" pos:column="22"/></literal></expr>)<pos:position pos:line="11" pos:column="23"/></condition><then pos:line="11" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="9">input<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">++<pos:position pos:line="12" pos:column="16"/></operator></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt></block></then>
    <else pos:line="13" pos:column="5">else <block pos:line="13" pos:column="10">{
        <expr_stmt><expr><name pos:line="14" pos:column="9">root<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <call><name pos:line="14" pos:column="16">find_rfc1066_mib<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">root<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="39"/></expr_stmt>
        <for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init><expr><name pos:line="15" pos:column="14">i<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></init> <condition><expr><name pos:line="15" pos:column="21">i<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&lt;<pos:position pos:line="15" pos:column="27"/></operator> <sizeof pos:line="15" pos:column="25">sizeof<argument_list pos:line="15" pos:column="31">(<argument><expr><name pos:line="15" pos:column="32">RFC1066_MIB<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></sizeof> <operator pos:line="15" pos:column="45">/<pos:position pos:line="15" pos:column="46"/></operator> <sizeof pos:line="15" pos:column="47">sizeof<argument_list pos:line="15" pos:column="53">(<argument><expr><name pos:line="15" pos:column="54">oid<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></sizeof></expr>;<pos:position pos:line="15" pos:column="59"/></condition> <incr><expr><name pos:line="15" pos:column="60">i<pos:position pos:line="15" pos:column="61"/></name><operator pos:line="15" pos:column="61">++<pos:position pos:line="15" pos:column="63"/></operator></expr></incr>)<pos:position pos:line="15" pos:column="64"/></control> <block pos:line="15" pos:column="65">{
            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><operator pos:line="16" pos:column="17">(<pos:position pos:line="16" pos:column="18"/></operator><operator pos:line="16" pos:column="18">*<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">out_len<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">)<pos:position pos:line="16" pos:column="27"/></operator><operator pos:line="16" pos:column="27">--<pos:position pos:line="16" pos:column="29"/></operator> <operator pos:line="16" pos:column="30">&gt;<pos:position pos:line="16" pos:column="34"/></operator> <literal type="number" pos:line="16" pos:column="32">0<pos:position pos:line="16" pos:column="33"/></literal></expr>)<pos:position pos:line="16" pos:column="34"/></condition><then pos:line="16" pos:column="34">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">output<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">++<pos:position pos:line="17" pos:column="26"/></operator> <operator pos:line="17" pos:column="27">=<pos:position pos:line="17" pos:column="28"/></operator> <name><name pos:line="17" pos:column="29">RFC1066_MIB<pos:position pos:line="17" pos:column="40"/></name><index pos:line="17" pos:column="40">[<expr><name pos:line="17" pos:column="41">i<pos:position pos:line="17" pos:column="42"/></name></expr>]<pos:position pos:line="17" pos:column="43"/></index></name></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt></block></then>
            <else pos:line="18" pos:column="13">else <block pos:line="18" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="19" pos:column="17">snmplib_debug<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><literal type="number" pos:line="19" pos:column="31">0<pos:position pos:line="19" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"object identifier too long\n"<pos:position pos:line="19" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="66"/></expr_stmt>
                <return pos:line="20" pos:column="17">return <expr><operator pos:line="20" pos:column="24">(<pos:position pos:line="20" pos:column="25"/></operator><literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal><operator pos:line="20" pos:column="26">)<pos:position pos:line="20" pos:column="27"/></operator></expr>;<pos:position pos:line="20" pos:column="28"/></return>
            }<pos:position pos:line="21" pos:column="14"/></block></else></if>
        }<pos:position pos:line="22" pos:column="10"/></block></for>
    }<pos:position pos:line="23" pos:column="6"/></block></else></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">root<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">==<pos:position pos:line="25" pos:column="16"/></operator> <name pos:line="25" pos:column="17">NULL<pos:position pos:line="25" pos:column="21"/></name></expr>)<pos:position pos:line="25" pos:column="22"/></condition><then pos:line="25" pos:column="22"> <block pos:line="25" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">snmplib_debug<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><literal type="number" pos:line="26" pos:column="23">0<pos:position pos:line="26" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="26">"Mib not initialized.\n"<pos:position pos:line="26" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="52"/></expr_stmt>
        <return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">0<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><operator pos:line="29" pos:column="10">*<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">out_len<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <call><name pos:line="29" pos:column="21">parse_subtree<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">root<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="41">input<pos:position pos:line="29" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="48">output<pos:position pos:line="29" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="56">out_len<pos:position pos:line="29" pos:column="63"/></name></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call><operator pos:line="29" pos:column="64">)<pos:position pos:line="29" pos:column="65"/></operator> <operator pos:line="29" pos:column="66">==<pos:position pos:line="29" pos:column="68"/></operator> <literal type="number" pos:line="29" pos:column="69">0<pos:position pos:line="29" pos:column="70"/></literal></expr>)<pos:position pos:line="29" pos:column="71"/></condition><then pos:line="29" pos:column="71">
        <block type="pseudo"><return pos:line="30" pos:column="9">return <expr><operator pos:line="30" pos:column="16">(<pos:position pos:line="30" pos:column="17"/></operator><literal type="number" pos:line="30" pos:column="17">0<pos:position pos:line="30" pos:column="18"/></literal><operator pos:line="30" pos:column="18">)<pos:position pos:line="30" pos:column="19"/></operator></expr>;<pos:position pos:line="30" pos:column="20"/></return></block></then></if>
    <expr_stmt><expr><operator pos:line="31" pos:column="5">*<pos:position pos:line="31" pos:column="6"/></operator><name pos:line="31" pos:column="6">out_len<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">+=<pos:position pos:line="31" pos:column="16"/></operator> <name pos:line="31" pos:column="17">output<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">-<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">op<pos:position pos:line="31" pos:column="28"/></name></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>

    <return pos:line="33" pos:column="5">return <expr><operator pos:line="33" pos:column="12">(<pos:position pos:line="33" pos:column="13"/></operator><literal type="number" pos:line="33" pos:column="13">1<pos:position pos:line="33" pos:column="14"/></literal><operator pos:line="33" pos:column="14">)<pos:position pos:line="33" pos:column="15"/></operator></expr>;<pos:position pos:line="33" pos:column="16"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></unit>
