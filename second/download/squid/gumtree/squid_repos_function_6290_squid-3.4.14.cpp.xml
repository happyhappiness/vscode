<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6290_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">StartListening<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">sock_type<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">proto<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier> <name><name pos:line="2" pos:column="53">Comm<pos:position pos:line="2" pos:column="57"/></name><operator pos:line="2" pos:column="57">::<pos:position pos:line="2" pos:column="59"/></operator><name pos:line="2" pos:column="59">ConnectionPointer<pos:position pos:line="2" pos:column="76"/></name></name> <modifier pos:line="2" pos:column="77">&amp;<pos:position pos:line="2" pos:column="82"/></modifier></type><name pos:line="2" pos:column="78">listenConn<pos:position pos:line="2" pos:column="88"/></name></decl></parameter>,
                    <parameter><decl><type><name pos:line="3" pos:column="21">FdNoteId<pos:position pos:line="3" pos:column="29"/></name></type> <name pos:line="3" pos:column="30">fdNote<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="3" pos:column="38">AsyncCall<pos:position pos:line="3" pos:column="47"/></name><operator pos:line="3" pos:column="47">::<pos:position pos:line="3" pos:column="49"/></operator><name pos:line="3" pos:column="49">Pointer<pos:position pos:line="3" pos:column="56"/></name></name> <modifier pos:line="3" pos:column="57">&amp;<pos:position pos:line="3" pos:column="62"/></modifier></type><name pos:line="3" pos:column="58">callback<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="67"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">StartListeningCb<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">cbd<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><cast type="dynamic" pos:line="5" pos:column="29">dynamic_cast<argument_list type="generic" pos:line="5" pos:column="41">&lt;<argument><expr><name pos:line="5" pos:column="42">StartListeningCb<pos:position pos:line="5" pos:column="58"/></name><operator pos:line="5" pos:column="58">*<pos:position pos:line="5" pos:column="59"/></operator></expr></argument>&gt;<pos:position pos:line="5" pos:column="63"/></argument_list><argument_list pos:line="5" pos:column="60">(<argument><expr><call><name><name pos:line="5" pos:column="61">callback<pos:position pos:line="5" pos:column="69"/></name><operator pos:line="5" pos:column="69">-&gt;<pos:position pos:line="5" pos:column="74"/></operator><name pos:line="5" pos:column="71">getDialer<pos:position pos:line="5" pos:column="80"/></name></name><argument_list pos:line="5" pos:column="80">()<pos:position pos:line="5" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="83"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="5" pos:column="84"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name pos:line="6" pos:column="10">cbd<pos:position pos:line="6" pos:column="13"/></name></expr></argument>)<pos:position pos:line="6" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">cbd<pos:position pos:line="7" pos:column="8"/></name><operator pos:line="7" pos:column="8">-&gt;<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="10">conn<pos:position pos:line="7" pos:column="14"/></name></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <name pos:line="7" pos:column="17">listenConn<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">UsingSmp<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">()<pos:position pos:line="9" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20"> <block pos:line="9" pos:column="21">{ <comment type="line" pos:line="9" pos:column="23">// if SMP is on, share</comment>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">OpenListenerParams<pos:position pos:line="10" pos:column="27"/></name></type> <name pos:line="10" pos:column="28">p<pos:position pos:line="10" pos:column="29"/></name></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">p<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">.<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">sock_type<pos:position pos:line="11" pos:column="20"/></name></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">sock_type<pos:position pos:line="11" pos:column="32"/></name></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">p<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">.<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">proto<pos:position pos:line="12" pos:column="16"/></name></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">proto<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">p<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">.<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">addr<pos:position pos:line="13" pos:column="15"/></name></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name><name pos:line="13" pos:column="18">listenConn<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">-&gt;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="30">local<pos:position pos:line="13" pos:column="35"/></name></name></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">p<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">.<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">flags<pos:position pos:line="14" pos:column="16"/></name></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <name><name pos:line="14" pos:column="19">listenConn<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">-&gt;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="31">flags<pos:position pos:line="14" pos:column="36"/></name></name></expr>;<pos:position pos:line="14" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">p<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">.<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">fdNote<pos:position pos:line="15" pos:column="17"/></name></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="20">fdNote<pos:position pos:line="15" pos:column="26"/></name></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="16" pos:column="9">Ipc<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">::<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">JoinSharedListen<pos:position pos:line="16" pos:column="30"/></name></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">p<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">callback<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return> <comment type="line" pos:line="17" pos:column="17">// wait for the call back</comment>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">enter_suid<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">()<pos:position pos:line="20" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">comm_open_listener<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">sock_type<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">proto<pos:position pos:line="21" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="42">cbd<pos:position pos:line="21" pos:column="45"/></name><operator pos:line="21" pos:column="45">-&gt;<pos:position pos:line="21" pos:column="50"/></operator><name pos:line="21" pos:column="47">conn<pos:position pos:line="21" pos:column="51"/></name></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="53">FdNote<pos:position pos:line="21" pos:column="59"/></name><argument_list pos:line="21" pos:column="59">(<argument><expr><name pos:line="21" pos:column="60">fdNote<pos:position pos:line="21" pos:column="66"/></name></expr></argument>)<pos:position pos:line="21" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">cbd<pos:position pos:line="22" pos:column="8"/></name><operator pos:line="22" pos:column="8">-&gt;<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="10">errNo<pos:position pos:line="22" pos:column="15"/></name></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <ternary><condition><expr><call><name><name pos:line="22" pos:column="18">Comm<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">::<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">IsConnOpen<pos:position pos:line="22" pos:column="34"/></name></name><argument_list pos:line="22" pos:column="34">(<argument><expr><name><name pos:line="22" pos:column="35">cbd<pos:position pos:line="22" pos:column="38"/></name><operator pos:line="22" pos:column="38">-&gt;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="40">conn<pos:position pos:line="22" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr> ?<pos:position pos:line="22" pos:column="47"/></condition><then pos:line="22" pos:column="47"> <expr><literal type="number" pos:line="22" pos:column="48">0<pos:position pos:line="22" pos:column="49"/></literal></expr> <pos:position pos:line="22" pos:column="50"/></then><else pos:line="22" pos:column="50">: <expr><name pos:line="22" pos:column="52">errno<pos:position pos:line="22" pos:column="57"/></name></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">leave_suid<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">()<pos:position pos:line="23" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="18"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">debugs<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><literal type="number" pos:line="25" pos:column="12">54<pos:position pos:line="25" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="16">3<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="19">HERE<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">&lt;&lt;<pos:position pos:line="25" pos:column="32"/></operator> <literal type="string" pos:line="25" pos:column="27">"opened listen "<pos:position pos:line="25" pos:column="43"/></literal> <operator pos:line="25" pos:column="44">&lt;&lt;<pos:position pos:line="25" pos:column="52"/></operator> <name><name pos:line="25" pos:column="47">cbd<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">-&gt;<pos:position pos:line="25" pos:column="55"/></operator><name pos:line="25" pos:column="52">conn<pos:position pos:line="25" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ScheduleCallHere<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">callback<pos:position pos:line="26" pos:column="30"/></name></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
