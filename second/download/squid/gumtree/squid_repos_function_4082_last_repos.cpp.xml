<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4082_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">acl_ip_data<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">NetworkCompare<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name pos:line="2" pos:column="29">acl_ip_data<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier> <specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <modifier pos:line="2" pos:column="49">&amp;<pos:position pos:line="2" pos:column="54"/></modifier></type> <name pos:line="2" pos:column="51">a<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">acl_ip_data<pos:position pos:line="2" pos:column="65"/></name> <modifier pos:line="2" pos:column="66">*<pos:position pos:line="2" pos:column="67"/></modifier> <specifier pos:line="2" pos:column="68">const<pos:position pos:line="2" pos:column="73"/></specifier> <modifier pos:line="2" pos:column="74">&amp;<pos:position pos:line="2" pos:column="79"/></modifier></type><name pos:line="2" pos:column="75">b<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">ret<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">bool<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">bina<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><literal type="boolean" pos:line="5" pos:column="17">true<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">ret<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">=<pos:position pos:line="6" pos:column="10"/></operator> <call><name pos:line="6" pos:column="11">aclIpAddrNetworkCompare<pos:position pos:line="6" pos:column="34"/></name><argument_list pos:line="6" pos:column="34">(<argument><expr><name pos:line="6" pos:column="35">b<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="38">a<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">ret<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">!=<pos:position pos:line="8" pos:column="15"/></operator> <literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18"> <block pos:line="8" pos:column="19">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">bina<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <literal type="boolean" pos:line="9" pos:column="16">false<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="10" pos:column="9">ret<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <call><name pos:line="10" pos:column="15">aclIpAddrNetworkCompare<pos:position pos:line="10" pos:column="38"/></name><argument_list pos:line="10" pos:column="38">(<argument><expr><name pos:line="10" pos:column="39">a<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="42">b<pos:position pos:line="10" pos:column="43"/></name></expr></argument>)<pos:position pos:line="10" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">ret<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">==<pos:position pos:line="13" pos:column="15"/></operator> <literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>)<pos:position pos:line="13" pos:column="18"/></condition><then pos:line="13" pos:column="18"> <block pos:line="13" pos:column="19">{
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name></type> <name><name pos:line="14" pos:column="14">buf_n1<pos:position pos:line="14" pos:column="20"/></name><index pos:line="14" pos:column="20">[<expr><literal type="number" pos:line="14" pos:column="21">3<pos:position pos:line="14" pos:column="22"/></literal><operator pos:line="14" pos:column="22">*<pos:position pos:line="14" pos:column="23"/></operator><operator pos:line="14" pos:column="23">(<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="24">MAX_IPSTRLEN<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">+<pos:position pos:line="14" pos:column="37"/></operator><literal type="number" pos:line="14" pos:column="37">1<pos:position pos:line="14" pos:column="38"/></literal><operator pos:line="14" pos:column="38">)<pos:position pos:line="14" pos:column="39"/></operator></expr>]<pos:position pos:line="14" pos:column="40"/></index></name></decl>;<pos:position pos:line="14" pos:column="41"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name></type> <name><name pos:line="15" pos:column="14">buf_n2<pos:position pos:line="15" pos:column="20"/></name><index pos:line="15" pos:column="20">[<expr><literal type="number" pos:line="15" pos:column="21">3<pos:position pos:line="15" pos:column="22"/></literal><operator pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></operator><operator pos:line="15" pos:column="23">(<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">MAX_IPSTRLEN<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">+<pos:position pos:line="15" pos:column="37"/></operator><literal type="number" pos:line="15" pos:column="37">1<pos:position pos:line="15" pos:column="38"/></literal><operator pos:line="15" pos:column="38">)<pos:position pos:line="15" pos:column="39"/></operator></expr>]<pos:position pos:line="15" pos:column="40"/></index></name></decl>;<pos:position pos:line="15" pos:column="41"/></decl_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">bina<pos:position pos:line="16" pos:column="17"/></name></expr>)<pos:position pos:line="16" pos:column="18"/></condition><then pos:line="16" pos:column="18"> <block pos:line="16" pos:column="19">{
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">b<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">toStr<pos:position pos:line="17" pos:column="21"/></name></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">buf_n1<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="30">3<pos:position pos:line="17" pos:column="31"/></literal><operator pos:line="17" pos:column="31">*<pos:position pos:line="17" pos:column="32"/></operator><operator pos:line="17" pos:column="32">(<pos:position pos:line="17" pos:column="33"/></operator><name pos:line="17" pos:column="33">MAX_IPSTRLEN<pos:position pos:line="17" pos:column="45"/></name><operator pos:line="17" pos:column="45">+<pos:position pos:line="17" pos:column="46"/></operator><literal type="number" pos:line="17" pos:column="46">1<pos:position pos:line="17" pos:column="47"/></literal><operator pos:line="17" pos:column="47">)<pos:position pos:line="17" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">a<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">toStr<pos:position pos:line="18" pos:column="21"/></name></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">buf_n2<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="30">3<pos:position pos:line="18" pos:column="31"/></literal><operator pos:line="18" pos:column="31">*<pos:position pos:line="18" pos:column="32"/></operator><operator pos:line="18" pos:column="32">(<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="33">MAX_IPSTRLEN<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">+<pos:position pos:line="18" pos:column="46"/></operator><literal type="number" pos:line="18" pos:column="46">1<pos:position pos:line="18" pos:column="47"/></literal><operator pos:line="18" pos:column="47">)<pos:position pos:line="18" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></then> <else pos:line="19" pos:column="11">else <block pos:line="19" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="20" pos:column="13">a<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">toStr<pos:position pos:line="20" pos:column="21"/></name></name><argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">buf_n1<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="30">3<pos:position pos:line="20" pos:column="31"/></literal><operator pos:line="20" pos:column="31">*<pos:position pos:line="20" pos:column="32"/></operator><operator pos:line="20" pos:column="32">(<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="33">MAX_IPSTRLEN<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">+<pos:position pos:line="20" pos:column="46"/></operator><literal type="number" pos:line="20" pos:column="46">1<pos:position pos:line="20" pos:column="47"/></literal><operator pos:line="20" pos:column="47">)<pos:position pos:line="20" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="21" pos:column="13">b<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">toStr<pos:position pos:line="21" pos:column="21"/></name></name><argument_list pos:line="21" pos:column="21">(<argument><expr><name pos:line="21" pos:column="22">buf_n2<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="30">3<pos:position pos:line="21" pos:column="31"/></literal><operator pos:line="21" pos:column="31">*<pos:position pos:line="21" pos:column="32"/></operator><operator pos:line="21" pos:column="32">(<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">MAX_IPSTRLEN<pos:position pos:line="21" pos:column="45"/></name><operator pos:line="21" pos:column="45">+<pos:position pos:line="21" pos:column="46"/></operator><literal type="number" pos:line="21" pos:column="46">1<pos:position pos:line="21" pos:column="47"/></literal><operator pos:line="21" pos:column="47">)<pos:position pos:line="21" pos:column="48"/></operator></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">28<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="20">DBG_CRITICAL<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="34">"WARNING: ("<pos:position pos:line="23" pos:column="46"/></literal> <operator pos:line="23" pos:column="47">&lt;&lt;<pos:position pos:line="23" pos:column="55"/></operator> <operator pos:line="23" pos:column="50">(<pos:position pos:line="23" pos:column="51"/></operator><ternary><condition><expr><name pos:line="23" pos:column="51">bina<pos:position pos:line="23" pos:column="55"/></name></expr>?<pos:position pos:line="23" pos:column="56"/></condition><then><expr><literal type="char" pos:line="23" pos:column="56">'B'<pos:position pos:line="23" pos:column="59"/></literal></expr></then><else pos:line="23" pos:column="59">:<expr><literal type="char" pos:line="23" pos:column="60">'A'<pos:position pos:line="23" pos:column="63"/></literal></expr></else></ternary><operator pos:line="23" pos:column="63">)<pos:position pos:line="23" pos:column="64"/></operator> <operator pos:line="23" pos:column="65">&lt;&lt;<pos:position pos:line="23" pos:column="73"/></operator> <literal type="string" pos:line="23" pos:column="68">") '"<pos:position pos:line="23" pos:column="73"/></literal> <operator pos:line="23" pos:column="74">&lt;&lt;<pos:position pos:line="23" pos:column="82"/></operator> <name pos:line="23" pos:column="77">buf_n1<pos:position pos:line="23" pos:column="83"/></name> <operator pos:line="23" pos:column="84">&lt;&lt;<pos:position pos:line="23" pos:column="92"/></operator> <literal type="string" pos:line="23" pos:column="87">"' is a subnetwork of ("<pos:position pos:line="23" pos:column="111"/></literal> <operator pos:line="23" pos:column="112">&lt;&lt;<pos:position pos:line="23" pos:column="120"/></operator> <operator pos:line="23" pos:column="115">(<pos:position pos:line="23" pos:column="116"/></operator><ternary><condition><expr><name pos:line="23" pos:column="116">bina<pos:position pos:line="23" pos:column="120"/></name></expr>?<pos:position pos:line="23" pos:column="121"/></condition><then><expr><literal type="char" pos:line="23" pos:column="121">'A'<pos:position pos:line="23" pos:column="124"/></literal></expr></then><else pos:line="23" pos:column="124">:<expr><literal type="char" pos:line="23" pos:column="125">'B'<pos:position pos:line="23" pos:column="128"/></literal></expr></else></ternary><operator pos:line="23" pos:column="128">)<pos:position pos:line="23" pos:column="129"/></operator> <operator pos:line="23" pos:column="130">&lt;&lt;<pos:position pos:line="23" pos:column="138"/></operator> <literal type="string" pos:line="23" pos:column="133">") '"<pos:position pos:line="23" pos:column="138"/></literal> <operator pos:line="23" pos:column="139">&lt;&lt;<pos:position pos:line="23" pos:column="147"/></operator> <name pos:line="23" pos:column="142">buf_n2<pos:position pos:line="23" pos:column="148"/></name> <operator pos:line="23" pos:column="149">&lt;&lt;<pos:position pos:line="23" pos:column="157"/></operator> <literal type="string" pos:line="23" pos:column="152">"'"<pos:position pos:line="23" pos:column="155"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="156"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="157"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">28<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="20">DBG_CRITICAL<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="34">"WARNING: because of this '"<pos:position pos:line="24" pos:column="62"/></literal> <operator pos:line="24" pos:column="63">&lt;&lt;<pos:position pos:line="24" pos:column="71"/></operator> <operator pos:line="24" pos:column="66">(<pos:position pos:line="24" pos:column="67"/></operator><ternary><condition><expr><name pos:line="24" pos:column="67">bina<pos:position pos:line="24" pos:column="71"/></name></expr>?<pos:position pos:line="24" pos:column="72"/></condition><then><expr><name pos:line="24" pos:column="72">buf_n2<pos:position pos:line="24" pos:column="78"/></name></expr></then><else pos:line="24" pos:column="78">:<expr><name pos:line="24" pos:column="79">buf_n1<pos:position pos:line="24" pos:column="85"/></name></expr></else></ternary><operator pos:line="24" pos:column="85">)<pos:position pos:line="24" pos:column="86"/></operator> <operator pos:line="24" pos:column="87">&lt;&lt;<pos:position pos:line="24" pos:column="95"/></operator> <literal type="string" pos:line="24" pos:column="90">"' is ignored to keep splay tree searching predictable"<pos:position pos:line="24" pos:column="145"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="146"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="147"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">28<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">DBG_CRITICAL<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="34">"WARNING: You should probably remove '"<pos:position pos:line="25" pos:column="73"/></literal> <operator pos:line="25" pos:column="74">&lt;&lt;<pos:position pos:line="25" pos:column="82"/></operator> <name pos:line="25" pos:column="77">buf_n1<pos:position pos:line="25" pos:column="83"/></name> <operator pos:line="25" pos:column="84">&lt;&lt;<pos:position pos:line="25" pos:column="92"/></operator> <literal type="string" pos:line="25" pos:column="87">"' from the ACL named '"<pos:position pos:line="25" pos:column="111"/></literal> <operator pos:line="25" pos:column="112">&lt;&lt;<pos:position pos:line="25" pos:column="120"/></operator> <name pos:line="25" pos:column="115">AclMatchedName<pos:position pos:line="25" pos:column="129"/></name> <operator pos:line="25" pos:column="130">&lt;&lt;<pos:position pos:line="25" pos:column="138"/></operator> <literal type="string" pos:line="25" pos:column="133">"'"<pos:position pos:line="25" pos:column="136"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="137"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="138"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <return pos:line="28" pos:column="5">return <expr><name pos:line="28" pos:column="12">ret<pos:position pos:line="28" pos:column="15"/></name></expr>;<pos:position pos:line="28" pos:column="16"/></return>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
