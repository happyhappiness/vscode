<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_519_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">snmp_var_DecodeVarBind<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">u_char<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">Buffer<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">int<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">BufLen<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
                       <parameter><decl><type><name><name pos:line="3" pos:column="24">struct<pos:position pos:line="3" pos:column="30"/></name> <name pos:line="3" pos:column="31">variable_list<pos:position pos:line="3" pos:column="44"/></name></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier><modifier pos:line="3" pos:column="46">*<pos:position pos:line="3" pos:column="47"/></modifier></type> <name pos:line="3" pos:column="48">VarP<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>,
                       <parameter><decl><type><name pos:line="4" pos:column="24">int<pos:position pos:line="4" pos:column="27"/></name></type> <name pos:line="4" pos:column="28">Version<pos:position pos:line="4" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="36"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">variable_list<pos:position pos:line="6" pos:column="25"/></name></name> <modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier></type><name pos:line="6" pos:column="27">Var<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><name pos:line="6" pos:column="33">NULL<pos:position pos:line="6" pos:column="37"/></name></expr></init></decl>, <modifier pos:line="6" pos:column="39">*<pos:position pos:line="6" pos:column="40"/></modifier><modifier pos:line="6" pos:column="40">*<pos:position pos:line="6" pos:column="41"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="41">VarLastP<pos:position pos:line="6" pos:column="49"/></name></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">u_char<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">bufp<pos:position pos:line="7" pos:column="17"/></name></decl>, <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="20">tmp<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">u_char<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">VarBindType<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">u_char<pos:position pos:line="9" pos:column="11"/></name> <modifier pos:line="9" pos:column="12">*<pos:position pos:line="9" pos:column="13"/></modifier></type><name pos:line="9" pos:column="13">DataPtr<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">DataLen<pos:position pos:line="10" pos:column="16"/></name></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">oid<pos:position pos:line="11" pos:column="8"/></name></type> <name><name pos:line="11" pos:column="9">TmpBuf<pos:position pos:line="11" pos:column="15"/></name><index pos:line="11" pos:column="15">[<expr><name pos:line="11" pos:column="16">MAX_NAME_LEN<pos:position pos:line="11" pos:column="28"/></name></expr>]<pos:position pos:line="11" pos:column="29"/></index></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">memset<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">TmpBuf<pos:position pos:line="12" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="20">0<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="23">MAX_NAME_LEN<pos:position pos:line="12" pos:column="35"/></name> <operator pos:line="12" pos:column="36">*<pos:position pos:line="12" pos:column="37"/></operator> <sizeof pos:line="12" pos:column="38">sizeof<argument_list pos:line="12" pos:column="44">(<argument><expr><operator pos:line="12" pos:column="45">*<pos:position pos:line="12" pos:column="46"/></operator><name pos:line="12" pos:column="46">TmpBuf<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">AllVarLen<pos:position pos:line="14" pos:column="18"/></name> <init pos:line="14" pos:column="19">= <expr><operator pos:line="14" pos:column="21">*<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">BufLen<pos:position pos:line="14" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">ThisVarLen<pos:position pos:line="15" pos:column="19"/></name> <init pos:line="15" pos:column="20">= <expr><literal type="number" pos:line="15" pos:column="22">0<pos:position pos:line="15" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="24"/></decl_stmt>

    <expr_stmt><expr><name pos:line="17" pos:column="5">VarLastP<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">VarP<pos:position pos:line="17" pos:column="20"/></name></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>
<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if<pos:position pos:line="18" pos:column="4"/></cpp:directive> <expr><name pos:line="18" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="18" pos:column="22"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">printf<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="string" pos:line="19" pos:column="12">"VARS: Decoding buffer of length %d\n"<pos:position pos:line="19" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="52">*<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="53">BufLen<pos:position pos:line="19" pos:column="59"/></name></expr></argument>)<pos:position pos:line="19" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="61"/></expr_stmt>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="22" pos:column="5">/* Now parse the variables */</comment>
    <expr_stmt><expr><name pos:line="23" pos:column="5">bufp<pos:position pos:line="23" pos:column="9"/></name> <operator pos:line="23" pos:column="10">=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">asn_parse_header<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">Buffer<pos:position pos:line="23" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="37">&amp;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="38">AllVarLen<pos:position pos:line="23" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="49">&amp;<pos:position pos:line="23" pos:column="54"/></operator><name pos:line="23" pos:column="50">VarBindType<pos:position pos:line="23" pos:column="61"/></name></expr></argument>)<pos:position pos:line="23" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="63"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">bufp<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">==<pos:position pos:line="24" pos:column="16"/></operator> <name pos:line="24" pos:column="17">NULL<pos:position pos:line="24" pos:column="21"/></name></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22">
        <block type="pseudo"><return pos:line="25" pos:column="9">return <expr><operator pos:line="25" pos:column="16">(<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="17">NULL<pos:position pos:line="25" pos:column="21"/></name><operator pos:line="25" pos:column="21">)<pos:position pos:line="25" pos:column="22"/></operator></expr>;<pos:position pos:line="25" pos:column="23"/></return></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">VarBindType<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">!=<pos:position pos:line="27" pos:column="23"/></operator> <call pos:line="27" pos:column="24">(<name pos:line="27" pos:column="25">u_char<pos:position pos:line="27" pos:column="31"/></name>) <argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">ASN_SEQUENCE<pos:position pos:line="27" pos:column="46"/></name> <operator pos:line="27" pos:column="47">|<pos:position pos:line="27" pos:column="48"/></operator> <name pos:line="27" pos:column="49">ASN_CONSTRUCTOR<pos:position pos:line="27" pos:column="64"/></name></expr></argument>)<pos:position pos:line="27" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="66"/></condition><then pos:line="27" pos:column="66"> <block pos:line="27" pos:column="67">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">snmp_set_api_error<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name pos:line="28" pos:column="28">SNMPERR_PDU_PARSE<pos:position pos:line="28" pos:column="45"/></name></expr></argument>)<pos:position pos:line="28" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="47"/></expr_stmt>
        <return pos:line="29" pos:column="9">return <expr><operator pos:line="29" pos:column="16">(<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">NULL<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">)<pos:position pos:line="29" pos:column="22"/></operator></expr>;<pos:position pos:line="29" pos:column="23"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
<cpp:if pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">if<pos:position pos:line="31" pos:column="4"/></cpp:directive> <expr><name pos:line="31" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="31" pos:column="22"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">printf<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><literal type="string" pos:line="32" pos:column="12">"VARS: All Variable length %d\n"<pos:position pos:line="32" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="46">AllVarLen<pos:position pos:line="32" pos:column="55"/></name></expr></argument>)<pos:position pos:line="32" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:define pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">define<pos:position pos:line="35" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="35" pos:column="9">PARSE_ERROR<pos:position pos:line="35" pos:column="20"/></name></cpp:macro> <cpp:value pos:line="35" pos:column="21">{ snmp_var_free(Var); return(NULL); }<pos:position pos:line="35" pos:column="58"/></cpp:value></cpp:define>

    <comment type="block" pos:line="37" pos:column="5">/* We know how long the variable list is.  Parse it. */</comment>
    <while pos:line="38" pos:column="5">while <condition pos:line="38" pos:column="11">(<expr><operator pos:line="38" pos:column="12">(<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">int<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">)<pos:position pos:line="38" pos:column="17"/></operator> <name pos:line="38" pos:column="18">AllVarLen<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">&gt;<pos:position pos:line="38" pos:column="32"/></operator> <literal type="number" pos:line="38" pos:column="30">0<pos:position pos:line="38" pos:column="31"/></literal></expr>)<pos:position pos:line="38" pos:column="32"/></condition> <block pos:line="38" pos:column="33">{

        <comment type="block" pos:line="40" pos:column="9">/* Create a new variable */</comment>
        <expr_stmt><expr><name pos:line="41" pos:column="9">Var<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <call><name pos:line="41" pos:column="15">snmp_var_new<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">NULL<pos:position pos:line="41" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="34">MAX_NAME_LEN<pos:position pos:line="41" pos:column="46"/></name></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">Var<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">==<pos:position pos:line="42" pos:column="19"/></operator> <name pos:line="42" pos:column="20">NULL<pos:position pos:line="42" pos:column="24"/></name></expr>)<pos:position pos:line="42" pos:column="25"/></condition><then pos:line="42" pos:column="25">
            <block type="pseudo"><return pos:line="43" pos:column="13">return <expr><operator pos:line="43" pos:column="20">(<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="21">NULL<pos:position pos:line="43" pos:column="25"/></name><operator pos:line="43" pos:column="25">)<pos:position pos:line="43" pos:column="26"/></operator></expr>;<pos:position pos:line="43" pos:column="27"/></return></block></then></if>

        <comment type="block" pos:line="45" pos:column="9">/* Parse the header to find out the length of this variable. */</comment>
        <expr_stmt><expr><name pos:line="46" pos:column="9">ThisVarLen<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">=<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="22">AllVarLen<pos:position pos:line="46" pos:column="31"/></name></expr>;<pos:position pos:line="46" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="47" pos:column="9">tmp<pos:position pos:line="47" pos:column="12"/></name> <operator pos:line="47" pos:column="13">=<pos:position pos:line="47" pos:column="14"/></operator> <call><name pos:line="47" pos:column="15">asn_parse_header<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">bufp<pos:position pos:line="47" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="38">&amp;<pos:position pos:line="47" pos:column="43"/></operator><name pos:line="47" pos:column="39">ThisVarLen<pos:position pos:line="47" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="51">&amp;<pos:position pos:line="47" pos:column="56"/></operator><name pos:line="47" pos:column="52">VarBindType<pos:position pos:line="47" pos:column="63"/></name></expr></argument>)<pos:position pos:line="47" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="65"/></expr_stmt>
        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">tmp<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">==<pos:position pos:line="48" pos:column="19"/></operator> <name pos:line="48" pos:column="20">NULL<pos:position pos:line="48" pos:column="24"/></name></expr>)<pos:position pos:line="48" pos:column="25"/></condition><then pos:line="48" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="13">PARSE_ERROR<pos:position pos:line="49" pos:column="24"/></name></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="51" pos:column="9">/* Now that we know the length , figure out how it relates to
         * the entire variable list
         */</comment>
        <expr_stmt><expr><name pos:line="54" pos:column="9">AllVarLen<pos:position pos:line="54" pos:column="18"/></name> <operator pos:line="54" pos:column="19">=<pos:position pos:line="54" pos:column="20"/></operator> <name pos:line="54" pos:column="21">AllVarLen<pos:position pos:line="54" pos:column="30"/></name> <operator pos:line="54" pos:column="31">-<pos:position pos:line="54" pos:column="32"/></operator> <operator pos:line="54" pos:column="33">(<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="34">ThisVarLen<pos:position pos:line="54" pos:column="44"/></name> <operator pos:line="54" pos:column="45">+<pos:position pos:line="54" pos:column="46"/></operator> <operator pos:line="54" pos:column="47">(<pos:position pos:line="54" pos:column="48"/></operator><name pos:line="54" pos:column="48">tmp<pos:position pos:line="54" pos:column="51"/></name> <operator pos:line="54" pos:column="52">-<pos:position pos:line="54" pos:column="53"/></operator> <name pos:line="54" pos:column="54">bufp<pos:position pos:line="54" pos:column="58"/></name><operator pos:line="54" pos:column="58">)<pos:position pos:line="54" pos:column="59"/></operator><operator pos:line="54" pos:column="59">)<pos:position pos:line="54" pos:column="60"/></operator></expr>;<pos:position pos:line="54" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name pos:line="55" pos:column="9">bufp<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <name pos:line="55" pos:column="16">tmp<pos:position pos:line="55" pos:column="19"/></name></expr>;<pos:position pos:line="55" pos:column="20"/></expr_stmt>

        <comment type="block" pos:line="57" pos:column="9">/* Is it valid? */</comment>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">VarBindType<pos:position pos:line="58" pos:column="24"/></name> <operator pos:line="58" pos:column="25">!=<pos:position pos:line="58" pos:column="27"/></operator> <call pos:line="58" pos:column="28">(<name pos:line="58" pos:column="29">u_char<pos:position pos:line="58" pos:column="35"/></name>) <argument_list pos:line="58" pos:column="37">(<argument><expr><name pos:line="58" pos:column="38">ASN_SEQUENCE<pos:position pos:line="58" pos:column="50"/></name> <operator pos:line="58" pos:column="51">|<pos:position pos:line="58" pos:column="52"/></operator> <name pos:line="58" pos:column="53">ASN_CONSTRUCTOR<pos:position pos:line="58" pos:column="68"/></name></expr></argument>)<pos:position pos:line="58" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="70"/></condition><then pos:line="58" pos:column="70"> <block pos:line="58" pos:column="71">{
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">snmp_set_api_error<pos:position pos:line="59" pos:column="31"/></name><argument_list pos:line="59" pos:column="31">(<argument><expr><name pos:line="59" pos:column="32">SNMPERR_PDU_PARSE<pos:position pos:line="59" pos:column="49"/></name></expr></argument>)<pos:position pos:line="59" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name pos:line="60" pos:column="13">PARSE_ERROR<pos:position pos:line="60" pos:column="24"/></name></expr>;<pos:position pos:line="60" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
<cpp:if pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">if<pos:position pos:line="62" pos:column="4"/></cpp:directive> <expr><name pos:line="62" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="62" pos:column="22"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">printf<pos:position pos:line="63" pos:column="15"/></name><argument_list pos:line="63" pos:column="15">(<argument><expr><literal type="string" pos:line="63" pos:column="16">"VARS: Header type 0x%x (%d bytes left)\n"<pos:position pos:line="63" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="63" pos:column="60">VarBindType<pos:position pos:line="63" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="73">ThisVarLen<pos:position pos:line="63" pos:column="83"/></name></expr></argument>)<pos:position pos:line="63" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="85"/></expr_stmt>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>

        <comment type="block" pos:line="66" pos:column="9">/* Parse the OBJID */</comment>
        <expr_stmt><expr><name pos:line="67" pos:column="9">bufp<pos:position pos:line="67" pos:column="13"/></name> <operator pos:line="67" pos:column="14">=<pos:position pos:line="67" pos:column="15"/></operator> <call><name pos:line="67" pos:column="16">asn_parse_objid<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">(<argument><expr><name pos:line="67" pos:column="32">bufp<pos:position pos:line="67" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="38">&amp;<pos:position pos:line="67" pos:column="43"/></operator><name pos:line="67" pos:column="39">ThisVarLen<pos:position pos:line="67" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="51">&amp;<pos:position pos:line="67" pos:column="56"/></operator><name pos:line="67" pos:column="52">VarBindType<pos:position pos:line="67" pos:column="63"/></name></expr></argument>,
                               <argument><expr><name><name pos:line="68" pos:column="32">Var<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">-&gt;<pos:position pos:line="68" pos:column="40"/></operator><name pos:line="68" pos:column="37">name<pos:position pos:line="68" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="43">&amp;<pos:position pos:line="68" pos:column="48"/></operator><operator pos:line="68" pos:column="44">(<pos:position pos:line="68" pos:column="45"/></operator><name><name pos:line="68" pos:column="45">Var<pos:position pos:line="68" pos:column="48"/></name><operator pos:line="68" pos:column="48">-&gt;<pos:position pos:line="68" pos:column="53"/></operator><name pos:line="68" pos:column="50">name_length<pos:position pos:line="68" pos:column="61"/></name></name><operator pos:line="68" pos:column="61">)<pos:position pos:line="68" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="68" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="64"/></expr_stmt>
        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">bufp<pos:position pos:line="69" pos:column="17"/></name> <operator pos:line="69" pos:column="18">==<pos:position pos:line="69" pos:column="20"/></operator> <name pos:line="69" pos:column="21">NULL<pos:position pos:line="69" pos:column="25"/></name></expr>)<pos:position pos:line="69" pos:column="26"/></condition><then pos:line="69" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><name pos:line="70" pos:column="13">PARSE_ERROR<pos:position pos:line="70" pos:column="24"/></name></expr>;<pos:position pos:line="70" pos:column="25"/></expr_stmt></block></then></if>

        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name pos:line="72" pos:column="13">VarBindType<pos:position pos:line="72" pos:column="24"/></name> <operator pos:line="72" pos:column="25">!=<pos:position pos:line="72" pos:column="27"/></operator> <call pos:line="72" pos:column="28">(<name pos:line="72" pos:column="29">u_char<pos:position pos:line="72" pos:column="35"/></name>) <argument_list pos:line="72" pos:column="37">(<argument><expr><name pos:line="72" pos:column="38">ASN_UNIVERSAL<pos:position pos:line="72" pos:column="51"/></name> <operator pos:line="72" pos:column="52">|<pos:position pos:line="72" pos:column="53"/></operator>
                                     <name pos:line="73" pos:column="38">ASN_PRIMITIVE<pos:position pos:line="73" pos:column="51"/></name> <operator pos:line="73" pos:column="52">|<pos:position pos:line="73" pos:column="53"/></operator>
                                     <name pos:line="74" pos:column="38">ASN_OBJECT_ID<pos:position pos:line="74" pos:column="51"/></name></expr></argument>)<pos:position pos:line="74" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="53"/></condition><then pos:line="74" pos:column="53"> <block pos:line="74" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">snmp_set_api_error<pos:position pos:line="75" pos:column="31"/></name><argument_list pos:line="75" pos:column="31">(<argument><expr><name pos:line="75" pos:column="32">SNMPERR_PDU_PARSE<pos:position pos:line="75" pos:column="49"/></name></expr></argument>)<pos:position pos:line="75" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name pos:line="76" pos:column="13">PARSE_ERROR<pos:position pos:line="76" pos:column="24"/></name></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="77" pos:column="10"/></block></then></if>
<cpp:if pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">if<pos:position pos:line="78" pos:column="4"/></cpp:directive> <expr><name pos:line="78" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="78" pos:column="22"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">printf<pos:position pos:line="79" pos:column="15"/></name><argument_list pos:line="79" pos:column="15">(<argument><expr><literal type="string" pos:line="79" pos:column="16">"VARS: Decoded OBJID (%d bytes). (%d bytes left)\n"<pos:position pos:line="79" pos:column="67"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="80" pos:column="16">Var<pos:position pos:line="80" pos:column="19"/></name><operator pos:line="80" pos:column="19">-&gt;<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="21">name_length<pos:position pos:line="80" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="34">ThisVarLen<pos:position pos:line="80" pos:column="44"/></name></expr></argument>)<pos:position pos:line="80" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">endif<pos:position pos:line="81" pos:column="7"/></cpp:directive></cpp:endif>

        <comment type="block" pos:line="83" pos:column="9">/* Keep a pointer to this object */</comment>
        <expr_stmt><expr><name pos:line="84" pos:column="9">DataPtr<pos:position pos:line="84" pos:column="16"/></name> <operator pos:line="84" pos:column="17">=<pos:position pos:line="84" pos:column="18"/></operator> <name pos:line="84" pos:column="19">bufp<pos:position pos:line="84" pos:column="23"/></name></expr>;<pos:position pos:line="84" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="85" pos:column="9">DataLen<pos:position pos:line="85" pos:column="16"/></name> <operator pos:line="85" pos:column="17">=<pos:position pos:line="85" pos:column="18"/></operator> <name pos:line="85" pos:column="19">ThisVarLen<pos:position pos:line="85" pos:column="29"/></name></expr>;<pos:position pos:line="85" pos:column="30"/></expr_stmt>

        <comment type="block" pos:line="87" pos:column="9">/* find out type of object */</comment>
        <expr_stmt><expr><name pos:line="88" pos:column="9">bufp<pos:position pos:line="88" pos:column="13"/></name> <operator pos:line="88" pos:column="14">=<pos:position pos:line="88" pos:column="15"/></operator> <call><name pos:line="88" pos:column="16">asn_parse_header<pos:position pos:line="88" pos:column="32"/></name><argument_list pos:line="88" pos:column="32">(<argument><expr><name pos:line="88" pos:column="33">bufp<pos:position pos:line="88" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="39">&amp;<pos:position pos:line="88" pos:column="44"/></operator><name pos:line="88" pos:column="40">ThisVarLen<pos:position pos:line="88" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="52">&amp;<pos:position pos:line="88" pos:column="57"/></operator><operator pos:line="88" pos:column="53">(<pos:position pos:line="88" pos:column="54"/></operator><name><name pos:line="88" pos:column="54">Var<pos:position pos:line="88" pos:column="57"/></name><operator pos:line="88" pos:column="57">-&gt;<pos:position pos:line="88" pos:column="62"/></operator><name pos:line="88" pos:column="59">type<pos:position pos:line="88" pos:column="63"/></name></name><operator pos:line="88" pos:column="63">)<pos:position pos:line="88" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="88" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="66"/></expr_stmt>
        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">bufp<pos:position pos:line="89" pos:column="17"/></name> <operator pos:line="89" pos:column="18">==<pos:position pos:line="89" pos:column="20"/></operator> <name pos:line="89" pos:column="21">NULL<pos:position pos:line="89" pos:column="25"/></name></expr>)<pos:position pos:line="89" pos:column="26"/></condition><then pos:line="89" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="13">PARSE_ERROR<pos:position pos:line="90" pos:column="24"/></name></expr>;<pos:position pos:line="90" pos:column="25"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="91" pos:column="9">ThisVarLen<pos:position pos:line="91" pos:column="19"/></name> <operator pos:line="91" pos:column="20">=<pos:position pos:line="91" pos:column="21"/></operator> <name pos:line="91" pos:column="22">DataLen<pos:position pos:line="91" pos:column="29"/></name></expr>;<pos:position pos:line="91" pos:column="30"/></expr_stmt>

<cpp:if pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">if<pos:position pos:line="93" pos:column="4"/></cpp:directive> <expr><name pos:line="93" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="93" pos:column="22"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="94" pos:column="9">printf<pos:position pos:line="94" pos:column="15"/></name><argument_list pos:line="94" pos:column="15">(<argument><expr><literal type="string" pos:line="94" pos:column="16">"VARS: Data type %d\n"<pos:position pos:line="94" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="40">Var<pos:position pos:line="94" pos:column="43"/></name><operator pos:line="94" pos:column="43">-&gt;<pos:position pos:line="94" pos:column="48"/></operator><name pos:line="94" pos:column="45">type<pos:position pos:line="94" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="51"/></expr_stmt>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif>

        <comment type="block" pos:line="97" pos:column="9">/* Parse the type */</comment>

        <switch pos:line="99" pos:column="9">switch <condition pos:line="99" pos:column="16">(<expr><operator pos:line="99" pos:column="17">(<pos:position pos:line="99" pos:column="18"/></operator><name pos:line="99" pos:column="18">short<pos:position pos:line="99" pos:column="23"/></name><operator pos:line="99" pos:column="23">)<pos:position pos:line="99" pos:column="24"/></operator> <name><name pos:line="99" pos:column="25">Var<pos:position pos:line="99" pos:column="28"/></name><operator pos:line="99" pos:column="28">-&gt;<pos:position pos:line="99" pos:column="33"/></operator><name pos:line="99" pos:column="30">type<pos:position pos:line="99" pos:column="34"/></name></name></expr>)<pos:position pos:line="99" pos:column="35"/></condition> <block pos:line="99" pos:column="36">{

        <case pos:line="101" pos:column="9">case <expr><name pos:line="101" pos:column="14">ASN_INTEGER<pos:position pos:line="101" pos:column="25"/></name></expr>:<pos:position pos:line="101" pos:column="26"/></case>
            <expr_stmt><expr><name><name pos:line="102" pos:column="13">Var<pos:position pos:line="102" pos:column="16"/></name><operator pos:line="102" pos:column="16">-&gt;<pos:position pos:line="102" pos:column="21"/></operator><name pos:line="102" pos:column="18">val<pos:position pos:line="102" pos:column="21"/></name><operator pos:line="102" pos:column="21">.<pos:position pos:line="102" pos:column="22"/></operator><name pos:line="102" pos:column="22">integer<pos:position pos:line="102" pos:column="29"/></name></name> <operator pos:line="102" pos:column="30">=<pos:position pos:line="102" pos:column="31"/></operator> <operator pos:line="102" pos:column="32">(<pos:position pos:line="102" pos:column="33"/></operator><name pos:line="102" pos:column="33">int<pos:position pos:line="102" pos:column="36"/></name> <operator pos:line="102" pos:column="37">*<pos:position pos:line="102" pos:column="38"/></operator><operator pos:line="102" pos:column="38">)<pos:position pos:line="102" pos:column="39"/></operator> <call><name pos:line="102" pos:column="40">xmalloc<pos:position pos:line="102" pos:column="47"/></name><argument_list pos:line="102" pos:column="47">(<argument><expr><sizeof pos:line="102" pos:column="48">sizeof<argument_list pos:line="102" pos:column="54">(<argument><expr><name pos:line="102" pos:column="55">int<pos:position pos:line="102" pos:column="58"/></name></expr></argument>)<pos:position pos:line="102" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="102" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="61"/></expr_stmt>
            <if pos:line="103" pos:column="13">if <condition pos:line="103" pos:column="16">(<expr><name><name pos:line="103" pos:column="17">Var<pos:position pos:line="103" pos:column="20"/></name><operator pos:line="103" pos:column="20">-&gt;<pos:position pos:line="103" pos:column="25"/></operator><name pos:line="103" pos:column="22">val<pos:position pos:line="103" pos:column="25"/></name><operator pos:line="103" pos:column="25">.<pos:position pos:line="103" pos:column="26"/></operator><name pos:line="103" pos:column="26">integer<pos:position pos:line="103" pos:column="33"/></name></name> <operator pos:line="103" pos:column="34">==<pos:position pos:line="103" pos:column="36"/></operator> <name pos:line="103" pos:column="37">NULL<pos:position pos:line="103" pos:column="41"/></name></expr>)<pos:position pos:line="103" pos:column="42"/></condition><then pos:line="103" pos:column="42"> <block pos:line="103" pos:column="43">{
                <expr_stmt><expr><call><name pos:line="104" pos:column="17">snmp_set_api_error<pos:position pos:line="104" pos:column="35"/></name><argument_list pos:line="104" pos:column="35">(<argument><expr><name pos:line="104" pos:column="36">SNMPERR_OS_ERR<pos:position pos:line="104" pos:column="50"/></name></expr></argument>)<pos:position pos:line="104" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><name pos:line="105" pos:column="17">PARSE_ERROR<pos:position pos:line="105" pos:column="28"/></name></expr>;<pos:position pos:line="105" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="106" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="107" pos:column="13">Var<pos:position pos:line="107" pos:column="16"/></name><operator pos:line="107" pos:column="16">-&gt;<pos:position pos:line="107" pos:column="21"/></operator><name pos:line="107" pos:column="18">val_len<pos:position pos:line="107" pos:column="25"/></name></name> <operator pos:line="107" pos:column="26">=<pos:position pos:line="107" pos:column="27"/></operator> <sizeof pos:line="107" pos:column="28">sizeof<argument_list pos:line="107" pos:column="34">(<argument><expr><name pos:line="107" pos:column="35">int<pos:position pos:line="107" pos:column="38"/></name></expr></argument>)<pos:position pos:line="107" pos:column="39"/></argument_list></sizeof></expr>;<pos:position pos:line="107" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="108" pos:column="13">bufp<pos:position pos:line="108" pos:column="17"/></name> <operator pos:line="108" pos:column="18">=<pos:position pos:line="108" pos:column="19"/></operator> <call><name pos:line="108" pos:column="20">asn_parse_int<pos:position pos:line="108" pos:column="33"/></name><argument_list pos:line="108" pos:column="33">(<argument><expr><name pos:line="108" pos:column="34">DataPtr<pos:position pos:line="108" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="43">&amp;<pos:position pos:line="108" pos:column="48"/></operator><name pos:line="108" pos:column="44">ThisVarLen<pos:position pos:line="108" pos:column="54"/></name></expr></argument>,
                                 <argument><expr><operator pos:line="109" pos:column="34">&amp;<pos:position pos:line="109" pos:column="39"/></operator><name><name pos:line="109" pos:column="35">Var<pos:position pos:line="109" pos:column="38"/></name><operator pos:line="109" pos:column="38">-&gt;<pos:position pos:line="109" pos:column="43"/></operator><name pos:line="109" pos:column="40">type<pos:position pos:line="109" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="109" pos:column="46">(<pos:position pos:line="109" pos:column="47"/></operator><name pos:line="109" pos:column="47">int<pos:position pos:line="109" pos:column="50"/></name> <operator pos:line="109" pos:column="51">*<pos:position pos:line="109" pos:column="52"/></operator><operator pos:line="109" pos:column="52">)<pos:position pos:line="109" pos:column="53"/></operator> <name><name pos:line="109" pos:column="54">Var<pos:position pos:line="109" pos:column="57"/></name><operator pos:line="109" pos:column="57">-&gt;<pos:position pos:line="109" pos:column="62"/></operator><name pos:line="109" pos:column="59">val<pos:position pos:line="109" pos:column="62"/></name><operator pos:line="109" pos:column="62">.<pos:position pos:line="109" pos:column="63"/></operator><name pos:line="109" pos:column="63">integer<pos:position pos:line="109" pos:column="70"/></name></name></expr></argument>,
                                 <argument><expr><name><name pos:line="110" pos:column="34">Var<pos:position pos:line="110" pos:column="37"/></name><operator pos:line="110" pos:column="37">-&gt;<pos:position pos:line="110" pos:column="42"/></operator><name pos:line="110" pos:column="39">val_len<pos:position pos:line="110" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="48"/></expr_stmt>
<cpp:if pos:line="111" pos:column="1">#<cpp:directive pos:line="111" pos:column="2">if<pos:position pos:line="111" pos:column="4"/></cpp:directive> <expr><name pos:line="111" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="111" pos:column="22"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="112" pos:column="13">printf<pos:position pos:line="112" pos:column="19"/></name><argument_list pos:line="112" pos:column="19">(<argument><expr><literal type="string" pos:line="112" pos:column="20">"VARS: Decoded integer '%d' (%d bytes left)\n"<pos:position pos:line="112" pos:column="66"/></literal></expr></argument>,
                   <argument><expr><operator pos:line="113" pos:column="20">*<pos:position pos:line="113" pos:column="21"/></operator><operator pos:line="113" pos:column="21">(<pos:position pos:line="113" pos:column="22"/></operator><name><name pos:line="113" pos:column="22">Var<pos:position pos:line="113" pos:column="25"/></name><operator pos:line="113" pos:column="25">-&gt;<pos:position pos:line="113" pos:column="30"/></operator><name pos:line="113" pos:column="27">val<pos:position pos:line="113" pos:column="30"/></name><operator pos:line="113" pos:column="30">.<pos:position pos:line="113" pos:column="31"/></operator><name pos:line="113" pos:column="31">integer<pos:position pos:line="113" pos:column="38"/></name></name><operator pos:line="113" pos:column="38">)<pos:position pos:line="113" pos:column="39"/></operator></expr></argument>, <argument><expr><name pos:line="113" pos:column="41">ThisVarLen<pos:position pos:line="113" pos:column="51"/></name></expr></argument>)<pos:position pos:line="113" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">endif<pos:position pos:line="114" pos:column="7"/></cpp:directive></cpp:endif>
            <break pos:line="115" pos:column="13">break;<pos:position pos:line="115" pos:column="19"/></break>

        <case pos:line="117" pos:column="9">case <expr><name pos:line="117" pos:column="14">SMI_COUNTER32<pos:position pos:line="117" pos:column="27"/></name></expr>:<pos:position pos:line="117" pos:column="28"/></case>
        <case pos:line="118" pos:column="9">case <expr><name pos:line="118" pos:column="14">SMI_GAUGE32<pos:position pos:line="118" pos:column="25"/></name></expr>:<pos:position pos:line="118" pos:column="26"/></case>
            <comment type="block" pos:line="119" pos:column="13">/*  case SMI_UNSIGNED32: */</comment>
        <case pos:line="120" pos:column="9">case <expr><name pos:line="120" pos:column="14">SMI_TIMETICKS<pos:position pos:line="120" pos:column="27"/></name></expr>:<pos:position pos:line="120" pos:column="28"/></case>
            <expr_stmt><expr><name><name pos:line="121" pos:column="13">Var<pos:position pos:line="121" pos:column="16"/></name><operator pos:line="121" pos:column="16">-&gt;<pos:position pos:line="121" pos:column="21"/></operator><name pos:line="121" pos:column="18">val<pos:position pos:line="121" pos:column="21"/></name><operator pos:line="121" pos:column="21">.<pos:position pos:line="121" pos:column="22"/></operator><name pos:line="121" pos:column="22">integer<pos:position pos:line="121" pos:column="29"/></name></name> <operator pos:line="121" pos:column="30">=<pos:position pos:line="121" pos:column="31"/></operator> <operator pos:line="121" pos:column="32">(<pos:position pos:line="121" pos:column="33"/></operator><name pos:line="121" pos:column="33">int<pos:position pos:line="121" pos:column="36"/></name> <operator pos:line="121" pos:column="37">*<pos:position pos:line="121" pos:column="38"/></operator><operator pos:line="121" pos:column="38">)<pos:position pos:line="121" pos:column="39"/></operator> <call><name pos:line="121" pos:column="40">xmalloc<pos:position pos:line="121" pos:column="47"/></name><argument_list pos:line="121" pos:column="47">(<argument><expr><sizeof pos:line="121" pos:column="48">sizeof<argument_list pos:line="121" pos:column="54">(<argument><expr><name pos:line="121" pos:column="55">u_int<pos:position pos:line="121" pos:column="60"/></name></expr></argument>)<pos:position pos:line="121" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="121" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="63"/></expr_stmt>
            <if pos:line="122" pos:column="13">if <condition pos:line="122" pos:column="16">(<expr><name><name pos:line="122" pos:column="17">Var<pos:position pos:line="122" pos:column="20"/></name><operator pos:line="122" pos:column="20">-&gt;<pos:position pos:line="122" pos:column="25"/></operator><name pos:line="122" pos:column="22">val<pos:position pos:line="122" pos:column="25"/></name><operator pos:line="122" pos:column="25">.<pos:position pos:line="122" pos:column="26"/></operator><name pos:line="122" pos:column="26">integer<pos:position pos:line="122" pos:column="33"/></name></name> <operator pos:line="122" pos:column="34">==<pos:position pos:line="122" pos:column="36"/></operator> <name pos:line="122" pos:column="37">NULL<pos:position pos:line="122" pos:column="41"/></name></expr>)<pos:position pos:line="122" pos:column="42"/></condition><then pos:line="122" pos:column="42"> <block pos:line="122" pos:column="43">{
                <expr_stmt><expr><call><name pos:line="123" pos:column="17">snmp_set_api_error<pos:position pos:line="123" pos:column="35"/></name><argument_list pos:line="123" pos:column="35">(<argument><expr><name pos:line="123" pos:column="36">SNMPERR_OS_ERR<pos:position pos:line="123" pos:column="50"/></name></expr></argument>)<pos:position pos:line="123" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><name pos:line="124" pos:column="17">PARSE_ERROR<pos:position pos:line="124" pos:column="28"/></name></expr>;<pos:position pos:line="124" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="125" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="126" pos:column="13">Var<pos:position pos:line="126" pos:column="16"/></name><operator pos:line="126" pos:column="16">-&gt;<pos:position pos:line="126" pos:column="21"/></operator><name pos:line="126" pos:column="18">val_len<pos:position pos:line="126" pos:column="25"/></name></name> <operator pos:line="126" pos:column="26">=<pos:position pos:line="126" pos:column="27"/></operator> <sizeof pos:line="126" pos:column="28">sizeof<argument_list pos:line="126" pos:column="34">(<argument><expr><name pos:line="126" pos:column="35">u_int<pos:position pos:line="126" pos:column="40"/></name></expr></argument>)<pos:position pos:line="126" pos:column="41"/></argument_list></sizeof></expr>;<pos:position pos:line="126" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="127" pos:column="13">bufp<pos:position pos:line="127" pos:column="17"/></name> <operator pos:line="127" pos:column="18">=<pos:position pos:line="127" pos:column="19"/></operator> <call><name pos:line="127" pos:column="20">asn_parse_unsigned_int<pos:position pos:line="127" pos:column="42"/></name><argument_list pos:line="127" pos:column="42">(<argument><expr><name pos:line="127" pos:column="43">DataPtr<pos:position pos:line="127" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="52">&amp;<pos:position pos:line="127" pos:column="57"/></operator><name pos:line="127" pos:column="53">ThisVarLen<pos:position pos:line="127" pos:column="63"/></name></expr></argument>,
                                          <argument><expr><operator pos:line="128" pos:column="43">&amp;<pos:position pos:line="128" pos:column="48"/></operator><name><name pos:line="128" pos:column="44">Var<pos:position pos:line="128" pos:column="47"/></name><operator pos:line="128" pos:column="47">-&gt;<pos:position pos:line="128" pos:column="52"/></operator><name pos:line="128" pos:column="49">type<pos:position pos:line="128" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="128" pos:column="55">(<pos:position pos:line="128" pos:column="56"/></operator><name pos:line="128" pos:column="56">u_int<pos:position pos:line="128" pos:column="61"/></name> <operator pos:line="128" pos:column="62">*<pos:position pos:line="128" pos:column="63"/></operator><operator pos:line="128" pos:column="63">)<pos:position pos:line="128" pos:column="64"/></operator> <name><name pos:line="128" pos:column="65">Var<pos:position pos:line="128" pos:column="68"/></name><operator pos:line="128" pos:column="68">-&gt;<pos:position pos:line="128" pos:column="73"/></operator><name pos:line="128" pos:column="70">val<pos:position pos:line="128" pos:column="73"/></name><operator pos:line="128" pos:column="73">.<pos:position pos:line="128" pos:column="74"/></operator><name pos:line="128" pos:column="74">integer<pos:position pos:line="128" pos:column="81"/></name></name></expr></argument>,
                                          <argument><expr><name><name pos:line="129" pos:column="43">Var<pos:position pos:line="129" pos:column="46"/></name><operator pos:line="129" pos:column="46">-&gt;<pos:position pos:line="129" pos:column="51"/></operator><name pos:line="129" pos:column="48">val_len<pos:position pos:line="129" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="129" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="57"/></expr_stmt>
<cpp:if pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">if<pos:position pos:line="130" pos:column="4"/></cpp:directive> <expr><name pos:line="130" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="130" pos:column="22"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="131" pos:column="13">printf<pos:position pos:line="131" pos:column="19"/></name><argument_list pos:line="131" pos:column="19">(<argument><expr><literal type="string" pos:line="131" pos:column="20">"VARS: Decoded timeticks '%d' (%d bytes left)\n"<pos:position pos:line="131" pos:column="68"/></literal></expr></argument>,
                   <argument><expr><operator pos:line="132" pos:column="20">*<pos:position pos:line="132" pos:column="21"/></operator><operator pos:line="132" pos:column="21">(<pos:position pos:line="132" pos:column="22"/></operator><name><name pos:line="132" pos:column="22">Var<pos:position pos:line="132" pos:column="25"/></name><operator pos:line="132" pos:column="25">-&gt;<pos:position pos:line="132" pos:column="30"/></operator><name pos:line="132" pos:column="27">val<pos:position pos:line="132" pos:column="30"/></name><operator pos:line="132" pos:column="30">.<pos:position pos:line="132" pos:column="31"/></operator><name pos:line="132" pos:column="31">integer<pos:position pos:line="132" pos:column="38"/></name></name><operator pos:line="132" pos:column="38">)<pos:position pos:line="132" pos:column="39"/></operator></expr></argument>, <argument><expr><name pos:line="132" pos:column="41">ThisVarLen<pos:position pos:line="132" pos:column="51"/></name></expr></argument>)<pos:position pos:line="132" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="133" pos:column="1">#<cpp:directive pos:line="133" pos:column="2">endif<pos:position pos:line="133" pos:column="7"/></cpp:directive></cpp:endif>
            <break pos:line="134" pos:column="13">break;<pos:position pos:line="134" pos:column="19"/></break>

        <case pos:line="136" pos:column="9">case <expr><name pos:line="136" pos:column="14">ASN_OCTET_STR<pos:position pos:line="136" pos:column="27"/></name></expr>:<pos:position pos:line="136" pos:column="28"/></case>
        <case pos:line="137" pos:column="9">case <expr><name pos:line="137" pos:column="14">SMI_IPADDRESS<pos:position pos:line="137" pos:column="27"/></name></expr>:<pos:position pos:line="137" pos:column="28"/></case>
        <case pos:line="138" pos:column="9">case <expr><name pos:line="138" pos:column="14">SMI_OPAQUE<pos:position pos:line="138" pos:column="24"/></name></expr>:<pos:position pos:line="138" pos:column="25"/></case>
            <expr_stmt><expr><name><name pos:line="139" pos:column="13">Var<pos:position pos:line="139" pos:column="16"/></name><operator pos:line="139" pos:column="16">-&gt;<pos:position pos:line="139" pos:column="21"/></operator><name pos:line="139" pos:column="18">val_len<pos:position pos:line="139" pos:column="25"/></name></name> <operator pos:line="139" pos:column="26">=<pos:position pos:line="139" pos:column="27"/></operator> <operator pos:line="139" pos:column="28">*<pos:position pos:line="139" pos:column="29"/></operator><operator pos:line="139" pos:column="29">&amp;<pos:position pos:line="139" pos:column="34"/></operator><name pos:line="139" pos:column="30">ThisVarLen<pos:position pos:line="139" pos:column="40"/></name></expr>;<pos:position pos:line="139" pos:column="41"/></expr_stmt>	<comment type="block" pos:line="139" pos:column="49">/* String is this at most */</comment>
            <expr_stmt><expr><name><name pos:line="140" pos:column="13">Var<pos:position pos:line="140" pos:column="16"/></name><operator pos:line="140" pos:column="16">-&gt;<pos:position pos:line="140" pos:column="21"/></operator><name pos:line="140" pos:column="18">val<pos:position pos:line="140" pos:column="21"/></name><operator pos:line="140" pos:column="21">.<pos:position pos:line="140" pos:column="22"/></operator><name pos:line="140" pos:column="22">string<pos:position pos:line="140" pos:column="28"/></name></name> <operator pos:line="140" pos:column="29">=<pos:position pos:line="140" pos:column="30"/></operator> <operator pos:line="140" pos:column="31">(<pos:position pos:line="140" pos:column="32"/></operator><name pos:line="140" pos:column="32">u_char<pos:position pos:line="140" pos:column="38"/></name> <operator pos:line="140" pos:column="39">*<pos:position pos:line="140" pos:column="40"/></operator><operator pos:line="140" pos:column="40">)<pos:position pos:line="140" pos:column="41"/></operator> <call><name pos:line="140" pos:column="42">xmalloc<pos:position pos:line="140" pos:column="49"/></name><argument_list pos:line="140" pos:column="49">(<argument><expr><operator pos:line="140" pos:column="50">(<pos:position pos:line="140" pos:column="51"/></operator><name pos:line="140" pos:column="51">unsigned<pos:position pos:line="140" pos:column="59"/></name><operator pos:line="140" pos:column="59">)<pos:position pos:line="140" pos:column="60"/></operator> <name><name pos:line="140" pos:column="61">Var<pos:position pos:line="140" pos:column="64"/></name><operator pos:line="140" pos:column="64">-&gt;<pos:position pos:line="140" pos:column="69"/></operator><name pos:line="140" pos:column="66">val_len<pos:position pos:line="140" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="140" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="75"/></expr_stmt>
            <if pos:line="141" pos:column="13">if <condition pos:line="141" pos:column="16">(<expr><name><name pos:line="141" pos:column="17">Var<pos:position pos:line="141" pos:column="20"/></name><operator pos:line="141" pos:column="20">-&gt;<pos:position pos:line="141" pos:column="25"/></operator><name pos:line="141" pos:column="22">val<pos:position pos:line="141" pos:column="25"/></name><operator pos:line="141" pos:column="25">.<pos:position pos:line="141" pos:column="26"/></operator><name pos:line="141" pos:column="26">string<pos:position pos:line="141" pos:column="32"/></name></name> <operator pos:line="141" pos:column="33">==<pos:position pos:line="141" pos:column="35"/></operator> <name pos:line="141" pos:column="36">NULL<pos:position pos:line="141" pos:column="40"/></name></expr>)<pos:position pos:line="141" pos:column="41"/></condition><then pos:line="141" pos:column="41"> <block pos:line="141" pos:column="42">{
                <expr_stmt><expr><call><name pos:line="142" pos:column="17">snmp_set_api_error<pos:position pos:line="142" pos:column="35"/></name><argument_list pos:line="142" pos:column="35">(<argument><expr><name pos:line="142" pos:column="36">SNMPERR_OS_ERR<pos:position pos:line="142" pos:column="50"/></name></expr></argument>)<pos:position pos:line="142" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><name pos:line="143" pos:column="17">PARSE_ERROR<pos:position pos:line="143" pos:column="28"/></name></expr>;<pos:position pos:line="143" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="144" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="145" pos:column="13">bufp<pos:position pos:line="145" pos:column="17"/></name> <operator pos:line="145" pos:column="18">=<pos:position pos:line="145" pos:column="19"/></operator> <call><name pos:line="145" pos:column="20">asn_parse_string<pos:position pos:line="145" pos:column="36"/></name><argument_list pos:line="145" pos:column="36">(<argument><expr><name pos:line="145" pos:column="37">DataPtr<pos:position pos:line="145" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="145" pos:column="46">&amp;<pos:position pos:line="145" pos:column="51"/></operator><name pos:line="145" pos:column="47">ThisVarLen<pos:position pos:line="145" pos:column="57"/></name></expr></argument>,
                                    <argument><expr><operator pos:line="146" pos:column="37">&amp;<pos:position pos:line="146" pos:column="42"/></operator><name><name pos:line="146" pos:column="38">Var<pos:position pos:line="146" pos:column="41"/></name><operator pos:line="146" pos:column="41">-&gt;<pos:position pos:line="146" pos:column="46"/></operator><name pos:line="146" pos:column="43">type<pos:position pos:line="146" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="49">Var<pos:position pos:line="146" pos:column="52"/></name><operator pos:line="146" pos:column="52">-&gt;<pos:position pos:line="146" pos:column="57"/></operator><name pos:line="146" pos:column="54">val<pos:position pos:line="146" pos:column="57"/></name><operator pos:line="146" pos:column="57">.<pos:position pos:line="146" pos:column="58"/></operator><name pos:line="146" pos:column="58">string<pos:position pos:line="146" pos:column="64"/></name></name></expr></argument>,
                                    <argument><expr><operator pos:line="147" pos:column="37">&amp;<pos:position pos:line="147" pos:column="42"/></operator><name><name pos:line="147" pos:column="38">Var<pos:position pos:line="147" pos:column="41"/></name><operator pos:line="147" pos:column="41">-&gt;<pos:position pos:line="147" pos:column="46"/></operator><name pos:line="147" pos:column="43">val_len<pos:position pos:line="147" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="147" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="52"/></expr_stmt>
<cpp:if pos:line="148" pos:column="1">#<cpp:directive pos:line="148" pos:column="2">if<pos:position pos:line="148" pos:column="4"/></cpp:directive> <expr><name pos:line="148" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="148" pos:column="22"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="149" pos:column="13">printf<pos:position pos:line="149" pos:column="19"/></name><argument_list pos:line="149" pos:column="19">(<argument><expr><literal type="string" pos:line="149" pos:column="20">"VARS: Decoded string '%s' (length %d) (%d bytes left)\n"<pos:position pos:line="149" pos:column="77"/></literal></expr></argument>,
                   <argument><expr><operator pos:line="150" pos:column="20">(<pos:position pos:line="150" pos:column="21"/></operator><name><name pos:line="150" pos:column="21">Var<pos:position pos:line="150" pos:column="24"/></name><operator pos:line="150" pos:column="24">-&gt;<pos:position pos:line="150" pos:column="29"/></operator><name pos:line="150" pos:column="26">val<pos:position pos:line="150" pos:column="29"/></name><operator pos:line="150" pos:column="29">.<pos:position pos:line="150" pos:column="30"/></operator><name pos:line="150" pos:column="30">string<pos:position pos:line="150" pos:column="36"/></name></name><operator pos:line="150" pos:column="36">)<pos:position pos:line="150" pos:column="37"/></operator></expr></argument>, <argument><expr><name><name pos:line="150" pos:column="39">Var<pos:position pos:line="150" pos:column="42"/></name><operator pos:line="150" pos:column="42">-&gt;<pos:position pos:line="150" pos:column="47"/></operator><name pos:line="150" pos:column="44">val_len<pos:position pos:line="150" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="53">ThisVarLen<pos:position pos:line="150" pos:column="63"/></name></expr></argument>)<pos:position pos:line="150" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="65"/></expr_stmt>
<cpp:endif pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">endif<pos:position pos:line="151" pos:column="7"/></cpp:directive></cpp:endif>
            <break pos:line="152" pos:column="13">break;<pos:position pos:line="152" pos:column="19"/></break>

        <case pos:line="154" pos:column="9">case <expr><name pos:line="154" pos:column="14">ASN_OBJECT_ID<pos:position pos:line="154" pos:column="27"/></name></expr>:<pos:position pos:line="154" pos:column="28"/></case>
            <expr_stmt><expr><name><name pos:line="155" pos:column="13">Var<pos:position pos:line="155" pos:column="16"/></name><operator pos:line="155" pos:column="16">-&gt;<pos:position pos:line="155" pos:column="21"/></operator><name pos:line="155" pos:column="18">val_len<pos:position pos:line="155" pos:column="25"/></name></name> <operator pos:line="155" pos:column="26">=<pos:position pos:line="155" pos:column="27"/></operator> <name pos:line="155" pos:column="28">MAX_NAME_LEN<pos:position pos:line="155" pos:column="40"/></name></expr>;<pos:position pos:line="155" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name pos:line="156" pos:column="13">bufp<pos:position pos:line="156" pos:column="17"/></name> <operator pos:line="156" pos:column="18">=<pos:position pos:line="156" pos:column="19"/></operator> <call><name pos:line="156" pos:column="20">asn_parse_objid<pos:position pos:line="156" pos:column="35"/></name><argument_list pos:line="156" pos:column="35">(<argument><expr><name pos:line="156" pos:column="36">DataPtr<pos:position pos:line="156" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="156" pos:column="45">&amp;<pos:position pos:line="156" pos:column="50"/></operator><name pos:line="156" pos:column="46">ThisVarLen<pos:position pos:line="156" pos:column="56"/></name></expr></argument>,
                                   <argument><expr><operator pos:line="157" pos:column="36">&amp;<pos:position pos:line="157" pos:column="41"/></operator><name><name pos:line="157" pos:column="37">Var<pos:position pos:line="157" pos:column="40"/></name><operator pos:line="157" pos:column="40">-&gt;<pos:position pos:line="157" pos:column="45"/></operator><name pos:line="157" pos:column="42">type<pos:position pos:line="157" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="157" pos:column="48">TmpBuf<pos:position pos:line="157" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="157" pos:column="56">&amp;<pos:position pos:line="157" pos:column="61"/></operator><name><name pos:line="157" pos:column="57">Var<pos:position pos:line="157" pos:column="60"/></name><operator pos:line="157" pos:column="60">-&gt;<pos:position pos:line="157" pos:column="65"/></operator><name pos:line="157" pos:column="62">val_len<pos:position pos:line="157" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="157" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="158" pos:column="13">Var<pos:position pos:line="158" pos:column="16"/></name><operator pos:line="158" pos:column="16">-&gt;<pos:position pos:line="158" pos:column="21"/></operator><name pos:line="158" pos:column="18">val_len<pos:position pos:line="158" pos:column="25"/></name></name> <operator pos:line="158" pos:column="26">*=<pos:position pos:line="158" pos:column="28"/></operator> <sizeof pos:line="158" pos:column="29">sizeof<argument_list pos:line="158" pos:column="35">(<argument><expr><name pos:line="158" pos:column="36">oid<pos:position pos:line="158" pos:column="39"/></name></expr></argument>)<pos:position pos:line="158" pos:column="40"/></argument_list></sizeof></expr>;<pos:position pos:line="158" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="159" pos:column="13">Var<pos:position pos:line="159" pos:column="16"/></name><operator pos:line="159" pos:column="16">-&gt;<pos:position pos:line="159" pos:column="21"/></operator><name pos:line="159" pos:column="18">val<pos:position pos:line="159" pos:column="21"/></name><operator pos:line="159" pos:column="21">.<pos:position pos:line="159" pos:column="22"/></operator><name pos:line="159" pos:column="22">objid<pos:position pos:line="159" pos:column="27"/></name></name> <operator pos:line="159" pos:column="28">=<pos:position pos:line="159" pos:column="29"/></operator> <operator pos:line="159" pos:column="30">(<pos:position pos:line="159" pos:column="31"/></operator><name pos:line="159" pos:column="31">oid<pos:position pos:line="159" pos:column="34"/></name> <operator pos:line="159" pos:column="35">*<pos:position pos:line="159" pos:column="36"/></operator><operator pos:line="159" pos:column="36">)<pos:position pos:line="159" pos:column="37"/></operator> <call><name pos:line="159" pos:column="38">xmalloc<pos:position pos:line="159" pos:column="45"/></name><argument_list pos:line="159" pos:column="45">(<argument><expr><operator pos:line="159" pos:column="46">(<pos:position pos:line="159" pos:column="47"/></operator><name pos:line="159" pos:column="47">unsigned<pos:position pos:line="159" pos:column="55"/></name><operator pos:line="159" pos:column="55">)<pos:position pos:line="159" pos:column="56"/></operator> <name><name pos:line="159" pos:column="57">Var<pos:position pos:line="159" pos:column="60"/></name><operator pos:line="159" pos:column="60">-&gt;<pos:position pos:line="159" pos:column="65"/></operator><name pos:line="159" pos:column="62">val_len<pos:position pos:line="159" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="159" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="71"/></expr_stmt>
            <if pos:line="160" pos:column="13">if <condition pos:line="160" pos:column="16">(<expr><name><name pos:line="160" pos:column="17">Var<pos:position pos:line="160" pos:column="20"/></name><operator pos:line="160" pos:column="20">-&gt;<pos:position pos:line="160" pos:column="25"/></operator><name pos:line="160" pos:column="22">val<pos:position pos:line="160" pos:column="25"/></name><operator pos:line="160" pos:column="25">.<pos:position pos:line="160" pos:column="26"/></operator><name pos:line="160" pos:column="26">integer<pos:position pos:line="160" pos:column="33"/></name></name> <operator pos:line="160" pos:column="34">==<pos:position pos:line="160" pos:column="36"/></operator> <name pos:line="160" pos:column="37">NULL<pos:position pos:line="160" pos:column="41"/></name></expr>)<pos:position pos:line="160" pos:column="42"/></condition><then pos:line="160" pos:column="42"> <block pos:line="160" pos:column="43">{
                <expr_stmt><expr><call><name pos:line="161" pos:column="17">snmp_set_api_error<pos:position pos:line="161" pos:column="35"/></name><argument_list pos:line="161" pos:column="35">(<argument><expr><name pos:line="161" pos:column="36">SNMPERR_OS_ERR<pos:position pos:line="161" pos:column="50"/></name></expr></argument>)<pos:position pos:line="161" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><name pos:line="162" pos:column="17">PARSE_ERROR<pos:position pos:line="162" pos:column="28"/></name></expr>;<pos:position pos:line="162" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="163" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="164" pos:column="13">/* Only copy if we successfully decoded something */</comment>
            <if pos:line="165" pos:column="13">if <condition pos:line="165" pos:column="16">(<expr><name pos:line="165" pos:column="17">bufp<pos:position pos:line="165" pos:column="21"/></name></expr>)<pos:position pos:line="165" pos:column="22"/></condition><then pos:line="165" pos:column="22"> <block pos:line="165" pos:column="23">{
                <expr_stmt><expr><call><name pos:line="166" pos:column="17">memcpy<pos:position pos:line="166" pos:column="23"/></name><argument_list pos:line="166" pos:column="23">(<argument><expr><operator pos:line="166" pos:column="24">(<pos:position pos:line="166" pos:column="25"/></operator><name pos:line="166" pos:column="25">char<pos:position pos:line="166" pos:column="29"/></name> <operator pos:line="166" pos:column="30">*<pos:position pos:line="166" pos:column="31"/></operator><operator pos:line="166" pos:column="31">)<pos:position pos:line="166" pos:column="32"/></operator> <name><name pos:line="166" pos:column="33">Var<pos:position pos:line="166" pos:column="36"/></name><operator pos:line="166" pos:column="36">-&gt;<pos:position pos:line="166" pos:column="41"/></operator><name pos:line="166" pos:column="38">val<pos:position pos:line="166" pos:column="41"/></name><operator pos:line="166" pos:column="41">.<pos:position pos:line="166" pos:column="42"/></operator><name pos:line="166" pos:column="42">objid<pos:position pos:line="166" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="166" pos:column="49">(<pos:position pos:line="166" pos:column="50"/></operator><name pos:line="166" pos:column="50">char<pos:position pos:line="166" pos:column="54"/></name> <operator pos:line="166" pos:column="55">*<pos:position pos:line="166" pos:column="56"/></operator><operator pos:line="166" pos:column="56">)<pos:position pos:line="166" pos:column="57"/></operator> <name pos:line="166" pos:column="58">TmpBuf<pos:position pos:line="166" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="66">Var<pos:position pos:line="166" pos:column="69"/></name><operator pos:line="166" pos:column="69">-&gt;<pos:position pos:line="166" pos:column="74"/></operator><name pos:line="166" pos:column="71">val_len<pos:position pos:line="166" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="166" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="80"/></expr_stmt>
            }<pos:position pos:line="167" pos:column="14"/></block></then></if>
<cpp:if pos:line="168" pos:column="1">#<cpp:directive pos:line="168" pos:column="2">if<pos:position pos:line="168" pos:column="4"/></cpp:directive> <expr><name pos:line="168" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="168" pos:column="22"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="169" pos:column="13">printf<pos:position pos:line="169" pos:column="19"/></name><argument_list pos:line="169" pos:column="19">(<argument><expr><literal type="string" pos:line="169" pos:column="20">"VARS: Decoded OBJID (length %d) (%d bytes left)\n"<pos:position pos:line="169" pos:column="71"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="170" pos:column="20">Var<pos:position pos:line="170" pos:column="23"/></name><operator pos:line="170" pos:column="23">-&gt;<pos:position pos:line="170" pos:column="28"/></operator><name pos:line="170" pos:column="25">val_len<pos:position pos:line="170" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="34">ThisVarLen<pos:position pos:line="170" pos:column="44"/></name></expr></argument>)<pos:position pos:line="170" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="171" pos:column="1">#<cpp:directive pos:line="171" pos:column="2">endif<pos:position pos:line="171" pos:column="7"/></cpp:directive></cpp:endif>
            <break pos:line="172" pos:column="13">break;<pos:position pos:line="172" pos:column="19"/></break>

        <case pos:line="174" pos:column="9">case <expr><name pos:line="174" pos:column="14">ASN_NULL<pos:position pos:line="174" pos:column="22"/></name></expr>:<pos:position pos:line="174" pos:column="23"/></case>
        <case pos:line="175" pos:column="9">case <expr><name pos:line="175" pos:column="14">SMI_NOSUCHINSTANCE<pos:position pos:line="175" pos:column="32"/></name></expr>:<pos:position pos:line="175" pos:column="33"/></case>
        <case pos:line="176" pos:column="9">case <expr><name pos:line="176" pos:column="14">SMI_NOSUCHOBJECT<pos:position pos:line="176" pos:column="30"/></name></expr>:<pos:position pos:line="176" pos:column="31"/></case>
        <case pos:line="177" pos:column="9">case <expr><name pos:line="177" pos:column="14">SMI_ENDOFMIBVIEW<pos:position pos:line="177" pos:column="30"/></name></expr>:<pos:position pos:line="177" pos:column="31"/></case>
            <break pos:line="178" pos:column="13">break;<pos:position pos:line="178" pos:column="19"/></break>

        <case pos:line="180" pos:column="9">case <expr><name pos:line="180" pos:column="14">SMI_COUNTER64<pos:position pos:line="180" pos:column="27"/></name></expr>:<pos:position pos:line="180" pos:column="28"/></case>
            <expr_stmt><expr><call><name pos:line="181" pos:column="13">snmplib_debug<pos:position pos:line="181" pos:column="26"/></name><argument_list pos:line="181" pos:column="26">(<argument><expr><literal type="number" pos:line="181" pos:column="27">2<pos:position pos:line="181" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="181" pos:column="30">"Unable to parse type SMI_COUNTER64!\n"<pos:position pos:line="181" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="182" pos:column="13">snmp_set_api_error<pos:position pos:line="182" pos:column="31"/></name><argument_list pos:line="182" pos:column="31">(<argument><expr><name pos:line="182" pos:column="32">SNMPERR_UNSUPPORTED_TYPE<pos:position pos:line="182" pos:column="56"/></name></expr></argument>)<pos:position pos:line="182" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><name pos:line="183" pos:column="13">PARSE_ERROR<pos:position pos:line="183" pos:column="24"/></name></expr>;<pos:position pos:line="183" pos:column="25"/></expr_stmt>

        <default pos:line="185" pos:column="9">default:<pos:position pos:line="185" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="186" pos:column="13">snmplib_debug<pos:position pos:line="186" pos:column="26"/></name><argument_list pos:line="186" pos:column="26">(<argument><expr><literal type="number" pos:line="186" pos:column="27">2<pos:position pos:line="186" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="186" pos:column="30">"bad type returned (%x)\n"<pos:position pos:line="186" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="58">Var<pos:position pos:line="186" pos:column="61"/></name><operator pos:line="186" pos:column="61">-&gt;<pos:position pos:line="186" pos:column="66"/></operator><name pos:line="186" pos:column="63">type<pos:position pos:line="186" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="186" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="187" pos:column="13">snmp_set_api_error<pos:position pos:line="187" pos:column="31"/></name><argument_list pos:line="187" pos:column="31">(<argument><expr><name pos:line="187" pos:column="32">SNMPERR_PDU_PARSE<pos:position pos:line="187" pos:column="49"/></name></expr></argument>)<pos:position pos:line="187" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name pos:line="188" pos:column="13">PARSE_ERROR<pos:position pos:line="188" pos:column="24"/></name></expr>;<pos:position pos:line="188" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="189" pos:column="10"/></block></switch>			<comment type="block" pos:line="189" pos:column="33">/* End of var type switch */</comment>

        <if pos:line="191" pos:column="9">if <condition pos:line="191" pos:column="12">(<expr><name pos:line="191" pos:column="13">bufp<pos:position pos:line="191" pos:column="17"/></name> <operator pos:line="191" pos:column="18">==<pos:position pos:line="191" pos:column="20"/></operator> <name pos:line="191" pos:column="21">NULL<pos:position pos:line="191" pos:column="25"/></name></expr>)<pos:position pos:line="191" pos:column="26"/></condition><then pos:line="191" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><name pos:line="192" pos:column="13">PARSE_ERROR<pos:position pos:line="192" pos:column="24"/></name></expr>;<pos:position pos:line="192" pos:column="25"/></expr_stmt></block></then></if>

<cpp:if pos:line="194" pos:column="1">#<cpp:directive pos:line="194" pos:column="2">if<pos:position pos:line="194" pos:column="4"/></cpp:directive> <expr><name pos:line="194" pos:column="5">DEBUG_VARS_DECODE<pos:position pos:line="194" pos:column="22"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="195" pos:column="9">printf<pos:position pos:line="195" pos:column="15"/></name><argument_list pos:line="195" pos:column="15">(<argument><expr><literal type="string" pos:line="195" pos:column="16">"VARS:  Adding to list.\n"<pos:position pos:line="195" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="196" pos:column="1">#<cpp:directive pos:line="196" pos:column="2">endif<pos:position pos:line="196" pos:column="7"/></cpp:directive></cpp:endif>
        <comment type="block" pos:line="197" pos:column="9">/* Add variable to the list */</comment>
        <expr_stmt><expr><operator pos:line="198" pos:column="9">*<pos:position pos:line="198" pos:column="10"/></operator><name pos:line="198" pos:column="10">VarLastP<pos:position pos:line="198" pos:column="18"/></name> <operator pos:line="198" pos:column="19">=<pos:position pos:line="198" pos:column="20"/></operator> <name pos:line="198" pos:column="21">Var<pos:position pos:line="198" pos:column="24"/></name></expr>;<pos:position pos:line="198" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="199" pos:column="9">VarLastP<pos:position pos:line="199" pos:column="17"/></name> <operator pos:line="199" pos:column="18">=<pos:position pos:line="199" pos:column="19"/></operator> <operator pos:line="199" pos:column="20">&amp;<pos:position pos:line="199" pos:column="25"/></operator><operator pos:line="199" pos:column="21">(<pos:position pos:line="199" pos:column="22"/></operator><name><name pos:line="199" pos:column="22">Var<pos:position pos:line="199" pos:column="25"/></name><operator pos:line="199" pos:column="25">-&gt;<pos:position pos:line="199" pos:column="30"/></operator><name pos:line="199" pos:column="27">next_variable<pos:position pos:line="199" pos:column="40"/></name></name><operator pos:line="199" pos:column="40">)<pos:position pos:line="199" pos:column="41"/></operator></expr>;<pos:position pos:line="199" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="200" pos:column="6"/></block></while>
<cpp:undef pos:line="201" pos:column="1">#<cpp:directive pos:line="201" pos:column="2">undef<pos:position pos:line="201" pos:column="7"/></cpp:directive> <name pos:line="201" pos:column="8">PARSE_ERROR<pos:position pos:line="201" pos:column="19"/></name></cpp:undef>

    <return pos:line="203" pos:column="5">return <expr><operator pos:line="203" pos:column="12">(<pos:position pos:line="203" pos:column="13"/></operator><name pos:line="203" pos:column="13">bufp<pos:position pos:line="203" pos:column="17"/></name><operator pos:line="203" pos:column="17">)<pos:position pos:line="203" pos:column="18"/></operator></expr>;<pos:position pos:line="203" pos:column="19"/></return>
}<pos:position pos:line="204" pos:column="2"/></block></function></unit>
