<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_723_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">parseBytesLine<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">size_t<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type> <name pos:line="2" pos:column="25">bptr<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">char<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">units<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">token<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">double<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">d<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">m<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">u<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">u<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">parseBytesUnits<pos:position pos:line="9" pos:column="29"/></name><argument_list pos:line="9" pos:column="29">(<argument><expr><name pos:line="9" pos:column="30">units<pos:position pos:line="9" pos:column="35"/></name></expr></argument>)<pos:position pos:line="9" pos:column="36"/></argument_list></call><operator pos:line="9" pos:column="36">)<pos:position pos:line="9" pos:column="37"/></operator> <operator pos:line="9" pos:column="38">==<pos:position pos:line="9" pos:column="40"/></operator> <literal type="number" pos:line="9" pos:column="41">0<pos:position pos:line="9" pos:column="42"/></literal></expr>)<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43"> <block pos:line="9" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">self_destruct<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">()<pos:position pos:line="10" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="25"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">(<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">token<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name><name pos:line="14" pos:column="18">ConfigParser<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">::<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">NextToken<pos:position pos:line="14" pos:column="41"/></name></name><argument_list pos:line="14" pos:column="41">()<pos:position pos:line="14" pos:column="43"/></argument_list></call><operator pos:line="14" pos:column="43">)<pos:position pos:line="14" pos:column="44"/></operator> <operator pos:line="14" pos:column="45">==<pos:position pos:line="14" pos:column="47"/></operator> <name pos:line="14" pos:column="48">NULL<pos:position pos:line="14" pos:column="52"/></name></expr>)<pos:position pos:line="14" pos:column="53"/></condition><then pos:line="14" pos:column="53"> <block pos:line="14" pos:column="54">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">self_destruct<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">()<pos:position pos:line="15" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
        <return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><call><name pos:line="19" pos:column="9">strcmp<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name pos:line="19" pos:column="16">token<pos:position pos:line="19" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="23">"none"<pos:position pos:line="19" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="30"/></argument_list></call> <operator pos:line="19" pos:column="31">==<pos:position pos:line="19" pos:column="33"/></operator> <literal type="number" pos:line="19" pos:column="34">0<pos:position pos:line="19" pos:column="35"/></literal> <operator pos:line="19" pos:column="36">||<pos:position pos:line="19" pos:column="38"/></operator> <call><name pos:line="19" pos:column="39">strcmp<pos:position pos:line="19" pos:column="45"/></name><argument_list pos:line="19" pos:column="45">(<argument><expr><name pos:line="19" pos:column="46">token<pos:position pos:line="19" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="53">"-1"<pos:position pos:line="19" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call> <operator pos:line="19" pos:column="59">==<pos:position pos:line="19" pos:column="61"/></operator> <literal type="number" pos:line="19" pos:column="62">0<pos:position pos:line="19" pos:column="63"/></literal></expr>)<pos:position pos:line="19" pos:column="64"/></condition><then pos:line="19" pos:column="64"> <block pos:line="19" pos:column="65">{
        <expr_stmt><expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">bptr<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <cast type="static" pos:line="20" pos:column="17">static_cast<argument_list type="generic" pos:line="20" pos:column="28">&lt;<argument><expr><name pos:line="20" pos:column="29">size_t<pos:position pos:line="20" pos:column="35"/></name></expr></argument>&gt;<pos:position pos:line="20" pos:column="39"/></argument_list><argument_list pos:line="20" pos:column="36">(<argument><expr><operator pos:line="20" pos:column="37">-<pos:position pos:line="20" pos:column="38"/></operator><literal type="number" pos:line="20" pos:column="38">1<pos:position pos:line="20" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></cast></expr>;<pos:position pos:line="20" pos:column="41"/></expr_stmt>
        <return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="24" pos:column="5">d<pos:position pos:line="24" pos:column="6"/></name> <operator pos:line="24" pos:column="7">=<pos:position pos:line="24" pos:column="8"/></operator> <call><name pos:line="24" pos:column="9">xatof<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">token<pos:position pos:line="24" pos:column="20"/></name></expr></argument>)<pos:position pos:line="24" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>

    <expr_stmt><expr><name pos:line="26" pos:column="5">m<pos:position pos:line="26" pos:column="6"/></name> <operator pos:line="26" pos:column="7">=<pos:position pos:line="26" pos:column="8"/></operator> <name pos:line="26" pos:column="9">u<pos:position pos:line="26" pos:column="10"/></name></expr>;<pos:position pos:line="26" pos:column="11"/></expr_stmt>          <comment type="block" pos:line="26" pos:column="21">/* default to 'units' if none specified */</comment>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><literal type="number" pos:line="28" pos:column="9">0.0<pos:position pos:line="28" pos:column="12"/></literal> <operator pos:line="28" pos:column="13">==<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">d<pos:position pos:line="28" pos:column="17"/></name></expr>)<pos:position pos:line="28" pos:column="18"/></condition><then pos:line="28" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">void<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">)<pos:position pos:line="29" pos:column="15"/></operator> <literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></expr_stmt></block></then>
    <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if <condition pos:line="30" pos:column="13">(<expr><operator pos:line="30" pos:column="14">(<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="15">token<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name><name pos:line="30" pos:column="23">ConfigParser<pos:position pos:line="30" pos:column="35"/></name><operator pos:line="30" pos:column="35">::<pos:position pos:line="30" pos:column="37"/></operator><name pos:line="30" pos:column="37">NextToken<pos:position pos:line="30" pos:column="46"/></name></name><argument_list pos:line="30" pos:column="46">()<pos:position pos:line="30" pos:column="48"/></argument_list></call><operator pos:line="30" pos:column="48">)<pos:position pos:line="30" pos:column="49"/></operator> <operator pos:line="30" pos:column="50">==<pos:position pos:line="30" pos:column="52"/></operator> <name pos:line="30" pos:column="53">NULL<pos:position pos:line="30" pos:column="57"/></name></expr>)<pos:position pos:line="30" pos:column="58"/></condition><then pos:line="30" pos:column="58">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">3<pos:position pos:line="31" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="19">DBG_CRITICAL<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="33">"WARNING: No units on '"<pos:position pos:line="31" pos:column="57"/></literal> <operator pos:line="31" pos:column="58">&lt;&lt;<pos:position pos:line="31" pos:column="66"/></operator>
               <name pos:line="32" pos:column="16">config_input_line<pos:position pos:line="32" pos:column="33"/></name> <operator pos:line="32" pos:column="34">&lt;&lt;<pos:position pos:line="32" pos:column="42"/></operator> <literal type="string" pos:line="32" pos:column="37">"', assuming "<pos:position pos:line="32" pos:column="51"/></literal> <operator pos:line="32" pos:column="52">&lt;&lt;<pos:position pos:line="32" pos:column="60"/></operator>
               <name pos:line="33" pos:column="16">d<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">&lt;&lt;<pos:position pos:line="33" pos:column="26"/></operator> <literal type="string" pos:line="33" pos:column="21">" "<pos:position pos:line="33" pos:column="24"/></literal> <operator pos:line="33" pos:column="25">&lt;&lt;<pos:position pos:line="33" pos:column="33"/></operator>  <name pos:line="33" pos:column="29">units<pos:position pos:line="33" pos:column="34"/></name></expr></argument>  )<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="34" pos:column="5">else <if pos:line="34" pos:column="10">if <condition pos:line="34" pos:column="13">(<expr><operator pos:line="34" pos:column="14">(<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">m<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <call><name pos:line="34" pos:column="19">parseBytesUnits<pos:position pos:line="34" pos:column="34"/></name><argument_list pos:line="34" pos:column="34">(<argument><expr><name pos:line="34" pos:column="35">token<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call><operator pos:line="34" pos:column="41">)<pos:position pos:line="34" pos:column="42"/></operator> <operator pos:line="34" pos:column="43">==<pos:position pos:line="34" pos:column="45"/></operator> <literal type="number" pos:line="34" pos:column="46">0<pos:position pos:line="34" pos:column="47"/></literal></expr>)<pos:position pos:line="34" pos:column="48"/></condition><then pos:line="34" pos:column="48"> <block pos:line="34" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">self_destruct<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">()<pos:position pos:line="35" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>
        <return pos:line="36" pos:column="9">return;<pos:position pos:line="36" pos:column="16"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><operator pos:line="39" pos:column="5">*<pos:position pos:line="39" pos:column="6"/></operator><name pos:line="39" pos:column="6">bptr<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <cast type="static" pos:line="39" pos:column="13">static_cast<argument_list type="generic" pos:line="39" pos:column="24">&lt;<argument><expr><name pos:line="39" pos:column="25">size_t<pos:position pos:line="39" pos:column="31"/></name></expr></argument>&gt;<pos:position pos:line="39" pos:column="35"/></argument_list><argument_list pos:line="39" pos:column="32">(<argument><expr><name pos:line="39" pos:column="33">m<pos:position pos:line="39" pos:column="34"/></name> <operator pos:line="39" pos:column="35">*<pos:position pos:line="39" pos:column="36"/></operator> <name pos:line="39" pos:column="37">d<pos:position pos:line="39" pos:column="38"/></name> <operator pos:line="39" pos:column="39">/<pos:position pos:line="39" pos:column="40"/></operator> <name pos:line="39" pos:column="41">u<pos:position pos:line="39" pos:column="42"/></name></expr></argument>)<pos:position pos:line="39" pos:column="43"/></argument_list></cast></expr>;<pos:position pos:line="39" pos:column="44"/></expr_stmt>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><cast type="static" pos:line="41" pos:column="9">static_cast<argument_list type="generic" pos:line="41" pos:column="20">&lt;<argument><expr><name pos:line="41" pos:column="21">double<pos:position pos:line="41" pos:column="27"/></name></expr></argument>&gt;<pos:position pos:line="41" pos:column="31"/></argument_list><argument_list pos:line="41" pos:column="28">(<argument><expr><operator pos:line="41" pos:column="29">*<pos:position pos:line="41" pos:column="30"/></operator><name pos:line="41" pos:column="30">bptr<pos:position pos:line="41" pos:column="34"/></name></expr></argument>)<pos:position pos:line="41" pos:column="35"/></argument_list></cast> <operator pos:line="41" pos:column="36">*<pos:position pos:line="41" pos:column="37"/></operator> <literal type="number" pos:line="41" pos:column="38">2<pos:position pos:line="41" pos:column="39"/></literal> <operator pos:line="41" pos:column="40">!=<pos:position pos:line="41" pos:column="42"/></operator> <operator pos:line="41" pos:column="43">(<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="44">m<pos:position pos:line="41" pos:column="45"/></name> <operator pos:line="41" pos:column="46">*<pos:position pos:line="41" pos:column="47"/></operator> <name pos:line="41" pos:column="48">d<pos:position pos:line="41" pos:column="49"/></name> <operator pos:line="41" pos:column="50">/<pos:position pos:line="41" pos:column="51"/></operator> <name pos:line="41" pos:column="52">u<pos:position pos:line="41" pos:column="53"/></name><operator pos:line="41" pos:column="53">)<pos:position pos:line="41" pos:column="54"/></operator> <operator pos:line="41" pos:column="55">*<pos:position pos:line="41" pos:column="56"/></operator> <literal type="number" pos:line="41" pos:column="57">2<pos:position pos:line="41" pos:column="58"/></literal></expr>)<pos:position pos:line="41" pos:column="59"/></condition><then pos:line="41" pos:column="59"> <block pos:line="41" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">debugs<pos:position pos:line="42" pos:column="15"/></name><argument_list pos:line="42" pos:column="15">(<argument><expr><literal type="number" pos:line="42" pos:column="16">3<pos:position pos:line="42" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="19">DBG_CRITICAL<pos:position pos:line="42" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="33">"ERROR: Invalid value '"<pos:position pos:line="42" pos:column="57"/></literal> <operator pos:line="42" pos:column="58">&lt;&lt;<pos:position pos:line="42" pos:column="66"/></operator>
               <name pos:line="43" pos:column="16">d<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">&lt;&lt;<pos:position pos:line="43" pos:column="26"/></operator> <literal type="string" pos:line="43" pos:column="21">" "<pos:position pos:line="43" pos:column="24"/></literal> <operator pos:line="43" pos:column="25">&lt;&lt;<pos:position pos:line="43" pos:column="33"/></operator> <name pos:line="43" pos:column="28">token<pos:position pos:line="43" pos:column="33"/></name> <operator pos:line="43" pos:column="34">&lt;&lt;<pos:position pos:line="43" pos:column="42"/></operator> <literal type="string" pos:line="43" pos:column="37">": integer overflow (size_t)."<pos:position pos:line="43" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">self_destruct<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">()<pos:position pos:line="44" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
