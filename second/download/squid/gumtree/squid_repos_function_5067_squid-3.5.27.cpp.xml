<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5067_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <specifier pos:line="1" pos:column="6">const<pos:position pos:line="1" pos:column="11"/></specifier> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name><name pos:line="2" pos:column="1">AnyP<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">UriScheme<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">c_str<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">()<pos:position pos:line="2" pos:column="25"/></parameter_list> <specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">theScheme_<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">==<pos:position pos:line="4" pos:column="22"/></operator> <name><name pos:line="4" pos:column="23">AnyP<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">::<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="29">PROTO_UNKNOWN<pos:position pos:line="4" pos:column="42"/></name></name></expr>)<pos:position pos:line="4" pos:column="43"/></condition><then pos:line="4" pos:column="43">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="string" pos:line="5" pos:column="16">"(unknown)"<pos:position pos:line="5" pos:column="27"/></literal></expr>;<pos:position pos:line="5" pos:column="28"/></return></block></then></if>

    <decl_stmt><decl><specifier pos:line="7" pos:column="5">static<pos:position pos:line="7" pos:column="11"/></specifier> <type><name pos:line="7" pos:column="12">char<pos:position pos:line="7" pos:column="16"/></name></type> <name><name pos:line="7" pos:column="17">out<pos:position pos:line="7" pos:column="20"/></name><index pos:line="7" pos:column="20">[<expr><name pos:line="7" pos:column="21">BUFSIZ<pos:position pos:line="7" pos:column="27"/></name></expr>]<pos:position pos:line="7" pos:column="28"/></index></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">p<pos:position pos:line="8" pos:column="10"/></name> <init pos:line="8" pos:column="11">= <expr><literal type="number" pos:line="8" pos:column="13">0<pos:position pos:line="8" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">theScheme_<pos:position pos:line="10" pos:column="19"/></name> <operator pos:line="10" pos:column="20">&gt;<pos:position pos:line="10" pos:column="24"/></operator> <name><name pos:line="10" pos:column="22">AnyP<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">::<pos:position pos:line="10" pos:column="28"/></operator><name pos:line="10" pos:column="28">PROTO_NONE<pos:position pos:line="10" pos:column="38"/></name></name> <operator pos:line="10" pos:column="39">&amp;&amp;<pos:position pos:line="10" pos:column="49"/></operator> <name pos:line="10" pos:column="42">theScheme_<pos:position pos:line="10" pos:column="52"/></name> <operator pos:line="10" pos:column="53">&lt;<pos:position pos:line="10" pos:column="57"/></operator> <name><name pos:line="10" pos:column="55">AnyP<pos:position pos:line="10" pos:column="59"/></name><operator pos:line="10" pos:column="59">::<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="61">PROTO_MAX<pos:position pos:line="10" pos:column="70"/></name></name></expr>)<pos:position pos:line="10" pos:column="71"/></condition><then pos:line="10" pos:column="71"> <block pos:line="10" pos:column="72">{
        <decl_stmt><decl><type><specifier pos:line="11" pos:column="9">const<pos:position pos:line="11" pos:column="14"/></specifier> <name pos:line="11" pos:column="15">char<pos:position pos:line="11" pos:column="19"/></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">in<pos:position pos:line="11" pos:column="23"/></name> <init pos:line="11" pos:column="24">= <expr><name><name pos:line="11" pos:column="26">AnyP<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">::<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">ProtocolType_str<pos:position pos:line="11" pos:column="48"/></name><index pos:line="11" pos:column="48">[<expr><name pos:line="11" pos:column="49">theScheme_<pos:position pos:line="11" pos:column="59"/></name></expr>]<pos:position pos:line="11" pos:column="60"/></index></name></expr></init></decl>;<pos:position pos:line="11" pos:column="61"/></decl_stmt>
        <for pos:line="12" pos:column="9">for <control pos:line="12" pos:column="13">(<init pos:line="12" pos:column="14">;<pos:position pos:line="12" pos:column="15"/></init> <condition><expr><name pos:line="12" pos:column="16">p<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">&lt;<pos:position pos:line="12" pos:column="22"/></operator> <operator pos:line="12" pos:column="20">(<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">BUFSIZ<pos:position pos:line="12" pos:column="27"/></name><operator pos:line="12" pos:column="27">-<pos:position pos:line="12" pos:column="28"/></operator><literal type="number" pos:line="12" pos:column="28">1<pos:position pos:line="12" pos:column="29"/></literal><operator pos:line="12" pos:column="29">)<pos:position pos:line="12" pos:column="30"/></operator> <operator pos:line="12" pos:column="31">&amp;&amp;<pos:position pos:line="12" pos:column="41"/></operator> <name><name pos:line="12" pos:column="34">in<pos:position pos:line="12" pos:column="36"/></name><index pos:line="12" pos:column="36">[<expr><name pos:line="12" pos:column="37">p<pos:position pos:line="12" pos:column="38"/></name></expr>]<pos:position pos:line="12" pos:column="39"/></index></name> <operator pos:line="12" pos:column="40">!=<pos:position pos:line="12" pos:column="42"/></operator> <literal type="char" pos:line="12" pos:column="43">'\0'<pos:position pos:line="12" pos:column="47"/></literal></expr>;<pos:position pos:line="12" pos:column="48"/></condition> <incr><expr><operator pos:line="12" pos:column="49">++<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="51">p<pos:position pos:line="12" pos:column="52"/></name></expr></incr>)<pos:position pos:line="12" pos:column="53"/></control>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="13" pos:column="13">out<pos:position pos:line="13" pos:column="16"/></name><index pos:line="13" pos:column="16">[<expr><name pos:line="13" pos:column="17">p<pos:position pos:line="13" pos:column="18"/></name></expr>]<pos:position pos:line="13" pos:column="19"/></index></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <call><name pos:line="13" pos:column="22">xtolower<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name><name pos:line="13" pos:column="31">in<pos:position pos:line="13" pos:column="33"/></name><index pos:line="13" pos:column="33">[<expr><name pos:line="13" pos:column="34">p<pos:position pos:line="13" pos:column="35"/></name></expr>]<pos:position pos:line="13" pos:column="36"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt></block></for>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">out<pos:position pos:line="15" pos:column="8"/></name><index pos:line="15" pos:column="8">[<expr><name pos:line="15" pos:column="9">p<pos:position pos:line="15" pos:column="10"/></name></expr>]<pos:position pos:line="15" pos:column="11"/></index></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <literal type="char" pos:line="15" pos:column="14">'\0'<pos:position pos:line="15" pos:column="18"/></literal></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">out<pos:position pos:line="16" pos:column="15"/></name></expr>;<pos:position pos:line="16" pos:column="16"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
