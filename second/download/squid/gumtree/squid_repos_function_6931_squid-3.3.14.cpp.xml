<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6931_squid-3.3.14.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">squid_strnstr<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">s<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">char<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">find<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">size_t<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">slen<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">c<pos:position pos:line="4" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="13">sc<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">len<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">c<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <operator pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">find<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">++<pos:position pos:line="7" pos:column="21"/></operator><operator pos:line="7" pos:column="21">)<pos:position pos:line="7" pos:column="22"/></operator> <operator pos:line="7" pos:column="23">!=<pos:position pos:line="7" pos:column="25"/></operator> <literal type="char" pos:line="7" pos:column="26">'\0'<pos:position pos:line="7" pos:column="30"/></literal></expr>)<pos:position pos:line="7" pos:column="31"/></condition><then pos:line="7" pos:column="31"> <block pos:line="7" pos:column="32">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">len<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <call><name pos:line="8" pos:column="15">strlen<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">find<pos:position pos:line="8" pos:column="26"/></name></expr></argument>)<pos:position pos:line="8" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="28"/></expr_stmt>
        <do pos:line="9" pos:column="9">do <block pos:line="9" pos:column="12">{
            <do pos:line="10" pos:column="13">do <block pos:line="10" pos:column="16">{
                <if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><name pos:line="11" pos:column="21">slen<pos:position pos:line="11" pos:column="25"/></name> <operator pos:line="11" pos:column="26">&lt;<pos:position pos:line="11" pos:column="30"/></operator> <literal type="number" pos:line="11" pos:column="28">1<pos:position pos:line="11" pos:column="29"/></literal> <operator pos:line="11" pos:column="30">||<pos:position pos:line="11" pos:column="32"/></operator> <operator pos:line="11" pos:column="33">(<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">sc<pos:position pos:line="11" pos:column="36"/></name> <operator pos:line="11" pos:column="37">=<pos:position pos:line="11" pos:column="38"/></operator> <operator pos:line="11" pos:column="39">*<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="40">s<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">)<pos:position pos:line="11" pos:column="42"/></operator> <operator pos:line="11" pos:column="43">==<pos:position pos:line="11" pos:column="45"/></operator> <literal type="char" pos:line="11" pos:column="46">'\0'<pos:position pos:line="11" pos:column="50"/></literal></expr>)<pos:position pos:line="11" pos:column="51"/></condition><then pos:line="11" pos:column="51">
                    <block type="pseudo"><return pos:line="12" pos:column="21">return <expr><operator pos:line="12" pos:column="28">(<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="29">NULL<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">)<pos:position pos:line="12" pos:column="34"/></operator></expr>;<pos:position pos:line="12" pos:column="35"/></return></block></then></if>
                <expr_stmt><expr><operator pos:line="13" pos:column="17">--<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">slen<pos:position pos:line="13" pos:column="23"/></name></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="14" pos:column="17">++<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">s<pos:position pos:line="14" pos:column="20"/></name></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
            }<pos:position pos:line="15" pos:column="14"/></block> while <condition pos:line="15" pos:column="21">(<expr><name pos:line="15" pos:column="22">sc<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">!=<pos:position pos:line="15" pos:column="27"/></operator> <name pos:line="15" pos:column="28">c<pos:position pos:line="15" pos:column="29"/></name></expr>)<pos:position pos:line="15" pos:column="30"/></condition>;<pos:position pos:line="15" pos:column="31"/></do>
            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><name pos:line="16" pos:column="17">len<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">&gt;<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="23">slen<pos:position pos:line="16" pos:column="27"/></name></expr>)<pos:position pos:line="16" pos:column="28"/></condition><then pos:line="16" pos:column="28">
                <block type="pseudo"><return pos:line="17" pos:column="17">return <expr><operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="25">NULL<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">)<pos:position pos:line="17" pos:column="30"/></operator></expr>;<pos:position pos:line="17" pos:column="31"/></return></block></then></if>
        }<pos:position pos:line="18" pos:column="10"/></block> while <condition pos:line="18" pos:column="17">(<expr><call><name pos:line="18" pos:column="18">strncmp<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name pos:line="18" pos:column="26">s<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="29">find<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">len<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call> <operator pos:line="18" pos:column="40">!=<pos:position pos:line="18" pos:column="42"/></operator> <literal type="number" pos:line="18" pos:column="43">0<pos:position pos:line="18" pos:column="44"/></literal></expr>)<pos:position pos:line="18" pos:column="45"/></condition>;<pos:position pos:line="18" pos:column="46"/></do>
        <expr_stmt><expr><operator pos:line="19" pos:column="9">--<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="11">s<pos:position pos:line="19" pos:column="12"/></name></expr>;<pos:position pos:line="19" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">s<pos:position pos:line="21" pos:column="13"/></name></expr>;<pos:position pos:line="21" pos:column="14"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
