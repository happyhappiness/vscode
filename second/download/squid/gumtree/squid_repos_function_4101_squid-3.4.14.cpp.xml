<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4101_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">finishNullOrEmptyBodyPreview<pos:position pos:line="1" pos:column="61"/></name></name><parameter_list pos:line="1" pos:column="61">(<parameter><decl><type><name pos:line="1" pos:column="62">MemBuf<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">&amp;<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="70">buf<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><operator pos:line="3" pos:column="10">!<pos:position pos:line="3" pos:column="11"/></operator><call><name><name pos:line="3" pos:column="11">virginBodyWriting<pos:position pos:line="3" pos:column="28"/></name><operator pos:line="3" pos:column="28">.<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="29">active<pos:position pos:line="3" pos:column="35"/></name></name><argument_list pos:line="3" pos:column="35">()<pos:position pos:line="3" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="39"/></expr_stmt> <comment type="line" pos:line="3" pos:column="40">// one reason we handle it here</comment>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><operator pos:line="4" pos:column="10">!<pos:position pos:line="4" pos:column="11"/></operator><name><name pos:line="4" pos:column="11">virgin<pos:position pos:line="4" pos:column="17"/></name><operator pos:line="4" pos:column="17">.<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">body_pipe<pos:position pos:line="4" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>          <comment type="line" pos:line="4" pos:column="39">// another reason we handle it here</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">Must<pos:position pos:line="5" pos:column="9"/></name><argument_list pos:line="5" pos:column="9">(<argument><expr><operator pos:line="5" pos:column="10">!<pos:position pos:line="5" pos:column="11"/></operator><call><name><name pos:line="5" pos:column="11">preview<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">.<pos:position pos:line="5" pos:column="19"/></operator><name pos:line="5" pos:column="19">ad<pos:position pos:line="5" pos:column="21"/></name></name><argument_list pos:line="5" pos:column="21">()<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="25"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// do not add last-chunk because our Encapsulated header says null-body</comment>
    <comment type="line" pos:line="8" pos:column="5">// addLastRequestChunk(buf);</comment>
    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">preview<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">.<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">wrote<pos:position pos:line="9" pos:column="18"/></name></name><argument_list pos:line="9" pos:column="18">(<argument><expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="9" pos:column="22">true<pos:position pos:line="9" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">Must<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><call><name><name pos:line="11" pos:column="10">preview<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">done<pos:position pos:line="11" pos:column="22"/></name></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">Must<pos:position pos:line="12" pos:column="9"/></name><argument_list pos:line="12" pos:column="9">(<argument><expr><call><name><name pos:line="12" pos:column="10">preview<pos:position pos:line="12" pos:column="17"/></name><operator pos:line="12" pos:column="17">.<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">ieof<pos:position pos:line="12" pos:column="22"/></name></name><argument_list pos:line="12" pos:column="22">()<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
