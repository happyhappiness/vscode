<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1140_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">ipcSend<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">int<pos:position pos:line="2" pos:column="12"/></name></type> <name pos:line="2" pos:column="13">cwfd<pos:position pos:line="2" pos:column="17"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">buf<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">int<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">len<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">x<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><call><name pos:line="4" pos:column="13">send<pos:position pos:line="4" pos:column="17"/></name><argument_list pos:line="4" pos:column="17">(<argument><expr><name pos:line="4" pos:column="18">cwfd<pos:position pos:line="4" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="4" pos:column="24">(<pos:position pos:line="4" pos:column="25"/></operator><specifier pos:line="4" pos:column="25">const<pos:position pos:line="4" pos:column="30"/></specifier> <name pos:line="4" pos:column="31">void<pos:position pos:line="4" pos:column="35"/></name> <operator pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></operator><operator pos:line="4" pos:column="37">)<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">buf<pos:position pos:line="4" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="43">len<pos:position pos:line="4" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="48">0<pos:position pos:line="4" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="51"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">x<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">&lt;<pos:position pos:line="6" pos:column="15"/></operator> <literal type="number" pos:line="6" pos:column="13">0<pos:position pos:line="6" pos:column="14"/></literal></expr>)<pos:position pos:line="6" pos:column="15"/></condition><then pos:line="6" pos:column="15"> <block pos:line="6" pos:column="16">{
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">int<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">xerrno<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">errno<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">54<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">DBG_CRITICAL<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="34">"sendto FD "<pos:position pos:line="8" pos:column="46"/></literal> <operator pos:line="8" pos:column="47">&lt;&lt;<pos:position pos:line="8" pos:column="55"/></operator> <name pos:line="8" pos:column="50">cwfd<pos:position pos:line="8" pos:column="54"/></name> <operator pos:line="8" pos:column="55">&lt;&lt;<pos:position pos:line="8" pos:column="63"/></operator> <literal type="string" pos:line="8" pos:column="58">": "<pos:position pos:line="8" pos:column="62"/></literal> <operator pos:line="8" pos:column="63">&lt;&lt;<pos:position pos:line="8" pos:column="71"/></operator> <call><name pos:line="8" pos:column="66">xstrerr<pos:position pos:line="8" pos:column="73"/></name><argument_list pos:line="8" pos:column="73">(<argument><expr><name pos:line="8" pos:column="74">xerrno<pos:position pos:line="8" pos:column="80"/></name></expr></argument>)<pos:position pos:line="8" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">54<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="20">DBG_CRITICAL<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="34">"ipcCreate: CHILD: hello write test failed"<pos:position pos:line="9" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="79"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">x<pos:position pos:line="12" pos:column="13"/></name></expr>;<pos:position pos:line="12" pos:column="14"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
