<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2174_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">ConfigParser<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">TokenParse<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier> <modifier pos:line="2" pos:column="39">&amp;<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="40">nextToken<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="51">ConfigParser<pos:position pos:line="2" pos:column="63"/></name><operator pos:line="2" pos:column="63">::<pos:position pos:line="2" pos:column="65"/></operator><name pos:line="2" pos:column="65">TokenType<pos:position pos:line="2" pos:column="74"/></name></name> <modifier pos:line="2" pos:column="75">&amp;<pos:position pos:line="2" pos:column="80"/></modifier></type><name pos:line="2" pos:column="76">type<pos:position pos:line="2" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="81"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">nextToken<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">||<pos:position pos:line="4" pos:column="22"/></operator> <operator pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">nextToken<pos:position pos:line="4" pos:column="33"/></name> <operator pos:line="4" pos:column="34">==<pos:position pos:line="4" pos:column="36"/></operator> <literal type="char" pos:line="4" pos:column="37">'\0'<pos:position pos:line="4" pos:column="41"/></literal></expr>)<pos:position pos:line="4" pos:column="42"/></condition><then pos:line="4" pos:column="42">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">NULL<pos:position pos:line="5" pos:column="20"/></name></expr>;<pos:position pos:line="5" pos:column="21"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="6" pos:column="5">type<pos:position pos:line="6" pos:column="9"/></name> <operator pos:line="6" pos:column="10">=<pos:position pos:line="6" pos:column="11"/></operator> <name><name pos:line="6" pos:column="12">ConfigParser<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">::<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">SimpleToken<pos:position pos:line="6" pos:column="37"/></name></name></expr>;<pos:position pos:line="6" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">nextToken<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">+=<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">strspn<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><name pos:line="7" pos:column="25">nextToken<pos:position pos:line="7" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="36">w_space<pos:position pos:line="7" pos:column="43"/></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">nextToken<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">==<pos:position pos:line="9" pos:column="22"/></operator> <literal type="char" pos:line="9" pos:column="23">'#'<pos:position pos:line="9" pos:column="26"/></literal></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></return></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">ConfigParser<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">::<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">RecognizeQuotedValues<pos:position pos:line="12" pos:column="44"/></name></name> <operator pos:line="12" pos:column="45">&amp;&amp;<pos:position pos:line="12" pos:column="55"/></operator> <operator pos:line="12" pos:column="48">(<pos:position pos:line="12" pos:column="49"/></operator><operator pos:line="12" pos:column="49">*<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="50">nextToken<pos:position pos:line="12" pos:column="59"/></name> <operator pos:line="12" pos:column="60">==<pos:position pos:line="12" pos:column="62"/></operator> <literal type="char" pos:line="12" pos:column="63">'"'<pos:position pos:line="12" pos:column="66"/></literal> <operator pos:line="12" pos:column="67">||<pos:position pos:line="12" pos:column="69"/></operator> <operator pos:line="12" pos:column="70">*<pos:position pos:line="12" pos:column="71"/></operator><name pos:line="12" pos:column="71">nextToken<pos:position pos:line="12" pos:column="80"/></name> <operator pos:line="12" pos:column="81">==<pos:position pos:line="12" pos:column="83"/></operator> <literal type="char" pos:line="12" pos:column="84">'\''<pos:position pos:line="12" pos:column="88"/></literal><operator pos:line="12" pos:column="88">)<pos:position pos:line="12" pos:column="89"/></operator></expr>)<pos:position pos:line="12" pos:column="90"/></condition><then pos:line="12" pos:column="90"> <block pos:line="12" pos:column="91">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">type<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name><name pos:line="13" pos:column="16">ConfigParser<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">::<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="30">QuotedToken<pos:position pos:line="13" pos:column="41"/></name></name></expr>;<pos:position pos:line="13" pos:column="42"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">token<pos:position pos:line="14" pos:column="20"/></name> <init pos:line="14" pos:column="21">= <expr><call><name pos:line="14" pos:column="23">xstrdup<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><call><name pos:line="14" pos:column="31">UnQuote<pos:position pos:line="14" pos:column="38"/></name><argument_list pos:line="14" pos:column="38">(<argument><expr><name pos:line="14" pos:column="39">nextToken<pos:position pos:line="14" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="50">&amp;<pos:position pos:line="14" pos:column="55"/></operator><name pos:line="14" pos:column="51">nextToken<pos:position pos:line="14" pos:column="60"/></name></expr></argument>)<pos:position pos:line="14" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="63"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="15" pos:column="9">CfgLineTokens_<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">.<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="24">push<pos:position pos:line="15" pos:column="28"/></name></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">token<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">token<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="19" pos:column="5">const<pos:position pos:line="19" pos:column="10"/></specifier> <name pos:line="19" pos:column="11">char<pos:position pos:line="19" pos:column="15"/></name> <modifier pos:line="19" pos:column="16">*<pos:position pos:line="19" pos:column="17"/></modifier></type><name pos:line="19" pos:column="17">tokenStart<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><name pos:line="19" pos:column="30">nextToken<pos:position pos:line="19" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="20" pos:column="5">const<pos:position pos:line="20" pos:column="10"/></specifier> <name pos:line="20" pos:column="11">char<pos:position pos:line="20" pos:column="15"/></name> <modifier pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></modifier></type><name pos:line="20" pos:column="17">sep<pos:position pos:line="20" pos:column="20"/></name></decl>;<pos:position pos:line="20" pos:column="21"/></decl_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">ConfigParser<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">::<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="23">ParseKvPair_<pos:position pos:line="21" pos:column="35"/></name></name></expr>)<pos:position pos:line="21" pos:column="36"/></condition><then pos:line="21" pos:column="36"> <block pos:line="21" pos:column="37">{
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name><name pos:line="22" pos:column="13">ConfigParser<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">::<pos:position pos:line="22" pos:column="27"/></operator><name pos:line="22" pos:column="27">KvPairState_<pos:position pos:line="22" pos:column="39"/></name></name> <operator pos:line="22" pos:column="40">==<pos:position pos:line="22" pos:column="42"/></operator> <name><name pos:line="22" pos:column="43">ConfigParser<pos:position pos:line="22" pos:column="55"/></name><operator pos:line="22" pos:column="55">::<pos:position pos:line="22" pos:column="57"/></operator><name pos:line="22" pos:column="57">atParseKey<pos:position pos:line="22" pos:column="67"/></name></name></expr>)<pos:position pos:line="22" pos:column="68"/></condition><then pos:line="22" pos:column="68">
            <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="13">sep<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <literal type="string" pos:line="23" pos:column="19">"="<pos:position pos:line="23" pos:column="22"/></literal></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt></block></then>
        <else pos:line="24" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="13">sep<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">w_space<pos:position pos:line="25" pos:column="26"/></name></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt></block></else></if>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <elseif pos:line="26" pos:column="7">else <if pos:line="26" pos:column="12">if <condition pos:line="26" pos:column="15">(<expr><name><name pos:line="26" pos:column="16">ConfigParser<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">::<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">ParseQuotedOrToEol_<pos:position pos:line="26" pos:column="49"/></name></name></expr>)<pos:position pos:line="26" pos:column="50"/></condition><then pos:line="26" pos:column="50">
        <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="9">sep<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <literal type="string" pos:line="27" pos:column="15">"\n"<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="28" pos:column="5">else <if pos:line="28" pos:column="10">if <condition pos:line="28" pos:column="13">(<expr><name><name pos:line="28" pos:column="14">ConfigParser<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">::<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="28">RecognizeQuotedPair_<pos:position pos:line="28" pos:column="48"/></name></name></expr>)<pos:position pos:line="28" pos:column="49"/></condition><then pos:line="28" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="9">sep<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <name pos:line="29" pos:column="15">w_space<pos:position pos:line="29" pos:column="22"/></name> <literal type="string" pos:line="29" pos:column="23">"\\"<pos:position pos:line="29" pos:column="27"/></literal></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="30" pos:column="5">else <if pos:line="30" pos:column="10">if <condition pos:line="30" pos:column="13">(<expr><operator pos:line="30" pos:column="14">!<pos:position pos:line="30" pos:column="15"/></operator><name><name pos:line="30" pos:column="15">ConfigParser<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">::<pos:position pos:line="30" pos:column="29"/></operator><name pos:line="30" pos:column="29">RecognizeQuotedValues<pos:position pos:line="30" pos:column="50"/></name></name> <operator pos:line="30" pos:column="51">||<pos:position pos:line="30" pos:column="53"/></operator> <operator pos:line="30" pos:column="54">*<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="55">nextToken<pos:position pos:line="30" pos:column="64"/></name> <operator pos:line="30" pos:column="65">==<pos:position pos:line="30" pos:column="67"/></operator> <literal type="char" pos:line="30" pos:column="68">'('<pos:position pos:line="30" pos:column="71"/></literal></expr>)<pos:position pos:line="30" pos:column="72"/></condition><then pos:line="30" pos:column="72">
        <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="9">sep<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <name pos:line="31" pos:column="15">w_space<pos:position pos:line="31" pos:column="22"/></name></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt></block></then></if></elseif>
    <else pos:line="32" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="9">sep<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">w_space<pos:position pos:line="33" pos:column="22"/></name> <literal type="string" pos:line="33" pos:column="23">"("<pos:position pos:line="33" pos:column="26"/></literal></expr>;<pos:position pos:line="33" pos:column="27"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name pos:line="34" pos:column="5">nextToken<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">+=<pos:position pos:line="34" pos:column="17"/></operator> <call><name pos:line="34" pos:column="18">strcspn<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name pos:line="34" pos:column="26">nextToken<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">sep<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>

    <while pos:line="36" pos:column="5">while <condition pos:line="36" pos:column="11">(<expr><name><name pos:line="36" pos:column="12">ConfigParser<pos:position pos:line="36" pos:column="24"/></name><operator pos:line="36" pos:column="24">::<pos:position pos:line="36" pos:column="26"/></operator><name pos:line="36" pos:column="26">RecognizeQuotedPair_<pos:position pos:line="36" pos:column="46"/></name></name> <operator pos:line="36" pos:column="47">&amp;&amp;<pos:position pos:line="36" pos:column="57"/></operator> <operator pos:line="36" pos:column="50">*<pos:position pos:line="36" pos:column="51"/></operator><name pos:line="36" pos:column="51">nextToken<pos:position pos:line="36" pos:column="60"/></name> <operator pos:line="36" pos:column="61">==<pos:position pos:line="36" pos:column="63"/></operator> <literal type="char" pos:line="36" pos:column="64">'\\'<pos:position pos:line="36" pos:column="68"/></literal></expr>)<pos:position pos:line="36" pos:column="69"/></condition> <block pos:line="36" pos:column="70">{
        <comment type="line" pos:line="37" pos:column="9">// NP: do not permit \0 terminator to be escaped.</comment>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">*<pos:position pos:line="38" pos:column="14"/></operator><operator pos:line="38" pos:column="14">(<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">nextToken<pos:position pos:line="38" pos:column="24"/></name><operator pos:line="38" pos:column="24">+<pos:position pos:line="38" pos:column="25"/></operator><literal type="number" pos:line="38" pos:column="25">1<pos:position pos:line="38" pos:column="26"/></literal><operator pos:line="38" pos:column="26">)<pos:position pos:line="38" pos:column="27"/></operator> <operator pos:line="38" pos:column="28">&amp;&amp;<pos:position pos:line="38" pos:column="38"/></operator> <operator pos:line="38" pos:column="31">*<pos:position pos:line="38" pos:column="32"/></operator><operator pos:line="38" pos:column="32">(<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="33">nextToken<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">+<pos:position pos:line="38" pos:column="43"/></operator><literal type="number" pos:line="38" pos:column="43">1<pos:position pos:line="38" pos:column="44"/></literal><operator pos:line="38" pos:column="44">)<pos:position pos:line="38" pos:column="45"/></operator> <operator pos:line="38" pos:column="46">!=<pos:position pos:line="38" pos:column="48"/></operator> <literal type="char" pos:line="38" pos:column="49">'\r'<pos:position pos:line="38" pos:column="53"/></literal> <operator pos:line="38" pos:column="54">&amp;&amp;<pos:position pos:line="38" pos:column="64"/></operator> <operator pos:line="38" pos:column="57">*<pos:position pos:line="38" pos:column="58"/></operator><operator pos:line="38" pos:column="58">(<pos:position pos:line="38" pos:column="59"/></operator><name pos:line="38" pos:column="59">nextToken<pos:position pos:line="38" pos:column="68"/></name><operator pos:line="38" pos:column="68">+<pos:position pos:line="38" pos:column="69"/></operator><literal type="number" pos:line="38" pos:column="69">1<pos:position pos:line="38" pos:column="70"/></literal><operator pos:line="38" pos:column="70">)<pos:position pos:line="38" pos:column="71"/></operator> <operator pos:line="38" pos:column="72">!=<pos:position pos:line="38" pos:column="74"/></operator> <literal type="char" pos:line="38" pos:column="75">'\n'<pos:position pos:line="38" pos:column="79"/></literal></expr>)<pos:position pos:line="38" pos:column="80"/></condition><then pos:line="38" pos:column="80"> <block pos:line="38" pos:column="81">{
            <expr_stmt><expr><name pos:line="39" pos:column="13">nextToken<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">+=<pos:position pos:line="39" pos:column="25"/></operator> <literal type="number" pos:line="39" pos:column="26">2<pos:position pos:line="39" pos:column="27"/></literal></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt> <comment type="line" pos:line="39" pos:column="29">// skip the quoted-pair (\-escaped) character</comment>
            <expr_stmt><expr><name pos:line="40" pos:column="13">nextToken<pos:position pos:line="40" pos:column="22"/></name> <operator pos:line="40" pos:column="23">+=<pos:position pos:line="40" pos:column="25"/></operator> <call><name pos:line="40" pos:column="26">strcspn<pos:position pos:line="40" pos:column="33"/></name><argument_list pos:line="40" pos:column="33">(<argument><expr><name pos:line="40" pos:column="34">nextToken<pos:position pos:line="40" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="45">sep<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="41" pos:column="10"/></block></then> <else pos:line="41" pos:column="11">else <block pos:line="41" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">debugs<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><literal type="number" pos:line="42" pos:column="20">3<pos:position pos:line="42" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="23">DBG_CRITICAL<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="37">"FATAL: Unescaped '\' character in regex pattern: "<pos:position pos:line="42" pos:column="88"/></literal> <operator pos:line="42" pos:column="89">&lt;&lt;<pos:position pos:line="42" pos:column="97"/></operator> <name pos:line="42" pos:column="92">tokenStart<pos:position pos:line="42" pos:column="102"/></name></expr></argument>)<pos:position pos:line="42" pos:column="103"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="104"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">self_destruct<pos:position pos:line="43" pos:column="26"/></name><argument_list pos:line="43" pos:column="26">()<pos:position pos:line="43" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></else></if>
    }<pos:position pos:line="45" pos:column="6"/></block></while>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name><name pos:line="47" pos:column="9">ConfigParser<pos:position pos:line="47" pos:column="21"/></name><operator pos:line="47" pos:column="21">::<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="23">RecognizeQuotedValues<pos:position pos:line="47" pos:column="44"/></name></name> <operator pos:line="47" pos:column="45">&amp;&amp;<pos:position pos:line="47" pos:column="55"/></operator> <operator pos:line="47" pos:column="48">*<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="49">nextToken<pos:position pos:line="47" pos:column="58"/></name> <operator pos:line="47" pos:column="59">==<pos:position pos:line="47" pos:column="61"/></operator> <literal type="char" pos:line="47" pos:column="62">'('<pos:position pos:line="47" pos:column="65"/></literal></expr>)<pos:position pos:line="47" pos:column="66"/></condition><then pos:line="47" pos:column="66"> <block pos:line="47" pos:column="67">{
        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name pos:line="48" pos:column="13">strncmp<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">tokenStart<pos:position pos:line="48" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="33">"parameters"<pos:position pos:line="48" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="47">nextToken<pos:position pos:line="48" pos:column="56"/></name> <operator pos:line="48" pos:column="57">-<pos:position pos:line="48" pos:column="58"/></operator> <name pos:line="48" pos:column="59">tokenStart<pos:position pos:line="48" pos:column="69"/></name></expr></argument>)<pos:position pos:line="48" pos:column="70"/></argument_list></call> <operator pos:line="48" pos:column="71">==<pos:position pos:line="48" pos:column="73"/></operator> <literal type="number" pos:line="48" pos:column="74">0<pos:position pos:line="48" pos:column="75"/></literal></expr>)<pos:position pos:line="48" pos:column="76"/></condition><then pos:line="48" pos:column="76">
            <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="13">type<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <name><name pos:line="49" pos:column="20">ConfigParser<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">::<pos:position pos:line="49" pos:column="34"/></operator><name pos:line="49" pos:column="34">FunctionParameters<pos:position pos:line="49" pos:column="52"/></name></name></expr>;<pos:position pos:line="49" pos:column="53"/></expr_stmt></block></then>
        <else pos:line="50" pos:column="9">else <block pos:line="50" pos:column="14">{
            <if pos:line="51" pos:column="13">if <condition pos:line="51" pos:column="16">(<expr><name pos:line="51" pos:column="17">PreviewMode_<pos:position pos:line="51" pos:column="29"/></name></expr>)<pos:position pos:line="51" pos:column="30"/></condition><then pos:line="51" pos:column="30"> <block pos:line="51" pos:column="31">{
                <decl_stmt><decl><type><name pos:line="52" pos:column="17">char<pos:position pos:line="52" pos:column="21"/></name> <modifier pos:line="52" pos:column="22">*<pos:position pos:line="52" pos:column="23"/></modifier></type><name pos:line="52" pos:column="23">err<pos:position pos:line="52" pos:column="26"/></name> <init pos:line="52" pos:column="27">= <expr><call><name pos:line="52" pos:column="29">xstrdup<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name pos:line="52" pos:column="37">SQUID_ERROR_TOKEN<pos:position pos:line="52" pos:column="54"/></name></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="56"/></decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="53" pos:column="17">CfgLineTokens_<pos:position pos:line="53" pos:column="31"/></name><operator pos:line="53" pos:column="31">.<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="32">push<pos:position pos:line="53" pos:column="36"/></name></name><argument_list pos:line="53" pos:column="36">(<argument><expr><name pos:line="53" pos:column="37">err<pos:position pos:line="53" pos:column="40"/></name></expr></argument>)<pos:position pos:line="53" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>
                <return pos:line="54" pos:column="17">return <expr><name pos:line="54" pos:column="24">err<pos:position pos:line="54" pos:column="27"/></name></expr>;<pos:position pos:line="54" pos:column="28"/></return>
            }<pos:position pos:line="55" pos:column="14"/></block></then> <else pos:line="55" pos:column="15">else <block pos:line="55" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">debugs<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><literal type="number" pos:line="56" pos:column="24">3<pos:position pos:line="56" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="27">DBG_CRITICAL<pos:position pos:line="56" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="41">"FATAL: Unknown cfg function: "<pos:position pos:line="56" pos:column="72"/></literal> <operator pos:line="56" pos:column="73">&lt;&lt;<pos:position pos:line="56" pos:column="81"/></operator> <name pos:line="56" pos:column="76">tokenStart<pos:position pos:line="56" pos:column="86"/></name></expr></argument>)<pos:position pos:line="56" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="88"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">self_destruct<pos:position pos:line="57" pos:column="30"/></name><argument_list pos:line="57" pos:column="30">()<pos:position pos:line="57" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="58" pos:column="14"/></block></else></if>
        }<pos:position pos:line="59" pos:column="10"/></block></else></if>
    }<pos:position pos:line="60" pos:column="6"/></block></then> <else pos:line="60" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="9">type<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">=<pos:position pos:line="61" pos:column="15"/></operator> <name><name pos:line="61" pos:column="16">ConfigParser<pos:position pos:line="61" pos:column="28"/></name><operator pos:line="61" pos:column="28">::<pos:position pos:line="61" pos:column="30"/></operator><name pos:line="61" pos:column="30">SimpleToken<pos:position pos:line="61" pos:column="41"/></name></name></expr>;<pos:position pos:line="61" pos:column="42"/></expr_stmt></block></else></if>

    <decl_stmt><decl><type><name pos:line="63" pos:column="5">char<pos:position pos:line="63" pos:column="9"/></name> <modifier pos:line="63" pos:column="10">*<pos:position pos:line="63" pos:column="11"/></modifier></type><name pos:line="63" pos:column="11">token<pos:position pos:line="63" pos:column="16"/></name> <init pos:line="63" pos:column="17">= <expr><name pos:line="63" pos:column="19">NULL<pos:position pos:line="63" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="63" pos:column="24"/></decl_stmt>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name pos:line="64" pos:column="9">nextToken<pos:position pos:line="64" pos:column="18"/></name> <operator pos:line="64" pos:column="19">-<pos:position pos:line="64" pos:column="20"/></operator> <name pos:line="64" pos:column="21">tokenStart<pos:position pos:line="64" pos:column="31"/></name></expr>)<pos:position pos:line="64" pos:column="32"/></condition><then pos:line="64" pos:column="32"> <block pos:line="64" pos:column="33">{
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name><name pos:line="65" pos:column="13">ConfigParser<pos:position pos:line="65" pos:column="25"/></name><operator pos:line="65" pos:column="25">::<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="27">StrictMode<pos:position pos:line="65" pos:column="37"/></name></name> <operator pos:line="65" pos:column="38">&amp;&amp;<pos:position pos:line="65" pos:column="48"/></operator> <name pos:line="65" pos:column="41">type<pos:position pos:line="65" pos:column="45"/></name> <operator pos:line="65" pos:column="46">==<pos:position pos:line="65" pos:column="48"/></operator> <name><name pos:line="65" pos:column="49">ConfigParser<pos:position pos:line="65" pos:column="61"/></name><operator pos:line="65" pos:column="61">::<pos:position pos:line="65" pos:column="63"/></operator><name pos:line="65" pos:column="63">SimpleToken<pos:position pos:line="65" pos:column="74"/></name></name></expr>)<pos:position pos:line="65" pos:column="75"/></condition><then pos:line="65" pos:column="75"> <block pos:line="65" pos:column="76">{
            <decl_stmt><decl><type><name pos:line="66" pos:column="13">bool<pos:position pos:line="66" pos:column="17"/></name></type> <name pos:line="66" pos:column="18">tokenIsNumber<pos:position pos:line="66" pos:column="31"/></name> <init pos:line="66" pos:column="32">= <expr><literal type="boolean" pos:line="66" pos:column="34">true<pos:position pos:line="66" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="66" pos:column="39"/></decl_stmt>
            <for pos:line="67" pos:column="13">for <control pos:line="67" pos:column="17">(<init><decl><type><specifier pos:line="67" pos:column="18">const<pos:position pos:line="67" pos:column="23"/></specifier> <name pos:line="67" pos:column="24">char<pos:position pos:line="67" pos:column="28"/></name> <modifier pos:line="67" pos:column="29">*<pos:position pos:line="67" pos:column="30"/></modifier></type><name pos:line="67" pos:column="30">s<pos:position pos:line="67" pos:column="31"/></name> <init pos:line="67" pos:column="32">= <expr><name pos:line="67" pos:column="34">tokenStart<pos:position pos:line="67" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="67" pos:column="45"/></init> <condition><expr><name pos:line="67" pos:column="46">s<pos:position pos:line="67" pos:column="47"/></name> <operator pos:line="67" pos:column="48">!=<pos:position pos:line="67" pos:column="50"/></operator> <name pos:line="67" pos:column="51">nextToken<pos:position pos:line="67" pos:column="60"/></name></expr>;<pos:position pos:line="67" pos:column="61"/></condition> <incr><expr><operator pos:line="67" pos:column="62">++<pos:position pos:line="67" pos:column="64"/></operator><name pos:line="67" pos:column="64">s<pos:position pos:line="67" pos:column="65"/></name></expr></incr>)<pos:position pos:line="67" pos:column="66"/></control> <block pos:line="67" pos:column="67">{
                <decl_stmt><decl><type><specifier pos:line="68" pos:column="17">const<pos:position pos:line="68" pos:column="22"/></specifier> <name pos:line="68" pos:column="23">bool<pos:position pos:line="68" pos:column="27"/></name></type> <name pos:line="68" pos:column="28">isValidChar<pos:position pos:line="68" pos:column="39"/></name> <init pos:line="68" pos:column="40">= <expr><call><name pos:line="68" pos:column="42">isalnum<pos:position pos:line="68" pos:column="49"/></name><argument_list pos:line="68" pos:column="49">(<argument><expr><operator pos:line="68" pos:column="50">*<pos:position pos:line="68" pos:column="51"/></operator><name pos:line="68" pos:column="51">s<pos:position pos:line="68" pos:column="52"/></name></expr></argument>)<pos:position pos:line="68" pos:column="53"/></argument_list></call> <operator pos:line="68" pos:column="54">||<pos:position pos:line="68" pos:column="56"/></operator> <call><name pos:line="68" pos:column="57">strchr<pos:position pos:line="68" pos:column="63"/></name><argument_list pos:line="68" pos:column="63">(<argument><expr><literal type="string" pos:line="68" pos:column="64">".,()-=_/:"<pos:position pos:line="68" pos:column="75"/></literal></expr></argument>, <argument><expr><operator pos:line="68" pos:column="77">*<pos:position pos:line="68" pos:column="78"/></operator><name pos:line="68" pos:column="78">s<pos:position pos:line="68" pos:column="79"/></name></expr></argument>)<pos:position pos:line="68" pos:column="80"/></argument_list></call> <operator pos:line="68" pos:column="81">||<pos:position pos:line="68" pos:column="83"/></operator>
                                         <operator pos:line="69" pos:column="42">(<pos:position pos:line="69" pos:column="43"/></operator><name pos:line="69" pos:column="43">tokenIsNumber<pos:position pos:line="69" pos:column="56"/></name> <operator pos:line="69" pos:column="57">&amp;&amp;<pos:position pos:line="69" pos:column="67"/></operator> <operator pos:line="69" pos:column="60">*<pos:position pos:line="69" pos:column="61"/></operator><name pos:line="69" pos:column="61">s<pos:position pos:line="69" pos:column="62"/></name> <operator pos:line="69" pos:column="63">==<pos:position pos:line="69" pos:column="65"/></operator> <literal type="char" pos:line="69" pos:column="66">'%'<pos:position pos:line="69" pos:column="69"/></literal> <operator pos:line="69" pos:column="70">&amp;&amp;<pos:position pos:line="69" pos:column="80"/></operator> <operator pos:line="69" pos:column="73">(<pos:position pos:line="69" pos:column="74"/></operator><name pos:line="69" pos:column="74">s<pos:position pos:line="69" pos:column="75"/></name> <operator pos:line="69" pos:column="76">+<pos:position pos:line="69" pos:column="77"/></operator> <literal type="number" pos:line="69" pos:column="78">1<pos:position pos:line="69" pos:column="79"/></literal> <operator pos:line="69" pos:column="80">==<pos:position pos:line="69" pos:column="82"/></operator> <name pos:line="69" pos:column="83">nextToken<pos:position pos:line="69" pos:column="92"/></name><operator pos:line="69" pos:column="92">)<pos:position pos:line="69" pos:column="93"/></operator><operator pos:line="69" pos:column="93">)<pos:position pos:line="69" pos:column="94"/></operator></expr></init></decl>;<pos:position pos:line="69" pos:column="95"/></decl_stmt>

                <if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><operator pos:line="71" pos:column="21">!<pos:position pos:line="71" pos:column="22"/></operator><call><name pos:line="71" pos:column="22">isdigit<pos:position pos:line="71" pos:column="29"/></name><argument_list pos:line="71" pos:column="29">(<argument><expr><operator pos:line="71" pos:column="30">*<pos:position pos:line="71" pos:column="31"/></operator><name pos:line="71" pos:column="31">s<pos:position pos:line="71" pos:column="32"/></name></expr></argument>)<pos:position pos:line="71" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="34"/></condition><then pos:line="71" pos:column="34">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="21">tokenIsNumber<pos:position pos:line="72" pos:column="34"/></name> <operator pos:line="72" pos:column="35">=<pos:position pos:line="72" pos:column="36"/></operator> <literal type="boolean" pos:line="72" pos:column="37">false<pos:position pos:line="72" pos:column="42"/></literal></expr>;<pos:position pos:line="72" pos:column="43"/></expr_stmt></block></then></if>

                <if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><operator pos:line="74" pos:column="21">!<pos:position pos:line="74" pos:column="22"/></operator><name pos:line="74" pos:column="22">isValidChar<pos:position pos:line="74" pos:column="33"/></name></expr>)<pos:position pos:line="74" pos:column="34"/></condition><then pos:line="74" pos:column="34"> <block pos:line="74" pos:column="35">{
                    <if pos:line="75" pos:column="21">if <condition pos:line="75" pos:column="24">(<expr><name pos:line="75" pos:column="25">PreviewMode_<pos:position pos:line="75" pos:column="37"/></name></expr>)<pos:position pos:line="75" pos:column="38"/></condition><then pos:line="75" pos:column="38"> <block pos:line="75" pos:column="39">{
                        <decl_stmt><decl><type><name pos:line="76" pos:column="25">char<pos:position pos:line="76" pos:column="29"/></name> <modifier pos:line="76" pos:column="30">*<pos:position pos:line="76" pos:column="31"/></modifier></type><name pos:line="76" pos:column="31">err<pos:position pos:line="76" pos:column="34"/></name> <init pos:line="76" pos:column="35">= <expr><call><name pos:line="76" pos:column="37">xstrdup<pos:position pos:line="76" pos:column="44"/></name><argument_list pos:line="76" pos:column="44">(<argument><expr><name pos:line="76" pos:column="45">SQUID_ERROR_TOKEN<pos:position pos:line="76" pos:column="62"/></name></expr></argument>)<pos:position pos:line="76" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="64"/></decl_stmt>
                        <expr_stmt><expr><call><name><name pos:line="77" pos:column="25">CfgLineTokens_<pos:position pos:line="77" pos:column="39"/></name><operator pos:line="77" pos:column="39">.<pos:position pos:line="77" pos:column="40"/></operator><name pos:line="77" pos:column="40">push<pos:position pos:line="77" pos:column="44"/></name></name><argument_list pos:line="77" pos:column="44">(<argument><expr><name pos:line="77" pos:column="45">err<pos:position pos:line="77" pos:column="48"/></name></expr></argument>)<pos:position pos:line="77" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="50"/></expr_stmt>
                        <return pos:line="78" pos:column="25">return <expr><name pos:line="78" pos:column="32">err<pos:position pos:line="78" pos:column="35"/></name></expr>;<pos:position pos:line="78" pos:column="36"/></return>
                    }<pos:position pos:line="79" pos:column="22"/></block></then> <else pos:line="79" pos:column="23">else <block pos:line="79" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="80" pos:column="25">debugs<pos:position pos:line="80" pos:column="31"/></name><argument_list pos:line="80" pos:column="31">(<argument><expr><literal type="number" pos:line="80" pos:column="32">3<pos:position pos:line="80" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="80" pos:column="35">DBG_CRITICAL<pos:position pos:line="80" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="49">"FATAL: Not alphanumeric character '"<pos:position pos:line="80" pos:column="86"/></literal><operator pos:line="80" pos:column="86">&lt;&lt;<pos:position pos:line="80" pos:column="94"/></operator> <operator pos:line="80" pos:column="89">*<pos:position pos:line="80" pos:column="90"/></operator><name pos:line="80" pos:column="90">s<pos:position pos:line="80" pos:column="91"/></name> <operator pos:line="80" pos:column="92">&lt;&lt;<pos:position pos:line="80" pos:column="100"/></operator> <literal type="string" pos:line="80" pos:column="95">"' in unquoted token "<pos:position pos:line="80" pos:column="117"/></literal> <operator pos:line="80" pos:column="118">&lt;&lt;<pos:position pos:line="80" pos:column="126"/></operator> <name pos:line="80" pos:column="121">tokenStart<pos:position pos:line="80" pos:column="131"/></name></expr></argument>)<pos:position pos:line="80" pos:column="132"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="133"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="81" pos:column="25">self_destruct<pos:position pos:line="81" pos:column="38"/></name><argument_list pos:line="81" pos:column="38">()<pos:position pos:line="81" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="41"/></expr_stmt>
                    }<pos:position pos:line="82" pos:column="22"/></block></else></if>
                }<pos:position pos:line="83" pos:column="18"/></block></then></if>
            }<pos:position pos:line="84" pos:column="14"/></block></for>
        }<pos:position pos:line="85" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="86" pos:column="9">token<pos:position pos:line="86" pos:column="14"/></name> <operator pos:line="86" pos:column="15">=<pos:position pos:line="86" pos:column="16"/></operator> <call><name pos:line="86" pos:column="17">xstrndup<pos:position pos:line="86" pos:column="25"/></name><argument_list pos:line="86" pos:column="25">(<argument><expr><name pos:line="86" pos:column="26">tokenStart<pos:position pos:line="86" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="38">nextToken<pos:position pos:line="86" pos:column="47"/></name> <operator pos:line="86" pos:column="48">-<pos:position pos:line="86" pos:column="49"/></operator> <name pos:line="86" pos:column="50">tokenStart<pos:position pos:line="86" pos:column="60"/></name> <operator pos:line="86" pos:column="61">+<pos:position pos:line="86" pos:column="62"/></operator> <literal type="number" pos:line="86" pos:column="63">1<pos:position pos:line="86" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="87" pos:column="9">CfgLineTokens_<pos:position pos:line="87" pos:column="23"/></name><operator pos:line="87" pos:column="23">.<pos:position pos:line="87" pos:column="24"/></operator><name pos:line="87" pos:column="24">push<pos:position pos:line="87" pos:column="28"/></name></name><argument_list pos:line="87" pos:column="28">(<argument><expr><name pos:line="87" pos:column="29">token<pos:position pos:line="87" pos:column="34"/></name></expr></argument>)<pos:position pos:line="87" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>

    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><operator pos:line="90" pos:column="9">*<pos:position pos:line="90" pos:column="10"/></operator><name pos:line="90" pos:column="10">nextToken<pos:position pos:line="90" pos:column="19"/></name> <operator pos:line="90" pos:column="20">!=<pos:position pos:line="90" pos:column="22"/></operator> <literal type="char" pos:line="90" pos:column="23">'\0'<pos:position pos:line="90" pos:column="27"/></literal> <operator pos:line="90" pos:column="28">&amp;&amp;<pos:position pos:line="90" pos:column="38"/></operator> <operator pos:line="90" pos:column="31">*<pos:position pos:line="90" pos:column="32"/></operator><name pos:line="90" pos:column="32">nextToken<pos:position pos:line="90" pos:column="41"/></name> <operator pos:line="90" pos:column="42">!=<pos:position pos:line="90" pos:column="44"/></operator> <literal type="char" pos:line="90" pos:column="45">'#'<pos:position pos:line="90" pos:column="48"/></literal></expr>)<pos:position pos:line="90" pos:column="49"/></condition><then pos:line="90" pos:column="49"> <block pos:line="90" pos:column="50">{
        <expr_stmt><expr><operator pos:line="91" pos:column="9">++<pos:position pos:line="91" pos:column="11"/></operator><name pos:line="91" pos:column="11">nextToken<pos:position pos:line="91" pos:column="20"/></name></expr>;<pos:position pos:line="91" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>

    <return pos:line="94" pos:column="5">return <expr><name pos:line="94" pos:column="12">token<pos:position pos:line="94" pos:column="17"/></name></expr>;<pos:position pos:line="94" pos:column="18"/></return>
}<pos:position pos:line="95" pos:column="2"/></block></function></unit>
