<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2114_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">squid_signal<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">int<pos:position pos:line="2" pos:column="17"/></name></type> <name pos:line="2" pos:column="18">sig<pos:position pos:line="2" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="23">SIGHDLR<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type> <name pos:line="2" pos:column="33">func<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">int<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">flags<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">HAVE_SIGACTION<pos:position pos:line="4" pos:column="19"/></name></expr></cpp:if>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">sigaction<pos:position pos:line="6" pos:column="21"/></name></name></type> <name pos:line="6" pos:column="22">sa<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">sa<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">.<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">sa_handler<pos:position pos:line="7" pos:column="18"/></name></name> <operator pos:line="7" pos:column="19">=<pos:position pos:line="7" pos:column="20"/></operator> <name pos:line="7" pos:column="21">func<pos:position pos:line="7" pos:column="25"/></name></expr>;<pos:position pos:line="7" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">sa<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">.<pos:position pos:line="8" pos:column="8"/></operator><name pos:line="8" pos:column="8">sa_flags<pos:position pos:line="8" pos:column="16"/></name></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">flags<pos:position pos:line="8" pos:column="24"/></name></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">sigemptyset<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><operator pos:line="9" pos:column="17">&amp;<pos:position pos:line="9" pos:column="22"/></operator><name><name pos:line="9" pos:column="18">sa<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">.<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">sa_mask<pos:position pos:line="9" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">sigaction<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">sig<pos:position pos:line="11" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="24">&amp;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="25">sa<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">NULL<pos:position pos:line="11" pos:column="33"/></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call> <operator pos:line="11" pos:column="35">&lt;<pos:position pos:line="11" pos:column="39"/></operator> <literal type="number" pos:line="11" pos:column="37">0<pos:position pos:line="11" pos:column="38"/></literal></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39"> <block pos:line="11" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">xerrno<pos:position pos:line="12" pos:column="19"/></name> <init pos:line="12" pos:column="20">= <expr><name pos:line="12" pos:column="22">errno<pos:position pos:line="12" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">50<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="20">DBG_CRITICAL<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="34">"sigaction: sig="<pos:position pos:line="13" pos:column="51"/></literal> <operator pos:line="13" pos:column="52">&lt;&lt;<pos:position pos:line="13" pos:column="60"/></operator> <name pos:line="13" pos:column="55">sig<pos:position pos:line="13" pos:column="58"/></name> <operator pos:line="13" pos:column="59">&lt;&lt;<pos:position pos:line="13" pos:column="67"/></operator> <literal type="string" pos:line="13" pos:column="62">" func="<pos:position pos:line="13" pos:column="70"/></literal> <operator pos:line="13" pos:column="71">&lt;&lt;<pos:position pos:line="13" pos:column="79"/></operator> <name pos:line="13" pos:column="74">func<pos:position pos:line="13" pos:column="78"/></name> <operator pos:line="13" pos:column="79">&lt;&lt;<pos:position pos:line="13" pos:column="87"/></operator> <literal type="string" pos:line="13" pos:column="82">": "<pos:position pos:line="13" pos:column="86"/></literal> <operator pos:line="13" pos:column="87">&lt;&lt;<pos:position pos:line="13" pos:column="95"/></operator> <call><name pos:line="13" pos:column="90">xstrerr<pos:position pos:line="13" pos:column="97"/></name><argument_list pos:line="13" pos:column="97">(<argument><expr><name pos:line="13" pos:column="98">xerrno<pos:position pos:line="13" pos:column="104"/></name></expr></argument>)<pos:position pos:line="13" pos:column="105"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="107"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else<pos:position pos:line="15" pos:column="6"/></cpp:directive></cpp:else>
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="16" pos:column="20"/></name></expr></cpp:if>
    <comment type="block" pos:line="17" pos:column="5">/*
    On Windows, only SIGINT, SIGILL, SIGFPE, SIGTERM, SIGBREAK, SIGABRT and SIGSEGV signals
    are supported, so we must care of don't call signal() for other value.
    The SIGILL, SIGSEGV, and SIGTERM signals are not generated under Windows. They are defined
    for ANSI compatibility, so both SIGSEGV and SIGBUS are emulated with an Exception Handler.
    */</comment>
    <switch pos:line="23" pos:column="5">switch <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">sig<pos:position pos:line="23" pos:column="16"/></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition> <block pos:line="23" pos:column="18">{

    <case pos:line="25" pos:column="5">case <expr><name pos:line="25" pos:column="10">SIGINT<pos:position pos:line="25" pos:column="16"/></name></expr>:<pos:position pos:line="25" pos:column="17"/></case>

    <case pos:line="27" pos:column="5">case <expr><name pos:line="27" pos:column="10">SIGILL<pos:position pos:line="27" pos:column="16"/></name></expr>:<pos:position pos:line="27" pos:column="17"/></case>

    <case pos:line="29" pos:column="5">case <expr><name pos:line="29" pos:column="10">SIGFPE<pos:position pos:line="29" pos:column="16"/></name></expr>:<pos:position pos:line="29" pos:column="17"/></case>

    <case pos:line="31" pos:column="5">case <expr><name pos:line="31" pos:column="10">SIGTERM<pos:position pos:line="31" pos:column="17"/></name></expr>:<pos:position pos:line="31" pos:column="18"/></case>

    <case pos:line="33" pos:column="5">case <expr><name pos:line="33" pos:column="10">SIGBREAK<pos:position pos:line="33" pos:column="18"/></name></expr>:<pos:position pos:line="33" pos:column="19"/></case>

    <case pos:line="35" pos:column="5">case <expr><name pos:line="35" pos:column="10">SIGABRT<pos:position pos:line="35" pos:column="17"/></name></expr>:<pos:position pos:line="35" pos:column="18"/></case>
        <break pos:line="36" pos:column="9">break;<pos:position pos:line="36" pos:column="15"/></break>

    <case pos:line="38" pos:column="5">case <expr><name pos:line="38" pos:column="10">SIGSEGV<pos:position pos:line="38" pos:column="17"/></name></expr>:<pos:position pos:line="38" pos:column="18"/></case>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">WIN32_ExceptionHandlerInit<pos:position pos:line="39" pos:column="35"/></name><argument_list pos:line="39" pos:column="35">()<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
        <break pos:line="40" pos:column="9">break;<pos:position pos:line="40" pos:column="15"/></break>

    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">SIGBUS<pos:position pos:line="42" pos:column="16"/></name></expr>:<pos:position pos:line="42" pos:column="17"/></case>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">WIN32_ExceptionHandlerInit<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">()<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>
        <return pos:line="44" pos:column="9">return;<pos:position pos:line="44" pos:column="16"/></return>
        <break pos:line="45" pos:column="9">break;<pos:position pos:line="45" pos:column="15"/></break>  <comment type="block" pos:line="45" pos:column="17">/* Nor reached */</comment>

    <default pos:line="47" pos:column="5">default:<pos:position pos:line="47" pos:column="13"/></default>
        <return pos:line="48" pos:column="9">return;<pos:position pos:line="48" pos:column="16"/></return>
        <break pos:line="49" pos:column="9">break;<pos:position pos:line="49" pos:column="15"/></break>  <comment type="block" pos:line="49" pos:column="17">/* Nor reached */</comment>
    }<pos:position pos:line="50" pos:column="6"/></block></switch>

<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="54" pos:column="5">signal<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><name pos:line="54" pos:column="12">sig<pos:position pos:line="54" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="17">func<pos:position pos:line="54" pos:column="21"/></name></expr></argument>)<pos:position pos:line="54" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="23"/></expr_stmt>

<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
