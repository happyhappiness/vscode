<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3700_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">clientPinnedConnectionRead<pos:position pos:line="2" pos:column="42"/></name></name><parameter_list pos:line="2" pos:column="42">(<parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">CommIoCbParams<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">&amp;<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="65">io<pos:position pos:line="2" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="68"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name><name pos:line="4" pos:column="5">pinning<pos:position pos:line="4" pos:column="12"/></name><operator pos:line="4" pos:column="12">.<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">readHandler<pos:position pos:line="4" pos:column="24"/></name></name> <operator pos:line="4" pos:column="25">=<pos:position pos:line="4" pos:column="26"/></operator> <name pos:line="4" pos:column="27">NULL<pos:position pos:line="4" pos:column="31"/></name></expr>;<pos:position pos:line="4" pos:column="32"/></expr_stmt> <comment type="line" pos:line="4" pos:column="33">// Comm unregisters handlers before calling</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">io<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">.<pos:position pos:line="6" pos:column="12"/></operator><name pos:line="6" pos:column="12">flag<pos:position pos:line="6" pos:column="16"/></name></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <name><name pos:line="6" pos:column="20">Comm<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">::<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">ERR_CLOSING<pos:position pos:line="6" pos:column="37"/></name></name></expr>)<pos:position pos:line="6" pos:column="38"/></condition><then pos:line="6" pos:column="38">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="7" pos:column="17">// close handler will clean up</comment>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">Must<pos:position pos:line="9" pos:column="9"/></name><argument_list pos:line="9" pos:column="9">(<argument><expr><name><name pos:line="9" pos:column="10">pinning<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">.<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="18">serverConnection<pos:position pos:line="9" pos:column="34"/></name></name> <operator pos:line="9" pos:column="35">==<pos:position pos:line="9" pos:column="37"/></operator> <name><name pos:line="9" pos:column="38">io<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">.<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="41">conn<pos:position pos:line="9" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">USE_OPENSSL<pos:position pos:line="11" pos:column="16"/></name></expr></cpp:if>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">handleIdleClientPinnedTlsRead<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">()<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="41"/></condition><then pos:line="12" pos:column="41">
        <block type="pseudo"><return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return></block></then></if>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="line" pos:line="16" pos:column="5">// We could use getConcurrentRequestCount(), but this may be faster.</comment>
    <decl_stmt><decl><type><specifier pos:line="17" pos:column="5">const<pos:position pos:line="17" pos:column="10"/></specifier> <name pos:line="17" pos:column="11">bool<pos:position pos:line="17" pos:column="15"/></name></type> <name pos:line="17" pos:column="16">clientIsIdle<pos:position pos:line="17" pos:column="28"/></name> <init pos:line="17" pos:column="29">= <expr><operator pos:line="17" pos:column="31">!<pos:position pos:line="17" pos:column="32"/></operator><call><name pos:line="17" pos:column="32">getCurrentContext<pos:position pos:line="17" pos:column="49"/></name><argument_list pos:line="17" pos:column="49">()<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="52"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">debugs<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><literal type="number" pos:line="19" pos:column="12">33<pos:position pos:line="19" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="16">3<pos:position pos:line="19" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="19">"idle pinned "<pos:position pos:line="19" pos:column="33"/></literal> <operator pos:line="19" pos:column="34">&lt;&lt;<pos:position pos:line="19" pos:column="42"/></operator> <name><name pos:line="19" pos:column="37">pinning<pos:position pos:line="19" pos:column="44"/></name><operator pos:line="19" pos:column="44">.<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="45">serverConnection<pos:position pos:line="19" pos:column="61"/></name></name> <operator pos:line="19" pos:column="62">&lt;&lt;<pos:position pos:line="19" pos:column="70"/></operator> <literal type="string" pos:line="19" pos:column="65">" read "<pos:position pos:line="19" pos:column="73"/></literal> <operator pos:line="19" pos:column="74">&lt;&lt;<pos:position pos:line="19" pos:column="82"/></operator>
           <name><name pos:line="20" pos:column="12">io<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">.<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">size<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">&lt;&lt;<pos:position pos:line="20" pos:column="28"/></operator> <operator pos:line="20" pos:column="23">(<pos:position pos:line="20" pos:column="24"/></operator><ternary><condition><expr><name pos:line="20" pos:column="24">clientIsIdle<pos:position pos:line="20" pos:column="36"/></name></expr> ?<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38"> <expr><literal type="string" pos:line="20" pos:column="39">" with idle client"<pos:position pos:line="20" pos:column="58"/></literal></expr> <pos:position pos:line="20" pos:column="59"/></then><else pos:line="20" pos:column="59">: <expr><literal type="string" pos:line="20" pos:column="61">""<pos:position pos:line="20" pos:column="63"/></literal></expr></else></ternary><operator pos:line="20" pos:column="63">)<pos:position pos:line="20" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="66"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="22" pos:column="5">pinning<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">.<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="13">serverConnection<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">-&gt;<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="31">close<pos:position pos:line="22" pos:column="36"/></name></name><argument_list pos:line="22" pos:column="36">()<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>

    <comment type="line" pos:line="24" pos:column="5">// If we are still sending data to the client, do not close now. When we are done sending,</comment>
    <comment type="line" pos:line="25" pos:column="5">// ClientSocketContext::keepaliveNextRequest() checks pinning.serverConnection and will close.</comment>
    <comment type="line" pos:line="26" pos:column="5">// However, if we are idle, then we must close to inform the idle client and minimize races.</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">clientIsIdle<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">&amp;&amp;<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="25">clientConnection<pos:position pos:line="27" pos:column="41"/></name> <operator pos:line="27" pos:column="42">!=<pos:position pos:line="27" pos:column="44"/></operator> <name pos:line="27" pos:column="45">NULL<pos:position pos:line="27" pos:column="49"/></name></expr>)<pos:position pos:line="27" pos:column="50"/></condition><then pos:line="27" pos:column="50">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="28" pos:column="9">clientConnection<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">close<pos:position pos:line="28" pos:column="32"/></name></name><argument_list pos:line="28" pos:column="32">()<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt></block></then></if>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
