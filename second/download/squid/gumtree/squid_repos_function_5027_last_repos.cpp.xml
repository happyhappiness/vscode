<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5027_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Rebuild<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">sameEntry<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">sfileno<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">fileno<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name pos:line="2" pos:column="54">DbCellHeader<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">&amp;<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="68">header<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="75"/></parameter_list> <specifier pos:line="2" pos:column="76">const<pos:position pos:line="2" pos:column="81"/></specifier>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Header updates always result in multi-start chains and often</comment>
    <comment type="line" pos:line="5" pos:column="5">// result in multi-version chains so we can only compare the keys.</comment>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name><name pos:line="6" pos:column="11">Ipc<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">::<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">StoreMap<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">::<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">Anchor<pos:position pos:line="6" pos:column="32"/></name></name> <modifier pos:line="6" pos:column="33">&amp;<pos:position pos:line="6" pos:column="38"/></modifier></type><name pos:line="6" pos:column="34">anchor<pos:position pos:line="6" pos:column="40"/></name> <init pos:line="6" pos:column="41">= <expr><call><name><name pos:line="6" pos:column="43">sd<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">-&gt;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="47">map<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">-&gt;<pos:position pos:line="6" pos:column="55"/></operator><name pos:line="6" pos:column="52">writeableEntry<pos:position pos:line="6" pos:column="66"/></name></name><argument_list pos:line="6" pos:column="66">(<argument><expr><name pos:line="6" pos:column="67">fileno<pos:position pos:line="6" pos:column="73"/></name></expr></argument>)<pos:position pos:line="6" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="75"/></decl_stmt>
    <return pos:line="7" pos:column="5">return <expr><call><name><name pos:line="7" pos:column="12">anchor<pos:position pos:line="7" pos:column="18"/></name><operator pos:line="7" pos:column="18">.<pos:position pos:line="7" pos:column="19"/></operator><name pos:line="7" pos:column="19">sameKey<pos:position pos:line="7" pos:column="26"/></name></name><argument_list pos:line="7" pos:column="26">(<argument><expr><cast type="reinterpret" pos:line="7" pos:column="27">reinterpret_cast<argument_list type="generic" pos:line="7" pos:column="43">&lt;<argument><expr><specifier pos:line="7" pos:column="44">const<pos:position pos:line="7" pos:column="49"/></specifier> <name pos:line="7" pos:column="50">cache_key<pos:position pos:line="7" pos:column="59"/></name><operator pos:line="7" pos:column="59">*<pos:position pos:line="7" pos:column="60"/></operator></expr></argument>&gt;<pos:position pos:line="7" pos:column="64"/></argument_list><argument_list pos:line="7" pos:column="61">(<argument><expr><name><name pos:line="7" pos:column="62">header<pos:position pos:line="7" pos:column="68"/></name><operator pos:line="7" pos:column="68">.<pos:position pos:line="7" pos:column="69"/></operator><name pos:line="7" pos:column="69">key<pos:position pos:line="7" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="73"/></argument_list></cast></expr></argument>)<pos:position pos:line="7" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="75"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
