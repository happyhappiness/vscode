<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5050_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ftp<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Server<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">stopWaitingForOrigin<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><name pos:line="2" pos:column="35">int<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">originStatus<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">waitingForOrigin<pos:position pos:line="4" pos:column="26"/></name></expr></argument>)<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">waitingForOrigin<pos:position pos:line="5" pos:column="21"/></name> <operator pos:line="5" pos:column="22">=<pos:position pos:line="5" pos:column="23"/></operator> <literal type="boolean" pos:line="5" pos:column="24">false<pos:position pos:line="5" pos:column="29"/></literal></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><call><name pos:line="7" pos:column="10">isOpen<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">()<pos:position pos:line="7" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="19"/></condition><then pos:line="7" pos:column="19"> <comment type="line" pos:line="7" pos:column="20">// if we are closing, nothing to do</comment>
        <block type="pseudo"><return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="10" pos:column="5">// if we have already decided how to respond, respond now</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">delayedReply<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">!=<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">NULL<pos:position pos:line="11" pos:column="29"/></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <block pos:line="11" pos:column="31">{
        <decl_stmt><decl><type><name><name pos:line="12" pos:column="9">HttpReply<pos:position pos:line="12" pos:column="18"/></name><operator pos:line="12" pos:column="18">::<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">Pointer<pos:position pos:line="12" pos:column="27"/></name></name></type> <name pos:line="12" pos:column="28">reply<pos:position pos:line="12" pos:column="33"/></name> <init pos:line="12" pos:column="34">= <expr><name pos:line="12" pos:column="36">delayedReply<pos:position pos:line="12" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="49"/></decl_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">delayedReply<pos:position pos:line="13" pos:column="21"/></name> <operator pos:line="13" pos:column="22">=<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">NULL<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">writeForwardedReply<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><call><name><name pos:line="14" pos:column="29">reply<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">.<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="35">getRaw<pos:position pos:line="14" pos:column="41"/></name></name><argument_list pos:line="14" pos:column="41">()<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return> <comment type="line" pos:line="15" pos:column="17">// do not completeDataDownload() after an earlier response</comment>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">master<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">serverState<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">!=<pos:position pos:line="18" pos:column="31"/></operator> <name pos:line="18" pos:column="32">fssHandleDataRequest<pos:position pos:line="18" pos:column="52"/></name></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53">
        <block type="pseudo"><return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="21" pos:column="5">// completeDataDownload() could be waitingForOrigin in fssHandleDataRequest</comment>
    <comment type="line" pos:line="22" pos:column="5">// Depending on which side has finished downloading first, either trust</comment>
    <comment type="line" pos:line="23" pos:column="5">// master-&gt;userDataDone status or set originDataDownloadAbortedOnError:</comment>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">master<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">userDataDone<pos:position pos:line="24" pos:column="29"/></name></name></expr>)<pos:position pos:line="24" pos:column="30"/></condition><then pos:line="24" pos:column="30"> <block pos:line="24" pos:column="31">{
        <comment type="line" pos:line="25" pos:column="9">// We finished downloading before Ftp::Client. Most likely, the</comment>
        <comment type="line" pos:line="26" pos:column="9">// adaptation shortened the origin response or we hit an error.</comment>
        <comment type="line" pos:line="27" pos:column="9">// Our status (stored in master-&gt;userDataDone) is more informative.</comment>
        <comment type="line" pos:line="28" pos:column="9">// Use master-&gt;userDataDone; avoid originDataDownloadAbortedOnError.</comment>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">completeDataDownload<pos:position pos:line="29" pos:column="29"/></name><argument_list pos:line="29" pos:column="29">()<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then> <else pos:line="30" pos:column="7">else <block pos:line="30" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">33<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="20">5<pos:position pos:line="31" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="23">"too early to write the response"<pos:position pos:line="31" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt>
        <comment type="line" pos:line="32" pos:column="9">// Ftp::Client naturally finished downloading before us. Set</comment>
        <comment type="line" pos:line="33" pos:column="9">// originDataDownloadAbortedOnError to overwrite future</comment>
        <comment type="line" pos:line="34" pos:column="9">// master-&gt;userDataDone and relay Ftp::Client error, if there was</comment>
        <comment type="line" pos:line="35" pos:column="9">// any, to the user.</comment>
        <expr_stmt><expr><name pos:line="36" pos:column="9">originDataDownloadAbortedOnError<pos:position pos:line="36" pos:column="41"/></name> <operator pos:line="36" pos:column="42">=<pos:position pos:line="36" pos:column="43"/></operator> <operator pos:line="36" pos:column="44">(<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="45">originStatus<pos:position pos:line="36" pos:column="57"/></name> <operator pos:line="36" pos:column="58">&gt;=<pos:position pos:line="36" pos:column="63"/></operator> <literal type="number" pos:line="36" pos:column="61">400<pos:position pos:line="36" pos:column="64"/></literal><operator pos:line="36" pos:column="64">)<pos:position pos:line="36" pos:column="65"/></operator></expr>;<pos:position pos:line="36" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></else></if>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
