<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_291_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">BUFFER_SIZE<pos:position pos:line="4" pos:column="25"/></name></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">buflen<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">user<pos:position pos:line="6" pos:column="14"/></name><index pos:line="6" pos:column="14">[<expr><literal type="number" pos:line="6" pos:column="15">256<pos:position pos:line="6" pos:column="18"/></literal></expr>]<pos:position pos:line="6" pos:column="19"/></index></name></decl>, <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="22">p<pos:position pos:line="6" pos:column="23"/></name></decl>, <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="26">decoded<pos:position pos:line="6" pos:column="33"/></name> <init pos:line="6" pos:column="34">= <expr><name pos:line="6" pos:column="36">NULL<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">ntlm_challenge<pos:position pos:line="7" pos:column="26"/></name></name></type> <name pos:line="7" pos:column="27">chal<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">ntlm_negotiate<pos:position pos:line="8" pos:column="26"/></name></name> <modifier pos:line="8" pos:column="27">*<pos:position pos:line="8" pos:column="28"/></modifier></type><name pos:line="8" pos:column="28">nego<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name></type> <name><name pos:line="9" pos:column="10">helper_command<pos:position pos:line="9" pos:column="24"/></name><index pos:line="9" pos:column="24">[<expr><literal type="number" pos:line="9" pos:column="25">3<pos:position pos:line="9" pos:column="26"/></literal></expr>]<pos:position pos:line="9" pos:column="27"/></index></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">len<pos:position pos:line="10" pos:column="12"/></name></decl>;<pos:position pos:line="10" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">data<pos:position pos:line="11" pos:column="15"/></name> <init pos:line="11" pos:column="16">= <expr><name pos:line="11" pos:column="18">NULL<pos:position pos:line="11" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">setbuf<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name pos:line="13" pos:column="12">stdout<pos:position pos:line="13" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="20">NULL<pos:position pos:line="13" pos:column="24"/></name></expr></argument>)<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">setbuf<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><name pos:line="14" pos:column="12">stderr<pos:position pos:line="14" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="20">NULL<pos:position pos:line="14" pos:column="24"/></name></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">my_program_name<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <name><name pos:line="16" pos:column="23">argv<pos:position pos:line="16" pos:column="27"/></name><index pos:line="16" pos:column="27">[<expr><literal type="number" pos:line="16" pos:column="28">0<pos:position pos:line="16" pos:column="29"/></literal></expr>]<pos:position pos:line="16" pos:column="30"/></index></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">process_options<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><name pos:line="18" pos:column="21">argc<pos:position pos:line="18" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="27">argv<pos:position pos:line="18" pos:column="31"/></name></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">debug<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><literal type="string" pos:line="20" pos:column="11">"%s build "<pos:position pos:line="20" pos:column="22"/></literal> <name pos:line="20" pos:column="23">__DATE__<pos:position pos:line="20" pos:column="31"/></name> <literal type="string" pos:line="20" pos:column="32">", "<pos:position pos:line="20" pos:column="36"/></literal> <name pos:line="20" pos:column="37">__TIME__<pos:position pos:line="20" pos:column="45"/></name> <literal type="string" pos:line="20" pos:column="46">" starting up...\n"<pos:position pos:line="20" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="67">my_program_name<pos:position pos:line="20" pos:column="82"/></name></expr></argument>)<pos:position pos:line="20" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="84"/></expr_stmt>

    <while pos:line="22" pos:column="5">while <condition pos:line="22" pos:column="11">(<expr><call><name pos:line="22" pos:column="12">fgets<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">buf<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="23">BUFFER_SIZE<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="36">stdin<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call> <operator pos:line="22" pos:column="43">!=<pos:position pos:line="22" pos:column="45"/></operator> <name pos:line="22" pos:column="46">NULL<pos:position pos:line="22" pos:column="50"/></name></expr>)<pos:position pos:line="22" pos:column="51"/></condition> <block pos:line="22" pos:column="52">{
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">user<pos:position pos:line="23" pos:column="13"/></name><index pos:line="23" pos:column="13">[<expr><literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr>]<pos:position pos:line="23" pos:column="16"/></index></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <literal type="char" pos:line="23" pos:column="19">'\0'<pos:position pos:line="23" pos:column="23"/></literal></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>		<comment type="block" pos:line="23" pos:column="33">/*no usercode */</comment>

        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">(<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">p<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <call><name pos:line="25" pos:column="18">strchr<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name pos:line="25" pos:column="25">buf<pos:position pos:line="25" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="25" pos:column="30">'\n'<pos:position pos:line="25" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call><operator pos:line="25" pos:column="35">)<pos:position pos:line="25" pos:column="36"/></operator> <operator pos:line="25" pos:column="37">!=<pos:position pos:line="25" pos:column="39"/></operator> <name pos:line="25" pos:column="40">NULL<pos:position pos:line="25" pos:column="44"/></name></expr>)<pos:position pos:line="25" pos:column="45"/></condition><then pos:line="25" pos:column="45">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="26" pos:column="13">*<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">p<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="char" pos:line="26" pos:column="18">'\0'<pos:position pos:line="26" pos:column="22"/></literal></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="26" pos:column="33">/* strip \n */</comment>
        <expr_stmt><expr><name pos:line="27" pos:column="9">buflen<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <call><name pos:line="27" pos:column="18">strlen<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">buf<pos:position pos:line="27" pos:column="28"/></name></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>   <comment type="block" pos:line="27" pos:column="33">/* keep this so we only scan the buffer for \0 once per loop */</comment>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">buflen<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">&gt;<pos:position pos:line="28" pos:column="24"/></operator> <literal type="number" pos:line="28" pos:column="22">3<pos:position pos:line="28" pos:column="23"/></literal></expr>)<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="13">decoded<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <call><name pos:line="29" pos:column="23">base64_decode<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name pos:line="29" pos:column="37">buf<pos:position pos:line="29" pos:column="40"/></name> <operator pos:line="29" pos:column="41">+<pos:position pos:line="29" pos:column="42"/></operator> <literal type="number" pos:line="29" pos:column="43">3<pos:position pos:line="29" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="46"/></expr_stmt></block></then></if>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">buflen<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">&gt;<pos:position pos:line="30" pos:column="24"/></operator> <literal type="number" pos:line="30" pos:column="22">3<pos:position pos:line="30" pos:column="23"/></literal> <operator pos:line="30" pos:column="24">&amp;&amp;<pos:position pos:line="30" pos:column="34"/></operator> <name pos:line="30" pos:column="27">NTLM_packet_debug_enabled<pos:position pos:line="30" pos:column="52"/></name></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53"> <block pos:line="30" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">strncpy<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">helper_command<pos:position pos:line="31" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="37">buf<pos:position pos:line="31" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="42">2<pos:position pos:line="31" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">helper_command<pos:position pos:line="32" pos:column="27"/></name><index pos:line="32" pos:column="27">[<expr><literal type="number" pos:line="32" pos:column="28">2<pos:position pos:line="32" pos:column="29"/></literal></expr>]<pos:position pos:line="32" pos:column="30"/></index></name> <operator pos:line="32" pos:column="31">=<pos:position pos:line="32" pos:column="32"/></operator> <literal type="char" pos:line="32" pos:column="33">'\0'<pos:position pos:line="32" pos:column="37"/></literal></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">debug<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><literal type="string" pos:line="33" pos:column="19">"Got '%s' from Squid with data:\n"<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">helper_command<pos:position pos:line="33" pos:column="69"/></name></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">hex_dump<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><name pos:line="34" pos:column="22">decoded<pos:position pos:line="34" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="31">(<pos:position pos:line="34" pos:column="32"/></operator><operator pos:line="34" pos:column="32">(<pos:position pos:line="34" pos:column="33"/></operator><call><name pos:line="34" pos:column="33">strlen<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">(<argument><expr><name pos:line="34" pos:column="40">buf<pos:position pos:line="34" pos:column="43"/></name></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call> <operator pos:line="34" pos:column="45">-<pos:position pos:line="34" pos:column="46"/></operator> <literal type="number" pos:line="34" pos:column="47">3<pos:position pos:line="34" pos:column="48"/></literal><operator pos:line="34" pos:column="48">)<pos:position pos:line="34" pos:column="49"/></operator> <operator pos:line="34" pos:column="50">*<pos:position pos:line="34" pos:column="51"/></operator> <literal type="number" pos:line="34" pos:column="52">3<pos:position pos:line="34" pos:column="53"/></literal><operator pos:line="34" pos:column="53">)<pos:position pos:line="34" pos:column="54"/></operator> <operator pos:line="34" pos:column="55">/<pos:position pos:line="34" pos:column="56"/></operator> <literal type="number" pos:line="34" pos:column="57">4<pos:position pos:line="34" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then> <else pos:line="35" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="13">debug<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><literal type="string" pos:line="36" pos:column="19">"Got '%s' from Squid\n"<pos:position pos:line="36" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="44">buf<pos:position pos:line="36" pos:column="47"/></name></expr></argument>)<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt></block></else></if>

        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">strncasecmp<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">buf<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="30">"YR"<pos:position pos:line="38" pos:column="34"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="36">2<pos:position pos:line="38" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call> <operator pos:line="38" pos:column="39">==<pos:position pos:line="38" pos:column="41"/></operator> <literal type="number" pos:line="38" pos:column="42">0<pos:position pos:line="38" pos:column="43"/></literal></expr>)<pos:position pos:line="38" pos:column="44"/></condition><then pos:line="38" pos:column="44"> <block pos:line="38" pos:column="45">{
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">buflen<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">&gt;<pos:position pos:line="39" pos:column="28"/></operator> <literal type="number" pos:line="39" pos:column="26">3<pos:position pos:line="39" pos:column="27"/></literal></expr>)<pos:position pos:line="39" pos:column="28"/></condition><then pos:line="39" pos:column="28"> <block pos:line="39" pos:column="29">{
                <expr_stmt><expr><name pos:line="40" pos:column="17">nego<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <operator pos:line="40" pos:column="24">(<pos:position pos:line="40" pos:column="25"/></operator>struct <name pos:line="40" pos:column="32">ntlm_negotiate<pos:position pos:line="40" pos:column="46"/></name> <operator pos:line="40" pos:column="47">*<pos:position pos:line="40" pos:column="48"/></operator><operator pos:line="40" pos:column="48">)<pos:position pos:line="40" pos:column="49"/></operator> <name pos:line="40" pos:column="50">decoded<pos:position pos:line="40" pos:column="57"/></name></expr>;<pos:position pos:line="40" pos:column="58"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="41" pos:column="17">ntlmMakeChallenge<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><operator pos:line="41" pos:column="35">&amp;<pos:position pos:line="41" pos:column="40"/></operator><name pos:line="41" pos:column="36">chal<pos:position pos:line="41" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="42">nego<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">-&gt;<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="48">flags<pos:position pos:line="41" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt>
            }<pos:position pos:line="42" pos:column="14"/></block></then> <else pos:line="42" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="17">ntlmMakeChallenge<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">(<argument><expr><operator pos:line="43" pos:column="35">&amp;<pos:position pos:line="43" pos:column="40"/></operator><name pos:line="43" pos:column="36">chal<pos:position pos:line="43" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="42">NEGOTIATE_ASCII<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="59"/></expr_stmt></block></else></if>
            <expr_stmt><expr><name pos:line="44" pos:column="13">len<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator>
                <sizeof pos:line="45" pos:column="17">sizeof<argument_list pos:line="45" pos:column="23">(<argument><expr><name pos:line="45" pos:column="24">chal<pos:position pos:line="45" pos:column="28"/></name></expr></argument>)<pos:position pos:line="45" pos:column="29"/></argument_list></sizeof> <operator pos:line="45" pos:column="30">-<pos:position pos:line="45" pos:column="31"/></operator> <sizeof pos:line="45" pos:column="32">sizeof<argument_list pos:line="45" pos:column="38">(<argument><expr><name><name pos:line="45" pos:column="39">chal<pos:position pos:line="45" pos:column="43"/></name><operator pos:line="45" pos:column="43">.<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="44">pad<pos:position pos:line="45" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="48"/></argument_list></sizeof> <operator pos:line="45" pos:column="49">+<pos:position pos:line="45" pos:column="50"/></operator>
                <call><name pos:line="46" pos:column="17">le16toh<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><name><name pos:line="46" pos:column="25">chal<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">.<pos:position pos:line="46" pos:column="30"/></operator><name pos:line="46" pos:column="30">target<pos:position pos:line="46" pos:column="36"/></name><operator pos:line="46" pos:column="36">.<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="37">maxlen<pos:position pos:line="46" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><name pos:line="47" pos:column="13">data<pos:position pos:line="47" pos:column="17"/></name> <operator pos:line="47" pos:column="18">=<pos:position pos:line="47" pos:column="19"/></operator> <operator pos:line="47" pos:column="20">(<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="21">char<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">*<pos:position pos:line="47" pos:column="27"/></operator><operator pos:line="47" pos:column="27">)<pos:position pos:line="47" pos:column="28"/></operator> <call><name pos:line="47" pos:column="29">base64_encode_bin<pos:position pos:line="47" pos:column="46"/></name><argument_list pos:line="47" pos:column="46">(<argument><expr><operator pos:line="47" pos:column="47">(<pos:position pos:line="47" pos:column="48"/></operator><name pos:line="47" pos:column="48">char<pos:position pos:line="47" pos:column="52"/></name> <operator pos:line="47" pos:column="53">*<pos:position pos:line="47" pos:column="54"/></operator><operator pos:line="47" pos:column="54">)<pos:position pos:line="47" pos:column="55"/></operator> <operator pos:line="47" pos:column="56">&amp;<pos:position pos:line="47" pos:column="61"/></operator><name pos:line="47" pos:column="57">chal<pos:position pos:line="47" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="63">len<pos:position pos:line="47" pos:column="66"/></name></expr></argument>)<pos:position pos:line="47" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="68"/></expr_stmt>
            <if pos:line="48" pos:column="13">if <condition pos:line="48" pos:column="16">(<expr><name pos:line="48" pos:column="17">NTLM_packet_debug_enabled<pos:position pos:line="48" pos:column="42"/></name></expr>)<pos:position pos:line="48" pos:column="43"/></condition><then pos:line="48" pos:column="43"> <block pos:line="48" pos:column="44">{
                <expr_stmt><expr><call><name pos:line="49" pos:column="17">printf<pos:position pos:line="49" pos:column="23"/></name><argument_list pos:line="49" pos:column="23">(<argument><expr><literal type="string" pos:line="49" pos:column="24">"TT %s\n"<pos:position pos:line="49" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="35">data<pos:position pos:line="49" pos:column="39"/></name></expr></argument>)<pos:position pos:line="49" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><name pos:line="50" pos:column="17">decoded<pos:position pos:line="50" pos:column="24"/></name> <operator pos:line="50" pos:column="25">=<pos:position pos:line="50" pos:column="26"/></operator> <call><name pos:line="50" pos:column="27">base64_decode<pos:position pos:line="50" pos:column="40"/></name><argument_list pos:line="50" pos:column="40">(<argument><expr><name pos:line="50" pos:column="41">data<pos:position pos:line="50" pos:column="45"/></name></expr></argument>)<pos:position pos:line="50" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="47"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">debug<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><literal type="string" pos:line="51" pos:column="23">"sending 'TT' to squid with data:\n"<pos:position pos:line="51" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="52" pos:column="17">hex_dump<pos:position pos:line="52" pos:column="25"/></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">decoded<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="35">(<pos:position pos:line="52" pos:column="36"/></operator><call><name pos:line="52" pos:column="36">strlen<pos:position pos:line="52" pos:column="42"/></name><argument_list pos:line="52" pos:column="42">(<argument><expr><name pos:line="52" pos:column="43">data<pos:position pos:line="52" pos:column="47"/></name></expr></argument>)<pos:position pos:line="52" pos:column="48"/></argument_list></call> <operator pos:line="52" pos:column="49">*<pos:position pos:line="52" pos:column="50"/></operator> <literal type="number" pos:line="52" pos:column="51">3<pos:position pos:line="52" pos:column="52"/></literal><operator pos:line="52" pos:column="52">)<pos:position pos:line="52" pos:column="53"/></operator> <operator pos:line="52" pos:column="54">/<pos:position pos:line="52" pos:column="55"/></operator> <literal type="number" pos:line="52" pos:column="56">4<pos:position pos:line="52" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="59"/></expr_stmt>
            }<pos:position pos:line="53" pos:column="14"/></block></then> <else pos:line="53" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="54" pos:column="17">SEND2<pos:position pos:line="54" pos:column="22"/></name><argument_list pos:line="54" pos:column="22">(<argument><expr><literal type="string" pos:line="54" pos:column="23">"TT %s"<pos:position pos:line="54" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="32">data<pos:position pos:line="54" pos:column="36"/></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt></block></else></if>
        }<pos:position pos:line="55" pos:column="10"/></block></then> <elseif pos:line="55" pos:column="11">else <if pos:line="55" pos:column="16">if <condition pos:line="55" pos:column="19">(<expr><call><name pos:line="55" pos:column="20">strncasecmp<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">(<argument><expr><name pos:line="55" pos:column="32">buf<pos:position pos:line="55" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="37">"KK "<pos:position pos:line="55" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="44">3<pos:position pos:line="55" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call> <operator pos:line="55" pos:column="47">==<pos:position pos:line="55" pos:column="49"/></operator> <literal type="number" pos:line="55" pos:column="50">0<pos:position pos:line="55" pos:column="51"/></literal></expr>)<pos:position pos:line="55" pos:column="52"/></condition><then pos:line="55" pos:column="52"> <block pos:line="55" pos:column="53">{
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><operator pos:line="56" pos:column="17">!<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">decoded<pos:position pos:line="56" pos:column="25"/></name></expr>)<pos:position pos:line="56" pos:column="26"/></condition><then pos:line="56" pos:column="26"> <block pos:line="56" pos:column="27">{
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">SEND2<pos:position pos:line="57" pos:column="22"/></name><argument_list pos:line="57" pos:column="22">(<argument><expr><literal type="string" pos:line="57" pos:column="23">"BH received KK with no data! user=%s"<pos:position pos:line="57" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="63">user<pos:position pos:line="57" pos:column="67"/></name></expr></argument>)<pos:position pos:line="57" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="69"/></expr_stmt>
            }<pos:position pos:line="58" pos:column="14"/></block></then> <elseif pos:line="58" pos:column="15">else <if pos:line="58" pos:column="20">if <condition pos:line="58" pos:column="23">(<expr><operator pos:line="58" pos:column="24">!<pos:position pos:line="58" pos:column="25"/></operator><call><name pos:line="58" pos:column="25">ntlmCheckHeader<pos:position pos:line="58" pos:column="40"/></name><argument_list pos:line="58" pos:column="40">(<argument><expr><operator pos:line="58" pos:column="41">(<pos:position pos:line="58" pos:column="42"/></operator><name pos:line="58" pos:column="42">ntlmhdr<pos:position pos:line="58" pos:column="49"/></name> <operator pos:line="58" pos:column="50">*<pos:position pos:line="58" pos:column="51"/></operator><operator pos:line="58" pos:column="51">)<pos:position pos:line="58" pos:column="52"/></operator> <name pos:line="58" pos:column="53">decoded<pos:position pos:line="58" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="62">NTLM_AUTHENTICATE<pos:position pos:line="58" pos:column="79"/></name></expr></argument>)<pos:position pos:line="58" pos:column="80"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="81"/></condition><then pos:line="58" pos:column="81"> <block pos:line="58" pos:column="82">{
                <if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><operator pos:line="59" pos:column="21">!<pos:position pos:line="59" pos:column="22"/></operator><call><name pos:line="59" pos:column="22">ntlmDecodeAuth<pos:position pos:line="59" pos:column="36"/></name><argument_list pos:line="59" pos:column="36">(<argument><expr><operator pos:line="59" pos:column="37">(<pos:position pos:line="59" pos:column="38"/></operator>struct <name pos:line="59" pos:column="45">ntlm_authenticate<pos:position pos:line="59" pos:column="62"/></name> <operator pos:line="59" pos:column="63">*<pos:position pos:line="59" pos:column="64"/></operator><operator pos:line="59" pos:column="64">)<pos:position pos:line="59" pos:column="65"/></operator> <name pos:line="59" pos:column="66">decoded<pos:position pos:line="59" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="75">user<pos:position pos:line="59" pos:column="79"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="81">256<pos:position pos:line="59" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="85"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="86"/></condition><then pos:line="59" pos:column="86"> <block pos:line="59" pos:column="87">{
                    <expr_stmt><expr><call><name pos:line="60" pos:column="21">lc<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><name pos:line="60" pos:column="24">user<pos:position pos:line="60" pos:column="28"/></name></expr></argument>)<pos:position pos:line="60" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
                    <if pos:line="61" pos:column="21">if <condition pos:line="61" pos:column="24">(<expr><name pos:line="61" pos:column="25">strip_domain_enabled<pos:position pos:line="61" pos:column="45"/></name></expr>)<pos:position pos:line="61" pos:column="46"/></condition><then pos:line="61" pos:column="46"> <block pos:line="61" pos:column="47">{
                        <expr_stmt><expr><call><name pos:line="62" pos:column="25">strtok<pos:position pos:line="62" pos:column="31"/></name><argument_list pos:line="62" pos:column="31">(<argument><expr><name pos:line="62" pos:column="32">user<pos:position pos:line="62" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="38">"\\"<pos:position pos:line="62" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="44"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="63" pos:column="25">p<pos:position pos:line="63" pos:column="26"/></name> <operator pos:line="63" pos:column="27">=<pos:position pos:line="63" pos:column="28"/></operator> <call><name pos:line="63" pos:column="29">strtok<pos:position pos:line="63" pos:column="35"/></name><argument_list pos:line="63" pos:column="35">(<argument><expr><name pos:line="63" pos:column="36">NULL<pos:position pos:line="63" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="42">"\\"<pos:position pos:line="63" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="48"/></expr_stmt>
                        <if pos:line="64" pos:column="25">if <condition pos:line="64" pos:column="28">(<expr><operator pos:line="64" pos:column="29">!<pos:position pos:line="64" pos:column="30"/></operator><name pos:line="64" pos:column="30">p<pos:position pos:line="64" pos:column="31"/></name></expr>)<pos:position pos:line="64" pos:column="32"/></condition><then pos:line="64" pos:column="32">
                            <block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="29">p<pos:position pos:line="65" pos:column="30"/></name> <operator pos:line="65" pos:column="31">=<pos:position pos:line="65" pos:column="32"/></operator> <name pos:line="65" pos:column="33">user<pos:position pos:line="65" pos:column="37"/></name></expr>;<pos:position pos:line="65" pos:column="38"/></expr_stmt></block></then></if>
                        <expr_stmt><expr><call><name pos:line="66" pos:column="25">SEND2<pos:position pos:line="66" pos:column="30"/></name><argument_list pos:line="66" pos:column="30">(<argument><expr><literal type="string" pos:line="66" pos:column="31">"AF %s"<pos:position pos:line="66" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="40">p<pos:position pos:line="66" pos:column="41"/></name></expr></argument>)<pos:position pos:line="66" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="43"/></expr_stmt>
                    }<pos:position pos:line="67" pos:column="22"/></block></then> <else pos:line="67" pos:column="23">else <block pos:line="67" pos:column="28">{
                        <expr_stmt><expr><call><name pos:line="68" pos:column="25">SEND2<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><literal type="string" pos:line="68" pos:column="31">"AF %s"<pos:position pos:line="68" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="40">user<pos:position pos:line="68" pos:column="44"/></name></expr></argument>)<pos:position pos:line="68" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="46"/></expr_stmt>
                    }<pos:position pos:line="69" pos:column="22"/></block></else></if>
                }<pos:position pos:line="70" pos:column="18"/></block></then> <else pos:line="70" pos:column="19">else <block pos:line="70" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="71" pos:column="21">lc<pos:position pos:line="71" pos:column="23"/></name><argument_list pos:line="71" pos:column="23">(<argument><expr><name pos:line="71" pos:column="24">user<pos:position pos:line="71" pos:column="28"/></name></expr></argument>)<pos:position pos:line="71" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="30"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="72" pos:column="21">SEND2<pos:position pos:line="72" pos:column="26"/></name><argument_list pos:line="72" pos:column="26">(<argument><expr><literal type="string" pos:line="72" pos:column="27">"NA invalid credentials, user=%s"<pos:position pos:line="72" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="62">user<pos:position pos:line="72" pos:column="66"/></name></expr></argument>)<pos:position pos:line="72" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="68"/></expr_stmt>
                }<pos:position pos:line="73" pos:column="18"/></block></else></if>
            }<pos:position pos:line="74" pos:column="14"/></block></then></if></elseif> <else pos:line="74" pos:column="15">else <block pos:line="74" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="75" pos:column="17">lc<pos:position pos:line="75" pos:column="19"/></name><argument_list pos:line="75" pos:column="19">(<argument><expr><name pos:line="75" pos:column="20">user<pos:position pos:line="75" pos:column="24"/></name></expr></argument>)<pos:position pos:line="75" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="26"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="76" pos:column="17">SEND2<pos:position pos:line="76" pos:column="22"/></name><argument_list pos:line="76" pos:column="22">(<argument><expr><literal type="string" pos:line="76" pos:column="23">"BH wrong packet type! user=%s"<pos:position pos:line="76" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="56">user<pos:position pos:line="76" pos:column="60"/></name></expr></argument>)<pos:position pos:line="76" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="62"/></expr_stmt>
            }<pos:position pos:line="77" pos:column="14"/></block></else></if>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="79" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">exit<pos:position pos:line="80" pos:column="9"/></name><argument_list pos:line="80" pos:column="9">(<argument><expr><literal type="number" pos:line="80" pos:column="10">0<pos:position pos:line="80" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="13"/></expr_stmt>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
