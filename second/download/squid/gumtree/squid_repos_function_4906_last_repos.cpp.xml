<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4906_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">ParseBws<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">Tokenizer<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">&amp;<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="32">tok<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <specifier pos:line="4" pos:column="15">auto<pos:position pos:line="4" pos:column="19"/></specifier></type> <name pos:line="4" pos:column="20">count<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><call><name><name pos:line="4" pos:column="28">tok<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">.<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">skipAll<pos:position pos:line="4" pos:column="39"/></name></name><argument_list pos:line="4" pos:column="39">(<argument><expr><call><name><name pos:line="4" pos:column="40">Parser<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">::<pos:position pos:line="4" pos:column="48"/></operator><name pos:line="4" pos:column="48">WhitespaceCharacters<pos:position pos:line="4" pos:column="68"/></name></name><argument_list pos:line="4" pos:column="68">()<pos:position pos:line="4" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="71"/></argument_list></call></expr></init></decl>)<pos:position pos:line="4" pos:column="72"/></condition><then pos:line="4" pos:column="72"> <block pos:line="4" pos:column="73">{
        <comment type="line" pos:line="5" pos:column="9">// Generating BWS is a MUST-level violation so warn about it as needed.</comment>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">33<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="20">ErrorLevel<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">()<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="34">"found "<pos:position pos:line="6" pos:column="42"/></literal> <operator pos:line="6" pos:column="43">&lt;&lt;<pos:position pos:line="6" pos:column="51"/></operator> <name pos:line="6" pos:column="46">count<pos:position pos:line="6" pos:column="51"/></name> <operator pos:line="6" pos:column="52">&lt;&lt;<pos:position pos:line="6" pos:column="60"/></operator> <literal type="string" pos:line="6" pos:column="55">" BWS octets"<pos:position pos:line="6" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="70"/></expr_stmt>
        <comment type="line" pos:line="7" pos:column="9">// RFC 7230 says we MUST parse BWS, so we fall through even if</comment>
        <comment type="line" pos:line="8" pos:column="9">// Config.onoff.relaxed_header_parser is off.</comment>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="10" pos:column="5">// else we successfully "parsed" an empty BWS sequence</comment>

    <return pos:line="12" pos:column="5">return <expr><literal type="boolean" pos:line="12" pos:column="12">true<pos:position pos:line="12" pos:column="16"/></literal></expr>;<pos:position pos:line="12" pos:column="17"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
