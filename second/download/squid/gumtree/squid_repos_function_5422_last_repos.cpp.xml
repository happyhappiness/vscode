<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5422_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">memAllocString<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">size_t<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">net_size<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">size_t<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type> <name pos:line="2" pos:column="42">gross_size<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">gross_size<pos:position pos:line="4" pos:column="22"/></name></expr></argument>)<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="24"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">auto<pos:position pos:line="6" pos:column="9"/></name></type> <name pos:line="6" pos:column="10">type<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><call><name pos:line="6" pos:column="17">memFindStringSizeType<pos:position pos:line="6" pos:column="38"/></name><argument_list pos:line="6" pos:column="38">(<argument><expr><name pos:line="6" pos:column="39">net_size<pos:position pos:line="6" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="6" pos:column="49">true<pos:position pos:line="6" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="55"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">type<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">!=<pos:position pos:line="7" pos:column="16"/></operator> <name pos:line="7" pos:column="17">MEM_NONE<pos:position pos:line="7" pos:column="25"/></name></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26"> <block pos:line="7" pos:column="27">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">auto<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">&amp;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="15">pool<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">=<pos:position pos:line="8" pos:column="21"/></operator> <call><name pos:line="8" pos:column="22">GetStrPool<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name pos:line="8" pos:column="33">type<pos:position pos:line="8" pos:column="37"/></name></expr></argument>)<pos:position pos:line="8" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">gross_size<pos:position pos:line="9" pos:column="20"/></name> <operator pos:line="9" pos:column="21">=<pos:position pos:line="9" pos:column="22"/></operator> <call><name><name pos:line="9" pos:column="23">pool<pos:position pos:line="9" pos:column="27"/></name><operator pos:line="9" pos:column="27">.<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">objectSize<pos:position pos:line="9" pos:column="38"/></name></name><argument_list pos:line="9" pos:column="38">()<pos:position pos:line="9" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">assert<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><operator pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">gross_size<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">&gt;=<pos:position pos:line="10" pos:column="33"/></operator> <name pos:line="10" pos:column="31">net_size<pos:position pos:line="10" pos:column="39"/></name></expr></argument>)<pos:position pos:line="10" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="11" pos:column="9">++<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">StrCountMeter<pos:position pos:line="11" pos:column="24"/></name></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">StrVolumeMeter<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">+=<pos:position pos:line="12" pos:column="26"/></operator> <operator pos:line="12" pos:column="27">*<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="28">gross_size<pos:position pos:line="12" pos:column="38"/></name></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><call><name><name pos:line="13" pos:column="16">pool<pos:position pos:line="13" pos:column="20"/></name><operator pos:line="13" pos:column="20">.<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">alloc<pos:position pos:line="13" pos:column="26"/></name></name><argument_list pos:line="13" pos:column="26">()<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="16" pos:column="5">*<pos:position pos:line="16" pos:column="6"/></operator><name pos:line="16" pos:column="6">gross_size<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">=<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">net_size<pos:position pos:line="16" pos:column="27"/></name></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="17" pos:column="5">++<pos:position pos:line="17" pos:column="7"/></operator><name pos:line="17" pos:column="7">StrCountMeter<pos:position pos:line="17" pos:column="20"/></name></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">StrVolumeMeter<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">+=<pos:position pos:line="18" pos:column="22"/></operator> <operator pos:line="18" pos:column="23">*<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">gross_size<pos:position pos:line="18" pos:column="34"/></name></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><call><name pos:line="19" pos:column="12">xcalloc<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><literal type="number" pos:line="19" pos:column="20">1<pos:position pos:line="19" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="23">net_size<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
