<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5600_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">HandleRead<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">int<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">fd<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="26">void<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">data<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Comm<pos:position pos:line="4" pos:column="9"/></name><operator pos:line="4" pos:column="9">::<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="11">IoCallback<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">ccb<pos:position pos:line="4" pos:column="26"/></name> <init pos:line="4" pos:column="27">= <expr><operator pos:line="4" pos:column="29">(<pos:position pos:line="4" pos:column="30"/></operator><name><name pos:line="4" pos:column="30">Comm<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">::<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">IoCallback<pos:position pos:line="4" pos:column="46"/></name></name> <operator pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></operator><operator pos:line="4" pos:column="48">)<pos:position pos:line="4" pos:column="49"/></operator> <name pos:line="4" pos:column="50">data<pos:position pos:line="4" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="55"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">data<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <call><name pos:line="6" pos:column="20">COMMIO_FD_READCB<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name pos:line="6" pos:column="37">fd<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><call><name><name pos:line="7" pos:column="12">ccb<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">-&gt;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="17">active<pos:position pos:line="7" pos:column="23"/></name></name><argument_list pos:line="7" pos:column="23">()<pos:position pos:line="7" pos:column="25"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt>

    <comment type="line" pos:line="9" pos:column="5">// Without a buffer, just call back.</comment>
    <comment type="line" pos:line="10" pos:column="5">// The callee may ReadMore() to get the data.</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name><name pos:line="11" pos:column="10">ccb<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">buf<pos:position pos:line="11" pos:column="18"/></name></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19"> <block pos:line="11" pos:column="20">{
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">ccb<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">finish<pos:position pos:line="12" pos:column="20"/></name></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name><name pos:line="12" pos:column="21">Comm<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">::<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">OK<pos:position pos:line="12" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="31">0<pos:position pos:line="12" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/* For legacy callers : Attempt a read */</comment>
    <comment type="line" pos:line="17" pos:column="5">// Keep in sync with Comm::ReadNow()!</comment>
    <expr_stmt><expr><operator pos:line="18" pos:column="5">++<pos:position pos:line="18" pos:column="7"/></operator> <name><name pos:line="18" pos:column="8">statCounter<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">.<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">syscalls<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">.<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">sock<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">.<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="34">reads<pos:position pos:line="18" pos:column="39"/></name></name></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">xerrno<pos:position pos:line="19" pos:column="15"/></name> <init pos:line="19" pos:column="16">= <expr><name pos:line="19" pos:column="18">errno<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="26">0<pos:position pos:line="19" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">int<pos:position pos:line="20" pos:column="8"/></name></type> <name pos:line="20" pos:column="9">retval<pos:position pos:line="20" pos:column="15"/></name> <init pos:line="20" pos:column="16">= <expr><call><name pos:line="20" pos:column="18">FD_READ_METHOD<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">fd<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="37">ccb<pos:position pos:line="20" pos:column="40"/></name><operator pos:line="20" pos:column="40">-&gt;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="42">buf<pos:position pos:line="20" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="47">ccb<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">-&gt;<pos:position pos:line="20" pos:column="55"/></operator><name pos:line="20" pos:column="52">size<pos:position pos:line="20" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="58"/></decl_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">xerrno<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">errno<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">debugs<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="number" pos:line="22" pos:column="12">5<pos:position pos:line="22" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="15">3<pos:position pos:line="22" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="18">"FD "<pos:position pos:line="22" pos:column="23"/></literal> <operator pos:line="22" pos:column="24">&lt;&lt;<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="27">fd<pos:position pos:line="22" pos:column="29"/></name> <operator pos:line="22" pos:column="30">&lt;&lt;<pos:position pos:line="22" pos:column="38"/></operator> <literal type="string" pos:line="22" pos:column="33">", size "<pos:position pos:line="22" pos:column="42"/></literal> <operator pos:line="22" pos:column="43">&lt;&lt;<pos:position pos:line="22" pos:column="51"/></operator> <name><name pos:line="22" pos:column="46">ccb<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">-&gt;<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="51">size<pos:position pos:line="22" pos:column="55"/></name></name> <operator pos:line="22" pos:column="56">&lt;&lt;<pos:position pos:line="22" pos:column="64"/></operator> <literal type="string" pos:line="22" pos:column="59">", retval "<pos:position pos:line="22" pos:column="70"/></literal> <operator pos:line="22" pos:column="71">&lt;&lt;<pos:position pos:line="22" pos:column="79"/></operator> <name pos:line="22" pos:column="74">retval<pos:position pos:line="22" pos:column="80"/></name> <operator pos:line="22" pos:column="81">&lt;&lt;<pos:position pos:line="22" pos:column="89"/></operator> <literal type="string" pos:line="22" pos:column="84">", errno "<pos:position pos:line="22" pos:column="94"/></literal> <operator pos:line="22" pos:column="95">&lt;&lt;<pos:position pos:line="22" pos:column="103"/></operator> <name pos:line="22" pos:column="98">xerrno<pos:position pos:line="22" pos:column="104"/></name></expr></argument>)<pos:position pos:line="22" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="106"/></expr_stmt>

    <comment type="block" pos:line="24" pos:column="5">/* See if we read anything */</comment>
    <comment type="block" pos:line="25" pos:column="5">/* Note - read 0 == socket EOF, which is a valid read */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">retval<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">&gt;=<pos:position pos:line="26" pos:column="21"/></operator> <literal type="number" pos:line="26" pos:column="19">0<pos:position pos:line="26" pos:column="20"/></literal></expr>)<pos:position pos:line="26" pos:column="21"/></condition><then pos:line="26" pos:column="21"> <block pos:line="26" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">fd_bytes<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">fd<pos:position pos:line="27" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="22">retval<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">FD_READ<pos:position pos:line="27" pos:column="37"/></name></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">ccb<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">offset<pos:position pos:line="28" pos:column="20"/></name></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">retval<pos:position pos:line="28" pos:column="29"/></name></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">ccb<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">-&gt;<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="14">finish<pos:position pos:line="29" pos:column="20"/></name></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name><name pos:line="29" pos:column="21">Comm<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">::<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="27">OK<pos:position pos:line="29" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="31">0<pos:position pos:line="29" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt>
        <return pos:line="30" pos:column="9">return;<pos:position pos:line="30" pos:column="16"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then> <elseif pos:line="31" pos:column="7">else <if pos:line="31" pos:column="12">if <condition pos:line="31" pos:column="15">(<expr><name pos:line="31" pos:column="16">retval<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">&lt;<pos:position pos:line="31" pos:column="27"/></operator> <literal type="number" pos:line="31" pos:column="25">0<pos:position pos:line="31" pos:column="26"/></literal> <operator pos:line="31" pos:column="27">&amp;&amp;<pos:position pos:line="31" pos:column="37"/></operator> <operator pos:line="31" pos:column="30">!<pos:position pos:line="31" pos:column="31"/></operator><call><name pos:line="31" pos:column="31">ignoreErrno<pos:position pos:line="31" pos:column="42"/></name><argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">xerrno<pos:position pos:line="31" pos:column="49"/></name></expr></argument>)<pos:position pos:line="31" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="51"/></condition><then pos:line="31" pos:column="51"> <block pos:line="31" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">5<pos:position pos:line="32" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="19">3<pos:position pos:line="32" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="22">"comm_read_try: scheduling Comm::COMM_ERROR"<pos:position pos:line="32" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">ccb<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">offset<pos:position pos:line="33" pos:column="20"/></name></name> <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <literal type="number" pos:line="33" pos:column="23">0<pos:position pos:line="33" pos:column="24"/></literal></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="34" pos:column="9">ccb<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">-&gt;<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="14">finish<pos:position pos:line="34" pos:column="20"/></name></name><argument_list pos:line="34" pos:column="20">(<argument><expr><name><name pos:line="34" pos:column="21">Comm<pos:position pos:line="34" pos:column="25"/></name><operator pos:line="34" pos:column="25">::<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="27">COMM_ERROR<pos:position pos:line="34" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="39">xerrno<pos:position pos:line="34" pos:column="45"/></name></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="47"/></expr_stmt>
        <return pos:line="35" pos:column="9">return;<pos:position pos:line="35" pos:column="16"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if></elseif></if><empty_stmt pos:line="36" pos:column="6">;<pos:position pos:line="36" pos:column="7"/></empty_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* Nope, register for some more IO */</comment>
    <expr_stmt><expr><call><name><name pos:line="39" pos:column="5">Comm<pos:position pos:line="39" pos:column="9"/></name><operator pos:line="39" pos:column="9">::<pos:position pos:line="39" pos:column="11"/></operator><name pos:line="39" pos:column="11">SetSelect<pos:position pos:line="39" pos:column="20"/></name></name><argument_list pos:line="39" pos:column="20">(<argument><expr><name pos:line="39" pos:column="21">fd<pos:position pos:line="39" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="25">COMM_SELECT_READ<pos:position pos:line="39" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="43">Comm<pos:position pos:line="39" pos:column="47"/></name><operator pos:line="39" pos:column="47">::<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="49">HandleRead<pos:position pos:line="39" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="61">data<pos:position pos:line="39" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="67">0<pos:position pos:line="39" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="70"/></expr_stmt>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
