<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6573_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">encrypt<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">nachr<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">decr<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <argument_list pos:line="4" pos:column="10">(<argument><expr><operator pos:line="4" pos:column="11">*<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">schl<pos:position pos:line="4" pos:column="16"/></name></expr></argument>)<pos:position pos:line="4" pos:column="17"/></argument_list></call><index pos:line="4" pos:column="17">[<expr><name pos:line="4" pos:column="18">KS<pos:position pos:line="4" pos:column="20"/></name></expr>]<pos:position pos:line="4" pos:column="21"/></index> <operator pos:line="4" pos:column="22">=<pos:position pos:line="4" pos:column="23"/></operator> <ternary><condition><expr><name pos:line="4" pos:column="24">decr<pos:position pos:line="4" pos:column="28"/></name></expr> ?<pos:position pos:line="4" pos:column="30"/></condition><then pos:line="4" pos:column="30"> <expr><name pos:line="4" pos:column="31">schluessel<pos:position pos:line="4" pos:column="41"/></name> <operator pos:line="4" pos:column="42">+<pos:position pos:line="4" pos:column="43"/></operator> <literal type="number" pos:line="4" pos:column="44">15<pos:position pos:line="4" pos:column="46"/></literal></expr> <pos:position pos:line="4" pos:column="47"/></then><else pos:line="4" pos:column="47">: <expr><name pos:line="4" pos:column="49">schluessel<pos:position pos:line="4" pos:column="59"/></name></expr></else></ternary></expr>;<pos:position pos:line="4" pos:column="60"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">tmp<pos:position pos:line="5" pos:column="13"/></name><index pos:line="5" pos:column="13">[<expr><name pos:line="5" pos:column="14">BS<pos:position pos:line="5" pos:column="16"/></name></expr>]<pos:position pos:line="5" pos:column="17"/></index></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">i<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">perm<pos:position pos:line="8" pos:column="9"/></name><argument_list pos:line="8" pos:column="9">(<argument><expr><name pos:line="8" pos:column="10">tmp<pos:position pos:line="8" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="15">nachr<pos:position pos:line="8" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="22">IP<pos:position pos:line="8" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="26">BS<pos:position pos:line="8" pos:column="28"/></name></expr></argument>)<pos:position pos:line="8" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="30"/></expr_stmt>

    <for pos:line="10" pos:column="5">for <control pos:line="10" pos:column="9">(<init><expr><name pos:line="10" pos:column="10">i<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <literal type="number" pos:line="10" pos:column="14">8<pos:position pos:line="10" pos:column="15"/></literal></expr>;<pos:position pos:line="10" pos:column="16"/></init> <condition><expr><name pos:line="10" pos:column="17">i<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">--<pos:position pos:line="10" pos:column="20"/></operator></expr>;<pos:position pos:line="10" pos:column="21"/></condition><incr/>)<pos:position pos:line="10" pos:column="22"/></control> <block pos:line="10" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">crypt_main<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">tmp<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="25">tmp<pos:position pos:line="11" pos:column="28"/></name> <operator pos:line="11" pos:column="29">+<pos:position pos:line="11" pos:column="30"/></operator> <name pos:line="11" pos:column="31">BS2<pos:position pos:line="11" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="36">*<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">schl<pos:position pos:line="11" pos:column="41"/></name></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">decr<pos:position pos:line="12" pos:column="17"/></name></expr>)<pos:position pos:line="12" pos:column="18"/></condition><then pos:line="12" pos:column="18">
            <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="13">schl<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">--<pos:position pos:line="13" pos:column="19"/></operator></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt></block></then>
        <else pos:line="14" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="13">schl<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">++<pos:position pos:line="15" pos:column="19"/></operator></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt></block></else></if>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">crypt_main<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name pos:line="16" pos:column="20">tmp<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">+<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="26">BS2<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="31">tmp<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="36">*<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="37">schl<pos:position pos:line="16" pos:column="41"/></name></expr></argument>)<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="43"/></expr_stmt>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">decr<pos:position pos:line="17" pos:column="17"/></name></expr>)<pos:position pos:line="17" pos:column="18"/></condition><then pos:line="17" pos:column="18">
            <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="13">schl<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">--<pos:position pos:line="18" pos:column="19"/></operator></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt></block></then>
        <else pos:line="19" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="13">schl<pos:position pos:line="20" pos:column="17"/></name><operator pos:line="20" pos:column="17">++<pos:position pos:line="20" pos:column="19"/></operator></expr>;<pos:position pos:line="20" pos:column="20"/></expr_stmt></block></else></if>
    }<pos:position pos:line="21" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">perm<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><name pos:line="23" pos:column="10">nachr<pos:position pos:line="23" pos:column="15"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="17">tmp<pos:position pos:line="23" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="22">EP<pos:position pos:line="23" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="26">BS<pos:position pos:line="23" pos:column="28"/></name></expr></argument>)<pos:position pos:line="23" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
