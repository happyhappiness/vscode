<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4158_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ssl<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">CrtdMessage<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">parseBody<pos:position pos:line="1" pos:column="33"/></name></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name><name pos:line="1" pos:column="34">CrtdMessage<pos:position pos:line="1" pos:column="45"/></name><operator pos:line="1" pos:column="45">::<pos:position pos:line="1" pos:column="47"/></operator><name pos:line="1" pos:column="47">BodyParams<pos:position pos:line="1" pos:column="57"/></name></name> <modifier pos:line="1" pos:column="58">&amp;<pos:position pos:line="1" pos:column="63"/></modifier></type> <name pos:line="1" pos:column="60">map<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="65">std<pos:position pos:line="1" pos:column="68"/></name><operator pos:line="1" pos:column="68">::<pos:position pos:line="1" pos:column="70"/></operator><name pos:line="1" pos:column="70">string<pos:position pos:line="1" pos:column="76"/></name></name> <modifier pos:line="1" pos:column="77">&amp;<pos:position pos:line="1" pos:column="82"/></modifier></type> <name pos:line="1" pos:column="79">other_part<pos:position pos:line="1" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="90"/></parameter_list> <specifier pos:line="1" pos:column="91">const<pos:position pos:line="1" pos:column="96"/></specifier>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="3" pos:column="5">other_part<pos:position pos:line="3" pos:column="15"/></name><operator pos:line="3" pos:column="15">.<pos:position pos:line="3" pos:column="16"/></operator><name pos:line="3" pos:column="16">clear<pos:position pos:line="3" pos:column="21"/></name></name><argument_list pos:line="3" pos:column="21">()<pos:position pos:line="3" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="24"/></expr_stmt>
    <comment type="line" pos:line="4" pos:column="5">// Copy string for using it as temp buffer.</comment>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">std<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">::<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">string<pos:position pos:line="5" pos:column="16"/></name></name></type> <name pos:line="5" pos:column="17">temp_body<pos:position pos:line="5" pos:column="26"/></name><argument_list pos:line="5" pos:column="26">(<argument><expr><call><name><name pos:line="5" pos:column="27">body<pos:position pos:line="5" pos:column="31"/></name><operator pos:line="5" pos:column="31">.<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="32">c_str<pos:position pos:line="5" pos:column="37"/></name></name><argument_list pos:line="5" pos:column="37">()<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="5" pos:column="41">body<pos:position pos:line="5" pos:column="45"/></name><operator pos:line="5" pos:column="45">.<pos:position pos:line="5" pos:column="46"/></operator><name pos:line="5" pos:column="46">length<pos:position pos:line="5" pos:column="52"/></name></name><argument_list pos:line="5" pos:column="52">()<pos:position pos:line="5" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="55"/></argument_list></decl>;<pos:position pos:line="5" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type> <name pos:line="6" pos:column="12">buffer<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><cast type="const" pos:line="6" pos:column="21">const_cast<argument_list type="generic" pos:line="6" pos:column="31">&lt;<argument><expr><name pos:line="6" pos:column="32">char<pos:position pos:line="6" pos:column="36"/></name> <operator pos:line="6" pos:column="37">*<pos:position pos:line="6" pos:column="38"/></operator></expr></argument>&gt;<pos:position pos:line="6" pos:column="42"/></argument_list><argument_list pos:line="6" pos:column="39">(<argument><expr><call><name><name pos:line="6" pos:column="40">temp_body<pos:position pos:line="6" pos:column="49"/></name><operator pos:line="6" pos:column="49">.<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="50">c_str<pos:position pos:line="6" pos:column="55"/></name></name><argument_list pos:line="6" pos:column="55">()<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type> <name pos:line="7" pos:column="12">token<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><call><name pos:line="7" pos:column="20">strtok<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">buffer<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="35">"\r\n"<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><name pos:line="8" pos:column="12">token<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">!=<pos:position pos:line="8" pos:column="20"/></operator> <name pos:line="8" pos:column="21">NULL<pos:position pos:line="8" pos:column="25"/></name></expr>)<pos:position pos:line="8" pos:column="26"/></condition> <block pos:line="8" pos:column="27">{
        <decl_stmt><decl><type><name><name pos:line="9" pos:column="9">std<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">::<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">string<pos:position pos:line="9" pos:column="20"/></name></name></type> <name pos:line="9" pos:column="21">current_string<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><name pos:line="9" pos:column="36">token<pos:position pos:line="9" pos:column="41"/></name></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></decl>;<pos:position pos:line="9" pos:column="43"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">size_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">equal_pos<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><call><name><name pos:line="10" pos:column="28">current_string<pos:position pos:line="10" pos:column="42"/></name><operator pos:line="10" pos:column="42">.<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="43">find<pos:position pos:line="10" pos:column="47"/></name></name><argument_list pos:line="10" pos:column="47">(<argument><expr><literal type="char" pos:line="10" pos:column="48">'='<pos:position pos:line="10" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="53"/></decl_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">equal_pos<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">==<pos:position pos:line="11" pos:column="25"/></operator> <name><name pos:line="11" pos:column="26">std<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">::<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="31">string<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">::<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="39">npos<pos:position pos:line="11" pos:column="43"/></name></name></expr>)<pos:position pos:line="11" pos:column="44"/></condition><then pos:line="11" pos:column="44"> <block pos:line="11" pos:column="45">{
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">size_t<pos:position pos:line="12" pos:column="19"/></name></type> <name pos:line="12" pos:column="20">offset_body_part<pos:position pos:line="12" pos:column="36"/></name> <init pos:line="12" pos:column="37">= <expr><name pos:line="12" pos:column="39">token<pos:position pos:line="12" pos:column="44"/></name> <operator pos:line="12" pos:column="45">-<pos:position pos:line="12" pos:column="46"/></operator> <call><name><name pos:line="12" pos:column="47">temp_body<pos:position pos:line="12" pos:column="56"/></name><operator pos:line="12" pos:column="56">.<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="57">c_str<pos:position pos:line="12" pos:column="62"/></name></name><argument_list pos:line="12" pos:column="62">()<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="65"/></decl_stmt>
            <expr_stmt><expr><name pos:line="13" pos:column="13">other_part<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <call><name><name pos:line="13" pos:column="26">std<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">::<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">string<pos:position pos:line="13" pos:column="37"/></name></name><argument_list pos:line="13" pos:column="37">(<argument><expr><call><name><name pos:line="13" pos:column="38">body<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">.<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="43">c_str<pos:position pos:line="13" pos:column="48"/></name></name><argument_list pos:line="13" pos:column="48">()<pos:position pos:line="13" pos:column="50"/></argument_list></call> <operator pos:line="13" pos:column="51">+<pos:position pos:line="13" pos:column="52"/></operator> <name pos:line="13" pos:column="53">offset_body_part<pos:position pos:line="13" pos:column="69"/></name></expr></argument>, <argument><expr><call><name><name pos:line="13" pos:column="71">body<pos:position pos:line="13" pos:column="75"/></name><operator pos:line="13" pos:column="75">.<pos:position pos:line="13" pos:column="76"/></operator><name pos:line="13" pos:column="76">length<pos:position pos:line="13" pos:column="82"/></name></name><argument_list pos:line="13" pos:column="82">()<pos:position pos:line="13" pos:column="84"/></argument_list></call> <operator pos:line="13" pos:column="85">-<pos:position pos:line="13" pos:column="86"/></operator> <name pos:line="13" pos:column="87">offset_body_part<pos:position pos:line="13" pos:column="103"/></name></expr></argument>)<pos:position pos:line="13" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="105"/></expr_stmt>
            <break pos:line="14" pos:column="13">break;<pos:position pos:line="14" pos:column="19"/></break>
        }<pos:position pos:line="15" pos:column="10"/></block></then> <else pos:line="15" pos:column="11">else <block pos:line="15" pos:column="16">{
            <decl_stmt><decl><type><name><name pos:line="16" pos:column="13">std<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">::<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">string<pos:position pos:line="16" pos:column="24"/></name></name></type> <name pos:line="16" pos:column="25">param<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><call><name><name pos:line="16" pos:column="31">current_string<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">.<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">c_str<pos:position pos:line="16" pos:column="51"/></name></name><argument_list pos:line="16" pos:column="51">()<pos:position pos:line="16" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="16" pos:column="55">current_string<pos:position pos:line="16" pos:column="69"/></name><operator pos:line="16" pos:column="69">.<pos:position pos:line="16" pos:column="70"/></operator><name pos:line="16" pos:column="70">c_str<pos:position pos:line="16" pos:column="75"/></name></name><argument_list pos:line="16" pos:column="75">()<pos:position pos:line="16" pos:column="77"/></argument_list></call> <operator pos:line="16" pos:column="78">+<pos:position pos:line="16" pos:column="79"/></operator> <name pos:line="16" pos:column="80">equal_pos<pos:position pos:line="16" pos:column="89"/></name></expr></argument>)<pos:position pos:line="16" pos:column="90"/></argument_list></decl>;<pos:position pos:line="16" pos:column="91"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="17" pos:column="13">std<pos:position pos:line="17" pos:column="16"/></name><operator pos:line="17" pos:column="16">::<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">string<pos:position pos:line="17" pos:column="24"/></name></name></type> <name pos:line="17" pos:column="25">value<pos:position pos:line="17" pos:column="30"/></name><argument_list pos:line="17" pos:column="30">(<argument><expr><call><name><name pos:line="17" pos:column="31">current_string<pos:position pos:line="17" pos:column="45"/></name><operator pos:line="17" pos:column="45">.<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="46">c_str<pos:position pos:line="17" pos:column="51"/></name></name><argument_list pos:line="17" pos:column="51">()<pos:position pos:line="17" pos:column="53"/></argument_list></call> <operator pos:line="17" pos:column="54">+<pos:position pos:line="17" pos:column="55"/></operator> <name pos:line="17" pos:column="56">equal_pos<pos:position pos:line="17" pos:column="65"/></name> <operator pos:line="17" pos:column="66">+<pos:position pos:line="17" pos:column="67"/></operator> <literal type="number" pos:line="17" pos:column="68">1<pos:position pos:line="17" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="70"/></argument_list></decl>;<pos:position pos:line="17" pos:column="71"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">map<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">.<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">insert<pos:position pos:line="18" pos:column="23"/></name></name><argument_list pos:line="18" pos:column="23">(<argument><expr><call><name><name pos:line="18" pos:column="24">std<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">::<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">make_pair<pos:position pos:line="18" pos:column="38"/></name></name><argument_list pos:line="18" pos:column="38">(<argument><expr><name pos:line="18" pos:column="39">param<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">value<pos:position pos:line="18" pos:column="51"/></name></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="20" pos:column="9">token<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <call><name pos:line="20" pos:column="17">strtok<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">NULL<pos:position pos:line="20" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="30">"\r\n"<pos:position pos:line="20" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></while>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
