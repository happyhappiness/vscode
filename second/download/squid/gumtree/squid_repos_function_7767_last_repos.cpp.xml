<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7767_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">snmp_msg_Decode<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">u_char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">Packet<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">int<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">PacketLenP<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="3" pos:column="17">u_char<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type> <name pos:line="3" pos:column="26">Community<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="37">int<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">CommLenP<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="4" pos:column="17">int<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">Version<pos:position pos:line="4" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="4" pos:column="31">struct<pos:position pos:line="4" pos:column="37"/></name> <name pos:line="4" pos:column="38">snmp_pdu<pos:position pos:line="4" pos:column="46"/></name></name> <modifier pos:line="4" pos:column="47">*<pos:position pos:line="4" pos:column="48"/></modifier></type> <name pos:line="4" pos:column="49">PDU<pos:position pos:line="4" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="53"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">u_char<pos:position pos:line="6" pos:column="11"/></name> <modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type><name pos:line="6" pos:column="13">bufp<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">u_char<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">type<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

    <expr_stmt><expr><name pos:line="9" pos:column="5">bufp<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <call><name pos:line="9" pos:column="12">asn_parse_header<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">(<argument><expr><name pos:line="9" pos:column="29">Packet<pos:position pos:line="9" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="37">PacketLenP<pos:position pos:line="9" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="49">&amp;<pos:position pos:line="9" pos:column="54"/></operator><name pos:line="9" pos:column="50">type<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="56"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">bufp<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">==<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">NULL<pos:position pos:line="10" pos:column="21"/></name></expr>)<pos:position pos:line="10" pos:column="22"/></condition><then pos:line="10" pos:column="22"> <block pos:line="10" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">snmplib_debug<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><literal type="number" pos:line="11" pos:column="23">4<pos:position pos:line="11" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="26">"snmp_msg_Decode:Error decoding SNMP Message Header (Header)!\n"<pos:position pos:line="11" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="92"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">ASN_PARSE_ERROR<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">NULL<pos:position pos:line="12" pos:column="29"/></name></expr></argument>)<pos:position pos:line="12" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">type<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">!=<pos:position pos:line="14" pos:column="16"/></operator> <operator pos:line="14" pos:column="17">(<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">ASN_SEQUENCE<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">|<pos:position pos:line="14" pos:column="32"/></operator> <name pos:line="14" pos:column="33">ASN_CONSTRUCTOR<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">)<pos:position pos:line="14" pos:column="49"/></operator></expr>)<pos:position pos:line="14" pos:column="50"/></condition><then pos:line="14" pos:column="50"> <block pos:line="14" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">snmplib_debug<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><literal type="number" pos:line="15" pos:column="23">4<pos:position pos:line="15" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"snmp_msg_Decode:Error decoding SNMP Message Header (Header)!\n"<pos:position pos:line="15" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="92"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">ASN_PARSE_ERROR<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">NULL<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="18" pos:column="5">bufp<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <call><name pos:line="18" pos:column="12">asn_parse_int<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name pos:line="18" pos:column="26">bufp<pos:position pos:line="18" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="32">PacketLenP<pos:position pos:line="18" pos:column="42"/></name></expr></argument>,
                         <argument><expr><operator pos:line="19" pos:column="26">&amp;<pos:position pos:line="19" pos:column="31"/></operator><name pos:line="19" pos:column="27">type<pos:position pos:line="19" pos:column="31"/></name></expr></argument>,
                         <argument><expr><operator pos:line="20" pos:column="26">(<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="27">int<pos:position pos:line="20" pos:column="30"/></name> <operator pos:line="20" pos:column="31">*<pos:position pos:line="20" pos:column="32"/></operator><operator pos:line="20" pos:column="32">)<pos:position pos:line="20" pos:column="33"/></operator> <name pos:line="20" pos:column="34">Version<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="43">sizeof<argument_list pos:line="20" pos:column="49">(<argument><expr><operator pos:line="20" pos:column="50">*<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="51">Version<pos:position pos:line="20" pos:column="58"/></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">bufp<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">==<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="17">NULL<pos:position pos:line="21" pos:column="21"/></name></expr>)<pos:position pos:line="21" pos:column="22"/></condition><then pos:line="21" pos:column="22"> <block pos:line="21" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">snmplib_debug<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><literal type="number" pos:line="22" pos:column="23">4<pos:position pos:line="22" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="26">"snmp_msg_Decode:Error decoding SNMP Message Header (Version)!\n"<pos:position pos:line="22" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="93"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">ASN_PARSE_ERROR<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">NULL<pos:position pos:line="23" pos:column="29"/></name></expr></argument>)<pos:position pos:line="23" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="25" pos:column="5">bufp<pos:position pos:line="25" pos:column="9"/></name> <operator pos:line="25" pos:column="10">=<pos:position pos:line="25" pos:column="11"/></operator> <call><name pos:line="25" pos:column="12">asn_parse_string<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name pos:line="25" pos:column="29">bufp<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="35">PacketLenP<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="47">&amp;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="48">type<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="54">Community<pos:position pos:line="25" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="65">CommLenP<pos:position pos:line="25" pos:column="73"/></name></expr></argument>)<pos:position pos:line="25" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="75"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">bufp<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">==<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">NULL<pos:position pos:line="26" pos:column="21"/></name></expr>)<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22"> <block pos:line="26" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">snmplib_debug<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><literal type="number" pos:line="27" pos:column="23">4<pos:position pos:line="27" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="26">"snmp_msg_Decode:Error decoding SNMP Message Header (Community)!\n"<pos:position pos:line="27" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="95"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">ASN_PARSE_ERROR<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">NULL<pos:position pos:line="28" pos:column="29"/></name></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">Community<pos:position pos:line="30" pos:column="14"/></name><index pos:line="30" pos:column="14">[<expr><operator pos:line="30" pos:column="15">*<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">CommLenP<pos:position pos:line="30" pos:column="24"/></name></expr>]<pos:position pos:line="30" pos:column="25"/></index></name> <operator pos:line="30" pos:column="26">=<pos:position pos:line="30" pos:column="27"/></operator> <literal type="char" pos:line="30" pos:column="28">'\0'<pos:position pos:line="30" pos:column="32"/></literal></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">(<pos:position pos:line="32" pos:column="10"/></operator><operator pos:line="32" pos:column="10">*<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">Version<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">!=<pos:position pos:line="32" pos:column="21"/></operator> <name pos:line="32" pos:column="22">SNMP_VERSION_1<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">)<pos:position pos:line="32" pos:column="37"/></operator> <operator pos:line="32" pos:column="38">&amp;&amp;<pos:position pos:line="32" pos:column="48"/></operator>
            <operator pos:line="33" pos:column="13">(<pos:position pos:line="33" pos:column="14"/></operator><operator pos:line="33" pos:column="14">*<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="15">Version<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">!=<pos:position pos:line="33" pos:column="25"/></operator> <name pos:line="33" pos:column="26">SNMP_VERSION_2<pos:position pos:line="33" pos:column="40"/></name><operator pos:line="33" pos:column="40">)<pos:position pos:line="33" pos:column="41"/></operator></expr>)<pos:position pos:line="33" pos:column="42"/></condition><then pos:line="33" pos:column="42"> <block pos:line="33" pos:column="43">{

        <comment type="block" pos:line="35" pos:column="9">/* Don't know how to handle this one. */</comment>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">snmplib_debug<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><literal type="number" pos:line="36" pos:column="23">4<pos:position pos:line="36" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="26">"snmp_msg_Decode:Unable to parse Version %u\n"<pos:position pos:line="36" pos:column="72"/></literal></expr></argument>, <argument><expr><operator pos:line="36" pos:column="74">*<pos:position pos:line="36" pos:column="75"/></operator><name pos:line="36" pos:column="75">Version<pos:position pos:line="36" pos:column="82"/></name></expr></argument>)<pos:position pos:line="36" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">snmplib_debug<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><literal type="number" pos:line="37" pos:column="23">4<pos:position pos:line="37" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="26">"snmp_msg_Decode:Continuing anyway\n"<pos:position pos:line="37" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="39" pos:column="5">/* Now that we know the header, decode the PDU */</comment>

    <comment type="block" pos:line="41" pos:column="5">/* XXXXX -- More than one PDU? */</comment>
    <expr_stmt><expr><name pos:line="42" pos:column="5">bufp<pos:position pos:line="42" pos:column="9"/></name> <operator pos:line="42" pos:column="10">=<pos:position pos:line="42" pos:column="11"/></operator> <call><name pos:line="42" pos:column="12">snmp_pdu_decode<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">bufp<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="34">PacketLenP<pos:position pos:line="42" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="46">PDU<pos:position pos:line="42" pos:column="49"/></name></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="51"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">bufp<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">==<pos:position pos:line="43" pos:column="16"/></operator> <name pos:line="43" pos:column="17">NULL<pos:position pos:line="43" pos:column="21"/></name></expr>)<pos:position pos:line="43" pos:column="22"/></condition><then pos:line="43" pos:column="22">
        <comment type="block" pos:line="44" pos:column="9">/* snmp_pdu_decode registered failure */</comment>
        <block type="pseudo"><return pos:line="45" pos:column="9">return <expr><operator pos:line="45" pos:column="16">(<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">NULL<pos:position pos:line="45" pos:column="21"/></name><operator pos:line="45" pos:column="21">)<pos:position pos:line="45" pos:column="22"/></operator></expr>;<pos:position pos:line="45" pos:column="23"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="47" pos:column="5">bufp<pos:position pos:line="47" pos:column="9"/></name> <operator pos:line="47" pos:column="10">=<pos:position pos:line="47" pos:column="11"/></operator> <call><name pos:line="47" pos:column="12">snmp_var_DecodeVarBind<pos:position pos:line="47" pos:column="34"/></name><argument_list pos:line="47" pos:column="34">(<argument><expr><name pos:line="47" pos:column="35">bufp<pos:position pos:line="47" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="41">PacketLenP<pos:position pos:line="47" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="53">&amp;<pos:position pos:line="47" pos:column="58"/></operator><operator pos:line="47" pos:column="54">(<pos:position pos:line="47" pos:column="55"/></operator><name><name pos:line="47" pos:column="55">PDU<pos:position pos:line="47" pos:column="58"/></name><operator pos:line="47" pos:column="58">-&gt;<pos:position pos:line="47" pos:column="63"/></operator><name pos:line="47" pos:column="60">variables<pos:position pos:line="47" pos:column="69"/></name></name><operator pos:line="47" pos:column="69">)<pos:position pos:line="47" pos:column="70"/></operator></expr></argument>, <argument><expr><operator pos:line="47" pos:column="72">*<pos:position pos:line="47" pos:column="73"/></operator><name pos:line="47" pos:column="73">Version<pos:position pos:line="47" pos:column="80"/></name></expr></argument>)<pos:position pos:line="47" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="82"/></expr_stmt>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">bufp<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">==<pos:position pos:line="48" pos:column="16"/></operator> <name pos:line="48" pos:column="17">NULL<pos:position pos:line="48" pos:column="21"/></name></expr>)<pos:position pos:line="48" pos:column="22"/></condition><then pos:line="48" pos:column="22">
        <comment type="block" pos:line="49" pos:column="9">/* snmp_var_DecodeVarBind registered failure */</comment>
        <block type="pseudo"><return pos:line="50" pos:column="9">return <expr><operator pos:line="50" pos:column="16">(<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">NULL<pos:position pos:line="50" pos:column="21"/></name><operator pos:line="50" pos:column="21">)<pos:position pos:line="50" pos:column="22"/></operator></expr>;<pos:position pos:line="50" pos:column="23"/></return></block></then></if>

    <return pos:line="52" pos:column="5">return <expr><operator pos:line="52" pos:column="12">(<pos:position pos:line="52" pos:column="13"/></operator><name pos:line="52" pos:column="13">u_char<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">*<pos:position pos:line="52" pos:column="21"/></operator><operator pos:line="52" pos:column="21">)<pos:position pos:line="52" pos:column="22"/></operator> <name pos:line="52" pos:column="23">bufp<pos:position pos:line="52" pos:column="27"/></name></expr>;<pos:position pos:line="52" pos:column="28"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
