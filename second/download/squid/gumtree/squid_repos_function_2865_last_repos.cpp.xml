<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2865_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">snmpConstructReponse<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">SnmpRequest<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type> <name pos:line="2" pos:column="36">rq<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{

    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">snmp_pdu<pos:position pos:line="5" pos:column="20"/></name></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">RespPDU<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">debugs<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><literal type="number" pos:line="7" pos:column="12">49<pos:position pos:line="7" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="16">5<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="19">"snmpConstructReponse: Called."<pos:position pos:line="7" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="52"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">UsingSmp<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">()<pos:position pos:line="9" pos:column="19"/></argument_list></call> <operator pos:line="9" pos:column="20">&amp;&amp;<pos:position pos:line="9" pos:column="30"/></operator> <call><name pos:line="9" pos:column="23">IamWorkerProcess<pos:position pos:line="9" pos:column="39"/></name><argument_list pos:line="9" pos:column="39">()<pos:position pos:line="9" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="42"/></condition><then pos:line="9" pos:column="42"> <block pos:line="9" pos:column="43">{
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">AsyncJob<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">::<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">Start<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">(<argument><expr><operator pos:line="10" pos:column="25">new<pos:position pos:line="10" pos:column="28"/></operator> <call><name><name pos:line="10" pos:column="29">Snmp<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">::<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="35">Forwarder<pos:position pos:line="10" pos:column="44"/></name></name><argument_list pos:line="10" pos:column="44">(<argument><expr><cast type="static" pos:line="10" pos:column="45">static_cast<argument_list type="generic" pos:line="10" pos:column="56">&lt;<argument><expr><name><name pos:line="10" pos:column="57">Snmp<pos:position pos:line="10" pos:column="61"/></name><operator pos:line="10" pos:column="61">::<pos:position pos:line="10" pos:column="63"/></operator><name pos:line="10" pos:column="63">Pdu<pos:position pos:line="10" pos:column="66"/></name></name><operator pos:line="10" pos:column="66">&amp;<pos:position pos:line="10" pos:column="71"/></operator></expr></argument>&gt;<pos:position pos:line="10" pos:column="71"/></argument_list><argument_list pos:line="10" pos:column="68">(<argument><expr><operator pos:line="10" pos:column="69">*<pos:position pos:line="10" pos:column="70"/></operator><name><name pos:line="10" pos:column="70">rq<pos:position pos:line="10" pos:column="72"/></name><operator pos:line="10" pos:column="72">-&gt;<pos:position pos:line="10" pos:column="77"/></operator><name pos:line="10" pos:column="74">PDU<pos:position pos:line="10" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="78"/></argument_list></cast></expr></argument>,
                                            <argument><expr><cast type="static" pos:line="11" pos:column="45">static_cast<argument_list type="generic" pos:line="11" pos:column="56">&lt;<argument><expr><name><name pos:line="11" pos:column="57">Snmp<pos:position pos:line="11" pos:column="61"/></name><operator pos:line="11" pos:column="61">::<pos:position pos:line="11" pos:column="63"/></operator><name pos:line="11" pos:column="63">Session<pos:position pos:line="11" pos:column="70"/></name></name><operator pos:line="11" pos:column="70">&amp;<pos:position pos:line="11" pos:column="75"/></operator></expr></argument>&gt;<pos:position pos:line="11" pos:column="75"/></argument_list><argument_list pos:line="11" pos:column="72">(<argument><expr><name><name pos:line="11" pos:column="73">rq<pos:position pos:line="11" pos:column="75"/></name><operator pos:line="11" pos:column="75">-&gt;<pos:position pos:line="11" pos:column="80"/></operator><name pos:line="11" pos:column="77">session<pos:position pos:line="11" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="85"/></argument_list></cast></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="87">rq<pos:position pos:line="11" pos:column="89"/></name><operator pos:line="11" pos:column="89">-&gt;<pos:position pos:line="11" pos:column="94"/></operator><name pos:line="11" pos:column="91">sock<pos:position pos:line="11" pos:column="95"/></name></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="97">rq<pos:position pos:line="11" pos:column="99"/></name><operator pos:line="11" pos:column="99">-&gt;<pos:position pos:line="11" pos:column="104"/></operator><name pos:line="11" pos:column="101">from<pos:position pos:line="11" pos:column="105"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="106"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="108"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">snmp_free_pdu<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name><name pos:line="12" pos:column="23">rq<pos:position pos:line="12" pos:column="25"/></name><operator pos:line="12" pos:column="25">-&gt;<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="27">PDU<pos:position pos:line="12" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="16" pos:column="5">RespPDU<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <call><name pos:line="16" pos:column="15">snmpAgentResponse<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name><name pos:line="16" pos:column="33">rq<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">-&gt;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="37">PDU<pos:position pos:line="16" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">snmp_free_pdu<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name><name pos:line="17" pos:column="19">rq<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">-&gt;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="23">PDU<pos:position pos:line="17" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">RespPDU<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">!=<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">NULL<pos:position pos:line="19" pos:column="24"/></name></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25"> <block pos:line="19" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">snmp_build<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><operator pos:line="20" pos:column="20">&amp;<pos:position pos:line="20" pos:column="25"/></operator><name><name pos:line="20" pos:column="21">rq<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">session<pos:position pos:line="20" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="34">RespPDU<pos:position pos:line="20" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="43">rq<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">-&gt;<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="47">outbuf<pos:position pos:line="20" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="55">&amp;<pos:position pos:line="20" pos:column="60"/></operator><name><name pos:line="20" pos:column="56">rq<pos:position pos:line="20" pos:column="58"/></name><operator pos:line="20" pos:column="58">-&gt;<pos:position pos:line="20" pos:column="63"/></operator><name pos:line="20" pos:column="60">outlen<pos:position pos:line="20" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">comm_udp_sendto<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name><name pos:line="21" pos:column="25">rq<pos:position pos:line="21" pos:column="27"/></name><operator pos:line="21" pos:column="27">-&gt;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="29">sock<pos:position pos:line="21" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="35">rq<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">-&gt;<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="39">from<pos:position pos:line="21" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="45">rq<pos:position pos:line="21" pos:column="47"/></name><operator pos:line="21" pos:column="47">-&gt;<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="49">outbuf<pos:position pos:line="21" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="57">rq<pos:position pos:line="21" pos:column="59"/></name><operator pos:line="21" pos:column="59">-&gt;<pos:position pos:line="21" pos:column="64"/></operator><name pos:line="21" pos:column="61">outlen<pos:position pos:line="21" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">snmp_free_pdu<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">RespPDU<pos:position pos:line="22" pos:column="30"/></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
