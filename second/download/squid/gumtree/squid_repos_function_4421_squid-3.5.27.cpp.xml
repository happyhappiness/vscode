<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4421_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Bio<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">sslFeatures<pos:position pos:line="2" pos:column="22"/></name><operator pos:line="2" pos:column="22">::<pos:position pos:line="2" pos:column="24"/></operator><name pos:line="2" pos:column="24">get<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">MemBuf<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">&amp;<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="42">buf<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">bool<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">record<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">msgSize<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">(<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">msgSize<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">=<pos:position pos:line="5" pos:column="19"/></operator> <call><name pos:line="5" pos:column="20">parseMsgHead<pos:position pos:line="5" pos:column="32"/></name><argument_list pos:line="5" pos:column="32">(<argument><expr><name pos:line="5" pos:column="33">buf<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call><operator pos:line="5" pos:column="37">)<pos:position pos:line="5" pos:column="38"/></operator> <operator pos:line="5" pos:column="39">&lt;=<pos:position pos:line="5" pos:column="44"/></operator> <literal type="number" pos:line="5" pos:column="42">0<pos:position pos:line="5" pos:column="43"/></literal></expr>)<pos:position pos:line="5" pos:column="44"/></condition><then pos:line="5" pos:column="44"> <block pos:line="5" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">83<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="20">7<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="23">"Not a known SSL handshake message"<pos:position pos:line="6" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="60"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">record<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16"> <block pos:line="10" pos:column="17">{
        <expr_stmt><expr><call><name><name pos:line="11" pos:column="9">helloMessage<pos:position pos:line="11" pos:column="21"/></name><operator pos:line="11" pos:column="21">.<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">clear<pos:position pos:line="11" pos:column="27"/></name></name><argument_list pos:line="11" pos:column="27">()<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">helloMessage<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">.<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">append<pos:position pos:line="12" pos:column="28"/></name></name><argument_list pos:line="12" pos:column="28">(<argument><expr><call><name><name pos:line="12" pos:column="29">buf<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">content<pos:position pos:line="12" pos:column="40"/></name></name><argument_list pos:line="12" pos:column="40">()<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="12" pos:column="44">buf<pos:position pos:line="12" pos:column="47"/></name><operator pos:line="12" pos:column="47">.<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="48">contentSize<pos:position pos:line="12" pos:column="59"/></name></name><argument_list pos:line="12" pos:column="59">()<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">unsigned<pos:position pos:line="15" pos:column="19"/></name> <name pos:line="15" pos:column="20">char<pos:position pos:line="15" pos:column="24"/></name> <modifier pos:line="15" pos:column="25">*<pos:position pos:line="15" pos:column="26"/></modifier></type><name pos:line="15" pos:column="26">msg<pos:position pos:line="15" pos:column="29"/></name> <init pos:line="15" pos:column="30">= <expr><call><name pos:line="15" pos:column="32">helloRecord<pos:position pos:line="15" pos:column="43"/></name><argument_list pos:line="15" pos:column="43">(<argument><expr><name pos:line="15" pos:column="44">buf<pos:position pos:line="15" pos:column="47"/></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="49"/></decl_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">msg<pos:position pos:line="16" pos:column="13"/></name></expr>)<pos:position pos:line="16" pos:column="14"/></condition><then pos:line="16" pos:column="14"> <block pos:line="16" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">83<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">2<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"Partial SSL handshake message, can not parse!"<pos:position pos:line="17" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="72"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><literal type="boolean" pos:line="18" pos:column="16">false<pos:position pos:line="18" pos:column="21"/></literal></expr>;<pos:position pos:line="18" pos:column="22"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">msg<pos:position pos:line="21" pos:column="12"/></name><index pos:line="21" pos:column="12">[<expr><literal type="number" pos:line="21" pos:column="13">0<pos:position pos:line="21" pos:column="14"/></literal></expr>]<pos:position pos:line="21" pos:column="15"/></index></name> <operator pos:line="21" pos:column="16">&amp;<pos:position pos:line="21" pos:column="21"/></operator> <literal type="number" pos:line="21" pos:column="18">0x80<pos:position pos:line="21" pos:column="22"/></literal></expr>)<pos:position pos:line="21" pos:column="23"/></condition><then pos:line="21" pos:column="23">
        <block type="pseudo"><return pos:line="22" pos:column="9">return <expr><call><name pos:line="22" pos:column="16">parseV23Hello<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">msg<pos:position pos:line="22" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="35">(<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="36">size_t<pos:position pos:line="22" pos:column="42"/></name><operator pos:line="22" pos:column="42">)<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="43">msgSize<pos:position pos:line="22" pos:column="50"/></name></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></return></block></then>
    <else pos:line="23" pos:column="5">else <block pos:line="23" pos:column="10">{
        <comment type="line" pos:line="24" pos:column="9">// Hello messages require 5 bytes header + 1 byte Msg type + 3 bytes for Msg size</comment>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name><name pos:line="25" pos:column="13">buf<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">.<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="17">contentSize<pos:position pos:line="25" pos:column="28"/></name></name><argument_list pos:line="25" pos:column="28">()<pos:position pos:line="25" pos:column="30"/></argument_list></call> <operator pos:line="25" pos:column="31">&lt;<pos:position pos:line="25" pos:column="35"/></operator> <literal type="number" pos:line="25" pos:column="33">9<pos:position pos:line="25" pos:column="34"/></literal></expr>)<pos:position pos:line="25" pos:column="35"/></condition><then pos:line="25" pos:column="35">
            <block type="pseudo"><return pos:line="26" pos:column="13">return <expr><literal type="boolean" pos:line="26" pos:column="20">false<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></return></block></then></if>

        <comment type="line" pos:line="28" pos:column="9">// Check for the Handshake/Message type</comment>
        <comment type="line" pos:line="29" pos:column="9">// The type 2 is a ServerHello, the type 1 is a ClientHello</comment>
        <comment type="line" pos:line="30" pos:column="9">// RFC5246 section 7.4</comment>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name><name pos:line="31" pos:column="13">msg<pos:position pos:line="31" pos:column="16"/></name><index pos:line="31" pos:column="16">[<expr><literal type="number" pos:line="31" pos:column="17">5<pos:position pos:line="31" pos:column="18"/></literal></expr>]<pos:position pos:line="31" pos:column="19"/></index></name> <operator pos:line="31" pos:column="20">==<pos:position pos:line="31" pos:column="22"/></operator> <literal type="number" pos:line="31" pos:column="23">0x2<pos:position pos:line="31" pos:column="26"/></literal></expr>)<pos:position pos:line="31" pos:column="27"/></condition><then pos:line="31" pos:column="27"> <block pos:line="31" pos:column="28">{ <comment type="line" pos:line="31" pos:column="30">// ServerHello message</comment>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><call><name pos:line="32" pos:column="17">parseV3ServerHello<pos:position pos:line="32" pos:column="35"/></name><argument_list pos:line="32" pos:column="35">(<argument><expr><name pos:line="32" pos:column="36">msg<pos:position pos:line="32" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="41">(<pos:position pos:line="32" pos:column="42"/></operator><name pos:line="32" pos:column="42">size_t<pos:position pos:line="32" pos:column="48"/></name><operator pos:line="32" pos:column="48">)<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="49">msgSize<pos:position pos:line="32" pos:column="56"/></name></expr></argument>)<pos:position pos:line="32" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="58"/></condition><then pos:line="32" pos:column="58"> <block pos:line="32" pos:column="59">{
                <expr_stmt><expr><name pos:line="33" pos:column="17">hasCcsOrNst<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">=<pos:position pos:line="33" pos:column="30"/></operator> <call><name pos:line="33" pos:column="31">checkForCcsOrNst<pos:position pos:line="33" pos:column="47"/></name><argument_list pos:line="33" pos:column="47">(<argument><expr><name pos:line="33" pos:column="48">buf<pos:position pos:line="33" pos:column="51"/></name></expr></argument>)<pos:position pos:line="33" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="53"/></expr_stmt>
                <return pos:line="34" pos:column="17">return <expr><literal type="boolean" pos:line="34" pos:column="24">true<pos:position pos:line="34" pos:column="28"/></literal></expr>;<pos:position pos:line="34" pos:column="29"/></return>
            }<pos:position pos:line="35" pos:column="14"/></block></then></if>
        }<pos:position pos:line="36" pos:column="10"/></block></then> <elseif pos:line="36" pos:column="11">else <if pos:line="36" pos:column="16">if <condition pos:line="36" pos:column="19">(<expr><name><name pos:line="36" pos:column="20">msg<pos:position pos:line="36" pos:column="23"/></name><index pos:line="36" pos:column="23">[<expr><literal type="number" pos:line="36" pos:column="24">5<pos:position pos:line="36" pos:column="25"/></literal></expr>]<pos:position pos:line="36" pos:column="26"/></index></name> <operator pos:line="36" pos:column="27">==<pos:position pos:line="36" pos:column="29"/></operator> <literal type="number" pos:line="36" pos:column="30">0x1<pos:position pos:line="36" pos:column="33"/></literal></expr>)<pos:position pos:line="36" pos:column="34"/></condition><then pos:line="36" pos:column="34"> <comment type="line" pos:line="36" pos:column="35">// ClientHello message,</comment>
            <block type="pseudo"><return pos:line="37" pos:column="13">return <expr><call><name pos:line="37" pos:column="20">parseV3Hello<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">msg<pos:position pos:line="37" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="38">(<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="39">size_t<pos:position pos:line="37" pos:column="45"/></name><operator pos:line="37" pos:column="45">)<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="46">msgSize<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></return></block></then></if></elseif></if>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>

    <return pos:line="40" pos:column="5">return <expr><literal type="boolean" pos:line="40" pos:column="12">false<pos:position pos:line="40" pos:column="17"/></literal></expr>;<pos:position pos:line="40" pos:column="18"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
