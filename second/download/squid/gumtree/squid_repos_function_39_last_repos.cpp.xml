<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_39_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">make_pub_auth<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">cachemgr_request<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type> <name pos:line="2" pos:column="34">req<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">buf<pos:position pos:line="4" pos:column="20"/></name><index pos:line="4" pos:column="20">[<expr><literal type="number" pos:line="4" pos:column="21">1024<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">safe_free<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">(<argument><expr><name><name pos:line="5" pos:column="15">req<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">-&gt;<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="20">pub_auth<pos:position pos:line="5" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debug<pos:position pos:line="6" pos:column="10"/></name><argument_list pos:line="6" pos:column="10">(<argument><expr><literal type="string" pos:line="6" pos:column="11">"cmgr: encoding for pub...\n"<pos:position pos:line="6" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="42"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">req<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">passwd<pos:position pos:line="8" pos:column="21"/></name></name> <operator pos:line="8" pos:column="22">||<pos:position pos:line="8" pos:column="24"/></operator> <operator pos:line="8" pos:column="25">!<pos:position pos:line="8" pos:column="26"/></operator><call><name pos:line="8" pos:column="26">strlen<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">(<argument><expr><name><name pos:line="8" pos:column="33">req<pos:position pos:line="8" pos:column="36"/></name><operator pos:line="8" pos:column="36">-&gt;<pos:position pos:line="8" pos:column="41"/></operator><name pos:line="8" pos:column="38">passwd<pos:position pos:line="8" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="46"/></condition><then pos:line="8" pos:column="46">
        <block type="pseudo"><return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="11" pos:column="5">/* host | time | user | passwd */</comment>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">int<pos:position pos:line="12" pos:column="14"/></name></type> <name pos:line="12" pos:column="15">bufLen<pos:position pos:line="12" pos:column="21"/></name> <init pos:line="12" pos:column="22">= <expr><call><name pos:line="12" pos:column="24">snprintf<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">buf<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="38">sizeof<argument_list pos:line="12" pos:column="44">(<argument><expr><name pos:line="12" pos:column="45">buf<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="51">"%s|%d|%s|%s"<pos:position pos:line="12" pos:column="64"/></literal></expr></argument>,
                                <argument><expr><name><name pos:line="13" pos:column="33">req<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">-&gt;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="38">hostname<pos:position pos:line="13" pos:column="46"/></name></name></expr></argument>,
                                <argument><expr><operator pos:line="14" pos:column="33">(<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="34">int<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">)<pos:position pos:line="14" pos:column="38"/></operator> <name pos:line="14" pos:column="39">now<pos:position pos:line="14" pos:column="42"/></name></expr></argument>,
                                <argument><expr><ternary><condition><expr><name><name pos:line="15" pos:column="33">req<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">user_name<pos:position pos:line="15" pos:column="47"/></name></name></expr> ?<pos:position pos:line="15" pos:column="49"/></condition><then pos:line="15" pos:column="49"> <expr><name><name pos:line="15" pos:column="50">req<pos:position pos:line="15" pos:column="53"/></name><operator pos:line="15" pos:column="53">-&gt;<pos:position pos:line="15" pos:column="58"/></operator><name pos:line="15" pos:column="55">user_name<pos:position pos:line="15" pos:column="64"/></name></name></expr> <pos:position pos:line="15" pos:column="65"/></then><else pos:line="15" pos:column="65">: <expr><literal type="string" pos:line="15" pos:column="67">""<pos:position pos:line="15" pos:column="69"/></literal></expr></else></ternary></expr></argument>,
                                <argument><expr><name><name pos:line="16" pos:column="33">req<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">passwd<pos:position pos:line="16" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="46"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">debug<pos:position pos:line="17" pos:column="10"/></name><argument_list pos:line="17" pos:column="10">(<argument><expr><literal type="string" pos:line="17" pos:column="11">"cmgr: pre-encoded for pub: %s\n"<pos:position pos:line="17" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="46">buf<pos:position pos:line="17" pos:column="49"/></name></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="19" pos:column="5">const<pos:position pos:line="19" pos:column="10"/></specifier> <name pos:line="19" pos:column="11">int<pos:position pos:line="19" pos:column="14"/></name></type> <name pos:line="19" pos:column="15">encodedLen<pos:position pos:line="19" pos:column="25"/></name> <init pos:line="19" pos:column="26">= <expr><call><name pos:line="19" pos:column="28">base64_encode_len<pos:position pos:line="19" pos:column="45"/></name><argument_list pos:line="19" pos:column="45">(<argument><expr><name pos:line="19" pos:column="46">bufLen<pos:position pos:line="19" pos:column="52"/></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="54"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">req<pos:position pos:line="20" pos:column="8"/></name><operator pos:line="20" pos:column="8">-&gt;<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="10">pub_auth<pos:position pos:line="20" pos:column="18"/></name></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <operator pos:line="20" pos:column="21">(<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">char<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">*<pos:position pos:line="20" pos:column="28"/></operator><operator pos:line="20" pos:column="28">)<pos:position pos:line="20" pos:column="29"/></operator> <call><name pos:line="20" pos:column="30">xmalloc<pos:position pos:line="20" pos:column="37"/></name><argument_list pos:line="20" pos:column="37">(<argument><expr><name pos:line="20" pos:column="38">encodedLen<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="21" pos:column="5">struct<pos:position pos:line="21" pos:column="11"/></name> <name pos:line="21" pos:column="12">base64_encode_ctx<pos:position pos:line="21" pos:column="29"/></name></name></type> <name pos:line="21" pos:column="30">ctx<pos:position pos:line="21" pos:column="33"/></name></decl>;<pos:position pos:line="21" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">base64_encode_init<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name pos:line="22" pos:column="25">ctx<pos:position pos:line="22" pos:column="28"/></name></expr></argument>)<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">size_t<pos:position pos:line="23" pos:column="11"/></name></type> <name pos:line="23" pos:column="12">blen<pos:position pos:line="23" pos:column="16"/></name> <init pos:line="23" pos:column="17">= <expr><call><name pos:line="23" pos:column="19">base64_encode_update<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">(<argument><expr><operator pos:line="23" pos:column="40">&amp;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="41">ctx<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="23" pos:column="46">reinterpret_cast<argument_list type="generic" pos:line="23" pos:column="62">&lt;<argument><expr><name pos:line="23" pos:column="63">uint8_t<pos:position pos:line="23" pos:column="70"/></name><operator pos:line="23" pos:column="70">*<pos:position pos:line="23" pos:column="71"/></operator></expr></argument>&gt;<pos:position pos:line="23" pos:column="75"/></argument_list><argument_list pos:line="23" pos:column="72">(<argument><expr><name><name pos:line="23" pos:column="73">req<pos:position pos:line="23" pos:column="76"/></name><operator pos:line="23" pos:column="76">-&gt;<pos:position pos:line="23" pos:column="81"/></operator><name pos:line="23" pos:column="78">pub_auth<pos:position pos:line="23" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="87"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="23" pos:column="89">bufLen<pos:position pos:line="23" pos:column="95"/></name></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="23" pos:column="97">reinterpret_cast<argument_list type="generic" pos:line="23" pos:column="113">&lt;<argument><expr><name pos:line="23" pos:column="114">uint8_t<pos:position pos:line="23" pos:column="121"/></name><operator pos:line="23" pos:column="121">*<pos:position pos:line="23" pos:column="122"/></operator></expr></argument>&gt;<pos:position pos:line="23" pos:column="126"/></argument_list><argument_list pos:line="23" pos:column="123">(<argument><expr><name pos:line="23" pos:column="124">buf<pos:position pos:line="23" pos:column="127"/></name></expr></argument>)<pos:position pos:line="23" pos:column="128"/></argument_list></cast></expr></argument>)<pos:position pos:line="23" pos:column="129"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="130"/></decl_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">blen<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">+=<pos:position pos:line="24" pos:column="12"/></operator> <call><name pos:line="24" pos:column="13">base64_encode_final<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><operator pos:line="24" pos:column="33">&amp;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="34">ctx<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="24" pos:column="39">reinterpret_cast<argument_list type="generic" pos:line="24" pos:column="55">&lt;<argument><expr><name pos:line="24" pos:column="56">uint8_t<pos:position pos:line="24" pos:column="63"/></name><operator pos:line="24" pos:column="63">*<pos:position pos:line="24" pos:column="64"/></operator></expr></argument>&gt;<pos:position pos:line="24" pos:column="68"/></argument_list><argument_list pos:line="24" pos:column="65">(<argument><expr><name><name pos:line="24" pos:column="66">req<pos:position pos:line="24" pos:column="69"/></name><operator pos:line="24" pos:column="69">-&gt;<pos:position pos:line="24" pos:column="74"/></operator><name pos:line="24" pos:column="71">pub_auth<pos:position pos:line="24" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="80"/></argument_list></cast><operator pos:line="24" pos:column="80">+<pos:position pos:line="24" pos:column="81"/></operator><name pos:line="24" pos:column="81">blen<pos:position pos:line="24" pos:column="85"/></name></expr></argument>)<pos:position pos:line="24" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="87"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">req<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">-&gt;<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="10">pub_auth<pos:position pos:line="25" pos:column="18"/></name><index pos:line="25" pos:column="18">[<expr><name pos:line="25" pos:column="19">blen<pos:position pos:line="25" pos:column="23"/></name></expr>]<pos:position pos:line="25" pos:column="24"/></index></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <literal type="char" pos:line="25" pos:column="27">'\0'<pos:position pos:line="25" pos:column="31"/></literal></expr>;<pos:position pos:line="25" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">debug<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><literal type="string" pos:line="26" pos:column="11">"cmgr: encoded: '%s'\n"<pos:position pos:line="26" pos:column="34"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="36">req<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">-&gt;<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="41">pub_auth<pos:position pos:line="26" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="51"/></expr_stmt>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
