<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6240_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">DiskIOModule<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">SetupAllModules<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">HAVE_DISKIO_MODULE_AIO<pos:position pos:line="4" pos:column="27"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">AIODiskIOModule<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">::<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">GetInstance<pos:position pos:line="5" pos:column="33"/></name></name><argument_list pos:line="5" pos:column="33">()<pos:position pos:line="5" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">HAVE_DISKIO_MODULE_BLOCKING<pos:position pos:line="7" pos:column="32"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">BlockingDiskIOModule<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">::<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">GetInstance<pos:position pos:line="8" pos:column="38"/></name></name><argument_list pos:line="8" pos:column="38">()<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">HAVE_DISKIO_MODULE_DISKDAEMON<pos:position pos:line="10" pos:column="34"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="11" pos:column="5">DiskDaemonDiskIOModule<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">::<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">GetInstance<pos:position pos:line="11" pos:column="40"/></name></name><argument_list pos:line="11" pos:column="40">()<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><name pos:line="13" pos:column="5">HAVE_DISKIO_MODULE_DISKTHREADS<pos:position pos:line="13" pos:column="35"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">DiskThreadsDiskIOModule<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">::<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="30">GetInstance<pos:position pos:line="14" pos:column="41"/></name></name><argument_list pos:line="14" pos:column="41">()<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><name pos:line="16" pos:column="5">HAVE_DISKIO_MODULE_IPCIO<pos:position pos:line="16" pos:column="29"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">IpcIoDiskIOModule<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">::<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">GetInstance<pos:position pos:line="17" pos:column="35"/></name></name><argument_list pos:line="17" pos:column="35">()<pos:position pos:line="17" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">if<pos:position pos:line="19" pos:column="4"/></cpp:directive> <expr><name pos:line="19" pos:column="5">HAVE_DISKIO_MODULE_MMAPPED<pos:position pos:line="19" pos:column="31"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">MmappedDiskIOModule<pos:position pos:line="20" pos:column="24"/></name><operator pos:line="20" pos:column="24">::<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">GetInstance<pos:position pos:line="20" pos:column="37"/></name></name><argument_list pos:line="20" pos:column="37">()<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>

    <for pos:line="23" pos:column="5">for <control pos:line="23" pos:column="9">(<init><decl><type><name pos:line="23" pos:column="10">iterator<pos:position pos:line="23" pos:column="18"/></name></type> <name pos:line="23" pos:column="19">i<pos:position pos:line="23" pos:column="20"/></name> <init pos:line="23" pos:column="21">= <expr><call><name pos:line="23" pos:column="23">GetModules<pos:position pos:line="23" pos:column="33"/></name><argument_list pos:line="23" pos:column="33">()<pos:position pos:line="23" pos:column="35"/></argument_list></call><operator pos:line="23" pos:column="35">.<pos:position pos:line="23" pos:column="36"/></operator><call><name pos:line="23" pos:column="36">begin<pos:position pos:line="23" pos:column="41"/></name><argument_list pos:line="23" pos:column="41">()<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="44"/></init> <condition><expr><name pos:line="23" pos:column="45">i<pos:position pos:line="23" pos:column="46"/></name> <operator pos:line="23" pos:column="47">!=<pos:position pos:line="23" pos:column="49"/></operator> <call><name pos:line="23" pos:column="50">GetModules<pos:position pos:line="23" pos:column="60"/></name><argument_list pos:line="23" pos:column="60">()<pos:position pos:line="23" pos:column="62"/></argument_list></call><operator pos:line="23" pos:column="62">.<pos:position pos:line="23" pos:column="63"/></operator><call><name pos:line="23" pos:column="63">end<pos:position pos:line="23" pos:column="66"/></name><argument_list pos:line="23" pos:column="66">()<pos:position pos:line="23" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="69"/></condition> <incr><expr><operator pos:line="23" pos:column="70">++<pos:position pos:line="23" pos:column="72"/></operator><name pos:line="23" pos:column="72">i<pos:position pos:line="23" pos:column="73"/></name></expr></incr>)<pos:position pos:line="23" pos:column="74"/></control>
        <comment type="block" pos:line="24" pos:column="9">/* Call the FS to set up capabilities and initialize the FS driver */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name><operator pos:line="25" pos:column="9">(<pos:position pos:line="25" pos:column="10"/></operator><operator pos:line="25" pos:column="10">*<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="11">i<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">)<pos:position pos:line="25" pos:column="13"/></operator><operator pos:line="25" pos:column="13">-&gt;<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="15">init<pos:position pos:line="25" pos:column="19"/></name></name><argument_list pos:line="25" pos:column="19">()<pos:position pos:line="25" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt></block></for>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
