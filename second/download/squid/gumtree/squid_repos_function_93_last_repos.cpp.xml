<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_93_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">checkForPortOnly<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">( <parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name><modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type> <name pos:line="2" pos:column="31">arg<pos:position pos:line="2" pos:column="34"/></name></decl></parameter> )<pos:position pos:line="2" pos:column="36"/></parameter_list>
<comment type="line" pos:line="3" pos:column="1">// purpose: see if somebody just put in a port instead of a hostname</comment>
<comment type="line" pos:line="4" pos:column="1">// paramtr: optarg (IN): argument from commandline</comment>
<comment type="line" pos:line="5" pos:column="1">// returns: 0..65535 is the valid port number in network byte order,</comment>
<comment type="line" pos:line="6" pos:column="1">//          -1 if not a port</comment>
<block pos:line="7" pos:column="1">{
    <comment type="line" pos:line="8" pos:column="5">// if there is a period in there, it must be a valid hostname</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">( <expr><call><name pos:line="9" pos:column="10">strchr<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">( <argument><expr><name pos:line="9" pos:column="18">arg<pos:position pos:line="9" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="23">'.'<pos:position pos:line="9" pos:column="26"/></literal></expr></argument> )<pos:position pos:line="9" pos:column="28"/></argument_list></call> <operator pos:line="9" pos:column="29">!=<pos:position pos:line="9" pos:column="31"/></operator> <literal type="number" pos:line="9" pos:column="32">0<pos:position pos:line="9" pos:column="33"/></literal></expr> )<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35"> <block type="pseudo"><return pos:line="9" pos:column="36">return <expr><operator pos:line="9" pos:column="43">-<pos:position pos:line="9" pos:column="44"/></operator><literal type="number" pos:line="9" pos:column="44">1<pos:position pos:line="9" pos:column="45"/></literal></expr>;<pos:position pos:line="9" pos:column="46"/></return></block></then></if>

    <comment type="line" pos:line="11" pos:column="5">// if it is just a number between 0 and 65535, it must be a port</comment>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name><modifier pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></modifier></type> <name pos:line="12" pos:column="11">errstr<pos:position pos:line="12" pos:column="17"/></name> <init pos:line="12" pos:column="18">= <expr><literal type="number" pos:line="12" pos:column="20">0<pos:position pos:line="12" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">unsigned<pos:position pos:line="13" pos:column="13"/></name> <name pos:line="13" pos:column="14">long<pos:position pos:line="13" pos:column="18"/></name></type> <name pos:line="13" pos:column="19">result<pos:position pos:line="13" pos:column="25"/></name> <init pos:line="13" pos:column="26">= <expr><call><name pos:line="13" pos:column="28">strtoul<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">( <argument><expr><name pos:line="13" pos:column="37">arg<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="42">&amp;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="43">errstr<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="51">0<pos:position pos:line="13" pos:column="52"/></literal></expr></argument> )<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="55"/></decl_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">( <expr><name pos:line="14" pos:column="10">result<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">&lt;<pos:position pos:line="14" pos:column="21"/></operator> <literal type="number" pos:line="14" pos:column="19">65536<pos:position pos:line="14" pos:column="24"/></literal> <operator pos:line="14" pos:column="25">&amp;&amp;<pos:position pos:line="14" pos:column="35"/></operator> <name pos:line="14" pos:column="28">errstr<pos:position pos:line="14" pos:column="34"/></name> <operator pos:line="14" pos:column="35">!=<pos:position pos:line="14" pos:column="37"/></operator> <name pos:line="14" pos:column="38">arg<pos:position pos:line="14" pos:column="41"/></name></expr> )<pos:position pos:line="14" pos:column="43"/></condition><then pos:line="14" pos:column="43"> <block type="pseudo"><return pos:line="14" pos:column="44">return <expr><call><name pos:line="14" pos:column="51">htons<pos:position pos:line="14" pos:column="56"/></name><argument_list pos:line="14" pos:column="56">(<argument><expr><name pos:line="14" pos:column="57">result<pos:position pos:line="14" pos:column="63"/></name></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="65"/></return></block></then></if>

<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="16" pos:column="5">0<pos:position pos:line="16" pos:column="6"/></literal></expr></cpp:if>
    <comment type="line" pos:line="17" pos:column="5">// one last try, test for a symbolical service name</comment>
    struct servent* service = getservbyname( arg, "tcp" );
    return service ? service-&gt;s_port : -1;
<cpp:else pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">else<pos:position pos:line="20" pos:column="6"/></cpp:directive></cpp:else>
    <return pos:line="21" pos:column="5">return <expr><operator pos:line="21" pos:column="12">-<pos:position pos:line="21" pos:column="13"/></operator><literal type="number" pos:line="21" pos:column="13">1<pos:position pos:line="21" pos:column="14"/></literal></expr>;<pos:position pos:line="21" pos:column="15"/></return>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
