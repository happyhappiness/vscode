<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4892_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLRandom<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">parse<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">()<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">t<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">bufa<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><literal type="number" pos:line="5" pos:column="15">256<pos:position pos:line="5" pos:column="18"/></literal></expr>]<pos:position pos:line="5" pos:column="19"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="5" pos:column="21">bufb<pos:position pos:line="5" pos:column="25"/></name><index pos:line="5" pos:column="25">[<expr><literal type="number" pos:line="5" pos:column="26">256<pos:position pos:line="5" pos:column="29"/></literal></expr>]<pos:position pos:line="5" pos:column="30"/></index></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">t<pos:position pos:line="7" pos:column="6"/></name> <operator pos:line="7" pos:column="7">=<pos:position pos:line="7" pos:column="8"/></operator> <call><name pos:line="7" pos:column="9">strtokFile<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">()<pos:position pos:line="7" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">t<pos:position pos:line="8" pos:column="11"/></name></expr>)<pos:position pos:line="8" pos:column="12"/></condition><then pos:line="8" pos:column="12"> <block pos:line="8" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">28<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="20">DBG_PARSE_NOTE<pos:position pos:line="9" pos:column="34"/></name><argument_list pos:line="9" pos:column="34">(<argument><expr><name pos:line="9" pos:column="35">DBG_IMPORTANT<pos:position pos:line="9" pos:column="48"/></name></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="51">"ACL random missing pattern"<pos:position pos:line="9" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="81"/></expr_stmt>
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">debugs<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="number" pos:line="13" pos:column="12">28<pos:position pos:line="13" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="16">5<pos:position pos:line="13" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="19">"aclParseRandomData: "<pos:position pos:line="13" pos:column="41"/></literal> <operator pos:line="13" pos:column="42">&lt;&lt;<pos:position pos:line="13" pos:column="50"/></operator> <name pos:line="13" pos:column="45">t<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>

    <comment type="line" pos:line="15" pos:column="5">// seed random generator ...</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">srand<pos:position pos:line="16" pos:column="10"/></name><argument_list pos:line="16" pos:column="10">(<argument><expr><call><name pos:line="16" pos:column="11">time<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">NULL<pos:position pos:line="16" pos:column="20"/></name></expr></argument>)<pos:position pos:line="16" pos:column="21"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">sscanf<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">t<pos:position pos:line="18" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="19">"%[0-9]:%[0-9]"<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="36">bufa<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="42">bufb<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call> <operator pos:line="18" pos:column="48">==<pos:position pos:line="18" pos:column="50"/></operator> <literal type="number" pos:line="18" pos:column="51">2<pos:position pos:line="18" pos:column="52"/></literal></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53"> <block pos:line="18" pos:column="54">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">int<pos:position pos:line="19" pos:column="12"/></name></type> <name pos:line="19" pos:column="13">a<pos:position pos:line="19" pos:column="14"/></name> <init pos:line="19" pos:column="15">= <expr><call><name pos:line="19" pos:column="17">xatoi<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">bufa<pos:position pos:line="19" pos:column="27"/></name></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">int<pos:position pos:line="20" pos:column="12"/></name></type> <name pos:line="20" pos:column="13">b<pos:position pos:line="20" pos:column="14"/></name> <init pos:line="20" pos:column="15">= <expr><call><name pos:line="20" pos:column="17">xatoi<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">bufb<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="29"/></decl_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">a<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">&lt;=<pos:position pos:line="21" pos:column="20"/></operator> <literal type="number" pos:line="21" pos:column="18">0<pos:position pos:line="21" pos:column="19"/></literal> <operator pos:line="21" pos:column="20">||<pos:position pos:line="21" pos:column="22"/></operator> <name pos:line="21" pos:column="23">b<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">&lt;=<pos:position pos:line="21" pos:column="30"/></operator> <literal type="number" pos:line="21" pos:column="28">0<pos:position pos:line="21" pos:column="29"/></literal></expr>)<pos:position pos:line="21" pos:column="30"/></condition><then pos:line="21" pos:column="30"> <block pos:line="21" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">debugs<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="number" pos:line="22" pos:column="20">28<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="24">DBG_CRITICAL<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="38">"ERROR: ACL random with bad pattern: '"<pos:position pos:line="22" pos:column="77"/></literal> <operator pos:line="22" pos:column="78">&lt;&lt;<pos:position pos:line="22" pos:column="86"/></operator> <name pos:line="22" pos:column="81">t<pos:position pos:line="22" pos:column="82"/></name> <operator pos:line="22" pos:column="83">&lt;&lt;<pos:position pos:line="22" pos:column="91"/></operator> <literal type="string" pos:line="22" pos:column="86">"'"<pos:position pos:line="22" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="91"/></expr_stmt>
            <return pos:line="23" pos:column="13">return;<pos:position pos:line="23" pos:column="20"/></return>
        }<pos:position pos:line="24" pos:column="10"/></block></then> <else pos:line="24" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="13">data<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">a<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">/<pos:position pos:line="25" pos:column="23"/></operator> <call pos:line="25" pos:column="24">(<name pos:line="25" pos:column="25">double<pos:position pos:line="25" pos:column="31"/></name>)<argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">a<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">+<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">b<pos:position pos:line="25" pos:column="36"/></name></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="38"/></expr_stmt></block></else></if>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <elseif pos:line="26" pos:column="7">else <if pos:line="26" pos:column="12">if <condition pos:line="26" pos:column="15">(<expr><call><name pos:line="26" pos:column="16">sscanf<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">t<pos:position pos:line="26" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="26">"%[0-9]/%[0-9]"<pos:position pos:line="26" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">bufa<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">bufb<pos:position pos:line="26" pos:column="53"/></name></expr></argument>)<pos:position pos:line="26" pos:column="54"/></argument_list></call> <operator pos:line="26" pos:column="55">==<pos:position pos:line="26" pos:column="57"/></operator> <literal type="number" pos:line="26" pos:column="58">2<pos:position pos:line="26" pos:column="59"/></literal></expr>)<pos:position pos:line="26" pos:column="60"/></condition><then pos:line="26" pos:column="60"> <block pos:line="26" pos:column="61">{
        <decl_stmt><decl><type><name pos:line="27" pos:column="9">int<pos:position pos:line="27" pos:column="12"/></name></type> <name pos:line="27" pos:column="13">a<pos:position pos:line="27" pos:column="14"/></name> <init pos:line="27" pos:column="15">= <expr><call><name pos:line="27" pos:column="17">xatoi<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">bufa<pos:position pos:line="27" pos:column="27"/></name></expr></argument>)<pos:position pos:line="27" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">int<pos:position pos:line="28" pos:column="12"/></name></type> <name pos:line="28" pos:column="13">b<pos:position pos:line="28" pos:column="14"/></name> <init pos:line="28" pos:column="15">= <expr><call><name pos:line="28" pos:column="17">xatoi<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">bufb<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="29"/></decl_stmt>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">a<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">&lt;=<pos:position pos:line="29" pos:column="20"/></operator> <literal type="number" pos:line="29" pos:column="18">0<pos:position pos:line="29" pos:column="19"/></literal> <operator pos:line="29" pos:column="20">||<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="23">b<pos:position pos:line="29" pos:column="24"/></name> <operator pos:line="29" pos:column="25">&lt;=<pos:position pos:line="29" pos:column="30"/></operator> <literal type="number" pos:line="29" pos:column="28">0<pos:position pos:line="29" pos:column="29"/></literal></expr>)<pos:position pos:line="29" pos:column="30"/></condition><then pos:line="29" pos:column="30"> <block pos:line="29" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">debugs<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><literal type="number" pos:line="30" pos:column="20">28<pos:position pos:line="30" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="24">DBG_CRITICAL<pos:position pos:line="30" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="38">"ERROR: ACL random with bad pattern: '"<pos:position pos:line="30" pos:column="77"/></literal> <operator pos:line="30" pos:column="78">&lt;&lt;<pos:position pos:line="30" pos:column="86"/></operator> <name pos:line="30" pos:column="81">t<pos:position pos:line="30" pos:column="82"/></name> <operator pos:line="30" pos:column="83">&lt;&lt;<pos:position pos:line="30" pos:column="91"/></operator> <literal type="string" pos:line="30" pos:column="86">"'"<pos:position pos:line="30" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="91"/></expr_stmt>
            <return pos:line="31" pos:column="13">return;<pos:position pos:line="31" pos:column="20"/></return>
        }<pos:position pos:line="32" pos:column="10"/></block></then> <else pos:line="32" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="13">data<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">=<pos:position pos:line="33" pos:column="19"/></operator> <operator pos:line="33" pos:column="20">(<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="21">double<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">)<pos:position pos:line="33" pos:column="28"/></operator> <name pos:line="33" pos:column="29">a<pos:position pos:line="33" pos:column="30"/></name> <operator pos:line="33" pos:column="31">/<pos:position pos:line="33" pos:column="32"/></operator> <operator pos:line="33" pos:column="33">(<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="34">double<pos:position pos:line="33" pos:column="40"/></name><operator pos:line="33" pos:column="40">)<pos:position pos:line="33" pos:column="41"/></operator> <name pos:line="33" pos:column="42">b<pos:position pos:line="33" pos:column="43"/></name></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt></block></else></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if></elseif> <elseif pos:line="34" pos:column="7">else <if pos:line="34" pos:column="12">if <condition pos:line="34" pos:column="15">(<expr><call><name pos:line="34" pos:column="16">sscanf<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">t<pos:position pos:line="34" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="26">"0.%[0-9]"<pos:position pos:line="34" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="38">bufa<pos:position pos:line="34" pos:column="42"/></name></expr></argument>)<pos:position pos:line="34" pos:column="43"/></argument_list></call> <operator pos:line="34" pos:column="44">==<pos:position pos:line="34" pos:column="46"/></operator> <literal type="number" pos:line="34" pos:column="47">1<pos:position pos:line="34" pos:column="48"/></literal></expr>)<pos:position pos:line="34" pos:column="49"/></condition><then pos:line="34" pos:column="49"> <block pos:line="34" pos:column="50">{
        <expr_stmt><expr><name pos:line="35" pos:column="9">data<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">=<pos:position pos:line="35" pos:column="15"/></operator> <call><name pos:line="35" pos:column="16">atof<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">t<pos:position pos:line="35" pos:column="22"/></name></expr></argument>)<pos:position pos:line="35" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if></elseif> <else pos:line="36" pos:column="7">else <block pos:line="36" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">debugs<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="number" pos:line="37" pos:column="16">28<pos:position pos:line="37" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="20">DBG_CRITICAL<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="34">"ERROR: ACL random with bad pattern: '"<pos:position pos:line="37" pos:column="73"/></literal> <operator pos:line="37" pos:column="74">&lt;&lt;<pos:position pos:line="37" pos:column="82"/></operator> <name pos:line="37" pos:column="77">t<pos:position pos:line="37" pos:column="78"/></name> <operator pos:line="37" pos:column="79">&lt;&lt;<pos:position pos:line="37" pos:column="87"/></operator> <literal type="string" pos:line="37" pos:column="82">"'"<pos:position pos:line="37" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="87"/></expr_stmt>
        <return pos:line="38" pos:column="9">return;<pos:position pos:line="38" pos:column="16"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></else></if>

    <comment type="line" pos:line="41" pos:column="5">// save the exact input pattern. so we can display it later.</comment>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">memcpy<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><name pos:line="42" pos:column="12">pattern<pos:position pos:line="42" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="21">t<pos:position pos:line="42" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="24">min<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><sizeof pos:line="42" pos:column="28">sizeof<argument_list pos:line="42" pos:column="34">(<argument><expr><name pos:line="42" pos:column="35">pattern<pos:position pos:line="42" pos:column="42"/></name></expr></argument>)<pos:position pos:line="42" pos:column="43"/></argument_list></sizeof><operator pos:line="42" pos:column="43">-<pos:position pos:line="42" pos:column="44"/></operator><literal type="number" pos:line="42" pos:column="44">1<pos:position pos:line="42" pos:column="45"/></literal></expr></argument>,<argument><expr><call><name pos:line="42" pos:column="46">strlen<pos:position pos:line="42" pos:column="52"/></name><argument_list pos:line="42" pos:column="52">(<argument><expr><name pos:line="42" pos:column="53">t<pos:position pos:line="42" pos:column="54"/></name></expr></argument>)<pos:position pos:line="42" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="58"/></expr_stmt>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
