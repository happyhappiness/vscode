<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4291_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLNoteStrategy<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">matchNotes<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><name><name pos:line="2" pos:column="29">ACLData<pos:position pos:line="2" pos:column="36"/></name><argument_list type="generic" pos:line="2" pos:column="36">&lt;<argument><expr><name pos:line="2" pos:column="37">MatchType<pos:position pos:line="2" pos:column="46"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="50"/></argument_list></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">noteData<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="59">const<pos:position pos:line="2" pos:column="64"/></specifier> <name pos:line="2" pos:column="65">NotePairs<pos:position pos:line="2" pos:column="74"/></name> <modifier pos:line="2" pos:column="75">*<pos:position pos:line="2" pos:column="76"/></modifier></type><name pos:line="2" pos:column="76">note<pos:position pos:line="2" pos:column="80"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="81"/></parameter_list> <specifier pos:line="2" pos:column="82">const<pos:position pos:line="2" pos:column="87"/></specifier>
<block pos:line="3" pos:column="1">{
    <for pos:line="4" pos:column="5">for <control pos:line="4" pos:column="9">(<init><expr><name pos:line="4" pos:column="10">auto<pos:position pos:line="4" pos:column="14"/></name> <operator pos:line="4" pos:column="15">&amp;<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="16">entry<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">:<pos:position pos:line="4" pos:column="22"/></operator> <name><name pos:line="4" pos:column="23">note<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">-&gt;<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="29">entries<pos:position pos:line="4" pos:column="36"/></name></name></expr></init>)<pos:position pos:line="4" pos:column="37"/></control> <block pos:line="4" pos:column="38">{
        <if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><operator pos:line="5" pos:column="13">!<pos:position pos:line="5" pos:column="14"/></operator><call><name><name pos:line="5" pos:column="14">delimiters<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">.<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">value<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">.<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="31">isEmpty<pos:position pos:line="5" pos:column="38"/></name></name><argument_list pos:line="5" pos:column="38">()<pos:position pos:line="5" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="41"/></condition><then pos:line="5" pos:column="41"> <block pos:line="5" pos:column="42">{
            <decl_stmt><decl><type><name><name pos:line="6" pos:column="13">NotePairs<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">::<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">Entry<pos:position pos:line="6" pos:column="29"/></name></name></type> <name pos:line="6" pos:column="30">e<pos:position pos:line="6" pos:column="31"/></name><argument_list pos:line="6" pos:column="31">(<argument><expr><call><name><name pos:line="6" pos:column="32">entry<pos:position pos:line="6" pos:column="37"/></name><operator pos:line="6" pos:column="37">-&gt;<pos:position pos:line="6" pos:column="42"/></operator><name pos:line="6" pos:column="39">name<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">.<pos:position pos:line="6" pos:column="44"/></operator><name pos:line="6" pos:column="44">termedBuf<pos:position pos:line="6" pos:column="53"/></name></name><argument_list pos:line="6" pos:column="53">()<pos:position pos:line="6" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="57">""<pos:position pos:line="6" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="60"/></argument_list></decl>;<pos:position pos:line="6" pos:column="61"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="7" pos:column="13">Parser<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">::<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="21">Tokenizer<pos:position pos:line="7" pos:column="30"/></name></name></type> <name pos:line="7" pos:column="31">t<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><call><name pos:line="7" pos:column="33">StringToSBuf<pos:position pos:line="7" pos:column="45"/></name><argument_list pos:line="7" pos:column="45">(<argument><expr><name><name pos:line="7" pos:column="46">entry<pos:position pos:line="7" pos:column="51"/></name><operator pos:line="7" pos:column="51">-&gt;<pos:position pos:line="7" pos:column="56"/></operator><name pos:line="7" pos:column="53">value<pos:position pos:line="7" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="60"/></argument_list></decl>;<pos:position pos:line="7" pos:column="61"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="8" pos:column="13">SBuf<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">s<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
            <while pos:line="9" pos:column="13">while <condition pos:line="9" pos:column="19">(<expr><call><name><name pos:line="9" pos:column="20">t<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">.<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="22">token<pos:position pos:line="9" pos:column="27"/></name></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">s<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="31">delimiters<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">.<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">value<pos:position pos:line="9" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="49"/></condition> <block pos:line="9" pos:column="50">{
                <expr_stmt><expr><name><name pos:line="10" pos:column="17">e<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">value<pos:position pos:line="10" pos:column="24"/></name></name> <operator pos:line="10" pos:column="25">=<pos:position pos:line="10" pos:column="26"/></operator> <call><name><name pos:line="10" pos:column="27">s<pos:position pos:line="10" pos:column="28"/></name><operator pos:line="10" pos:column="28">.<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">c_str<pos:position pos:line="10" pos:column="34"/></name></name><argument_list pos:line="10" pos:column="34">()<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
                <if pos:line="11" pos:column="17">if <condition pos:line="11" pos:column="20">(<expr><call><name><name pos:line="11" pos:column="21">noteData<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">match<pos:position pos:line="11" pos:column="36"/></name></name><argument_list pos:line="11" pos:column="36">(<argument><expr><operator pos:line="11" pos:column="37">&amp;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="38">e<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="41"/></condition><then pos:line="11" pos:column="41">
                    <block type="pseudo"><return pos:line="12" pos:column="21">return <expr><literal type="boolean" pos:line="12" pos:column="28">true<pos:position pos:line="12" pos:column="32"/></literal></expr>;<pos:position pos:line="12" pos:column="33"/></return></block></then></if>
            }<pos:position pos:line="13" pos:column="14"/></block></while>
            <expr_stmt><expr><name pos:line="14" pos:column="13">s<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <call><name><name pos:line="14" pos:column="17">t<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">.<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="19">remaining<pos:position pos:line="14" pos:column="28"/></name></name><argument_list pos:line="14" pos:column="28">()<pos:position pos:line="14" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="15" pos:column="13">e<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">.<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">value<pos:position pos:line="15" pos:column="20"/></name></name> <operator pos:line="15" pos:column="21">=<pos:position pos:line="15" pos:column="22"/></operator> <call><name><name pos:line="15" pos:column="23">s<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">.<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">c_str<pos:position pos:line="15" pos:column="30"/></name></name><argument_list pos:line="15" pos:column="30">()<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><call><name><name pos:line="16" pos:column="17">noteData<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">-&gt;<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="27">match<pos:position pos:line="16" pos:column="32"/></name></name><argument_list pos:line="16" pos:column="32">(<argument><expr><operator pos:line="16" pos:column="33">&amp;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="34">e<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37">
                <block type="pseudo"><return pos:line="17" pos:column="17">return <expr><literal type="boolean" pos:line="17" pos:column="24">true<pos:position pos:line="17" pos:column="28"/></literal></expr>;<pos:position pos:line="17" pos:column="29"/></return></block></then></if>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name><name pos:line="19" pos:column="13">noteData<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">-&gt;<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="23">match<pos:position pos:line="19" pos:column="28"/></name></name><argument_list pos:line="19" pos:column="28">(<argument><expr><name pos:line="19" pos:column="29">entry<pos:position pos:line="19" pos:column="34"/></name></expr></argument>)<pos:position pos:line="19" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36">
            <block type="pseudo"><return pos:line="20" pos:column="13">return <expr><literal type="boolean" pos:line="20" pos:column="20">true<pos:position pos:line="20" pos:column="24"/></literal></expr>;<pos:position pos:line="20" pos:column="25"/></return></block></then></if>
    }<pos:position pos:line="21" pos:column="6"/></block></for>
    <return pos:line="22" pos:column="5">return <expr><literal type="boolean" pos:line="22" pos:column="12">false<pos:position pos:line="22" pos:column="17"/></literal></expr>;<pos:position pos:line="22" pos:column="18"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
