<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6599_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IcmpSquid<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">Recv<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">()<pos:position pos:line="2" pos:column="18"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">n<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><name pos:line="5" pos:column="12">int<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">fail_count<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><literal type="number" pos:line="5" pos:column="29">0<pos:position pos:line="5" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">pingerReplyData<pos:position pos:line="6" pos:column="20"/></name></type> <name pos:line="6" pos:column="21">preply<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="7" pos:column="5">static<pos:position pos:line="7" pos:column="11"/></specifier> <type><name><name pos:line="7" pos:column="12">Ip<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">::<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">Address<pos:position pos:line="7" pos:column="23"/></name></name></type> <name pos:line="7" pos:column="24">F<pos:position pos:line="7" pos:column="25"/></name></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">Comm<pos:position pos:line="9" pos:column="9"/></name><operator pos:line="9" pos:column="9">::<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">SetSelect<pos:position pos:line="9" pos:column="20"/></name></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">icmp_sock<pos:position pos:line="9" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="32">COMM_SELECT_READ<pos:position pos:line="9" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="50">icmpSquidRecv<pos:position pos:line="9" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="65">NULL<pos:position pos:line="9" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="71">0<pos:position pos:line="9" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">memset<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><operator pos:line="10" pos:column="12">&amp;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="13">preply<pos:position pos:line="10" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="10" pos:column="21">'\0'<pos:position pos:line="10" pos:column="25"/></literal></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="27">sizeof<argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">pingerReplyData<pos:position pos:line="10" pos:column="49"/></name></expr></argument>)<pos:position pos:line="10" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">n<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <call><name pos:line="11" pos:column="9">comm_udp_recv<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">icmp_sock<pos:position pos:line="11" pos:column="32"/></name></expr></argument>,
                      <argument><expr><operator pos:line="12" pos:column="23">(<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="24">char<pos:position pos:line="12" pos:column="28"/></name> <operator pos:line="12" pos:column="29">*<pos:position pos:line="12" pos:column="30"/></operator><operator pos:line="12" pos:column="30">)<pos:position pos:line="12" pos:column="31"/></operator> <operator pos:line="12" pos:column="32">&amp;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="33">preply<pos:position pos:line="12" pos:column="39"/></name></expr></argument>,
                      <argument><expr><sizeof pos:line="13" pos:column="23">sizeof<argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">pingerReplyData<pos:position pos:line="13" pos:column="45"/></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></sizeof></expr></argument>,
                      <argument><expr><literal type="number" pos:line="14" pos:column="23">0<pos:position pos:line="14" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">n<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">&lt;<pos:position pos:line="16" pos:column="15"/></operator> <literal type="number" pos:line="16" pos:column="13">0<pos:position pos:line="16" pos:column="14"/></literal> <operator pos:line="16" pos:column="15">&amp;&amp;<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="18">EAGAIN<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">!=<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">errno<pos:position pos:line="16" pos:column="33"/></name></expr>)<pos:position pos:line="16" pos:column="34"/></condition><then pos:line="16" pos:column="34"> <block pos:line="16" pos:column="35">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">int<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">xerrno<pos:position pos:line="17" pos:column="19"/></name> <init pos:line="17" pos:column="20">= <expr><name pos:line="17" pos:column="22">errno<pos:position pos:line="17" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">37<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="20">DBG_IMPORTANT<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">MYNAME<pos:position pos:line="18" pos:column="41"/></name> <operator pos:line="18" pos:column="42">&lt;&lt;<pos:position pos:line="18" pos:column="50"/></operator> <literal type="string" pos:line="18" pos:column="45">"recv: "<pos:position pos:line="18" pos:column="53"/></literal> <operator pos:line="18" pos:column="54">&lt;&lt;<pos:position pos:line="18" pos:column="62"/></operator> <call><name pos:line="18" pos:column="57">xstrerr<pos:position pos:line="18" pos:column="64"/></name><argument_list pos:line="18" pos:column="64">(<argument><expr><name pos:line="18" pos:column="65">xerrno<pos:position pos:line="18" pos:column="71"/></name></expr></argument>)<pos:position pos:line="18" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="74"/></expr_stmt>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">xerrno<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">==<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">ECONNREFUSED<pos:position pos:line="20" pos:column="35"/></name></expr>)<pos:position pos:line="20" pos:column="36"/></condition><then pos:line="20" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="21" pos:column="13">Close<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">()<pos:position pos:line="21" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt></block></then></if>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">xerrno<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">==<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">ECONNRESET<pos:position pos:line="23" pos:column="33"/></name></expr>)<pos:position pos:line="23" pos:column="34"/></condition><then pos:line="23" pos:column="34">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="13">Close<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">()<pos:position pos:line="24" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt></block></then></if>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">++<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">fail_count<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">==<pos:position pos:line="26" pos:column="28"/></operator> <literal type="number" pos:line="26" pos:column="29">10<pos:position pos:line="26" pos:column="31"/></literal></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="13">Close<pos:position pos:line="27" pos:column="18"/></name><argument_list pos:line="27" pos:column="18">()<pos:position pos:line="27" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="21"/></expr_stmt></block></then></if>

        <return pos:line="29" pos:column="9">return;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="32" pos:column="5">fail_count<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <literal type="number" pos:line="32" pos:column="18">0<pos:position pos:line="32" pos:column="19"/></literal></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>

    <comment type="block" format="doxygen" pos:line="34" pos:column="5">/** If its a test probe from the pinger. Do nothing. */</comment>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">n<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">==<pos:position pos:line="35" pos:column="13"/></operator> <literal type="number" pos:line="35" pos:column="14">0<pos:position pos:line="35" pos:column="15"/></literal></expr>)<pos:position pos:line="35" pos:column="16"/></condition><then pos:line="35" pos:column="16"> <block pos:line="35" pos:column="17">{
        <return pos:line="36" pos:column="9">return;<pos:position pos:line="36" pos:column="16"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="39" pos:column="5">F<pos:position pos:line="39" pos:column="6"/></name> <operator pos:line="39" pos:column="7">=<pos:position pos:line="39" pos:column="8"/></operator> <name><name pos:line="39" pos:column="9">preply<pos:position pos:line="39" pos:column="15"/></name><operator pos:line="39" pos:column="15">.<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="16">from<pos:position pos:line="39" pos:column="20"/></name></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="41" pos:column="5">F<pos:position pos:line="41" pos:column="6"/></name><operator pos:line="41" pos:column="6">.<pos:position pos:line="41" pos:column="7"/></operator><name pos:line="41" pos:column="7">port<pos:position pos:line="41" pos:column="11"/></name></name><argument_list pos:line="41" pos:column="11">(<argument><expr><literal type="number" pos:line="41" pos:column="12">0<pos:position pos:line="41" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="15"/></expr_stmt>

    <switch pos:line="43" pos:column="5">switch <condition pos:line="43" pos:column="12">(<expr><name><name pos:line="43" pos:column="13">preply<pos:position pos:line="43" pos:column="19"/></name><operator pos:line="43" pos:column="19">.<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="20">opcode<pos:position pos:line="43" pos:column="26"/></name></name></expr>)<pos:position pos:line="43" pos:column="27"/></condition> <block pos:line="43" pos:column="28">{

    <case pos:line="45" pos:column="5">case <expr><name pos:line="45" pos:column="10">S_ICMP_ECHO<pos:position pos:line="45" pos:column="21"/></name></expr>:<pos:position pos:line="45" pos:column="22"/></case>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">debugs<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><literal type="number" pos:line="46" pos:column="16">37<pos:position pos:line="46" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="46" pos:column="19">4<pos:position pos:line="46" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="22">HERE<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">&lt;&lt;<pos:position pos:line="46" pos:column="35"/></operator> <literal type="string" pos:line="46" pos:column="30">" ICMP_ECHO of "<pos:position pos:line="46" pos:column="46"/></literal> <operator pos:line="46" pos:column="47">&lt;&lt;<pos:position pos:line="46" pos:column="55"/></operator> <name><name pos:line="46" pos:column="50">preply<pos:position pos:line="46" pos:column="56"/></name><operator pos:line="46" pos:column="56">.<pos:position pos:line="46" pos:column="57"/></operator><name pos:line="46" pos:column="57">from<pos:position pos:line="46" pos:column="61"/></name></name> <operator pos:line="46" pos:column="62">&lt;&lt;<pos:position pos:line="46" pos:column="70"/></operator> <literal type="string" pos:line="46" pos:column="65">" gave: hops="<pos:position pos:line="46" pos:column="79"/></literal> <operator pos:line="46" pos:column="80">&lt;&lt;<pos:position pos:line="46" pos:column="88"/></operator> <name><name pos:line="46" pos:column="83">preply<pos:position pos:line="46" pos:column="89"/></name><operator pos:line="46" pos:column="89">.<pos:position pos:line="46" pos:column="90"/></operator><name pos:line="46" pos:column="90">hops<pos:position pos:line="46" pos:column="94"/></name></name> <operator pos:line="46" pos:column="95">&lt;&lt;<pos:position pos:line="46" pos:column="103"/></operator><literal type="string" pos:line="46" pos:column="97">", rtt="<pos:position pos:line="46" pos:column="105"/></literal> <operator pos:line="46" pos:column="106">&lt;&lt;<pos:position pos:line="46" pos:column="114"/></operator> <name><name pos:line="46" pos:column="109">preply<pos:position pos:line="46" pos:column="115"/></name><operator pos:line="46" pos:column="115">.<pos:position pos:line="46" pos:column="116"/></operator><name pos:line="46" pos:column="116">rtt<pos:position pos:line="46" pos:column="119"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="121"/></expr_stmt>
        <break pos:line="47" pos:column="9">break;<pos:position pos:line="47" pos:column="15"/></break>

    <case pos:line="49" pos:column="5">case <expr><name pos:line="49" pos:column="10">S_ICMP_DOM<pos:position pos:line="49" pos:column="20"/></name></expr>:<pos:position pos:line="49" pos:column="21"/></case>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">debugs<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><literal type="number" pos:line="50" pos:column="16">37<pos:position pos:line="50" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="50" pos:column="19">4<pos:position pos:line="50" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="22">HERE<pos:position pos:line="50" pos:column="26"/></name> <operator pos:line="50" pos:column="27">&lt;&lt;<pos:position pos:line="50" pos:column="35"/></operator> <literal type="string" pos:line="50" pos:column="30">" DomainPing of "<pos:position pos:line="50" pos:column="47"/></literal> <operator pos:line="50" pos:column="48">&lt;&lt;<pos:position pos:line="50" pos:column="56"/></operator> <name><name pos:line="50" pos:column="51">preply<pos:position pos:line="50" pos:column="57"/></name><operator pos:line="50" pos:column="57">.<pos:position pos:line="50" pos:column="58"/></operator><name pos:line="50" pos:column="58">from<pos:position pos:line="50" pos:column="62"/></name></name> <operator pos:line="50" pos:column="63">&lt;&lt;<pos:position pos:line="50" pos:column="71"/></operator> <literal type="string" pos:line="50" pos:column="66">" gave: hops="<pos:position pos:line="50" pos:column="80"/></literal> <operator pos:line="50" pos:column="81">&lt;&lt;<pos:position pos:line="50" pos:column="89"/></operator> <name><name pos:line="50" pos:column="84">preply<pos:position pos:line="50" pos:column="90"/></name><operator pos:line="50" pos:column="90">.<pos:position pos:line="50" pos:column="91"/></operator><name pos:line="50" pos:column="91">hops<pos:position pos:line="50" pos:column="95"/></name></name> <operator pos:line="50" pos:column="96">&lt;&lt;<pos:position pos:line="50" pos:column="104"/></operator><literal type="string" pos:line="50" pos:column="98">", rtt="<pos:position pos:line="50" pos:column="106"/></literal> <operator pos:line="50" pos:column="107">&lt;&lt;<pos:position pos:line="50" pos:column="115"/></operator> <name><name pos:line="50" pos:column="110">preply<pos:position pos:line="50" pos:column="116"/></name><operator pos:line="50" pos:column="116">.<pos:position pos:line="50" pos:column="117"/></operator><name pos:line="50" pos:column="117">rtt<pos:position pos:line="50" pos:column="120"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="121"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="122"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">netdbHandlePingReply<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">F<pos:position pos:line="51" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="33">preply<pos:position pos:line="51" pos:column="39"/></name><operator pos:line="51" pos:column="39">.<pos:position pos:line="51" pos:column="40"/></operator><name pos:line="51" pos:column="40">hops<pos:position pos:line="51" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="46">preply<pos:position pos:line="51" pos:column="52"/></name><operator pos:line="51" pos:column="52">.<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="53">rtt<pos:position pos:line="51" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="58"/></expr_stmt>
        <break pos:line="52" pos:column="9">break;<pos:position pos:line="52" pos:column="15"/></break>

    <default pos:line="54" pos:column="5">default:<pos:position pos:line="54" pos:column="13"/></default>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">debugs<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><literal type="number" pos:line="55" pos:column="16">37<pos:position pos:line="55" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="20">DBG_IMPORTANT<pos:position pos:line="55" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">HERE<pos:position pos:line="55" pos:column="39"/></name> <operator pos:line="55" pos:column="40">&lt;&lt;<pos:position pos:line="55" pos:column="48"/></operator> <literal type="string" pos:line="55" pos:column="43">"Bad opcode: "<pos:position pos:line="55" pos:column="57"/></literal> <operator pos:line="55" pos:column="58">&lt;&lt;<pos:position pos:line="55" pos:column="66"/></operator> <name><name pos:line="55" pos:column="61">preply<pos:position pos:line="55" pos:column="67"/></name><operator pos:line="55" pos:column="67">.<pos:position pos:line="55" pos:column="68"/></operator><name pos:line="55" pos:column="68">opcode<pos:position pos:line="55" pos:column="74"/></name></name> <operator pos:line="55" pos:column="75">&lt;&lt;<pos:position pos:line="55" pos:column="83"/></operator> <literal type="string" pos:line="55" pos:column="78">" from "<pos:position pos:line="55" pos:column="86"/></literal> <operator pos:line="55" pos:column="87">&lt;&lt;<pos:position pos:line="55" pos:column="95"/></operator> <name pos:line="55" pos:column="90">F<pos:position pos:line="55" pos:column="91"/></name></expr></argument>)<pos:position pos:line="55" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="93"/></expr_stmt>
        <break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break>
    }<pos:position pos:line="57" pos:column="6"/></block></switch>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
