<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7492_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">BlindPeerConnector<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">noteNegotiationDone<pos:position pos:line="2" pos:column="50"/></name></name><parameter_list pos:line="2" pos:column="50">(<parameter><decl><type><name pos:line="2" pos:column="51">ErrorState<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">error<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">error<pos:position pos:line="4" pos:column="14"/></name></expr>)<pos:position pos:line="4" pos:column="15"/></condition><then pos:line="4" pos:column="15"> <block pos:line="4" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">83<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">5<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="23">"error="<pos:position pos:line="5" pos:column="31"/></literal> <operator pos:line="5" pos:column="32">&lt;&lt;<pos:position pos:line="5" pos:column="40"/></operator> <operator pos:line="5" pos:column="35">(<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="36">void<pos:position pos:line="5" pos:column="40"/></name><operator pos:line="5" pos:column="40">*<pos:position pos:line="5" pos:column="41"/></operator><operator pos:line="5" pos:column="41">)<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="42">error<pos:position pos:line="5" pos:column="47"/></name></expr></argument>)<pos:position pos:line="5" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="49"/></expr_stmt>
        <comment type="line" pos:line="6" pos:column="9">// XXX: forward.cc calls peerConnectSucceeded() after an OK TCP connect but</comment>
        <comment type="line" pos:line="7" pos:column="9">// we call peerConnectFailed() if SSL failed afterwards. Is that OK?</comment>
        <comment type="line" pos:line="8" pos:column="9">// It is not clear whether we should call peerConnectSucceeded/Failed()</comment>
        <comment type="line" pos:line="9" pos:column="9">// based on TCP results, SSL results, or both. And the code is probably not</comment>
        <comment type="line" pos:line="10" pos:column="9">// consistent in this aspect across tunnelling and forwarding modules.</comment>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<decl><type><name pos:line="11" pos:column="13">CachePeer<pos:position pos:line="11" pos:column="22"/></name> <modifier pos:line="11" pos:column="23">*<pos:position pos:line="11" pos:column="24"/></modifier></type><name pos:line="11" pos:column="24">p<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><call><name pos:line="11" pos:column="28">serverConnection<pos:position pos:line="11" pos:column="44"/></name><argument_list pos:line="11" pos:column="44">()<pos:position pos:line="11" pos:column="46"/></argument_list></call><operator pos:line="11" pos:column="46">-&gt;<pos:position pos:line="11" pos:column="51"/></operator><call><name pos:line="11" pos:column="48">getPeer<pos:position pos:line="11" pos:column="55"/></name><argument_list pos:line="11" pos:column="55">()<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr></init></decl>)<pos:position pos:line="11" pos:column="58"/></condition><then pos:line="11" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="12" pos:column="13">peerConnectFailed<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><name pos:line="12" pos:column="31">p<pos:position pos:line="12" pos:column="32"/></name></expr></argument>)<pos:position pos:line="12" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt></block></then></if>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">auto<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">peer<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <call><name pos:line="16" pos:column="22">serverConnection<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">()<pos:position pos:line="16" pos:column="40"/></argument_list></call><operator pos:line="16" pos:column="40">-&gt;<pos:position pos:line="16" pos:column="45"/></operator><call><name pos:line="16" pos:column="42">getPeer<pos:position pos:line="16" pos:column="49"/></name><argument_list pos:line="16" pos:column="49">()<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="52"/></condition><then pos:line="16" pos:column="52"> <block pos:line="16" pos:column="53">{
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">const<pos:position pos:line="17" pos:column="14"/></specifier> <name pos:line="17" pos:column="15">int<pos:position pos:line="17" pos:column="18"/></name></type> <name pos:line="17" pos:column="19">fd<pos:position pos:line="17" pos:column="21"/></name> <init pos:line="17" pos:column="22">= <expr><call><name pos:line="17" pos:column="24">serverConnection<pos:position pos:line="17" pos:column="40"/></name><argument_list pos:line="17" pos:column="40">()<pos:position pos:line="17" pos:column="42"/></argument_list></call><operator pos:line="17" pos:column="42">-&gt;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="44">fd<pos:position pos:line="17" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="47"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="18" pos:column="9">Security<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">::<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="19">MaybeGetSessionResumeData<pos:position pos:line="18" pos:column="44"/></name></name><argument_list pos:line="18" pos:column="44">(<argument><expr><name><name pos:line="18" pos:column="45">fd_table<pos:position pos:line="18" pos:column="53"/></name><index pos:line="18" pos:column="53">[<expr><name pos:line="18" pos:column="54">fd<pos:position pos:line="18" pos:column="56"/></name></expr>]<pos:position pos:line="18" pos:column="57"/></index></name><operator pos:line="18" pos:column="57">.<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="58">ssl<pos:position pos:line="18" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="63">peer<pos:position pos:line="18" pos:column="67"/></name><operator pos:line="18" pos:column="67">-&gt;<pos:position pos:line="18" pos:column="72"/></operator><name pos:line="18" pos:column="69">sslSession<pos:position pos:line="18" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
