<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4039_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">decideWritingAfterPreview<pos:position pos:line="1" pos:column="58"/></name></name><parameter_list pos:line="1" pos:column="58">(<parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">kind<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><call><name><name pos:line="3" pos:column="9">preview<pos:position pos:line="3" pos:column="16"/></name><operator pos:line="3" pos:column="16">.<pos:position pos:line="3" pos:column="17"/></operator><name pos:line="3" pos:column="17">ieof<pos:position pos:line="3" pos:column="21"/></name></name><argument_list pos:line="3" pos:column="21">()<pos:position pos:line="3" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="24"/></condition><then pos:line="3" pos:column="24"> <comment type="line" pos:line="3" pos:column="25">// nothing more to write</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="4" pos:column="9">stopWriting<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">(<argument><expr><literal type="boolean" pos:line="4" pos:column="21">true<pos:position pos:line="4" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt></block></then>
    <elseif pos:line="5" pos:column="5">else <if pos:line="5" pos:column="10">if <condition pos:line="5" pos:column="13">(<expr><name><name pos:line="5" pos:column="14">state<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">.<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">parsing<pos:position pos:line="5" pos:column="27"/></name></name> <operator pos:line="5" pos:column="28">==<pos:position pos:line="5" pos:column="30"/></operator> <name><name pos:line="5" pos:column="31">State<pos:position pos:line="5" pos:column="36"/></name><operator pos:line="5" pos:column="36">::<pos:position pos:line="5" pos:column="38"/></operator><name pos:line="5" pos:column="38">psIcapHeader<pos:position pos:line="5" pos:column="50"/></name></name></expr>)<pos:position pos:line="5" pos:column="51"/></condition><then pos:line="5" pos:column="51"> <comment type="line" pos:line="5" pos:column="52">// did not get a reply yet</comment>
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="6" pos:column="9">state<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">.<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">writing<pos:position pos:line="6" pos:column="22"/></name></name> <operator pos:line="6" pos:column="23">=<pos:position pos:line="6" pos:column="24"/></operator> <name><name pos:line="6" pos:column="25">State<pos:position pos:line="6" pos:column="30"/></name><operator pos:line="6" pos:column="30">::<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="32">writingPaused<pos:position pos:line="6" pos:column="45"/></name></name></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt></block></then></if></elseif> <comment type="line" pos:line="6" pos:column="47">// wait for the ICAP server reply</comment>
    <else pos:line="7" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="8" pos:column="9">stopWriting<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><literal type="boolean" pos:line="8" pos:column="21">true<pos:position pos:line="8" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt></block></else></if> <comment type="line" pos:line="8" pos:column="28">// ICAP server reply implies no post-preview writing</comment>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">93<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">6<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="19">HERE<pos:position pos:line="10" pos:column="23"/></name> <operator pos:line="10" pos:column="24">&lt;&lt;<pos:position pos:line="10" pos:column="32"/></operator> <literal type="string" pos:line="10" pos:column="27">"decided on writing after "<pos:position pos:line="10" pos:column="54"/></literal> <operator pos:line="10" pos:column="55">&lt;&lt;<pos:position pos:line="10" pos:column="63"/></operator> <name pos:line="10" pos:column="58">kind<pos:position pos:line="10" pos:column="62"/></name> <operator pos:line="10" pos:column="63">&lt;&lt;<pos:position pos:line="10" pos:column="71"/></operator> <literal type="string" pos:line="10" pos:column="66">" preview"<pos:position pos:line="10" pos:column="76"/></literal> <operator pos:line="10" pos:column="77">&lt;&lt;<pos:position pos:line="10" pos:column="85"/></operator>
           <call><name pos:line="11" pos:column="12">status<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">()<pos:position pos:line="11" pos:column="20"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
