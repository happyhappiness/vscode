<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_99_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">( <parameter><decl><type><name pos:line="2" pos:column="7">int<pos:position pos:line="2" pos:column="10"/></name></type> <name pos:line="2" pos:column="11">argc<pos:position pos:line="2" pos:column="15"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name><modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type> <name><name pos:line="2" pos:column="23">argv<pos:position pos:line="2" pos:column="27"/></name><index pos:line="2" pos:column="27">[]<pos:position pos:line="2" pos:column="29"/></index></name></decl></parameter> )<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// setup variables</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">REList<pos:position pos:line="5" pos:column="11"/></name><modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type> <name pos:line="5" pos:column="13">list<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name><modifier pos:line="6" pos:column="9">*<pos:position pos:line="6" pos:column="10"/></modifier></type> <name pos:line="6" pos:column="11">conffile<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><call><name pos:line="6" pos:column="22">xstrdup<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">( <argument><expr><name pos:line="6" pos:column="31">DEFAULT_SQUID_CONF<pos:position pos:line="6" pos:column="49"/></name></expr></argument> )<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="52"/></decl_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">serverPort<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">htons<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name pos:line="7" pos:column="24">DEFAULTPORT<pos:position pos:line="7" pos:column="35"/></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="37"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">( <expr><call><name pos:line="8" pos:column="10">convertHostname<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><name pos:line="8" pos:column="26">DEFAULTHOST<pos:position pos:line="8" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="8" pos:column="38">serverHost<pos:position pos:line="8" pos:column="48"/></name></expr></argument>)<pos:position pos:line="8" pos:column="49"/></argument_list></call> <operator pos:line="8" pos:column="50">==<pos:position pos:line="8" pos:column="52"/></operator> <operator pos:line="8" pos:column="53">-<pos:position pos:line="8" pos:column="54"/></operator><literal type="number" pos:line="8" pos:column="54">1<pos:position pos:line="8" pos:column="55"/></literal></expr> )<pos:position pos:line="8" pos:column="57"/></condition><then pos:line="8" pos:column="57"> <block pos:line="8" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">fprintf<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">( <argument><expr><name pos:line="9" pos:column="18">stderr<pos:position pos:line="9" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="26">"unable to resolve host %s!\n"<pos:position pos:line="9" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="58">DEFAULTHOST<pos:position pos:line="9" pos:column="69"/></name></expr></argument> )<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="number" pos:line="10" pos:column="16">1<pos:position pos:line="10" pos:column="17"/></literal></expr>;<pos:position pos:line="10" pos:column="18"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="13" pos:column="5">// setup line buffer</comment>
    <expr_stmt><expr><name><operator pos:line="14" pos:column="5">::<pos:position pos:line="14" pos:column="7"/></operator><name pos:line="14" pos:column="7">linebuffer<pos:position pos:line="14" pos:column="17"/></name></name> <operator pos:line="14" pos:column="18">=<pos:position pos:line="14" pos:column="19"/></operator> <operator pos:line="14" pos:column="20">new<pos:position pos:line="14" pos:column="23"/></operator> <name><name pos:line="14" pos:column="24">char<pos:position pos:line="14" pos:column="28"/></name><index pos:line="14" pos:column="28">[ <expr><name><operator pos:line="14" pos:column="30">::<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="32">buffersize<pos:position pos:line="14" pos:column="42"/></name></name></expr> ]<pos:position pos:line="14" pos:column="44"/></index></name></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">( <argument><expr><name><operator pos:line="15" pos:column="13">::<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="15">linebuffer<pos:position pos:line="15" pos:column="25"/></name></name> <operator pos:line="15" pos:column="26">!=<pos:position pos:line="15" pos:column="28"/></operator> <literal type="number" pos:line="15" pos:column="29">0<pos:position pos:line="15" pos:column="30"/></literal></expr></argument> )<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>

    <comment type="line" pos:line="17" pos:column="5">// parse commandline</comment>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">puts<pos:position pos:line="18" pos:column="9"/></name><argument_list pos:line="18" pos:column="9">( <argument><expr><literal type="string" pos:line="18" pos:column="11">"### Use at your own risk! No guarantees whatsoever. You were warned. ###"<pos:position pos:line="18" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="87"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">parseCommandline<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">( <argument><expr><name pos:line="19" pos:column="23">argc<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="29">argv<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">list<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="41">conffile<pos:position pos:line="19" pos:column="49"/></name></expr></argument>, <argument><expr><name><operator pos:line="19" pos:column="51">::<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="53">copydir<pos:position pos:line="19" pos:column="60"/></name></name></expr></argument>,
                      <argument><expr><name pos:line="20" pos:column="23">serverHost<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="35">serverPort<pos:position pos:line="20" pos:column="45"/></name></expr></argument> )<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>

    <comment type="line" pos:line="22" pos:column="5">// prepare execution</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">( <expr><call><name pos:line="23" pos:column="10">atexit<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">( <argument><expr><name pos:line="23" pos:column="18">exiter<pos:position pos:line="23" pos:column="24"/></name></expr></argument> )<pos:position pos:line="23" pos:column="26"/></argument_list></call> <operator pos:line="23" pos:column="27">!=<pos:position pos:line="23" pos:column="29"/></operator> <literal type="number" pos:line="23" pos:column="30">0<pos:position pos:line="23" pos:column="31"/></literal> <operator pos:line="23" pos:column="32">||<pos:position pos:line="23" pos:column="34"/></operator>
            <call><name pos:line="24" pos:column="13">Signal<pos:position pos:line="24" pos:column="19"/></name><argument_list pos:line="24" pos:column="19">( <argument><expr><name pos:line="24" pos:column="21">SIGTERM<pos:position pos:line="24" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="30">handler<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="24" pos:column="39">true<pos:position pos:line="24" pos:column="43"/></literal></expr></argument> )<pos:position pos:line="24" pos:column="45"/></argument_list></call> <operator pos:line="24" pos:column="46">==<pos:position pos:line="24" pos:column="48"/></operator> <name pos:line="24" pos:column="49">SIG_ERR<pos:position pos:line="24" pos:column="56"/></name> <operator pos:line="24" pos:column="57">||<pos:position pos:line="24" pos:column="59"/></operator>
            <call><name pos:line="25" pos:column="13">Signal<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">( <argument><expr><name pos:line="25" pos:column="21">SIGINT<pos:position pos:line="25" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="29">handler<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="25" pos:column="38">true<pos:position pos:line="25" pos:column="42"/></literal></expr></argument> )<pos:position pos:line="25" pos:column="44"/></argument_list></call> <operator pos:line="25" pos:column="45">==<pos:position pos:line="25" pos:column="47"/></operator> <name pos:line="25" pos:column="48">SIG_ERR<pos:position pos:line="25" pos:column="55"/></name> <operator pos:line="25" pos:column="56">||<pos:position pos:line="25" pos:column="58"/></operator>
            <call><name pos:line="26" pos:column="13">Signal<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">( <argument><expr><name pos:line="26" pos:column="21">SIGHUP<pos:position pos:line="26" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="29">handler<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="26" pos:column="38">true<pos:position pos:line="26" pos:column="42"/></literal></expr></argument> )<pos:position pos:line="26" pos:column="44"/></argument_list></call> <operator pos:line="26" pos:column="45">==<pos:position pos:line="26" pos:column="47"/></operator> <name pos:line="26" pos:column="48">SIG_ERR<pos:position pos:line="26" pos:column="55"/></name></expr> )<pos:position pos:line="26" pos:column="57"/></condition><then pos:line="26" pos:column="57"> <block pos:line="26" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">perror<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">( <argument><expr><literal type="string" pos:line="27" pos:column="17">"unable to install signal/exit function"<pos:position pos:line="27" pos:column="57"/></literal></expr></argument> )<pos:position pos:line="27" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="60"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><literal type="number" pos:line="28" pos:column="16">1<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="31" pos:column="5">// try to read squid.conf file to determine all cache_dir locations</comment>
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">CacheDirVector<pos:position pos:line="32" pos:column="19"/></name></type> <name pos:line="32" pos:column="20">cdv<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><literal type="number" pos:line="32" pos:column="24">0<pos:position pos:line="32" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="26"/></argument_list></decl>;<pos:position pos:line="32" pos:column="27"/></decl_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">( <expr><call><name pos:line="33" pos:column="10">readConfigFile<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">( <argument><expr><name pos:line="33" pos:column="26">cdv<pos:position pos:line="33" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="31">conffile<pos:position pos:line="33" pos:column="39"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="33" pos:column="41">debugFlag<pos:position pos:line="33" pos:column="50"/></name></expr> ?<pos:position pos:line="33" pos:column="52"/></condition><then pos:line="33" pos:column="52"> <expr><name pos:line="33" pos:column="53">stderr<pos:position pos:line="33" pos:column="59"/></name></expr> <pos:position pos:line="33" pos:column="60"/></then><else pos:line="33" pos:column="60">: <expr><literal type="number" pos:line="33" pos:column="62">0<pos:position pos:line="33" pos:column="63"/></literal></expr></else></ternary></expr></argument> )<pos:position pos:line="33" pos:column="65"/></argument_list></call> <operator pos:line="33" pos:column="66">&gt;<pos:position pos:line="33" pos:column="70"/></operator> <literal type="number" pos:line="33" pos:column="68">0<pos:position pos:line="33" pos:column="69"/></literal></expr> )<pos:position pos:line="33" pos:column="71"/></condition><then pos:line="33" pos:column="71"> <block pos:line="33" pos:column="72">{
        <comment type="line" pos:line="34" pos:column="9">// there are some valid cache_dir entries.</comment>
        <comment type="line" pos:line="35" pos:column="9">// unless forking was forbidden by cmdline option,</comment>
        <comment type="line" pos:line="36" pos:column="9">// for a process for each cache_dir entry to remove files.</comment>

        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">( <expr><name><operator pos:line="38" pos:column="14">::<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="16">no_fork<pos:position pos:line="38" pos:column="23"/></name></name> <operator pos:line="38" pos:column="24">||<pos:position pos:line="38" pos:column="26"/></operator> <call><name><name pos:line="38" pos:column="27">cdv<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">.<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="31">size<pos:position pos:line="38" pos:column="35"/></name></name><argument_list pos:line="38" pos:column="35">()<pos:position pos:line="38" pos:column="37"/></argument_list></call> <operator pos:line="38" pos:column="38">==<pos:position pos:line="38" pos:column="40"/></operator> <literal type="number" pos:line="38" pos:column="41">1<pos:position pos:line="38" pos:column="42"/></literal></expr> )<pos:position pos:line="38" pos:column="44"/></condition><then pos:line="38" pos:column="44"> <block pos:line="38" pos:column="45">{
            <comment type="line" pos:line="39" pos:column="13">// linear mode, one cache_dir after the next</comment>
            <for pos:line="40" pos:column="13">for <control pos:line="40" pos:column="17">( <init><decl><type><name><name pos:line="40" pos:column="19">CacheDirVector<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">::<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="35">iterator<pos:position pos:line="40" pos:column="43"/></name></name></type> <name pos:line="40" pos:column="44">i<pos:position pos:line="40" pos:column="45"/></name> <init pos:line="40" pos:column="46">= <expr><call><name><name pos:line="40" pos:column="48">cdv<pos:position pos:line="40" pos:column="51"/></name><operator pos:line="40" pos:column="51">.<pos:position pos:line="40" pos:column="52"/></operator><name pos:line="40" pos:column="52">begin<pos:position pos:line="40" pos:column="57"/></name></name><argument_list pos:line="40" pos:column="57">()<pos:position pos:line="40" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="60"/></init> <condition><expr><name pos:line="40" pos:column="61">i<pos:position pos:line="40" pos:column="62"/></name> <operator pos:line="40" pos:column="63">!=<pos:position pos:line="40" pos:column="65"/></operator> <call><name><name pos:line="40" pos:column="66">cdv<pos:position pos:line="40" pos:column="69"/></name><operator pos:line="40" pos:column="69">.<pos:position pos:line="40" pos:column="70"/></operator><name pos:line="40" pos:column="70">end<pos:position pos:line="40" pos:column="73"/></name></name><argument_list pos:line="40" pos:column="73">()<pos:position pos:line="40" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="76"/></condition> <incr><expr><operator pos:line="40" pos:column="77">++<pos:position pos:line="40" pos:column="79"/></operator><name pos:line="40" pos:column="79">i<pos:position pos:line="40" pos:column="80"/></name></expr></incr> )<pos:position pos:line="40" pos:column="82"/></control> <block pos:line="40" pos:column="83">{
                <comment type="line" pos:line="41" pos:column="17">// execute OR complain</comment>
                <if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">( <expr><operator pos:line="42" pos:column="22">!<pos:position pos:line="42" pos:column="23"/></operator> <call><name pos:line="42" pos:column="24">dirlevel<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name><name pos:line="42" pos:column="33">i<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">-&gt;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="36">base<pos:position pos:line="42" pos:column="40"/></name></name></expr></argument>,<argument><expr><name pos:line="42" pos:column="41">list<pos:position pos:line="42" pos:column="45"/></name></expr></argument>)<pos:position pos:line="42" pos:column="46"/></argument_list></call></expr> )<pos:position pos:line="42" pos:column="48"/></condition><then pos:line="42" pos:column="48">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="43" pos:column="21">fprintf<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">( <argument><expr><name pos:line="43" pos:column="30">stderr<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="38">"program terminated due to error: %s"<pos:position pos:line="43" pos:column="75"/></literal></expr></argument>,
                             <argument><expr><call><name pos:line="44" pos:column="30">strerror<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">errno<pos:position pos:line="44" pos:column="44"/></name></expr></argument>)<pos:position pos:line="44" pos:column="45"/></argument_list></call></expr></argument> )<pos:position pos:line="44" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="48"/></expr_stmt></block></then></if>
                <expr_stmt><expr><call><name pos:line="45" pos:column="17">xfree<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><operator pos:line="45" pos:column="23">(<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="24">void<pos:position pos:line="45" pos:column="28"/></name><operator pos:line="45" pos:column="28">*<pos:position pos:line="45" pos:column="29"/></operator><operator pos:line="45" pos:column="29">)<pos:position pos:line="45" pos:column="30"/></operator> <name><name pos:line="45" pos:column="31">i<pos:position pos:line="45" pos:column="32"/></name><operator pos:line="45" pos:column="32">-&gt;<pos:position pos:line="45" pos:column="37"/></operator><name pos:line="45" pos:column="34">base<pos:position pos:line="45" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="46" pos:column="14"/></block></for>
        }<pos:position pos:line="47" pos:column="10"/></block></then> <else pos:line="47" pos:column="11">else <block pos:line="47" pos:column="16">{
            <comment type="line" pos:line="48" pos:column="13">// parallel mode, all cache_dir in parallel</comment>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">pid_t<pos:position pos:line="49" pos:column="18"/></name><modifier pos:line="49" pos:column="18">*<pos:position pos:line="49" pos:column="19"/></modifier></type> <name pos:line="49" pos:column="20">child<pos:position pos:line="49" pos:column="25"/></name> <init pos:line="49" pos:column="26">= <expr><operator pos:line="49" pos:column="28">new<pos:position pos:line="49" pos:column="31"/></operator> <name><name pos:line="49" pos:column="32">pid_t<pos:position pos:line="49" pos:column="37"/></name><index pos:line="49" pos:column="37">[ <expr><call><name><name pos:line="49" pos:column="39">cdv<pos:position pos:line="49" pos:column="42"/></name><operator pos:line="49" pos:column="42">.<pos:position pos:line="49" pos:column="43"/></operator><name pos:line="49" pos:column="43">size<pos:position pos:line="49" pos:column="47"/></name></name><argument_list pos:line="49" pos:column="47">()<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr> ]<pos:position pos:line="49" pos:column="51"/></index></name></expr></init></decl>;<pos:position pos:line="49" pos:column="52"/></decl_stmt>

            <comment type="line" pos:line="51" pos:column="13">// make stdout/stderr line bufferd</comment>
            <expr_stmt><expr><call><name pos:line="52" pos:column="13">makelinebuffered<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">( <argument><expr><name pos:line="52" pos:column="31">stdout<pos:position pos:line="52" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="39">"stdout"<pos:position pos:line="52" pos:column="47"/></literal></expr></argument> )<pos:position pos:line="52" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">makelinebuffered<pos:position pos:line="53" pos:column="29"/></name><argument_list pos:line="53" pos:column="29">( <argument><expr><name pos:line="53" pos:column="31">stderr<pos:position pos:line="53" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="39">"stderr"<pos:position pos:line="53" pos:column="47"/></literal></expr></argument> )<pos:position pos:line="53" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="50"/></expr_stmt>

            <comment type="line" pos:line="55" pos:column="13">// make parent process group leader for easier killings</comment>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">( <expr><call><name pos:line="56" pos:column="18">setpgid<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><call><name pos:line="56" pos:column="26">getpid<pos:position pos:line="56" pos:column="32"/></name><argument_list pos:line="56" pos:column="32">()<pos:position pos:line="56" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="36">getpid<pos:position pos:line="56" pos:column="42"/></name><argument_list pos:line="56" pos:column="42">()<pos:position pos:line="56" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="45"/></argument_list></call> <operator pos:line="56" pos:column="46">!=<pos:position pos:line="56" pos:column="48"/></operator> <literal type="number" pos:line="56" pos:column="49">0<pos:position pos:line="56" pos:column="50"/></literal></expr> )<pos:position pos:line="56" pos:column="52"/></condition><then pos:line="56" pos:column="52"> <block pos:line="56" pos:column="53">{
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">perror<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">( <argument><expr><literal type="string" pos:line="57" pos:column="25">"unable to set process group leader"<pos:position pos:line="57" pos:column="61"/></literal></expr></argument> )<pos:position pos:line="57" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="64"/></expr_stmt>
                <return pos:line="58" pos:column="17">return <expr><literal type="number" pos:line="58" pos:column="24">1<pos:position pos:line="58" pos:column="25"/></literal></expr>;<pos:position pos:line="58" pos:column="26"/></return>
            }<pos:position pos:line="59" pos:column="14"/></block></then></if>

            <comment type="line" pos:line="61" pos:column="13">// -a is mutually exclusive with fork mode</comment>
            <if pos:line="62" pos:column="13">if <condition pos:line="62" pos:column="16">( <expr><name><operator pos:line="62" pos:column="18">::<pos:position pos:line="62" pos:column="20"/></operator><name pos:line="62" pos:column="20">iamalive<pos:position pos:line="62" pos:column="28"/></name></name></expr> )<pos:position pos:line="62" pos:column="30"/></condition><then pos:line="62" pos:column="30"> <block pos:line="62" pos:column="31">{
                <expr_stmt><expr><call><name pos:line="63" pos:column="17">puts<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">( <argument><expr><literal type="string" pos:line="63" pos:column="23">"# i-am-alive flag incompatible with fork mode, resetting"<pos:position pos:line="63" pos:column="81"/></literal></expr></argument> )<pos:position pos:line="63" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="84"/></expr_stmt>
                <expr_stmt><expr><name><operator pos:line="64" pos:column="17">::<pos:position pos:line="64" pos:column="19"/></operator><name pos:line="64" pos:column="19">iamalive<pos:position pos:line="64" pos:column="27"/></name></name> <operator pos:line="64" pos:column="28">=<pos:position pos:line="64" pos:column="29"/></operator> <literal type="boolean" pos:line="64" pos:column="30">false<pos:position pos:line="64" pos:column="35"/></literal></expr>;<pos:position pos:line="64" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="65" pos:column="14"/></block></then></if>

            <for pos:line="67" pos:column="13">for <control pos:line="67" pos:column="17">( <init><decl><type><name pos:line="67" pos:column="19">size_t<pos:position pos:line="67" pos:column="25"/></name></type> <name pos:line="67" pos:column="26">i<pos:position pos:line="67" pos:column="27"/></name><init pos:line="67" pos:column="27">=<expr><literal type="number" pos:line="67" pos:column="28">0<pos:position pos:line="67" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="67" pos:column="30"/></init> <condition><expr><name pos:line="67" pos:column="31">i<pos:position pos:line="67" pos:column="32"/></name> <operator pos:line="67" pos:column="33">&lt;<pos:position pos:line="67" pos:column="37"/></operator> <call><name><name pos:line="67" pos:column="35">cdv<pos:position pos:line="67" pos:column="38"/></name><operator pos:line="67" pos:column="38">.<pos:position pos:line="67" pos:column="39"/></operator><name pos:line="67" pos:column="39">size<pos:position pos:line="67" pos:column="43"/></name></name><argument_list pos:line="67" pos:column="43">()<pos:position pos:line="67" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="46"/></condition> <incr><expr><operator pos:line="67" pos:column="47">++<pos:position pos:line="67" pos:column="49"/></operator><name pos:line="67" pos:column="49">i<pos:position pos:line="67" pos:column="50"/></name></expr></incr> )<pos:position pos:line="67" pos:column="52"/></control> <block pos:line="67" pos:column="53">{
                <if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">( <expr><call><name pos:line="68" pos:column="22">getpid<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">()<pos:position pos:line="68" pos:column="30"/></argument_list></call> <operator pos:line="68" pos:column="31">==<pos:position pos:line="68" pos:column="33"/></operator> <call><name pos:line="68" pos:column="34">getpgrp<pos:position pos:line="68" pos:column="41"/></name><argument_list pos:line="68" pos:column="41">()<pos:position pos:line="68" pos:column="43"/></argument_list></call></expr> )<pos:position pos:line="68" pos:column="45"/></condition><then pos:line="68" pos:column="45"> <block pos:line="68" pos:column="46">{
                    <comment type="line" pos:line="69" pos:column="21">// only parent == group leader may fork off new processes</comment>
                    <if pos:line="70" pos:column="21">if <condition pos:line="70" pos:column="24">( <expr><operator pos:line="70" pos:column="26">(<pos:position pos:line="70" pos:column="27"/></operator><name><name pos:line="70" pos:column="27">child<pos:position pos:line="70" pos:column="32"/></name><index pos:line="70" pos:column="32">[<expr><name pos:line="70" pos:column="33">i<pos:position pos:line="70" pos:column="34"/></name></expr>]<pos:position pos:line="70" pos:column="35"/></index></name><operator pos:line="70" pos:column="35">=<pos:position pos:line="70" pos:column="36"/></operator><call><name pos:line="70" pos:column="36">fork<pos:position pos:line="70" pos:column="40"/></name><argument_list pos:line="70" pos:column="40">()<pos:position pos:line="70" pos:column="42"/></argument_list></call><operator pos:line="70" pos:column="42">)<pos:position pos:line="70" pos:column="43"/></operator> <operator pos:line="70" pos:column="44">&lt;<pos:position pos:line="70" pos:column="48"/></operator> <literal type="number" pos:line="70" pos:column="46">0<pos:position pos:line="70" pos:column="47"/></literal></expr> )<pos:position pos:line="70" pos:column="49"/></condition><then pos:line="70" pos:column="49"> <block pos:line="70" pos:column="50">{
                        <comment type="line" pos:line="71" pos:column="25">// fork error, this is bad!</comment>
                        <expr_stmt><expr><call><name pos:line="72" pos:column="25">perror<pos:position pos:line="72" pos:column="31"/></name><argument_list pos:line="72" pos:column="31">( <argument><expr><literal type="string" pos:line="72" pos:column="33">"unable to fork"<pos:position pos:line="72" pos:column="49"/></literal></expr></argument> )<pos:position pos:line="72" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="52"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="73" pos:column="25">kill<pos:position pos:line="73" pos:column="29"/></name><argument_list pos:line="73" pos:column="29">( <argument><expr><operator pos:line="73" pos:column="31">-<pos:position pos:line="73" pos:column="32"/></operator><call><name pos:line="73" pos:column="32">getpgrp<pos:position pos:line="73" pos:column="39"/></name><argument_list pos:line="73" pos:column="39">()<pos:position pos:line="73" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="73" pos:column="43">SIGTERM<pos:position pos:line="73" pos:column="50"/></name></expr></argument> )<pos:position pos:line="73" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="53"/></expr_stmt>
                        <return pos:line="74" pos:column="25">return <expr><literal type="number" pos:line="74" pos:column="32">1<pos:position pos:line="74" pos:column="33"/></literal></expr>;<pos:position pos:line="74" pos:column="34"/></return>
                    }<pos:position pos:line="75" pos:column="22"/></block></then> <elseif pos:line="75" pos:column="23">else <if pos:line="75" pos:column="28">if <condition pos:line="75" pos:column="31">( <expr><name><name pos:line="75" pos:column="33">child<pos:position pos:line="75" pos:column="38"/></name><index pos:line="75" pos:column="38">[<expr><name pos:line="75" pos:column="39">i<pos:position pos:line="75" pos:column="40"/></name></expr>]<pos:position pos:line="75" pos:column="41"/></index></name> <operator pos:line="75" pos:column="42">==<pos:position pos:line="75" pos:column="44"/></operator> <literal type="number" pos:line="75" pos:column="45">0<pos:position pos:line="75" pos:column="46"/></literal></expr> )<pos:position pos:line="75" pos:column="48"/></condition><then pos:line="75" pos:column="48"> <block pos:line="75" pos:column="49">{
                        <comment type="line" pos:line="76" pos:column="25">// child mode</comment>
                        <comment type="line" pos:line="77" pos:column="25">// execute OR complain</comment>
                        <if pos:line="78" pos:column="25">if <condition pos:line="78" pos:column="28">( <expr><operator pos:line="78" pos:column="30">!<pos:position pos:line="78" pos:column="31"/></operator> <call><name pos:line="78" pos:column="32">dirlevel<pos:position pos:line="78" pos:column="40"/></name><argument_list pos:line="78" pos:column="40">(<argument><expr><name><name pos:line="78" pos:column="41">cdv<pos:position pos:line="78" pos:column="44"/></name><index pos:line="78" pos:column="44">[<expr><name pos:line="78" pos:column="45">i<pos:position pos:line="78" pos:column="46"/></name></expr>]<pos:position pos:line="78" pos:column="47"/></index></name><operator pos:line="78" pos:column="47">.<pos:position pos:line="78" pos:column="48"/></operator><name pos:line="78" pos:column="48">base<pos:position pos:line="78" pos:column="52"/></name></expr></argument>,<argument><expr><name pos:line="78" pos:column="53">list<pos:position pos:line="78" pos:column="57"/></name></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></call></expr> )<pos:position pos:line="78" pos:column="60"/></condition><then pos:line="78" pos:column="60">
                            <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="29">fprintf<pos:position pos:line="79" pos:column="36"/></name><argument_list pos:line="79" pos:column="36">( <argument><expr><name pos:line="79" pos:column="38">stderr<pos:position pos:line="79" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="46">"program terminated due to error: %s\n"<pos:position pos:line="79" pos:column="85"/></literal></expr></argument>,
                                     <argument><expr><call><name pos:line="80" pos:column="38">strerror<pos:position pos:line="80" pos:column="46"/></name><argument_list pos:line="80" pos:column="46">(<argument><expr><name pos:line="80" pos:column="47">errno<pos:position pos:line="80" pos:column="52"/></name></expr></argument>)<pos:position pos:line="80" pos:column="53"/></argument_list></call></expr></argument> )<pos:position pos:line="80" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="56"/></expr_stmt></block></then></if>
                        <expr_stmt><expr><call><name pos:line="81" pos:column="25">xfree<pos:position pos:line="81" pos:column="30"/></name><argument_list pos:line="81" pos:column="30">(<argument><expr><operator pos:line="81" pos:column="31">(<pos:position pos:line="81" pos:column="32"/></operator><name pos:line="81" pos:column="32">void<pos:position pos:line="81" pos:column="36"/></name><operator pos:line="81" pos:column="36">*<pos:position pos:line="81" pos:column="37"/></operator><operator pos:line="81" pos:column="37">)<pos:position pos:line="81" pos:column="38"/></operator> <name><name pos:line="81" pos:column="39">cdv<pos:position pos:line="81" pos:column="42"/></name><index pos:line="81" pos:column="42">[<expr><name pos:line="81" pos:column="43">i<pos:position pos:line="81" pos:column="44"/></name></expr>]<pos:position pos:line="81" pos:column="45"/></index></name><operator pos:line="81" pos:column="45">.<pos:position pos:line="81" pos:column="46"/></operator><name pos:line="81" pos:column="46">base<pos:position pos:line="81" pos:column="50"/></name></expr></argument>)<pos:position pos:line="81" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="52"/></expr_stmt>
                        <return pos:line="82" pos:column="25">return <expr><literal type="number" pos:line="82" pos:column="32">0<pos:position pos:line="82" pos:column="33"/></literal></expr>;<pos:position pos:line="82" pos:column="34"/></return>
                    }<pos:position pos:line="83" pos:column="22"/></block></then></if></elseif> <else pos:line="83" pos:column="23">else <block pos:line="83" pos:column="28">{
                        <comment type="line" pos:line="84" pos:column="25">// parent mode</comment>
                        <if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">( <expr><name><operator pos:line="85" pos:column="30">::<pos:position pos:line="85" pos:column="32"/></operator><name pos:line="85" pos:column="32">debugFlag<pos:position pos:line="85" pos:column="41"/></name></name></expr> )<pos:position pos:line="85" pos:column="43"/></condition><then pos:line="85" pos:column="43"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="44">printf<pos:position pos:line="85" pos:column="50"/></name><argument_list pos:line="85" pos:column="50">( <argument><expr><literal type="string" pos:line="85" pos:column="52">"forked child %d\n"<pos:position pos:line="85" pos:column="71"/></literal></expr></argument>, <argument><expr><operator pos:line="85" pos:column="73">(<pos:position pos:line="85" pos:column="74"/></operator><name pos:line="85" pos:column="74">int<pos:position pos:line="85" pos:column="77"/></name><operator pos:line="85" pos:column="77">)<pos:position pos:line="85" pos:column="78"/></operator> <name><name pos:line="85" pos:column="79">child<pos:position pos:line="85" pos:column="84"/></name><index pos:line="85" pos:column="84">[<expr><name pos:line="85" pos:column="85">i<pos:position pos:line="85" pos:column="86"/></name></expr>]<pos:position pos:line="85" pos:column="87"/></index></name></expr></argument> )<pos:position pos:line="85" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="90"/></expr_stmt></block></then></if>
                    }<pos:position pos:line="86" pos:column="22"/></block></else></if>
                }<pos:position pos:line="87" pos:column="18"/></block></then></if>
            }<pos:position pos:line="88" pos:column="14"/></block></for>

            <comment type="line" pos:line="90" pos:column="13">// collect the garbase</comment>
            <decl_stmt><decl><type><name pos:line="91" pos:column="13">pid_t<pos:position pos:line="91" pos:column="18"/></name></type> <name pos:line="91" pos:column="19">temp<pos:position pos:line="91" pos:column="23"/></name></decl>;<pos:position pos:line="91" pos:column="24"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="92" pos:column="13">int<pos:position pos:line="92" pos:column="16"/></name></type> <name pos:line="92" pos:column="17">status<pos:position pos:line="92" pos:column="23"/></name></decl>;<pos:position pos:line="92" pos:column="24"/></decl_stmt>
            <for pos:line="93" pos:column="13">for <control pos:line="93" pos:column="17">( <init><decl><type><name pos:line="93" pos:column="19">size_t<pos:position pos:line="93" pos:column="25"/></name></type> <name pos:line="93" pos:column="26">i<pos:position pos:line="93" pos:column="27"/></name><init pos:line="93" pos:column="27">=<expr><literal type="number" pos:line="93" pos:column="28">0<pos:position pos:line="93" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="93" pos:column="30"/></init> <condition><expr><name pos:line="93" pos:column="31">i<pos:position pos:line="93" pos:column="32"/></name> <operator pos:line="93" pos:column="33">&lt;<pos:position pos:line="93" pos:column="37"/></operator> <call><name><name pos:line="93" pos:column="35">cdv<pos:position pos:line="93" pos:column="38"/></name><operator pos:line="93" pos:column="38">.<pos:position pos:line="93" pos:column="39"/></operator><name pos:line="93" pos:column="39">size<pos:position pos:line="93" pos:column="43"/></name></name><argument_list pos:line="93" pos:column="43">()<pos:position pos:line="93" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="46"/></condition> <incr><expr><operator pos:line="93" pos:column="47">++<pos:position pos:line="93" pos:column="49"/></operator><name pos:line="93" pos:column="49">i<pos:position pos:line="93" pos:column="50"/></name></expr></incr> )<pos:position pos:line="93" pos:column="52"/></control> <block pos:line="93" pos:column="53">{
                <while pos:line="94" pos:column="17">while <condition pos:line="94" pos:column="23">( <expr><operator pos:line="94" pos:column="25">(<pos:position pos:line="94" pos:column="26"/></operator><name pos:line="94" pos:column="26">temp<pos:position pos:line="94" pos:column="30"/></name><operator pos:line="94" pos:column="30">=<pos:position pos:line="94" pos:column="31"/></operator><call><name pos:line="94" pos:column="31">waitpid<pos:position pos:line="94" pos:column="38"/></name><argument_list pos:line="94" pos:column="38">( <argument><expr><operator pos:line="94" pos:column="40">(<pos:position pos:line="94" pos:column="41"/></operator><name pos:line="94" pos:column="41">pid_t<pos:position pos:line="94" pos:column="46"/></name><operator pos:line="94" pos:column="46">)<pos:position pos:line="94" pos:column="47"/></operator><operator pos:line="94" pos:column="47">-<pos:position pos:line="94" pos:column="48"/></operator><literal type="number" pos:line="94" pos:column="48">1<pos:position pos:line="94" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="94" pos:column="51">&amp;<pos:position pos:line="94" pos:column="56"/></operator><name pos:line="94" pos:column="52">status<pos:position pos:line="94" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="60">0<pos:position pos:line="94" pos:column="61"/></literal></expr></argument> )<pos:position pos:line="94" pos:column="63"/></argument_list></call><operator pos:line="94" pos:column="63">)<pos:position pos:line="94" pos:column="64"/></operator> <operator pos:line="94" pos:column="65">==<pos:position pos:line="94" pos:column="67"/></operator> <operator pos:line="94" pos:column="68">-<pos:position pos:line="94" pos:column="69"/></operator><literal type="number" pos:line="94" pos:column="69">1<pos:position pos:line="94" pos:column="70"/></literal></expr> )<pos:position pos:line="94" pos:column="72"/></condition>
                    <block type="pseudo"><if pos:line="95" pos:column="21">if <condition pos:line="95" pos:column="24">( <expr><name pos:line="95" pos:column="26">errno<pos:position pos:line="95" pos:column="31"/></name> <operator pos:line="95" pos:column="32">==<pos:position pos:line="95" pos:column="34"/></operator> <name pos:line="95" pos:column="35">EINTR<pos:position pos:line="95" pos:column="40"/></name></expr> )<pos:position pos:line="95" pos:column="42"/></condition><then pos:line="95" pos:column="42"> <block type="pseudo"><continue pos:line="95" pos:column="43">continue;<pos:position pos:line="95" pos:column="52"/></continue></block></then></if></block></while>
                <if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">( <expr><name><operator pos:line="96" pos:column="22">::<pos:position pos:line="96" pos:column="24"/></operator><name pos:line="96" pos:column="24">debugFlag<pos:position pos:line="96" pos:column="33"/></name></name></expr> )<pos:position pos:line="96" pos:column="35"/></condition><then pos:line="96" pos:column="35"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="96" pos:column="36">printf<pos:position pos:line="96" pos:column="42"/></name><argument_list pos:line="96" pos:column="42">( <argument><expr><literal type="string" pos:line="96" pos:column="44">"collected child %d\n"<pos:position pos:line="96" pos:column="66"/></literal></expr></argument>, <argument><expr><operator pos:line="96" pos:column="68">(<pos:position pos:line="96" pos:column="69"/></operator><name pos:line="96" pos:column="69">int<pos:position pos:line="96" pos:column="72"/></name><operator pos:line="96" pos:column="72">)<pos:position pos:line="96" pos:column="73"/></operator> <name pos:line="96" pos:column="74">temp<pos:position pos:line="96" pos:column="78"/></name></expr></argument> )<pos:position pos:line="96" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="81"/></expr_stmt></block></then></if>
            }<pos:position pos:line="97" pos:column="14"/></block></for>
            <expr_stmt><expr><operator pos:line="98" pos:column="13">delete<pos:position pos:line="98" pos:column="19"/></operator><index pos:line="98" pos:column="19">[]<pos:position pos:line="98" pos:column="21"/></index> <name pos:line="98" pos:column="22">child<pos:position pos:line="98" pos:column="27"/></name></expr>;<pos:position pos:line="98" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="99" pos:column="10"/></block></else></if>
    }<pos:position pos:line="100" pos:column="6"/></block></then> <else pos:line="100" pos:column="7">else <block pos:line="100" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">fprintf<pos:position pos:line="101" pos:column="16"/></name><argument_list pos:line="101" pos:column="16">( <argument><expr><name pos:line="101" pos:column="18">stderr<pos:position pos:line="101" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="26">"no cache_dir or error accessing \"%s\"\n"<pos:position pos:line="101" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="70">conffile<pos:position pos:line="101" pos:column="78"/></name></expr></argument> )<pos:position pos:line="101" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="81"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></else></if>

    <comment type="line" pos:line="104" pos:column="5">// clean up</comment>
    <if pos:line="105" pos:column="5">if <condition pos:line="105" pos:column="8">( <expr><name pos:line="105" pos:column="10">copydir<pos:position pos:line="105" pos:column="17"/></name></expr> )<pos:position pos:line="105" pos:column="19"/></condition><then pos:line="105" pos:column="19"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="105" pos:column="20">xfree<pos:position pos:line="105" pos:column="25"/></name><argument_list pos:line="105" pos:column="25">( <argument><expr><operator pos:line="105" pos:column="27">(<pos:position pos:line="105" pos:column="28"/></operator><name pos:line="105" pos:column="28">void<pos:position pos:line="105" pos:column="32"/></name><operator pos:line="105" pos:column="32">*<pos:position pos:line="105" pos:column="33"/></operator><operator pos:line="105" pos:column="33">)<pos:position pos:line="105" pos:column="34"/></operator> <name pos:line="105" pos:column="35">copydir<pos:position pos:line="105" pos:column="42"/></name></expr></argument> )<pos:position pos:line="105" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="45"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="106" pos:column="5">xfree<pos:position pos:line="106" pos:column="10"/></name><argument_list pos:line="106" pos:column="10">(<argument><expr><operator pos:line="106" pos:column="11">(<pos:position pos:line="106" pos:column="12"/></operator><name pos:line="106" pos:column="12">void<pos:position pos:line="106" pos:column="16"/></name><operator pos:line="106" pos:column="16">*<pos:position pos:line="106" pos:column="17"/></operator><operator pos:line="106" pos:column="17">)<pos:position pos:line="106" pos:column="18"/></operator> <name pos:line="106" pos:column="19">conffile<pos:position pos:line="106" pos:column="27"/></name></expr></argument>)<pos:position pos:line="106" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="107" pos:column="5">delete<pos:position pos:line="107" pos:column="11"/></operator> <name pos:line="107" pos:column="12">list<pos:position pos:line="107" pos:column="16"/></name></expr>;<pos:position pos:line="107" pos:column="17"/></expr_stmt>
    <return pos:line="108" pos:column="5">return <expr><literal type="number" pos:line="108" pos:column="12">0<pos:position pos:line="108" pos:column="13"/></literal></expr>;<pos:position pos:line="108" pos:column="14"/></return>
}<pos:position pos:line="109" pos:column="2"/></block></function></unit>
