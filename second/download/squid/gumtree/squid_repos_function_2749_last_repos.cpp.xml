<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2749_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">gopher_request_parse<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">HttpRequest<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type> <name pos:line="2" pos:column="42">req<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">char<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">type_id<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="62">char<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">*<pos:position pos:line="2" pos:column="68"/></modifier></type><name pos:line="2" pos:column="68">request<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="76"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><operator pos:line="4" pos:column="5">::<pos:position pos:line="4" pos:column="7"/></operator><name pos:line="4" pos:column="7">Parser<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">::<pos:position pos:line="4" pos:column="15"/></operator><name pos:line="4" pos:column="15">Tokenizer<pos:position pos:line="4" pos:column="24"/></name></name></type> <name pos:line="4" pos:column="25">tok<pos:position pos:line="4" pos:column="28"/></name><argument_list pos:line="4" pos:column="28">(<argument><expr><call><name><name pos:line="4" pos:column="29">req<pos:position pos:line="4" pos:column="32"/></name><operator pos:line="4" pos:column="32">-&gt;<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="34">url<pos:position pos:line="4" pos:column="37"/></name><operator pos:line="4" pos:column="37">.<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="38">path<pos:position pos:line="4" pos:column="42"/></name></name><argument_list pos:line="4" pos:column="42">()<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="45"/></argument_list></decl>;<pos:position pos:line="4" pos:column="46"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">request<pos:position pos:line="6" pos:column="16"/></name></expr>)<pos:position pos:line="6" pos:column="17"/></condition><then pos:line="6" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="7" pos:column="9">*<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">request<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">tok<pos:position pos:line="9" pos:column="8"/></name><operator pos:line="9" pos:column="8">.<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="9">skip<pos:position pos:line="9" pos:column="13"/></name></name><argument_list pos:line="9" pos:column="13">(<argument><expr><literal type="char" pos:line="9" pos:column="14">'/'<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="19"/></expr_stmt> <comment type="line" pos:line="9" pos:column="20">// ignore failures? path could be ab-empty</comment>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name><name pos:line="11" pos:column="9">tok<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">.<pos:position pos:line="11" pos:column="13"/></operator><name pos:line="11" pos:column="13">atEnd<pos:position pos:line="11" pos:column="18"/></name></name><argument_list pos:line="11" pos:column="18">()<pos:position pos:line="11" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21"> <block pos:line="11" pos:column="22">{
        <expr_stmt><expr><operator pos:line="12" pos:column="9">*<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">type_id<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">GOPHER_DIRECTORY<pos:position pos:line="12" pos:column="36"/></name></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <decl_stmt><decl><specifier pos:line="16" pos:column="5">static<pos:position pos:line="16" pos:column="11"/></specifier> <type><specifier pos:line="16" pos:column="12">const<pos:position pos:line="16" pos:column="17"/></specifier> <name pos:line="16" pos:column="18">CharacterSet<pos:position pos:line="16" pos:column="30"/></name></type> <name pos:line="16" pos:column="31">anyByte<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">(<argument><expr><literal type="string" pos:line="16" pos:column="39">"UTF-8"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="16" pos:column="47">0x00<pos:position pos:line="16" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="53">0xFF<pos:position pos:line="16" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="58"/></argument_list></decl>;<pos:position pos:line="16" pos:column="59"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">SBuf<pos:position pos:line="18" pos:column="9"/></name></type> <name pos:line="18" pos:column="10">typeId<pos:position pos:line="18" pos:column="16"/></name></decl>;<pos:position pos:line="18" pos:column="17"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="19" pos:column="5">(<pos:position pos:line="19" pos:column="6"/></operator><name pos:line="19" pos:column="6">void<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">)<pos:position pos:line="19" pos:column="11"/></operator><call><name><name pos:line="19" pos:column="11">tok<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">prefix<pos:position pos:line="19" pos:column="21"/></name></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">typeId<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="30">anyByte<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="39">1<pos:position pos:line="19" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt> <comment type="line" pos:line="19" pos:column="43">// never fails since !atEnd()</comment>
    <expr_stmt><expr><operator pos:line="20" pos:column="5">*<pos:position pos:line="20" pos:column="6"/></operator><name pos:line="20" pos:column="6">type_id<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <name><name pos:line="20" pos:column="16">typeId<pos:position pos:line="20" pos:column="22"/></name><index pos:line="20" pos:column="22">[<expr><literal type="number" pos:line="20" pos:column="23">0<pos:position pos:line="20" pos:column="24"/></literal></expr>]<pos:position pos:line="20" pos:column="25"/></index></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">request<pos:position pos:line="22" pos:column="16"/></name></expr>)<pos:position pos:line="22" pos:column="17"/></condition><then pos:line="22" pos:column="17"> <block pos:line="22" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">SBufToCstring<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">request<pos:position pos:line="23" pos:column="30"/></name></expr></argument>, <argument><expr><call><name><name pos:line="23" pos:column="32">tok<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">.<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="36">remaining<pos:position pos:line="23" pos:column="45"/></name></name><argument_list pos:line="23" pos:column="45">()<pos:position pos:line="23" pos:column="47"/></argument_list></call><operator pos:line="23" pos:column="47">.<pos:position pos:line="23" pos:column="48"/></operator><call><name pos:line="23" pos:column="48">substr<pos:position pos:line="23" pos:column="54"/></name><argument_list pos:line="23" pos:column="54">(<argument><expr><literal type="number" pos:line="23" pos:column="55">0<pos:position pos:line="23" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="58">MAX_URL<pos:position pos:line="23" pos:column="65"/></name><operator pos:line="23" pos:column="65">-<pos:position pos:line="23" pos:column="66"/></operator><literal type="number" pos:line="23" pos:column="66">1<pos:position pos:line="23" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="70"/></expr_stmt>
        <comment type="block" pos:line="24" pos:column="9">/* convert %xx to char */</comment>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">rfc1738_unescape<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">request<pos:position pos:line="25" pos:column="33"/></name></expr></argument>)<pos:position pos:line="25" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
