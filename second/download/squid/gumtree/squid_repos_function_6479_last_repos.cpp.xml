<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6479_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">IpcIoFile<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">DiskerHandleRequests<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">()<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Balance our desire to maximize the number of concurrent I/O requests</comment>
    <comment type="line" pos:line="5" pos:column="5">// (reordred by OS to minimize seek time) with a requirement to</comment>
    <comment type="line" pos:line="6" pos:column="5">// send 1st-I/O notification messages, process Coordinator events, etc.</comment>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">int<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">maxSpentMsec<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><literal type="number" pos:line="7" pos:column="30">10<pos:position pos:line="7" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt> <comment type="line" pos:line="7" pos:column="34">// keep small: most RAM I/Os are under 1ms</comment>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">timeval<pos:position pos:line="8" pos:column="18"/></name></type> <name pos:line="8" pos:column="19">loopStart<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><name pos:line="8" pos:column="31">current_time<pos:position pos:line="8" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">popped<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">= <expr><literal type="number" pos:line="10" pos:column="18">0<pos:position pos:line="10" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">workerId<pos:position pos:line="11" pos:column="17"/></name> <init pos:line="11" pos:column="18">= <expr><literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">IpcIoMsg<pos:position pos:line="12" pos:column="13"/></name></type> <name pos:line="12" pos:column="14">ipcIo<pos:position pos:line="12" pos:column="19"/></name></decl>;<pos:position pos:line="12" pos:column="20"/></decl_stmt>
    <while pos:line="13" pos:column="5">while <condition pos:line="13" pos:column="11">(<expr><operator pos:line="13" pos:column="12">!<pos:position pos:line="13" pos:column="13"/></operator><call><name pos:line="13" pos:column="13">WaitBeforePop<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">()<pos:position pos:line="13" pos:column="28"/></argument_list></call> <operator pos:line="13" pos:column="29">&amp;&amp;<pos:position pos:line="13" pos:column="39"/></operator> <call><name><name pos:line="13" pos:column="32">queue<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">-&gt;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="39">pop<pos:position pos:line="13" pos:column="42"/></name></name><argument_list pos:line="13" pos:column="42">(<argument><expr><name pos:line="13" pos:column="43">workerId<pos:position pos:line="13" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="53">ipcIo<pos:position pos:line="13" pos:column="58"/></name></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="60"/></condition> <block pos:line="13" pos:column="61">{
        <expr_stmt><expr><operator pos:line="14" pos:column="9">++<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">popped<pos:position pos:line="14" pos:column="17"/></name></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>

        <comment type="line" pos:line="16" pos:column="9">// at least one I/O per call is guaranteed if the queue is not empty</comment>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">DiskerHandleRequest<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">workerId<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">ipcIo<pos:position pos:line="17" pos:column="44"/></name></expr></argument>)<pos:position pos:line="17" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="46"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="19" pos:column="9">getCurrentTime<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">()<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="20" pos:column="9">const<pos:position pos:line="20" pos:column="14"/></specifier> <name pos:line="20" pos:column="15">double<pos:position pos:line="20" pos:column="21"/></name></type> <name pos:line="20" pos:column="22">elapsedMsec<pos:position pos:line="20" pos:column="33"/></name> <init pos:line="20" pos:column="34">= <expr><call><name pos:line="20" pos:column="36">tvSubMsec<pos:position pos:line="20" pos:column="45"/></name><argument_list pos:line="20" pos:column="45">(<argument><expr><name pos:line="20" pos:column="46">loopStart<pos:position pos:line="20" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="57">current_time<pos:position pos:line="20" pos:column="69"/></name></expr></argument>)<pos:position pos:line="20" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="71"/></decl_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">elapsedMsec<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">&gt;<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="27">maxSpentMsec<pos:position pos:line="21" pos:column="39"/></name> <operator pos:line="21" pos:column="40">||<pos:position pos:line="21" pos:column="42"/></operator> <name pos:line="21" pos:column="43">elapsedMsec<pos:position pos:line="21" pos:column="54"/></name> <operator pos:line="21" pos:column="55">&lt;<pos:position pos:line="21" pos:column="59"/></operator> <literal type="number" pos:line="21" pos:column="57">0<pos:position pos:line="21" pos:column="58"/></literal></expr>)<pos:position pos:line="21" pos:column="59"/></condition><then pos:line="21" pos:column="59"> <block pos:line="21" pos:column="60">{
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><operator pos:line="22" pos:column="17">!<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="18">DiskerHandleMoreRequestsScheduled<pos:position pos:line="22" pos:column="51"/></name></expr>)<pos:position pos:line="22" pos:column="52"/></condition><then pos:line="22" pos:column="52"> <block pos:line="22" pos:column="53">{
                <comment type="line" pos:line="23" pos:column="17">// the gap must be positive for select(2) to be given a chance</comment>
                <decl_stmt><decl><type><specifier pos:line="24" pos:column="17">const<pos:position pos:line="24" pos:column="22"/></specifier> <name pos:line="24" pos:column="23">double<pos:position pos:line="24" pos:column="29"/></name></type> <name pos:line="24" pos:column="30">minBreakSecs<pos:position pos:line="24" pos:column="42"/></name> <init pos:line="24" pos:column="43">= <expr><literal type="number" pos:line="24" pos:column="45">0.001<pos:position pos:line="24" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="24" pos:column="51"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="25" pos:column="17">eventAdd<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><literal type="string" pos:line="25" pos:column="26">"IpcIoFile::DiskerHandleMoreRequests"<pos:position pos:line="25" pos:column="63"/></literal></expr></argument>,
                         <argument><expr><operator pos:line="26" pos:column="26">&amp;<pos:position pos:line="26" pos:column="31"/></operator><name><name pos:line="26" pos:column="27">IpcIoFile<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">::<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="38">DiskerHandleMoreRequests<pos:position pos:line="26" pos:column="62"/></name></name></expr></argument>,
                         <argument><expr><cast type="const" pos:line="27" pos:column="26">const_cast<argument_list type="generic" pos:line="27" pos:column="36">&lt;<argument><expr><name pos:line="27" pos:column="37">char<pos:position pos:line="27" pos:column="41"/></name><operator pos:line="27" pos:column="41">*<pos:position pos:line="27" pos:column="42"/></operator></expr></argument>&gt;<pos:position pos:line="27" pos:column="46"/></argument_list><argument_list pos:line="27" pos:column="43">(<argument><expr><literal type="string" pos:line="27" pos:column="44">"long I/O loop"<pos:position pos:line="27" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></cast></expr></argument>,
                         <argument><expr><name pos:line="28" pos:column="26">minBreakSecs<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="40">0<pos:position pos:line="28" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="28" pos:column="43">false<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name pos:line="29" pos:column="17">DiskerHandleMoreRequestsScheduled<pos:position pos:line="29" pos:column="50"/></name> <operator pos:line="29" pos:column="51">=<pos:position pos:line="29" pos:column="52"/></operator> <literal type="boolean" pos:line="29" pos:column="53">true<pos:position pos:line="29" pos:column="57"/></literal></expr>;<pos:position pos:line="29" pos:column="58"/></expr_stmt>
            }<pos:position pos:line="30" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">debugs<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><literal type="number" pos:line="31" pos:column="20">47<pos:position pos:line="31" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="24">3<pos:position pos:line="31" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="27">HERE<pos:position pos:line="31" pos:column="31"/></name> <operator pos:line="31" pos:column="32">&lt;&lt;<pos:position pos:line="31" pos:column="40"/></operator> <literal type="string" pos:line="31" pos:column="35">"pausing after "<pos:position pos:line="31" pos:column="51"/></literal> <operator pos:line="31" pos:column="52">&lt;&lt;<pos:position pos:line="31" pos:column="60"/></operator> <name pos:line="31" pos:column="55">popped<pos:position pos:line="31" pos:column="61"/></name> <operator pos:line="31" pos:column="62">&lt;&lt;<pos:position pos:line="31" pos:column="70"/></operator> <literal type="string" pos:line="31" pos:column="65">" I/Os in "<pos:position pos:line="31" pos:column="76"/></literal> <operator pos:line="31" pos:column="77">&lt;&lt;<pos:position pos:line="31" pos:column="85"/></operator>
                   <name pos:line="32" pos:column="20">elapsedMsec<pos:position pos:line="32" pos:column="31"/></name> <operator pos:line="32" pos:column="32">&lt;&lt;<pos:position pos:line="32" pos:column="40"/></operator> <literal type="string" pos:line="32" pos:column="35">"ms; "<pos:position pos:line="32" pos:column="41"/></literal> <operator pos:line="32" pos:column="42">&lt;&lt;<pos:position pos:line="32" pos:column="50"/></operator> <operator pos:line="32" pos:column="45">(<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="46">elapsedMsec<pos:position pos:line="32" pos:column="57"/></name><operator pos:line="32" pos:column="57">/<pos:position pos:line="32" pos:column="58"/></operator><name pos:line="32" pos:column="58">popped<pos:position pos:line="32" pos:column="64"/></name><operator pos:line="32" pos:column="64">)<pos:position pos:line="32" pos:column="65"/></operator> <operator pos:line="32" pos:column="66">&lt;&lt;<pos:position pos:line="32" pos:column="74"/></operator> <literal type="string" pos:line="32" pos:column="69">"ms per I/O"<pos:position pos:line="32" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="83"/></expr_stmt>
            <break pos:line="33" pos:column="13">break;<pos:position pos:line="33" pos:column="19"/></break>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></while>

    <comment type="line" pos:line="37" pos:column="5">// TODO: consider using O_DIRECT with "elevator" optimization where we pop</comment>
    <comment type="line" pos:line="38" pos:column="5">// requests first, then reorder the popped requests to optimize seek time,</comment>
    <comment type="line" pos:line="39" pos:column="5">// then do I/O, then take a break, and come back for the next set of I/O</comment>
    <comment type="line" pos:line="40" pos:column="5">// requests.</comment>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
