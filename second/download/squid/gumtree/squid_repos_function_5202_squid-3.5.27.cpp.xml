<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5202_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Rebuild<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">startNewEntry<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier> <name pos:line="2" pos:column="36">sfileno<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">fileno<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier> <name pos:line="2" pos:column="58">SlotId<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">slotId<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="73">const<pos:position pos:line="2" pos:column="78"/></specifier> <name pos:line="2" pos:column="79">DbCellHeader<pos:position pos:line="2" pos:column="91"/></name> <modifier pos:line="2" pos:column="92">&amp;<pos:position pos:line="2" pos:column="97"/></modifier></type><name pos:line="2" pos:column="93">header<pos:position pos:line="2" pos:column="99"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="100"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// If some other from-disk entry is/was using this slot as its inode OR</comment>
    <comment type="line" pos:line="5" pos:column="5">// if some other from-disk entry is/was using our inode slot, then the</comment>
    <comment type="line" pos:line="6" pos:column="5">// entries are conflicting. We cannot identify other entries, so we just</comment>
    <comment type="line" pos:line="7" pos:column="5">// remove ours and hope that the others were/will be handled correctly.</comment>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">LoadingEntry<pos:position pos:line="8" pos:column="23"/></name> <modifier pos:line="8" pos:column="24">&amp;<pos:position pos:line="8" pos:column="29"/></modifier></type><name pos:line="8" pos:column="25">slice<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><name><name pos:line="8" pos:column="33">entries<pos:position pos:line="8" pos:column="40"/></name><index pos:line="8" pos:column="40">[<expr><name pos:line="8" pos:column="41">slotId<pos:position pos:line="8" pos:column="47"/></name></expr>]<pos:position pos:line="8" pos:column="48"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">LoadingEntry<pos:position pos:line="9" pos:column="23"/></name> <modifier pos:line="9" pos:column="24">&amp;<pos:position pos:line="9" pos:column="29"/></modifier></type><name pos:line="9" pos:column="25">inode<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><name><name pos:line="9" pos:column="33">entries<pos:position pos:line="9" pos:column="40"/></name><index pos:line="9" pos:column="40">[<expr><name><name pos:line="9" pos:column="41">header<pos:position pos:line="9" pos:column="47"/></name><operator pos:line="9" pos:column="47">.<pos:position pos:line="9" pos:column="48"/></operator><name pos:line="9" pos:column="48">firstSlot<pos:position pos:line="9" pos:column="57"/></name></name></expr>]<pos:position pos:line="9" pos:column="58"/></index></name></expr></init></decl>;<pos:position pos:line="9" pos:column="59"/></decl_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name><name pos:line="10" pos:column="9">slice<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">.<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="15">used<pos:position pos:line="10" pos:column="19"/></name></name><argument_list pos:line="10" pos:column="19">()<pos:position pos:line="10" pos:column="21"/></argument_list></call> <operator pos:line="10" pos:column="22">||<pos:position pos:line="10" pos:column="24"/></operator> <call><name><name pos:line="10" pos:column="25">inode<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">.<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="31">used<pos:position pos:line="10" pos:column="35"/></name></name><argument_list pos:line="10" pos:column="35">()<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38"> <block pos:line="10" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">47<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="11" pos:column="19">8<pos:position pos:line="11" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="22">"slice/inode used: "<pos:position pos:line="11" pos:column="42"/></literal> <operator pos:line="11" pos:column="43">&lt;&lt;<pos:position pos:line="11" pos:column="51"/></operator> <call><name><name pos:line="11" pos:column="46">slice<pos:position pos:line="11" pos:column="51"/></name><operator pos:line="11" pos:column="51">.<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="52">used<pos:position pos:line="11" pos:column="56"/></name></name><argument_list pos:line="11" pos:column="56">()<pos:position pos:line="11" pos:column="58"/></argument_list></call> <operator pos:line="11" pos:column="59">&lt;&lt;<pos:position pos:line="11" pos:column="67"/></operator> <call><name><name pos:line="11" pos:column="62">inode<pos:position pos:line="11" pos:column="67"/></name><operator pos:line="11" pos:column="67">.<pos:position pos:line="11" pos:column="68"/></operator><name pos:line="11" pos:column="68">used<pos:position pos:line="11" pos:column="72"/></name></name><argument_list pos:line="11" pos:column="72">()<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="76"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">LoadingEntry<pos:position pos:line="12" pos:column="21"/></name> <modifier pos:line="12" pos:column="22">&amp;<pos:position pos:line="12" pos:column="27"/></modifier></type><name pos:line="12" pos:column="23">le<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">= <expr><name><name pos:line="12" pos:column="28">entries<pos:position pos:line="12" pos:column="35"/></name><index pos:line="12" pos:column="35">[<expr><name pos:line="12" pos:column="36">fileno<pos:position pos:line="12" pos:column="42"/></name></expr>]<pos:position pos:line="12" pos:column="43"/></index></name></expr></init></decl>;<pos:position pos:line="12" pos:column="44"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">le<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">.<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="12">state<pos:position pos:line="13" pos:column="17"/></name></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name><name pos:line="13" pos:column="20">LoadingEntry<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">::<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="34">leCorrupted<pos:position pos:line="13" pos:column="45"/></name></name></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">freeSlotIfIdle<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">slotId<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="32">slotId<pos:position pos:line="14" pos:column="38"/></name> <operator pos:line="14" pos:column="39">==<pos:position pos:line="14" pos:column="41"/></operator> <name><name pos:line="14" pos:column="42">header<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">.<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="49">firstSlot<pos:position pos:line="14" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></expr_stmt>
        <comment type="line" pos:line="15" pos:column="9">// if not idle, the other entry will handle its slice</comment>
        <expr_stmt><expr><operator pos:line="16" pos:column="9">++<pos:position pos:line="16" pos:column="11"/></operator><name><name pos:line="16" pos:column="11">counts<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">.<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">clashcount<pos:position pos:line="16" pos:column="28"/></name></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="20" pos:column="5">// A miss may have been stored at our fileno while we were loading other</comment>
    <comment type="line" pos:line="21" pos:column="5">// slots from disk. We ought to preserve that entry because it is fresher.</comment>
    <decl_stmt><decl><type><specifier pos:line="22" pos:column="5">const<pos:position pos:line="22" pos:column="10"/></specifier> <name pos:line="22" pos:column="11">bool<pos:position pos:line="22" pos:column="15"/></name></type> <name pos:line="22" pos:column="16">overwriteExisting<pos:position pos:line="22" pos:column="33"/></name> <init pos:line="22" pos:column="34">= <expr><literal type="boolean" pos:line="22" pos:column="36">false<pos:position pos:line="22" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="42"/></decl_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<decl><type><name><name pos:line="23" pos:column="9">Ipc<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">::<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">StoreMap<pos:position pos:line="23" pos:column="22"/></name><operator pos:line="23" pos:column="22">::<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">Anchor<pos:position pos:line="23" pos:column="30"/></name></name> <modifier pos:line="23" pos:column="31">*<pos:position pos:line="23" pos:column="32"/></modifier></type><name pos:line="23" pos:column="32">anchor<pos:position pos:line="23" pos:column="38"/></name> <init pos:line="23" pos:column="39">= <expr><call><name><name pos:line="23" pos:column="41">sd<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">-&gt;<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="45">map<pos:position pos:line="23" pos:column="48"/></name><operator pos:line="23" pos:column="48">-&gt;<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="50">openForWritingAt<pos:position pos:line="23" pos:column="66"/></name></name><argument_list pos:line="23" pos:column="66">(<argument><expr><name pos:line="23" pos:column="67">fileno<pos:position pos:line="23" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="75">overwriteExisting<pos:position pos:line="23" pos:column="92"/></name></expr></argument>)<pos:position pos:line="23" pos:column="93"/></argument_list></call></expr></init></decl>)<pos:position pos:line="23" pos:column="94"/></condition><then pos:line="23" pos:column="94"> <block pos:line="23" pos:column="95">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">primeNewEntry<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><operator pos:line="24" pos:column="23">*<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="24">anchor<pos:position pos:line="24" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="32">fileno<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">header<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">addSlotToEntry<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">fileno<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="32">slotId<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="40">header<pos:position pos:line="25" pos:column="46"/></name></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt> <comment type="line" pos:line="25" pos:column="49">// may fail</comment>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">assert<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name><name pos:line="26" pos:column="16">anchor<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">-&gt;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="24">basics<pos:position pos:line="26" pos:column="30"/></name><operator pos:line="26" pos:column="30">.<pos:position pos:line="26" pos:column="31"/></operator><name pos:line="26" pos:column="31">swap_file_sz<pos:position pos:line="26" pos:column="43"/></name></name> <operator pos:line="26" pos:column="44">!=<pos:position pos:line="26" pos:column="46"/></operator> <cast type="static" pos:line="26" pos:column="47">static_cast<argument_list type="generic" pos:line="26" pos:column="58">&lt;<argument><expr><name pos:line="26" pos:column="59">uint64_t<pos:position pos:line="26" pos:column="67"/></name></expr></argument>&gt;<pos:position pos:line="26" pos:column="71"/></argument_list><argument_list pos:line="26" pos:column="68">(<argument><expr><operator pos:line="26" pos:column="69">-<pos:position pos:line="26" pos:column="70"/></operator><literal type="number" pos:line="26" pos:column="70">1<pos:position pos:line="26" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="72"/></argument_list></cast></expr></argument>)<pos:position pos:line="26" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="74"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then> <else pos:line="27" pos:column="7">else <block pos:line="27" pos:column="12">{
        <comment type="line" pos:line="28" pos:column="9">// A new from-network entry is occupying our map slot; let it be, but</comment>
        <comment type="line" pos:line="29" pos:column="9">// save us from the trouble of going through the above motions again.</comment>
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">LoadingEntry<pos:position pos:line="30" pos:column="21"/></name> <modifier pos:line="30" pos:column="22">&amp;<pos:position pos:line="30" pos:column="27"/></modifier></type><name pos:line="30" pos:column="23">le<pos:position pos:line="30" pos:column="25"/></name> <init pos:line="30" pos:column="26">= <expr><name><name pos:line="30" pos:column="28">entries<pos:position pos:line="30" pos:column="35"/></name><index pos:line="30" pos:column="35">[<expr><name pos:line="30" pos:column="36">fileno<pos:position pos:line="30" pos:column="42"/></name></expr>]<pos:position pos:line="30" pos:column="43"/></index></name></expr></init></decl>;<pos:position pos:line="30" pos:column="44"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="31" pos:column="9">le<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">.<pos:position pos:line="31" pos:column="12"/></operator><name pos:line="31" pos:column="12">state<pos:position pos:line="31" pos:column="17"/></name></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <name><name pos:line="31" pos:column="20">LoadingEntry<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">::<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">leIgnored<pos:position pos:line="31" pos:column="43"/></name></name></expr>;<pos:position pos:line="31" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">freeSlotIfIdle<pos:position pos:line="32" pos:column="23"/></name><argument_list pos:line="32" pos:column="23">(<argument><expr><name pos:line="32" pos:column="24">slotId<pos:position pos:line="32" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="32" pos:column="32">false<pos:position pos:line="32" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></else></if>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
