<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3760_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ip<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Address<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">lookupHostIP<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">s<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">bool<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">nodns<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">addrinfo<pos:position pos:line="4" pos:column="20"/></name></name></type> <name pos:line="4" pos:column="21">want<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">memset<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">&amp;<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="13">want<pos:position pos:line="5" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="22">sizeof<argument_list pos:line="5" pos:column="28">(<argument><expr pos:line="5" pos:column="29">struct <name pos:line="5" pos:column="36">addrinfo<pos:position pos:line="5" pos:column="44"/></name></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="47"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">nodns<pos:position pos:line="6" pos:column="14"/></name></expr>)<pos:position pos:line="6" pos:column="15"/></condition><then pos:line="6" pos:column="15"> <block pos:line="6" pos:column="16">{
        <expr_stmt><expr><name><name pos:line="7" pos:column="9">want<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">.<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">ai_flags<pos:position pos:line="7" pos:column="22"/></name></name> <operator pos:line="7" pos:column="23">=<pos:position pos:line="7" pos:column="24"/></operator> <name pos:line="7" pos:column="25">AI_NUMERICHOST<pos:position pos:line="7" pos:column="39"/></name></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt> <comment type="line" pos:line="7" pos:column="41">// prevent actual DNS lookups!</comment>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">err<pos:position pos:line="10" pos:column="12"/></name> <init pos:line="10" pos:column="13">= <expr><literal type="number" pos:line="10" pos:column="15">0<pos:position pos:line="10" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">addrinfo<pos:position pos:line="11" pos:column="20"/></name></name> <modifier pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></modifier></type><name pos:line="11" pos:column="22">res<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><name pos:line="11" pos:column="28">NULL<pos:position pos:line="11" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">( <expr><operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">err<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <call><name pos:line="12" pos:column="17">getaddrinfo<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name pos:line="12" pos:column="29">s<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">NULL<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="38">&amp;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="39">want<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="45">&amp;<pos:position pos:line="12" pos:column="50"/></operator><name pos:line="12" pos:column="46">res<pos:position pos:line="12" pos:column="49"/></name></expr></argument>)<pos:position pos:line="12" pos:column="50"/></argument_list></call><operator pos:line="12" pos:column="50">)<pos:position pos:line="12" pos:column="51"/></operator> <operator pos:line="12" pos:column="52">!=<pos:position pos:line="12" pos:column="54"/></operator> <literal type="number" pos:line="12" pos:column="55">0<pos:position pos:line="12" pos:column="56"/></literal></expr>)<pos:position pos:line="12" pos:column="57"/></condition><then pos:line="12" pos:column="57"> <block pos:line="12" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">debugs<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><literal type="number" pos:line="13" pos:column="16">14<pos:position pos:line="13" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="13" pos:column="19">3<pos:position pos:line="13" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="22">HERE<pos:position pos:line="13" pos:column="26"/></name> <operator pos:line="13" pos:column="27">&lt;&lt;<pos:position pos:line="13" pos:column="35"/></operator> <literal type="string" pos:line="13" pos:column="30">"Given Non-IP '"<pos:position pos:line="13" pos:column="46"/></literal> <operator pos:line="13" pos:column="47">&lt;&lt;<pos:position pos:line="13" pos:column="55"/></operator> <name pos:line="13" pos:column="50">s<pos:position pos:line="13" pos:column="51"/></name> <operator pos:line="13" pos:column="52">&lt;&lt;<pos:position pos:line="13" pos:column="60"/></operator> <literal type="string" pos:line="13" pos:column="55">"': "<pos:position pos:line="13" pos:column="60"/></literal> <operator pos:line="13" pos:column="61">&lt;&lt;<pos:position pos:line="13" pos:column="69"/></operator> <call><name pos:line="13" pos:column="64">gai_strerror<pos:position pos:line="13" pos:column="76"/></name><argument_list pos:line="13" pos:column="76">(<argument><expr><name pos:line="13" pos:column="77">err<pos:position pos:line="13" pos:column="80"/></name></expr></argument>)<pos:position pos:line="13" pos:column="81"/></argument_list></call></expr></argument> )<pos:position pos:line="13" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="84"/></expr_stmt>
        <comment type="block" pos:line="14" pos:column="9">/* free the memory getaddrinfo() dynamically allocated. */</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">res<pos:position pos:line="15" pos:column="16"/></name></expr>)<pos:position pos:line="15" pos:column="17"/></condition><then pos:line="15" pos:column="17">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="13">freeaddrinfo<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">res<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt></block></then></if>
        <return pos:line="17" pos:column="9">return <expr><literal type="boolean" pos:line="17" pos:column="16">false<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="20" pos:column="5">struct<pos:position pos:line="20" pos:column="11"/></name> <name pos:line="20" pos:column="12">addrinfo<pos:position pos:line="20" pos:column="20"/></name></name> <modifier pos:line="20" pos:column="21">*<pos:position pos:line="20" pos:column="22"/></modifier></type><name pos:line="20" pos:column="22">resHead<pos:position pos:line="20" pos:column="29"/></name> <init pos:line="20" pos:column="30">= <expr><name pos:line="20" pos:column="32">res<pos:position pos:line="20" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="36"/></decl_stmt> <comment type="line" pos:line="20" pos:column="37">// we need to free the whole list later</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><name><name pos:line="21" pos:column="10">Ip<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">::<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">EnableIpv6<pos:position pos:line="21" pos:column="24"/></name></name></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25"> <block pos:line="21" pos:column="26">{
        <comment type="line" pos:line="22" pos:column="9">// if we are IPv6-disabled, use first-IPv4 instead of first-IP.</comment>
        <decl_stmt><decl><type><name><name pos:line="23" pos:column="9">struct<pos:position pos:line="23" pos:column="15"/></name> <name pos:line="23" pos:column="16">addrinfo<pos:position pos:line="23" pos:column="24"/></name></name> <modifier pos:line="23" pos:column="25">*<pos:position pos:line="23" pos:column="26"/></modifier></type><name pos:line="23" pos:column="26">maybeIpv4<pos:position pos:line="23" pos:column="35"/></name> <init pos:line="23" pos:column="36">= <expr><name pos:line="23" pos:column="38">res<pos:position pos:line="23" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="42"/></decl_stmt>
        <while pos:line="24" pos:column="9">while <condition pos:line="24" pos:column="15">(<expr><name pos:line="24" pos:column="16">maybeIpv4<pos:position pos:line="24" pos:column="25"/></name></expr>)<pos:position pos:line="24" pos:column="26"/></condition> <block pos:line="24" pos:column="27">{
            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name><name pos:line="25" pos:column="17">maybeIpv4<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-&gt;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="28">ai_family<pos:position pos:line="25" pos:column="37"/></name></name> <operator pos:line="25" pos:column="38">==<pos:position pos:line="25" pos:column="40"/></operator> <name pos:line="25" pos:column="41">AF_INET<pos:position pos:line="25" pos:column="48"/></name></expr>)<pos:position pos:line="25" pos:column="49"/></condition><then pos:line="25" pos:column="49">
                <block type="pseudo"><break pos:line="26" pos:column="17">break;<pos:position pos:line="26" pos:column="23"/></break></block></then></if>
            <expr_stmt><expr><name pos:line="27" pos:column="13">maybeIpv4<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name><name pos:line="27" pos:column="25">maybeIpv4<pos:position pos:line="27" pos:column="34"/></name><operator pos:line="27" pos:column="34">-&gt;<pos:position pos:line="27" pos:column="39"/></operator><name pos:line="27" pos:column="36">ai_next<pos:position pos:line="27" pos:column="43"/></name></name></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></while>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">maybeIpv4<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">!=<pos:position pos:line="29" pos:column="25"/></operator> <name pos:line="29" pos:column="26">NULL<pos:position pos:line="29" pos:column="30"/></name></expr>)<pos:position pos:line="29" pos:column="31"/></condition><then pos:line="29" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="13">res<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <name pos:line="30" pos:column="19">maybeIpv4<pos:position pos:line="30" pos:column="28"/></name></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt></block></then></if>
        <comment type="line" pos:line="31" pos:column="9">// else IPv6-only host, let the caller deal with first-IP anyway.</comment>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="34" pos:column="5">/*
     *  NP: =(sockaddr_*) may alter the port. we don't want that.
     *      all we have been given as input was an IPA.
     */</comment>
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">short<pos:position pos:line="38" pos:column="10"/></name></type> <name pos:line="38" pos:column="11">portSaved<pos:position pos:line="38" pos:column="20"/></name> <init pos:line="38" pos:column="21">= <expr><call><name pos:line="38" pos:column="23">port<pos:position pos:line="38" pos:column="27"/></name><argument_list pos:line="38" pos:column="27">()<pos:position pos:line="38" pos:column="29"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">operator<name pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></name></name><argument_list pos:line="39" pos:column="14">(<argument><expr><operator pos:line="39" pos:column="15">*<pos:position pos:line="39" pos:column="16"/></operator><name pos:line="39" pos:column="16">res<pos:position pos:line="39" pos:column="19"/></name></expr></argument>)<pos:position pos:line="39" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">port<pos:position pos:line="40" pos:column="9"/></name><argument_list pos:line="40" pos:column="9">(<argument><expr><name pos:line="40" pos:column="10">portSaved<pos:position pos:line="40" pos:column="19"/></name></expr></argument>)<pos:position pos:line="40" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="42" pos:column="5">/* free the memory getaddrinfo() dynamically allocated. */</comment>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">freeaddrinfo<pos:position pos:line="43" pos:column="17"/></name><argument_list pos:line="43" pos:column="17">(<argument><expr><name pos:line="43" pos:column="18">resHead<pos:position pos:line="43" pos:column="25"/></name></expr></argument>)<pos:position pos:line="43" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt>
    <return pos:line="44" pos:column="5">return <expr><literal type="boolean" pos:line="44" pos:column="12">true<pos:position pos:line="44" pos:column="16"/></literal></expr>;<pos:position pos:line="44" pos:column="17"/></return>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
