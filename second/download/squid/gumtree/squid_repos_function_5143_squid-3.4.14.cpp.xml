<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5143_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ConnOpener<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">cleanFd<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">5<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">4<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="18">HERE<pos:position pos:line="4" pos:column="22"/></name> <operator pos:line="4" pos:column="23">&lt;&lt;<pos:position pos:line="4" pos:column="31"/></operator> <name pos:line="4" pos:column="26">conn_<pos:position pos:line="4" pos:column="31"/></name> <operator pos:line="4" pos:column="32">&lt;&lt;<pos:position pos:line="4" pos:column="40"/></operator> <literal type="string" pos:line="4" pos:column="35">" closing temp FD "<pos:position pos:line="4" pos:column="54"/></literal> <operator pos:line="4" pos:column="55">&lt;&lt;<pos:position pos:line="4" pos:column="63"/></operator> <name pos:line="4" pos:column="58">temporaryFd_<pos:position pos:line="4" pos:column="70"/></name></expr></argument>)<pos:position pos:line="4" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="72"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">Must<pos:position pos:line="6" pos:column="9"/></name><argument_list pos:line="6" pos:column="9">(<argument><expr><name pos:line="6" pos:column="10">temporaryFd_<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">&gt;=<pos:position pos:line="6" pos:column="28"/></operator> <literal type="number" pos:line="6" pos:column="26">0<pos:position pos:line="6" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="29"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">fde<pos:position pos:line="7" pos:column="8"/></name> <modifier pos:line="7" pos:column="9">&amp;<pos:position pos:line="7" pos:column="14"/></modifier></type><name pos:line="7" pos:column="10">f<pos:position pos:line="7" pos:column="11"/></name> <init pos:line="7" pos:column="12">= <expr><name><name pos:line="7" pos:column="14">fd_table<pos:position pos:line="7" pos:column="22"/></name><index pos:line="7" pos:column="22">[<expr><name pos:line="7" pos:column="23">temporaryFd_<pos:position pos:line="7" pos:column="35"/></name></expr>]<pos:position pos:line="7" pos:column="36"/></index></name></expr></init></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>

    <comment type="line" pos:line="9" pos:column="5">// Our write_handler was set without using Comm::Write API, so we cannot</comment>
    <comment type="line" pos:line="10" pos:column="5">// use a cancellable Pointer-free job callback and simply cancel it here.</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">f<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">.<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">write_handler<pos:position pos:line="11" pos:column="24"/></name></name></expr>)<pos:position pos:line="11" pos:column="25"/></condition><then pos:line="11" pos:column="25"> <block pos:line="11" pos:column="26">{

        <comment type="block" pos:line="13" pos:column="9">/* XXX: We are about to remove write_handler, which was responsible
         * for deleting write_data, so we have to delete write_data
         * ourselves. Comm currently calls SetSelect handlers synchronously
         * so if write_handler is set, we know it has not been called yet.
         * ConnOpener converts that sync call into an async one, but only
         * after deleting ptr, so that is not a problem.
         */</comment>

        <expr_stmt><expr><operator pos:line="21" pos:column="9">delete<pos:position pos:line="21" pos:column="15"/></operator> <cast type="static" pos:line="21" pos:column="16">static_cast<argument_list type="generic" pos:line="21" pos:column="27">&lt;<argument><expr><name pos:line="21" pos:column="28">Pointer<pos:position pos:line="21" pos:column="35"/></name><operator pos:line="21" pos:column="35">*<pos:position pos:line="21" pos:column="36"/></operator></expr></argument>&gt;<pos:position pos:line="21" pos:column="40"/></argument_list><argument_list pos:line="21" pos:column="37">(<argument><expr><name><name pos:line="21" pos:column="38">f<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">.<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="40">write_data<pos:position pos:line="21" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></cast></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">f<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">.<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">write_data<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <name pos:line="22" pos:column="24">NULL<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">f<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">.<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">write_handler<pos:position pos:line="23" pos:column="24"/></name></name> <operator pos:line="23" pos:column="25">=<pos:position pos:line="23" pos:column="26"/></operator> <name pos:line="23" pos:column="27">NULL<pos:position pos:line="23" pos:column="31"/></name></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="25" pos:column="5">// Comm::DoSelect does not do this when calling and resetting write_handler</comment>
    <comment type="line" pos:line="26" pos:column="5">// (because it expects more writes to come?). We could mimic that</comment>
    <comment type="line" pos:line="27" pos:column="5">// optimization by resetting Comm "Select" state only when the FD is</comment>
    <comment type="line" pos:line="28" pos:column="5">// actually closed.</comment>
    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">Comm<pos:position pos:line="29" pos:column="9"/></name><operator pos:line="29" pos:column="9">::<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">SetSelect<pos:position pos:line="29" pos:column="20"/></name></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name pos:line="29" pos:column="21">temporaryFd_<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="35">COMM_SELECT_WRITE<pos:position pos:line="29" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="54">NULL<pos:position pos:line="29" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="60">NULL<pos:position pos:line="29" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="66">0<pos:position pos:line="29" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">calls_<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">timeout_<pos:position pos:line="31" pos:column="24"/></name></name> <operator pos:line="31" pos:column="25">!=<pos:position pos:line="31" pos:column="27"/></operator> <name pos:line="31" pos:column="28">NULL<pos:position pos:line="31" pos:column="32"/></name></expr>)<pos:position pos:line="31" pos:column="33"/></condition><then pos:line="31" pos:column="33"> <block pos:line="31" pos:column="34">{
        <expr_stmt><expr><call><name><name pos:line="32" pos:column="9">calls_<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">.<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">timeout_<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">-&gt;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="26">cancel<pos:position pos:line="32" pos:column="32"/></name></name><argument_list pos:line="32" pos:column="32">(<argument><expr><literal type="string" pos:line="32" pos:column="33">"Comm::ConnOpener::cleanFd"<pos:position pos:line="32" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">calls_<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">.<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="16">timeout_<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">=<pos:position pos:line="33" pos:column="26"/></operator> <name pos:line="33" pos:column="27">NULL<pos:position pos:line="33" pos:column="31"/></name></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="35" pos:column="5">// Comm checkTimeouts() and commCloseAllSockets() do not clear .timeout</comment>
    <comment type="line" pos:line="36" pos:column="5">// when calling timeoutHandler (XXX fix them), so we clear unconditionally.</comment>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">f<pos:position pos:line="37" pos:column="6"/></name><operator pos:line="37" pos:column="6">.<pos:position pos:line="37" pos:column="7"/></operator><name pos:line="37" pos:column="7">timeoutHandler<pos:position pos:line="37" pos:column="21"/></name></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">NULL<pos:position pos:line="37" pos:column="28"/></name></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">f<pos:position pos:line="38" pos:column="6"/></name><operator pos:line="38" pos:column="6">.<pos:position pos:line="38" pos:column="7"/></operator><name pos:line="38" pos:column="7">timeout<pos:position pos:line="38" pos:column="14"/></name></name> <operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator> <literal type="number" pos:line="38" pos:column="17">0<pos:position pos:line="38" pos:column="18"/></literal></expr>;<pos:position pos:line="38" pos:column="19"/></expr_stmt>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name><name pos:line="40" pos:column="9">calls_<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">.<pos:position pos:line="40" pos:column="16"/></operator><name pos:line="40" pos:column="16">earlyAbort_<pos:position pos:line="40" pos:column="27"/></name></name> <operator pos:line="40" pos:column="28">!=<pos:position pos:line="40" pos:column="30"/></operator> <name pos:line="40" pos:column="31">NULL<pos:position pos:line="40" pos:column="35"/></name></expr>)<pos:position pos:line="40" pos:column="36"/></condition><then pos:line="40" pos:column="36"> <block pos:line="40" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">comm_remove_close_handler<pos:position pos:line="41" pos:column="34"/></name><argument_list pos:line="41" pos:column="34">(<argument><expr><name pos:line="41" pos:column="35">temporaryFd_<pos:position pos:line="41" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="49">calls_<pos:position pos:line="41" pos:column="55"/></name><operator pos:line="41" pos:column="55">.<pos:position pos:line="41" pos:column="56"/></operator><name pos:line="41" pos:column="56">earlyAbort_<pos:position pos:line="41" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">calls_<pos:position pos:line="42" pos:column="15"/></name><operator pos:line="42" pos:column="15">.<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="16">earlyAbort_<pos:position pos:line="42" pos:column="27"/></name></name> <operator pos:line="42" pos:column="28">=<pos:position pos:line="42" pos:column="29"/></operator> <name pos:line="42" pos:column="30">NULL<pos:position pos:line="42" pos:column="34"/></name></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
