<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6163_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Format<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">Format<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">parse<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">def<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">cur<pos:position pos:line="4" pos:column="20"/></name></decl>, <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="23">eos<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">Token<pos:position pos:line="5" pos:column="10"/></name> <modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">new_lt<pos:position pos:line="5" pos:column="18"/></name></decl>, <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="21">last_lt<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">enum<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">Quoting<pos:position pos:line="6" pos:column="17"/></name></name></type> <name pos:line="6" pos:column="18">quote<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><name pos:line="6" pos:column="26">LOG_QUOTE_NONE<pos:position pos:line="6" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="41"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">46<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">2<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="19">HERE<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">&lt;&lt;<pos:position pos:line="8" pos:column="32"/></operator> <literal type="string" pos:line="8" pos:column="27">"got definition '"<pos:position pos:line="8" pos:column="45"/></literal> <operator pos:line="8" pos:column="46">&lt;&lt;<pos:position pos:line="8" pos:column="54"/></operator> <name pos:line="8" pos:column="49">def<pos:position pos:line="8" pos:column="52"/></name> <operator pos:line="8" pos:column="53">&lt;&lt;<pos:position pos:line="8" pos:column="61"/></operator> <literal type="string" pos:line="8" pos:column="56">"'"<pos:position pos:line="8" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="61"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">format<pos:position pos:line="10" pos:column="15"/></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16"> <block pos:line="10" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">46<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="20">DBG_IMPORTANT<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="35">"WARNING: existing format for '"<pos:position pos:line="11" pos:column="67"/></literal> <operator pos:line="11" pos:column="68">&lt;&lt;<pos:position pos:line="11" pos:column="76"/></operator> <name pos:line="11" pos:column="71">name<pos:position pos:line="11" pos:column="75"/></name> <operator pos:line="11" pos:column="76">&lt;&lt;<pos:position pos:line="11" pos:column="84"/></operator> <literal type="string" pos:line="11" pos:column="79">" "<pos:position pos:line="11" pos:column="82"/></literal> <operator pos:line="11" pos:column="83">&lt;&lt;<pos:position pos:line="11" pos:column="91"/></operator> <name pos:line="11" pos:column="86">def<pos:position pos:line="11" pos:column="89"/></name> <operator pos:line="11" pos:column="90">&lt;&lt;<pos:position pos:line="11" pos:column="98"/></operator> <literal type="string" pos:line="11" pos:column="93">"'"<pos:position pos:line="11" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="98"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><literal type="boolean" pos:line="12" pos:column="16">false<pos:position pos:line="12" pos:column="21"/></literal></expr>;<pos:position pos:line="12" pos:column="22"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* very inefficent parser, but who cares, this needs to be simple */</comment>
    <comment type="block" pos:line="16" pos:column="5">/* First off, let's tokenize, we'll optimize in a second pass.
     * A token can either be a %-prefixed sequence (usually a dynamic
     * token but it can be an escaped sequence), or a string. */</comment>
    <expr_stmt><expr><name pos:line="19" pos:column="5">cur<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <name pos:line="19" pos:column="11">def<pos:position pos:line="19" pos:column="14"/></name></expr>;<pos:position pos:line="19" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">eos<pos:position pos:line="20" pos:column="8"/></name> <operator pos:line="20" pos:column="9">=<pos:position pos:line="20" pos:column="10"/></operator> <name pos:line="20" pos:column="11">def<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">+<pos:position pos:line="20" pos:column="16"/></operator> <call><name pos:line="20" pos:column="17">strlen<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">def<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">format<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">new_lt<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <name pos:line="21" pos:column="23">last_lt<pos:position pos:line="21" pos:column="30"/></name> <operator pos:line="21" pos:column="31">=<pos:position pos:line="21" pos:column="32"/></operator> <operator pos:line="21" pos:column="33">new<pos:position pos:line="21" pos:column="36"/></operator> <name pos:line="21" pos:column="37">Token<pos:position pos:line="21" pos:column="42"/></name></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">cur<pos:position pos:line="22" pos:column="8"/></name> <operator pos:line="22" pos:column="9">+=<pos:position pos:line="22" pos:column="11"/></operator> <call><name><name pos:line="22" pos:column="12">new_lt<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">parse<pos:position pos:line="22" pos:column="25"/></name></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">cur<pos:position pos:line="22" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="31">&amp;<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="32">quote<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt>

    <while pos:line="24" pos:column="5">while <condition pos:line="24" pos:column="11">(<expr><name pos:line="24" pos:column="12">cur<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">&lt;<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="18">eos<pos:position pos:line="24" pos:column="21"/></name></expr>)<pos:position pos:line="24" pos:column="22"/></condition> <block pos:line="24" pos:column="23">{
        <expr_stmt><expr><name pos:line="25" pos:column="9">new_lt<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <operator pos:line="25" pos:column="18">new<pos:position pos:line="25" pos:column="21"/></operator> <name pos:line="25" pos:column="22">Token<pos:position pos:line="25" pos:column="27"/></name></expr>;<pos:position pos:line="25" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="26" pos:column="9">last_lt<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">next<pos:position pos:line="26" pos:column="22"/></name></name> <operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator> <name pos:line="26" pos:column="25">new_lt<pos:position pos:line="26" pos:column="31"/></name></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="27" pos:column="9">last_lt<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">new_lt<pos:position pos:line="27" pos:column="25"/></name></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">cur<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">+=<pos:position pos:line="28" pos:column="15"/></operator> <call><name><name pos:line="28" pos:column="16">new_lt<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">-&gt;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="24">parse<pos:position pos:line="28" pos:column="29"/></name></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">cur<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="35">&amp;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="36">quote<pos:position pos:line="28" pos:column="41"/></name></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></while>

    <return pos:line="31" pos:column="5">return <expr><literal type="boolean" pos:line="31" pos:column="12">true<pos:position pos:line="31" pos:column="16"/></literal></expr>;<pos:position pos:line="31" pos:column="17"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
