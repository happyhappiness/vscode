<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4667_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">FILE<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">UFSSwapDir<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">openTmpSwapLog<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">clean_flag<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">zero_flag<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">swaplog_path<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><call><name pos:line="4" pos:column="26">xstrdup<pos:position pos:line="4" pos:column="33"/></name><argument_list pos:line="4" pos:column="33">(<argument><expr><call><name pos:line="4" pos:column="34">logFile<pos:position pos:line="4" pos:column="41"/></name><argument_list pos:line="4" pos:column="41">(<argument><expr><name pos:line="4" pos:column="42">NULL<pos:position pos:line="4" pos:column="46"/></name></expr></argument>)<pos:position pos:line="4" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">clean_path<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><call><name pos:line="5" pos:column="24">xstrdup<pos:position pos:line="5" pos:column="31"/></name><argument_list pos:line="5" pos:column="31">(<argument><expr><call><name pos:line="5" pos:column="32">logFile<pos:position pos:line="5" pos:column="39"/></name><argument_list pos:line="5" pos:column="39">(<argument><expr><literal type="string" pos:line="5" pos:column="40">".last-clean"<pos:position pos:line="5" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">new_path<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><call><name pos:line="6" pos:column="22">xstrdup<pos:position pos:line="6" pos:column="29"/></name><argument_list pos:line="6" pos:column="29">(<argument><expr><call><name pos:line="6" pos:column="30">logFile<pos:position pos:line="6" pos:column="37"/></name><argument_list pos:line="6" pos:column="37">(<argument><expr><literal type="string" pos:line="6" pos:column="38">".new"<pos:position pos:line="6" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="47"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">stat<pos:position pos:line="8" pos:column="16"/></name></name></type> <name pos:line="8" pos:column="17">log_sb<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">stat<pos:position pos:line="10" pos:column="16"/></name></name></type> <name pos:line="10" pos:column="17">clean_sb<pos:position pos:line="10" pos:column="25"/></name></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">FILE<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">fp<pos:position pos:line="11" pos:column="13"/></name></decl>;<pos:position pos:line="11" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">fd<pos:position pos:line="12" pos:column="11"/></name></decl>;<pos:position pos:line="12" pos:column="12"/></decl_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name><operator pos:line="14" pos:column="9">::<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="11">stat<pos:position pos:line="14" pos:column="15"/></name></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">swaplog_path<pos:position pos:line="14" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="30">&amp;<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="31">log_sb<pos:position pos:line="14" pos:column="37"/></name></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call> <operator pos:line="14" pos:column="39">&lt;<pos:position pos:line="14" pos:column="43"/></operator> <literal type="number" pos:line="14" pos:column="41">0<pos:position pos:line="14" pos:column="42"/></literal></expr>)<pos:position pos:line="14" pos:column="43"/></condition><then pos:line="14" pos:column="43"> <block pos:line="14" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">47<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="20">1<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="23">"Cache Dir #"<pos:position pos:line="15" pos:column="36"/></literal> <operator pos:line="15" pos:column="37">&lt;&lt;<pos:position pos:line="15" pos:column="45"/></operator> <name pos:line="15" pos:column="40">index<pos:position pos:line="15" pos:column="45"/></name> <operator pos:line="15" pos:column="46">&lt;&lt;<pos:position pos:line="15" pos:column="54"/></operator> <literal type="string" pos:line="15" pos:column="49">": No log file"<pos:position pos:line="15" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">safe_free<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">swaplog_path<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">safe_free<pos:position pos:line="17" pos:column="18"/></name><argument_list pos:line="17" pos:column="18">(<argument><expr><name pos:line="17" pos:column="19">clean_path<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">safe_free<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">new_path<pos:position pos:line="18" pos:column="27"/></name></expr></argument>)<pos:position pos:line="18" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="29"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">NULL<pos:position pos:line="19" pos:column="20"/></name></expr>;<pos:position pos:line="19" pos:column="21"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="22" pos:column="5">*<pos:position pos:line="22" pos:column="6"/></operator><name pos:line="22" pos:column="6">zero_flag<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <ternary><condition><expr><name><name pos:line="22" pos:column="18">log_sb<pos:position pos:line="22" pos:column="24"/></name><operator pos:line="22" pos:column="24">.<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">st_size<pos:position pos:line="22" pos:column="32"/></name></name> <operator pos:line="22" pos:column="33">==<pos:position pos:line="22" pos:column="35"/></operator> <literal type="number" pos:line="22" pos:column="36">0<pos:position pos:line="22" pos:column="37"/></literal></expr> ?<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39"> <expr><literal type="number" pos:line="22" pos:column="40">1<pos:position pos:line="22" pos:column="41"/></literal></expr> <pos:position pos:line="22" pos:column="42"/></then><else pos:line="22" pos:column="42">: <expr><literal type="number" pos:line="22" pos:column="44">0<pos:position pos:line="22" pos:column="45"/></literal></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt>
    <comment type="block" pos:line="23" pos:column="5">/* close the existing write-only FD */</comment>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">swaplog_fd<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">&gt;=<pos:position pos:line="25" pos:column="25"/></operator> <literal type="number" pos:line="25" pos:column="23">0<pos:position pos:line="25" pos:column="24"/></literal></expr>)<pos:position pos:line="25" pos:column="25"/></condition><then pos:line="25" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="9">file_close<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">swaplog_fd<pos:position pos:line="26" pos:column="30"/></name></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="28" pos:column="5">/* open a write-only FD for the new log */</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">fd<pos:position pos:line="29" pos:column="7"/></name> <operator pos:line="29" pos:column="8">=<pos:position pos:line="29" pos:column="9"/></operator> <call><name pos:line="29" pos:column="10">file_open<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">new_path<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="30">O_WRONLY<pos:position pos:line="29" pos:column="38"/></name> <operator pos:line="29" pos:column="39">|<pos:position pos:line="29" pos:column="40"/></operator> <name pos:line="29" pos:column="41">O_CREAT<pos:position pos:line="29" pos:column="48"/></name> <operator pos:line="29" pos:column="49">|<pos:position pos:line="29" pos:column="50"/></operator> <name pos:line="29" pos:column="51">O_TRUNC<pos:position pos:line="29" pos:column="58"/></name> <operator pos:line="29" pos:column="59">|<pos:position pos:line="29" pos:column="60"/></operator> <name pos:line="29" pos:column="61">O_BINARY<pos:position pos:line="29" pos:column="69"/></name></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="71"/></expr_stmt>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">fd<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">&lt;<pos:position pos:line="31" pos:column="16"/></operator> <literal type="number" pos:line="31" pos:column="14">0<pos:position pos:line="31" pos:column="15"/></literal></expr>)<pos:position pos:line="31" pos:column="16"/></condition><then pos:line="31" pos:column="16"> <block pos:line="31" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">50<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="20">1<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">""<pos:position pos:line="32" pos:column="25"/></literal> <operator pos:line="32" pos:column="26">&lt;&lt;<pos:position pos:line="32" pos:column="34"/></operator> <name pos:line="32" pos:column="29">new_path<pos:position pos:line="32" pos:column="37"/></name> <operator pos:line="32" pos:column="38">&lt;&lt;<pos:position pos:line="32" pos:column="46"/></operator> <literal type="string" pos:line="32" pos:column="41">": "<pos:position pos:line="32" pos:column="45"/></literal> <operator pos:line="32" pos:column="46">&lt;&lt;<pos:position pos:line="32" pos:column="54"/></operator> <call><name pos:line="32" pos:column="49">xstrerror<pos:position pos:line="32" pos:column="58"/></name><argument_list pos:line="32" pos:column="58">()<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">fatal<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><literal type="string" pos:line="33" pos:column="15">"storeDirOpenTmpSwapLog: Failed to open swap log."<pos:position pos:line="33" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="36" pos:column="5">swaplog_fd<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">fd<pos:position pos:line="36" pos:column="20"/></name></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>

    <block pos:line="38" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="39" pos:column="9">const<pos:position pos:line="39" pos:column="14"/></specifier> <name pos:line="39" pos:column="15">StoreSwapLogHeader<pos:position pos:line="39" pos:column="33"/></name></type> <name pos:line="39" pos:column="34">header<pos:position pos:line="39" pos:column="40"/></name></decl>;<pos:position pos:line="39" pos:column="41"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">MemBuf<pos:position pos:line="40" pos:column="15"/></name></type> <name pos:line="40" pos:column="16">buf<pos:position pos:line="40" pos:column="19"/></name></decl>;<pos:position pos:line="40" pos:column="20"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="41" pos:column="9">buf<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">.<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">init<pos:position pos:line="41" pos:column="17"/></name></name><argument_list pos:line="41" pos:column="17">(<argument><expr><name><name pos:line="41" pos:column="18">header<pos:position pos:line="41" pos:column="24"/></name><operator pos:line="41" pos:column="24">.<pos:position pos:line="41" pos:column="25"/></operator><name pos:line="41" pos:column="25">record_size<pos:position pos:line="41" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="38">header<pos:position pos:line="41" pos:column="44"/></name><operator pos:line="41" pos:column="44">.<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="45">record_size<pos:position pos:line="41" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="42" pos:column="9">buf<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">.<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="13">append<pos:position pos:line="42" pos:column="19"/></name></name><argument_list pos:line="42" pos:column="19">(<argument><expr><cast type="reinterpret" pos:line="42" pos:column="20">reinterpret_cast<argument_list type="generic" pos:line="42" pos:column="36">&lt;<argument><expr><specifier pos:line="42" pos:column="37">const<pos:position pos:line="42" pos:column="42"/></specifier> <name pos:line="42" pos:column="43">char<pos:position pos:line="42" pos:column="47"/></name><operator pos:line="42" pos:column="47">*<pos:position pos:line="42" pos:column="48"/></operator></expr></argument>&gt;<pos:position pos:line="42" pos:column="52"/></argument_list><argument_list pos:line="42" pos:column="49">(<argument><expr><operator pos:line="42" pos:column="50">&amp;<pos:position pos:line="42" pos:column="55"/></operator><name pos:line="42" pos:column="51">header<pos:position pos:line="42" pos:column="57"/></name></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></cast></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="60">sizeof<argument_list pos:line="42" pos:column="66">(<argument><expr><name pos:line="42" pos:column="67">header<pos:position pos:line="42" pos:column="73"/></name></expr></argument>)<pos:position pos:line="42" pos:column="74"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="42" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="76"/></expr_stmt>
        <comment type="line" pos:line="43" pos:column="9">// Pad to keep in sync with UFSSwapDir::writeCleanStart().</comment>
        <comment type="line" pos:line="44" pos:column="9">// TODO: When MemBuf::spaceSize() is fixed not to subtract one,</comment>
        <comment type="line" pos:line="45" pos:column="9">// memset() space() with zeroes and use spaceSize() below.</comment>
        <expr_stmt><expr><call><name><name pos:line="46" pos:column="9">buf<pos:position pos:line="46" pos:column="12"/></name><operator pos:line="46" pos:column="12">.<pos:position pos:line="46" pos:column="13"/></operator><name pos:line="46" pos:column="13">appended<pos:position pos:line="46" pos:column="21"/></name></name><argument_list pos:line="46" pos:column="21">(<argument><expr><cast type="static" pos:line="46" pos:column="22">static_cast<argument_list type="generic" pos:line="46" pos:column="33">&lt;<argument><expr><name pos:line="46" pos:column="34">size_t<pos:position pos:line="46" pos:column="40"/></name></expr></argument>&gt;<pos:position pos:line="46" pos:column="44"/></argument_list><argument_list pos:line="46" pos:column="41">(<argument><expr><name><name pos:line="46" pos:column="42">header<pos:position pos:line="46" pos:column="48"/></name><operator pos:line="46" pos:column="48">.<pos:position pos:line="46" pos:column="49"/></operator><name pos:line="46" pos:column="49">record_size<pos:position pos:line="46" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="61"/></argument_list></cast> <operator pos:line="46" pos:column="62">-<pos:position pos:line="46" pos:column="63"/></operator> <sizeof pos:line="46" pos:column="64">sizeof<argument_list pos:line="46" pos:column="70">(<argument><expr><name pos:line="46" pos:column="71">header<pos:position pos:line="46" pos:column="77"/></name></expr></argument>)<pos:position pos:line="46" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">file_write<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">swaplog_fd<pos:position pos:line="47" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="32">-<pos:position pos:line="47" pos:column="33"/></operator><literal type="number" pos:line="47" pos:column="33">1<pos:position pos:line="47" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="36">buf<pos:position pos:line="47" pos:column="39"/></name><operator pos:line="47" pos:column="39">.<pos:position pos:line="47" pos:column="40"/></operator><name pos:line="47" pos:column="40">content<pos:position pos:line="47" pos:column="47"/></name></name><argument_list pos:line="47" pos:column="47">()<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="51">buf<pos:position pos:line="47" pos:column="54"/></name><operator pos:line="47" pos:column="54">.<pos:position pos:line="47" pos:column="55"/></operator><name pos:line="47" pos:column="55">contentSize<pos:position pos:line="47" pos:column="66"/></name></name><argument_list pos:line="47" pos:column="66">()<pos:position pos:line="47" pos:column="68"/></argument_list></call></expr></argument>,
                   <argument><expr><name pos:line="48" pos:column="20">NULL<pos:position pos:line="48" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="26">NULL<pos:position pos:line="48" pos:column="30"/></name></expr></argument>, <argument><expr><call><name><name pos:line="48" pos:column="32">buf<pos:position pos:line="48" pos:column="35"/></name><operator pos:line="48" pos:column="35">.<pos:position pos:line="48" pos:column="36"/></operator><name pos:line="48" pos:column="36">freeFunc<pos:position pos:line="48" pos:column="44"/></name></name><argument_list pos:line="48" pos:column="44">()<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block>

    <comment type="block" pos:line="51" pos:column="5">/* open a read-only stream of the old log */</comment>
    <expr_stmt><expr><name pos:line="52" pos:column="5">fp<pos:position pos:line="52" pos:column="7"/></name> <operator pos:line="52" pos:column="8">=<pos:position pos:line="52" pos:column="9"/></operator> <call><name pos:line="52" pos:column="10">fopen<pos:position pos:line="52" pos:column="15"/></name><argument_list pos:line="52" pos:column="15">(<argument><expr><name pos:line="52" pos:column="16">swaplog_path<pos:position pos:line="52" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="30">"rb"<pos:position pos:line="52" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt>

    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">fp<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">==<pos:position pos:line="54" pos:column="14"/></operator> <name pos:line="54" pos:column="15">NULL<pos:position pos:line="54" pos:column="19"/></name></expr>)<pos:position pos:line="54" pos:column="20"/></condition><then pos:line="54" pos:column="20"> <block pos:line="54" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">debugs<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><literal type="number" pos:line="55" pos:column="16">50<pos:position pos:line="55" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="20">0<pos:position pos:line="55" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="23">""<pos:position pos:line="55" pos:column="25"/></literal> <operator pos:line="55" pos:column="26">&lt;&lt;<pos:position pos:line="55" pos:column="34"/></operator> <name pos:line="55" pos:column="29">swaplog_path<pos:position pos:line="55" pos:column="41"/></name> <operator pos:line="55" pos:column="42">&lt;&lt;<pos:position pos:line="55" pos:column="50"/></operator> <literal type="string" pos:line="55" pos:column="45">": "<pos:position pos:line="55" pos:column="49"/></literal> <operator pos:line="55" pos:column="50">&lt;&lt;<pos:position pos:line="55" pos:column="58"/></operator> <call><name pos:line="55" pos:column="53">xstrerror<pos:position pos:line="55" pos:column="62"/></name><argument_list pos:line="55" pos:column="62">()<pos:position pos:line="55" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">fatal<pos:position pos:line="56" pos:column="14"/></name><argument_list pos:line="56" pos:column="14">(<argument><expr><literal type="string" pos:line="56" pos:column="15">"Failed to open swap log for reading"<pos:position pos:line="56" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="59" pos:column="5">memset<pos:position pos:line="59" pos:column="11"/></name><argument_list pos:line="59" pos:column="11">(<argument><expr><operator pos:line="59" pos:column="12">&amp;<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="13">clean_sb<pos:position pos:line="59" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="59" pos:column="23">'\0'<pos:position pos:line="59" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="59" pos:column="29">sizeof<argument_list pos:line="59" pos:column="35">(<argument><expr pos:line="59" pos:column="36">struct <name pos:line="59" pos:column="43">stat<pos:position pos:line="59" pos:column="47"/></name></expr></argument>)<pos:position pos:line="59" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="50"/></expr_stmt>

    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><call><name><operator pos:line="61" pos:column="9">::<pos:position pos:line="61" pos:column="11"/></operator><name pos:line="61" pos:column="11">stat<pos:position pos:line="61" pos:column="15"/></name></name><argument_list pos:line="61" pos:column="15">(<argument><expr><name pos:line="61" pos:column="16">clean_path<pos:position pos:line="61" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="28">&amp;<pos:position pos:line="61" pos:column="33"/></operator><name pos:line="61" pos:column="29">clean_sb<pos:position pos:line="61" pos:column="37"/></name></expr></argument>)<pos:position pos:line="61" pos:column="38"/></argument_list></call> <operator pos:line="61" pos:column="39">&lt;<pos:position pos:line="61" pos:column="43"/></operator> <literal type="number" pos:line="61" pos:column="41">0<pos:position pos:line="61" pos:column="42"/></literal></expr>)<pos:position pos:line="61" pos:column="43"/></condition><then pos:line="61" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="62" pos:column="9">*<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">clean_flag<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">=<pos:position pos:line="62" pos:column="22"/></operator> <literal type="number" pos:line="62" pos:column="23">0<pos:position pos:line="62" pos:column="24"/></literal></expr>;<pos:position pos:line="62" pos:column="25"/></expr_stmt></block></then>
    <elseif pos:line="63" pos:column="5">else <if pos:line="63" pos:column="10">if <condition pos:line="63" pos:column="13">(<expr><name><name pos:line="63" pos:column="14">clean_sb<pos:position pos:line="63" pos:column="22"/></name><operator pos:line="63" pos:column="22">.<pos:position pos:line="63" pos:column="23"/></operator><name pos:line="63" pos:column="23">st_mtime<pos:position pos:line="63" pos:column="31"/></name></name> <operator pos:line="63" pos:column="32">&lt;<pos:position pos:line="63" pos:column="36"/></operator> <name><name pos:line="63" pos:column="34">log_sb<pos:position pos:line="63" pos:column="40"/></name><operator pos:line="63" pos:column="40">.<pos:position pos:line="63" pos:column="41"/></operator><name pos:line="63" pos:column="41">st_mtime<pos:position pos:line="63" pos:column="49"/></name></name></expr>)<pos:position pos:line="63" pos:column="50"/></condition><then pos:line="63" pos:column="50">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="64" pos:column="9">*<pos:position pos:line="64" pos:column="10"/></operator><name pos:line="64" pos:column="10">clean_flag<pos:position pos:line="64" pos:column="20"/></name> <operator pos:line="64" pos:column="21">=<pos:position pos:line="64" pos:column="22"/></operator> <literal type="number" pos:line="64" pos:column="23">0<pos:position pos:line="64" pos:column="24"/></literal></expr>;<pos:position pos:line="64" pos:column="25"/></expr_stmt></block></then></if></elseif>
    <else pos:line="65" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><operator pos:line="66" pos:column="9">*<pos:position pos:line="66" pos:column="10"/></operator><name pos:line="66" pos:column="10">clean_flag<pos:position pos:line="66" pos:column="20"/></name> <operator pos:line="66" pos:column="21">=<pos:position pos:line="66" pos:column="22"/></operator> <literal type="number" pos:line="66" pos:column="23">1<pos:position pos:line="66" pos:column="24"/></literal></expr>;<pos:position pos:line="66" pos:column="25"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">safeunlink<pos:position pos:line="68" pos:column="15"/></name><argument_list pos:line="68" pos:column="15">(<argument><expr><name pos:line="68" pos:column="16">clean_path<pos:position pos:line="68" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="28">1<pos:position pos:line="68" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="70" pos:column="5">safe_free<pos:position pos:line="70" pos:column="14"/></name><argument_list pos:line="70" pos:column="14">(<argument><expr><name pos:line="70" pos:column="15">swaplog_path<pos:position pos:line="70" pos:column="27"/></name></expr></argument>)<pos:position pos:line="70" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="72" pos:column="5">safe_free<pos:position pos:line="72" pos:column="14"/></name><argument_list pos:line="72" pos:column="14">(<argument><expr><name pos:line="72" pos:column="15">clean_path<pos:position pos:line="72" pos:column="25"/></name></expr></argument>)<pos:position pos:line="72" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="74" pos:column="5">safe_free<pos:position pos:line="74" pos:column="14"/></name><argument_list pos:line="74" pos:column="14">(<argument><expr><name pos:line="74" pos:column="15">new_path<pos:position pos:line="74" pos:column="23"/></name></expr></argument>)<pos:position pos:line="74" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="25"/></expr_stmt>

    <return pos:line="76" pos:column="5">return <expr><name pos:line="76" pos:column="12">fp<pos:position pos:line="76" pos:column="14"/></name></expr>;<pos:position pos:line="76" pos:column="15"/></return>
}<pos:position pos:line="77" pos:column="2"/></block></function></unit>
