<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3770_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ssl<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">appendCertToMemory<pos:position pos:line="1" pos:column="29"/></name></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">Security<pos:position pos:line="1" pos:column="38"/></name><operator pos:line="1" pos:column="38">::<pos:position pos:line="1" pos:column="40"/></operator><name pos:line="1" pos:column="40">CertPointer<pos:position pos:line="1" pos:column="51"/></name></name> <specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <modifier pos:line="1" pos:column="58">&amp;<pos:position pos:line="1" pos:column="63"/></modifier></type> <name pos:line="1" pos:column="60">cert<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="66">std<pos:position pos:line="1" pos:column="69"/></name><operator pos:line="1" pos:column="69">::<pos:position pos:line="1" pos:column="71"/></operator><name pos:line="1" pos:column="71">string<pos:position pos:line="1" pos:column="77"/></name></name> <modifier pos:line="1" pos:column="78">&amp;<pos:position pos:line="1" pos:column="83"/></modifier></type> <name pos:line="1" pos:column="80">bufferToWrite<pos:position pos:line="1" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="94"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><operator pos:line="3" pos:column="9">!<pos:position pos:line="3" pos:column="10"/></operator><name pos:line="3" pos:column="10">cert<pos:position pos:line="3" pos:column="14"/></name></expr>)<pos:position pos:line="3" pos:column="15"/></condition><then pos:line="3" pos:column="15">
        <block type="pseudo"><return pos:line="4" pos:column="9">return <expr><literal type="boolean" pos:line="4" pos:column="16">false<pos:position pos:line="4" pos:column="21"/></literal></expr>;<pos:position pos:line="4" pos:column="22"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">BIO_Pointer<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">bio<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><call><name pos:line="6" pos:column="21">BIO_new<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><call><name pos:line="6" pos:column="29">BIO_s_mem<pos:position pos:line="6" pos:column="38"/></name><argument_list pos:line="6" pos:column="38">()<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="42"/></argument_list></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">bio<pos:position pos:line="7" pos:column="13"/></name></expr>)<pos:position pos:line="7" pos:column="14"/></condition><then pos:line="7" pos:column="14">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><call><name pos:line="10" pos:column="10">PEM_write_bio_X509<pos:position pos:line="10" pos:column="28"/></name> <argument_list pos:line="10" pos:column="29">(<argument><expr><call><name><name pos:line="10" pos:column="30">bio<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">.<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="34">get<pos:position pos:line="10" pos:column="37"/></name></name><argument_list pos:line="10" pos:column="37">()<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="10" pos:column="41">cert<pos:position pos:line="10" pos:column="45"/></name><operator pos:line="10" pos:column="45">.<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="46">get<pos:position pos:line="10" pos:column="49"/></name></name><argument_list pos:line="10" pos:column="49">()<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="53"/></condition><then pos:line="10" pos:column="53">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">false<pos:position pos:line="11" pos:column="21"/></literal></expr>;<pos:position pos:line="11" pos:column="22"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">ptr<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><name pos:line="13" pos:column="17">NULL<pos:position pos:line="13" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">long<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">len<pos:position pos:line="14" pos:column="13"/></name> <init pos:line="14" pos:column="14">= <expr><call><name pos:line="14" pos:column="16">BIO_get_mem_data<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><call><name><name pos:line="14" pos:column="33">bio<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">.<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">get<pos:position pos:line="14" pos:column="40"/></name></name><argument_list pos:line="14" pos:column="40">()<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="14" pos:column="44">&amp;<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="45">ptr<pos:position pos:line="14" pos:column="48"/></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="50"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">ptr<pos:position pos:line="15" pos:column="13"/></name></expr>)<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14">
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><literal type="boolean" pos:line="16" pos:column="16">false<pos:position pos:line="16" pos:column="21"/></literal></expr>;<pos:position pos:line="16" pos:column="22"/></return></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><call><name><name pos:line="18" pos:column="10">bufferToWrite<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">.<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">empty<pos:position pos:line="18" pos:column="29"/></name></name><argument_list pos:line="18" pos:column="29">()<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="19" pos:column="9">bufferToWrite<pos:position pos:line="19" pos:column="22"/></name><operator pos:line="19" pos:column="22">.<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">append<pos:position pos:line="19" pos:column="29"/></name></name><argument_list pos:line="19" pos:column="29">(<argument><expr><literal type="string" pos:line="19" pos:column="30">" "<pos:position pos:line="19" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt></block></then></if> <comment type="line" pos:line="19" pos:column="36">// add a space...</comment>

    <expr_stmt><expr><call><name><name pos:line="21" pos:column="5">bufferToWrite<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">.<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="19">append<pos:position pos:line="21" pos:column="25"/></name></name><argument_list pos:line="21" pos:column="25">(<argument><expr><name pos:line="21" pos:column="26">ptr<pos:position pos:line="21" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="31">len<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="36"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><literal type="boolean" pos:line="22" pos:column="12">true<pos:position pos:line="22" pos:column="16"/></literal></expr>;<pos:position pos:line="22" pos:column="17"/></return>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
