<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7260_squid-3.5.27.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">squid_radix_node<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type>
<name pos:line="2" pos:column="1">squid_rn_lookup<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">void<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">v_arg<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="30">void<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">m_arg<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="43">struct<pos:position pos:line="2" pos:column="49"/></name> <name pos:line="2" pos:column="50">squid_radix_node_head<pos:position pos:line="2" pos:column="71"/></name></name> <modifier pos:line="2" pos:column="72">*<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="73">head<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list> <block pos:line="2" pos:column="79">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">register<pos:position pos:line="3" pos:column="13"/></specifier> <name><name pos:line="3" pos:column="14">struct<pos:position pos:line="3" pos:column="20"/></name> <name pos:line="3" pos:column="21">squid_radix_node<pos:position pos:line="3" pos:column="37"/></name></name> <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type><name pos:line="3" pos:column="39">x<pos:position pos:line="3" pos:column="40"/></name></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">caddr_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">netmask<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><literal type="number" pos:line="4" pos:column="23">0<pos:position pos:line="4" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">m_arg<pos:position pos:line="6" pos:column="14"/></name></expr>)<pos:position pos:line="6" pos:column="15"/></condition><then pos:line="6" pos:column="15"> <block pos:line="6" pos:column="16">{
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">(<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">x<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <call><name pos:line="7" pos:column="18">squid_rn_addmask<pos:position pos:line="7" pos:column="34"/></name><argument_list pos:line="7" pos:column="34">(<argument><expr><name pos:line="7" pos:column="35">m_arg<pos:position pos:line="7" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="42">1<pos:position pos:line="7" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="45">head<pos:position pos:line="7" pos:column="49"/></name><operator pos:line="7" pos:column="49">-&gt;<pos:position pos:line="7" pos:column="54"/></operator><name pos:line="7" pos:column="51">rnh_treetop<pos:position pos:line="7" pos:column="62"/></name><operator pos:line="7" pos:column="62">-&gt;<pos:position pos:line="7" pos:column="67"/></operator><name pos:line="7" pos:column="64">rn_off<pos:position pos:line="7" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="71"/></argument_list></call><operator pos:line="7" pos:column="71">)<pos:position pos:line="7" pos:column="72"/></operator> <operator pos:line="7" pos:column="73">==<pos:position pos:line="7" pos:column="75"/></operator> <literal type="number" pos:line="7" pos:column="76">0<pos:position pos:line="7" pos:column="77"/></literal></expr>)<pos:position pos:line="7" pos:column="78"/></condition><then pos:line="7" pos:column="78">
            <block type="pseudo"><return pos:line="8" pos:column="13">return <expr><operator pos:line="8" pos:column="20">(<pos:position pos:line="8" pos:column="21"/></operator><literal type="number" pos:line="8" pos:column="21">0<pos:position pos:line="8" pos:column="22"/></literal><operator pos:line="8" pos:column="22">)<pos:position pos:line="8" pos:column="23"/></operator></expr>;<pos:position pos:line="8" pos:column="24"/></return></block></then></if>
        <expr_stmt><expr><name pos:line="9" pos:column="9">netmask<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">=<pos:position pos:line="9" pos:column="18"/></operator> <name><name pos:line="9" pos:column="19">x<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">rn_key<pos:position pos:line="9" pos:column="28"/></name></name></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="11" pos:column="5">x<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <call><name pos:line="11" pos:column="9">squid_rn_match<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">v_arg<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">head<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">x<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">&amp;&amp;<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="14">netmask<pos:position pos:line="12" pos:column="21"/></name></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22"> <block pos:line="12" pos:column="23">{
        <while pos:line="13" pos:column="9">while <condition pos:line="13" pos:column="15">(<expr><name pos:line="13" pos:column="16">x<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">&amp;&amp;<pos:position pos:line="13" pos:column="28"/></operator> <name><name pos:line="13" pos:column="21">x<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">-&gt;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="24">rn_mask<pos:position pos:line="13" pos:column="31"/></name></name> <operator pos:line="13" pos:column="32">!=<pos:position pos:line="13" pos:column="34"/></operator> <name pos:line="13" pos:column="35">netmask<pos:position pos:line="13" pos:column="42"/></name></expr>)<pos:position pos:line="13" pos:column="43"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="14" pos:column="13">x<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <name><name pos:line="14" pos:column="17">x<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">rn_dupedkey<pos:position pos:line="14" pos:column="31"/></name></name></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt></block></while>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">x<pos:position pos:line="16" pos:column="13"/></name></expr>;<pos:position pos:line="16" pos:column="14"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
