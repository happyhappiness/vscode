<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4079_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">acl_ip_data<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">toStr<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">buf<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">len<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list> <specifier pos:line="2" pos:column="40">const<pos:position pos:line="2" pos:column="45"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">b1<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name pos:line="4" pos:column="16">buf<pos:position pos:line="4" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">b2<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><name pos:line="5" pos:column="16">NULL<pos:position pos:line="5" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">b3<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">rlen<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">addr1<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">.<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">toStr<pos:position pos:line="9" pos:column="16"/></name></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">b1<pos:position pos:line="9" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="21">len<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">-<pos:position pos:line="9" pos:column="26"/></operator> <name pos:line="9" pos:column="27">rlen<pos:position pos:line="9" pos:column="31"/></name></expr></argument> )<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">rlen<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">strlen<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">buf<pos:position pos:line="10" pos:column="22"/></name></expr></argument>)<pos:position pos:line="10" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">b2<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <name pos:line="11" pos:column="10">buf<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">+<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">rlen<pos:position pos:line="11" pos:column="20"/></name></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name><name pos:line="13" pos:column="10">addr2<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">isAnyAddr<pos:position pos:line="13" pos:column="25"/></name></name><argument_list pos:line="13" pos:column="25">()<pos:position pos:line="13" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="28"/></condition><then pos:line="13" pos:column="28"> <block pos:line="13" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">b2<pos:position pos:line="14" pos:column="11"/></name><index pos:line="14" pos:column="11">[<expr><literal type="number" pos:line="14" pos:column="12">0<pos:position pos:line="14" pos:column="13"/></literal></expr>]<pos:position pos:line="14" pos:column="14"/></index></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <literal type="char" pos:line="14" pos:column="17">'-'<pos:position pos:line="14" pos:column="20"/></literal></expr>;<pos:position pos:line="14" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="15" pos:column="9">++<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">rlen<pos:position pos:line="15" pos:column="15"/></name></expr>;<pos:position pos:line="15" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="16" pos:column="9">addr2<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">.<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">toStr<pos:position pos:line="16" pos:column="20"/></name></name><argument_list pos:line="16" pos:column="20">(<argument><expr><operator pos:line="16" pos:column="21">&amp;<pos:position pos:line="16" pos:column="26"/></operator><operator pos:line="16" pos:column="22">(<pos:position pos:line="16" pos:column="23"/></operator><name><name pos:line="16" pos:column="23">b2<pos:position pos:line="16" pos:column="25"/></name><index pos:line="16" pos:column="25">[<expr><literal type="number" pos:line="16" pos:column="26">1<pos:position pos:line="16" pos:column="27"/></literal></expr>]<pos:position pos:line="16" pos:column="28"/></index></name><operator pos:line="16" pos:column="28">)<pos:position pos:line="16" pos:column="29"/></operator></expr></argument>, <argument><expr><name pos:line="16" pos:column="31">len<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">-<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="37">rlen<pos:position pos:line="16" pos:column="41"/></name></expr></argument> )<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="17" pos:column="9">rlen<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <call><name pos:line="17" pos:column="16">strlen<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">buf<pos:position pos:line="17" pos:column="26"/></name></expr></argument>)<pos:position pos:line="17" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then> <else pos:line="18" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="19" pos:column="9">b2<pos:position pos:line="19" pos:column="11"/></name><index pos:line="19" pos:column="11">[<expr><literal type="number" pos:line="19" pos:column="12">0<pos:position pos:line="19" pos:column="13"/></literal></expr>]<pos:position pos:line="19" pos:column="14"/></index></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <literal type="char" pos:line="19" pos:column="17">'\0'<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="21" pos:column="5">b3<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <name pos:line="21" pos:column="10">buf<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">+<pos:position pos:line="21" pos:column="15"/></operator> <name pos:line="21" pos:column="16">rlen<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><call><name><name pos:line="23" pos:column="10">mask<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">.<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">isNoAddr<pos:position pos:line="23" pos:column="23"/></name></name><argument_list pos:line="23" pos:column="23">()<pos:position pos:line="23" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="26"/></condition><then pos:line="23" pos:column="26"> <block pos:line="23" pos:column="27">{
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">b3<pos:position pos:line="24" pos:column="11"/></name><index pos:line="24" pos:column="11">[<expr><literal type="number" pos:line="24" pos:column="12">0<pos:position pos:line="24" pos:column="13"/></literal></expr>]<pos:position pos:line="24" pos:column="14"/></index></name> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <literal type="char" pos:line="24" pos:column="17">'/'<pos:position pos:line="24" pos:column="20"/></literal></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="25" pos:column="9">++<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="11">rlen<pos:position pos:line="25" pos:column="15"/></name></expr>;<pos:position pos:line="25" pos:column="16"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">int<pos:position pos:line="26" pos:column="12"/></name></type> <name pos:line="26" pos:column="13">cidr<pos:position pos:line="26" pos:column="17"/></name> <init pos:line="26" pos:column="18">=  <expr><call><name><name pos:line="26" pos:column="21">mask<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">.<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="26">cidr<pos:position pos:line="26" pos:column="30"/></name></name><argument_list pos:line="26" pos:column="30">()<pos:position pos:line="26" pos:column="32"/></argument_list></call> <operator pos:line="26" pos:column="33">-<pos:position pos:line="26" pos:column="34"/></operator> <operator pos:line="26" pos:column="35">(<pos:position pos:line="26" pos:column="36"/></operator><ternary><condition><expr><call><name><name pos:line="26" pos:column="36">addr1<pos:position pos:line="26" pos:column="41"/></name><operator pos:line="26" pos:column="41">.<pos:position pos:line="26" pos:column="42"/></operator><name pos:line="26" pos:column="42">isIPv4<pos:position pos:line="26" pos:column="48"/></name></name><argument_list pos:line="26" pos:column="48">()<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>?<pos:position pos:line="26" pos:column="51"/></condition><then><expr><literal type="number" pos:line="26" pos:column="51">96<pos:position pos:line="26" pos:column="53"/></literal></expr></then><else pos:line="26" pos:column="53">:<expr><literal type="number" pos:line="26" pos:column="54">0<pos:position pos:line="26" pos:column="55"/></literal></expr></else></ternary><operator pos:line="26" pos:column="55">)<pos:position pos:line="26" pos:column="56"/></operator></expr></init></decl>;<pos:position pos:line="26" pos:column="57"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">snprintf<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><operator pos:line="27" pos:column="18">&amp;<pos:position pos:line="27" pos:column="23"/></operator><operator pos:line="27" pos:column="19">(<pos:position pos:line="27" pos:column="20"/></operator><name><name pos:line="27" pos:column="20">b3<pos:position pos:line="27" pos:column="22"/></name><index pos:line="27" pos:column="22">[<expr><literal type="number" pos:line="27" pos:column="23">1<pos:position pos:line="27" pos:column="24"/></literal></expr>]<pos:position pos:line="27" pos:column="25"/></index></name><operator pos:line="27" pos:column="25">)<pos:position pos:line="27" pos:column="26"/></operator></expr></argument>, <argument><expr><operator pos:line="27" pos:column="28">(<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="29">len<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="33">rlen<pos:position pos:line="27" pos:column="37"/></name><operator pos:line="27" pos:column="37">)<pos:position pos:line="27" pos:column="38"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="40">"%u"<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>, <argument><expr><call pos:line="27" pos:column="46">(<name pos:line="27" pos:column="47">unsigned<pos:position pos:line="27" pos:column="55"/></name> <name pos:line="27" pos:column="56">int<pos:position pos:line="27" pos:column="59"/></name>)<argument_list pos:line="27" pos:column="60">(<argument><expr><ternary><condition><expr><name pos:line="27" pos:column="61">cidr<pos:position pos:line="27" pos:column="65"/></name><operator pos:line="27" pos:column="65">&lt;<pos:position pos:line="27" pos:column="69"/></operator><literal type="number" pos:line="27" pos:column="66">0<pos:position pos:line="27" pos:column="67"/></literal></expr>?<pos:position pos:line="27" pos:column="68"/></condition><then><expr><literal type="number" pos:line="27" pos:column="68">0<pos:position pos:line="27" pos:column="69"/></literal></expr></then><else pos:line="27" pos:column="69">:<expr><name pos:line="27" pos:column="70">cidr<pos:position pos:line="27" pos:column="74"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="27" pos:column="75"/></argument_list></call></expr></argument> )<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then> <else pos:line="28" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="9">b3<pos:position pos:line="29" pos:column="11"/></name><index pos:line="29" pos:column="11">[<expr><literal type="number" pos:line="29" pos:column="12">0<pos:position pos:line="29" pos:column="13"/></literal></expr>]<pos:position pos:line="29" pos:column="14"/></index></name> <operator pos:line="29" pos:column="15">=<pos:position pos:line="29" pos:column="16"/></operator> <literal type="char" pos:line="29" pos:column="17">'\0'<pos:position pos:line="29" pos:column="21"/></literal></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt></block></else></if>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
