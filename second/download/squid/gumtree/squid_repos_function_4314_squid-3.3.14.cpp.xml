<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4314_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">SSL_CTX<pos:position pos:line="1" pos:column="8"/></name> <modifier pos:line="1" pos:column="9">*<pos:position pos:line="1" pos:column="10"/></modifier></type> <name><name pos:line="1" pos:column="11">Ssl<pos:position pos:line="1" pos:column="14"/></name><operator pos:line="1" pos:column="14">::<pos:position pos:line="1" pos:column="16"/></operator><name pos:line="1" pos:column="16">LocalContextStorage<pos:position pos:line="1" pos:column="35"/></name><operator pos:line="1" pos:column="35">::<pos:position pos:line="1" pos:column="37"/></operator><name pos:line="1" pos:column="37">find<pos:position pos:line="1" pos:column="41"/></name></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">char<pos:position pos:line="1" pos:column="46"/></name> <specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type> <name pos:line="1" pos:column="55">host_name<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">MapIterator<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">i<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><call><name><name pos:line="3" pos:column="21">storage<pos:position pos:line="3" pos:column="28"/></name><operator pos:line="3" pos:column="28">.<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="29">find<pos:position pos:line="3" pos:column="33"/></name></name><argument_list pos:line="3" pos:column="33">(<argument><expr><name pos:line="3" pos:column="34">host_name<pos:position pos:line="3" pos:column="43"/></name></expr></argument>)<pos:position pos:line="3" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="45"/></decl_stmt>
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name> <operator pos:line="4" pos:column="11">==<pos:position pos:line="4" pos:column="13"/></operator> <call><name><name pos:line="4" pos:column="14">storage<pos:position pos:line="4" pos:column="21"/></name><operator pos:line="4" pos:column="21">.<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">end<pos:position pos:line="4" pos:column="25"/></name></name><argument_list pos:line="4" pos:column="25">()<pos:position pos:line="4" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <block pos:line="4" pos:column="29">{
        <return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">NULL<pos:position pos:line="5" pos:column="20"/></name></expr>;<pos:position pos:line="5" pos:column="21"/></return>
    }<pos:position pos:line="6" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">lru_queue<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">.<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">push_front<pos:position pos:line="7" pos:column="25"/></name></name><argument_list pos:line="7" pos:column="25">(<argument><expr><operator pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></operator><operator pos:line="7" pos:column="27">(<pos:position pos:line="7" pos:column="28"/></operator><name><name pos:line="7" pos:column="28">i<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">-&gt;<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="31">second<pos:position pos:line="7" pos:column="37"/></name></name><operator pos:line="7" pos:column="37">)<pos:position pos:line="7" pos:column="38"/></operator></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">lru_queue<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">erase<pos:position pos:line="8" pos:column="20"/></name></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name><name pos:line="8" pos:column="21">i<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">-&gt;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="24">second<pos:position pos:line="8" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">i<pos:position pos:line="9" pos:column="6"/></name><operator pos:line="9" pos:column="6">-&gt;<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="8">second<pos:position pos:line="9" pos:column="14"/></name></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <call><name><name pos:line="9" pos:column="17">lru_queue<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">.<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="27">begin<pos:position pos:line="9" pos:column="32"/></name></name><argument_list pos:line="9" pos:column="32">()<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="35"/></expr_stmt>
    <return pos:line="10" pos:column="5">return <expr><operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><operator pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></operator><call><name><name pos:line="10" pos:column="14">lru_queue<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">.<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="24">begin<pos:position pos:line="10" pos:column="29"/></name></name><argument_list pos:line="10" pos:column="29">()<pos:position pos:line="10" pos:column="31"/></argument_list></call><operator pos:line="10" pos:column="31">)<pos:position pos:line="10" pos:column="32"/></operator><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">ssl_ctx<pos:position pos:line="10" pos:column="41"/></name></expr>;<pos:position pos:line="10" pos:column="42"/></return>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
