<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1505.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemStoreRr<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">finalizeConfig<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">()<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// decide whether to use a shared memory cache if the user did not specify</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><call><name><name pos:line="5" pos:column="10">Config<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">.<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">memShared<pos:position pos:line="5" pos:column="26"/></name><operator pos:line="5" pos:column="26">.<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="27">configured<pos:position pos:line="5" pos:column="37"/></name></name><argument_list pos:line="5" pos:column="37">()<pos:position pos:line="5" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="40"/></condition><then pos:line="5" pos:column="40"> <block pos:line="5" pos:column="41">{
        <expr_stmt><expr><call><name><name pos:line="6" pos:column="9">Config<pos:position pos:line="6" pos:column="15"/></name><operator pos:line="6" pos:column="15">.<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="16">memShared<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">.<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">configure<pos:position pos:line="6" pos:column="35"/></name></name><argument_list pos:line="6" pos:column="35">(<argument><expr><call><name><name pos:line="6" pos:column="36">Ipc<pos:position pos:line="6" pos:column="39"/></name><operator pos:line="6" pos:column="39">::<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="41">Atomic<pos:position pos:line="6" pos:column="47"/></name><operator pos:line="6" pos:column="47">::<pos:position pos:line="6" pos:column="49"/></operator><name pos:line="6" pos:column="49">Enabled<pos:position pos:line="6" pos:column="56"/></name></name><argument_list pos:line="6" pos:column="56">()<pos:position pos:line="6" pos:column="58"/></argument_list></call> <operator pos:line="6" pos:column="59">&amp;&amp;<pos:position pos:line="6" pos:column="69"/></operator>
                                   <call><name><name pos:line="7" pos:column="36">Ipc<pos:position pos:line="7" pos:column="39"/></name><operator pos:line="7" pos:column="39">::<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="41">Mem<pos:position pos:line="7" pos:column="44"/></name><operator pos:line="7" pos:column="44">::<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="46">Segment<pos:position pos:line="7" pos:column="53"/></name><operator pos:line="7" pos:column="53">::<pos:position pos:line="7" pos:column="55"/></operator><name pos:line="7" pos:column="55">Enabled<pos:position pos:line="7" pos:column="62"/></name></name><argument_list pos:line="7" pos:column="62">()<pos:position pos:line="7" pos:column="64"/></argument_list></call> <operator pos:line="7" pos:column="65">&amp;&amp;<pos:position pos:line="7" pos:column="75"/></operator> <call><name pos:line="7" pos:column="68">UsingSmp<pos:position pos:line="7" pos:column="76"/></name><argument_list pos:line="7" pos:column="76">()<pos:position pos:line="7" pos:column="78"/></argument_list></call> <operator pos:line="7" pos:column="79">&amp;&amp;<pos:position pos:line="7" pos:column="89"/></operator>
                                   <name><name pos:line="8" pos:column="36">Config<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">.<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="43">memMaxSize<pos:position pos:line="8" pos:column="53"/></name></name> <operator pos:line="8" pos:column="54">&gt;<pos:position pos:line="8" pos:column="58"/></operator> <literal type="number" pos:line="8" pos:column="56">0<pos:position pos:line="8" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="59"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then> <elseif pos:line="9" pos:column="7">else <if pos:line="9" pos:column="12">if <condition pos:line="9" pos:column="15">(<expr><name><name pos:line="9" pos:column="16">Config<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">.<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">memShared<pos:position pos:line="9" pos:column="32"/></name></name> <operator pos:line="9" pos:column="33">&amp;&amp;<pos:position pos:line="9" pos:column="43"/></operator> <operator pos:line="9" pos:column="36">!<pos:position pos:line="9" pos:column="37"/></operator><call><name><name pos:line="9" pos:column="37">Ipc<pos:position pos:line="9" pos:column="40"/></name><operator pos:line="9" pos:column="40">::<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="42">Atomic<pos:position pos:line="9" pos:column="48"/></name><operator pos:line="9" pos:column="48">::<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="50">Enabled<pos:position pos:line="9" pos:column="57"/></name></name><argument_list pos:line="9" pos:column="57">()<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="60"/></condition><then pos:line="9" pos:column="60"> <block pos:line="9" pos:column="61">{
        <comment type="line" pos:line="10" pos:column="9">// bail if the user wants shared memory cache but we cannot support it</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">fatal<pos:position pos:line="11" pos:column="14"/></name><argument_list pos:line="11" pos:column="14">(<argument><expr><literal type="string" pos:line="11" pos:column="15">"memory_cache_shared is on, but no support for atomic operations detected"<pos:position pos:line="11" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="91"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if></elseif> <elseif pos:line="12" pos:column="7">else <if pos:line="12" pos:column="12">if <condition pos:line="12" pos:column="15">(<expr><name><name pos:line="12" pos:column="16">Config<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">.<pos:position pos:line="12" pos:column="23"/></operator><name pos:line="12" pos:column="23">memShared<pos:position pos:line="12" pos:column="32"/></name></name> <operator pos:line="12" pos:column="33">&amp;&amp;<pos:position pos:line="12" pos:column="43"/></operator> <operator pos:line="12" pos:column="36">!<pos:position pos:line="12" pos:column="37"/></operator><call><name><name pos:line="12" pos:column="37">Ipc<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">::<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="42">Mem<pos:position pos:line="12" pos:column="45"/></name><operator pos:line="12" pos:column="45">::<pos:position pos:line="12" pos:column="47"/></operator><name pos:line="12" pos:column="47">Segment<pos:position pos:line="12" pos:column="54"/></name><operator pos:line="12" pos:column="54">::<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="56">Enabled<pos:position pos:line="12" pos:column="63"/></name></name><argument_list pos:line="12" pos:column="63">()<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="66"/></condition><then pos:line="12" pos:column="66"> <block pos:line="12" pos:column="67">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">fatal<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><expr><literal type="string" pos:line="13" pos:column="15">"memory_cache_shared is on, but no support for shared memory detected"<pos:position pos:line="13" pos:column="85"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="87"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if></elseif> <elseif pos:line="14" pos:column="7">else <if pos:line="14" pos:column="12">if <condition pos:line="14" pos:column="15">(<expr><name><name pos:line="14" pos:column="16">Config<pos:position pos:line="14" pos:column="22"/></name><operator pos:line="14" pos:column="22">.<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">memShared<pos:position pos:line="14" pos:column="32"/></name></name> <operator pos:line="14" pos:column="33">&amp;&amp;<pos:position pos:line="14" pos:column="43"/></operator> <operator pos:line="14" pos:column="36">!<pos:position pos:line="14" pos:column="37"/></operator><call><name pos:line="14" pos:column="37">UsingSmp<pos:position pos:line="14" pos:column="45"/></name><argument_list pos:line="14" pos:column="45">()<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="48"/></condition><then pos:line="14" pos:column="48"> <block pos:line="14" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">20<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="20">DBG_IMPORTANT<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="35">"WARNING: memory_cache_shared is on, but only"<pos:position pos:line="15" pos:column="81"/></literal>
               <literal type="string" pos:line="16" pos:column="16">" a single worker is running"<pos:position pos:line="16" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if></elseif></if>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
