<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2690_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConfigParser<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">ParseQuotedString<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">(<parameter><decl><type><name pos:line="2" pos:column="33">String<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">var<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">bool<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">wasQuoted<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// Get all of the remaining string</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">token<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><call><name pos:line="5" pos:column="19">strtok<pos:position pos:line="5" pos:column="25"/></name><argument_list pos:line="5" pos:column="25">(<argument><expr><name pos:line="5" pos:column="26">NULL<pos:position pos:line="5" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="32">""<pos:position pos:line="5" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="36"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">token<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">==<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">NULL<pos:position pos:line="6" pos:column="22"/></name></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="9">self_destruct<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">()<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt></block></then></if>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">*<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">token<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">!=<pos:position pos:line="9" pos:column="18"/></operator> <literal type="char" pos:line="9" pos:column="19">'"'<pos:position pos:line="9" pos:column="22"/></literal></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <block pos:line="9" pos:column="24">{
        <expr_stmt><expr><name pos:line="10" pos:column="9">token<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">strtok<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">token<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="31">w_space<pos:position pos:line="10" pos:column="38"/></name></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="11" pos:column="9">var<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">-&gt;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="14">reset<pos:position pos:line="11" pos:column="19"/></name></name><argument_list pos:line="11" pos:column="19">(<argument><expr><name pos:line="11" pos:column="20">token<pos:position pos:line="11" pos:column="25"/></name></expr></argument>)<pos:position pos:line="11" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">wasQuoted<pos:position pos:line="12" pos:column="22"/></name></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="13" pos:column="13">*<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">wasQuoted<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <literal type="boolean" pos:line="13" pos:column="26">false<pos:position pos:line="13" pos:column="31"/></literal></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt></block></then></if>
        <return pos:line="14" pos:column="9">return;<pos:position pos:line="14" pos:column="16"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <elseif pos:line="15" pos:column="7">else <if pos:line="15" pos:column="12">if <condition pos:line="15" pos:column="15">(<expr><name pos:line="15" pos:column="16">wasQuoted<pos:position pos:line="15" pos:column="25"/></name></expr>)<pos:position pos:line="15" pos:column="26"/></condition><then pos:line="15" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="16" pos:column="9">*<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">wasQuoted<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <literal type="boolean" pos:line="16" pos:column="22">true<pos:position pos:line="16" pos:column="26"/></literal></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt></block></then></if></elseif></if>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">char<pos:position pos:line="18" pos:column="9"/></name>  <modifier pos:line="18" pos:column="11">*<pos:position pos:line="18" pos:column="12"/></modifier></type><name pos:line="18" pos:column="12">s<pos:position pos:line="18" pos:column="13"/></name> <init pos:line="18" pos:column="14">= <expr><name pos:line="18" pos:column="16">token<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">+<pos:position pos:line="18" pos:column="23"/></operator> <literal type="number" pos:line="18" pos:column="24">1<pos:position pos:line="18" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="26"/></decl_stmt>
    <comment type="block" pos:line="19" pos:column="5">/* scan until the end of the quoted string, unescaping " and \  */</comment>
    <while pos:line="20" pos:column="5">while <condition pos:line="20" pos:column="11">(<expr><operator pos:line="20" pos:column="12">*<pos:position pos:line="20" pos:column="13"/></operator><name pos:line="20" pos:column="13">s<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">&amp;&amp;<pos:position pos:line="20" pos:column="25"/></operator> <operator pos:line="20" pos:column="18">*<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">s<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">!=<pos:position pos:line="20" pos:column="23"/></operator> <literal type="char" pos:line="20" pos:column="24">'"'<pos:position pos:line="20" pos:column="27"/></literal></expr>)<pos:position pos:line="20" pos:column="28"/></condition> <block pos:line="20" pos:column="29">{
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">*<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">s<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">==<pos:position pos:line="21" pos:column="18"/></operator> <literal type="char" pos:line="21" pos:column="19">'\\'<pos:position pos:line="21" pos:column="23"/></literal></expr>)<pos:position pos:line="21" pos:column="24"/></condition><then pos:line="21" pos:column="24"> <block pos:line="21" pos:column="25">{
            <decl_stmt><decl><type><specifier pos:line="22" pos:column="13">const<pos:position pos:line="22" pos:column="18"/></specifier> <name pos:line="22" pos:column="19">char<pos:position pos:line="22" pos:column="23"/></name> <modifier pos:line="22" pos:column="24">*<pos:position pos:line="22" pos:column="25"/></modifier></type> <name pos:line="22" pos:column="26">next<pos:position pos:line="22" pos:column="30"/></name> <init pos:line="22" pos:column="31">= <expr><name pos:line="22" pos:column="33">s<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">+<pos:position pos:line="22" pos:column="35"/></operator><literal type="number" pos:line="22" pos:column="35">1<pos:position pos:line="22" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="37"/></decl_stmt> <comment type="line" pos:line="22" pos:column="38">// may point to 0</comment>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">memmove<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">s<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="24">next<pos:position pos:line="23" pos:column="28"/></name></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="30">strlen<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">next<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call> <operator pos:line="23" pos:column="43">+<pos:position pos:line="23" pos:column="44"/></operator> <literal type="number" pos:line="23" pos:column="45">1<pos:position pos:line="23" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="25" pos:column="9">++<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="11">s<pos:position pos:line="25" pos:column="12"/></name></expr>;<pos:position pos:line="25" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></while>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">s<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">!=<pos:position pos:line="28" pos:column="14"/></operator> <literal type="char" pos:line="28" pos:column="15">'"'<pos:position pos:line="28" pos:column="18"/></literal></expr>)<pos:position pos:line="28" pos:column="19"/></condition><then pos:line="28" pos:column="19"> <block pos:line="28" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">3<pos:position pos:line="29" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="19">DBG_CRITICAL<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="33">"ParseQuotedString: missing '\"' at the end of quoted string"<pos:position pos:line="29" pos:column="94"/></literal></expr></argument> )<pos:position pos:line="29" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="97"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">self_destruct<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">()<pos:position pos:line="30" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">strtok<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><name pos:line="32" pos:column="12">s<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">-<pos:position pos:line="32" pos:column="14"/></operator><literal type="number" pos:line="32" pos:column="14">1<pos:position pos:line="32" pos:column="15"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="17">"\""<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="23"/></expr_stmt> <comment type="block" pos:line="32" pos:column="24">/*Reset the strtok to point after the "  */</comment>
    <expr_stmt><expr><operator pos:line="33" pos:column="5">*<pos:position pos:line="33" pos:column="6"/></operator><name pos:line="33" pos:column="6">s<pos:position pos:line="33" pos:column="7"/></name> <operator pos:line="33" pos:column="8">=<pos:position pos:line="33" pos:column="9"/></operator> <literal type="char" pos:line="33" pos:column="10">'\0'<pos:position pos:line="33" pos:column="14"/></literal></expr>;<pos:position pos:line="33" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="35" pos:column="5">var<pos:position pos:line="35" pos:column="8"/></name><operator pos:line="35" pos:column="8">-&gt;<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="10">reset<pos:position pos:line="35" pos:column="15"/></name></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">token<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">+<pos:position pos:line="35" pos:column="22"/></operator><literal type="number" pos:line="35" pos:column="22">1<pos:position pos:line="35" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
