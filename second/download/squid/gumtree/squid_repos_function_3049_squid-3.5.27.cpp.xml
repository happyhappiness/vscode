<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3049_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">setPrivateKey<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">bool<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">shareable<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">cache_key<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">newkey<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">key<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">&amp;&amp;<pos:position pos:line="6" pos:column="23"/></operator> <call><name pos:line="6" pos:column="16">EBIT_TEST<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name pos:line="6" pos:column="26">flags<pos:position pos:line="6" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="33">KEY_PRIVATE<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="46"/></condition><then pos:line="6" pos:column="46"> <block pos:line="6" pos:column="47">{
        <comment type="line" pos:line="7" pos:column="9">// The entry is already private, but it may be still shareable.</comment>
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">shareable<pos:position pos:line="8" pos:column="23"/></name></expr>)<pos:position pos:line="8" pos:column="24"/></condition><then pos:line="8" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="13">shareableWhenPrivate<pos:position pos:line="9" pos:column="33"/></name> <operator pos:line="9" pos:column="34">=<pos:position pos:line="9" pos:column="35"/></operator> <literal type="boolean" pos:line="9" pos:column="36">false<pos:position pos:line="9" pos:column="41"/></literal></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt></block></then></if>
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">key<pos:position pos:line="13" pos:column="12"/></name></expr>)<pos:position pos:line="13" pos:column="13"/></condition><then pos:line="13" pos:column="13"> <block pos:line="13" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">setReleaseFlag<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">()<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt> <comment type="line" pos:line="14" pos:column="27">// will markForUnlink(); all caches/workers will know</comment>

        <comment type="line" pos:line="16" pos:column="9">// TODO: move into SwapDir::markForUnlink() already called by Root()</comment>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">swap_filen<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">&gt;<pos:position pos:line="17" pos:column="28"/></operator> <operator pos:line="17" pos:column="26">-<pos:position pos:line="17" pos:column="27"/></operator><literal type="number" pos:line="17" pos:column="27">1<pos:position pos:line="17" pos:column="28"/></literal></expr>)<pos:position pos:line="17" pos:column="29"/></condition><then pos:line="17" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="13">storeDirSwapLog<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">this<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">SWAP_LOG_DEL<pos:position pos:line="18" pos:column="47"/></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="20" pos:column="9">hashDelete<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">()<pos:position pos:line="20" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">mem_obj<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">&amp;&amp;<pos:position pos:line="23" pos:column="27"/></operator> <call><name><name pos:line="23" pos:column="20">mem_obj<pos:position pos:line="23" pos:column="27"/></name><operator pos:line="23" pos:column="27">-&gt;<pos:position pos:line="23" pos:column="32"/></operator><name pos:line="23" pos:column="29">hasUris<pos:position pos:line="23" pos:column="36"/></name></name><argument_list pos:line="23" pos:column="36">()<pos:position pos:line="23" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="39"/></condition><then pos:line="23" pos:column="39"> <block pos:line="23" pos:column="40">{
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">mem_obj<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">-&gt;<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="18">id<pos:position pos:line="24" pos:column="20"/></name></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <call><name pos:line="24" pos:column="23">getKeyCounter<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">()<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">newkey<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <call><name pos:line="25" pos:column="18">storeKeyPrivate<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><call><name><name pos:line="25" pos:column="34">mem_obj<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">-&gt;<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="43">storeId<pos:position pos:line="25" pos:column="50"/></name></name><argument_list pos:line="25" pos:column="50">()<pos:position pos:line="25" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="54">mem_obj<pos:position pos:line="25" pos:column="61"/></name><operator pos:line="25" pos:column="61">-&gt;<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="63">method<pos:position pos:line="25" pos:column="69"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="71">mem_obj<pos:position pos:line="25" pos:column="78"/></name><operator pos:line="25" pos:column="78">-&gt;<pos:position pos:line="25" pos:column="83"/></operator><name pos:line="25" pos:column="80">id<pos:position pos:line="25" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="84"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <else pos:line="26" pos:column="7">else <block pos:line="26" pos:column="12">{
        <expr_stmt><expr><name pos:line="27" pos:column="9">newkey<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <call><name pos:line="27" pos:column="18">storeKeyPrivate<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><literal type="string" pos:line="27" pos:column="34">"JUNK"<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="42">Http<pos:position pos:line="27" pos:column="46"/></name><operator pos:line="27" pos:column="46">::<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="48">METHOD_NONE<pos:position pos:line="27" pos:column="59"/></name></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="61">getKeyCounter<pos:position pos:line="27" pos:column="74"/></name><argument_list pos:line="27" pos:column="74">()<pos:position pos:line="27" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">assert<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><call><name pos:line="30" pos:column="12">hash_lookup<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><name pos:line="30" pos:column="24">store_table<pos:position pos:line="30" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="37">newkey<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call> <operator pos:line="30" pos:column="45">==<pos:position pos:line="30" pos:column="47"/></operator> <name pos:line="30" pos:column="48">NULL<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">EBIT_SET<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">flags<pos:position pos:line="31" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="21">KEY_PRIVATE<pos:position pos:line="31" pos:column="32"/></name></expr></argument>)<pos:position pos:line="31" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">shareableWhenPrivate<pos:position pos:line="32" pos:column="25"/></name> <operator pos:line="32" pos:column="26">=<pos:position pos:line="32" pos:column="27"/></operator> <name pos:line="32" pos:column="28">shareable<pos:position pos:line="32" pos:column="37"/></name></expr>;<pos:position pos:line="32" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">hashInsert<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">newkey<pos:position pos:line="33" pos:column="22"/></name></expr></argument>)<pos:position pos:line="33" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
