<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4029_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">ServiceRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">finalize<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">()<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">Adaptation<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">::<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">Service<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">::<pos:position pos:line="4" pos:column="26"/></operator><name pos:line="4" pos:column="26">finalize<pos:position pos:line="4" pos:column="34"/></name></name><argument_list pos:line="4" pos:column="34">()<pos:position pos:line="4" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">theService<pos:position pos:line="5" pos:column="15"/></name> <operator pos:line="5" pos:column="16">=<pos:position pos:line="5" pos:column="17"/></operator> <call><name pos:line="5" pos:column="18">FindAdapterService<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">(<argument><expr><call><name pos:line="5" pos:column="37">cfg<pos:position pos:line="5" pos:column="40"/></name><argument_list pos:line="5" pos:column="40">()<pos:position pos:line="5" pos:column="42"/></argument_list></call><operator pos:line="5" pos:column="42">.<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="43">uri<pos:position pos:line="5" pos:column="46"/></name></expr></argument>)<pos:position pos:line="5" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="48"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">theService<pos:position pos:line="6" pos:column="19"/></name></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20"> <block pos:line="6" pos:column="21">{
        <try pos:line="7" pos:column="9">try <block pos:line="7" pos:column="13">{
            <expr_stmt><expr><call><name pos:line="8" pos:column="13">tryConfigureAndStart<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">()<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="9" pos:column="13">Must<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><call><name pos:line="9" pos:column="18">up<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">()<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="10" pos:column="10"/></block> <catch pos:line="10" pos:column="11">catch <parameter_list pos:line="10" pos:column="17">(<parameter><decl><type><specifier pos:line="10" pos:column="18">const<pos:position pos:line="10" pos:column="23"/></specifier> <name><name pos:line="10" pos:column="24">std<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">::<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="29">exception<pos:position pos:line="10" pos:column="38"/></name></name> <modifier pos:line="10" pos:column="39">&amp;<pos:position pos:line="10" pos:column="44"/></modifier></type><name pos:line="10" pos:column="40">e<pos:position pos:line="10" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="10" pos:column="42"/></parameter_list> <block pos:line="10" pos:column="43">{ <comment type="line" pos:line="10" pos:column="45">// standardized exceptions</comment>
            <if pos:line="11" pos:column="13">if <condition pos:line="11" pos:column="16">(<expr><operator pos:line="11" pos:column="17">!<pos:position pos:line="11" pos:column="18"/></operator><call><name pos:line="11" pos:column="18">handleFinalizeFailure<pos:position pos:line="11" pos:column="39"/></name><argument_list pos:line="11" pos:column="39">(<argument><expr><call><name><name pos:line="11" pos:column="40">e<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">.<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="42">what<pos:position pos:line="11" pos:column="46"/></name></name><argument_list pos:line="11" pos:column="46">()<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="50"/></condition><then pos:line="11" pos:column="50">
                <block type="pseudo"><throw pos:line="12" pos:column="17">throw;<pos:position pos:line="12" pos:column="23"/></throw></block></then></if> <comment type="line" pos:line="12" pos:column="24">// rethrow for upper layers to handle</comment>
        }<pos:position pos:line="13" pos:column="10"/></block></catch> <catch pos:line="13" pos:column="11">catch <parameter_list pos:line="13" pos:column="17">(<parameter><decl><type><modifier pos:line="13" pos:column="18">...<pos:position pos:line="13" pos:column="21"/></modifier></type></decl></parameter>)<pos:position pos:line="13" pos:column="22"/></parameter_list> <block pos:line="13" pos:column="23">{ <comment type="line" pos:line="13" pos:column="25">// all other exceptions</comment>
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><operator pos:line="14" pos:column="17">!<pos:position pos:line="14" pos:column="18"/></operator><call><name pos:line="14" pos:column="18">handleFinalizeFailure<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><literal type="string" pos:line="14" pos:column="40">"unrecognized exception"<pos:position pos:line="14" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="66"/></condition><then pos:line="14" pos:column="66">
                <block type="pseudo"><throw pos:line="15" pos:column="17">throw;<pos:position pos:line="15" pos:column="23"/></throw></block></then></if> <comment type="line" pos:line="15" pos:column="24">// rethrow for upper layers to handle</comment>
        }<pos:position pos:line="16" pos:column="10"/></block></catch></try>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return> <comment type="line" pos:line="17" pos:column="17">// success or handled exception</comment>
    }<pos:position pos:line="18" pos:column="6"/></block></then> <else pos:line="18" pos:column="7">else <block pos:line="18" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">93<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>,<argument><expr><name pos:line="19" pos:column="19">DBG_IMPORTANT<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"WARNING: configured ecap_service was not loaded: "<pos:position pos:line="19" pos:column="85"/></literal> <operator pos:line="19" pos:column="86">&lt;&lt;<pos:position pos:line="19" pos:column="94"/></operator> <call><name pos:line="19" pos:column="89">cfg<pos:position pos:line="19" pos:column="92"/></name><argument_list pos:line="19" pos:column="92">()<pos:position pos:line="19" pos:column="94"/></argument_list></call><operator pos:line="19" pos:column="94">.<pos:position pos:line="19" pos:column="95"/></operator><name pos:line="19" pos:column="95">uri<pos:position pos:line="19" pos:column="98"/></name></expr></argument>)<pos:position pos:line="19" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="100"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></else></if>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
