<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_331_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">RFCNB_IP_Connect<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name><name pos:line="2" pos:column="18">struct<pos:position pos:line="2" pos:column="24"/></name> <name pos:line="2" pos:column="25">in_addr<pos:position pos:line="2" pos:column="32"/></name></name></type> <name pos:line="2" pos:column="33">Dest_IP<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">int<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">port<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">sockaddr_in<pos:position pos:line="4" pos:column="23"/></name></name></type> <name pos:line="4" pos:column="24">Socket<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">fd<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* Create a socket */</comment>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">fd<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">socket<pos:position pos:line="9" pos:column="21"/></name><argument_list pos:line="9" pos:column="21">(<argument><expr><name pos:line="9" pos:column="22">PF_INET<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="31">SOCK_STREAM<pos:position pos:line="9" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="44">0<pos:position pos:line="9" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call><operator pos:line="9" pos:column="46">)<pos:position pos:line="9" pos:column="47"/></operator> <operator pos:line="9" pos:column="48">&lt;<pos:position pos:line="9" pos:column="52"/></operator> <literal type="number" pos:line="9" pos:column="50">0<pos:position pos:line="9" pos:column="51"/></literal></expr>)<pos:position pos:line="9" pos:column="52"/></condition><then pos:line="9" pos:column="52"> <block pos:line="9" pos:column="53">{	<comment type="block" pos:line="9" pos:column="57">/* Handle the error */</comment>

        <expr_stmt><expr><name pos:line="11" pos:column="9">RFCNB_errno<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">RFCNBE_BadSocket<pos:position pos:line="11" pos:column="39"/></name></expr>;<pos:position pos:line="11" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">RFCNB_saved_errno<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">=<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">errno<pos:position pos:line="12" pos:column="34"/></name></expr>;<pos:position pos:line="12" pos:column="35"/></expr_stmt>
        <return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">RFCNBE_Bad<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">)<pos:position pos:line="13" pos:column="28"/></operator></expr>;<pos:position pos:line="13" pos:column="29"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">memset<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">char<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">*<pos:position pos:line="15" pos:column="19"/></operator><operator pos:line="15" pos:column="19">)<pos:position pos:line="15" pos:column="20"/></operator> <operator pos:line="15" pos:column="21">&amp;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="22">Socket<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="30">0<pos:position pos:line="15" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="33">sizeof<argument_list pos:line="15" pos:column="39">(<argument><expr><name pos:line="15" pos:column="40">Socket<pos:position pos:line="15" pos:column="46"/></name></expr></argument>)<pos:position pos:line="15" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">memcpy<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><operator pos:line="16" pos:column="12">(<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">char<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">*<pos:position pos:line="16" pos:column="19"/></operator><operator pos:line="16" pos:column="19">)<pos:position pos:line="16" pos:column="20"/></operator> <operator pos:line="16" pos:column="21">&amp;<pos:position pos:line="16" pos:column="26"/></operator><name><name pos:line="16" pos:column="22">Socket<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">.<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">sin_addr<pos:position pos:line="16" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="39">(<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="40">char<pos:position pos:line="16" pos:column="44"/></name> <operator pos:line="16" pos:column="45">*<pos:position pos:line="16" pos:column="46"/></operator><operator pos:line="16" pos:column="46">)<pos:position pos:line="16" pos:column="47"/></operator> <operator pos:line="16" pos:column="48">&amp;<pos:position pos:line="16" pos:column="53"/></operator><name pos:line="16" pos:column="49">Dest_IP<pos:position pos:line="16" pos:column="56"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="58">sizeof<argument_list pos:line="16" pos:column="64">(<argument><expr><name pos:line="16" pos:column="65">Dest_IP<pos:position pos:line="16" pos:column="72"/></name></expr></argument>)<pos:position pos:line="16" pos:column="73"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="75"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="18" pos:column="5">Socket<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">sin_port<pos:position pos:line="18" pos:column="20"/></name></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">htons<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">port<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">Socket<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">.<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">sin_family<pos:position pos:line="19" pos:column="22"/></name></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">PF_INET<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="21" pos:column="5">/* Now connect to the destination */</comment>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">connect<pos:position pos:line="23" pos:column="16"/></name><argument_list pos:line="23" pos:column="16">(<argument><expr><name pos:line="23" pos:column="17">fd<pos:position pos:line="23" pos:column="19"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="21">(<pos:position pos:line="23" pos:column="22"/></operator>struct <name pos:line="23" pos:column="29">sockaddr<pos:position pos:line="23" pos:column="37"/></name> <operator pos:line="23" pos:column="38">*<pos:position pos:line="23" pos:column="39"/></operator><operator pos:line="23" pos:column="39">)<pos:position pos:line="23" pos:column="40"/></operator> <operator pos:line="23" pos:column="41">&amp;<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="42">Socket<pos:position pos:line="23" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="50">sizeof<argument_list pos:line="23" pos:column="56">(<argument><expr><name pos:line="23" pos:column="57">Socket<pos:position pos:line="23" pos:column="63"/></name></expr></argument>)<pos:position pos:line="23" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="65"/></argument_list></call> <operator pos:line="23" pos:column="66">&lt;<pos:position pos:line="23" pos:column="70"/></operator> <literal type="number" pos:line="23" pos:column="68">0<pos:position pos:line="23" pos:column="69"/></literal></expr>)<pos:position pos:line="23" pos:column="70"/></condition><then pos:line="23" pos:column="70"> <block pos:line="23" pos:column="71">{		<comment type="block" pos:line="23" pos:column="81">/* Error */</comment>

        <expr_stmt><expr><call><name pos:line="25" pos:column="9">close<pos:position pos:line="25" pos:column="14"/></name><argument_list pos:line="25" pos:column="14">(<argument><expr><name pos:line="25" pos:column="15">fd<pos:position pos:line="25" pos:column="17"/></name></expr></argument>)<pos:position pos:line="25" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">RFCNB_errno<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">RFCNBE_ConnectFailed<pos:position pos:line="26" pos:column="43"/></name></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="27" pos:column="9">RFCNB_saved_errno<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">errno<pos:position pos:line="27" pos:column="34"/></name></expr>;<pos:position pos:line="27" pos:column="35"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><operator pos:line="28" pos:column="16">(<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="17">RFCNBE_Bad<pos:position pos:line="28" pos:column="27"/></name><operator pos:line="28" pos:column="27">)<pos:position pos:line="28" pos:column="28"/></operator></expr>;<pos:position pos:line="28" pos:column="29"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <return pos:line="30" pos:column="5">return <expr><operator pos:line="30" pos:column="12">(<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">fd<pos:position pos:line="30" pos:column="15"/></name><operator pos:line="30" pos:column="15">)<pos:position pos:line="30" pos:column="16"/></operator></expr>;<pos:position pos:line="30" pos:column="17"/></return>

}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
