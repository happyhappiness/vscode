<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3558_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXact<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">makeAllowHeader<pos:position pos:line="1" pos:column="48"/></name></name><parameter_list pos:line="1" pos:column="48">(<parameter><decl><type><name pos:line="1" pos:column="49">MemBuf<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">&amp;<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="57">buf<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">bool<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">allow204in<pos:position pos:line="3" pos:column="26"/></name> <init pos:line="3" pos:column="27">= <expr><call><name><name pos:line="3" pos:column="29">preview<pos:position pos:line="3" pos:column="36"/></name><operator pos:line="3" pos:column="36">.<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="37">enabled<pos:position pos:line="3" pos:column="44"/></name></name><argument_list pos:line="3" pos:column="44">()<pos:position pos:line="3" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt> <comment type="line" pos:line="3" pos:column="48">// TODO: add shouldAllow204in()</comment>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">bool<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">allow204out<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name><name pos:line="4" pos:column="30">state<pos:position pos:line="4" pos:column="35"/></name><operator pos:line="4" pos:column="35">.<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">allowedPostview204<pos:position pos:line="4" pos:column="54"/></name></name> <operator pos:line="4" pos:column="55">=<pos:position pos:line="4" pos:column="56"/></operator> <call><name pos:line="4" pos:column="57">shouldAllow204<pos:position pos:line="4" pos:column="71"/></name><argument_list pos:line="4" pos:column="71">()<pos:position pos:line="4" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="74"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">bool<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">allow206in<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name><name pos:line="5" pos:column="29">state<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">.<pos:position pos:line="5" pos:column="35"/></operator><name pos:line="5" pos:column="35">allowedPreview206<pos:position pos:line="5" pos:column="52"/></name></name> <operator pos:line="5" pos:column="53">=<pos:position pos:line="5" pos:column="54"/></operator> <call><name pos:line="5" pos:column="55">shouldAllow206in<pos:position pos:line="5" pos:column="71"/></name><argument_list pos:line="5" pos:column="71">()<pos:position pos:line="5" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="74"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">bool<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">allow206out<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name><name pos:line="6" pos:column="30">state<pos:position pos:line="6" pos:column="35"/></name><operator pos:line="6" pos:column="35">.<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="36">allowedPostview206<pos:position pos:line="6" pos:column="54"/></name></name> <operator pos:line="6" pos:column="55">=<pos:position pos:line="6" pos:column="56"/></operator> <call><name pos:line="6" pos:column="57">shouldAllow206out<pos:position pos:line="6" pos:column="74"/></name><argument_list pos:line="6" pos:column="74">()<pos:position pos:line="6" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="77"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">93<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="8" pos:column="15">9<pos:position pos:line="8" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="18">HERE<pos:position pos:line="8" pos:column="22"/></name> <operator pos:line="8" pos:column="23">&lt;&lt;<pos:position pos:line="8" pos:column="31"/></operator> <literal type="string" pos:line="8" pos:column="26">"Allows: "<pos:position pos:line="8" pos:column="36"/></literal> <operator pos:line="8" pos:column="37">&lt;&lt;<pos:position pos:line="8" pos:column="45"/></operator> <name pos:line="8" pos:column="40">allow204in<pos:position pos:line="8" pos:column="50"/></name> <operator pos:line="8" pos:column="51">&lt;&lt;<pos:position pos:line="8" pos:column="59"/></operator> <name pos:line="8" pos:column="54">allow204out<pos:position pos:line="8" pos:column="65"/></name> <operator pos:line="8" pos:column="66">&lt;&lt;<pos:position pos:line="8" pos:column="74"/></operator>
           <name pos:line="9" pos:column="12">allow206in<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">&lt;&lt;<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="26">allow206out<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">bool<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">allow204<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><name pos:line="11" pos:column="27">allow204in<pos:position pos:line="11" pos:column="37"/></name> <operator pos:line="11" pos:column="38">||<pos:position pos:line="11" pos:column="40"/></operator> <name pos:line="11" pos:column="41">allow204out<pos:position pos:line="11" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="53"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">bool<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">allow206<pos:position pos:line="12" pos:column="24"/></name> <init pos:line="12" pos:column="25">= <expr><name pos:line="12" pos:column="27">allow206in<pos:position pos:line="12" pos:column="37"/></name> <operator pos:line="12" pos:column="38">||<pos:position pos:line="12" pos:column="40"/></operator> <name pos:line="12" pos:column="41">allow206out<pos:position pos:line="12" pos:column="52"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="53"/></decl_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">allow204<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&amp;&amp;<pos:position pos:line="14" pos:column="29"/></operator> <operator pos:line="14" pos:column="22">!<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="23">allow206<pos:position pos:line="14" pos:column="31"/></name></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32">
        <block type="pseudo"><return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="15" pos:column="17">// nothing to do</comment>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name><name pos:line="17" pos:column="9">virginBody<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">expected<pos:position pos:line="17" pos:column="28"/></name></name><argument_list pos:line="17" pos:column="28">()<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31"> <comment type="line" pos:line="17" pos:column="32">// if there is a virgin body, plan to send it</comment>
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="18" pos:column="9">virginBodySending<pos:position pos:line="18" pos:column="26"/></name><operator pos:line="18" pos:column="26">.<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="27">plan<pos:position pos:line="18" pos:column="31"/></name></name><argument_list pos:line="18" pos:column="31">()<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="20" pos:column="5">// writing Preview:...   means we will honor 204 inside preview</comment>
    <comment type="line" pos:line="21" pos:column="5">// writing Allow/204     means we will honor 204 outside preview</comment>
    <comment type="line" pos:line="22" pos:column="5">// writing Allow:206     means we will honor 206 inside preview</comment>
    <comment type="line" pos:line="23" pos:column="5">// writing Allow:204,206 means we will honor 206 outside preview</comment>
    <decl_stmt><decl><type><specifier pos:line="24" pos:column="5">const<pos:position pos:line="24" pos:column="10"/></specifier> <name pos:line="24" pos:column="11">char<pos:position pos:line="24" pos:column="15"/></name> <modifier pos:line="24" pos:column="16">*<pos:position pos:line="24" pos:column="17"/></modifier></type><name pos:line="24" pos:column="17">allowHeader<pos:position pos:line="24" pos:column="28"/></name> <init pos:line="24" pos:column="29">= <expr><name pos:line="24" pos:column="31">NULL<pos:position pos:line="24" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="36"/></decl_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">allow204out<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">&amp;&amp;<pos:position pos:line="25" pos:column="31"/></operator> <name pos:line="25" pos:column="24">allow206<pos:position pos:line="25" pos:column="32"/></name></expr>)<pos:position pos:line="25" pos:column="33"/></condition><then pos:line="25" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name pos:line="26" pos:column="9">allowHeader<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <literal type="string" pos:line="26" pos:column="23">"Allow: 204, 206\r\n"<pos:position pos:line="26" pos:column="44"/></literal></expr>;<pos:position pos:line="26" pos:column="45"/></expr_stmt></block></then>
    <elseif pos:line="27" pos:column="5">else <if pos:line="27" pos:column="10">if <condition pos:line="27" pos:column="13">(<expr><name pos:line="27" pos:column="14">allow204out<pos:position pos:line="27" pos:column="25"/></name></expr>)<pos:position pos:line="27" pos:column="26"/></condition><then pos:line="27" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="9">allowHeader<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <literal type="string" pos:line="28" pos:column="23">"Allow: 204\r\n"<pos:position pos:line="28" pos:column="39"/></literal></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt></block></then></if></elseif>
    <elseif pos:line="29" pos:column="5">else <if pos:line="29" pos:column="10">if <condition pos:line="29" pos:column="13">(<expr><name pos:line="29" pos:column="14">allow206<pos:position pos:line="29" pos:column="22"/></name></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="9">allowHeader<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <literal type="string" pos:line="30" pos:column="23">"Allow: 206\r\n"<pos:position pos:line="30" pos:column="39"/></literal></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt></block></then></if></elseif></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">allowHeader<pos:position pos:line="32" pos:column="20"/></name></expr>)<pos:position pos:line="32" pos:column="21"/></condition><then pos:line="32" pos:column="21"> <block pos:line="32" pos:column="22">{ <comment type="line" pos:line="32" pos:column="24">// may be nil if only allow204in is true</comment>
        <expr_stmt><expr><call><name><name pos:line="33" pos:column="9">buf<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">.<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="13">append<pos:position pos:line="33" pos:column="19"/></name></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">allowHeader<pos:position pos:line="33" pos:column="31"/></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="33">strlen<pos:position pos:line="33" pos:column="39"/></name><argument_list pos:line="33" pos:column="39">(<argument><expr><name pos:line="33" pos:column="40">allowHeader<pos:position pos:line="33" pos:column="51"/></name></expr></argument>)<pos:position pos:line="33" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">debugs<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><literal type="number" pos:line="34" pos:column="16">93<pos:position pos:line="34" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="34" pos:column="19">5<pos:position pos:line="34" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="22">HERE<pos:position pos:line="34" pos:column="26"/></name> <operator pos:line="34" pos:column="27">&lt;&lt;<pos:position pos:line="34" pos:column="35"/></operator> <literal type="string" pos:line="34" pos:column="30">"Will write "<pos:position pos:line="34" pos:column="43"/></literal> <operator pos:line="34" pos:column="44">&lt;&lt;<pos:position pos:line="34" pos:column="52"/></operator> <name pos:line="34" pos:column="47">allowHeader<pos:position pos:line="34" pos:column="58"/></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
