<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4235_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">Options<pos:position pos:line="1" pos:column="31"/></name><operator pos:line="1" pos:column="31">::<pos:position pos:line="1" pos:column="33"/></operator><name pos:line="1" pos:column="33">TransferList<pos:position pos:line="1" pos:column="45"/></name><operator pos:line="1" pos:column="45">::<pos:position pos:line="1" pos:column="47"/></operator><name pos:line="1" pos:column="47">parse<pos:position pos:line="1" pos:column="52"/></name></name><parameter_list pos:line="1" pos:column="52">(<parameter><decl><type><specifier pos:line="1" pos:column="53">const<pos:position pos:line="1" pos:column="58"/></specifier> <name pos:line="1" pos:column="59">String<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">&amp;<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="67">buf<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="72">bool<pos:position pos:line="1" pos:column="76"/></name> <modifier pos:line="1" pos:column="77">&amp;<pos:position pos:line="1" pos:column="82"/></modifier></type><name pos:line="1" pos:column="78">foundStar<pos:position pos:line="1" pos:column="87"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="88"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><name pos:line="3" pos:column="5">foundStar<pos:position pos:line="3" pos:column="14"/></name> <operator pos:line="3" pos:column="15">=<pos:position pos:line="3" pos:column="16"/></operator> <literal type="boolean" pos:line="3" pos:column="17">false<pos:position pos:line="3" pos:column="22"/></literal></expr>;<pos:position pos:line="3" pos:column="23"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">item<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">pos<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">ilen<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><call><name pos:line="8" pos:column="12">strListGetItem<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><operator pos:line="8" pos:column="27">&amp;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="28">buf<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="8" pos:column="33">','<pos:position pos:line="8" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="38">&amp;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="39">item<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="45">&amp;<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="46">ilen<pos:position pos:line="8" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="52">&amp;<pos:position pos:line="8" pos:column="57"/></operator><name pos:line="8" pos:column="53">pos<pos:position pos:line="8" pos:column="56"/></name></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="58"/></condition> <block pos:line="8" pos:column="59">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">ilen<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">==<pos:position pos:line="9" pos:column="20"/></operator> <literal type="number" pos:line="9" pos:column="21">1<pos:position pos:line="9" pos:column="22"/></literal> <operator pos:line="9" pos:column="23">&amp;&amp;<pos:position pos:line="9" pos:column="33"/></operator> <operator pos:line="9" pos:column="26">*<pos:position pos:line="9" pos:column="27"/></operator><name pos:line="9" pos:column="27">item<pos:position pos:line="9" pos:column="31"/></name> <operator pos:line="9" pos:column="32">==<pos:position pos:line="9" pos:column="34"/></operator> <literal type="char" pos:line="9" pos:column="35">'*'<pos:position pos:line="9" pos:column="38"/></literal></expr>)<pos:position pos:line="9" pos:column="39"/></condition><then pos:line="9" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><name pos:line="10" pos:column="13">foundStar<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">=<pos:position pos:line="10" pos:column="24"/></operator> <literal type="boolean" pos:line="10" pos:column="25">true<pos:position pos:line="10" pos:column="29"/></literal></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt></block></then>
        <else pos:line="11" pos:column="9">else <block pos:line="11" pos:column="14">{
            <decl_stmt><decl><type><specifier pos:line="12" pos:column="13">const<pos:position pos:line="12" pos:column="18"/></specifier> <name pos:line="12" pos:column="19">char<pos:position pos:line="12" pos:column="23"/></name> <modifier pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></modifier></type><name pos:line="12" pos:column="25">tmp<pos:position pos:line="12" pos:column="28"/></name> <init pos:line="12" pos:column="29">= <expr><call><name pos:line="12" pos:column="31">xstrndup<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">(<argument><expr><name pos:line="12" pos:column="40">item<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">ilen<pos:position pos:line="12" pos:column="50"/></name><operator pos:line="12" pos:column="50">+<pos:position pos:line="12" pos:column="51"/></operator><literal type="number" pos:line="12" pos:column="51">1<pos:position pos:line="12" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="54"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">add<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><name pos:line="13" pos:column="17">tmp<pos:position pos:line="13" pos:column="20"/></name></expr></argument>)<pos:position pos:line="13" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">xfree<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">tmp<pos:position pos:line="14" pos:column="22"/></name></expr></argument>)<pos:position pos:line="14" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></else></if>
    }<pos:position pos:line="16" pos:column="6"/></block></while>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
