<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1446_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">swapOut<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">mem_obj<pos:position pos:line="4" pos:column="17"/></name></expr>)<pos:position pos:line="4" pos:column="18"/></condition><then pos:line="4" pos:column="18">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="7" pos:column="5">// this flag may change so we must check even if we are swappingOut</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><call><name pos:line="8" pos:column="9">EBIT_TEST<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">flags<pos:position pos:line="8" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="26">ENTRY_ABORTED<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="41"/></condition><then pos:line="8" pos:column="41"> <block pos:line="8" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">assert<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><call><name pos:line="9" pos:column="16">EBIT_TEST<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">flags<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="33">RELEASE_REQUEST<pos:position pos:line="9" pos:column="48"/></name></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="51"/></expr_stmt>
        <comment type="line" pos:line="10" pos:column="9">// StoreEntry::abort() already closed the swap out file, if any</comment>
        <comment type="line" pos:line="11" pos:column="9">// no trimming: data producer must stop production if ENTRY_ABORTED</comment>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">bool<pos:position pos:line="15" pos:column="15"/></name></type> <name pos:line="15" pos:column="16">weAreOrMayBeSwappingOut<pos:position pos:line="15" pos:column="39"/></name> <init pos:line="15" pos:column="40">= <expr><call><name pos:line="15" pos:column="42">swappingOut<pos:position pos:line="15" pos:column="53"/></name><argument_list pos:line="15" pos:column="53">()<pos:position pos:line="15" pos:column="55"/></argument_list></call> <operator pos:line="15" pos:column="56">||<pos:position pos:line="15" pos:column="58"/></operator> <call><name pos:line="15" pos:column="59">mayStartSwapOut<pos:position pos:line="15" pos:column="74"/></name><argument_list pos:line="15" pos:column="74">()<pos:position pos:line="15" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="77"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">Store<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">::<pos:position pos:line="17" pos:column="12"/></operator><name pos:line="17" pos:column="12">Root<pos:position pos:line="17" pos:column="16"/></name></name><argument_list pos:line="17" pos:column="16">()<pos:position pos:line="17" pos:column="18"/></argument_list></call><operator pos:line="17" pos:column="18">.<pos:position pos:line="17" pos:column="19"/></operator><call><name pos:line="17" pos:column="19">maybeTrimMemory<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><operator pos:line="17" pos:column="35">*<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">this<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">weAreOrMayBeSwappingOut<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="67"/></expr_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">mem_obj<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">-&gt;<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="18">swapout<pos:position pos:line="19" pos:column="25"/></name><operator pos:line="19" pos:column="25">.<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="26">decision<pos:position pos:line="19" pos:column="34"/></name></name> <operator pos:line="19" pos:column="35">!=<pos:position pos:line="19" pos:column="37"/></operator> <name><name pos:line="19" pos:column="38">MemObject<pos:position pos:line="19" pos:column="47"/></name><operator pos:line="19" pos:column="47">::<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">SwapOut<pos:position pos:line="19" pos:column="56"/></name><operator pos:line="19" pos:column="56">::<pos:position pos:line="19" pos:column="58"/></operator><name pos:line="19" pos:column="58">swPossible<pos:position pos:line="19" pos:column="68"/></name></name></expr>)<pos:position pos:line="19" pos:column="69"/></condition><then pos:line="19" pos:column="69">
        <block type="pseudo"><return pos:line="20" pos:column="9">return;<pos:position pos:line="20" pos:column="16"/></return></block></then></if> <comment type="line" pos:line="20" pos:column="17">// nothing else to do</comment>

    <comment type="line" pos:line="22" pos:column="5">// Aborted entries have STORE_OK, but swapoutPossible rejects them. Thus,</comment>
    <comment type="line" pos:line="23" pos:column="5">// store_status == STORE_OK below means we got everything we wanted.</comment>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">debugs<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><literal type="number" pos:line="25" pos:column="12">20<pos:position pos:line="25" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="16">7<pos:position pos:line="25" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="19">HERE<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">&lt;&lt;<pos:position pos:line="25" pos:column="32"/></operator> <literal type="string" pos:line="25" pos:column="27">"storeSwapOut: mem-&gt;inmem_lo = "<pos:position pos:line="25" pos:column="62"/></literal> <operator pos:line="25" pos:column="60">&lt;&lt;<pos:position pos:line="25" pos:column="68"/></operator> <name><name pos:line="25" pos:column="63">mem_obj<pos:position pos:line="25" pos:column="70"/></name><operator pos:line="25" pos:column="70">-&gt;<pos:position pos:line="25" pos:column="75"/></operator><name pos:line="25" pos:column="72">inmem_lo<pos:position pos:line="25" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="82"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">debugs<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="number" pos:line="26" pos:column="12">20<pos:position pos:line="26" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="16">7<pos:position pos:line="26" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="19">HERE<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">&lt;&lt;<pos:position pos:line="26" pos:column="32"/></operator> <literal type="string" pos:line="26" pos:column="27">"storeSwapOut: mem-&gt;endOffset() = "<pos:position pos:line="26" pos:column="65"/></literal> <operator pos:line="26" pos:column="63">&lt;&lt;<pos:position pos:line="26" pos:column="71"/></operator> <call><name><name pos:line="26" pos:column="66">mem_obj<pos:position pos:line="26" pos:column="73"/></name><operator pos:line="26" pos:column="73">-&gt;<pos:position pos:line="26" pos:column="78"/></operator><name pos:line="26" pos:column="75">endOffset<pos:position pos:line="26" pos:column="84"/></name></name><argument_list pos:line="26" pos:column="84">()<pos:position pos:line="26" pos:column="86"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="88"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">debugs<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><literal type="number" pos:line="27" pos:column="12">20<pos:position pos:line="27" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="16">7<pos:position pos:line="27" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="19">HERE<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">&lt;&lt;<pos:position pos:line="27" pos:column="32"/></operator> <literal type="string" pos:line="27" pos:column="27">"storeSwapOut: swapout.queue_offset = "<pos:position pos:line="27" pos:column="66"/></literal> <operator pos:line="27" pos:column="67">&lt;&lt;<pos:position pos:line="27" pos:column="75"/></operator> <name><name pos:line="27" pos:column="70">mem_obj<pos:position pos:line="27" pos:column="77"/></name><operator pos:line="27" pos:column="77">-&gt;<pos:position pos:line="27" pos:column="82"/></operator><name pos:line="27" pos:column="79">swapout<pos:position pos:line="27" pos:column="86"/></name><operator pos:line="27" pos:column="86">.<pos:position pos:line="27" pos:column="87"/></operator><name pos:line="27" pos:column="87">queue_offset<pos:position pos:line="27" pos:column="99"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="101"/></expr_stmt>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name><name pos:line="29" pos:column="9">mem_obj<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">swapout<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">.<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">sio<pos:position pos:line="29" pos:column="29"/></name></name> <operator pos:line="29" pos:column="30">!=<pos:position pos:line="29" pos:column="32"/></operator> <name pos:line="29" pos:column="33">NULL<pos:position pos:line="29" pos:column="37"/></name></expr>)<pos:position pos:line="29" pos:column="38"/></condition><then pos:line="29" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">20<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="20">7<pos:position pos:line="30" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="23">"storeSwapOut: storeOffset() = "<pos:position pos:line="30" pos:column="55"/></literal> <operator pos:line="30" pos:column="56">&lt;&lt;<pos:position pos:line="30" pos:column="64"/></operator> <call><name><name pos:line="30" pos:column="59">mem_obj<pos:position pos:line="30" pos:column="66"/></name><operator pos:line="30" pos:column="66">-&gt;<pos:position pos:line="30" pos:column="71"/></operator><name pos:line="30" pos:column="68">swapout<pos:position pos:line="30" pos:column="75"/></name><operator pos:line="30" pos:column="75">.<pos:position pos:line="30" pos:column="76"/></operator><name pos:line="30" pos:column="76">sio<pos:position pos:line="30" pos:column="79"/></name><operator pos:line="30" pos:column="79">-&gt;<pos:position pos:line="30" pos:column="84"/></operator><name pos:line="30" pos:column="81">offset<pos:position pos:line="30" pos:column="87"/></name></name><argument_list pos:line="30" pos:column="87">()<pos:position pos:line="30" pos:column="89"/></argument_list></call></expr></argument>  )<pos:position pos:line="30" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="93"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="32" pos:column="5">int64_t<pos:position pos:line="32" pos:column="12"/></name> <specifier pos:line="32" pos:column="13">const<pos:position pos:line="32" pos:column="18"/></specifier></type> <name pos:line="32" pos:column="19">lowest_offset<pos:position pos:line="32" pos:column="32"/></name> <init pos:line="32" pos:column="33">= <expr><call><name><name pos:line="32" pos:column="35">mem_obj<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">-&gt;<pos:position pos:line="32" pos:column="47"/></operator><name pos:line="32" pos:column="44">lowestMemReaderOffset<pos:position pos:line="32" pos:column="65"/></name></name><argument_list pos:line="32" pos:column="65">()<pos:position pos:line="32" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="68"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">debugs<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><literal type="number" pos:line="34" pos:column="12">20<pos:position pos:line="34" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="16">7<pos:position pos:line="34" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="19">HERE<pos:position pos:line="34" pos:column="23"/></name> <operator pos:line="34" pos:column="24">&lt;&lt;<pos:position pos:line="34" pos:column="32"/></operator> <literal type="string" pos:line="34" pos:column="27">"storeSwapOut: lowest_offset = "<pos:position pos:line="34" pos:column="59"/></literal> <operator pos:line="34" pos:column="60">&lt;&lt;<pos:position pos:line="34" pos:column="68"/></operator> <name pos:line="34" pos:column="63">lowest_offset<pos:position pos:line="34" pos:column="76"/></name></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="78"/></expr_stmt>

<cpp:if pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">if<pos:position pos:line="36" pos:column="4"/></cpp:directive> <expr><name pos:line="36" pos:column="5">SIZEOF_OFF_T<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">&lt;=<pos:position pos:line="36" pos:column="23"/></operator> <literal type="number" pos:line="36" pos:column="21">4<pos:position pos:line="36" pos:column="22"/></literal></expr></cpp:if>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><call><name><name pos:line="38" pos:column="9">mem_obj<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">-&gt;<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="18">endOffset<pos:position pos:line="38" pos:column="27"/></name></name><argument_list pos:line="38" pos:column="27">()<pos:position pos:line="38" pos:column="29"/></argument_list></call> <operator pos:line="38" pos:column="30">&gt;<pos:position pos:line="38" pos:column="34"/></operator> <literal type="number" pos:line="38" pos:column="32">0x7FFF0000<pos:position pos:line="38" pos:column="42"/></literal></expr>)<pos:position pos:line="38" pos:column="43"/></condition><then pos:line="38" pos:column="43"> <block pos:line="38" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">20<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="20">DBG_CRITICAL<pos:position pos:line="39" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="34">"WARNING: preventing off_t overflow for "<pos:position pos:line="39" pos:column="75"/></literal> <operator pos:line="39" pos:column="76">&lt;&lt;<pos:position pos:line="39" pos:column="84"/></operator> <call><name pos:line="39" pos:column="79">url<pos:position pos:line="39" pos:column="82"/></name><argument_list pos:line="39" pos:column="82">()<pos:position pos:line="39" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="86"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">abort<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">()<pos:position pos:line="40" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="17"/></expr_stmt>
        <return pos:line="41" pos:column="9">return;<pos:position pos:line="41" pos:column="16"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">swap_status<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">==<pos:position pos:line="45" pos:column="23"/></operator> <name pos:line="45" pos:column="24">SWAPOUT_WRITING<pos:position pos:line="45" pos:column="39"/></name></expr>)<pos:position pos:line="45" pos:column="40"/></condition><then pos:line="45" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="9">assert<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><name><name pos:line="46" pos:column="16">mem_obj<pos:position pos:line="46" pos:column="23"/></name><operator pos:line="46" pos:column="23">-&gt;<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="25">inmem_lo<pos:position pos:line="46" pos:column="33"/></name></name> <operator pos:line="46" pos:column="34">&lt;=<pos:position pos:line="46" pos:column="39"/></operator>  <call><name><name pos:line="46" pos:column="38">mem_obj<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">-&gt;<pos:position pos:line="46" pos:column="50"/></operator><name pos:line="46" pos:column="47">objectBytesOnDisk<pos:position pos:line="46" pos:column="64"/></name></name><argument_list pos:line="46" pos:column="64">()<pos:position pos:line="46" pos:column="66"/></argument_list></call></expr></argument> )<pos:position pos:line="46" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="69"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="48" pos:column="5">// buffered bytes we have not swapped out yet</comment>
    <decl_stmt><decl><type><specifier pos:line="49" pos:column="5">const<pos:position pos:line="49" pos:column="10"/></specifier> <name pos:line="49" pos:column="11">int64_t<pos:position pos:line="49" pos:column="18"/></name></type> <name pos:line="49" pos:column="19">swapout_maxsize<pos:position pos:line="49" pos:column="34"/></name> <init pos:line="49" pos:column="35">= <expr><call><name><name pos:line="49" pos:column="37">mem_obj<pos:position pos:line="49" pos:column="44"/></name><operator pos:line="49" pos:column="44">-&gt;<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="46">availableForSwapOut<pos:position pos:line="49" pos:column="65"/></name></name><argument_list pos:line="49" pos:column="65">()<pos:position pos:line="49" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="49" pos:column="68"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">assert<pos:position pos:line="50" pos:column="11"/></name><argument_list pos:line="50" pos:column="11">(<argument><expr><name pos:line="50" pos:column="12">swapout_maxsize<pos:position pos:line="50" pos:column="27"/></name> <operator pos:line="50" pos:column="28">&gt;=<pos:position pos:line="50" pos:column="33"/></operator> <literal type="number" pos:line="50" pos:column="31">0<pos:position pos:line="50" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">debugs<pos:position pos:line="51" pos:column="11"/></name><argument_list pos:line="51" pos:column="11">(<argument><expr><literal type="number" pos:line="51" pos:column="12">20<pos:position pos:line="51" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="16">7<pos:position pos:line="51" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="19">"storeSwapOut: swapout_size = "<pos:position pos:line="51" pos:column="50"/></literal> <operator pos:line="51" pos:column="51">&lt;&lt;<pos:position pos:line="51" pos:column="59"/></operator> <name pos:line="51" pos:column="54">swapout_maxsize<pos:position pos:line="51" pos:column="69"/></name></expr></argument>)<pos:position pos:line="51" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="71"/></expr_stmt>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">swapout_maxsize<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">==<pos:position pos:line="53" pos:column="27"/></operator> <literal type="number" pos:line="53" pos:column="28">0<pos:position pos:line="53" pos:column="29"/></literal></expr>)<pos:position pos:line="53" pos:column="30"/></condition><then pos:line="53" pos:column="30"> <block pos:line="53" pos:column="31">{ <comment type="line" pos:line="53" pos:column="33">// swapped everything we got</comment>
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">store_status<pos:position pos:line="54" pos:column="25"/></name> <operator pos:line="54" pos:column="26">==<pos:position pos:line="54" pos:column="28"/></operator> <name pos:line="54" pos:column="29">STORE_OK<pos:position pos:line="54" pos:column="37"/></name></expr>)<pos:position pos:line="54" pos:column="38"/></condition><then pos:line="54" pos:column="38"> <block pos:line="54" pos:column="39">{ <comment type="line" pos:line="54" pos:column="41">// got everything we wanted</comment>
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">assert<pos:position pos:line="55" pos:column="19"/></name><argument_list pos:line="55" pos:column="19">(<argument><expr><name><name pos:line="55" pos:column="20">mem_obj<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">-&gt;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="29">object_sz<pos:position pos:line="55" pos:column="38"/></name></name> <operator pos:line="55" pos:column="39">&gt;=<pos:position pos:line="55" pos:column="44"/></operator> <literal type="number" pos:line="55" pos:column="42">0<pos:position pos:line="55" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">swapOutFileClose<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name><name pos:line="56" pos:column="30">StoreIOState<pos:position pos:line="56" pos:column="42"/></name><operator pos:line="56" pos:column="42">::<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="44">wroteAll<pos:position pos:line="56" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="57" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="58" pos:column="9">// else need more data to swap out</comment>
        <return pos:line="59" pos:column="9">return;<pos:position pos:line="59" pos:column="16"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">store_status<pos:position pos:line="62" pos:column="21"/></name> <operator pos:line="62" pos:column="22">==<pos:position pos:line="62" pos:column="24"/></operator> <name pos:line="62" pos:column="25">STORE_PENDING<pos:position pos:line="62" pos:column="38"/></name></expr>)<pos:position pos:line="62" pos:column="39"/></condition><then pos:line="62" pos:column="39"> <block pos:line="62" pos:column="40">{
        <comment type="block" pos:line="63" pos:column="9">/* wait for a full block to write */</comment>

        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">swapout_maxsize<pos:position pos:line="65" pos:column="28"/></name> <operator pos:line="65" pos:column="29">&lt;<pos:position pos:line="65" pos:column="33"/></operator> <name pos:line="65" pos:column="31">SM_PAGE_SIZE<pos:position pos:line="65" pos:column="43"/></name></expr>)<pos:position pos:line="65" pos:column="44"/></condition><then pos:line="65" pos:column="44">
            <block type="pseudo"><return pos:line="66" pos:column="13">return;<pos:position pos:line="66" pos:column="20"/></return></block></then></if>

        <comment type="block" pos:line="68" pos:column="9">/*
         * Wait until we are below the disk FD limit, only if the
         * next server-side read won't be deferred.
         */</comment>
        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><call><name pos:line="72" pos:column="13">storeTooManyDiskFilesOpen<pos:position pos:line="72" pos:column="38"/></name><argument_list pos:line="72" pos:column="38">()<pos:position pos:line="72" pos:column="40"/></argument_list></call> <operator pos:line="72" pos:column="41">&amp;&amp;<pos:position pos:line="72" pos:column="51"/></operator> <operator pos:line="72" pos:column="44">!<pos:position pos:line="72" pos:column="45"/></operator><call><name pos:line="72" pos:column="45">checkDeferRead<pos:position pos:line="72" pos:column="59"/></name><argument_list pos:line="72" pos:column="59">(<argument><expr><operator pos:line="72" pos:column="60">-<pos:position pos:line="72" pos:column="61"/></operator><literal type="number" pos:line="72" pos:column="61">1<pos:position pos:line="72" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="64"/></condition><then pos:line="72" pos:column="64">
            <block type="pseudo"><return pos:line="73" pos:column="13">return;<pos:position pos:line="73" pos:column="20"/></return></block></then></if>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="76" pos:column="5">/* Ok, we have stuff to swap out.  Is there a swapout.sio open? */</comment>
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><name pos:line="77" pos:column="9">swap_status<pos:position pos:line="77" pos:column="20"/></name> <operator pos:line="77" pos:column="21">==<pos:position pos:line="77" pos:column="23"/></operator> <name pos:line="77" pos:column="24">SWAPOUT_NONE<pos:position pos:line="77" pos:column="36"/></name></expr>)<pos:position pos:line="77" pos:column="37"/></condition><then pos:line="77" pos:column="37"> <block pos:line="77" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">assert<pos:position pos:line="78" pos:column="15"/></name><argument_list pos:line="78" pos:column="15">(<argument><expr><name><name pos:line="78" pos:column="16">mem_obj<pos:position pos:line="78" pos:column="23"/></name><operator pos:line="78" pos:column="23">-&gt;<pos:position pos:line="78" pos:column="28"/></operator><name pos:line="78" pos:column="25">swapout<pos:position pos:line="78" pos:column="32"/></name><operator pos:line="78" pos:column="32">.<pos:position pos:line="78" pos:column="33"/></operator><name pos:line="78" pos:column="33">sio<pos:position pos:line="78" pos:column="36"/></name></name> <operator pos:line="78" pos:column="37">==<pos:position pos:line="78" pos:column="39"/></operator> <name pos:line="78" pos:column="40">NULL<pos:position pos:line="78" pos:column="44"/></name></expr></argument>)<pos:position pos:line="78" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">assert<pos:position pos:line="79" pos:column="15"/></name><argument_list pos:line="79" pos:column="15">(<argument><expr><name><name pos:line="79" pos:column="16">mem_obj<pos:position pos:line="79" pos:column="23"/></name><operator pos:line="79" pos:column="23">-&gt;<pos:position pos:line="79" pos:column="28"/></operator><name pos:line="79" pos:column="25">inmem_lo<pos:position pos:line="79" pos:column="33"/></name></name> <operator pos:line="79" pos:column="34">==<pos:position pos:line="79" pos:column="36"/></operator> <literal type="number" pos:line="79" pos:column="37">0<pos:position pos:line="79" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">storeSwapOutStart<pos:position pos:line="80" pos:column="26"/></name><argument_list pos:line="80" pos:column="26">(<argument><expr><name pos:line="80" pos:column="27">this<pos:position pos:line="80" pos:column="31"/></name></expr></argument>)<pos:position pos:line="80" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt> <comment type="line" pos:line="80" pos:column="34">// sets SwapOut::swImpossible on failures</comment>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name><name pos:line="83" pos:column="9">mem_obj<pos:position pos:line="83" pos:column="16"/></name><operator pos:line="83" pos:column="16">-&gt;<pos:position pos:line="83" pos:column="21"/></operator><name pos:line="83" pos:column="18">swapout<pos:position pos:line="83" pos:column="25"/></name><operator pos:line="83" pos:column="25">.<pos:position pos:line="83" pos:column="26"/></operator><name pos:line="83" pos:column="26">sio<pos:position pos:line="83" pos:column="29"/></name></name> <operator pos:line="83" pos:column="30">==<pos:position pos:line="83" pos:column="32"/></operator> <name pos:line="83" pos:column="33">NULL<pos:position pos:line="83" pos:column="37"/></name></expr>)<pos:position pos:line="83" pos:column="38"/></condition><then pos:line="83" pos:column="38">
        <block type="pseudo"><return pos:line="84" pos:column="9">return;<pos:position pos:line="84" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">doPages<pos:position pos:line="86" pos:column="12"/></name><argument_list pos:line="86" pos:column="12">(<argument><expr><name pos:line="86" pos:column="13">this<pos:position pos:line="86" pos:column="17"/></name></expr></argument>)<pos:position pos:line="86" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="19"/></expr_stmt>

    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><name><name pos:line="88" pos:column="9">mem_obj<pos:position pos:line="88" pos:column="16"/></name><operator pos:line="88" pos:column="16">-&gt;<pos:position pos:line="88" pos:column="21"/></operator><name pos:line="88" pos:column="18">swapout<pos:position pos:line="88" pos:column="25"/></name><operator pos:line="88" pos:column="25">.<pos:position pos:line="88" pos:column="26"/></operator><name pos:line="88" pos:column="26">sio<pos:position pos:line="88" pos:column="29"/></name></name> <operator pos:line="88" pos:column="30">==<pos:position pos:line="88" pos:column="32"/></operator> <name pos:line="88" pos:column="33">NULL<pos:position pos:line="88" pos:column="37"/></name></expr>)<pos:position pos:line="88" pos:column="38"/></condition><then pos:line="88" pos:column="38">
        <comment type="block" pos:line="89" pos:column="9">/* oops, we're not swapping out any more */</comment>
        <block type="pseudo"><return pos:line="90" pos:column="9">return;<pos:position pos:line="90" pos:column="16"/></return></block></then></if>

    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name pos:line="92" pos:column="9">store_status<pos:position pos:line="92" pos:column="21"/></name> <operator pos:line="92" pos:column="22">==<pos:position pos:line="92" pos:column="24"/></operator> <name pos:line="92" pos:column="25">STORE_OK<pos:position pos:line="92" pos:column="33"/></name></expr>)<pos:position pos:line="92" pos:column="34"/></condition><then pos:line="92" pos:column="34"> <block pos:line="92" pos:column="35">{
        <comment type="block" pos:line="93" pos:column="9">/*
         * If the state is STORE_OK, then all data must have been given
         * to the filesystem at this point because storeSwapOut() is
         * not going to be called again for this entry.
         */</comment>
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">assert<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><name><name pos:line="98" pos:column="16">mem_obj<pos:position pos:line="98" pos:column="23"/></name><operator pos:line="98" pos:column="23">-&gt;<pos:position pos:line="98" pos:column="28"/></operator><name pos:line="98" pos:column="25">object_sz<pos:position pos:line="98" pos:column="34"/></name></name> <operator pos:line="98" pos:column="35">&gt;=<pos:position pos:line="98" pos:column="40"/></operator> <literal type="number" pos:line="98" pos:column="38">0<pos:position pos:line="98" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="99" pos:column="9">assert<pos:position pos:line="99" pos:column="15"/></name><argument_list pos:line="99" pos:column="15">(<argument><expr><call><name><name pos:line="99" pos:column="16">mem_obj<pos:position pos:line="99" pos:column="23"/></name><operator pos:line="99" pos:column="23">-&gt;<pos:position pos:line="99" pos:column="28"/></operator><name pos:line="99" pos:column="25">endOffset<pos:position pos:line="99" pos:column="34"/></name></name><argument_list pos:line="99" pos:column="34">()<pos:position pos:line="99" pos:column="36"/></argument_list></call> <operator pos:line="99" pos:column="37">==<pos:position pos:line="99" pos:column="39"/></operator> <name><name pos:line="99" pos:column="40">mem_obj<pos:position pos:line="99" pos:column="47"/></name><operator pos:line="99" pos:column="47">-&gt;<pos:position pos:line="99" pos:column="52"/></operator><name pos:line="99" pos:column="49">swapout<pos:position pos:line="99" pos:column="56"/></name><operator pos:line="99" pos:column="56">.<pos:position pos:line="99" pos:column="57"/></operator><name pos:line="99" pos:column="57">queue_offset<pos:position pos:line="99" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="100" pos:column="9">swapOutFileClose<pos:position pos:line="100" pos:column="25"/></name><argument_list pos:line="100" pos:column="25">(<argument><expr><name><name pos:line="100" pos:column="26">StoreIOState<pos:position pos:line="100" pos:column="38"/></name><operator pos:line="100" pos:column="38">::<pos:position pos:line="100" pos:column="40"/></operator><name pos:line="100" pos:column="40">wroteAll<pos:position pos:line="100" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
