<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5705_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">xmalloc<pos:position pos:line="2" pos:column="8"/></name><parameter_list pos:line="2" pos:column="8">(<parameter><decl><type><name pos:line="2" pos:column="9">size_t<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">sz<pos:position pos:line="2" pos:column="18"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">void<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">p<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">PROF_start<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">xmalloc<pos:position pos:line="6" pos:column="23"/></name></expr></argument>)<pos:position pos:line="6" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="25"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">sz<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">&lt;<pos:position pos:line="8" pos:column="16"/></operator> <literal type="number" pos:line="8" pos:column="14">1<pos:position pos:line="8" pos:column="15"/></literal></expr>)<pos:position pos:line="8" pos:column="16"/></condition><then pos:line="8" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">sz<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">1<pos:position pos:line="9" pos:column="15"/></literal></expr>;<pos:position pos:line="9" pos:column="16"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">PROF_start<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name pos:line="11" pos:column="16">malloc<pos:position pos:line="11" pos:column="22"/></name></expr></argument>)<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">p<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">malloc<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">sz<pos:position pos:line="13" pos:column="18"/></name></expr></argument>)<pos:position pos:line="13" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">PROF_stop<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">malloc<pos:position pos:line="15" pos:column="21"/></name></expr></argument>)<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">p<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">==<pos:position pos:line="17" pos:column="13"/></operator> <name pos:line="17" pos:column="14">NULL<pos:position pos:line="17" pos:column="18"/></name></expr>)<pos:position pos:line="17" pos:column="19"/></condition><then pos:line="17" pos:column="19"> <block pos:line="17" pos:column="20">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">failure_notify<pos:position pos:line="18" pos:column="27"/></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28"> <block pos:line="18" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">snprintf<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">msg<pos:position pos:line="19" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="27">128<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="32">"xmalloc: Unable to allocate %d bytes!\n"<pos:position pos:line="19" pos:column="73"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="20" pos:column="22">(<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="23">int<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">)<pos:position pos:line="20" pos:column="27"/></operator> <name pos:line="20" pos:column="28">sz<pos:position pos:line="20" pos:column="30"/></name></expr></argument>)<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call pos:line="21" pos:column="13">(<modifier pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></modifier><name pos:line="21" pos:column="15">failure_notify<pos:position pos:line="21" pos:column="29"/></name>) <argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">msg<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></then> <else pos:line="22" pos:column="11">else <block pos:line="22" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">perror<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="string" pos:line="23" pos:column="20">"malloc"<pos:position pos:line="23" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name pos:line="26" pos:column="9">exit<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><literal type="number" pos:line="26" pos:column="14">1<pos:position pos:line="26" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">XMALLOC_DEBUG<pos:position pos:line="29" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">check_malloc<pos:position pos:line="30" pos:column="17"/></name><argument_list pos:line="30" pos:column="17">(<argument><expr><name pos:line="30" pos:column="18">p<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="21">sz<pos:position pos:line="30" pos:column="23"/></name></expr></argument>)<pos:position pos:line="30" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>

<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif<pos:position pos:line="32" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">if<pos:position pos:line="33" pos:column="4"/></cpp:directive> <expr><name pos:line="33" pos:column="5">XMALLOC_STATISTICS<pos:position pos:line="33" pos:column="23"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="35" pos:column="5">malloc_stat<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><name pos:line="35" pos:column="17">sz<pos:position pos:line="35" pos:column="19"/></name></expr></argument>)<pos:position pos:line="35" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="21"/></expr_stmt>

<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif<pos:position pos:line="37" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">if<pos:position pos:line="38" pos:column="4"/></cpp:directive> <expr><name pos:line="38" pos:column="5">XMALLOC_TRACE<pos:position pos:line="38" pos:column="18"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">xmalloc_show_trace<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name pos:line="40" pos:column="24">p<pos:position pos:line="40" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="27">1<pos:position pos:line="40" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>

<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">if<pos:position pos:line="43" pos:column="4"/></cpp:directive> <expr><name pos:line="43" pos:column="5">MEM_GEN_TRACE<pos:position pos:line="43" pos:column="18"/></name></expr></cpp:if>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">tracefp<pos:position pos:line="45" pos:column="16"/></name></expr>)<pos:position pos:line="45" pos:column="17"/></condition><then pos:line="45" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="9">fprintf<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">tracefp<pos:position pos:line="46" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="26">"m:%d:%p\n"<pos:position pos:line="46" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="39">sz<pos:position pos:line="46" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="43">p<pos:position pos:line="46" pos:column="44"/></name></expr></argument>)<pos:position pos:line="46" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="46"/></expr_stmt></block></then></if>

<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="50" pos:column="5">PROF_stop<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">xmalloc<pos:position pos:line="50" pos:column="22"/></name></expr></argument>)<pos:position pos:line="50" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="24"/></expr_stmt>

    <return pos:line="52" pos:column="5">return <expr><operator pos:line="52" pos:column="12">(<pos:position pos:line="52" pos:column="13"/></operator><name pos:line="52" pos:column="13">p<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">)<pos:position pos:line="52" pos:column="15"/></operator></expr>;<pos:position pos:line="52" pos:column="16"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
