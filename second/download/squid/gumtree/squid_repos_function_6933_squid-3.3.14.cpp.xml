<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6933_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int64_t<pos:position pos:line="1" pos:column="8"/></name></type>
<name pos:line="2" pos:column="1">strtoll<pos:position pos:line="2" pos:column="8"/></name> <parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><specifier pos:line="2" pos:column="10">const<pos:position pos:line="2" pos:column="15"/></specifier> <name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">nptr<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier><modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">endptr<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="43">int<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">base<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">register<pos:position pos:line="4" pos:column="13"/></specifier> <specifier pos:line="4" pos:column="14">const<pos:position pos:line="4" pos:column="19"/></specifier> <name pos:line="4" pos:column="20">char<pos:position pos:line="4" pos:column="24"/></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">s<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">nptr<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">register<pos:position pos:line="5" pos:column="13"/></specifier> <name pos:line="5" pos:column="14">uint64_t<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">acc<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">register<pos:position pos:line="6" pos:column="13"/></specifier> <name pos:line="6" pos:column="14">int<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">c<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">register<pos:position pos:line="7" pos:column="13"/></specifier> <name pos:line="7" pos:column="14">uint64_t<pos:position pos:line="7" pos:column="22"/></name></type> <name pos:line="7" pos:column="23">cutoff<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">register<pos:position pos:line="8" pos:column="13"/></specifier> <name pos:line="8" pos:column="14">int<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">neg<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="27">any<pos:position pos:line="8" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="32">cutlim<pos:position pos:line="8" pos:column="38"/></name></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/*
     * Skip white space and pick up leading +/- sign if any.
     * If base is 0, allow 0x for hex and 0 for octal, else
     * assume decimal; if base is already 16, allow 0x.
     */</comment>
    <do pos:line="15" pos:column="5">do <block pos:line="15" pos:column="8">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">c<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <operator pos:line="16" pos:column="13">*<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">s<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">++<pos:position pos:line="16" pos:column="17"/></operator></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block> while <condition pos:line="17" pos:column="13">(<expr><call><name pos:line="17" pos:column="14">xisspace<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">c<pos:position pos:line="17" pos:column="24"/></name></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="26"/></condition>;<pos:position pos:line="17" pos:column="27"/></do>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">c<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">==<pos:position pos:line="18" pos:column="13"/></operator> <literal type="char" pos:line="18" pos:column="14">'-'<pos:position pos:line="18" pos:column="17"/></literal></expr>)<pos:position pos:line="18" pos:column="18"/></condition><then pos:line="18" pos:column="18"> <block pos:line="18" pos:column="19">{
        <expr_stmt><expr><name pos:line="19" pos:column="9">neg<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <literal type="number" pos:line="19" pos:column="15">1<pos:position pos:line="19" pos:column="16"/></literal></expr>;<pos:position pos:line="19" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">c<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <operator pos:line="20" pos:column="13">*<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">s<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">++<pos:position pos:line="20" pos:column="17"/></operator></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then> <elseif pos:line="21" pos:column="7">else <if pos:line="21" pos:column="12">if <condition pos:line="21" pos:column="15">(<expr><name pos:line="21" pos:column="16">c<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">==<pos:position pos:line="21" pos:column="20"/></operator> <literal type="char" pos:line="21" pos:column="21">'+'<pos:position pos:line="21" pos:column="24"/></literal></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="9">c<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <operator pos:line="22" pos:column="13">*<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">s<pos:position pos:line="22" pos:column="15"/></name><operator pos:line="22" pos:column="15">++<pos:position pos:line="22" pos:column="17"/></operator></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt></block></then></if></elseif></if>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">(<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">base<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">==<pos:position pos:line="23" pos:column="17"/></operator> <literal type="number" pos:line="23" pos:column="18">0<pos:position pos:line="23" pos:column="19"/></literal> <operator pos:line="23" pos:column="20">||<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">base<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">==<pos:position pos:line="23" pos:column="30"/></operator> <literal type="number" pos:line="23" pos:column="31">16<pos:position pos:line="23" pos:column="33"/></literal><operator pos:line="23" pos:column="33">)<pos:position pos:line="23" pos:column="34"/></operator> <operator pos:line="23" pos:column="35">&amp;&amp;<pos:position pos:line="23" pos:column="45"/></operator> <name pos:line="23" pos:column="38">c<pos:position pos:line="23" pos:column="39"/></name> <operator pos:line="23" pos:column="40">==<pos:position pos:line="23" pos:column="42"/></operator> <literal type="char" pos:line="23" pos:column="43">'0'<pos:position pos:line="23" pos:column="46"/></literal> <operator pos:line="23" pos:column="47">&amp;&amp;<pos:position pos:line="23" pos:column="57"/></operator> <operator pos:line="23" pos:column="50">(<pos:position pos:line="23" pos:column="51"/></operator><operator pos:line="23" pos:column="51">*<pos:position pos:line="23" pos:column="52"/></operator><name pos:line="23" pos:column="52">s<pos:position pos:line="23" pos:column="53"/></name> <operator pos:line="23" pos:column="54">==<pos:position pos:line="23" pos:column="56"/></operator> <literal type="char" pos:line="23" pos:column="57">'x'<pos:position pos:line="23" pos:column="60"/></literal> <operator pos:line="23" pos:column="61">||<pos:position pos:line="23" pos:column="63"/></operator> <operator pos:line="23" pos:column="64">*<pos:position pos:line="23" pos:column="65"/></operator><name pos:line="23" pos:column="65">s<pos:position pos:line="23" pos:column="66"/></name> <operator pos:line="23" pos:column="67">==<pos:position pos:line="23" pos:column="69"/></operator> <literal type="char" pos:line="23" pos:column="70">'X'<pos:position pos:line="23" pos:column="73"/></literal><operator pos:line="23" pos:column="73">)<pos:position pos:line="23" pos:column="74"/></operator></expr>)<pos:position pos:line="23" pos:column="75"/></condition><then pos:line="23" pos:column="75"> <block pos:line="23" pos:column="76">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">c<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <name><name pos:line="24" pos:column="13">s<pos:position pos:line="24" pos:column="14"/></name><index pos:line="24" pos:column="14">[<expr><literal type="number" pos:line="24" pos:column="15">1<pos:position pos:line="24" pos:column="16"/></literal></expr>]<pos:position pos:line="24" pos:column="17"/></index></name></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">s<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">+=<pos:position pos:line="25" pos:column="13"/></operator> <literal type="number" pos:line="25" pos:column="14">2<pos:position pos:line="25" pos:column="15"/></literal></expr>;<pos:position pos:line="25" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">base<pos:position pos:line="26" pos:column="13"/></name> <operator pos:line="26" pos:column="14">=<pos:position pos:line="26" pos:column="15"/></operator> <literal type="number" pos:line="26" pos:column="16">16<pos:position pos:line="26" pos:column="18"/></literal></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">base<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">==<pos:position pos:line="28" pos:column="16"/></operator> <literal type="number" pos:line="28" pos:column="17">0<pos:position pos:line="28" pos:column="18"/></literal></expr>)<pos:position pos:line="28" pos:column="19"/></condition><then pos:line="28" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="9">base<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">=<pos:position pos:line="29" pos:column="15"/></operator> <ternary><condition><expr><name pos:line="29" pos:column="16">c<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">==<pos:position pos:line="29" pos:column="20"/></operator> <literal type="char" pos:line="29" pos:column="21">'0'<pos:position pos:line="29" pos:column="24"/></literal></expr> ?<pos:position pos:line="29" pos:column="26"/></condition><then pos:line="29" pos:column="26"> <expr><literal type="number" pos:line="29" pos:column="27">8<pos:position pos:line="29" pos:column="28"/></literal></expr> <pos:position pos:line="29" pos:column="29"/></then><else pos:line="29" pos:column="29">: <expr><literal type="number" pos:line="29" pos:column="31">10<pos:position pos:line="29" pos:column="33"/></literal></expr></else></ternary></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="31" pos:column="5">/*
     * Compute the cutoff value between legal numbers and illegal
     * numbers.  That is the largest legal value, divided by the
     * base.  An input number that is greater than this value, if
     * followed by a legal input character, is too big.  One that
     * is equal to this value may be valid or not; the limit
     * between valid and invalid numbers is then based on the last
     * digit.  For instance, if the range for longs is
     * [-2147483648..2147483647] and the input base is 10,
     * cutoff will be set to 214748364 and cutlim to either
     * 7 (neg==0) or 8 (neg==1), meaning that if we have accumulated
     * a value &gt; 214748364, or equal but the next digit is &gt; 7 (or 8),
     * the number is too big, and we will return a range error.
     *
     * Set any if any `digits' consumed; make it negative to indicate
     * overflow.
     */</comment>
    <expr_stmt><expr><name pos:line="48" pos:column="5">cutoff<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">=<pos:position pos:line="48" pos:column="13"/></operator> <ternary><condition><expr><name pos:line="48" pos:column="14">neg<pos:position pos:line="48" pos:column="17"/></name></expr> ?<pos:position pos:line="48" pos:column="19"/></condition><then pos:line="48" pos:column="19"> <expr><operator pos:line="48" pos:column="20">-<pos:position pos:line="48" pos:column="21"/></operator><operator pos:line="48" pos:column="21">(<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="22">uint64_t<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">)<pos:position pos:line="48" pos:column="31"/></operator> <name pos:line="48" pos:column="32">INT64_MIN<pos:position pos:line="48" pos:column="41"/></name></expr> <pos:position pos:line="48" pos:column="42"/></then><else pos:line="48" pos:column="42">: <expr><name pos:line="48" pos:column="44">INT64_MAX<pos:position pos:line="48" pos:column="53"/></name></expr></else></ternary></expr>;<pos:position pos:line="48" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="49" pos:column="5">cutlim<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator> <name pos:line="49" pos:column="14">cutoff<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">%<pos:position pos:line="49" pos:column="22"/></operator> <operator pos:line="49" pos:column="23">(<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="24">uint64_t<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">)<pos:position pos:line="49" pos:column="33"/></operator> <name pos:line="49" pos:column="34">base<pos:position pos:line="49" pos:column="38"/></name></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="50" pos:column="5">cutoff<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">/=<pos:position pos:line="50" pos:column="14"/></operator> <operator pos:line="50" pos:column="15">(<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="16">uint64_t<pos:position pos:line="50" pos:column="24"/></name><operator pos:line="50" pos:column="24">)<pos:position pos:line="50" pos:column="25"/></operator> <name pos:line="50" pos:column="26">base<pos:position pos:line="50" pos:column="30"/></name></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>
    <for pos:line="51" pos:column="5">for <control pos:line="51" pos:column="9">(<init><expr><name pos:line="51" pos:column="10">acc<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <literal type="number" pos:line="51" pos:column="16">0<pos:position pos:line="51" pos:column="17"/></literal></expr><operator pos:line="51" pos:column="17">,<pos:position pos:line="51" pos:column="18"/></operator> <expr><name pos:line="51" pos:column="19">any<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <literal type="number" pos:line="51" pos:column="25">0<pos:position pos:line="51" pos:column="26"/></literal></expr>;<pos:position pos:line="51" pos:column="27"/></init><condition pos:line="51" pos:column="27">;<pos:position pos:line="51" pos:column="28"/></condition> <incr><expr><name pos:line="51" pos:column="29">c<pos:position pos:line="51" pos:column="30"/></name> <operator pos:line="51" pos:column="31">=<pos:position pos:line="51" pos:column="32"/></operator> <operator pos:line="51" pos:column="33">*<pos:position pos:line="51" pos:column="34"/></operator><name pos:line="51" pos:column="34">s<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">++<pos:position pos:line="51" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="51" pos:column="38"/></control> <block pos:line="51" pos:column="39">{
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">xisdigit<pos:position pos:line="52" pos:column="21"/></name><argument_list pos:line="52" pos:column="21">(<argument><expr><name pos:line="52" pos:column="22">c<pos:position pos:line="52" pos:column="23"/></name></expr></argument>)<pos:position pos:line="52" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="25"/></condition><then pos:line="52" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="13">c<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">-=<pos:position pos:line="53" pos:column="17"/></operator> <literal type="char" pos:line="53" pos:column="18">'0'<pos:position pos:line="53" pos:column="21"/></literal></expr>;<pos:position pos:line="53" pos:column="22"/></expr_stmt></block></then>
        <elseif pos:line="54" pos:column="9">else <if pos:line="54" pos:column="14">if <condition pos:line="54" pos:column="17">(<expr><call><name pos:line="54" pos:column="18">xisalpha<pos:position pos:line="54" pos:column="26"/></name><argument_list pos:line="54" pos:column="26">(<argument><expr><name pos:line="54" pos:column="27">c<pos:position pos:line="54" pos:column="28"/></name></expr></argument>)<pos:position pos:line="54" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="30"/></condition><then pos:line="54" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="13">c<pos:position pos:line="55" pos:column="14"/></name> <operator pos:line="55" pos:column="15">-=<pos:position pos:line="55" pos:column="17"/></operator> <ternary><condition><expr><call><name pos:line="55" pos:column="18">xisupper<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">c<pos:position pos:line="55" pos:column="28"/></name></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr> ?<pos:position pos:line="55" pos:column="31"/></condition><then pos:line="55" pos:column="31"> <expr><literal type="char" pos:line="55" pos:column="32">'A'<pos:position pos:line="55" pos:column="35"/></literal> <operator pos:line="55" pos:column="36">-<pos:position pos:line="55" pos:column="37"/></operator> <literal type="number" pos:line="55" pos:column="38">10<pos:position pos:line="55" pos:column="40"/></literal></expr> <pos:position pos:line="55" pos:column="41"/></then><else pos:line="55" pos:column="41">: <expr><literal type="char" pos:line="55" pos:column="43">'a'<pos:position pos:line="55" pos:column="46"/></literal> <operator pos:line="55" pos:column="47">-<pos:position pos:line="55" pos:column="48"/></operator> <literal type="number" pos:line="55" pos:column="49">10<pos:position pos:line="55" pos:column="51"/></literal></expr></else></ternary></expr>;<pos:position pos:line="55" pos:column="52"/></expr_stmt></block></then></if></elseif>
        <else pos:line="56" pos:column="9">else
            <block type="pseudo"><break pos:line="57" pos:column="13">break;<pos:position pos:line="57" pos:column="19"/></break></block></else></if>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">c<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">&gt;=<pos:position pos:line="58" pos:column="20"/></operator> <name pos:line="58" pos:column="18">base<pos:position pos:line="58" pos:column="22"/></name></expr>)<pos:position pos:line="58" pos:column="23"/></condition><then pos:line="58" pos:column="23">
            <block type="pseudo"><break pos:line="59" pos:column="13">break;<pos:position pos:line="59" pos:column="19"/></break></block></then></if>
        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name><name pos:line="60" pos:column="13">any<pos:position pos:line="60" pos:column="16"/></name> <argument_list type="generic" pos:line="60" pos:column="17">&lt; <argument><expr><literal type="number" pos:line="60" pos:column="19">0<pos:position pos:line="60" pos:column="20"/></literal> <operator pos:line="60" pos:column="21">||<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">acc<pos:position pos:line="60" pos:column="27"/></name></expr></argument> &gt;<pos:position pos:line="60" pos:column="32"/></argument_list></name> <name pos:line="60" pos:column="30">cutoff<pos:position pos:line="60" pos:column="36"/></name> <operator pos:line="60" pos:column="37">||<pos:position pos:line="60" pos:column="39"/></operator> <operator pos:line="60" pos:column="40">(<pos:position pos:line="60" pos:column="41"/></operator><name pos:line="60" pos:column="41">acc<pos:position pos:line="60" pos:column="44"/></name> <operator pos:line="60" pos:column="45">==<pos:position pos:line="60" pos:column="47"/></operator> <name pos:line="60" pos:column="48">cutoff<pos:position pos:line="60" pos:column="54"/></name> <operator pos:line="60" pos:column="55">&amp;&amp;<pos:position pos:line="60" pos:column="65"/></operator> <name pos:line="60" pos:column="58">c<pos:position pos:line="60" pos:column="59"/></name> <operator pos:line="60" pos:column="60">&gt;<pos:position pos:line="60" pos:column="64"/></operator> <name pos:line="60" pos:column="62">cutlim<pos:position pos:line="60" pos:column="68"/></name><operator pos:line="60" pos:column="68">)<pos:position pos:line="60" pos:column="69"/></operator></expr>)<pos:position pos:line="60" pos:column="70"/></condition><then pos:line="60" pos:column="70">
            <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="13">any<pos:position pos:line="61" pos:column="16"/></name> <operator pos:line="61" pos:column="17">=<pos:position pos:line="61" pos:column="18"/></operator> <operator pos:line="61" pos:column="19">-<pos:position pos:line="61" pos:column="20"/></operator><literal type="number" pos:line="61" pos:column="20">1<pos:position pos:line="61" pos:column="21"/></literal></expr>;<pos:position pos:line="61" pos:column="22"/></expr_stmt></block></then>
        <else pos:line="62" pos:column="9">else <block pos:line="62" pos:column="14">{
            <expr_stmt><expr><name pos:line="63" pos:column="13">any<pos:position pos:line="63" pos:column="16"/></name> <operator pos:line="63" pos:column="17">=<pos:position pos:line="63" pos:column="18"/></operator> <literal type="number" pos:line="63" pos:column="19">1<pos:position pos:line="63" pos:column="20"/></literal></expr>;<pos:position pos:line="63" pos:column="21"/></expr_stmt>
            <expr_stmt><expr><name pos:line="64" pos:column="13">acc<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">*=<pos:position pos:line="64" pos:column="19"/></operator> <name pos:line="64" pos:column="20">base<pos:position pos:line="64" pos:column="24"/></name></expr>;<pos:position pos:line="64" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="65" pos:column="13">acc<pos:position pos:line="65" pos:column="16"/></name> <operator pos:line="65" pos:column="17">+=<pos:position pos:line="65" pos:column="19"/></operator> <name pos:line="65" pos:column="20">c<pos:position pos:line="65" pos:column="21"/></name></expr>;<pos:position pos:line="65" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="66" pos:column="10"/></block></else></if>
    }<pos:position pos:line="67" pos:column="6"/></block></for>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">any<pos:position pos:line="68" pos:column="12"/></name> <operator pos:line="68" pos:column="13">&lt;<pos:position pos:line="68" pos:column="17"/></operator> <literal type="number" pos:line="68" pos:column="15">0<pos:position pos:line="68" pos:column="16"/></literal></expr>)<pos:position pos:line="68" pos:column="17"/></condition><then pos:line="68" pos:column="17"> <block pos:line="68" pos:column="18">{
        <expr_stmt><expr><name pos:line="69" pos:column="9">acc<pos:position pos:line="69" pos:column="12"/></name> <operator pos:line="69" pos:column="13">=<pos:position pos:line="69" pos:column="14"/></operator> <ternary><condition><expr><name pos:line="69" pos:column="15">neg<pos:position pos:line="69" pos:column="18"/></name></expr> ?<pos:position pos:line="69" pos:column="20"/></condition><then pos:line="69" pos:column="20"> <expr><name pos:line="69" pos:column="21">INT64_MIN<pos:position pos:line="69" pos:column="30"/></name></expr> <pos:position pos:line="69" pos:column="31"/></then><else pos:line="69" pos:column="31">: <expr><name pos:line="69" pos:column="33">INT64_MAX<pos:position pos:line="69" pos:column="42"/></name></expr></else></ternary></expr>;<pos:position pos:line="69" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="70" pos:column="9">errno<pos:position pos:line="70" pos:column="14"/></name> <operator pos:line="70" pos:column="15">=<pos:position pos:line="70" pos:column="16"/></operator> <name pos:line="70" pos:column="17">ERANGE<pos:position pos:line="70" pos:column="23"/></name></expr>;<pos:position pos:line="70" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></then> <elseif pos:line="71" pos:column="7">else <if pos:line="71" pos:column="12">if <condition pos:line="71" pos:column="15">(<expr><name pos:line="71" pos:column="16">neg<pos:position pos:line="71" pos:column="19"/></name></expr>)<pos:position pos:line="71" pos:column="20"/></condition><then pos:line="71" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="9">acc<pos:position pos:line="72" pos:column="12"/></name> <operator pos:line="72" pos:column="13">=<pos:position pos:line="72" pos:column="14"/></operator> <operator pos:line="72" pos:column="15">-<pos:position pos:line="72" pos:column="16"/></operator><name pos:line="72" pos:column="16">acc<pos:position pos:line="72" pos:column="19"/></name></expr>;<pos:position pos:line="72" pos:column="20"/></expr_stmt></block></then></if></elseif></if>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><name pos:line="73" pos:column="9">endptr<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">!=<pos:position pos:line="73" pos:column="18"/></operator> <literal type="number" pos:line="73" pos:column="19">0<pos:position pos:line="73" pos:column="20"/></literal></expr>)<pos:position pos:line="73" pos:column="21"/></condition><then pos:line="73" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="74" pos:column="9">*<pos:position pos:line="74" pos:column="10"/></operator><name pos:line="74" pos:column="10">endptr<pos:position pos:line="74" pos:column="16"/></name> <operator pos:line="74" pos:column="17">=<pos:position pos:line="74" pos:column="18"/></operator> <operator pos:line="74" pos:column="19">(<pos:position pos:line="74" pos:column="20"/></operator><name pos:line="74" pos:column="20">char<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">*<pos:position pos:line="74" pos:column="26"/></operator><operator pos:line="74" pos:column="26">)<pos:position pos:line="74" pos:column="27"/></operator> <operator pos:line="74" pos:column="28">(<pos:position pos:line="74" pos:column="29"/></operator><ternary><condition><expr><name pos:line="74" pos:column="29">any<pos:position pos:line="74" pos:column="32"/></name></expr> ?<pos:position pos:line="74" pos:column="34"/></condition><then pos:line="74" pos:column="34"> <expr><name pos:line="74" pos:column="35">s<pos:position pos:line="74" pos:column="36"/></name> <operator pos:line="74" pos:column="37">-<pos:position pos:line="74" pos:column="38"/></operator> <literal type="number" pos:line="74" pos:column="39">1<pos:position pos:line="74" pos:column="40"/></literal></expr> <pos:position pos:line="74" pos:column="41"/></then><else pos:line="74" pos:column="41">: <expr><name pos:line="74" pos:column="43">nptr<pos:position pos:line="74" pos:column="47"/></name></expr></else></ternary><operator pos:line="74" pos:column="47">)<pos:position pos:line="74" pos:column="48"/></operator></expr>;<pos:position pos:line="74" pos:column="49"/></expr_stmt></block></then></if>
    <return pos:line="75" pos:column="5">return <expr><name pos:line="75" pos:column="12">acc<pos:position pos:line="75" pos:column="15"/></name></expr>;<pos:position pos:line="75" pos:column="16"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
