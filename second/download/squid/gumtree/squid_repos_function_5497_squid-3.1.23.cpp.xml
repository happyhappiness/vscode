<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5497_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">evalequals<pos:position pos:line="2" pos:column="11"/></name> <parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">stackmember<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type> <name pos:line="2" pos:column="27">stack<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">int<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">depth<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">int<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">whereAmI<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
            <parameter><decl><type><name pos:line="3" pos:column="13">stackmember<pos:position pos:line="3" pos:column="24"/></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type> <name pos:line="3" pos:column="27">candidate<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="37"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">rv<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">stackmember<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">srv<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">depth<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">&lt;<pos:position pos:line="8" pos:column="20"/></operator> <literal type="number" pos:line="8" pos:column="18">3<pos:position pos:line="8" pos:column="19"/></literal></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20">
        <comment type="block" pos:line="9" pos:column="9">/* Not enough operands */</comment>
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><literal type="number" pos:line="10" pos:column="16">1<pos:position pos:line="10" pos:column="17"/></literal></expr>;<pos:position pos:line="10" pos:column="18"/></return></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">whereAmI<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">!=<pos:position pos:line="12" pos:column="20"/></operator> <operator pos:line="12" pos:column="21">*<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">depth<pos:position pos:line="12" pos:column="27"/></name> <operator pos:line="12" pos:column="28">-<pos:position pos:line="12" pos:column="29"/></operator> <literal type="number" pos:line="12" pos:column="30">2<pos:position pos:line="12" pos:column="31"/></literal></expr>)<pos:position pos:line="12" pos:column="32"/></condition><then pos:line="12" pos:column="32">
        <comment type="block" pos:line="13" pos:column="9">/* invalid stack */</comment>
        <block type="pseudo"><return pos:line="14" pos:column="9">return <expr><literal type="number" pos:line="14" pos:column="16">1<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="16" pos:column="5">rv<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <call><name pos:line="16" pos:column="10">membercompare<pos:position pos:line="16" pos:column="23"/></name> <argument_list pos:line="16" pos:column="24">(<argument><expr><name><name pos:line="16" pos:column="25">stack<pos:position pos:line="16" pos:column="30"/></name><index pos:line="16" pos:column="30">[<expr><name pos:line="16" pos:column="31">whereAmI<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">-<pos:position pos:line="16" pos:column="41"/></operator> <literal type="number" pos:line="16" pos:column="42">1<pos:position pos:line="16" pos:column="43"/></literal></expr>]<pos:position pos:line="16" pos:column="44"/></index></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="46">stack<pos:position pos:line="16" pos:column="51"/></name><index pos:line="16" pos:column="51">[<expr><name pos:line="16" pos:column="52">whereAmI<pos:position pos:line="16" pos:column="60"/></name> <operator pos:line="16" pos:column="61">+<pos:position pos:line="16" pos:column="62"/></operator> <literal type="number" pos:line="16" pos:column="63">1<pos:position pos:line="16" pos:column="64"/></literal></expr>]<pos:position pos:line="16" pos:column="65"/></index></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="67"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">rv<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">==<pos:position pos:line="18" pos:column="14"/></operator> <operator pos:line="18" pos:column="15">-<pos:position pos:line="18" pos:column="16"/></operator><literal type="number" pos:line="18" pos:column="16">2<pos:position pos:line="18" pos:column="17"/></literal></expr>)<pos:position pos:line="18" pos:column="18"/></condition><then pos:line="18" pos:column="18">
        <comment type="block" pos:line="19" pos:column="9">/* invalid comparison */</comment>
        <block type="pseudo"><return pos:line="20" pos:column="9">return <expr><literal type="number" pos:line="20" pos:column="16">1<pos:position pos:line="20" pos:column="17"/></literal></expr>;<pos:position pos:line="20" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">stackpop<pos:position pos:line="22" pos:column="13"/></name> <argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">stack<pos:position pos:line="22" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="22">depth<pos:position pos:line="22" pos:column="27"/></name></expr></argument>)<pos:position pos:line="22" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="29"/></expr_stmt>	<comment type="block" pos:line="22" pos:column="33">/* arg rhs */</comment>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">stackpop<pos:position pos:line="24" pos:column="13"/></name> <argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">stack<pos:position pos:line="24" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="22">depth<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>	<comment type="block" pos:line="24" pos:column="33">/* me */</comment>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">stackpop<pos:position pos:line="26" pos:column="13"/></name> <argument_list pos:line="26" pos:column="14">(<argument><expr><name pos:line="26" pos:column="15">stack<pos:position pos:line="26" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="22">depth<pos:position pos:line="26" pos:column="27"/></name></expr></argument>)<pos:position pos:line="26" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>	<comment type="block" pos:line="26" pos:column="33">/* arg lhs */</comment>

    <expr_stmt><expr><name><name pos:line="28" pos:column="5">srv<pos:position pos:line="28" pos:column="8"/></name><operator pos:line="28" pos:column="8">.<pos:position pos:line="28" pos:column="9"/></operator><name pos:line="28" pos:column="9">valuetype<pos:position pos:line="28" pos:column="18"/></name></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <name pos:line="28" pos:column="21">ESI_EXPR_EXPR<pos:position pos:line="28" pos:column="34"/></name></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="30" pos:column="5">srv<pos:position pos:line="30" pos:column="8"/></name><operator pos:line="30" pos:column="8">.<pos:position pos:line="30" pos:column="9"/></operator><name pos:line="30" pos:column="9">eval<pos:position pos:line="30" pos:column="13"/></name></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <name pos:line="30" pos:column="16">evalexpr<pos:position pos:line="30" pos:column="24"/></name></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="32" pos:column="5">srv<pos:position pos:line="32" pos:column="8"/></name><operator pos:line="32" pos:column="8">.<pos:position pos:line="32" pos:column="9"/></operator><name pos:line="32" pos:column="9">valuestored<pos:position pos:line="32" pos:column="20"/></name></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <name pos:line="32" pos:column="23">ESI_LITERAL_BOOL<pos:position pos:line="32" pos:column="39"/></name></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="34" pos:column="5">srv<pos:position pos:line="34" pos:column="8"/></name><operator pos:line="34" pos:column="8">.<pos:position pos:line="34" pos:column="9"/></operator><name pos:line="34" pos:column="9">value<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">.<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">integral<pos:position pos:line="34" pos:column="23"/></name></name> <operator pos:line="34" pos:column="24">=<pos:position pos:line="34" pos:column="25"/></operator> <ternary><condition><expr><name pos:line="34" pos:column="26">rv<pos:position pos:line="34" pos:column="28"/></name></expr> ?<pos:position pos:line="34" pos:column="30"/></condition><then pos:line="34" pos:column="30"> <expr><literal type="number" pos:line="34" pos:column="31">0<pos:position pos:line="34" pos:column="32"/></literal></expr> <pos:position pos:line="34" pos:column="33"/></then><else pos:line="34" pos:column="33">: <expr><literal type="number" pos:line="34" pos:column="35">1<pos:position pos:line="34" pos:column="36"/></literal></expr></else></ternary></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="36" pos:column="5">srv<pos:position pos:line="36" pos:column="8"/></name><operator pos:line="36" pos:column="8">.<pos:position pos:line="36" pos:column="9"/></operator><name pos:line="36" pos:column="9">precedence<pos:position pos:line="36" pos:column="19"/></name></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <literal type="number" pos:line="36" pos:column="22">1<pos:position pos:line="36" pos:column="23"/></literal></expr>;<pos:position pos:line="36" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="38" pos:column="5">stack<pos:position pos:line="38" pos:column="10"/></name><index pos:line="38" pos:column="10">[<expr><operator pos:line="38" pos:column="11">(<pos:position pos:line="38" pos:column="12"/></operator><operator pos:line="38" pos:column="12">*<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">depth<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">)<pos:position pos:line="38" pos:column="19"/></operator><operator pos:line="38" pos:column="19">++<pos:position pos:line="38" pos:column="21"/></operator></expr>]<pos:position pos:line="38" pos:column="22"/></index></name> <operator pos:line="38" pos:column="23">=<pos:position pos:line="38" pos:column="24"/></operator> <name pos:line="38" pos:column="25">srv<pos:position pos:line="38" pos:column="28"/></name></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="40" pos:column="5">/* we're out of way, try adding now */</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">!<pos:position pos:line="41" pos:column="10"/></operator><call><name pos:line="41" pos:column="10">addmember<pos:position pos:line="41" pos:column="19"/></name> <argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">stack<pos:position pos:line="41" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="28">depth<pos:position pos:line="41" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="35">candidate<pos:position pos:line="41" pos:column="44"/></name></expr></argument>)<pos:position pos:line="41" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="46"/></condition><then pos:line="41" pos:column="46">
        <comment type="block" pos:line="42" pos:column="9">/* Something wrong upstream */</comment>
        <block type="pseudo"><return pos:line="43" pos:column="9">return <expr><literal type="number" pos:line="43" pos:column="16">1<pos:position pos:line="43" pos:column="17"/></literal></expr>;<pos:position pos:line="43" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* debugs(86, 1, "?= " &lt;&lt; srv.value.integral &lt;&lt; " "); */</comment>
    <return pos:line="46" pos:column="5">return <expr><literal type="number" pos:line="46" pos:column="12">0<pos:position pos:line="46" pos:column="13"/></literal></expr>;<pos:position pos:line="46" pos:column="14"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
