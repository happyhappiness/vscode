<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4901_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">Parser<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">cleanMimePrefix<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">()<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Http1<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">::<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">Tokenizer<pos:position pos:line="4" pos:column="21"/></name></name></type> <name pos:line="4" pos:column="22">tok<pos:position pos:line="4" pos:column="25"/></name><argument_list pos:line="4" pos:column="25">(<argument><expr><name pos:line="4" pos:column="26">mimeHeaderBlock_<pos:position pos:line="4" pos:column="42"/></name></expr></argument>)<pos:position pos:line="4" pos:column="43"/></argument_list></decl>;<pos:position pos:line="4" pos:column="44"/></decl_stmt>
    <while pos:line="5" pos:column="5">while <condition pos:line="5" pos:column="11">(<expr><call><name><name pos:line="5" pos:column="12">tok<pos:position pos:line="5" pos:column="15"/></name><operator pos:line="5" pos:column="15">.<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">skipOne<pos:position pos:line="5" pos:column="23"/></name></name><argument_list pos:line="5" pos:column="23">(<argument><expr><call><name pos:line="5" pos:column="24">RelaxedDelimiterCharacters<pos:position pos:line="5" pos:column="50"/></name><argument_list pos:line="5" pos:column="50">()<pos:position pos:line="5" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="54"/></condition> <block pos:line="5" pos:column="55">{
        <expr_stmt><expr><operator pos:line="6" pos:column="9">(<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">void<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">)<pos:position pos:line="6" pos:column="15"/></operator><call><name><name pos:line="6" pos:column="15">tok<pos:position pos:line="6" pos:column="18"/></name><operator pos:line="6" pos:column="18">.<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">skipAll<pos:position pos:line="6" pos:column="26"/></name></name><argument_list pos:line="6" pos:column="26">(<argument><expr><call><name pos:line="6" pos:column="27">LineCharacters<pos:position pos:line="6" pos:column="41"/></name><argument_list pos:line="6" pos:column="41">()<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="45"/></expr_stmt> <comment type="line" pos:line="6" pos:column="46">// optional line content</comment>
        <comment type="line" pos:line="7" pos:column="9">// LF terminator is required.</comment>
        <comment type="line" pos:line="8" pos:column="9">// trust headersEnd() to ensure that we have at least one LF</comment>
        <expr_stmt><expr><operator pos:line="9" pos:column="9">(<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">void<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">)<pos:position pos:line="9" pos:column="15"/></operator><call><name><name pos:line="9" pos:column="15">tok<pos:position pos:line="9" pos:column="18"/></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">skipOne<pos:position pos:line="9" pos:column="26"/></name></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name><name pos:line="9" pos:column="27">CharacterSet<pos:position pos:line="9" pos:column="39"/></name><operator pos:line="9" pos:column="39">::<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="41">LF<pos:position pos:line="9" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></while>

    <comment type="line" pos:line="12" pos:column="5">// If mimeHeaderBlock_ had just whitespace line(s) followed by CRLF,</comment>
    <comment type="line" pos:line="13" pos:column="5">// then we skipped everything, including that terminating LF.</comment>
    <comment type="line" pos:line="14" pos:column="5">// Restore the terminating CRLF if needed.</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name><name pos:line="15" pos:column="9">tok<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">.<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">atEnd<pos:position pos:line="15" pos:column="18"/></name></name><argument_list pos:line="15" pos:column="18">()<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21">
        <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">mimeHeaderBlock_<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">=<pos:position pos:line="16" pos:column="27"/></operator> <call><name><name pos:line="16" pos:column="28">Http1<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">::<pos:position pos:line="16" pos:column="35"/></operator><name pos:line="16" pos:column="35">CrLf<pos:position pos:line="16" pos:column="39"/></name></name><argument_list pos:line="16" pos:column="39">()<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt></block></then>
    <else pos:line="17" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="9">mimeHeaderBlock_<pos:position pos:line="18" pos:column="25"/></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <call><name><name pos:line="18" pos:column="28">tok<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">.<pos:position pos:line="18" pos:column="32"/></operator><name pos:line="18" pos:column="32">remaining<pos:position pos:line="18" pos:column="41"/></name></name><argument_list pos:line="18" pos:column="41">()<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt></block></else></if>
    <comment type="line" pos:line="19" pos:column="5">// now mimeHeaderBlock_ has 0+ fields followed by the LF terminator</comment>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
