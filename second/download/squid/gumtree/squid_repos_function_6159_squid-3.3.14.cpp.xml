<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6159_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Format<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">Token<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">parse<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><specifier pos:line="2" pos:column="22">const<pos:position pos:line="2" pos:column="27"/></specifier> <name pos:line="2" pos:column="28">char<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">def<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">Quoting<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">quoting<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">cur<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name pos:line="4" pos:column="23">def<pos:position pos:line="4" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">l<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">l<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <call><name pos:line="8" pos:column="9">strcspn<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><name pos:line="8" pos:column="17">cur<pos:position pos:line="8" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="22">"%"<pos:position pos:line="8" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="27"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">l<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">&gt;<pos:position pos:line="10" pos:column="15"/></operator> <literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal></expr>)<pos:position pos:line="10" pos:column="15"/></condition><then pos:line="10" pos:column="15"> <block pos:line="10" pos:column="16">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">char<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">cp<pos:position pos:line="11" pos:column="17"/></name></decl>;<pos:position pos:line="11" pos:column="18"/></decl_stmt>
        <comment type="block" pos:line="12" pos:column="9">/* it's a string for sure, until \0 or the next % */</comment>
        <expr_stmt><expr><name pos:line="13" pos:column="9">cp<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">char<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">*<pos:position pos:line="13" pos:column="21"/></operator><operator pos:line="13" pos:column="21">)<pos:position pos:line="13" pos:column="22"/></operator><call><name pos:line="13" pos:column="22">xmalloc<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">l<pos:position pos:line="13" pos:column="31"/></name> <operator pos:line="13" pos:column="32">+<pos:position pos:line="13" pos:column="33"/></operator> <literal type="number" pos:line="13" pos:column="34">1<pos:position pos:line="13" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">xstrncpy<pos:position pos:line="14" pos:column="17"/></name><argument_list pos:line="14" pos:column="17">(<argument><expr><name pos:line="14" pos:column="18">cp<pos:position pos:line="14" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="22">cur<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">l<pos:position pos:line="14" pos:column="28"/></name> <operator pos:line="14" pos:column="29">+<pos:position pos:line="14" pos:column="30"/></operator> <literal type="number" pos:line="14" pos:column="31">1<pos:position pos:line="14" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="15" pos:column="9">type<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">LFT_STRING<pos:position pos:line="15" pos:column="26"/></name></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">data<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">.<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">string<pos:position pos:line="16" pos:column="20"/></name></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">cp<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>

        <while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><name pos:line="18" pos:column="16">l<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">&gt;<pos:position pos:line="18" pos:column="22"/></operator> <literal type="number" pos:line="18" pos:column="20">0<pos:position pos:line="18" pos:column="21"/></literal></expr>)<pos:position pos:line="18" pos:column="22"/></condition> <block pos:line="18" pos:column="23">{
            <switch pos:line="19" pos:column="13">switch <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">*<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">cur<pos:position pos:line="19" pos:column="25"/></name></expr>)<pos:position pos:line="19" pos:column="26"/></condition> <block pos:line="19" pos:column="27">{

            <case pos:line="21" pos:column="13">case <expr><literal type="char" pos:line="21" pos:column="18">'"'<pos:position pos:line="21" pos:column="21"/></literal></expr>:<pos:position pos:line="21" pos:column="22"/></case>

                <if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">*<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="22">quoting<pos:position pos:line="23" pos:column="29"/></name> <operator pos:line="23" pos:column="30">==<pos:position pos:line="23" pos:column="32"/></operator> <name pos:line="23" pos:column="33">LOG_QUOTE_NONE<pos:position pos:line="23" pos:column="47"/></name></expr>)<pos:position pos:line="23" pos:column="48"/></condition><then pos:line="23" pos:column="48">
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="24" pos:column="21">*<pos:position pos:line="24" pos:column="22"/></operator><name pos:line="24" pos:column="22">quoting<pos:position pos:line="24" pos:column="29"/></name> <operator pos:line="24" pos:column="30">=<pos:position pos:line="24" pos:column="31"/></operator> <name pos:line="24" pos:column="32">LOG_QUOTE_QUOTES<pos:position pos:line="24" pos:column="48"/></name></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt></block></then>
                <elseif pos:line="25" pos:column="17">else <if pos:line="25" pos:column="22">if <condition pos:line="25" pos:column="25">(<expr><operator pos:line="25" pos:column="26">*<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">quoting<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">==<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">LOG_QUOTE_QUOTES<pos:position pos:line="25" pos:column="54"/></name></expr>)<pos:position pos:line="25" pos:column="55"/></condition><then pos:line="25" pos:column="55">
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="26" pos:column="21">*<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="22">quoting<pos:position pos:line="26" pos:column="29"/></name> <operator pos:line="26" pos:column="30">=<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="32">LOG_QUOTE_NONE<pos:position pos:line="26" pos:column="46"/></name></expr>;<pos:position pos:line="26" pos:column="47"/></expr_stmt></block></then></if></elseif></if>

                <break pos:line="28" pos:column="17">break;<pos:position pos:line="28" pos:column="23"/></break>

            <case pos:line="30" pos:column="13">case <expr><literal type="char" pos:line="30" pos:column="18">'['<pos:position pos:line="30" pos:column="21"/></literal></expr>:<pos:position pos:line="30" pos:column="22"/></case>
                <if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">*<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">quoting<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">==<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="33">LOG_QUOTE_NONE<pos:position pos:line="31" pos:column="47"/></name></expr>)<pos:position pos:line="31" pos:column="48"/></condition><then pos:line="31" pos:column="48">
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="32" pos:column="21">*<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">quoting<pos:position pos:line="32" pos:column="29"/></name> <operator pos:line="32" pos:column="30">=<pos:position pos:line="32" pos:column="31"/></operator> <name pos:line="32" pos:column="32">LOG_QUOTE_MIMEBLOB<pos:position pos:line="32" pos:column="50"/></name></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt></block></then></if>

                <break pos:line="34" pos:column="17">break;<pos:position pos:line="34" pos:column="23"/></break>

            <case pos:line="36" pos:column="13">case <expr><literal type="char" pos:line="36" pos:column="18">']'<pos:position pos:line="36" pos:column="21"/></literal></expr>:<pos:position pos:line="36" pos:column="22"/></case>
                <if pos:line="37" pos:column="17">if <condition pos:line="37" pos:column="20">(<expr><operator pos:line="37" pos:column="21">*<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">quoting<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">==<pos:position pos:line="37" pos:column="32"/></operator> <name pos:line="37" pos:column="33">LOG_QUOTE_MIMEBLOB<pos:position pos:line="37" pos:column="51"/></name></expr>)<pos:position pos:line="37" pos:column="52"/></condition><then pos:line="37" pos:column="52">
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="38" pos:column="21">*<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">quoting<pos:position pos:line="38" pos:column="29"/></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <name pos:line="38" pos:column="32">LOG_QUOTE_NONE<pos:position pos:line="38" pos:column="46"/></name></expr>;<pos:position pos:line="38" pos:column="47"/></expr_stmt></block></then></if>

                <break pos:line="40" pos:column="17">break;<pos:position pos:line="40" pos:column="23"/></break>
            }<pos:position pos:line="41" pos:column="14"/></block></switch>

            <expr_stmt><expr><operator pos:line="43" pos:column="13">++<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">cur<pos:position pos:line="43" pos:column="18"/></name></expr>;<pos:position pos:line="43" pos:column="19"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="44" pos:column="13">--<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">l<pos:position pos:line="44" pos:column="16"/></name></expr>;<pos:position pos:line="44" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="45" pos:column="10"/></block></while>

        <goto pos:line="47" pos:column="9">goto <name pos:line="47" pos:column="14">done<pos:position pos:line="47" pos:column="18"/></name>;<pos:position pos:line="47" pos:column="19"/></goto>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><operator pos:line="50" pos:column="9">!<pos:position pos:line="50" pos:column="10"/></operator><operator pos:line="50" pos:column="10">*<pos:position pos:line="50" pos:column="11"/></operator><name pos:line="50" pos:column="11">cur<pos:position pos:line="50" pos:column="14"/></name></expr>)<pos:position pos:line="50" pos:column="15"/></condition><then pos:line="50" pos:column="15">
        <block type="pseudo"><goto pos:line="51" pos:column="9">goto <name pos:line="51" pos:column="14">done<pos:position pos:line="51" pos:column="18"/></name>;<pos:position pos:line="51" pos:column="19"/></goto></block></then></if>

    <expr_stmt><expr><operator pos:line="53" pos:column="5">++<pos:position pos:line="53" pos:column="7"/></operator><name pos:line="53" pos:column="7">cur<pos:position pos:line="53" pos:column="10"/></name></expr>;<pos:position pos:line="53" pos:column="11"/></expr_stmt>

    <comment type="line" pos:line="55" pos:column="5">// select quoting style for his particular token</comment>
    <switch pos:line="56" pos:column="5">switch <condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">*<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">cur<pos:position pos:line="56" pos:column="17"/></name></expr>)<pos:position pos:line="56" pos:column="18"/></condition> <block pos:line="56" pos:column="19">{

    <case pos:line="58" pos:column="5">case <expr><literal type="char" pos:line="58" pos:column="10">'"'<pos:position pos:line="58" pos:column="13"/></literal></expr>:<pos:position pos:line="58" pos:column="14"/></case>
        <expr_stmt><expr><name pos:line="59" pos:column="9">quote<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <name pos:line="59" pos:column="17">LOG_QUOTE_QUOTES<pos:position pos:line="59" pos:column="33"/></name></expr>;<pos:position pos:line="59" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="60" pos:column="9">++<pos:position pos:line="60" pos:column="11"/></operator><name pos:line="60" pos:column="11">cur<pos:position pos:line="60" pos:column="14"/></name></expr>;<pos:position pos:line="60" pos:column="15"/></expr_stmt>
        <break pos:line="61" pos:column="9">break;<pos:position pos:line="61" pos:column="15"/></break>

    <case pos:line="63" pos:column="5">case <expr><literal type="char" pos:line="63" pos:column="10">'\''<pos:position pos:line="63" pos:column="14"/></literal></expr>:<pos:position pos:line="63" pos:column="15"/></case>
        <expr_stmt><expr><name pos:line="64" pos:column="9">quote<pos:position pos:line="64" pos:column="14"/></name> <operator pos:line="64" pos:column="15">=<pos:position pos:line="64" pos:column="16"/></operator> <name pos:line="64" pos:column="17">LOG_QUOTE_RAW<pos:position pos:line="64" pos:column="30"/></name></expr>;<pos:position pos:line="64" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="65" pos:column="9">++<pos:position pos:line="65" pos:column="11"/></operator><name pos:line="65" pos:column="11">cur<pos:position pos:line="65" pos:column="14"/></name></expr>;<pos:position pos:line="65" pos:column="15"/></expr_stmt>
        <break pos:line="66" pos:column="9">break;<pos:position pos:line="66" pos:column="15"/></break>

    <case pos:line="68" pos:column="5">case <expr><literal type="char" pos:line="68" pos:column="10">'['<pos:position pos:line="68" pos:column="13"/></literal></expr>:<pos:position pos:line="68" pos:column="14"/></case>
        <expr_stmt><expr><name pos:line="69" pos:column="9">quote<pos:position pos:line="69" pos:column="14"/></name> <operator pos:line="69" pos:column="15">=<pos:position pos:line="69" pos:column="16"/></operator> <name pos:line="69" pos:column="17">LOG_QUOTE_MIMEBLOB<pos:position pos:line="69" pos:column="35"/></name></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="70" pos:column="9">++<pos:position pos:line="70" pos:column="11"/></operator><name pos:line="70" pos:column="11">cur<pos:position pos:line="70" pos:column="14"/></name></expr>;<pos:position pos:line="70" pos:column="15"/></expr_stmt>
        <break pos:line="71" pos:column="9">break;<pos:position pos:line="71" pos:column="15"/></break>

    <case pos:line="73" pos:column="5">case <expr><literal type="char" pos:line="73" pos:column="10">'#'<pos:position pos:line="73" pos:column="13"/></literal></expr>:<pos:position pos:line="73" pos:column="14"/></case>
        <expr_stmt><expr><name pos:line="74" pos:column="9">quote<pos:position pos:line="74" pos:column="14"/></name> <operator pos:line="74" pos:column="15">=<pos:position pos:line="74" pos:column="16"/></operator> <name pos:line="74" pos:column="17">LOG_QUOTE_URL<pos:position pos:line="74" pos:column="30"/></name></expr>;<pos:position pos:line="74" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="75" pos:column="9">++<pos:position pos:line="75" pos:column="11"/></operator><name pos:line="75" pos:column="11">cur<pos:position pos:line="75" pos:column="14"/></name></expr>;<pos:position pos:line="75" pos:column="15"/></expr_stmt>
        <break pos:line="76" pos:column="9">break;<pos:position pos:line="76" pos:column="15"/></break>

    <default pos:line="78" pos:column="5">default:<pos:position pos:line="78" pos:column="13"/></default>
        <expr_stmt><expr><name pos:line="79" pos:column="9">quote<pos:position pos:line="79" pos:column="14"/></name> <operator pos:line="79" pos:column="15">=<pos:position pos:line="79" pos:column="16"/></operator> <operator pos:line="79" pos:column="17">*<pos:position pos:line="79" pos:column="18"/></operator><name pos:line="79" pos:column="18">quoting<pos:position pos:line="79" pos:column="25"/></name></expr>;<pos:position pos:line="79" pos:column="26"/></expr_stmt>
        <break pos:line="80" pos:column="9">break;<pos:position pos:line="80" pos:column="15"/></break>
    }<pos:position pos:line="81" pos:column="6"/></block></switch>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><operator pos:line="83" pos:column="9">*<pos:position pos:line="83" pos:column="10"/></operator><name pos:line="83" pos:column="10">cur<pos:position pos:line="83" pos:column="13"/></name> <operator pos:line="83" pos:column="14">==<pos:position pos:line="83" pos:column="16"/></operator> <literal type="char" pos:line="83" pos:column="17">'-'<pos:position pos:line="83" pos:column="20"/></literal></expr>)<pos:position pos:line="83" pos:column="21"/></condition><then pos:line="83" pos:column="21"> <block pos:line="83" pos:column="22">{
        <expr_stmt><expr><name pos:line="84" pos:column="9">left<pos:position pos:line="84" pos:column="13"/></name> <operator pos:line="84" pos:column="14">=<pos:position pos:line="84" pos:column="15"/></operator> <literal type="number" pos:line="84" pos:column="16">1<pos:position pos:line="84" pos:column="17"/></literal></expr>;<pos:position pos:line="84" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="85" pos:column="9">++<pos:position pos:line="85" pos:column="11"/></operator><name pos:line="85" pos:column="11">cur<pos:position pos:line="85" pos:column="14"/></name></expr>;<pos:position pos:line="85" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>

    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><operator pos:line="88" pos:column="9">*<pos:position pos:line="88" pos:column="10"/></operator><name pos:line="88" pos:column="10">cur<pos:position pos:line="88" pos:column="13"/></name> <operator pos:line="88" pos:column="14">==<pos:position pos:line="88" pos:column="16"/></operator> <literal type="char" pos:line="88" pos:column="17">'0'<pos:position pos:line="88" pos:column="20"/></literal></expr>)<pos:position pos:line="88" pos:column="21"/></condition><then pos:line="88" pos:column="21"> <block pos:line="88" pos:column="22">{
        <expr_stmt><expr><name pos:line="89" pos:column="9">zero<pos:position pos:line="89" pos:column="13"/></name> <operator pos:line="89" pos:column="14">=<pos:position pos:line="89" pos:column="15"/></operator> <literal type="number" pos:line="89" pos:column="16">1<pos:position pos:line="89" pos:column="17"/></literal></expr>;<pos:position pos:line="89" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="90" pos:column="9">++<pos:position pos:line="90" pos:column="11"/></operator><name pos:line="90" pos:column="11">cur<pos:position pos:line="90" pos:column="14"/></name></expr>;<pos:position pos:line="90" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="93" pos:column="5">char<pos:position pos:line="93" pos:column="9"/></name> <modifier pos:line="93" pos:column="10">*<pos:position pos:line="93" pos:column="11"/></modifier></type><name pos:line="93" pos:column="11">endp<pos:position pos:line="93" pos:column="15"/></name></decl>;<pos:position pos:line="93" pos:column="16"/></decl_stmt>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><call><name pos:line="94" pos:column="9">xisdigit<pos:position pos:line="94" pos:column="17"/></name><argument_list pos:line="94" pos:column="17">(<argument><expr><operator pos:line="94" pos:column="18">*<pos:position pos:line="94" pos:column="19"/></operator><name pos:line="94" pos:column="19">cur<pos:position pos:line="94" pos:column="22"/></name></expr></argument>)<pos:position pos:line="94" pos:column="23"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="24"/></condition><then pos:line="94" pos:column="24"> <block pos:line="94" pos:column="25">{
        <expr_stmt><expr><name pos:line="95" pos:column="9">widthMin<pos:position pos:line="95" pos:column="17"/></name> <operator pos:line="95" pos:column="18">=<pos:position pos:line="95" pos:column="19"/></operator> <call><name pos:line="95" pos:column="20">strtol<pos:position pos:line="95" pos:column="26"/></name><argument_list pos:line="95" pos:column="26">(<argument><expr><name pos:line="95" pos:column="27">cur<pos:position pos:line="95" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="32">&amp;<pos:position pos:line="95" pos:column="37"/></operator><name pos:line="95" pos:column="33">endp<pos:position pos:line="95" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="39">10<pos:position pos:line="95" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="96" pos:column="9">cur<pos:position pos:line="96" pos:column="12"/></name> <operator pos:line="96" pos:column="13">=<pos:position pos:line="96" pos:column="14"/></operator> <name pos:line="96" pos:column="15">endp<pos:position pos:line="96" pos:column="19"/></name></expr>;<pos:position pos:line="96" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>

    <if pos:line="99" pos:column="5">if <condition pos:line="99" pos:column="8">(<expr><operator pos:line="99" pos:column="9">*<pos:position pos:line="99" pos:column="10"/></operator><name pos:line="99" pos:column="10">cur<pos:position pos:line="99" pos:column="13"/></name> <operator pos:line="99" pos:column="14">==<pos:position pos:line="99" pos:column="16"/></operator> <literal type="char" pos:line="99" pos:column="17">'.'<pos:position pos:line="99" pos:column="20"/></literal> <operator pos:line="99" pos:column="21">&amp;&amp;<pos:position pos:line="99" pos:column="31"/></operator> <call><name pos:line="99" pos:column="24">xisdigit<pos:position pos:line="99" pos:column="32"/></name><argument_list pos:line="99" pos:column="32">(<argument><expr><operator pos:line="99" pos:column="33">*<pos:position pos:line="99" pos:column="34"/></operator><operator pos:line="99" pos:column="34">(<pos:position pos:line="99" pos:column="35"/></operator><operator pos:line="99" pos:column="35">++<pos:position pos:line="99" pos:column="37"/></operator><name pos:line="99" pos:column="37">cur<pos:position pos:line="99" pos:column="40"/></name><operator pos:line="99" pos:column="40">)<pos:position pos:line="99" pos:column="41"/></operator></expr></argument>)<pos:position pos:line="99" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="43"/></condition><then pos:line="99" pos:column="43"> <block pos:line="99" pos:column="44">{
        <expr_stmt><expr><name pos:line="100" pos:column="9">widthMax<pos:position pos:line="100" pos:column="17"/></name> <operator pos:line="100" pos:column="18">=<pos:position pos:line="100" pos:column="19"/></operator> <call><name pos:line="100" pos:column="20">strtol<pos:position pos:line="100" pos:column="26"/></name><argument_list pos:line="100" pos:column="26">(<argument><expr><name pos:line="100" pos:column="27">cur<pos:position pos:line="100" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="32">&amp;<pos:position pos:line="100" pos:column="37"/></operator><name pos:line="100" pos:column="33">endp<pos:position pos:line="100" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="100" pos:column="39">10<pos:position pos:line="100" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="101" pos:column="9">cur<pos:position pos:line="101" pos:column="12"/></name> <operator pos:line="101" pos:column="13">=<pos:position pos:line="101" pos:column="14"/></operator> <name pos:line="101" pos:column="15">endp<pos:position pos:line="101" pos:column="19"/></name></expr>;<pos:position pos:line="101" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>

    <if pos:line="104" pos:column="5">if <condition pos:line="104" pos:column="8">(<expr><operator pos:line="104" pos:column="9">*<pos:position pos:line="104" pos:column="10"/></operator><name pos:line="104" pos:column="10">cur<pos:position pos:line="104" pos:column="13"/></name> <operator pos:line="104" pos:column="14">==<pos:position pos:line="104" pos:column="16"/></operator> <literal type="char" pos:line="104" pos:column="17">'{'<pos:position pos:line="104" pos:column="20"/></literal></expr>)<pos:position pos:line="104" pos:column="21"/></condition><then pos:line="104" pos:column="21"> <block pos:line="104" pos:column="22">{
        <decl_stmt><decl><type><name pos:line="105" pos:column="9">char<pos:position pos:line="105" pos:column="13"/></name> <modifier pos:line="105" pos:column="14">*<pos:position pos:line="105" pos:column="15"/></modifier></type><name pos:line="105" pos:column="15">cp<pos:position pos:line="105" pos:column="17"/></name></decl>;<pos:position pos:line="105" pos:column="18"/></decl_stmt>
        <expr_stmt><expr><operator pos:line="106" pos:column="9">++<pos:position pos:line="106" pos:column="11"/></operator><name pos:line="106" pos:column="11">cur<pos:position pos:line="106" pos:column="14"/></name></expr>;<pos:position pos:line="106" pos:column="15"/></expr_stmt>
        <expr_stmt><expr><name pos:line="107" pos:column="9">l<pos:position pos:line="107" pos:column="10"/></name> <operator pos:line="107" pos:column="11">=<pos:position pos:line="107" pos:column="12"/></operator> <call><name pos:line="107" pos:column="13">strcspn<pos:position pos:line="107" pos:column="20"/></name><argument_list pos:line="107" pos:column="20">(<argument><expr><name pos:line="107" pos:column="21">cur<pos:position pos:line="107" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="26">"}"<pos:position pos:line="107" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name pos:line="108" pos:column="9">cp<pos:position pos:line="108" pos:column="11"/></name> <operator pos:line="108" pos:column="12">=<pos:position pos:line="108" pos:column="13"/></operator> <operator pos:line="108" pos:column="14">(<pos:position pos:line="108" pos:column="15"/></operator><name pos:line="108" pos:column="15">char<pos:position pos:line="108" pos:column="19"/></name> <operator pos:line="108" pos:column="20">*<pos:position pos:line="108" pos:column="21"/></operator><operator pos:line="108" pos:column="21">)<pos:position pos:line="108" pos:column="22"/></operator><call><name pos:line="108" pos:column="22">xmalloc<pos:position pos:line="108" pos:column="29"/></name><argument_list pos:line="108" pos:column="29">(<argument><expr><name pos:line="108" pos:column="30">l<pos:position pos:line="108" pos:column="31"/></name> <operator pos:line="108" pos:column="32">+<pos:position pos:line="108" pos:column="33"/></operator> <literal type="number" pos:line="108" pos:column="34">1<pos:position pos:line="108" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">xstrncpy<pos:position pos:line="109" pos:column="17"/></name><argument_list pos:line="109" pos:column="17">(<argument><expr><name pos:line="109" pos:column="18">cp<pos:position pos:line="109" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="22">cur<pos:position pos:line="109" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="27">l<pos:position pos:line="109" pos:column="28"/></name> <operator pos:line="109" pos:column="29">+<pos:position pos:line="109" pos:column="30"/></operator> <literal type="number" pos:line="109" pos:column="31">1<pos:position pos:line="109" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="110" pos:column="9">data<pos:position pos:line="110" pos:column="13"/></name><operator pos:line="110" pos:column="13">.<pos:position pos:line="110" pos:column="14"/></operator><name pos:line="110" pos:column="14">string<pos:position pos:line="110" pos:column="20"/></name></name> <operator pos:line="110" pos:column="21">=<pos:position pos:line="110" pos:column="22"/></operator> <name pos:line="110" pos:column="23">cp<pos:position pos:line="110" pos:column="25"/></name></expr>;<pos:position pos:line="110" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="111" pos:column="9">cur<pos:position pos:line="111" pos:column="12"/></name> <operator pos:line="111" pos:column="13">+=<pos:position pos:line="111" pos:column="15"/></operator> <name pos:line="111" pos:column="16">l<pos:position pos:line="111" pos:column="17"/></name></expr>;<pos:position pos:line="111" pos:column="18"/></expr_stmt>

        <if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><operator pos:line="113" pos:column="13">*<pos:position pos:line="113" pos:column="14"/></operator><name pos:line="113" pos:column="14">cur<pos:position pos:line="113" pos:column="17"/></name> <operator pos:line="113" pos:column="18">==<pos:position pos:line="113" pos:column="20"/></operator> <literal type="char" pos:line="113" pos:column="21">'}'<pos:position pos:line="113" pos:column="24"/></literal></expr>)<pos:position pos:line="113" pos:column="25"/></condition><then pos:line="113" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="114" pos:column="13">++<pos:position pos:line="114" pos:column="15"/></operator><name pos:line="114" pos:column="15">cur<pos:position pos:line="114" pos:column="18"/></name></expr>;<pos:position pos:line="114" pos:column="19"/></expr_stmt></block></then></if>
    }<pos:position pos:line="115" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="117" pos:column="5">type<pos:position pos:line="117" pos:column="9"/></name> <operator pos:line="117" pos:column="10">=<pos:position pos:line="117" pos:column="11"/></operator> <name pos:line="117" pos:column="12">LFT_NONE<pos:position pos:line="117" pos:column="20"/></name></expr>;<pos:position pos:line="117" pos:column="21"/></expr_stmt>

    <comment type="line" pos:line="119" pos:column="5">// Scan each registered token namespace</comment>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">debugs<pos:position pos:line="120" pos:column="11"/></name><argument_list pos:line="120" pos:column="11">(<argument><expr><literal type="number" pos:line="120" pos:column="12">46<pos:position pos:line="120" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="120" pos:column="16">9<pos:position pos:line="120" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="120" pos:column="19">HERE<pos:position pos:line="120" pos:column="23"/></name> <operator pos:line="120" pos:column="24">&lt;&lt;<pos:position pos:line="120" pos:column="32"/></operator> <literal type="string" pos:line="120" pos:column="27">"check for token in "<pos:position pos:line="120" pos:column="48"/></literal> <operator pos:line="120" pos:column="49">&lt;&lt;<pos:position pos:line="120" pos:column="57"/></operator> <call><name><name pos:line="120" pos:column="52">TheConfig<pos:position pos:line="120" pos:column="61"/></name><operator pos:line="120" pos:column="61">.<pos:position pos:line="120" pos:column="62"/></operator><name pos:line="120" pos:column="62">tokens<pos:position pos:line="120" pos:column="68"/></name><operator pos:line="120" pos:column="68">.<pos:position pos:line="120" pos:column="69"/></operator><name pos:line="120" pos:column="69">size<pos:position pos:line="120" pos:column="73"/></name></name><argument_list pos:line="120" pos:column="73">()<pos:position pos:line="120" pos:column="75"/></argument_list></call> <operator pos:line="120" pos:column="76">&lt;&lt;<pos:position pos:line="120" pos:column="84"/></operator> <literal type="string" pos:line="120" pos:column="79">" namespaces."<pos:position pos:line="120" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="95"/></expr_stmt>
    <for pos:line="121" pos:column="5">for <control pos:line="121" pos:column="9">(<init><decl><type><name><name pos:line="121" pos:column="10">std<pos:position pos:line="121" pos:column="13"/></name><operator pos:line="121" pos:column="13">::<pos:position pos:line="121" pos:column="15"/></operator><name><name pos:line="121" pos:column="15">list<pos:position pos:line="121" pos:column="19"/></name><argument_list type="generic" pos:line="121" pos:column="19">&lt;<argument><expr><name pos:line="121" pos:column="20">TokenNamespace<pos:position pos:line="121" pos:column="34"/></name></expr></argument>&gt;<pos:position pos:line="121" pos:column="38"/></argument_list></name><operator pos:line="121" pos:column="35">::<pos:position pos:line="121" pos:column="37"/></operator><name pos:line="121" pos:column="37">const_iterator<pos:position pos:line="121" pos:column="51"/></name></name></type> <name pos:line="121" pos:column="52">itr<pos:position pos:line="121" pos:column="55"/></name> <init pos:line="121" pos:column="56">= <expr><call><name><name pos:line="121" pos:column="58">TheConfig<pos:position pos:line="121" pos:column="67"/></name><operator pos:line="121" pos:column="67">.<pos:position pos:line="121" pos:column="68"/></operator><name pos:line="121" pos:column="68">tokens<pos:position pos:line="121" pos:column="74"/></name><operator pos:line="121" pos:column="74">.<pos:position pos:line="121" pos:column="75"/></operator><name pos:line="121" pos:column="75">begin<pos:position pos:line="121" pos:column="80"/></name></name><argument_list pos:line="121" pos:column="80">()<pos:position pos:line="121" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="121" pos:column="83"/></init> <condition><expr><name pos:line="121" pos:column="84">itr<pos:position pos:line="121" pos:column="87"/></name> <operator pos:line="121" pos:column="88">!=<pos:position pos:line="121" pos:column="90"/></operator> <call><name><name pos:line="121" pos:column="91">TheConfig<pos:position pos:line="121" pos:column="100"/></name><operator pos:line="121" pos:column="100">.<pos:position pos:line="121" pos:column="101"/></operator><name pos:line="121" pos:column="101">tokens<pos:position pos:line="121" pos:column="107"/></name><operator pos:line="121" pos:column="107">.<pos:position pos:line="121" pos:column="108"/></operator><name pos:line="121" pos:column="108">end<pos:position pos:line="121" pos:column="111"/></name></name><argument_list pos:line="121" pos:column="111">()<pos:position pos:line="121" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="114"/></condition> <incr><expr><operator pos:line="121" pos:column="115">++<pos:position pos:line="121" pos:column="117"/></operator><name pos:line="121" pos:column="117">itr<pos:position pos:line="121" pos:column="120"/></name></expr></incr>)<pos:position pos:line="121" pos:column="121"/></control> <block pos:line="121" pos:column="122">{
        <expr_stmt><expr><call><name pos:line="122" pos:column="9">debugs<pos:position pos:line="122" pos:column="15"/></name><argument_list pos:line="122" pos:column="15">(<argument><expr><literal type="number" pos:line="122" pos:column="16">46<pos:position pos:line="122" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="122" pos:column="20">7<pos:position pos:line="122" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="23">HERE<pos:position pos:line="122" pos:column="27"/></name> <operator pos:line="122" pos:column="28">&lt;&lt;<pos:position pos:line="122" pos:column="36"/></operator> <literal type="string" pos:line="122" pos:column="31">"check for possible "<pos:position pos:line="122" pos:column="52"/></literal> <operator pos:line="122" pos:column="53">&lt;&lt;<pos:position pos:line="122" pos:column="61"/></operator> <name><name pos:line="122" pos:column="56">itr<pos:position pos:line="122" pos:column="59"/></name><operator pos:line="122" pos:column="59">-&gt;<pos:position pos:line="122" pos:column="64"/></operator><name pos:line="122" pos:column="61">prefix<pos:position pos:line="122" pos:column="67"/></name></name> <operator pos:line="122" pos:column="68">&lt;&lt;<pos:position pos:line="122" pos:column="76"/></operator> <literal type="string" pos:line="122" pos:column="71">":: token"<pos:position pos:line="122" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="83"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="123" pos:column="9">const<pos:position pos:line="123" pos:column="14"/></specifier> <name pos:line="123" pos:column="15">size_t<pos:position pos:line="123" pos:column="21"/></name></type> <name pos:line="123" pos:column="22">len<pos:position pos:line="123" pos:column="25"/></name> <init pos:line="123" pos:column="26">= <expr><call><name><name pos:line="123" pos:column="28">itr<pos:position pos:line="123" pos:column="31"/></name><operator pos:line="123" pos:column="31">-&gt;<pos:position pos:line="123" pos:column="36"/></operator><name pos:line="123" pos:column="33">prefix<pos:position pos:line="123" pos:column="39"/></name><operator pos:line="123" pos:column="39">.<pos:position pos:line="123" pos:column="40"/></operator><name pos:line="123" pos:column="40">size<pos:position pos:line="123" pos:column="44"/></name></name><argument_list pos:line="123" pos:column="44">()<pos:position pos:line="123" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="123" pos:column="47"/></decl_stmt>
        <if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><call><name><name pos:line="124" pos:column="13">itr<pos:position pos:line="124" pos:column="16"/></name><operator pos:line="124" pos:column="16">-&gt;<pos:position pos:line="124" pos:column="21"/></operator><name pos:line="124" pos:column="18">prefix<pos:position pos:line="124" pos:column="24"/></name><operator pos:line="124" pos:column="24">.<pos:position pos:line="124" pos:column="25"/></operator><name pos:line="124" pos:column="25">cmp<pos:position pos:line="124" pos:column="28"/></name></name><argument_list pos:line="124" pos:column="28">(<argument><expr><name pos:line="124" pos:column="29">cur<pos:position pos:line="124" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="34">len<pos:position pos:line="124" pos:column="37"/></name></expr></argument>)<pos:position pos:line="124" pos:column="38"/></argument_list></call> <operator pos:line="124" pos:column="39">==<pos:position pos:line="124" pos:column="41"/></operator> <literal type="number" pos:line="124" pos:column="42">0<pos:position pos:line="124" pos:column="43"/></literal> <operator pos:line="124" pos:column="44">&amp;&amp;<pos:position pos:line="124" pos:column="54"/></operator> <name><name pos:line="124" pos:column="47">cur<pos:position pos:line="124" pos:column="50"/></name><index pos:line="124" pos:column="50">[<expr><name pos:line="124" pos:column="51">len<pos:position pos:line="124" pos:column="54"/></name></expr>]<pos:position pos:line="124" pos:column="55"/></index></name> <operator pos:line="124" pos:column="56">==<pos:position pos:line="124" pos:column="58"/></operator> <literal type="char" pos:line="124" pos:column="59">':'<pos:position pos:line="124" pos:column="62"/></literal> <operator pos:line="124" pos:column="63">&amp;&amp;<pos:position pos:line="124" pos:column="73"/></operator> <name><name pos:line="124" pos:column="66">cur<pos:position pos:line="124" pos:column="69"/></name><index pos:line="124" pos:column="69">[<expr><name pos:line="124" pos:column="70">len<pos:position pos:line="124" pos:column="73"/></name><operator pos:line="124" pos:column="73">+<pos:position pos:line="124" pos:column="74"/></operator><literal type="number" pos:line="124" pos:column="74">1<pos:position pos:line="124" pos:column="75"/></literal></expr>]<pos:position pos:line="124" pos:column="76"/></index></name> <operator pos:line="124" pos:column="77">==<pos:position pos:line="124" pos:column="79"/></operator> <literal type="char" pos:line="124" pos:column="80">':'<pos:position pos:line="124" pos:column="83"/></literal></expr>)<pos:position pos:line="124" pos:column="84"/></condition><then pos:line="124" pos:column="84"> <block pos:line="124" pos:column="85">{
            <expr_stmt><expr><call><name pos:line="125" pos:column="13">debugs<pos:position pos:line="125" pos:column="19"/></name><argument_list pos:line="125" pos:column="19">(<argument><expr><literal type="number" pos:line="125" pos:column="20">46<pos:position pos:line="125" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="125" pos:column="24">5<pos:position pos:line="125" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="27">HERE<pos:position pos:line="125" pos:column="31"/></name> <operator pos:line="125" pos:column="32">&lt;&lt;<pos:position pos:line="125" pos:column="40"/></operator> <literal type="string" pos:line="125" pos:column="35">"check for "<pos:position pos:line="125" pos:column="47"/></literal> <operator pos:line="125" pos:column="48">&lt;&lt;<pos:position pos:line="125" pos:column="56"/></operator> <name><name pos:line="125" pos:column="51">itr<pos:position pos:line="125" pos:column="54"/></name><operator pos:line="125" pos:column="54">-&gt;<pos:position pos:line="125" pos:column="59"/></operator><name pos:line="125" pos:column="56">prefix<pos:position pos:line="125" pos:column="62"/></name></name> <operator pos:line="125" pos:column="63">&lt;&lt;<pos:position pos:line="125" pos:column="71"/></operator> <literal type="string" pos:line="125" pos:column="66">":: token in '"<pos:position pos:line="125" pos:column="81"/></literal> <operator pos:line="125" pos:column="82">&lt;&lt;<pos:position pos:line="125" pos:column="90"/></operator> <name pos:line="125" pos:column="85">cur<pos:position pos:line="125" pos:column="88"/></name> <operator pos:line="125" pos:column="89">&lt;&lt;<pos:position pos:line="125" pos:column="97"/></operator> <literal type="string" pos:line="125" pos:column="92">"'"<pos:position pos:line="125" pos:column="95"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="97"/></expr_stmt>
            <decl_stmt><decl><type><specifier pos:line="126" pos:column="13">const<pos:position pos:line="126" pos:column="18"/></specifier> <name pos:line="126" pos:column="19">char<pos:position pos:line="126" pos:column="23"/></name> <modifier pos:line="126" pos:column="24">*<pos:position pos:line="126" pos:column="25"/></modifier></type><name pos:line="126" pos:column="25">old<pos:position pos:line="126" pos:column="28"/></name> <init pos:line="126" pos:column="29">= <expr><name pos:line="126" pos:column="31">cur<pos:position pos:line="126" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="126" pos:column="35"/></decl_stmt>
            <expr_stmt><expr><name pos:line="127" pos:column="13">cur<pos:position pos:line="127" pos:column="16"/></name> <operator pos:line="127" pos:column="17">=<pos:position pos:line="127" pos:column="18"/></operator> <call><name pos:line="127" pos:column="19">scanForToken<pos:position pos:line="127" pos:column="31"/></name><argument_list pos:line="127" pos:column="31">(<argument><expr><name><name pos:line="127" pos:column="32">itr<pos:position pos:line="127" pos:column="35"/></name><operator pos:line="127" pos:column="35">-&gt;<pos:position pos:line="127" pos:column="40"/></operator><name pos:line="127" pos:column="37">tokenSet<pos:position pos:line="127" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="47">cur<pos:position pos:line="127" pos:column="50"/></name><operator pos:line="127" pos:column="50">+<pos:position pos:line="127" pos:column="51"/></operator><name pos:line="127" pos:column="51">len<pos:position pos:line="127" pos:column="54"/></name><operator pos:line="127" pos:column="54">+<pos:position pos:line="127" pos:column="55"/></operator><literal type="number" pos:line="127" pos:column="55">2<pos:position pos:line="127" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="58"/></expr_stmt>
            <if pos:line="128" pos:column="13">if <condition pos:line="128" pos:column="16">(<expr><name pos:line="128" pos:column="17">old<pos:position pos:line="128" pos:column="20"/></name> <operator pos:line="128" pos:column="21">!=<pos:position pos:line="128" pos:column="23"/></operator> <name pos:line="128" pos:column="24">cur<pos:position pos:line="128" pos:column="27"/></name></expr>)<pos:position pos:line="128" pos:column="28"/></condition><then pos:line="128" pos:column="28"> <comment type="line" pos:line="128" pos:column="29">// found</comment>
                <block type="pseudo"><break pos:line="129" pos:column="17">break;<pos:position pos:line="129" pos:column="23"/></break></block></then>
            <else pos:line="130" pos:column="13">else <comment type="line" pos:line="130" pos:column="18">// reset to start of namespace</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="131" pos:column="17">cur<pos:position pos:line="131" pos:column="20"/></name> <operator pos:line="131" pos:column="21">=<pos:position pos:line="131" pos:column="22"/></operator> <name pos:line="131" pos:column="23">cur<pos:position pos:line="131" pos:column="26"/></name> <operator pos:line="131" pos:column="27">-<pos:position pos:line="131" pos:column="28"/></operator> <name pos:line="131" pos:column="29">len<pos:position pos:line="131" pos:column="32"/></name> <operator pos:line="131" pos:column="33">-<pos:position pos:line="131" pos:column="34"/></operator> <literal type="number" pos:line="131" pos:column="35">2<pos:position pos:line="131" pos:column="36"/></literal></expr>;<pos:position pos:line="131" pos:column="37"/></expr_stmt></block></else></if>
        }<pos:position pos:line="132" pos:column="10"/></block></then></if>
    }<pos:position pos:line="133" pos:column="6"/></block></for>

    <if pos:line="135" pos:column="5">if <condition pos:line="135" pos:column="8">(<expr><name pos:line="135" pos:column="9">type<pos:position pos:line="135" pos:column="13"/></name> <operator pos:line="135" pos:column="14">==<pos:position pos:line="135" pos:column="16"/></operator> <name pos:line="135" pos:column="17">LFT_NONE<pos:position pos:line="135" pos:column="25"/></name></expr>)<pos:position pos:line="135" pos:column="26"/></condition><then pos:line="135" pos:column="26"> <block pos:line="135" pos:column="27">{
        <comment type="line" pos:line="136" pos:column="9">// For upward compatibility, assume "http::" prefix as default prefix</comment>
        <comment type="line" pos:line="137" pos:column="9">// for all log access formatting codes, except those starting with a</comment>
        <comment type="line" pos:line="138" pos:column="9">// "%" or a known namespace. (ie "icap::", "adapt::")</comment>
        <if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><call><name pos:line="139" pos:column="13">strncmp<pos:position pos:line="139" pos:column="20"/></name><argument_list pos:line="139" pos:column="20">(<argument><expr><name pos:line="139" pos:column="21">cur<pos:position pos:line="139" pos:column="24"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="139" pos:column="25">"http::"<pos:position pos:line="139" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="139" pos:column="35">6<pos:position pos:line="139" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="37"/></argument_list></call> <operator pos:line="139" pos:column="38">==<pos:position pos:line="139" pos:column="40"/></operator> <literal type="number" pos:line="139" pos:column="41">0<pos:position pos:line="139" pos:column="42"/></literal> <operator pos:line="139" pos:column="43">&amp;&amp;<pos:position pos:line="139" pos:column="53"/></operator> <operator pos:line="139" pos:column="46">*<pos:position pos:line="139" pos:column="47"/></operator><operator pos:line="139" pos:column="47">(<pos:position pos:line="139" pos:column="48"/></operator><name pos:line="139" pos:column="48">cur<pos:position pos:line="139" pos:column="51"/></name><operator pos:line="139" pos:column="51">+<pos:position pos:line="139" pos:column="52"/></operator><literal type="number" pos:line="139" pos:column="52">6<pos:position pos:line="139" pos:column="53"/></literal><operator pos:line="139" pos:column="53">)<pos:position pos:line="139" pos:column="54"/></operator> <operator pos:line="139" pos:column="55">!=<pos:position pos:line="139" pos:column="57"/></operator> <literal type="char" pos:line="139" pos:column="58">'%'<pos:position pos:line="139" pos:column="61"/></literal></expr> )<pos:position pos:line="139" pos:column="63"/></condition><then pos:line="139" pos:column="63">
            <block type="pseudo"><expr_stmt><expr><name pos:line="140" pos:column="13">cur<pos:position pos:line="140" pos:column="16"/></name> <operator pos:line="140" pos:column="17">+=<pos:position pos:line="140" pos:column="19"/></operator> <literal type="number" pos:line="140" pos:column="20">6<pos:position pos:line="140" pos:column="21"/></literal></expr>;<pos:position pos:line="140" pos:column="22"/></expr_stmt></block></then></if>

        <comment type="line" pos:line="142" pos:column="9">// NP: scan the sets of tokens in decreasing size to guarantee no</comment>
        <comment type="line" pos:line="143" pos:column="9">//     mistakes made with overlapping names. (Bug 3310)</comment>

        <comment type="line" pos:line="145" pos:column="9">// Scan for various long tokens</comment>
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">debugs<pos:position pos:line="146" pos:column="15"/></name><argument_list pos:line="146" pos:column="15">(<argument><expr><literal type="number" pos:line="146" pos:column="16">46<pos:position pos:line="146" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="146" pos:column="20">5<pos:position pos:line="146" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="23">HERE<pos:position pos:line="146" pos:column="27"/></name> <operator pos:line="146" pos:column="28">&lt;&lt;<pos:position pos:line="146" pos:column="36"/></operator> <literal type="string" pos:line="146" pos:column="31">"scan for possible Misc token"<pos:position pos:line="146" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name pos:line="147" pos:column="9">cur<pos:position pos:line="147" pos:column="12"/></name> <operator pos:line="147" pos:column="13">=<pos:position pos:line="147" pos:column="14"/></operator> <call><name pos:line="147" pos:column="15">scanForToken<pos:position pos:line="147" pos:column="27"/></name><argument_list pos:line="147" pos:column="27">(<argument><expr><name pos:line="147" pos:column="28">TokenTableMisc<pos:position pos:line="147" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="147" pos:column="44">cur<pos:position pos:line="147" pos:column="47"/></name></expr></argument>)<pos:position pos:line="147" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="49"/></expr_stmt>
        <comment type="line" pos:line="148" pos:column="9">// scan for 2-char tokens</comment>
        <if pos:line="149" pos:column="9">if <condition pos:line="149" pos:column="12">(<expr><name pos:line="149" pos:column="13">type<pos:position pos:line="149" pos:column="17"/></name> <operator pos:line="149" pos:column="18">==<pos:position pos:line="149" pos:column="20"/></operator> <name pos:line="149" pos:column="21">LFT_NONE<pos:position pos:line="149" pos:column="29"/></name></expr>)<pos:position pos:line="149" pos:column="30"/></condition><then pos:line="149" pos:column="30"> <block pos:line="149" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="150" pos:column="13">debugs<pos:position pos:line="150" pos:column="19"/></name><argument_list pos:line="150" pos:column="19">(<argument><expr><literal type="number" pos:line="150" pos:column="20">46<pos:position pos:line="150" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="150" pos:column="24">5<pos:position pos:line="150" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="27">HERE<pos:position pos:line="150" pos:column="31"/></name> <operator pos:line="150" pos:column="32">&lt;&lt;<pos:position pos:line="150" pos:column="40"/></operator> <literal type="string" pos:line="150" pos:column="35">"scan for possible 2C token"<pos:position pos:line="150" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="150" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><name pos:line="151" pos:column="13">cur<pos:position pos:line="151" pos:column="16"/></name> <operator pos:line="151" pos:column="17">=<pos:position pos:line="151" pos:column="18"/></operator> <call><name pos:line="151" pos:column="19">scanForToken<pos:position pos:line="151" pos:column="31"/></name><argument_list pos:line="151" pos:column="31">(<argument><expr><name pos:line="151" pos:column="32">TokenTable2C<pos:position pos:line="151" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="46">cur<pos:position pos:line="151" pos:column="49"/></name></expr></argument>)<pos:position pos:line="151" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="152" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="153" pos:column="9">// finally scan for 1-char tokens.</comment>
        <if pos:line="154" pos:column="9">if <condition pos:line="154" pos:column="12">(<expr><name pos:line="154" pos:column="13">type<pos:position pos:line="154" pos:column="17"/></name> <operator pos:line="154" pos:column="18">==<pos:position pos:line="154" pos:column="20"/></operator> <name pos:line="154" pos:column="21">LFT_NONE<pos:position pos:line="154" pos:column="29"/></name></expr>)<pos:position pos:line="154" pos:column="30"/></condition><then pos:line="154" pos:column="30"> <block pos:line="154" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="155" pos:column="13">debugs<pos:position pos:line="155" pos:column="19"/></name><argument_list pos:line="155" pos:column="19">(<argument><expr><literal type="number" pos:line="155" pos:column="20">46<pos:position pos:line="155" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="155" pos:column="24">5<pos:position pos:line="155" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="27">HERE<pos:position pos:line="155" pos:column="31"/></name> <operator pos:line="155" pos:column="32">&lt;&lt;<pos:position pos:line="155" pos:column="40"/></operator> <literal type="string" pos:line="155" pos:column="35">"scan for possible 1C token"<pos:position pos:line="155" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="155" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><name pos:line="156" pos:column="13">cur<pos:position pos:line="156" pos:column="16"/></name> <operator pos:line="156" pos:column="17">=<pos:position pos:line="156" pos:column="18"/></operator> <call><name pos:line="156" pos:column="19">scanForToken<pos:position pos:line="156" pos:column="31"/></name><argument_list pos:line="156" pos:column="31">(<argument><expr><name pos:line="156" pos:column="32">TokenTable1C<pos:position pos:line="156" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="46">cur<pos:position pos:line="156" pos:column="49"/></name></expr></argument>)<pos:position pos:line="156" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="157" pos:column="10"/></block></then></if>
    }<pos:position pos:line="158" pos:column="6"/></block></then></if>

    <if pos:line="160" pos:column="5">if <condition pos:line="160" pos:column="8">(<expr><name pos:line="160" pos:column="9">type<pos:position pos:line="160" pos:column="13"/></name> <operator pos:line="160" pos:column="14">==<pos:position pos:line="160" pos:column="16"/></operator> <name pos:line="160" pos:column="17">LFT_NONE<pos:position pos:line="160" pos:column="25"/></name></expr>)<pos:position pos:line="160" pos:column="26"/></condition><then pos:line="160" pos:column="26"> <block pos:line="160" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="161" pos:column="9">fatalf<pos:position pos:line="161" pos:column="15"/></name><argument_list pos:line="161" pos:column="15">(<argument><expr><literal type="string" pos:line="161" pos:column="16">"Can't parse configuration token: '%s'\n"<pos:position pos:line="161" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="161" pos:column="59">def<pos:position pos:line="161" pos:column="62"/></name></expr></argument>)<pos:position pos:line="161" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="162" pos:column="6"/></block></then></if>

    <if pos:line="164" pos:column="5">if <condition pos:line="164" pos:column="8">(<expr><operator pos:line="164" pos:column="9">*<pos:position pos:line="164" pos:column="10"/></operator><name pos:line="164" pos:column="10">cur<pos:position pos:line="164" pos:column="13"/></name> <operator pos:line="164" pos:column="14">==<pos:position pos:line="164" pos:column="16"/></operator> <literal type="char" pos:line="164" pos:column="17">' '<pos:position pos:line="164" pos:column="20"/></literal></expr>)<pos:position pos:line="164" pos:column="21"/></condition><then pos:line="164" pos:column="21"> <block pos:line="164" pos:column="22">{
        <expr_stmt><expr><name pos:line="165" pos:column="9">space<pos:position pos:line="165" pos:column="14"/></name> <operator pos:line="165" pos:column="15">=<pos:position pos:line="165" pos:column="16"/></operator> <literal type="number" pos:line="165" pos:column="17">1<pos:position pos:line="165" pos:column="18"/></literal></expr>;<pos:position pos:line="165" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="166" pos:column="9">++<pos:position pos:line="166" pos:column="11"/></operator><name pos:line="166" pos:column="11">cur<pos:position pos:line="166" pos:column="14"/></name></expr>;<pos:position pos:line="166" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="167" pos:column="6"/></block></then></if>

<label><name pos:line="169" pos:column="1">done<pos:position pos:line="169" pos:column="5"/></name>:<pos:position pos:line="169" pos:column="6"/></label>

    <switch pos:line="171" pos:column="5">switch <condition pos:line="171" pos:column="12">(<expr><name pos:line="171" pos:column="13">type<pos:position pos:line="171" pos:column="17"/></name></expr>)<pos:position pos:line="171" pos:column="18"/></condition> <block pos:line="171" pos:column="19">{

<cpp:if pos:line="173" pos:column="1">#<cpp:directive pos:line="173" pos:column="2">if<pos:position pos:line="173" pos:column="4"/></cpp:directive> <expr><name pos:line="173" pos:column="5">USE_ADAPTATION<pos:position pos:line="173" pos:column="19"/></name></expr></cpp:if>
    <case pos:line="174" pos:column="5">case <expr><name pos:line="174" pos:column="10">LFT_ADAPTATION_LAST_HEADER<pos:position pos:line="174" pos:column="36"/></name></expr>:<pos:position pos:line="174" pos:column="37"/></case>
<cpp:endif pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">endif<pos:position pos:line="175" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="177" pos:column="1">#<cpp:directive pos:line="177" pos:column="2">if<pos:position pos:line="177" pos:column="4"/></cpp:directive> <expr><name pos:line="177" pos:column="5">ICAP_CLIENT<pos:position pos:line="177" pos:column="16"/></name></expr></cpp:if>
    <case pos:line="178" pos:column="5">case <expr><name pos:line="178" pos:column="10">LFT_ICAP_REQ_HEADER<pos:position pos:line="178" pos:column="29"/></name></expr>:<pos:position pos:line="178" pos:column="30"/></case>

    <case pos:line="180" pos:column="5">case <expr><name pos:line="180" pos:column="10">LFT_ICAP_REP_HEADER<pos:position pos:line="180" pos:column="29"/></name></expr>:<pos:position pos:line="180" pos:column="30"/></case>
<cpp:endif pos:line="181" pos:column="1">#<cpp:directive pos:line="181" pos:column="2">endif<pos:position pos:line="181" pos:column="7"/></cpp:directive></cpp:endif>

    <case pos:line="183" pos:column="5">case <expr><name pos:line="183" pos:column="10">LFT_ADAPTED_REQUEST_HEADER<pos:position pos:line="183" pos:column="36"/></name></expr>:<pos:position pos:line="183" pos:column="37"/></case>

    <case pos:line="185" pos:column="5">case <expr><name pos:line="185" pos:column="10">LFT_REQUEST_HEADER<pos:position pos:line="185" pos:column="28"/></name></expr>:<pos:position pos:line="185" pos:column="29"/></case>

    <case pos:line="187" pos:column="5">case <expr><name pos:line="187" pos:column="10">LFT_REPLY_HEADER<pos:position pos:line="187" pos:column="26"/></name></expr>:<pos:position pos:line="187" pos:column="27"/></case>

        <if pos:line="189" pos:column="9">if <condition pos:line="189" pos:column="12">(<expr><name><name pos:line="189" pos:column="13">data<pos:position pos:line="189" pos:column="17"/></name><operator pos:line="189" pos:column="17">.<pos:position pos:line="189" pos:column="18"/></operator><name pos:line="189" pos:column="18">string<pos:position pos:line="189" pos:column="24"/></name></name></expr>)<pos:position pos:line="189" pos:column="25"/></condition><then pos:line="189" pos:column="25"> <block pos:line="189" pos:column="26">{
            <decl_stmt><decl><type><name pos:line="190" pos:column="13">char<pos:position pos:line="190" pos:column="17"/></name> <modifier pos:line="190" pos:column="18">*<pos:position pos:line="190" pos:column="19"/></modifier></type><name pos:line="190" pos:column="19">header<pos:position pos:line="190" pos:column="25"/></name> <init pos:line="190" pos:column="26">= <expr><name><name pos:line="190" pos:column="28">data<pos:position pos:line="190" pos:column="32"/></name><operator pos:line="190" pos:column="32">.<pos:position pos:line="190" pos:column="33"/></operator><name pos:line="190" pos:column="33">string<pos:position pos:line="190" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="190" pos:column="40"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="191" pos:column="13">char<pos:position pos:line="191" pos:column="17"/></name> <modifier pos:line="191" pos:column="18">*<pos:position pos:line="191" pos:column="19"/></modifier></type><name pos:line="191" pos:column="19">cp<pos:position pos:line="191" pos:column="21"/></name> <init pos:line="191" pos:column="22">= <expr><call><name pos:line="191" pos:column="24">strchr<pos:position pos:line="191" pos:column="30"/></name><argument_list pos:line="191" pos:column="30">(<argument><expr><name pos:line="191" pos:column="31">header<pos:position pos:line="191" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="191" pos:column="39">':'<pos:position pos:line="191" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="191" pos:column="44"/></decl_stmt>

            <if pos:line="193" pos:column="13">if <condition pos:line="193" pos:column="16">(<expr><name pos:line="193" pos:column="17">cp<pos:position pos:line="193" pos:column="19"/></name></expr>)<pos:position pos:line="193" pos:column="20"/></condition><then pos:line="193" pos:column="20"> <block pos:line="193" pos:column="21">{
                <expr_stmt><expr><operator pos:line="194" pos:column="17">*<pos:position pos:line="194" pos:column="18"/></operator><name pos:line="194" pos:column="18">cp<pos:position pos:line="194" pos:column="20"/></name> <operator pos:line="194" pos:column="21">=<pos:position pos:line="194" pos:column="22"/></operator> <literal type="char" pos:line="194" pos:column="23">'\0'<pos:position pos:line="194" pos:column="27"/></literal></expr>;<pos:position pos:line="194" pos:column="28"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="195" pos:column="17">++<pos:position pos:line="195" pos:column="19"/></operator><name pos:line="195" pos:column="19">cp<pos:position pos:line="195" pos:column="21"/></name></expr>;<pos:position pos:line="195" pos:column="22"/></expr_stmt>

                <if pos:line="197" pos:column="17">if <condition pos:line="197" pos:column="20">(<expr><operator pos:line="197" pos:column="21">*<pos:position pos:line="197" pos:column="22"/></operator><name pos:line="197" pos:column="22">cp<pos:position pos:line="197" pos:column="24"/></name> <operator pos:line="197" pos:column="25">==<pos:position pos:line="197" pos:column="27"/></operator> <literal type="char" pos:line="197" pos:column="28">','<pos:position pos:line="197" pos:column="31"/></literal> <operator pos:line="197" pos:column="32">||<pos:position pos:line="197" pos:column="34"/></operator> <operator pos:line="197" pos:column="35">*<pos:position pos:line="197" pos:column="36"/></operator><name pos:line="197" pos:column="36">cp<pos:position pos:line="197" pos:column="38"/></name> <operator pos:line="197" pos:column="39">==<pos:position pos:line="197" pos:column="41"/></operator> <literal type="char" pos:line="197" pos:column="42">';'<pos:position pos:line="197" pos:column="45"/></literal> <operator pos:line="197" pos:column="46">||<pos:position pos:line="197" pos:column="48"/></operator> <operator pos:line="197" pos:column="49">*<pos:position pos:line="197" pos:column="50"/></operator><name pos:line="197" pos:column="50">cp<pos:position pos:line="197" pos:column="52"/></name> <operator pos:line="197" pos:column="53">==<pos:position pos:line="197" pos:column="55"/></operator> <literal type="char" pos:line="197" pos:column="56">':'<pos:position pos:line="197" pos:column="59"/></literal></expr>)<pos:position pos:line="197" pos:column="60"/></condition><then pos:line="197" pos:column="60"> <block pos:line="197" pos:column="61">{
                    <expr_stmt><expr><name><name pos:line="198" pos:column="21">data<pos:position pos:line="198" pos:column="25"/></name><operator pos:line="198" pos:column="25">.<pos:position pos:line="198" pos:column="26"/></operator><name pos:line="198" pos:column="26">header<pos:position pos:line="198" pos:column="32"/></name><operator pos:line="198" pos:column="32">.<pos:position pos:line="198" pos:column="33"/></operator><name pos:line="198" pos:column="33">separator<pos:position pos:line="198" pos:column="42"/></name></name> <operator pos:line="198" pos:column="43">=<pos:position pos:line="198" pos:column="44"/></operator> <operator pos:line="198" pos:column="45">*<pos:position pos:line="198" pos:column="46"/></operator><name pos:line="198" pos:column="46">cp<pos:position pos:line="198" pos:column="48"/></name></expr>;<pos:position pos:line="198" pos:column="49"/></expr_stmt>
                    <expr_stmt><expr><operator pos:line="199" pos:column="21">++<pos:position pos:line="199" pos:column="23"/></operator><name pos:line="199" pos:column="23">cp<pos:position pos:line="199" pos:column="25"/></name></expr>;<pos:position pos:line="199" pos:column="26"/></expr_stmt>
                }<pos:position pos:line="200" pos:column="18"/></block></then> <else pos:line="200" pos:column="19">else <block pos:line="200" pos:column="24">{
                    <expr_stmt><expr><name><name pos:line="201" pos:column="21">data<pos:position pos:line="201" pos:column="25"/></name><operator pos:line="201" pos:column="25">.<pos:position pos:line="201" pos:column="26"/></operator><name pos:line="201" pos:column="26">header<pos:position pos:line="201" pos:column="32"/></name><operator pos:line="201" pos:column="32">.<pos:position pos:line="201" pos:column="33"/></operator><name pos:line="201" pos:column="33">separator<pos:position pos:line="201" pos:column="42"/></name></name> <operator pos:line="201" pos:column="43">=<pos:position pos:line="201" pos:column="44"/></operator> <literal type="char" pos:line="201" pos:column="45">','<pos:position pos:line="201" pos:column="48"/></literal></expr>;<pos:position pos:line="201" pos:column="49"/></expr_stmt>
                }<pos:position pos:line="202" pos:column="18"/></block></else></if>

                <expr_stmt><expr><name><name pos:line="204" pos:column="17">data<pos:position pos:line="204" pos:column="21"/></name><operator pos:line="204" pos:column="21">.<pos:position pos:line="204" pos:column="22"/></operator><name pos:line="204" pos:column="22">header<pos:position pos:line="204" pos:column="28"/></name><operator pos:line="204" pos:column="28">.<pos:position pos:line="204" pos:column="29"/></operator><name pos:line="204" pos:column="29">element<pos:position pos:line="204" pos:column="36"/></name></name> <operator pos:line="204" pos:column="37">=<pos:position pos:line="204" pos:column="38"/></operator> <name pos:line="204" pos:column="39">cp<pos:position pos:line="204" pos:column="41"/></name></expr>;<pos:position pos:line="204" pos:column="42"/></expr_stmt>

                <switch pos:line="206" pos:column="17">switch <condition pos:line="206" pos:column="24">(<expr><name pos:line="206" pos:column="25">type<pos:position pos:line="206" pos:column="29"/></name></expr>)<pos:position pos:line="206" pos:column="30"/></condition> <block pos:line="206" pos:column="31">{
                <case pos:line="207" pos:column="17">case <expr><name pos:line="207" pos:column="22">LFT_REQUEST_HEADER<pos:position pos:line="207" pos:column="40"/></name></expr>:<pos:position pos:line="207" pos:column="41"/></case>
                    <expr_stmt><expr><name pos:line="208" pos:column="21">type<pos:position pos:line="208" pos:column="25"/></name> <operator pos:line="208" pos:column="26">=<pos:position pos:line="208" pos:column="27"/></operator> <name pos:line="208" pos:column="28">LFT_REQUEST_HEADER_ELEM<pos:position pos:line="208" pos:column="51"/></name></expr>;<pos:position pos:line="208" pos:column="52"/></expr_stmt>
                    <break pos:line="209" pos:column="21">break;<pos:position pos:line="209" pos:column="27"/></break>

                <case pos:line="211" pos:column="17">case <expr><name pos:line="211" pos:column="22">LFT_ADAPTED_REQUEST_HEADER<pos:position pos:line="211" pos:column="48"/></name></expr>:<pos:position pos:line="211" pos:column="49"/></case>
                    <expr_stmt><expr><name pos:line="212" pos:column="21">type<pos:position pos:line="212" pos:column="25"/></name> <operator pos:line="212" pos:column="26">=<pos:position pos:line="212" pos:column="27"/></operator> <name pos:line="212" pos:column="28">LFT_ADAPTED_REQUEST_HEADER_ELEM<pos:position pos:line="212" pos:column="59"/></name></expr>;<pos:position pos:line="212" pos:column="60"/></expr_stmt>
                    <break pos:line="213" pos:column="21">break;<pos:position pos:line="213" pos:column="27"/></break>

                <case pos:line="215" pos:column="17">case <expr><name pos:line="215" pos:column="22">LFT_REPLY_HEADER<pos:position pos:line="215" pos:column="38"/></name></expr>:<pos:position pos:line="215" pos:column="39"/></case>
                    <expr_stmt><expr><name pos:line="216" pos:column="21">type<pos:position pos:line="216" pos:column="25"/></name> <operator pos:line="216" pos:column="26">=<pos:position pos:line="216" pos:column="27"/></operator> <name pos:line="216" pos:column="28">LFT_REPLY_HEADER_ELEM<pos:position pos:line="216" pos:column="49"/></name></expr>;<pos:position pos:line="216" pos:column="50"/></expr_stmt>
                    <break pos:line="217" pos:column="21">break;<pos:position pos:line="217" pos:column="27"/></break>
<cpp:if pos:line="218" pos:column="1">#<cpp:directive pos:line="218" pos:column="2">if<pos:position pos:line="218" pos:column="4"/></cpp:directive> <expr><name pos:line="218" pos:column="5">USE_ADAPTATION<pos:position pos:line="218" pos:column="19"/></name></expr></cpp:if>
                <case pos:line="219" pos:column="17">case <expr><name pos:line="219" pos:column="22">LFT_ADAPTATION_LAST_HEADER<pos:position pos:line="219" pos:column="48"/></name></expr>:<pos:position pos:line="219" pos:column="49"/></case>
                    <expr_stmt><expr><name pos:line="220" pos:column="21">type<pos:position pos:line="220" pos:column="25"/></name> <operator pos:line="220" pos:column="26">=<pos:position pos:line="220" pos:column="27"/></operator> <name pos:line="220" pos:column="28">LFT_ADAPTATION_LAST_HEADER_ELEM<pos:position pos:line="220" pos:column="59"/></name></expr>;<pos:position pos:line="220" pos:column="60"/></expr_stmt>
                    <break pos:line="221" pos:column="21">break;<pos:position pos:line="221" pos:column="27"/></break>
<cpp:endif pos:line="222" pos:column="1">#<cpp:directive pos:line="222" pos:column="2">endif<pos:position pos:line="222" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="223" pos:column="1">#<cpp:directive pos:line="223" pos:column="2">if<pos:position pos:line="223" pos:column="4"/></cpp:directive> <expr><name pos:line="223" pos:column="5">ICAP_CLIENT<pos:position pos:line="223" pos:column="16"/></name></expr></cpp:if>
                <case pos:line="224" pos:column="17">case <expr><name pos:line="224" pos:column="22">LFT_ICAP_REQ_HEADER<pos:position pos:line="224" pos:column="41"/></name></expr>:<pos:position pos:line="224" pos:column="42"/></case>
                    <expr_stmt><expr><name pos:line="225" pos:column="21">type<pos:position pos:line="225" pos:column="25"/></name> <operator pos:line="225" pos:column="26">=<pos:position pos:line="225" pos:column="27"/></operator> <name pos:line="225" pos:column="28">LFT_ICAP_REQ_HEADER_ELEM<pos:position pos:line="225" pos:column="52"/></name></expr>;<pos:position pos:line="225" pos:column="53"/></expr_stmt>
                    <break pos:line="226" pos:column="21">break;<pos:position pos:line="226" pos:column="27"/></break>
                <case pos:line="227" pos:column="17">case <expr><name pos:line="227" pos:column="22">LFT_ICAP_REP_HEADER<pos:position pos:line="227" pos:column="41"/></name></expr>:<pos:position pos:line="227" pos:column="42"/></case>
                    <expr_stmt><expr><name pos:line="228" pos:column="21">type<pos:position pos:line="228" pos:column="25"/></name> <operator pos:line="228" pos:column="26">=<pos:position pos:line="228" pos:column="27"/></operator> <name pos:line="228" pos:column="28">LFT_ICAP_REP_HEADER_ELEM<pos:position pos:line="228" pos:column="52"/></name></expr>;<pos:position pos:line="228" pos:column="53"/></expr_stmt>
                    <break pos:line="229" pos:column="21">break;<pos:position pos:line="229" pos:column="27"/></break>
<cpp:endif pos:line="230" pos:column="1">#<cpp:directive pos:line="230" pos:column="2">endif<pos:position pos:line="230" pos:column="7"/></cpp:directive></cpp:endif>
                <default pos:line="231" pos:column="17">default:<pos:position pos:line="231" pos:column="25"/></default>
                    <break pos:line="232" pos:column="21">break;<pos:position pos:line="232" pos:column="27"/></break>
                }<pos:position pos:line="233" pos:column="18"/></block></switch>
            }<pos:position pos:line="234" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name><name pos:line="236" pos:column="13">data<pos:position pos:line="236" pos:column="17"/></name><operator pos:line="236" pos:column="17">.<pos:position pos:line="236" pos:column="18"/></operator><name pos:line="236" pos:column="18">header<pos:position pos:line="236" pos:column="24"/></name><operator pos:line="236" pos:column="24">.<pos:position pos:line="236" pos:column="25"/></operator><name pos:line="236" pos:column="25">header<pos:position pos:line="236" pos:column="31"/></name></name> <operator pos:line="236" pos:column="32">=<pos:position pos:line="236" pos:column="33"/></operator> <name pos:line="236" pos:column="34">header<pos:position pos:line="236" pos:column="40"/></name></expr>;<pos:position pos:line="236" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="237" pos:column="10"/></block></then> <else pos:line="237" pos:column="11">else <block pos:line="237" pos:column="16">{
            <switch pos:line="238" pos:column="13">switch <condition pos:line="238" pos:column="20">(<expr><name pos:line="238" pos:column="21">type<pos:position pos:line="238" pos:column="25"/></name></expr>)<pos:position pos:line="238" pos:column="26"/></condition> <block pos:line="238" pos:column="27">{
            <case pos:line="239" pos:column="13">case <expr><name pos:line="239" pos:column="18">LFT_REQUEST_HEADER<pos:position pos:line="239" pos:column="36"/></name></expr>:<pos:position pos:line="239" pos:column="37"/></case>
                <expr_stmt><expr><name pos:line="240" pos:column="17">type<pos:position pos:line="240" pos:column="21"/></name> <operator pos:line="240" pos:column="22">=<pos:position pos:line="240" pos:column="23"/></operator> <name pos:line="240" pos:column="24">LFT_REQUEST_ALL_HEADERS<pos:position pos:line="240" pos:column="47"/></name></expr>;<pos:position pos:line="240" pos:column="48"/></expr_stmt>
                <break pos:line="241" pos:column="17">break;<pos:position pos:line="241" pos:column="23"/></break>

            <case pos:line="243" pos:column="13">case <expr><name pos:line="243" pos:column="18">LFT_ADAPTED_REQUEST_HEADER<pos:position pos:line="243" pos:column="44"/></name></expr>:<pos:position pos:line="243" pos:column="45"/></case>
                <expr_stmt><expr><name pos:line="244" pos:column="17">type<pos:position pos:line="244" pos:column="21"/></name> <operator pos:line="244" pos:column="22">=<pos:position pos:line="244" pos:column="23"/></operator> <name pos:line="244" pos:column="24">LFT_ADAPTED_REQUEST_ALL_HEADERS<pos:position pos:line="244" pos:column="55"/></name></expr>;<pos:position pos:line="244" pos:column="56"/></expr_stmt>
                <break pos:line="245" pos:column="17">break;<pos:position pos:line="245" pos:column="23"/></break>

            <case pos:line="247" pos:column="13">case <expr><name pos:line="247" pos:column="18">LFT_REPLY_HEADER<pos:position pos:line="247" pos:column="34"/></name></expr>:<pos:position pos:line="247" pos:column="35"/></case>
                <expr_stmt><expr><name pos:line="248" pos:column="17">type<pos:position pos:line="248" pos:column="21"/></name> <operator pos:line="248" pos:column="22">=<pos:position pos:line="248" pos:column="23"/></operator> <name pos:line="248" pos:column="24">LFT_REPLY_ALL_HEADERS<pos:position pos:line="248" pos:column="45"/></name></expr>;<pos:position pos:line="248" pos:column="46"/></expr_stmt>
                <break pos:line="249" pos:column="17">break;<pos:position pos:line="249" pos:column="23"/></break>
<cpp:if pos:line="250" pos:column="1">#<cpp:directive pos:line="250" pos:column="2">if<pos:position pos:line="250" pos:column="4"/></cpp:directive> <expr><name pos:line="250" pos:column="5">USE_ADAPTATION<pos:position pos:line="250" pos:column="19"/></name></expr></cpp:if>
            <case pos:line="251" pos:column="13">case <expr><name pos:line="251" pos:column="18">LFT_ADAPTATION_LAST_HEADER<pos:position pos:line="251" pos:column="44"/></name></expr>:<pos:position pos:line="251" pos:column="45"/></case>
                <expr_stmt><expr><name pos:line="252" pos:column="17">type<pos:position pos:line="252" pos:column="21"/></name> <operator pos:line="252" pos:column="22">=<pos:position pos:line="252" pos:column="23"/></operator> <name pos:line="252" pos:column="24">LFT_ADAPTATION_LAST_ALL_HEADERS<pos:position pos:line="252" pos:column="55"/></name></expr>;<pos:position pos:line="252" pos:column="56"/></expr_stmt>
                <break pos:line="253" pos:column="17">break;<pos:position pos:line="253" pos:column="23"/></break>
<cpp:endif pos:line="254" pos:column="1">#<cpp:directive pos:line="254" pos:column="2">endif<pos:position pos:line="254" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="255" pos:column="1">#<cpp:directive pos:line="255" pos:column="2">if<pos:position pos:line="255" pos:column="4"/></cpp:directive> <expr><name pos:line="255" pos:column="5">ICAP_CLIENT<pos:position pos:line="255" pos:column="16"/></name></expr></cpp:if>
            <case pos:line="256" pos:column="13">case <expr><name pos:line="256" pos:column="18">LFT_ICAP_REQ_HEADER<pos:position pos:line="256" pos:column="37"/></name></expr>:<pos:position pos:line="256" pos:column="38"/></case>
                <expr_stmt><expr><name pos:line="257" pos:column="17">type<pos:position pos:line="257" pos:column="21"/></name> <operator pos:line="257" pos:column="22">=<pos:position pos:line="257" pos:column="23"/></operator> <name pos:line="257" pos:column="24">LFT_ICAP_REQ_ALL_HEADERS<pos:position pos:line="257" pos:column="48"/></name></expr>;<pos:position pos:line="257" pos:column="49"/></expr_stmt>
                <break pos:line="258" pos:column="17">break;<pos:position pos:line="258" pos:column="23"/></break>
            <case pos:line="259" pos:column="13">case <expr><name pos:line="259" pos:column="18">LFT_ICAP_REP_HEADER<pos:position pos:line="259" pos:column="37"/></name></expr>:<pos:position pos:line="259" pos:column="38"/></case>
                <expr_stmt><expr><name pos:line="260" pos:column="17">type<pos:position pos:line="260" pos:column="21"/></name> <operator pos:line="260" pos:column="22">=<pos:position pos:line="260" pos:column="23"/></operator> <name pos:line="260" pos:column="24">LFT_ICAP_REP_ALL_HEADERS<pos:position pos:line="260" pos:column="48"/></name></expr>;<pos:position pos:line="260" pos:column="49"/></expr_stmt>
                <break pos:line="261" pos:column="17">break;<pos:position pos:line="261" pos:column="23"/></break>
<cpp:endif pos:line="262" pos:column="1">#<cpp:directive pos:line="262" pos:column="2">endif<pos:position pos:line="262" pos:column="7"/></cpp:directive></cpp:endif>
            <default pos:line="263" pos:column="13">default:<pos:position pos:line="263" pos:column="21"/></default>
                <break pos:line="264" pos:column="17">break;<pos:position pos:line="264" pos:column="23"/></break>
            }<pos:position pos:line="265" pos:column="14"/></block></switch>
            <expr_stmt><expr><name><name pos:line="266" pos:column="13">Config<pos:position pos:line="266" pos:column="19"/></name><operator pos:line="266" pos:column="19">.<pos:position pos:line="266" pos:column="20"/></operator><name pos:line="266" pos:column="20">onoff<pos:position pos:line="266" pos:column="25"/></name><operator pos:line="266" pos:column="25">.<pos:position pos:line="266" pos:column="26"/></operator><name pos:line="266" pos:column="26">log_mime_hdrs<pos:position pos:line="266" pos:column="39"/></name></name> <operator pos:line="266" pos:column="40">=<pos:position pos:line="266" pos:column="41"/></operator> <literal type="number" pos:line="266" pos:column="42">1<pos:position pos:line="266" pos:column="43"/></literal></expr>;<pos:position pos:line="266" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="267" pos:column="10"/></block></else></if>

        <break pos:line="269" pos:column="9">break;<pos:position pos:line="269" pos:column="15"/></break>

    <case pos:line="271" pos:column="5">case <expr><name pos:line="271" pos:column="10">LFT_CLIENT_FQDN<pos:position pos:line="271" pos:column="25"/></name></expr>:<pos:position pos:line="271" pos:column="26"/></case>
        <expr_stmt><expr><name><name pos:line="272" pos:column="9">Config<pos:position pos:line="272" pos:column="15"/></name><operator pos:line="272" pos:column="15">.<pos:position pos:line="272" pos:column="16"/></operator><name pos:line="272" pos:column="16">onoff<pos:position pos:line="272" pos:column="21"/></name><operator pos:line="272" pos:column="21">.<pos:position pos:line="272" pos:column="22"/></operator><name pos:line="272" pos:column="22">log_fqdn<pos:position pos:line="272" pos:column="30"/></name></name> <operator pos:line="272" pos:column="31">=<pos:position pos:line="272" pos:column="32"/></operator> <literal type="number" pos:line="272" pos:column="33">1<pos:position pos:line="272" pos:column="34"/></literal></expr>;<pos:position pos:line="272" pos:column="35"/></expr_stmt>
        <break pos:line="273" pos:column="9">break;<pos:position pos:line="273" pos:column="15"/></break>

    <case pos:line="275" pos:column="5">case <expr><name pos:line="275" pos:column="10">LFT_TIME_SUBSECOND<pos:position pos:line="275" pos:column="28"/></name></expr>:<pos:position pos:line="275" pos:column="29"/></case>
        <expr_stmt><expr><name pos:line="276" pos:column="9">divisor<pos:position pos:line="276" pos:column="16"/></name> <operator pos:line="276" pos:column="17">=<pos:position pos:line="276" pos:column="18"/></operator> <literal type="number" pos:line="276" pos:column="19">1000<pos:position pos:line="276" pos:column="23"/></literal></expr>;<pos:position pos:line="276" pos:column="24"/></expr_stmt>

        <if pos:line="278" pos:column="9">if <condition pos:line="278" pos:column="12">(<expr><name pos:line="278" pos:column="13">widthMax<pos:position pos:line="278" pos:column="21"/></name> <operator pos:line="278" pos:column="22">&gt;<pos:position pos:line="278" pos:column="26"/></operator> <literal type="number" pos:line="278" pos:column="24">0<pos:position pos:line="278" pos:column="25"/></literal></expr>)<pos:position pos:line="278" pos:column="26"/></condition><then pos:line="278" pos:column="26"> <block pos:line="278" pos:column="27">{
            <decl_stmt><decl><type><name pos:line="279" pos:column="13">int<pos:position pos:line="279" pos:column="16"/></name></type> <name pos:line="279" pos:column="17">i<pos:position pos:line="279" pos:column="18"/></name></decl>;<pos:position pos:line="279" pos:column="19"/></decl_stmt>
            <expr_stmt><expr><name pos:line="280" pos:column="13">divisor<pos:position pos:line="280" pos:column="20"/></name> <operator pos:line="280" pos:column="21">=<pos:position pos:line="280" pos:column="22"/></operator> <literal type="number" pos:line="280" pos:column="23">1000000<pos:position pos:line="280" pos:column="30"/></literal></expr>;<pos:position pos:line="280" pos:column="31"/></expr_stmt>

            <for pos:line="282" pos:column="13">for <control pos:line="282" pos:column="17">(<init><expr><name pos:line="282" pos:column="18">i<pos:position pos:line="282" pos:column="19"/></name> <operator pos:line="282" pos:column="20">=<pos:position pos:line="282" pos:column="21"/></operator> <name pos:line="282" pos:column="22">widthMax<pos:position pos:line="282" pos:column="30"/></name></expr>;<pos:position pos:line="282" pos:column="31"/></init> <condition><expr><name pos:line="282" pos:column="32">i<pos:position pos:line="282" pos:column="33"/></name> <operator pos:line="282" pos:column="34">&gt;<pos:position pos:line="282" pos:column="38"/></operator> <literal type="number" pos:line="282" pos:column="36">1<pos:position pos:line="282" pos:column="37"/></literal></expr>;<pos:position pos:line="282" pos:column="38"/></condition> <incr><expr><operator pos:line="282" pos:column="39">--<pos:position pos:line="282" pos:column="41"/></operator><name pos:line="282" pos:column="41">i<pos:position pos:line="282" pos:column="42"/></name></expr></incr>)<pos:position pos:line="282" pos:column="43"/></control>
                <block type="pseudo"><expr_stmt><expr><name pos:line="283" pos:column="17">divisor<pos:position pos:line="283" pos:column="24"/></name> <operator pos:line="283" pos:column="25">/=<pos:position pos:line="283" pos:column="27"/></operator> <literal type="number" pos:line="283" pos:column="28">10<pos:position pos:line="283" pos:column="30"/></literal></expr>;<pos:position pos:line="283" pos:column="31"/></expr_stmt></block></for>

            <if pos:line="285" pos:column="13">if <condition pos:line="285" pos:column="16">(<expr><operator pos:line="285" pos:column="17">!<pos:position pos:line="285" pos:column="18"/></operator><name pos:line="285" pos:column="18">divisor<pos:position pos:line="285" pos:column="25"/></name></expr>)<pos:position pos:line="285" pos:column="26"/></condition><then pos:line="285" pos:column="26">
                <block type="pseudo"><expr_stmt><expr><name pos:line="286" pos:column="17">divisor<pos:position pos:line="286" pos:column="24"/></name> <operator pos:line="286" pos:column="25">=<pos:position pos:line="286" pos:column="26"/></operator> <literal type="number" pos:line="286" pos:column="27">0<pos:position pos:line="286" pos:column="28"/></literal></expr>;<pos:position pos:line="286" pos:column="29"/></expr_stmt></block></then></if>
        }<pos:position pos:line="287" pos:column="10"/></block></then></if>
        <break pos:line="288" pos:column="9">break;<pos:position pos:line="288" pos:column="15"/></break>

    <case pos:line="290" pos:column="5">case <expr><name pos:line="290" pos:column="10">LFT_HTTP_SENT_STATUS_CODE_OLD_30<pos:position pos:line="290" pos:column="42"/></name></expr>:<pos:position pos:line="290" pos:column="43"/></case>
        <expr_stmt><expr><call><name pos:line="291" pos:column="9">debugs<pos:position pos:line="291" pos:column="15"/></name><argument_list pos:line="291" pos:column="15">(<argument><expr><literal type="number" pos:line="291" pos:column="16">46<pos:position pos:line="291" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="291" pos:column="20">DBG_PARSE_NOTE<pos:position pos:line="291" pos:column="34"/></name><argument_list pos:line="291" pos:column="34">(<argument><expr><name pos:line="291" pos:column="35">DBG_IMPORTANT<pos:position pos:line="291" pos:column="48"/></name></expr></argument>)<pos:position pos:line="291" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="291" pos:column="51">"WARNING: The \"Hs\" formatting code is deprecated. Use the \"&gt;Hs\" instead."<pos:position pos:line="291" pos:column="131"/></literal></expr></argument>)<pos:position pos:line="291" pos:column="129"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="130"/></expr_stmt>
        <expr_stmt><expr><name pos:line="292" pos:column="9">type<pos:position pos:line="292" pos:column="13"/></name> <operator pos:line="292" pos:column="14">=<pos:position pos:line="292" pos:column="15"/></operator> <name pos:line="292" pos:column="16">LFT_HTTP_SENT_STATUS_CODE<pos:position pos:line="292" pos:column="41"/></name></expr>;<pos:position pos:line="292" pos:column="42"/></expr_stmt>
        <break pos:line="293" pos:column="9">break;<pos:position pos:line="293" pos:column="15"/></break>

    <case pos:line="295" pos:column="5">case <expr><name pos:line="295" pos:column="10">LFT_SERVER_LOCAL_IP_OLD_27<pos:position pos:line="295" pos:column="36"/></name></expr>:<pos:position pos:line="295" pos:column="37"/></case>
        <expr_stmt><expr><call><name pos:line="296" pos:column="9">debugs<pos:position pos:line="296" pos:column="15"/></name><argument_list pos:line="296" pos:column="15">(<argument><expr><literal type="number" pos:line="296" pos:column="16">46<pos:position pos:line="296" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="296" pos:column="20">DBG_PARSE_NOTE<pos:position pos:line="296" pos:column="34"/></name><argument_list pos:line="296" pos:column="34">(<argument><expr><name pos:line="296" pos:column="35">DBG_IMPORTANT<pos:position pos:line="296" pos:column="48"/></name></expr></argument>)<pos:position pos:line="296" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="296" pos:column="51">"WARNING: The \"oa\" formatting code is deprecated. Use the \"&lt;la\" instead."<pos:position pos:line="296" pos:column="131"/></literal></expr></argument>)<pos:position pos:line="296" pos:column="129"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="130"/></expr_stmt>
        <expr_stmt><expr><name pos:line="297" pos:column="9">type<pos:position pos:line="297" pos:column="13"/></name> <operator pos:line="297" pos:column="14">=<pos:position pos:line="297" pos:column="15"/></operator> <name pos:line="297" pos:column="16">LFT_SERVER_LOCAL_IP<pos:position pos:line="297" pos:column="35"/></name></expr>;<pos:position pos:line="297" pos:column="36"/></expr_stmt>
        <break pos:line="298" pos:column="9">break;<pos:position pos:line="298" pos:column="15"/></break>

    <case pos:line="300" pos:column="5">case <expr><name pos:line="300" pos:column="10">LFT_REQUEST_URLPATH_OLD_31<pos:position pos:line="300" pos:column="36"/></name></expr>:<pos:position pos:line="300" pos:column="37"/></case>
        <expr_stmt><expr><call><name pos:line="301" pos:column="9">debugs<pos:position pos:line="301" pos:column="15"/></name><argument_list pos:line="301" pos:column="15">(<argument><expr><literal type="number" pos:line="301" pos:column="16">46<pos:position pos:line="301" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="301" pos:column="20">DBG_PARSE_NOTE<pos:position pos:line="301" pos:column="34"/></name><argument_list pos:line="301" pos:column="34">(<argument><expr><name pos:line="301" pos:column="35">DBG_IMPORTANT<pos:position pos:line="301" pos:column="48"/></name></expr></argument>)<pos:position pos:line="301" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="301" pos:column="51">"WARNING: The \"rp\" formatting code is deprecated. Use the \"&gt;rp\" instead."<pos:position pos:line="301" pos:column="131"/></literal></expr></argument>)<pos:position pos:line="301" pos:column="129"/></argument_list></call></expr>;<pos:position pos:line="301" pos:column="130"/></expr_stmt>
        <expr_stmt><expr><name pos:line="302" pos:column="9">type<pos:position pos:line="302" pos:column="13"/></name> <operator pos:line="302" pos:column="14">=<pos:position pos:line="302" pos:column="15"/></operator> <name pos:line="302" pos:column="16">LFT_CLIENT_REQ_URLPATH<pos:position pos:line="302" pos:column="38"/></name></expr>;<pos:position pos:line="302" pos:column="39"/></expr_stmt>
        <break pos:line="303" pos:column="9">break;<pos:position pos:line="303" pos:column="15"/></break>

    <case pos:line="305" pos:column="5">case <expr><name pos:line="305" pos:column="10">LFT_REQUEST_VERSION_OLD_2X<pos:position pos:line="305" pos:column="36"/></name></expr>:<pos:position pos:line="305" pos:column="37"/></case>
        <expr_stmt><expr><call><name pos:line="306" pos:column="9">debugs<pos:position pos:line="306" pos:column="15"/></name><argument_list pos:line="306" pos:column="15">(<argument><expr><literal type="number" pos:line="306" pos:column="16">46<pos:position pos:line="306" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="306" pos:column="20">DBG_PARSE_NOTE<pos:position pos:line="306" pos:column="34"/></name><argument_list pos:line="306" pos:column="34">(<argument><expr><name pos:line="306" pos:column="35">DBG_IMPORTANT<pos:position pos:line="306" pos:column="48"/></name></expr></argument>)<pos:position pos:line="306" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="306" pos:column="51">"WARNING: The \"&gt;v\" formatting code is deprecated. Use the \"&gt;rv\" instead."<pos:position pos:line="306" pos:column="134"/></literal></expr></argument>)<pos:position pos:line="306" pos:column="129"/></argument_list></call></expr>;<pos:position pos:line="306" pos:column="130"/></expr_stmt>
        <expr_stmt><expr><name pos:line="307" pos:column="9">type<pos:position pos:line="307" pos:column="13"/></name> <operator pos:line="307" pos:column="14">=<pos:position pos:line="307" pos:column="15"/></operator> <name pos:line="307" pos:column="16">LFT_REQUEST_VERSION<pos:position pos:line="307" pos:column="35"/></name></expr>;<pos:position pos:line="307" pos:column="36"/></expr_stmt>
        <break pos:line="308" pos:column="9">break;<pos:position pos:line="308" pos:column="15"/></break>

<cpp:if pos:line="310" pos:column="1">#<cpp:directive pos:line="310" pos:column="2">if<pos:position pos:line="310" pos:column="4"/></cpp:directive> <expr><operator pos:line="310" pos:column="5">!<pos:position pos:line="310" pos:column="6"/></operator><name pos:line="310" pos:column="6">USE_SQUID_EUI<pos:position pos:line="310" pos:column="19"/></name></expr></cpp:if>
    <case pos:line="311" pos:column="5">case <expr><name pos:line="311" pos:column="10">LFT_CLIENT_EUI<pos:position pos:line="311" pos:column="24"/></name></expr>:<pos:position pos:line="311" pos:column="25"/></case>
        <expr_stmt><expr><call><name pos:line="312" pos:column="9">debugs<pos:position pos:line="312" pos:column="15"/></name><argument_list pos:line="312" pos:column="15">(<argument><expr><literal type="number" pos:line="312" pos:column="16">46<pos:position pos:line="312" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="312" pos:column="20">DBG_CRITICAL<pos:position pos:line="312" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="312" pos:column="34">"WARNING: The \"&gt;eui\" formatting code requires EUI features which are disabled in this Squid."<pos:position pos:line="312" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="312" pos:column="130"/></argument_list></call></expr>;<pos:position pos:line="312" pos:column="131"/></expr_stmt>
        <break pos:line="313" pos:column="9">break;<pos:position pos:line="313" pos:column="15"/></break>
<cpp:endif pos:line="314" pos:column="1">#<cpp:directive pos:line="314" pos:column="2">endif<pos:position pos:line="314" pos:column="7"/></cpp:directive></cpp:endif>

    <default pos:line="316" pos:column="5">default:<pos:position pos:line="316" pos:column="13"/></default>
        <break pos:line="317" pos:column="9">break;<pos:position pos:line="317" pos:column="15"/></break>
    }<pos:position pos:line="318" pos:column="6"/></block></switch>

    <return pos:line="320" pos:column="5">return <expr><operator pos:line="320" pos:column="12">(<pos:position pos:line="320" pos:column="13"/></operator><name pos:line="320" pos:column="13">cur<pos:position pos:line="320" pos:column="16"/></name> <operator pos:line="320" pos:column="17">-<pos:position pos:line="320" pos:column="18"/></operator> <name pos:line="320" pos:column="19">def<pos:position pos:line="320" pos:column="22"/></name><operator pos:line="320" pos:column="22">)<pos:position pos:line="320" pos:column="23"/></operator></expr>;<pos:position pos:line="320" pos:column="24"/></return>
}<pos:position pos:line="321" pos:column="2"/></block></function></unit>
