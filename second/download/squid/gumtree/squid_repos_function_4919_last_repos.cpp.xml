<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4919_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">ResponseParser<pos:position pos:line="2" pos:column="26"/></name><operator pos:line="2" pos:column="26">::<pos:position pos:line="2" pos:column="28"/></operator><name pos:line="2" pos:column="28">parseResponseFirstLine<pos:position pos:line="2" pos:column="50"/></name></name><parameter_list pos:line="2" pos:column="50">()<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">Http1<pos:position pos:line="4" pos:column="10"/></name><operator pos:line="4" pos:column="10">::<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">Tokenizer<pos:position pos:line="4" pos:column="21"/></name></name></type> <name pos:line="4" pos:column="22">tok<pos:position pos:line="4" pos:column="25"/></name><argument_list pos:line="4" pos:column="25">(<argument><expr><name pos:line="4" pos:column="26">buf_<pos:position pos:line="4" pos:column="30"/></name></expr></argument>)<pos:position pos:line="4" pos:column="31"/></argument_list></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">CharacterSet<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">WspDelim<pos:position pos:line="6" pos:column="26"/></name> <init pos:line="6" pos:column="27">= <expr><name><name pos:line="6" pos:column="29">CharacterSet<pos:position pos:line="6" pos:column="41"/></name><operator pos:line="6" pos:column="41">::<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="43">SP<pos:position pos:line="6" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="46"/></decl_stmt> <comment type="line" pos:line="6" pos:column="47">// strict parse only accepts SP</comment>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">Config<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">onoff<pos:position pos:line="8" pos:column="21"/></name><operator pos:line="8" pos:column="21">.<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">relaxed_header_parser<pos:position pos:line="8" pos:column="43"/></name></name></expr>)<pos:position pos:line="8" pos:column="44"/></condition><then pos:line="8" pos:column="44"> <block pos:line="8" pos:column="45">{
        <comment type="line" pos:line="9" pos:column="9">// RFC 7230 section 3.5</comment>
        <comment type="line" pos:line="10" pos:column="9">// tolerant parser MAY accept any of SP, HTAB, VT (%x0B), FF (%x0C), or bare CR</comment>
        <comment type="line" pos:line="11" pos:column="9">// as whitespace between status-line fields</comment>
        <expr_stmt><expr><name pos:line="12" pos:column="9">WspDelim<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">+=<pos:position pos:line="12" pos:column="20"/></operator> <name><name pos:line="12" pos:column="21">CharacterSet<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">::<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="35">HTAB<pos:position pos:line="12" pos:column="39"/></name></name>
                    <operator pos:line="13" pos:column="21">+<pos:position pos:line="13" pos:column="22"/></operator> <call><name pos:line="13" pos:column="23">CharacterSet<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><literal type="string" pos:line="13" pos:column="36">"VT,FF"<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>,<argument><expr><literal type="string" pos:line="13" pos:column="44">"\x0B\x0C"<pos:position pos:line="13" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call>
                    <operator pos:line="14" pos:column="21">+<pos:position pos:line="14" pos:column="22"/></operator> <name><name pos:line="14" pos:column="23">CharacterSet<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">::<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">CR<pos:position pos:line="14" pos:column="39"/></name></name></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">msgProtocol_<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">.<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">protocol<pos:position pos:line="17" pos:column="30"/></name></name> <operator pos:line="17" pos:column="31">!=<pos:position pos:line="17" pos:column="33"/></operator> <name><name pos:line="17" pos:column="34">AnyP<pos:position pos:line="17" pos:column="38"/></name><operator pos:line="17" pos:column="38">::<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">PROTO_NONE<pos:position pos:line="17" pos:column="50"/></name></name></expr>)<pos:position pos:line="17" pos:column="51"/></condition><then pos:line="17" pos:column="51"> <block pos:line="17" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">74<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="20">6<pos:position pos:line="18" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="23">"continue incremental parse for "<pos:position pos:line="18" pos:column="56"/></literal> <operator pos:line="18" pos:column="57">&lt;&lt;<pos:position pos:line="18" pos:column="65"/></operator> <name pos:line="18" pos:column="60">msgProtocol_<pos:position pos:line="18" pos:column="72"/></name></expr></argument>)<pos:position pos:line="18" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">74<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">DBG_DATA<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="30">"parse remaining buf={length="<pos:position pos:line="19" pos:column="60"/></literal> <operator pos:line="19" pos:column="61">&lt;&lt;<pos:position pos:line="19" pos:column="69"/></operator> <call><name><name pos:line="19" pos:column="64">tok<pos:position pos:line="19" pos:column="67"/></name><operator pos:line="19" pos:column="67">.<pos:position pos:line="19" pos:column="68"/></operator><name pos:line="19" pos:column="68">remaining<pos:position pos:line="19" pos:column="77"/></name></name><argument_list pos:line="19" pos:column="77">()<pos:position pos:line="19" pos:column="79"/></argument_list></call><operator pos:line="19" pos:column="79">.<pos:position pos:line="19" pos:column="80"/></operator><call><name pos:line="19" pos:column="80">length<pos:position pos:line="19" pos:column="86"/></name><argument_list pos:line="19" pos:column="86">()<pos:position pos:line="19" pos:column="88"/></argument_list></call> <operator pos:line="19" pos:column="89">&lt;&lt;<pos:position pos:line="19" pos:column="97"/></operator> <literal type="string" pos:line="19" pos:column="92">", data='"<pos:position pos:line="19" pos:column="102"/></literal> <operator pos:line="19" pos:column="103">&lt;&lt;<pos:position pos:line="19" pos:column="111"/></operator> <call><name><name pos:line="19" pos:column="106">tok<pos:position pos:line="19" pos:column="109"/></name><operator pos:line="19" pos:column="109">.<pos:position pos:line="19" pos:column="110"/></operator><name pos:line="19" pos:column="110">remaining<pos:position pos:line="19" pos:column="119"/></name></name><argument_list pos:line="19" pos:column="119">()<pos:position pos:line="19" pos:column="121"/></argument_list></call> <operator pos:line="19" pos:column="122">&lt;&lt;<pos:position pos:line="19" pos:column="130"/></operator> <literal type="string" pos:line="19" pos:column="125">"'}"<pos:position pos:line="19" pos:column="129"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="130"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="131"/></expr_stmt>
        <comment type="line" pos:line="20" pos:column="9">// we already found the magic, but not the full line. keep going.</comment>
        <return pos:line="21" pos:column="9">return <expr><call><name pos:line="21" pos:column="16">parseResponseStatusAndReason<pos:position pos:line="21" pos:column="44"/></name><argument_list pos:line="21" pos:column="44">(<argument><expr><name pos:line="21" pos:column="45">tok<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">WspDelim<pos:position pos:line="21" pos:column="58"/></name></expr></argument>)<pos:position pos:line="21" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="60"/></return>

    }<pos:position pos:line="23" pos:column="6"/></block></then> <elseif pos:line="23" pos:column="7">else <if pos:line="23" pos:column="12">if <condition pos:line="23" pos:column="15">(<expr><call><name><name pos:line="23" pos:column="16">tok<pos:position pos:line="23" pos:column="19"/></name><operator pos:line="23" pos:column="19">.<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="20">skip<pos:position pos:line="23" pos:column="24"/></name></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">Http1magic<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37"> <block pos:line="23" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">74<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="20">6<pos:position pos:line="24" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="23">"found prefix magic "<pos:position pos:line="24" pos:column="44"/></literal> <operator pos:line="24" pos:column="45">&lt;&lt;<pos:position pos:line="24" pos:column="53"/></operator> <name pos:line="24" pos:column="48">Http1magic<pos:position pos:line="24" pos:column="58"/></name></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="60"/></expr_stmt>
        <comment type="line" pos:line="25" pos:column="9">// HTTP Response status-line parse</comment>

        <comment type="line" pos:line="27" pos:column="9">// magic contains major version, still need to find minor DIGIT</comment>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">int64_t<pos:position pos:line="28" pos:column="16"/></name></type> <name pos:line="28" pos:column="17">verMinor<pos:position pos:line="28" pos:column="25"/></name></decl>;<pos:position pos:line="28" pos:column="26"/></decl_stmt>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name><name pos:line="29" pos:column="13">tok<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">.<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">int64<pos:position pos:line="29" pos:column="22"/></name></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">verMinor<pos:position pos:line="29" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="33">10<pos:position pos:line="29" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="29" pos:column="37">false<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="44">1<pos:position pos:line="29" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call> <operator pos:line="29" pos:column="47">&amp;&amp;<pos:position pos:line="29" pos:column="57"/></operator> <call><name><name pos:line="29" pos:column="50">tok<pos:position pos:line="29" pos:column="53"/></name><operator pos:line="29" pos:column="53">.<pos:position pos:line="29" pos:column="54"/></operator><name pos:line="29" pos:column="54">skipOne<pos:position pos:line="29" pos:column="61"/></name></name><argument_list pos:line="29" pos:column="61">(<argument><expr><name pos:line="29" pos:column="62">WspDelim<pos:position pos:line="29" pos:column="70"/></name></expr></argument>)<pos:position pos:line="29" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="72"/></condition><then pos:line="29" pos:column="72"> <block pos:line="29" pos:column="73">{
            <expr_stmt><expr><name><name pos:line="30" pos:column="13">msgProtocol_<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">.<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="26">protocol<pos:position pos:line="30" pos:column="34"/></name></name> <operator pos:line="30" pos:column="35">=<pos:position pos:line="30" pos:column="36"/></operator> <name><name pos:line="30" pos:column="37">AnyP<pos:position pos:line="30" pos:column="41"/></name><operator pos:line="30" pos:column="41">::<pos:position pos:line="30" pos:column="43"/></operator><name pos:line="30" pos:column="43">PROTO_HTTP<pos:position pos:line="30" pos:column="53"/></name></name></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="31" pos:column="13">msgProtocol_<pos:position pos:line="31" pos:column="25"/></name><operator pos:line="31" pos:column="25">.<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="26">major<pos:position pos:line="31" pos:column="31"/></name></name> <operator pos:line="31" pos:column="32">=<pos:position pos:line="31" pos:column="33"/></operator> <literal type="number" pos:line="31" pos:column="34">1<pos:position pos:line="31" pos:column="35"/></literal></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="32" pos:column="13">msgProtocol_<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">.<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="26">minor<pos:position pos:line="32" pos:column="31"/></name></name> <operator pos:line="32" pos:column="32">=<pos:position pos:line="32" pos:column="33"/></operator> <cast type="static" pos:line="32" pos:column="34">static_cast<argument_list type="generic" pos:line="32" pos:column="45">&lt;<argument><expr><name pos:line="32" pos:column="46">unsigned<pos:position pos:line="32" pos:column="54"/></name> <name pos:line="32" pos:column="55">int<pos:position pos:line="32" pos:column="58"/></name></expr></argument>&gt;<pos:position pos:line="32" pos:column="62"/></argument_list><argument_list pos:line="32" pos:column="59">(<argument><expr><name pos:line="32" pos:column="60">verMinor<pos:position pos:line="32" pos:column="68"/></name></expr></argument>)<pos:position pos:line="32" pos:column="69"/></argument_list></cast></expr>;<pos:position pos:line="32" pos:column="70"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="34" pos:column="13">debugs<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="number" pos:line="34" pos:column="20">74<pos:position pos:line="34" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="24">6<pos:position pos:line="34" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="27">"found version="<pos:position pos:line="34" pos:column="43"/></literal> <operator pos:line="34" pos:column="44">&lt;&lt;<pos:position pos:line="34" pos:column="52"/></operator> <name pos:line="34" pos:column="47">msgProtocol_<pos:position pos:line="34" pos:column="59"/></name></expr></argument>)<pos:position pos:line="34" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="61"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="36" pos:column="13">debugs<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><literal type="number" pos:line="36" pos:column="20">74<pos:position pos:line="36" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="24">DBG_DATA<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="34">"parse remaining buf={length="<pos:position pos:line="36" pos:column="64"/></literal> <operator pos:line="36" pos:column="65">&lt;&lt;<pos:position pos:line="36" pos:column="73"/></operator> <call><name><name pos:line="36" pos:column="68">tok<pos:position pos:line="36" pos:column="71"/></name><operator pos:line="36" pos:column="71">.<pos:position pos:line="36" pos:column="72"/></operator><name pos:line="36" pos:column="72">remaining<pos:position pos:line="36" pos:column="81"/></name></name><argument_list pos:line="36" pos:column="81">()<pos:position pos:line="36" pos:column="83"/></argument_list></call><operator pos:line="36" pos:column="83">.<pos:position pos:line="36" pos:column="84"/></operator><call><name pos:line="36" pos:column="84">length<pos:position pos:line="36" pos:column="90"/></name><argument_list pos:line="36" pos:column="90">()<pos:position pos:line="36" pos:column="92"/></argument_list></call> <operator pos:line="36" pos:column="93">&lt;&lt;<pos:position pos:line="36" pos:column="101"/></operator> <literal type="string" pos:line="36" pos:column="96">", data='"<pos:position pos:line="36" pos:column="106"/></literal> <operator pos:line="36" pos:column="107">&lt;&lt;<pos:position pos:line="36" pos:column="115"/></operator> <call><name><name pos:line="36" pos:column="110">tok<pos:position pos:line="36" pos:column="113"/></name><operator pos:line="36" pos:column="113">.<pos:position pos:line="36" pos:column="114"/></operator><name pos:line="36" pos:column="114">remaining<pos:position pos:line="36" pos:column="123"/></name></name><argument_list pos:line="36" pos:column="123">()<pos:position pos:line="36" pos:column="125"/></argument_list></call> <operator pos:line="36" pos:column="126">&lt;&lt;<pos:position pos:line="36" pos:column="134"/></operator> <literal type="string" pos:line="36" pos:column="129">"'}"<pos:position pos:line="36" pos:column="133"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="134"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="135"/></expr_stmt>
            <expr_stmt><expr><name pos:line="37" pos:column="13">buf_<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <call><name><name pos:line="37" pos:column="20">tok<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">.<pos:position pos:line="37" pos:column="24"/></operator><name pos:line="37" pos:column="24">remaining<pos:position pos:line="37" pos:column="33"/></name></name><argument_list pos:line="37" pos:column="33">()<pos:position pos:line="37" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt> <comment type="line" pos:line="37" pos:column="37">// resume checkpoint</comment>
            <return pos:line="38" pos:column="13">return <expr><call><name pos:line="38" pos:column="20">parseResponseStatusAndReason<pos:position pos:line="38" pos:column="48"/></name><argument_list pos:line="38" pos:column="48">(<argument><expr><name pos:line="38" pos:column="49">tok<pos:position pos:line="38" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="54">WspDelim<pos:position pos:line="38" pos:column="62"/></name></expr></argument>)<pos:position pos:line="38" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="64"/></return>

        }<pos:position pos:line="40" pos:column="10"/></block></then> <elseif pos:line="40" pos:column="11">else <if pos:line="40" pos:column="16">if <condition pos:line="40" pos:column="19">(<expr><call><name><name pos:line="40" pos:column="20">tok<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">.<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="24">atEnd<pos:position pos:line="40" pos:column="29"/></name></name><argument_list pos:line="40" pos:column="29">()<pos:position pos:line="40" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32">
            <block type="pseudo"><return pos:line="41" pos:column="13">return <expr><literal type="number" pos:line="41" pos:column="20">0<pos:position pos:line="41" pos:column="21"/></literal></expr>;<pos:position pos:line="41" pos:column="22"/></return></block></then></if></elseif> <comment type="line" pos:line="41" pos:column="23">// need more to be sure we have it all</comment>
        <else pos:line="42" pos:column="9">else
            <block type="pseudo"><return pos:line="43" pos:column="13">return <expr><operator pos:line="43" pos:column="20">-<pos:position pos:line="43" pos:column="21"/></operator><literal type="number" pos:line="43" pos:column="21">1<pos:position pos:line="43" pos:column="22"/></literal></expr>;<pos:position pos:line="43" pos:column="23"/></return></block></else></if> <comment type="line" pos:line="43" pos:column="24">// invalid version or delimiter, a single SP terminator required</comment>

    }<pos:position pos:line="45" pos:column="6"/></block></then></if></elseif> <elseif pos:line="45" pos:column="7">else <if pos:line="45" pos:column="12">if <condition pos:line="45" pos:column="15">(<expr><call><name><name pos:line="45" pos:column="16">tok<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">.<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">skip<pos:position pos:line="45" pos:column="24"/></name></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">IcyMagic<pos:position pos:line="45" pos:column="33"/></name></expr></argument>)<pos:position pos:line="45" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="35"/></condition><then pos:line="45" pos:column="35"> <block pos:line="45" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">debugs<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><literal type="number" pos:line="46" pos:column="16">74<pos:position pos:line="46" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="20">6<pos:position pos:line="46" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="23">"found prefix magic "<pos:position pos:line="46" pos:column="44"/></literal> <operator pos:line="46" pos:column="45">&lt;&lt;<pos:position pos:line="46" pos:column="53"/></operator> <name pos:line="46" pos:column="48">IcyMagic<pos:position pos:line="46" pos:column="56"/></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="58"/></expr_stmt>
        <comment type="line" pos:line="47" pos:column="9">// ICY Response status-line parse (same as HTTP/1 after the magic version)</comment>
        <expr_stmt><expr><name><name pos:line="48" pos:column="9">msgProtocol_<pos:position pos:line="48" pos:column="21"/></name><operator pos:line="48" pos:column="21">.<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="22">protocol<pos:position pos:line="48" pos:column="30"/></name></name> <operator pos:line="48" pos:column="31">=<pos:position pos:line="48" pos:column="32"/></operator> <name><name pos:line="48" pos:column="33">AnyP<pos:position pos:line="48" pos:column="37"/></name><operator pos:line="48" pos:column="37">::<pos:position pos:line="48" pos:column="39"/></operator><name pos:line="48" pos:column="39">PROTO_ICY<pos:position pos:line="48" pos:column="48"/></name></name></expr>;<pos:position pos:line="48" pos:column="49"/></expr_stmt>
        <comment type="line" pos:line="49" pos:column="9">// NP: ICY has no /major.minor details</comment>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">debugs<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><literal type="number" pos:line="50" pos:column="16">74<pos:position pos:line="50" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="20">DBG_DATA<pos:position pos:line="50" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="30">"parse remaining buf={length="<pos:position pos:line="50" pos:column="60"/></literal> <operator pos:line="50" pos:column="61">&lt;&lt;<pos:position pos:line="50" pos:column="69"/></operator> <call><name><name pos:line="50" pos:column="64">tok<pos:position pos:line="50" pos:column="67"/></name><operator pos:line="50" pos:column="67">.<pos:position pos:line="50" pos:column="68"/></operator><name pos:line="50" pos:column="68">remaining<pos:position pos:line="50" pos:column="77"/></name></name><argument_list pos:line="50" pos:column="77">()<pos:position pos:line="50" pos:column="79"/></argument_list></call><operator pos:line="50" pos:column="79">.<pos:position pos:line="50" pos:column="80"/></operator><call><name pos:line="50" pos:column="80">length<pos:position pos:line="50" pos:column="86"/></name><argument_list pos:line="50" pos:column="86">()<pos:position pos:line="50" pos:column="88"/></argument_list></call> <operator pos:line="50" pos:column="89">&lt;&lt;<pos:position pos:line="50" pos:column="97"/></operator> <literal type="string" pos:line="50" pos:column="92">", data='"<pos:position pos:line="50" pos:column="102"/></literal> <operator pos:line="50" pos:column="103">&lt;&lt;<pos:position pos:line="50" pos:column="111"/></operator> <call><name><name pos:line="50" pos:column="106">tok<pos:position pos:line="50" pos:column="109"/></name><operator pos:line="50" pos:column="109">.<pos:position pos:line="50" pos:column="110"/></operator><name pos:line="50" pos:column="110">remaining<pos:position pos:line="50" pos:column="119"/></name></name><argument_list pos:line="50" pos:column="119">()<pos:position pos:line="50" pos:column="121"/></argument_list></call> <operator pos:line="50" pos:column="122">&lt;&lt;<pos:position pos:line="50" pos:column="130"/></operator> <literal type="string" pos:line="50" pos:column="125">"'}"<pos:position pos:line="50" pos:column="129"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="130"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="131"/></expr_stmt>
        <expr_stmt><expr><name pos:line="51" pos:column="9">buf_<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <call><name><name pos:line="51" pos:column="16">tok<pos:position pos:line="51" pos:column="19"/></name><operator pos:line="51" pos:column="19">.<pos:position pos:line="51" pos:column="20"/></operator><name pos:line="51" pos:column="20">remaining<pos:position pos:line="51" pos:column="29"/></name></name><argument_list pos:line="51" pos:column="29">()<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt> <comment type="line" pos:line="51" pos:column="33">// resume checkpoint</comment>
        <return pos:line="52" pos:column="9">return <expr><call><name pos:line="52" pos:column="16">parseResponseStatusAndReason<pos:position pos:line="52" pos:column="44"/></name><argument_list pos:line="52" pos:column="44">(<argument><expr><name pos:line="52" pos:column="45">tok<pos:position pos:line="52" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="50">WspDelim<pos:position pos:line="52" pos:column="58"/></name></expr></argument>)<pos:position pos:line="52" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="60"/></return>

    }<pos:position pos:line="54" pos:column="6"/></block></then></if></elseif> <elseif pos:line="54" pos:column="7">else <if pos:line="54" pos:column="12">if <condition pos:line="54" pos:column="15">(<expr><call><name><name pos:line="54" pos:column="16">buf_<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">.<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="21">length<pos:position pos:line="54" pos:column="27"/></name></name><argument_list pos:line="54" pos:column="27">()<pos:position pos:line="54" pos:column="29"/></argument_list></call> <operator pos:line="54" pos:column="30">&gt;<pos:position pos:line="54" pos:column="34"/></operator> <call><name><name pos:line="54" pos:column="32">Http1magic<pos:position pos:line="54" pos:column="42"/></name><operator pos:line="54" pos:column="42">.<pos:position pos:line="54" pos:column="43"/></operator><name pos:line="54" pos:column="43">length<pos:position pos:line="54" pos:column="49"/></name></name><argument_list pos:line="54" pos:column="49">()<pos:position pos:line="54" pos:column="51"/></argument_list></call> <operator pos:line="54" pos:column="52">&amp;&amp;<pos:position pos:line="54" pos:column="62"/></operator> <call><name><name pos:line="54" pos:column="55">buf_<pos:position pos:line="54" pos:column="59"/></name><operator pos:line="54" pos:column="59">.<pos:position pos:line="54" pos:column="60"/></operator><name pos:line="54" pos:column="60">length<pos:position pos:line="54" pos:column="66"/></name></name><argument_list pos:line="54" pos:column="66">()<pos:position pos:line="54" pos:column="68"/></argument_list></call> <operator pos:line="54" pos:column="69">&gt;<pos:position pos:line="54" pos:column="73"/></operator> <call><name><name pos:line="54" pos:column="71">IcyMagic<pos:position pos:line="54" pos:column="79"/></name><operator pos:line="54" pos:column="79">.<pos:position pos:line="54" pos:column="80"/></operator><name pos:line="54" pos:column="80">length<pos:position pos:line="54" pos:column="86"/></name></name><argument_list pos:line="54" pos:column="86">()<pos:position pos:line="54" pos:column="88"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="89"/></condition><then pos:line="54" pos:column="89"> <block pos:line="54" pos:column="90">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">debugs<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><literal type="number" pos:line="55" pos:column="16">74<pos:position pos:line="55" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="20">2<pos:position pos:line="55" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="23">"unknown/missing prefix magic. Interpreting as HTTP/0.9"<pos:position pos:line="55" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="81"/></expr_stmt>
        <comment type="line" pos:line="56" pos:column="9">// found something that looks like an HTTP/0.9 response</comment>
        <comment type="line" pos:line="57" pos:column="9">// Gateway/Transform it into HTTP/1.1</comment>
        <expr_stmt><expr><name pos:line="58" pos:column="9">msgProtocol_<pos:position pos:line="58" pos:column="21"/></name> <operator pos:line="58" pos:column="22">=<pos:position pos:line="58" pos:column="23"/></operator> <call><name><name pos:line="58" pos:column="24">Http<pos:position pos:line="58" pos:column="28"/></name><operator pos:line="58" pos:column="28">::<pos:position pos:line="58" pos:column="30"/></operator><name pos:line="58" pos:column="30">ProtocolVersion<pos:position pos:line="58" pos:column="45"/></name></name><argument_list pos:line="58" pos:column="45">(<argument><expr><literal type="number" pos:line="58" pos:column="46">1<pos:position pos:line="58" pos:column="47"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="58" pos:column="48">1<pos:position pos:line="58" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="51"/></expr_stmt>
        <comment type="line" pos:line="59" pos:column="9">// XXX: probably should use version 0.9 here and upgrade on output,</comment>
        <comment type="line" pos:line="60" pos:column="9">// but the old code did 1.1 transformation now.</comment>
        <expr_stmt><expr><name pos:line="61" pos:column="9">statusCode_<pos:position pos:line="61" pos:column="20"/></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <name><name pos:line="61" pos:column="23">Http<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">::<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="29">scOkay<pos:position pos:line="61" pos:column="35"/></name></name></expr>;<pos:position pos:line="61" pos:column="36"/></expr_stmt>
        <decl_stmt><decl><specifier pos:line="62" pos:column="9">static<pos:position pos:line="62" pos:column="15"/></specifier> <type><specifier pos:line="62" pos:column="16">const<pos:position pos:line="62" pos:column="21"/></specifier> <name pos:line="62" pos:column="22">SBuf<pos:position pos:line="62" pos:column="26"/></name></type> <name pos:line="62" pos:column="27">gatewayPhrase<pos:position pos:line="62" pos:column="40"/></name><argument_list pos:line="62" pos:column="40">(<argument><expr><literal type="string" pos:line="62" pos:column="41">"Gatewaying"<pos:position pos:line="62" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="54"/></argument_list></decl>;<pos:position pos:line="62" pos:column="55"/></decl_stmt>
        <expr_stmt><expr><name pos:line="63" pos:column="9">reasonPhrase_<pos:position pos:line="63" pos:column="22"/></name> <operator pos:line="63" pos:column="23">=<pos:position pos:line="63" pos:column="24"/></operator> <name pos:line="63" pos:column="25">gatewayPhrase<pos:position pos:line="63" pos:column="38"/></name></expr>;<pos:position pos:line="63" pos:column="39"/></expr_stmt>
        <decl_stmt><decl><specifier pos:line="64" pos:column="9">static<pos:position pos:line="64" pos:column="15"/></specifier> <type><specifier pos:line="64" pos:column="16">const<pos:position pos:line="64" pos:column="21"/></specifier> <name pos:line="64" pos:column="22">SBuf<pos:position pos:line="64" pos:column="26"/></name></type> <name pos:line="64" pos:column="27">fakeHttpMimeBlock<pos:position pos:line="64" pos:column="44"/></name><argument_list pos:line="64" pos:column="44">(<argument><expr><literal type="string" pos:line="64" pos:column="45">"X-Transformed-From: HTTP/0.9\r\n"<pos:position pos:line="64" pos:column="79"/></literal>
                                            <comment type="block" pos:line="65" pos:column="45">/* Server: visible_appname_string */</comment>
                                            <literal type="string" pos:line="66" pos:column="45">"Mime-Version: 1.0\r\n"<pos:position pos:line="66" pos:column="68"/></literal>
                                            <comment type="block" pos:line="67" pos:column="45">/* Date: squid_curtime */</comment>
                                            <literal type="string" pos:line="68" pos:column="45">"Expires: -1\r\n\r\n"<pos:position pos:line="68" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="67"/></argument_list></decl>;<pos:position pos:line="68" pos:column="68"/></decl_stmt>
        <expr_stmt><expr><name pos:line="69" pos:column="9">mimeHeaderBlock_<pos:position pos:line="69" pos:column="25"/></name> <operator pos:line="69" pos:column="26">=<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="28">fakeHttpMimeBlock<pos:position pos:line="69" pos:column="45"/></name></expr>;<pos:position pos:line="69" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name pos:line="70" pos:column="9">parsingStage_<pos:position pos:line="70" pos:column="22"/></name> <operator pos:line="70" pos:column="23">=<pos:position pos:line="70" pos:column="24"/></operator> <name pos:line="70" pos:column="25">HTTP_PARSE_DONE<pos:position pos:line="70" pos:column="40"/></name></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>
        <return pos:line="71" pos:column="9">return <expr><literal type="number" pos:line="71" pos:column="16">1<pos:position pos:line="71" pos:column="17"/></literal></expr>;<pos:position pos:line="71" pos:column="18"/></return> <comment type="line" pos:line="71" pos:column="19">// no more parsing</comment>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if></elseif></if>

    <return pos:line="74" pos:column="5">return <expr><literal type="number" pos:line="74" pos:column="12">0<pos:position pos:line="74" pos:column="13"/></literal></expr>;<pos:position pos:line="74" pos:column="14"/></return> <comment type="line" pos:line="74" pos:column="15">// need more to parse anything.</comment>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
