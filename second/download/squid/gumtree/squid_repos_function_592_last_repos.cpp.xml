<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_592_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_remove_close_handler<pos:position pos:line="2" pos:column="26"/></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">fd<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">CLCB<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type> <name pos:line="2" pos:column="42">handler<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">void<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">data<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><call><name pos:line="4" pos:column="12">isOpen<pos:position pos:line="4" pos:column="18"/></name><argument_list pos:line="4" pos:column="18">(<argument><expr><name pos:line="4" pos:column="19">fd<pos:position pos:line="4" pos:column="21"/></name></expr></argument>)<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="24"/></expr_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* Find handler in list */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">5<pos:position pos:line="6" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="15">5<pos:position pos:line="6" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="18">"comm_remove_close_handler: FD "<pos:position pos:line="6" pos:column="50"/></literal> <operator pos:line="6" pos:column="51">&lt;&lt;<pos:position pos:line="6" pos:column="59"/></operator> <name pos:line="6" pos:column="54">fd<pos:position pos:line="6" pos:column="56"/></name> <operator pos:line="6" pos:column="57">&lt;&lt;<pos:position pos:line="6" pos:column="65"/></operator> <literal type="string" pos:line="6" pos:column="60">", handler="<pos:position pos:line="6" pos:column="72"/></literal> <operator pos:line="6" pos:column="73">&lt;&lt;<pos:position pos:line="6" pos:column="81"/></operator>
           <name pos:line="7" pos:column="12">handler<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">&lt;&lt;<pos:position pos:line="7" pos:column="28"/></operator> <literal type="string" pos:line="7" pos:column="23">", data="<pos:position pos:line="7" pos:column="32"/></literal> <operator pos:line="7" pos:column="33">&lt;&lt;<pos:position pos:line="7" pos:column="41"/></operator> <name pos:line="7" pos:column="36">data<pos:position pos:line="7" pos:column="40"/></name></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">AsyncCall<pos:position pos:line="9" pos:column="14"/></name><operator pos:line="9" pos:column="14">::<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">Pointer<pos:position pos:line="9" pos:column="23"/></name></name></type> <name pos:line="9" pos:column="24">p<pos:position pos:line="9" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="27">prev<pos:position pos:line="9" pos:column="31"/></name> <init pos:line="9" pos:column="32">= <expr><name pos:line="9" pos:column="34">NULL<pos:position pos:line="9" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="39"/></decl_stmt>
    <for pos:line="10" pos:column="5">for <control pos:line="10" pos:column="9">(<init><expr><name pos:line="10" pos:column="10">p<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <name><name pos:line="10" pos:column="14">fd_table<pos:position pos:line="10" pos:column="22"/></name><index pos:line="10" pos:column="22">[<expr><name pos:line="10" pos:column="23">fd<pos:position pos:line="10" pos:column="25"/></name></expr>]<pos:position pos:line="10" pos:column="26"/></index></name><operator pos:line="10" pos:column="26">.<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="27">closeHandler<pos:position pos:line="10" pos:column="39"/></name></expr>;<pos:position pos:line="10" pos:column="40"/></init> <condition><expr><name pos:line="10" pos:column="41">p<pos:position pos:line="10" pos:column="42"/></name> <operator pos:line="10" pos:column="43">!=<pos:position pos:line="10" pos:column="45"/></operator> <name pos:line="10" pos:column="46">NULL<pos:position pos:line="10" pos:column="50"/></name></expr>;<pos:position pos:line="10" pos:column="51"/></condition> <incr><expr><name pos:line="10" pos:column="52">prev<pos:position pos:line="10" pos:column="56"/></name> <operator pos:line="10" pos:column="57">=<pos:position pos:line="10" pos:column="58"/></operator> <name pos:line="10" pos:column="59">p<pos:position pos:line="10" pos:column="60"/></name></expr><operator pos:line="10" pos:column="60">,<pos:position pos:line="10" pos:column="61"/></operator> <expr><name pos:line="10" pos:column="62">p<pos:position pos:line="10" pos:column="63"/></name> <operator pos:line="10" pos:column="64">=<pos:position pos:line="10" pos:column="65"/></operator> <call><name><name pos:line="10" pos:column="66">p<pos:position pos:line="10" pos:column="67"/></name><operator pos:line="10" pos:column="67">-&gt;<pos:position pos:line="10" pos:column="72"/></operator><name pos:line="10" pos:column="69">Next<pos:position pos:line="10" pos:column="73"/></name></name><argument_list pos:line="10" pos:column="73">()<pos:position pos:line="10" pos:column="75"/></argument_list></call></expr></incr>)<pos:position pos:line="10" pos:column="76"/></control> <block pos:line="10" pos:column="77">{
        <typedef pos:line="11" pos:column="9">typedef <type><name><name pos:line="11" pos:column="17">CommCbFunPtrCallT<pos:position pos:line="11" pos:column="34"/></name><argument_list type="generic" pos:line="11" pos:column="34">&lt;<argument><expr><name pos:line="11" pos:column="35">CommCloseCbPtrFun<pos:position pos:line="11" pos:column="52"/></name></expr></argument>&gt;<pos:position pos:line="11" pos:column="56"/></argument_list></name></type> <name pos:line="11" pos:column="54">Call<pos:position pos:line="11" pos:column="58"/></name>;<pos:position pos:line="11" pos:column="59"/></typedef>
        <decl_stmt><decl><type><specifier pos:line="12" pos:column="9">const<pos:position pos:line="12" pos:column="14"/></specifier> <name pos:line="12" pos:column="15">Call<pos:position pos:line="12" pos:column="19"/></name> <modifier pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></modifier></type><name pos:line="12" pos:column="21">call<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">= <expr><cast type="dynamic" pos:line="12" pos:column="28">dynamic_cast<argument_list type="generic" pos:line="12" pos:column="40">&lt;<argument><expr><specifier pos:line="12" pos:column="41">const<pos:position pos:line="12" pos:column="46"/></specifier> <name pos:line="12" pos:column="47">Call<pos:position pos:line="12" pos:column="51"/></name><operator pos:line="12" pos:column="51">*<pos:position pos:line="12" pos:column="52"/></operator></expr></argument>&gt;<pos:position pos:line="12" pos:column="56"/></argument_list><argument_list pos:line="12" pos:column="53">(<argument><expr><call><name><name pos:line="12" pos:column="54">p<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">.<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="56">getRaw<pos:position pos:line="12" pos:column="62"/></name></name><argument_list pos:line="12" pos:column="62">()<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="12" pos:column="66"/></decl_stmt>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><operator pos:line="13" pos:column="13">!<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">call<pos:position pos:line="13" pos:column="18"/></name></expr>)<pos:position pos:line="13" pos:column="19"/></condition><then pos:line="13" pos:column="19"> <comment type="line" pos:line="13" pos:column="20">// method callbacks have their own comm_remove_close_handler</comment>
            <block type="pseudo"><continue pos:line="14" pos:column="13">continue;<pos:position pos:line="14" pos:column="22"/></continue></block></then></if>

        <typedef pos:line="16" pos:column="9">typedef <type><name pos:line="16" pos:column="17">CommCloseCbParams<pos:position pos:line="16" pos:column="34"/></name></type> <name pos:line="16" pos:column="35">Params<pos:position pos:line="16" pos:column="41"/></name>;<pos:position pos:line="16" pos:column="42"/></typedef>
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">const<pos:position pos:line="17" pos:column="14"/></specifier> <name pos:line="17" pos:column="15">Params<pos:position pos:line="17" pos:column="21"/></name> <modifier pos:line="17" pos:column="22">&amp;<pos:position pos:line="17" pos:column="27"/></modifier></type><name pos:line="17" pos:column="23">params<pos:position pos:line="17" pos:column="29"/></name> <init pos:line="17" pos:column="30">= <expr><call><name><name pos:line="17" pos:column="32">GetCommParams<pos:position pos:line="17" pos:column="45"/></name><argument_list type="generic" pos:line="17" pos:column="45">&lt;<argument><expr><name pos:line="17" pos:column="46">Params<pos:position pos:line="17" pos:column="52"/></name></expr></argument>&gt;<pos:position pos:line="17" pos:column="56"/></argument_list></name><argument_list pos:line="17" pos:column="53">(<argument><expr><name pos:line="17" pos:column="54">p<pos:position pos:line="17" pos:column="55"/></name></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="57"/></decl_stmt>
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name><name pos:line="18" pos:column="13">call<pos:position pos:line="18" pos:column="17"/></name><operator pos:line="18" pos:column="17">-&gt;<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="19">dialer<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">.<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">handler<pos:position pos:line="18" pos:column="33"/></name></name> <operator pos:line="18" pos:column="34">==<pos:position pos:line="18" pos:column="36"/></operator> <name pos:line="18" pos:column="37">handler<pos:position pos:line="18" pos:column="44"/></name> <operator pos:line="18" pos:column="45">&amp;&amp;<pos:position pos:line="18" pos:column="55"/></operator> <name><name pos:line="18" pos:column="48">params<pos:position pos:line="18" pos:column="54"/></name><operator pos:line="18" pos:column="54">.<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="55">data<pos:position pos:line="18" pos:column="59"/></name></name> <operator pos:line="18" pos:column="60">==<pos:position pos:line="18" pos:column="62"/></operator> <name pos:line="18" pos:column="63">data<pos:position pos:line="18" pos:column="67"/></name></expr>)<pos:position pos:line="18" pos:column="68"/></condition><then pos:line="18" pos:column="68">
            <block type="pseudo"><break pos:line="19" pos:column="13">break;<pos:position pos:line="19" pos:column="19"/></break></block></then></if>      <comment type="block" pos:line="19" pos:column="25">/* This is our handler */</comment>
    }<pos:position pos:line="20" pos:column="6"/></block></for>

    <comment type="line" pos:line="22" pos:column="5">// comm_close removes all close handlers so our handler may be gone</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">p<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">!=<pos:position pos:line="23" pos:column="13"/></operator> <name pos:line="23" pos:column="14">NULL<pos:position pos:line="23" pos:column="18"/></name></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19"> <block pos:line="23" pos:column="20">{
        <expr_stmt><expr><call><name><name pos:line="24" pos:column="9">p<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">dequeue<pos:position pos:line="24" pos:column="19"/></name></name><argument_list pos:line="24" pos:column="19">(<argument><expr><name><name pos:line="24" pos:column="20">fd_table<pos:position pos:line="24" pos:column="28"/></name><index pos:line="24" pos:column="28">[<expr><name pos:line="24" pos:column="29">fd<pos:position pos:line="24" pos:column="31"/></name></expr>]<pos:position pos:line="24" pos:column="32"/></index></name><operator pos:line="24" pos:column="32">.<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="33">closeHandler<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="47">prev<pos:position pos:line="24" pos:column="51"/></name></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="25" pos:column="9">p<pos:position pos:line="25" pos:column="10"/></name><operator pos:line="25" pos:column="10">-&gt;<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="12">cancel<pos:position pos:line="25" pos:column="18"/></name></name><argument_list pos:line="25" pos:column="18">(<argument><expr><literal type="string" pos:line="25" pos:column="19">"comm_remove_close_handler"<pos:position pos:line="25" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
