<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_387_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier><modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">argv<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>

<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">wstr<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><literal type="number" pos:line="5" pos:column="15">256<pos:position pos:line="5" pos:column="18"/></literal></expr>]<pos:position pos:line="5" pos:column="19"/></index></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">username<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><literal type="number" pos:line="6" pos:column="19">256<pos:position pos:line="6" pos:column="22"/></literal></expr>]<pos:position pos:line="6" pos:column="23"/></index></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">password<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><literal type="number" pos:line="7" pos:column="19">256<pos:position pos:line="7" pos:column="22"/></literal></expr>]<pos:position pos:line="7" pos:column="23"/></index></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">p<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">err<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><literal type="number" pos:line="9" pos:column="15">0<pos:position pos:line="9" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>

    <expr_stmt><expr><name pos:line="11" pos:column="5">my_program_name<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <name><name pos:line="11" pos:column="23">argv<pos:position pos:line="11" pos:column="27"/></name><index pos:line="11" pos:column="27">[<expr><literal type="number" pos:line="11" pos:column="28">0<pos:position pos:line="11" pos:column="29"/></literal></expr>]<pos:position pos:line="11" pos:column="30"/></index></name></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">process_options<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">argc<pos:position pos:line="12" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="27">argv<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debug<pos:position pos:line="14" pos:column="10"/></name><argument_list pos:line="14" pos:column="10">(<argument><expr><literal type="string" pos:line="14" pos:column="11">"%s build "<pos:position pos:line="14" pos:column="22"/></literal> <name pos:line="14" pos:column="23">__DATE__<pos:position pos:line="14" pos:column="31"/></name> <literal type="string" pos:line="14" pos:column="32">", "<pos:position pos:line="14" pos:column="36"/></literal> <name pos:line="14" pos:column="37">__TIME__<pos:position pos:line="14" pos:column="45"/></name> <literal type="string" pos:line="14" pos:column="46">" starting up...\n"<pos:position pos:line="14" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="67">my_program_name<pos:position pos:line="14" pos:column="82"/></name></expr></argument>)<pos:position pos:line="14" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="84"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">LoadSecurityDll<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">SSP_BASIC<pos:position pos:line="16" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="36">NTLM_PACKAGE_NAME<pos:position pos:line="16" pos:column="53"/></name></expr></argument>)<pos:position pos:line="16" pos:column="54"/></argument_list></call> <operator pos:line="16" pos:column="55">==<pos:position pos:line="16" pos:column="57"/></operator> <name pos:line="16" pos:column="58">NULL<pos:position pos:line="16" pos:column="62"/></name></expr>)<pos:position pos:line="16" pos:column="63"/></condition><then pos:line="16" pos:column="63"> <block pos:line="16" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">fprintf<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><name pos:line="17" pos:column="17">stderr<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="25">"FATAL, can't initialize SSPI, exiting.\n"<pos:position pos:line="17" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">exit<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><literal type="number" pos:line="18" pos:column="14">1<pos:position pos:line="18" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">debug<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><expr><literal type="string" pos:line="20" pos:column="11">"SSPI initialized OK\n"<pos:position pos:line="20" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">atexit<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name pos:line="22" pos:column="12">UnloadSecurityDll<pos:position pos:line="22" pos:column="29"/></name></expr></argument>)<pos:position pos:line="22" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="24" pos:column="5">/* initialize FDescs */</comment>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">setbuf<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><name pos:line="25" pos:column="12">stdout<pos:position pos:line="25" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="20">NULL<pos:position pos:line="25" pos:column="24"/></name></expr></argument>)<pos:position pos:line="25" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">setbuf<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name pos:line="26" pos:column="12">stderr<pos:position pos:line="26" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="20">NULL<pos:position pos:line="26" pos:column="24"/></name></expr></argument>)<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>

    <while pos:line="28" pos:column="5">while <condition pos:line="28" pos:column="11">(<expr><literal type="number" pos:line="28" pos:column="12">1<pos:position pos:line="28" pos:column="13"/></literal></expr>)<pos:position pos:line="28" pos:column="14"/></condition> <block pos:line="28" pos:column="15">{
        <comment type="block" pos:line="29" pos:column="9">/* Read whole line from standard input. Terminate on break. */</comment>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">fgets<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name pos:line="30" pos:column="19">wstr<pos:position pos:line="30" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="25">255<pos:position pos:line="30" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">stdin<pos:position pos:line="30" pos:column="35"/></name></expr></argument>)<pos:position pos:line="30" pos:column="36"/></argument_list></call> <operator pos:line="30" pos:column="37">==<pos:position pos:line="30" pos:column="39"/></operator> <name pos:line="30" pos:column="40">NULL<pos:position pos:line="30" pos:column="44"/></name></expr>)<pos:position pos:line="30" pos:column="45"/></condition><then pos:line="30" pos:column="45">
            <block type="pseudo"><break pos:line="31" pos:column="13">break;<pos:position pos:line="31" pos:column="19"/></break></block></then></if>

        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">NULL<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">==<pos:position pos:line="33" pos:column="20"/></operator> <call><name pos:line="33" pos:column="21">strchr<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">wstr<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="34">'\n'<pos:position pos:line="33" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="40"/></condition><then pos:line="33" pos:column="40"> <block pos:line="33" pos:column="41">{
            <expr_stmt><expr><name pos:line="34" pos:column="13">err<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <literal type="number" pos:line="34" pos:column="19">1<pos:position pos:line="34" pos:column="20"/></literal></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt>
            <continue pos:line="35" pos:column="13">continue;<pos:position pos:line="35" pos:column="22"/></continue>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">err<pos:position pos:line="37" pos:column="16"/></name></expr>)<pos:position pos:line="37" pos:column="17"/></condition><then pos:line="37" pos:column="17"> <block pos:line="37" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">fprintf<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">stderr<pos:position pos:line="38" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="29">"Oversized message\n"<pos:position pos:line="38" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">puts<pos:position pos:line="39" pos:column="17"/></name><argument_list pos:line="39" pos:column="17">(<argument><expr><literal type="string" pos:line="39" pos:column="18">"ERR"<pos:position pos:line="39" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="25"/></expr_stmt>
            <goto pos:line="40" pos:column="13">goto <name pos:line="40" pos:column="18">error<pos:position pos:line="40" pos:column="23"/></name>;<pos:position pos:line="40" pos:column="24"/></goto>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>

        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">(<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">p<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <call><name pos:line="43" pos:column="18">strchr<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name pos:line="43" pos:column="25">wstr<pos:position pos:line="43" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="31">'\n'<pos:position pos:line="43" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="36"/></argument_list></call><operator pos:line="43" pos:column="36">)<pos:position pos:line="43" pos:column="37"/></operator> <operator pos:line="43" pos:column="38">!=<pos:position pos:line="43" pos:column="40"/></operator> <name pos:line="43" pos:column="41">NULL<pos:position pos:line="43" pos:column="45"/></name></expr>)<pos:position pos:line="43" pos:column="46"/></condition><then pos:line="43" pos:column="46">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="44" pos:column="13">*<pos:position pos:line="44" pos:column="14"/></operator><name pos:line="44" pos:column="14">p<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <literal type="char" pos:line="44" pos:column="18">'\0'<pos:position pos:line="44" pos:column="22"/></literal></expr>;<pos:position pos:line="44" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="44" pos:column="33">/* strip \n */</comment>
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">(<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="14">p<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <call><name pos:line="45" pos:column="18">strchr<pos:position pos:line="45" pos:column="24"/></name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">wstr<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="45" pos:column="31">'\r'<pos:position pos:line="45" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="36"/></argument_list></call><operator pos:line="45" pos:column="36">)<pos:position pos:line="45" pos:column="37"/></operator> <operator pos:line="45" pos:column="38">!=<pos:position pos:line="45" pos:column="40"/></operator> <name pos:line="45" pos:column="41">NULL<pos:position pos:line="45" pos:column="45"/></name></expr>)<pos:position pos:line="45" pos:column="46"/></condition><then pos:line="45" pos:column="46">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="46" pos:column="13">*<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">p<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">=<pos:position pos:line="46" pos:column="17"/></operator> <literal type="char" pos:line="46" pos:column="18">'\0'<pos:position pos:line="46" pos:column="22"/></literal></expr>;<pos:position pos:line="46" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="46" pos:column="33">/* strip \r */</comment>
        <comment type="block" pos:line="47" pos:column="9">/* Clear any current settings */</comment>
        <expr_stmt><expr><name><name pos:line="48" pos:column="9">username<pos:position pos:line="48" pos:column="17"/></name><index pos:line="48" pos:column="17">[<expr><literal type="number" pos:line="48" pos:column="18">0<pos:position pos:line="48" pos:column="19"/></literal></expr>]<pos:position pos:line="48" pos:column="20"/></index></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <literal type="char" pos:line="48" pos:column="23">'\0'<pos:position pos:line="48" pos:column="27"/></literal></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">password<pos:position pos:line="49" pos:column="17"/></name><index pos:line="49" pos:column="17">[<expr><literal type="number" pos:line="49" pos:column="18">0<pos:position pos:line="49" pos:column="19"/></literal></expr>]<pos:position pos:line="49" pos:column="20"/></index></name> <operator pos:line="49" pos:column="21">=<pos:position pos:line="49" pos:column="22"/></operator> <literal type="char" pos:line="49" pos:column="23">'\0'<pos:position pos:line="49" pos:column="27"/></literal></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">sscanf<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><name pos:line="50" pos:column="16">wstr<pos:position pos:line="50" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="22">"%s %s"<pos:position pos:line="50" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="50" pos:column="31">username<pos:position pos:line="50" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="41">password<pos:position pos:line="50" pos:column="49"/></name></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="51"/></expr_stmt>	<comment type="block" pos:line="50" pos:column="57">/* Extract parameters */</comment>

        <expr_stmt><expr><call><name pos:line="52" pos:column="9">debug<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><literal type="string" pos:line="52" pos:column="15">"Got %s from Squid\n"<pos:position pos:line="52" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="38">wstr<pos:position pos:line="52" pos:column="42"/></name></expr></argument>)<pos:position pos:line="52" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>

        <comment type="block" pos:line="54" pos:column="9">/* Check for invalid or blank entries */</comment>
        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">(<pos:position pos:line="55" pos:column="14"/></operator><name><name pos:line="55" pos:column="14">username<pos:position pos:line="55" pos:column="22"/></name><index pos:line="55" pos:column="22">[<expr><literal type="number" pos:line="55" pos:column="23">0<pos:position pos:line="55" pos:column="24"/></literal></expr>]<pos:position pos:line="55" pos:column="25"/></index></name> <operator pos:line="55" pos:column="26">==<pos:position pos:line="55" pos:column="28"/></operator> <literal type="char" pos:line="55" pos:column="29">'\0'<pos:position pos:line="55" pos:column="33"/></literal><operator pos:line="55" pos:column="33">)<pos:position pos:line="55" pos:column="34"/></operator> <operator pos:line="55" pos:column="35">||<pos:position pos:line="55" pos:column="37"/></operator> <operator pos:line="55" pos:column="38">(<pos:position pos:line="55" pos:column="39"/></operator><name><name pos:line="55" pos:column="39">password<pos:position pos:line="55" pos:column="47"/></name><index pos:line="55" pos:column="47">[<expr><literal type="number" pos:line="55" pos:column="48">0<pos:position pos:line="55" pos:column="49"/></literal></expr>]<pos:position pos:line="55" pos:column="50"/></index></name> <operator pos:line="55" pos:column="51">==<pos:position pos:line="55" pos:column="53"/></operator> <literal type="char" pos:line="55" pos:column="54">'\0'<pos:position pos:line="55" pos:column="58"/></literal><operator pos:line="55" pos:column="58">)<pos:position pos:line="55" pos:column="59"/></operator></expr>)<pos:position pos:line="55" pos:column="60"/></condition><then pos:line="55" pos:column="60"> <block pos:line="55" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">fprintf<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><name pos:line="56" pos:column="21">stderr<pos:position pos:line="56" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="29">"Invalid Request\n"<pos:position pos:line="56" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">puts<pos:position pos:line="57" pos:column="17"/></name><argument_list pos:line="57" pos:column="17">(<argument><expr><literal type="string" pos:line="57" pos:column="18">"ERR"<pos:position pos:line="57" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="58" pos:column="13">fflush<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><name pos:line="58" pos:column="20">stdout<pos:position pos:line="58" pos:column="26"/></name></expr></argument>)<pos:position pos:line="58" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="28"/></expr_stmt>
            <continue pos:line="59" pos:column="13">continue;<pos:position pos:line="59" pos:column="22"/></continue>
        }<pos:position pos:line="60" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">rfc1738_unescape<pos:position pos:line="61" pos:column="25"/></name><argument_list pos:line="61" pos:column="25">(<argument><expr><name pos:line="61" pos:column="26">username<pos:position pos:line="61" pos:column="34"/></name></expr></argument>)<pos:position pos:line="61" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">rfc1738_unescape<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">password<pos:position pos:line="62" pos:column="34"/></name></expr></argument>)<pos:position pos:line="62" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="36"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="64" pos:column="9">debug<pos:position pos:line="64" pos:column="14"/></name><argument_list pos:line="64" pos:column="14">(<argument><expr><literal type="string" pos:line="64" pos:column="15">"Trying to validate; %s %s\n"<pos:position pos:line="64" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="46">username<pos:position pos:line="64" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="56">password<pos:position pos:line="64" pos:column="64"/></name></expr></argument>)<pos:position pos:line="64" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="66"/></expr_stmt>

        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><call><name pos:line="66" pos:column="13">Valid_User<pos:position pos:line="66" pos:column="23"/></name><argument_list pos:line="66" pos:column="23">(<argument><expr><name pos:line="66" pos:column="24">username<pos:position pos:line="66" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="34">password<pos:position pos:line="66" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="44">NTGroup<pos:position pos:line="66" pos:column="51"/></name></expr></argument>)<pos:position pos:line="66" pos:column="52"/></argument_list></call> <operator pos:line="66" pos:column="53">==<pos:position pos:line="66" pos:column="55"/></operator> <name pos:line="66" pos:column="56">NTV_NO_ERROR<pos:position pos:line="66" pos:column="68"/></name></expr>)<pos:position pos:line="66" pos:column="69"/></condition><then pos:line="66" pos:column="69">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="13">puts<pos:position pos:line="67" pos:column="17"/></name><argument_list pos:line="67" pos:column="17">(<argument><expr><literal type="string" pos:line="67" pos:column="18">"OK"<pos:position pos:line="67" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="24"/></expr_stmt></block></then>
        <else pos:line="68" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="69" pos:column="13">printf<pos:position pos:line="69" pos:column="19"/></name><argument_list pos:line="69" pos:column="19">(<argument><expr><literal type="string" pos:line="69" pos:column="20">"ERR %s\n"<pos:position pos:line="69" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="32">errormsg<pos:position pos:line="69" pos:column="40"/></name></expr></argument>)<pos:position pos:line="69" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="42"/></expr_stmt></block></else></if>
<label><name pos:line="70" pos:column="1">error<pos:position pos:line="70" pos:column="6"/></name>:<pos:position pos:line="70" pos:column="7"/></label>
        <expr_stmt><expr><name pos:line="71" pos:column="9">err<pos:position pos:line="71" pos:column="12"/></name> <operator pos:line="71" pos:column="13">=<pos:position pos:line="71" pos:column="14"/></operator> <literal type="number" pos:line="71" pos:column="15">0<pos:position pos:line="71" pos:column="16"/></literal></expr>;<pos:position pos:line="71" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">fflush<pos:position pos:line="72" pos:column="15"/></name><argument_list pos:line="72" pos:column="15">(<argument><expr><name pos:line="72" pos:column="16">stdout<pos:position pos:line="72" pos:column="22"/></name></expr></argument>)<pos:position pos:line="72" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></while>
    <return pos:line="74" pos:column="5">return <expr><literal type="number" pos:line="74" pos:column="12">0<pos:position pos:line="74" pos:column="13"/></literal></expr>;<pos:position pos:line="74" pos:column="14"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
