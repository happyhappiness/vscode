<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7501_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">asn_build_string<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">u_char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type> <name pos:line="2" pos:column="27">data<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">datalength<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>,
                 <parameter><decl><type><name pos:line="3" pos:column="18">u_char<pos:position pos:line="3" pos:column="24"/></name></type> <name pos:line="3" pos:column="25">type<pos:position pos:line="3" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="31">u_char<pos:position pos:line="3" pos:column="37"/></name> <modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type> <name pos:line="3" pos:column="40">string<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="48">int<pos:position pos:line="3" pos:column="51"/></name></type> <name pos:line="3" pos:column="52">strlength<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="62"/></parameter_list>
<comment type="block" pos:line="4" pos:column="1">/*    u_char *data;       IN - pointer to start of object */</comment>
<comment type="block" pos:line="5" pos:column="1">/*    int    *datalength; IN/OUT - # of valid bytes left in buf */</comment>
<comment type="block" pos:line="6" pos:column="1">/*    u_char  type;       IN - ASN type of string */</comment>
<comment type="block" pos:line="7" pos:column="1">/*    u_char *string;     IN - pointer to start of input buffer */</comment>
<comment type="block" pos:line="8" pos:column="1">/*    int     strlength;  IN - size of input buffer */</comment>
<block pos:line="9" pos:column="1">{
    <comment type="block" pos:line="10" pos:column="5">/*
     * ASN.1 octet string ::= primstring | cmpdstring
     * primstring ::= 0x04 asnlength byte {byte}*
     * cmpdstring ::= 0x24 asnlength string {string}*
     * This code will never send a compound string.
     */</comment>
    <expr_stmt><expr><name pos:line="16" pos:column="5">data<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">asn_build_header_with_truth<pos:position pos:line="16" pos:column="39"/></name><argument_list pos:line="16" pos:column="39">(<argument><expr><name pos:line="16" pos:column="40">data<pos:position pos:line="16" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">datalength<pos:position pos:line="16" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="58">type<pos:position pos:line="16" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="64">strlength<pos:position pos:line="16" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="75">1<pos:position pos:line="16" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="78"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">data<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">==<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">NULL<pos:position pos:line="17" pos:column="21"/></name></expr>)<pos:position pos:line="17" pos:column="22"/></condition><then pos:line="17" pos:column="22">
        <block type="pseudo"><return pos:line="18" pos:column="9">return <expr><operator pos:line="18" pos:column="16">(<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">NULL<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">)<pos:position pos:line="18" pos:column="22"/></operator></expr>;<pos:position pos:line="18" pos:column="23"/></return></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">datalength<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">&lt;<pos:position pos:line="20" pos:column="25"/></operator> <name pos:line="20" pos:column="23">strlength<pos:position pos:line="20" pos:column="32"/></name></expr>)<pos:position pos:line="20" pos:column="33"/></condition><then pos:line="20" pos:column="33"> <block pos:line="20" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">snmp_set_api_error<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name pos:line="21" pos:column="28">SNMPERR_ASN_DECODE<pos:position pos:line="21" pos:column="46"/></name></expr></argument>)<pos:position pos:line="21" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="48"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">NULL<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">)<pos:position pos:line="22" pos:column="22"/></operator></expr>;<pos:position pos:line="22" pos:column="23"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">memcpy<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><operator pos:line="24" pos:column="12">(<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">char<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">*<pos:position pos:line="24" pos:column="19"/></operator><operator pos:line="24" pos:column="19">)<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">data<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="27">(<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="28">char<pos:position pos:line="24" pos:column="32"/></name> <operator pos:line="24" pos:column="33">*<pos:position pos:line="24" pos:column="34"/></operator><operator pos:line="24" pos:column="34">)<pos:position pos:line="24" pos:column="35"/></operator> <name pos:line="24" pos:column="36">string<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">strlength<pos:position pos:line="24" pos:column="53"/></name></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="25" pos:column="5">*<pos:position pos:line="25" pos:column="6"/></operator><name pos:line="25" pos:column="6">datalength<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">-=<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">strlength<pos:position pos:line="25" pos:column="29"/></name></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>
    <return pos:line="26" pos:column="5">return <expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">data<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">+<pos:position pos:line="26" pos:column="19"/></operator> <name pos:line="26" pos:column="20">strlength<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">)<pos:position pos:line="26" pos:column="30"/></operator></expr>;<pos:position pos:line="26" pos:column="31"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
