<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5037_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">writeToBuffer<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">buf<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">size_t<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">size<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// do not buffer a cell header for nothing</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">size<pos:position pos:line="5" pos:column="14"/></name></expr>)<pos:position pos:line="5" pos:column="15"/></condition><then pos:line="5" pos:column="15">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr>;<pos:position pos:line="6" pos:column="18"/></return></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">theBuf<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">.<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">size<pos:position pos:line="8" pos:column="21"/></name></name></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22"> <block pos:line="8" pos:column="23">{
        <comment type="line" pos:line="9" pos:column="9">// will fill the header in writeToDisk when the next slot is known</comment>
        <expr_stmt><expr><call><name><name pos:line="10" pos:column="9">theBuf<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">.<pos:position pos:line="10" pos:column="16"/></operator><name pos:line="10" pos:column="16">appended<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">(<argument><expr><sizeof pos:line="10" pos:column="25">sizeof<argument_list pos:line="10" pos:column="31">(<argument><expr><name pos:line="10" pos:column="32">DbCellHeader<pos:position pos:line="10" pos:column="44"/></name></expr></argument>)<pos:position pos:line="10" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">size_t<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">forCurrentSlot<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><call><name pos:line="13" pos:column="29">min<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">(<argument><expr><name pos:line="13" pos:column="33">size<pos:position pos:line="13" pos:column="37"/></name></expr></argument>, <argument><expr><cast type="static" pos:line="13" pos:column="39">static_cast<argument_list type="generic" pos:line="13" pos:column="50">&lt;<argument><expr><name pos:line="13" pos:column="51">size_t<pos:position pos:line="13" pos:column="57"/></name></expr></argument>&gt;<pos:position pos:line="13" pos:column="61"/></argument_list><argument_list pos:line="13" pos:column="58">(<argument><expr><call><name><name pos:line="13" pos:column="59">theBuf<pos:position pos:line="13" pos:column="65"/></name><operator pos:line="13" pos:column="65">.<pos:position pos:line="13" pos:column="66"/></operator><name pos:line="13" pos:column="66">spaceSize<pos:position pos:line="13" pos:column="75"/></name></name><argument_list pos:line="13" pos:column="75">()<pos:position pos:line="13" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></cast></expr></argument>)<pos:position pos:line="13" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="80"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="14" pos:column="5">theBuf<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">append<pos:position pos:line="14" pos:column="18"/></name></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">buf<pos:position pos:line="14" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="24">forCurrentSlot<pos:position pos:line="14" pos:column="38"/></name></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">offset_<pos:position pos:line="15" pos:column="12"/></name> <operator pos:line="15" pos:column="13">+=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">forCurrentSlot<pos:position pos:line="15" pos:column="30"/></name></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt> <comment type="line" pos:line="15" pos:column="32">// so that Core thinks we wrote it</comment>
    <return pos:line="16" pos:column="5">return <expr><name pos:line="16" pos:column="12">forCurrentSlot<pos:position pos:line="16" pos:column="26"/></name></expr>;<pos:position pos:line="16" pos:column="27"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
