<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6610_squid-3.3.14.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">struct<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">squid_radix_node<pos:position pos:line="1" pos:column="24"/></name></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type>
<name pos:line="2" pos:column="1">squid_rn_match<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">void<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">v_arg<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="29">struct<pos:position pos:line="2" pos:column="35"/></name> <name pos:line="2" pos:column="36">squid_radix_node_head<pos:position pos:line="2" pos:column="57"/></name></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">head<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list> <block pos:line="2" pos:column="65">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">caddr_t<pos:position pos:line="3" pos:column="12"/></name></type> <name pos:line="3" pos:column="13">v<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><name pos:line="3" pos:column="17">v_arg<pos:position pos:line="3" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">register<pos:position pos:line="4" pos:column="13"/></specifier> <name><name pos:line="4" pos:column="14">struct<pos:position pos:line="4" pos:column="20"/></name> <name pos:line="4" pos:column="21">squid_radix_node<pos:position pos:line="4" pos:column="37"/></name></name> <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier></type><name pos:line="4" pos:column="39">t<pos:position pos:line="4" pos:column="40"/></name> <init pos:line="4" pos:column="41">= <expr><name><name pos:line="4" pos:column="43">head<pos:position pos:line="4" pos:column="47"/></name><operator pos:line="4" pos:column="47">-&gt;<pos:position pos:line="4" pos:column="52"/></operator><name pos:line="4" pos:column="49">rnh_treetop<pos:position pos:line="4" pos:column="60"/></name></name></expr></init></decl>, <modifier pos:line="4" pos:column="62">*<pos:position pos:line="4" pos:column="63"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="63">x<pos:position pos:line="4" pos:column="64"/></name></decl>;<pos:position pos:line="4" pos:column="65"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">register<pos:position pos:line="5" pos:column="13"/></specifier> <name pos:line="5" pos:column="14">caddr_t<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">cp<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">v<pos:position pos:line="5" pos:column="28"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="30">cp2<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">caddr_t<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">cplim<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">squid_radix_node<pos:position pos:line="7" pos:column="28"/></name></name> <modifier pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></modifier></type><name pos:line="7" pos:column="30">saved_t<pos:position pos:line="7" pos:column="37"/></name></decl>, <modifier pos:line="7" pos:column="39">*<pos:position pos:line="7" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="40">top<pos:position pos:line="7" pos:column="43"/></name> <init pos:line="7" pos:column="44">= <expr><name pos:line="7" pos:column="46">t<pos:position pos:line="7" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">off<pos:position pos:line="8" pos:column="12"/></name> <init pos:line="8" pos:column="13">= <expr><name><name pos:line="8" pos:column="15">t<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">rn_off<pos:position pos:line="8" pos:column="24"/></name></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="26">vlen<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><operator pos:line="8" pos:column="33">*<pos:position pos:line="8" pos:column="34"/></operator><operator pos:line="8" pos:column="34">(<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="35">u_char<pos:position pos:line="8" pos:column="41"/></name> <operator pos:line="8" pos:column="42">*<pos:position pos:line="8" pos:column="43"/></operator><operator pos:line="8" pos:column="43">)<pos:position pos:line="8" pos:column="44"/></operator> <name pos:line="8" pos:column="45">cp<pos:position pos:line="8" pos:column="47"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="49">matched_off<pos:position pos:line="8" pos:column="60"/></name></decl>;<pos:position pos:line="8" pos:column="61"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">register<pos:position pos:line="9" pos:column="13"/></specifier> <name pos:line="9" pos:column="14">int<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">test<pos:position pos:line="9" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="24">b<pos:position pos:line="9" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="27">rn_b<pos:position pos:line="9" pos:column="31"/></name></decl>;<pos:position pos:line="9" pos:column="32"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/*
     * Open code squid_rn_search(v, top) to avoid overhead of extra
     * subroutine call.
     */</comment>
    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init pos:line="15" pos:column="10">;<pos:position pos:line="15" pos:column="11"/></init> <condition><expr><name><name pos:line="15" pos:column="12">t<pos:position pos:line="15" pos:column="13"/></name><operator pos:line="15" pos:column="13">-&gt;<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="15">rn_b<pos:position pos:line="15" pos:column="19"/></name></name> <operator pos:line="15" pos:column="20">&gt;=<pos:position pos:line="15" pos:column="25"/></operator> <literal type="number" pos:line="15" pos:column="23">0<pos:position pos:line="15" pos:column="24"/></literal></expr>;<pos:position pos:line="15" pos:column="25"/></condition><incr/>)<pos:position pos:line="15" pos:column="26"/></control> <block pos:line="15" pos:column="27">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">t<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">-&gt;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="16">rn_bmask<pos:position pos:line="16" pos:column="24"/></name></name> <operator pos:line="16" pos:column="25">&amp;<pos:position pos:line="16" pos:column="30"/></operator> <name><name pos:line="16" pos:column="27">cp<pos:position pos:line="16" pos:column="29"/></name><index pos:line="16" pos:column="29">[<expr><name><name pos:line="16" pos:column="30">t<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">-&gt;<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="33">rn_off<pos:position pos:line="16" pos:column="39"/></name></name></expr>]<pos:position pos:line="16" pos:column="40"/></index></name></expr>)<pos:position pos:line="16" pos:column="41"/></condition><then pos:line="16" pos:column="41">
            <block type="pseudo"><expr_stmt><expr><name pos:line="17" pos:column="13">t<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name><name pos:line="17" pos:column="17">t<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">rn_r<pos:position pos:line="17" pos:column="24"/></name></name></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt></block></then>
        <else pos:line="18" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="13">t<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <name><name pos:line="19" pos:column="17">t<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">rn_l<pos:position pos:line="19" pos:column="24"/></name></name></expr>;<pos:position pos:line="19" pos:column="25"/></expr_stmt></block></else></if>
    }<pos:position pos:line="20" pos:column="6"/></block></for>
    <comment type="block" pos:line="21" pos:column="5">/*
     * See if we match exactly as a host destination
     * or at least learn how many bits match, for normal mask finesse.
     *
     * It doesn't hurt us to limit how many bytes to check
     * to the length of the mask, since if it matches we had a genuine
     * match and the leaf we have is the most specific one anyway;
     * if it didn't match with a shorter length it would fail
     * with a long one.  This wins big for class B&amp;C netmasks which
     * are probably the most common case...
     */</comment>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name><name pos:line="32" pos:column="9">t<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">-&gt;<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="12">rn_mask<pos:position pos:line="32" pos:column="19"/></name></name></expr>)<pos:position pos:line="32" pos:column="20"/></condition><then pos:line="32" pos:column="20">
        <block type="pseudo"><expr_stmt><expr><name pos:line="33" pos:column="9">vlen<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <operator pos:line="33" pos:column="16">*<pos:position pos:line="33" pos:column="17"/></operator><operator pos:line="33" pos:column="17">(<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">u_char<pos:position pos:line="33" pos:column="24"/></name> <operator pos:line="33" pos:column="25">*<pos:position pos:line="33" pos:column="26"/></operator><operator pos:line="33" pos:column="26">)<pos:position pos:line="33" pos:column="27"/></operator> <name><name pos:line="33" pos:column="28">t<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">-&gt;<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="31">rn_mask<pos:position pos:line="33" pos:column="38"/></name></name></expr>;<pos:position pos:line="33" pos:column="39"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="34" pos:column="5">cp<pos:position pos:line="34" pos:column="7"/></name> <operator pos:line="34" pos:column="8">+=<pos:position pos:line="34" pos:column="10"/></operator> <name pos:line="34" pos:column="11">off<pos:position pos:line="34" pos:column="14"/></name></expr>;<pos:position pos:line="34" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">cp2<pos:position pos:line="35" pos:column="8"/></name> <operator pos:line="35" pos:column="9">=<pos:position pos:line="35" pos:column="10"/></operator> <name><name pos:line="35" pos:column="11">t<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">-&gt;<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="14">rn_key<pos:position pos:line="35" pos:column="20"/></name></name> <operator pos:line="35" pos:column="21">+<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">off<pos:position pos:line="35" pos:column="26"/></name></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="36" pos:column="5">cplim<pos:position pos:line="36" pos:column="10"/></name> <operator pos:line="36" pos:column="11">=<pos:position pos:line="36" pos:column="12"/></operator> <name pos:line="36" pos:column="13">v<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">+<pos:position pos:line="36" pos:column="16"/></operator> <name pos:line="36" pos:column="17">vlen<pos:position pos:line="36" pos:column="21"/></name></expr>;<pos:position pos:line="36" pos:column="22"/></expr_stmt>
    <for pos:line="37" pos:column="5">for <control pos:line="37" pos:column="9">(<init pos:line="37" pos:column="10">;<pos:position pos:line="37" pos:column="11"/></init> <condition><expr><name pos:line="37" pos:column="12">cp<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">&lt;<pos:position pos:line="37" pos:column="19"/></operator> <name pos:line="37" pos:column="17">cplim<pos:position pos:line="37" pos:column="22"/></name></expr>;<pos:position pos:line="37" pos:column="23"/></condition> <incr><expr><name pos:line="37" pos:column="24">cp<pos:position pos:line="37" pos:column="26"/></name><operator pos:line="37" pos:column="26">++<pos:position pos:line="37" pos:column="28"/></operator></expr><operator pos:line="37" pos:column="28">,<pos:position pos:line="37" pos:column="29"/></operator> <expr><name pos:line="37" pos:column="30">cp2<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">++<pos:position pos:line="37" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="37" pos:column="36"/></control>
        <block type="pseudo"><if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">*<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">cp<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">!=<pos:position pos:line="38" pos:column="19"/></operator> <operator pos:line="38" pos:column="20">*<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="21">cp2<pos:position pos:line="38" pos:column="24"/></name></expr>)<pos:position pos:line="38" pos:column="25"/></condition><then pos:line="38" pos:column="25">
            <block type="pseudo"><goto pos:line="39" pos:column="13">goto <name pos:line="39" pos:column="18">on1<pos:position pos:line="39" pos:column="21"/></name>;<pos:position pos:line="39" pos:column="22"/></goto></block></then></if></block></for>
    <comment type="block" pos:line="40" pos:column="5">/*
     * This extra grot is in case we are explicitly asked
     * to look up the default.  Ugh!
     */</comment>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><operator pos:line="44" pos:column="9">(<pos:position pos:line="44" pos:column="10"/></operator><name><name pos:line="44" pos:column="10">t<pos:position pos:line="44" pos:column="11"/></name><operator pos:line="44" pos:column="11">-&gt;<pos:position pos:line="44" pos:column="16"/></operator><name pos:line="44" pos:column="13">rn_flags<pos:position pos:line="44" pos:column="21"/></name></name> <operator pos:line="44" pos:column="22">&amp;<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="24">RNF_ROOT<pos:position pos:line="44" pos:column="32"/></name><operator pos:line="44" pos:column="32">)<pos:position pos:line="44" pos:column="33"/></operator> <operator pos:line="44" pos:column="34">&amp;&amp;<pos:position pos:line="44" pos:column="44"/></operator> <name><name pos:line="44" pos:column="37">t<pos:position pos:line="44" pos:column="38"/></name><operator pos:line="44" pos:column="38">-&gt;<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="40">rn_dupedkey<pos:position pos:line="44" pos:column="51"/></name></name></expr>)<pos:position pos:line="44" pos:column="52"/></condition><then pos:line="44" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><name pos:line="45" pos:column="9">t<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">=<pos:position pos:line="45" pos:column="12"/></operator> <name><name pos:line="45" pos:column="13">t<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">-&gt;<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="16">rn_dupedkey<pos:position pos:line="45" pos:column="27"/></name></name></expr>;<pos:position pos:line="45" pos:column="28"/></expr_stmt></block></then></if>
    <return pos:line="46" pos:column="5">return <expr><name pos:line="46" pos:column="12">t<pos:position pos:line="46" pos:column="13"/></name></expr>;<pos:position pos:line="46" pos:column="14"/></return>
<label><name pos:line="47" pos:column="1">on1<pos:position pos:line="47" pos:column="4"/></name>:<pos:position pos:line="47" pos:column="5"/></label>
    <expr_stmt><expr><name pos:line="48" pos:column="5">test<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator> <operator pos:line="48" pos:column="12">(<pos:position pos:line="48" pos:column="13"/></operator><operator pos:line="48" pos:column="13">*<pos:position pos:line="48" pos:column="14"/></operator><name pos:line="48" pos:column="14">cp<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">^<pos:position pos:line="48" pos:column="18"/></operator> <operator pos:line="48" pos:column="19">*<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">cp2<pos:position pos:line="48" pos:column="23"/></name><operator pos:line="48" pos:column="23">)<pos:position pos:line="48" pos:column="24"/></operator> <operator pos:line="48" pos:column="25">&amp;<pos:position pos:line="48" pos:column="30"/></operator> <literal type="number" pos:line="48" pos:column="27">0xff<pos:position pos:line="48" pos:column="31"/></literal></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>	<comment type="block" pos:line="48" pos:column="33">/* find first bit that differs */</comment>
    <for pos:line="49" pos:column="5">for <control pos:line="49" pos:column="9">(<init><expr><name pos:line="49" pos:column="10">b<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator> <literal type="number" pos:line="49" pos:column="14">7<pos:position pos:line="49" pos:column="15"/></literal></expr>;<pos:position pos:line="49" pos:column="16"/></init> <condition><expr><operator pos:line="49" pos:column="17">(<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">test<pos:position pos:line="49" pos:column="22"/></name> <operator pos:line="49" pos:column="23">&gt;&gt;=<pos:position pos:line="49" pos:column="32"/></operator> <literal type="number" pos:line="49" pos:column="27">1<pos:position pos:line="49" pos:column="28"/></literal><operator pos:line="49" pos:column="28">)<pos:position pos:line="49" pos:column="29"/></operator> <operator pos:line="49" pos:column="30">&gt;<pos:position pos:line="49" pos:column="34"/></operator> <literal type="number" pos:line="49" pos:column="32">0<pos:position pos:line="49" pos:column="33"/></literal></expr>;<pos:position pos:line="49" pos:column="34"/></condition><incr/>)<pos:position pos:line="49" pos:column="35"/></control>
        <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="9">b<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">--<pos:position pos:line="50" pos:column="12"/></operator></expr>;<pos:position pos:line="50" pos:column="13"/></expr_stmt></block></for>
    <expr_stmt><expr><name pos:line="51" pos:column="5">matched_off<pos:position pos:line="51" pos:column="16"/></name> <operator pos:line="51" pos:column="17">=<pos:position pos:line="51" pos:column="18"/></operator> <name pos:line="51" pos:column="19">cp<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">-<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="24">v<pos:position pos:line="51" pos:column="25"/></name></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="52" pos:column="5">b<pos:position pos:line="52" pos:column="6"/></name> <operator pos:line="52" pos:column="7">+=<pos:position pos:line="52" pos:column="9"/></operator> <name pos:line="52" pos:column="10">matched_off<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">&lt;&lt;<pos:position pos:line="52" pos:column="30"/></operator> <literal type="number" pos:line="52" pos:column="25">3<pos:position pos:line="52" pos:column="26"/></literal></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="53" pos:column="5">rn_b<pos:position pos:line="53" pos:column="9"/></name> <operator pos:line="53" pos:column="10">=<pos:position pos:line="53" pos:column="11"/></operator> <operator pos:line="53" pos:column="12">-<pos:position pos:line="53" pos:column="13"/></operator><literal type="number" pos:line="53" pos:column="13">1<pos:position pos:line="53" pos:column="14"/></literal> <operator pos:line="53" pos:column="15">-<pos:position pos:line="53" pos:column="16"/></operator> <name pos:line="53" pos:column="17">b<pos:position pos:line="53" pos:column="18"/></name></expr>;<pos:position pos:line="53" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="54" pos:column="5">/*
     * If there is a host route in a duped-key chain, it will be first.
     */</comment>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><operator pos:line="57" pos:column="9">(<pos:position pos:line="57" pos:column="10"/></operator><name pos:line="57" pos:column="10">saved_t<pos:position pos:line="57" pos:column="17"/></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <name pos:line="57" pos:column="20">t<pos:position pos:line="57" pos:column="21"/></name><operator pos:line="57" pos:column="21">)<pos:position pos:line="57" pos:column="22"/></operator><operator pos:line="57" pos:column="22">-&gt;<pos:position pos:line="57" pos:column="27"/></operator><name pos:line="57" pos:column="24">rn_mask<pos:position pos:line="57" pos:column="31"/></name> <operator pos:line="57" pos:column="32">==<pos:position pos:line="57" pos:column="34"/></operator> <literal type="number" pos:line="57" pos:column="35">0<pos:position pos:line="57" pos:column="36"/></literal></expr>)<pos:position pos:line="57" pos:column="37"/></condition><then pos:line="57" pos:column="37">
        <block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="9">t<pos:position pos:line="58" pos:column="10"/></name> <operator pos:line="58" pos:column="11">=<pos:position pos:line="58" pos:column="12"/></operator> <name><name pos:line="58" pos:column="13">t<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">-&gt;<pos:position pos:line="58" pos:column="19"/></operator><name pos:line="58" pos:column="16">rn_dupedkey<pos:position pos:line="58" pos:column="27"/></name></name></expr>;<pos:position pos:line="58" pos:column="28"/></expr_stmt></block></then></if>
    <for pos:line="59" pos:column="5">for <control pos:line="59" pos:column="9">(<init pos:line="59" pos:column="10">;<pos:position pos:line="59" pos:column="11"/></init> <condition><expr><name pos:line="59" pos:column="12">t<pos:position pos:line="59" pos:column="13"/></name></expr>;<pos:position pos:line="59" pos:column="14"/></condition> <incr><expr><name pos:line="59" pos:column="15">t<pos:position pos:line="59" pos:column="16"/></name> <operator pos:line="59" pos:column="17">=<pos:position pos:line="59" pos:column="18"/></operator> <name><name pos:line="59" pos:column="19">t<pos:position pos:line="59" pos:column="20"/></name><operator pos:line="59" pos:column="20">-&gt;<pos:position pos:line="59" pos:column="25"/></operator><name pos:line="59" pos:column="22">rn_dupedkey<pos:position pos:line="59" pos:column="33"/></name></name></expr></incr>)<pos:position pos:line="59" pos:column="34"/></control>
        <comment type="block" pos:line="60" pos:column="9">/*
         * Even if we don't match exactly as a host,
         * we may match if the leaf we wound up at is
         * a route to a net.
         */</comment>
        <block type="pseudo"><if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name><name pos:line="65" pos:column="13">t<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">-&gt;<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="16">rn_flags<pos:position pos:line="65" pos:column="24"/></name></name> <operator pos:line="65" pos:column="25">&amp;<pos:position pos:line="65" pos:column="30"/></operator> <name pos:line="65" pos:column="27">RNF_NORMAL<pos:position pos:line="65" pos:column="37"/></name></expr>)<pos:position pos:line="65" pos:column="38"/></condition><then pos:line="65" pos:column="38"> <block pos:line="65" pos:column="39">{
            <if pos:line="66" pos:column="13">if <condition pos:line="66" pos:column="16">(<expr><name pos:line="66" pos:column="17">rn_b<pos:position pos:line="66" pos:column="21"/></name> <operator pos:line="66" pos:column="22">&lt;=<pos:position pos:line="66" pos:column="27"/></operator> <name><name pos:line="66" pos:column="25">t<pos:position pos:line="66" pos:column="26"/></name><operator pos:line="66" pos:column="26">-&gt;<pos:position pos:line="66" pos:column="31"/></operator><name pos:line="66" pos:column="28">rn_b<pos:position pos:line="66" pos:column="32"/></name></name></expr>)<pos:position pos:line="66" pos:column="33"/></condition><then pos:line="66" pos:column="33">
                <block type="pseudo"><return pos:line="67" pos:column="17">return <expr><name pos:line="67" pos:column="24">t<pos:position pos:line="67" pos:column="25"/></name></expr>;<pos:position pos:line="67" pos:column="26"/></return></block></then></if>
        }<pos:position pos:line="68" pos:column="10"/></block></then> <elseif pos:line="68" pos:column="11">else <if pos:line="68" pos:column="16">if <condition pos:line="68" pos:column="19">(<expr><call><name pos:line="68" pos:column="20">rn_satsifies_leaf<pos:position pos:line="68" pos:column="37"/></name><argument_list pos:line="68" pos:column="37">(<argument><expr><name pos:line="68" pos:column="38">v<pos:position pos:line="68" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="41">t<pos:position pos:line="68" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="44">matched_off<pos:position pos:line="68" pos:column="55"/></name></expr></argument>)<pos:position pos:line="68" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="57"/></condition><then pos:line="68" pos:column="57">
            <block type="pseudo"><return pos:line="69" pos:column="13">return <expr><name pos:line="69" pos:column="20">t<pos:position pos:line="69" pos:column="21"/></name></expr>;<pos:position pos:line="69" pos:column="22"/></return></block></then></if></elseif></if></block></for>
    <expr_stmt><expr><name pos:line="70" pos:column="5">t<pos:position pos:line="70" pos:column="6"/></name> <operator pos:line="70" pos:column="7">=<pos:position pos:line="70" pos:column="8"/></operator> <name pos:line="70" pos:column="9">saved_t<pos:position pos:line="70" pos:column="16"/></name></expr>;<pos:position pos:line="70" pos:column="17"/></expr_stmt>
    <comment type="block" pos:line="71" pos:column="5">/* start searching up the tree */</comment>
    <do pos:line="72" pos:column="5">do <block pos:line="72" pos:column="8">{
        <decl_stmt><decl><type><specifier pos:line="73" pos:column="9">register<pos:position pos:line="73" pos:column="17"/></specifier> <name><name pos:line="73" pos:column="18">struct<pos:position pos:line="73" pos:column="24"/></name> <name pos:line="73" pos:column="25">squid_radix_mask<pos:position pos:line="73" pos:column="41"/></name></name> <modifier pos:line="73" pos:column="42">*<pos:position pos:line="73" pos:column="43"/></modifier></type><name pos:line="73" pos:column="43">m<pos:position pos:line="73" pos:column="44"/></name></decl>;<pos:position pos:line="73" pos:column="45"/></decl_stmt>
        <expr_stmt><expr><name pos:line="74" pos:column="9">t<pos:position pos:line="74" pos:column="10"/></name> <operator pos:line="74" pos:column="11">=<pos:position pos:line="74" pos:column="12"/></operator> <name><name pos:line="74" pos:column="13">t<pos:position pos:line="74" pos:column="14"/></name><operator pos:line="74" pos:column="14">-&gt;<pos:position pos:line="74" pos:column="19"/></operator><name pos:line="74" pos:column="16">rn_p<pos:position pos:line="74" pos:column="20"/></name></name></expr>;<pos:position pos:line="74" pos:column="21"/></expr_stmt>
        <if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><operator pos:line="75" pos:column="13">(<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="14">m<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">=<pos:position pos:line="75" pos:column="17"/></operator> <name><name pos:line="75" pos:column="18">t<pos:position pos:line="75" pos:column="19"/></name><operator pos:line="75" pos:column="19">-&gt;<pos:position pos:line="75" pos:column="24"/></operator><name pos:line="75" pos:column="21">rn_mklist<pos:position pos:line="75" pos:column="30"/></name></name><operator pos:line="75" pos:column="30">)<pos:position pos:line="75" pos:column="31"/></operator></expr>)<pos:position pos:line="75" pos:column="32"/></condition><then pos:line="75" pos:column="32"> <block pos:line="75" pos:column="33">{
            <comment type="block" pos:line="76" pos:column="13">/*
             * If non-contiguous masks ever become important
             * we can restore the masking and open coding of
             * the search and satisfaction test and put the
             * calculation of "off" back before the "do".
             */</comment>
            <do pos:line="82" pos:column="13">do <block pos:line="82" pos:column="16">{
                <if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name><name pos:line="83" pos:column="21">m<pos:position pos:line="83" pos:column="22"/></name><operator pos:line="83" pos:column="22">-&gt;<pos:position pos:line="83" pos:column="27"/></operator><name pos:line="83" pos:column="24">rm_flags<pos:position pos:line="83" pos:column="32"/></name></name> <operator pos:line="83" pos:column="33">&amp;<pos:position pos:line="83" pos:column="38"/></operator> <name pos:line="83" pos:column="35">RNF_NORMAL<pos:position pos:line="83" pos:column="45"/></name></expr>)<pos:position pos:line="83" pos:column="46"/></condition><then pos:line="83" pos:column="46"> <block pos:line="83" pos:column="47">{
                    <if pos:line="84" pos:column="21">if <condition pos:line="84" pos:column="24">(<expr><name pos:line="84" pos:column="25">rn_b<pos:position pos:line="84" pos:column="29"/></name> <operator pos:line="84" pos:column="30">&lt;=<pos:position pos:line="84" pos:column="35"/></operator> <name><name pos:line="84" pos:column="33">m<pos:position pos:line="84" pos:column="34"/></name><operator pos:line="84" pos:column="34">-&gt;<pos:position pos:line="84" pos:column="39"/></operator><name pos:line="84" pos:column="36">rm_b<pos:position pos:line="84" pos:column="40"/></name></name></expr>)<pos:position pos:line="84" pos:column="41"/></condition><then pos:line="84" pos:column="41">
                        <block type="pseudo"><return pos:line="85" pos:column="25">return <expr><operator pos:line="85" pos:column="32">(<pos:position pos:line="85" pos:column="33"/></operator><name><name pos:line="85" pos:column="33">m<pos:position pos:line="85" pos:column="34"/></name><operator pos:line="85" pos:column="34">-&gt;<pos:position pos:line="85" pos:column="39"/></operator><name pos:line="85" pos:column="36">rm_leaf<pos:position pos:line="85" pos:column="43"/></name></name><operator pos:line="85" pos:column="43">)<pos:position pos:line="85" pos:column="44"/></operator></expr>;<pos:position pos:line="85" pos:column="45"/></return></block></then></if>
                }<pos:position pos:line="86" pos:column="18"/></block></then> <else pos:line="86" pos:column="19">else <block pos:line="86" pos:column="24">{
                    <expr_stmt><expr><name pos:line="87" pos:column="21">off<pos:position pos:line="87" pos:column="24"/></name> <operator pos:line="87" pos:column="25">=<pos:position pos:line="87" pos:column="26"/></operator> <call><name pos:line="87" pos:column="27">min<pos:position pos:line="87" pos:column="30"/></name><argument_list pos:line="87" pos:column="30">(<argument><expr><name><name pos:line="87" pos:column="31">t<pos:position pos:line="87" pos:column="32"/></name><operator pos:line="87" pos:column="32">-&gt;<pos:position pos:line="87" pos:column="37"/></operator><name pos:line="87" pos:column="34">rn_off<pos:position pos:line="87" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="42">matched_off<pos:position pos:line="87" pos:column="53"/></name></expr></argument>)<pos:position pos:line="87" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="55"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="88" pos:column="21">x<pos:position pos:line="88" pos:column="22"/></name> <operator pos:line="88" pos:column="23">=<pos:position pos:line="88" pos:column="24"/></operator> <call><name pos:line="88" pos:column="25">squid_rn_search_m<pos:position pos:line="88" pos:column="42"/></name><argument_list pos:line="88" pos:column="42">(<argument><expr><name pos:line="88" pos:column="43">v<pos:position pos:line="88" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="46">t<pos:position pos:line="88" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="49">m<pos:position pos:line="88" pos:column="50"/></name><operator pos:line="88" pos:column="50">-&gt;<pos:position pos:line="88" pos:column="55"/></operator><name pos:line="88" pos:column="52">rm_mask<pos:position pos:line="88" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="61"/></expr_stmt>
                    <while pos:line="89" pos:column="21">while <condition pos:line="89" pos:column="27">(<expr><name pos:line="89" pos:column="28">x<pos:position pos:line="89" pos:column="29"/></name> <operator pos:line="89" pos:column="30">&amp;&amp;<pos:position pos:line="89" pos:column="40"/></operator> <name><name pos:line="89" pos:column="33">x<pos:position pos:line="89" pos:column="34"/></name><operator pos:line="89" pos:column="34">-&gt;<pos:position pos:line="89" pos:column="39"/></operator><name pos:line="89" pos:column="36">rn_mask<pos:position pos:line="89" pos:column="43"/></name></name> <operator pos:line="89" pos:column="44">!=<pos:position pos:line="89" pos:column="46"/></operator> <name><name pos:line="89" pos:column="47">m<pos:position pos:line="89" pos:column="48"/></name><operator pos:line="89" pos:column="48">-&gt;<pos:position pos:line="89" pos:column="53"/></operator><name pos:line="89" pos:column="50">rm_mask<pos:position pos:line="89" pos:column="57"/></name></name></expr>)<pos:position pos:line="89" pos:column="58"/></condition>
                        <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="25">x<pos:position pos:line="90" pos:column="26"/></name> <operator pos:line="90" pos:column="27">=<pos:position pos:line="90" pos:column="28"/></operator> <name><name pos:line="90" pos:column="29">x<pos:position pos:line="90" pos:column="30"/></name><operator pos:line="90" pos:column="30">-&gt;<pos:position pos:line="90" pos:column="35"/></operator><name pos:line="90" pos:column="32">rn_dupedkey<pos:position pos:line="90" pos:column="43"/></name></name></expr>;<pos:position pos:line="90" pos:column="44"/></expr_stmt></block></while>
                    <if pos:line="91" pos:column="21">if <condition pos:line="91" pos:column="24">(<expr><name pos:line="91" pos:column="25">x<pos:position pos:line="91" pos:column="26"/></name> <operator pos:line="91" pos:column="27">&amp;&amp;<pos:position pos:line="91" pos:column="37"/></operator> <call><name pos:line="91" pos:column="30">rn_satsifies_leaf<pos:position pos:line="91" pos:column="47"/></name><argument_list pos:line="91" pos:column="47">(<argument><expr><name pos:line="91" pos:column="48">v<pos:position pos:line="91" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="51">x<pos:position pos:line="91" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="54">off<pos:position pos:line="91" pos:column="57"/></name></expr></argument>)<pos:position pos:line="91" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="59"/></condition><then pos:line="91" pos:column="59">
                        <block type="pseudo"><return pos:line="92" pos:column="25">return <expr><name pos:line="92" pos:column="32">x<pos:position pos:line="92" pos:column="33"/></name></expr>;<pos:position pos:line="92" pos:column="34"/></return></block></then></if>
                }<pos:position pos:line="93" pos:column="18"/></block></else></if>
            }<pos:position pos:line="94" pos:column="14"/></block> while <condition pos:line="94" pos:column="21">(<expr><operator pos:line="94" pos:column="22">(<pos:position pos:line="94" pos:column="23"/></operator><name pos:line="94" pos:column="23">m<pos:position pos:line="94" pos:column="24"/></name> <operator pos:line="94" pos:column="25">=<pos:position pos:line="94" pos:column="26"/></operator> <name><name pos:line="94" pos:column="27">m<pos:position pos:line="94" pos:column="28"/></name><operator pos:line="94" pos:column="28">-&gt;<pos:position pos:line="94" pos:column="33"/></operator><name pos:line="94" pos:column="30">rm_mklist<pos:position pos:line="94" pos:column="39"/></name></name><operator pos:line="94" pos:column="39">)<pos:position pos:line="94" pos:column="40"/></operator></expr>)<pos:position pos:line="94" pos:column="41"/></condition>;<pos:position pos:line="94" pos:column="42"/></do>
        }<pos:position pos:line="95" pos:column="10"/></block></then></if>
    }<pos:position pos:line="96" pos:column="6"/></block> while <condition pos:line="96" pos:column="13">(<expr><name pos:line="96" pos:column="14">t<pos:position pos:line="96" pos:column="15"/></name> <operator pos:line="96" pos:column="16">!=<pos:position pos:line="96" pos:column="18"/></operator> <name pos:line="96" pos:column="19">top<pos:position pos:line="96" pos:column="22"/></name></expr>)<pos:position pos:line="96" pos:column="23"/></condition>;<pos:position pos:line="96" pos:column="24"/></do>
    <return pos:line="97" pos:column="5">return <expr><literal type="number" pos:line="97" pos:column="12">0<pos:position pos:line="97" pos:column="13"/></literal></expr>;<pos:position pos:line="97" pos:column="14"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
