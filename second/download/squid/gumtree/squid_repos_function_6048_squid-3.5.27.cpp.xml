<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6048_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Log<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">TcpLogger<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">writeDone<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">CommIoCbParams<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">&amp;<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="49">io<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">writeScheduled<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">=<pos:position pos:line="4" pos:column="21"/></operator> <literal type="boolean" pos:line="4" pos:column="22">false<pos:position pos:line="4" pos:column="27"/></literal></expr>;<pos:position pos:line="4" pos:column="28"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">io<pos:position pos:line="5" pos:column="11"/></name><operator pos:line="5" pos:column="11">.<pos:position pos:line="5" pos:column="12"/></operator><name pos:line="5" pos:column="12">flag<pos:position pos:line="5" pos:column="16"/></name></name> <operator pos:line="5" pos:column="17">==<pos:position pos:line="5" pos:column="19"/></operator> <name><name pos:line="5" pos:column="20">Comm<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">::<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">ERR_CLOSING<pos:position pos:line="5" pos:column="37"/></name></name></expr>)<pos:position pos:line="5" pos:column="38"/></condition><then pos:line="5" pos:column="38"> <block pos:line="5" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">MY_DEBUG_SECTION<pos:position pos:line="6" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="34">7<pos:position pos:line="6" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="37">"closing"<pos:position pos:line="6" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="48"/></expr_stmt>
        <comment type="line" pos:line="7" pos:column="9">// do nothing here -- our comm_close_handler will be called to clean up</comment>
    }<pos:position pos:line="8" pos:column="6"/></block></then> <elseif pos:line="8" pos:column="7">else <if pos:line="8" pos:column="12">if <condition pos:line="8" pos:column="15">(<expr><name><name pos:line="8" pos:column="16">io<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">.<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="19">flag<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">!=<pos:position pos:line="8" pos:column="26"/></operator> <name><name pos:line="8" pos:column="27">Comm<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">::<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">OK<pos:position pos:line="8" pos:column="35"/></name></name></expr>)<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36"> <block pos:line="8" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><name pos:line="9" pos:column="16">MY_DEBUG_SECTION<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="34">2<pos:position pos:line="9" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="37">"write failure: "<pos:position pos:line="9" pos:column="54"/></literal> <operator pos:line="9" pos:column="55">&lt;&lt;<pos:position pos:line="9" pos:column="63"/></operator> <call><name pos:line="9" pos:column="58">xstrerr<pos:position pos:line="9" pos:column="65"/></name><argument_list pos:line="9" pos:column="65">(<argument><expr><name><name pos:line="9" pos:column="66">io<pos:position pos:line="9" pos:column="68"/></name><operator pos:line="9" pos:column="68">.<pos:position pos:line="9" pos:column="69"/></operator><name pos:line="9" pos:column="69">xerrno<pos:position pos:line="9" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="78"/></expr_stmt>
        <comment type="line" pos:line="10" pos:column="9">// keep the first buffer (the one we failed to write)</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">disconnect<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">()<pos:position pos:line="11" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">doConnect<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">()<pos:position pos:line="12" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if></elseif> <else pos:line="13" pos:column="7">else <block pos:line="13" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">MY_DEBUG_SECTION<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="34">5<pos:position pos:line="14" pos:column="35"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="37">"write successful"<pos:position pos:line="14" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="57"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="16" pos:column="9">Must<pos:position pos:line="16" pos:column="13"/></name><argument_list pos:line="16" pos:column="13">(<argument><expr><operator pos:line="16" pos:column="14">!<pos:position pos:line="16" pos:column="15"/></operator><call><name><name pos:line="16" pos:column="15">buffers<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">empty<pos:position pos:line="16" pos:column="28"/></name></name><argument_list pos:line="16" pos:column="28">()<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt> <comment type="line" pos:line="16" pos:column="33">// we had a buffer to write</comment>
        <decl_stmt><decl><type><specifier pos:line="17" pos:column="9">const<pos:position pos:line="17" pos:column="14"/></specifier> <name><name pos:line="17" pos:column="15">MemBlob<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">::<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">Pointer<pos:position pos:line="17" pos:column="31"/></name></name> <modifier pos:line="17" pos:column="32">&amp;<pos:position pos:line="17" pos:column="37"/></modifier></type><name pos:line="17" pos:column="33">written<pos:position pos:line="17" pos:column="40"/></name> <init pos:line="17" pos:column="41">= <expr><call><name><name pos:line="17" pos:column="43">buffers<pos:position pos:line="17" pos:column="50"/></name><operator pos:line="17" pos:column="50">.<pos:position pos:line="17" pos:column="51"/></operator><name pos:line="17" pos:column="51">front<pos:position pos:line="17" pos:column="56"/></name></name><argument_list pos:line="17" pos:column="56">()<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="59"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">const<pos:position pos:line="18" pos:column="14"/></specifier> <name pos:line="18" pos:column="15">size_t<pos:position pos:line="18" pos:column="21"/></name></type> <name pos:line="18" pos:column="22">writtenSize<pos:position pos:line="18" pos:column="33"/></name> <init pos:line="18" pos:column="34">= <expr><cast type="static" pos:line="18" pos:column="36">static_cast<argument_list type="generic" pos:line="18" pos:column="47">&lt;<argument><expr><name pos:line="18" pos:column="48">size_t<pos:position pos:line="18" pos:column="54"/></name></expr></argument>&gt;<pos:position pos:line="18" pos:column="58"/></argument_list><argument_list pos:line="18" pos:column="55">(<argument><expr><name><name pos:line="18" pos:column="56">written<pos:position pos:line="18" pos:column="63"/></name><operator pos:line="18" pos:column="63">-&gt;<pos:position pos:line="18" pos:column="68"/></operator><name pos:line="18" pos:column="65">size<pos:position pos:line="18" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="70"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="18" pos:column="71"/></decl_stmt>
        <comment type="line" pos:line="19" pos:column="9">// and we wrote the whole buffer</comment>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">Must<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name><name pos:line="20" pos:column="14">io<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">.<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="17">size<pos:position pos:line="20" pos:column="21"/></name></name> <operator pos:line="20" pos:column="22">==<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">writtenSize<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">Must<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><name pos:line="21" pos:column="14">bufferedSize<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">&gt;=<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="30">writtenSize<pos:position pos:line="21" pos:column="41"/></name></expr></argument>)<pos:position pos:line="21" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">bufferedSize<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">-=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">writtenSize<pos:position pos:line="22" pos:column="36"/></name></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="24" pos:column="9">buffers<pos:position pos:line="24" pos:column="16"/></name><operator pos:line="24" pos:column="16">.<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">pop_front<pos:position pos:line="24" pos:column="26"/></name></name><argument_list pos:line="24" pos:column="26">()<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">flushDebt<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&gt;<pos:position pos:line="26" pos:column="27"/></operator> <name><name pos:line="26" pos:column="25">io<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">.<pos:position pos:line="26" pos:column="28"/></operator><name pos:line="26" pos:column="28">size<pos:position pos:line="26" pos:column="32"/></name></name></expr>)<pos:position pos:line="26" pos:column="33"/></condition><then pos:line="26" pos:column="33">
            <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="13">flushDebt<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">-=<pos:position pos:line="27" pos:column="25"/></operator> <name><name pos:line="27" pos:column="26">io<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">.<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="29">size<pos:position pos:line="27" pos:column="33"/></name></name></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt></block></then>
        <else pos:line="28" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name pos:line="29" pos:column="13">flushDebt<pos:position pos:line="29" pos:column="22"/></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <literal type="number" pos:line="29" pos:column="25">0<pos:position pos:line="29" pos:column="26"/></literal></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt></block></else></if> <comment type="line" pos:line="29" pos:column="28">// wrote everything we owed (or more)</comment>

        <expr_stmt><expr><call><name pos:line="31" pos:column="9">writeIfNeeded<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">()<pos:position pos:line="31" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
