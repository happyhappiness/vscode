<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5123_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">do_close<pos:position pos:line="2" pos:column="9"/></name><parameter_list pos:line="2" pos:column="9">(<parameter><decl><type><name pos:line="2" pos:column="10">diomsg<pos:position pos:line="2" pos:column="16"/></name> <modifier pos:line="2" pos:column="17">*<pos:position pos:line="2" pos:column="18"/></modifier></type> <name pos:line="2" pos:column="19">r<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">len<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">fd<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">file_state<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">fs<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">fs<pos:position pos:line="6" pos:column="7"/></name> <operator pos:line="6" pos:column="8">=<pos:position pos:line="6" pos:column="9"/></operator> <operator pos:line="6" pos:column="10">(<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">file_state<pos:position pos:line="6" pos:column="21"/></name> <operator pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></operator><operator pos:line="6" pos:column="23">)<pos:position pos:line="6" pos:column="24"/></operator> <call><name pos:line="6" pos:column="25">hash_lookup<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name pos:line="6" pos:column="37">hash<pos:position pos:line="6" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="43">&amp;<pos:position pos:line="6" pos:column="48"/></operator><name><name pos:line="6" pos:column="44">r<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">-&gt;<pos:position pos:line="6" pos:column="50"/></operator><name pos:line="6" pos:column="47">id<pos:position pos:line="6" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="51"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">NULL<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">==<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">fs<pos:position pos:line="8" pos:column="19"/></name></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20"> <block pos:line="8" pos:column="21">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">errno<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">EBADF<pos:position pos:line="9" pos:column="22"/></name></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>
        <macro><name pos:line="10" pos:column="9">DEBUG<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><literal type="number" pos:line="10" pos:column="15">1<pos:position pos:line="10" pos:column="16"/></literal></argument>)<pos:position pos:line="10" pos:column="17"/></argument_list></macro> <block pos:line="10" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">fprintf<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">stderr<pos:position pos:line="11" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="29">"%d CLOSE id %d: "<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="11" pos:column="49">(<pos:position pos:line="11" pos:column="50"/></operator><name pos:line="11" pos:column="50">int<pos:position pos:line="11" pos:column="53"/></name><operator pos:line="11" pos:column="53">)<pos:position pos:line="11" pos:column="54"/></operator> <name pos:line="11" pos:column="55">mypid<pos:position pos:line="11" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="62">r<pos:position pos:line="11" pos:column="63"/></name><operator pos:line="11" pos:column="63">-&gt;<pos:position pos:line="11" pos:column="68"/></operator><name pos:line="11" pos:column="65">id<pos:position pos:line="11" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">perror<pos:position pos:line="12" pos:column="19"/></name><argument_list pos:line="12" pos:column="19">(<argument><expr><literal type="string" pos:line="12" pos:column="20">"do_close"<pos:position pos:line="12" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="13" pos:column="10"/></block>

        <return pos:line="15" pos:column="9">return <expr><operator pos:line="15" pos:column="16">-<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="17">errno<pos:position pos:line="15" pos:column="22"/></name></expr>;<pos:position pos:line="15" pos:column="23"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="18" pos:column="5">fd<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <name><name pos:line="18" pos:column="10">fs<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">fd<pos:position pos:line="18" pos:column="16"/></name></name></expr>;<pos:position pos:line="18" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">hash_remove_link<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">hash<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="28">(<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="29">hash_link<pos:position pos:line="19" pos:column="38"/></name> <operator pos:line="19" pos:column="39">*<pos:position pos:line="19" pos:column="40"/></operator><operator pos:line="19" pos:column="40">)<pos:position pos:line="19" pos:column="41"/></operator> <name pos:line="19" pos:column="42">fs<pos:position pos:line="19" pos:column="44"/></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>
    <macro><name pos:line="20" pos:column="5">DEBUG<pos:position pos:line="20" pos:column="10"/></name><argument_list pos:line="20" pos:column="10">(<argument><literal type="number" pos:line="20" pos:column="11">2<pos:position pos:line="20" pos:column="12"/></literal></argument>)<pos:position pos:line="20" pos:column="13"/></argument_list></macro>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">fprintf<pos:position pos:line="21" pos:column="12"/></name><argument_list pos:line="21" pos:column="12">(<argument><expr><name pos:line="21" pos:column="13">stderr<pos:position pos:line="21" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="21">"%d CLOSE id %d, FD %d, fs %p\n"<pos:position pos:line="21" pos:column="53"/></literal></expr></argument>,
            <argument><expr><operator pos:line="22" pos:column="13">(<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">int<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">)<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="19">mypid<pos:position pos:line="22" pos:column="24"/></name></expr></argument>,
            <argument><expr><name><name pos:line="23" pos:column="13">r<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">id<pos:position pos:line="23" pos:column="18"/></name></name></expr></argument>,
            <argument><expr><name><name pos:line="24" pos:column="13">fs<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">fd<pos:position pos:line="24" pos:column="19"/></name></name></expr></argument>,
            <argument><expr><name pos:line="25" pos:column="13">fs<pos:position pos:line="25" pos:column="15"/></name></expr></argument>)<pos:position pos:line="25" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">xfree<pos:position pos:line="26" pos:column="10"/></name><argument_list pos:line="26" pos:column="10">(<argument><expr><name pos:line="26" pos:column="11">fs<pos:position pos:line="26" pos:column="13"/></name></expr></argument>)<pos:position pos:line="26" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="15"/></expr_stmt>
    <return pos:line="27" pos:column="5">return <expr><call><name pos:line="27" pos:column="12">close<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">fd<pos:position pos:line="27" pos:column="20"/></name></expr></argument>)<pos:position pos:line="27" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="22"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
