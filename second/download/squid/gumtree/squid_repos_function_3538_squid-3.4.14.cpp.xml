<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3538_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">ClientHttpRequest<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">mRangeCLen<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int64_t<pos:position pos:line="4" pos:column="12"/></name></type> <name pos:line="4" pos:column="13">clen<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><literal type="number" pos:line="4" pos:column="20">0<pos:position pos:line="4" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">MemBuf<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">mb<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><call><name pos:line="7" pos:column="12">memObject<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">()<pos:position pos:line="7" pos:column="23"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">mb<pos:position pos:line="9" pos:column="7"/></name><operator pos:line="9" pos:column="7">.<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">init<pos:position pos:line="9" pos:column="12"/></name></name><argument_list pos:line="9" pos:column="12">()<pos:position pos:line="9" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="15"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">HttpHdrRange<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">::<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">iterator<pos:position pos:line="10" pos:column="27"/></name></name></type> <name pos:line="10" pos:column="28">pos<pos:position pos:line="10" pos:column="31"/></name> <init pos:line="10" pos:column="32">= <expr><call><name><name pos:line="10" pos:column="34">request<pos:position pos:line="10" pos:column="41"/></name><operator pos:line="10" pos:column="41">-&gt;<pos:position pos:line="10" pos:column="46"/></operator><name pos:line="10" pos:column="43">range<pos:position pos:line="10" pos:column="48"/></name><operator pos:line="10" pos:column="48">-&gt;<pos:position pos:line="10" pos:column="53"/></operator><name pos:line="10" pos:column="50">begin<pos:position pos:line="10" pos:column="55"/></name></name><argument_list pos:line="10" pos:column="55">()<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="58"/></decl_stmt>

    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><name pos:line="12" pos:column="12">pos<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">!=<pos:position pos:line="12" pos:column="18"/></operator> <call><name><name pos:line="12" pos:column="19">request<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">range<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">-&gt;<pos:position pos:line="12" pos:column="38"/></operator><name pos:line="12" pos:column="35">end<pos:position pos:line="12" pos:column="38"/></name></name><argument_list pos:line="12" pos:column="38">()<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="41"/></condition> <block pos:line="12" pos:column="42">{
        <comment type="block" pos:line="13" pos:column="9">/* account for headers for this range */</comment>
        <expr_stmt><expr><call><name><name pos:line="14" pos:column="9">mb<pos:position pos:line="14" pos:column="11"/></name><operator pos:line="14" pos:column="11">.<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">reset<pos:position pos:line="14" pos:column="17"/></name></name><argument_list pos:line="14" pos:column="17">()<pos:position pos:line="14" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">clientPackRangeHdr<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><call><name pos:line="15" pos:column="28">memObject<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">()<pos:position pos:line="15" pos:column="39"/></argument_list></call><operator pos:line="15" pos:column="39">-&gt;<pos:position pos:line="15" pos:column="44"/></operator><call><name pos:line="15" pos:column="41">getReply<pos:position pos:line="15" pos:column="49"/></name><argument_list pos:line="15" pos:column="49">()<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr></argument>,
                           <argument><expr><operator pos:line="16" pos:column="28">*<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">pos<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="34">range_iter<pos:position pos:line="16" pos:column="44"/></name><operator pos:line="16" pos:column="44">.<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="45">boundary<pos:position pos:line="16" pos:column="53"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="55">&amp;<pos:position pos:line="16" pos:column="60"/></operator><name pos:line="16" pos:column="56">mb<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><name pos:line="17" pos:column="9">clen<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">+=<pos:position pos:line="17" pos:column="16"/></operator> <name><name pos:line="17" pos:column="17">mb<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">.<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="20">size<pos:position pos:line="17" pos:column="24"/></name></name></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>

        <comment type="block" pos:line="19" pos:column="9">/* account for range content */</comment>
        <expr_stmt><expr><name pos:line="20" pos:column="9">clen<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">+=<pos:position pos:line="20" pos:column="16"/></operator> <name><operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator><operator pos:line="20" pos:column="18">*<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">pos<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">)<pos:position pos:line="20" pos:column="23"/></operator><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">length<pos:position pos:line="20" pos:column="31"/></name></name></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="22" pos:column="9">debugs<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="number" pos:line="22" pos:column="16">33<pos:position pos:line="22" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="20">6<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="23">"clientMRangeCLen: (clen += "<pos:position pos:line="22" pos:column="52"/></literal> <operator pos:line="22" pos:column="53">&lt;&lt;<pos:position pos:line="22" pos:column="61"/></operator> <name><name pos:line="22" pos:column="56">mb<pos:position pos:line="22" pos:column="58"/></name><operator pos:line="22" pos:column="58">.<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="59">size<pos:position pos:line="22" pos:column="63"/></name></name> <operator pos:line="22" pos:column="64">&lt;&lt;<pos:position pos:line="22" pos:column="72"/></operator> <literal type="string" pos:line="22" pos:column="67">" + "<pos:position pos:line="22" pos:column="72"/></literal> <operator pos:line="22" pos:column="73">&lt;&lt;<pos:position pos:line="22" pos:column="81"/></operator> <name><operator pos:line="22" pos:column="76">(<pos:position pos:line="22" pos:column="77"/></operator><operator pos:line="22" pos:column="77">*<pos:position pos:line="22" pos:column="78"/></operator><name pos:line="22" pos:column="78">pos<pos:position pos:line="22" pos:column="81"/></name><operator pos:line="22" pos:column="81">)<pos:position pos:line="22" pos:column="82"/></operator><operator pos:line="22" pos:column="82">-&gt;<pos:position pos:line="22" pos:column="87"/></operator><name pos:line="22" pos:column="84">length<pos:position pos:line="22" pos:column="90"/></name></name> <operator pos:line="22" pos:column="91">&lt;&lt;<pos:position pos:line="22" pos:column="99"/></operator> <literal type="string" pos:line="22" pos:column="94">") == "<pos:position pos:line="22" pos:column="101"/></literal> <operator pos:line="22" pos:column="102">&lt;&lt;<pos:position pos:line="22" pos:column="110"/></operator> <name pos:line="22" pos:column="105">clen<pos:position pos:line="22" pos:column="109"/></name></expr></argument>)<pos:position pos:line="22" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="111"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="23" pos:column="9">++<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">pos<pos:position pos:line="23" pos:column="14"/></name></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></while>

    <comment type="block" pos:line="26" pos:column="5">/* account for the terminating boundary */</comment>
    <expr_stmt><expr><call><name><name pos:line="27" pos:column="5">mb<pos:position pos:line="27" pos:column="7"/></name><operator pos:line="27" pos:column="7">.<pos:position pos:line="27" pos:column="8"/></operator><name pos:line="27" pos:column="8">reset<pos:position pos:line="27" pos:column="13"/></name></name><argument_list pos:line="27" pos:column="13">()<pos:position pos:line="27" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">clientPackTermBound<pos:position pos:line="29" pos:column="24"/></name><argument_list pos:line="29" pos:column="24">(<argument><expr><name><name pos:line="29" pos:column="25">range_iter<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">.<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="36">boundary<pos:position pos:line="29" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="46">&amp;<pos:position pos:line="29" pos:column="51"/></operator><name pos:line="29" pos:column="47">mb<pos:position pos:line="29" pos:column="49"/></name></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><name pos:line="31" pos:column="5">clen<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">+=<pos:position pos:line="31" pos:column="12"/></operator> <name><name pos:line="31" pos:column="13">mb<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">.<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">size<pos:position pos:line="31" pos:column="20"/></name></name></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="33" pos:column="5">mb<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">.<pos:position pos:line="33" pos:column="8"/></operator><name pos:line="33" pos:column="8">clean<pos:position pos:line="33" pos:column="13"/></name></name><argument_list pos:line="33" pos:column="13">()<pos:position pos:line="33" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="16"/></expr_stmt>

    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">clen<pos:position pos:line="35" pos:column="16"/></name></expr>;<pos:position pos:line="35" pos:column="17"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
