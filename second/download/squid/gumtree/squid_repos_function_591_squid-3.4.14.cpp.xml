<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_591_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">lt_dlinit<pos:position pos:line="2" pos:column="10"/></name> <parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">void<pos:position pos:line="2" pos:column="16"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="17"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type>	<name pos:line="4" pos:column="9">errors<pos:position pos:line="4" pos:column="15"/></name>	<init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

  <comment type="block" pos:line="6" pos:column="3">/* Initialize only at first call. */</comment>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">++<pos:position pos:line="7" pos:column="9"/></operator><name pos:line="7" pos:column="9">initialized<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">==<pos:position pos:line="7" pos:column="23"/></operator> <literal type="number" pos:line="7" pos:column="24">1<pos:position pos:line="7" pos:column="25"/></literal></expr>)<pos:position pos:line="7" pos:column="26"/></condition><then pos:line="7" pos:column="26">
    <block pos:line="8" pos:column="5">{
      <expr_stmt><expr><name pos:line="9" pos:column="7">lt__alloc_die<pos:position pos:line="9" pos:column="20"/></name>	<operator pos:line="9" pos:column="25">=<pos:position pos:line="9" pos:column="26"/></operator> <name pos:line="9" pos:column="27">lt__alloc_die_callback<pos:position pos:line="9" pos:column="49"/></name></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name pos:line="10" pos:column="7">handles<pos:position pos:line="10" pos:column="14"/></name>		<operator pos:line="10" pos:column="25">=<pos:position pos:line="10" pos:column="26"/></operator> <literal type="number" pos:line="10" pos:column="27">0<pos:position pos:line="10" pos:column="28"/></literal></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="11" pos:column="7">user_search_path<pos:position pos:line="11" pos:column="23"/></name>	<operator pos:line="11" pos:column="25">=<pos:position pos:line="11" pos:column="26"/></operator> <literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt> <comment type="block" pos:line="11" pos:column="30">/* empty search path */</comment>

      <comment type="block" pos:line="13" pos:column="7">/* First set up the statically loaded preload module loader, so
	 we can use it to preopen the other loaders we linked in at
	 compile time.  */</comment>
      <expr_stmt><expr><name pos:line="16" pos:column="7">errors<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">+=<pos:position pos:line="16" pos:column="16"/></operator> <call><name pos:line="16" pos:column="17">loader_init<pos:position pos:line="16" pos:column="28"/></name> <argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">get_vtable<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="42">0<pos:position pos:line="16" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>

      <comment type="block" pos:line="18" pos:column="7">/* Now open all the preloaded module loaders, so the application
	 can use _them_ to lt_dlopen its own modules.  */</comment>
<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">HAVE_LIBDLLOADER<pos:position pos:line="20" pos:column="24"/></name></cpp:ifdef>
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><operator pos:line="21" pos:column="11">!<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">errors<pos:position pos:line="21" pos:column="18"/></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19">
	<block pos:line="22" pos:column="9">{
	  <expr_stmt><expr><name pos:line="23" pos:column="11">errors<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">+=<pos:position pos:line="23" pos:column="20"/></operator> <call><name pos:line="23" pos:column="21">lt_dlpreload<pos:position pos:line="23" pos:column="33"/></name> <argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">preloaded_symbols<pos:position pos:line="23" pos:column="52"/></name></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
	}<pos:position pos:line="24" pos:column="10"/></block></then></if>

      <if pos:line="26" pos:column="7">if <condition pos:line="26" pos:column="10">(<expr><operator pos:line="26" pos:column="11">!<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">errors<pos:position pos:line="26" pos:column="18"/></name></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19">
	<block pos:line="27" pos:column="9">{
	  <expr_stmt><expr><name pos:line="28" pos:column="11">errors<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">+=<pos:position pos:line="28" pos:column="20"/></operator> <call><name pos:line="28" pos:column="21">lt_dlpreload_open<pos:position pos:line="28" pos:column="38"/></name> <argument_list pos:line="28" pos:column="39">(<argument><expr><call><name pos:line="28" pos:column="40">LT_STR<pos:position pos:line="28" pos:column="46"/></name><argument_list pos:line="28" pos:column="46">(<argument><expr><name pos:line="28" pos:column="47">LTDLOPEN<pos:position pos:line="28" pos:column="55"/></name></expr></argument>)<pos:position pos:line="28" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">loader_init_callback<pos:position pos:line="28" pos:column="78"/></name></expr></argument>)<pos:position pos:line="28" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="80"/></expr_stmt>
	}<pos:position pos:line="29" pos:column="10"/></block></then></if>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="30" pos:column="8">/* HAVE_LIBDLLOADER */</comment>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifdef<pos:position pos:line="33" pos:column="7"/></cpp:directive> <name pos:line="33" pos:column="8">LT_DEBUG_LOADERS<pos:position pos:line="33" pos:column="24"/></name></cpp:ifdef>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">lt_dlloader_dump<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">()<pos:position pos:line="34" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="22"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

  <return pos:line="37" pos:column="3">return <expr><name pos:line="37" pos:column="10">errors<pos:position pos:line="37" pos:column="16"/></name></expr>;<pos:position pos:line="37" pos:column="17"/></return>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
