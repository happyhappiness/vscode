<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_162_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">debug<pos:position pos:line="2" pos:column="6"/></name><parameter_list pos:line="2" pos:column="6">(<parameter><decl><type><name pos:line="2" pos:column="7">char<pos:position pos:line="2" pos:column="11"/></name> <modifier pos:line="2" pos:column="12">*<pos:position pos:line="2" pos:column="13"/></modifier></type><name pos:line="2" pos:column="13">format<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>,<parameter><decl><type><modifier pos:line="2" pos:column="20">...<pos:position pos:line="2" pos:column="23"/></modifier></type></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifdef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifdef<pos:position pos:line="4" pos:column="7"/></cpp:directive> <name pos:line="4" pos:column="8">DEBUG<pos:position pos:line="4" pos:column="13"/></name></cpp:ifdef>
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="5" pos:column="21"/></name></cpp:ifdef>
<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">FAIL_DEBUG<pos:position pos:line="6" pos:column="15"/></name></expr></cpp:if>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">debug_enabled<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">||<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="26">fail_debug_enabled<pos:position pos:line="7" pos:column="44"/></name></expr>)<pos:position pos:line="7" pos:column="45"/></condition><then pos:line="7" pos:column="45"> <block pos:line="7" pos:column="46">{
<cpp:else pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">else<pos:position pos:line="8" pos:column="6"/></cpp:directive></cpp:else>
<if pos:line="9" pos:column="1">if <condition pos:line="9" pos:column="4">(<expr><name pos:line="9" pos:column="5">debug_enabled<pos:position pos:line="9" pos:column="18"/></name></expr>)<pos:position pos:line="9" pos:column="19"/></condition><then pos:line="9" pos:column="19"> <block pos:line="9" pos:column="20">{
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">va_list<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">args<pos:position pos:line="11" pos:column="21"/></name></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="13" pos:column="9">va_start<pos:position pos:line="13" pos:column="17"/></name><argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">args<pos:position pos:line="13" pos:column="22"/></name></expr></argument>,<argument><expr><name pos:line="13" pos:column="23">format<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">fprintf<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">(<argument><expr><name pos:line="14" pos:column="17">stderr<pos:position pos:line="14" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="25">"negotiate-auth[%d]: "<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>,<argument><expr><call><name pos:line="14" pos:column="48">getpid<pos:position pos:line="14" pos:column="54"/></name><argument_list pos:line="14" pos:column="54">()<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">vfprintf<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><name pos:line="15" pos:column="18">stderr<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="26">format<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">args<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">va_end<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">args<pos:position pos:line="16" pos:column="20"/></name></expr></argument>)<pos:position pos:line="16" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
<cpp:if pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">if<pos:position pos:line="17" pos:column="4"/></cpp:directive> <expr><name pos:line="17" pos:column="5">FAIL_DEBUG<pos:position pos:line="17" pos:column="15"/></name></expr></cpp:if>
        <expr_stmt><expr><name pos:line="18" pos:column="9">fail_debug_enabled<pos:position pos:line="18" pos:column="27"/></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <literal type="number" pos:line="18" pos:column="30">0<pos:position pos:line="18" pos:column="31"/></literal></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="21" pos:column="8">/* _SQUID_MSWIN_ */</comment>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="22" pos:column="8">/* DEBUG */</comment>
}<pos:position pos:line="23" pos:column="2"/></block></then></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="24" pos:column="8">/* __GNUC__ */</comment>


<comment type="block" pos:line="27" pos:column="1">/* A couple of harmless helper macros */</comment>
<cpp:define pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">define<pos:position pos:line="28" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="28" pos:column="9">SEND<pos:position pos:line="28" pos:column="13"/></name><parameter_list pos:line="28" pos:column="13">(<parameter><type><name pos:line="28" pos:column="14">X<pos:position pos:line="28" pos:column="15"/></name></type></parameter>)<pos:position pos:line="28" pos:column="16"/></parameter_list></cpp:macro> <cpp:value pos:line="28" pos:column="17">debug("sending '%s' to squid\n",X); printf(X "\n");<pos:position pos:line="28" pos:column="68"/></cpp:value></cpp:define>
<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef<pos:position pos:line="29" pos:column="7"/></cpp:directive> <name pos:line="29" pos:column="8">__GNUC__<pos:position pos:line="29" pos:column="16"/></name></cpp:ifdef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define<pos:position pos:line="30" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">SEND2<pos:position pos:line="30" pos:column="14"/></name><parameter_list pos:line="30" pos:column="14">(<parameter><type><name pos:line="30" pos:column="15">X<pos:position pos:line="30" pos:column="16"/></name></type></parameter>,<parameter><type><name pos:line="30" pos:column="17">Y<pos:position pos:line="30" pos:column="18"/></name><modifier pos:line="30" pos:column="18">...<pos:position pos:line="30" pos:column="21"/></modifier></type></parameter>)<pos:position pos:line="30" pos:column="22"/></parameter_list></cpp:macro> <cpp:value pos:line="30" pos:column="23">debug("sending '" X "' to squid\n",Y); printf(X "\n",Y);<pos:position pos:line="30" pos:column="79"/></cpp:value></cpp:define>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define<pos:position pos:line="31" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">SEND3<pos:position pos:line="31" pos:column="14"/></name><parameter_list pos:line="31" pos:column="14">(<parameter><type><name pos:line="31" pos:column="15">X<pos:position pos:line="31" pos:column="16"/></name></type></parameter>,<parameter><type><name pos:line="31" pos:column="17">Y<pos:position pos:line="31" pos:column="18"/></name><modifier pos:line="31" pos:column="18">...<pos:position pos:line="31" pos:column="21"/></modifier></type></parameter>)<pos:position pos:line="31" pos:column="22"/></parameter_list></cpp:macro> <cpp:value pos:line="31" pos:column="23">debug("sending '" X "' to squid\n",Y); printf(X "\n",Y);<pos:position pos:line="31" pos:column="79"/></cpp:value></cpp:define>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>
<comment type="block" pos:line="33" pos:column="1">/* no gcc, no debugging. varargs macros are a gcc extension */</comment>
<cpp:define pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">define<pos:position pos:line="34" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="34" pos:column="9">SEND2<pos:position pos:line="34" pos:column="14"/></name><parameter_list pos:line="34" pos:column="14">(<parameter><type><name pos:line="34" pos:column="15">X<pos:position pos:line="34" pos:column="16"/></name></type></parameter>,<parameter><type><name pos:line="34" pos:column="17">Y<pos:position pos:line="34" pos:column="18"/></name></type></parameter>)<pos:position pos:line="34" pos:column="19"/></parameter_list></cpp:macro> <cpp:value pos:line="34" pos:column="20">debug("sending '" X "' to squid\n",Y); printf(X "\n",Y);<pos:position pos:line="34" pos:column="76"/></cpp:value></cpp:define>
<cpp:define pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">define<pos:position pos:line="35" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="35" pos:column="9">SEND3<pos:position pos:line="35" pos:column="14"/></name><parameter_list pos:line="35" pos:column="14">(<parameter><type><name pos:line="35" pos:column="15">X<pos:position pos:line="35" pos:column="16"/></name></type></parameter>,<parameter><type><name pos:line="35" pos:column="17">Y<pos:position pos:line="35" pos:column="18"/></name></type></parameter>,<parameter><type><name pos:line="35" pos:column="19">Z<pos:position pos:line="35" pos:column="20"/></name></type></parameter>)<pos:position pos:line="35" pos:column="21"/></parameter_list></cpp:macro> <cpp:value pos:line="35" pos:column="22">debug("sending '" X "' to squid\n",Y,Z); printf(X "\n",Y,Z);<pos:position pos:line="35" pos:column="82"/></cpp:value></cpp:define>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>

<decl_stmt><decl><specifier pos:line="38" pos:column="1">extern<pos:position pos:line="38" pos:column="7"/></specifier> <type><name pos:line="38" pos:column="8">void<pos:position pos:line="38" pos:column="12"/></name></type> <name pos:line="38" pos:column="13">uc<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">char<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">*<pos:position pos:line="38" pos:column="22"/></operator></expr></argument>)<pos:position pos:line="38" pos:column="23"/></argument_list></decl>;<pos:position pos:line="38" pos:column="24"/></decl_stmt>

<decl_stmt><decl><specifier pos:line="40" pos:column="1">extern<pos:position pos:line="40" pos:column="7"/></specifier> <type><name pos:line="40" pos:column="8">char<pos:position pos:line="40" pos:column="12"/></name> <modifier pos:line="40" pos:column="13">*<pos:position pos:line="40" pos:column="14"/></modifier></type><name pos:line="40" pos:column="14">negotiate_check_auth<pos:position pos:line="40" pos:column="34"/></name><argument_list pos:line="40" pos:column="34">(<argument><expr><name pos:line="40" pos:column="35">SSP_blobP<pos:position pos:line="40" pos:column="44"/></name> <name pos:line="40" pos:column="45">auth<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">int<pos:position pos:line="40" pos:column="54"/></name> <name pos:line="40" pos:column="55">auth_length<pos:position pos:line="40" pos:column="66"/></name></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></decl>;<pos:position pos:line="40" pos:column="68"/></decl_stmt>
<decl_stmt><decl><specifier pos:line="41" pos:column="1">extern<pos:position pos:line="41" pos:column="7"/></specifier> <type><name pos:line="41" pos:column="8">void<pos:position pos:line="41" pos:column="12"/></name></type> <name pos:line="41" pos:column="13">hex_dump<pos:position pos:line="41" pos:column="21"/></name><argument_list pos:line="41" pos:column="21">(<argument><expr><name pos:line="41" pos:column="22">void<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">*<pos:position pos:line="41" pos:column="28"/></operator></expr></argument>, <argument><expr><name pos:line="41" pos:column="30">int<pos:position pos:line="41" pos:column="33"/></name></expr></argument>)<pos:position pos:line="41" pos:column="34"/></argument_list></decl>;<pos:position pos:line="41" pos:column="35"/></decl_stmt></block></function></unit>
