<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6006_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">nmasldap_get_password<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(
    <parameter><decl><type><name pos:line="2" pos:column="5">LDAP<pos:position pos:line="2" pos:column="9"/></name>     <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">ld<pos:position pos:line="2" pos:column="17"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name>     <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">objectDN<pos:position pos:line="3" pos:column="23"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name>   <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">pwdSize<pos:position pos:line="4" pos:column="22"/></name></decl></parameter>,  <comment type="block" pos:line="4" pos:column="25">/* in bytes */</comment>
    <parameter><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">char<pos:position pos:line="5" pos:column="18"/></name>     <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">pwd<pos:position pos:line="5" pos:column="27"/></name></decl></parameter> )<pos:position pos:line="5" pos:column="29"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">err<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">berval<pos:position pos:line="9" pos:column="18"/></name></name> <modifier pos:line="9" pos:column="19">*<pos:position pos:line="9" pos:column="20"/></modifier></type><name pos:line="9" pos:column="20">requestBV<pos:position pos:line="9" pos:column="29"/></name> <init pos:line="9" pos:column="30">= <expr><name pos:line="9" pos:column="32">NULL<pos:position pos:line="9" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">replyOID<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><name pos:line="10" pos:column="22">NULL<pos:position pos:line="10" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">berval<pos:position pos:line="11" pos:column="18"/></name></name> <modifier pos:line="11" pos:column="19">*<pos:position pos:line="11" pos:column="20"/></modifier></type><name pos:line="11" pos:column="20">replyBV<pos:position pos:line="11" pos:column="27"/></name> <init pos:line="11" pos:column="28">= <expr><name pos:line="11" pos:column="30">NULL<pos:position pos:line="11" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">serverVersion<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">pwdBuf<pos:position pos:line="13" pos:column="17"/></name></decl>;<pos:position pos:line="13" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">size_t<pos:position pos:line="14" pos:column="11"/></name></type> <name pos:line="14" pos:column="12">pwdBufLen<pos:position pos:line="14" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="14" pos:column="23">bufferLen<pos:position pos:line="14" pos:column="32"/></name></decl>;<pos:position pos:line="14" pos:column="33"/></decl_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* Validate char parameters. */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">objectDN<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">==<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">NULL<pos:position pos:line="17" pos:column="25"/></name> <operator pos:line="17" pos:column="26">||<pos:position pos:line="17" pos:column="28"/></operator> <operator pos:line="17" pos:column="29">(<pos:position pos:line="17" pos:column="30"/></operator><call><name pos:line="17" pos:column="30">strlen<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">objectDN<pos:position pos:line="17" pos:column="45"/></name></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call> <operator pos:line="17" pos:column="47">==<pos:position pos:line="17" pos:column="49"/></operator> <literal type="number" pos:line="17" pos:column="50">0<pos:position pos:line="17" pos:column="51"/></literal><operator pos:line="17" pos:column="51">)<pos:position pos:line="17" pos:column="52"/></operator> <operator pos:line="17" pos:column="53">||<pos:position pos:line="17" pos:column="55"/></operator> <name pos:line="17" pos:column="56">pwdSize<pos:position pos:line="17" pos:column="63"/></name> <operator pos:line="17" pos:column="64">==<pos:position pos:line="17" pos:column="66"/></operator> <name pos:line="17" pos:column="67">NULL<pos:position pos:line="17" pos:column="71"/></name> <operator pos:line="17" pos:column="72">||<pos:position pos:line="17" pos:column="74"/></operator> <name pos:line="17" pos:column="75">ld<pos:position pos:line="17" pos:column="77"/></name> <operator pos:line="17" pos:column="78">==<pos:position pos:line="17" pos:column="80"/></operator> <name pos:line="17" pos:column="81">NULL<pos:position pos:line="17" pos:column="85"/></name></expr>)<pos:position pos:line="17" pos:column="86"/></condition><then pos:line="17" pos:column="86"> <block pos:line="17" pos:column="87">{
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">LDAP_NO_SUCH_ATTRIBUTE<pos:position pos:line="18" pos:column="38"/></name></expr>;<pos:position pos:line="18" pos:column="39"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="21" pos:column="5">bufferLen<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="17">pwdBufLen<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <operator pos:line="21" pos:column="29">*<pos:position pos:line="21" pos:column="30"/></operator><name pos:line="21" pos:column="30">pwdSize<pos:position pos:line="21" pos:column="37"/></name></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">pwdBuf<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <operator pos:line="22" pos:column="14">(<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">char<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">*<pos:position pos:line="22" pos:column="20"/></operator><operator pos:line="22" pos:column="20">)<pos:position pos:line="22" pos:column="21"/></operator><call><name pos:line="22" pos:column="21">SMB_MALLOC_ARRAY<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><name pos:line="22" pos:column="38">char<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="44">pwdBufLen<pos:position pos:line="22" pos:column="53"/></name><operator pos:line="22" pos:column="53">+<pos:position pos:line="22" pos:column="54"/></operator><literal type="number" pos:line="22" pos:column="54">2<pos:position pos:line="22" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="57"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">pwdBuf<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">NULL<pos:position pos:line="23" pos:column="23"/></name></expr>)<pos:position pos:line="23" pos:column="24"/></condition><then pos:line="23" pos:column="24"> <block pos:line="23" pos:column="25">{
        <return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">LDAP_NO_MEMORY<pos:position pos:line="24" pos:column="30"/></name></expr>;<pos:position pos:line="24" pos:column="31"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="27" pos:column="5">err<pos:position pos:line="27" pos:column="8"/></name> <operator pos:line="27" pos:column="9">=<pos:position pos:line="27" pos:column="10"/></operator> <call><name pos:line="27" pos:column="11">berEncodePasswordData<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><operator pos:line="27" pos:column="33">&amp;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="34">requestBV<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="45">objectDN<pos:position pos:line="27" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="55">NULL<pos:position pos:line="27" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="61">NULL<pos:position pos:line="27" pos:column="65"/></name></expr></argument>)<pos:position pos:line="27" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="67"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">err<pos:position pos:line="28" pos:column="12"/></name></expr>)<pos:position pos:line="28" pos:column="13"/></condition><then pos:line="28" pos:column="13"> <block pos:line="28" pos:column="14">{
        <empty_stmt pos:line="29" pos:column="9">;<pos:position pos:line="29" pos:column="10"/></empty_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then> <elseif pos:line="30" pos:column="7">else <if pos:line="30" pos:column="12">if <condition pos:line="30" pos:column="15">(<expr><operator pos:line="30" pos:column="16">(<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">err<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">ldap_extended_operation_s<pos:position pos:line="30" pos:column="48"/></name><argument_list pos:line="30" pos:column="48">(<argument><expr><name pos:line="30" pos:column="49">ld<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">NMASLDAP_GET_PASSWORD_REQUEST<pos:position pos:line="30" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="84">requestBV<pos:position pos:line="30" pos:column="93"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="95">NULL<pos:position pos:line="30" pos:column="99"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="101">NULL<pos:position pos:line="30" pos:column="105"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="107">&amp;<pos:position pos:line="30" pos:column="112"/></operator><name pos:line="30" pos:column="108">replyOID<pos:position pos:line="30" pos:column="116"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="118">&amp;<pos:position pos:line="30" pos:column="123"/></operator><name pos:line="30" pos:column="119">replyBV<pos:position pos:line="30" pos:column="126"/></name></expr></argument>)<pos:position pos:line="30" pos:column="127"/></argument_list></call><operator pos:line="30" pos:column="127">)<pos:position pos:line="30" pos:column="128"/></operator></expr>)<pos:position pos:line="30" pos:column="129"/></condition><then pos:line="30" pos:column="129"> <block pos:line="30" pos:column="130">{
        <empty_stmt pos:line="31" pos:column="9">;<pos:position pos:line="31" pos:column="10"/></empty_stmt> <comment type="block" pos:line="31" pos:column="11">/* Call the ldap_extended_operation (synchronously) */</comment>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if></elseif> <elseif pos:line="32" pos:column="7">else <if pos:line="32" pos:column="12">if <condition pos:line="32" pos:column="15">(<expr><operator pos:line="32" pos:column="16">!<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">replyOID<pos:position pos:line="32" pos:column="25"/></name></expr>)<pos:position pos:line="32" pos:column="26"/></condition><then pos:line="32" pos:column="26"> <block pos:line="32" pos:column="27">{
        <comment type="block" pos:line="33" pos:column="9">/* Make sure there is a return OID */</comment>
        <expr_stmt><expr><name pos:line="34" pos:column="9">err<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <name pos:line="34" pos:column="15">LDAP_NOT_SUPPORTED<pos:position pos:line="34" pos:column="33"/></name></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if></elseif> <elseif pos:line="35" pos:column="7">else <if pos:line="35" pos:column="12">if <condition pos:line="35" pos:column="15">(<expr><call><name pos:line="35" pos:column="16">strcmp<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">(<argument><expr><name pos:line="35" pos:column="23">replyOID<pos:position pos:line="35" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="33">NMASLDAP_GET_PASSWORD_RESPONSE<pos:position pos:line="35" pos:column="63"/></name></expr></argument>)<pos:position pos:line="35" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="65"/></condition><then pos:line="35" pos:column="65"> <block pos:line="35" pos:column="66">{
        <comment type="block" pos:line="36" pos:column="9">/* Is this what we were expecting to get back. */</comment>
        <expr_stmt><expr><name pos:line="37" pos:column="9">err<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <name pos:line="37" pos:column="15">LDAP_NOT_SUPPORTED<pos:position pos:line="37" pos:column="33"/></name></expr>;<pos:position pos:line="37" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if></elseif> <elseif pos:line="38" pos:column="7">else <if pos:line="38" pos:column="12">if <condition pos:line="38" pos:column="15">(<expr><operator pos:line="38" pos:column="16">!<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">replyBV<pos:position pos:line="38" pos:column="24"/></name></expr>)<pos:position pos:line="38" pos:column="25"/></condition><then pos:line="38" pos:column="25"> <block pos:line="38" pos:column="26">{
        <comment type="block" pos:line="39" pos:column="9">/* Do we have a good returned berval? */</comment>
        <comment type="block" pos:line="40" pos:column="9">/* No; returned berval means we experienced a rather drastic error. */</comment>
        <comment type="block" pos:line="41" pos:column="9">/* Return operations error. */</comment>
        <expr_stmt><expr><name pos:line="42" pos:column="9">err<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <name pos:line="42" pos:column="15">LDAP_OPERATIONS_ERROR<pos:position pos:line="42" pos:column="36"/></name></expr>;<pos:position pos:line="42" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if></elseif> <else pos:line="43" pos:column="7">else <block pos:line="43" pos:column="12">{
        <expr_stmt><expr><name pos:line="44" pos:column="9">err<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <call><name pos:line="44" pos:column="15">berDecodeLoginData<pos:position pos:line="44" pos:column="33"/></name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">replyBV<pos:position pos:line="44" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="43">&amp;<pos:position pos:line="44" pos:column="48"/></operator><name pos:line="44" pos:column="44">serverVersion<pos:position pos:line="44" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="59">&amp;<pos:position pos:line="44" pos:column="64"/></operator><name pos:line="44" pos:column="60">pwdBufLen<pos:position pos:line="44" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="71">pwdBuf<pos:position pos:line="44" pos:column="77"/></name></expr></argument>)<pos:position pos:line="44" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="79"/></expr_stmt>

        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">serverVersion<pos:position pos:line="46" pos:column="26"/></name> <operator pos:line="46" pos:column="27">!=<pos:position pos:line="46" pos:column="29"/></operator> <name pos:line="46" pos:column="30">NMAS_LDAP_EXT_VERSION<pos:position pos:line="46" pos:column="51"/></name></expr>)<pos:position pos:line="46" pos:column="52"/></condition><then pos:line="46" pos:column="52"> <block pos:line="46" pos:column="53">{
            <expr_stmt><expr><name pos:line="47" pos:column="13">err<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <name pos:line="47" pos:column="19">LDAP_OPERATIONS_ERROR<pos:position pos:line="47" pos:column="40"/></name></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>

        }<pos:position pos:line="49" pos:column="10"/></block></then> <elseif pos:line="49" pos:column="11">else <if pos:line="49" pos:column="16">if <condition pos:line="49" pos:column="19">(<expr><operator pos:line="49" pos:column="20">!<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="21">err<pos:position pos:line="49" pos:column="24"/></name> <operator pos:line="49" pos:column="25">&amp;&amp;<pos:position pos:line="49" pos:column="35"/></operator> <name pos:line="49" pos:column="28">pwdBufLen<pos:position pos:line="49" pos:column="37"/></name> <operator pos:line="49" pos:column="38">!=<pos:position pos:line="49" pos:column="40"/></operator> <literal type="number" pos:line="49" pos:column="41">0<pos:position pos:line="49" pos:column="42"/></literal></expr>)<pos:position pos:line="49" pos:column="43"/></condition><then pos:line="49" pos:column="43"> <block pos:line="49" pos:column="44">{
            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><operator pos:line="50" pos:column="17">*<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="18">pwdSize<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">&gt;=<pos:position pos:line="50" pos:column="31"/></operator> <name pos:line="50" pos:column="29">pwdBufLen<pos:position pos:line="50" pos:column="38"/></name><operator pos:line="50" pos:column="38">+<pos:position pos:line="50" pos:column="39"/></operator><literal type="number" pos:line="50" pos:column="39">1<pos:position pos:line="50" pos:column="40"/></literal> <operator pos:line="50" pos:column="41">&amp;&amp;<pos:position pos:line="50" pos:column="51"/></operator> <name pos:line="50" pos:column="44">pwd<pos:position pos:line="50" pos:column="47"/></name> <operator pos:line="50" pos:column="48">!=<pos:position pos:line="50" pos:column="50"/></operator> <name pos:line="50" pos:column="51">NULL<pos:position pos:line="50" pos:column="55"/></name></expr>)<pos:position pos:line="50" pos:column="56"/></condition><then pos:line="50" pos:column="56"> <block pos:line="50" pos:column="57">{
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">memcpy<pos:position pos:line="51" pos:column="23"/></name><argument_list pos:line="51" pos:column="23">(<argument><expr><name pos:line="51" pos:column="24">pwd<pos:position pos:line="51" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="29">pwdBuf<pos:position pos:line="51" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="37">pwdBufLen<pos:position pos:line="51" pos:column="46"/></name></expr></argument>)<pos:position pos:line="51" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="52" pos:column="17">pwd<pos:position pos:line="52" pos:column="20"/></name><index pos:line="52" pos:column="20">[<expr><name pos:line="52" pos:column="21">pwdBufLen<pos:position pos:line="52" pos:column="30"/></name></expr>]<pos:position pos:line="52" pos:column="31"/></index></name> <operator pos:line="52" pos:column="32">=<pos:position pos:line="52" pos:column="33"/></operator> <literal type="number" pos:line="52" pos:column="34">0<pos:position pos:line="52" pos:column="35"/></literal></expr>;<pos:position pos:line="52" pos:column="36"/></expr_stmt> <comment type="block" pos:line="52" pos:column="37">/* add null termination */</comment>
            }<pos:position pos:line="53" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="54" pos:column="13">*<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="14">pwdSize<pos:position pos:line="54" pos:column="21"/></name> <operator pos:line="54" pos:column="22">=<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="24">pwdBufLen<pos:position pos:line="54" pos:column="33"/></name></expr>;<pos:position pos:line="54" pos:column="34"/></expr_stmt> <comment type="block" pos:line="54" pos:column="35">/* does not include null termination */</comment>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="56" pos:column="6"/></block></else></if>

    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">replyBV<pos:position pos:line="58" pos:column="16"/></name></expr>)<pos:position pos:line="58" pos:column="17"/></condition><then pos:line="58" pos:column="17"> <block pos:line="58" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">ber_bvfree<pos:position pos:line="59" pos:column="19"/></name><argument_list pos:line="59" pos:column="19">(<argument><expr><name pos:line="59" pos:column="20">replyBV<pos:position pos:line="59" pos:column="27"/></name></expr></argument>)<pos:position pos:line="59" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="62" pos:column="5">/* Free the return OID string if one was returned. */</comment>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">replyOID<pos:position pos:line="63" pos:column="17"/></name></expr>)<pos:position pos:line="63" pos:column="18"/></condition><then pos:line="63" pos:column="18"> <block pos:line="63" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">ldap_memfree<pos:position pos:line="64" pos:column="21"/></name><argument_list pos:line="64" pos:column="21">(<argument><expr><name pos:line="64" pos:column="22">replyOID<pos:position pos:line="64" pos:column="30"/></name></expr></argument>)<pos:position pos:line="64" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="67" pos:column="5">/* Free memory allocated while building the request ber and berval. */</comment>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name pos:line="68" pos:column="9">requestBV<pos:position pos:line="68" pos:column="18"/></name></expr>)<pos:position pos:line="68" pos:column="19"/></condition><then pos:line="68" pos:column="19"> <block pos:line="68" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">ber_bvfree<pos:position pos:line="69" pos:column="19"/></name><argument_list pos:line="69" pos:column="19">(<argument><expr><name pos:line="69" pos:column="20">requestBV<pos:position pos:line="69" pos:column="29"/></name></expr></argument>)<pos:position pos:line="69" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>

    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name pos:line="72" pos:column="9">pwdBuf<pos:position pos:line="72" pos:column="15"/></name> <operator pos:line="72" pos:column="16">!=<pos:position pos:line="72" pos:column="18"/></operator> <name pos:line="72" pos:column="19">NULL<pos:position pos:line="72" pos:column="23"/></name></expr>)<pos:position pos:line="72" pos:column="24"/></condition><then pos:line="72" pos:column="24"> <block pos:line="72" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">memset<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><name pos:line="73" pos:column="16">pwdBuf<pos:position pos:line="73" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="24">0<pos:position pos:line="73" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="27">bufferLen<pos:position pos:line="73" pos:column="36"/></name></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">free<pos:position pos:line="74" pos:column="13"/></name><argument_list pos:line="74" pos:column="13">(<argument><expr><name pos:line="74" pos:column="14">pwdBuf<pos:position pos:line="74" pos:column="20"/></name></expr></argument>)<pos:position pos:line="74" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="77" pos:column="5">/* Return the appropriate error/success code. */</comment>
    <return pos:line="78" pos:column="5">return <expr><name pos:line="78" pos:column="12">err<pos:position pos:line="78" pos:column="15"/></name></expr>;<pos:position pos:line="78" pos:column="16"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
