<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6833_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESIVariableCookie<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">eval<pos:position pos:line="2" pos:column="24"/></name></name> <parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">ESIVarState<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">&amp;<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="39">state<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">char<pos:position pos:line="2" pos:column="50"/></name> <specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">subref<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="66">char<pos:position pos:line="2" pos:column="70"/></name> <specifier pos:line="2" pos:column="71">const<pos:position pos:line="2" pos:column="76"/></specifier> <modifier pos:line="2" pos:column="77">*<pos:position pos:line="2" pos:column="78"/></modifier></type><name pos:line="2" pos:column="78">found_default<pos:position pos:line="2" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="92"/></parameter_list> <specifier pos:line="2" pos:column="93">const<pos:position pos:line="2" pos:column="98"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">s<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">NULL<pos:position pos:line="4" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">state<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">.<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="11">cookieUsed<pos:position pos:line="5" pos:column="21"/></name></name><argument_list pos:line="5" pos:column="21">()<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name><name pos:line="7" pos:column="9">state<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">.<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">header<pos:position pos:line="7" pos:column="21"/></name></name><argument_list pos:line="7" pos:column="21">()<pos:position pos:line="7" pos:column="23"/></argument_list></call><operator pos:line="7" pos:column="23">.<pos:position pos:line="7" pos:column="24"/></operator><call><name pos:line="7" pos:column="24">has<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name><name pos:line="7" pos:column="28">Http<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">::<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="34">HdrType<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">::<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="43">COOKIE<pos:position pos:line="7" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="51"/></condition><then pos:line="7" pos:column="51"> <block pos:line="7" pos:column="52">{
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><operator pos:line="8" pos:column="13">!<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">subref<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="13">s<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <call><name><name pos:line="9" pos:column="17">state<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">.<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">header<pos:position pos:line="9" pos:column="29"/></name></name><argument_list pos:line="9" pos:column="29">()<pos:position pos:line="9" pos:column="31"/></argument_list></call><operator pos:line="9" pos:column="31">.<pos:position pos:line="9" pos:column="32"/></operator><call><name pos:line="9" pos:column="32">getStr<pos:position pos:line="9" pos:column="38"/></name> <argument_list pos:line="9" pos:column="39">(<argument><expr><name><name pos:line="9" pos:column="40">Http<pos:position pos:line="9" pos:column="44"/></name><operator pos:line="9" pos:column="44">::<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="46">HdrType<pos:position pos:line="9" pos:column="53"/></name><operator pos:line="9" pos:column="53">::<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="55">COOKIE<pos:position pos:line="9" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="63"/></expr_stmt></block></then>
        <else pos:line="10" pos:column="9">else <block pos:line="10" pos:column="14">{
            <decl_stmt><decl><type><name pos:line="11" pos:column="13">String<pos:position pos:line="11" pos:column="19"/></name></type> <name pos:line="11" pos:column="20">S<pos:position pos:line="11" pos:column="21"/></name> <init pos:line="11" pos:column="22">= <expr><call><name><name pos:line="11" pos:column="24">state<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">.<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">header<pos:position pos:line="11" pos:column="36"/></name></name><argument_list pos:line="11" pos:column="36">()<pos:position pos:line="11" pos:column="38"/></argument_list></call><operator pos:line="11" pos:column="38">.<pos:position pos:line="11" pos:column="39"/></operator><call><name pos:line="11" pos:column="39">getListMember<pos:position pos:line="11" pos:column="52"/></name> <argument_list pos:line="11" pos:column="53">(<argument><expr><name><name pos:line="11" pos:column="54">Http<pos:position pos:line="11" pos:column="58"/></name><operator pos:line="11" pos:column="58">::<pos:position pos:line="11" pos:column="60"/></operator><name pos:line="11" pos:column="60">HdrType<pos:position pos:line="11" pos:column="67"/></name><operator pos:line="11" pos:column="67">::<pos:position pos:line="11" pos:column="69"/></operator><name pos:line="11" pos:column="69">COOKIE<pos:position pos:line="11" pos:column="75"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="77">subref<pos:position pos:line="11" pos:column="83"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="85">';'<pos:position pos:line="11" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="90"/></decl_stmt>

            <if pos:line="13" pos:column="13">if <condition pos:line="13" pos:column="16">(<expr><call><name><name pos:line="13" pos:column="17">S<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">size<pos:position pos:line="13" pos:column="23"/></name></name><argument_list pos:line="13" pos:column="23">()<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="14" pos:column="17">ESISegment<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">::<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="29">ListAppend<pos:position pos:line="14" pos:column="39"/></name></name> <argument_list pos:line="14" pos:column="40">(<argument><expr><call><name><name pos:line="14" pos:column="41">state<pos:position pos:line="14" pos:column="46"/></name><operator pos:line="14" pos:column="46">.<pos:position pos:line="14" pos:column="47"/></operator><name pos:line="14" pos:column="47">getOutput<pos:position pos:line="14" pos:column="56"/></name></name><argument_list pos:line="14" pos:column="56">()<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="14" pos:column="60">S<pos:position pos:line="14" pos:column="61"/></name><operator pos:line="14" pos:column="61">.<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="62">rawBuf<pos:position pos:line="14" pos:column="68"/></name></name><argument_list pos:line="14" pos:column="68">()<pos:position pos:line="14" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="14" pos:column="72">S<pos:position pos:line="14" pos:column="73"/></name><operator pos:line="14" pos:column="73">.<pos:position pos:line="14" pos:column="74"/></operator><name pos:line="14" pos:column="74">size<pos:position pos:line="14" pos:column="78"/></name></name><argument_list pos:line="14" pos:column="78">()<pos:position pos:line="14" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="82"/></expr_stmt></block></then>
            <elseif pos:line="15" pos:column="13">else <if pos:line="15" pos:column="18">if <condition pos:line="15" pos:column="21">(<expr><name pos:line="15" pos:column="22">found_default<pos:position pos:line="15" pos:column="35"/></name></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="16" pos:column="17">ESISegment<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">::<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="29">ListAppend<pos:position pos:line="16" pos:column="39"/></name></name> <argument_list pos:line="16" pos:column="40">(<argument><expr><call><name><name pos:line="16" pos:column="41">state<pos:position pos:line="16" pos:column="46"/></name><operator pos:line="16" pos:column="46">.<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="47">getOutput<pos:position pos:line="16" pos:column="56"/></name></name><argument_list pos:line="16" pos:column="56">()<pos:position pos:line="16" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="16" pos:column="60">found_default<pos:position pos:line="16" pos:column="73"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="75">strlen<pos:position pos:line="16" pos:column="81"/></name> <argument_list pos:line="16" pos:column="82">(<argument><expr><name pos:line="16" pos:column="83">found_default<pos:position pos:line="16" pos:column="96"/></name></expr></argument>)<pos:position pos:line="16" pos:column="97"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="99"/></expr_stmt></block></then></if></elseif></if>
        }<pos:position pos:line="17" pos:column="10"/></block></else></if>
    }<pos:position pos:line="18" pos:column="6"/></block></then> <else pos:line="18" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">s<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <name pos:line="19" pos:column="13">found_default<pos:position pos:line="19" pos:column="26"/></name></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt></block></else></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">s<pos:position pos:line="21" pos:column="10"/></name></expr>)<pos:position pos:line="21" pos:column="11"/></condition><then pos:line="21" pos:column="11">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="22" pos:column="9">ESISegment<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">::<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">ListAppend<pos:position pos:line="22" pos:column="31"/></name></name> <argument_list pos:line="22" pos:column="32">(<argument><expr><call><name><name pos:line="22" pos:column="33">state<pos:position pos:line="22" pos:column="38"/></name><operator pos:line="22" pos:column="38">.<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="39">getOutput<pos:position pos:line="22" pos:column="48"/></name></name><argument_list pos:line="22" pos:column="48">()<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="22" pos:column="52">s<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><call><name pos:line="22" pos:column="55">strlen<pos:position pos:line="22" pos:column="61"/></name> <argument_list pos:line="22" pos:column="62">(<argument><expr><name pos:line="22" pos:column="63">s<pos:position pos:line="22" pos:column="64"/></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="67"/></expr_stmt></block></then></if>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
