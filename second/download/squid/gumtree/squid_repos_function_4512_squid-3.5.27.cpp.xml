<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4512_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">PeerConnector<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">prepareSocket<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">()<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">int<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">fd<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">serverConnection<pos:position pos:line="4" pos:column="36"/></name><argument_list pos:line="4" pos:column="36">()<pos:position pos:line="4" pos:column="38"/></argument_list></call><operator pos:line="4" pos:column="38">-&gt;<pos:position pos:line="4" pos:column="43"/></operator><name pos:line="4" pos:column="40">fd<pos:position pos:line="4" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><call><name><name pos:line="5" pos:column="10">Comm<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">::<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">IsConnOpen<pos:position pos:line="5" pos:column="26"/></name></name><argument_list pos:line="5" pos:column="26">(<argument><expr><name pos:line="5" pos:column="27">serverConn<pos:position pos:line="5" pos:column="37"/></name></expr></argument>)<pos:position pos:line="5" pos:column="38"/></argument_list></call> <operator pos:line="5" pos:column="39">||<pos:position pos:line="5" pos:column="41"/></operator> <name><name pos:line="5" pos:column="42">fd_table<pos:position pos:line="5" pos:column="50"/></name><index pos:line="5" pos:column="50">[<expr><name><name pos:line="5" pos:column="51">serverConn<pos:position pos:line="5" pos:column="61"/></name><operator pos:line="5" pos:column="61">-&gt;<pos:position pos:line="5" pos:column="66"/></operator><name pos:line="5" pos:column="63">fd<pos:position pos:line="5" pos:column="65"/></name></name></expr>]<pos:position pos:line="5" pos:column="66"/></index></name><operator pos:line="5" pos:column="66">.<pos:position pos:line="5" pos:column="67"/></operator><call><name pos:line="5" pos:column="67">closing<pos:position pos:line="5" pos:column="74"/></name><argument_list pos:line="5" pos:column="74">()<pos:position pos:line="5" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="77"/></condition><then pos:line="5" pos:column="77"> <block pos:line="5" pos:column="78">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">connectionClosed<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><literal type="string" pos:line="6" pos:column="26">"Ssl::PeerConnector::prepareSocket"<pos:position pos:line="6" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="63"/></expr_stmt>
        <return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="10" pos:column="5">// watch for external connection closures</comment>
    <typedef pos:line="11" pos:column="5">typedef <type><name><name pos:line="11" pos:column="13">CommCbMemFunT<pos:position pos:line="11" pos:column="26"/></name><argument_list type="generic" pos:line="11" pos:column="26">&lt;<argument><expr><name><name pos:line="11" pos:column="27">Ssl<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">::<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">PeerConnector<pos:position pos:line="11" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="47">CommCloseCbParams<pos:position pos:line="11" pos:column="64"/></name></expr></argument>&gt;<pos:position pos:line="11" pos:column="68"/></argument_list></name></type> <name pos:line="11" pos:column="66">Dialer<pos:position pos:line="11" pos:column="72"/></name>;<pos:position pos:line="11" pos:column="73"/></typedef>
    <expr_stmt><expr><name pos:line="12" pos:column="5">closeHandler<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <call><name pos:line="12" pos:column="20">JobCallback<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><literal type="number" pos:line="12" pos:column="32">9<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="35">5<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="38">Dialer<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">this<pos:position pos:line="12" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="52">Ssl<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">::<pos:position pos:line="12" pos:column="57"/></operator><name pos:line="12" pos:column="57">PeerConnector<pos:position pos:line="12" pos:column="70"/></name><operator pos:line="12" pos:column="70">::<pos:position pos:line="12" pos:column="72"/></operator><name pos:line="12" pos:column="72">commCloseHandler<pos:position pos:line="12" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="90"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">comm_add_close_handler<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">fd<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="32">closeHandler<pos:position pos:line="13" pos:column="44"/></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
    <return pos:line="14" pos:column="5">return <expr><literal type="boolean" pos:line="14" pos:column="12">true<pos:position pos:line="14" pos:column="16"/></literal></expr>;<pos:position pos:line="14" pos:column="17"/></return>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
