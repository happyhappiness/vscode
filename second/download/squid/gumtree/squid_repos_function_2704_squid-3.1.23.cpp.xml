<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2704_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">TunnelStateData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">copy<pos:position pos:line="2" pos:column="22"/></name></name> <parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">size_t<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">len<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="36">comm_err_t<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">errcode<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">int<pos:position pos:line="2" pos:column="59"/></name></type> <name pos:line="2" pos:column="60">xerrno<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="68">Connection<pos:position pos:line="2" pos:column="78"/></name> <modifier pos:line="2" pos:column="79">&amp;<pos:position pos:line="2" pos:column="84"/></modifier></type><name pos:line="2" pos:column="80">from<pos:position pos:line="2" pos:column="84"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="86">Connection<pos:position pos:line="2" pos:column="96"/></name> <modifier pos:line="2" pos:column="97">&amp;<pos:position pos:line="2" pos:column="102"/></modifier></type><name pos:line="2" pos:column="98">to<pos:position pos:line="2" pos:column="100"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="102">IOCB<pos:position pos:line="2" pos:column="106"/></name> <modifier pos:line="2" pos:column="107">*<pos:position pos:line="2" pos:column="108"/></modifier></type><name pos:line="2" pos:column="108">completion<pos:position pos:line="2" pos:column="118"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="119"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* I think this is to prevent free-while-in-a-callback behaviour
     * - RBC 20030229
     */</comment>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">cbdataInternalLock<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name pos:line="7" pos:column="24">this<pos:position pos:line="7" pos:column="28"/></name></expr></argument>)<pos:position pos:line="7" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>	<comment type="block" pos:line="7" pos:column="33">/* ??? should be locked by the caller... */</comment>

    <comment type="block" pos:line="9" pos:column="5">/* Bump the source connection timeout on any activity */</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><call><name pos:line="10" pos:column="10">fd_closed<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><call><name><name pos:line="10" pos:column="20">from<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">.<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">fd<pos:position pos:line="10" pos:column="27"/></name></name><argument_list pos:line="10" pos:column="27">()<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="9">commSetTimeout<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><call><name><name pos:line="11" pos:column="24">from<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">.<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">fd<pos:position pos:line="11" pos:column="31"/></name></name><argument_list pos:line="11" pos:column="31">()<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="35">Config<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">.<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="42">Timeout<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">.<pos:position pos:line="11" pos:column="50"/></operator><name pos:line="11" pos:column="50">read<pos:position pos:line="11" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="56">tunnelTimeout<pos:position pos:line="11" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="71">this<pos:position pos:line="11" pos:column="75"/></name></expr></argument>)<pos:position pos:line="11" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="77"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="13" pos:column="5">/* Bump the dest connection read timeout on any activity */</comment>
    <comment type="block" pos:line="14" pos:column="5">/* see Bug 3659: tunnels can be weird, with very long one-way transfers */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><call><name pos:line="15" pos:column="10">fd_closed<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><call><name><name pos:line="15" pos:column="20">to<pos:position pos:line="15" pos:column="22"/></name><operator pos:line="15" pos:column="22">.<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">fd<pos:position pos:line="15" pos:column="25"/></name></name><argument_list pos:line="15" pos:column="25">()<pos:position pos:line="15" pos:column="27"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">commSetTimeout<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><call><name><name pos:line="16" pos:column="24">to<pos:position pos:line="16" pos:column="26"/></name><operator pos:line="16" pos:column="26">.<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">fd<pos:position pos:line="16" pos:column="29"/></name></name><argument_list pos:line="16" pos:column="29">()<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="33">Config<pos:position pos:line="16" pos:column="39"/></name><operator pos:line="16" pos:column="39">.<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="40">Timeout<pos:position pos:line="16" pos:column="47"/></name><operator pos:line="16" pos:column="47">.<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="48">read<pos:position pos:line="16" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="54">tunnelTimeout<pos:position pos:line="16" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="69">this<pos:position pos:line="16" pos:column="73"/></name></expr></argument>)<pos:position pos:line="16" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="75"/></expr_stmt></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">errcode<pos:position pos:line="18" pos:column="16"/></name></expr>)<pos:position pos:line="18" pos:column="17"/></condition><then pos:line="18" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="19" pos:column="9">from<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">.<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">error<pos:position pos:line="19" pos:column="19"/></name></name> <argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">xerrno<pos:position pos:line="19" pos:column="27"/></name></expr></argument>)<pos:position pos:line="19" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="29"/></expr_stmt></block></then>
    <elseif pos:line="20" pos:column="5">else <if pos:line="20" pos:column="10">if <condition pos:line="20" pos:column="13">(<expr><name pos:line="20" pos:column="14">len<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">==<pos:position pos:line="20" pos:column="20"/></operator> <literal type="number" pos:line="20" pos:column="21">0<pos:position pos:line="20" pos:column="22"/></literal> <operator pos:line="20" pos:column="23">||<pos:position pos:line="20" pos:column="25"/></operator> <call><name pos:line="20" pos:column="26">fd_closed<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><call><name><name pos:line="20" pos:column="36">to<pos:position pos:line="20" pos:column="38"/></name><operator pos:line="20" pos:column="38">.<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="39">fd<pos:position pos:line="20" pos:column="41"/></name></name><argument_list pos:line="20" pos:column="41">()<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="45"/></condition><then pos:line="20" pos:column="45"> <block pos:line="20" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">comm_close<pos:position pos:line="21" pos:column="19"/></name><argument_list pos:line="21" pos:column="19">(<argument><expr><call><name><name pos:line="21" pos:column="20">from<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">.<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="25">fd<pos:position pos:line="21" pos:column="27"/></name></name><argument_list pos:line="21" pos:column="27">()<pos:position pos:line="21" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
        <comment type="block" pos:line="22" pos:column="9">/* Only close the remote end if we've finished queueing data to it */</comment>

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">from<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">.<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">len<pos:position pos:line="24" pos:column="21"/></name></name> <operator pos:line="24" pos:column="22">==<pos:position pos:line="24" pos:column="24"/></operator> <literal type="number" pos:line="24" pos:column="25">0<pos:position pos:line="24" pos:column="26"/></literal> <operator pos:line="24" pos:column="27">&amp;&amp;<pos:position pos:line="24" pos:column="37"/></operator> <operator pos:line="24" pos:column="30">!<pos:position pos:line="24" pos:column="31"/></operator><call><name pos:line="24" pos:column="31">fd_closed<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><call><name><name pos:line="24" pos:column="41">to<pos:position pos:line="24" pos:column="43"/></name><operator pos:line="24" pos:column="43">.<pos:position pos:line="24" pos:column="44"/></operator><name pos:line="24" pos:column="44">fd<pos:position pos:line="24" pos:column="46"/></name></name><argument_list pos:line="24" pos:column="46">()<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr> )<pos:position pos:line="24" pos:column="51"/></condition><then pos:line="24" pos:column="51"> <block pos:line="24" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">comm_close<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><call><name><name pos:line="25" pos:column="24">to<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">.<pos:position pos:line="25" pos:column="27"/></operator><name pos:line="25" pos:column="27">fd<pos:position pos:line="25" pos:column="29"/></name></name><argument_list pos:line="25" pos:column="29">()<pos:position pos:line="25" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if></elseif> <elseif pos:line="27" pos:column="7">else <if pos:line="27" pos:column="12">if <condition pos:line="27" pos:column="15">(<expr><call><name pos:line="27" pos:column="16">cbdataReferenceValid<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name pos:line="27" pos:column="37">this<pos:position pos:line="27" pos:column="41"/></name></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="43"/></condition><then pos:line="27" pos:column="43">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="9">comm_write<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><call><name><name pos:line="28" pos:column="20">to<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">.<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">fd<pos:position pos:line="28" pos:column="25"/></name></name><argument_list pos:line="28" pos:column="25">()<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="29">from<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">.<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="34">buf<pos:position pos:line="28" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="39">len<pos:position pos:line="28" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="44">completion<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="56">this<pos:position pos:line="28" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="62">NULL<pos:position pos:line="28" pos:column="66"/></name></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="68"/></expr_stmt></block></then></if></elseif></if>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">cbdataInternalUnlock<pos:position pos:line="30" pos:column="25"/></name><argument_list pos:line="30" pos:column="25">(<argument><expr><name pos:line="30" pos:column="26">this<pos:position pos:line="30" pos:column="30"/></name></expr></argument>)<pos:position pos:line="30" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>	<comment type="block" pos:line="30" pos:column="33">/* ??? */</comment>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
