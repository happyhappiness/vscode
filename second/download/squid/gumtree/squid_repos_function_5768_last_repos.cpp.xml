<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5768_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bool<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">token_decode<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">size_t<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">decodedLen<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">uint8_t<pos:position pos:line="2" pos:column="41"/></name></type> <name><name pos:line="2" pos:column="42">decoded<pos:position pos:line="2" pos:column="49"/></name><index pos:line="2" pos:column="49">[]<pos:position pos:line="2" pos:column="51"/></index></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <name pos:line="2" pos:column="59">char<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">buf<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="69"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">base64_decode_ctx<pos:position pos:line="4" pos:column="29"/></name></name></type> <name pos:line="4" pos:column="30">ctx<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">base64_decode_init<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><operator pos:line="5" pos:column="24">&amp;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="25">ctx<pos:position pos:line="5" pos:column="28"/></name></expr></argument>)<pos:position pos:line="5" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="30"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name pos:line="6" pos:column="10">base64_decode_update<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><operator pos:line="6" pos:column="31">&amp;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="32">ctx<pos:position pos:line="6" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="37">decodedLen<pos:position pos:line="6" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="49">decoded<pos:position pos:line="6" pos:column="56"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="58">strlen<pos:position pos:line="6" pos:column="64"/></name><argument_list pos:line="6" pos:column="64">(<argument><expr><name pos:line="6" pos:column="65">buf<pos:position pos:line="6" pos:column="68"/></name></expr></argument>)<pos:position pos:line="6" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret" pos:line="6" pos:column="71">reinterpret_cast<argument_list type="generic" pos:line="6" pos:column="87">&lt;<argument><expr><specifier pos:line="6" pos:column="88">const<pos:position pos:line="6" pos:column="93"/></specifier> <name pos:line="6" pos:column="94">uint8_t<pos:position pos:line="6" pos:column="101"/></name><operator pos:line="6" pos:column="101">*<pos:position pos:line="6" pos:column="102"/></operator></expr></argument>&gt;<pos:position pos:line="6" pos:column="106"/></argument_list><argument_list pos:line="6" pos:column="103">(<argument><expr><name pos:line="6" pos:column="104">buf<pos:position pos:line="6" pos:column="107"/></name></expr></argument>)<pos:position pos:line="6" pos:column="108"/></argument_list></cast></expr></argument>)<pos:position pos:line="6" pos:column="109"/></argument_list></call> <operator pos:line="6" pos:column="110">||<pos:position pos:line="6" pos:column="112"/></operator>
            <operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><call><name pos:line="7" pos:column="14">base64_decode_final<pos:position pos:line="7" pos:column="33"/></name><argument_list pos:line="7" pos:column="33">(<argument><expr><operator pos:line="7" pos:column="34">&amp;<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="35">ctx<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="40"/></condition><then pos:line="7" pos:column="40"> <block pos:line="7" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">SEND<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><literal type="string" pos:line="8" pos:column="14">"BH base64 decode failed"<pos:position pos:line="8" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">fprintf<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">stderr<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="25">"ERROR: base64 decoding failed for: '%s'\n"<pos:position pos:line="9" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="70">buf<pos:position pos:line="9" pos:column="73"/></name></expr></argument>)<pos:position pos:line="9" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="75"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <return pos:line="12" pos:column="5">return <expr><literal type="boolean" pos:line="12" pos:column="12">true<pos:position pos:line="12" pos:column="16"/></literal></expr>;<pos:position pos:line="12" pos:column="17"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
