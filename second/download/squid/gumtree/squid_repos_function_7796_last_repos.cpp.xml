<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7796_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">RFCNB_Set_Timeout<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">int<pos:position pos:line="2" pos:column="22"/></name></type> <name pos:line="2" pos:column="23">seconds<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* If we are on a Bezerkeley system, use sigvec, else sigaction */</comment>

<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><name pos:line="6" pos:column="5">ORIGINAL_SAMBA_CODE<pos:position pos:line="6" pos:column="24"/></name></expr></cpp:if>
<cpp:ifndef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifndef<pos:position pos:line="7" pos:column="8"/></cpp:directive> <name pos:line="7" pos:column="9">SA_RESTART<pos:position pos:line="7" pos:column="19"/></name></cpp:ifndef>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">sigvec<pos:position pos:line="8" pos:column="18"/></name></name></type> <name pos:line="8" pos:column="19">invec<pos:position pos:line="8" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="26">outvec<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
<cpp:else pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">else<pos:position pos:line="9" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">sigaction<pos:position pos:line="10" pos:column="21"/></name></name></type> <name pos:line="10" pos:column="22">inact<pos:position pos:line="10" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="29">outact<pos:position pos:line="10" pos:column="35"/></name></decl>;<pos:position pos:line="10" pos:column="36"/></decl_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="13" pos:column="5">RFCNB_Timeout<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <name pos:line="13" pos:column="21">seconds<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">RFCNB_Timeout<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">&gt;<pos:position pos:line="15" pos:column="27"/></operator> <literal type="number" pos:line="15" pos:column="25">0<pos:position pos:line="15" pos:column="26"/></literal></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27"> <block pos:line="15" pos:column="28">{    <comment type="block" pos:line="15" pos:column="33">/* Set up handler to ignore but not restart */</comment>

<cpp:ifndef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifndef<pos:position pos:line="17" pos:column="8"/></cpp:directive> <name pos:line="17" pos:column="9">SA_RESTART<pos:position pos:line="17" pos:column="19"/></name></cpp:ifndef>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">invec<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">.<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">sv_handler<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <operator pos:line="18" pos:column="28">(<pos:position pos:line="18" pos:column="29"/></operator><call><call><name pos:line="18" pos:column="29">void<pos:position pos:line="18" pos:column="33"/></name> <argument_list pos:line="18" pos:column="34">(<argument><expr><operator pos:line="18" pos:column="35">*<pos:position pos:line="18" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="18" pos:column="37"/></argument_list></call><argument_list pos:line="18" pos:column="37">()<pos:position pos:line="18" pos:column="39"/></argument_list></call><operator pos:line="18" pos:column="39">)<pos:position pos:line="18" pos:column="40"/></operator> <name pos:line="18" pos:column="41">rfcnb_alarm<pos:position pos:line="18" pos:column="52"/></name></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">invec<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">sv_mask<pos:position pos:line="19" pos:column="22"/></name></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <literal type="number" pos:line="19" pos:column="25">0<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">invec<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">.<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">sv_flags<pos:position pos:line="20" pos:column="23"/></name></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <name pos:line="20" pos:column="26">SV_INTERRUPT<pos:position pos:line="20" pos:column="38"/></name></expr>;<pos:position pos:line="20" pos:column="39"/></expr_stmt>

        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">sigvec<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">SIGALRM<pos:position pos:line="22" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="29">&amp;<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="30">invec<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="38">outvec<pos:position pos:line="22" pos:column="44"/></name></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call> <operator pos:line="22" pos:column="46">&lt;<pos:position pos:line="22" pos:column="50"/></operator> <literal type="number" pos:line="22" pos:column="48">0<pos:position pos:line="22" pos:column="49"/></literal></expr>)<pos:position pos:line="22" pos:column="50"/></condition><then pos:line="22" pos:column="50">
            <block type="pseudo"><return pos:line="23" pos:column="13">return <expr><operator pos:line="23" pos:column="20">(<pos:position pos:line="23" pos:column="21"/></operator><operator pos:line="23" pos:column="21">-<pos:position pos:line="23" pos:column="22"/></operator><literal type="number" pos:line="23" pos:column="22">1<pos:position pos:line="23" pos:column="23"/></literal><operator pos:line="23" pos:column="23">)<pos:position pos:line="23" pos:column="24"/></operator></expr>;<pos:position pos:line="23" pos:column="25"/></return></block></then></if>
<cpp:else pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">else<pos:position pos:line="24" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="24" pos:column="7">/* !SA_RESTART */</comment>
        <expr_stmt><expr><name><name pos:line="25" pos:column="9">inact<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">.<pos:position pos:line="25" pos:column="15"/></operator><name pos:line="25" pos:column="15">sa_handler<pos:position pos:line="25" pos:column="25"/></name></name> <operator pos:line="25" pos:column="26">=<pos:position pos:line="25" pos:column="27"/></operator> <operator pos:line="25" pos:column="28">(<pos:position pos:line="25" pos:column="29"/></operator><call><call><name pos:line="25" pos:column="29">void<pos:position pos:line="25" pos:column="33"/></name> <argument_list pos:line="25" pos:column="34">(<argument><expr><operator pos:line="25" pos:column="35">*<pos:position pos:line="25" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call><argument_list pos:line="25" pos:column="37">()<pos:position pos:line="25" pos:column="39"/></argument_list></call><operator pos:line="25" pos:column="39">)<pos:position pos:line="25" pos:column="40"/></operator> <name pos:line="25" pos:column="41">rfcnb_alarm<pos:position pos:line="25" pos:column="52"/></name></expr>;<pos:position pos:line="25" pos:column="53"/></expr_stmt>
<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive> <name pos:line="26" pos:column="8">Solaris<pos:position pos:line="26" pos:column="15"/></name></cpp:ifdef>
        <comment type="block" pos:line="27" pos:column="9">/* Solaris seems to have an array of vectors ... */</comment>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">inact<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">.<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">sa_mask<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">.<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="23">__sigbits<pos:position pos:line="28" pos:column="32"/></name><index pos:line="28" pos:column="32">[<expr><literal type="number" pos:line="28" pos:column="33">0<pos:position pos:line="28" pos:column="34"/></literal></expr>]<pos:position pos:line="28" pos:column="35"/></index></name> <operator pos:line="28" pos:column="36">=<pos:position pos:line="28" pos:column="37"/></operator> <literal type="number" pos:line="28" pos:column="38">0<pos:position pos:line="28" pos:column="39"/></literal></expr>;<pos:position pos:line="28" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">inact<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">.<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">sa_mask<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">.<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">__sigbits<pos:position pos:line="29" pos:column="32"/></name><index pos:line="29" pos:column="32">[<expr><literal type="number" pos:line="29" pos:column="33">1<pos:position pos:line="29" pos:column="34"/></literal></expr>]<pos:position pos:line="29" pos:column="35"/></index></name> <operator pos:line="29" pos:column="36">=<pos:position pos:line="29" pos:column="37"/></operator> <literal type="number" pos:line="29" pos:column="38">0<pos:position pos:line="29" pos:column="39"/></literal></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">inact<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">.<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="15">sa_mask<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">.<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">__sigbits<pos:position pos:line="30" pos:column="32"/></name><index pos:line="30" pos:column="32">[<expr><literal type="number" pos:line="30" pos:column="33">2<pos:position pos:line="30" pos:column="34"/></literal></expr>]<pos:position pos:line="30" pos:column="35"/></index></name> <operator pos:line="30" pos:column="36">=<pos:position pos:line="30" pos:column="37"/></operator> <literal type="number" pos:line="30" pos:column="38">0<pos:position pos:line="30" pos:column="39"/></literal></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="31" pos:column="9">inact<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">.<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">sa_mask<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">.<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="23">__sigbits<pos:position pos:line="31" pos:column="32"/></name><index pos:line="31" pos:column="32">[<expr><literal type="number" pos:line="31" pos:column="33">3<pos:position pos:line="31" pos:column="34"/></literal></expr>]<pos:position pos:line="31" pos:column="35"/></index></name> <operator pos:line="31" pos:column="36">=<pos:position pos:line="31" pos:column="37"/></operator> <literal type="number" pos:line="31" pos:column="38">0<pos:position pos:line="31" pos:column="39"/></literal></expr>;<pos:position pos:line="31" pos:column="40"/></expr_stmt>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="32" pos:column="7">/* !Solaris */</comment>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">inact<pos:position pos:line="33" pos:column="14"/></name><operator pos:line="33" pos:column="14">.<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="15">sa_mask<pos:position pos:line="33" pos:column="22"/></name></name> <operator pos:line="33" pos:column="23">=<pos:position pos:line="33" pos:column="24"/></operator> <operator pos:line="33" pos:column="25">(<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="26">sigset_t<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">)<pos:position pos:line="33" pos:column="35"/></operator> <literal type="number" pos:line="33" pos:column="36">0<pos:position pos:line="33" pos:column="37"/></literal></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="34" pos:column="8">/* Solaris */</comment>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">inact<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">.<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">sa_flags<pos:position pos:line="35" pos:column="23"/></name></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <literal type="number" pos:line="35" pos:column="26">0<pos:position pos:line="35" pos:column="27"/></literal></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt>     <comment type="block" pos:line="35" pos:column="33">/* Don't restart */</comment>

        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">sigaction<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">SIGALRM<pos:position pos:line="37" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="32">&amp;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="33">inact<pos:position pos:line="37" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="40">&amp;<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="41">outact<pos:position pos:line="37" pos:column="47"/></name></expr></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></call> <operator pos:line="37" pos:column="49">&lt;<pos:position pos:line="37" pos:column="53"/></operator> <literal type="number" pos:line="37" pos:column="51">0<pos:position pos:line="37" pos:column="52"/></literal></expr>)<pos:position pos:line="37" pos:column="53"/></condition><then pos:line="37" pos:column="53">
            <block type="pseudo"><return pos:line="38" pos:column="13">return <expr><operator pos:line="38" pos:column="20">(<pos:position pos:line="38" pos:column="21"/></operator><operator pos:line="38" pos:column="21">-<pos:position pos:line="38" pos:column="22"/></operator><literal type="number" pos:line="38" pos:column="22">1<pos:position pos:line="38" pos:column="23"/></literal><operator pos:line="38" pos:column="23">)<pos:position pos:line="38" pos:column="24"/></operator></expr>;<pos:position pos:line="38" pos:column="25"/></return></block></then></if>

<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="40" pos:column="8">/* !SA_RESTART */</comment>

    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
<cpp:else pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">else<pos:position pos:line="43" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="43" pos:column="7">/* !ORIGINAL_SAMBA_CODE ADAPTED SQUID CODE */</comment>
<cpp:if pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">if<pos:position pos:line="44" pos:column="4"/></cpp:directive> <expr><name pos:line="44" pos:column="5">HAVE_SIGACTION<pos:position pos:line="44" pos:column="19"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="45" pos:column="5">struct<pos:position pos:line="45" pos:column="11"/></name> <name pos:line="45" pos:column="12">sigaction<pos:position pos:line="45" pos:column="21"/></name></name></type> <name pos:line="45" pos:column="22">inact<pos:position pos:line="45" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="45" pos:column="29">outact<pos:position pos:line="45" pos:column="35"/></name></decl>;<pos:position pos:line="45" pos:column="36"/></decl_stmt>
<cpp:else pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">else<pos:position pos:line="46" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name pos:line="47" pos:column="5">struct<pos:position pos:line="47" pos:column="11"/></name> <name pos:line="47" pos:column="12">sigvec<pos:position pos:line="47" pos:column="18"/></name></name></type> <name pos:line="47" pos:column="19">invec<pos:position pos:line="47" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="47" pos:column="26">outvec<pos:position pos:line="47" pos:column="32"/></name></decl>;<pos:position pos:line="47" pos:column="33"/></decl_stmt>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="50" pos:column="5">RFCNB_Timeout<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <name pos:line="50" pos:column="21">seconds<pos:position pos:line="50" pos:column="28"/></name></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>

    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">RFCNB_Timeout<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">&gt;<pos:position pos:line="52" pos:column="27"/></operator> <literal type="number" pos:line="52" pos:column="25">0<pos:position pos:line="52" pos:column="26"/></literal></expr>)<pos:position pos:line="52" pos:column="27"/></condition><then pos:line="52" pos:column="27"> <block pos:line="52" pos:column="28">{    <comment type="block" pos:line="52" pos:column="33">/* Set up handler to ignore but not restart */</comment>

<cpp:if pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">if<pos:position pos:line="54" pos:column="4"/></cpp:directive> <expr><name pos:line="54" pos:column="5">HAVE_SIGACTION<pos:position pos:line="54" pos:column="19"/></name></expr></cpp:if>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">inact<pos:position pos:line="55" pos:column="14"/></name><operator pos:line="55" pos:column="14">.<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="15">sa_handler<pos:position pos:line="55" pos:column="25"/></name></name> <operator pos:line="55" pos:column="26">=<pos:position pos:line="55" pos:column="27"/></operator> <operator pos:line="55" pos:column="28">(<pos:position pos:line="55" pos:column="29"/></operator><call><call><name pos:line="55" pos:column="29">void<pos:position pos:line="55" pos:column="33"/></name> <argument_list pos:line="55" pos:column="34">(<argument><expr><operator pos:line="55" pos:column="35">*<pos:position pos:line="55" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="55" pos:column="37"/></argument_list></call><argument_list pos:line="55" pos:column="37">()<pos:position pos:line="55" pos:column="39"/></argument_list></call><operator pos:line="55" pos:column="39">)<pos:position pos:line="55" pos:column="40"/></operator> <name pos:line="55" pos:column="41">rfcnb_alarm<pos:position pos:line="55" pos:column="52"/></name></expr>;<pos:position pos:line="55" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">sigemptyset<pos:position pos:line="56" pos:column="20"/></name><argument_list pos:line="56" pos:column="20">(<argument><expr><operator pos:line="56" pos:column="21">&amp;<pos:position pos:line="56" pos:column="26"/></operator><name><name pos:line="56" pos:column="22">inact<pos:position pos:line="56" pos:column="27"/></name><operator pos:line="56" pos:column="27">.<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="28">sa_mask<pos:position pos:line="56" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="57" pos:column="9">inact<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">.<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="15">sa_flags<pos:position pos:line="57" pos:column="23"/></name></name> <operator pos:line="57" pos:column="24">=<pos:position pos:line="57" pos:column="25"/></operator> <literal type="number" pos:line="57" pos:column="26">0<pos:position pos:line="57" pos:column="27"/></literal></expr>;<pos:position pos:line="57" pos:column="28"/></expr_stmt>     <comment type="block" pos:line="57" pos:column="33">/* Don't restart */</comment>

        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><call><name pos:line="59" pos:column="13">sigaction<pos:position pos:line="59" pos:column="22"/></name><argument_list pos:line="59" pos:column="22">(<argument><expr><name pos:line="59" pos:column="23">SIGALRM<pos:position pos:line="59" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="32">&amp;<pos:position pos:line="59" pos:column="37"/></operator><name pos:line="59" pos:column="33">inact<pos:position pos:line="59" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="40">&amp;<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="41">outact<pos:position pos:line="59" pos:column="47"/></name></expr></argument>)<pos:position pos:line="59" pos:column="48"/></argument_list></call> <operator pos:line="59" pos:column="49">&lt;<pos:position pos:line="59" pos:column="53"/></operator> <literal type="number" pos:line="59" pos:column="51">0<pos:position pos:line="59" pos:column="52"/></literal></expr>)<pos:position pos:line="59" pos:column="53"/></condition><then pos:line="59" pos:column="53">
            <block type="pseudo"><return pos:line="60" pos:column="13">return <expr><operator pos:line="60" pos:column="20">(<pos:position pos:line="60" pos:column="21"/></operator><operator pos:line="60" pos:column="21">-<pos:position pos:line="60" pos:column="22"/></operator><literal type="number" pos:line="60" pos:column="22">1<pos:position pos:line="60" pos:column="23"/></literal><operator pos:line="60" pos:column="23">)<pos:position pos:line="60" pos:column="24"/></operator></expr>;<pos:position pos:line="60" pos:column="25"/></return></block></then></if>
<cpp:else pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">else<pos:position pos:line="61" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="61" pos:column="7">/* !HAVE_SIGACTION */</comment>
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">invec<pos:position pos:line="62" pos:column="14"/></name><operator pos:line="62" pos:column="14">.<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="15">sv_handler<pos:position pos:line="62" pos:column="25"/></name></name> <operator pos:line="62" pos:column="26">=<pos:position pos:line="62" pos:column="27"/></operator> <operator pos:line="62" pos:column="28">(<pos:position pos:line="62" pos:column="29"/></operator><call><call><name pos:line="62" pos:column="29">void<pos:position pos:line="62" pos:column="33"/></name> <argument_list pos:line="62" pos:column="34">(<argument><expr><operator pos:line="62" pos:column="35">*<pos:position pos:line="62" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call><argument_list pos:line="62" pos:column="37">()<pos:position pos:line="62" pos:column="39"/></argument_list></call><operator pos:line="62" pos:column="39">)<pos:position pos:line="62" pos:column="40"/></operator> <name pos:line="62" pos:column="41">rfcnb_alarm<pos:position pos:line="62" pos:column="52"/></name></expr>;<pos:position pos:line="62" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="63" pos:column="9">invec<pos:position pos:line="63" pos:column="14"/></name><operator pos:line="63" pos:column="14">.<pos:position pos:line="63" pos:column="15"/></operator><name pos:line="63" pos:column="15">sv_mask<pos:position pos:line="63" pos:column="22"/></name></name> <operator pos:line="63" pos:column="23">=<pos:position pos:line="63" pos:column="24"/></operator> <literal type="number" pos:line="63" pos:column="25">0<pos:position pos:line="63" pos:column="26"/></literal></expr>;<pos:position pos:line="63" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="64" pos:column="9">invec<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">.<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="15">sv_flags<pos:position pos:line="64" pos:column="23"/></name></name> <operator pos:line="64" pos:column="24">=<pos:position pos:line="64" pos:column="25"/></operator> <name pos:line="64" pos:column="26">SV_INTERRUPT<pos:position pos:line="64" pos:column="38"/></name></expr>;<pos:position pos:line="64" pos:column="39"/></expr_stmt>

        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><call><name pos:line="66" pos:column="13">sigvec<pos:position pos:line="66" pos:column="19"/></name><argument_list pos:line="66" pos:column="19">(<argument><expr><name pos:line="66" pos:column="20">SIGALRM<pos:position pos:line="66" pos:column="27"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="29">&amp;<pos:position pos:line="66" pos:column="34"/></operator><name pos:line="66" pos:column="30">invec<pos:position pos:line="66" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="37">&amp;<pos:position pos:line="66" pos:column="42"/></operator><name pos:line="66" pos:column="38">outvec<pos:position pos:line="66" pos:column="44"/></name></expr></argument>)<pos:position pos:line="66" pos:column="45"/></argument_list></call> <operator pos:line="66" pos:column="46">&lt;<pos:position pos:line="66" pos:column="50"/></operator> <literal type="number" pos:line="66" pos:column="48">0<pos:position pos:line="66" pos:column="49"/></literal></expr>)<pos:position pos:line="66" pos:column="50"/></condition><then pos:line="66" pos:column="50">
            <block type="pseudo"><return pos:line="67" pos:column="13">return <expr><operator pos:line="67" pos:column="20">(<pos:position pos:line="67" pos:column="21"/></operator><operator pos:line="67" pos:column="21">-<pos:position pos:line="67" pos:column="22"/></operator><literal type="number" pos:line="67" pos:column="22">1<pos:position pos:line="67" pos:column="23"/></literal><operator pos:line="67" pos:column="23">)<pos:position pos:line="67" pos:column="24"/></operator></expr>;<pos:position pos:line="67" pos:column="25"/></return></block></then></if>
<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="68" pos:column="8">/* !HAVE_SIGACTION */</comment>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>
<cpp:endif pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">endif<pos:position pos:line="70" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="70" pos:column="8">/* !ORIGINAL_SAMBA_CODE ADAPTED SQUID CODE */</comment>
    <return pos:line="71" pos:column="5">return <expr><operator pos:line="71" pos:column="12">(<pos:position pos:line="71" pos:column="13"/></operator><literal type="number" pos:line="71" pos:column="13">0<pos:position pos:line="71" pos:column="14"/></literal><operator pos:line="71" pos:column="14">)<pos:position pos:line="71" pos:column="15"/></operator></expr>;<pos:position pos:line="71" pos:column="16"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
