<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6019_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESIContext<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">start<pos:position pos:line="2" pos:column="18"/></name></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><specifier pos:line="2" pos:column="19">const<pos:position pos:line="2" pos:column="24"/></specifier> <name pos:line="2" pos:column="25">char<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">el<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier><modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">attr<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">size_t<pos:position pos:line="2" pos:column="60"/></name></type> <name pos:line="2" pos:column="61">attrCount<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">int<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">ellen<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><call><name pos:line="5" pos:column="26">strlen<pos:position pos:line="5" pos:column="32"/></name> <argument_list pos:line="5" pos:column="33">(<argument><expr><name pos:line="5" pos:column="34">el<pos:position pos:line="5" pos:column="36"/></name></expr></argument>)<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">localbuf<pos:position pos:line="6" pos:column="18"/></name> <index pos:line="6" pos:column="19">[<expr><name pos:line="6" pos:column="20">HTTP_REQBUF_SZ<pos:position pos:line="6" pos:column="34"/></name></expr>]<pos:position pos:line="6" pos:column="35"/></index></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">ESIElement<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">::<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">Pointer<pos:position pos:line="7" pos:column="24"/></name></name></type> <name pos:line="7" pos:column="25">element<pos:position pos:line="7" pos:column="32"/></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">specifiedattcount<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name pos:line="8" pos:column="29">attrCount<pos:position pos:line="8" pos:column="38"/></name> <operator pos:line="8" pos:column="39">*<pos:position pos:line="8" pos:column="40"/></operator> <literal type="number" pos:line="8" pos:column="41">2<pos:position pos:line="8" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">position<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name> <argument_list pos:line="10" pos:column="12">(<argument><expr><name pos:line="10" pos:column="13">ellen<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">&lt;<pos:position pos:line="10" pos:column="23"/></operator> <sizeof pos:line="10" pos:column="21">sizeof <argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">localbuf<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt> <comment type="block" pos:line="10" pos:column="41">/* prevent unexpected overruns. */</comment>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">86<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="16">5<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="19">"ESIContext::Start: element '"<pos:position pos:line="12" pos:column="49"/></literal> <operator pos:line="12" pos:column="50">&lt;&lt;<pos:position pos:line="12" pos:column="58"/></operator> <name pos:line="12" pos:column="53">el<pos:position pos:line="12" pos:column="55"/></name> <operator pos:line="12" pos:column="56">&lt;&lt;<pos:position pos:line="12" pos:column="64"/></operator> <literal type="string" pos:line="12" pos:column="59">"' with "<pos:position pos:line="12" pos:column="68"/></literal> <operator pos:line="12" pos:column="69">&lt;&lt;<pos:position pos:line="12" pos:column="77"/></operator> <name pos:line="12" pos:column="72">specifiedattcount<pos:position pos:line="12" pos:column="89"/></name> <operator pos:line="12" pos:column="90">&lt;&lt;<pos:position pos:line="12" pos:column="98"/></operator> <literal type="string" pos:line="12" pos:column="93">" tags"<pos:position pos:line="12" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="102"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">failed<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">()<pos:position pos:line="14" pos:column="17"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18">
        <comment type="block" pos:line="15" pos:column="9">/* waiting for expat to finish the buffer we gave it */</comment>
        <block type="pseudo"><return pos:line="16" pos:column="9">return;<pos:position pos:line="16" pos:column="16"/></return></block></then></if>

    <switch pos:line="18" pos:column="5">switch <condition pos:line="18" pos:column="12">(<expr><call><name><name pos:line="18" pos:column="13">ESIElement<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">::<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">IdentifyElement<pos:position pos:line="18" pos:column="40"/></name></name> <argument_list pos:line="18" pos:column="41">(<argument><expr><name pos:line="18" pos:column="42">el<pos:position pos:line="18" pos:column="44"/></name></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="46"/></condition> <block pos:line="18" pos:column="47">{

    <case pos:line="20" pos:column="5">case <expr><name><name pos:line="20" pos:column="10">ESIElement<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">::<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="22">ESI_ELEMENT_NONE<pos:position pos:line="20" pos:column="38"/></name></name></expr>:<pos:position pos:line="20" pos:column="39"/></case>
        <comment type="block" pos:line="21" pos:column="9">/* Spit out elements we aren't interested in */</comment>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">localbuf<pos:position pos:line="22" pos:column="17"/></name><index pos:line="22" pos:column="17">[<expr><literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal></expr>]<pos:position pos:line="22" pos:column="20"/></index></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <literal type="char" pos:line="22" pos:column="23">'&lt;'<pos:position pos:line="22" pos:column="29"/></literal></expr>;<pos:position pos:line="22" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">localbuf<pos:position pos:line="23" pos:column="17"/></name><index pos:line="23" pos:column="17">[<expr><literal type="number" pos:line="23" pos:column="18">1<pos:position pos:line="23" pos:column="19"/></literal></expr>]<pos:position pos:line="23" pos:column="20"/></index></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <literal type="char" pos:line="23" pos:column="23">'\0'<pos:position pos:line="23" pos:column="27"/></literal></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">assert<pos:position pos:line="24" pos:column="15"/></name> <argument_list pos:line="24" pos:column="16">(<argument><expr><call><name pos:line="24" pos:column="17">xstrncpy<pos:position pos:line="24" pos:column="25"/></name> <argument_list pos:line="24" pos:column="26">(<argument><expr><operator pos:line="24" pos:column="27">&amp;<pos:position pos:line="24" pos:column="32"/></operator><name><name pos:line="24" pos:column="28">localbuf<pos:position pos:line="24" pos:column="36"/></name><index pos:line="24" pos:column="36">[<expr><literal type="number" pos:line="24" pos:column="37">1<pos:position pos:line="24" pos:column="38"/></literal></expr>]<pos:position pos:line="24" pos:column="39"/></index></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">el<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="45">sizeof<argument_list pos:line="24" pos:column="51">(<argument><expr><name pos:line="24" pos:column="52">localbuf<pos:position pos:line="24" pos:column="60"/></name></expr></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></sizeof> <operator pos:line="24" pos:column="62">-<pos:position pos:line="24" pos:column="63"/></operator> <literal type="number" pos:line="24" pos:column="64">2<pos:position pos:line="24" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="66"/></argument_list></call></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">position<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">localbuf<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">+<pos:position pos:line="25" pos:column="30"/></operator> <call><name pos:line="25" pos:column="31">strlen<pos:position pos:line="25" pos:column="37"/></name> <argument_list pos:line="25" pos:column="38">(<argument><expr><name pos:line="25" pos:column="39">localbuf<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>

        <for pos:line="27" pos:column="9">for <control pos:line="27" pos:column="13">(<init><expr><name pos:line="27" pos:column="14">i<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <literal type="number" pos:line="27" pos:column="18">0<pos:position pos:line="27" pos:column="19"/></literal></expr>;<pos:position pos:line="27" pos:column="20"/></init> <condition><expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">&lt;<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="25">specifiedattcount<pos:position pos:line="27" pos:column="42"/></name> <operator pos:line="27" pos:column="43">&amp;&amp;<pos:position pos:line="27" pos:column="53"/></operator> <name><name pos:line="27" pos:column="46">attr<pos:position pos:line="27" pos:column="50"/></name><index pos:line="27" pos:column="50">[<expr><name pos:line="27" pos:column="51">i<pos:position pos:line="27" pos:column="52"/></name></expr>]<pos:position pos:line="27" pos:column="53"/></index></name></expr>;<pos:position pos:line="27" pos:column="54"/></condition> <incr><expr><name pos:line="27" pos:column="55">i<pos:position pos:line="27" pos:column="56"/></name> <operator pos:line="27" pos:column="57">+=<pos:position pos:line="27" pos:column="59"/></operator> <literal type="number" pos:line="27" pos:column="60">2<pos:position pos:line="27" pos:column="61"/></literal></expr></incr>)<pos:position pos:line="27" pos:column="62"/></control> <block pos:line="27" pos:column="63">{
            <expr_stmt><expr><operator pos:line="28" pos:column="13">*<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">position<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <literal type="char" pos:line="28" pos:column="25">' '<pos:position pos:line="28" pos:column="28"/></literal></expr>;<pos:position pos:line="28" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="29" pos:column="13">++<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">position<pos:position pos:line="29" pos:column="23"/></name></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>
            <comment type="block" pos:line="30" pos:column="13">/* TODO: handle thisNode gracefully */</comment>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">assert<pos:position pos:line="31" pos:column="19"/></name> <argument_list pos:line="31" pos:column="20">(<argument><expr><call><name pos:line="31" pos:column="21">xstrncpy<pos:position pos:line="31" pos:column="29"/></name> <argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">position<pos:position pos:line="31" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="41">attr<pos:position pos:line="31" pos:column="45"/></name><index pos:line="31" pos:column="45">[<expr><name pos:line="31" pos:column="46">i<pos:position pos:line="31" pos:column="47"/></name></expr>]<pos:position pos:line="31" pos:column="48"/></index></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="50">sizeof<argument_list pos:line="31" pos:column="56">(<argument><expr><name pos:line="31" pos:column="57">localbuf<pos:position pos:line="31" pos:column="65"/></name></expr></argument>)<pos:position pos:line="31" pos:column="66"/></argument_list></sizeof> <operator pos:line="31" pos:column="67">+<pos:position pos:line="31" pos:column="68"/></operator> <operator pos:line="31" pos:column="69">(<pos:position pos:line="31" pos:column="70"/></operator><name pos:line="31" pos:column="70">position<pos:position pos:line="31" pos:column="78"/></name> <operator pos:line="31" pos:column="79">-<pos:position pos:line="31" pos:column="80"/></operator> <name pos:line="31" pos:column="81">localbuf<pos:position pos:line="31" pos:column="89"/></name><operator pos:line="31" pos:column="89">)<pos:position pos:line="31" pos:column="90"/></operator></expr></argument>)<pos:position pos:line="31" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="31" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="93"/></expr_stmt>
            <expr_stmt><expr><name pos:line="32" pos:column="13">position<pos:position pos:line="32" pos:column="21"/></name> <operator pos:line="32" pos:column="22">+=<pos:position pos:line="32" pos:column="24"/></operator> <call><name pos:line="32" pos:column="25">strlen<pos:position pos:line="32" pos:column="31"/></name> <argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">position<pos:position pos:line="32" pos:column="41"/></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="33" pos:column="13">*<pos:position pos:line="33" pos:column="14"/></operator><name pos:line="33" pos:column="14">position<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">=<pos:position pos:line="33" pos:column="24"/></operator> <literal type="char" pos:line="33" pos:column="25">'='<pos:position pos:line="33" pos:column="28"/></literal></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="34" pos:column="13">++<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">position<pos:position pos:line="34" pos:column="23"/></name></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="35" pos:column="13">*<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">position<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">=<pos:position pos:line="35" pos:column="24"/></operator> <literal type="char" pos:line="35" pos:column="25">'\"'<pos:position pos:line="35" pos:column="29"/></literal></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="36" pos:column="13">++<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">position<pos:position pos:line="36" pos:column="23"/></name></expr>;<pos:position pos:line="36" pos:column="24"/></expr_stmt>
            <decl_stmt><decl><type><specifier pos:line="37" pos:column="13">const<pos:position pos:line="37" pos:column="18"/></specifier> <name pos:line="37" pos:column="19">char<pos:position pos:line="37" pos:column="23"/></name> <modifier pos:line="37" pos:column="24">*<pos:position pos:line="37" pos:column="25"/></modifier></type><name pos:line="37" pos:column="25">chPtr<pos:position pos:line="37" pos:column="30"/></name> <init pos:line="37" pos:column="31">= <expr><name><name pos:line="37" pos:column="33">attr<pos:position pos:line="37" pos:column="37"/></name><index pos:line="37" pos:column="37">[<expr><name pos:line="37" pos:column="38">i<pos:position pos:line="37" pos:column="39"/></name> <operator pos:line="37" pos:column="40">+<pos:position pos:line="37" pos:column="41"/></operator> <literal type="number" pos:line="37" pos:column="42">1<pos:position pos:line="37" pos:column="43"/></literal></expr>]<pos:position pos:line="37" pos:column="44"/></index></name></expr></init></decl>;<pos:position pos:line="37" pos:column="45"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">char<pos:position pos:line="38" pos:column="17"/></name></type> <name pos:line="38" pos:column="18">ch<pos:position pos:line="38" pos:column="20"/></name></decl>;<pos:position pos:line="38" pos:column="21"/></decl_stmt>
            <while pos:line="39" pos:column="13">while <condition pos:line="39" pos:column="19">(<expr><operator pos:line="39" pos:column="20">(<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="21">ch<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <operator pos:line="39" pos:column="26">*<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="27">chPtr<pos:position pos:line="39" pos:column="32"/></name><operator pos:line="39" pos:column="32">++<pos:position pos:line="39" pos:column="34"/></operator><operator pos:line="39" pos:column="34">)<pos:position pos:line="39" pos:column="35"/></operator> <operator pos:line="39" pos:column="36">!=<pos:position pos:line="39" pos:column="38"/></operator> <literal type="char" pos:line="39" pos:column="39">'\0'<pos:position pos:line="39" pos:column="43"/></literal></expr>)<pos:position pos:line="39" pos:column="44"/></condition> <block pos:line="39" pos:column="45">{
                <if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">ch<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">==<pos:position pos:line="40" pos:column="26"/></operator> <literal type="char" pos:line="40" pos:column="27">'\"'<pos:position pos:line="40" pos:column="31"/></literal></expr>)<pos:position pos:line="40" pos:column="32"/></condition><then pos:line="40" pos:column="32"> <block pos:line="40" pos:column="33">{
                    <expr_stmt><expr><call><name pos:line="41" pos:column="21">assert<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">( <argument><expr><call><name pos:line="41" pos:column="29">xstrncpy<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><name pos:line="41" pos:column="38">position<pos:position pos:line="41" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="48">"&amp;quot;"<pos:position pos:line="41" pos:column="60"/></literal></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="58">sizeof<argument_list pos:line="41" pos:column="64">(<argument><expr><name pos:line="41" pos:column="65">localbuf<pos:position pos:line="41" pos:column="73"/></name></expr></argument>)<pos:position pos:line="41" pos:column="74"/></argument_list></sizeof> <operator pos:line="41" pos:column="75">+<pos:position pos:line="41" pos:column="76"/></operator> <operator pos:line="41" pos:column="77">(<pos:position pos:line="41" pos:column="78"/></operator><name pos:line="41" pos:column="78">position<pos:position pos:line="41" pos:column="86"/></name><operator pos:line="41" pos:column="86">-<pos:position pos:line="41" pos:column="87"/></operator><name pos:line="41" pos:column="87">localbuf<pos:position pos:line="41" pos:column="95"/></name><operator pos:line="41" pos:column="95">)<pos:position pos:line="41" pos:column="96"/></operator></expr></argument>)<pos:position pos:line="41" pos:column="97"/></argument_list></call></expr></argument> )<pos:position pos:line="41" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="100"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="42" pos:column="21">position<pos:position pos:line="42" pos:column="29"/></name> <operator pos:line="42" pos:column="30">+=<pos:position pos:line="42" pos:column="32"/></operator> <literal type="number" pos:line="42" pos:column="33">6<pos:position pos:line="42" pos:column="34"/></literal></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
                }<pos:position pos:line="43" pos:column="18"/></block></then> <else pos:line="43" pos:column="19">else <block pos:line="43" pos:column="24">{
                    <expr_stmt><expr><operator pos:line="44" pos:column="21">*<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="22">position<pos:position pos:line="44" pos:column="30"/></name> <operator pos:line="44" pos:column="31">=<pos:position pos:line="44" pos:column="32"/></operator> <name pos:line="44" pos:column="33">ch<pos:position pos:line="44" pos:column="35"/></name></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
                    <expr_stmt><expr><operator pos:line="45" pos:column="21">++<pos:position pos:line="45" pos:column="23"/></operator><name pos:line="45" pos:column="23">position<pos:position pos:line="45" pos:column="31"/></name></expr>;<pos:position pos:line="45" pos:column="32"/></expr_stmt>
                }<pos:position pos:line="46" pos:column="18"/></block></else></if>
            }<pos:position pos:line="47" pos:column="14"/></block></while>
            <expr_stmt><expr><name pos:line="48" pos:column="13">position<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">+=<pos:position pos:line="48" pos:column="24"/></operator> <call><name pos:line="48" pos:column="25">strlen<pos:position pos:line="48" pos:column="31"/></name> <argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">position<pos:position pos:line="48" pos:column="41"/></name></expr></argument>)<pos:position pos:line="48" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="49" pos:column="13">*<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">position<pos:position pos:line="49" pos:column="22"/></name> <operator pos:line="49" pos:column="23">=<pos:position pos:line="49" pos:column="24"/></operator> <literal type="char" pos:line="49" pos:column="25">'\"'<pos:position pos:line="49" pos:column="29"/></literal></expr>;<pos:position pos:line="49" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="50" pos:column="13">++<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="15">position<pos:position pos:line="50" pos:column="23"/></name></expr>;<pos:position pos:line="50" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="51" pos:column="10"/></block></for>

        <expr_stmt><expr><operator pos:line="53" pos:column="9">*<pos:position pos:line="53" pos:column="10"/></operator><name pos:line="53" pos:column="10">position<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <literal type="char" pos:line="53" pos:column="21">'&gt;'<pos:position pos:line="53" pos:column="27"/></literal></expr>;<pos:position pos:line="53" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="54" pos:column="9">++<pos:position pos:line="54" pos:column="11"/></operator><name pos:line="54" pos:column="11">position<pos:position pos:line="54" pos:column="19"/></name></expr>;<pos:position pos:line="54" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="55" pos:column="9">*<pos:position pos:line="55" pos:column="10"/></operator><name pos:line="55" pos:column="10">position<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator> <literal type="char" pos:line="55" pos:column="21">'\0'<pos:position pos:line="55" pos:column="25"/></literal></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="57" pos:column="9">addLiteral<pos:position pos:line="57" pos:column="19"/></name> <argument_list pos:line="57" pos:column="20">(<argument><expr><name pos:line="57" pos:column="21">localbuf<pos:position pos:line="57" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="31">position<pos:position pos:line="57" pos:column="39"/></name> <operator pos:line="57" pos:column="40">-<pos:position pos:line="57" pos:column="41"/></operator> <name pos:line="57" pos:column="42">localbuf<pos:position pos:line="57" pos:column="50"/></name></expr></argument>)<pos:position pos:line="57" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">debugs<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><literal type="number" pos:line="58" pos:column="16">86<pos:position pos:line="58" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="20">5<pos:position pos:line="58" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="23">"esi stack depth "<pos:position pos:line="58" pos:column="41"/></literal> <operator pos:line="58" pos:column="42">&lt;&lt;<pos:position pos:line="58" pos:column="50"/></operator> <name><name pos:line="58" pos:column="45">parserState<pos:position pos:line="58" pos:column="56"/></name><operator pos:line="58" pos:column="56">.<pos:position pos:line="58" pos:column="57"/></operator><name pos:line="58" pos:column="57">stackdepth<pos:position pos:line="58" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="69"/></expr_stmt>
        <return pos:line="59" pos:column="9">return;<pos:position pos:line="59" pos:column="16"/></return>
        <break pos:line="60" pos:column="9">break;<pos:position pos:line="60" pos:column="15"/></break>

    <case pos:line="62" pos:column="5">case <expr><name><name pos:line="62" pos:column="10">ESIElement<pos:position pos:line="62" pos:column="20"/></name><operator pos:line="62" pos:column="20">::<pos:position pos:line="62" pos:column="22"/></operator><name pos:line="62" pos:column="22">ESI_ELEMENT_COMMENT<pos:position pos:line="62" pos:column="41"/></name></name></expr>:<pos:position pos:line="62" pos:column="42"/></case>
        <comment type="block" pos:line="63" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="64" pos:column="9">element<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">=<pos:position pos:line="64" pos:column="18"/></operator> <operator pos:line="64" pos:column="19">new<pos:position pos:line="64" pos:column="22"/></operator> <call><name pos:line="64" pos:column="23">esiComment<pos:position pos:line="64" pos:column="33"/></name> <argument_list pos:line="64" pos:column="34">()<pos:position pos:line="64" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="37"/></expr_stmt>
        <break pos:line="65" pos:column="9">break;<pos:position pos:line="65" pos:column="15"/></break>

    <case pos:line="67" pos:column="5">case <expr><name><name pos:line="67" pos:column="10">ESIElement<pos:position pos:line="67" pos:column="20"/></name><operator pos:line="67" pos:column="20">::<pos:position pos:line="67" pos:column="22"/></operator><name pos:line="67" pos:column="22">ESI_ELEMENT_INCLUDE<pos:position pos:line="67" pos:column="41"/></name></name></expr>:<pos:position pos:line="67" pos:column="42"/></case>
        <comment type="block" pos:line="68" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="69" pos:column="9">element<pos:position pos:line="69" pos:column="16"/></name> <operator pos:line="69" pos:column="17">=<pos:position pos:line="69" pos:column="18"/></operator> <operator pos:line="69" pos:column="19">new<pos:position pos:line="69" pos:column="22"/></operator> <call><name pos:line="69" pos:column="23">ESIInclude<pos:position pos:line="69" pos:column="33"/></name> <argument_list pos:line="69" pos:column="34">(<argument><expr><call><name><name pos:line="69" pos:column="35">parserState<pos:position pos:line="69" pos:column="46"/></name><operator pos:line="69" pos:column="46">.<pos:position pos:line="69" pos:column="47"/></operator><name pos:line="69" pos:column="47">top<pos:position pos:line="69" pos:column="50"/></name></name><argument_list pos:line="69" pos:column="50">()<pos:position pos:line="69" pos:column="52"/></argument_list></call><operator pos:line="69" pos:column="52">.<pos:position pos:line="69" pos:column="53"/></operator><call><name pos:line="69" pos:column="53">getRaw<pos:position pos:line="69" pos:column="59"/></name><argument_list pos:line="69" pos:column="59">()<pos:position pos:line="69" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="69" pos:column="63">specifiedattcount<pos:position pos:line="69" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="82">attr<pos:position pos:line="69" pos:column="86"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="88">this<pos:position pos:line="69" pos:column="92"/></name></expr></argument>)<pos:position pos:line="69" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="94"/></expr_stmt>
        <break pos:line="70" pos:column="9">break;<pos:position pos:line="70" pos:column="15"/></break>

    <case pos:line="72" pos:column="5">case <expr><name><name pos:line="72" pos:column="10">ESIElement<pos:position pos:line="72" pos:column="20"/></name><operator pos:line="72" pos:column="20">::<pos:position pos:line="72" pos:column="22"/></operator><name pos:line="72" pos:column="22">ESI_ELEMENT_REMOVE<pos:position pos:line="72" pos:column="40"/></name></name></expr>:<pos:position pos:line="72" pos:column="41"/></case>
        <comment type="block" pos:line="73" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="74" pos:column="9">element<pos:position pos:line="74" pos:column="16"/></name> <operator pos:line="74" pos:column="17">=<pos:position pos:line="74" pos:column="18"/></operator> <call><name pos:line="74" pos:column="19">esiRemoveNew<pos:position pos:line="74" pos:column="31"/></name> <argument_list pos:line="74" pos:column="32">()<pos:position pos:line="74" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="35"/></expr_stmt>
        <break pos:line="75" pos:column="9">break;<pos:position pos:line="75" pos:column="15"/></break>

    <case pos:line="77" pos:column="5">case <expr><name><name pos:line="77" pos:column="10">ESIElement<pos:position pos:line="77" pos:column="20"/></name><operator pos:line="77" pos:column="20">::<pos:position pos:line="77" pos:column="22"/></operator><name pos:line="77" pos:column="22">ESI_ELEMENT_TRY<pos:position pos:line="77" pos:column="37"/></name></name></expr>:<pos:position pos:line="77" pos:column="38"/></case>
        <comment type="block" pos:line="78" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="79" pos:column="9">element<pos:position pos:line="79" pos:column="16"/></name> <operator pos:line="79" pos:column="17">=<pos:position pos:line="79" pos:column="18"/></operator> <operator pos:line="79" pos:column="19">new<pos:position pos:line="79" pos:column="22"/></operator> <call><name pos:line="79" pos:column="23">esiTry<pos:position pos:line="79" pos:column="29"/></name> <argument_list pos:line="79" pos:column="30">(<argument><expr><call><name><name pos:line="79" pos:column="31">parserState<pos:position pos:line="79" pos:column="42"/></name><operator pos:line="79" pos:column="42">.<pos:position pos:line="79" pos:column="43"/></operator><name pos:line="79" pos:column="43">top<pos:position pos:line="79" pos:column="46"/></name></name><argument_list pos:line="79" pos:column="46">()<pos:position pos:line="79" pos:column="48"/></argument_list></call><operator pos:line="79" pos:column="48">.<pos:position pos:line="79" pos:column="49"/></operator><call><name pos:line="79" pos:column="49">getRaw<pos:position pos:line="79" pos:column="55"/></name><argument_list pos:line="79" pos:column="55">()<pos:position pos:line="79" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="79" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="59"/></expr_stmt>
        <break pos:line="80" pos:column="9">break;<pos:position pos:line="80" pos:column="15"/></break>

    <case pos:line="82" pos:column="5">case <expr><name><name pos:line="82" pos:column="10">ESIElement<pos:position pos:line="82" pos:column="20"/></name><operator pos:line="82" pos:column="20">::<pos:position pos:line="82" pos:column="22"/></operator><name pos:line="82" pos:column="22">ESI_ELEMENT_ATTEMPT<pos:position pos:line="82" pos:column="41"/></name></name></expr>:<pos:position pos:line="82" pos:column="42"/></case>
        <comment type="block" pos:line="83" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="84" pos:column="9">element<pos:position pos:line="84" pos:column="16"/></name> <operator pos:line="84" pos:column="17">=<pos:position pos:line="84" pos:column="18"/></operator> <operator pos:line="84" pos:column="19">new<pos:position pos:line="84" pos:column="22"/></operator> <call><name pos:line="84" pos:column="23">esiAttempt<pos:position pos:line="84" pos:column="33"/></name> <argument_list pos:line="84" pos:column="34">(<argument><expr><call><name><name pos:line="84" pos:column="35">parserState<pos:position pos:line="84" pos:column="46"/></name><operator pos:line="84" pos:column="46">.<pos:position pos:line="84" pos:column="47"/></operator><name pos:line="84" pos:column="47">top<pos:position pos:line="84" pos:column="50"/></name></name><argument_list pos:line="84" pos:column="50">()<pos:position pos:line="84" pos:column="52"/></argument_list></call><operator pos:line="84" pos:column="52">.<pos:position pos:line="84" pos:column="53"/></operator><call><name pos:line="84" pos:column="53">getRaw<pos:position pos:line="84" pos:column="59"/></name><argument_list pos:line="84" pos:column="59">()<pos:position pos:line="84" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="84" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="63"/></expr_stmt>
        <break pos:line="85" pos:column="9">break;<pos:position pos:line="85" pos:column="15"/></break>

    <case pos:line="87" pos:column="5">case <expr><name><name pos:line="87" pos:column="10">ESIElement<pos:position pos:line="87" pos:column="20"/></name><operator pos:line="87" pos:column="20">::<pos:position pos:line="87" pos:column="22"/></operator><name pos:line="87" pos:column="22">ESI_ELEMENT_EXCEPT<pos:position pos:line="87" pos:column="40"/></name></name></expr>:<pos:position pos:line="87" pos:column="41"/></case>
        <comment type="block" pos:line="88" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="89" pos:column="9">element<pos:position pos:line="89" pos:column="16"/></name> <operator pos:line="89" pos:column="17">=<pos:position pos:line="89" pos:column="18"/></operator> <operator pos:line="89" pos:column="19">new<pos:position pos:line="89" pos:column="22"/></operator> <call><name pos:line="89" pos:column="23">esiExcept<pos:position pos:line="89" pos:column="32"/></name> <argument_list pos:line="89" pos:column="33">(<argument><expr><call><name><name pos:line="89" pos:column="34">parserState<pos:position pos:line="89" pos:column="45"/></name><operator pos:line="89" pos:column="45">.<pos:position pos:line="89" pos:column="46"/></operator><name pos:line="89" pos:column="46">top<pos:position pos:line="89" pos:column="49"/></name></name><argument_list pos:line="89" pos:column="49">()<pos:position pos:line="89" pos:column="51"/></argument_list></call><operator pos:line="89" pos:column="51">.<pos:position pos:line="89" pos:column="52"/></operator><call><name pos:line="89" pos:column="52">getRaw<pos:position pos:line="89" pos:column="58"/></name><argument_list pos:line="89" pos:column="58">()<pos:position pos:line="89" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="89" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="62"/></expr_stmt>
        <break pos:line="90" pos:column="9">break;<pos:position pos:line="90" pos:column="15"/></break>

    <case pos:line="92" pos:column="5">case <expr><name><name pos:line="92" pos:column="10">ESIElement<pos:position pos:line="92" pos:column="20"/></name><operator pos:line="92" pos:column="20">::<pos:position pos:line="92" pos:column="22"/></operator><name pos:line="92" pos:column="22">ESI_ELEMENT_VARS<pos:position pos:line="92" pos:column="38"/></name></name></expr>:<pos:position pos:line="92" pos:column="39"/></case>
        <comment type="block" pos:line="93" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="94" pos:column="9">element<pos:position pos:line="94" pos:column="16"/></name> <operator pos:line="94" pos:column="17">=<pos:position pos:line="94" pos:column="18"/></operator> <operator pos:line="94" pos:column="19">new<pos:position pos:line="94" pos:column="22"/></operator> <call><name pos:line="94" pos:column="23">ESIVar<pos:position pos:line="94" pos:column="29"/></name> <argument_list pos:line="94" pos:column="30">(<argument><expr><call><name><name pos:line="94" pos:column="31">parserState<pos:position pos:line="94" pos:column="42"/></name><operator pos:line="94" pos:column="42">.<pos:position pos:line="94" pos:column="43"/></operator><name pos:line="94" pos:column="43">top<pos:position pos:line="94" pos:column="46"/></name></name><argument_list pos:line="94" pos:column="46">()<pos:position pos:line="94" pos:column="48"/></argument_list></call><operator pos:line="94" pos:column="48">.<pos:position pos:line="94" pos:column="49"/></operator><call><name pos:line="94" pos:column="49">getRaw<pos:position pos:line="94" pos:column="55"/></name><argument_list pos:line="94" pos:column="55">()<pos:position pos:line="94" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="94" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="59"/></expr_stmt>
        <break pos:line="95" pos:column="9">break;<pos:position pos:line="95" pos:column="15"/></break>

    <case pos:line="97" pos:column="5">case <expr><name><name pos:line="97" pos:column="10">ESIElement<pos:position pos:line="97" pos:column="20"/></name><operator pos:line="97" pos:column="20">::<pos:position pos:line="97" pos:column="22"/></operator><name pos:line="97" pos:column="22">ESI_ELEMENT_CHOOSE<pos:position pos:line="97" pos:column="40"/></name></name></expr>:<pos:position pos:line="97" pos:column="41"/></case>
        <comment type="block" pos:line="98" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="99" pos:column="9">element<pos:position pos:line="99" pos:column="16"/></name> <operator pos:line="99" pos:column="17">=<pos:position pos:line="99" pos:column="18"/></operator> <operator pos:line="99" pos:column="19">new<pos:position pos:line="99" pos:column="22"/></operator> <call><name pos:line="99" pos:column="23">esiChoose<pos:position pos:line="99" pos:column="32"/></name> <argument_list pos:line="99" pos:column="33">(<argument><expr><call><name><name pos:line="99" pos:column="34">parserState<pos:position pos:line="99" pos:column="45"/></name><operator pos:line="99" pos:column="45">.<pos:position pos:line="99" pos:column="46"/></operator><name pos:line="99" pos:column="46">top<pos:position pos:line="99" pos:column="49"/></name></name><argument_list pos:line="99" pos:column="49">()<pos:position pos:line="99" pos:column="51"/></argument_list></call><operator pos:line="99" pos:column="51">.<pos:position pos:line="99" pos:column="52"/></operator><call><name pos:line="99" pos:column="52">getRaw<pos:position pos:line="99" pos:column="58"/></name><argument_list pos:line="99" pos:column="58">()<pos:position pos:line="99" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="99" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="62"/></expr_stmt>
        <break pos:line="100" pos:column="9">break;<pos:position pos:line="100" pos:column="15"/></break>

    <case pos:line="102" pos:column="5">case <expr><name><name pos:line="102" pos:column="10">ESIElement<pos:position pos:line="102" pos:column="20"/></name><operator pos:line="102" pos:column="20">::<pos:position pos:line="102" pos:column="22"/></operator><name pos:line="102" pos:column="22">ESI_ELEMENT_WHEN<pos:position pos:line="102" pos:column="38"/></name></name></expr>:<pos:position pos:line="102" pos:column="39"/></case>
        <comment type="block" pos:line="103" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="104" pos:column="9">element<pos:position pos:line="104" pos:column="16"/></name> <operator pos:line="104" pos:column="17">=<pos:position pos:line="104" pos:column="18"/></operator> <operator pos:line="104" pos:column="19">new<pos:position pos:line="104" pos:column="22"/></operator> <call><name pos:line="104" pos:column="23">esiWhen<pos:position pos:line="104" pos:column="30"/></name> <argument_list pos:line="104" pos:column="31">(<argument><expr><call><name><name pos:line="104" pos:column="32">parserState<pos:position pos:line="104" pos:column="43"/></name><operator pos:line="104" pos:column="43">.<pos:position pos:line="104" pos:column="44"/></operator><name pos:line="104" pos:column="44">top<pos:position pos:line="104" pos:column="47"/></name></name><argument_list pos:line="104" pos:column="47">()<pos:position pos:line="104" pos:column="49"/></argument_list></call><operator pos:line="104" pos:column="49">.<pos:position pos:line="104" pos:column="50"/></operator><call><name pos:line="104" pos:column="50">getRaw<pos:position pos:line="104" pos:column="56"/></name><argument_list pos:line="104" pos:column="56">()<pos:position pos:line="104" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="104" pos:column="60">specifiedattcount<pos:position pos:line="104" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="79">attr<pos:position pos:line="104" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="85">varState<pos:position pos:line="104" pos:column="93"/></name></expr></argument>)<pos:position pos:line="104" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="95"/></expr_stmt>
        <break pos:line="105" pos:column="9">break;<pos:position pos:line="105" pos:column="15"/></break>

    <case pos:line="107" pos:column="5">case <expr><name><name pos:line="107" pos:column="10">ESIElement<pos:position pos:line="107" pos:column="20"/></name><operator pos:line="107" pos:column="20">::<pos:position pos:line="107" pos:column="22"/></operator><name pos:line="107" pos:column="22">ESI_ELEMENT_OTHERWISE<pos:position pos:line="107" pos:column="43"/></name></name></expr>:<pos:position pos:line="107" pos:column="44"/></case>
        <comment type="block" pos:line="108" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="109" pos:column="9">element<pos:position pos:line="109" pos:column="16"/></name> <operator pos:line="109" pos:column="17">=<pos:position pos:line="109" pos:column="18"/></operator> <operator pos:line="109" pos:column="19">new<pos:position pos:line="109" pos:column="22"/></operator> <call><name pos:line="109" pos:column="23">esiOtherwise<pos:position pos:line="109" pos:column="35"/></name> <argument_list pos:line="109" pos:column="36">(<argument><expr><call><name><name pos:line="109" pos:column="37">parserState<pos:position pos:line="109" pos:column="48"/></name><operator pos:line="109" pos:column="48">.<pos:position pos:line="109" pos:column="49"/></operator><name pos:line="109" pos:column="49">top<pos:position pos:line="109" pos:column="52"/></name></name><argument_list pos:line="109" pos:column="52">()<pos:position pos:line="109" pos:column="54"/></argument_list></call><operator pos:line="109" pos:column="54">.<pos:position pos:line="109" pos:column="55"/></operator><call><name pos:line="109" pos:column="55">getRaw<pos:position pos:line="109" pos:column="61"/></name><argument_list pos:line="109" pos:column="61">()<pos:position pos:line="109" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="65"/></expr_stmt>
        <break pos:line="110" pos:column="9">break;<pos:position pos:line="110" pos:column="15"/></break>

    <case pos:line="112" pos:column="5">case <expr><name><name pos:line="112" pos:column="10">ESIElement<pos:position pos:line="112" pos:column="20"/></name><operator pos:line="112" pos:column="20">::<pos:position pos:line="112" pos:column="22"/></operator><name pos:line="112" pos:column="22">ESI_ELEMENT_ASSIGN<pos:position pos:line="112" pos:column="40"/></name></name></expr>:<pos:position pos:line="112" pos:column="41"/></case>
        <comment type="block" pos:line="113" pos:column="9">/* Put on the stack to allow skipping of 'invalid' markup */</comment>
        <expr_stmt><expr><name pos:line="114" pos:column="9">element<pos:position pos:line="114" pos:column="16"/></name> <operator pos:line="114" pos:column="17">=<pos:position pos:line="114" pos:column="18"/></operator> <operator pos:line="114" pos:column="19">new<pos:position pos:line="114" pos:column="22"/></operator> <call><name pos:line="114" pos:column="23">ESIAssign<pos:position pos:line="114" pos:column="32"/></name> <argument_list pos:line="114" pos:column="33">(<argument><expr><call><name><name pos:line="114" pos:column="34">parserState<pos:position pos:line="114" pos:column="45"/></name><operator pos:line="114" pos:column="45">.<pos:position pos:line="114" pos:column="46"/></operator><name pos:line="114" pos:column="46">top<pos:position pos:line="114" pos:column="49"/></name></name><argument_list pos:line="114" pos:column="49">()<pos:position pos:line="114" pos:column="51"/></argument_list></call><operator pos:line="114" pos:column="51">.<pos:position pos:line="114" pos:column="52"/></operator><call><name pos:line="114" pos:column="52">getRaw<pos:position pos:line="114" pos:column="58"/></name><argument_list pos:line="114" pos:column="58">()<pos:position pos:line="114" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="114" pos:column="62">specifiedattcount<pos:position pos:line="114" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="81">attr<pos:position pos:line="114" pos:column="85"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="87">this<pos:position pos:line="114" pos:column="91"/></name></expr></argument>)<pos:position pos:line="114" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="93"/></expr_stmt>
        <break pos:line="115" pos:column="9">break;<pos:position pos:line="115" pos:column="15"/></break>
    }<pos:position pos:line="116" pos:column="6"/></block></switch>

    <expr_stmt><expr><call><name pos:line="118" pos:column="5">addStackElement<pos:position pos:line="118" pos:column="20"/></name><argument_list pos:line="118" pos:column="20">(<argument><expr><name pos:line="118" pos:column="21">element<pos:position pos:line="118" pos:column="28"/></name></expr></argument>)<pos:position pos:line="118" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="120" pos:column="5">debugs<pos:position pos:line="120" pos:column="11"/></name><argument_list pos:line="120" pos:column="11">(<argument><expr><literal type="number" pos:line="120" pos:column="12">86<pos:position pos:line="120" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="120" pos:column="16">5<pos:position pos:line="120" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="19">"esi stack depth "<pos:position pos:line="120" pos:column="37"/></literal> <operator pos:line="120" pos:column="38">&lt;&lt;<pos:position pos:line="120" pos:column="46"/></operator> <name><name pos:line="120" pos:column="41">parserState<pos:position pos:line="120" pos:column="52"/></name><operator pos:line="120" pos:column="52">.<pos:position pos:line="120" pos:column="53"/></operator><name pos:line="120" pos:column="53">stackdepth<pos:position pos:line="120" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="65"/></expr_stmt>

}<pos:position pos:line="122" pos:column="2"/></block></function></unit>
