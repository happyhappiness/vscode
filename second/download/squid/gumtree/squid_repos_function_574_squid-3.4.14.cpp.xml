<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_574_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">u_char<pos:position pos:line="1" pos:column="7"/></name> <modifier pos:line="1" pos:column="8">*<pos:position pos:line="1" pos:column="9"/></modifier></type>
<name pos:line="2" pos:column="1">asn_build_objid<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">u_char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">data<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">int<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">datalength<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="3" pos:column="17">u_char<pos:position pos:line="3" pos:column="23"/></name></type> <name pos:line="3" pos:column="24">type<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="30">oid<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type> <name pos:line="3" pos:column="36">objid<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="43">int<pos:position pos:line="3" pos:column="46"/></name></type> <name pos:line="3" pos:column="47">objidlength<pos:position pos:line="3" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="59"/></parameter_list>
<comment type="block" pos:line="4" pos:column="1">/*    u_char *data;         IN - pointer to start of object */</comment>
<comment type="block" pos:line="5" pos:column="1">/*    int    *datalength;   IN/OUT - # of valid bytes left in buf */</comment>
<comment type="block" pos:line="6" pos:column="1">/*    u_char  type;         IN - ASN type of object */</comment>
<comment type="block" pos:line="7" pos:column="1">/*    oid    *objid;        IN - pointer to start of input buffer */</comment>
<comment type="block" pos:line="8" pos:column="1">/*    int     objidlength;  IN - number of sub-id's in objid */</comment>
<block pos:line="9" pos:column="1">{
    <comment type="block" pos:line="10" pos:column="5">/*
     * ASN.1 objid ::= 0x06 asnlength subidentifier {subidentifier}*
     * subidentifier ::= {leadingbyte}* lastbyte
     * leadingbyte ::= 1 7bitvalue
     * lastbyte ::= 0 7bitvalue
     */</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">u_char<pos:position pos:line="16" pos:column="11"/></name></type> <name><name pos:line="16" pos:column="12">buf<pos:position pos:line="16" pos:column="15"/></name><index pos:line="16" pos:column="15">[<expr><name pos:line="16" pos:column="16">MAX_OID_LEN<pos:position pos:line="16" pos:column="27"/></name></expr>]<pos:position pos:line="16" pos:column="28"/></index></name></decl>;<pos:position pos:line="16" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">u_char<pos:position pos:line="17" pos:column="11"/></name> <modifier pos:line="17" pos:column="12">*<pos:position pos:line="17" pos:column="13"/></modifier></type><name pos:line="17" pos:column="13">bp<pos:position pos:line="17" pos:column="15"/></name> <init pos:line="17" pos:column="16">= <expr><name pos:line="17" pos:column="18">buf<pos:position pos:line="17" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">oid<pos:position pos:line="18" pos:column="8"/></name> <modifier pos:line="18" pos:column="9">*<pos:position pos:line="18" pos:column="10"/></modifier></type><name pos:line="18" pos:column="10">op<pos:position pos:line="18" pos:column="12"/></name> <init pos:line="18" pos:column="13">= <expr><name pos:line="18" pos:column="15">objid<pos:position pos:line="18" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">asnlength<pos:position pos:line="19" pos:column="18"/></name></decl>;<pos:position pos:line="19" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">u_int<pos:position pos:line="20" pos:column="10"/></name></type> <name pos:line="20" pos:column="11">subid<pos:position pos:line="20" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="18">mask<pos:position pos:line="20" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="20" pos:column="24">testmask<pos:position pos:line="20" pos:column="32"/></name></decl>;<pos:position pos:line="20" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">bits<pos:position pos:line="21" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="21" pos:column="15">testbits<pos:position pos:line="21" pos:column="23"/></name></decl>;<pos:position pos:line="21" pos:column="24"/></decl_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">objidlength<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">&lt;<pos:position pos:line="23" pos:column="25"/></operator> <literal type="number" pos:line="23" pos:column="23">2<pos:position pos:line="23" pos:column="24"/></literal></expr>)<pos:position pos:line="23" pos:column="25"/></condition><then pos:line="23" pos:column="25"> <block pos:line="23" pos:column="26">{
        <expr_stmt><expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">bp<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">++<pos:position pos:line="24" pos:column="14"/></operator> <operator pos:line="24" pos:column="15">=<pos:position pos:line="24" pos:column="16"/></operator> <literal type="number" pos:line="24" pos:column="17">0<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">objidlength<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">=<pos:position pos:line="25" pos:column="22"/></operator> <literal type="number" pos:line="25" pos:column="23">0<pos:position pos:line="25" pos:column="24"/></literal></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <else pos:line="26" pos:column="7">else <block pos:line="26" pos:column="12">{
        <expr_stmt><expr><operator pos:line="27" pos:column="9">*<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">bp<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">++<pos:position pos:line="27" pos:column="14"/></operator> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <name><name pos:line="27" pos:column="17">op<pos:position pos:line="27" pos:column="19"/></name><index pos:line="27" pos:column="19">[<expr><literal type="number" pos:line="27" pos:column="20">1<pos:position pos:line="27" pos:column="21"/></literal></expr>]<pos:position pos:line="27" pos:column="22"/></index></name> <operator pos:line="27" pos:column="23">+<pos:position pos:line="27" pos:column="24"/></operator> <operator pos:line="27" pos:column="25">(<pos:position pos:line="27" pos:column="26"/></operator><name><name pos:line="27" pos:column="26">op<pos:position pos:line="27" pos:column="28"/></name><index pos:line="27" pos:column="28">[<expr><literal type="number" pos:line="27" pos:column="29">0<pos:position pos:line="27" pos:column="30"/></literal></expr>]<pos:position pos:line="27" pos:column="31"/></index></name> <operator pos:line="27" pos:column="32">*<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="34">40<pos:position pos:line="27" pos:column="36"/></literal><operator pos:line="27" pos:column="36">)<pos:position pos:line="27" pos:column="37"/></operator></expr>;<pos:position pos:line="27" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">objidlength<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">-=<pos:position pos:line="28" pos:column="23"/></operator> <literal type="number" pos:line="28" pos:column="24">2<pos:position pos:line="28" pos:column="25"/></literal></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="29" pos:column="9">op<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">+=<pos:position pos:line="29" pos:column="14"/></operator> <literal type="number" pos:line="29" pos:column="15">2<pos:position pos:line="29" pos:column="16"/></literal></expr>;<pos:position pos:line="29" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></else></if>

    <while pos:line="32" pos:column="5">while <condition pos:line="32" pos:column="11">(<expr><name pos:line="32" pos:column="12">objidlength<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">--<pos:position pos:line="32" pos:column="25"/></operator> <operator pos:line="32" pos:column="26">&gt;<pos:position pos:line="32" pos:column="30"/></operator> <literal type="number" pos:line="32" pos:column="28">0<pos:position pos:line="32" pos:column="29"/></literal></expr>)<pos:position pos:line="32" pos:column="30"/></condition> <block pos:line="32" pos:column="31">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">subid<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">=<pos:position pos:line="33" pos:column="16"/></operator> <operator pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">op<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">++<pos:position pos:line="33" pos:column="22"/></operator></expr>;<pos:position pos:line="33" pos:column="23"/></expr_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">subid<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">&lt;<pos:position pos:line="34" pos:column="23"/></operator> <literal type="number" pos:line="34" pos:column="21">127<pos:position pos:line="34" pos:column="24"/></literal></expr>)<pos:position pos:line="34" pos:column="25"/></condition><then pos:line="34" pos:column="25"> <block pos:line="34" pos:column="26">{	<comment type="block" pos:line="34" pos:column="33">/* off by one? */</comment>
            <expr_stmt><expr><operator pos:line="35" pos:column="13">*<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">bp<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">++<pos:position pos:line="35" pos:column="18"/></operator> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">subid<pos:position pos:line="35" pos:column="26"/></name></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then> <else pos:line="36" pos:column="11">else <block pos:line="36" pos:column="16">{
            <expr_stmt><expr><name pos:line="37" pos:column="13">mask<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <literal type="number" pos:line="37" pos:column="20">0x7F<pos:position pos:line="37" pos:column="24"/></literal></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>	<comment type="block" pos:line="37" pos:column="33">/* handle subid == 0 case */</comment>
            <expr_stmt><expr><name pos:line="38" pos:column="13">bits<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">=<pos:position pos:line="38" pos:column="19"/></operator> <literal type="number" pos:line="38" pos:column="20">0<pos:position pos:line="38" pos:column="21"/></literal></expr>;<pos:position pos:line="38" pos:column="22"/></expr_stmt>
            <comment type="block" pos:line="39" pos:column="13">/* testmask *MUST* !!!! be of an unsigned type */</comment>
            <for pos:line="40" pos:column="13">for <control pos:line="40" pos:column="17">(<init><expr><name pos:line="40" pos:column="18">testmask<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <literal type="number" pos:line="40" pos:column="29">0x7F<pos:position pos:line="40" pos:column="33"/></literal></expr><operator pos:line="40" pos:column="33">,<pos:position pos:line="40" pos:column="34"/></operator> <expr><name pos:line="40" pos:column="35">testbits<pos:position pos:line="40" pos:column="43"/></name> <operator pos:line="40" pos:column="44">=<pos:position pos:line="40" pos:column="45"/></operator> <literal type="number" pos:line="40" pos:column="46">0<pos:position pos:line="40" pos:column="47"/></literal></expr>;<pos:position pos:line="40" pos:column="48"/></init> <condition><expr><name pos:line="40" pos:column="49">testmask<pos:position pos:line="40" pos:column="57"/></name> <operator pos:line="40" pos:column="58">!=<pos:position pos:line="40" pos:column="60"/></operator> <literal type="number" pos:line="40" pos:column="61">0<pos:position pos:line="40" pos:column="62"/></literal></expr>;<pos:position pos:line="40" pos:column="63"/></condition>
                    <incr><expr><name pos:line="41" pos:column="21">testmask<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">&lt;&lt;=<pos:position pos:line="41" pos:column="39"/></operator> <literal type="number" pos:line="41" pos:column="34">7<pos:position pos:line="41" pos:column="35"/></literal></expr><operator pos:line="41" pos:column="35">,<pos:position pos:line="41" pos:column="36"/></operator> <expr><name pos:line="41" pos:column="37">testbits<pos:position pos:line="41" pos:column="45"/></name> <operator pos:line="41" pos:column="46">+=<pos:position pos:line="41" pos:column="48"/></operator> <literal type="number" pos:line="41" pos:column="49">7<pos:position pos:line="41" pos:column="50"/></literal></expr></incr>)<pos:position pos:line="41" pos:column="51"/></control> <block pos:line="41" pos:column="52">{
                <if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name pos:line="42" pos:column="21">subid<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">&amp;<pos:position pos:line="42" pos:column="32"/></operator> <name pos:line="42" pos:column="29">testmask<pos:position pos:line="42" pos:column="37"/></name></expr>)<pos:position pos:line="42" pos:column="38"/></condition><then pos:line="42" pos:column="38"> <block pos:line="42" pos:column="39">{		<comment type="block" pos:line="42" pos:column="49">/* if any bits set */</comment>
                    <expr_stmt><expr><name pos:line="43" pos:column="21">mask<pos:position pos:line="43" pos:column="25"/></name> <operator pos:line="43" pos:column="26">=<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="28">testmask<pos:position pos:line="43" pos:column="36"/></name></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="44" pos:column="21">bits<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">=<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="28">testbits<pos:position pos:line="44" pos:column="36"/></name></expr>;<pos:position pos:line="44" pos:column="37"/></expr_stmt>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>
            }<pos:position pos:line="46" pos:column="14"/></block></for>
            <comment type="block" pos:line="47" pos:column="13">/* mask can't be zero here */</comment>
            <for pos:line="48" pos:column="13">for <control pos:line="48" pos:column="17">(<init pos:line="48" pos:column="18">;<pos:position pos:line="48" pos:column="19"/></init> <condition><expr><name pos:line="48" pos:column="20">mask<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">!=<pos:position pos:line="48" pos:column="27"/></operator> <literal type="number" pos:line="48" pos:column="28">0x7F<pos:position pos:line="48" pos:column="32"/></literal></expr>;<pos:position pos:line="48" pos:column="33"/></condition> <incr><expr><name pos:line="48" pos:column="34">mask<pos:position pos:line="48" pos:column="38"/></name> <operator pos:line="48" pos:column="39">&gt;&gt;=<pos:position pos:line="48" pos:column="48"/></operator> <literal type="number" pos:line="48" pos:column="43">7<pos:position pos:line="48" pos:column="44"/></literal></expr><operator pos:line="48" pos:column="44">,<pos:position pos:line="48" pos:column="45"/></operator> <expr><name pos:line="48" pos:column="46">bits<pos:position pos:line="48" pos:column="50"/></name> <operator pos:line="48" pos:column="51">-=<pos:position pos:line="48" pos:column="53"/></operator> <literal type="number" pos:line="48" pos:column="54">7<pos:position pos:line="48" pos:column="55"/></literal></expr></incr>)<pos:position pos:line="48" pos:column="56"/></control> <block pos:line="48" pos:column="57">{
                <comment type="block" pos:line="49" pos:column="17">/* fix a mask that got truncated above */</comment>
                <if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><name pos:line="50" pos:column="21">mask<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">==<pos:position pos:line="50" pos:column="28"/></operator> <literal type="number" pos:line="50" pos:column="29">0x1E00000<pos:position pos:line="50" pos:column="38"/></literal></expr>)<pos:position pos:line="50" pos:column="39"/></condition><then pos:line="50" pos:column="39">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="51" pos:column="21">mask<pos:position pos:line="51" pos:column="25"/></name> <operator pos:line="51" pos:column="26">=<pos:position pos:line="51" pos:column="27"/></operator> <literal type="number" pos:line="51" pos:column="28">0xFE00000<pos:position pos:line="51" pos:column="37"/></literal></expr>;<pos:position pos:line="51" pos:column="38"/></expr_stmt></block></then></if>
                <expr_stmt><expr><operator pos:line="52" pos:column="17">*<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="18">bp<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">++<pos:position pos:line="52" pos:column="22"/></operator> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <call pos:line="52" pos:column="25">(<name pos:line="52" pos:column="26">u_char<pos:position pos:line="52" pos:column="32"/></name>) <argument_list pos:line="52" pos:column="34">(<argument><expr><operator pos:line="52" pos:column="35">(<pos:position pos:line="52" pos:column="36"/></operator><operator pos:line="52" pos:column="36">(<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="37">subid<pos:position pos:line="52" pos:column="42"/></name> <operator pos:line="52" pos:column="43">&amp;<pos:position pos:line="52" pos:column="48"/></operator> <name pos:line="52" pos:column="45">mask<pos:position pos:line="52" pos:column="49"/></name><operator pos:line="52" pos:column="49">)<pos:position pos:line="52" pos:column="50"/></operator> <operator pos:line="52" pos:column="51">&gt;&gt;<pos:position pos:line="52" pos:column="56"/></operator> <name pos:line="52" pos:column="54">bits<pos:position pos:line="52" pos:column="58"/></name><operator pos:line="52" pos:column="58">)<pos:position pos:line="52" pos:column="59"/></operator> <operator pos:line="52" pos:column="60">|<pos:position pos:line="52" pos:column="61"/></operator> <name pos:line="52" pos:column="62">ASN_BIT8<pos:position pos:line="52" pos:column="70"/></name></expr></argument>)<pos:position pos:line="52" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="72"/></expr_stmt>
            }<pos:position pos:line="53" pos:column="14"/></block></for>
            <expr_stmt><expr><operator pos:line="54" pos:column="13">*<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="14">bp<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">++<pos:position pos:line="54" pos:column="18"/></operator> <operator pos:line="54" pos:column="19">=<pos:position pos:line="54" pos:column="20"/></operator> <call pos:line="54" pos:column="21">(<name pos:line="54" pos:column="22">u_char<pos:position pos:line="54" pos:column="28"/></name>) <argument_list pos:line="54" pos:column="30">(<argument><expr><name pos:line="54" pos:column="31">subid<pos:position pos:line="54" pos:column="36"/></name> <operator pos:line="54" pos:column="37">&amp;<pos:position pos:line="54" pos:column="42"/></operator> <name pos:line="54" pos:column="39">mask<pos:position pos:line="54" pos:column="43"/></name></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="55" pos:column="10"/></block></else></if>
    }<pos:position pos:line="56" pos:column="6"/></block></while>

    <expr_stmt><expr><name pos:line="58" pos:column="5">asnlength<pos:position pos:line="58" pos:column="14"/></name> <operator pos:line="58" pos:column="15">=<pos:position pos:line="58" pos:column="16"/></operator> <name pos:line="58" pos:column="17">bp<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">-<pos:position pos:line="58" pos:column="21"/></operator> <name pos:line="58" pos:column="22">buf<pos:position pos:line="58" pos:column="25"/></name></expr>;<pos:position pos:line="58" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="59" pos:column="5">data<pos:position pos:line="59" pos:column="9"/></name> <operator pos:line="59" pos:column="10">=<pos:position pos:line="59" pos:column="11"/></operator> <call><name pos:line="59" pos:column="12">asn_build_header_with_truth<pos:position pos:line="59" pos:column="39"/></name><argument_list pos:line="59" pos:column="39">(<argument><expr><name pos:line="59" pos:column="40">data<pos:position pos:line="59" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="46">datalength<pos:position pos:line="59" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="58">type<pos:position pos:line="59" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="64">asnlength<pos:position pos:line="59" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="75">1<pos:position pos:line="59" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="78"/></expr_stmt>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">data<pos:position pos:line="60" pos:column="13"/></name> <operator pos:line="60" pos:column="14">==<pos:position pos:line="60" pos:column="16"/></operator> <name pos:line="60" pos:column="17">NULL<pos:position pos:line="60" pos:column="21"/></name></expr>)<pos:position pos:line="60" pos:column="22"/></condition><then pos:line="60" pos:column="22">
        <block type="pseudo"><return pos:line="61" pos:column="9">return <expr><operator pos:line="61" pos:column="16">(<pos:position pos:line="61" pos:column="17"/></operator><name pos:line="61" pos:column="17">NULL<pos:position pos:line="61" pos:column="21"/></name><operator pos:line="61" pos:column="21">)<pos:position pos:line="61" pos:column="22"/></operator></expr>;<pos:position pos:line="61" pos:column="23"/></return></block></then></if>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><operator pos:line="62" pos:column="9">*<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">datalength<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">&lt;<pos:position pos:line="62" pos:column="25"/></operator> <name pos:line="62" pos:column="23">asnlength<pos:position pos:line="62" pos:column="32"/></name></expr>)<pos:position pos:line="62" pos:column="33"/></condition><then pos:line="62" pos:column="33"> <block pos:line="62" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">snmp_set_api_error<pos:position pos:line="63" pos:column="27"/></name><argument_list pos:line="63" pos:column="27">(<argument><expr><name pos:line="63" pos:column="28">SNMPERR_ASN_DECODE<pos:position pos:line="63" pos:column="46"/></name></expr></argument>)<pos:position pos:line="63" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="48"/></expr_stmt>
        <return pos:line="64" pos:column="9">return <expr><operator pos:line="64" pos:column="16">(<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="17">NULL<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">)<pos:position pos:line="64" pos:column="22"/></operator></expr>;<pos:position pos:line="64" pos:column="23"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">memcpy<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><operator pos:line="66" pos:column="12">(<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="13">char<pos:position pos:line="66" pos:column="17"/></name> <operator pos:line="66" pos:column="18">*<pos:position pos:line="66" pos:column="19"/></operator><operator pos:line="66" pos:column="19">)<pos:position pos:line="66" pos:column="20"/></operator> <name pos:line="66" pos:column="21">data<pos:position pos:line="66" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="27">(<pos:position pos:line="66" pos:column="28"/></operator><name pos:line="66" pos:column="28">char<pos:position pos:line="66" pos:column="32"/></name> <operator pos:line="66" pos:column="33">*<pos:position pos:line="66" pos:column="34"/></operator><operator pos:line="66" pos:column="34">)<pos:position pos:line="66" pos:column="35"/></operator> <name pos:line="66" pos:column="36">buf<pos:position pos:line="66" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="41">asnlength<pos:position pos:line="66" pos:column="50"/></name></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="67" pos:column="5">*<pos:position pos:line="67" pos:column="6"/></operator><name pos:line="67" pos:column="6">datalength<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">-=<pos:position pos:line="67" pos:column="19"/></operator> <name pos:line="67" pos:column="20">asnlength<pos:position pos:line="67" pos:column="29"/></name></expr>;<pos:position pos:line="67" pos:column="30"/></expr_stmt>
    <return pos:line="68" pos:column="5">return <expr><operator pos:line="68" pos:column="12">(<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="13">data<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">+<pos:position pos:line="68" pos:column="19"/></operator> <name pos:line="68" pos:column="20">asnlength<pos:position pos:line="68" pos:column="29"/></name><operator pos:line="68" pos:column="29">)<pos:position pos:line="68" pos:column="30"/></operator></expr>;<pos:position pos:line="68" pos:column="31"/></return>
}<pos:position pos:line="69" pos:column="2"/></block></function></unit>
