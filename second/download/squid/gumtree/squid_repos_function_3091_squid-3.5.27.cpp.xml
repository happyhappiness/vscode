<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3091_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">setMemStatus<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">mem_status_t<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">new_status<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">new_status<pos:position pos:line="4" pos:column="19"/></name> <operator pos:line="4" pos:column="20">==<pos:position pos:line="4" pos:column="22"/></operator> <name pos:line="4" pos:column="23">mem_status<pos:position pos:line="4" pos:column="33"/></name></expr>)<pos:position pos:line="4" pos:column="34"/></condition><then pos:line="4" pos:column="34">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="7" pos:column="5">// are we using a shared memory cache?</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">Config<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">memShared<pos:position pos:line="8" pos:column="25"/></name></name> <operator pos:line="8" pos:column="26">&amp;&amp;<pos:position pos:line="8" pos:column="36"/></operator> <call><name pos:line="8" pos:column="29">IamWorkerProcess<pos:position pos:line="8" pos:column="45"/></name><argument_list pos:line="8" pos:column="45">()<pos:position pos:line="8" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="48"/></condition><then pos:line="8" pos:column="48"> <block pos:line="8" pos:column="49">{
        <comment type="line" pos:line="9" pos:column="9">// This method was designed to update replacement policy, not to</comment>
        <comment type="line" pos:line="10" pos:column="9">// actually purge something from the memory cache (TODO: rename?).</comment>
        <comment type="line" pos:line="11" pos:column="9">// Shared memory cache does not have a policy that needs updates.</comment>
        <expr_stmt><expr><name pos:line="12" pos:column="9">mem_status<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">new_status<pos:position pos:line="12" pos:column="32"/></name></expr>;<pos:position pos:line="12" pos:column="33"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">assert<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">mem_obj<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">!=<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">NULL<pos:position pos:line="16" pos:column="27"/></name></expr></argument>)<pos:position pos:line="16" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">new_status<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">==<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">IN_MEMORY<pos:position pos:line="18" pos:column="32"/></name></expr>)<pos:position pos:line="18" pos:column="33"/></condition><then pos:line="18" pos:column="33"> <block pos:line="18" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">assert<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><name><name pos:line="19" pos:column="16">mem_obj<pos:position pos:line="19" pos:column="23"/></name><operator pos:line="19" pos:column="23">-&gt;<pos:position pos:line="19" pos:column="28"/></operator><name pos:line="19" pos:column="25">inmem_lo<pos:position pos:line="19" pos:column="33"/></name></name> <operator pos:line="19" pos:column="34">==<pos:position pos:line="19" pos:column="36"/></operator> <literal type="number" pos:line="19" pos:column="37">0<pos:position pos:line="19" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name pos:line="21" pos:column="13">EBIT_TEST<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">flags<pos:position pos:line="21" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="30">ENTRY_SPECIAL<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="45"/></condition><then pos:line="21" pos:column="45"> <block pos:line="21" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">debugs<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><literal type="number" pos:line="22" pos:column="20">20<pos:position pos:line="22" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="24">4<pos:position pos:line="22" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="27">"not inserting special "<pos:position pos:line="22" pos:column="51"/></literal> <operator pos:line="22" pos:column="52">&lt;&lt;<pos:position pos:line="22" pos:column="60"/></operator> <operator pos:line="22" pos:column="55">*<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="56">this<pos:position pos:line="22" pos:column="60"/></name> <operator pos:line="22" pos:column="61">&lt;&lt;<pos:position pos:line="22" pos:column="69"/></operator> <literal type="string" pos:line="22" pos:column="64">" into policy"<pos:position pos:line="22" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="80"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then> <else pos:line="23" pos:column="11">else <block pos:line="23" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="24" pos:column="13">mem_policy<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">Add<pos:position pos:line="24" pos:column="28"/></name></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">mem_policy<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">this<pos:position pos:line="24" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="47">&amp;<pos:position pos:line="24" pos:column="52"/></operator><name><name pos:line="24" pos:column="48">mem_obj<pos:position pos:line="24" pos:column="55"/></name><operator pos:line="24" pos:column="55">-&gt;<pos:position pos:line="24" pos:column="60"/></operator><name pos:line="24" pos:column="57">repl<pos:position pos:line="24" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">debugs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="number" pos:line="25" pos:column="20">20<pos:position pos:line="25" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="24">4<pos:position pos:line="25" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="27">"inserted "<pos:position pos:line="25" pos:column="38"/></literal> <operator pos:line="25" pos:column="39">&lt;&lt;<pos:position pos:line="25" pos:column="47"/></operator> <operator pos:line="25" pos:column="42">*<pos:position pos:line="25" pos:column="43"/></operator><name pos:line="25" pos:column="43">this<pos:position pos:line="25" pos:column="47"/></name> <operator pos:line="25" pos:column="48">&lt;&lt;<pos:position pos:line="25" pos:column="56"/></operator> <literal type="string" pos:line="25" pos:column="51">" key: "<pos:position pos:line="25" pos:column="59"/></literal> <operator pos:line="25" pos:column="60">&lt;&lt;<pos:position pos:line="25" pos:column="68"/></operator> <call><name pos:line="25" pos:column="63">getMD5Text<pos:position pos:line="25" pos:column="73"/></name><argument_list pos:line="25" pos:column="73">()<pos:position pos:line="25" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="77"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></else></if>

        <expr_stmt><expr><operator pos:line="28" pos:column="9">++<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">hot_obj_count<pos:position pos:line="28" pos:column="24"/></name></expr>;<pos:position pos:line="28" pos:column="25"/></expr_stmt> <comment type="line" pos:line="28" pos:column="26">// TODO: maintain for the shared hot cache as well</comment>
    }<pos:position pos:line="29" pos:column="6"/></block></then> <else pos:line="29" pos:column="7">else <block pos:line="29" pos:column="12">{
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">EBIT_TEST<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">flags<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="30">ENTRY_SPECIAL<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="45"/></condition><then pos:line="30" pos:column="45"> <block pos:line="30" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">debugs<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><literal type="number" pos:line="31" pos:column="20">20<pos:position pos:line="31" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="24">4<pos:position pos:line="31" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="27">"not removing special "<pos:position pos:line="31" pos:column="50"/></literal> <operator pos:line="31" pos:column="51">&lt;&lt;<pos:position pos:line="31" pos:column="59"/></operator> <operator pos:line="31" pos:column="54">*<pos:position pos:line="31" pos:column="55"/></operator><name pos:line="31" pos:column="55">this<pos:position pos:line="31" pos:column="59"/></name> <operator pos:line="31" pos:column="60">&lt;&lt;<pos:position pos:line="31" pos:column="68"/></operator> <literal type="string" pos:line="31" pos:column="63">" from policy"<pos:position pos:line="31" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="79"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></then> <else pos:line="32" pos:column="11">else <block pos:line="32" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="33" pos:column="13">mem_policy<pos:position pos:line="33" pos:column="23"/></name><operator pos:line="33" pos:column="23">-&gt;<pos:position pos:line="33" pos:column="28"/></operator><name pos:line="33" pos:column="25">Remove<pos:position pos:line="33" pos:column="31"/></name></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">mem_policy<pos:position pos:line="33" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="44">this<pos:position pos:line="33" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="50">&amp;<pos:position pos:line="33" pos:column="55"/></operator><name><name pos:line="33" pos:column="51">mem_obj<pos:position pos:line="33" pos:column="58"/></name><operator pos:line="33" pos:column="58">-&gt;<pos:position pos:line="33" pos:column="63"/></operator><name pos:line="33" pos:column="60">repl<pos:position pos:line="33" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">debugs<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="number" pos:line="34" pos:column="20">20<pos:position pos:line="34" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="24">4<pos:position pos:line="34" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="27">"removed "<pos:position pos:line="34" pos:column="37"/></literal> <operator pos:line="34" pos:column="38">&lt;&lt;<pos:position pos:line="34" pos:column="46"/></operator> <operator pos:line="34" pos:column="41">*<pos:position pos:line="34" pos:column="42"/></operator><name pos:line="34" pos:column="42">this<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></else></if>

        <expr_stmt><expr><operator pos:line="37" pos:column="9">--<pos:position pos:line="37" pos:column="11"/></operator><name pos:line="37" pos:column="11">hot_obj_count<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="40" pos:column="5">mem_status<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <name pos:line="40" pos:column="18">new_status<pos:position pos:line="40" pos:column="28"/></name></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
