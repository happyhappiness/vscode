<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3204_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemStore<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">considerKeeping<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><name pos:line="2" pos:column="27">StoreEntry<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">&amp;<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="39">e<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name pos:line="4" pos:column="10">keepInLocalMemory<pos:position pos:line="4" pos:column="27"/></name><argument_list pos:line="4" pos:column="27">(<argument><expr><name pos:line="4" pos:column="28">e<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="31"/></condition><then pos:line="4" pos:column="31">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="7" pos:column="5">// since we copy everything at once, we can only keep complete entries</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">e<pos:position pos:line="8" pos:column="10"/></name><operator pos:line="8" pos:column="10">.<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">store_status<pos:position pos:line="8" pos:column="23"/></name></name> <operator pos:line="8" pos:column="24">!=<pos:position pos:line="8" pos:column="26"/></operator> <name pos:line="8" pos:column="27">STORE_OK<pos:position pos:line="8" pos:column="35"/></name></expr>)<pos:position pos:line="8" pos:column="36"/></condition><then pos:line="8" pos:column="36"> <block pos:line="8" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">20<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">7<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="23">HERE<pos:position pos:line="9" pos:column="27"/></name> <operator pos:line="9" pos:column="28">&lt;&lt;<pos:position pos:line="9" pos:column="36"/></operator> <literal type="string" pos:line="9" pos:column="31">"Incomplete: "<pos:position pos:line="9" pos:column="45"/></literal> <operator pos:line="9" pos:column="46">&lt;&lt;<pos:position pos:line="9" pos:column="54"/></operator> <name pos:line="9" pos:column="49">e<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt>
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name><name pos:line="13" pos:column="12">e<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">.<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">mem_obj<pos:position pos:line="13" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">int64_t<pos:position pos:line="15" pos:column="18"/></name></type> <name pos:line="15" pos:column="19">loadedSize<pos:position pos:line="15" pos:column="29"/></name> <init pos:line="15" pos:column="30">= <expr><call><name><name pos:line="15" pos:column="32">e<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">mem_obj<pos:position pos:line="15" pos:column="41"/></name><operator pos:line="15" pos:column="41">-&gt;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="43">endOffset<pos:position pos:line="15" pos:column="52"/></name></name><argument_list pos:line="15" pos:column="52">()<pos:position pos:line="15" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="55"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="16" pos:column="5">const<pos:position pos:line="16" pos:column="10"/></specifier> <name pos:line="16" pos:column="11">int64_t<pos:position pos:line="16" pos:column="18"/></name></type> <name pos:line="16" pos:column="19">expectedSize<pos:position pos:line="16" pos:column="31"/></name> <init pos:line="16" pos:column="32">= <expr><call><name><name pos:line="16" pos:column="34">e<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">.<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="36">mem_obj<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">-&gt;<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="45">expectedReplySize<pos:position pos:line="16" pos:column="62"/></name></name><argument_list pos:line="16" pos:column="62">()<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="65"/></decl_stmt>

    <comment type="line" pos:line="18" pos:column="5">// objects of unknown size are not allowed into memory cache, for now</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">expectedSize<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">&lt;<pos:position pos:line="19" pos:column="26"/></operator> <literal type="number" pos:line="19" pos:column="24">0<pos:position pos:line="19" pos:column="25"/></literal></expr>)<pos:position pos:line="19" pos:column="26"/></condition><then pos:line="19" pos:column="26"> <block pos:line="19" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">20<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="20">5<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="23">HERE<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">&lt;&lt;<pos:position pos:line="20" pos:column="36"/></operator> <literal type="string" pos:line="20" pos:column="31">"Unknown expected size: "<pos:position pos:line="20" pos:column="56"/></literal> <operator pos:line="20" pos:column="57">&lt;&lt;<pos:position pos:line="20" pos:column="65"/></operator> <name pos:line="20" pos:column="60">e<pos:position pos:line="20" pos:column="61"/></name></expr></argument>)<pos:position pos:line="20" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="63"/></expr_stmt>
        <return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="24" pos:column="5">// since we copy everything at once, we can only keep fully loaded entries</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">loadedSize<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">!=<pos:position pos:line="25" pos:column="22"/></operator> <name pos:line="25" pos:column="23">expectedSize<pos:position pos:line="25" pos:column="35"/></name></expr>)<pos:position pos:line="25" pos:column="36"/></condition><then pos:line="25" pos:column="36"> <block pos:line="25" pos:column="37">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">20<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="20">7<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="23">HERE<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">&lt;&lt;<pos:position pos:line="26" pos:column="36"/></operator> <literal type="string" pos:line="26" pos:column="31">"partially loaded: "<pos:position pos:line="26" pos:column="51"/></literal> <operator pos:line="26" pos:column="52">&lt;&lt;<pos:position pos:line="26" pos:column="60"/></operator> <name pos:line="26" pos:column="55">loadedSize<pos:position pos:line="26" pos:column="65"/></name> <operator pos:line="26" pos:column="66">&lt;&lt;<pos:position pos:line="26" pos:column="74"/></operator> <literal type="string" pos:line="26" pos:column="69">" != "<pos:position pos:line="26" pos:column="75"/></literal> <operator pos:line="26" pos:column="76">&lt;&lt;<pos:position pos:line="26" pos:column="84"/></operator>
               <name pos:line="27" pos:column="16">expectedSize<pos:position pos:line="27" pos:column="28"/></name></expr></argument>)<pos:position pos:line="27" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
        <return pos:line="28" pos:column="9">return;<pos:position pos:line="28" pos:column="16"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">e<pos:position pos:line="31" pos:column="10"/></name><operator pos:line="31" pos:column="10">.<pos:position pos:line="31" pos:column="11"/></operator><name pos:line="31" pos:column="11">mem_obj<pos:position pos:line="31" pos:column="18"/></name><operator pos:line="31" pos:column="18">-&gt;<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="20">vary_headers<pos:position pos:line="31" pos:column="32"/></name></name></expr>)<pos:position pos:line="31" pos:column="33"/></condition><then pos:line="31" pos:column="33"> <block pos:line="31" pos:column="34">{
        <comment type="line" pos:line="32" pos:column="9">// XXX: We must store/load SerialisedMetaData to cache Vary in RAM</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">debugs<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">20<pos:position pos:line="33" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="20">5<pos:position pos:line="33" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="23">"Vary not yet supported: "<pos:position pos:line="33" pos:column="49"/></literal> <operator pos:line="33" pos:column="50">&lt;&lt;<pos:position pos:line="33" pos:column="58"/></operator> <name><name pos:line="33" pos:column="53">e<pos:position pos:line="33" pos:column="54"/></name><operator pos:line="33" pos:column="54">.<pos:position pos:line="33" pos:column="55"/></operator><name pos:line="33" pos:column="55">mem_obj<pos:position pos:line="33" pos:column="62"/></name><operator pos:line="33" pos:column="62">-&gt;<pos:position pos:line="33" pos:column="67"/></operator><name pos:line="33" pos:column="64">vary_headers<pos:position pos:line="33" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="78"/></expr_stmt>
        <return pos:line="34" pos:column="9">return;<pos:position pos:line="34" pos:column="16"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">keep<pos:position pos:line="37" pos:column="9"/></name><argument_list pos:line="37" pos:column="9">(<argument><expr><name pos:line="37" pos:column="10">e<pos:position pos:line="37" pos:column="11"/></name></expr></argument>)<pos:position pos:line="37" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="13"/></expr_stmt> <comment type="line" pos:line="37" pos:column="14">// may still fail</comment>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
