<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3698_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">MemBuf<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">isNull<pos:position pos:line="2" pos:column="15"/></name></name><parameter_list pos:line="2" pos:column="15">()<pos:position pos:line="2" pos:column="17"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name> <operator pos:line="4" pos:column="14">&amp;&amp;<pos:position pos:line="4" pos:column="24"/></operator> <operator pos:line="4" pos:column="17">!<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">max_capacity<pos:position pos:line="4" pos:column="30"/></name> <operator pos:line="4" pos:column="31">&amp;&amp;<pos:position pos:line="4" pos:column="41"/></operator> <operator pos:line="4" pos:column="34">!<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">capacity<pos:position pos:line="4" pos:column="43"/></name> <operator pos:line="4" pos:column="44">&amp;&amp;<pos:position pos:line="4" pos:column="54"/></operator> <operator pos:line="4" pos:column="47">!<pos:position pos:line="4" pos:column="48"/></operator><name pos:line="4" pos:column="48">size<pos:position pos:line="4" pos:column="52"/></name></expr>)<pos:position pos:line="4" pos:column="53"/></condition><then pos:line="4" pos:column="53">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="number" pos:line="5" pos:column="16">1<pos:position pos:line="5" pos:column="17"/></literal></expr>;<pos:position pos:line="5" pos:column="18"/></return></block></then></if>		<comment type="block" pos:line="5" pos:column="33">/* is null (not initialized) */</comment>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">buf<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">&amp;&amp;<pos:position pos:line="7" pos:column="26"/></operator> <name pos:line="7" pos:column="19">max_capacity<pos:position pos:line="7" pos:column="31"/></name> <operator pos:line="7" pos:column="32">&amp;&amp;<pos:position pos:line="7" pos:column="42"/></operator> <name pos:line="7" pos:column="35">capacity<pos:position pos:line="7" pos:column="43"/></name></expr></argument>)<pos:position pos:line="7" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="45"/></expr_stmt>	<comment type="block" pos:line="7" pos:column="49">/* paranoid */</comment>

    <return pos:line="9" pos:column="5">return <expr><literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>;<pos:position pos:line="9" pos:column="14"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
