<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_688_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">_db_rotate_log<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">void<pos:position pos:line="2" pos:column="20"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="21"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">debug_log_file<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">==<pos:position pos:line="4" pos:column="26"/></operator> <name pos:line="4" pos:column="27">NULL<pos:position pos:line="4" pos:column="31"/></name></expr>)<pos:position pos:line="4" pos:column="32"/></condition><then pos:line="4" pos:column="32">
        <block type="pseudo"><return pos:line="5" pos:column="9">return;<pos:position pos:line="5" pos:column="16"/></return></block></then></if>

<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">S_ISREG<pos:position pos:line="7" pos:column="15"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">stat<pos:position pos:line="8" pos:column="16"/></name></name></type> <name pos:line="8" pos:column="17">sb<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">stat<pos:position pos:line="9" pos:column="13"/></name><argument_list pos:line="9" pos:column="13">(<argument><expr><name pos:line="9" pos:column="14">debug_log_file<pos:position pos:line="9" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="30">&amp;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="31">sb<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call> <operator pos:line="9" pos:column="35">==<pos:position pos:line="9" pos:column="37"/></operator> <literal type="number" pos:line="9" pos:column="38">0<pos:position pos:line="9" pos:column="39"/></literal></expr>)<pos:position pos:line="9" pos:column="40"/></condition><then pos:line="9" pos:column="40">
        <block type="pseudo"><if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">S_ISREG<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name><name pos:line="10" pos:column="21">sb<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">.<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="24">st_mode<pos:position pos:line="10" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call> <operator pos:line="10" pos:column="33">==<pos:position pos:line="10" pos:column="35"/></operator> <literal type="number" pos:line="10" pos:column="36">0<pos:position pos:line="10" pos:column="37"/></literal></expr>)<pos:position pos:line="10" pos:column="38"/></condition><then pos:line="10" pos:column="38">
            <block type="pseudo"><return pos:line="11" pos:column="13">return;<pos:position pos:line="11" pos:column="20"/></return></block></then></if></block></then></if>
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name></type> <name><name pos:line="14" pos:column="10">from<pos:position pos:line="14" pos:column="14"/></name><index pos:line="14" pos:column="14">[<expr><name pos:line="14" pos:column="15">MAXPATHLEN<pos:position pos:line="14" pos:column="25"/></name></expr>]<pos:position pos:line="14" pos:column="26"/></index></name></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">from<pos:position pos:line="15" pos:column="9"/></name><index pos:line="15" pos:column="9">[<expr><literal type="number" pos:line="15" pos:column="10">0<pos:position pos:line="15" pos:column="11"/></literal></expr>]<pos:position pos:line="15" pos:column="12"/></index></name> <operator pos:line="15" pos:column="13">=<pos:position pos:line="15" pos:column="14"/></operator> <literal type="char" pos:line="15" pos:column="15">'\0'<pos:position pos:line="15" pos:column="19"/></literal></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="17" pos:column="5">char<pos:position pos:line="17" pos:column="9"/></name></type> <name><name pos:line="17" pos:column="10">to<pos:position pos:line="17" pos:column="12"/></name><index pos:line="17" pos:column="12">[<expr><name pos:line="17" pos:column="13">MAXPATHLEN<pos:position pos:line="17" pos:column="23"/></name></expr>]<pos:position pos:line="17" pos:column="24"/></index></name></decl>;<pos:position pos:line="17" pos:column="25"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">to<pos:position pos:line="18" pos:column="7"/></name><index pos:line="18" pos:column="7">[<expr><literal type="number" pos:line="18" pos:column="8">0<pos:position pos:line="18" pos:column="9"/></literal></expr>]<pos:position pos:line="18" pos:column="10"/></index></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <literal type="char" pos:line="18" pos:column="13">'\0'<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/*
     * NOTE: we cannot use xrename here without having it in a
     * separate file -- tools.c has too many dependencies to be
     * used everywhere debug.c is used.
     */</comment>
    <comment type="block" pos:line="25" pos:column="5">/* Rotate numbers 0 through N up one */</comment>
    <for pos:line="26" pos:column="5">for <control pos:line="26" pos:column="9">(<init><decl><type><name pos:line="26" pos:column="10">int<pos:position pos:line="26" pos:column="13"/></name></type> <name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name> <init pos:line="26" pos:column="16">= <expr><name><name pos:line="26" pos:column="18">Debug<pos:position pos:line="26" pos:column="23"/></name><operator pos:line="26" pos:column="23">::<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="25">rotateNumber<pos:position pos:line="26" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="26" pos:column="38"/></init> <condition><expr><name pos:line="26" pos:column="39">i<pos:position pos:line="26" pos:column="40"/></name> <operator pos:line="26" pos:column="41">&gt;<pos:position pos:line="26" pos:column="45"/></operator> <literal type="number" pos:line="26" pos:column="43">1<pos:position pos:line="26" pos:column="44"/></literal></expr>;<pos:position pos:line="26" pos:column="45"/></condition><incr/>)<pos:position pos:line="26" pos:column="46"/></control> <block pos:line="26" pos:column="47">{
        <expr_stmt><expr><operator pos:line="27" pos:column="9">--<pos:position pos:line="27" pos:column="11"/></operator><name pos:line="27" pos:column="11">i<pos:position pos:line="27" pos:column="12"/></name></expr>;<pos:position pos:line="27" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">snprintf<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><name pos:line="28" pos:column="18">from<pos:position pos:line="28" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="24">MAXPATHLEN<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="36">"%s.%d"<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="45">debug_log_file<pos:position pos:line="28" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="61">i<pos:position pos:line="28" pos:column="62"/></name> <operator pos:line="28" pos:column="63">-<pos:position pos:line="28" pos:column="64"/></operator> <literal type="number" pos:line="28" pos:column="65">1<pos:position pos:line="28" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">snprintf<pos:position pos:line="29" pos:column="17"/></name><argument_list pos:line="29" pos:column="17">(<argument><expr><name pos:line="29" pos:column="18">to<pos:position pos:line="29" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="22">MAXPATHLEN<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="34">"%s.%d"<pos:position pos:line="29" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">debug_log_file<pos:position pos:line="29" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="59">i<pos:position pos:line="29" pos:column="60"/></name></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt>
<cpp:if pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">if<pos:position pos:line="30" pos:column="4"/></cpp:directive> <expr><name pos:line="30" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="30" pos:column="20"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">remove<pos:position pos:line="31" pos:column="15"/></name>
        <argument_list pos:line="32" pos:column="9">(<argument><expr><name pos:line="32" pos:column="10">to<pos:position pos:line="32" pos:column="12"/></name></expr></argument>)<pos:position pos:line="32" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="14"/></expr_stmt>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><name pos:line="34" pos:column="9">errno<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">=<pos:position pos:line="34" pos:column="16"/></operator> <literal type="number" pos:line="34" pos:column="17">0<pos:position pos:line="34" pos:column="18"/></literal></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">rename<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name pos:line="35" pos:column="20">from<pos:position pos:line="35" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="26">to<pos:position pos:line="35" pos:column="28"/></name></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call> <operator pos:line="35" pos:column="30">==<pos:position pos:line="35" pos:column="32"/></operator> <operator pos:line="35" pos:column="33">-<pos:position pos:line="35" pos:column="34"/></operator><literal type="number" pos:line="35" pos:column="34">1<pos:position pos:line="35" pos:column="35"/></literal></expr>)<pos:position pos:line="35" pos:column="36"/></condition><then pos:line="35" pos:column="36"> <block pos:line="35" pos:column="37">{
            <decl_stmt><decl><type><specifier pos:line="36" pos:column="13">const<pos:position pos:line="36" pos:column="18"/></specifier> <specifier pos:line="36" pos:column="19">auto<pos:position pos:line="36" pos:column="23"/></specifier></type> <name pos:line="36" pos:column="24">saved_errno<pos:position pos:line="36" pos:column="35"/></name> <init pos:line="36" pos:column="36">= <expr><name pos:line="36" pos:column="38">errno<pos:position pos:line="36" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="36" pos:column="44"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">debugs<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="number" pos:line="37" pos:column="20">0<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="23">DBG_IMPORTANT<pos:position pos:line="37" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="38">"log rotation failed: "<pos:position pos:line="37" pos:column="61"/></literal> <operator pos:line="37" pos:column="62">&lt;&lt;<pos:position pos:line="37" pos:column="70"/></operator> <call><name pos:line="37" pos:column="65">xstrerr<pos:position pos:line="37" pos:column="72"/></name><argument_list pos:line="37" pos:column="72">(<argument><expr><name pos:line="37" pos:column="73">saved_errno<pos:position pos:line="37" pos:column="84"/></name></expr></argument>)<pos:position pos:line="37" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="87"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>
    }<pos:position pos:line="39" pos:column="6"/></block></for>

    <comment type="block" pos:line="41" pos:column="5">/*
     * You can't rename open files on Microsoft "operating systems"
     * so we close before renaming.
     */</comment>
<cpp:if pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">if<pos:position pos:line="45" pos:column="4"/></cpp:directive> <expr><name pos:line="45" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="45" pos:column="20"/></name></expr></cpp:if>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">debug_log<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">!=<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="22">stderr<pos:position pos:line="46" pos:column="28"/></name></expr>)<pos:position pos:line="46" pos:column="29"/></condition><then pos:line="46" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="9">fclose<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><name pos:line="47" pos:column="16">debug_log<pos:position pos:line="47" pos:column="25"/></name></expr></argument>)<pos:position pos:line="47" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="27"/></expr_stmt></block></then></if>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="49" pos:column="5">/* Rotate the current log to .0 */</comment>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">Debug<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">::<pos:position pos:line="50" pos:column="16"/></operator><name pos:line="50" pos:column="16">rotateNumber<pos:position pos:line="50" pos:column="28"/></name></name> <operator pos:line="50" pos:column="29">&gt;<pos:position pos:line="50" pos:column="33"/></operator> <literal type="number" pos:line="50" pos:column="31">0<pos:position pos:line="50" pos:column="32"/></literal></expr>)<pos:position pos:line="50" pos:column="33"/></condition><then pos:line="50" pos:column="33"> <block pos:line="50" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">snprintf<pos:position pos:line="51" pos:column="17"/></name><argument_list pos:line="51" pos:column="17">(<argument><expr><name pos:line="51" pos:column="18">to<pos:position pos:line="51" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="22">MAXPATHLEN<pos:position pos:line="51" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="34">"%s.%d"<pos:position pos:line="51" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="43">debug_log_file<pos:position pos:line="51" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="59">0<pos:position pos:line="51" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="62"/></expr_stmt>
<cpp:if pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">if<pos:position pos:line="52" pos:column="4"/></cpp:directive> <expr><name pos:line="52" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="52" pos:column="20"/></name></expr></cpp:if>
        <expr_stmt><expr><name pos:line="53" pos:column="9">errno<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">=<pos:position pos:line="53" pos:column="16"/></operator> <literal type="number" pos:line="53" pos:column="17">0<pos:position pos:line="53" pos:column="18"/></literal></expr>;<pos:position pos:line="53" pos:column="19"/></expr_stmt>
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><call><name pos:line="54" pos:column="13">remove<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">to<pos:position pos:line="54" pos:column="22"/></name></expr></argument>)<pos:position pos:line="54" pos:column="23"/></argument_list></call> <operator pos:line="54" pos:column="24">==<pos:position pos:line="54" pos:column="26"/></operator> <operator pos:line="54" pos:column="27">-<pos:position pos:line="54" pos:column="28"/></operator><literal type="number" pos:line="54" pos:column="28">1<pos:position pos:line="54" pos:column="29"/></literal></expr>)<pos:position pos:line="54" pos:column="30"/></condition><then pos:line="54" pos:column="30"> <block pos:line="54" pos:column="31">{
            <decl_stmt><decl><type><specifier pos:line="55" pos:column="13">const<pos:position pos:line="55" pos:column="18"/></specifier> <specifier pos:line="55" pos:column="19">auto<pos:position pos:line="55" pos:column="23"/></specifier></type> <name pos:line="55" pos:column="24">saved_errno<pos:position pos:line="55" pos:column="35"/></name> <init pos:line="55" pos:column="36">= <expr><name pos:line="55" pos:column="38">errno<pos:position pos:line="55" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="55" pos:column="44"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">debugs<pos:position pos:line="56" pos:column="19"/></name><argument_list pos:line="56" pos:column="19">(<argument><expr><literal type="number" pos:line="56" pos:column="20">0<pos:position pos:line="56" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="23">DBG_IMPORTANT<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="38">"removal of log file "<pos:position pos:line="56" pos:column="60"/></literal> <operator pos:line="56" pos:column="61">&lt;&lt;<pos:position pos:line="56" pos:column="69"/></operator> <name pos:line="56" pos:column="64">to<pos:position pos:line="56" pos:column="66"/></name> <operator pos:line="56" pos:column="67">&lt;&lt;<pos:position pos:line="56" pos:column="75"/></operator> <literal type="string" pos:line="56" pos:column="70">" failed: "<pos:position pos:line="56" pos:column="81"/></literal> <operator pos:line="56" pos:column="82">&lt;&lt;<pos:position pos:line="56" pos:column="90"/></operator> <call><name pos:line="56" pos:column="85">xstrerr<pos:position pos:line="56" pos:column="92"/></name><argument_list pos:line="56" pos:column="92">(<argument><expr><name pos:line="56" pos:column="93">saved_errno<pos:position pos:line="56" pos:column="104"/></name></expr></argument>)<pos:position pos:line="56" pos:column="105"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="106"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="107"/></expr_stmt>
        }<pos:position pos:line="57" pos:column="10"/></block></then></if>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><name pos:line="59" pos:column="9">errno<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">=<pos:position pos:line="59" pos:column="16"/></operator> <literal type="number" pos:line="59" pos:column="17">0<pos:position pos:line="59" pos:column="18"/></literal></expr>;<pos:position pos:line="59" pos:column="19"/></expr_stmt>
        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><call><name pos:line="60" pos:column="13">rename<pos:position pos:line="60" pos:column="19"/></name><argument_list pos:line="60" pos:column="19">(<argument><expr><name pos:line="60" pos:column="20">debug_log_file<pos:position pos:line="60" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="36">to<pos:position pos:line="60" pos:column="38"/></name></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></call> <operator pos:line="60" pos:column="40">==<pos:position pos:line="60" pos:column="42"/></operator> <operator pos:line="60" pos:column="43">-<pos:position pos:line="60" pos:column="44"/></operator><literal type="number" pos:line="60" pos:column="44">1<pos:position pos:line="60" pos:column="45"/></literal></expr>)<pos:position pos:line="60" pos:column="46"/></condition><then pos:line="60" pos:column="46"> <block pos:line="60" pos:column="47">{
            <decl_stmt><decl><type><specifier pos:line="61" pos:column="13">const<pos:position pos:line="61" pos:column="18"/></specifier> <specifier pos:line="61" pos:column="19">auto<pos:position pos:line="61" pos:column="23"/></specifier></type> <name pos:line="61" pos:column="24">saved_errno<pos:position pos:line="61" pos:column="35"/></name> <init pos:line="61" pos:column="36">= <expr><name pos:line="61" pos:column="38">errno<pos:position pos:line="61" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="61" pos:column="44"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">debugs<pos:position pos:line="62" pos:column="19"/></name><argument_list pos:line="62" pos:column="19">(<argument><expr><literal type="number" pos:line="62" pos:column="20">0<pos:position pos:line="62" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="23">DBG_IMPORTANT<pos:position pos:line="62" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="38">"renaming file "<pos:position pos:line="62" pos:column="54"/></literal> <operator pos:line="62" pos:column="55">&lt;&lt;<pos:position pos:line="62" pos:column="63"/></operator> <name pos:line="62" pos:column="58">debug_log_file<pos:position pos:line="62" pos:column="72"/></name> <operator pos:line="62" pos:column="73">&lt;&lt;<pos:position pos:line="62" pos:column="81"/></operator> <literal type="string" pos:line="62" pos:column="76">" to "<pos:position pos:line="62" pos:column="82"/></literal>
                   <operator pos:line="63" pos:column="20">&lt;&lt;<pos:position pos:line="63" pos:column="28"/></operator> <name pos:line="63" pos:column="23">to<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">&lt;&lt;<pos:position pos:line="63" pos:column="34"/></operator> <literal type="string" pos:line="63" pos:column="29">"failed: "<pos:position pos:line="63" pos:column="39"/></literal> <operator pos:line="63" pos:column="40">&lt;&lt;<pos:position pos:line="63" pos:column="48"/></operator> <call><name pos:line="63" pos:column="43">xstrerr<pos:position pos:line="63" pos:column="50"/></name><argument_list pos:line="63" pos:column="50">(<argument><expr><name pos:line="63" pos:column="51">saved_errno<pos:position pos:line="63" pos:column="62"/></name></expr></argument>)<pos:position pos:line="63" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="65"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="67" pos:column="5">/* Close and reopen the log.  It may have been renamed "manually"
     * before HUP'ing us. */</comment>
    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">debug_log<pos:position pos:line="69" pos:column="18"/></name> <operator pos:line="69" pos:column="19">!=<pos:position pos:line="69" pos:column="21"/></operator> <name pos:line="69" pos:column="22">stderr<pos:position pos:line="69" pos:column="28"/></name></expr>)<pos:position pos:line="69" pos:column="29"/></condition><then pos:line="69" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="70" pos:column="9">debugOpenLog<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">(<argument><expr><name><name pos:line="70" pos:column="22">Debug<pos:position pos:line="70" pos:column="27"/></name><operator pos:line="70" pos:column="27">::<pos:position pos:line="70" pos:column="29"/></operator><name pos:line="70" pos:column="29">cache_log<pos:position pos:line="70" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt></block></then></if>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
