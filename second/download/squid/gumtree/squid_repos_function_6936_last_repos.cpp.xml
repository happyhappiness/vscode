<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6936_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Format<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">FmtConfig<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">parseFormats<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">()<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">name<pos:position pos:line="4" pos:column="15"/></name></decl>, <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="18">def<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">(<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">name<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">=<pos:position pos:line="6" pos:column="16"/></operator> <call><name><name pos:line="6" pos:column="17">ConfigParser<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">::<pos:position pos:line="6" pos:column="31"/></operator><name pos:line="6" pos:column="31">NextToken<pos:position pos:line="6" pos:column="40"/></name></name><argument_list pos:line="6" pos:column="40">()<pos:position pos:line="6" pos:column="42"/></argument_list></call><operator pos:line="6" pos:column="42">)<pos:position pos:line="6" pos:column="43"/></operator> <operator pos:line="6" pos:column="44">==<pos:position pos:line="6" pos:column="46"/></operator> <literal type="null" pos:line="6" pos:column="47">nullptr<pos:position pos:line="6" pos:column="54"/></literal></expr>)<pos:position pos:line="6" pos:column="55"/></condition><then pos:line="6" pos:column="55"> <block pos:line="6" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">self_destruct<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">()<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">def<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <call><name><name pos:line="11" pos:column="16">ConfigParser<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">::<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">NextQuotedOrToEol<pos:position pos:line="11" pos:column="47"/></name></name><argument_list pos:line="11" pos:column="47">()<pos:position pos:line="11" pos:column="49"/></argument_list></call><operator pos:line="11" pos:column="49">)<pos:position pos:line="11" pos:column="50"/></operator> <operator pos:line="11" pos:column="51">==<pos:position pos:line="11" pos:column="53"/></operator> <literal type="null" pos:line="11" pos:column="54">nullptr<pos:position pos:line="11" pos:column="61"/></literal></expr>)<pos:position pos:line="11" pos:column="62"/></condition><then pos:line="11" pos:column="62"> <block pos:line="11" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">self_destruct<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">()<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">debugs<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="number" pos:line="16" pos:column="12">3<pos:position pos:line="16" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="15">2<pos:position pos:line="16" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="18">"Custom Format for '"<pos:position pos:line="16" pos:column="39"/></literal> <operator pos:line="16" pos:column="40">&lt;&lt;<pos:position pos:line="16" pos:column="48"/></operator> <name pos:line="16" pos:column="43">name<pos:position pos:line="16" pos:column="47"/></name> <operator pos:line="16" pos:column="48">&lt;&lt;<pos:position pos:line="16" pos:column="56"/></operator> <literal type="string" pos:line="16" pos:column="51">"' is '"<pos:position pos:line="16" pos:column="59"/></literal> <operator pos:line="16" pos:column="60">&lt;&lt;<pos:position pos:line="16" pos:column="68"/></operator> <name pos:line="16" pos:column="63">def<pos:position pos:line="16" pos:column="66"/></name> <operator pos:line="16" pos:column="67">&lt;&lt;<pos:position pos:line="16" pos:column="75"/></operator> <literal type="string" pos:line="16" pos:column="70">"'"<pos:position pos:line="16" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="75"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="18" pos:column="5">Format<pos:position pos:line="18" pos:column="11"/></name> <modifier pos:line="18" pos:column="12">*<pos:position pos:line="18" pos:column="13"/></modifier></type><name pos:line="18" pos:column="13">nlf<pos:position pos:line="18" pos:column="16"/></name> <init pos:line="18" pos:column="17">= <expr><operator pos:line="18" pos:column="19">new<pos:position pos:line="18" pos:column="22"/></operator> <call><name pos:line="18" pos:column="23">Format<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">name<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="36"/></decl_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><call><name><name pos:line="20" pos:column="10">nlf<pos:position pos:line="20" pos:column="13"/></name><operator pos:line="20" pos:column="13">-&gt;<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="15">parse<pos:position pos:line="20" pos:column="20"/></name></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">def<pos:position pos:line="20" pos:column="24"/></name></expr></argument>)<pos:position pos:line="20" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="26"/></condition><then pos:line="20" pos:column="26"> <block pos:line="20" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">self_destruct<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">()<pos:position pos:line="21" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt>
        <return pos:line="22" pos:column="9">return;<pos:position pos:line="22" pos:column="16"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="25" pos:column="5">// add to global config list</comment>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">nlf<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">-&gt;<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="10">next<pos:position pos:line="26" pos:column="14"/></name></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">formats<pos:position pos:line="26" pos:column="24"/></name></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">formats<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <name pos:line="27" pos:column="15">nlf<pos:position pos:line="27" pos:column="18"/></name></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
