<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5069_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ConnOpener<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">cancelSleep<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">calls_<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">.<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">sleep_<pos:position pos:line="4" pos:column="22"/></name></name></expr>)<pos:position pos:line="4" pos:column="23"/></condition><then pos:line="4" pos:column="23"> <block pos:line="4" pos:column="24">{
        <comment type="line" pos:line="5" pos:column="9">// It would be nice to delete the sleep event, but it might be out of</comment>
        <comment type="line" pos:line="6" pos:column="9">// the event queue and in the async queue already, so (a) we do not know</comment>
        <comment type="line" pos:line="7" pos:column="9">// whether we can safely delete the call ptr here and (b) eventDelete()</comment>
        <comment type="line" pos:line="8" pos:column="9">// will assert if the event went async. Thus, we let the event run so</comment>
        <comment type="line" pos:line="9" pos:column="9">// that it deletes the call ptr [after this job is gone]. Note that we</comment>
        <comment type="line" pos:line="10" pos:column="9">// are called only when the job ends so this "hanging event" will do</comment>
        <comment type="line" pos:line="11" pos:column="9">// nothing but deleting the call ptr.  TODO: Revise eventDelete() API.</comment>
        <comment type="line" pos:line="12" pos:column="9">// eventDelete(Comm::ConnOpener::DelayedConnectRetry, calls_.sleep);</comment>
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">calls_<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">sleep_<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <literal type="boolean" pos:line="13" pos:column="25">false<pos:position pos:line="13" pos:column="30"/></literal></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">5<pos:position pos:line="14" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="19">9<pos:position pos:line="14" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="22">conn_<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&lt;&lt;<pos:position pos:line="14" pos:column="36"/></operator> <literal type="string" pos:line="14" pos:column="31">" stops sleeping"<pos:position pos:line="14" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
