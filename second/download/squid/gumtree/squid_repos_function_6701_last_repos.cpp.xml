<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6701_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">size_t<pos:position pos:line="1" pos:column="7"/></name></type>
<name><name pos:line="2" pos:column="1">ESIContext<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">send<pos:position pos:line="2" pos:column="17"/></name></name> <parameter_list pos:line="2" pos:column="18">()<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">86<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"ESIContext::send: this="<pos:position pos:line="4" pos:column="44"/></literal> <operator pos:line="4" pos:column="45">&lt;&lt;<pos:position pos:line="4" pos:column="53"/></operator> <name pos:line="4" pos:column="48">this<pos:position pos:line="4" pos:column="52"/></name></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="54"/></expr_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* send any processed data */</comment>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">trimBlanks<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">()<pos:position pos:line="7" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="18"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name><name pos:line="9" pos:column="10">flags<pos:position pos:line="9" pos:column="15"/></name><operator pos:line="9" pos:column="15">.<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="16">clientwantsdata<pos:position pos:line="9" pos:column="31"/></name></name></expr>)<pos:position pos:line="9" pos:column="32"/></condition><then pos:line="9" pos:column="32"> <block pos:line="9" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">86<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">5<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="23">"ESIContext::send: Client does not want data - not sending anything"<pos:position pos:line="10" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="93"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name><name pos:line="14" pos:column="9">tree<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">.<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">getRaw<pos:position pos:line="14" pos:column="20"/></name></name><argument_list pos:line="14" pos:column="20">()<pos:position pos:line="14" pos:column="22"/></argument_list></call> <operator pos:line="14" pos:column="23">&amp;&amp;<pos:position pos:line="14" pos:column="33"/></operator> <call><name><name pos:line="14" pos:column="26">tree<pos:position pos:line="14" pos:column="30"/></name><operator pos:line="14" pos:column="30">-&gt;<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="32">mayFail<pos:position pos:line="14" pos:column="39"/></name></name><argument_list pos:line="14" pos:column="39">()<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="42"/></condition><then pos:line="14" pos:column="42"> <block pos:line="14" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">debugs<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><literal type="number" pos:line="15" pos:column="16">86<pos:position pos:line="15" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="20">5<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="23">"ESIContext::send: Tree may fail. Not sending."<pos:position pos:line="15" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="72"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then> <else pos:line="17" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="18" pos:column="9">flags<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">.<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">oktosend<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="26">1<pos:position pos:line="18" pos:column="27"/></literal></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt></block></else></if>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="20" pos:column="5">0<pos:position pos:line="20" pos:column="6"/></literal></expr></cpp:if>

    if (!flags.oktosend) {

        fatal("ESIContext::send: Not OK to send.\n");
        return 0;
    }

<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">!<pos:position pos:line="30" pos:column="10"/></operator><operator pos:line="30" pos:column="10">(<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="11">rep<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">||<pos:position pos:line="30" pos:column="17"/></operator> <operator pos:line="30" pos:column="18">(<pos:position pos:line="30" pos:column="19"/></operator><call><name><name pos:line="30" pos:column="19">outbound<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">.<pos:position pos:line="30" pos:column="28"/></operator><name pos:line="30" pos:column="28">getRaw<pos:position pos:line="30" pos:column="34"/></name></name><argument_list pos:line="30" pos:column="34">()<pos:position pos:line="30" pos:column="36"/></argument_list></call> <operator pos:line="30" pos:column="37">&amp;&amp;<pos:position pos:line="30" pos:column="47"/></operator>
                  <name><name pos:line="31" pos:column="19">outbound<pos:position pos:line="31" pos:column="27"/></name><operator pos:line="31" pos:column="27">-&gt;<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="29">len<pos:position pos:line="31" pos:column="32"/></name></name> <operator pos:line="31" pos:column="33">&amp;&amp;<pos:position pos:line="31" pos:column="43"/></operator> <operator pos:line="31" pos:column="36">(<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="37">outbound_offset<pos:position pos:line="31" pos:column="52"/></name> <operator pos:line="31" pos:column="53">&lt;=<pos:position pos:line="31" pos:column="58"/></operator> <name><name pos:line="31" pos:column="56">outbound<pos:position pos:line="31" pos:column="64"/></name><operator pos:line="31" pos:column="64">-&gt;<pos:position pos:line="31" pos:column="69"/></operator><name pos:line="31" pos:column="66">len<pos:position pos:line="31" pos:column="69"/></name></name><operator pos:line="31" pos:column="69">)<pos:position pos:line="31" pos:column="70"/></operator><operator pos:line="31" pos:column="70">)<pos:position pos:line="31" pos:column="71"/></operator><operator pos:line="31" pos:column="71">)<pos:position pos:line="31" pos:column="72"/></operator></expr>)<pos:position pos:line="31" pos:column="73"/></condition><then pos:line="31" pos:column="73"> <block pos:line="31" pos:column="74">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">86<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="20">5<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"ESIContext::send: Nothing to send."<pos:position pos:line="32" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="61"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">0<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">debugs<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="number" pos:line="36" pos:column="12">86<pos:position pos:line="36" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="16">5<pos:position pos:line="36" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="19">"ESIContext::send: Sending something..."<pos:position pos:line="36" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="61"/></expr_stmt>
    <comment type="block" pos:line="37" pos:column="5">/* Yes! Send it without asking for more upstream */</comment>
    <comment type="block" pos:line="38" pos:column="5">/* memcopying because the client provided the buffer */</comment>
    <comment type="block" pos:line="39" pos:column="5">/* TODO: skip data until pos == next-&gt;readoff; */</comment>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">assert<pos:position pos:line="40" pos:column="11"/></name> <argument_list pos:line="40" pos:column="12">(<argument><expr><name><name pos:line="40" pos:column="13">thisNode<pos:position pos:line="40" pos:column="21"/></name><operator pos:line="40" pos:column="21">-&gt;<pos:position pos:line="40" pos:column="26"/></operator><name pos:line="40" pos:column="23">data<pos:position pos:line="40" pos:column="27"/></name></name> <operator pos:line="40" pos:column="28">==<pos:position pos:line="40" pos:column="30"/></operator> <name pos:line="40" pos:column="31">this<pos:position pos:line="40" pos:column="35"/></name></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">clientStreamNode<pos:position pos:line="41" pos:column="21"/></name> <modifier pos:line="41" pos:column="22">*<pos:position pos:line="41" pos:column="23"/></modifier></type><name pos:line="41" pos:column="23">next<pos:position pos:line="41" pos:column="27"/></name> <init pos:line="41" pos:column="28">= <expr><call><name><name pos:line="41" pos:column="30">thisNode<pos:position pos:line="41" pos:column="38"/></name><operator pos:line="41" pos:column="38">-&gt;<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="40">next<pos:position pos:line="41" pos:column="44"/></name></name><argument_list pos:line="41" pos:column="44">()<pos:position pos:line="41" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">ESIContext<pos:position pos:line="42" pos:column="15"/></name> <modifier pos:line="42" pos:column="16">*<pos:position pos:line="42" pos:column="17"/></modifier></type><name pos:line="42" pos:column="17">templock<pos:position pos:line="42" pos:column="25"/></name> <init pos:line="42" pos:column="26">= <expr><call><name pos:line="42" pos:column="28">cbdataReference<pos:position pos:line="42" pos:column="43"/></name> <argument_list pos:line="42" pos:column="44">(<argument><expr><name pos:line="42" pos:column="45">this<pos:position pos:line="42" pos:column="49"/></name></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="42" pos:column="51"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">size_t<pos:position pos:line="43" pos:column="11"/></name></type> <name pos:line="43" pos:column="12">len<pos:position pos:line="43" pos:column="15"/></name> <init pos:line="43" pos:column="16">= <expr><literal type="number" pos:line="43" pos:column="18">0<pos:position pos:line="43" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="43" pos:column="20"/></decl_stmt>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><call><name><name pos:line="45" pos:column="9">outbound<pos:position pos:line="45" pos:column="17"/></name><operator pos:line="45" pos:column="17">.<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="18">getRaw<pos:position pos:line="45" pos:column="24"/></name></name><argument_list pos:line="45" pos:column="24">()<pos:position pos:line="45" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="27"/></condition><then pos:line="45" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="9">len<pos:position pos:line="46" pos:column="12"/></name> <operator pos:line="46" pos:column="13">=<pos:position pos:line="46" pos:column="14"/></operator> <call><name pos:line="46" pos:column="15">min<pos:position pos:line="46" pos:column="18"/></name> <argument_list pos:line="46" pos:column="19">(<argument><expr><name><name pos:line="46" pos:column="20">next<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">-&gt;<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="26">readBuffer<pos:position pos:line="46" pos:column="36"/></name><operator pos:line="46" pos:column="36">.<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="37">length<pos:position pos:line="46" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="45">outbound<pos:position pos:line="46" pos:column="53"/></name><operator pos:line="46" pos:column="53">-&gt;<pos:position pos:line="46" pos:column="58"/></operator><name pos:line="46" pos:column="55">len<pos:position pos:line="46" pos:column="58"/></name></name> <operator pos:line="46" pos:column="59">-<pos:position pos:line="46" pos:column="60"/></operator> <name pos:line="46" pos:column="61">outbound_offset<pos:position pos:line="46" pos:column="76"/></name></expr></argument>)<pos:position pos:line="46" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="78"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="48" pos:column="5">/* prevent corruption on range requests, even though we don't support them yet */</comment>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">assert<pos:position pos:line="49" pos:column="11"/></name> <argument_list pos:line="49" pos:column="12">(<argument><expr><name pos:line="49" pos:column="13">pos<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">==<pos:position pos:line="49" pos:column="19"/></operator> <name><name pos:line="49" pos:column="20">next<pos:position pos:line="49" pos:column="24"/></name><operator pos:line="49" pos:column="24">-&gt;<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="26">readBuffer<pos:position pos:line="49" pos:column="36"/></name><operator pos:line="49" pos:column="36">.<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="37">offset<pos:position pos:line="49" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt>

    <comment type="block" pos:line="51" pos:column="5">/* We must send data or a reply */</comment>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">assert<pos:position pos:line="52" pos:column="11"/></name> <argument_list pos:line="52" pos:column="12">(<argument><expr><name pos:line="52" pos:column="13">len<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">!=<pos:position pos:line="52" pos:column="19"/></operator> <literal type="number" pos:line="52" pos:column="20">0<pos:position pos:line="52" pos:column="21"/></literal> <operator pos:line="52" pos:column="22">||<pos:position pos:line="52" pos:column="24"/></operator> <name pos:line="52" pos:column="25">rep<pos:position pos:line="52" pos:column="28"/></name> <operator pos:line="52" pos:column="29">!=<pos:position pos:line="52" pos:column="31"/></operator> <name pos:line="52" pos:column="32">NULL<pos:position pos:line="52" pos:column="36"/></name></expr></argument>)<pos:position pos:line="52" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt>

    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">len<pos:position pos:line="54" pos:column="12"/></name></expr>)<pos:position pos:line="54" pos:column="13"/></condition><then pos:line="54" pos:column="13"> <block pos:line="54" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">memcpy<pos:position pos:line="55" pos:column="15"/></name><argument_list pos:line="55" pos:column="15">(<argument><expr><name><name pos:line="55" pos:column="16">next<pos:position pos:line="55" pos:column="20"/></name><operator pos:line="55" pos:column="20">-&gt;<pos:position pos:line="55" pos:column="25"/></operator><name pos:line="55" pos:column="22">readBuffer<pos:position pos:line="55" pos:column="32"/></name><operator pos:line="55" pos:column="32">.<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="33">data<pos:position pos:line="55" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="39">&amp;<pos:position pos:line="55" pos:column="44"/></operator><name><name pos:line="55" pos:column="40">outbound<pos:position pos:line="55" pos:column="48"/></name><operator pos:line="55" pos:column="48">-&gt;<pos:position pos:line="55" pos:column="53"/></operator><name pos:line="55" pos:column="50">buf<pos:position pos:line="55" pos:column="53"/></name><index pos:line="55" pos:column="53">[<expr><name pos:line="55" pos:column="54">outbound_offset<pos:position pos:line="55" pos:column="69"/></name></expr>]<pos:position pos:line="55" pos:column="70"/></index></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="72">len<pos:position pos:line="55" pos:column="75"/></name></expr></argument>)<pos:position pos:line="55" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="77"/></expr_stmt>

        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">len<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">+<pos:position pos:line="57" pos:column="18"/></operator> <name pos:line="57" pos:column="19">outbound_offset<pos:position pos:line="57" pos:column="34"/></name> <operator pos:line="57" pos:column="35">==<pos:position pos:line="57" pos:column="37"/></operator> <name><name pos:line="57" pos:column="38">outbound<pos:position pos:line="57" pos:column="46"/></name><operator pos:line="57" pos:column="46">-&gt;<pos:position pos:line="57" pos:column="51"/></operator><name pos:line="57" pos:column="48">len<pos:position pos:line="57" pos:column="51"/></name></name></expr>)<pos:position pos:line="57" pos:column="52"/></condition><then pos:line="57" pos:column="52"> <block pos:line="57" pos:column="53">{
            <decl_stmt><decl><type><name><name pos:line="58" pos:column="13">ESISegment<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">::<pos:position pos:line="58" pos:column="25"/></operator><name pos:line="58" pos:column="25">Pointer<pos:position pos:line="58" pos:column="32"/></name></name></type> <name pos:line="58" pos:column="33">temp<pos:position pos:line="58" pos:column="37"/></name> <init pos:line="58" pos:column="38">= <expr><name><name pos:line="58" pos:column="40">outbound<pos:position pos:line="58" pos:column="48"/></name><operator pos:line="58" pos:column="48">-&gt;<pos:position pos:line="58" pos:column="53"/></operator><name pos:line="58" pos:column="50">next<pos:position pos:line="58" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="58" pos:column="55"/></decl_stmt>
            <comment type="block" pos:line="59" pos:column="13">/* remove the used buffer */</comment>
            <expr_stmt><expr><name pos:line="60" pos:column="13">outbound_offset<pos:position pos:line="60" pos:column="28"/></name> <operator pos:line="60" pos:column="29">=<pos:position pos:line="60" pos:column="30"/></operator> <literal type="number" pos:line="60" pos:column="31">0<pos:position pos:line="60" pos:column="32"/></literal></expr>;<pos:position pos:line="60" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name pos:line="61" pos:column="13">outbound<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">=<pos:position pos:line="61" pos:column="23"/></operator> <name pos:line="61" pos:column="24">temp<pos:position pos:line="61" pos:column="28"/></name></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="62" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="64" pos:column="9">pos<pos:position pos:line="64" pos:column="12"/></name> <operator pos:line="64" pos:column="13">+=<pos:position pos:line="64" pos:column="15"/></operator> <name pos:line="64" pos:column="16">len<pos:position pos:line="64" pos:column="19"/></name></expr>;<pos:position pos:line="64" pos:column="20"/></expr_stmt>

        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><operator pos:line="66" pos:column="13">!<pos:position pos:line="66" pos:column="14"/></operator><call><name><name pos:line="66" pos:column="14">outbound<pos:position pos:line="66" pos:column="22"/></name><operator pos:line="66" pos:column="22">.<pos:position pos:line="66" pos:column="23"/></operator><name pos:line="66" pos:column="23">getRaw<pos:position pos:line="66" pos:column="29"/></name></name><argument_list pos:line="66" pos:column="29">()<pos:position pos:line="66" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="32"/></condition><then pos:line="66" pos:column="32">
            <block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="13">outboundtail<pos:position pos:line="67" pos:column="25"/></name> <operator pos:line="67" pos:column="26">=<pos:position pos:line="67" pos:column="27"/></operator> <name pos:line="67" pos:column="28">NULL<pos:position pos:line="67" pos:column="32"/></name></expr>;<pos:position pos:line="67" pos:column="33"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="69" pos:column="9">trimBlanks<pos:position pos:line="69" pos:column="19"/></name><argument_list pos:line="69" pos:column="19">()<pos:position pos:line="69" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="72" pos:column="5">flags<pos:position pos:line="72" pos:column="10"/></name><operator pos:line="72" pos:column="10">.<pos:position pos:line="72" pos:column="11"/></operator><name pos:line="72" pos:column="11">clientwantsdata<pos:position pos:line="72" pos:column="26"/></name></name> <operator pos:line="72" pos:column="27">=<pos:position pos:line="72" pos:column="28"/></operator> <literal type="number" pos:line="72" pos:column="29">0<pos:position pos:line="72" pos:column="30"/></literal></expr>;<pos:position pos:line="72" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="73" pos:column="5">debugs<pos:position pos:line="73" pos:column="11"/></name><argument_list pos:line="73" pos:column="11">(<argument><expr><literal type="number" pos:line="73" pos:column="12">86<pos:position pos:line="73" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="16">5<pos:position pos:line="73" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="19">"ESIContext::send: this="<pos:position pos:line="73" pos:column="44"/></literal> <operator pos:line="73" pos:column="45">&lt;&lt;<pos:position pos:line="73" pos:column="53"/></operator> <name pos:line="73" pos:column="48">this<pos:position pos:line="73" pos:column="52"/></name> <operator pos:line="73" pos:column="53">&lt;&lt;<pos:position pos:line="73" pos:column="61"/></operator> <literal type="string" pos:line="73" pos:column="56">" Client no longer wants data "<pos:position pos:line="73" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="89"/></expr_stmt>
    <comment type="block" pos:line="74" pos:column="5">/* Deal with re-entrancy */</comment>
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">HttpReplyPointer<pos:position pos:line="75" pos:column="21"/></name></type> <name pos:line="75" pos:column="22">temprep<pos:position pos:line="75" pos:column="29"/></name> <init pos:line="75" pos:column="30">= <expr><name pos:line="75" pos:column="32">rep<pos:position pos:line="75" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="75" pos:column="36"/></decl_stmt>
    <expr_stmt><expr><name pos:line="76" pos:column="5">rep<pos:position pos:line="76" pos:column="8"/></name> <operator pos:line="76" pos:column="9">=<pos:position pos:line="76" pos:column="10"/></operator> <name pos:line="76" pos:column="11">NULL<pos:position pos:line="76" pos:column="15"/></name></expr>;<pos:position pos:line="76" pos:column="16"/></expr_stmt> <comment type="block" pos:line="76" pos:column="17">/* freed downstream */</comment>

    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><name pos:line="78" pos:column="9">temprep<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">&amp;&amp;<pos:position pos:line="78" pos:column="27"/></operator> <name pos:line="78" pos:column="20">varState<pos:position pos:line="78" pos:column="28"/></name></expr>)<pos:position pos:line="78" pos:column="29"/></condition><then pos:line="78" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="79" pos:column="9">varState<pos:position pos:line="79" pos:column="17"/></name><operator pos:line="79" pos:column="17">-&gt;<pos:position pos:line="79" pos:column="22"/></operator><name pos:line="79" pos:column="19">buildVary<pos:position pos:line="79" pos:column="28"/></name></name><argument_list pos:line="79" pos:column="28">(<argument><expr><call><name><name pos:line="79" pos:column="29">temprep<pos:position pos:line="79" pos:column="36"/></name><operator pos:line="79" pos:column="36">.<pos:position pos:line="79" pos:column="37"/></operator><name pos:line="79" pos:column="37">getRaw<pos:position pos:line="79" pos:column="43"/></name></name><argument_list pos:line="79" pos:column="43">()<pos:position pos:line="79" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="79" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="47"/></expr_stmt></block></then></if>

    <block pos:line="81" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="82" pos:column="9">StoreIOBuffer<pos:position pos:line="82" pos:column="22"/></name></type> <name pos:line="82" pos:column="23">tempBuffer<pos:position pos:line="82" pos:column="33"/></name></decl>;<pos:position pos:line="82" pos:column="34"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="83" pos:column="9">tempBuffer<pos:position pos:line="83" pos:column="19"/></name><operator pos:line="83" pos:column="19">.<pos:position pos:line="83" pos:column="20"/></operator><name pos:line="83" pos:column="20">length<pos:position pos:line="83" pos:column="26"/></name></name> <operator pos:line="83" pos:column="27">=<pos:position pos:line="83" pos:column="28"/></operator> <name pos:line="83" pos:column="29">len<pos:position pos:line="83" pos:column="32"/></name></expr>;<pos:position pos:line="83" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="84" pos:column="9">tempBuffer<pos:position pos:line="84" pos:column="19"/></name><operator pos:line="84" pos:column="19">.<pos:position pos:line="84" pos:column="20"/></operator><name pos:line="84" pos:column="20">offset<pos:position pos:line="84" pos:column="26"/></name></name> <operator pos:line="84" pos:column="27">=<pos:position pos:line="84" pos:column="28"/></operator> <name pos:line="84" pos:column="29">pos<pos:position pos:line="84" pos:column="32"/></name> <operator pos:line="84" pos:column="33">-<pos:position pos:line="84" pos:column="34"/></operator> <name pos:line="84" pos:column="35">len<pos:position pos:line="84" pos:column="38"/></name></expr>;<pos:position pos:line="84" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="85" pos:column="9">tempBuffer<pos:position pos:line="85" pos:column="19"/></name><operator pos:line="85" pos:column="19">.<pos:position pos:line="85" pos:column="20"/></operator><name pos:line="85" pos:column="20">data<pos:position pos:line="85" pos:column="24"/></name></name> <operator pos:line="85" pos:column="25">=<pos:position pos:line="85" pos:column="26"/></operator> <name><name pos:line="85" pos:column="27">next<pos:position pos:line="85" pos:column="31"/></name><operator pos:line="85" pos:column="31">-&gt;<pos:position pos:line="85" pos:column="36"/></operator><name pos:line="85" pos:column="33">readBuffer<pos:position pos:line="85" pos:column="43"/></name><operator pos:line="85" pos:column="43">.<pos:position pos:line="85" pos:column="44"/></operator><name pos:line="85" pos:column="44">data<pos:position pos:line="85" pos:column="48"/></name></name></expr>;<pos:position pos:line="85" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="86" pos:column="9">clientStreamCallback<pos:position pos:line="86" pos:column="29"/></name> <argument_list pos:line="86" pos:column="30">(<argument><expr><name pos:line="86" pos:column="31">thisNode<pos:position pos:line="86" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="41">http<pos:position pos:line="86" pos:column="45"/></name></expr></argument>, <argument><expr><call><name><name pos:line="86" pos:column="47">temprep<pos:position pos:line="86" pos:column="54"/></name><operator pos:line="86" pos:column="54">.<pos:position pos:line="86" pos:column="55"/></operator><name pos:line="86" pos:column="55">getRaw<pos:position pos:line="86" pos:column="61"/></name></name><argument_list pos:line="86" pos:column="61">()<pos:position pos:line="86" pos:column="63"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="86" pos:column="65">tempBuffer<pos:position pos:line="86" pos:column="75"/></name></expr></argument>)<pos:position pos:line="86" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="87" pos:column="6"/></block>

    <if pos:line="89" pos:column="5">if <condition pos:line="89" pos:column="8">(<expr><name pos:line="89" pos:column="9">len<pos:position pos:line="89" pos:column="12"/></name> <operator pos:line="89" pos:column="13">==<pos:position pos:line="89" pos:column="15"/></operator> <literal type="number" pos:line="89" pos:column="16">0<pos:position pos:line="89" pos:column="17"/></literal></expr>)<pos:position pos:line="89" pos:column="18"/></condition><then pos:line="89" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="9">len<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <literal type="number" pos:line="90" pos:column="15">1<pos:position pos:line="90" pos:column="16"/></literal></expr>;<pos:position pos:line="90" pos:column="17"/></expr_stmt></block></then></if> <comment type="block" pos:line="90" pos:column="18">/* tell the caller we sent something (because we sent headers */</comment>

    <expr_stmt><expr><call><name pos:line="92" pos:column="5">cbdataReferenceDone<pos:position pos:line="92" pos:column="24"/></name> <argument_list pos:line="92" pos:column="25">(<argument><expr><name pos:line="92" pos:column="26">templock<pos:position pos:line="92" pos:column="34"/></name></expr></argument>)<pos:position pos:line="92" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="94" pos:column="5">debugs<pos:position pos:line="94" pos:column="11"/></name> <argument_list pos:line="94" pos:column="12">(<argument><expr><literal type="number" pos:line="94" pos:column="13">86<pos:position pos:line="94" pos:column="15"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="94" pos:column="16">5<pos:position pos:line="94" pos:column="17"/></literal></expr></argument>,<argument><expr><literal type="string" pos:line="94" pos:column="18">"ESIContext::send: this="<pos:position pos:line="94" pos:column="43"/></literal> <operator pos:line="94" pos:column="44">&lt;&lt;<pos:position pos:line="94" pos:column="52"/></operator> <name pos:line="94" pos:column="47">this<pos:position pos:line="94" pos:column="51"/></name> <operator pos:line="94" pos:column="52">&lt;&lt;<pos:position pos:line="94" pos:column="60"/></operator> <literal type="string" pos:line="94" pos:column="55">" sent "<pos:position pos:line="94" pos:column="63"/></literal> <operator pos:line="94" pos:column="64">&lt;&lt;<pos:position pos:line="94" pos:column="72"/></operator> <name pos:line="94" pos:column="67">len<pos:position pos:line="94" pos:column="70"/></name></expr></argument>)<pos:position pos:line="94" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="72"/></expr_stmt>

    <return pos:line="96" pos:column="5">return <expr><name pos:line="96" pos:column="12">len<pos:position pos:line="96" pos:column="15"/></name></expr>;<pos:position pos:line="96" pos:column="16"/></return>
}<pos:position pos:line="97" pos:column="2"/></block></function></unit>
