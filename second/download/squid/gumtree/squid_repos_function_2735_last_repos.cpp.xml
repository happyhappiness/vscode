<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2735_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemStore<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">write<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">StoreEntry<pos:position pos:line="2" pos:column="27"/></name> <modifier pos:line="2" pos:column="28">&amp;<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="29">e<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name><name pos:line="4" pos:column="12">e<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">.<pos:position pos:line="4" pos:column="14"/></operator><name pos:line="4" pos:column="14">mem_obj<pos:position pos:line="4" pos:column="21"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="23"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">20<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">7<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="19">"entry "<pos:position pos:line="6" pos:column="27"/></literal> <operator pos:line="6" pos:column="28">&lt;&lt;<pos:position pos:line="6" pos:column="36"/></operator> <name pos:line="6" pos:column="31">e<pos:position pos:line="6" pos:column="32"/></name></expr></argument>)<pos:position pos:line="6" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="34"/></expr_stmt>

    <switch pos:line="8" pos:column="5">switch <condition pos:line="8" pos:column="12">(<expr><name><name pos:line="8" pos:column="13">e<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">mem_obj<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">-&gt;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="24">memCache<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">.<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">io<pos:position pos:line="8" pos:column="35"/></name></name></expr>)<pos:position pos:line="8" pos:column="36"/></condition> <block pos:line="8" pos:column="37">{
    <case pos:line="9" pos:column="5">case <expr><name><name pos:line="9" pos:column="10">MemObject<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">::<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">ioUndecided<pos:position pos:line="9" pos:column="32"/></name></name></expr>:<pos:position pos:line="9" pos:column="33"/></case>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><operator pos:line="10" pos:column="13">!<pos:position pos:line="10" pos:column="14"/></operator><call><name pos:line="10" pos:column="14">shouldCache<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">e<pos:position pos:line="10" pos:column="27"/></name></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call> <operator pos:line="10" pos:column="29">||<pos:position pos:line="10" pos:column="31"/></operator> <operator pos:line="10" pos:column="32">!<pos:position pos:line="10" pos:column="33"/></operator><call><name pos:line="10" pos:column="33">startCaching<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">(<argument><expr><name pos:line="10" pos:column="46">e<pos:position pos:line="10" pos:column="47"/></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="49"/></condition><then pos:line="10" pos:column="49"> <block pos:line="10" pos:column="50">{
            <expr_stmt><expr><name><name pos:line="11" pos:column="13">e<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">.<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">mem_obj<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">-&gt;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="24">memCache<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">.<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="33">io<pos:position pos:line="11" pos:column="35"/></name></name> <operator pos:line="11" pos:column="36">=<pos:position pos:line="11" pos:column="37"/></operator> <name><name pos:line="11" pos:column="38">MemObject<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">::<pos:position pos:line="11" pos:column="49"/></operator><name pos:line="11" pos:column="49">ioDone<pos:position pos:line="11" pos:column="55"/></name></name></expr>;<pos:position pos:line="11" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="12" pos:column="13">e<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">.<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">memOutDecision<pos:position pos:line="12" pos:column="29"/></name></name><argument_list pos:line="12" pos:column="29">(<argument><expr><literal type="boolean" pos:line="12" pos:column="30">false<pos:position pos:line="12" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
            <return pos:line="13" pos:column="13">return;<pos:position pos:line="13" pos:column="20"/></return>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
        <break pos:line="15" pos:column="9">break;<pos:position pos:line="15" pos:column="15"/></break>

    <case pos:line="17" pos:column="5">case <expr><name><name pos:line="17" pos:column="10">MemObject<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">::<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">ioDone<pos:position pos:line="17" pos:column="27"/></name></name></expr>:<pos:position pos:line="17" pos:column="28"/></case>
    <case pos:line="18" pos:column="5">case <expr><name><name pos:line="18" pos:column="10">MemObject<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">::<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="21">ioReading<pos:position pos:line="18" pos:column="30"/></name></name></expr>:<pos:position pos:line="18" pos:column="31"/></case>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return> <comment type="line" pos:line="19" pos:column="17">// we should not write in all of the above cases</comment>

    <case pos:line="21" pos:column="5">case <expr><name><name pos:line="21" pos:column="10">MemObject<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">::<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="21">ioWriting<pos:position pos:line="21" pos:column="30"/></name></name></expr>:<pos:position pos:line="21" pos:column="31"/></case>
        <break pos:line="22" pos:column="9">break;<pos:position pos:line="22" pos:column="15"/></break> <comment type="line" pos:line="22" pos:column="16">// already decided to write and still writing</comment>
    }<pos:position pos:line="23" pos:column="6"/></block></switch>

    <try pos:line="25" pos:column="5">try <block pos:line="25" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">copyToShm<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">e<pos:position pos:line="26" pos:column="20"/></name></expr></argument>)<pos:position pos:line="26" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name><name pos:line="27" pos:column="13">e<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">.<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">store_status<pos:position pos:line="27" pos:column="27"/></name></name> <operator pos:line="27" pos:column="28">==<pos:position pos:line="27" pos:column="30"/></operator> <name pos:line="27" pos:column="31">STORE_OK<pos:position pos:line="27" pos:column="39"/></name></expr>)<pos:position pos:line="27" pos:column="40"/></condition><then pos:line="27" pos:column="40"> <comment type="line" pos:line="27" pos:column="41">// done receiving new content</comment>
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="28" pos:column="13">completeWriting<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">e<pos:position pos:line="28" pos:column="30"/></name></expr></argument>)<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt></block></then>
        <else pos:line="29" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="30" pos:column="13">CollapsedForwarding<pos:position pos:line="30" pos:column="32"/></name><operator pos:line="30" pos:column="32">::<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="34">Broadcast<pos:position pos:line="30" pos:column="43"/></name></name><argument_list pos:line="30" pos:column="43">(<argument><expr><name pos:line="30" pos:column="44">e<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt></block></else></if>
        <return pos:line="31" pos:column="9">return;<pos:position pos:line="31" pos:column="16"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block> <catch pos:line="32" pos:column="7">catch <parameter_list pos:line="32" pos:column="13">(<parameter><decl><type><specifier pos:line="32" pos:column="14">const<pos:position pos:line="32" pos:column="19"/></specifier> <name><name pos:line="32" pos:column="20">std<pos:position pos:line="32" pos:column="23"/></name><operator pos:line="32" pos:column="23">::<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="25">exception<pos:position pos:line="32" pos:column="34"/></name></name> <modifier pos:line="32" pos:column="35">&amp;<pos:position pos:line="32" pos:column="40"/></modifier></type><name pos:line="32" pos:column="36">x<pos:position pos:line="32" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="32" pos:column="38"/></parameter_list> <block pos:line="32" pos:column="39">{ <comment type="line" pos:line="32" pos:column="41">// TODO: should we catch ... as well?</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">debugs<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><literal type="number" pos:line="33" pos:column="16">20<pos:position pos:line="33" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="20">2<pos:position pos:line="33" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="23">"mem-caching error writing entry "<pos:position pos:line="33" pos:column="57"/></literal> <operator pos:line="33" pos:column="58">&lt;&lt;<pos:position pos:line="33" pos:column="66"/></operator> <name pos:line="33" pos:column="61">e<pos:position pos:line="33" pos:column="62"/></name> <operator pos:line="33" pos:column="63">&lt;&lt;<pos:position pos:line="33" pos:column="71"/></operator> <literal type="string" pos:line="33" pos:column="66">": "<pos:position pos:line="33" pos:column="70"/></literal> <operator pos:line="33" pos:column="71">&lt;&lt;<pos:position pos:line="33" pos:column="79"/></operator> <call><name><name pos:line="33" pos:column="74">x<pos:position pos:line="33" pos:column="75"/></name><operator pos:line="33" pos:column="75">.<pos:position pos:line="33" pos:column="76"/></operator><name pos:line="33" pos:column="76">what<pos:position pos:line="33" pos:column="80"/></name></name><argument_list pos:line="33" pos:column="80">()<pos:position pos:line="33" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="84"/></expr_stmt>
        <comment type="line" pos:line="34" pos:column="9">// fall through to the error handling code</comment>
    }<pos:position pos:line="35" pos:column="6"/></block></catch></try>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">disconnect<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><name pos:line="37" pos:column="16">e<pos:position pos:line="37" pos:column="17"/></name></expr></argument>)<pos:position pos:line="37" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
