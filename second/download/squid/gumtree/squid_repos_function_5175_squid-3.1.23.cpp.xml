<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5175_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">DiskdFile<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">write<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">WriteRequest<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">aRequest<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">79<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"DiskdFile::write: this "<pos:position pos:line="4" pos:column="44"/></literal> <operator pos:line="4" pos:column="45">&lt;&lt;<pos:position pos:line="4" pos:column="53"/></operator> <operator pos:line="4" pos:column="48">(<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">void<pos:position pos:line="4" pos:column="53"/></name> <operator pos:line="4" pos:column="54">*<pos:position pos:line="4" pos:column="55"/></operator><operator pos:line="4" pos:column="55">)<pos:position pos:line="4" pos:column="56"/></operator><name pos:line="4" pos:column="56">this<pos:position pos:line="4" pos:column="60"/></name> <operator pos:line="4" pos:column="61">&lt;&lt;<pos:position pos:line="4" pos:column="69"/></operator> <literal type="string" pos:line="4" pos:column="64">", buf "<pos:position pos:line="4" pos:column="72"/></literal> <operator pos:line="4" pos:column="73">&lt;&lt;<pos:position pos:line="4" pos:column="81"/></operator> <operator pos:line="4" pos:column="76">(<pos:position pos:line="4" pos:column="77"/></operator><name pos:line="4" pos:column="77">void<pos:position pos:line="4" pos:column="81"/></name> <operator pos:line="4" pos:column="82">*<pos:position pos:line="4" pos:column="83"/></operator><operator pos:line="4" pos:column="83">)<pos:position pos:line="4" pos:column="84"/></operator><name><name pos:line="4" pos:column="84">aRequest<pos:position pos:line="4" pos:column="92"/></name><operator pos:line="4" pos:column="92">-&gt;<pos:position pos:line="4" pos:column="97"/></operator><name pos:line="4" pos:column="94">buf<pos:position pos:line="4" pos:column="97"/></name></name> <operator pos:line="4" pos:column="98">&lt;&lt;<pos:position pos:line="4" pos:column="106"/></operator> <literal type="string" pos:line="4" pos:column="101">", off "<pos:position pos:line="4" pos:column="109"/></literal> <operator pos:line="4" pos:column="110">&lt;&lt;<pos:position pos:line="4" pos:column="118"/></operator> <name><name pos:line="4" pos:column="113">aRequest<pos:position pos:line="4" pos:column="121"/></name><operator pos:line="4" pos:column="121">-&gt;<pos:position pos:line="4" pos:column="126"/></operator><name pos:line="4" pos:column="123">offset<pos:position pos:line="4" pos:column="129"/></name></name> <operator pos:line="4" pos:column="130">&lt;&lt;<pos:position pos:line="4" pos:column="138"/></operator> <literal type="string" pos:line="4" pos:column="133">", len "<pos:position pos:line="4" pos:column="141"/></literal> <operator pos:line="4" pos:column="142">&lt;&lt;<pos:position pos:line="4" pos:column="150"/></operator> <name><name pos:line="4" pos:column="145">aRequest<pos:position pos:line="4" pos:column="153"/></name><operator pos:line="4" pos:column="153">-&gt;<pos:position pos:line="4" pos:column="158"/></operator><name pos:line="4" pos:column="155">len<pos:position pos:line="4" pos:column="158"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="159"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="160"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ssize_t<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">shm_offset<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">sbuf<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><operator pos:line="6" pos:column="18">(<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">char<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></operator><operator pos:line="6" pos:column="25">)<pos:position pos:line="6" pos:column="26"/></operator><call><name><name pos:line="6" pos:column="26">IO<pos:position pos:line="6" pos:column="28"/></name><operator pos:line="6" pos:column="28">-&gt;<pos:position pos:line="6" pos:column="33"/></operator><name pos:line="6" pos:column="30">shm<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">.<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="34">get<pos:position pos:line="6" pos:column="37"/></name></name><argument_list pos:line="6" pos:column="37">(<argument><expr><operator pos:line="6" pos:column="38">&amp;<pos:position pos:line="6" pos:column="43"/></operator><name pos:line="6" pos:column="39">shm_offset<pos:position pos:line="6" pos:column="49"/></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="51"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">xmemcpy<pos:position pos:line="7" pos:column="12"/></name><argument_list pos:line="7" pos:column="12">(<argument><expr><name pos:line="7" pos:column="13">sbuf<pos:position pos:line="7" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="19">aRequest<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">-&gt;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="29">buf<pos:position pos:line="7" pos:column="32"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="34">aRequest<pos:position pos:line="7" pos:column="42"/></name><operator pos:line="7" pos:column="42">-&gt;<pos:position pos:line="7" pos:column="47"/></operator><name pos:line="7" pos:column="44">len<pos:position pos:line="7" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">aRequest<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">-&gt;<pos:position pos:line="9" pos:column="22"/></operator><name pos:line="9" pos:column="19">free_func<pos:position pos:line="9" pos:column="28"/></name></name></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="10" pos:column="9">aRequest<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">free_func<pos:position pos:line="10" pos:column="28"/></name></name><argument_list pos:line="10" pos:column="28">(<argument><expr><cast type="const" pos:line="10" pos:column="29">const_cast<argument_list type="generic" pos:line="10" pos:column="39">&lt;<argument><expr><name pos:line="10" pos:column="40">char<pos:position pos:line="10" pos:column="44"/></name> <operator pos:line="10" pos:column="45">*<pos:position pos:line="10" pos:column="46"/></operator></expr></argument>&gt;<pos:position pos:line="10" pos:column="50"/></argument_list><argument_list pos:line="10" pos:column="47">(<argument><expr><name><name pos:line="10" pos:column="48">aRequest<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">-&gt;<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="58">buf<pos:position pos:line="10" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="62"/></argument_list></cast></expr></argument>)<pos:position pos:line="10" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="64"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">ioAway<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">()<pos:position pos:line="12" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="14"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">x<pos:position pos:line="14" pos:column="10"/></name> <init pos:line="14" pos:column="11">= <expr><call><name><name pos:line="14" pos:column="13">IO<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">send<pos:position pos:line="14" pos:column="21"/></name></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">_MQD_WRITE<pos:position pos:line="14" pos:column="32"/></name></expr></argument>,
                     <argument><expr><name pos:line="15" pos:column="22">id<pos:position pos:line="15" pos:column="24"/></name></expr></argument>,
                     <argument><expr><name pos:line="16" pos:column="22">this<pos:position pos:line="16" pos:column="26"/></name></expr></argument>,
                     <argument><expr><name><name pos:line="17" pos:column="22">aRequest<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">len<pos:position pos:line="17" pos:column="35"/></name></name></expr></argument>,
                     <argument><expr><name><name pos:line="18" pos:column="22">aRequest<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">offset<pos:position pos:line="18" pos:column="38"/></name></name></expr></argument>,
                     <argument><expr><name pos:line="19" pos:column="22">shm_offset<pos:position pos:line="19" pos:column="32"/></name></expr></argument>,
                     <argument><expr><name pos:line="20" pos:column="22">aRequest<pos:position pos:line="20" pos:column="30"/></name></expr></argument>)<pos:position pos:line="20" pos:column="31"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="32"/></decl_stmt>

    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">x<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">&lt;<pos:position pos:line="22" pos:column="15"/></operator> <literal type="number" pos:line="22" pos:column="13">0<pos:position pos:line="22" pos:column="14"/></literal></expr>)<pos:position pos:line="22" pos:column="15"/></condition><then pos:line="22" pos:column="15"> <block pos:line="22" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">ioCompleted<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">()<pos:position pos:line="23" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">errorOccured<pos:position pos:line="24" pos:column="21"/></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <literal type="boolean" pos:line="24" pos:column="24">true<pos:position pos:line="24" pos:column="28"/></literal></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">debugs<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="number" pos:line="25" pos:column="16">79<pos:position pos:line="25" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="20">1<pos:position pos:line="25" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="23">"storeDiskdSend WRITE: "<pos:position pos:line="25" pos:column="47"/></literal> <operator pos:line="25" pos:column="48">&lt;&lt;<pos:position pos:line="25" pos:column="56"/></operator> <call><name pos:line="25" pos:column="51">xstrerror<pos:position pos:line="25" pos:column="60"/></name><argument_list pos:line="25" pos:column="60">()<pos:position pos:line="25" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="64"/></expr_stmt>
        <comment type="line" pos:line="26" pos:column="9">//        IO-&gt;shm.put (shm_offset);</comment>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">notifyClient<pos:position pos:line="27" pos:column="21"/></name><argument_list pos:line="27" pos:column="21">()<pos:position pos:line="27" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">ioRequestor<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">NULL<pos:position pos:line="28" pos:column="27"/></name></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>
        <return pos:line="29" pos:column="9">return;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="32" pos:column="5">diskd_stats<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">.<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">write<pos:position pos:line="32" pos:column="22"/></name><operator pos:line="32" pos:column="22">.<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">ops<pos:position pos:line="32" pos:column="26"/></name></name><operator pos:line="32" pos:column="26">++<pos:position pos:line="32" pos:column="28"/></operator></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
