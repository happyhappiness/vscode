<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2914_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">clientReplyContext<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">blockedHit<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">()<pos:position pos:line="2" pos:column="33"/></parameter_list> <specifier pos:line="2" pos:column="34">const<pos:position pos:line="2" pos:column="39"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name><name pos:line="4" pos:column="10">Config<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">.<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">accessList<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">.<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">sendHit<pos:position pos:line="4" pos:column="35"/></name></name></expr>)<pos:position pos:line="4" pos:column="36"/></condition><then pos:line="4" pos:column="36">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if> <comment type="line" pos:line="5" pos:column="23">// hits are not blocked by default</comment>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">http<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">-&gt;<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="15">flags<pos:position pos:line="7" pos:column="20"/></name><operator pos:line="7" pos:column="20">.<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="21">internal<pos:position pos:line="7" pos:column="29"/></name></name></expr>)<pos:position pos:line="7" pos:column="30"/></condition><then pos:line="7" pos:column="30">
        <block type="pseudo"><return pos:line="8" pos:column="9">return <expr><literal type="boolean" pos:line="8" pos:column="16">false<pos:position pos:line="8" pos:column="21"/></literal></expr>;<pos:position pos:line="8" pos:column="22"/></return></block></then></if> <comment type="line" pos:line="8" pos:column="23">// internal content "hits" cannot be blocked</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">HttpReply<pos:position pos:line="10" pos:column="24"/></name> <modifier pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></modifier></type><name pos:line="10" pos:column="26">rep<pos:position pos:line="10" pos:column="29"/></name> <init pos:line="10" pos:column="30">= <expr><call><name><name pos:line="10" pos:column="32">http<pos:position pos:line="10" pos:column="36"/></name><operator pos:line="10" pos:column="36">-&gt;<pos:position pos:line="10" pos:column="41"/></operator><name pos:line="10" pos:column="38">storeEntry<pos:position pos:line="10" pos:column="48"/></name></name><argument_list pos:line="10" pos:column="48">()<pos:position pos:line="10" pos:column="50"/></argument_list></call><operator pos:line="10" pos:column="50">-&gt;<pos:position pos:line="10" pos:column="55"/></operator><call><name pos:line="10" pos:column="52">getReply<pos:position pos:line="10" pos:column="60"/></name><argument_list pos:line="10" pos:column="60">()<pos:position pos:line="10" pos:column="62"/></argument_list></call></expr></init></decl>)<pos:position pos:line="10" pos:column="63"/></condition><then pos:line="10" pos:column="63"> <block pos:line="10" pos:column="64">{
        <decl_stmt><decl><type><name><name pos:line="11" pos:column="9">std<pos:position pos:line="11" pos:column="12"/></name><operator pos:line="11" pos:column="12">::<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">unique_ptr<pos:position pos:line="11" pos:column="24"/></name><argument_list type="generic" pos:line="11" pos:column="24">&lt;<argument><expr><name pos:line="11" pos:column="25">ACLFilledChecklist<pos:position pos:line="11" pos:column="43"/></name></expr></argument>&gt;<pos:position pos:line="11" pos:column="47"/></argument_list></name></name></type> <name pos:line="11" pos:column="45">chl<pos:position pos:line="11" pos:column="48"/></name><argument_list pos:line="11" pos:column="48">(<argument><expr><call><name pos:line="11" pos:column="49">clientAclChecklistCreate<pos:position pos:line="11" pos:column="73"/></name><argument_list pos:line="11" pos:column="73">(<argument><expr><name><name pos:line="11" pos:column="74">Config<pos:position pos:line="11" pos:column="80"/></name><operator pos:line="11" pos:column="80">.<pos:position pos:line="11" pos:column="81"/></operator><name pos:line="11" pos:column="81">accessList<pos:position pos:line="11" pos:column="91"/></name><operator pos:line="11" pos:column="91">.<pos:position pos:line="11" pos:column="92"/></operator><name pos:line="11" pos:column="92">sendHit<pos:position pos:line="11" pos:column="99"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="101">http<pos:position pos:line="11" pos:column="105"/></name></expr></argument>)<pos:position pos:line="11" pos:column="106"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="107"/></argument_list></decl>;<pos:position pos:line="11" pos:column="108"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">chl<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">-&gt;<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="14">reply<pos:position pos:line="12" pos:column="19"/></name></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <cast type="const" pos:line="12" pos:column="22">const_cast<argument_list type="generic" pos:line="12" pos:column="32">&lt;<argument><expr><name pos:line="12" pos:column="33">HttpReply<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">*<pos:position pos:line="12" pos:column="43"/></operator></expr></argument>&gt;<pos:position pos:line="12" pos:column="47"/></argument_list><argument_list pos:line="12" pos:column="44">(<argument><expr><name pos:line="12" pos:column="45">rep<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></cast></expr>;<pos:position pos:line="12" pos:column="50"/></expr_stmt> <comment type="line" pos:line="12" pos:column="51">// ACLChecklist API bug</comment>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">HTTPMSGLOCK<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name><name pos:line="13" pos:column="21">chl<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">reply<pos:position pos:line="13" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><operator pos:line="14" pos:column="16">!<pos:position pos:line="14" pos:column="17"/></operator><call><name><name pos:line="14" pos:column="17">chl<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-&gt;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="22">fastCheck<pos:position pos:line="14" pos:column="31"/></name></name><argument_list pos:line="14" pos:column="31">()<pos:position pos:line="14" pos:column="33"/></argument_list></call><operator pos:line="14" pos:column="33">.<pos:position pos:line="14" pos:column="34"/></operator><call><name pos:line="14" pos:column="34">allowed<pos:position pos:line="14" pos:column="41"/></name><argument_list pos:line="14" pos:column="41">()<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="44"/></return> <comment type="line" pos:line="14" pos:column="45">// when in doubt, block</comment>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="17" pos:column="5">// This does not happen, I hope, because we are called from CacheHit, which</comment>
    <comment type="line" pos:line="18" pos:column="5">// is called via a storeClientCopy() callback, and store should initialize</comment>
    <comment type="line" pos:line="19" pos:column="5">// the reply before calling that callback.</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">debugs<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="number" pos:line="20" pos:column="12">88<pos:position pos:line="20" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="16">3<pos:position pos:line="20" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="19">"Missing reply!"<pos:position pos:line="20" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
    <return pos:line="21" pos:column="5">return <expr><literal type="boolean" pos:line="21" pos:column="12">false<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
