<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3167_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">sync<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">()<pos:position pos:line="1" pos:column="11"/></parameter_list> <block pos:line="1" pos:column="12">{
        <decl_stmt><decl><type><name><name pos:line="2" pos:column="9">std<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">streamsize<pos:position pos:line="2" pos:column="24"/></name></name></type> <name pos:line="2" pos:column="25">pending<pos:position pos:line="2" pos:column="32"/></name><argument_list pos:line="2" pos:column="32">(<argument><expr><call><name pos:line="2" pos:column="33">pptr<pos:position pos:line="2" pos:column="37"/></name><argument_list pos:line="2" pos:column="37">()<pos:position pos:line="2" pos:column="39"/></argument_list></call> <operator pos:line="2" pos:column="40">-<pos:position pos:line="2" pos:column="41"/></operator> <call><name pos:line="2" pos:column="42">pbase<pos:position pos:line="2" pos:column="47"/></name><argument_list pos:line="2" pos:column="47">()<pos:position pos:line="2" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="2" pos:column="50"/></argument_list></decl>;<pos:position pos:line="2" pos:column="51"/></decl_stmt>

        <if pos:line="4" pos:column="9">if <condition pos:line="4" pos:column="12">(<expr><name pos:line="4" pos:column="13">pending<pos:position pos:line="4" pos:column="20"/></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="5" pos:column="13">theBuf<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">.<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">append<pos:position pos:line="5" pos:column="26"/></name></name><argument_list pos:line="5" pos:column="26">(<argument><expr><call><name pos:line="5" pos:column="27">pbase<pos:position pos:line="5" pos:column="32"/></name><argument_list pos:line="5" pos:column="32">()<pos:position pos:line="5" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="5" pos:column="36">pending<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="45"/></expr_stmt></block></then></if>

        <return pos:line="7" pos:column="9">return <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr>;<pos:position pos:line="7" pos:column="18"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></function></unit>
