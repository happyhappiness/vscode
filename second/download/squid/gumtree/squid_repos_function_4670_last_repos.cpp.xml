<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4670_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">Server<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">buildHttpRequest<pos:position pos:line="2" pos:column="36"/></name></name><parameter_list pos:line="2" pos:column="36">(<parameter><decl><type><name><name pos:line="2" pos:column="37">Http<pos:position pos:line="2" pos:column="41"/></name><operator pos:line="2" pos:column="41">::<pos:position pos:line="2" pos:column="43"/></operator><name pos:line="2" pos:column="43">StreamPointer<pos:position pos:line="2" pos:column="56"/></name></name> <modifier pos:line="2" pos:column="57">&amp;<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="58">context<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">HttpRequest<pos:position pos:line="4" pos:column="16"/></name><operator pos:line="4" pos:column="16">::<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="18">Pointer<pos:position pos:line="4" pos:column="25"/></name></name></type> <name pos:line="4" pos:column="26">request<pos:position pos:line="4" pos:column="33"/></name></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ClientHttpRequest<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">http<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">= <expr><name><name pos:line="5" pos:column="31">context<pos:position pos:line="5" pos:column="38"/></name><operator pos:line="5" pos:column="38">-&gt;<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="40">http<pos:position pos:line="5" pos:column="44"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">context<pos:position pos:line="6" pos:column="16"/></name><operator pos:line="6" pos:column="16">-&gt;<pos:position pos:line="6" pos:column="21"/></operator><name pos:line="6" pos:column="18">flags<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">.<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="24">parsed_ok<pos:position pos:line="6" pos:column="33"/></name></name> <operator pos:line="6" pos:column="34">==<pos:position pos:line="6" pos:column="36"/></operator> <literal type="number" pos:line="6" pos:column="37">0<pos:position pos:line="6" pos:column="38"/></literal></expr>)<pos:position pos:line="6" pos:column="39"/></condition><then pos:line="6" pos:column="39"> <block pos:line="6" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">33<pos:position pos:line="7" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="20">2<pos:position pos:line="7" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="23">"Invalid Request"<pos:position pos:line="7" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="42"/></expr_stmt>
        <comment type="line" pos:line="8" pos:column="9">// determine which error page templates to use for specific parsing errors</comment>
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">err_type<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">errPage<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><name pos:line="9" pos:column="28">ERR_INVALID_REQ<pos:position pos:line="9" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>
        <switch pos:line="10" pos:column="9">switch <condition pos:line="10" pos:column="16">(<expr><name><name pos:line="10" pos:column="17">parser_<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">-&gt;<pos:position pos:line="10" pos:column="29"/></operator><name pos:line="10" pos:column="26">parseStatusCode<pos:position pos:line="10" pos:column="41"/></name></name></expr>)<pos:position pos:line="10" pos:column="42"/></condition> <block pos:line="10" pos:column="43">{
        <case pos:line="11" pos:column="9">case <expr><name><name pos:line="11" pos:column="14">Http<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">::<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">scRequestHeaderFieldsTooLarge<pos:position pos:line="11" pos:column="49"/></name></name></expr>:<pos:position pos:line="11" pos:column="50"/></case>
        <comment type="line" pos:line="12" pos:column="9">// fall through to next case</comment>
        <case pos:line="13" pos:column="9">case <expr><name><name pos:line="13" pos:column="14">Http<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">::<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">scUriTooLong<pos:position pos:line="13" pos:column="32"/></name></name></expr>:<pos:position pos:line="13" pos:column="33"/></case>
            <expr_stmt><expr><name pos:line="14" pos:column="13">errPage<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">ERR_TOO_BIG<pos:position pos:line="14" pos:column="34"/></name></expr>;<pos:position pos:line="14" pos:column="35"/></expr_stmt>
            <break pos:line="15" pos:column="13">break;<pos:position pos:line="15" pos:column="19"/></break>
        <case pos:line="16" pos:column="9">case <expr><name><name pos:line="16" pos:column="14">Http<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">::<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">scMethodNotAllowed<pos:position pos:line="16" pos:column="38"/></name></name></expr>:<pos:position pos:line="16" pos:column="39"/></case>
            <expr_stmt><expr><name pos:line="17" pos:column="13">errPage<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">ERR_UNSUP_REQ<pos:position pos:line="17" pos:column="36"/></name></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
            <break pos:line="18" pos:column="13">break;<pos:position pos:line="18" pos:column="19"/></break>
        <case pos:line="19" pos:column="9">case <expr><name><name pos:line="19" pos:column="14">Http<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">::<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="20">scHttpVersionNotSupported<pos:position pos:line="19" pos:column="45"/></name></name></expr>:<pos:position pos:line="19" pos:column="46"/></case>
            <expr_stmt><expr><name pos:line="20" pos:column="13">errPage<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">ERR_UNSUP_HTTPVERSION<pos:position pos:line="20" pos:column="44"/></name></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt>
            <break pos:line="21" pos:column="13">break;<pos:position pos:line="21" pos:column="19"/></break>
        <default pos:line="22" pos:column="9">default:<pos:position pos:line="22" pos:column="17"/></default>
            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">(<expr><call><name><name pos:line="23" pos:column="17">parser_<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">method<pos:position pos:line="23" pos:column="32"/></name></name><argument_list pos:line="23" pos:column="32">()<pos:position pos:line="23" pos:column="34"/></argument_list></call> <operator pos:line="23" pos:column="35">==<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="38">METHOD_NONE<pos:position pos:line="23" pos:column="49"/></name> <operator pos:line="23" pos:column="50">||<pos:position pos:line="23" pos:column="52"/></operator> <call><name><name pos:line="23" pos:column="53">parser_<pos:position pos:line="23" pos:column="60"/></name><operator pos:line="23" pos:column="60">-&gt;<pos:position pos:line="23" pos:column="65"/></operator><name pos:line="23" pos:column="62">requestUri<pos:position pos:line="23" pos:column="72"/></name></name><argument_list pos:line="23" pos:column="72">()<pos:position pos:line="23" pos:column="74"/></argument_list></call><operator pos:line="23" pos:column="74">.<pos:position pos:line="23" pos:column="75"/></operator><call><name pos:line="23" pos:column="75">length<pos:position pos:line="23" pos:column="81"/></name><argument_list pos:line="23" pos:column="81">()<pos:position pos:line="23" pos:column="83"/></argument_list></call> <operator pos:line="23" pos:column="84">==<pos:position pos:line="23" pos:column="86"/></operator> <literal type="number" pos:line="23" pos:column="87">0<pos:position pos:line="23" pos:column="88"/></literal></expr>)<pos:position pos:line="23" pos:column="89"/></condition><then pos:line="23" pos:column="89">
                <comment type="line" pos:line="24" pos:column="17">// no method or url parsed, probably is wrong protocol</comment>
                <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">errPage<pos:position pos:line="25" pos:column="24"/></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="27">ERR_PROTOCOL_UNKNOWN<pos:position pos:line="25" pos:column="47"/></name></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt></block></then></if>
            <comment type="line" pos:line="26" pos:column="13">// else use default ERR_INVALID_REQ set above.</comment>
            <break pos:line="27" pos:column="13">break;<pos:position pos:line="27" pos:column="19"/></break>
        }<pos:position pos:line="28" pos:column="10"/></block></switch>
        <comment type="line" pos:line="29" pos:column="9">// setLogUri should called before repContext-&gt;setReplyToError</comment>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">setLogUri<pos:position pos:line="30" pos:column="18"/></name><argument_list pos:line="30" pos:column="18">(<argument><expr><name pos:line="30" pos:column="19">http<pos:position pos:line="30" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="25">http<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">-&gt;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="31">uri<pos:position pos:line="30" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="30" pos:column="36">true<pos:position pos:line="30" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">const<pos:position pos:line="31" pos:column="14"/></specifier> <name pos:line="31" pos:column="15">char<pos:position pos:line="31" pos:column="19"/></name> <modifier pos:line="31" pos:column="20">*<pos:position pos:line="31" pos:column="21"/></modifier></type> <name pos:line="31" pos:column="22">requestErrorBytes<pos:position pos:line="31" pos:column="39"/></name> <init pos:line="31" pos:column="40">= <expr><call><name><name pos:line="31" pos:column="42">inBuf<pos:position pos:line="31" pos:column="47"/></name><operator pos:line="31" pos:column="47">.<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="48">c_str<pos:position pos:line="31" pos:column="53"/></name></name><argument_list pos:line="31" pos:column="53">()<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="56"/></decl_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><call><name pos:line="32" pos:column="14">clientTunnelOnError<pos:position pos:line="32" pos:column="33"/></name><argument_list pos:line="32" pos:column="33">(<argument><expr><name pos:line="32" pos:column="34">this<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="40">context<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="49">request<pos:position pos:line="32" pos:column="56"/></name></expr></argument>, <argument><expr><call><name><name pos:line="32" pos:column="58">parser_<pos:position pos:line="32" pos:column="65"/></name><operator pos:line="32" pos:column="65">-&gt;<pos:position pos:line="32" pos:column="70"/></operator><name pos:line="32" pos:column="67">method<pos:position pos:line="32" pos:column="73"/></name></name><argument_list pos:line="32" pos:column="73">()<pos:position pos:line="32" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="32" pos:column="77">errPage<pos:position pos:line="32" pos:column="84"/></name></expr></argument>)<pos:position pos:line="32" pos:column="85"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="86"/></condition><then pos:line="32" pos:column="86"> <block pos:line="32" pos:column="87">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">setReplyError<pos:position pos:line="33" pos:column="26"/></name><argument_list pos:line="33" pos:column="26">(<argument><expr><name pos:line="33" pos:column="27">context<pos:position pos:line="33" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="36">request<pos:position pos:line="33" pos:column="43"/></name></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="45">parser_<pos:position pos:line="33" pos:column="52"/></name><operator pos:line="33" pos:column="52">-&gt;<pos:position pos:line="33" pos:column="57"/></operator><name pos:line="33" pos:column="54">method<pos:position pos:line="33" pos:column="60"/></name></name><argument_list pos:line="33" pos:column="60">()<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="33" pos:column="64">errPage<pos:position pos:line="33" pos:column="71"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="73">parser_<pos:position pos:line="33" pos:column="80"/></name><operator pos:line="33" pos:column="80">-&gt;<pos:position pos:line="33" pos:column="85"/></operator><name pos:line="33" pos:column="82">parseStatusCode<pos:position pos:line="33" pos:column="97"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="99">requestErrorBytes<pos:position pos:line="33" pos:column="116"/></name></expr></argument>)<pos:position pos:line="33" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="118"/></expr_stmt>
            <comment type="line" pos:line="34" pos:column="13">// HttpRequest object not build yet, there is no reason to call</comment>
            <comment type="line" pos:line="35" pos:column="13">// clientProcessRequestFinished method</comment>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>

        <return pos:line="38" pos:column="9">return <expr><literal type="boolean" pos:line="38" pos:column="16">false<pos:position pos:line="38" pos:column="21"/></literal></expr>;<pos:position pos:line="38" pos:column="22"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="41" pos:column="5">MasterXaction<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">::<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="20">Pointer<pos:position pos:line="41" pos:column="27"/></name></name></type> <name pos:line="41" pos:column="28">mx<pos:position pos:line="41" pos:column="30"/></name> <init pos:line="41" pos:column="31">= <expr><operator pos:line="41" pos:column="33">new<pos:position pos:line="41" pos:column="36"/></operator> <call><name pos:line="41" pos:column="37">MasterXaction<pos:position pos:line="41" pos:column="50"/></name><argument_list pos:line="41" pos:column="50">(<argument><expr><name><name pos:line="41" pos:column="51">XactionInitiator<pos:position pos:line="41" pos:column="67"/></name><operator pos:line="41" pos:column="67">::<pos:position pos:line="41" pos:column="69"/></operator><name pos:line="41" pos:column="69">initClient<pos:position pos:line="41" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="81"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="42" pos:column="5">mx<pos:position pos:line="42" pos:column="7"/></name><operator pos:line="42" pos:column="7">-&gt;<pos:position pos:line="42" pos:column="12"/></operator><name pos:line="42" pos:column="9">tcpClient<pos:position pos:line="42" pos:column="18"/></name></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="21">clientConnection<pos:position pos:line="42" pos:column="37"/></name></expr>;<pos:position pos:line="42" pos:column="38"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">(<pos:position pos:line="43" pos:column="10"/></operator><name pos:line="43" pos:column="10">request<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <call><name><name pos:line="43" pos:column="20">HttpRequest<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">::<pos:position pos:line="43" pos:column="33"/></operator><name pos:line="43" pos:column="33">FromUrl<pos:position pos:line="43" pos:column="40"/></name></name><argument_list pos:line="43" pos:column="40">(<argument><expr><name><name pos:line="43" pos:column="41">http<pos:position pos:line="43" pos:column="45"/></name><operator pos:line="43" pos:column="45">-&gt;<pos:position pos:line="43" pos:column="50"/></operator><name pos:line="43" pos:column="47">uri<pos:position pos:line="43" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="52">mx<pos:position pos:line="43" pos:column="54"/></name></expr></argument>, <argument><expr><call><name><name pos:line="43" pos:column="56">parser_<pos:position pos:line="43" pos:column="63"/></name><operator pos:line="43" pos:column="63">-&gt;<pos:position pos:line="43" pos:column="68"/></operator><name pos:line="43" pos:column="65">method<pos:position pos:line="43" pos:column="71"/></name></name><argument_list pos:line="43" pos:column="71">()<pos:position pos:line="43" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="74"/></argument_list></call><operator pos:line="43" pos:column="74">)<pos:position pos:line="43" pos:column="75"/></operator> <operator pos:line="43" pos:column="76">==<pos:position pos:line="43" pos:column="78"/></operator> <name pos:line="43" pos:column="79">NULL<pos:position pos:line="43" pos:column="83"/></name></expr>)<pos:position pos:line="43" pos:column="84"/></condition><then pos:line="43" pos:column="84"> <block pos:line="43" pos:column="85">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">debugs<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="number" pos:line="44" pos:column="16">33<pos:position pos:line="44" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="20">5<pos:position pos:line="44" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="23">"Invalid URL: "<pos:position pos:line="44" pos:column="38"/></literal> <operator pos:line="44" pos:column="39">&lt;&lt;<pos:position pos:line="44" pos:column="47"/></operator> <name><name pos:line="44" pos:column="42">http<pos:position pos:line="44" pos:column="46"/></name><operator pos:line="44" pos:column="46">-&gt;<pos:position pos:line="44" pos:column="51"/></operator><name pos:line="44" pos:column="48">uri<pos:position pos:line="44" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="53"/></expr_stmt>
        <comment type="line" pos:line="45" pos:column="9">// setLogUri should called before repContext-&gt;setReplyToError</comment>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">setLogUri<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name pos:line="46" pos:column="19">http<pos:position pos:line="46" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="25">http<pos:position pos:line="46" pos:column="29"/></name><operator pos:line="46" pos:column="29">-&gt;<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="31">uri<pos:position pos:line="46" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="46" pos:column="36">true<pos:position pos:line="46" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt>

        <decl_stmt><decl><type><specifier pos:line="48" pos:column="9">const<pos:position pos:line="48" pos:column="14"/></specifier> <name pos:line="48" pos:column="15">char<pos:position pos:line="48" pos:column="19"/></name> <modifier pos:line="48" pos:column="20">*<pos:position pos:line="48" pos:column="21"/></modifier></type> <name pos:line="48" pos:column="22">requestErrorBytes<pos:position pos:line="48" pos:column="39"/></name> <init pos:line="48" pos:column="40">= <expr><call><name><name pos:line="48" pos:column="42">inBuf<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">.<pos:position pos:line="48" pos:column="48"/></operator><name pos:line="48" pos:column="48">c_str<pos:position pos:line="48" pos:column="53"/></name></name><argument_list pos:line="48" pos:column="53">()<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="48" pos:column="56"/></decl_stmt>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">!<pos:position pos:line="49" pos:column="14"/></operator><call><name pos:line="49" pos:column="14">clientTunnelOnError<pos:position pos:line="49" pos:column="33"/></name><argument_list pos:line="49" pos:column="33">(<argument><expr><name pos:line="49" pos:column="34">this<pos:position pos:line="49" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="40">context<pos:position pos:line="49" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="49">request<pos:position pos:line="49" pos:column="56"/></name></expr></argument>, <argument><expr><call><name><name pos:line="49" pos:column="58">parser_<pos:position pos:line="49" pos:column="65"/></name><operator pos:line="49" pos:column="65">-&gt;<pos:position pos:line="49" pos:column="70"/></operator><name pos:line="49" pos:column="67">method<pos:position pos:line="49" pos:column="73"/></name></name><argument_list pos:line="49" pos:column="73">()<pos:position pos:line="49" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="49" pos:column="77">ERR_INVALID_URL<pos:position pos:line="49" pos:column="92"/></name></expr></argument>)<pos:position pos:line="49" pos:column="93"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="94"/></condition><then pos:line="49" pos:column="94"> <block pos:line="49" pos:column="95">{
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">setReplyError<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">(<argument><expr><name pos:line="50" pos:column="27">context<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">request<pos:position pos:line="50" pos:column="43"/></name></expr></argument>, <argument><expr><call><name><name pos:line="50" pos:column="45">parser_<pos:position pos:line="50" pos:column="52"/></name><operator pos:line="50" pos:column="52">-&gt;<pos:position pos:line="50" pos:column="57"/></operator><name pos:line="50" pos:column="54">method<pos:position pos:line="50" pos:column="60"/></name></name><argument_list pos:line="50" pos:column="60">()<pos:position pos:line="50" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="50" pos:column="64">ERR_INVALID_URL<pos:position pos:line="50" pos:column="79"/></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="81">Http<pos:position pos:line="50" pos:column="85"/></name><operator pos:line="50" pos:column="85">::<pos:position pos:line="50" pos:column="87"/></operator><name pos:line="50" pos:column="87">scBadRequest<pos:position pos:line="50" pos:column="99"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="101">requestErrorBytes<pos:position pos:line="50" pos:column="118"/></name></expr></argument>)<pos:position pos:line="50" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="120"/></expr_stmt>
            <comment type="line" pos:line="51" pos:column="13">// HttpRequest object not build yet, there is no reason to call</comment>
            <comment type="line" pos:line="52" pos:column="13">// clientProcessRequestFinished method</comment>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <return pos:line="54" pos:column="9">return <expr><literal type="boolean" pos:line="54" pos:column="16">false<pos:position pos:line="54" pos:column="21"/></literal></expr>;<pos:position pos:line="54" pos:column="22"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="57" pos:column="5">/* RFC 2616 section 10.5.6 : handle unsupported HTTP major versions cleanly. */</comment>
    <comment type="block" pos:line="58" pos:column="5">/* We currently only support 0.9, 1.0, 1.1 properly */</comment>
    <comment type="block" pos:line="59" pos:column="5">/* TODO: move HTTP-specific processing into servers/HttpServer and such */</comment>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">( <expr><operator pos:line="60" pos:column="10">(<pos:position pos:line="60" pos:column="11"/></operator><call><name><name pos:line="60" pos:column="11">parser_<pos:position pos:line="60" pos:column="18"/></name><operator pos:line="60" pos:column="18">-&gt;<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="20">messageProtocol<pos:position pos:line="60" pos:column="35"/></name></name><argument_list pos:line="60" pos:column="35">()<pos:position pos:line="60" pos:column="37"/></argument_list></call><operator pos:line="60" pos:column="37">.<pos:position pos:line="60" pos:column="38"/></operator><name pos:line="60" pos:column="38">major<pos:position pos:line="60" pos:column="43"/></name> <operator pos:line="60" pos:column="44">==<pos:position pos:line="60" pos:column="46"/></operator> <literal type="number" pos:line="60" pos:column="47">0<pos:position pos:line="60" pos:column="48"/></literal> <operator pos:line="60" pos:column="49">&amp;&amp;<pos:position pos:line="60" pos:column="59"/></operator> <call><name><name pos:line="60" pos:column="52">parser_<pos:position pos:line="60" pos:column="59"/></name><operator pos:line="60" pos:column="59">-&gt;<pos:position pos:line="60" pos:column="64"/></operator><name pos:line="60" pos:column="61">messageProtocol<pos:position pos:line="60" pos:column="76"/></name></name><argument_list pos:line="60" pos:column="76">()<pos:position pos:line="60" pos:column="78"/></argument_list></call><operator pos:line="60" pos:column="78">.<pos:position pos:line="60" pos:column="79"/></operator><name pos:line="60" pos:column="79">minor<pos:position pos:line="60" pos:column="84"/></name> <operator pos:line="60" pos:column="85">!=<pos:position pos:line="60" pos:column="87"/></operator> <literal type="number" pos:line="60" pos:column="88">9<pos:position pos:line="60" pos:column="89"/></literal><operator pos:line="60" pos:column="89">)<pos:position pos:line="60" pos:column="90"/></operator> <operator pos:line="60" pos:column="91">||<pos:position pos:line="60" pos:column="93"/></operator>
            <operator pos:line="61" pos:column="13">(<pos:position pos:line="61" pos:column="14"/></operator><call><name><name pos:line="61" pos:column="14">parser_<pos:position pos:line="61" pos:column="21"/></name><operator pos:line="61" pos:column="21">-&gt;<pos:position pos:line="61" pos:column="26"/></operator><name pos:line="61" pos:column="23">messageProtocol<pos:position pos:line="61" pos:column="38"/></name></name><argument_list pos:line="61" pos:column="38">()<pos:position pos:line="61" pos:column="40"/></argument_list></call><operator pos:line="61" pos:column="40">.<pos:position pos:line="61" pos:column="41"/></operator><name pos:line="61" pos:column="41">major<pos:position pos:line="61" pos:column="46"/></name> <operator pos:line="61" pos:column="47">&gt;<pos:position pos:line="61" pos:column="51"/></operator> <literal type="number" pos:line="61" pos:column="49">1<pos:position pos:line="61" pos:column="50"/></literal><operator pos:line="61" pos:column="50">)<pos:position pos:line="61" pos:column="51"/></operator></expr> )<pos:position pos:line="61" pos:column="53"/></condition><then pos:line="61" pos:column="53"> <block pos:line="61" pos:column="54">{

        <expr_stmt><expr><call><name pos:line="63" pos:column="9">debugs<pos:position pos:line="63" pos:column="15"/></name><argument_list pos:line="63" pos:column="15">(<argument><expr><literal type="number" pos:line="63" pos:column="16">33<pos:position pos:line="63" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="20">5<pos:position pos:line="63" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="23">"Unsupported HTTP version discovered. :\n"<pos:position pos:line="63" pos:column="65"/></literal> <operator pos:line="63" pos:column="66">&lt;&lt;<pos:position pos:line="63" pos:column="74"/></operator> <call><name><name pos:line="63" pos:column="69">parser_<pos:position pos:line="63" pos:column="76"/></name><operator pos:line="63" pos:column="76">-&gt;<pos:position pos:line="63" pos:column="81"/></operator><name pos:line="63" pos:column="78">messageProtocol<pos:position pos:line="63" pos:column="93"/></name></name><argument_list pos:line="63" pos:column="93">()<pos:position pos:line="63" pos:column="95"/></argument_list></call></expr></argument>)<pos:position pos:line="63" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="97"/></expr_stmt>
        <comment type="line" pos:line="64" pos:column="9">// setLogUri should called before repContext-&gt;setReplyToError</comment>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">setLogUri<pos:position pos:line="65" pos:column="18"/></name><argument_list pos:line="65" pos:column="18">(<argument><expr><name pos:line="65" pos:column="19">http<pos:position pos:line="65" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="25">http<pos:position pos:line="65" pos:column="29"/></name><operator pos:line="65" pos:column="29">-&gt;<pos:position pos:line="65" pos:column="34"/></operator><name pos:line="65" pos:column="31">uri<pos:position pos:line="65" pos:column="34"/></name></name></expr></argument>,  <argument><expr><literal type="boolean" pos:line="65" pos:column="37">true<pos:position pos:line="65" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="43"/></expr_stmt>

        <decl_stmt><decl><type><specifier pos:line="67" pos:column="9">const<pos:position pos:line="67" pos:column="14"/></specifier> <name pos:line="67" pos:column="15">char<pos:position pos:line="67" pos:column="19"/></name> <modifier pos:line="67" pos:column="20">*<pos:position pos:line="67" pos:column="21"/></modifier></type> <name pos:line="67" pos:column="22">requestErrorBytes<pos:position pos:line="67" pos:column="39"/></name> <init pos:line="67" pos:column="40">= <expr><name pos:line="67" pos:column="42">NULL<pos:position pos:line="67" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="67" pos:column="47"/></decl_stmt> <comment type="line" pos:line="67" pos:column="48">//HttpParserHdrBuf(parser_);</comment>
        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><operator pos:line="68" pos:column="13">!<pos:position pos:line="68" pos:column="14"/></operator><call><name pos:line="68" pos:column="14">clientTunnelOnError<pos:position pos:line="68" pos:column="33"/></name><argument_list pos:line="68" pos:column="33">(<argument><expr><name pos:line="68" pos:column="34">this<pos:position pos:line="68" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="40">context<pos:position pos:line="68" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="49">request<pos:position pos:line="68" pos:column="56"/></name></expr></argument>, <argument><expr><call><name><name pos:line="68" pos:column="58">parser_<pos:position pos:line="68" pos:column="65"/></name><operator pos:line="68" pos:column="65">-&gt;<pos:position pos:line="68" pos:column="70"/></operator><name pos:line="68" pos:column="67">method<pos:position pos:line="68" pos:column="73"/></name></name><argument_list pos:line="68" pos:column="73">()<pos:position pos:line="68" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="68" pos:column="77">ERR_UNSUP_HTTPVERSION<pos:position pos:line="68" pos:column="98"/></name></expr></argument>)<pos:position pos:line="68" pos:column="99"/></argument_list></call></expr>)<pos:position pos:line="68" pos:column="100"/></condition><then pos:line="68" pos:column="100"> <block pos:line="68" pos:column="101">{
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">setReplyError<pos:position pos:line="69" pos:column="26"/></name><argument_list pos:line="69" pos:column="26">(<argument><expr><name pos:line="69" pos:column="27">context<pos:position pos:line="69" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="36">request<pos:position pos:line="69" pos:column="43"/></name></expr></argument>, <argument><expr><call><name><name pos:line="69" pos:column="45">parser_<pos:position pos:line="69" pos:column="52"/></name><operator pos:line="69" pos:column="52">-&gt;<pos:position pos:line="69" pos:column="57"/></operator><name pos:line="69" pos:column="54">method<pos:position pos:line="69" pos:column="60"/></name></name><argument_list pos:line="69" pos:column="60">()<pos:position pos:line="69" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="69" pos:column="64">ERR_UNSUP_HTTPVERSION<pos:position pos:line="69" pos:column="85"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="87">Http<pos:position pos:line="69" pos:column="91"/></name><operator pos:line="69" pos:column="91">::<pos:position pos:line="69" pos:column="93"/></operator><name pos:line="69" pos:column="93">scHttpVersionNotSupported<pos:position pos:line="69" pos:column="118"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="120">requestErrorBytes<pos:position pos:line="69" pos:column="137"/></name></expr></argument>)<pos:position pos:line="69" pos:column="138"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="139"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">clientProcessRequestFinished<pos:position pos:line="70" pos:column="41"/></name><argument_list pos:line="70" pos:column="41">(<argument><expr><name pos:line="70" pos:column="42">this<pos:position pos:line="70" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="48">request<pos:position pos:line="70" pos:column="55"/></name></expr></argument>)<pos:position pos:line="70" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="71" pos:column="10"/></block></then></if>
        <return pos:line="72" pos:column="9">return <expr><literal type="boolean" pos:line="72" pos:column="16">false<pos:position pos:line="72" pos:column="21"/></literal></expr>;<pos:position pos:line="72" pos:column="22"/></return>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="75" pos:column="5">/* compile headers */</comment>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><call><name><name pos:line="76" pos:column="9">parser_<pos:position pos:line="76" pos:column="16"/></name><operator pos:line="76" pos:column="16">-&gt;<pos:position pos:line="76" pos:column="21"/></operator><name pos:line="76" pos:column="18">messageProtocol<pos:position pos:line="76" pos:column="33"/></name></name><argument_list pos:line="76" pos:column="33">()<pos:position pos:line="76" pos:column="35"/></argument_list></call><operator pos:line="76" pos:column="35">.<pos:position pos:line="76" pos:column="36"/></operator><name pos:line="76" pos:column="36">major<pos:position pos:line="76" pos:column="41"/></name> <operator pos:line="76" pos:column="42">&gt;=<pos:position pos:line="76" pos:column="47"/></operator> <literal type="number" pos:line="76" pos:column="45">1<pos:position pos:line="76" pos:column="46"/></literal> <operator pos:line="76" pos:column="47">&amp;&amp;<pos:position pos:line="76" pos:column="57"/></operator> <operator pos:line="76" pos:column="50">!<pos:position pos:line="76" pos:column="51"/></operator><call><name><name pos:line="76" pos:column="51">request<pos:position pos:line="76" pos:column="58"/></name><operator pos:line="76" pos:column="58">-&gt;<pos:position pos:line="76" pos:column="63"/></operator><name pos:line="76" pos:column="60">parseHeader<pos:position pos:line="76" pos:column="71"/></name></name><argument_list pos:line="76" pos:column="71">(<argument><expr><operator pos:line="76" pos:column="72">*<pos:position pos:line="76" pos:column="73"/></operator><call><name><name pos:line="76" pos:column="73">parser_<pos:position pos:line="76" pos:column="80"/></name><operator pos:line="76" pos:column="80">.<pos:position pos:line="76" pos:column="81"/></operator><name pos:line="76" pos:column="81">getRaw<pos:position pos:line="76" pos:column="87"/></name></name><argument_list pos:line="76" pos:column="87">()<pos:position pos:line="76" pos:column="89"/></argument_list></call></expr></argument>)<pos:position pos:line="76" pos:column="90"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="91"/></condition><then pos:line="76" pos:column="91"> <block pos:line="76" pos:column="92">{
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">debugs<pos:position pos:line="77" pos:column="15"/></name><argument_list pos:line="77" pos:column="15">(<argument><expr><literal type="number" pos:line="77" pos:column="16">33<pos:position pos:line="77" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="20">5<pos:position pos:line="77" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="23">"Failed to parse request headers:\n"<pos:position pos:line="77" pos:column="59"/></literal> <operator pos:line="77" pos:column="60">&lt;&lt;<pos:position pos:line="77" pos:column="68"/></operator> <call><name><name pos:line="77" pos:column="63">parser_<pos:position pos:line="77" pos:column="70"/></name><operator pos:line="77" pos:column="70">-&gt;<pos:position pos:line="77" pos:column="75"/></operator><name pos:line="77" pos:column="72">mimeHeader<pos:position pos:line="77" pos:column="82"/></name></name><argument_list pos:line="77" pos:column="82">()<pos:position pos:line="77" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="77" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="86"/></expr_stmt>
        <comment type="line" pos:line="78" pos:column="9">// setLogUri should called before repContext-&gt;setReplyToError</comment>
        <expr_stmt><expr><call><name pos:line="79" pos:column="9">setLogUri<pos:position pos:line="79" pos:column="18"/></name><argument_list pos:line="79" pos:column="18">(<argument><expr><name pos:line="79" pos:column="19">http<pos:position pos:line="79" pos:column="23"/></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="25">http<pos:position pos:line="79" pos:column="29"/></name><operator pos:line="79" pos:column="29">-&gt;<pos:position pos:line="79" pos:column="34"/></operator><name pos:line="79" pos:column="31">uri<pos:position pos:line="79" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="79" pos:column="36">true<pos:position pos:line="79" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="42"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="80" pos:column="9">const<pos:position pos:line="80" pos:column="14"/></specifier> <name pos:line="80" pos:column="15">char<pos:position pos:line="80" pos:column="19"/></name> <modifier pos:line="80" pos:column="20">*<pos:position pos:line="80" pos:column="21"/></modifier></type> <name pos:line="80" pos:column="22">requestErrorBytes<pos:position pos:line="80" pos:column="39"/></name> <init pos:line="80" pos:column="40">= <expr><name pos:line="80" pos:column="42">NULL<pos:position pos:line="80" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="80" pos:column="47"/></decl_stmt> <comment type="line" pos:line="80" pos:column="48">//HttpParserHdrBuf(parser_);</comment>
        <if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><operator pos:line="81" pos:column="13">!<pos:position pos:line="81" pos:column="14"/></operator><call><name pos:line="81" pos:column="14">clientTunnelOnError<pos:position pos:line="81" pos:column="33"/></name><argument_list pos:line="81" pos:column="33">(<argument><expr><name pos:line="81" pos:column="34">this<pos:position pos:line="81" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="40">context<pos:position pos:line="81" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="49">request<pos:position pos:line="81" pos:column="56"/></name></expr></argument>, <argument><expr><call><name><name pos:line="81" pos:column="58">parser_<pos:position pos:line="81" pos:column="65"/></name><operator pos:line="81" pos:column="65">-&gt;<pos:position pos:line="81" pos:column="70"/></operator><name pos:line="81" pos:column="67">method<pos:position pos:line="81" pos:column="73"/></name></name><argument_list pos:line="81" pos:column="73">()<pos:position pos:line="81" pos:column="75"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="81" pos:column="77">ERR_INVALID_REQ<pos:position pos:line="81" pos:column="92"/></name></expr></argument>)<pos:position pos:line="81" pos:column="93"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="94"/></condition><then pos:line="81" pos:column="94"> <block pos:line="81" pos:column="95">{
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">setReplyError<pos:position pos:line="82" pos:column="26"/></name><argument_list pos:line="82" pos:column="26">(<argument><expr><name pos:line="82" pos:column="27">context<pos:position pos:line="82" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="36">request<pos:position pos:line="82" pos:column="43"/></name></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="45">parser_<pos:position pos:line="82" pos:column="52"/></name><operator pos:line="82" pos:column="52">-&gt;<pos:position pos:line="82" pos:column="57"/></operator><name pos:line="82" pos:column="54">method<pos:position pos:line="82" pos:column="60"/></name></name><argument_list pos:line="82" pos:column="60">()<pos:position pos:line="82" pos:column="62"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="82" pos:column="64">ERR_INVALID_REQ<pos:position pos:line="82" pos:column="79"/></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="81">Http<pos:position pos:line="82" pos:column="85"/></name><operator pos:line="82" pos:column="85">::<pos:position pos:line="82" pos:column="87"/></operator><name pos:line="82" pos:column="87">scBadRequest<pos:position pos:line="82" pos:column="99"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="101">requestErrorBytes<pos:position pos:line="82" pos:column="118"/></name></expr></argument>)<pos:position pos:line="82" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="120"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">clientProcessRequestFinished<pos:position pos:line="83" pos:column="41"/></name><argument_list pos:line="83" pos:column="41">(<argument><expr><name pos:line="83" pos:column="42">this<pos:position pos:line="83" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="48">request<pos:position pos:line="83" pos:column="55"/></name></expr></argument>)<pos:position pos:line="83" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="84" pos:column="10"/></block></then></if>
        <return pos:line="85" pos:column="9">return <expr><literal type="boolean" pos:line="85" pos:column="16">false<pos:position pos:line="85" pos:column="21"/></literal></expr>;<pos:position pos:line="85" pos:column="22"/></return>
    }<pos:position pos:line="86" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="88" pos:column="5">// when absolute-URI is provided Host header should be ignored. However</comment>
    <comment type="line" pos:line="89" pos:column="5">// some code still uses Host directly so normalize it using the previously</comment>
    <comment type="line" pos:line="90" pos:column="5">// sanitized URL authority value.</comment>
    <comment type="line" pos:line="91" pos:column="5">// For now preserve the case where Host is completely absent. That matters.</comment>
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<decl><type><specifier pos:line="92" pos:column="9">const<pos:position pos:line="92" pos:column="14"/></specifier> <specifier pos:line="92" pos:column="15">auto<pos:position pos:line="92" pos:column="19"/></specifier></type> <name pos:line="92" pos:column="20">x<pos:position pos:line="92" pos:column="21"/></name> <init pos:line="92" pos:column="22">= <expr><call><name><name pos:line="92" pos:column="24">request<pos:position pos:line="92" pos:column="31"/></name><operator pos:line="92" pos:column="31">-&gt;<pos:position pos:line="92" pos:column="36"/></operator><name pos:line="92" pos:column="33">header<pos:position pos:line="92" pos:column="39"/></name><operator pos:line="92" pos:column="39">.<pos:position pos:line="92" pos:column="40"/></operator><name pos:line="92" pos:column="40">delById<pos:position pos:line="92" pos:column="47"/></name></name><argument_list pos:line="92" pos:column="47">(<argument><expr><name><name pos:line="92" pos:column="48">Http<pos:position pos:line="92" pos:column="52"/></name><operator pos:line="92" pos:column="52">::<pos:position pos:line="92" pos:column="54"/></operator><name pos:line="92" pos:column="54">HOST<pos:position pos:line="92" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="59"/></argument_list></call></expr></init></decl>)<pos:position pos:line="92" pos:column="60"/></condition><then pos:line="92" pos:column="60"> <block pos:line="92" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">debugs<pos:position pos:line="93" pos:column="15"/></name><argument_list pos:line="93" pos:column="15">(<argument><expr><literal type="number" pos:line="93" pos:column="16">33<pos:position pos:line="93" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="20">5<pos:position pos:line="93" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="23">"normalize "<pos:position pos:line="93" pos:column="35"/></literal> <operator pos:line="93" pos:column="36">&lt;&lt;<pos:position pos:line="93" pos:column="44"/></operator> <name pos:line="93" pos:column="39">x<pos:position pos:line="93" pos:column="40"/></name> <operator pos:line="93" pos:column="41">&lt;&lt;<pos:position pos:line="93" pos:column="49"/></operator> <literal type="string" pos:line="93" pos:column="44">" Host header using "<pos:position pos:line="93" pos:column="65"/></literal> <operator pos:line="93" pos:column="66">&lt;&lt;<pos:position pos:line="93" pos:column="74"/></operator> <call><name><name pos:line="93" pos:column="69">request<pos:position pos:line="93" pos:column="76"/></name><operator pos:line="93" pos:column="76">-&gt;<pos:position pos:line="93" pos:column="81"/></operator><name pos:line="93" pos:column="78">url<pos:position pos:line="93" pos:column="81"/></name><operator pos:line="93" pos:column="81">.<pos:position pos:line="93" pos:column="82"/></operator><name pos:line="93" pos:column="82">authority<pos:position pos:line="93" pos:column="91"/></name></name><argument_list pos:line="93" pos:column="91">()<pos:position pos:line="93" pos:column="93"/></argument_list></call></expr></argument>)<pos:position pos:line="93" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="95"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="94" pos:column="9">SBuf<pos:position pos:line="94" pos:column="13"/></name></type> <name pos:line="94" pos:column="14">tmp<pos:position pos:line="94" pos:column="17"/></name><argument_list pos:line="94" pos:column="17">(<argument><expr><call><name><name pos:line="94" pos:column="18">request<pos:position pos:line="94" pos:column="25"/></name><operator pos:line="94" pos:column="25">-&gt;<pos:position pos:line="94" pos:column="30"/></operator><name pos:line="94" pos:column="27">url<pos:position pos:line="94" pos:column="30"/></name><operator pos:line="94" pos:column="30">.<pos:position pos:line="94" pos:column="31"/></operator><name pos:line="94" pos:column="31">authority<pos:position pos:line="94" pos:column="40"/></name></name><argument_list pos:line="94" pos:column="40">()<pos:position pos:line="94" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="94" pos:column="43"/></argument_list></decl>;<pos:position pos:line="94" pos:column="44"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="95" pos:column="9">request<pos:position pos:line="95" pos:column="16"/></name><operator pos:line="95" pos:column="16">-&gt;<pos:position pos:line="95" pos:column="21"/></operator><name pos:line="95" pos:column="18">header<pos:position pos:line="95" pos:column="24"/></name><operator pos:line="95" pos:column="24">.<pos:position pos:line="95" pos:column="25"/></operator><name pos:line="95" pos:column="25">putStr<pos:position pos:line="95" pos:column="31"/></name></name><argument_list pos:line="95" pos:column="31">(<argument><expr><name><name pos:line="95" pos:column="32">Http<pos:position pos:line="95" pos:column="36"/></name><operator pos:line="95" pos:column="36">::<pos:position pos:line="95" pos:column="38"/></operator><name pos:line="95" pos:column="38">HOST<pos:position pos:line="95" pos:column="42"/></name></name></expr></argument>, <argument><expr><call><name><name pos:line="95" pos:column="44">tmp<pos:position pos:line="95" pos:column="47"/></name><operator pos:line="95" pos:column="47">.<pos:position pos:line="95" pos:column="48"/></operator><name pos:line="95" pos:column="48">c_str<pos:position pos:line="95" pos:column="53"/></name></name><argument_list pos:line="95" pos:column="53">()<pos:position pos:line="95" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="95" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="98" pos:column="5">http<pos:position pos:line="98" pos:column="9"/></name><operator pos:line="98" pos:column="9">-&gt;<pos:position pos:line="98" pos:column="14"/></operator><name pos:line="98" pos:column="11">request<pos:position pos:line="98" pos:column="18"/></name></name> <operator pos:line="98" pos:column="19">=<pos:position pos:line="98" pos:column="20"/></operator> <call><name><name pos:line="98" pos:column="21">request<pos:position pos:line="98" pos:column="28"/></name><operator pos:line="98" pos:column="28">.<pos:position pos:line="98" pos:column="29"/></operator><name pos:line="98" pos:column="29">getRaw<pos:position pos:line="98" pos:column="35"/></name></name><argument_list pos:line="98" pos:column="35">()<pos:position pos:line="98" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">HTTPMSGLOCK<pos:position pos:line="99" pos:column="16"/></name><argument_list pos:line="99" pos:column="16">(<argument><expr><name><name pos:line="99" pos:column="17">http<pos:position pos:line="99" pos:column="21"/></name><operator pos:line="99" pos:column="21">-&gt;<pos:position pos:line="99" pos:column="26"/></operator><name pos:line="99" pos:column="23">request<pos:position pos:line="99" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="32"/></expr_stmt>

    <return pos:line="101" pos:column="5">return <expr><literal type="boolean" pos:line="101" pos:column="12">true<pos:position pos:line="101" pos:column="16"/></literal></expr>;<pos:position pos:line="101" pos:column="17"/></return>
}<pos:position pos:line="102" pos:column="2"/></block></function></unit>
