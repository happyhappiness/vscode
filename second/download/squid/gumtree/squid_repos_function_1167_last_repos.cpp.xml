<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1167_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">mayStartSwapOut<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">()<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// must be checked in the caller</comment>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><operator pos:line="5" pos:column="12">!<pos:position pos:line="5" pos:column="13"/></operator><call><name pos:line="5" pos:column="13">EBIT_TEST<pos:position pos:line="5" pos:column="22"/></name><argument_list pos:line="5" pos:column="22">(<argument><expr><name pos:line="5" pos:column="23">flags<pos:position pos:line="5" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="30">ENTRY_ABORTED<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><operator pos:line="6" pos:column="12">!<pos:position pos:line="6" pos:column="13"/></operator><call><name pos:line="6" pos:column="13">swappingOut<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">()<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="28"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">Config<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">.<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">cacheSwap<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">.<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">n_configured<pos:position pos:line="8" pos:column="39"/></name></name></expr>)<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><literal type="boolean" pos:line="9" pos:column="16">false<pos:position pos:line="9" pos:column="21"/></literal></expr>;<pos:position pos:line="9" pos:column="22"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">mem_obj<pos:position pos:line="11" pos:column="19"/></name></expr></argument>)<pos:position pos:line="11" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="21"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name><name pos:line="12" pos:column="11">MemObject<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">::<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">SwapOut<pos:position pos:line="12" pos:column="29"/></name><operator pos:line="12" pos:column="29">::<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">Decision<pos:position pos:line="12" pos:column="39"/></name></name> <modifier pos:line="12" pos:column="40">&amp;<pos:position pos:line="12" pos:column="45"/></modifier></type><name pos:line="12" pos:column="41">decision<pos:position pos:line="12" pos:column="49"/></name> <init pos:line="12" pos:column="50">= <expr><name><name pos:line="12" pos:column="52">mem_obj<pos:position pos:line="12" pos:column="59"/></name><operator pos:line="12" pos:column="59">-&gt;<pos:position pos:line="12" pos:column="64"/></operator><name pos:line="12" pos:column="61">swapout<pos:position pos:line="12" pos:column="68"/></name><operator pos:line="12" pos:column="68">.<pos:position pos:line="12" pos:column="69"/></operator><name pos:line="12" pos:column="69">decision<pos:position pos:line="12" pos:column="77"/></name></name></expr></init></decl>;<pos:position pos:line="12" pos:column="78"/></decl_stmt>

    <comment type="line" pos:line="14" pos:column="5">// if we decided that starting is not possible, do not repeat same checks</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">decision<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">==<pos:position pos:line="15" pos:column="20"/></operator> <name><name pos:line="15" pos:column="21">MemObject<pos:position pos:line="15" pos:column="30"/></name><operator pos:line="15" pos:column="30">::<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="32">SwapOut<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">::<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="41">swImpossible<pos:position pos:line="15" pos:column="53"/></name></name></expr>)<pos:position pos:line="15" pos:column="54"/></condition><then pos:line="15" pos:column="54"> <block pos:line="15" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">20<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">3<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="23">HERE<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&lt;&lt;<pos:position pos:line="16" pos:column="36"/></operator> <literal type="string" pos:line="16" pos:column="31">" already rejected"<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><literal type="boolean" pos:line="17" pos:column="16">false<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="20" pos:column="5">// if we swapped out already, do not start over</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">swap_status<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">==<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">SWAPOUT_DONE<pos:position pos:line="21" pos:column="36"/></name></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37"> <block pos:line="21" pos:column="38">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">debugs<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="number" pos:line="22" pos:column="16">20<pos:position pos:line="22" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="20">3<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="23">"already did"<pos:position pos:line="22" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">swapOutDecision<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name><name pos:line="23" pos:column="25">MemObject<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">::<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="36">SwapOut<pos:position pos:line="23" pos:column="43"/></name><operator pos:line="23" pos:column="43">::<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="45">swImpossible<pos:position pos:line="23" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><literal type="boolean" pos:line="24" pos:column="16">false<pos:position pos:line="24" pos:column="21"/></literal></expr>;<pos:position pos:line="24" pos:column="22"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="27" pos:column="5">// if we stared swapping out already, do not start over</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">decision<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">==<pos:position pos:line="28" pos:column="20"/></operator> <name><name pos:line="28" pos:column="21">MemObject<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">::<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="32">SwapOut<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">::<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="41">swStarted<pos:position pos:line="28" pos:column="50"/></name></name></expr>)<pos:position pos:line="28" pos:column="51"/></condition><then pos:line="28" pos:column="51"> <block pos:line="28" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">20<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="20">3<pos:position pos:line="29" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="23">"already started"<pos:position pos:line="29" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">swapOutDecision<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name><name pos:line="30" pos:column="25">MemObject<pos:position pos:line="30" pos:column="34"/></name><operator pos:line="30" pos:column="34">::<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="36">SwapOut<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">::<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="45">swImpossible<pos:position pos:line="30" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><literal type="boolean" pos:line="31" pos:column="16">false<pos:position pos:line="31" pos:column="21"/></literal></expr>;<pos:position pos:line="31" pos:column="22"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="34" pos:column="5">// if we decided that swapout is possible, do not repeat same checks</comment>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">decision<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">==<pos:position pos:line="35" pos:column="20"/></operator> <name><name pos:line="35" pos:column="21">MemObject<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">::<pos:position pos:line="35" pos:column="32"/></operator><name pos:line="35" pos:column="32">SwapOut<pos:position pos:line="35" pos:column="39"/></name><operator pos:line="35" pos:column="39">::<pos:position pos:line="35" pos:column="41"/></operator><name pos:line="35" pos:column="41">swPossible<pos:position pos:line="35" pos:column="51"/></name></name></expr>)<pos:position pos:line="35" pos:column="52"/></condition><then pos:line="35" pos:column="52"> <block pos:line="35" pos:column="53">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">debugs<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><literal type="number" pos:line="36" pos:column="16">20<pos:position pos:line="36" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="20">3<pos:position pos:line="36" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="23">"already allowed"<pos:position pos:line="36" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="42"/></expr_stmt>
        <return pos:line="37" pos:column="9">return <expr><literal type="boolean" pos:line="37" pos:column="16">true<pos:position pos:line="37" pos:column="20"/></literal></expr>;<pos:position pos:line="37" pos:column="21"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><operator pos:line="40" pos:column="9">!<pos:position pos:line="40" pos:column="10"/></operator><call><name pos:line="40" pos:column="10">checkCachable<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">()<pos:position pos:line="40" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="26"/></condition><then pos:line="40" pos:column="26"> <block pos:line="40" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">debugs<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><literal type="number" pos:line="41" pos:column="16">20<pos:position pos:line="41" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="20">3<pos:position pos:line="41" pos:column="21"/></literal></expr></argument>,  <argument><expr><name pos:line="41" pos:column="24">HERE<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">&lt;&lt;<pos:position pos:line="41" pos:column="37"/></operator> <literal type="string" pos:line="41" pos:column="32">"not cachable"<pos:position pos:line="41" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">swapOutDecision<pos:position pos:line="42" pos:column="24"/></name><argument_list pos:line="42" pos:column="24">(<argument><expr><name><name pos:line="42" pos:column="25">MemObject<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">::<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="36">SwapOut<pos:position pos:line="42" pos:column="43"/></name><operator pos:line="42" pos:column="43">::<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="45">swImpossible<pos:position pos:line="42" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="59"/></expr_stmt>
        <return pos:line="43" pos:column="9">return <expr><literal type="boolean" pos:line="43" pos:column="16">false<pos:position pos:line="43" pos:column="21"/></literal></expr>;<pos:position pos:line="43" pos:column="22"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">EBIT_TEST<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name pos:line="46" pos:column="19">flags<pos:position pos:line="46" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="26">ENTRY_SPECIAL<pos:position pos:line="46" pos:column="39"/></name></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="41"/></condition><then pos:line="46" pos:column="41"> <block pos:line="46" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">debugs<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="number" pos:line="47" pos:column="16">20<pos:position pos:line="47" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="20">3<pos:position pos:line="47" pos:column="21"/></literal></expr></argument>,  <argument><expr><name pos:line="47" pos:column="24">HERE<pos:position pos:line="47" pos:column="28"/></name>  <operator pos:line="47" pos:column="30">&lt;&lt;<pos:position pos:line="47" pos:column="38"/></operator> <call><name pos:line="47" pos:column="33">url<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">()<pos:position pos:line="47" pos:column="38"/></argument_list></call> <operator pos:line="47" pos:column="39">&lt;&lt;<pos:position pos:line="47" pos:column="47"/></operator> <literal type="string" pos:line="47" pos:column="42">" SPECIAL"<pos:position pos:line="47" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">swapOutDecision<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><name><name pos:line="48" pos:column="25">MemObject<pos:position pos:line="48" pos:column="34"/></name><operator pos:line="48" pos:column="34">::<pos:position pos:line="48" pos:column="36"/></operator><name pos:line="48" pos:column="36">SwapOut<pos:position pos:line="48" pos:column="43"/></name><operator pos:line="48" pos:column="43">::<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="45">swImpossible<pos:position pos:line="48" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="59"/></expr_stmt>
        <return pos:line="49" pos:column="9">return <expr><literal type="boolean" pos:line="49" pos:column="16">false<pos:position pos:line="49" pos:column="21"/></literal></expr>;<pos:position pos:line="49" pos:column="22"/></return>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name><name pos:line="52" pos:column="9">mem_obj<pos:position pos:line="52" pos:column="16"/></name><operator pos:line="52" pos:column="16">-&gt;<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="18">inmem_lo<pos:position pos:line="52" pos:column="26"/></name></name> <operator pos:line="52" pos:column="27">&gt;<pos:position pos:line="52" pos:column="31"/></operator> <literal type="number" pos:line="52" pos:column="29">0<pos:position pos:line="52" pos:column="30"/></literal></expr>)<pos:position pos:line="52" pos:column="31"/></condition><then pos:line="52" pos:column="31"> <block pos:line="52" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">debugs<pos:position pos:line="53" pos:column="15"/></name><argument_list pos:line="53" pos:column="15">(<argument><expr><literal type="number" pos:line="53" pos:column="16">20<pos:position pos:line="53" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="20">3<pos:position pos:line="53" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="23">"storeSwapOut: (inmem_lo &gt; 0)  imem_lo:"<pos:position pos:line="53" pos:column="66"/></literal> <operator pos:line="53" pos:column="64">&lt;&lt;<pos:position pos:line="53" pos:column="72"/></operator>  <name><name pos:line="53" pos:column="68">mem_obj<pos:position pos:line="53" pos:column="75"/></name><operator pos:line="53" pos:column="75">-&gt;<pos:position pos:line="53" pos:column="80"/></operator><name pos:line="53" pos:column="77">inmem_lo<pos:position pos:line="53" pos:column="85"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="87"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">swapOutDecision<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name><name pos:line="54" pos:column="25">MemObject<pos:position pos:line="54" pos:column="34"/></name><operator pos:line="54" pos:column="34">::<pos:position pos:line="54" pos:column="36"/></operator><name pos:line="54" pos:column="36">SwapOut<pos:position pos:line="54" pos:column="43"/></name><operator pos:line="54" pos:column="43">::<pos:position pos:line="54" pos:column="45"/></operator><name pos:line="54" pos:column="45">swImpossible<pos:position pos:line="54" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="59"/></expr_stmt>
        <return pos:line="55" pos:column="9">return <expr><literal type="boolean" pos:line="55" pos:column="16">false<pos:position pos:line="55" pos:column="21"/></literal></expr>;<pos:position pos:line="55" pos:column="22"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><operator pos:line="58" pos:column="9">!<pos:position pos:line="58" pos:column="10"/></operator><call><name><name pos:line="58" pos:column="10">mem_obj<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">-&gt;<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="19">isContiguous<pos:position pos:line="58" pos:column="31"/></name></name><argument_list pos:line="58" pos:column="31">()<pos:position pos:line="58" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="34"/></condition><then pos:line="58" pos:column="34"> <block pos:line="58" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">debugs<pos:position pos:line="59" pos:column="15"/></name><argument_list pos:line="59" pos:column="15">(<argument><expr><literal type="number" pos:line="59" pos:column="16">20<pos:position pos:line="59" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="20">3<pos:position pos:line="59" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="59" pos:column="23">"storeSwapOut: not Contiguous"<pos:position pos:line="59" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">swapOutDecision<pos:position pos:line="60" pos:column="24"/></name><argument_list pos:line="60" pos:column="24">(<argument><expr><name><name pos:line="60" pos:column="25">MemObject<pos:position pos:line="60" pos:column="34"/></name><operator pos:line="60" pos:column="34">::<pos:position pos:line="60" pos:column="36"/></operator><name pos:line="60" pos:column="36">SwapOut<pos:position pos:line="60" pos:column="43"/></name><operator pos:line="60" pos:column="43">::<pos:position pos:line="60" pos:column="45"/></operator><name pos:line="60" pos:column="45">swImpossible<pos:position pos:line="60" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="59"/></expr_stmt>
        <return pos:line="61" pos:column="9">return <expr><literal type="boolean" pos:line="61" pos:column="16">false<pos:position pos:line="61" pos:column="21"/></literal></expr>;<pos:position pos:line="61" pos:column="22"/></return>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="64" pos:column="5">// handle store_maxobjsize limit</comment>
    <block pos:line="65" pos:column="5">{
        <comment type="line" pos:line="66" pos:column="9">// TODO: add estimated store metadata size to be conservative</comment>

        <comment type="line" pos:line="68" pos:column="9">// use guaranteed maximum if it is known</comment>
        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">const<pos:position pos:line="69" pos:column="14"/></specifier> <name pos:line="69" pos:column="15">int64_t<pos:position pos:line="69" pos:column="22"/></name></type> <name pos:line="69" pos:column="23">expectedEnd<pos:position pos:line="69" pos:column="34"/></name> <init pos:line="69" pos:column="35">= <expr><call><name><name pos:line="69" pos:column="37">mem_obj<pos:position pos:line="69" pos:column="44"/></name><operator pos:line="69" pos:column="44">-&gt;<pos:position pos:line="69" pos:column="49"/></operator><name pos:line="69" pos:column="46">expectedReplySize<pos:position pos:line="69" pos:column="63"/></name></name><argument_list pos:line="69" pos:column="63">()<pos:position pos:line="69" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="69" pos:column="66"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">debugs<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><literal type="number" pos:line="70" pos:column="16">20<pos:position pos:line="70" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="20">7<pos:position pos:line="70" pos:column="21"/></literal></expr></argument>,  <argument><expr><name pos:line="70" pos:column="24">HERE<pos:position pos:line="70" pos:column="28"/></name> <operator pos:line="70" pos:column="29">&lt;&lt;<pos:position pos:line="70" pos:column="37"/></operator> <literal type="string" pos:line="70" pos:column="32">"expectedEnd = "<pos:position pos:line="70" pos:column="48"/></literal> <operator pos:line="70" pos:column="49">&lt;&lt;<pos:position pos:line="70" pos:column="57"/></operator> <name pos:line="70" pos:column="52">expectedEnd<pos:position pos:line="70" pos:column="63"/></name></expr></argument>)<pos:position pos:line="70" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="65"/></expr_stmt>
        <if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><name pos:line="71" pos:column="13">expectedEnd<pos:position pos:line="71" pos:column="24"/></name> <operator pos:line="71" pos:column="25">&gt;<pos:position pos:line="71" pos:column="29"/></operator> <name pos:line="71" pos:column="27">store_maxobjsize<pos:position pos:line="71" pos:column="43"/></name></expr>)<pos:position pos:line="71" pos:column="44"/></condition><then pos:line="71" pos:column="44"> <block pos:line="71" pos:column="45">{
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">debugs<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">(<argument><expr><literal type="number" pos:line="72" pos:column="20">20<pos:position pos:line="72" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="24">3<pos:position pos:line="72" pos:column="25"/></literal></expr></argument>,  <argument><expr><name pos:line="72" pos:column="28">HERE<pos:position pos:line="72" pos:column="32"/></name> <operator pos:line="72" pos:column="33">&lt;&lt;<pos:position pos:line="72" pos:column="41"/></operator> <literal type="string" pos:line="72" pos:column="36">"will not fit: "<pos:position pos:line="72" pos:column="52"/></literal> <operator pos:line="72" pos:column="53">&lt;&lt;<pos:position pos:line="72" pos:column="61"/></operator> <name pos:line="72" pos:column="56">expectedEnd<pos:position pos:line="72" pos:column="67"/></name> <operator pos:line="72" pos:column="68">&lt;&lt;<pos:position pos:line="72" pos:column="76"/></operator>
                   <literal type="string" pos:line="73" pos:column="20">" &gt; "<pos:position pos:line="73" pos:column="28"/></literal> <operator pos:line="73" pos:column="26">&lt;&lt;<pos:position pos:line="73" pos:column="34"/></operator> <name pos:line="73" pos:column="29">store_maxobjsize<pos:position pos:line="73" pos:column="45"/></name></expr></argument>)<pos:position pos:line="73" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="74" pos:column="13">swapOutDecision<pos:position pos:line="74" pos:column="28"/></name><argument_list pos:line="74" pos:column="28">(<argument><expr><name><name pos:line="74" pos:column="29">MemObject<pos:position pos:line="74" pos:column="38"/></name><operator pos:line="74" pos:column="38">::<pos:position pos:line="74" pos:column="40"/></operator><name pos:line="74" pos:column="40">SwapOut<pos:position pos:line="74" pos:column="47"/></name><operator pos:line="74" pos:column="47">::<pos:position pos:line="74" pos:column="49"/></operator><name pos:line="74" pos:column="49">swImpossible<pos:position pos:line="74" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="63"/></expr_stmt>
            <return pos:line="75" pos:column="13">return <expr><literal type="boolean" pos:line="75" pos:column="20">false<pos:position pos:line="75" pos:column="25"/></literal></expr>;<pos:position pos:line="75" pos:column="26"/></return> <comment type="line" pos:line="75" pos:column="27">// known to outgrow the limit eventually</comment>
        }<pos:position pos:line="76" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="78" pos:column="9">// use current minimum (always known)</comment>
        <decl_stmt><decl><type><specifier pos:line="79" pos:column="9">const<pos:position pos:line="79" pos:column="14"/></specifier> <name pos:line="79" pos:column="15">int64_t<pos:position pos:line="79" pos:column="22"/></name></type> <name pos:line="79" pos:column="23">currentEnd<pos:position pos:line="79" pos:column="33"/></name> <init pos:line="79" pos:column="34">= <expr><call><name><name pos:line="79" pos:column="36">mem_obj<pos:position pos:line="79" pos:column="43"/></name><operator pos:line="79" pos:column="43">-&gt;<pos:position pos:line="79" pos:column="48"/></operator><name pos:line="79" pos:column="45">endOffset<pos:position pos:line="79" pos:column="54"/></name></name><argument_list pos:line="79" pos:column="54">()<pos:position pos:line="79" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="79" pos:column="57"/></decl_stmt>
        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">currentEnd<pos:position pos:line="80" pos:column="23"/></name> <operator pos:line="80" pos:column="24">&gt;<pos:position pos:line="80" pos:column="28"/></operator> <name pos:line="80" pos:column="26">store_maxobjsize<pos:position pos:line="80" pos:column="42"/></name></expr>)<pos:position pos:line="80" pos:column="43"/></condition><then pos:line="80" pos:column="43"> <block pos:line="80" pos:column="44">{
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">debugs<pos:position pos:line="81" pos:column="19"/></name><argument_list pos:line="81" pos:column="19">(<argument><expr><literal type="number" pos:line="81" pos:column="20">20<pos:position pos:line="81" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="24">3<pos:position pos:line="81" pos:column="25"/></literal></expr></argument>,  <argument><expr><name pos:line="81" pos:column="28">HERE<pos:position pos:line="81" pos:column="32"/></name> <operator pos:line="81" pos:column="33">&lt;&lt;<pos:position pos:line="81" pos:column="41"/></operator> <literal type="string" pos:line="81" pos:column="36">"does not fit: "<pos:position pos:line="81" pos:column="52"/></literal> <operator pos:line="81" pos:column="53">&lt;&lt;<pos:position pos:line="81" pos:column="61"/></operator> <name pos:line="81" pos:column="56">currentEnd<pos:position pos:line="81" pos:column="66"/></name> <operator pos:line="81" pos:column="67">&lt;&lt;<pos:position pos:line="81" pos:column="75"/></operator>
                   <literal type="string" pos:line="82" pos:column="20">" &gt; "<pos:position pos:line="82" pos:column="28"/></literal> <operator pos:line="82" pos:column="26">&lt;&lt;<pos:position pos:line="82" pos:column="34"/></operator> <name pos:line="82" pos:column="29">store_maxobjsize<pos:position pos:line="82" pos:column="45"/></name></expr></argument>)<pos:position pos:line="82" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="83" pos:column="13">swapOutDecision<pos:position pos:line="83" pos:column="28"/></name><argument_list pos:line="83" pos:column="28">(<argument><expr><name><name pos:line="83" pos:column="29">MemObject<pos:position pos:line="83" pos:column="38"/></name><operator pos:line="83" pos:column="38">::<pos:position pos:line="83" pos:column="40"/></operator><name pos:line="83" pos:column="40">SwapOut<pos:position pos:line="83" pos:column="47"/></name><operator pos:line="83" pos:column="47">::<pos:position pos:line="83" pos:column="49"/></operator><name pos:line="83" pos:column="49">swImpossible<pos:position pos:line="83" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="63"/></expr_stmt>
            <return pos:line="84" pos:column="13">return <expr><literal type="boolean" pos:line="84" pos:column="20">false<pos:position pos:line="84" pos:column="25"/></literal></expr>;<pos:position pos:line="84" pos:column="26"/></return> <comment type="line" pos:line="84" pos:column="27">// already does not fit and may only get bigger</comment>
        }<pos:position pos:line="85" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="87" pos:column="9">// prevent final default swPossible answer for yet unknown length</comment>
        <if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><name pos:line="88" pos:column="13">expectedEnd<pos:position pos:line="88" pos:column="24"/></name> <operator pos:line="88" pos:column="25">&lt;<pos:position pos:line="88" pos:column="29"/></operator> <literal type="number" pos:line="88" pos:column="27">0<pos:position pos:line="88" pos:column="28"/></literal> <operator pos:line="88" pos:column="29">&amp;&amp;<pos:position pos:line="88" pos:column="39"/></operator> <name pos:line="88" pos:column="32">store_status<pos:position pos:line="88" pos:column="44"/></name> <operator pos:line="88" pos:column="45">!=<pos:position pos:line="88" pos:column="47"/></operator> <name pos:line="88" pos:column="48">STORE_OK<pos:position pos:line="88" pos:column="56"/></name></expr>)<pos:position pos:line="88" pos:column="57"/></condition><then pos:line="88" pos:column="57"> <block pos:line="88" pos:column="58">{
            <decl_stmt><decl><type><specifier pos:line="89" pos:column="13">const<pos:position pos:line="89" pos:column="18"/></specifier> <name pos:line="89" pos:column="19">int64_t<pos:position pos:line="89" pos:column="26"/></name></type> <name pos:line="89" pos:column="27">more<pos:position pos:line="89" pos:column="31"/></name> <init pos:line="89" pos:column="32">= <expr><call><name><name pos:line="89" pos:column="34">Store<pos:position pos:line="89" pos:column="39"/></name><operator pos:line="89" pos:column="39">::<pos:position pos:line="89" pos:column="41"/></operator><name pos:line="89" pos:column="41">Root<pos:position pos:line="89" pos:column="45"/></name></name><argument_list pos:line="89" pos:column="45">()<pos:position pos:line="89" pos:column="47"/></argument_list></call><operator pos:line="89" pos:column="47">.<pos:position pos:line="89" pos:column="48"/></operator><call><name pos:line="89" pos:column="48">accumulateMore<pos:position pos:line="89" pos:column="62"/></name><argument_list pos:line="89" pos:column="62">(<argument><expr><operator pos:line="89" pos:column="63">*<pos:position pos:line="89" pos:column="64"/></operator><name pos:line="89" pos:column="64">this<pos:position pos:line="89" pos:column="68"/></name></expr></argument>)<pos:position pos:line="89" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="89" pos:column="70"/></decl_stmt>
            <if pos:line="90" pos:column="13">if <condition pos:line="90" pos:column="16">(<expr><name pos:line="90" pos:column="17">more<pos:position pos:line="90" pos:column="21"/></name> <operator pos:line="90" pos:column="22">&gt;<pos:position pos:line="90" pos:column="26"/></operator> <literal type="number" pos:line="90" pos:column="24">0<pos:position pos:line="90" pos:column="25"/></literal></expr>)<pos:position pos:line="90" pos:column="26"/></condition><then pos:line="90" pos:column="26"> <block pos:line="90" pos:column="27">{
                <expr_stmt><expr><call><name pos:line="91" pos:column="17">debugs<pos:position pos:line="91" pos:column="23"/></name><argument_list pos:line="91" pos:column="23">(<argument><expr><literal type="number" pos:line="91" pos:column="24">20<pos:position pos:line="91" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="28">5<pos:position pos:line="91" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="31">"got "<pos:position pos:line="91" pos:column="37"/></literal> <operator pos:line="91" pos:column="38">&lt;&lt;<pos:position pos:line="91" pos:column="46"/></operator> <name pos:line="91" pos:column="41">currentEnd<pos:position pos:line="91" pos:column="51"/></name> <operator pos:line="91" pos:column="52">&lt;&lt;<pos:position pos:line="91" pos:column="60"/></operator> <literal type="string" pos:line="91" pos:column="55">"; defer decision for "<pos:position pos:line="91" pos:column="78"/></literal> <operator pos:line="91" pos:column="79">&lt;&lt;<pos:position pos:line="91" pos:column="87"/></operator> <name pos:line="91" pos:column="82">more<pos:position pos:line="91" pos:column="86"/></name> <operator pos:line="91" pos:column="87">&lt;&lt;<pos:position pos:line="91" pos:column="95"/></operator> <literal type="string" pos:line="91" pos:column="90">" more bytes"<pos:position pos:line="91" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="105"/></expr_stmt>
                <return pos:line="92" pos:column="17">return <expr><literal type="boolean" pos:line="92" pos:column="24">true<pos:position pos:line="92" pos:column="28"/></literal></expr>;<pos:position pos:line="92" pos:column="29"/></return> <comment type="line" pos:line="92" pos:column="30">// may still fit, but no final decision yet</comment>
            }<pos:position pos:line="93" pos:column="14"/></block></then></if>
        }<pos:position pos:line="94" pos:column="10"/></block></then></if>
    }<pos:position pos:line="95" pos:column="6"/></block>

    <expr_stmt><expr><call><name pos:line="97" pos:column="5">swapOutDecision<pos:position pos:line="97" pos:column="20"/></name><argument_list pos:line="97" pos:column="20">(<argument><expr><name><name pos:line="97" pos:column="21">MemObject<pos:position pos:line="97" pos:column="30"/></name><operator pos:line="97" pos:column="30">::<pos:position pos:line="97" pos:column="32"/></operator><name pos:line="97" pos:column="32">SwapOut<pos:position pos:line="97" pos:column="39"/></name><operator pos:line="97" pos:column="39">::<pos:position pos:line="97" pos:column="41"/></operator><name pos:line="97" pos:column="41">swPossible<pos:position pos:line="97" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="53"/></expr_stmt>
    <return pos:line="98" pos:column="5">return <expr><literal type="boolean" pos:line="98" pos:column="12">true<pos:position pos:line="98" pos:column="16"/></literal></expr>;<pos:position pos:line="98" pos:column="17"/></return>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
