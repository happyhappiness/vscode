<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4843_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLFlags<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">parseFlags<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">()<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">nextToken<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <while pos:line="5" pos:column="5">while <condition pos:line="5" pos:column="11">(<expr><operator pos:line="5" pos:column="12">(<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="13">nextToken<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">=<pos:position pos:line="5" pos:column="24"/></operator> <call><name><name pos:line="5" pos:column="25">ConfigParser<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">::<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="39">PeekAtToken<pos:position pos:line="5" pos:column="50"/></name></name><argument_list pos:line="5" pos:column="50">()<pos:position pos:line="5" pos:column="52"/></argument_list></call><operator pos:line="5" pos:column="52">)<pos:position pos:line="5" pos:column="53"/></operator> <operator pos:line="5" pos:column="54">!=<pos:position pos:line="5" pos:column="56"/></operator> <name pos:line="5" pos:column="57">NULL<pos:position pos:line="5" pos:column="61"/></name> <operator pos:line="5" pos:column="62">&amp;&amp;<pos:position pos:line="5" pos:column="72"/></operator> <name><name pos:line="5" pos:column="65">nextToken<pos:position pos:line="5" pos:column="74"/></name><index pos:line="5" pos:column="74">[<expr><literal type="number" pos:line="5" pos:column="75">0<pos:position pos:line="5" pos:column="76"/></literal></expr>]<pos:position pos:line="5" pos:column="77"/></index></name> <operator pos:line="5" pos:column="78">==<pos:position pos:line="5" pos:column="80"/></operator> <literal type="char" pos:line="5" pos:column="81">'-'<pos:position pos:line="5" pos:column="84"/></literal></expr>)<pos:position pos:line="5" pos:column="85"/></condition> <block pos:line="5" pos:column="86">{
        <expr_stmt><expr><operator pos:line="6" pos:column="9">(<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">void<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">)<pos:position pos:line="6" pos:column="15"/></operator><call><name><name pos:line="6" pos:column="15">ConfigParser<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">::<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="29">NextToken<pos:position pos:line="6" pos:column="38"/></name></name><argument_list pos:line="6" pos:column="38">()<pos:position pos:line="6" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="41"/></expr_stmt> <comment type="line" pos:line="6" pos:column="42">//Get token from cfg line</comment>
        <comment type="line" pos:line="7" pos:column="9">//if token is the "--" break flag</comment>
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">strcmp<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">nextToken<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="31">"--"<pos:position pos:line="8" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="36"/></argument_list></call> <operator pos:line="8" pos:column="37">==<pos:position pos:line="8" pos:column="39"/></operator> <literal type="number" pos:line="8" pos:column="40">0<pos:position pos:line="8" pos:column="41"/></literal></expr>)<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42">
            <block type="pseudo"><break pos:line="9" pos:column="13">break;<pos:position pos:line="9" pos:column="19"/></break></block></then></if>

        <for pos:line="11" pos:column="9">for <control pos:line="11" pos:column="13">(<init><decl><type><specifier pos:line="11" pos:column="14">const<pos:position pos:line="11" pos:column="19"/></specifier> <name pos:line="11" pos:column="20">char<pos:position pos:line="11" pos:column="24"/></name> <modifier pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></modifier></type><name pos:line="11" pos:column="26">flg<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><name pos:line="11" pos:column="32">nextToken<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">+<pos:position pos:line="11" pos:column="42"/></operator><literal type="number" pos:line="11" pos:column="42">1<pos:position pos:line="11" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="44"/></init> <condition><expr><operator pos:line="11" pos:column="45">*<pos:position pos:line="11" pos:column="46"/></operator><name pos:line="11" pos:column="46">flg<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">!=<pos:position pos:line="11" pos:column="51"/></operator><literal type="char" pos:line="11" pos:column="51">'\0'<pos:position pos:line="11" pos:column="55"/></literal></expr>;<pos:position pos:line="11" pos:column="56"/></condition> <incr><expr><name pos:line="11" pos:column="57">flg<pos:position pos:line="11" pos:column="60"/></name><operator pos:line="11" pos:column="60">++<pos:position pos:line="11" pos:column="62"/></operator></expr></incr> )<pos:position pos:line="11" pos:column="64"/></control> <block pos:line="11" pos:column="65">{
            <if pos:line="12" pos:column="13">if <condition pos:line="12" pos:column="16">(<expr><call><name pos:line="12" pos:column="17">supported<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><operator pos:line="12" pos:column="27">*<pos:position pos:line="12" pos:column="28"/></operator><name pos:line="12" pos:column="28">flg<pos:position pos:line="12" pos:column="31"/></name></expr></argument>)<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="33"/></condition><then pos:line="12" pos:column="33"> <block pos:line="12" pos:column="34">{
                <expr_stmt><expr><call><name pos:line="13" pos:column="17">makeSet<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><operator pos:line="13" pos:column="25">*<pos:position pos:line="13" pos:column="26"/></operator><name pos:line="13" pos:column="26">flg<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>
            }<pos:position pos:line="14" pos:column="14"/></block></then> <else pos:line="14" pos:column="15">else <block pos:line="14" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="15" pos:column="17">debugs<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><literal type="number" pos:line="15" pos:column="24">28<pos:position pos:line="15" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="28">0<pos:position pos:line="15" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="31">HERE<pos:position pos:line="15" pos:column="35"/></name> <operator pos:line="15" pos:column="36">&lt;&lt;<pos:position pos:line="15" pos:column="44"/></operator> <literal type="string" pos:line="15" pos:column="39">"Flag '"<pos:position pos:line="15" pos:column="47"/></literal> <operator pos:line="15" pos:column="48">&lt;&lt;<pos:position pos:line="15" pos:column="56"/></operator> <operator pos:line="15" pos:column="51">*<pos:position pos:line="15" pos:column="52"/></operator><name pos:line="15" pos:column="52">flg<pos:position pos:line="15" pos:column="55"/></name> <operator pos:line="15" pos:column="56">&lt;&lt;<pos:position pos:line="15" pos:column="64"/></operator> <literal type="string" pos:line="15" pos:column="59">"' not supported"<pos:position pos:line="15" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="78"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="16" pos:column="17">self_destruct<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">()<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="17" pos:column="14"/></block></else></if>
        }<pos:position pos:line="18" pos:column="10"/></block></for>
    }<pos:position pos:line="19" pos:column="6"/></block></while>

    <comment type="block" pos:line="21" pos:column="5">/*Regex code needs to parse -i file*/</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">( <expr><call><name pos:line="22" pos:column="10">isSet<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">ACL_F_REGEX_CASE<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="34"/></condition><then pos:line="22" pos:column="34"> <block pos:line="22" pos:column="35">{
        <expr_stmt><expr><call><name><name pos:line="23" pos:column="9">ConfigParser<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">::<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="23">TokenPutBack<pos:position pos:line="23" pos:column="35"/></name></name><argument_list pos:line="23" pos:column="35">(<argument><expr><literal type="string" pos:line="23" pos:column="36">"-i"<pos:position pos:line="23" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">makeUnSet<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><literal type="char" pos:line="24" pos:column="19">'i'<pos:position pos:line="24" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
