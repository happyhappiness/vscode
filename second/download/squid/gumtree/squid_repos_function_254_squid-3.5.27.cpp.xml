<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_254_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name> <parameter_list pos:line="2" pos:column="6">(<parameter><decl><type><name pos:line="2" pos:column="7">int<pos:position pos:line="2" pos:column="10"/></name></type> <name pos:line="2" pos:column="11">argc<pos:position pos:line="2" pos:column="15"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name><name pos:line="2" pos:column="23">argv<pos:position pos:line="2" pos:column="27"/></name><index pos:line="2" pos:column="27">[]<pos:position pos:line="2" pos:column="29"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">filename<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name pos:line="4" pos:column="22">NULL<pos:position pos:line="4" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">program_name<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name><name pos:line="5" pos:column="26">argv<pos:position pos:line="5" pos:column="30"/></name><index pos:line="5" pos:column="30">[<expr><literal type="number" pos:line="5" pos:column="31">0<pos:position pos:line="5" pos:column="32"/></literal></expr>]<pos:position pos:line="5" pos:column="33"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">cp<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">username<pos:position pos:line="7" pos:column="19"/></name></decl>, <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="22">address<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">line<pos:position pos:line="8" pos:column="14"/></name><index pos:line="8" pos:column="14">[<expr><name pos:line="8" pos:column="15">HELPER_INPUT_BUFFER<pos:position pos:line="8" pos:column="34"/></name></expr>]<pos:position pos:line="8" pos:column="35"/></index></name></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">ip_user_dict<pos:position pos:line="9" pos:column="24"/></name></name> <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="26">current_entry<pos:position pos:line="9" pos:column="39"/></name></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">ch<pos:position pos:line="10" pos:column="11"/></name></decl>;<pos:position pos:line="10" pos:column="12"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">setvbuf<pos:position pos:line="12" pos:column="12"/></name> <argument_list pos:line="12" pos:column="13">(<argument><expr><name pos:line="12" pos:column="14">stdout<pos:position pos:line="12" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="28">_IOLBF<pos:position pos:line="12" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="36">0<pos:position pos:line="12" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
    <while pos:line="13" pos:column="5">while <condition pos:line="13" pos:column="11">(<expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">ch<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <call><name pos:line="13" pos:column="18">getopt<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">argc<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="31">argv<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="37">"df:h"<pos:position pos:line="13" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call><operator pos:line="13" pos:column="44">)<pos:position pos:line="13" pos:column="45"/></operator> <operator pos:line="13" pos:column="46">!=<pos:position pos:line="13" pos:column="48"/></operator> <operator pos:line="13" pos:column="49">-<pos:position pos:line="13" pos:column="50"/></operator><literal type="number" pos:line="13" pos:column="50">1<pos:position pos:line="13" pos:column="51"/></literal></expr>)<pos:position pos:line="13" pos:column="52"/></condition> <block pos:line="13" pos:column="53">{
        <switch pos:line="14" pos:column="9">switch <condition pos:line="14" pos:column="16">(<expr><name pos:line="14" pos:column="17">ch<pos:position pos:line="14" pos:column="19"/></name></expr>)<pos:position pos:line="14" pos:column="20"/></condition> <block pos:line="14" pos:column="21">{
        <case pos:line="15" pos:column="9">case <expr><literal type="char" pos:line="15" pos:column="14">'f'<pos:position pos:line="15" pos:column="17"/></literal></expr>:<pos:position pos:line="15" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="16" pos:column="13">filename<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <name pos:line="16" pos:column="24">optarg<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
            <break pos:line="17" pos:column="13">break;<pos:position pos:line="17" pos:column="19"/></break>
        <case pos:line="18" pos:column="9">case <expr><literal type="char" pos:line="18" pos:column="14">'d'<pos:position pos:line="18" pos:column="17"/></literal></expr>:<pos:position pos:line="18" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="19" pos:column="13">debug_enabled<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <literal type="number" pos:line="19" pos:column="29">1<pos:position pos:line="19" pos:column="30"/></literal></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
            <break pos:line="20" pos:column="13">break;<pos:position pos:line="20" pos:column="19"/></break>
        <case pos:line="21" pos:column="9">case <expr><literal type="char" pos:line="21" pos:column="14">'h'<pos:position pos:line="21" pos:column="17"/></literal></expr>:<pos:position pos:line="21" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">usage<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">program_name<pos:position pos:line="22" pos:column="31"/></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">exit<pos:position pos:line="23" pos:column="17"/></name> <argument_list pos:line="23" pos:column="18">(<argument><expr><literal type="number" pos:line="23" pos:column="19">0<pos:position pos:line="23" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="22"/></expr_stmt>
        <default pos:line="24" pos:column="9">default:<pos:position pos:line="24" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">fprintf<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">stderr<pos:position pos:line="25" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="29">"%s: FATAL: Unknown parameter option '%c'"<pos:position pos:line="25" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="73">program_name<pos:position pos:line="25" pos:column="85"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="87">ch<pos:position pos:line="25" pos:column="89"/></name></expr></argument>)<pos:position pos:line="25" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="91"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">usage<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">program_name<pos:position pos:line="26" pos:column="31"/></name></expr></argument>)<pos:position pos:line="26" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">exit<pos:position pos:line="27" pos:column="17"/></name> <argument_list pos:line="27" pos:column="18">(<argument><expr><literal type="number" pos:line="27" pos:column="19">1<pos:position pos:line="27" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></switch>
    }<pos:position pos:line="29" pos:column="6"/></block></while>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">filename<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">==<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">NULL<pos:position pos:line="30" pos:column="25"/></name></expr>)<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26"> <block pos:line="30" pos:column="27">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">fprintf<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">stderr<pos:position pos:line="31" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="25">"%s: FATAL: No Filename configured."<pos:position pos:line="31" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">program_name<pos:position pos:line="31" pos:column="75"/></name></expr></argument>)<pos:position pos:line="31" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">usage<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">program_name<pos:position pos:line="32" pos:column="27"/></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">exit<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><literal type="number" pos:line="33" pos:column="14">1<pos:position pos:line="33" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <decl_stmt><decl><type><name pos:line="35" pos:column="5">FILE<pos:position pos:line="35" pos:column="9"/></name> <modifier pos:line="35" pos:column="10">*<pos:position pos:line="35" pos:column="11"/></modifier></type><name pos:line="35" pos:column="11">FH<pos:position pos:line="35" pos:column="13"/></name> <init pos:line="35" pos:column="14">= <expr><call><name pos:line="35" pos:column="16">fopen<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">filename<pos:position pos:line="35" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="32">"r"<pos:position pos:line="35" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="37"/></decl_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">!<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">FH<pos:position pos:line="36" pos:column="12"/></name></expr>)<pos:position pos:line="36" pos:column="13"/></condition><then pos:line="36" pos:column="13"> <block pos:line="36" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">fprintf<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><name pos:line="37" pos:column="17">stderr<pos:position pos:line="37" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="25">"%s: FATAL: Unable to open file '%s': %s"<pos:position pos:line="37" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="68">program_name<pos:position pos:line="37" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="82">filename<pos:position pos:line="37" pos:column="90"/></name></expr></argument>, <argument><expr><call><name pos:line="37" pos:column="92">xstrerror<pos:position pos:line="37" pos:column="101"/></name><argument_list pos:line="37" pos:column="101">()<pos:position pos:line="37" pos:column="103"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="105"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">exit<pos:position pos:line="38" pos:column="13"/></name><argument_list pos:line="38" pos:column="13">(<argument><expr><literal type="number" pos:line="38" pos:column="14">1<pos:position pos:line="38" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="40" pos:column="5">current_entry<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <call><name pos:line="40" pos:column="21">load_dict<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">FH<pos:position pos:line="40" pos:column="33"/></name></expr></argument>)<pos:position pos:line="40" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="35"/></expr_stmt>

    <while pos:line="42" pos:column="5">while <condition pos:line="42" pos:column="11">(<expr><call><name pos:line="42" pos:column="12">fgets<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><name pos:line="42" pos:column="18">line<pos:position pos:line="42" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="24">HELPER_INPUT_BUFFER<pos:position pos:line="42" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="45">stdin<pos:position pos:line="42" pos:column="50"/></name></expr></argument>)<pos:position pos:line="42" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="52"/></condition> <block pos:line="42" pos:column="53">{
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">(<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">cp<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <call><name pos:line="43" pos:column="19">strchr<pos:position pos:line="43" pos:column="25"/></name> <argument_list pos:line="43" pos:column="26">(<argument><expr><name pos:line="43" pos:column="27">line<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="33">'\n'<pos:position pos:line="43" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="38"/></argument_list></call><operator pos:line="43" pos:column="38">)<pos:position pos:line="43" pos:column="39"/></operator> <operator pos:line="43" pos:column="40">==<pos:position pos:line="43" pos:column="42"/></operator> <name pos:line="43" pos:column="43">NULL<pos:position pos:line="43" pos:column="47"/></name></expr>)<pos:position pos:line="43" pos:column="48"/></condition><then pos:line="43" pos:column="48"> <block pos:line="43" pos:column="49">{
            <comment type="block" pos:line="44" pos:column="13">/* too large message received.. skip and deny */</comment>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">fprintf<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">stderr<pos:position pos:line="45" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="29">"%s: ERROR: Input Too Large: %s\n"<pos:position pos:line="45" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="65">program_name<pos:position pos:line="45" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="79">line<pos:position pos:line="45" pos:column="83"/></name></expr></argument>)<pos:position pos:line="45" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="85"/></expr_stmt>
            <while pos:line="46" pos:column="13">while <condition pos:line="46" pos:column="19">(<expr><call><name pos:line="46" pos:column="20">fgets<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">line<pos:position pos:line="46" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="32">sizeof<argument_list pos:line="46" pos:column="38">(<argument><expr><name pos:line="46" pos:column="39">line<pos:position pos:line="46" pos:column="43"/></name></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="46" pos:column="46">stdin<pos:position pos:line="46" pos:column="51"/></name></expr></argument>)<pos:position pos:line="46" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="53"/></condition> <block pos:line="46" pos:column="54">{
                <expr_stmt><expr><call><name pos:line="47" pos:column="17">fprintf<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">stderr<pos:position pos:line="47" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="33">"%s: ERROR: Input Too Large..: %s\n"<pos:position pos:line="47" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="71">program_name<pos:position pos:line="47" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="85">line<pos:position pos:line="47" pos:column="89"/></name></expr></argument>)<pos:position pos:line="47" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="91"/></expr_stmt>
                <if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><call><name pos:line="48" pos:column="21">strchr<pos:position pos:line="48" pos:column="27"/></name><argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">line<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="48" pos:column="34">'\n'<pos:position pos:line="48" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="39"/></argument_list></call> <operator pos:line="48" pos:column="40">!=<pos:position pos:line="48" pos:column="42"/></operator> <name pos:line="48" pos:column="43">NULL<pos:position pos:line="48" pos:column="47"/></name></expr>)<pos:position pos:line="48" pos:column="48"/></condition><then pos:line="48" pos:column="48">
                    <block type="pseudo"><break pos:line="49" pos:column="21">break;<pos:position pos:line="49" pos:column="27"/></break></block></then></if>
            }<pos:position pos:line="50" pos:column="14"/></block></while>
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">SEND_BH<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><call><name pos:line="51" pos:column="21">HLP_MSG<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><literal type="string" pos:line="51" pos:column="29">"Input Too Large."<pos:position pos:line="51" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="50"/></expr_stmt>
            <continue pos:line="52" pos:column="13">continue;<pos:position pos:line="52" pos:column="22"/></continue>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="54" pos:column="9">*<pos:position pos:line="54" pos:column="10"/></operator><name pos:line="54" pos:column="10">cp<pos:position pos:line="54" pos:column="12"/></name> <operator pos:line="54" pos:column="13">=<pos:position pos:line="54" pos:column="14"/></operator> <literal type="char" pos:line="54" pos:column="15">'\0'<pos:position pos:line="54" pos:column="19"/></literal></expr>;<pos:position pos:line="54" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="55" pos:column="9">address<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">=<pos:position pos:line="55" pos:column="18"/></operator> <call><name pos:line="55" pos:column="19">strtok<pos:position pos:line="55" pos:column="25"/></name><argument_list pos:line="55" pos:column="25">(<argument><expr><name pos:line="55" pos:column="26">line<pos:position pos:line="55" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="32">" \t"<pos:position pos:line="55" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="56" pos:column="9">username<pos:position pos:line="56" pos:column="17"/></name> <operator pos:line="56" pos:column="18">=<pos:position pos:line="56" pos:column="19"/></operator> <call><name pos:line="56" pos:column="20">strtok<pos:position pos:line="56" pos:column="26"/></name><argument_list pos:line="56" pos:column="26">(<argument><expr><name pos:line="56" pos:column="27">NULL<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="33">" \t"<pos:position pos:line="56" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="40"/></expr_stmt>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">!<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">address<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">||<pos:position pos:line="57" pos:column="24"/></operator> <operator pos:line="57" pos:column="25">!<pos:position pos:line="57" pos:column="26"/></operator><name pos:line="57" pos:column="26">username<pos:position pos:line="57" pos:column="34"/></name></expr>)<pos:position pos:line="57" pos:column="35"/></condition><then pos:line="57" pos:column="35"> <block pos:line="57" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="58" pos:column="13">debug<pos:position pos:line="58" pos:column="18"/></name><argument_list pos:line="58" pos:column="18">(<argument><expr><literal type="string" pos:line="58" pos:column="19">"%s: unable to read tokens\n"<pos:position pos:line="58" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="50">program_name<pos:position pos:line="58" pos:column="62"/></name></expr></argument>)<pos:position pos:line="58" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="64"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">SEND_BH<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><call><name pos:line="59" pos:column="21">HLP_MSG<pos:position pos:line="59" pos:column="28"/></name><argument_list pos:line="59" pos:column="28">(<argument><expr><literal type="string" pos:line="59" pos:column="29">"Invalid Input."<pos:position pos:line="59" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
            <continue pos:line="60" pos:column="13">continue;<pos:position pos:line="60" pos:column="22"/></continue>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">rfc1738_unescape<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">address<pos:position pos:line="62" pos:column="33"/></name></expr></argument>)<pos:position pos:line="62" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">rfc1738_unescape<pos:position pos:line="63" pos:column="25"/></name><argument_list pos:line="63" pos:column="25">(<argument><expr><name pos:line="63" pos:column="26">username<pos:position pos:line="63" pos:column="34"/></name></expr></argument>)<pos:position pos:line="63" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="36"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="64" pos:column="9">int<pos:position pos:line="64" pos:column="12"/></name></type> <name pos:line="64" pos:column="13">result<pos:position pos:line="64" pos:column="19"/></name> <init pos:line="64" pos:column="20">= <expr><call><name pos:line="64" pos:column="22">dict_lookup<pos:position pos:line="64" pos:column="33"/></name><argument_list pos:line="64" pos:column="33">(<argument><expr><name pos:line="64" pos:column="34">current_entry<pos:position pos:line="64" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="49">username<pos:position pos:line="64" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="59">address<pos:position pos:line="64" pos:column="66"/></name></expr></argument>)<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="64" pos:column="68"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">debug<pos:position pos:line="65" pos:column="14"/></name><argument_list pos:line="65" pos:column="14">(<argument><expr><literal type="string" pos:line="65" pos:column="15">"%s: result: %d\n"<pos:position pos:line="65" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="35">program_name<pos:position pos:line="65" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="49">result<pos:position pos:line="65" pos:column="55"/></name></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="57"/></expr_stmt>
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">result<pos:position pos:line="66" pos:column="19"/></name> <operator pos:line="66" pos:column="20">!=<pos:position pos:line="66" pos:column="22"/></operator> <literal type="number" pos:line="66" pos:column="23">0<pos:position pos:line="66" pos:column="24"/></literal></expr>)<pos:position pos:line="66" pos:column="25"/></condition><then pos:line="66" pos:column="25"> <block pos:line="66" pos:column="26">{
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">SEND_OK<pos:position pos:line="67" pos:column="20"/></name><argument_list pos:line="67" pos:column="20">(<argument><expr><literal type="string" pos:line="67" pos:column="21">""<pos:position pos:line="67" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="68" pos:column="10"/></block></then> <else pos:line="68" pos:column="11">else <block pos:line="68" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">SEND_ERR<pos:position pos:line="69" pos:column="21"/></name><argument_list pos:line="69" pos:column="21">(<argument><expr><literal type="string" pos:line="69" pos:column="22">""<pos:position pos:line="69" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="70" pos:column="10"/></block></else></if>
    }<pos:position pos:line="71" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="73" pos:column="5">fclose<pos:position pos:line="73" pos:column="11"/></name> <argument_list pos:line="73" pos:column="12">(<argument><expr><name pos:line="73" pos:column="13">FH<pos:position pos:line="73" pos:column="15"/></name></expr></argument>)<pos:position pos:line="73" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="17"/></expr_stmt>
    <return pos:line="74" pos:column="5">return <expr><literal type="number" pos:line="74" pos:column="12">0<pos:position pos:line="74" pos:column="13"/></literal></expr>;<pos:position pos:line="74" pos:column="14"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
