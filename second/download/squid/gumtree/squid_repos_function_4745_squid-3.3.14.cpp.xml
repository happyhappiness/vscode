<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4745_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">CossState<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">write<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">char<pos:position pos:line="2" pos:column="22"/></name> <specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">buf<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">size_t<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">size<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">off_t<pos:position pos:line="2" pos:column="53"/></name></type> <name pos:line="2" pos:column="54">offset<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="62">FREE<pos:position pos:line="2" pos:column="66"/></name> <modifier pos:line="2" pos:column="67">*<pos:position pos:line="2" pos:column="68"/></modifier></type> <name pos:line="2" pos:column="69">free_func<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">dest<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">CossMemBuf<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">membuf<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">off_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">diskoffset<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/*
     * If we get handed an object with a size of -1,
     * the squid code is broken
     */</comment>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">assert<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name><name pos:line="12" pos:column="12">e<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">mem_obj<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">object_sz<pos:position pos:line="12" pos:column="33"/></name></name> <operator pos:line="12" pos:column="34">!=<pos:position pos:line="12" pos:column="36"/></operator> <operator pos:line="12" pos:column="37">-<pos:position pos:line="12" pos:column="38"/></operator><literal type="number" pos:line="12" pos:column="38">1<pos:position pos:line="12" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="13" pos:column="5">++<pos:position pos:line="13" pos:column="7"/></operator> <call><name><name pos:line="13" pos:column="8">StoreFScoss<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">::<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">GetInstance<pos:position pos:line="13" pos:column="32"/></name></name><argument_list pos:line="13" pos:column="32">()<pos:position pos:line="13" pos:column="34"/></argument_list></call><operator pos:line="13" pos:column="34">.<pos:position pos:line="13" pos:column="35"/></operator><name><name pos:line="13" pos:column="35">stats<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">.<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">write<pos:position pos:line="13" pos:column="46"/></name><operator pos:line="13" pos:column="46">.<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="47">ops<pos:position pos:line="13" pos:column="50"/></name></name></expr>;<pos:position pos:line="13" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">debugs<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="number" pos:line="15" pos:column="12">79<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="16">3<pos:position pos:line="15" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="19">"storeCossWrite: offset "<pos:position pos:line="15" pos:column="44"/></literal> <operator pos:line="15" pos:column="45">&lt;&lt;<pos:position pos:line="15" pos:column="53"/></operator> <name pos:line="15" pos:column="48">offset_<pos:position pos:line="15" pos:column="55"/></name> <operator pos:line="15" pos:column="56">&lt;&lt;<pos:position pos:line="15" pos:column="64"/></operator> <literal type="string" pos:line="15" pos:column="59">", len "<pos:position pos:line="15" pos:column="67"/></literal> <operator pos:line="15" pos:column="68">&lt;&lt;<pos:position pos:line="15" pos:column="76"/></operator> <operator pos:line="15" pos:column="71">(<pos:position pos:line="15" pos:column="72"/></operator><name pos:line="15" pos:column="72">unsigned<pos:position pos:line="15" pos:column="80"/></name> <name pos:line="15" pos:column="81">long<pos:position pos:line="15" pos:column="85"/></name> <name pos:line="15" pos:column="86">int<pos:position pos:line="15" pos:column="89"/></name><operator pos:line="15" pos:column="89">)<pos:position pos:line="15" pos:column="90"/></operator> <name pos:line="15" pos:column="91">size<pos:position pos:line="15" pos:column="95"/></name></expr></argument>)<pos:position pos:line="15" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="97"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">diskoffset<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name><name pos:line="16" pos:column="18">SD<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">-&gt;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="22">storeCossFilenoToDiskOffset<pos:position pos:line="16" pos:column="49"/></name></name><argument_list pos:line="16" pos:column="49">(<argument><expr><name pos:line="16" pos:column="50">swap_filen<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call> <operator pos:line="16" pos:column="62">+<pos:position pos:line="16" pos:column="63"/></operator> <name pos:line="16" pos:column="64">offset_<pos:position pos:line="16" pos:column="71"/></name></expr>;<pos:position pos:line="16" pos:column="72"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">CossSwapDir<pos:position pos:line="17" pos:column="16"/></name> <modifier pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></modifier></type><name pos:line="17" pos:column="18">SD<pos:position pos:line="17" pos:column="20"/></name> <init pos:line="17" pos:column="21">= <expr><operator pos:line="17" pos:column="23">(<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">CossSwapDir<pos:position pos:line="17" pos:column="35"/></name> <operator pos:line="17" pos:column="36">*<pos:position pos:line="17" pos:column="37"/></operator><operator pos:line="17" pos:column="37">)<pos:position pos:line="17" pos:column="38"/></operator><call><name pos:line="17" pos:column="38">INDEXSD<pos:position pos:line="17" pos:column="45"/></name><argument_list pos:line="17" pos:column="45">(<argument><expr><name pos:line="17" pos:column="46">swap_dirn<pos:position pos:line="17" pos:column="55"/></name></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="17" pos:column="57"/></decl_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">dest<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <call><name><name pos:line="18" pos:column="12">SD<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">storeCossMemPointerFromDiskOffset<pos:position pos:line="18" pos:column="49"/></name></name><argument_list pos:line="18" pos:column="49">(<argument><expr><name pos:line="18" pos:column="50">diskoffset<pos:position pos:line="18" pos:column="60"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="62">&amp;<pos:position pos:line="18" pos:column="67"/></operator><name pos:line="18" pos:column="63">membuf<pos:position pos:line="18" pos:column="69"/></name></expr></argument>)<pos:position pos:line="18" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">dest<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">!=<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">NULL<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">memcpy<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><name pos:line="20" pos:column="12">dest<pos:position pos:line="20" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="18">buf<pos:position pos:line="20" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="23">size<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">offset_<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">+=<pos:position pos:line="21" pos:column="15"/></operator> <name pos:line="21" pos:column="16">size<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">free_func<pos:position pos:line="23" pos:column="18"/></name></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call pos:line="24" pos:column="9">(<name pos:line="24" pos:column="10">free_func<pos:position pos:line="24" pos:column="19"/></name>) <argument_list pos:line="24" pos:column="21">(<argument><expr><operator pos:line="24" pos:column="22">(<pos:position pos:line="24" pos:column="23"/></operator><name pos:line="24" pos:column="23">char<pos:position pos:line="24" pos:column="27"/></name> <operator pos:line="24" pos:column="28">*<pos:position pos:line="24" pos:column="29"/></operator><operator pos:line="24" pos:column="29">)<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">buf<pos:position pos:line="24" pos:column="33"/></name></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="35"/></expr_stmt></block></then></if>

    <expr_stmt><expr><operator pos:line="26" pos:column="5">++<pos:position pos:line="26" pos:column="7"/></operator> <call><name><name pos:line="26" pos:column="8">StoreFScoss<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">::<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">GetInstance<pos:position pos:line="26" pos:column="32"/></name></name><argument_list pos:line="26" pos:column="32">()<pos:position pos:line="26" pos:column="34"/></argument_list></call><operator pos:line="26" pos:column="34">.<pos:position pos:line="26" pos:column="35"/></operator><name><name pos:line="26" pos:column="35">stats<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">.<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="41">write<pos:position pos:line="26" pos:column="46"/></name><operator pos:line="26" pos:column="46">.<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="47">success<pos:position pos:line="26" pos:column="54"/></name></name></expr>;<pos:position pos:line="26" pos:column="55"/></expr_stmt>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
