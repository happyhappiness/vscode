<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_747_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">clientFollowXForwardedForCheck<pos:position pos:line="2" pos:column="31"/></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><name pos:line="2" pos:column="32">allow_t<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">answer<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">void<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">data<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ClientRequestContext<pos:position pos:line="4" pos:column="25"/></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">calloutContext<pos:position pos:line="4" pos:column="41"/></name> <init pos:line="4" pos:column="42">= <expr><operator pos:line="4" pos:column="44">(<pos:position pos:line="4" pos:column="45"/></operator><name pos:line="4" pos:column="45">ClientRequestContext<pos:position pos:line="4" pos:column="65"/></name> <operator pos:line="4" pos:column="66">*<pos:position pos:line="4" pos:column="67"/></operator><operator pos:line="4" pos:column="67">)<pos:position pos:line="4" pos:column="68"/></operator> <name pos:line="4" pos:column="69">data<pos:position pos:line="4" pos:column="73"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="74"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">calloutContext<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">-&gt;<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="26">httpStateIsValid<pos:position pos:line="6" pos:column="42"/></name></name><argument_list pos:line="6" pos:column="42">()<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="45"/></condition><then pos:line="6" pos:column="45">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">ClientHttpRequest<pos:position pos:line="9" pos:column="22"/></name> <modifier pos:line="9" pos:column="23">*<pos:position pos:line="9" pos:column="24"/></modifier></type><name pos:line="9" pos:column="24">http<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><name><name pos:line="9" pos:column="31">calloutContext<pos:position pos:line="9" pos:column="45"/></name><operator pos:line="9" pos:column="45">-&gt;<pos:position pos:line="9" pos:column="50"/></operator><name pos:line="9" pos:column="47">http<pos:position pos:line="9" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">HttpRequest<pos:position pos:line="10" pos:column="16"/></name> <modifier pos:line="10" pos:column="17">*<pos:position pos:line="10" pos:column="18"/></modifier></type><name pos:line="10" pos:column="18">request<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><name><name pos:line="10" pos:column="28">http<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">request<pos:position pos:line="10" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="42"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/*
     * answer should be be ACCESS_ALLOWED or ACCESS_DENIED if we are
     * called as a result of ACL checks, or -1 if we are called when
     * there's nothing left to do.
     */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">answer<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">==<pos:position pos:line="17" pos:column="18"/></operator> <name pos:line="17" pos:column="19">ACCESS_ALLOWED<pos:position pos:line="17" pos:column="33"/></name> <operator pos:line="17" pos:column="34">&amp;&amp;<pos:position pos:line="17" pos:column="44"/></operator>
            <call><name><name pos:line="18" pos:column="13">request<pos:position pos:line="18" pos:column="20"/></name><operator pos:line="18" pos:column="20">-&gt;<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="22">x_forwarded_for_iterator<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">.<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="47">size<pos:position pos:line="18" pos:column="51"/></name></name> <argument_list pos:line="18" pos:column="52">()<pos:position pos:line="18" pos:column="54"/></argument_list></call> <operator pos:line="18" pos:column="55">!=<pos:position pos:line="18" pos:column="57"/></operator> <literal type="number" pos:line="18" pos:column="58">0<pos:position pos:line="18" pos:column="59"/></literal></expr>)<pos:position pos:line="18" pos:column="60"/></condition><then pos:line="18" pos:column="60"> <block pos:line="18" pos:column="61">{

        <comment type="block" pos:line="20" pos:column="9">/*
         * Remove the last comma-delimited element from the
         * x_forwarded_for_iterator and use it to repeat the cycle.
         */</comment>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">const<pos:position pos:line="24" pos:column="14"/></specifier> <name pos:line="24" pos:column="15">char<pos:position pos:line="24" pos:column="19"/></name> <modifier pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></modifier></type><name pos:line="24" pos:column="21">p<pos:position pos:line="24" pos:column="22"/></name></decl>;<pos:position pos:line="24" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="25" pos:column="9">const<pos:position pos:line="25" pos:column="14"/></specifier> <name pos:line="25" pos:column="15">char<pos:position pos:line="25" pos:column="19"/></name> <modifier pos:line="25" pos:column="20">*<pos:position pos:line="25" pos:column="21"/></modifier></type><name pos:line="25" pos:column="21">asciiaddr<pos:position pos:line="25" pos:column="30"/></name></decl>;<pos:position pos:line="25" pos:column="31"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">int<pos:position pos:line="26" pos:column="12"/></name></type> <name pos:line="26" pos:column="13">l<pos:position pos:line="26" pos:column="14"/></name></decl>;<pos:position pos:line="26" pos:column="15"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="27" pos:column="9">Ip<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">::<pos:position pos:line="27" pos:column="13"/></operator><name pos:line="27" pos:column="13">Address<pos:position pos:line="27" pos:column="20"/></name></name></type> <name pos:line="27" pos:column="21">addr<pos:position pos:line="27" pos:column="25"/></name></decl>;<pos:position pos:line="27" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">p<pos:position pos:line="28" pos:column="10"/></name> <operator pos:line="28" pos:column="11">=<pos:position pos:line="28" pos:column="12"/></operator> <call><name><name pos:line="28" pos:column="13">request<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">x_forwarded_for_iterator<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">.<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="47">termedBuf<pos:position pos:line="28" pos:column="56"/></name></name><argument_list pos:line="28" pos:column="56">()<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name pos:line="29" pos:column="9">l<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <call><name><name pos:line="29" pos:column="13">request<pos:position pos:line="29" pos:column="20"/></name><operator pos:line="29" pos:column="20">-&gt;<pos:position pos:line="29" pos:column="25"/></operator><name pos:line="29" pos:column="22">x_forwarded_for_iterator<pos:position pos:line="29" pos:column="46"/></name><operator pos:line="29" pos:column="46">.<pos:position pos:line="29" pos:column="47"/></operator><name pos:line="29" pos:column="47">size<pos:position pos:line="29" pos:column="51"/></name></name><argument_list pos:line="29" pos:column="51">()<pos:position pos:line="29" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="54"/></expr_stmt>

        <comment type="block" pos:line="31" pos:column="9">/*
        * XXX x_forwarded_for_iterator should really be a list of
        * IP addresses, but it's a String instead.  We have to
        * walk backwards through the String, biting off the last
        * comma-delimited part each time.  As long as the data is in
        * a String, we should probably implement and use a variant of
        * strListGetItem() that walks backwards instead of forwards
        * through a comma-separated list.  But we don't even do that;
        * we just do the work in-line here.
        */</comment>
        <comment type="block" pos:line="41" pos:column="9">/* skip trailing space and commas */</comment>
        <while pos:line="42" pos:column="9">while <condition pos:line="42" pos:column="15">(<expr><name pos:line="42" pos:column="16">l<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">&gt;<pos:position pos:line="42" pos:column="22"/></operator> <literal type="number" pos:line="42" pos:column="20">0<pos:position pos:line="42" pos:column="21"/></literal> <operator pos:line="42" pos:column="22">&amp;&amp;<pos:position pos:line="42" pos:column="32"/></operator> <operator pos:line="42" pos:column="25">(<pos:position pos:line="42" pos:column="26"/></operator><name><name pos:line="42" pos:column="26">p<pos:position pos:line="42" pos:column="27"/></name><index pos:line="42" pos:column="27">[<expr><name pos:line="42" pos:column="28">l<pos:position pos:line="42" pos:column="29"/></name><operator pos:line="42" pos:column="29">-<pos:position pos:line="42" pos:column="30"/></operator><literal type="number" pos:line="42" pos:column="30">1<pos:position pos:line="42" pos:column="31"/></literal></expr>]<pos:position pos:line="42" pos:column="32"/></index></name> <operator pos:line="42" pos:column="33">==<pos:position pos:line="42" pos:column="35"/></operator> <literal type="char" pos:line="42" pos:column="36">','<pos:position pos:line="42" pos:column="39"/></literal> <operator pos:line="42" pos:column="40">||<pos:position pos:line="42" pos:column="42"/></operator> <call><name pos:line="42" pos:column="43">xisspace<pos:position pos:line="42" pos:column="51"/></name><argument_list pos:line="42" pos:column="51">(<argument><expr><name><name pos:line="42" pos:column="52">p<pos:position pos:line="42" pos:column="53"/></name><index pos:line="42" pos:column="53">[<expr><name pos:line="42" pos:column="54">l<pos:position pos:line="42" pos:column="55"/></name><operator pos:line="42" pos:column="55">-<pos:position pos:line="42" pos:column="56"/></operator><literal type="number" pos:line="42" pos:column="56">1<pos:position pos:line="42" pos:column="57"/></literal></expr>]<pos:position pos:line="42" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></call><operator pos:line="42" pos:column="59">)<pos:position pos:line="42" pos:column="60"/></operator></expr>)<pos:position pos:line="42" pos:column="61"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="43" pos:column="13">--<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">l<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></expr_stmt></block></while>
        <expr_stmt><expr><call><name><name pos:line="44" pos:column="9">request<pos:position pos:line="44" pos:column="16"/></name><operator pos:line="44" pos:column="16">-&gt;<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="18">x_forwarded_for_iterator<pos:position pos:line="44" pos:column="42"/></name><operator pos:line="44" pos:column="42">.<pos:position pos:line="44" pos:column="43"/></operator><name pos:line="44" pos:column="43">cut<pos:position pos:line="44" pos:column="46"/></name></name><argument_list pos:line="44" pos:column="46">(<argument><expr><name pos:line="44" pos:column="47">l<pos:position pos:line="44" pos:column="48"/></name></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="50"/></expr_stmt>
        <comment type="block" pos:line="45" pos:column="9">/* look for start of last item in list */</comment>
        <while pos:line="46" pos:column="9">while <condition pos:line="46" pos:column="15">(<expr><name pos:line="46" pos:column="16">l<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">&gt;<pos:position pos:line="46" pos:column="22"/></operator> <literal type="number" pos:line="46" pos:column="20">0<pos:position pos:line="46" pos:column="21"/></literal> <operator pos:line="46" pos:column="22">&amp;&amp;<pos:position pos:line="46" pos:column="32"/></operator> <operator pos:line="46" pos:column="25">!<pos:position pos:line="46" pos:column="26"/></operator> <operator pos:line="46" pos:column="27">(<pos:position pos:line="46" pos:column="28"/></operator><name><name pos:line="46" pos:column="28">p<pos:position pos:line="46" pos:column="29"/></name><index pos:line="46" pos:column="29">[<expr><name pos:line="46" pos:column="30">l<pos:position pos:line="46" pos:column="31"/></name><operator pos:line="46" pos:column="31">-<pos:position pos:line="46" pos:column="32"/></operator><literal type="number" pos:line="46" pos:column="32">1<pos:position pos:line="46" pos:column="33"/></literal></expr>]<pos:position pos:line="46" pos:column="34"/></index></name> <operator pos:line="46" pos:column="35">==<pos:position pos:line="46" pos:column="37"/></operator> <literal type="char" pos:line="46" pos:column="38">','<pos:position pos:line="46" pos:column="41"/></literal> <operator pos:line="46" pos:column="42">||<pos:position pos:line="46" pos:column="44"/></operator> <call><name pos:line="46" pos:column="45">xisspace<pos:position pos:line="46" pos:column="53"/></name><argument_list pos:line="46" pos:column="53">(<argument><expr><name><name pos:line="46" pos:column="54">p<pos:position pos:line="46" pos:column="55"/></name><index pos:line="46" pos:column="55">[<expr><name pos:line="46" pos:column="56">l<pos:position pos:line="46" pos:column="57"/></name><operator pos:line="46" pos:column="57">-<pos:position pos:line="46" pos:column="58"/></operator><literal type="number" pos:line="46" pos:column="58">1<pos:position pos:line="46" pos:column="59"/></literal></expr>]<pos:position pos:line="46" pos:column="60"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="61"/></argument_list></call><operator pos:line="46" pos:column="61">)<pos:position pos:line="46" pos:column="62"/></operator></expr>)<pos:position pos:line="46" pos:column="63"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="47" pos:column="13">--<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">l<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></expr_stmt></block></while>
        <expr_stmt><expr><name pos:line="48" pos:column="9">asciiaddr<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <name pos:line="48" pos:column="21">p<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">+<pos:position pos:line="48" pos:column="23"/></operator><name pos:line="48" pos:column="23">l<pos:position pos:line="48" pos:column="24"/></name></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><operator pos:line="49" pos:column="13">(<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="14">addr<pos:position pos:line="49" pos:column="18"/></name> <operator pos:line="49" pos:column="19">=<pos:position pos:line="49" pos:column="20"/></operator> <name pos:line="49" pos:column="21">asciiaddr<pos:position pos:line="49" pos:column="30"/></name><operator pos:line="49" pos:column="30">)<pos:position pos:line="49" pos:column="31"/></operator></expr>)<pos:position pos:line="49" pos:column="32"/></condition><then pos:line="49" pos:column="32"> <block pos:line="49" pos:column="33">{
            <expr_stmt><expr><name><name pos:line="50" pos:column="13">request<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">-&gt;<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="22">indirect_client_addr<pos:position pos:line="50" pos:column="42"/></name></name> <operator pos:line="50" pos:column="43">=<pos:position pos:line="50" pos:column="44"/></operator> <name pos:line="50" pos:column="45">addr<pos:position pos:line="50" pos:column="49"/></name></expr>;<pos:position pos:line="50" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="51" pos:column="13">request<pos:position pos:line="51" pos:column="20"/></name><operator pos:line="51" pos:column="20">-&gt;<pos:position pos:line="51" pos:column="25"/></operator><name pos:line="51" pos:column="22">x_forwarded_for_iterator<pos:position pos:line="51" pos:column="46"/></name><operator pos:line="51" pos:column="46">.<pos:position pos:line="51" pos:column="47"/></operator><name pos:line="51" pos:column="47">cut<pos:position pos:line="51" pos:column="50"/></name></name><argument_list pos:line="51" pos:column="50">(<argument><expr><name pos:line="51" pos:column="51">l<pos:position pos:line="51" pos:column="52"/></name></expr></argument>)<pos:position pos:line="51" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="52" pos:column="13">calloutContext<pos:position pos:line="52" pos:column="27"/></name><operator pos:line="52" pos:column="27">-&gt;<pos:position pos:line="52" pos:column="32"/></operator><name pos:line="52" pos:column="29">acl_checklist<pos:position pos:line="52" pos:column="42"/></name></name> <operator pos:line="52" pos:column="43">=<pos:position pos:line="52" pos:column="44"/></operator> <call><name pos:line="52" pos:column="45">clientAclChecklistCreate<pos:position pos:line="52" pos:column="69"/></name><argument_list pos:line="52" pos:column="69">(<argument><expr><name><name pos:line="52" pos:column="70">Config<pos:position pos:line="52" pos:column="76"/></name><operator pos:line="52" pos:column="76">.<pos:position pos:line="52" pos:column="77"/></operator><name pos:line="52" pos:column="77">accessList<pos:position pos:line="52" pos:column="87"/></name><operator pos:line="52" pos:column="87">.<pos:position pos:line="52" pos:column="88"/></operator><name pos:line="52" pos:column="88">followXFF<pos:position pos:line="52" pos:column="97"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="99">http<pos:position pos:line="52" pos:column="103"/></name></expr></argument>)<pos:position pos:line="52" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="105"/></expr_stmt>
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><operator pos:line="53" pos:column="17">!<pos:position pos:line="53" pos:column="18"/></operator><name><name pos:line="53" pos:column="18">Config<pos:position pos:line="53" pos:column="24"/></name><operator pos:line="53" pos:column="24">.<pos:position pos:line="53" pos:column="25"/></operator><name pos:line="53" pos:column="25">onoff<pos:position pos:line="53" pos:column="30"/></name><operator pos:line="53" pos:column="30">.<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="31">acl_uses_indirect_client<pos:position pos:line="53" pos:column="55"/></name></name></expr>)<pos:position pos:line="53" pos:column="56"/></condition><then pos:line="53" pos:column="56"> <block pos:line="53" pos:column="57">{
                <comment type="block" pos:line="54" pos:column="17">/* override the default src_addr tested if we have to go deeper than one level into XFF */</comment>
                <expr_stmt><expr><call><name pos:line="55" pos:column="17">Filled<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name><name pos:line="55" pos:column="24">calloutContext<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">-&gt;<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="40">acl_checklist<pos:position pos:line="55" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="54"/></argument_list></call><operator pos:line="55" pos:column="54">-&gt;<pos:position pos:line="55" pos:column="59"/></operator><name pos:line="55" pos:column="56">src_addr<pos:position pos:line="55" pos:column="64"/></name> <operator pos:line="55" pos:column="65">=<pos:position pos:line="55" pos:column="66"/></operator> <name><name pos:line="55" pos:column="67">request<pos:position pos:line="55" pos:column="74"/></name><operator pos:line="55" pos:column="74">-&gt;<pos:position pos:line="55" pos:column="79"/></operator><name pos:line="55" pos:column="76">indirect_client_addr<pos:position pos:line="55" pos:column="96"/></name></name></expr>;<pos:position pos:line="55" pos:column="97"/></expr_stmt>
            }<pos:position pos:line="56" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name><name pos:line="57" pos:column="13">calloutContext<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">-&gt;<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="29">acl_checklist<pos:position pos:line="57" pos:column="42"/></name><operator pos:line="57" pos:column="42">-&gt;<pos:position pos:line="57" pos:column="47"/></operator><name pos:line="57" pos:column="44">nonBlockingCheck<pos:position pos:line="57" pos:column="60"/></name></name><argument_list pos:line="57" pos:column="60">(<argument><expr><name pos:line="57" pos:column="61">clientFollowXForwardedForCheck<pos:position pos:line="57" pos:column="91"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="93">data<pos:position pos:line="57" pos:column="97"/></name></expr></argument>)<pos:position pos:line="57" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="99"/></expr_stmt>
            <return pos:line="58" pos:column="13">return;<pos:position pos:line="58" pos:column="20"/></return>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if> <comment type="block" pos:line="60" pos:column="7">/*if (answer == ACCESS_ALLOWED &amp;&amp;
        request-&gt;x_forwarded_for_iterator.size () != 0)*/</comment>

    <comment type="block" pos:line="63" pos:column="5">/* clean up, and pass control to clientAccessCheck */</comment>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><name><name pos:line="64" pos:column="9">Config<pos:position pos:line="64" pos:column="15"/></name><operator pos:line="64" pos:column="15">.<pos:position pos:line="64" pos:column="16"/></operator><name pos:line="64" pos:column="16">onoff<pos:position pos:line="64" pos:column="21"/></name><operator pos:line="64" pos:column="21">.<pos:position pos:line="64" pos:column="22"/></operator><name pos:line="64" pos:column="22">log_uses_indirect_client<pos:position pos:line="64" pos:column="46"/></name></name></expr>)<pos:position pos:line="64" pos:column="47"/></condition><then pos:line="64" pos:column="47"> <block pos:line="64" pos:column="48">{
        <comment type="block" pos:line="65" pos:column="9">/*
        * Ensure that the access log shows the indirect client
        * instead of the direct client.
        */</comment>
        <decl_stmt><decl><type><name pos:line="69" pos:column="9">ConnStateData<pos:position pos:line="69" pos:column="22"/></name> <modifier pos:line="69" pos:column="23">*<pos:position pos:line="69" pos:column="24"/></modifier></type><name pos:line="69" pos:column="24">conn<pos:position pos:line="69" pos:column="28"/></name> <init pos:line="69" pos:column="29">= <expr><call><name><name pos:line="69" pos:column="31">http<pos:position pos:line="69" pos:column="35"/></name><operator pos:line="69" pos:column="35">-&gt;<pos:position pos:line="69" pos:column="40"/></operator><name pos:line="69" pos:column="37">getConn<pos:position pos:line="69" pos:column="44"/></name></name><argument_list pos:line="69" pos:column="44">()<pos:position pos:line="69" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="69" pos:column="47"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="70" pos:column="9">conn<pos:position pos:line="70" pos:column="13"/></name><operator pos:line="70" pos:column="13">-&gt;<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="15">log_addr<pos:position pos:line="70" pos:column="23"/></name></name> <operator pos:line="70" pos:column="24">=<pos:position pos:line="70" pos:column="25"/></operator> <name><name pos:line="70" pos:column="26">request<pos:position pos:line="70" pos:column="33"/></name><operator pos:line="70" pos:column="33">-&gt;<pos:position pos:line="70" pos:column="38"/></operator><name pos:line="70" pos:column="35">indirect_client_addr<pos:position pos:line="70" pos:column="55"/></name></name></expr>;<pos:position pos:line="70" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="72" pos:column="5">request<pos:position pos:line="72" pos:column="12"/></name><operator pos:line="72" pos:column="12">-&gt;<pos:position pos:line="72" pos:column="17"/></operator><name pos:line="72" pos:column="14">x_forwarded_for_iterator<pos:position pos:line="72" pos:column="38"/></name><operator pos:line="72" pos:column="38">.<pos:position pos:line="72" pos:column="39"/></operator><name pos:line="72" pos:column="39">clean<pos:position pos:line="72" pos:column="44"/></name></name><argument_list pos:line="72" pos:column="44">()<pos:position pos:line="72" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">request<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">-&gt;<pos:position pos:line="73" pos:column="17"/></operator><name pos:line="73" pos:column="14">flags<pos:position pos:line="73" pos:column="19"/></name><operator pos:line="73" pos:column="19">.<pos:position pos:line="73" pos:column="20"/></operator><name pos:line="73" pos:column="20">done_follow_x_forwarded_for<pos:position pos:line="73" pos:column="47"/></name></name><operator pos:line="73" pos:column="47">=<pos:position pos:line="73" pos:column="48"/></operator><literal type="boolean" pos:line="73" pos:column="48">true<pos:position pos:line="73" pos:column="52"/></literal></expr>;<pos:position pos:line="73" pos:column="53"/></expr_stmt>

    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">answer<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">!=<pos:position pos:line="75" pos:column="18"/></operator> <name pos:line="75" pos:column="19">ACCESS_ALLOWED<pos:position pos:line="75" pos:column="33"/></name> <operator pos:line="75" pos:column="34">&amp;&amp;<pos:position pos:line="75" pos:column="44"/></operator> <name pos:line="75" pos:column="37">answer<pos:position pos:line="75" pos:column="43"/></name> <operator pos:line="75" pos:column="44">!=<pos:position pos:line="75" pos:column="46"/></operator> <name pos:line="75" pos:column="47">ACCESS_DENIED<pos:position pos:line="75" pos:column="60"/></name></expr>)<pos:position pos:line="75" pos:column="61"/></condition><then pos:line="75" pos:column="61"> <block pos:line="75" pos:column="62">{
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">debugs<pos:position pos:line="76" pos:column="15"/></name><argument_list pos:line="76" pos:column="15">(<argument><expr><literal type="number" pos:line="76" pos:column="16">28<pos:position pos:line="76" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="20">DBG_CRITICAL<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="34">"ERROR: Processing X-Forwarded-For. Stopping at IP address: "<pos:position pos:line="76" pos:column="95"/></literal> <operator pos:line="76" pos:column="96">&lt;&lt;<pos:position pos:line="76" pos:column="104"/></operator> <name><name pos:line="76" pos:column="99">request<pos:position pos:line="76" pos:column="106"/></name><operator pos:line="76" pos:column="106">-&gt;<pos:position pos:line="76" pos:column="111"/></operator><name pos:line="76" pos:column="108">indirect_client_addr<pos:position pos:line="76" pos:column="128"/></name></name></expr></argument> )<pos:position pos:line="76" pos:column="130"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="131"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="79" pos:column="5">/* process actual access ACL as normal. */</comment>
    <expr_stmt><expr><call><name><name pos:line="80" pos:column="5">calloutContext<pos:position pos:line="80" pos:column="19"/></name><operator pos:line="80" pos:column="19">-&gt;<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="21">clientAccessCheck<pos:position pos:line="80" pos:column="38"/></name></name><argument_list pos:line="80" pos:column="38">()<pos:position pos:line="80" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="41"/></expr_stmt>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
