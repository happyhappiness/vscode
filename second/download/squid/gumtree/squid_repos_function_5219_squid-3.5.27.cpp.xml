<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5219_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">close<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">how<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">79<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">swap_filen<pos:position pos:line="4" pos:column="29"/></name> <operator pos:line="4" pos:column="30">&lt;&lt;<pos:position pos:line="4" pos:column="38"/></operator> <literal type="string" pos:line="4" pos:column="33">" offset: "<pos:position pos:line="4" pos:column="44"/></literal> <operator pos:line="4" pos:column="45">&lt;&lt;<pos:position pos:line="4" pos:column="53"/></operator> <name pos:line="4" pos:column="48">offset_<pos:position pos:line="4" pos:column="55"/></name> <operator pos:line="4" pos:column="56">&lt;&lt;<pos:position pos:line="4" pos:column="64"/></operator> <literal type="string" pos:line="4" pos:column="59">" how: "<pos:position pos:line="4" pos:column="67"/></literal> <operator pos:line="4" pos:column="68">&lt;&lt;<pos:position pos:line="4" pos:column="76"/></operator> <name pos:line="4" pos:column="71">how<pos:position pos:line="4" pos:column="74"/></name> <operator pos:line="4" pos:column="75">&lt;&lt;<pos:position pos:line="4" pos:column="83"/></operator>
           <literal type="string" pos:line="5" pos:column="12">" buf: "<pos:position pos:line="5" pos:column="20"/></literal> <operator pos:line="5" pos:column="21">&lt;&lt;<pos:position pos:line="5" pos:column="29"/></operator> <name><name pos:line="5" pos:column="24">theBuf<pos:position pos:line="5" pos:column="30"/></name><operator pos:line="5" pos:column="30">.<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="31">size<pos:position pos:line="5" pos:column="35"/></name></name> <operator pos:line="5" pos:column="36">&lt;&lt;<pos:position pos:line="5" pos:column="44"/></operator> <literal type="string" pos:line="5" pos:column="39">" callback: "<pos:position pos:line="5" pos:column="52"/></literal> <operator pos:line="5" pos:column="53">&lt;&lt;<pos:position pos:line="5" pos:column="61"/></operator> <name pos:line="5" pos:column="56">callback<pos:position pos:line="5" pos:column="64"/></name></expr></argument>)<pos:position pos:line="5" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="66"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">theFile<pos:position pos:line="7" pos:column="17"/></name></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18"> <block pos:line="7" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">79<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="20">3<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"I/O already canceled"<pos:position pos:line="8" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">assert<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><operator pos:line="9" pos:column="16">!<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="17">callback<pos:position pos:line="9" pos:column="25"/></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>
        <comment type="line" pos:line="10" pos:column="9">// We keep writeableAnchor_ after callBack() on I/O errors.</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><operator pos:line="11" pos:column="16">!<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">readableAnchor_<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="34"/></expr_stmt>
        <return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <switch pos:line="15" pos:column="5">switch <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">how<pos:position pos:line="15" pos:column="16"/></name></expr>)<pos:position pos:line="15" pos:column="17"/></condition> <block pos:line="15" pos:column="18">{
    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">wroteAll<pos:position pos:line="16" pos:column="18"/></name></expr>:<pos:position pos:line="16" pos:column="19"/></case>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">assert<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><name><name pos:line="17" pos:column="16">theBuf<pos:position pos:line="17" pos:column="22"/></name><operator pos:line="17" pos:column="22">.<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="23">size<pos:position pos:line="17" pos:column="27"/></name></name> <operator pos:line="17" pos:column="28">&gt;<pos:position pos:line="17" pos:column="32"/></operator> <literal type="number" pos:line="17" pos:column="30">0<pos:position pos:line="17" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt> <comment type="line" pos:line="17" pos:column="34">// we never flush last bytes on our own</comment>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">writeToDisk<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><operator pos:line="18" pos:column="21">-<pos:position pos:line="18" pos:column="22"/></operator><literal type="number" pos:line="18" pos:column="22">1<pos:position pos:line="18" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt> <comment type="line" pos:line="18" pos:column="26">// flush last, yet unwritten slot to disk</comment>
        <return pos:line="19" pos:column="9">return;<pos:position pos:line="19" pos:column="16"/></return> <comment type="line" pos:line="19" pos:column="17">// writeCompleted() will callBack()</comment>

    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">writerGone<pos:position pos:line="21" pos:column="20"/></name></expr>:<pos:position pos:line="21" pos:column="21"/></case>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">assert<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">writeableAnchor_<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="23" pos:column="9">dir<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">writeError<pos:position pos:line="23" pos:column="24"/></name></name><argument_list pos:line="23" pos:column="24">(<argument><expr><operator pos:line="23" pos:column="25">*<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="26">e<pos:position pos:line="23" pos:column="27"/></name></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt> <comment type="line" pos:line="23" pos:column="30">// abort a partially stored entry</comment>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">finishedWriting<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">DISK_ERROR<pos:position pos:line="24" pos:column="35"/></name></expr></argument>)<pos:position pos:line="24" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>
        <return pos:line="25" pos:column="9">return;<pos:position pos:line="25" pos:column="16"/></return>

    <case pos:line="27" pos:column="5">case <expr><name pos:line="27" pos:column="10">readerDone<pos:position pos:line="27" pos:column="20"/></name></expr>:<pos:position pos:line="27" pos:column="21"/></case>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">callBack<pos:position pos:line="28" pos:column="17"/></name><argument_list pos:line="28" pos:column="17">(<argument><expr><literal type="number" pos:line="28" pos:column="18">0<pos:position pos:line="28" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="21"/></expr_stmt>
        <return pos:line="29" pos:column="9">return;<pos:position pos:line="29" pos:column="16"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></switch>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
