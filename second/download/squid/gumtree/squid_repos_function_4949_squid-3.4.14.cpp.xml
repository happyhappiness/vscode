<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4949_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Rock<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">IoState<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">write<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">char<pos:position pos:line="2" pos:column="26"/></name> <specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">buf<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">size_t<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">size<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">off_t<pos:position pos:line="2" pos:column="57"/></name></type> <name pos:line="2" pos:column="58">coreOff<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="67">FREE<pos:position pos:line="2" pos:column="71"/></name> <modifier pos:line="2" pos:column="72">*<pos:position pos:line="2" pos:column="73"/></modifier></type><name pos:line="2" pos:column="73">dtor<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// TODO: move to create?</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">coreOff<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18"> <block pos:line="5" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">assert<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><call><name><name pos:line="6" pos:column="16">theBuf<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">.<pos:position pos:line="6" pos:column="23"/></operator><name pos:line="6" pos:column="23">isNull<pos:position pos:line="6" pos:column="29"/></name></name><argument_list pos:line="6" pos:column="29">()<pos:position pos:line="6" pos:column="31"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">assert<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">payloadEnd<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">&lt;=<pos:position pos:line="7" pos:column="32"/></operator> <name pos:line="7" pos:column="30">slotSize<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">theBuf<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">.<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">init<pos:position pos:line="8" pos:column="20"/></name></name><argument_list pos:line="8" pos:column="20">(<argument><expr><call><name pos:line="8" pos:column="21">min<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">payloadEnd<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="37">slotSize<pos:position pos:line="8" pos:column="45"/></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="8" pos:column="48">slotSize<pos:position pos:line="8" pos:column="56"/></name></expr></argument>)<pos:position pos:line="8" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="58"/></expr_stmt>
        <comment type="line" pos:line="9" pos:column="9">// start with our header; TODO: consider making it a trailer</comment>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">DbCellHeader<pos:position pos:line="10" pos:column="21"/></name></type> <name pos:line="10" pos:column="22">header<pos:position pos:line="10" pos:column="28"/></name></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><cast type="static" pos:line="11" pos:column="16">static_cast<argument_list type="generic" pos:line="11" pos:column="27">&lt;<argument><expr><name pos:line="11" pos:column="28">int64_t<pos:position pos:line="11" pos:column="35"/></name></expr></argument>&gt;<pos:position pos:line="11" pos:column="39"/></argument_list><argument_list pos:line="11" pos:column="36">(<argument><expr><sizeof pos:line="11" pos:column="37">sizeof<argument_list pos:line="11" pos:column="43">(<argument><expr><name pos:line="11" pos:column="44">header<pos:position pos:line="11" pos:column="50"/></name></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></cast> <operator pos:line="11" pos:column="53">&lt;=<pos:position pos:line="11" pos:column="58"/></operator> <name pos:line="11" pos:column="56">payloadEnd<pos:position pos:line="11" pos:column="66"/></name></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">header<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">.<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">payloadSize<pos:position pos:line="12" pos:column="27"/></name></name> <operator pos:line="12" pos:column="28">=<pos:position pos:line="12" pos:column="29"/></operator> <name pos:line="12" pos:column="30">payloadEnd<pos:position pos:line="12" pos:column="40"/></name> <operator pos:line="12" pos:column="41">-<pos:position pos:line="12" pos:column="42"/></operator> <sizeof pos:line="12" pos:column="43">sizeof<argument_list pos:line="12" pos:column="49">(<argument><expr><name pos:line="12" pos:column="50">header<pos:position pos:line="12" pos:column="56"/></name></expr></argument>)<pos:position pos:line="12" pos:column="57"/></argument_list></sizeof></expr>;<pos:position pos:line="12" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">theBuf<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">append<pos:position pos:line="13" pos:column="22"/></name></name><argument_list pos:line="13" pos:column="22">(<argument><expr><cast type="reinterpret" pos:line="13" pos:column="23">reinterpret_cast<argument_list type="generic" pos:line="13" pos:column="39">&lt;<argument><expr><specifier pos:line="13" pos:column="40">const<pos:position pos:line="13" pos:column="45"/></specifier> <name pos:line="13" pos:column="46">char<pos:position pos:line="13" pos:column="50"/></name><operator pos:line="13" pos:column="50">*<pos:position pos:line="13" pos:column="51"/></operator></expr></argument>&gt;<pos:position pos:line="13" pos:column="55"/></argument_list><argument_list pos:line="13" pos:column="52">(<argument><expr><operator pos:line="13" pos:column="53">&amp;<pos:position pos:line="13" pos:column="58"/></operator><name pos:line="13" pos:column="54">header<pos:position pos:line="13" pos:column="60"/></name></expr></argument>)<pos:position pos:line="13" pos:column="61"/></argument_list></cast></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="63">sizeof<argument_list pos:line="13" pos:column="69">(<argument><expr><name pos:line="13" pos:column="70">header<pos:position pos:line="13" pos:column="76"/></name></expr></argument>)<pos:position pos:line="13" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <else pos:line="14" pos:column="7">else <block pos:line="14" pos:column="12">{
        <comment type="line" pos:line="15" pos:column="9">// Core uses -1 offset as "append". Sigh.</comment>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">assert<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">coreOff<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">==<pos:position pos:line="16" pos:column="26"/></operator> <operator pos:line="16" pos:column="27">-<pos:position pos:line="16" pos:column="28"/></operator><literal type="number" pos:line="16" pos:column="28">1<pos:position pos:line="16" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">assert<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><operator pos:line="17" pos:column="16">!<pos:position pos:line="17" pos:column="17"/></operator><call><name><name pos:line="17" pos:column="17">theBuf<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">.<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="24">isNull<pos:position pos:line="17" pos:column="30"/></name></name><argument_list pos:line="17" pos:column="30">()<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">theBuf<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">.<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="12">append<pos:position pos:line="20" pos:column="18"/></name></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">buf<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">size<pos:position pos:line="20" pos:column="28"/></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">offset_<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">+=<pos:position pos:line="21" pos:column="15"/></operator> <name pos:line="21" pos:column="16">size<pos:position pos:line="21" pos:column="20"/></name></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt> <comment type="line" pos:line="21" pos:column="22">// so that Core thinks we wrote it</comment>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">dtor<pos:position pos:line="23" pos:column="13"/></name></expr>)<pos:position pos:line="23" pos:column="14"/></condition><then pos:line="23" pos:column="14">
        <block type="pseudo"><expr_stmt><expr><call pos:line="24" pos:column="9">(<name pos:line="24" pos:column="10">dtor<pos:position pos:line="24" pos:column="14"/></name>)<argument_list pos:line="24" pos:column="15">(<argument><expr><cast type="const" pos:line="24" pos:column="16">const_cast<argument_list type="generic" pos:line="24" pos:column="26">&lt;<argument><expr><name pos:line="24" pos:column="27">char<pos:position pos:line="24" pos:column="31"/></name><operator pos:line="24" pos:column="31">*<pos:position pos:line="24" pos:column="32"/></operator></expr></argument>&gt;<pos:position pos:line="24" pos:column="36"/></argument_list><argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">buf<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></cast></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt></block></then></if> <comment type="line" pos:line="24" pos:column="41">// cast due to a broken API?</comment>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
