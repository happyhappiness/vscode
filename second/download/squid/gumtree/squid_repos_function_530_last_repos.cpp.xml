<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_530_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">StoreEntry<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name><name pos:line="2" pos:column="1">Transients<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">get<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">cache_key<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">key<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">map<pos:position pos:line="4" pos:column="13"/></name></expr>)<pos:position pos:line="4" pos:column="14"/></condition><then pos:line="4" pos:column="14">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">NULL<pos:position pos:line="5" pos:column="20"/></name></expr>;<pos:position pos:line="5" pos:column="21"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="7" pos:column="5">sfileno<pos:position pos:line="7" pos:column="12"/></name></type> <name pos:line="7" pos:column="13">index<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name><name pos:line="8" pos:column="11">Ipc<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">::<pos:position pos:line="8" pos:column="16"/></operator><name pos:line="8" pos:column="16">StoreMapAnchor<pos:position pos:line="8" pos:column="30"/></name></name> <modifier pos:line="8" pos:column="31">*<pos:position pos:line="8" pos:column="32"/></modifier></type><name pos:line="8" pos:column="32">anchor<pos:position pos:line="8" pos:column="38"/></name> <init pos:line="8" pos:column="39">= <expr><call><name><name pos:line="8" pos:column="41">map<pos:position pos:line="8" pos:column="44"/></name><operator pos:line="8" pos:column="44">-&gt;<pos:position pos:line="8" pos:column="49"/></operator><name pos:line="8" pos:column="46">openForReading<pos:position pos:line="8" pos:column="60"/></name></name><argument_list pos:line="8" pos:column="60">(<argument><expr><name pos:line="8" pos:column="61">key<pos:position pos:line="8" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="66">index<pos:position pos:line="8" pos:column="71"/></name></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="73"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">anchor<pos:position pos:line="9" pos:column="16"/></name></expr>)<pos:position pos:line="9" pos:column="17"/></condition><then pos:line="9" pos:column="17">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></return></block></then></if>

    <comment type="line" pos:line="12" pos:column="5">// If we already have a local entry, the store_table should have found it.</comment>
    <comment type="line" pos:line="13" pos:column="5">// Since it did not, the local entry key must have changed from public to</comment>
    <comment type="line" pos:line="14" pos:column="5">// private. We still need to keep the private entry around for syncing as</comment>
    <comment type="line" pos:line="15" pos:column="5">// its clients depend on it, but we should not allow new clients to join.</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<decl><type><name pos:line="16" pos:column="9">StoreEntry<pos:position pos:line="16" pos:column="19"/></name> <modifier pos:line="16" pos:column="20">*<pos:position pos:line="16" pos:column="21"/></modifier></type><name pos:line="16" pos:column="21">oldE<pos:position pos:line="16" pos:column="25"/></name> <init pos:line="16" pos:column="26">= <expr><call><name><name pos:line="16" pos:column="28">locals<pos:position pos:line="16" pos:column="34"/></name><operator pos:line="16" pos:column="34">-&gt;<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="36">at<pos:position pos:line="16" pos:column="38"/></name></name><argument_list pos:line="16" pos:column="38">(<argument><expr><name pos:line="16" pos:column="39">index<pos:position pos:line="16" pos:column="44"/></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr></init></decl>)<pos:position pos:line="16" pos:column="46"/></condition><then pos:line="16" pos:column="46"> <block pos:line="16" pos:column="47">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">20<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">3<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"not joining private "<pos:position pos:line="17" pos:column="45"/></literal> <operator pos:line="17" pos:column="46">&lt;&lt;<pos:position pos:line="17" pos:column="54"/></operator> <operator pos:line="17" pos:column="49">*<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="50">oldE<pos:position pos:line="17" pos:column="54"/></name></expr></argument>)<pos:position pos:line="17" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">assert<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><call><name pos:line="18" pos:column="16">EBIT_TEST<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name><name pos:line="18" pos:column="26">oldE<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">flags<pos:position pos:line="18" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="39">KEY_PRIVATE<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then> <elseif pos:line="19" pos:column="7">else <if pos:line="19" pos:column="12">if <condition pos:line="19" pos:column="15">(<decl><type><name pos:line="19" pos:column="16">StoreEntry<pos:position pos:line="19" pos:column="26"/></name> <modifier pos:line="19" pos:column="27">*<pos:position pos:line="19" pos:column="28"/></modifier></type><name pos:line="19" pos:column="28">newE<pos:position pos:line="19" pos:column="32"/></name> <init pos:line="19" pos:column="33">= <expr><call><name pos:line="19" pos:column="35">copyFromShm<pos:position pos:line="19" pos:column="46"/></name><argument_list pos:line="19" pos:column="46">(<argument><expr><name pos:line="19" pos:column="47">index<pos:position pos:line="19" pos:column="52"/></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call></expr></init></decl>)<pos:position pos:line="19" pos:column="54"/></condition><then pos:line="19" pos:column="54"> <block pos:line="19" pos:column="55">{
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">newE<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></return> <comment type="line" pos:line="20" pos:column="22">// keep read lock to receive updates from others</comment>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if></elseif></if>

    <comment type="line" pos:line="23" pos:column="5">// private entry or loading failure</comment>
    <expr_stmt><expr><call><name><name pos:line="24" pos:column="5">map<pos:position pos:line="24" pos:column="8"/></name><operator pos:line="24" pos:column="8">-&gt;<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="10">closeForReading<pos:position pos:line="24" pos:column="25"/></name></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">index<pos:position pos:line="24" pos:column="31"/></name></expr></argument>)<pos:position pos:line="24" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">NULL<pos:position pos:line="25" pos:column="16"/></name></expr>;<pos:position pos:line="25" pos:column="17"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
