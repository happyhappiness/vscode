<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3553_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHdrRangeSpec<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">canonize<pos:position pos:line="2" pos:column="27"/></name></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">int64_t<pos:position pos:line="2" pos:column="35"/></name></type> <name pos:line="2" pos:column="36">clen<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="41"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">outputInfo<pos:position pos:line="4" pos:column="15"/></name> <argument_list pos:line="4" pos:column="16">(<argument><expr><literal type="string" pos:line="4" pos:column="17">"have"<pos:position pos:line="4" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HttpRange<pos:position pos:line="5" pos:column="14"/></name></type> <name pos:line="5" pos:column="15">object<pos:position pos:line="5" pos:column="21"/></name><argument_list pos:line="5" pos:column="21">(<argument><expr><literal type="number" pos:line="5" pos:column="22">0<pos:position pos:line="5" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="25">clen<pos:position pos:line="5" pos:column="29"/></name></expr></argument>)<pos:position pos:line="5" pos:column="30"/></argument_list></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><call><name pos:line="7" pos:column="10">known_spec<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">offset<pos:position pos:line="7" pos:column="27"/></name></expr></argument>)<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29"> <block pos:line="7" pos:column="30">{	<comment type="block" pos:line="7" pos:column="33">/* suffix */</comment>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">assert<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><call><name pos:line="8" pos:column="16">known_spec<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">length<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="9" pos:column="9">offset<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">=<pos:position pos:line="9" pos:column="17"/></operator> <call><name><name pos:line="9" pos:column="18">object<pos:position pos:line="9" pos:column="24"/></name><operator pos:line="9" pos:column="24">.<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="25">intersection<pos:position pos:line="9" pos:column="37"/></name></name><argument_list pos:line="9" pos:column="37">(<argument><expr><call><name pos:line="9" pos:column="38">HttpRange<pos:position pos:line="9" pos:column="47"/></name> <argument_list pos:line="9" pos:column="48">(<argument><expr><name pos:line="9" pos:column="49">clen<pos:position pos:line="9" pos:column="53"/></name> <operator pos:line="9" pos:column="54">-<pos:position pos:line="9" pos:column="55"/></operator> <name pos:line="9" pos:column="56">length<pos:position pos:line="9" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="64">clen<pos:position pos:line="9" pos:column="68"/></name></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="70"/></argument_list></call><operator pos:line="9" pos:column="70">.<pos:position pos:line="9" pos:column="71"/></operator><name pos:line="9" pos:column="71">start<pos:position pos:line="9" pos:column="76"/></name></expr>;<pos:position pos:line="9" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then> <elseif pos:line="10" pos:column="7">else <if pos:line="10" pos:column="12">if <condition pos:line="10" pos:column="15">(<expr><operator pos:line="10" pos:column="16">!<pos:position pos:line="10" pos:column="17"/></operator><call><name pos:line="10" pos:column="17">known_spec<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">length<pos:position pos:line="10" pos:column="34"/></name></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="36"/></condition><then pos:line="10" pos:column="36"> <block pos:line="10" pos:column="37">{	<comment type="block" pos:line="10" pos:column="41">/* trailer */</comment>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">assert<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><call><name pos:line="11" pos:column="16">known_spec<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">offset<pos:position pos:line="11" pos:column="33"/></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">HttpRange<pos:position pos:line="12" pos:column="18"/></name></type> <name pos:line="12" pos:column="19">newRange<pos:position pos:line="12" pos:column="27"/></name> <init pos:line="12" pos:column="28">= <expr><call><name><name pos:line="12" pos:column="30">object<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">.<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">intersection<pos:position pos:line="12" pos:column="49"/></name></name><argument_list pos:line="12" pos:column="49">(<argument><expr><call><name pos:line="12" pos:column="50">HttpRange<pos:position pos:line="12" pos:column="59"/></name> <argument_list pos:line="12" pos:column="60">(<argument><expr><name pos:line="12" pos:column="61">offset<pos:position pos:line="12" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="69">clen<pos:position pos:line="12" pos:column="73"/></name></expr></argument>)<pos:position pos:line="12" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="76"/></decl_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">length<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <call><name><name pos:line="13" pos:column="18">newRange<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">.<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">size<pos:position pos:line="13" pos:column="31"/></name></name><argument_list pos:line="13" pos:column="31">()<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if></elseif></if>
    <comment type="block" pos:line="15" pos:column="5">/* we have a "range" now, adjust length if needed */</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">assert<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><call><name pos:line="16" pos:column="12">known_spec<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">length<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">assert<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><call><name pos:line="18" pos:column="12">known_spec<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">offset<pos:position pos:line="18" pos:column="29"/></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="32"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="20" pos:column="5">HttpRange<pos:position pos:line="20" pos:column="14"/></name></type> <name pos:line="20" pos:column="15">newRange<pos:position pos:line="20" pos:column="23"/></name> <init pos:line="20" pos:column="24">= <expr><call><name><name pos:line="20" pos:column="26">object<pos:position pos:line="20" pos:column="32"/></name><operator pos:line="20" pos:column="32">.<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="33">intersection<pos:position pos:line="20" pos:column="45"/></name></name> <argument_list pos:line="20" pos:column="46">(<argument><expr><call><name pos:line="20" pos:column="47">HttpRange<pos:position pos:line="20" pos:column="56"/></name> <argument_list pos:line="20" pos:column="57">(<argument><expr><name pos:line="20" pos:column="58">offset<pos:position pos:line="20" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="66">offset<pos:position pos:line="20" pos:column="72"/></name> <operator pos:line="20" pos:column="73">+<pos:position pos:line="20" pos:column="74"/></operator> <name pos:line="20" pos:column="75">length<pos:position pos:line="20" pos:column="81"/></name></expr></argument>)<pos:position pos:line="20" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="20" pos:column="84"/></decl_stmt>

    <expr_stmt><expr><name pos:line="22" pos:column="5">length<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name><name pos:line="22" pos:column="14">newRange<pos:position pos:line="22" pos:column="22"/></name><operator pos:line="22" pos:column="22">.<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">size<pos:position pos:line="22" pos:column="27"/></name></name><argument_list pos:line="22" pos:column="27">()<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">outputInfo<pos:position pos:line="24" pos:column="15"/></name> <argument_list pos:line="24" pos:column="16">(<argument><expr><literal type="string" pos:line="24" pos:column="17">"done"<pos:position pos:line="24" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt>

    <return pos:line="26" pos:column="5">return <expr><name pos:line="26" pos:column="12">length<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">&gt;<pos:position pos:line="26" pos:column="23"/></operator> <literal type="number" pos:line="26" pos:column="21">0<pos:position pos:line="26" pos:column="22"/></literal></expr>;<pos:position pos:line="26" pos:column="23"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
