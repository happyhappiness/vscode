<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2798_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">String<pos:position pos:line="1" pos:column="7"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeader<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">getList<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">http_hdr_type<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">id<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list> <specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HttpHeaderEntry<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">e<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HttpHeaderPos<pos:position pos:line="5" pos:column="18"/></name></type> <name pos:line="5" pos:column="19">pos<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name pos:line="5" pos:column="25">HttpHeaderInitPos<pos:position pos:line="5" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">55<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">9<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="19">this<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">&lt;&lt;<pos:position pos:line="6" pos:column="32"/></operator> <literal type="string" pos:line="6" pos:column="27">"joining for id "<pos:position pos:line="6" pos:column="44"/></literal> <operator pos:line="6" pos:column="45">&lt;&lt;<pos:position pos:line="6" pos:column="53"/></operator> <name pos:line="6" pos:column="48">id<pos:position pos:line="6" pos:column="50"/></name></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="52"/></expr_stmt>
    <comment type="block" pos:line="7" pos:column="5">/* only fields from ListHeaders array can be "listed" */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><call><name pos:line="8" pos:column="12">CBIT_TEST<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">ListHeadersMask<pos:position pos:line="8" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="39">id<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><call><name pos:line="10" pos:column="10">CBIT_TEST<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">mask<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">id<pos:position pos:line="10" pos:column="28"/></name></expr></argument>)<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="30"/></condition><then pos:line="10" pos:column="30">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><call><name pos:line="11" pos:column="16">String<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">String<pos:position pos:line="13" pos:column="11"/></name></type> <name pos:line="13" pos:column="12">s<pos:position pos:line="13" pos:column="13"/></name></decl>;<pos:position pos:line="13" pos:column="14"/></decl_stmt>

    <while pos:line="15" pos:column="5">while <condition pos:line="15" pos:column="11">(<expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">e<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <call><name pos:line="15" pos:column="17">getEntry<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><operator pos:line="15" pos:column="26">&amp;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="27">pos<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call><operator pos:line="15" pos:column="31">)<pos:position pos:line="15" pos:column="32"/></operator></expr>)<pos:position pos:line="15" pos:column="33"/></condition> <block pos:line="15" pos:column="34">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">e<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">-&gt;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="16">id<pos:position pos:line="16" pos:column="18"/></name></name> <operator pos:line="16" pos:column="19">==<pos:position pos:line="16" pos:column="21"/></operator> <name pos:line="16" pos:column="22">id<pos:position pos:line="16" pos:column="24"/></name></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="17" pos:column="13">strListAdd<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="25">s<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><call><name><name pos:line="17" pos:column="28">e<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">-&gt;<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="31">value<pos:position pos:line="17" pos:column="36"/></name><operator pos:line="17" pos:column="36">.<pos:position pos:line="17" pos:column="37"/></operator><name pos:line="17" pos:column="37">termedBuf<pos:position pos:line="17" pos:column="46"/></name></name><argument_list pos:line="17" pos:column="46">()<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr></argument>, <argument><expr><literal type="char" pos:line="17" pos:column="50">','<pos:position pos:line="17" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></while>

    <comment type="block" pos:line="20" pos:column="5">/*
     * note: we might get an empty (size==0) string if there was an "empty"
     * header. This results in an empty length String, which may have a NULL
     * buffer.
     */</comment>
    <comment type="block" pos:line="25" pos:column="5">/* temporary warning: remove it? (Is it useful for diagnostics ?) */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><call><name><name pos:line="26" pos:column="10">s<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">size<pos:position pos:line="26" pos:column="16"/></name></name><argument_list pos:line="26" pos:column="16">()<pos:position pos:line="26" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">55<pos:position pos:line="27" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="20">3<pos:position pos:line="27" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="23">"empty list header: "<pos:position pos:line="27" pos:column="44"/></literal> <operator pos:line="27" pos:column="45">&lt;&lt;<pos:position pos:line="27" pos:column="53"/></operator> <name><name pos:line="27" pos:column="48">Headers<pos:position pos:line="27" pos:column="55"/></name><index pos:line="27" pos:column="55">[<expr><name pos:line="27" pos:column="56">id<pos:position pos:line="27" pos:column="58"/></name></expr>]<pos:position pos:line="27" pos:column="59"/></index></name><operator pos:line="27" pos:column="59">.<pos:position pos:line="27" pos:column="60"/></operator><name pos:line="27" pos:column="60">name<pos:position pos:line="27" pos:column="64"/></name> <operator pos:line="27" pos:column="65">&lt;&lt;<pos:position pos:line="27" pos:column="73"/></operator> <literal type="string" pos:line="27" pos:column="68">"("<pos:position pos:line="27" pos:column="71"/></literal> <operator pos:line="27" pos:column="72">&lt;&lt;<pos:position pos:line="27" pos:column="80"/></operator> <name pos:line="27" pos:column="75">id<pos:position pos:line="27" pos:column="77"/></name> <operator pos:line="27" pos:column="78">&lt;&lt;<pos:position pos:line="27" pos:column="86"/></operator> <literal type="string" pos:line="27" pos:column="81">")"<pos:position pos:line="27" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="86"/></expr_stmt></block></then>
    <else pos:line="28" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="9">debugs<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><literal type="number" pos:line="29" pos:column="16">55<pos:position pos:line="29" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="20">6<pos:position pos:line="29" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="23">this<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">&lt;&lt;<pos:position pos:line="29" pos:column="36"/></operator> <literal type="string" pos:line="29" pos:column="31">": joined for id "<pos:position pos:line="29" pos:column="49"/></literal> <operator pos:line="29" pos:column="50">&lt;&lt;<pos:position pos:line="29" pos:column="58"/></operator> <name pos:line="29" pos:column="53">id<pos:position pos:line="29" pos:column="55"/></name> <operator pos:line="29" pos:column="56">&lt;&lt;<pos:position pos:line="29" pos:column="64"/></operator> <literal type="string" pos:line="29" pos:column="59">": "<pos:position pos:line="29" pos:column="63"/></literal> <operator pos:line="29" pos:column="64">&lt;&lt;<pos:position pos:line="29" pos:column="72"/></operator> <name pos:line="29" pos:column="67">s<pos:position pos:line="29" pos:column="68"/></name></expr></argument>)<pos:position pos:line="29" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="70"/></expr_stmt></block></else></if>

    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">s<pos:position pos:line="31" pos:column="13"/></name></expr>;<pos:position pos:line="31" pos:column="14"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
