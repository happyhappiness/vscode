<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6206_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ipc<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Forwarder<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">start<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">()<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">54<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">3<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name></expr></argument>)<pos:position pos:line="4" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="25"/></expr_stmt>

    <typedef pos:line="6" pos:column="5">typedef <type><name><name pos:line="6" pos:column="13">NullaryMemFunT<pos:position pos:line="6" pos:column="27"/></name><argument_list type="generic" pos:line="6" pos:column="27">&lt;<argument><expr><name pos:line="6" pos:column="28">Forwarder<pos:position pos:line="6" pos:column="37"/></name></expr></argument>&gt;<pos:position pos:line="6" pos:column="41"/></argument_list></name></type> <name pos:line="6" pos:column="39">Dialer<pos:position pos:line="6" pos:column="45"/></name>;<pos:position pos:line="6" pos:column="46"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">AsyncCall<pos:position pos:line="7" pos:column="14"/></name><operator pos:line="7" pos:column="14">::<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">Pointer<pos:position pos:line="7" pos:column="23"/></name></name></type> <name pos:line="7" pos:column="24">callback<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><call><name pos:line="7" pos:column="35">JobCallback<pos:position pos:line="7" pos:column="46"/></name><argument_list pos:line="7" pos:column="46">(<argument><expr><literal type="number" pos:line="7" pos:column="47">54<pos:position pos:line="7" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="51">5<pos:position pos:line="7" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="54">Dialer<pos:position pos:line="7" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="62">this<pos:position pos:line="7" pos:column="66"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="68">Forwarder<pos:position pos:line="7" pos:column="77"/></name><operator pos:line="7" pos:column="77">::<pos:position pos:line="7" pos:column="79"/></operator><name pos:line="7" pos:column="79">handleRemoteAck<pos:position pos:line="7" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="96"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">++<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">LastRequestId<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">==<pos:position pos:line="8" pos:column="27"/></operator> <literal type="number" pos:line="8" pos:column="28">0<pos:position pos:line="8" pos:column="29"/></literal></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30"> <comment type="line" pos:line="8" pos:column="31">// don't use zero value as request-&gt;requestId</comment>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="9" pos:column="9">++<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">LastRequestId<pos:position pos:line="9" pos:column="24"/></name></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">request<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">requestId<pos:position pos:line="10" pos:column="23"/></name></name> <operator pos:line="10" pos:column="24">=<pos:position pos:line="10" pos:column="25"/></operator> <name pos:line="10" pos:column="26">LastRequestId<pos:position pos:line="10" pos:column="39"/></name></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">TheRequestsMap<pos:position pos:line="11" pos:column="19"/></name><index pos:line="11" pos:column="19">[<expr><name><name pos:line="11" pos:column="20">request<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">requestId<pos:position pos:line="11" pos:column="38"/></name></name></expr>]<pos:position pos:line="11" pos:column="39"/></index></name> <operator pos:line="11" pos:column="40">=<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="42">callback<pos:position pos:line="11" pos:column="50"/></name></expr>;<pos:position pos:line="11" pos:column="51"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">TypedMsgHdr<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">message<pos:position pos:line="12" pos:column="24"/></name></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>

    <try pos:line="14" pos:column="5">try <block pos:line="14" pos:column="9">{
        <expr_stmt><expr><call><name><name pos:line="15" pos:column="9">request<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">-&gt;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="18">pack<pos:position pos:line="15" pos:column="22"/></name></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">message<pos:position pos:line="15" pos:column="30"/></name></expr></argument>)<pos:position pos:line="15" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block> <catch pos:line="16" pos:column="7">catch <parameter_list pos:line="16" pos:column="13">(<parameter><decl><type><modifier pos:line="16" pos:column="14">...<pos:position pos:line="16" pos:column="17"/></modifier></type></decl></parameter>)<pos:position pos:line="16" pos:column="18"/></parameter_list> <block pos:line="16" pos:column="19">{
        <comment type="line" pos:line="17" pos:column="9">// assume the pack() call failed because the message did not fit</comment>
        <comment type="line" pos:line="18" pos:column="9">// TODO: add a more specific exception?</comment>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">handleError<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">()<pos:position pos:line="19" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></catch></try>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">SendMessage<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">coordinatorAddr<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">message<pos:position pos:line="22" pos:column="41"/></name></expr></argument>)<pos:position pos:line="22" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">eventAdd<pos:position pos:line="23" pos:column="13"/></name><argument_list pos:line="23" pos:column="13">(<argument><expr><literal type="string" pos:line="23" pos:column="14">"Ipc::Forwarder::requestTimedOut"<pos:position pos:line="23" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="49">&amp;<pos:position pos:line="23" pos:column="54"/></operator><name><name pos:line="23" pos:column="50">Forwarder<pos:position pos:line="23" pos:column="59"/></name><operator pos:line="23" pos:column="59">::<pos:position pos:line="23" pos:column="61"/></operator><name pos:line="23" pos:column="61">RequestTimedOut<pos:position pos:line="23" pos:column="76"/></name></name></expr></argument>,
             <argument><expr><name pos:line="24" pos:column="14">this<pos:position pos:line="24" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="20">timeout<pos:position pos:line="24" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="29">0<pos:position pos:line="24" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="24" pos:column="32">false<pos:position pos:line="24" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
