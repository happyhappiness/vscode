<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2821_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">PconnPool<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">push<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name><name pos:line="2" pos:column="23">Comm<pos:position pos:line="2" pos:column="27"/></name><operator pos:line="2" pos:column="27">::<pos:position pos:line="2" pos:column="29"/></operator><name pos:line="2" pos:column="29">ConnectionPointer<pos:position pos:line="2" pos:column="46"/></name></name> <modifier pos:line="2" pos:column="47">&amp;<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="48">conn<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">char<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">domain<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name pos:line="4" pos:column="9">fdUsageHigh<pos:position pos:line="4" pos:column="20"/></name><argument_list pos:line="4" pos:column="20">()<pos:position pos:line="4" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="23"/></condition><then pos:line="4" pos:column="23"> <block pos:line="4" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">48<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">3<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="23">HERE<pos:position pos:line="5" pos:column="27"/></name> <operator pos:line="5" pos:column="28">&lt;&lt;<pos:position pos:line="5" pos:column="36"/></operator> <literal type="string" pos:line="5" pos:column="31">"Not many unused FDs"<pos:position pos:line="5" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="6" pos:column="9">conn<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">close<pos:position pos:line="6" pos:column="20"/></name></name><argument_list pos:line="6" pos:column="20">()<pos:position pos:line="6" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>
        <return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then> <elseif pos:line="8" pos:column="7">else <if pos:line="8" pos:column="12">if <condition pos:line="8" pos:column="15">(<expr><name pos:line="8" pos:column="16">shutting_down<pos:position pos:line="8" pos:column="29"/></name></expr>)<pos:position pos:line="8" pos:column="30"/></condition><then pos:line="8" pos:column="30"> <block pos:line="8" pos:column="31">{
        <expr_stmt><expr><call><name><name pos:line="9" pos:column="9">conn<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">close<pos:position pos:line="9" pos:column="20"/></name></name><argument_list pos:line="9" pos:column="20">()<pos:position pos:line="9" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">48<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">3<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="23">HERE<pos:position pos:line="10" pos:column="27"/></name> <operator pos:line="10" pos:column="28">&lt;&lt;<pos:position pos:line="10" pos:column="36"/></operator> <literal type="string" pos:line="10" pos:column="31">"Squid is shutting down. Refusing to do anything"<pos:position pos:line="10" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="82"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if></elseif></if>
    <comment type="line" pos:line="13" pos:column="5">// TODO: also close used pconns if we exceed peer max-conn limit</comment>

    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">char<pos:position pos:line="15" pos:column="15"/></name> <modifier pos:line="15" pos:column="16">*<pos:position pos:line="15" pos:column="17"/></modifier></type><name pos:line="15" pos:column="17">aKey<pos:position pos:line="15" pos:column="21"/></name> <init pos:line="15" pos:column="22">= <expr><call><name pos:line="15" pos:column="24">key<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">conn<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">domain<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">IdleConnList<pos:position pos:line="16" pos:column="17"/></name> <modifier pos:line="16" pos:column="18">*<pos:position pos:line="16" pos:column="19"/></modifier></type><name pos:line="16" pos:column="19">list<pos:position pos:line="16" pos:column="23"/></name> <init pos:line="16" pos:column="24">= <expr><operator pos:line="16" pos:column="26">(<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">IdleConnList<pos:position pos:line="16" pos:column="39"/></name> <operator pos:line="16" pos:column="40">*<pos:position pos:line="16" pos:column="41"/></operator><operator pos:line="16" pos:column="41">)<pos:position pos:line="16" pos:column="42"/></operator> <call><name pos:line="16" pos:column="43">hash_lookup<pos:position pos:line="16" pos:column="54"/></name><argument_list pos:line="16" pos:column="54">(<argument><expr><name pos:line="16" pos:column="55">table<pos:position pos:line="16" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="62">aKey<pos:position pos:line="16" pos:column="66"/></name></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="68"/></decl_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">list<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">==<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">NULL<pos:position pos:line="18" pos:column="21"/></name></expr>)<pos:position pos:line="18" pos:column="22"/></condition><then pos:line="18" pos:column="22"> <block pos:line="18" pos:column="23">{
        <expr_stmt><expr><name pos:line="19" pos:column="9">list<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <operator pos:line="19" pos:column="16">new<pos:position pos:line="19" pos:column="19"/></operator> <call><name pos:line="19" pos:column="20">IdleConnList<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">aKey<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">this<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">debugs<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="number" pos:line="20" pos:column="16">48<pos:position pos:line="20" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="20">3<pos:position pos:line="20" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="23">"new IdleConnList for {"<pos:position pos:line="20" pos:column="47"/></literal> <operator pos:line="20" pos:column="48">&lt;&lt;<pos:position pos:line="20" pos:column="56"/></operator> <call><name pos:line="20" pos:column="51">hashKeyStr<pos:position pos:line="20" pos:column="61"/></name><argument_list pos:line="20" pos:column="61">(<argument><expr><name pos:line="20" pos:column="62">list<pos:position pos:line="20" pos:column="66"/></name></expr></argument>)<pos:position pos:line="20" pos:column="67"/></argument_list></call> <operator pos:line="20" pos:column="68">&lt;&lt;<pos:position pos:line="20" pos:column="76"/></operator> <literal type="string" pos:line="20" pos:column="71">"}"<pos:position pos:line="20" pos:column="74"/></literal></expr></argument> )<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">hash_join<pos:position pos:line="21" pos:column="18"/></name><argument_list pos:line="21" pos:column="18">(<argument><expr><name pos:line="21" pos:column="19">table<pos:position pos:line="21" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="26">list<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then> <else pos:line="22" pos:column="7">else <block pos:line="22" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">debugs<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><literal type="number" pos:line="23" pos:column="16">48<pos:position pos:line="23" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="20">3<pos:position pos:line="23" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="23">"found IdleConnList for {"<pos:position pos:line="23" pos:column="49"/></literal> <operator pos:line="23" pos:column="50">&lt;&lt;<pos:position pos:line="23" pos:column="58"/></operator> <call><name pos:line="23" pos:column="53">hashKeyStr<pos:position pos:line="23" pos:column="63"/></name><argument_list pos:line="23" pos:column="63">(<argument><expr><name pos:line="23" pos:column="64">list<pos:position pos:line="23" pos:column="68"/></name></expr></argument>)<pos:position pos:line="23" pos:column="69"/></argument_list></call> <operator pos:line="23" pos:column="70">&lt;&lt;<pos:position pos:line="23" pos:column="78"/></operator> <literal type="string" pos:line="23" pos:column="73">"}"<pos:position pos:line="23" pos:column="76"/></literal></expr></argument> )<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="79"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="26" pos:column="5">list<pos:position pos:line="26" pos:column="9"/></name><operator pos:line="26" pos:column="9">-&gt;<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="11">push<pos:position pos:line="26" pos:column="15"/></name></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">conn<pos:position pos:line="26" pos:column="20"/></name></expr></argument>)<pos:position pos:line="26" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">assert<pos:position pos:line="27" pos:column="11"/></name><argument_list pos:line="27" pos:column="11">(<argument><expr><operator pos:line="27" pos:column="12">!<pos:position pos:line="27" pos:column="13"/></operator><call><name pos:line="27" pos:column="13">comm_has_incomplete_write<pos:position pos:line="27" pos:column="38"/></name><argument_list pos:line="27" pos:column="38">(<argument><expr><name><name pos:line="27" pos:column="39">conn<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">-&gt;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="45">fd<pos:position pos:line="27" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">LOCAL_ARRAY<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">char<pos:position pos:line="29" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="23">desc<pos:position pos:line="29" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="29">FD_DESC_SZ<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">snprintf<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><name pos:line="30" pos:column="14">desc<pos:position pos:line="30" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="20">FD_DESC_SZ<pos:position pos:line="30" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="32">"Idle server: %s"<pos:position pos:line="30" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="51">aKey<pos:position pos:line="30" pos:column="55"/></name></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">fd_note<pos:position pos:line="31" pos:column="12"/></name><argument_list pos:line="31" pos:column="12">(<argument><expr><name><name pos:line="31" pos:column="13">conn<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">-&gt;<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="19">fd<pos:position pos:line="31" pos:column="21"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="23">desc<pos:position pos:line="31" pos:column="27"/></name></expr></argument>)<pos:position pos:line="31" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">debugs<pos:position pos:line="32" pos:column="11"/></name><argument_list pos:line="32" pos:column="11">(<argument><expr><literal type="number" pos:line="32" pos:column="12">48<pos:position pos:line="32" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="16">3<pos:position pos:line="32" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="19">HERE<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">&lt;&lt;<pos:position pos:line="32" pos:column="32"/></operator> <literal type="string" pos:line="32" pos:column="27">"pushed "<pos:position pos:line="32" pos:column="36"/></literal> <operator pos:line="32" pos:column="37">&lt;&lt;<pos:position pos:line="32" pos:column="45"/></operator> <name pos:line="32" pos:column="40">conn<pos:position pos:line="32" pos:column="44"/></name> <operator pos:line="32" pos:column="45">&lt;&lt;<pos:position pos:line="32" pos:column="53"/></operator> <literal type="string" pos:line="32" pos:column="48">" for "<pos:position pos:line="32" pos:column="55"/></literal> <operator pos:line="32" pos:column="56">&lt;&lt;<pos:position pos:line="32" pos:column="64"/></operator> <name pos:line="32" pos:column="59">aKey<pos:position pos:line="32" pos:column="63"/></name></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="65"/></expr_stmt>

    <comment type="line" pos:line="34" pos:column="5">// successful push notifications resume multi-connection opening sequence</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">notifyManager<pos:position pos:line="35" pos:column="18"/></name><argument_list pos:line="35" pos:column="18">(<argument><expr><literal type="string" pos:line="35" pos:column="19">"push"<pos:position pos:line="35" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
