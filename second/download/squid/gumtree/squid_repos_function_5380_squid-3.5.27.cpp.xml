<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5380_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Client<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">sendBodyIsTooLargeError<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">()<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ErrorState<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">err<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><operator pos:line="4" pos:column="23">new<pos:position pos:line="4" pos:column="26"/></operator> <call><name pos:line="4" pos:column="27">ErrorState<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">(<argument><expr><name pos:line="4" pos:column="38">ERR_TOO_BIG<pos:position pos:line="4" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="4" pos:column="51">Http<pos:position pos:line="4" pos:column="55"/></name><operator pos:line="4" pos:column="55">::<pos:position pos:line="4" pos:column="57"/></operator><name pos:line="4" pos:column="57">scForbidden<pos:position pos:line="4" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="70">request<pos:position pos:line="4" pos:column="77"/></name></expr></argument>)<pos:position pos:line="4" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="79"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="5" pos:column="5">fwd<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">-&gt;<pos:position pos:line="5" pos:column="13"/></operator><name pos:line="5" pos:column="10">fail<pos:position pos:line="5" pos:column="14"/></name></name><argument_list pos:line="5" pos:column="14">(<argument><expr><name pos:line="5" pos:column="15">err<pos:position pos:line="5" pos:column="18"/></name></expr></argument>)<pos:position pos:line="5" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="6" pos:column="5">fwd<pos:position pos:line="6" pos:column="8"/></name><operator pos:line="6" pos:column="8">-&gt;<pos:position pos:line="6" pos:column="13"/></operator><name pos:line="6" pos:column="10">dontRetry<pos:position pos:line="6" pos:column="19"/></name></name><argument_list pos:line="6" pos:column="19">(<argument><expr><literal type="boolean" pos:line="6" pos:column="20">true<pos:position pos:line="6" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">abortOnData<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><literal type="string" pos:line="7" pos:column="17">"Virgin body too large."<pos:position pos:line="7" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
