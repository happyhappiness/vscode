<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_659_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">lt_dlloader_dump<pos:position pos:line="2" pos:column="17"/></name> <parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">void<pos:position pos:line="2" pos:column="23"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="24"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <expr_stmt><expr><call><name pos:line="4" pos:column="3">fprintf<pos:position pos:line="4" pos:column="10"/></name> <argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">stderr<pos:position pos:line="4" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="20">"loaders: "<pos:position pos:line="4" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="33"/></expr_stmt>
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><operator pos:line="5" pos:column="7">!<pos:position pos:line="5" pos:column="8"/></operator><name pos:line="5" pos:column="8">loaders<pos:position pos:line="5" pos:column="15"/></name></expr>)<pos:position pos:line="5" pos:column="16"/></condition><then pos:line="5" pos:column="16">
    <block pos:line="6" pos:column="5">{
      <expr_stmt><expr><call><name pos:line="7" pos:column="7">fprintf<pos:position pos:line="7" pos:column="14"/></name> <argument_list pos:line="7" pos:column="15">(<argument><expr><name pos:line="7" pos:column="16">stderr<pos:position pos:line="7" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="24">"(empty)"<pos:position pos:line="7" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block></then>
  <else pos:line="9" pos:column="3">else
    <block pos:line="10" pos:column="5">{
      <decl_stmt><decl><type><specifier pos:line="11" pos:column="7">const<pos:position pos:line="11" pos:column="12"/></specifier> <name pos:line="11" pos:column="13">lt_dlvtable<pos:position pos:line="11" pos:column="24"/></name> <modifier pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></modifier></type><name pos:line="11" pos:column="26">head<pos:position pos:line="11" pos:column="30"/></name> <init pos:line="11" pos:column="31">= <expr><operator pos:line="11" pos:column="33">(<pos:position pos:line="11" pos:column="34"/></operator><specifier pos:line="11" pos:column="34">const<pos:position pos:line="11" pos:column="39"/></specifier> <name pos:line="11" pos:column="40">lt_dlvtable<pos:position pos:line="11" pos:column="51"/></name> <operator pos:line="11" pos:column="52">*<pos:position pos:line="11" pos:column="53"/></operator><operator pos:line="11" pos:column="53">)<pos:position pos:line="11" pos:column="54"/></operator> <name><name pos:line="11" pos:column="55">loaders<pos:position pos:line="11" pos:column="62"/></name><operator pos:line="11" pos:column="62">-&gt;<pos:position pos:line="11" pos:column="67"/></operator><name pos:line="11" pos:column="64">userdata<pos:position pos:line="11" pos:column="72"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="73"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">fprintf<pos:position pos:line="12" pos:column="14"/></name> <argument_list pos:line="12" pos:column="15">(<argument><expr><name pos:line="12" pos:column="16">stderr<pos:position pos:line="12" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="24">"%s"<pos:position pos:line="12" pos:column="28"/></literal></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="12" pos:column="30">(<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">head<pos:position pos:line="12" pos:column="35"/></name> <operator pos:line="12" pos:column="36">&amp;&amp;<pos:position pos:line="12" pos:column="46"/></operator> <name><name pos:line="12" pos:column="39">head<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">-&gt;<pos:position pos:line="12" pos:column="48"/></operator><name pos:line="12" pos:column="45">name<pos:position pos:line="12" pos:column="49"/></name></name><operator pos:line="12" pos:column="49">)<pos:position pos:line="12" pos:column="50"/></operator></expr> ?<pos:position pos:line="12" pos:column="52"/></condition><then pos:line="12" pos:column="52"> <expr><name><name pos:line="12" pos:column="53">head<pos:position pos:line="12" pos:column="57"/></name><operator pos:line="12" pos:column="57">-&gt;<pos:position pos:line="12" pos:column="62"/></operator><name pos:line="12" pos:column="59">name<pos:position pos:line="12" pos:column="63"/></name></name></expr> <pos:position pos:line="12" pos:column="64"/></then><else pos:line="12" pos:column="64">: <expr><literal type="string" pos:line="12" pos:column="66">"(null)"<pos:position pos:line="12" pos:column="74"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt>
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><call><name pos:line="13" pos:column="11">slist_tail<pos:position pos:line="13" pos:column="21"/></name> <argument_list pos:line="13" pos:column="22">(<argument><expr><name pos:line="13" pos:column="23">loaders<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="32"/></condition><then pos:line="13" pos:column="32">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="14" pos:column="9">slist_foreach<pos:position pos:line="14" pos:column="22"/></name> <argument_list pos:line="14" pos:column="23">(<argument><expr><call><name pos:line="14" pos:column="24">slist_tail<pos:position pos:line="14" pos:column="34"/></name> <argument_list pos:line="14" pos:column="35">(<argument><expr><name pos:line="14" pos:column="36">loaders<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="14" pos:column="46">loader_dump_callback<pos:position pos:line="14" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="68">NULL<pos:position pos:line="14" pos:column="72"/></name></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="74"/></expr_stmt></block></then></if>
    }<pos:position pos:line="15" pos:column="6"/></block></else></if>
  <expr_stmt><expr><call><name pos:line="16" pos:column="3">fprintf<pos:position pos:line="16" pos:column="10"/></name> <argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">stderr<pos:position pos:line="16" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="20">"\n"<pos:position pos:line="16" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
