<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_937_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">pid_t<pos:position pos:line="1" pos:column="13"/></name></type>
<name pos:line="2" pos:column="1">GetOtherPid<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">File<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">&amp;<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="19">pidFile<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <specifier pos:line="4" pos:column="11">auto<pos:position pos:line="4" pos:column="15"/></specifier></type> <name pos:line="4" pos:column="16">input<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><call><name><name pos:line="4" pos:column="24">pidFile<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">.<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">readSmall<pos:position pos:line="4" pos:column="41"/></name></name><argument_list pos:line="4" pos:column="41">(<argument><expr><literal type="number" pos:line="4" pos:column="42">1<pos:position pos:line="4" pos:column="43"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="45">32<pos:position pos:line="4" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int64_t<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">rawPid<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><operator pos:line="5" pos:column="22">-<pos:position pos:line="5" pos:column="23"/></operator><literal type="number" pos:line="5" pos:column="23">1<pos:position pos:line="5" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">Parser<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">::<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">Tokenizer<pos:position pos:line="7" pos:column="22"/></name></name></type> <name pos:line="7" pos:column="23">tok<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">input<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><operator pos:line="8" pos:column="10">(<pos:position pos:line="8" pos:column="11"/></operator><call><name><name pos:line="8" pos:column="11">tok<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">.<pos:position pos:line="8" pos:column="15"/></operator><name pos:line="8" pos:column="15">int64<pos:position pos:line="8" pos:column="20"/></name></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">rawPid<pos:position pos:line="8" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="29">10<pos:position pos:line="8" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="8" pos:column="33">false<pos:position pos:line="8" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call> <operator pos:line="8" pos:column="40">&amp;&amp;<pos:position pos:line="8" pos:column="50"/></operator> <comment type="line" pos:line="8" pos:column="43">// PID digits</comment>
            <operator pos:line="9" pos:column="13">(<pos:position pos:line="9" pos:column="14"/></operator><call><name><name pos:line="9" pos:column="14">tok<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">.<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="18">skipOne<pos:position pos:line="9" pos:column="25"/></name></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name><name pos:line="9" pos:column="26">CharacterSet<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">::<pos:position pos:line="9" pos:column="40"/></operator><name pos:line="9" pos:column="40">CR<pos:position pos:line="9" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="43"/></argument_list></call><operator pos:line="9" pos:column="43">||<pos:position pos:line="9" pos:column="45"/></operator><literal type="boolean" pos:line="9" pos:column="45">true<pos:position pos:line="9" pos:column="49"/></literal><operator pos:line="9" pos:column="49">)<pos:position pos:line="9" pos:column="50"/></operator> <operator pos:line="9" pos:column="51">&amp;&amp;<pos:position pos:line="9" pos:column="61"/></operator> <comment type="line" pos:line="9" pos:column="54">// optional CR (Windows/etc.)</comment>
            <call><name><name pos:line="10" pos:column="13">tok<pos:position pos:line="10" pos:column="16"/></name><operator pos:line="10" pos:column="16">.<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="17">skipOne<pos:position pos:line="10" pos:column="24"/></name></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name><name pos:line="10" pos:column="25">CharacterSet<pos:position pos:line="10" pos:column="37"/></name><operator pos:line="10" pos:column="37">::<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="39">LF<pos:position pos:line="10" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call> <operator pos:line="10" pos:column="43">&amp;&amp;<pos:position pos:line="10" pos:column="53"/></operator> <comment type="line" pos:line="10" pos:column="46">// required end of line</comment>
            <call><name><name pos:line="11" pos:column="13">tok<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">.<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="17">atEnd<pos:position pos:line="11" pos:column="22"/></name></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call><operator pos:line="11" pos:column="24">)<pos:position pos:line="11" pos:column="25"/></operator></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26"> <block pos:line="11" pos:column="27">{ <comment type="line" pos:line="11" pos:column="29">// no trailing garbage</comment>
        <throw pos:line="12" pos:column="9">throw <expr><call><name pos:line="12" pos:column="15">TexcHere<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><call><name pos:line="12" pos:column="24">ToSBuf<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">(<argument><expr><literal type="string" pos:line="12" pos:column="31">"Malformed "<pos:position pos:line="12" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="45">TheFile<pos:position pos:line="12" pos:column="52"/></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="55"/></throw>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">debugs<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="number" pos:line="15" pos:column="12">50<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="16">7<pos:position pos:line="15" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="19">"found PID "<pos:position pos:line="15" pos:column="31"/></literal> <operator pos:line="15" pos:column="32">&lt;&lt;<pos:position pos:line="15" pos:column="40"/></operator> <name pos:line="15" pos:column="35">rawPid<pos:position pos:line="15" pos:column="41"/></name> <operator pos:line="15" pos:column="42">&lt;&lt;<pos:position pos:line="15" pos:column="50"/></operator> <literal type="string" pos:line="15" pos:column="45">" in "<pos:position pos:line="15" pos:column="51"/></literal> <operator pos:line="15" pos:column="52">&lt;&lt;<pos:position pos:line="15" pos:column="60"/></operator> <name pos:line="15" pos:column="55">TheFile<pos:position pos:line="15" pos:column="62"/></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="64"/></expr_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">rawPid<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">&lt;=<pos:position pos:line="17" pos:column="21"/></operator> <literal type="number" pos:line="17" pos:column="19">1<pos:position pos:line="17" pos:column="20"/></literal></expr>)<pos:position pos:line="17" pos:column="21"/></condition><then pos:line="17" pos:column="21">
        <block type="pseudo"><throw pos:line="18" pos:column="9">throw <expr><call><name pos:line="18" pos:column="15">TexcHere<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><call><name pos:line="18" pos:column="24">ToSBuf<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><literal type="string" pos:line="18" pos:column="31">"Bad "<pos:position pos:line="18" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="39">TheFile<pos:position pos:line="18" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="48">" contains unreasonably small PID value: "<pos:position pos:line="18" pos:column="90"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="92">rawPid<pos:position pos:line="18" pos:column="98"/></name></expr></argument>)<pos:position pos:line="18" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="101"/></throw></block></then></if>
    <decl_stmt><decl><type><specifier pos:line="19" pos:column="5">const<pos:position pos:line="19" pos:column="10"/></specifier> <specifier pos:line="19" pos:column="11">auto<pos:position pos:line="19" pos:column="15"/></specifier></type> <name pos:line="19" pos:column="16">finalPid<pos:position pos:line="19" pos:column="24"/></name> <init pos:line="19" pos:column="25">= <expr><cast type="static" pos:line="19" pos:column="27">static_cast<argument_list type="generic" pos:line="19" pos:column="38">&lt;<argument><expr><name pos:line="19" pos:column="39">pid_t<pos:position pos:line="19" pos:column="44"/></name></expr></argument>&gt;<pos:position pos:line="19" pos:column="48"/></argument_list><argument_list pos:line="19" pos:column="45">(<argument><expr><name pos:line="19" pos:column="46">rawPid<pos:position pos:line="19" pos:column="52"/></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="19" pos:column="54"/></decl_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><cast type="static" pos:line="20" pos:column="9">static_cast<argument_list type="generic" pos:line="20" pos:column="20">&lt;<argument><expr><name pos:line="20" pos:column="21">int64_t<pos:position pos:line="20" pos:column="28"/></name></expr></argument>&gt;<pos:position pos:line="20" pos:column="32"/></argument_list><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">finalPid<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></cast> <operator pos:line="20" pos:column="40">!=<pos:position pos:line="20" pos:column="42"/></operator> <name pos:line="20" pos:column="43">rawPid<pos:position pos:line="20" pos:column="49"/></name></expr>)<pos:position pos:line="20" pos:column="50"/></condition><then pos:line="20" pos:column="50">
        <block type="pseudo"><throw pos:line="21" pos:column="9">throw <expr><call><name pos:line="21" pos:column="15">TexcHere<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><call><name pos:line="21" pos:column="24">ToSBuf<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><literal type="string" pos:line="21" pos:column="31">"Bad "<pos:position pos:line="21" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">TheFile<pos:position pos:line="21" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="48">" contains unreasonably large PID value: "<pos:position pos:line="21" pos:column="90"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="92">rawPid<pos:position pos:line="21" pos:column="98"/></name></expr></argument>)<pos:position pos:line="21" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="101"/></throw></block></then></if>

    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">finalPid<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
