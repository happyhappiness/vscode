<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6393_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">DiskDaemonDiskIOModule<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">::<pos:position pos:line="2" pos:column="25"/></operator><name pos:line="2" pos:column="25">init<pos:position pos:line="2" pos:column="29"/></name></name><parameter_list pos:line="2" pos:column="29">()<pos:position pos:line="2" pos:column="31"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* We may be reused - for instance in coss - eventually.
     * When we do, we either need per-using-module stats (
     * no singleton pattern), or we need to refcount the
     * initialisation level and handle multiple clients.
     * RBC - 20030718.
     */</comment>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><operator pos:line="10" pos:column="12">!<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">initialised<pos:position pos:line="10" pos:column="24"/></name></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">memset<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><operator pos:line="11" pos:column="12">&amp;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="13">diskd_stats<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="26">'\0'<pos:position pos:line="11" pos:column="30"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="32">sizeof<argument_list pos:line="11" pos:column="38">(<argument><expr><name pos:line="11" pos:column="39">diskd_stats<pos:position pos:line="11" pos:column="50"/></name></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="53"/></expr_stmt>
<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="12" pos:column="5">0<pos:position pos:line="12" pos:column="6"/></literal></expr></cpp:if>
    <comment type="block" pos:line="13" pos:column="5">/*
     * DPW 2007-04-12
     * No debugging here please because this method is called before
     * the debug log is configured and we'll get the message on
     * stderr when doing things like 'squid -k reconfigure'
     */</comment>
    debugs(47, DBG_IMPORTANT, "diskd started");
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name pos:line="21" pos:column="5">initialised<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <literal type="boolean" pos:line="21" pos:column="19">true<pos:position pos:line="21" pos:column="23"/></literal></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">registerWithCacheManager<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">()<pos:position pos:line="23" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="32"/></expr_stmt>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
