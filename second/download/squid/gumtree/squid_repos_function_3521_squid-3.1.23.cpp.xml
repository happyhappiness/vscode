<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3521_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">finishDechunkingRequest<pos:position pos:line="2" pos:column="39"/></name></name><parameter_list pos:line="2" pos:column="39">(<parameter><decl><type><name pos:line="2" pos:column="40">HttpParser<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">hp<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">33<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="19">HERE<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&lt;&lt;<pos:position pos:line="4" pos:column="32"/></operator> <literal type="string" pos:line="4" pos:column="27">"finish dechunking; content: "<pos:position pos:line="4" pos:column="57"/></literal> <operator pos:line="4" pos:column="58">&lt;&lt;<pos:position pos:line="4" pos:column="66"/></operator> <call><name><name pos:line="4" pos:column="61">in<pos:position pos:line="4" pos:column="63"/></name><operator pos:line="4" pos:column="63">.<pos:position pos:line="4" pos:column="64"/></operator><name pos:line="4" pos:column="64">dechunked<pos:position pos:line="4" pos:column="73"/></name><operator pos:line="4" pos:column="73">.<pos:position pos:line="4" pos:column="74"/></operator><name pos:line="4" pos:column="74">contentSize<pos:position pos:line="4" pos:column="85"/></name></name><argument_list pos:line="4" pos:column="85">()<pos:position pos:line="4" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="89"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">in<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">.<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">dechunkingState<pos:position pos:line="6" pos:column="30"/></name></name> <operator pos:line="6" pos:column="31">==<pos:position pos:line="6" pos:column="33"/></operator> <name pos:line="6" pos:column="34">chunkReady<pos:position pos:line="6" pos:column="44"/></name></expr></argument>)<pos:position pos:line="6" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="46"/></expr_stmt>

    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">mb_size_t<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">headerSize<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><call><name pos:line="8" pos:column="34">HttpParserRequestLen<pos:position pos:line="8" pos:column="54"/></name><argument_list pos:line="8" pos:column="54">(<argument><expr><name pos:line="8" pos:column="55">hp<pos:position pos:line="8" pos:column="57"/></name></expr></argument>)<pos:position pos:line="8" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="59"/></decl_stmt>

    <comment type="line" pos:line="10" pos:column="5">// dechunking cannot make data bigger</comment>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">assert<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">headerSize<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">+<pos:position pos:line="11" pos:column="24"/></operator> <call><name><name pos:line="11" pos:column="25">in<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">.<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">dechunked<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">.<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">contentSize<pos:position pos:line="11" pos:column="49"/></name></name><argument_list pos:line="11" pos:column="49">()<pos:position pos:line="11" pos:column="51"/></argument_list></call> <operator pos:line="11" pos:column="52">+<pos:position pos:line="11" pos:column="53"/></operator> <call><name><name pos:line="11" pos:column="54">in<pos:position pos:line="11" pos:column="56"/></name><operator pos:line="11" pos:column="56">.<pos:position pos:line="11" pos:column="57"/></operator><name pos:line="11" pos:column="57">chunked<pos:position pos:line="11" pos:column="64"/></name><operator pos:line="11" pos:column="64">.<pos:position pos:line="11" pos:column="65"/></operator><name pos:line="11" pos:column="65">contentSize<pos:position pos:line="11" pos:column="76"/></name></name><argument_list pos:line="11" pos:column="76">()<pos:position pos:line="11" pos:column="78"/></argument_list></call>
           <operator pos:line="12" pos:column="12">&lt;=<pos:position pos:line="12" pos:column="17"/></operator> <cast type="static" pos:line="12" pos:column="15">static_cast<argument_list type="generic" pos:line="12" pos:column="26">&lt;<argument><expr><name pos:line="12" pos:column="27">mb_size_t<pos:position pos:line="12" pos:column="36"/></name></expr></argument>&gt;<pos:position pos:line="12" pos:column="40"/></argument_list><argument_list pos:line="12" pos:column="37">(<argument><expr><name><name pos:line="12" pos:column="38">in<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">.<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="41">notYetUsed<pos:position pos:line="12" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></cast></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">assert<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><name><name pos:line="13" pos:column="12">in<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">.<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">notYetUsed<pos:position pos:line="13" pos:column="25"/></name></name> <operator pos:line="13" pos:column="26">&lt;=<pos:position pos:line="13" pos:column="31"/></operator> <name><name pos:line="13" pos:column="29">in<pos:position pos:line="13" pos:column="31"/></name><operator pos:line="13" pos:column="31">.<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="32">allocatedSize<pos:position pos:line="13" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>

    <comment type="line" pos:line="15" pos:column="5">// copy dechunked content</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name> <modifier pos:line="16" pos:column="10">*<pos:position pos:line="16" pos:column="11"/></modifier></type><name pos:line="16" pos:column="11">end<pos:position pos:line="16" pos:column="14"/></name> <init pos:line="16" pos:column="15">= <expr><name><name pos:line="16" pos:column="17">in<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">.<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="20">buf<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">+<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="26">headerSize<pos:position pos:line="16" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="37"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">xmemmove<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name pos:line="17" pos:column="14">end<pos:position pos:line="17" pos:column="17"/></name></expr></argument>, <argument><expr><call><name><name pos:line="17" pos:column="19">in<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">.<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">dechunked<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">.<pos:position pos:line="17" pos:column="32"/></operator><name pos:line="17" pos:column="32">content<pos:position pos:line="17" pos:column="39"/></name></name><argument_list pos:line="17" pos:column="39">()<pos:position pos:line="17" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="17" pos:column="43">in<pos:position pos:line="17" pos:column="45"/></name><operator pos:line="17" pos:column="45">.<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="46">dechunked<pos:position pos:line="17" pos:column="55"/></name><operator pos:line="17" pos:column="55">.<pos:position pos:line="17" pos:column="56"/></operator><name pos:line="17" pos:column="56">contentSize<pos:position pos:line="17" pos:column="67"/></name></name><argument_list pos:line="17" pos:column="67">()<pos:position pos:line="17" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">end<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">+=<pos:position pos:line="18" pos:column="11"/></operator> <call><name><name pos:line="18" pos:column="12">in<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">.<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="15">dechunked<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">.<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">contentSize<pos:position pos:line="18" pos:column="36"/></name></name><argument_list pos:line="18" pos:column="36">()<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>

    <comment type="line" pos:line="20" pos:column="5">// copy post-chunks leftovers, if any, caused by request pipelining?</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name><name pos:line="21" pos:column="9">in<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">.<pos:position pos:line="21" pos:column="12"/></operator><name pos:line="21" pos:column="12">chunked<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">.<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="20">contentSize<pos:position pos:line="21" pos:column="31"/></name></name><argument_list pos:line="21" pos:column="31">()<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="34"/></condition><then pos:line="21" pos:column="34"> <block pos:line="21" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">xmemmove<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><name pos:line="22" pos:column="18">end<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><call><name><name pos:line="22" pos:column="23">in<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">.<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">chunked<pos:position pos:line="22" pos:column="33"/></name><operator pos:line="22" pos:column="33">.<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="34">content<pos:position pos:line="22" pos:column="41"/></name></name><argument_list pos:line="22" pos:column="41">()<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="22" pos:column="45">in<pos:position pos:line="22" pos:column="47"/></name><operator pos:line="22" pos:column="47">.<pos:position pos:line="22" pos:column="48"/></operator><name pos:line="22" pos:column="48">chunked<pos:position pos:line="22" pos:column="55"/></name><operator pos:line="22" pos:column="55">.<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="56">contentSize<pos:position pos:line="22" pos:column="67"/></name></name><argument_list pos:line="22" pos:column="67">()<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="22" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">end<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">+=<pos:position pos:line="23" pos:column="15"/></operator> <call><name><name pos:line="23" pos:column="16">in<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">.<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">chunked<pos:position pos:line="23" pos:column="26"/></name><operator pos:line="23" pos:column="26">.<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">contentSize<pos:position pos:line="23" pos:column="38"/></name></name><argument_list pos:line="23" pos:column="38">()<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="26" pos:column="5">in<pos:position pos:line="26" pos:column="7"/></name><operator pos:line="26" pos:column="7">.<pos:position pos:line="26" pos:column="8"/></operator><name pos:line="26" pos:column="8">notYetUsed<pos:position pos:line="26" pos:column="18"/></name></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="21">end<pos:position pos:line="26" pos:column="24"/></name> <operator pos:line="26" pos:column="25">-<pos:position pos:line="26" pos:column="26"/></operator> <name><name pos:line="26" pos:column="27">in<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">.<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">buf<pos:position pos:line="26" pos:column="33"/></name></name></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">cleanDechunkingRequest<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">()<pos:position pos:line="28" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
