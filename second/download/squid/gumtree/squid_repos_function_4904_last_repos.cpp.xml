<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4904_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">Parser<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">getHeaderField<pos:position pos:line="2" pos:column="34"/></name></name><parameter_list pos:line="2" pos:column="34">(<parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">name<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><call><name pos:line="4" pos:column="10">headerBlockSize<pos:position pos:line="4" pos:column="25"/></name><argument_list pos:line="4" pos:column="25">()<pos:position pos:line="4" pos:column="27"/></argument_list></call> <operator pos:line="4" pos:column="28">||<pos:position pos:line="4" pos:column="30"/></operator> <operator pos:line="4" pos:column="31">!<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">name<pos:position pos:line="4" pos:column="36"/></name></expr>)<pos:position pos:line="4" pos:column="37"/></condition><then pos:line="4" pos:column="37">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><name pos:line="5" pos:column="16">NULL<pos:position pos:line="5" pos:column="20"/></name></expr>;<pos:position pos:line="5" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">LOCAL_ARRAY<pos:position pos:line="7" pos:column="16"/></name><argument_list pos:line="7" pos:column="16">(<argument><expr><name pos:line="7" pos:column="17">char<pos:position pos:line="7" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="23">header<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="31">GET_HDR_SZ<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="43"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">int<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">namelen<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><call><name pos:line="8" pos:column="25">strlen<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><name pos:line="8" pos:column="32">name<pos:position pos:line="8" pos:column="36"/></name></expr></argument>)<pos:position pos:line="8" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">debugs<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><literal type="number" pos:line="10" pos:column="12">25<pos:position pos:line="10" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="16">5<pos:position pos:line="10" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="19">"looking for "<pos:position pos:line="10" pos:column="33"/></literal> <operator pos:line="10" pos:column="34">&lt;&lt;<pos:position pos:line="10" pos:column="42"/></operator> <name pos:line="10" pos:column="37">name<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt>

    <comment type="line" pos:line="12" pos:column="5">// while we can find more LF in the SBuf</comment>
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">Http1<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">::<pos:position pos:line="13" pos:column="12"/></operator><name pos:line="13" pos:column="12">Tokenizer<pos:position pos:line="13" pos:column="21"/></name></name></type> <name pos:line="13" pos:column="22">tok<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">mimeHeaderBlock_<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></decl>;<pos:position pos:line="13" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">SBuf<pos:position pos:line="14" pos:column="9"/></name></type> <name pos:line="14" pos:column="10">p<pos:position pos:line="14" pos:column="11"/></name></decl>;<pos:position pos:line="14" pos:column="12"/></decl_stmt>

    <while pos:line="16" pos:column="5">while <condition pos:line="16" pos:column="11">(<expr><call><name><name pos:line="16" pos:column="12">tok<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">.<pos:position pos:line="16" pos:column="16"/></operator><name pos:line="16" pos:column="16">prefix<pos:position pos:line="16" pos:column="22"/></name></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">p<pos:position pos:line="16" pos:column="24"/></name></expr></argument>, <argument><expr><call><name pos:line="16" pos:column="26">LineCharacters<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">()<pos:position pos:line="16" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="44"/></condition> <block pos:line="16" pos:column="45">{
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><call><name><name pos:line="17" pos:column="14">tok<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">.<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="18">skipOne<pos:position pos:line="17" pos:column="25"/></name></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name><name pos:line="17" pos:column="26">CharacterSet<pos:position pos:line="17" pos:column="38"/></name><operator pos:line="17" pos:column="38">::<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">LF<pos:position pos:line="17" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="44"/></condition><then pos:line="17" pos:column="44"> <comment type="line" pos:line="17" pos:column="45">// move tokenizer past the LF</comment>
            <block type="pseudo"><break pos:line="18" pos:column="13">break;<pos:position pos:line="18" pos:column="19"/></break></block></then></if> <comment type="line" pos:line="18" pos:column="20">// error. reached invalid octet or end of buffer insted of an LF ??</comment>

        <comment type="line" pos:line="20" pos:column="9">// header lines must start with the name (case insensitive)</comment>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><call><name><name pos:line="21" pos:column="13">p<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">.<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">substr<pos:position pos:line="21" pos:column="21"/></name></name><argument_list pos:line="21" pos:column="21">(<argument><expr><literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="25">namelen<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call><operator pos:line="21" pos:column="33">.<pos:position pos:line="21" pos:column="34"/></operator><call><name pos:line="21" pos:column="34">caseCmp<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><name pos:line="21" pos:column="42">name<pos:position pos:line="21" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="48">namelen<pos:position pos:line="21" pos:column="55"/></name></expr></argument>)<pos:position pos:line="21" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="57"/></condition><then pos:line="21" pos:column="57">
            <block type="pseudo"><continue pos:line="22" pos:column="13">continue;<pos:position pos:line="22" pos:column="22"/></continue></block></then></if>

        <comment type="line" pos:line="24" pos:column="9">// then a COLON</comment>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name><name pos:line="25" pos:column="13">p<pos:position pos:line="25" pos:column="14"/></name><index pos:line="25" pos:column="14">[<expr><name pos:line="25" pos:column="15">namelen<pos:position pos:line="25" pos:column="22"/></name></expr>]<pos:position pos:line="25" pos:column="23"/></index></name> <operator pos:line="25" pos:column="24">!=<pos:position pos:line="25" pos:column="26"/></operator> <literal type="char" pos:line="25" pos:column="27">':'<pos:position pos:line="25" pos:column="30"/></literal></expr>)<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31">
            <block type="pseudo"><continue pos:line="26" pos:column="13">continue;<pos:position pos:line="26" pos:column="22"/></continue></block></then></if>

        <comment type="line" pos:line="28" pos:column="9">// drop any trailing *CR sequence</comment>
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">p<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">.<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">trim<pos:position pos:line="29" pos:column="15"/></name></name><argument_list pos:line="29" pos:column="15">(<argument><expr><call><name><name pos:line="29" pos:column="16">Http1<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">::<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="23">CrLf<pos:position pos:line="29" pos:column="27"/></name></name><argument_list pos:line="29" pos:column="27">()<pos:position pos:line="29" pos:column="29"/></argument_list></call></expr></argument>, <argument><expr><literal type="boolean" pos:line="29" pos:column="31">false<pos:position pos:line="29" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="29" pos:column="38">true<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="31" pos:column="9">debugs<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><literal type="number" pos:line="31" pos:column="16">25<pos:position pos:line="31" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="20">5<pos:position pos:line="31" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="23">"checking "<pos:position pos:line="31" pos:column="34"/></literal> <operator pos:line="31" pos:column="35">&lt;&lt;<pos:position pos:line="31" pos:column="43"/></operator> <name pos:line="31" pos:column="38">p<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="32" pos:column="9">p<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">.<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">consume<pos:position pos:line="32" pos:column="18"/></name></name><argument_list pos:line="32" pos:column="18">(<argument><expr><name pos:line="32" pos:column="19">namelen<pos:position pos:line="32" pos:column="26"/></name> <operator pos:line="32" pos:column="27">+<pos:position pos:line="32" pos:column="28"/></operator> <literal type="number" pos:line="32" pos:column="29">1<pos:position pos:line="32" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt>

        <comment type="line" pos:line="34" pos:column="9">// TODO: optimize SBuf::trim to take CharacterSet directly</comment>
        <decl_stmt><decl><type><name><name pos:line="35" pos:column="9">Http1<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">::<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">Tokenizer<pos:position pos:line="35" pos:column="25"/></name></name></type> <name pos:line="35" pos:column="26">t<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">p<pos:position pos:line="35" pos:column="29"/></name></expr></argument>)<pos:position pos:line="35" pos:column="30"/></argument_list></decl>;<pos:position pos:line="35" pos:column="31"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="36" pos:column="9">t<pos:position pos:line="36" pos:column="10"/></name><operator pos:line="36" pos:column="10">.<pos:position pos:line="36" pos:column="11"/></operator><name pos:line="36" pos:column="11">skipAll<pos:position pos:line="36" pos:column="18"/></name></name><argument_list pos:line="36" pos:column="18">(<argument><expr><name><name pos:line="36" pos:column="19">CharacterSet<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">::<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="33">WSP<pos:position pos:line="36" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="37" pos:column="9">p<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">=<pos:position pos:line="37" pos:column="12"/></operator> <call><name><name pos:line="37" pos:column="13">t<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">.<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">remaining<pos:position pos:line="37" pos:column="24"/></name></name><argument_list pos:line="37" pos:column="24">()<pos:position pos:line="37" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="27"/></expr_stmt>

        <comment type="line" pos:line="39" pos:column="9">// prevent buffer overrun on char header[];</comment>
        <expr_stmt><expr><call><name><name pos:line="40" pos:column="9">p<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">.<pos:position pos:line="40" pos:column="11"/></operator><name pos:line="40" pos:column="11">chop<pos:position pos:line="40" pos:column="15"/></name></name><argument_list pos:line="40" pos:column="15">(<argument><expr><literal type="number" pos:line="40" pos:column="16">0<pos:position pos:line="40" pos:column="17"/></literal></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="19">sizeof<argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">header<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></sizeof><operator pos:line="40" pos:column="33">-<pos:position pos:line="40" pos:column="34"/></operator><literal type="number" pos:line="40" pos:column="34">1<pos:position pos:line="40" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="37"/></expr_stmt>

        <comment type="line" pos:line="42" pos:column="9">// return the header field-value</comment>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">SBufToCstring<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">header<pos:position pos:line="43" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="31">p<pos:position pos:line="43" pos:column="32"/></name></expr></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">debugs<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="number" pos:line="44" pos:column="16">25<pos:position pos:line="44" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="20">5<pos:position pos:line="44" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="23">"returning "<pos:position pos:line="44" pos:column="35"/></literal> <operator pos:line="44" pos:column="36">&lt;&lt;<pos:position pos:line="44" pos:column="44"/></operator> <name pos:line="44" pos:column="39">header<pos:position pos:line="44" pos:column="45"/></name></expr></argument>)<pos:position pos:line="44" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="47"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">header<pos:position pos:line="45" pos:column="22"/></name></expr>;<pos:position pos:line="45" pos:column="23"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></while>

    <return pos:line="48" pos:column="5">return <expr><name pos:line="48" pos:column="12">NULL<pos:position pos:line="48" pos:column="16"/></name></expr>;<pos:position pos:line="48" pos:column="17"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
