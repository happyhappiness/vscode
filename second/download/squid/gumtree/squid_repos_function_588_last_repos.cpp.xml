<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_588_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">_comm_close<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">int<pos:position pos:line="2" pos:column="16"/></name></type> <name pos:line="2" pos:column="17">fd<pos:position pos:line="2" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">file<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">int<pos:position pos:line="2" pos:column="42"/></name></type> <name pos:line="2" pos:column="43">line<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">5<pos:position pos:line="4" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="15">3<pos:position pos:line="4" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="18">"comm_close: start closing FD "<pos:position pos:line="4" pos:column="49"/></literal> <operator pos:line="4" pos:column="50">&lt;&lt;<pos:position pos:line="4" pos:column="58"/></operator> <name pos:line="4" pos:column="53">fd<pos:position pos:line="4" pos:column="55"/></name></expr></argument>)<pos:position pos:line="4" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">fd<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">&gt;=<pos:position pos:line="5" pos:column="20"/></operator> <literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">fd<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">&lt;<pos:position pos:line="6" pos:column="19"/></operator> <name pos:line="6" pos:column="17">Squid_MaxFD<pos:position pos:line="6" pos:column="28"/></name></expr></argument>)<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="30"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">fde<pos:position pos:line="8" pos:column="8"/></name> <modifier pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></modifier></type><name pos:line="8" pos:column="10">F<pos:position pos:line="8" pos:column="11"/></name> <init pos:line="8" pos:column="12">= <expr><operator pos:line="8" pos:column="14">&amp;<pos:position pos:line="8" pos:column="19"/></operator><name><name pos:line="8" pos:column="15">fd_table<pos:position pos:line="8" pos:column="23"/></name><index pos:line="8" pos:column="23">[<expr><name pos:line="8" pos:column="24">fd<pos:position pos:line="8" pos:column="26"/></name></expr>]<pos:position pos:line="8" pos:column="27"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">fdd_table<pos:position pos:line="9" pos:column="14"/></name><index pos:line="9" pos:column="14">[<expr><name pos:line="9" pos:column="15">fd<pos:position pos:line="9" pos:column="17"/></name></expr>]<pos:position pos:line="9" pos:column="18"/></index></name><operator pos:line="9" pos:column="18">.<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">close_file<pos:position pos:line="9" pos:column="29"/></name> <operator pos:line="9" pos:column="30">=<pos:position pos:line="9" pos:column="31"/></operator> <name pos:line="9" pos:column="32">file<pos:position pos:line="9" pos:column="36"/></name></expr>;<pos:position pos:line="9" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">fdd_table<pos:position pos:line="10" pos:column="14"/></name><index pos:line="10" pos:column="14">[<expr><name pos:line="10" pos:column="15">fd<pos:position pos:line="10" pos:column="17"/></name></expr>]<pos:position pos:line="10" pos:column="18"/></index></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">close_line<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">=<pos:position pos:line="10" pos:column="31"/></operator> <name pos:line="10" pos:column="32">line<pos:position pos:line="10" pos:column="36"/></name></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name><name pos:line="12" pos:column="9">F<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">closing<pos:position pos:line="12" pos:column="19"/></name></name><argument_list pos:line="12" pos:column="19">()<pos:position pos:line="12" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22">
        <block type="pseudo"><return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* XXX: is this obsolete behind F-&gt;closing() ? */</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">( <expr><operator pos:line="16" pos:column="10">(<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">shutting_down<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">||<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">reconfiguring<pos:position pos:line="16" pos:column="41"/></name><operator pos:line="16" pos:column="41">)<pos:position pos:line="16" pos:column="42"/></operator> <operator pos:line="16" pos:column="43">&amp;&amp;<pos:position pos:line="16" pos:column="53"/></operator> <operator pos:line="16" pos:column="46">(<pos:position pos:line="16" pos:column="47"/></operator><operator pos:line="16" pos:column="47">!<pos:position pos:line="16" pos:column="48"/></operator><name><name pos:line="16" pos:column="48">F<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">flags<pos:position pos:line="16" pos:column="56"/></name><operator pos:line="16" pos:column="56">.<pos:position pos:line="16" pos:column="57"/></operator><name pos:line="16" pos:column="57">open<pos:position pos:line="16" pos:column="61"/></name></name> <operator pos:line="16" pos:column="62">||<pos:position pos:line="16" pos:column="64"/></operator> <name><name pos:line="16" pos:column="65">F<pos:position pos:line="16" pos:column="66"/></name><operator pos:line="16" pos:column="66">-&gt;<pos:position pos:line="16" pos:column="71"/></operator><name pos:line="16" pos:column="68">type<pos:position pos:line="16" pos:column="72"/></name></name> <operator pos:line="16" pos:column="73">==<pos:position pos:line="16" pos:column="75"/></operator> <name pos:line="16" pos:column="76">FD_FILE<pos:position pos:line="16" pos:column="83"/></name><operator pos:line="16" pos:column="83">)<pos:position pos:line="16" pos:column="84"/></operator></expr>)<pos:position pos:line="16" pos:column="85"/></condition><then pos:line="16" pos:column="85">
        <block type="pseudo"><return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/* The following fails because ipc.c is doing calls to pipe() to create sockets! */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><call><name pos:line="20" pos:column="10">isOpen<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><name pos:line="20" pos:column="17">fd<pos:position pos:line="20" pos:column="19"/></name></expr></argument>)<pos:position pos:line="20" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21"> <block pos:line="20" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">50<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="20">DBG_IMPORTANT<pos:position pos:line="21" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="35">HERE<pos:position pos:line="21" pos:column="39"/></name> <operator pos:line="21" pos:column="40">&lt;&lt;<pos:position pos:line="21" pos:column="48"/></operator> <literal type="string" pos:line="21" pos:column="43">"BUG 3556: FD "<pos:position pos:line="21" pos:column="58"/></literal> <operator pos:line="21" pos:column="59">&lt;&lt;<pos:position pos:line="21" pos:column="67"/></operator> <name pos:line="21" pos:column="62">fd<pos:position pos:line="21" pos:column="64"/></name> <operator pos:line="21" pos:column="65">&lt;&lt;<pos:position pos:line="21" pos:column="73"/></operator> <literal type="string" pos:line="21" pos:column="68">" is not an open socket."<pos:position pos:line="21" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="95"/></expr_stmt>
        <comment type="line" pos:line="22" pos:column="9">// XXX: do we need to run close(fd) or fd_close(fd) here?</comment>
        <return pos:line="23" pos:column="9">return;<pos:position pos:line="23" pos:column="16"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">assert<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><name><name pos:line="26" pos:column="12">F<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">-&gt;<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="15">type<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">!=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">FD_FILE<pos:position pos:line="26" pos:column="30"/></name></expr></argument>)<pos:position pos:line="26" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">PROF_start<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name pos:line="28" pos:column="16">comm_close<pos:position pos:line="28" pos:column="26"/></name></expr></argument>)<pos:position pos:line="28" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="30" pos:column="5">F<pos:position pos:line="30" pos:column="6"/></name><operator pos:line="30" pos:column="6">-&gt;<pos:position pos:line="30" pos:column="11"/></operator><name pos:line="30" pos:column="8">flags<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">.<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">close_request<pos:position pos:line="30" pos:column="27"/></name></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <literal type="boolean" pos:line="30" pos:column="30">true<pos:position pos:line="30" pos:column="34"/></literal></expr>;<pos:position pos:line="30" pos:column="35"/></expr_stmt>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name><name pos:line="32" pos:column="9">F<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">-&gt;<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="12">ssl<pos:position pos:line="32" pos:column="15"/></name></name></expr>)<pos:position pos:line="32" pos:column="16"/></condition><then pos:line="32" pos:column="16"> <block pos:line="32" pos:column="17">{
        <decl_stmt><decl><type><name><name pos:line="33" pos:column="9">AsyncCall<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">::<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="20">Pointer<pos:position pos:line="33" pos:column="27"/></name></name></type> <name pos:line="33" pos:column="28">startCall<pos:position pos:line="33" pos:column="37"/></name><init pos:line="33" pos:column="37">=<expr><call><name pos:line="33" pos:column="38">commCbCall<pos:position pos:line="33" pos:column="48"/></name><argument_list pos:line="33" pos:column="48">(<argument><expr><literal type="number" pos:line="33" pos:column="49">5<pos:position pos:line="33" pos:column="50"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="33" pos:column="51">4<pos:position pos:line="33" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="54">"commStartTlsClose"<pos:position pos:line="33" pos:column="73"/></literal></expr></argument>,
                                                <argument><expr><call><name pos:line="34" pos:column="49">FdeCbPtrFun<pos:position pos:line="34" pos:column="60"/></name><argument_list pos:line="34" pos:column="60">(<argument><expr><name pos:line="34" pos:column="61">commStartTlsClose<pos:position pos:line="34" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="null" pos:line="34" pos:column="80">nullptr<pos:position pos:line="34" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="90"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="35" pos:column="9">FdeCbParams<pos:position pos:line="35" pos:column="20"/></name> <modifier pos:line="35" pos:column="21">&amp;<pos:position pos:line="35" pos:column="26"/></modifier></type><name pos:line="35" pos:column="22">startParams<pos:position pos:line="35" pos:column="33"/></name> <init pos:line="35" pos:column="34">= <expr><call><name><name pos:line="35" pos:column="36">GetCommParams<pos:position pos:line="35" pos:column="49"/></name><argument_list type="generic" pos:line="35" pos:column="49">&lt;<argument><expr><name pos:line="35" pos:column="50">FdeCbParams<pos:position pos:line="35" pos:column="61"/></name></expr></argument>&gt;<pos:position pos:line="35" pos:column="65"/></argument_list></name><argument_list pos:line="35" pos:column="62">(<argument><expr><name pos:line="35" pos:column="63">startCall<pos:position pos:line="35" pos:column="72"/></name></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="74"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">startParams<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">.<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">fd<pos:position pos:line="36" pos:column="23"/></name></name> <operator pos:line="36" pos:column="24">=<pos:position pos:line="36" pos:column="25"/></operator> <name pos:line="36" pos:column="26">fd<pos:position pos:line="36" pos:column="28"/></name></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">ScheduleCallHere<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">startCall<pos:position pos:line="37" pos:column="35"/></name></expr></argument>)<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="40" pos:column="5">// a half-closed fd may lack a reader, so we stop monitoring explicitly</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name pos:line="41" pos:column="9">commHasHalfClosedMonitor<pos:position pos:line="41" pos:column="33"/></name><argument_list pos:line="41" pos:column="33">(<argument><expr><name pos:line="41" pos:column="34">fd<pos:position pos:line="41" pos:column="36"/></name></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="38"/></condition><then pos:line="41" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="9">commStopHalfClosedMonitor<pos:position pos:line="42" pos:column="34"/></name><argument_list pos:line="42" pos:column="34">(<argument><expr><name pos:line="42" pos:column="35">fd<pos:position pos:line="42" pos:column="37"/></name></expr></argument>)<pos:position pos:line="42" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">commUnsetFdTimeout<pos:position pos:line="43" pos:column="23"/></name><argument_list pos:line="43" pos:column="23">(<argument><expr><name pos:line="43" pos:column="24">fd<pos:position pos:line="43" pos:column="26"/></name></expr></argument>)<pos:position pos:line="43" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="28"/></expr_stmt>

    <comment type="line" pos:line="45" pos:column="5">// notify read/write handlers after canceling select reservations, if any</comment>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><call><name pos:line="46" pos:column="9">COMMIO_FD_WRITECB<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">fd<pos:position pos:line="46" pos:column="29"/></name></expr></argument>)<pos:position pos:line="46" pos:column="30"/></argument_list></call><operator pos:line="46" pos:column="30">-&gt;<pos:position pos:line="46" pos:column="35"/></operator><call><name pos:line="46" pos:column="32">active<pos:position pos:line="46" pos:column="38"/></name><argument_list pos:line="46" pos:column="38">()<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="41"/></condition><then pos:line="46" pos:column="41"> <block pos:line="46" pos:column="42">{
        <expr_stmt><expr><call><name><name pos:line="47" pos:column="9">Comm<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">::<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">SetSelect<pos:position pos:line="47" pos:column="24"/></name></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">fd<pos:position pos:line="47" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="29">COMM_SELECT_WRITE<pos:position pos:line="47" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="48">NULL<pos:position pos:line="47" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="54">NULL<pos:position pos:line="47" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="60">0<pos:position pos:line="47" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">COMMIO_FD_WRITECB<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><name pos:line="48" pos:column="27">fd<pos:position pos:line="48" pos:column="29"/></name></expr></argument>)<pos:position pos:line="48" pos:column="30"/></argument_list></call><operator pos:line="48" pos:column="30">-&gt;<pos:position pos:line="48" pos:column="35"/></operator><call><name pos:line="48" pos:column="32">finish<pos:position pos:line="48" pos:column="38"/></name><argument_list pos:line="48" pos:column="38">(<argument><expr><name><name pos:line="48" pos:column="39">Comm<pos:position pos:line="48" pos:column="43"/></name><operator pos:line="48" pos:column="43">::<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="45">ERR_CLOSING<pos:position pos:line="48" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="58">errno<pos:position pos:line="48" pos:column="63"/></name></expr></argument>)<pos:position pos:line="48" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><call><name pos:line="50" pos:column="9">COMMIO_FD_READCB<pos:position pos:line="50" pos:column="25"/></name><argument_list pos:line="50" pos:column="25">(<argument><expr><name pos:line="50" pos:column="26">fd<pos:position pos:line="50" pos:column="28"/></name></expr></argument>)<pos:position pos:line="50" pos:column="29"/></argument_list></call><operator pos:line="50" pos:column="29">-&gt;<pos:position pos:line="50" pos:column="34"/></operator><call><name pos:line="50" pos:column="31">active<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">()<pos:position pos:line="50" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="40"/></condition><then pos:line="50" pos:column="40"> <block pos:line="50" pos:column="41">{
        <expr_stmt><expr><call><name><name pos:line="51" pos:column="9">Comm<pos:position pos:line="51" pos:column="13"/></name><operator pos:line="51" pos:column="13">::<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="15">SetSelect<pos:position pos:line="51" pos:column="24"/></name></name><argument_list pos:line="51" pos:column="24">(<argument><expr><name pos:line="51" pos:column="25">fd<pos:position pos:line="51" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="29">COMM_SELECT_READ<pos:position pos:line="51" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="47">NULL<pos:position pos:line="51" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="53">NULL<pos:position pos:line="51" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="59">0<pos:position pos:line="51" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">COMMIO_FD_READCB<pos:position pos:line="52" pos:column="25"/></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">fd<pos:position pos:line="52" pos:column="28"/></name></expr></argument>)<pos:position pos:line="52" pos:column="29"/></argument_list></call><operator pos:line="52" pos:column="29">-&gt;<pos:position pos:line="52" pos:column="34"/></operator><call><name pos:line="52" pos:column="31">finish<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name><name pos:line="52" pos:column="38">Comm<pos:position pos:line="52" pos:column="42"/></name><operator pos:line="52" pos:column="42">::<pos:position pos:line="52" pos:column="44"/></operator><name pos:line="52" pos:column="44">ERR_CLOSING<pos:position pos:line="52" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="57">errno<pos:position pos:line="52" pos:column="62"/></name></expr></argument>)<pos:position pos:line="52" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

<cpp:if pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">if<pos:position pos:line="55" pos:column="4"/></cpp:directive> <expr><name pos:line="55" pos:column="5">USE_DELAY_POOLS<pos:position pos:line="55" pos:column="20"/></name></expr></cpp:if>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<decl><type><name pos:line="56" pos:column="9">ClientInfo<pos:position pos:line="56" pos:column="19"/></name> <modifier pos:line="56" pos:column="20">*<pos:position pos:line="56" pos:column="21"/></modifier></type><name pos:line="56" pos:column="21">clientInfo<pos:position pos:line="56" pos:column="31"/></name> <init pos:line="56" pos:column="32">= <expr><name><name pos:line="56" pos:column="34">F<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">-&gt;<pos:position pos:line="56" pos:column="40"/></operator><name pos:line="56" pos:column="37">clientInfo<pos:position pos:line="56" pos:column="47"/></name></name></expr></init></decl>)<pos:position pos:line="56" pos:column="48"/></condition><then pos:line="56" pos:column="48"> <block pos:line="56" pos:column="49">{
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name><name pos:line="57" pos:column="13">clientInfo<pos:position pos:line="57" pos:column="23"/></name><operator pos:line="57" pos:column="23">-&gt;<pos:position pos:line="57" pos:column="28"/></operator><name pos:line="57" pos:column="25">selectWaiting<pos:position pos:line="57" pos:column="38"/></name></name></expr>)<pos:position pos:line="57" pos:column="39"/></condition><then pos:line="57" pos:column="39"> <block pos:line="57" pos:column="40">{
            <expr_stmt><expr><name><name pos:line="58" pos:column="13">clientInfo<pos:position pos:line="58" pos:column="23"/></name><operator pos:line="58" pos:column="23">-&gt;<pos:position pos:line="58" pos:column="28"/></operator><name pos:line="58" pos:column="25">selectWaiting<pos:position pos:line="58" pos:column="38"/></name></name> <operator pos:line="58" pos:column="39">=<pos:position pos:line="58" pos:column="40"/></operator> <literal type="boolean" pos:line="58" pos:column="41">false<pos:position pos:line="58" pos:column="46"/></literal></expr>;<pos:position pos:line="58" pos:column="47"/></expr_stmt>
            <comment type="line" pos:line="59" pos:column="13">// kick queue or it will get stuck as commWriteHandle is not called</comment>
            <expr_stmt><expr><call><name><name pos:line="60" pos:column="13">clientInfo<pos:position pos:line="60" pos:column="23"/></name><operator pos:line="60" pos:column="23">-&gt;<pos:position pos:line="60" pos:column="28"/></operator><name pos:line="60" pos:column="25">kickQuotaQueue<pos:position pos:line="60" pos:column="39"/></name></name><argument_list pos:line="60" pos:column="39">()<pos:position pos:line="60" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">commCallCloseHandlers<pos:position pos:line="65" pos:column="26"/></name><argument_list pos:line="65" pos:column="26">(<argument><expr><name pos:line="65" pos:column="27">fd<pos:position pos:line="65" pos:column="29"/></name></expr></argument>)<pos:position pos:line="65" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="67" pos:column="5">comm_empty_os_read_buffers<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">(<argument><expr><name pos:line="67" pos:column="32">fd<pos:position pos:line="67" pos:column="34"/></name></expr></argument>)<pos:position pos:line="67" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="36"/></expr_stmt>

    <decl_stmt><decl><type><name><name pos:line="69" pos:column="5">AsyncCall<pos:position pos:line="69" pos:column="14"/></name><operator pos:line="69" pos:column="14">::<pos:position pos:line="69" pos:column="16"/></operator><name pos:line="69" pos:column="16">Pointer<pos:position pos:line="69" pos:column="23"/></name></name></type> <name pos:line="69" pos:column="24">completeCall<pos:position pos:line="69" pos:column="36"/></name><init pos:line="69" pos:column="36">=<expr><call><name pos:line="69" pos:column="37">commCbCall<pos:position pos:line="69" pos:column="47"/></name><argument_list pos:line="69" pos:column="47">(<argument><expr><literal type="number" pos:line="69" pos:column="48">5<pos:position pos:line="69" pos:column="49"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="69" pos:column="50">4<pos:position pos:line="69" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="53">"comm_close_complete"<pos:position pos:line="69" pos:column="74"/></literal></expr></argument>,
                                    <argument><expr><call><name pos:line="70" pos:column="37">FdeCbPtrFun<pos:position pos:line="70" pos:column="48"/></name><argument_list pos:line="70" pos:column="48">(<argument><expr><name pos:line="70" pos:column="49">comm_close_complete<pos:position pos:line="70" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="70">NULL<pos:position pos:line="70" pos:column="74"/></name></expr></argument>)<pos:position pos:line="70" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="70" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="70" pos:column="77"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="71" pos:column="5">FdeCbParams<pos:position pos:line="71" pos:column="16"/></name> <modifier pos:line="71" pos:column="17">&amp;<pos:position pos:line="71" pos:column="22"/></modifier></type><name pos:line="71" pos:column="18">completeParams<pos:position pos:line="71" pos:column="32"/></name> <init pos:line="71" pos:column="33">= <expr><call><name><name pos:line="71" pos:column="35">GetCommParams<pos:position pos:line="71" pos:column="48"/></name><argument_list type="generic" pos:line="71" pos:column="48">&lt;<argument><expr><name pos:line="71" pos:column="49">FdeCbParams<pos:position pos:line="71" pos:column="60"/></name></expr></argument>&gt;<pos:position pos:line="71" pos:column="64"/></argument_list></name><argument_list pos:line="71" pos:column="61">(<argument><expr><name pos:line="71" pos:column="62">completeCall<pos:position pos:line="71" pos:column="74"/></name></expr></argument>)<pos:position pos:line="71" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="71" pos:column="76"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="72" pos:column="5">completeParams<pos:position pos:line="72" pos:column="19"/></name><operator pos:line="72" pos:column="19">.<pos:position pos:line="72" pos:column="20"/></operator><name pos:line="72" pos:column="20">fd<pos:position pos:line="72" pos:column="22"/></name></name> <operator pos:line="72" pos:column="23">=<pos:position pos:line="72" pos:column="24"/></operator> <name pos:line="72" pos:column="25">fd<pos:position pos:line="72" pos:column="27"/></name></expr>;<pos:position pos:line="72" pos:column="28"/></expr_stmt>
    <comment type="line" pos:line="73" pos:column="5">// must use async call to wait for all callbacks</comment>
    <comment type="line" pos:line="74" pos:column="5">// scheduled before comm_close() to finish</comment>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">ScheduleCallHere<pos:position pos:line="75" pos:column="21"/></name><argument_list pos:line="75" pos:column="21">(<argument><expr><name pos:line="75" pos:column="22">completeCall<pos:position pos:line="75" pos:column="34"/></name></expr></argument>)<pos:position pos:line="75" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="77" pos:column="5">PROF_stop<pos:position pos:line="77" pos:column="14"/></name><argument_list pos:line="77" pos:column="14">(<argument><expr><name pos:line="77" pos:column="15">comm_close<pos:position pos:line="77" pos:column="25"/></name></expr></argument>)<pos:position pos:line="77" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="27"/></expr_stmt>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
