<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4796_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Parser<pos:position pos:line="2" pos:column="7"/></name><operator pos:line="2" pos:column="7">::<pos:position pos:line="2" pos:column="9"/></operator><name pos:line="2" pos:column="9">BinaryTokenizer<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">want<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">uint64_t<pos:position pos:line="2" pos:column="39"/></name></type> <name pos:line="2" pos:column="40">size<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">description<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list> <specifier pos:line="2" pos:column="71">const<pos:position pos:line="2" pos:column="76"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">parsed_<pos:position pos:line="4" pos:column="16"/></name> <operator pos:line="4" pos:column="17">+<pos:position pos:line="4" pos:column="18"/></operator> <name pos:line="4" pos:column="19">size<pos:position pos:line="4" pos:column="23"/></name> <operator pos:line="4" pos:column="24">&gt;<pos:position pos:line="4" pos:column="28"/></operator> <call><name><name pos:line="4" pos:column="26">data_<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">.<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">length<pos:position pos:line="4" pos:column="38"/></name></name><argument_list pos:line="4" pos:column="38">()<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="41"/></condition><then pos:line="4" pos:column="41"> <block pos:line="4" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">debugs<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><literal type="number" pos:line="5" pos:column="16">24<pos:position pos:line="5" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="20">5<pos:position pos:line="5" pos:column="21"/></literal></expr></argument>, <argument><expr><operator pos:line="5" pos:column="23">(<pos:position pos:line="5" pos:column="24"/></operator><name pos:line="5" pos:column="24">parsed_<pos:position pos:line="5" pos:column="31"/></name> <operator pos:line="5" pos:column="32">+<pos:position pos:line="5" pos:column="33"/></operator> <name pos:line="5" pos:column="34">size<pos:position pos:line="5" pos:column="38"/></name> <operator pos:line="5" pos:column="39">-<pos:position pos:line="5" pos:column="40"/></operator> <call><name><name pos:line="5" pos:column="41">data_<pos:position pos:line="5" pos:column="46"/></name><operator pos:line="5" pos:column="46">.<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="47">length<pos:position pos:line="5" pos:column="53"/></name></name><argument_list pos:line="5" pos:column="53">()<pos:position pos:line="5" pos:column="55"/></argument_list></call><operator pos:line="5" pos:column="55">)<pos:position pos:line="5" pos:column="56"/></operator> <operator pos:line="5" pos:column="57">&lt;&lt;<pos:position pos:line="5" pos:column="65"/></operator> <literal type="string" pos:line="5" pos:column="60">" more bytes for "<pos:position pos:line="5" pos:column="78"/></literal> <operator pos:line="5" pos:column="79">&lt;&lt;<pos:position pos:line="5" pos:column="87"/></operator>
               <name pos:line="6" pos:column="16">context<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">&lt;&lt;<pos:position pos:line="6" pos:column="32"/></operator> <name pos:line="6" pos:column="27">description<pos:position pos:line="6" pos:column="38"/></name> <operator pos:line="6" pos:column="39">&lt;&lt;<pos:position pos:line="6" pos:column="47"/></operator> <call><name pos:line="6" pos:column="42">BinaryTokenizer_tail<pos:position pos:line="6" pos:column="62"/></name><argument_list pos:line="6" pos:column="62">(<argument><expr><name pos:line="6" pos:column="63">size<pos:position pos:line="6" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="69">parsed_<pos:position pos:line="6" pos:column="76"/></name></expr></argument>)<pos:position pos:line="6" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="79"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">Must<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">expectMore_<pos:position pos:line="7" pos:column="25"/></name></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="27"/></expr_stmt> <comment type="line" pos:line="7" pos:column="28">// throw an error on premature input termination</comment>
        <throw pos:line="8" pos:column="9">throw <expr><call><name pos:line="8" pos:column="15">InsufficientInput<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">()<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></throw>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
