<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7396_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Security<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">PeerConnector<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">handleNegotiateError<pos:position pos:line="2" pos:column="46"/></name></name><parameter_list pos:line="2" pos:column="46">(<parameter><decl><type><specifier pos:line="2" pos:column="47">const<pos:position pos:line="2" pos:column="52"/></specifier> <name pos:line="2" pos:column="53">int<pos:position pos:line="2" pos:column="56"/></name></type> <name pos:line="2" pos:column="57">ret<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="61"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">int<pos:position pos:line="4" pos:column="14"/></name></type> <name pos:line="4" pos:column="15">fd<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">serverConnection<pos:position pos:line="4" pos:column="36"/></name><argument_list pos:line="4" pos:column="36">()<pos:position pos:line="4" pos:column="38"/></argument_list></call><operator pos:line="4" pos:column="38">-&gt;<pos:position pos:line="4" pos:column="43"/></operator><name pos:line="4" pos:column="40">fd<pos:position pos:line="4" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name><name pos:line="5" pos:column="11">Security<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">::<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="21">SessionPointer<pos:position pos:line="5" pos:column="35"/></name></name></type> <name pos:line="5" pos:column="36">session<pos:position pos:line="5" pos:column="43"/></name><argument_list pos:line="5" pos:column="43">(<argument><expr><name><name pos:line="5" pos:column="44">fd_table<pos:position pos:line="5" pos:column="52"/></name><index pos:line="5" pos:column="52">[<expr><name pos:line="5" pos:column="53">fd<pos:position pos:line="5" pos:column="55"/></name></expr>]<pos:position pos:line="5" pos:column="56"/></index></name><operator pos:line="5" pos:column="56">.<pos:position pos:line="5" pos:column="57"/></operator><name pos:line="5" pos:column="57">ssl<pos:position pos:line="5" pos:column="60"/></name></expr></argument>)<pos:position pos:line="5" pos:column="61"/></argument_list></decl>;<pos:position pos:line="5" pos:column="62"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">long<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">ssl_lib_error<pos:position pos:line="6" pos:column="32"/></name> <init pos:line="6" pos:column="33">= <expr><name pos:line="6" pos:column="35">ret<pos:position pos:line="6" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>

<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">USE_OPENSSL<pos:position pos:line="8" pos:column="16"/></name></expr></cpp:if>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">int<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">ssl_error<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><call><name pos:line="9" pos:column="27">SSL_get_error<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><call><name><name pos:line="9" pos:column="41">session<pos:position pos:line="9" pos:column="48"/></name><operator pos:line="9" pos:column="48">.<pos:position pos:line="9" pos:column="49"/></operator><name pos:line="9" pos:column="49">get<pos:position pos:line="9" pos:column="52"/></name></name><argument_list pos:line="9" pos:column="52">()<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="9" pos:column="56">ret<pos:position pos:line="9" pos:column="59"/></name></expr></argument>)<pos:position pos:line="9" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="61"/></decl_stmt>

    <switch pos:line="11" pos:column="5">switch <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">ssl_error<pos:position pos:line="11" pos:column="22"/></name></expr>)<pos:position pos:line="11" pos:column="23"/></condition> <block pos:line="11" pos:column="24">{
    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">SSL_ERROR_WANT_READ<pos:position pos:line="12" pos:column="29"/></name></expr>:<pos:position pos:line="12" pos:column="30"/></case>
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">noteWantRead<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">()<pos:position pos:line="13" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>
        <return pos:line="14" pos:column="9">return;<pos:position pos:line="14" pos:column="16"/></return>

    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">SSL_ERROR_WANT_WRITE<pos:position pos:line="16" pos:column="30"/></name></expr>:<pos:position pos:line="16" pos:column="31"/></case>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">noteWantWrite<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">()<pos:position pos:line="17" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
        <return pos:line="18" pos:column="9">return;<pos:position pos:line="18" pos:column="16"/></return>

    <case pos:line="20" pos:column="5">case <expr><name pos:line="20" pos:column="10">SSL_ERROR_SSL<pos:position pos:line="20" pos:column="23"/></name></expr>:<pos:position pos:line="20" pos:column="24"/></case>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">SSL_ERROR_SYSCALL<pos:position pos:line="21" pos:column="27"/></name></expr>:<pos:position pos:line="21" pos:column="28"/></case>
        <expr_stmt><expr><name pos:line="22" pos:column="9">ssl_lib_error<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <call><name pos:line="22" pos:column="25">ERR_get_error<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">()<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
        <comment type="line" pos:line="23" pos:column="9">// proceed to the general error handling code</comment>
        <break pos:line="24" pos:column="9">break;<pos:position pos:line="24" pos:column="15"/></break>
    <default pos:line="25" pos:column="5">default:<pos:position pos:line="25" pos:column="13"/></default>
        <comment type="line" pos:line="26" pos:column="9">// no special error handling for all other errors</comment>
        <expr_stmt><expr><name pos:line="27" pos:column="9">ssl_lib_error<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">SSL_ERROR_NONE<pos:position pos:line="27" pos:column="39"/></name></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
        <break pos:line="28" pos:column="9">break;<pos:position pos:line="28" pos:column="15"/></break>
    }<pos:position pos:line="29" pos:column="6"/></block></switch>

<cpp:elif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">elif<pos:position pos:line="31" pos:column="6"/></cpp:directive> <expr><name pos:line="31" pos:column="7">USE_GNUTLS<pos:position pos:line="31" pos:column="17"/></name></expr></cpp:elif>
    <decl_stmt><decl><type><specifier pos:line="32" pos:column="5">const<pos:position pos:line="32" pos:column="10"/></specifier> <name pos:line="32" pos:column="11">int<pos:position pos:line="32" pos:column="14"/></name></type> <name pos:line="32" pos:column="15">ssl_error<pos:position pos:line="32" pos:column="24"/></name> <init pos:line="32" pos:column="25">= <expr><name pos:line="32" pos:column="27">ret<pos:position pos:line="32" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="31"/></decl_stmt>

    <switch pos:line="34" pos:column="5">switch <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">ret<pos:position pos:line="34" pos:column="16"/></name></expr>)<pos:position pos:line="34" pos:column="17"/></condition> <block pos:line="34" pos:column="18">{
    <case pos:line="35" pos:column="5">case <expr><name pos:line="35" pos:column="10">GNUTLS_E_WARNING_ALERT_RECEIVED<pos:position pos:line="35" pos:column="41"/></name></expr>:<pos:position pos:line="35" pos:column="42"/></case> <block pos:line="35" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="36" pos:column="9">auto<pos:position pos:line="36" pos:column="13"/></name></type> <name pos:line="36" pos:column="14">alert<pos:position pos:line="36" pos:column="19"/></name> <init pos:line="36" pos:column="20">= <expr><call><name pos:line="36" pos:column="22">gnutls_alert_get<pos:position pos:line="36" pos:column="38"/></name><argument_list pos:line="36" pos:column="38">(<argument><expr><call><name><name pos:line="36" pos:column="39">session<pos:position pos:line="36" pos:column="46"/></name><operator pos:line="36" pos:column="46">.<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="47">get<pos:position pos:line="36" pos:column="50"/></name></name><argument_list pos:line="36" pos:column="50">()<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="36" pos:column="54"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">debugs<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="number" pos:line="37" pos:column="16">83<pos:position pos:line="37" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="20">DBG_IMPORTANT<pos:position pos:line="37" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="35">"TLS ALERT: "<pos:position pos:line="37" pos:column="48"/></literal> <operator pos:line="37" pos:column="49">&lt;&lt;<pos:position pos:line="37" pos:column="57"/></operator> <call><name pos:line="37" pos:column="52">gnutls_alert_get_name<pos:position pos:line="37" pos:column="73"/></name><argument_list pos:line="37" pos:column="73">(<argument><expr><name pos:line="37" pos:column="74">alert<pos:position pos:line="37" pos:column="79"/></name></expr></argument>)<pos:position pos:line="37" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="82"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block>
    <comment type="line" pos:line="39" pos:column="5">// drop through to next case</comment>

    <case pos:line="41" pos:column="5">case <expr><name pos:line="41" pos:column="10">GNUTLS_E_AGAIN<pos:position pos:line="41" pos:column="24"/></name></expr>:<pos:position pos:line="41" pos:column="25"/></case>
    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">GNUTLS_E_INTERRUPTED<pos:position pos:line="42" pos:column="30"/></name></expr>:<pos:position pos:line="42" pos:column="31"/></case>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><call><name pos:line="43" pos:column="13">gnutls_record_get_direction<pos:position pos:line="43" pos:column="40"/></name><argument_list pos:line="43" pos:column="40">(<argument><expr><call><name><name pos:line="43" pos:column="41">session<pos:position pos:line="43" pos:column="48"/></name><operator pos:line="43" pos:column="48">.<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="49">get<pos:position pos:line="43" pos:column="52"/></name></name><argument_list pos:line="43" pos:column="52">()<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="55"/></argument_list></call> <operator pos:line="43" pos:column="56">==<pos:position pos:line="43" pos:column="58"/></operator> <literal type="number" pos:line="43" pos:column="59">0<pos:position pos:line="43" pos:column="60"/></literal></expr>)<pos:position pos:line="43" pos:column="61"/></condition><then pos:line="43" pos:column="61">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="44" pos:column="13">noteWantRead<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">()<pos:position pos:line="44" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt></block></then>
        <else pos:line="45" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="13">noteWantWrite<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">()<pos:position pos:line="46" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt></block></else></if>
        <return pos:line="47" pos:column="9">return;<pos:position pos:line="47" pos:column="16"/></return>

    <default pos:line="49" pos:column="5">default:<pos:position pos:line="49" pos:column="13"/></default>
        <comment type="line" pos:line="50" pos:column="9">// no special error handling for all other errors</comment>
        <break pos:line="51" pos:column="9">break;<pos:position pos:line="51" pos:column="15"/></break>
    }<pos:position pos:line="52" pos:column="6"/></block></switch>

<cpp:else pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">else<pos:position pos:line="54" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="line" pos:line="55" pos:column="5">// this avoids unused variable compiler warnings.</comment>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">Must<pos:position pos:line="56" pos:column="9"/></name><argument_list pos:line="56" pos:column="9">(<argument><expr><operator pos:line="56" pos:column="10">!<pos:position pos:line="56" pos:column="11"/></operator><name pos:line="56" pos:column="11">session<pos:position pos:line="56" pos:column="18"/></name></expr></argument>)<pos:position pos:line="56" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="20"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="57" pos:column="5">const<pos:position pos:line="57" pos:column="10"/></specifier> <name pos:line="57" pos:column="11">int<pos:position pos:line="57" pos:column="14"/></name></type> <name pos:line="57" pos:column="15">ssl_error<pos:position pos:line="57" pos:column="24"/></name> <init pos:line="57" pos:column="25">= <expr><name pos:line="57" pos:column="27">ret<pos:position pos:line="57" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="57" pos:column="31"/></decl_stmt>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="line" pos:line="60" pos:column="5">// Log connection details, if any</comment>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">recordNegotiationDetails<pos:position pos:line="61" pos:column="29"/></name><argument_list pos:line="61" pos:column="29">()<pos:position pos:line="61" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">noteNegotiationError<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">ret<pos:position pos:line="62" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="31">ssl_error<pos:position pos:line="62" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="42">ssl_lib_error<pos:position pos:line="62" pos:column="55"/></name></expr></argument>)<pos:position pos:line="62" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="57"/></expr_stmt>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
