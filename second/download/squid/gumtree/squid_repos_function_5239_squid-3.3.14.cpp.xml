<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5239_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name><name pos:line="2" pos:column="1">Auth<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">Basic<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">Config<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">decodeCleartext<pos:position pos:line="2" pos:column="37"/></name></name><parameter_list pos:line="2" pos:column="37">(<parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">httpAuthHeader<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">proxy_auth<pos:position pos:line="4" pos:column="27"/></name> <init pos:line="4" pos:column="28">= <expr><name pos:line="4" pos:column="30">httpAuthHeader<pos:position pos:line="4" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="45"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* trim BASIC from string */</comment>
    <while pos:line="7" pos:column="5">while <condition pos:line="7" pos:column="11">(<expr><call><name pos:line="7" pos:column="12">xisgraph<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><operator pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="22">proxy_auth<pos:position pos:line="7" pos:column="32"/></name></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="34"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="8" pos:column="9">++<pos:position pos:line="8" pos:column="11"/></operator><name pos:line="8" pos:column="11">proxy_auth<pos:position pos:line="8" pos:column="21"/></name></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt></block></while>

    <comment type="block" pos:line="10" pos:column="5">/* Trim leading whitespace before decoding */</comment>
    <while pos:line="11" pos:column="5">while <condition pos:line="11" pos:column="11">(<expr><call><name pos:line="11" pos:column="12">xisspace<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><operator pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="22">proxy_auth<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="34"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="12" pos:column="9">++<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">proxy_auth<pos:position pos:line="12" pos:column="21"/></name></expr>;<pos:position pos:line="12" pos:column="22"/></expr_stmt></block></while>

    <comment type="block" pos:line="14" pos:column="5">/* Trim trailing \n before decoding */</comment>
    <comment type="line" pos:line="15" pos:column="5">// XXX: really? is the \n actually still there? does the header parse not drop it?</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">char<pos:position pos:line="16" pos:column="9"/></name> <modifier pos:line="16" pos:column="10">*<pos:position pos:line="16" pos:column="11"/></modifier></type><name pos:line="16" pos:column="11">eek<pos:position pos:line="16" pos:column="14"/></name> <init pos:line="16" pos:column="15">= <expr><call><name pos:line="16" pos:column="17">xstrdup<pos:position pos:line="16" pos:column="24"/></name><argument_list pos:line="16" pos:column="24">(<argument><expr><name pos:line="16" pos:column="25">proxy_auth<pos:position pos:line="16" pos:column="35"/></name></expr></argument>)<pos:position pos:line="16" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="37"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">strtok<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">eek<pos:position pos:line="17" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="17">"\n"<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">char<pos:position pos:line="18" pos:column="9"/></name> <modifier pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></modifier></type><name pos:line="18" pos:column="11">cleartext<pos:position pos:line="18" pos:column="20"/></name> <init pos:line="18" pos:column="21">= <expr><call><name pos:line="18" pos:column="23">uudecode<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">eek<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="37"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">safe_free<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">eek<pos:position pos:line="19" pos:column="18"/></name></expr></argument>)<pos:position pos:line="19" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="20"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">cleartext<pos:position pos:line="21" pos:column="18"/></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19"> <block pos:line="21" pos:column="20">{
        <comment type="block" pos:line="22" pos:column="9">/*
         * Don't allow NL or CR in the credentials.
         * Oezguer Kesim &lt;oec@codeblau.de&gt;
         */</comment>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">29<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="20">9<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="23">HERE<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">&lt;&lt;<pos:position pos:line="26" pos:column="36"/></operator> <literal type="string" pos:line="26" pos:column="31">"'"<pos:position pos:line="26" pos:column="34"/></literal> <operator pos:line="26" pos:column="35">&lt;&lt;<pos:position pos:line="26" pos:column="43"/></operator> <name pos:line="26" pos:column="38">cleartext<pos:position pos:line="26" pos:column="47"/></name> <operator pos:line="26" pos:column="48">&lt;&lt;<pos:position pos:line="26" pos:column="56"/></operator> <literal type="string" pos:line="26" pos:column="51">"'"<pos:position pos:line="26" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt>

        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">strcspn<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">cleartext<pos:position pos:line="28" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="32">"\r\n"<pos:position pos:line="28" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call> <operator pos:line="28" pos:column="40">!=<pos:position pos:line="28" pos:column="42"/></operator> <call><name pos:line="28" pos:column="43">strlen<pos:position pos:line="28" pos:column="49"/></name><argument_list pos:line="28" pos:column="49">(<argument><expr><name pos:line="28" pos:column="50">cleartext<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="61"/></condition><then pos:line="28" pos:column="61"> <block pos:line="28" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">debugs<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><literal type="number" pos:line="29" pos:column="20">29<pos:position pos:line="29" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="24">DBG_IMPORTANT<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="39">"WARNING: Bad characters in authorization header '"<pos:position pos:line="29" pos:column="90"/></literal> <operator pos:line="29" pos:column="91">&lt;&lt;<pos:position pos:line="29" pos:column="99"/></operator> <name pos:line="29" pos:column="94">httpAuthHeader<pos:position pos:line="29" pos:column="108"/></name> <operator pos:line="29" pos:column="109">&lt;&lt;<pos:position pos:line="29" pos:column="117"/></operator> <literal type="string" pos:line="29" pos:column="112">"'"<pos:position pos:line="29" pos:column="115"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="117"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">safe_free<pos:position pos:line="30" pos:column="22"/></name><argument_list pos:line="30" pos:column="22">(<argument><expr><name pos:line="30" pos:column="23">cleartext<pos:position pos:line="30" pos:column="32"/></name></expr></argument>)<pos:position pos:line="30" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">cleartext<pos:position pos:line="33" pos:column="21"/></name></expr>;<pos:position pos:line="33" pos:column="22"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
