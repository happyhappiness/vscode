<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_873_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">comm_read_cancel<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">int<pos:position pos:line="2" pos:column="21"/></name></type> <name pos:line="2" pos:column="22">fd<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="2" pos:column="26">AsyncCall<pos:position pos:line="2" pos:column="35"/></name><operator pos:line="2" pos:column="35">::<pos:position pos:line="2" pos:column="37"/></operator><name pos:line="2" pos:column="37">Pointer<pos:position pos:line="2" pos:column="44"/></name></name> <modifier pos:line="2" pos:column="45">&amp;<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="46">callback<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">callback<pos:position pos:line="4" pos:column="13"/></name><operator pos:line="4" pos:column="13">-&gt;<pos:position pos:line="4" pos:column="18"/></operator><name pos:line="4" pos:column="15">cancel<pos:position pos:line="4" pos:column="21"/></name></name><argument_list pos:line="4" pos:column="21">(<argument><expr><literal type="string" pos:line="4" pos:column="22">"comm_read_cancel"<pos:position pos:line="4" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="42"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name pos:line="6" pos:column="10">isOpen<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><name pos:line="6" pos:column="17">fd<pos:position pos:line="6" pos:column="19"/></name></expr></argument>)<pos:position pos:line="6" pos:column="20"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">debugs<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="number" pos:line="7" pos:column="16">5<pos:position pos:line="7" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="19">4<pos:position pos:line="7" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="22">"comm_read_cancel fails: FD "<pos:position pos:line="7" pos:column="51"/></literal> <operator pos:line="7" pos:column="52">&lt;&lt;<pos:position pos:line="7" pos:column="60"/></operator> <name pos:line="7" pos:column="55">fd<pos:position pos:line="7" pos:column="57"/></name> <operator pos:line="7" pos:column="58">&lt;&lt;<pos:position pos:line="7" pos:column="66"/></operator> <literal type="string" pos:line="7" pos:column="61">" closed"<pos:position pos:line="7" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="72"/></expr_stmt>
        <return pos:line="8" pos:column="9">return;<pos:position pos:line="8" pos:column="16"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">Comm<pos:position pos:line="11" pos:column="9"/></name><operator pos:line="11" pos:column="9">::<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">IoCallback<pos:position pos:line="11" pos:column="21"/></name></name> <modifier pos:line="11" pos:column="22">*<pos:position pos:line="11" pos:column="23"/></modifier></type><name pos:line="11" pos:column="23">cb<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><call><name pos:line="11" pos:column="28">COMMIO_FD_READCB<pos:position pos:line="11" pos:column="44"/></name><argument_list pos:line="11" pos:column="44">(<argument><expr><name pos:line="11" pos:column="45">fd<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="49"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><call><name><name pos:line="13" pos:column="10">cb<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">active<pos:position pos:line="13" pos:column="20"/></name></name><argument_list pos:line="13" pos:column="20">()<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23"> <block pos:line="13" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">5<pos:position pos:line="14" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="19">4<pos:position pos:line="14" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="22">"comm_read_cancel fails: FD "<pos:position pos:line="14" pos:column="51"/></literal> <operator pos:line="14" pos:column="52">&lt;&lt;<pos:position pos:line="14" pos:column="60"/></operator> <name pos:line="14" pos:column="55">fd<pos:position pos:line="14" pos:column="57"/></name> <operator pos:line="14" pos:column="58">&lt;&lt;<pos:position pos:line="14" pos:column="66"/></operator> <literal type="string" pos:line="14" pos:column="61">" inactive"<pos:position pos:line="14" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="74"/></expr_stmt>
        <return pos:line="15" pos:column="9">return;<pos:position pos:line="15" pos:column="16"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name><name pos:line="18" pos:column="5">AsyncCall<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">::<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">Pointer<pos:position pos:line="18" pos:column="23"/></name></name></type> <name pos:line="18" pos:column="24">call<pos:position pos:line="18" pos:column="28"/></name> <init pos:line="18" pos:column="29">= <expr><name><name pos:line="18" pos:column="31">cb<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">-&gt;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="35">callback<pos:position pos:line="18" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="18" pos:column="44"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">call<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">!=<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">NULL<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt> <comment type="line" pos:line="19" pos:column="27">// XXX: should never fail (active() checks for callback==NULL)</comment>

    <comment type="block" pos:line="21" pos:column="5">/* Ok, we can be reasonably sure we won't lose any data here! */</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">assert<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><name pos:line="22" pos:column="12">call<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">==<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">callback<pos:position pos:line="22" pos:column="28"/></name></expr></argument>)<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>

    <comment type="block" pos:line="24" pos:column="5">/* Delete the callback */</comment>
    <expr_stmt><expr><call><name><name pos:line="25" pos:column="5">cb<pos:position pos:line="25" pos:column="7"/></name><operator pos:line="25" pos:column="7">-&gt;<pos:position pos:line="25" pos:column="12"/></operator><name pos:line="25" pos:column="9">cancel<pos:position pos:line="25" pos:column="15"/></name></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="string" pos:line="25" pos:column="16">"comm_read_cancel"<pos:position pos:line="25" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="27" pos:column="5">/* And the IO event */</comment>
    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">Comm<pos:position pos:line="28" pos:column="9"/></name><operator pos:line="28" pos:column="9">::<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="11">SetSelect<pos:position pos:line="28" pos:column="20"/></name></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">fd<pos:position pos:line="28" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="25">COMM_SELECT_READ<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="43">NULL<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">NULL<pos:position pos:line="28" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="55">0<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
