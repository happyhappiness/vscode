<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_340_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">SMB_Negotiate<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">SMB_Handle_Type<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">Con_Handle<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="43">const<pos:position pos:line="2" pos:column="48"/></specifier> <name pos:line="2" pos:column="49">char<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name><name pos:line="2" pos:column="55">Prots<pos:position pos:line="2" pos:column="60"/></name><index pos:line="2" pos:column="60">[]<pos:position pos:line="2" pos:column="62"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">RFCNB_Pkt<pos:position pos:line="4" pos:column="21"/></name></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">pkt<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">prots_len<pos:position pos:line="5" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="20">i<pos:position pos:line="5" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="23">pkt_len<pos:position pos:line="5" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="32">prot<pos:position pos:line="5" pos:column="36"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="38">alloc_len<pos:position pos:line="5" pos:column="47"/></name></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">p<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* Figure out how long the prot list will be and allocate space for it */</comment>

    <expr_stmt><expr><name pos:line="10" pos:column="5">prots_len<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">0<pos:position pos:line="10" pos:column="18"/></literal></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>

    <for pos:line="12" pos:column="5">for <control pos:line="12" pos:column="9">(<init><expr><name pos:line="12" pos:column="10">i<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <literal type="number" pos:line="12" pos:column="14">0<pos:position pos:line="12" pos:column="15"/></literal></expr>;<pos:position pos:line="12" pos:column="16"/></init> <condition><expr><name><name pos:line="12" pos:column="17">Prots<pos:position pos:line="12" pos:column="22"/></name><index pos:line="12" pos:column="22">[<expr><name pos:line="12" pos:column="23">i<pos:position pos:line="12" pos:column="24"/></name></expr>]<pos:position pos:line="12" pos:column="25"/></index></name> <operator pos:line="12" pos:column="26">!=<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">NULL<pos:position pos:line="12" pos:column="33"/></name></expr>;<pos:position pos:line="12" pos:column="34"/></condition> <incr><expr><name pos:line="12" pos:column="35">i<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">++<pos:position pos:line="12" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="12" pos:column="39"/></control> <block pos:line="12" pos:column="40">{

        <expr_stmt><expr><name pos:line="14" pos:column="9">prots_len<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">=<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">prots_len<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">+<pos:position pos:line="14" pos:column="32"/></operator> <call><name pos:line="14" pos:column="33">strlen<pos:position pos:line="14" pos:column="39"/></name><argument_list pos:line="14" pos:column="39">(<argument><expr><name><name pos:line="14" pos:column="40">Prots<pos:position pos:line="14" pos:column="45"/></name><index pos:line="14" pos:column="45">[<expr><name pos:line="14" pos:column="46">i<pos:position pos:line="14" pos:column="47"/></name></expr>]<pos:position pos:line="14" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call> <operator pos:line="14" pos:column="50">+<pos:position pos:line="14" pos:column="51"/></operator> <literal type="number" pos:line="14" pos:column="52">2<pos:position pos:line="14" pos:column="53"/></literal></expr>;<pos:position pos:line="14" pos:column="54"/></expr_stmt>	<comment type="block" pos:line="14" pos:column="57">/* Account for null etc */</comment>

    }<pos:position pos:line="16" pos:column="6"/></block></for>

    <comment type="block" pos:line="18" pos:column="5">/* The -1 accounts for the one byte smb_buf we have because some systems */</comment>
    <comment type="block" pos:line="19" pos:column="5">/* don't like char msg_buf[]                                             */</comment>

    <expr_stmt><expr><name pos:line="21" pos:column="5">pkt_len<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <name pos:line="21" pos:column="15">SMB_negp_len<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">+<pos:position pos:line="21" pos:column="29"/></operator> <name pos:line="21" pos:column="30">prots_len<pos:position pos:line="21" pos:column="39"/></name></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* Make sure that the pkt len is long enough for the max response ...   */</comment>
    <comment type="block" pos:line="24" pos:column="5">/* Which is a problem, because the encryption key len eec may be long   */</comment>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">pkt_len<pos:position pos:line="26" pos:column="16"/></name> <operator pos:line="26" pos:column="17">&lt;<pos:position pos:line="26" pos:column="21"/></operator> <operator pos:line="26" pos:column="19">(<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="20">SMB_hdr_wct_offset<pos:position pos:line="26" pos:column="38"/></name> <operator pos:line="26" pos:column="39">+<pos:position pos:line="26" pos:column="40"/></operator> <operator pos:line="26" pos:column="41">(<pos:position pos:line="26" pos:column="42"/></operator><literal type="number" pos:line="26" pos:column="42">19<pos:position pos:line="26" pos:column="44"/></literal> <operator pos:line="26" pos:column="45">*<pos:position pos:line="26" pos:column="46"/></operator> <literal type="number" pos:line="26" pos:column="47">2<pos:position pos:line="26" pos:column="48"/></literal><operator pos:line="26" pos:column="48">)<pos:position pos:line="26" pos:column="49"/></operator> <operator pos:line="26" pos:column="50">+<pos:position pos:line="26" pos:column="51"/></operator> <literal type="number" pos:line="26" pos:column="52">40<pos:position pos:line="26" pos:column="54"/></literal><operator pos:line="26" pos:column="54">)<pos:position pos:line="26" pos:column="55"/></operator></expr>)<pos:position pos:line="26" pos:column="56"/></condition><then pos:line="26" pos:column="56"> <block pos:line="26" pos:column="57">{

        <expr_stmt><expr><name pos:line="28" pos:column="9">alloc_len<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">=<pos:position pos:line="28" pos:column="20"/></operator> <name pos:line="28" pos:column="21">SMB_hdr_wct_offset<pos:position pos:line="28" pos:column="39"/></name> <operator pos:line="28" pos:column="40">+<pos:position pos:line="28" pos:column="41"/></operator> <operator pos:line="28" pos:column="42">(<pos:position pos:line="28" pos:column="43"/></operator><literal type="number" pos:line="28" pos:column="43">19<pos:position pos:line="28" pos:column="45"/></literal> <operator pos:line="28" pos:column="46">*<pos:position pos:line="28" pos:column="47"/></operator> <literal type="number" pos:line="28" pos:column="48">2<pos:position pos:line="28" pos:column="49"/></literal><operator pos:line="28" pos:column="49">)<pos:position pos:line="28" pos:column="50"/></operator> <operator pos:line="28" pos:column="51">+<pos:position pos:line="28" pos:column="52"/></operator> <literal type="number" pos:line="28" pos:column="53">40<pos:position pos:line="28" pos:column="55"/></literal></expr>;<pos:position pos:line="28" pos:column="56"/></expr_stmt>

    }<pos:position pos:line="30" pos:column="6"/></block></then> <else pos:line="30" pos:column="7">else <block pos:line="30" pos:column="12">{

        <expr_stmt><expr><name pos:line="32" pos:column="9">alloc_len<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <name pos:line="32" pos:column="21">pkt_len<pos:position pos:line="32" pos:column="28"/></name></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>

    }<pos:position pos:line="34" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="36" pos:column="5">pkt<pos:position pos:line="36" pos:column="8"/></name> <operator pos:line="36" pos:column="9">=<pos:position pos:line="36" pos:column="10"/></operator> <operator pos:line="36" pos:column="11">(<pos:position pos:line="36" pos:column="12"/></operator>struct <name pos:line="36" pos:column="19">RFCNB_Pkt<pos:position pos:line="36" pos:column="28"/></name> <operator pos:line="36" pos:column="29">*<pos:position pos:line="36" pos:column="30"/></operator><operator pos:line="36" pos:column="30">)<pos:position pos:line="36" pos:column="31"/></operator> <call><name pos:line="36" pos:column="32">RFCNB_Alloc_Pkt<pos:position pos:line="36" pos:column="47"/></name><argument_list pos:line="36" pos:column="47">(<argument><expr><name pos:line="36" pos:column="48">alloc_len<pos:position pos:line="36" pos:column="57"/></name></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="59"/></expr_stmt>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">pkt<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">==<pos:position pos:line="38" pos:column="15"/></operator> <name pos:line="38" pos:column="16">NULL<pos:position pos:line="38" pos:column="20"/></name></expr>)<pos:position pos:line="38" pos:column="21"/></condition><then pos:line="38" pos:column="21"> <block pos:line="38" pos:column="22">{

        <expr_stmt><expr><name pos:line="40" pos:column="9">SMBlib_errno<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <name pos:line="40" pos:column="24">SMBlibE_NoSpace<pos:position pos:line="40" pos:column="39"/></name></expr>;<pos:position pos:line="40" pos:column="40"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><operator pos:line="41" pos:column="16">(<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="17">SMBlibE_BAD<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">)<pos:position pos:line="41" pos:column="29"/></operator></expr>;<pos:position pos:line="41" pos:column="30"/></return>

    }<pos:position pos:line="43" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="44" pos:column="5">/* Now plug in the bits we need */</comment>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">memset<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><call><name pos:line="46" pos:column="12">SMB_Hdr<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">(<argument><expr><name pos:line="46" pos:column="20">pkt<pos:position pos:line="46" pos:column="23"/></name></expr></argument>)<pos:position pos:line="46" pos:column="24"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="26">0<pos:position pos:line="46" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="29">SMB_negp_len<pos:position pos:line="46" pos:column="41"/></name></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">SIVAL<pos:position pos:line="47" pos:column="10"/></name><argument_list pos:line="47" pos:column="10">(<argument><expr><call><name pos:line="47" pos:column="11">SMB_Hdr<pos:position pos:line="47" pos:column="18"/></name><argument_list pos:line="47" pos:column="18">(<argument><expr><name pos:line="47" pos:column="19">pkt<pos:position pos:line="47" pos:column="22"/></name></expr></argument>)<pos:position pos:line="47" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="47" pos:column="25">SMB_hdr_idf_offset<pos:position pos:line="47" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="45">SMB_DEF_IDF<pos:position pos:line="47" pos:column="56"/></name></expr></argument>)<pos:position pos:line="47" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="58"/></expr_stmt>	<comment type="block" pos:line="47" pos:column="65">/* Plunk in IDF */</comment>
    <expr_stmt><expr><operator pos:line="48" pos:column="5">*<pos:position pos:line="48" pos:column="6"/></operator><operator pos:line="48" pos:column="6">(<pos:position pos:line="48" pos:column="7"/></operator><call><name pos:line="48" pos:column="7">SMB_Hdr<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">(<argument><expr><name pos:line="48" pos:column="15">pkt<pos:position pos:line="48" pos:column="18"/></name></expr></argument>)<pos:position pos:line="48" pos:column="19"/></argument_list></call> <operator pos:line="48" pos:column="20">+<pos:position pos:line="48" pos:column="21"/></operator> <name pos:line="48" pos:column="22">SMB_hdr_com_offset<pos:position pos:line="48" pos:column="40"/></name><operator pos:line="48" pos:column="40">)<pos:position pos:line="48" pos:column="41"/></operator> <operator pos:line="48" pos:column="42">=<pos:position pos:line="48" pos:column="43"/></operator> <name pos:line="48" pos:column="44">SMBnegprot<pos:position pos:line="48" pos:column="54"/></name></expr>;<pos:position pos:line="48" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">SSVAL<pos:position pos:line="49" pos:column="10"/></name><argument_list pos:line="49" pos:column="10">(<argument><expr><call><name pos:line="49" pos:column="11">SMB_Hdr<pos:position pos:line="49" pos:column="18"/></name><argument_list pos:line="49" pos:column="18">(<argument><expr><name pos:line="49" pos:column="19">pkt<pos:position pos:line="49" pos:column="22"/></name></expr></argument>)<pos:position pos:line="49" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="49" pos:column="25">SMB_hdr_pid_offset<pos:position pos:line="49" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="45">Con_Handle<pos:position pos:line="49" pos:column="55"/></name><operator pos:line="49" pos:column="55">-&gt;<pos:position pos:line="49" pos:column="60"/></operator><name pos:line="49" pos:column="57">pid<pos:position pos:line="49" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">SSVAL<pos:position pos:line="50" pos:column="10"/></name><argument_list pos:line="50" pos:column="10">(<argument><expr><call><name pos:line="50" pos:column="11">SMB_Hdr<pos:position pos:line="50" pos:column="18"/></name><argument_list pos:line="50" pos:column="18">(<argument><expr><name pos:line="50" pos:column="19">pkt<pos:position pos:line="50" pos:column="22"/></name></expr></argument>)<pos:position pos:line="50" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="50" pos:column="25">SMB_hdr_tid_offset<pos:position pos:line="50" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="45">0<pos:position pos:line="50" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">SSVAL<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><call><name pos:line="51" pos:column="11">SMB_Hdr<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><name pos:line="51" pos:column="19">pkt<pos:position pos:line="51" pos:column="22"/></name></expr></argument>)<pos:position pos:line="51" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="51" pos:column="25">SMB_hdr_mid_offset<pos:position pos:line="51" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="45">Con_Handle<pos:position pos:line="51" pos:column="55"/></name><operator pos:line="51" pos:column="55">-&gt;<pos:position pos:line="51" pos:column="60"/></operator><name pos:line="51" pos:column="57">mid<pos:position pos:line="51" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">SSVAL<pos:position pos:line="52" pos:column="10"/></name><argument_list pos:line="52" pos:column="10">(<argument><expr><call><name pos:line="52" pos:column="11">SMB_Hdr<pos:position pos:line="52" pos:column="18"/></name><argument_list pos:line="52" pos:column="18">(<argument><expr><name pos:line="52" pos:column="19">pkt<pos:position pos:line="52" pos:column="22"/></name></expr></argument>)<pos:position pos:line="52" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="52" pos:column="25">SMB_hdr_uid_offset<pos:position pos:line="52" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="45">Con_Handle<pos:position pos:line="52" pos:column="55"/></name><operator pos:line="52" pos:column="55">-&gt;<pos:position pos:line="52" pos:column="60"/></operator><name pos:line="52" pos:column="57">uid<pos:position pos:line="52" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="53" pos:column="5">*<pos:position pos:line="53" pos:column="6"/></operator><operator pos:line="53" pos:column="6">(<pos:position pos:line="53" pos:column="7"/></operator><call><name pos:line="53" pos:column="7">SMB_Hdr<pos:position pos:line="53" pos:column="14"/></name><argument_list pos:line="53" pos:column="14">(<argument><expr><name pos:line="53" pos:column="15">pkt<pos:position pos:line="53" pos:column="18"/></name></expr></argument>)<pos:position pos:line="53" pos:column="19"/></argument_list></call> <operator pos:line="53" pos:column="20">+<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">SMB_hdr_wct_offset<pos:position pos:line="53" pos:column="40"/></name><operator pos:line="53" pos:column="40">)<pos:position pos:line="53" pos:column="41"/></operator> <operator pos:line="53" pos:column="42">=<pos:position pos:line="53" pos:column="43"/></operator> <literal type="number" pos:line="53" pos:column="44">0<pos:position pos:line="53" pos:column="45"/></literal></expr>;<pos:position pos:line="53" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">SSVAL<pos:position pos:line="55" pos:column="10"/></name><argument_list pos:line="55" pos:column="10">(<argument><expr><call><name pos:line="55" pos:column="11">SMB_Hdr<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">pkt<pos:position pos:line="55" pos:column="22"/></name></expr></argument>)<pos:position pos:line="55" pos:column="23"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="55" pos:column="25">SMB_negp_bcc_offset<pos:position pos:line="55" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="46">prots_len<pos:position pos:line="55" pos:column="55"/></name></expr></argument>)<pos:position pos:line="55" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="57"/></expr_stmt>

    <comment type="block" pos:line="57" pos:column="5">/* Now copy the prot strings in with the right stuff */</comment>

    <expr_stmt><expr><name pos:line="59" pos:column="5">p<pos:position pos:line="59" pos:column="6"/></name> <operator pos:line="59" pos:column="7">=<pos:position pos:line="59" pos:column="8"/></operator> <operator pos:line="59" pos:column="9">(<pos:position pos:line="59" pos:column="10"/></operator><name pos:line="59" pos:column="10">char<pos:position pos:line="59" pos:column="14"/></name> <operator pos:line="59" pos:column="15">*<pos:position pos:line="59" pos:column="16"/></operator><operator pos:line="59" pos:column="16">)<pos:position pos:line="59" pos:column="17"/></operator> <operator pos:line="59" pos:column="18">(<pos:position pos:line="59" pos:column="19"/></operator><call><name pos:line="59" pos:column="19">SMB_Hdr<pos:position pos:line="59" pos:column="26"/></name><argument_list pos:line="59" pos:column="26">(<argument><expr><name pos:line="59" pos:column="27">pkt<pos:position pos:line="59" pos:column="30"/></name></expr></argument>)<pos:position pos:line="59" pos:column="31"/></argument_list></call> <operator pos:line="59" pos:column="32">+<pos:position pos:line="59" pos:column="33"/></operator> <name pos:line="59" pos:column="34">SMB_negp_buf_offset<pos:position pos:line="59" pos:column="53"/></name><operator pos:line="59" pos:column="53">)<pos:position pos:line="59" pos:column="54"/></operator></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>

    <for pos:line="61" pos:column="5">for <control pos:line="61" pos:column="9">(<init><expr><name pos:line="61" pos:column="10">i<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <literal type="number" pos:line="61" pos:column="14">0<pos:position pos:line="61" pos:column="15"/></literal></expr>;<pos:position pos:line="61" pos:column="16"/></init> <condition><expr><name><name pos:line="61" pos:column="17">Prots<pos:position pos:line="61" pos:column="22"/></name><index pos:line="61" pos:column="22">[<expr><name pos:line="61" pos:column="23">i<pos:position pos:line="61" pos:column="24"/></name></expr>]<pos:position pos:line="61" pos:column="25"/></index></name> <operator pos:line="61" pos:column="26">!=<pos:position pos:line="61" pos:column="28"/></operator> <name pos:line="61" pos:column="29">NULL<pos:position pos:line="61" pos:column="33"/></name></expr>;<pos:position pos:line="61" pos:column="34"/></condition> <incr><expr><name pos:line="61" pos:column="35">i<pos:position pos:line="61" pos:column="36"/></name><operator pos:line="61" pos:column="36">++<pos:position pos:line="61" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="61" pos:column="39"/></control> <block pos:line="61" pos:column="40">{

        <expr_stmt><expr><operator pos:line="63" pos:column="9">*<pos:position pos:line="63" pos:column="10"/></operator><name pos:line="63" pos:column="10">p<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">=<pos:position pos:line="63" pos:column="13"/></operator> <name pos:line="63" pos:column="14">SMBdialectID<pos:position pos:line="63" pos:column="26"/></name></expr>;<pos:position pos:line="63" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">strcpy<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><name pos:line="64" pos:column="16">p<pos:position pos:line="64" pos:column="17"/></name> <operator pos:line="64" pos:column="18">+<pos:position pos:line="64" pos:column="19"/></operator> <literal type="number" pos:line="64" pos:column="20">1<pos:position pos:line="64" pos:column="21"/></literal></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="23">Prots<pos:position pos:line="64" pos:column="28"/></name><index pos:line="64" pos:column="28">[<expr><name pos:line="64" pos:column="29">i<pos:position pos:line="64" pos:column="30"/></name></expr>]<pos:position pos:line="64" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="64" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="65" pos:column="9">p<pos:position pos:line="65" pos:column="10"/></name> <operator pos:line="65" pos:column="11">=<pos:position pos:line="65" pos:column="12"/></operator> <name pos:line="65" pos:column="13">p<pos:position pos:line="65" pos:column="14"/></name> <operator pos:line="65" pos:column="15">+<pos:position pos:line="65" pos:column="16"/></operator> <call><name pos:line="65" pos:column="17">strlen<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><name><name pos:line="65" pos:column="24">Prots<pos:position pos:line="65" pos:column="29"/></name><index pos:line="65" pos:column="29">[<expr><name pos:line="65" pos:column="30">i<pos:position pos:line="65" pos:column="31"/></name></expr>]<pos:position pos:line="65" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="65" pos:column="33"/></argument_list></call> <operator pos:line="65" pos:column="34">+<pos:position pos:line="65" pos:column="35"/></operator> <literal type="number" pos:line="65" pos:column="36">2<pos:position pos:line="65" pos:column="37"/></literal></expr>;<pos:position pos:line="65" pos:column="38"/></expr_stmt>	<comment type="block" pos:line="65" pos:column="41">/* Adjust len of p for null plus dialectID */</comment>

    }<pos:position pos:line="67" pos:column="6"/></block></for>

    <comment type="block" pos:line="69" pos:column="5">/* Now send the packet and sit back ... */</comment>

    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><call><name pos:line="71" pos:column="9">RFCNB_Send<pos:position pos:line="71" pos:column="19"/></name><argument_list pos:line="71" pos:column="19">(<argument><expr><name><name pos:line="71" pos:column="20">Con_Handle<pos:position pos:line="71" pos:column="30"/></name><operator pos:line="71" pos:column="30">-&gt;<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="32">Trans_Connect<pos:position pos:line="71" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="47">pkt<pos:position pos:line="71" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="52">pkt_len<pos:position pos:line="71" pos:column="59"/></name></expr></argument>)<pos:position pos:line="71" pos:column="60"/></argument_list></call> <operator pos:line="71" pos:column="61">&lt;<pos:position pos:line="71" pos:column="65"/></operator> <literal type="number" pos:line="71" pos:column="63">0<pos:position pos:line="71" pos:column="64"/></literal></expr>)<pos:position pos:line="71" pos:column="65"/></condition><then pos:line="71" pos:column="65"> <block pos:line="71" pos:column="66">{


<cpp:ifdef pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">ifdef<pos:position pos:line="74" pos:column="7"/></cpp:directive> <name pos:line="74" pos:column="8">DEBUG<pos:position pos:line="74" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">fprintf<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">stderr<pos:position pos:line="75" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="25">"Error sending negotiate protocol\n"<pos:position pos:line="75" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="78" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="78" pos:column="23"/></name><argument_list pos:line="78" pos:column="23">(<argument><expr><name pos:line="78" pos:column="24">pkt<pos:position pos:line="78" pos:column="27"/></name></expr></argument>)<pos:position pos:line="78" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="79" pos:column="9">SMBlib_errno<pos:position pos:line="79" pos:column="21"/></name> <operator pos:line="79" pos:column="22">=<pos:position pos:line="79" pos:column="23"/></operator> <operator pos:line="79" pos:column="24">-<pos:position pos:line="79" pos:column="25"/></operator><name pos:line="79" pos:column="25">SMBlibE_SendFailed<pos:position pos:line="79" pos:column="43"/></name></expr>;<pos:position pos:line="79" pos:column="44"/></expr_stmt>	<comment type="block" pos:line="79" pos:column="49">/* Failed, check lower layer errno */</comment>
        <return pos:line="80" pos:column="9">return <expr><operator pos:line="80" pos:column="16">(<pos:position pos:line="80" pos:column="17"/></operator><name pos:line="80" pos:column="17">SMBlibE_BAD<pos:position pos:line="80" pos:column="28"/></name><operator pos:line="80" pos:column="28">)<pos:position pos:line="80" pos:column="29"/></operator></expr>;<pos:position pos:line="80" pos:column="30"/></return>

    }<pos:position pos:line="82" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="83" pos:column="5">/* Now get the response ... */</comment>

    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><call><name pos:line="85" pos:column="9">RFCNB_Recv<pos:position pos:line="85" pos:column="19"/></name><argument_list pos:line="85" pos:column="19">(<argument><expr><name><name pos:line="85" pos:column="20">Con_Handle<pos:position pos:line="85" pos:column="30"/></name><operator pos:line="85" pos:column="30">-&gt;<pos:position pos:line="85" pos:column="35"/></operator><name pos:line="85" pos:column="32">Trans_Connect<pos:position pos:line="85" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="47">pkt<pos:position pos:line="85" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="52">alloc_len<pos:position pos:line="85" pos:column="61"/></name></expr></argument>)<pos:position pos:line="85" pos:column="62"/></argument_list></call> <operator pos:line="85" pos:column="63">&lt;<pos:position pos:line="85" pos:column="67"/></operator> <literal type="number" pos:line="85" pos:column="65">0<pos:position pos:line="85" pos:column="66"/></literal></expr>)<pos:position pos:line="85" pos:column="67"/></condition><then pos:line="85" pos:column="67"> <block pos:line="85" pos:column="68">{

<cpp:ifdef pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">ifdef<pos:position pos:line="87" pos:column="7"/></cpp:directive> <name pos:line="87" pos:column="8">DEBUG<pos:position pos:line="87" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="88" pos:column="9">fprintf<pos:position pos:line="88" pos:column="16"/></name><argument_list pos:line="88" pos:column="16">(<argument><expr><name pos:line="88" pos:column="17">stderr<pos:position pos:line="88" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="25">"Error receiving response to negotiate\n"<pos:position pos:line="88" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="68"/></expr_stmt>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="91" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="91" pos:column="23"/></name><argument_list pos:line="91" pos:column="23">(<argument><expr><name pos:line="91" pos:column="24">pkt<pos:position pos:line="91" pos:column="27"/></name></expr></argument>)<pos:position pos:line="91" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="92" pos:column="9">SMBlib_errno<pos:position pos:line="92" pos:column="21"/></name> <operator pos:line="92" pos:column="22">=<pos:position pos:line="92" pos:column="23"/></operator> <operator pos:line="92" pos:column="24">-<pos:position pos:line="92" pos:column="25"/></operator><name pos:line="92" pos:column="25">SMBlibE_RecvFailed<pos:position pos:line="92" pos:column="43"/></name></expr>;<pos:position pos:line="92" pos:column="44"/></expr_stmt>	<comment type="block" pos:line="92" pos:column="49">/* Failed, check lower layer errno */</comment>
        <return pos:line="93" pos:column="9">return <expr><operator pos:line="93" pos:column="16">(<pos:position pos:line="93" pos:column="17"/></operator><name pos:line="93" pos:column="17">SMBlibE_BAD<pos:position pos:line="93" pos:column="28"/></name><operator pos:line="93" pos:column="28">)<pos:position pos:line="93" pos:column="29"/></operator></expr>;<pos:position pos:line="93" pos:column="30"/></return>

    }<pos:position pos:line="95" pos:column="6"/></block></then></if>
    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><call><name pos:line="96" pos:column="9">CVAL<pos:position pos:line="96" pos:column="13"/></name><argument_list pos:line="96" pos:column="13">(<argument><expr><call><name pos:line="96" pos:column="14">SMB_Hdr<pos:position pos:line="96" pos:column="21"/></name><argument_list pos:line="96" pos:column="21">(<argument><expr><name pos:line="96" pos:column="22">pkt<pos:position pos:line="96" pos:column="25"/></name></expr></argument>)<pos:position pos:line="96" pos:column="26"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="96" pos:column="28">SMB_hdr_rcls_offset<pos:position pos:line="96" pos:column="47"/></name></expr></argument>)<pos:position pos:line="96" pos:column="48"/></argument_list></call> <operator pos:line="96" pos:column="49">!=<pos:position pos:line="96" pos:column="51"/></operator> <name pos:line="96" pos:column="52">SMBC_SUCCESS<pos:position pos:line="96" pos:column="64"/></name></expr>)<pos:position pos:line="96" pos:column="65"/></condition><then pos:line="96" pos:column="65"> <block pos:line="96" pos:column="66">{	<comment type="block" pos:line="96" pos:column="73">/* Process error */</comment>

<cpp:ifdef pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">ifdef<pos:position pos:line="98" pos:column="7"/></cpp:directive> <name pos:line="98" pos:column="8">DEBUG<pos:position pos:line="98" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="99" pos:column="9">fprintf<pos:position pos:line="99" pos:column="16"/></name><argument_list pos:line="99" pos:column="16">(<argument><expr><name pos:line="99" pos:column="17">stderr<pos:position pos:line="99" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="25">"SMB_Negotiate failed with errorclass = %i, Error Code = %i\n"<pos:position pos:line="99" pos:column="87"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="100" pos:column="17">CVAL<pos:position pos:line="100" pos:column="21"/></name><argument_list pos:line="100" pos:column="21">(<argument><expr><call><name pos:line="100" pos:column="22">SMB_Hdr<pos:position pos:line="100" pos:column="29"/></name><argument_list pos:line="100" pos:column="29">(<argument><expr><name pos:line="100" pos:column="30">pkt<pos:position pos:line="100" pos:column="33"/></name></expr></argument>)<pos:position pos:line="100" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="100" pos:column="36">SMB_hdr_rcls_offset<pos:position pos:line="100" pos:column="55"/></name></expr></argument>)<pos:position pos:line="100" pos:column="56"/></argument_list></call></expr></argument>,
                <argument><expr><call><name pos:line="101" pos:column="17">SVAL<pos:position pos:line="101" pos:column="21"/></name><argument_list pos:line="101" pos:column="21">(<argument><expr><call><name pos:line="101" pos:column="22">SMB_Hdr<pos:position pos:line="101" pos:column="29"/></name><argument_list pos:line="101" pos:column="29">(<argument><expr><name pos:line="101" pos:column="30">pkt<pos:position pos:line="101" pos:column="33"/></name></expr></argument>)<pos:position pos:line="101" pos:column="34"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="101" pos:column="36">SMB_hdr_err_offset<pos:position pos:line="101" pos:column="54"/></name></expr></argument>)<pos:position pos:line="101" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="101" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">endif<pos:position pos:line="102" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><name pos:line="104" pos:column="9">SMBlib_SMB_Error<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">=<pos:position pos:line="104" pos:column="27"/></operator> <call><name pos:line="104" pos:column="28">IVAL<pos:position pos:line="104" pos:column="32"/></name><argument_list pos:line="104" pos:column="32">(<argument><expr><call><name pos:line="104" pos:column="33">SMB_Hdr<pos:position pos:line="104" pos:column="40"/></name><argument_list pos:line="104" pos:column="40">(<argument><expr><name pos:line="104" pos:column="41">pkt<pos:position pos:line="104" pos:column="44"/></name></expr></argument>)<pos:position pos:line="104" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="104" pos:column="47">SMB_hdr_rcls_offset<pos:position pos:line="104" pos:column="66"/></name></expr></argument>)<pos:position pos:line="104" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="105" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="105" pos:column="23"/></name><argument_list pos:line="105" pos:column="23">(<argument><expr><name pos:line="105" pos:column="24">pkt<pos:position pos:line="105" pos:column="27"/></name></expr></argument>)<pos:position pos:line="105" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="106" pos:column="9">SMBlib_errno<pos:position pos:line="106" pos:column="21"/></name> <operator pos:line="106" pos:column="22">=<pos:position pos:line="106" pos:column="23"/></operator> <name pos:line="106" pos:column="24">SMBlibE_Remote<pos:position pos:line="106" pos:column="38"/></name></expr>;<pos:position pos:line="106" pos:column="39"/></expr_stmt>
        <return pos:line="107" pos:column="9">return <expr><operator pos:line="107" pos:column="16">(<pos:position pos:line="107" pos:column="17"/></operator><name pos:line="107" pos:column="17">SMBlibE_BAD<pos:position pos:line="107" pos:column="28"/></name><operator pos:line="107" pos:column="28">)<pos:position pos:line="107" pos:column="29"/></operator></expr>;<pos:position pos:line="107" pos:column="30"/></return>

    }<pos:position pos:line="109" pos:column="6"/></block></then></if>
    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><call><name pos:line="110" pos:column="9">SVAL<pos:position pos:line="110" pos:column="13"/></name><argument_list pos:line="110" pos:column="13">(<argument><expr><call><name pos:line="110" pos:column="14">SMB_Hdr<pos:position pos:line="110" pos:column="21"/></name><argument_list pos:line="110" pos:column="21">(<argument><expr><name pos:line="110" pos:column="22">pkt<pos:position pos:line="110" pos:column="25"/></name></expr></argument>)<pos:position pos:line="110" pos:column="26"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="110" pos:column="28">SMB_negrCP_idx_offset<pos:position pos:line="110" pos:column="49"/></name></expr></argument>)<pos:position pos:line="110" pos:column="50"/></argument_list></call> <operator pos:line="110" pos:column="51">==<pos:position pos:line="110" pos:column="53"/></operator> <literal type="number" pos:line="110" pos:column="54">0xFFFF<pos:position pos:line="110" pos:column="60"/></literal></expr>)<pos:position pos:line="110" pos:column="61"/></condition><then pos:line="110" pos:column="61"> <block pos:line="110" pos:column="62">{

<cpp:ifdef pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">ifdef<pos:position pos:line="112" pos:column="7"/></cpp:directive> <name pos:line="112" pos:column="8">DEBUG<pos:position pos:line="112" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="113" pos:column="9">fprintf<pos:position pos:line="113" pos:column="16"/></name><argument_list pos:line="113" pos:column="16">(<argument><expr><name pos:line="113" pos:column="17">stderr<pos:position pos:line="113" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="25">"None of our protocols was accepted ... "<pos:position pos:line="113" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="68"/></expr_stmt>
<cpp:endif pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">endif<pos:position pos:line="114" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="116" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="116" pos:column="23"/></name><argument_list pos:line="116" pos:column="23">(<argument><expr><name pos:line="116" pos:column="24">pkt<pos:position pos:line="116" pos:column="27"/></name></expr></argument>)<pos:position pos:line="116" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="117" pos:column="9">SMBlib_errno<pos:position pos:line="117" pos:column="21"/></name> <operator pos:line="117" pos:column="22">=<pos:position pos:line="117" pos:column="23"/></operator> <name pos:line="117" pos:column="24">SMBlibE_NegNoProt<pos:position pos:line="117" pos:column="41"/></name></expr>;<pos:position pos:line="117" pos:column="42"/></expr_stmt>
        <return pos:line="118" pos:column="9">return <expr><operator pos:line="118" pos:column="16">(<pos:position pos:line="118" pos:column="17"/></operator><name pos:line="118" pos:column="17">SMBlibE_BAD<pos:position pos:line="118" pos:column="28"/></name><operator pos:line="118" pos:column="28">)<pos:position pos:line="118" pos:column="29"/></operator></expr>;<pos:position pos:line="118" pos:column="30"/></return>

    }<pos:position pos:line="120" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="121" pos:column="5">/* Now, unpack the info from the response, if any and evaluate the proto */</comment>
    <comment type="block" pos:line="122" pos:column="5">/* selected. We must make sure it is one we like ...                     */</comment>

    <expr_stmt><expr><name><name pos:line="124" pos:column="5">Con_Handle<pos:position pos:line="124" pos:column="15"/></name><operator pos:line="124" pos:column="15">-&gt;<pos:position pos:line="124" pos:column="20"/></operator><name pos:line="124" pos:column="17">prot_IDX<pos:position pos:line="124" pos:column="25"/></name></name> <operator pos:line="124" pos:column="26">=<pos:position pos:line="124" pos:column="27"/></operator> <name pos:line="124" pos:column="28">prot<pos:position pos:line="124" pos:column="32"/></name> <operator pos:line="124" pos:column="33">=<pos:position pos:line="124" pos:column="34"/></operator> <call><name pos:line="124" pos:column="35">SVAL<pos:position pos:line="124" pos:column="39"/></name><argument_list pos:line="124" pos:column="39">(<argument><expr><call><name pos:line="124" pos:column="40">SMB_Hdr<pos:position pos:line="124" pos:column="47"/></name><argument_list pos:line="124" pos:column="47">(<argument><expr><name pos:line="124" pos:column="48">pkt<pos:position pos:line="124" pos:column="51"/></name></expr></argument>)<pos:position pos:line="124" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="124" pos:column="54">SMB_negrCP_idx_offset<pos:position pos:line="124" pos:column="75"/></name></expr></argument>)<pos:position pos:line="124" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="77"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="125" pos:column="5">Con_Handle<pos:position pos:line="125" pos:column="15"/></name><operator pos:line="125" pos:column="15">-&gt;<pos:position pos:line="125" pos:column="20"/></operator><name pos:line="125" pos:column="17">protocol<pos:position pos:line="125" pos:column="25"/></name></name> <operator pos:line="125" pos:column="26">=<pos:position pos:line="125" pos:column="27"/></operator> <call><name pos:line="125" pos:column="28">SMB_Figure_Protocol<pos:position pos:line="125" pos:column="47"/></name><argument_list pos:line="125" pos:column="47">(<argument><expr><name pos:line="125" pos:column="48">Prots<pos:position pos:line="125" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="55">prot<pos:position pos:line="125" pos:column="59"/></name></expr></argument>)<pos:position pos:line="125" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="61"/></expr_stmt>

    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">(<expr><name><name pos:line="127" pos:column="9">Con_Handle<pos:position pos:line="127" pos:column="19"/></name><operator pos:line="127" pos:column="19">-&gt;<pos:position pos:line="127" pos:column="24"/></operator><name pos:line="127" pos:column="21">protocol<pos:position pos:line="127" pos:column="29"/></name></name> <operator pos:line="127" pos:column="30">==<pos:position pos:line="127" pos:column="32"/></operator> <name pos:line="127" pos:column="33">SMB_P_Unknown<pos:position pos:line="127" pos:column="46"/></name></expr>)<pos:position pos:line="127" pos:column="47"/></condition><then pos:line="127" pos:column="47"> <block pos:line="127" pos:column="48">{	<comment type="block" pos:line="127" pos:column="57">/* No good ... */</comment>

        <expr_stmt><expr><call><name pos:line="129" pos:column="9">RFCNB_Free_Pkt<pos:position pos:line="129" pos:column="23"/></name><argument_list pos:line="129" pos:column="23">(<argument><expr><name pos:line="129" pos:column="24">pkt<pos:position pos:line="129" pos:column="27"/></name></expr></argument>)<pos:position pos:line="129" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="130" pos:column="9">SMBlib_errno<pos:position pos:line="130" pos:column="21"/></name> <operator pos:line="130" pos:column="22">=<pos:position pos:line="130" pos:column="23"/></operator> <name pos:line="130" pos:column="24">SMBlibE_ProtUnknown<pos:position pos:line="130" pos:column="43"/></name></expr>;<pos:position pos:line="130" pos:column="44"/></expr_stmt>
        <return pos:line="131" pos:column="9">return <expr><operator pos:line="131" pos:column="16">(<pos:position pos:line="131" pos:column="17"/></operator><name pos:line="131" pos:column="17">SMBlibE_BAD<pos:position pos:line="131" pos:column="28"/></name><operator pos:line="131" pos:column="28">)<pos:position pos:line="131" pos:column="29"/></operator></expr>;<pos:position pos:line="131" pos:column="30"/></return>

    }<pos:position pos:line="133" pos:column="6"/></block></then></if>
    <switch pos:line="134" pos:column="5">switch <condition pos:line="134" pos:column="12">(<expr><call><name pos:line="134" pos:column="13">CVAL<pos:position pos:line="134" pos:column="17"/></name><argument_list pos:line="134" pos:column="17">(<argument><expr><call><name pos:line="134" pos:column="18">SMB_Hdr<pos:position pos:line="134" pos:column="25"/></name><argument_list pos:line="134" pos:column="25">(<argument><expr><name pos:line="134" pos:column="26">pkt<pos:position pos:line="134" pos:column="29"/></name></expr></argument>)<pos:position pos:line="134" pos:column="30"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="134" pos:column="32">SMB_hdr_wct_offset<pos:position pos:line="134" pos:column="50"/></name></expr></argument>)<pos:position pos:line="134" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="134" pos:column="52"/></condition> <block pos:line="134" pos:column="53">{

    <case pos:line="136" pos:column="5">case <expr><literal type="number" pos:line="136" pos:column="10">0x01<pos:position pos:line="136" pos:column="14"/></literal></expr>:<pos:position pos:line="136" pos:column="15"/></case>			<comment type="block" pos:line="136" pos:column="33">/* No more info ... */</comment>

        <break pos:line="138" pos:column="9">break;<pos:position pos:line="138" pos:column="15"/></break>

    <case pos:line="140" pos:column="5">case <expr><literal type="number" pos:line="140" pos:column="10">13<pos:position pos:line="140" pos:column="12"/></literal></expr>:<pos:position pos:line="140" pos:column="13"/></case>			<comment type="block" pos:line="140" pos:column="33">/* Up to and including LanMan 2.1 */</comment>

        <expr_stmt><expr><name><name pos:line="142" pos:column="9">Con_Handle<pos:position pos:line="142" pos:column="19"/></name><operator pos:line="142" pos:column="19">-&gt;<pos:position pos:line="142" pos:column="24"/></operator><name pos:line="142" pos:column="21">Security<pos:position pos:line="142" pos:column="29"/></name></name> <operator pos:line="142" pos:column="30">=<pos:position pos:line="142" pos:column="31"/></operator> <call><name pos:line="142" pos:column="32">SVAL<pos:position pos:line="142" pos:column="36"/></name><argument_list pos:line="142" pos:column="36">(<argument><expr><call><name pos:line="142" pos:column="37">SMB_Hdr<pos:position pos:line="142" pos:column="44"/></name><argument_list pos:line="142" pos:column="44">(<argument><expr><name pos:line="142" pos:column="45">pkt<pos:position pos:line="142" pos:column="48"/></name></expr></argument>)<pos:position pos:line="142" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="142" pos:column="51">SMB_negrLM_sec_offset<pos:position pos:line="142" pos:column="72"/></name></expr></argument>)<pos:position pos:line="142" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="143" pos:column="9">Con_Handle<pos:position pos:line="143" pos:column="19"/></name><operator pos:line="143" pos:column="19">-&gt;<pos:position pos:line="143" pos:column="24"/></operator><name pos:line="143" pos:column="21">encrypt_passwords<pos:position pos:line="143" pos:column="38"/></name></name> <operator pos:line="143" pos:column="39">=<pos:position pos:line="143" pos:column="40"/></operator> <operator pos:line="143" pos:column="41">(<pos:position pos:line="143" pos:column="42"/></operator><operator pos:line="143" pos:column="42">(<pos:position pos:line="143" pos:column="43"/></operator><name><name pos:line="143" pos:column="43">Con_Handle<pos:position pos:line="143" pos:column="53"/></name><operator pos:line="143" pos:column="53">-&gt;<pos:position pos:line="143" pos:column="58"/></operator><name pos:line="143" pos:column="55">Security<pos:position pos:line="143" pos:column="63"/></name></name> <operator pos:line="143" pos:column="64">&amp;<pos:position pos:line="143" pos:column="69"/></operator> <name pos:line="143" pos:column="66">SMB_sec_encrypt_mask<pos:position pos:line="143" pos:column="86"/></name><operator pos:line="143" pos:column="86">)<pos:position pos:line="143" pos:column="87"/></operator> <operator pos:line="143" pos:column="88">!=<pos:position pos:line="143" pos:column="90"/></operator> <literal type="number" pos:line="143" pos:column="91">0x00<pos:position pos:line="143" pos:column="95"/></literal><operator pos:line="143" pos:column="95">)<pos:position pos:line="143" pos:column="96"/></operator></expr>;<pos:position pos:line="143" pos:column="97"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="144" pos:column="9">Con_Handle<pos:position pos:line="144" pos:column="19"/></name><operator pos:line="144" pos:column="19">-&gt;<pos:position pos:line="144" pos:column="24"/></operator><name pos:line="144" pos:column="21">Security<pos:position pos:line="144" pos:column="29"/></name></name> <operator pos:line="144" pos:column="30">=<pos:position pos:line="144" pos:column="31"/></operator> <name><name pos:line="144" pos:column="32">Con_Handle<pos:position pos:line="144" pos:column="42"/></name><operator pos:line="144" pos:column="42">-&gt;<pos:position pos:line="144" pos:column="47"/></operator><name pos:line="144" pos:column="44">Security<pos:position pos:line="144" pos:column="52"/></name></name> <operator pos:line="144" pos:column="53">&amp;<pos:position pos:line="144" pos:column="58"/></operator> <name pos:line="144" pos:column="55">SMB_sec_user_mask<pos:position pos:line="144" pos:column="72"/></name></expr>;<pos:position pos:line="144" pos:column="73"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="146" pos:column="9">Con_Handle<pos:position pos:line="146" pos:column="19"/></name><operator pos:line="146" pos:column="19">-&gt;<pos:position pos:line="146" pos:column="24"/></operator><name pos:line="146" pos:column="21">max_xmit<pos:position pos:line="146" pos:column="29"/></name></name> <operator pos:line="146" pos:column="30">=<pos:position pos:line="146" pos:column="31"/></operator> <call><name pos:line="146" pos:column="32">SVAL<pos:position pos:line="146" pos:column="36"/></name><argument_list pos:line="146" pos:column="36">(<argument><expr><call><name pos:line="146" pos:column="37">SMB_Hdr<pos:position pos:line="146" pos:column="44"/></name><argument_list pos:line="146" pos:column="44">(<argument><expr><name pos:line="146" pos:column="45">pkt<pos:position pos:line="146" pos:column="48"/></name></expr></argument>)<pos:position pos:line="146" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="146" pos:column="51">SMB_negrLM_mbs_offset<pos:position pos:line="146" pos:column="72"/></name></expr></argument>)<pos:position pos:line="146" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="147" pos:column="9">Con_Handle<pos:position pos:line="147" pos:column="19"/></name><operator pos:line="147" pos:column="19">-&gt;<pos:position pos:line="147" pos:column="24"/></operator><name pos:line="147" pos:column="21">MaxMPX<pos:position pos:line="147" pos:column="27"/></name></name> <operator pos:line="147" pos:column="28">=<pos:position pos:line="147" pos:column="29"/></operator> <call><name pos:line="147" pos:column="30">SVAL<pos:position pos:line="147" pos:column="34"/></name><argument_list pos:line="147" pos:column="34">(<argument><expr><call><name pos:line="147" pos:column="35">SMB_Hdr<pos:position pos:line="147" pos:column="42"/></name><argument_list pos:line="147" pos:column="42">(<argument><expr><name pos:line="147" pos:column="43">pkt<pos:position pos:line="147" pos:column="46"/></name></expr></argument>)<pos:position pos:line="147" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="147" pos:column="49">SMB_negrLM_mmc_offset<pos:position pos:line="147" pos:column="70"/></name></expr></argument>)<pos:position pos:line="147" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="148" pos:column="9">Con_Handle<pos:position pos:line="148" pos:column="19"/></name><operator pos:line="148" pos:column="19">-&gt;<pos:position pos:line="148" pos:column="24"/></operator><name pos:line="148" pos:column="21">MaxVC<pos:position pos:line="148" pos:column="26"/></name></name> <operator pos:line="148" pos:column="27">=<pos:position pos:line="148" pos:column="28"/></operator> <call><name pos:line="148" pos:column="29">SVAL<pos:position pos:line="148" pos:column="33"/></name><argument_list pos:line="148" pos:column="33">(<argument><expr><call><name pos:line="148" pos:column="34">SMB_Hdr<pos:position pos:line="148" pos:column="41"/></name><argument_list pos:line="148" pos:column="41">(<argument><expr><name pos:line="148" pos:column="42">pkt<pos:position pos:line="148" pos:column="45"/></name></expr></argument>)<pos:position pos:line="148" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="148" pos:column="48">SMB_negrLM_mnv_offset<pos:position pos:line="148" pos:column="69"/></name></expr></argument>)<pos:position pos:line="148" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="149" pos:column="9">Con_Handle<pos:position pos:line="149" pos:column="19"/></name><operator pos:line="149" pos:column="19">-&gt;<pos:position pos:line="149" pos:column="24"/></operator><name pos:line="149" pos:column="21">Raw_Support<pos:position pos:line="149" pos:column="32"/></name></name> <operator pos:line="149" pos:column="33">=<pos:position pos:line="149" pos:column="34"/></operator> <call><name pos:line="149" pos:column="35">SVAL<pos:position pos:line="149" pos:column="39"/></name><argument_list pos:line="149" pos:column="39">(<argument><expr><call><name pos:line="149" pos:column="40">SMB_Hdr<pos:position pos:line="149" pos:column="47"/></name><argument_list pos:line="149" pos:column="47">(<argument><expr><name pos:line="149" pos:column="48">pkt<pos:position pos:line="149" pos:column="51"/></name></expr></argument>)<pos:position pos:line="149" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="149" pos:column="54">SMB_negrLM_rm_offset<pos:position pos:line="149" pos:column="74"/></name></expr></argument>)<pos:position pos:line="149" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="150" pos:column="9">Con_Handle<pos:position pos:line="150" pos:column="19"/></name><operator pos:line="150" pos:column="19">-&gt;<pos:position pos:line="150" pos:column="24"/></operator><name pos:line="150" pos:column="21">SessionKey<pos:position pos:line="150" pos:column="31"/></name></name> <operator pos:line="150" pos:column="32">=<pos:position pos:line="150" pos:column="33"/></operator> <call><name pos:line="150" pos:column="34">IVAL<pos:position pos:line="150" pos:column="38"/></name><argument_list pos:line="150" pos:column="38">(<argument><expr><call><name pos:line="150" pos:column="39">SMB_Hdr<pos:position pos:line="150" pos:column="46"/></name><argument_list pos:line="150" pos:column="46">(<argument><expr><name pos:line="150" pos:column="47">pkt<pos:position pos:line="150" pos:column="50"/></name></expr></argument>)<pos:position pos:line="150" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="150" pos:column="53">SMB_negrLM_sk_offset<pos:position pos:line="150" pos:column="73"/></name></expr></argument>)<pos:position pos:line="150" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="151" pos:column="9">Con_Handle<pos:position pos:line="151" pos:column="19"/></name><operator pos:line="151" pos:column="19">-&gt;<pos:position pos:line="151" pos:column="24"/></operator><name pos:line="151" pos:column="21">SvrTZ<pos:position pos:line="151" pos:column="26"/></name></name> <operator pos:line="151" pos:column="27">=<pos:position pos:line="151" pos:column="28"/></operator> <call><name pos:line="151" pos:column="29">SVAL<pos:position pos:line="151" pos:column="33"/></name><argument_list pos:line="151" pos:column="33">(<argument><expr><call><name pos:line="151" pos:column="34">SMB_Hdr<pos:position pos:line="151" pos:column="41"/></name><argument_list pos:line="151" pos:column="41">(<argument><expr><name pos:line="151" pos:column="42">pkt<pos:position pos:line="151" pos:column="45"/></name></expr></argument>)<pos:position pos:line="151" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="151" pos:column="48">SMB_negrLM_stz_offset<pos:position pos:line="151" pos:column="69"/></name></expr></argument>)<pos:position pos:line="151" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="152" pos:column="9">Con_Handle<pos:position pos:line="152" pos:column="19"/></name><operator pos:line="152" pos:column="19">-&gt;<pos:position pos:line="152" pos:column="24"/></operator><name pos:line="152" pos:column="21">Encrypt_Key_Len<pos:position pos:line="152" pos:column="36"/></name></name> <operator pos:line="152" pos:column="37">=<pos:position pos:line="152" pos:column="38"/></operator> <call><name pos:line="152" pos:column="39">SVAL<pos:position pos:line="152" pos:column="43"/></name><argument_list pos:line="152" pos:column="43">(<argument><expr><call><name pos:line="152" pos:column="44">SMB_Hdr<pos:position pos:line="152" pos:column="51"/></name><argument_list pos:line="152" pos:column="51">(<argument><expr><name pos:line="152" pos:column="52">pkt<pos:position pos:line="152" pos:column="55"/></name></expr></argument>)<pos:position pos:line="152" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="152" pos:column="58">SMB_negrLM_ekl_offset<pos:position pos:line="152" pos:column="79"/></name></expr></argument>)<pos:position pos:line="152" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="81"/></expr_stmt>

        <expr_stmt><expr><name pos:line="154" pos:column="9">p<pos:position pos:line="154" pos:column="10"/></name> <operator pos:line="154" pos:column="11">=<pos:position pos:line="154" pos:column="12"/></operator> <operator pos:line="154" pos:column="13">(<pos:position pos:line="154" pos:column="14"/></operator><call><name pos:line="154" pos:column="14">SMB_Hdr<pos:position pos:line="154" pos:column="21"/></name><argument_list pos:line="154" pos:column="21">(<argument><expr><name pos:line="154" pos:column="22">pkt<pos:position pos:line="154" pos:column="25"/></name></expr></argument>)<pos:position pos:line="154" pos:column="26"/></argument_list></call> <operator pos:line="154" pos:column="27">+<pos:position pos:line="154" pos:column="28"/></operator> <name pos:line="154" pos:column="29">SMB_negrLM_buf_offset<pos:position pos:line="154" pos:column="50"/></name><operator pos:line="154" pos:column="50">)<pos:position pos:line="154" pos:column="51"/></operator></expr>;<pos:position pos:line="154" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="155" pos:column="9">memcpy<pos:position pos:line="155" pos:column="15"/></name><argument_list pos:line="155" pos:column="15">(<argument><expr><name><name pos:line="155" pos:column="16">Con_Handle<pos:position pos:line="155" pos:column="26"/></name><operator pos:line="155" pos:column="26">-&gt;<pos:position pos:line="155" pos:column="31"/></operator><name pos:line="155" pos:column="28">Encrypt_Key<pos:position pos:line="155" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="41">p<pos:position pos:line="155" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="155" pos:column="44">8<pos:position pos:line="155" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="155" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="47"/></expr_stmt>

        <expr_stmt><expr><name pos:line="157" pos:column="9">p<pos:position pos:line="157" pos:column="10"/></name> <operator pos:line="157" pos:column="11">=<pos:position pos:line="157" pos:column="12"/></operator> <operator pos:line="157" pos:column="13">(<pos:position pos:line="157" pos:column="14"/></operator><call><name pos:line="157" pos:column="14">SMB_Hdr<pos:position pos:line="157" pos:column="21"/></name><argument_list pos:line="157" pos:column="21">(<argument><expr><name pos:line="157" pos:column="22">pkt<pos:position pos:line="157" pos:column="25"/></name></expr></argument>)<pos:position pos:line="157" pos:column="26"/></argument_list></call> <operator pos:line="157" pos:column="27">+<pos:position pos:line="157" pos:column="28"/></operator> <name pos:line="157" pos:column="29">SMB_negrLM_buf_offset<pos:position pos:line="157" pos:column="50"/></name> <operator pos:line="157" pos:column="51">+<pos:position pos:line="157" pos:column="52"/></operator> <name><name pos:line="157" pos:column="53">Con_Handle<pos:position pos:line="157" pos:column="63"/></name><operator pos:line="157" pos:column="63">-&gt;<pos:position pos:line="157" pos:column="68"/></operator><name pos:line="157" pos:column="65">Encrypt_Key_Len<pos:position pos:line="157" pos:column="80"/></name></name><operator pos:line="157" pos:column="80">)<pos:position pos:line="157" pos:column="81"/></operator></expr>;<pos:position pos:line="157" pos:column="82"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="159" pos:column="9">strncpy<pos:position pos:line="159" pos:column="16"/></name><argument_list pos:line="159" pos:column="16">(<argument><expr><name pos:line="159" pos:column="17">p<pos:position pos:line="159" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="159" pos:column="20">Con_Handle<pos:position pos:line="159" pos:column="30"/></name><operator pos:line="159" pos:column="30">-&gt;<pos:position pos:line="159" pos:column="35"/></operator><name pos:line="159" pos:column="32">Svr_PDom<pos:position pos:line="159" pos:column="40"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="159" pos:column="42">sizeof<argument_list pos:line="159" pos:column="48">(<argument><expr><name><name pos:line="159" pos:column="49">Con_Handle<pos:position pos:line="159" pos:column="59"/></name><operator pos:line="159" pos:column="59">-&gt;<pos:position pos:line="159" pos:column="64"/></operator><name pos:line="159" pos:column="61">Svr_PDom<pos:position pos:line="159" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="159" pos:column="70"/></argument_list></sizeof> <operator pos:line="159" pos:column="71">-<pos:position pos:line="159" pos:column="72"/></operator> <literal type="number" pos:line="159" pos:column="73">1<pos:position pos:line="159" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="76"/></expr_stmt>

        <break pos:line="161" pos:column="9">break;<pos:position pos:line="161" pos:column="15"/></break>

    <case pos:line="163" pos:column="5">case <expr><literal type="number" pos:line="163" pos:column="10">17<pos:position pos:line="163" pos:column="12"/></literal></expr>:<pos:position pos:line="163" pos:column="13"/></case>			<comment type="block" pos:line="163" pos:column="33">/* NT LM 0.12 and LN LM 1.0 */</comment>

        <expr_stmt><expr><name><name pos:line="165" pos:column="9">Con_Handle<pos:position pos:line="165" pos:column="19"/></name><operator pos:line="165" pos:column="19">-&gt;<pos:position pos:line="165" pos:column="24"/></operator><name pos:line="165" pos:column="21">Security<pos:position pos:line="165" pos:column="29"/></name></name> <operator pos:line="165" pos:column="30">=<pos:position pos:line="165" pos:column="31"/></operator> <call><name pos:line="165" pos:column="32">SVAL<pos:position pos:line="165" pos:column="36"/></name><argument_list pos:line="165" pos:column="36">(<argument><expr><call><name pos:line="165" pos:column="37">SMB_Hdr<pos:position pos:line="165" pos:column="44"/></name><argument_list pos:line="165" pos:column="44">(<argument><expr><name pos:line="165" pos:column="45">pkt<pos:position pos:line="165" pos:column="48"/></name></expr></argument>)<pos:position pos:line="165" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="165" pos:column="51">SMB_negrNTLM_sec_offset<pos:position pos:line="165" pos:column="74"/></name></expr></argument>)<pos:position pos:line="165" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="166" pos:column="9">Con_Handle<pos:position pos:line="166" pos:column="19"/></name><operator pos:line="166" pos:column="19">-&gt;<pos:position pos:line="166" pos:column="24"/></operator><name pos:line="166" pos:column="21">encrypt_passwords<pos:position pos:line="166" pos:column="38"/></name></name> <operator pos:line="166" pos:column="39">=<pos:position pos:line="166" pos:column="40"/></operator> <operator pos:line="166" pos:column="41">(<pos:position pos:line="166" pos:column="42"/></operator><operator pos:line="166" pos:column="42">(<pos:position pos:line="166" pos:column="43"/></operator><name><name pos:line="166" pos:column="43">Con_Handle<pos:position pos:line="166" pos:column="53"/></name><operator pos:line="166" pos:column="53">-&gt;<pos:position pos:line="166" pos:column="58"/></operator><name pos:line="166" pos:column="55">Security<pos:position pos:line="166" pos:column="63"/></name></name> <operator pos:line="166" pos:column="64">&amp;<pos:position pos:line="166" pos:column="69"/></operator> <name pos:line="166" pos:column="66">SMB_sec_encrypt_mask<pos:position pos:line="166" pos:column="86"/></name><operator pos:line="166" pos:column="86">)<pos:position pos:line="166" pos:column="87"/></operator> <operator pos:line="166" pos:column="88">!=<pos:position pos:line="166" pos:column="90"/></operator> <literal type="number" pos:line="166" pos:column="91">0x00<pos:position pos:line="166" pos:column="95"/></literal><operator pos:line="166" pos:column="95">)<pos:position pos:line="166" pos:column="96"/></operator></expr>;<pos:position pos:line="166" pos:column="97"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="167" pos:column="9">Con_Handle<pos:position pos:line="167" pos:column="19"/></name><operator pos:line="167" pos:column="19">-&gt;<pos:position pos:line="167" pos:column="24"/></operator><name pos:line="167" pos:column="21">Security<pos:position pos:line="167" pos:column="29"/></name></name> <operator pos:line="167" pos:column="30">=<pos:position pos:line="167" pos:column="31"/></operator> <name><name pos:line="167" pos:column="32">Con_Handle<pos:position pos:line="167" pos:column="42"/></name><operator pos:line="167" pos:column="42">-&gt;<pos:position pos:line="167" pos:column="47"/></operator><name pos:line="167" pos:column="44">Security<pos:position pos:line="167" pos:column="52"/></name></name> <operator pos:line="167" pos:column="53">&amp;<pos:position pos:line="167" pos:column="58"/></operator> <name pos:line="167" pos:column="55">SMB_sec_user_mask<pos:position pos:line="167" pos:column="72"/></name></expr>;<pos:position pos:line="167" pos:column="73"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="169" pos:column="9">Con_Handle<pos:position pos:line="169" pos:column="19"/></name><operator pos:line="169" pos:column="19">-&gt;<pos:position pos:line="169" pos:column="24"/></operator><name pos:line="169" pos:column="21">max_xmit<pos:position pos:line="169" pos:column="29"/></name></name> <operator pos:line="169" pos:column="30">=<pos:position pos:line="169" pos:column="31"/></operator> <call><name pos:line="169" pos:column="32">IVAL<pos:position pos:line="169" pos:column="36"/></name><argument_list pos:line="169" pos:column="36">(<argument><expr><call><name pos:line="169" pos:column="37">SMB_Hdr<pos:position pos:line="169" pos:column="44"/></name><argument_list pos:line="169" pos:column="44">(<argument><expr><name pos:line="169" pos:column="45">pkt<pos:position pos:line="169" pos:column="48"/></name></expr></argument>)<pos:position pos:line="169" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="169" pos:column="51">SMB_negrNTLM_mbs_offset<pos:position pos:line="169" pos:column="74"/></name></expr></argument>)<pos:position pos:line="169" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="170" pos:column="9">Con_Handle<pos:position pos:line="170" pos:column="19"/></name><operator pos:line="170" pos:column="19">-&gt;<pos:position pos:line="170" pos:column="24"/></operator><name pos:line="170" pos:column="21">MaxMPX<pos:position pos:line="170" pos:column="27"/></name></name> <operator pos:line="170" pos:column="28">=<pos:position pos:line="170" pos:column="29"/></operator> <call><name pos:line="170" pos:column="30">SVAL<pos:position pos:line="170" pos:column="34"/></name><argument_list pos:line="170" pos:column="34">(<argument><expr><call><name pos:line="170" pos:column="35">SMB_Hdr<pos:position pos:line="170" pos:column="42"/></name><argument_list pos:line="170" pos:column="42">(<argument><expr><name pos:line="170" pos:column="43">pkt<pos:position pos:line="170" pos:column="46"/></name></expr></argument>)<pos:position pos:line="170" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="170" pos:column="49">SMB_negrNTLM_mmc_offset<pos:position pos:line="170" pos:column="72"/></name></expr></argument>)<pos:position pos:line="170" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="171" pos:column="9">Con_Handle<pos:position pos:line="171" pos:column="19"/></name><operator pos:line="171" pos:column="19">-&gt;<pos:position pos:line="171" pos:column="24"/></operator><name pos:line="171" pos:column="21">MaxVC<pos:position pos:line="171" pos:column="26"/></name></name> <operator pos:line="171" pos:column="27">=<pos:position pos:line="171" pos:column="28"/></operator> <call><name pos:line="171" pos:column="29">SVAL<pos:position pos:line="171" pos:column="33"/></name><argument_list pos:line="171" pos:column="33">(<argument><expr><call><name pos:line="171" pos:column="34">SMB_Hdr<pos:position pos:line="171" pos:column="41"/></name><argument_list pos:line="171" pos:column="41">(<argument><expr><name pos:line="171" pos:column="42">pkt<pos:position pos:line="171" pos:column="45"/></name></expr></argument>)<pos:position pos:line="171" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="171" pos:column="48">SMB_negrNTLM_mnv_offset<pos:position pos:line="171" pos:column="71"/></name></expr></argument>)<pos:position pos:line="171" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="172" pos:column="9">Con_Handle<pos:position pos:line="172" pos:column="19"/></name><operator pos:line="172" pos:column="19">-&gt;<pos:position pos:line="172" pos:column="24"/></operator><name pos:line="172" pos:column="21">MaxRaw<pos:position pos:line="172" pos:column="27"/></name></name> <operator pos:line="172" pos:column="28">=<pos:position pos:line="172" pos:column="29"/></operator> <call><name pos:line="172" pos:column="30">IVAL<pos:position pos:line="172" pos:column="34"/></name><argument_list pos:line="172" pos:column="34">(<argument><expr><call><name pos:line="172" pos:column="35">SMB_Hdr<pos:position pos:line="172" pos:column="42"/></name><argument_list pos:line="172" pos:column="42">(<argument><expr><name pos:line="172" pos:column="43">pkt<pos:position pos:line="172" pos:column="46"/></name></expr></argument>)<pos:position pos:line="172" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="172" pos:column="49">SMB_negrNTLM_mrs_offset<pos:position pos:line="172" pos:column="72"/></name></expr></argument>)<pos:position pos:line="172" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="173" pos:column="9">Con_Handle<pos:position pos:line="173" pos:column="19"/></name><operator pos:line="173" pos:column="19">-&gt;<pos:position pos:line="173" pos:column="24"/></operator><name pos:line="173" pos:column="21">SessionKey<pos:position pos:line="173" pos:column="31"/></name></name> <operator pos:line="173" pos:column="32">=<pos:position pos:line="173" pos:column="33"/></operator> <call><name pos:line="173" pos:column="34">IVAL<pos:position pos:line="173" pos:column="38"/></name><argument_list pos:line="173" pos:column="38">(<argument><expr><call><name pos:line="173" pos:column="39">SMB_Hdr<pos:position pos:line="173" pos:column="46"/></name><argument_list pos:line="173" pos:column="46">(<argument><expr><name pos:line="173" pos:column="47">pkt<pos:position pos:line="173" pos:column="50"/></name></expr></argument>)<pos:position pos:line="173" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="173" pos:column="53">SMB_negrNTLM_sk_offset<pos:position pos:line="173" pos:column="75"/></name></expr></argument>)<pos:position pos:line="173" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="174" pos:column="9">Con_Handle<pos:position pos:line="174" pos:column="19"/></name><operator pos:line="174" pos:column="19">-&gt;<pos:position pos:line="174" pos:column="24"/></operator><name pos:line="174" pos:column="21">SvrTZ<pos:position pos:line="174" pos:column="26"/></name></name> <operator pos:line="174" pos:column="27">=<pos:position pos:line="174" pos:column="28"/></operator> <call><name pos:line="174" pos:column="29">SVAL<pos:position pos:line="174" pos:column="33"/></name><argument_list pos:line="174" pos:column="33">(<argument><expr><call><name pos:line="174" pos:column="34">SMB_Hdr<pos:position pos:line="174" pos:column="41"/></name><argument_list pos:line="174" pos:column="41">(<argument><expr><name pos:line="174" pos:column="42">pkt<pos:position pos:line="174" pos:column="45"/></name></expr></argument>)<pos:position pos:line="174" pos:column="46"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="174" pos:column="48">SMB_negrNTLM_stz_offset<pos:position pos:line="174" pos:column="71"/></name></expr></argument>)<pos:position pos:line="174" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="175" pos:column="9">Con_Handle<pos:position pos:line="175" pos:column="19"/></name><operator pos:line="175" pos:column="19">-&gt;<pos:position pos:line="175" pos:column="24"/></operator><name pos:line="175" pos:column="21">Encrypt_Key_Len<pos:position pos:line="175" pos:column="36"/></name></name> <operator pos:line="175" pos:column="37">=<pos:position pos:line="175" pos:column="38"/></operator> <call><name pos:line="175" pos:column="39">CVAL<pos:position pos:line="175" pos:column="43"/></name><argument_list pos:line="175" pos:column="43">(<argument><expr><call><name pos:line="175" pos:column="44">SMB_Hdr<pos:position pos:line="175" pos:column="51"/></name><argument_list pos:line="175" pos:column="51">(<argument><expr><name pos:line="175" pos:column="52">pkt<pos:position pos:line="175" pos:column="55"/></name></expr></argument>)<pos:position pos:line="175" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="175" pos:column="58">SMB_negrNTLM_ekl_offset<pos:position pos:line="175" pos:column="81"/></name></expr></argument>)<pos:position pos:line="175" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="83"/></expr_stmt>

        <expr_stmt><expr><name pos:line="177" pos:column="9">p<pos:position pos:line="177" pos:column="10"/></name> <operator pos:line="177" pos:column="11">=<pos:position pos:line="177" pos:column="12"/></operator> <operator pos:line="177" pos:column="13">(<pos:position pos:line="177" pos:column="14"/></operator><call><name pos:line="177" pos:column="14">SMB_Hdr<pos:position pos:line="177" pos:column="21"/></name><argument_list pos:line="177" pos:column="21">(<argument><expr><name pos:line="177" pos:column="22">pkt<pos:position pos:line="177" pos:column="25"/></name></expr></argument>)<pos:position pos:line="177" pos:column="26"/></argument_list></call> <operator pos:line="177" pos:column="27">+<pos:position pos:line="177" pos:column="28"/></operator> <name pos:line="177" pos:column="29">SMB_negrNTLM_buf_offset<pos:position pos:line="177" pos:column="52"/></name><operator pos:line="177" pos:column="52">)<pos:position pos:line="177" pos:column="53"/></operator></expr>;<pos:position pos:line="177" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="178" pos:column="9">memcpy<pos:position pos:line="178" pos:column="15"/></name><argument_list pos:line="178" pos:column="15">(<argument><expr><name><name pos:line="178" pos:column="16">Con_Handle<pos:position pos:line="178" pos:column="26"/></name><operator pos:line="178" pos:column="26">-&gt;<pos:position pos:line="178" pos:column="31"/></operator><name pos:line="178" pos:column="28">Encrypt_Key<pos:position pos:line="178" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="41">p<pos:position pos:line="178" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="178" pos:column="44">8<pos:position pos:line="178" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="178" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="179" pos:column="9">p<pos:position pos:line="179" pos:column="10"/></name> <operator pos:line="179" pos:column="11">=<pos:position pos:line="179" pos:column="12"/></operator> <operator pos:line="179" pos:column="13">(<pos:position pos:line="179" pos:column="14"/></operator><call><name pos:line="179" pos:column="14">SMB_Hdr<pos:position pos:line="179" pos:column="21"/></name><argument_list pos:line="179" pos:column="21">(<argument><expr><name pos:line="179" pos:column="22">pkt<pos:position pos:line="179" pos:column="25"/></name></expr></argument>)<pos:position pos:line="179" pos:column="26"/></argument_list></call> <operator pos:line="179" pos:column="27">+<pos:position pos:line="179" pos:column="28"/></operator> <name pos:line="179" pos:column="29">SMB_negrNTLM_buf_offset<pos:position pos:line="179" pos:column="52"/></name> <operator pos:line="179" pos:column="53">+<pos:position pos:line="179" pos:column="54"/></operator> <name><name pos:line="179" pos:column="55">Con_Handle<pos:position pos:line="179" pos:column="65"/></name><operator pos:line="179" pos:column="65">-&gt;<pos:position pos:line="179" pos:column="70"/></operator><name pos:line="179" pos:column="67">Encrypt_Key_Len<pos:position pos:line="179" pos:column="82"/></name></name><operator pos:line="179" pos:column="82">)<pos:position pos:line="179" pos:column="83"/></operator></expr>;<pos:position pos:line="179" pos:column="84"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="181" pos:column="9">strncpy<pos:position pos:line="181" pos:column="16"/></name><argument_list pos:line="181" pos:column="16">(<argument><expr><name pos:line="181" pos:column="17">p<pos:position pos:line="181" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="20">Con_Handle<pos:position pos:line="181" pos:column="30"/></name><operator pos:line="181" pos:column="30">-&gt;<pos:position pos:line="181" pos:column="35"/></operator><name pos:line="181" pos:column="32">Svr_PDom<pos:position pos:line="181" pos:column="40"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="181" pos:column="42">sizeof<argument_list pos:line="181" pos:column="48">(<argument><expr><name><name pos:line="181" pos:column="49">Con_Handle<pos:position pos:line="181" pos:column="59"/></name><operator pos:line="181" pos:column="59">-&gt;<pos:position pos:line="181" pos:column="64"/></operator><name pos:line="181" pos:column="61">Svr_PDom<pos:position pos:line="181" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="181" pos:column="70"/></argument_list></sizeof> <operator pos:line="181" pos:column="71">-<pos:position pos:line="181" pos:column="72"/></operator> <literal type="number" pos:line="181" pos:column="73">1<pos:position pos:line="181" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="76"/></expr_stmt>

        <break pos:line="183" pos:column="9">break;<pos:position pos:line="183" pos:column="15"/></break>

    <default pos:line="185" pos:column="5">default:<pos:position pos:line="185" pos:column="13"/></default>

<cpp:ifdef pos:line="187" pos:column="1">#<cpp:directive pos:line="187" pos:column="2">ifdef<pos:position pos:line="187" pos:column="7"/></cpp:directive> <name pos:line="187" pos:column="8">DEBUG<pos:position pos:line="187" pos:column="13"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="188" pos:column="9">fprintf<pos:position pos:line="188" pos:column="16"/></name><argument_list pos:line="188" pos:column="16">(<argument><expr><name pos:line="188" pos:column="17">stderr<pos:position pos:line="188" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="188" pos:column="25">"Unknown NegProt response format ... Ignored\n"<pos:position pos:line="188" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="188" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="189" pos:column="9">fprintf<pos:position pos:line="189" pos:column="16"/></name><argument_list pos:line="189" pos:column="16">(<argument><expr><name pos:line="189" pos:column="17">stderr<pos:position pos:line="189" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="25">"  wct = %i\n"<pos:position pos:line="189" pos:column="39"/></literal></expr></argument>, <argument><expr><call><name pos:line="189" pos:column="41">CVAL<pos:position pos:line="189" pos:column="45"/></name><argument_list pos:line="189" pos:column="45">(<argument><expr><call><name pos:line="189" pos:column="46">SMB_Hdr<pos:position pos:line="189" pos:column="53"/></name><argument_list pos:line="189" pos:column="53">(<argument><expr><name pos:line="189" pos:column="54">pkt<pos:position pos:line="189" pos:column="57"/></name></expr></argument>)<pos:position pos:line="189" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="189" pos:column="60">SMB_hdr_wct_offset<pos:position pos:line="189" pos:column="78"/></name></expr></argument>)<pos:position pos:line="189" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="189" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="81"/></expr_stmt>
<cpp:endif pos:line="190" pos:column="1">#<cpp:directive pos:line="190" pos:column="2">endif<pos:position pos:line="190" pos:column="7"/></cpp:directive></cpp:endif>

        <break pos:line="192" pos:column="9">break;<pos:position pos:line="192" pos:column="15"/></break>
    }<pos:position pos:line="193" pos:column="6"/></block></switch>

<cpp:ifdef pos:line="195" pos:column="1">#<cpp:directive pos:line="195" pos:column="2">ifdef<pos:position pos:line="195" pos:column="7"/></cpp:directive> <name pos:line="195" pos:column="8">DEBUG<pos:position pos:line="195" pos:column="13"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="196" pos:column="5">fprintf<pos:position pos:line="196" pos:column="12"/></name><argument_list pos:line="196" pos:column="12">(<argument><expr><name pos:line="196" pos:column="13">stderr<pos:position pos:line="196" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="196" pos:column="21">"Protocol selected is: %i:%s\n"<pos:position pos:line="196" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="196" pos:column="54">prot<pos:position pos:line="196" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="60">Prots<pos:position pos:line="196" pos:column="65"/></name><index pos:line="196" pos:column="65">[<expr><name pos:line="196" pos:column="66">prot<pos:position pos:line="196" pos:column="70"/></name></expr>]<pos:position pos:line="196" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="196" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="73"/></expr_stmt>
<cpp:endif pos:line="197" pos:column="1">#<cpp:directive pos:line="197" pos:column="2">endif<pos:position pos:line="197" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="199" pos:column="5">RFCNB_Free_Pkt<pos:position pos:line="199" pos:column="19"/></name><argument_list pos:line="199" pos:column="19">(<argument><expr><name pos:line="199" pos:column="20">pkt<pos:position pos:line="199" pos:column="23"/></name></expr></argument>)<pos:position pos:line="199" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="25"/></expr_stmt>
    <return pos:line="200" pos:column="5">return <expr><operator pos:line="200" pos:column="12">(<pos:position pos:line="200" pos:column="13"/></operator><literal type="number" pos:line="200" pos:column="13">0<pos:position pos:line="200" pos:column="14"/></literal><operator pos:line="200" pos:column="14">)<pos:position pos:line="200" pos:column="15"/></operator></expr>;<pos:position pos:line="200" pos:column="16"/></return>

}<pos:position pos:line="202" pos:column="2"/></block></function></unit>
