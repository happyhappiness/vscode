<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2803_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpHeader<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">compact<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">()<pos:position pos:line="2" pos:column="22"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// TODO: optimize removal, or possibly make it so that's not needed.</comment>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">std<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">::<pos:position pos:line="5" pos:column="10"/></operator><name><name pos:line="5" pos:column="10">vector<pos:position pos:line="5" pos:column="16"/></name><argument_list type="generic" pos:line="5" pos:column="16">&lt;<argument><expr><name pos:line="5" pos:column="17">HttpHeaderEntry<pos:position pos:line="5" pos:column="32"/></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier></expr></argument>&gt;<pos:position pos:line="5" pos:column="38"/></argument_list></name><operator pos:line="5" pos:column="35">::<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="37">iterator<pos:position pos:line="5" pos:column="45"/></name></name></type> <name pos:line="5" pos:column="46">newend<pos:position pos:line="5" pos:column="52"/></name></decl>;<pos:position pos:line="5" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">newend<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <call><name><name pos:line="6" pos:column="14">std<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">::<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="19">remove<pos:position pos:line="6" pos:column="25"/></name></name><argument_list pos:line="6" pos:column="25">(<argument><expr><call><name><name pos:line="6" pos:column="26">entries<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">.<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="34">begin<pos:position pos:line="6" pos:column="39"/></name></name><argument_list pos:line="6" pos:column="39">()<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="6" pos:column="43">entries<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">.<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="51">end<pos:position pos:line="6" pos:column="54"/></name></name><argument_list pos:line="6" pos:column="54">()<pos:position pos:line="6" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><cast type="static" pos:line="6" pos:column="58">static_cast<argument_list type="generic" pos:line="6" pos:column="69">&lt;<argument><expr><name pos:line="6" pos:column="70">HttpHeaderEntry<pos:position pos:line="6" pos:column="85"/></name> <operator pos:line="6" pos:column="86">*<pos:position pos:line="6" pos:column="87"/></operator></expr></argument>&gt;<pos:position pos:line="6" pos:column="91"/></argument_list><argument_list pos:line="6" pos:column="88">(<argument><expr><name pos:line="6" pos:column="89">NULL<pos:position pos:line="6" pos:column="93"/></name></expr></argument>)<pos:position pos:line="6" pos:column="94"/></argument_list></cast></expr></argument>)<pos:position pos:line="6" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="96"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">entries<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">.<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">resize<pos:position pos:line="7" pos:column="19"/></name></name><argument_list pos:line="7" pos:column="19">(<argument><expr><name pos:line="7" pos:column="20">newend<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-<pos:position pos:line="7" pos:column="27"/></operator><call><name><name pos:line="7" pos:column="27">entries<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">.<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="35">begin<pos:position pos:line="7" pos:column="40"/></name></name><argument_list pos:line="7" pos:column="40">()<pos:position pos:line="7" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
