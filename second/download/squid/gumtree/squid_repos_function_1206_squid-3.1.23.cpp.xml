<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1206_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">memCheckInit<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">void<pos:position pos:line="2" pos:column="18"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">mem_type<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">t<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>

    <for pos:line="6" pos:column="5">for <control pos:line="6" pos:column="9">(<init><expr><name pos:line="6" pos:column="10">t<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <name pos:line="6" pos:column="14">MEM_NONE<pos:position pos:line="6" pos:column="22"/></name></expr><operator pos:line="6" pos:column="22">,<pos:position pos:line="6" pos:column="23"/></operator> <expr><operator pos:line="6" pos:column="24">++<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">t<pos:position pos:line="6" pos:column="27"/></name></expr>;<pos:position pos:line="6" pos:column="28"/></init> <condition><expr><name pos:line="6" pos:column="29">t<pos:position pos:line="6" pos:column="30"/></name> <operator pos:line="6" pos:column="31">&lt;<pos:position pos:line="6" pos:column="35"/></operator> <name pos:line="6" pos:column="33">MEM_MAX<pos:position pos:line="6" pos:column="40"/></name></expr>;<pos:position pos:line="6" pos:column="41"/></condition> <incr><expr><operator pos:line="6" pos:column="42">++<pos:position pos:line="6" pos:column="44"/></operator><name pos:line="6" pos:column="44">t<pos:position pos:line="6" pos:column="45"/></name></expr></incr>)<pos:position pos:line="6" pos:column="46"/></control> <block pos:line="6" pos:column="47">{
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">MEM_DONTFREE<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">==<pos:position pos:line="7" pos:column="28"/></operator> <name pos:line="7" pos:column="29">t<pos:position pos:line="7" pos:column="30"/></name></expr>)<pos:position pos:line="7" pos:column="31"/></condition><then pos:line="7" pos:column="31">
            <block type="pseudo"><continue pos:line="8" pos:column="13">continue;<pos:position pos:line="8" pos:column="22"/></continue></block></then></if>

        <comment type="block" pos:line="10" pos:column="9">/*
         * If you hit this assertion, then you forgot to add a
         * memDataInit() line for type 't'.
         */</comment>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">assert<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name><name pos:line="14" pos:column="16">MemPools<pos:position pos:line="14" pos:column="24"/></name><index pos:line="14" pos:column="24">[<expr><name pos:line="14" pos:column="25">t<pos:position pos:line="14" pos:column="26"/></name></expr>]<pos:position pos:line="14" pos:column="27"/></index></name></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></for>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
