<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3873_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">XactionRep<pos:position pos:line="2" pos:column="29"/></name><operator pos:line="2" pos:column="29">::<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">moveAbContent<pos:position pos:line="2" pos:column="44"/></name></name><parameter_list pos:line="2" pos:column="44">()<pos:position pos:line="2" pos:column="46"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">Must<pos:position pos:line="4" pos:column="9"/></name><argument_list pos:line="4" pos:column="9">(<argument><expr><name pos:line="4" pos:column="10">proxyingAb<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">==<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="24">opOn<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name><name pos:line="5" pos:column="11">libecap<pos:position pos:line="5" pos:column="18"/></name><operator pos:line="5" pos:column="18">::<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">Area<pos:position pos:line="5" pos:column="24"/></name></name></type> <name pos:line="5" pos:column="25">c<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><call><name><name pos:line="5" pos:column="29">theMaster<pos:position pos:line="5" pos:column="38"/></name><operator pos:line="5" pos:column="38">-&gt;<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="40">abContent<pos:position pos:line="5" pos:column="49"/></name></name><argument_list pos:line="5" pos:column="49">(<argument><expr><literal type="number" pos:line="5" pos:column="50">0<pos:position pos:line="5" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="5" pos:column="53">libecap<pos:position pos:line="5" pos:column="60"/></name><operator pos:line="5" pos:column="60">::<pos:position pos:line="5" pos:column="62"/></operator><name pos:line="5" pos:column="62">nsize<pos:position pos:line="5" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="69"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">93<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="6" pos:column="15">5<pos:position pos:line="6" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="18">HERE<pos:position pos:line="6" pos:column="22"/></name> <operator pos:line="6" pos:column="23">&lt;&lt;<pos:position pos:line="6" pos:column="31"/></operator> <literal type="string" pos:line="6" pos:column="26">"up to "<pos:position pos:line="6" pos:column="34"/></literal> <operator pos:line="6" pos:column="35">&lt;&lt;<pos:position pos:line="6" pos:column="43"/></operator> <name><name pos:line="6" pos:column="38">c<pos:position pos:line="6" pos:column="39"/></name><operator pos:line="6" pos:column="39">.<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="40">size<pos:position pos:line="6" pos:column="44"/></name></name> <operator pos:line="6" pos:column="45">&lt;&lt;<pos:position pos:line="6" pos:column="53"/></operator> <literal type="string" pos:line="6" pos:column="48">" bytes"<pos:position pos:line="6" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="58"/></expr_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">c<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">.<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">size<pos:position pos:line="7" pos:column="15"/></name></name> <operator pos:line="7" pos:column="16">==<pos:position pos:line="7" pos:column="18"/></operator> <literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal> <operator pos:line="7" pos:column="21">&amp;&amp;<pos:position pos:line="7" pos:column="31"/></operator> <name pos:line="7" pos:column="24">abProductionFinished<pos:position pos:line="7" pos:column="44"/></name></expr>)<pos:position pos:line="7" pos:column="45"/></condition><then pos:line="7" pos:column="45"> <block pos:line="7" pos:column="46">{ <comment type="line" pos:line="7" pos:column="48">// no ab now and in the future</comment>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">stopProducingFor<pos:position pos:line="8" pos:column="25"/></name><argument_list pos:line="8" pos:column="25">(<argument><expr><call><name pos:line="8" pos:column="26">answer<pos:position pos:line="8" pos:column="32"/></name><argument_list pos:line="8" pos:column="32">()<pos:position pos:line="8" pos:column="34"/></argument_list></call><operator pos:line="8" pos:column="34">.<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="35">body_pipe<pos:position pos:line="8" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="46">abProductionAtEnd<pos:position pos:line="8" pos:column="63"/></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><name pos:line="9" pos:column="9">proxyingAb<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <name pos:line="9" pos:column="22">opComplete<pos:position pos:line="9" pos:column="32"/></name></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">93<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="10" pos:column="19">5<pos:position pos:line="10" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="22">HERE<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">&lt;&lt;<pos:position pos:line="10" pos:column="35"/></operator> <literal type="string" pos:line="10" pos:column="30">"last adapted body data retrieved"<pos:position pos:line="10" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then> <elseif pos:line="11" pos:column="7">else <if pos:line="11" pos:column="12">if <condition pos:line="11" pos:column="15">(<expr><name><name pos:line="11" pos:column="16">c<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">.<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">size<pos:position pos:line="11" pos:column="22"/></name></name> <operator pos:line="11" pos:column="23">&gt;<pos:position pos:line="11" pos:column="27"/></operator> <literal type="number" pos:line="11" pos:column="25">0<pos:position pos:line="11" pos:column="26"/></literal></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <block pos:line="11" pos:column="28">{
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<decl><type><specifier pos:line="12" pos:column="13">const<pos:position pos:line="12" pos:column="18"/></specifier> <name pos:line="12" pos:column="19">size_t<pos:position pos:line="12" pos:column="25"/></name></type> <name pos:line="12" pos:column="26">used<pos:position pos:line="12" pos:column="30"/></name> <init pos:line="12" pos:column="31">= <expr><call><name pos:line="12" pos:column="33">answer<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">()<pos:position pos:line="12" pos:column="41"/></argument_list></call><operator pos:line="12" pos:column="41">.<pos:position pos:line="12" pos:column="42"/></operator><call><name><name pos:line="12" pos:column="42">body_pipe<pos:position pos:line="12" pos:column="51"/></name><operator pos:line="12" pos:column="51">-&gt;<pos:position pos:line="12" pos:column="56"/></operator><name pos:line="12" pos:column="53">putMoreData<pos:position pos:line="12" pos:column="64"/></name></name><argument_list pos:line="12" pos:column="64">(<argument><expr><name><name pos:line="12" pos:column="65">c<pos:position pos:line="12" pos:column="66"/></name><operator pos:line="12" pos:column="66">.<pos:position pos:line="12" pos:column="67"/></operator><name pos:line="12" pos:column="67">start<pos:position pos:line="12" pos:column="72"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="74">c<pos:position pos:line="12" pos:column="75"/></name><operator pos:line="12" pos:column="75">.<pos:position pos:line="12" pos:column="76"/></operator><name pos:line="12" pos:column="76">size<pos:position pos:line="12" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="81"/></argument_list></call></expr></init></decl>)<pos:position pos:line="12" pos:column="82"/></condition><then pos:line="12" pos:column="82">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="13" pos:column="13">theMaster<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">-&gt;<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="24">abContentShift<pos:position pos:line="13" pos:column="38"/></name></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">used<pos:position pos:line="13" pos:column="43"/></name></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt></block></then></if>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if></elseif></if>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
