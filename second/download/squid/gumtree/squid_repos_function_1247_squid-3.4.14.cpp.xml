<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1247_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Mem<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Init<pos:position pos:line="2" pos:column="10"/></name></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><name pos:line="2" pos:column="11">void<pos:position pos:line="2" pos:column="15"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="16"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>

    <comment type="block" format="doxygen" pos:line="6" pos:column="5">/** \par
     * NOTE: Mem::Init() is called before the config file is parsed
     * and before the debugging module has been initialized.  Any
     * debug messages here at level 0 or 1 will always be printed
     * on stderr.
     */</comment>

    <comment type="block" format="doxygen" pos:line="13" pos:column="5">/** \par
     * Set all pointers to null. */</comment>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">memset<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">MemPools<pos:position pos:line="15" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="22">'\0'<pos:position pos:line="15" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="28">sizeof<argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">MemPools<pos:position pos:line="15" pos:column="43"/></name></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="46"/></expr_stmt>
    <comment type="block" format="doxygen" pos:line="16" pos:column="5">/**
     * Then initialize all pools.
     * \par
     * Starting with generic 2kB - 64kB buffr pools, then specific object types.
     * \par
     * It does not hurt much to have a lot of pools since sizeof(MemPool) is
     * small; someday we will figure out what to do with all the entries here
     * that are never used or used only once; perhaps we should simply use
     * malloc() for those? @?@
     */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">memDataInit<pos:position pos:line="26" pos:column="16"/></name><argument_list pos:line="26" pos:column="16">(<argument><expr><name pos:line="26" pos:column="17">MEM_2K_BUF<pos:position pos:line="26" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="29">"2K Buffer"<pos:position pos:line="26" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="42">2048<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="48">10<pos:position pos:line="26" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="26" pos:column="52">false<pos:position pos:line="26" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">memDataInit<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">MEM_4K_BUF<pos:position pos:line="27" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="29">"4K Buffer"<pos:position pos:line="27" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="42">4096<pos:position pos:line="27" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="48">10<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="27" pos:column="52">false<pos:position pos:line="27" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">memDataInit<pos:position pos:line="28" pos:column="16"/></name><argument_list pos:line="28" pos:column="16">(<argument><expr><name pos:line="28" pos:column="17">MEM_8K_BUF<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="29">"8K Buffer"<pos:position pos:line="28" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="42">8192<pos:position pos:line="28" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="48">10<pos:position pos:line="28" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="28" pos:column="52">false<pos:position pos:line="28" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">memDataInit<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">MEM_16K_BUF<pos:position pos:line="29" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="30">"16K Buffer"<pos:position pos:line="29" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="44">16384<pos:position pos:line="29" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="51">10<pos:position pos:line="29" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="29" pos:column="55">false<pos:position pos:line="29" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">memDataInit<pos:position pos:line="30" pos:column="16"/></name><argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">MEM_32K_BUF<pos:position pos:line="30" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="30">"32K Buffer"<pos:position pos:line="30" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="44">32768<pos:position pos:line="30" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="51">10<pos:position pos:line="30" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="30" pos:column="55">false<pos:position pos:line="30" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">memDataInit<pos:position pos:line="31" pos:column="16"/></name><argument_list pos:line="31" pos:column="16">(<argument><expr><name pos:line="31" pos:column="17">MEM_64K_BUF<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="30">"64K Buffer"<pos:position pos:line="31" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="44">65536<pos:position pos:line="31" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="51">10<pos:position pos:line="31" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="31" pos:column="55">false<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">memDataInit<pos:position pos:line="32" pos:column="16"/></name><argument_list pos:line="32" pos:column="16">(<argument><expr><name pos:line="32" pos:column="17">MEM_ACL_DENY_INFO_LIST<pos:position pos:line="32" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="41">"AclDenyInfoList"<pos:position pos:line="32" pos:column="58"/></literal></expr></argument>,
                <argument><expr><sizeof pos:line="33" pos:column="17">sizeof<argument_list pos:line="33" pos:column="23">(<argument><expr><name pos:line="33" pos:column="24">AclDenyInfoList<pos:position pos:line="33" pos:column="39"/></name></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="42">0<pos:position pos:line="33" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">memDataInit<pos:position pos:line="34" pos:column="16"/></name><argument_list pos:line="34" pos:column="16">(<argument><expr><name pos:line="34" pos:column="17">MEM_ACL_NAME_LIST<pos:position pos:line="34" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="36">"acl_name_list"<pos:position pos:line="34" pos:column="51"/></literal></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="53">sizeof<argument_list pos:line="34" pos:column="59">(<argument><expr><name pos:line="34" pos:column="60">AclNameList<pos:position pos:line="34" pos:column="71"/></name></expr></argument>)<pos:position pos:line="34" pos:column="72"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="74">0<pos:position pos:line="34" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="77"/></expr_stmt>
<cpp:if pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">if<pos:position pos:line="35" pos:column="4"/></cpp:directive> <expr><name pos:line="35" pos:column="5">USE_CACHE_DIGESTS<pos:position pos:line="35" pos:column="22"/></name></expr></cpp:if>

    <expr_stmt><expr><call><name pos:line="37" pos:column="5">memDataInit<pos:position pos:line="37" pos:column="16"/></name><argument_list pos:line="37" pos:column="16">(<argument><expr><name pos:line="37" pos:column="17">MEM_CACHE_DIGEST<pos:position pos:line="37" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="35">"CacheDigest"<pos:position pos:line="37" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="50">sizeof<argument_list pos:line="37" pos:column="56">(<argument><expr><name pos:line="37" pos:column="57">CacheDigest<pos:position pos:line="37" pos:column="68"/></name></expr></argument>)<pos:position pos:line="37" pos:column="69"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="71">0<pos:position pos:line="37" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="74"/></expr_stmt>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">memDataInit<pos:position pos:line="40" pos:column="16"/></name><argument_list pos:line="40" pos:column="16">(<argument><expr><name pos:line="40" pos:column="17">MEM_LINK_LIST<pos:position pos:line="40" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="32">"link_list"<pos:position pos:line="40" pos:column="43"/></literal></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="45">sizeof<argument_list pos:line="40" pos:column="51">(<argument><expr><name pos:line="40" pos:column="52">link_list<pos:position pos:line="40" pos:column="61"/></name></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="64">10<pos:position pos:line="40" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">memDataInit<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><name pos:line="41" pos:column="17">MEM_DLINK_NODE<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="33">"dlink_node"<pos:position pos:line="41" pos:column="45"/></literal></expr></argument>, <argument><expr><sizeof pos:line="41" pos:column="47">sizeof<argument_list pos:line="41" pos:column="53">(<argument><expr><name pos:line="41" pos:column="54">dlink_node<pos:position pos:line="41" pos:column="64"/></name></expr></argument>)<pos:position pos:line="41" pos:column="65"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="67">10<pos:position pos:line="41" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">memDataInit<pos:position pos:line="42" pos:column="16"/></name><argument_list pos:line="42" pos:column="16">(<argument><expr><name pos:line="42" pos:column="17">MEM_DREAD_CTRL<pos:position pos:line="42" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="33">"dread_ctrl"<pos:position pos:line="42" pos:column="45"/></literal></expr></argument>, <argument><expr><sizeof pos:line="42" pos:column="47">sizeof<argument_list pos:line="42" pos:column="53">(<argument><expr><name pos:line="42" pos:column="54">dread_ctrl<pos:position pos:line="42" pos:column="64"/></name></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="67">0<pos:position pos:line="42" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">memDataInit<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">MEM_DWRITE_Q<pos:position pos:line="43" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="31">"dwrite_q"<pos:position pos:line="43" pos:column="41"/></literal></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="43">sizeof<argument_list pos:line="43" pos:column="49">(<argument><expr><name pos:line="43" pos:column="50">dwrite_q<pos:position pos:line="43" pos:column="58"/></name></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="61">0<pos:position pos:line="43" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">memDataInit<pos:position pos:line="44" pos:column="16"/></name><argument_list pos:line="44" pos:column="16">(<argument><expr><name pos:line="44" pos:column="17">MEM_HTTP_HDR_CONTENT_RANGE<pos:position pos:line="44" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="45">"HttpHdrContRange"<pos:position pos:line="44" pos:column="63"/></literal></expr></argument>, <argument><expr><sizeof pos:line="44" pos:column="65">sizeof<argument_list pos:line="44" pos:column="71">(<argument><expr><name pos:line="44" pos:column="72">HttpHdrContRange<pos:position pos:line="44" pos:column="88"/></name></expr></argument>)<pos:position pos:line="44" pos:column="89"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="91">0<pos:position pos:line="44" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="94"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">memDataInit<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">(<argument><expr><name pos:line="45" pos:column="17">MEM_NETDBENTRY<pos:position pos:line="45" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="33">"netdbEntry"<pos:position pos:line="45" pos:column="45"/></literal></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="47">sizeof<argument_list pos:line="45" pos:column="53">(<argument><expr><name pos:line="45" pos:column="54">netdbEntry<pos:position pos:line="45" pos:column="64"/></name></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="67">0<pos:position pos:line="45" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">memDataInit<pos:position pos:line="46" pos:column="16"/></name><argument_list pos:line="46" pos:column="16">(<argument><expr><name pos:line="46" pos:column="17">MEM_NET_DB_NAME<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="34">"net_db_name"<pos:position pos:line="46" pos:column="47"/></literal></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="49">sizeof<argument_list pos:line="46" pos:column="55">(<argument><expr><name pos:line="46" pos:column="56">net_db_name<pos:position pos:line="46" pos:column="67"/></name></expr></argument>)<pos:position pos:line="46" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="70">0<pos:position pos:line="46" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">memDataInit<pos:position pos:line="47" pos:column="16"/></name><argument_list pos:line="47" pos:column="16">(<argument><expr><name pos:line="47" pos:column="17">MEM_RELIST<pos:position pos:line="47" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="29">"RegexList"<pos:position pos:line="47" pos:column="40"/></literal></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="42">sizeof<argument_list pos:line="47" pos:column="48">(<argument><expr><name pos:line="47" pos:column="49">RegexList<pos:position pos:line="47" pos:column="58"/></name></expr></argument>)<pos:position pos:line="47" pos:column="59"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="61">0<pos:position pos:line="47" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">memDataInit<pos:position pos:line="48" pos:column="16"/></name><argument_list pos:line="48" pos:column="16">(<argument><expr><name pos:line="48" pos:column="17">MEM_CLIENT_INFO<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="34">"ClientInfo"<pos:position pos:line="48" pos:column="46"/></literal></expr></argument>, <argument><expr><sizeof pos:line="48" pos:column="48">sizeof<argument_list pos:line="48" pos:column="54">(<argument><expr><name pos:line="48" pos:column="55">ClientInfo<pos:position pos:line="48" pos:column="65"/></name></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="68">0<pos:position pos:line="48" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">memDataInit<pos:position pos:line="49" pos:column="16"/></name><argument_list pos:line="49" pos:column="16">(<argument><expr><name pos:line="49" pos:column="17">MEM_MD5_DIGEST<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="33">"MD5 digest"<pos:position pos:line="49" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="47">SQUID_MD5_DIGEST_LENGTH<pos:position pos:line="49" pos:column="70"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="72">0<pos:position pos:line="49" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">MemPools<pos:position pos:line="50" pos:column="13"/></name><index pos:line="50" pos:column="13">[<expr><name pos:line="50" pos:column="14">MEM_MD5_DIGEST<pos:position pos:line="50" pos:column="28"/></name></expr>]<pos:position pos:line="50" pos:column="29"/></index></name><operator pos:line="50" pos:column="29">-&gt;<pos:position pos:line="50" pos:column="34"/></operator><call><name pos:line="50" pos:column="31">setChunkSize<pos:position pos:line="50" pos:column="43"/></name><argument_list pos:line="50" pos:column="43">(<argument><expr><literal type="number" pos:line="50" pos:column="44">512<pos:position pos:line="50" pos:column="47"/></literal> <operator pos:line="50" pos:column="48">*<pos:position pos:line="50" pos:column="49"/></operator> <literal type="number" pos:line="50" pos:column="50">1024<pos:position pos:line="50" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="56"/></expr_stmt>

    <comment type="block" format="doxygen" pos:line="52" pos:column="5">/** Lastly init the string pools. */</comment>
    <for pos:line="53" pos:column="5">for <control pos:line="53" pos:column="9">(<init><expr><name pos:line="53" pos:column="10">i<pos:position pos:line="53" pos:column="11"/></name> <operator pos:line="53" pos:column="12">=<pos:position pos:line="53" pos:column="13"/></operator> <literal type="number" pos:line="53" pos:column="14">0<pos:position pos:line="53" pos:column="15"/></literal></expr>;<pos:position pos:line="53" pos:column="16"/></init> <condition><expr><name pos:line="53" pos:column="17">i<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">&lt;<pos:position pos:line="53" pos:column="23"/></operator> <name pos:line="53" pos:column="21">mem_str_pool_count<pos:position pos:line="53" pos:column="39"/></name></expr>;<pos:position pos:line="53" pos:column="40"/></condition> <incr><expr><operator pos:line="53" pos:column="41">++<pos:position pos:line="53" pos:column="43"/></operator><name pos:line="53" pos:column="43">i<pos:position pos:line="53" pos:column="44"/></name></expr></incr>)<pos:position pos:line="53" pos:column="45"/></control> <block pos:line="53" pos:column="46">{
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">StrPools<pos:position pos:line="54" pos:column="17"/></name><index pos:line="54" pos:column="17">[<expr><name pos:line="54" pos:column="18">i<pos:position pos:line="54" pos:column="19"/></name></expr>]<pos:position pos:line="54" pos:column="20"/></index></name><operator pos:line="54" pos:column="20">.<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="21">pool<pos:position pos:line="54" pos:column="25"/></name> <operator pos:line="54" pos:column="26">=<pos:position pos:line="54" pos:column="27"/></operator> <call><name pos:line="54" pos:column="28">memPoolCreate<pos:position pos:line="54" pos:column="41"/></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name><name pos:line="54" pos:column="42">StrPoolsAttrs<pos:position pos:line="54" pos:column="55"/></name><index pos:line="54" pos:column="55">[<expr><name pos:line="54" pos:column="56">i<pos:position pos:line="54" pos:column="57"/></name></expr>]<pos:position pos:line="54" pos:column="58"/></index></name><operator pos:line="54" pos:column="58">.<pos:position pos:line="54" pos:column="59"/></operator><name pos:line="54" pos:column="59">name<pos:position pos:line="54" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="65">StrPoolsAttrs<pos:position pos:line="54" pos:column="78"/></name><index pos:line="54" pos:column="78">[<expr><name pos:line="54" pos:column="79">i<pos:position pos:line="54" pos:column="80"/></name></expr>]<pos:position pos:line="54" pos:column="81"/></index></name><operator pos:line="54" pos:column="81">.<pos:position pos:line="54" pos:column="82"/></operator><name pos:line="54" pos:column="82">obj_size<pos:position pos:line="54" pos:column="90"/></name></expr></argument>)<pos:position pos:line="54" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="92"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">StrPools<pos:position pos:line="55" pos:column="17"/></name><index pos:line="55" pos:column="17">[<expr><name pos:line="55" pos:column="18">i<pos:position pos:line="55" pos:column="19"/></name></expr>]<pos:position pos:line="55" pos:column="20"/></index></name><operator pos:line="55" pos:column="20">.<pos:position pos:line="55" pos:column="21"/></operator><call><name><name pos:line="55" pos:column="21">pool<pos:position pos:line="55" pos:column="25"/></name><operator pos:line="55" pos:column="25">-&gt;<pos:position pos:line="55" pos:column="30"/></operator><name pos:line="55" pos:column="27">zeroBlocks<pos:position pos:line="55" pos:column="37"/></name></name><argument_list pos:line="55" pos:column="37">(<argument><expr><literal type="boolean" pos:line="55" pos:column="38">false<pos:position pos:line="55" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>

        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name><name pos:line="57" pos:column="13">StrPools<pos:position pos:line="57" pos:column="21"/></name><index pos:line="57" pos:column="21">[<expr><name pos:line="57" pos:column="22">i<pos:position pos:line="57" pos:column="23"/></name></expr>]<pos:position pos:line="57" pos:column="24"/></index></name><operator pos:line="57" pos:column="24">.<pos:position pos:line="57" pos:column="25"/></operator><call><name><name pos:line="57" pos:column="25">pool<pos:position pos:line="57" pos:column="29"/></name><operator pos:line="57" pos:column="29">-&gt;<pos:position pos:line="57" pos:column="34"/></operator><name pos:line="57" pos:column="31">objectSize<pos:position pos:line="57" pos:column="41"/></name></name><argument_list pos:line="57" pos:column="41">()<pos:position pos:line="57" pos:column="43"/></argument_list></call> <operator pos:line="57" pos:column="44">!=<pos:position pos:line="57" pos:column="46"/></operator> <name><name pos:line="57" pos:column="47">StrPoolsAttrs<pos:position pos:line="57" pos:column="60"/></name><index pos:line="57" pos:column="60">[<expr><name pos:line="57" pos:column="61">i<pos:position pos:line="57" pos:column="62"/></name></expr>]<pos:position pos:line="57" pos:column="63"/></index></name><operator pos:line="57" pos:column="63">.<pos:position pos:line="57" pos:column="64"/></operator><name pos:line="57" pos:column="64">obj_size<pos:position pos:line="57" pos:column="72"/></name></expr>)<pos:position pos:line="57" pos:column="73"/></condition><then pos:line="57" pos:column="73">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="13">debugs<pos:position pos:line="58" pos:column="19"/></name><argument_list pos:line="58" pos:column="19">(<argument><expr><literal type="number" pos:line="58" pos:column="20">13<pos:position pos:line="58" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="24">DBG_IMPORTANT<pos:position pos:line="58" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="39">"Notice: "<pos:position pos:line="58" pos:column="49"/></literal> <operator pos:line="58" pos:column="50">&lt;&lt;<pos:position pos:line="58" pos:column="58"/></operator> <name><name pos:line="58" pos:column="53">StrPoolsAttrs<pos:position pos:line="58" pos:column="66"/></name><index pos:line="58" pos:column="66">[<expr><name pos:line="58" pos:column="67">i<pos:position pos:line="58" pos:column="68"/></name></expr>]<pos:position pos:line="58" pos:column="69"/></index></name><operator pos:line="58" pos:column="69">.<pos:position pos:line="58" pos:column="70"/></operator><name pos:line="58" pos:column="70">name<pos:position pos:line="58" pos:column="74"/></name> <operator pos:line="58" pos:column="75">&lt;&lt;<pos:position pos:line="58" pos:column="83"/></operator> <literal type="string" pos:line="58" pos:column="78">" is "<pos:position pos:line="58" pos:column="84"/></literal> <operator pos:line="58" pos:column="85">&lt;&lt;<pos:position pos:line="58" pos:column="93"/></operator> <name><name pos:line="58" pos:column="88">StrPools<pos:position pos:line="58" pos:column="96"/></name><index pos:line="58" pos:column="96">[<expr><name pos:line="58" pos:column="97">i<pos:position pos:line="58" pos:column="98"/></name></expr>]<pos:position pos:line="58" pos:column="99"/></index></name><operator pos:line="58" pos:column="99">.<pos:position pos:line="58" pos:column="100"/></operator><call><name><name pos:line="58" pos:column="100">pool<pos:position pos:line="58" pos:column="104"/></name><operator pos:line="58" pos:column="104">-&gt;<pos:position pos:line="58" pos:column="109"/></operator><name pos:line="58" pos:column="106">objectSize<pos:position pos:line="58" pos:column="116"/></name></name><argument_list pos:line="58" pos:column="116">()<pos:position pos:line="58" pos:column="118"/></argument_list></call> <operator pos:line="58" pos:column="119">&lt;&lt;<pos:position pos:line="58" pos:column="127"/></operator> <literal type="string" pos:line="58" pos:column="122">" bytes instead of requested "<pos:position pos:line="58" pos:column="152"/></literal> <operator pos:line="58" pos:column="153">&lt;&lt;<pos:position pos:line="58" pos:column="161"/></operator> <name><name pos:line="58" pos:column="156">StrPoolsAttrs<pos:position pos:line="58" pos:column="169"/></name><index pos:line="58" pos:column="169">[<expr><name pos:line="58" pos:column="170">i<pos:position pos:line="58" pos:column="171"/></name></expr>]<pos:position pos:line="58" pos:column="172"/></index></name><operator pos:line="58" pos:column="172">.<pos:position pos:line="58" pos:column="173"/></operator><name pos:line="58" pos:column="173">obj_size<pos:position pos:line="58" pos:column="181"/></name> <operator pos:line="58" pos:column="182">&lt;&lt;<pos:position pos:line="58" pos:column="190"/></operator> <literal type="string" pos:line="58" pos:column="185">" bytes"<pos:position pos:line="58" pos:column="193"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="194"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="195"/></expr_stmt></block></then></if>
    }<pos:position pos:line="59" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="61" pos:column="5">MemIsInitialized<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">=<pos:position pos:line="61" pos:column="23"/></operator> <literal type="boolean" pos:line="61" pos:column="24">true<pos:position pos:line="61" pos:column="28"/></literal></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
    <comment type="block" format="doxygen" pos:line="62" pos:column="5">/** \par
     * finally register with the cache manager */</comment>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">RegisterWithCacheManager<pos:position pos:line="64" pos:column="29"/></name><argument_list pos:line="64" pos:column="29">()<pos:position pos:line="64" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
