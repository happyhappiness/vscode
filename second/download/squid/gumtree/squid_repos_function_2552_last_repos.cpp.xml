<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2552_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Store<pos:position pos:line="1" pos:column="6"/></name><operator pos:line="1" pos:column="6">::<pos:position pos:line="1" pos:column="8"/></operator><name pos:line="1" pos:column="8">Disk<pos:position pos:line="1" pos:column="12"/></name></name> <modifier pos:line="1" pos:column="13">&amp;<pos:position pos:line="1" pos:column="18"/></modifier></type>
<name><name pos:line="2" pos:column="1">StoreEntry<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">disk<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">()<pos:position pos:line="2" pos:column="19"/></parameter_list> <specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">0<pos:position pos:line="4" pos:column="13"/></literal> <operator pos:line="4" pos:column="14">&lt;=<pos:position pos:line="4" pos:column="19"/></operator> <name pos:line="4" pos:column="17">swap_dirn<pos:position pos:line="4" pos:column="26"/></name> <operator pos:line="4" pos:column="27">&amp;&amp;<pos:position pos:line="4" pos:column="37"/></operator> <name pos:line="4" pos:column="30">swap_dirn<pos:position pos:line="4" pos:column="39"/></name> <operator pos:line="4" pos:column="40">&lt;<pos:position pos:line="4" pos:column="44"/></operator> <name><name pos:line="4" pos:column="42">Config<pos:position pos:line="4" pos:column="48"/></name><operator pos:line="4" pos:column="48">.<pos:position pos:line="4" pos:column="49"/></operator><name pos:line="4" pos:column="49">cacheSwap<pos:position pos:line="4" pos:column="58"/></name><operator pos:line="4" pos:column="58">.<pos:position pos:line="4" pos:column="59"/></operator><name pos:line="4" pos:column="59">n_configured<pos:position pos:line="4" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="73"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name><name pos:line="5" pos:column="11">RefCount<pos:position pos:line="5" pos:column="19"/></name><argument_list type="generic" pos:line="5" pos:column="19">&lt;<argument><expr><name><name pos:line="5" pos:column="20">Store<pos:position pos:line="5" pos:column="25"/></name><operator pos:line="5" pos:column="25">::<pos:position pos:line="5" pos:column="27"/></operator><name pos:line="5" pos:column="27">Disk<pos:position pos:line="5" pos:column="31"/></name></name></expr></argument>&gt;<pos:position pos:line="5" pos:column="35"/></argument_list></name> <modifier pos:line="5" pos:column="33">&amp;<pos:position pos:line="5" pos:column="38"/></modifier></type><name pos:line="5" pos:column="34">sd<pos:position pos:line="5" pos:column="36"/></name> <init pos:line="5" pos:column="37">= <expr><call><name pos:line="5" pos:column="39">INDEXSD<pos:position pos:line="5" pos:column="46"/></name><argument_list pos:line="5" pos:column="46">(<argument><expr><name pos:line="5" pos:column="47">swap_dirn<pos:position pos:line="5" pos:column="56"/></name></expr></argument>)<pos:position pos:line="5" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="58"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">sd<pos:position pos:line="6" pos:column="14"/></name></expr></argument>)<pos:position pos:line="6" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="16"/></expr_stmt>
    <return pos:line="7" pos:column="5">return <expr><operator pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">sd<pos:position pos:line="7" pos:column="15"/></name></expr>;<pos:position pos:line="7" pos:column="16"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
