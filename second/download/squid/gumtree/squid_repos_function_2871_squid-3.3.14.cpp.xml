<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2871_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">ChunkedCodingParser<pos:position pos:line="1" pos:column="25"/></name><operator pos:line="1" pos:column="25">::<pos:position pos:line="1" pos:column="27"/></operator><name pos:line="1" pos:column="27">parse<pos:position pos:line="1" pos:column="32"/></name></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">MemBuf<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">rawData<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">MemBuf<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">parsedContent<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">rawData<pos:position pos:line="3" pos:column="17"/></name> <operator pos:line="3" pos:column="18">&amp;&amp;<pos:position pos:line="3" pos:column="28"/></operator> <name pos:line="3" pos:column="21">parsedContent<pos:position pos:line="3" pos:column="34"/></name></expr></argument>)<pos:position pos:line="3" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="4" pos:column="5">theIn<pos:position pos:line="4" pos:column="10"/></name> <operator pos:line="4" pos:column="11">=<pos:position pos:line="4" pos:column="12"/></operator> <name pos:line="4" pos:column="13">rawData<pos:position pos:line="4" pos:column="20"/></name></expr>;<pos:position pos:line="4" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">theOut<pos:position pos:line="5" pos:column="11"/></name> <operator pos:line="5" pos:column="12">=<pos:position pos:line="5" pos:column="13"/></operator> <name pos:line="5" pos:column="14">parsedContent<pos:position pos:line="5" pos:column="27"/></name></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>

    <comment type="line" pos:line="7" pos:column="5">// we must reset this all the time so that mayContinue() lets us</comment>
    <comment type="line" pos:line="8" pos:column="5">// output more content if we stopped due to needsMoreSpace() before</comment>
    <expr_stmt><expr><name pos:line="9" pos:column="5">doNeedMoreData<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">=<pos:position pos:line="9" pos:column="21"/></operator> <operator pos:line="9" pos:column="22">!<pos:position pos:line="9" pos:column="23"/></operator><call><name><name pos:line="9" pos:column="23">theIn<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">hasContent<pos:position pos:line="9" pos:column="40"/></name></name><argument_list pos:line="9" pos:column="40">()<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>

    <while pos:line="11" pos:column="5">while <condition pos:line="11" pos:column="11">(<expr><call><name pos:line="11" pos:column="12">mayContinue<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">()<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="26"/></condition> <block pos:line="11" pos:column="27">{
        <expr_stmt><expr><call pos:line="12" pos:column="9">(<name><name pos:line="12" pos:column="10">this<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;*<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">theStep<pos:position pos:line="12" pos:column="24"/></name></name>)<argument_list pos:line="12" pos:column="25">()<pos:position pos:line="12" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></while>

    <return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">theStep<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">==<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">psMessageEnd<pos:position pos:line="15" pos:column="35"/></name></expr>;<pos:position pos:line="15" pos:column="36"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
