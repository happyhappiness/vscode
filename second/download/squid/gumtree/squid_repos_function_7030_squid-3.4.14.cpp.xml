<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7030_squid-3.4.14.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">ip6_parsenumeric<pos:position pos:line="2" pos:column="17"/></name><argument_list pos:line="2" pos:column="17">(<argument><expr><name pos:line="2" pos:column="18">sa<pos:position pos:line="2" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="22">addr<pos:position pos:line="2" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="28">host<pos:position pos:line="2" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="34">hostlen<pos:position pos:line="2" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="2" pos:column="43">flags<pos:position pos:line="2" pos:column="48"/></name></expr></argument>)<pos:position pos:line="2" pos:column="49"/></argument_list>
const struct <name pos:line="3" pos:column="14">sockaddr<pos:position pos:line="3" pos:column="22"/></name> <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier><name pos:line="3" pos:column="24">sa<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="4" pos:column="1">const<pos:position pos:line="4" pos:column="6"/></specifier> <name pos:line="4" pos:column="7">char<pos:position pos:line="4" pos:column="11"/></name> <modifier pos:line="4" pos:column="12">*<pos:position pos:line="4" pos:column="13"/></modifier></type><name pos:line="4" pos:column="13">addr<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">char<pos:position pos:line="5" pos:column="5"/></name> <modifier pos:line="5" pos:column="6">*<pos:position pos:line="5" pos:column="7"/></modifier></type><name pos:line="5" pos:column="7">host<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">size_t<pos:position pos:line="6" pos:column="7"/></name></type> <name pos:line="6" pos:column="8">hostlen<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">int<pos:position pos:line="7" pos:column="4"/></name></type> <name pos:line="7" pos:column="5">flags<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">numaddrlen<pos:position pos:line="9" pos:column="19"/></name></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name></type> <name><name pos:line="10" pos:column="10">numaddr<pos:position pos:line="10" pos:column="17"/></name><index pos:line="10" pos:column="17">[<expr><literal type="number" pos:line="10" pos:column="18">512<pos:position pos:line="10" pos:column="21"/></literal></expr>]<pos:position pos:line="10" pos:column="22"/></index></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">inet_ntop<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">(<argument><expr><name pos:line="12" pos:column="19">AF_INET6<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="29">addr<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="35">numaddr<pos:position pos:line="12" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="44">sizeof<argument_list pos:line="12" pos:column="50">(<argument><expr><name pos:line="12" pos:column="51">numaddr<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call> <operator pos:line="12" pos:column="61">==<pos:position pos:line="12" pos:column="63"/></operator> <name pos:line="12" pos:column="64">NULL<pos:position pos:line="12" pos:column="68"/></name></expr>)<pos:position pos:line="12" pos:column="69"/></condition><then pos:line="12" pos:column="69">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">EAI_SYSTEM<pos:position pos:line="13" pos:column="26"/></name></expr>;<pos:position pos:line="13" pos:column="27"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="15" pos:column="5">numaddrlen<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <call><name pos:line="15" pos:column="18">strlen<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">numaddr<pos:position pos:line="15" pos:column="32"/></name></expr></argument>)<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">numaddrlen<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">+<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="22">1<pos:position pos:line="16" pos:column="23"/></literal> <operator pos:line="16" pos:column="24">&gt;<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="26">hostlen<pos:position pos:line="16" pos:column="33"/></name></expr>)<pos:position pos:line="16" pos:column="34"/></condition><then pos:line="16" pos:column="34"> <comment type="block" pos:line="16" pos:column="35">/* don't forget terminator */</comment>
        <block type="pseudo"><return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">EAI_OVERFLOW<pos:position pos:line="17" pos:column="28"/></name></expr>;<pos:position pos:line="17" pos:column="29"/></return></block></then></if>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">strncpy<pos:position pos:line="18" pos:column="12"/></name><argument_list pos:line="18" pos:column="12">(<argument><expr><name pos:line="18" pos:column="13">host<pos:position pos:line="18" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="19">numaddr<pos:position pos:line="18" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="28">hostlen<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><specifier pos:line="20" pos:column="11">const<pos:position pos:line="20" pos:column="16"/></specifier> struct <name pos:line="20" pos:column="24">sockaddr_in6<pos:position pos:line="20" pos:column="36"/></name> <operator pos:line="20" pos:column="37">*<pos:position pos:line="20" pos:column="38"/></operator><operator pos:line="20" pos:column="38">)<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="39">sa<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">)<pos:position pos:line="20" pos:column="42"/></operator><operator pos:line="20" pos:column="42">-&gt;<pos:position pos:line="20" pos:column="47"/></operator><name pos:line="20" pos:column="44">sin6_scope_id<pos:position pos:line="20" pos:column="57"/></name></expr>)<pos:position pos:line="20" pos:column="58"/></condition><then pos:line="20" pos:column="58"> <block pos:line="20" pos:column="59">{
        <decl_stmt><decl><type><name pos:line="21" pos:column="9">char<pos:position pos:line="21" pos:column="13"/></name></type> <name><name pos:line="21" pos:column="14">zonebuf<pos:position pos:line="21" pos:column="21"/></name><index pos:line="21" pos:column="21">[<expr><name pos:line="21" pos:column="22">SQUIDHOSTNAMELEN<pos:position pos:line="21" pos:column="38"/></name></expr>]<pos:position pos:line="21" pos:column="39"/></index></name></decl>;<pos:position pos:line="21" pos:column="40"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">int<pos:position pos:line="22" pos:column="12"/></name></type> <name pos:line="22" pos:column="13">zonelen<pos:position pos:line="22" pos:column="20"/></name></decl>;<pos:position pos:line="22" pos:column="21"/></decl_stmt>

        <expr_stmt><expr><name pos:line="24" pos:column="9">zonelen<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <call><name pos:line="24" pos:column="19">ip6_sa2str<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(
                      <argument><expr><operator pos:line="25" pos:column="23">(<pos:position pos:line="25" pos:column="24"/></operator><specifier pos:line="25" pos:column="24">const<pos:position pos:line="25" pos:column="29"/></specifier> struct <name pos:line="25" pos:column="37">sockaddr_in6<pos:position pos:line="25" pos:column="49"/></name> <operator pos:line="25" pos:column="50">*<pos:position pos:line="25" pos:column="51"/></operator><operator pos:line="25" pos:column="51">)<pos:position pos:line="25" pos:column="52"/></operator><operator pos:line="25" pos:column="52">(<pos:position pos:line="25" pos:column="53"/></operator><specifier pos:line="25" pos:column="53">const<pos:position pos:line="25" pos:column="58"/></specifier> <name pos:line="25" pos:column="59">void<pos:position pos:line="25" pos:column="63"/></name> <operator pos:line="25" pos:column="64">*<pos:position pos:line="25" pos:column="65"/></operator><operator pos:line="25" pos:column="65">)<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="66">sa<pos:position pos:line="25" pos:column="68"/></name></expr></argument>,
                      <argument><expr><name pos:line="26" pos:column="23">zonebuf<pos:position pos:line="26" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="32">sizeof<argument_list pos:line="26" pos:column="38">(<argument><expr><name pos:line="26" pos:column="39">zonebuf<pos:position pos:line="26" pos:column="46"/></name></expr></argument>)<pos:position pos:line="26" pos:column="47"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">flags<pos:position pos:line="26" pos:column="54"/></name></expr></argument>)<pos:position pos:line="26" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="56"/></expr_stmt>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><name pos:line="27" pos:column="13">zonelen<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">&lt;<pos:position pos:line="27" pos:column="25"/></operator> <literal type="number" pos:line="27" pos:column="23">0<pos:position pos:line="27" pos:column="24"/></literal></expr>)<pos:position pos:line="27" pos:column="25"/></condition><then pos:line="27" pos:column="25">
            <block type="pseudo"><return pos:line="28" pos:column="13">return <expr><name pos:line="28" pos:column="20">EAI_OVERFLOW<pos:position pos:line="28" pos:column="32"/></name></expr>;<pos:position pos:line="28" pos:column="33"/></return></block></then></if>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">zonelen<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">+<pos:position pos:line="29" pos:column="22"/></operator> <literal type="number" pos:line="29" pos:column="23">1<pos:position pos:line="29" pos:column="24"/></literal> <operator pos:line="29" pos:column="25">+<pos:position pos:line="29" pos:column="26"/></operator> <name pos:line="29" pos:column="27">numaddrlen<pos:position pos:line="29" pos:column="37"/></name> <operator pos:line="29" pos:column="38">+<pos:position pos:line="29" pos:column="39"/></operator> <literal type="number" pos:line="29" pos:column="40">1<pos:position pos:line="29" pos:column="41"/></literal> <operator pos:line="29" pos:column="42">&gt;<pos:position pos:line="29" pos:column="46"/></operator> <name pos:line="29" pos:column="44">hostlen<pos:position pos:line="29" pos:column="51"/></name></expr>)<pos:position pos:line="29" pos:column="52"/></condition><then pos:line="29" pos:column="52">
            <block type="pseudo"><return pos:line="30" pos:column="13">return <expr><name pos:line="30" pos:column="20">EAI_OVERFLOW<pos:position pos:line="30" pos:column="32"/></name></expr>;<pos:position pos:line="30" pos:column="33"/></return></block></then></if>

        <comment type="block" pos:line="32" pos:column="9">/* construct &lt;numeric-addr&gt;&lt;delim&gt;&lt;zoneid&gt; */</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">memcpy<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">host<pos:position pos:line="33" pos:column="20"/></name> <operator pos:line="33" pos:column="21">+<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="23">numaddrlen<pos:position pos:line="33" pos:column="33"/></name> <operator pos:line="33" pos:column="34">+<pos:position pos:line="33" pos:column="35"/></operator> <literal type="number" pos:line="33" pos:column="36">1<pos:position pos:line="33" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="39">zonebuf<pos:position pos:line="33" pos:column="46"/></name></expr></argument>,
               <argument><expr><operator pos:line="34" pos:column="16">(<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="17">size_t<pos:position pos:line="34" pos:column="23"/></name><operator pos:line="34" pos:column="23">)<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="24">zonelen<pos:position pos:line="34" pos:column="31"/></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">host<pos:position pos:line="35" pos:column="13"/></name><index pos:line="35" pos:column="13">[<expr><name pos:line="35" pos:column="14">numaddrlen<pos:position pos:line="35" pos:column="24"/></name></expr>]<pos:position pos:line="35" pos:column="25"/></index></name> <operator pos:line="35" pos:column="26">=<pos:position pos:line="35" pos:column="27"/></operator> <name pos:line="35" pos:column="28">SCOPE_DELIMITER<pos:position pos:line="35" pos:column="43"/></name></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">host<pos:position pos:line="36" pos:column="13"/></name><index pos:line="36" pos:column="13">[<expr><name pos:line="36" pos:column="14">numaddrlen<pos:position pos:line="36" pos:column="24"/></name> <operator pos:line="36" pos:column="25">+<pos:position pos:line="36" pos:column="26"/></operator> <literal type="number" pos:line="36" pos:column="27">1<pos:position pos:line="36" pos:column="28"/></literal> <operator pos:line="36" pos:column="29">+<pos:position pos:line="36" pos:column="30"/></operator> <name pos:line="36" pos:column="31">zonelen<pos:position pos:line="36" pos:column="38"/></name></expr>]<pos:position pos:line="36" pos:column="39"/></index></name> <operator pos:line="36" pos:column="40">=<pos:position pos:line="36" pos:column="41"/></operator> <literal type="char" pos:line="36" pos:column="42">'\0'<pos:position pos:line="36" pos:column="46"/></literal></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <return pos:line="39" pos:column="5">return <expr><literal type="number" pos:line="39" pos:column="12">0<pos:position pos:line="39" pos:column="13"/></literal></expr>;<pos:position pos:line="39" pos:column="14"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></unit>
