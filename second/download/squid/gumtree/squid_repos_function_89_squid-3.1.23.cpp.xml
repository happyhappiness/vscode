<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_89_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name> <parameter_list pos:line="2" pos:column="6">(<parameter><decl><type><name pos:line="2" pos:column="7">int<pos:position pos:line="2" pos:column="10"/></name></type> <name pos:line="2" pos:column="11">argc<pos:position pos:line="2" pos:column="15"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="17">char<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier><modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type><name pos:line="2" pos:column="24">argv<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <block pos:line="4" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">ToRefCount<pos:position pos:line="5" pos:column="19"/></name></type> <name pos:line="5" pos:column="20">anObject<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><operator pos:line="5" pos:column="29">new<pos:position pos:line="5" pos:column="32"/></operator> <name pos:line="5" pos:column="33">_ToRefCount<pos:position pos:line="5" pos:column="44"/></name></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="6" pos:column="9">anObject<pos:position pos:line="6" pos:column="17"/></name><operator pos:line="6" pos:column="17">-&gt;<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="19">someMethod<pos:position pos:line="6" pos:column="29"/></name></name><argument_list pos:line="6" pos:column="29">()<pos:position pos:line="6" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name pos:line="7" pos:column="9">anObject<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">anObject<pos:position pos:line="7" pos:column="28"/></name></expr>;<pos:position pos:line="7" pos:column="29"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">ToRefCount<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">objectTwo<pos:position pos:line="8" pos:column="29"/></name> <argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">anObject<pos:position pos:line="8" pos:column="39"/></name></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
        <expr_stmt><expr><name pos:line="9" pos:column="9">anObject<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <name pos:line="9" pos:column="20">objectTwo<pos:position pos:line="9" pos:column="29"/></name></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
        <block pos:line="10" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="11" pos:column="13">ToRefCount<pos:position pos:line="11" pos:column="23"/></name></type> <name pos:line="11" pos:column="24">anotherObject<pos:position pos:line="11" pos:column="37"/></name><argument_list pos:line="11" pos:column="37">(<argument><expr><operator pos:line="11" pos:column="38">new<pos:position pos:line="11" pos:column="41"/></operator> <name pos:line="11" pos:column="42">_ToRefCount<pos:position pos:line="11" pos:column="53"/></name></expr></argument>)<pos:position pos:line="11" pos:column="54"/></argument_list></decl>;<pos:position pos:line="11" pos:column="55"/></decl_stmt>
            <expr_stmt><expr><name pos:line="12" pos:column="13">anObject<pos:position pos:line="12" pos:column="21"/></name> <operator pos:line="12" pos:column="22">=<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="24">anotherObject<pos:position pos:line="12" pos:column="37"/></name></expr>;<pos:position pos:line="12" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="13" pos:column="10"/></block>

        <block pos:line="15" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="16" pos:column="13">ToRefCount<pos:position pos:line="16" pos:column="23"/></name></type> <name pos:line="16" pos:column="24">aForthObject<pos:position pos:line="16" pos:column="36"/></name> <argument_list pos:line="16" pos:column="37">(<argument><expr><name pos:line="16" pos:column="38">anObject<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></decl>;<pos:position pos:line="16" pos:column="48"/></decl_stmt>
            <expr_stmt><expr><name pos:line="17" pos:column="13">anObject<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <call><name pos:line="17" pos:column="24">ToRefCount<pos:position pos:line="17" pos:column="34"/></name><argument_list pos:line="17" pos:column="34">(<argument><expr><name pos:line="17" pos:column="35">NULL<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="18" pos:column="13">aForthObject<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">-&gt;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="27">someMethod<pos:position pos:line="18" pos:column="37"/></name></name><argument_list pos:line="18" pos:column="37">()<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">aForthObject<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">=<pos:position pos:line="19" pos:column="27"/></operator> <name pos:line="19" pos:column="28">NULL<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block>
    }<pos:position pos:line="21" pos:column="6"/></block>

    <comment type="block" pos:line="23" pos:column="5">/* Test creating an object, using it , and then making available as a
     * refcounted one:
     */</comment>
    <block pos:line="26" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="27" pos:column="9">_ToRefCount<pos:position pos:line="27" pos:column="20"/></name> <modifier pos:line="27" pos:column="21">*<pos:position pos:line="27" pos:column="22"/></modifier></type><name pos:line="27" pos:column="22">aPointer<pos:position pos:line="27" pos:column="30"/></name> <init pos:line="27" pos:column="31">= <expr><operator pos:line="27" pos:column="33">new<pos:position pos:line="27" pos:column="36"/></operator> <name pos:line="27" pos:column="37">_ToRefCount<pos:position pos:line="27" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="49"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="28" pos:column="9">aPointer<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">someMethod<pos:position pos:line="28" pos:column="29"/></name></name><argument_list pos:line="28" pos:column="29">()<pos:position pos:line="28" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="32"/></expr_stmt>
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">ToRefCount<pos:position pos:line="29" pos:column="19"/></name></type> <name pos:line="29" pos:column="20">anObject<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">aPointer<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></decl>;<pos:position pos:line="29" pos:column="39"/></decl_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block>
    <comment type="block" pos:line="31" pos:column="5">/* standalone pointers should be usable */</comment>
    <block pos:line="32" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">ToRefCount<pos:position pos:line="33" pos:column="19"/></name></type> <name pos:line="33" pos:column="20">anObject<pos:position pos:line="33" pos:column="28"/></name></decl>;<pos:position pos:line="33" pos:column="29"/></decl_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block>
    <comment type="block" pos:line="35" pos:column="5">/* Can we check pointers for equality */</comment>
    <block pos:line="36" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="37" pos:column="9">ToRefCount<pos:position pos:line="37" pos:column="19"/></name></type> <name pos:line="37" pos:column="20">anObject<pos:position pos:line="37" pos:column="28"/></name></decl>;<pos:position pos:line="37" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="38" pos:column="9">ToRefCount<pos:position pos:line="38" pos:column="19"/></name></type> <name pos:line="38" pos:column="20">anotherObject<pos:position pos:line="38" pos:column="33"/></name><argument_list pos:line="38" pos:column="33">(<argument><expr><operator pos:line="38" pos:column="34">new<pos:position pos:line="38" pos:column="37"/></operator> <name pos:line="38" pos:column="38">_ToRefCount<pos:position pos:line="38" pos:column="49"/></name></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></decl>;<pos:position pos:line="38" pos:column="51"/></decl_stmt>

        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">anObject<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">==<pos:position pos:line="40" pos:column="24"/></operator> <name pos:line="40" pos:column="25">anotherObject<pos:position pos:line="40" pos:column="38"/></name></expr>)<pos:position pos:line="40" pos:column="39"/></condition><then pos:line="40" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="41" pos:column="13">exit<pos:position pos:line="41" pos:column="17"/></name> <argument_list pos:line="41" pos:column="18">(<argument><expr><literal type="number" pos:line="41" pos:column="19">1<pos:position pos:line="41" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="22"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="43" pos:column="9">anotherObject<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <name pos:line="43" pos:column="25">NULL<pos:position pos:line="43" pos:column="29"/></name></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>

        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">!<pos:position pos:line="45" pos:column="14"/></operator><operator pos:line="45" pos:column="14">(<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="15">anObject<pos:position pos:line="45" pos:column="23"/></name> <operator pos:line="45" pos:column="24">==<pos:position pos:line="45" pos:column="26"/></operator> <name pos:line="45" pos:column="27">anotherObject<pos:position pos:line="45" pos:column="40"/></name><operator pos:line="45" pos:column="40">)<pos:position pos:line="45" pos:column="41"/></operator></expr>)<pos:position pos:line="45" pos:column="42"/></condition><then pos:line="45" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="13">exit<pos:position pos:line="46" pos:column="17"/></name> <argument_list pos:line="46" pos:column="18">(<argument><expr><literal type="number" pos:line="46" pos:column="19">1<pos:position pos:line="46" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block>
    <comment type="block" pos:line="48" pos:column="5">/* Can we get the pointer for a const object */</comment>
    <block pos:line="49" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">ToRefCount<pos:position pos:line="50" pos:column="19"/></name></type> <name pos:line="50" pos:column="20">anObject<pos:position pos:line="50" pos:column="28"/></name> <argument_list pos:line="50" pos:column="29">(<argument><expr><operator pos:line="50" pos:column="30">new<pos:position pos:line="50" pos:column="33"/></operator> <name pos:line="50" pos:column="34">_ToRefCount<pos:position pos:line="50" pos:column="45"/></name></expr></argument>)<pos:position pos:line="50" pos:column="46"/></argument_list></decl>;<pos:position pos:line="50" pos:column="47"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="51" pos:column="9">ToRefCount<pos:position pos:line="51" pos:column="19"/></name> <specifier pos:line="51" pos:column="20">const<pos:position pos:line="51" pos:column="25"/></specifier></type> <name pos:line="51" pos:column="26">aConstObject<pos:position pos:line="51" pos:column="38"/></name> <argument_list pos:line="51" pos:column="39">(<argument><expr><name pos:line="51" pos:column="40">anObject<pos:position pos:line="51" pos:column="48"/></name></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></decl>;<pos:position pos:line="51" pos:column="50"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="52" pos:column="9">_ToRefCount<pos:position pos:line="52" pos:column="20"/></name> <specifier pos:line="52" pos:column="21">const<pos:position pos:line="52" pos:column="26"/></specifier> <modifier pos:line="52" pos:column="27">*<pos:position pos:line="52" pos:column="28"/></modifier></type><name pos:line="52" pos:column="28">aPointer<pos:position pos:line="52" pos:column="36"/></name> <init pos:line="52" pos:column="37">= <expr><call><name><name pos:line="52" pos:column="39">aConstObject<pos:position pos:line="52" pos:column="51"/></name><operator pos:line="52" pos:column="51">.<pos:position pos:line="52" pos:column="52"/></operator><name pos:line="52" pos:column="52">getRaw<pos:position pos:line="52" pos:column="58"/></name></name><argument_list pos:line="52" pos:column="58">()<pos:position pos:line="52" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="61"/></decl_stmt>

        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">aPointer<pos:position pos:line="54" pos:column="21"/></name> <operator pos:line="54" pos:column="22">!=<pos:position pos:line="54" pos:column="24"/></operator> <call><name><name pos:line="54" pos:column="25">anObject<pos:position pos:line="54" pos:column="33"/></name><operator pos:line="54" pos:column="33">.<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="34">getRaw<pos:position pos:line="54" pos:column="40"/></name></name><argument_list pos:line="54" pos:column="40">()<pos:position pos:line="54" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="43"/></condition><then pos:line="54" pos:column="43">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="13">exit<pos:position pos:line="55" pos:column="17"/></name> <argument_list pos:line="55" pos:column="18">(<argument><expr><literal type="number" pos:line="55" pos:column="19">2<pos:position pos:line="55" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="22"/></expr_stmt></block></then></if>
    }<pos:position pos:line="56" pos:column="6"/></block>
    <comment type="block" pos:line="57" pos:column="5">/* Can we get a refcounted pointer from a const object */</comment>
    <block pos:line="58" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="59" pos:column="9">_ToRefCount<pos:position pos:line="59" pos:column="20"/></name> <specifier pos:line="59" pos:column="21">const<pos:position pos:line="59" pos:column="26"/></specifier> <modifier pos:line="59" pos:column="27">*<pos:position pos:line="59" pos:column="28"/></modifier></type> <name pos:line="59" pos:column="29">aPointer<pos:position pos:line="59" pos:column="37"/></name> <init pos:line="59" pos:column="38">= <expr><operator pos:line="59" pos:column="40">new<pos:position pos:line="59" pos:column="43"/></operator> <name pos:line="59" pos:column="44">_ToRefCount<pos:position pos:line="59" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="59" pos:column="56"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="60" pos:column="9">ToRefCount<pos:position pos:line="60" pos:column="19"/></name></type> <name pos:line="60" pos:column="20">anObject<pos:position pos:line="60" pos:column="28"/></name> <argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">aPointer<pos:position pos:line="60" pos:column="38"/></name></expr></argument>)<pos:position pos:line="60" pos:column="39"/></argument_list></decl>;<pos:position pos:line="60" pos:column="40"/></decl_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block>
    <comment type="block" pos:line="62" pos:column="5">/* Can we get a pointer to nonconst from a nonconst refcounter */</comment>
    <block pos:line="63" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="64" pos:column="9">ToRefCount<pos:position pos:line="64" pos:column="19"/></name></type> <name pos:line="64" pos:column="20">anObject<pos:position pos:line="64" pos:column="28"/></name> <argument_list pos:line="64" pos:column="29">(<argument><expr><operator pos:line="64" pos:column="30">new<pos:position pos:line="64" pos:column="33"/></operator> <name pos:line="64" pos:column="34">_ToRefCount<pos:position pos:line="64" pos:column="45"/></name></expr></argument>)<pos:position pos:line="64" pos:column="46"/></argument_list></decl>;<pos:position pos:line="64" pos:column="47"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="65" pos:column="9">_ToRefCount<pos:position pos:line="65" pos:column="20"/></name> <modifier pos:line="65" pos:column="21">*<pos:position pos:line="65" pos:column="22"/></modifier></type><name pos:line="65" pos:column="22">aPointer<pos:position pos:line="65" pos:column="30"/></name> <init pos:line="65" pos:column="31">= <expr><call><name><name pos:line="65" pos:column="33">anObject<pos:position pos:line="65" pos:column="41"/></name><operator pos:line="65" pos:column="41">.<pos:position pos:line="65" pos:column="42"/></operator><name pos:line="65" pos:column="42">getRaw<pos:position pos:line="65" pos:column="48"/></name></name><argument_list pos:line="65" pos:column="48">()<pos:position pos:line="65" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="65" pos:column="51"/></decl_stmt>
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">aPointer<pos:position pos:line="66" pos:column="21"/></name> <operator pos:line="66" pos:column="22">==<pos:position pos:line="66" pos:column="24"/></operator> <name pos:line="66" pos:column="25">NULL<pos:position pos:line="66" pos:column="29"/></name></expr>)<pos:position pos:line="66" pos:column="30"/></condition><then pos:line="66" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="67" pos:column="13">exit<pos:position pos:line="67" pos:column="17"/></name><argument_list pos:line="67" pos:column="17">(<argument><expr><literal type="number" pos:line="67" pos:column="18">3<pos:position pos:line="67" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="21"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="68" pos:column="9">aPointer<pos:position pos:line="68" pos:column="17"/></name> <operator pos:line="68" pos:column="18">=<pos:position pos:line="68" pos:column="19"/></operator> <name pos:line="68" pos:column="20">NULL<pos:position pos:line="68" pos:column="24"/></name></expr>;<pos:position pos:line="68" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="69" pos:column="6"/></block>
    <comment type="block" pos:line="70" pos:column="5">/* Create a doubley inheriting refcount instance,
     * cast to a single inheritance instance,
     * then hope :}
     */</comment>
    <block pos:line="74" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="75" pos:column="9">ToRefCount<pos:position pos:line="75" pos:column="19"/></name></type> <name pos:line="75" pos:column="20">aBaseObject<pos:position pos:line="75" pos:column="31"/></name></decl>;<pos:position pos:line="75" pos:column="32"/></decl_stmt>
        <block pos:line="76" pos:column="9">{
            <decl_stmt><decl><type><name><name pos:line="77" pos:column="13">AlsoRefCountable<pos:position pos:line="77" pos:column="29"/></name><operator pos:line="77" pos:column="29">::<pos:position pos:line="77" pos:column="31"/></operator><name pos:line="77" pos:column="31">Pointer<pos:position pos:line="77" pos:column="38"/></name></name></type> <name pos:line="77" pos:column="39">anObject<pos:position pos:line="77" pos:column="47"/></name> <argument_list pos:line="77" pos:column="48">(<argument><expr><operator pos:line="77" pos:column="49">new<pos:position pos:line="77" pos:column="52"/></operator> <name pos:line="77" pos:column="53">AlsoRefCountable<pos:position pos:line="77" pos:column="69"/></name></expr></argument>)<pos:position pos:line="77" pos:column="70"/></argument_list></decl>;<pos:position pos:line="77" pos:column="71"/></decl_stmt>
            <expr_stmt><expr><name pos:line="78" pos:column="13">aBaseObject<pos:position pos:line="78" pos:column="24"/></name> <operator pos:line="78" pos:column="25">=<pos:position pos:line="78" pos:column="26"/></operator> <call><name><name pos:line="78" pos:column="27">anObject<pos:position pos:line="78" pos:column="35"/></name><operator pos:line="78" pos:column="35">.<pos:position pos:line="78" pos:column="36"/></operator><name pos:line="78" pos:column="36">getRaw<pos:position pos:line="78" pos:column="42"/></name></name><argument_list pos:line="78" pos:column="42">()<pos:position pos:line="78" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="79" pos:column="10"/></block>
    }<pos:position pos:line="80" pos:column="6"/></block>
    <return pos:line="81" pos:column="5">return <expr><ternary><condition><expr><name><name pos:line="81" pos:column="12">_ToRefCount<pos:position pos:line="81" pos:column="23"/></name><operator pos:line="81" pos:column="23">::<pos:position pos:line="81" pos:column="25"/></operator><name pos:line="81" pos:column="25">Instances<pos:position pos:line="81" pos:column="34"/></name></name> <operator pos:line="81" pos:column="35">==<pos:position pos:line="81" pos:column="37"/></operator> <literal type="number" pos:line="81" pos:column="38">0<pos:position pos:line="81" pos:column="39"/></literal></expr> ?<pos:position pos:line="81" pos:column="41"/></condition><then pos:line="81" pos:column="41"> <expr><literal type="number" pos:line="81" pos:column="42">0<pos:position pos:line="81" pos:column="43"/></literal></expr> <pos:position pos:line="81" pos:column="44"/></then><else pos:line="81" pos:column="44">: <expr><literal type="number" pos:line="81" pos:column="46">1<pos:position pos:line="81" pos:column="47"/></literal></expr></else></ternary></expr>;<pos:position pos:line="81" pos:column="48"/></return>
}<pos:position pos:line="82" pos:column="2"/></block></function></unit>
