<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1840_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">CpuAffinityMap<pos:position pos:line="2" pos:column="15"/></name><operator pos:line="2" pos:column="15">::<pos:position pos:line="2" pos:column="17"/></operator><name pos:line="2" pos:column="17">add<pos:position pos:line="2" pos:column="20"/></name></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><specifier pos:line="2" pos:column="21">const<pos:position pos:line="2" pos:column="26"/></specifier> <name><name pos:line="2" pos:column="27">std<pos:position pos:line="2" pos:column="30"/></name><operator pos:line="2" pos:column="30">::<pos:position pos:line="2" pos:column="32"/></operator><name><name pos:line="2" pos:column="32">vector<pos:position pos:line="2" pos:column="38"/></name><argument_list type="generic" pos:line="2" pos:column="38">&lt;<argument><expr><name pos:line="2" pos:column="39">int<pos:position pos:line="2" pos:column="42"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="46"/></argument_list></name></name> <modifier pos:line="2" pos:column="44">&amp;<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="45">aProcesses<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="57">const<pos:position pos:line="2" pos:column="62"/></specifier> <name><name pos:line="2" pos:column="63">std<pos:position pos:line="2" pos:column="66"/></name><operator pos:line="2" pos:column="66">::<pos:position pos:line="2" pos:column="68"/></operator><name><name pos:line="2" pos:column="68">vector<pos:position pos:line="2" pos:column="74"/></name><argument_list type="generic" pos:line="2" pos:column="74">&lt;<argument><expr><name pos:line="2" pos:column="75">int<pos:position pos:line="2" pos:column="78"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="82"/></argument_list></name></name> <modifier pos:line="2" pos:column="80">&amp;<pos:position pos:line="2" pos:column="85"/></modifier></type><name pos:line="2" pos:column="81">aCores<pos:position pos:line="2" pos:column="87"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="88"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><call><name><name pos:line="4" pos:column="9">aProcesses<pos:position pos:line="4" pos:column="19"/></name><operator pos:line="4" pos:column="19">.<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="20">size<pos:position pos:line="4" pos:column="24"/></name></name><argument_list pos:line="4" pos:column="24">()<pos:position pos:line="4" pos:column="26"/></argument_list></call> <operator pos:line="4" pos:column="27">!=<pos:position pos:line="4" pos:column="29"/></operator> <call><name><name pos:line="4" pos:column="30">aCores<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">.<pos:position pos:line="4" pos:column="37"/></operator><name pos:line="4" pos:column="37">size<pos:position pos:line="4" pos:column="41"/></name></name><argument_list pos:line="4" pos:column="41">()<pos:position pos:line="4" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="44"/></condition><then pos:line="4" pos:column="44">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if>

    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><decl><type><name pos:line="7" pos:column="10">size_t<pos:position pos:line="7" pos:column="16"/></name></type> <name pos:line="7" pos:column="17">i<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></init> <condition><expr><name pos:line="7" pos:column="24">i<pos:position pos:line="7" pos:column="25"/></name> <operator pos:line="7" pos:column="26">&lt;<pos:position pos:line="7" pos:column="30"/></operator> <call><name><name pos:line="7" pos:column="28">aProcesses<pos:position pos:line="7" pos:column="38"/></name><operator pos:line="7" pos:column="38">.<pos:position pos:line="7" pos:column="39"/></operator><name pos:line="7" pos:column="39">size<pos:position pos:line="7" pos:column="43"/></name></name><argument_list pos:line="7" pos:column="43">()<pos:position pos:line="7" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="46"/></condition> <incr><expr><operator pos:line="7" pos:column="47">++<pos:position pos:line="7" pos:column="49"/></operator><name pos:line="7" pos:column="49">i<pos:position pos:line="7" pos:column="50"/></name></expr></incr>)<pos:position pos:line="7" pos:column="51"/></control> <block pos:line="7" pos:column="52">{
        <decl_stmt><decl><type><specifier pos:line="8" pos:column="9">const<pos:position pos:line="8" pos:column="14"/></specifier> <name pos:line="8" pos:column="15">int<pos:position pos:line="8" pos:column="18"/></name></type> <name pos:line="8" pos:column="19">process<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><name><name pos:line="8" pos:column="29">aProcesses<pos:position pos:line="8" pos:column="39"/></name><index pos:line="8" pos:column="39">[<expr><name pos:line="8" pos:column="40">i<pos:position pos:line="8" pos:column="41"/></name></expr>]<pos:position pos:line="8" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="9" pos:column="9">const<pos:position pos:line="9" pos:column="14"/></specifier> <name pos:line="9" pos:column="15">int<pos:position pos:line="9" pos:column="18"/></name></type> <name pos:line="9" pos:column="19">core<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><name><name pos:line="9" pos:column="26">aCores<pos:position pos:line="9" pos:column="32"/></name><index pos:line="9" pos:column="32">[<expr><name pos:line="9" pos:column="33">i<pos:position pos:line="9" pos:column="34"/></name></expr>]<pos:position pos:line="9" pos:column="35"/></index></name></expr></init></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">process<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">&lt;=<pos:position pos:line="10" pos:column="26"/></operator> <literal type="number" pos:line="10" pos:column="24">0<pos:position pos:line="10" pos:column="25"/></literal> <operator pos:line="10" pos:column="26">||<pos:position pos:line="10" pos:column="28"/></operator> <name pos:line="10" pos:column="29">core<pos:position pos:line="10" pos:column="33"/></name> <operator pos:line="10" pos:column="34">&lt;=<pos:position pos:line="10" pos:column="39"/></operator> <literal type="number" pos:line="10" pos:column="37">0<pos:position pos:line="10" pos:column="38"/></literal></expr>)<pos:position pos:line="10" pos:column="39"/></condition><then pos:line="10" pos:column="39">
            <block type="pseudo"><return pos:line="11" pos:column="13">return <expr><literal type="boolean" pos:line="11" pos:column="20">false<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></return></block></then></if>
        <expr_stmt><expr><call><name><name pos:line="12" pos:column="9">theProcesses<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">.<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">push_back<pos:position pos:line="12" pos:column="31"/></name></name><argument_list pos:line="12" pos:column="31">(<argument><expr><name pos:line="12" pos:column="32">process<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">theCores<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">.<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">push_back<pos:position pos:line="13" pos:column="27"/></name></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">core<pos:position pos:line="13" pos:column="32"/></name></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></for>

    <return pos:line="16" pos:column="5">return <expr><literal type="boolean" pos:line="16" pos:column="12">true<pos:position pos:line="16" pos:column="16"/></literal></expr>;<pos:position pos:line="16" pos:column="17"/></return>
}<pos:position pos:line="17" pos:column="2"/></block></function></unit>
