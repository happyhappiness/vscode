<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_886_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpBody<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">packInto<pos:position pos:line="2" pos:column="19"/></name></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">Packer<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type> <name pos:line="2" pos:column="29">p<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="31"/></parameter_list> <specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><name pos:line="4" pos:column="12">p<pos:position pos:line="4" pos:column="13"/></name></expr></argument>)<pos:position pos:line="4" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="15"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name><name pos:line="6" pos:column="9">mb<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">contentSize<pos:position pos:line="6" pos:column="24"/></name></name><argument_list pos:line="6" pos:column="24">()<pos:position pos:line="6" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="27"/></condition><then pos:line="6" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="9">packerAppend<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">p<pos:position pos:line="7" pos:column="23"/></name></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="25">mb<pos:position pos:line="7" pos:column="27"/></name><operator pos:line="7" pos:column="27">-&gt;<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="29">content<pos:position pos:line="7" pos:column="36"/></name></name><argument_list pos:line="7" pos:column="36">()<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="7" pos:column="40">mb<pos:position pos:line="7" pos:column="42"/></name><operator pos:line="7" pos:column="42">-&gt;<pos:position pos:line="7" pos:column="47"/></operator><name pos:line="7" pos:column="44">contentSize<pos:position pos:line="7" pos:column="55"/></name></name><argument_list pos:line="7" pos:column="55">()<pos:position pos:line="7" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="59"/></expr_stmt></block></then></if>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
