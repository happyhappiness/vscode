<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5551_last_repos.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">Comm<pos:position pos:line="1" pos:column="5"/></name><operator pos:line="1" pos:column="5">::<pos:position pos:line="1" pos:column="7"/></operator><name pos:line="1" pos:column="7">Flag<pos:position pos:line="1" pos:column="11"/></name></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">ReadNow<pos:position pos:line="2" pos:column="14"/></name></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">CommIoCbParams<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">&amp;<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="31">params<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">SBuf<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">&amp;<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="45">buf<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="49"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* Attempt a read */</comment>
    <expr_stmt><expr><operator pos:line="5" pos:column="5">++<pos:position pos:line="5" pos:column="7"/></operator> <name><name pos:line="5" pos:column="8">statCounter<pos:position pos:line="5" pos:column="19"/></name><operator pos:line="5" pos:column="19">.<pos:position pos:line="5" pos:column="20"/></operator><name pos:line="5" pos:column="20">syscalls<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">.<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">sock<pos:position pos:line="5" pos:column="33"/></name><operator pos:line="5" pos:column="33">.<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="34">reads<pos:position pos:line="5" pos:column="39"/></name></name></expr>;<pos:position pos:line="5" pos:column="40"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">SBuf<pos:position pos:line="6" pos:column="9"/></name><operator pos:line="6" pos:column="9">::<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">size_type<pos:position pos:line="6" pos:column="20"/></name></name></type> <name pos:line="6" pos:column="21">sz<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><call><name><name pos:line="6" pos:column="26">buf<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">.<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">spaceSize<pos:position pos:line="6" pos:column="39"/></name></name><argument_list pos:line="6" pos:column="39">()<pos:position pos:line="6" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">params<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">.<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">size<pos:position pos:line="7" pos:column="20"/></name></name> <operator pos:line="7" pos:column="21">&gt;<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal> <operator pos:line="7" pos:column="25">&amp;&amp;<pos:position pos:line="7" pos:column="35"/></operator> <name><name pos:line="7" pos:column="28">params<pos:position pos:line="7" pos:column="34"/></name><operator pos:line="7" pos:column="34">.<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="35">size<pos:position pos:line="7" pos:column="39"/></name></name> <operator pos:line="7" pos:column="40">&lt;<pos:position pos:line="7" pos:column="44"/></operator> <name pos:line="7" pos:column="42">sz<pos:position pos:line="7" pos:column="44"/></name></expr>)<pos:position pos:line="7" pos:column="45"/></condition><then pos:line="7" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="9">sz<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <name><name pos:line="8" pos:column="14">params<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">.<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">size<pos:position pos:line="8" pos:column="25"/></name></name></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt></block></then></if>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">inbuf<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><call><name><name pos:line="9" pos:column="19">buf<pos:position pos:line="9" pos:column="22"/></name><operator pos:line="9" pos:column="22">.<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">rawSpace<pos:position pos:line="9" pos:column="31"/></name></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">sz<pos:position pos:line="9" pos:column="34"/></name></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">errno<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">int<pos:position pos:line="11" pos:column="14"/></name></type> <name pos:line="11" pos:column="15">retval<pos:position pos:line="11" pos:column="21"/></name> <init pos:line="11" pos:column="22">= <expr><call><name pos:line="11" pos:column="24">FD_READ_METHOD<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><name><name pos:line="11" pos:column="39">params<pos:position pos:line="11" pos:column="45"/></name><operator pos:line="11" pos:column="45">.<pos:position pos:line="11" pos:column="46"/></operator><name pos:line="11" pos:column="46">conn<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">-&gt;<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="52">fd<pos:position pos:line="11" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="56">inbuf<pos:position pos:line="11" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="63">sz<pos:position pos:line="11" pos:column="65"/></name></expr></argument>)<pos:position pos:line="11" pos:column="66"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="67"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">params<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">.<pos:position pos:line="12" pos:column="12"/></operator><name pos:line="12" pos:column="12">xerrno<pos:position pos:line="12" pos:column="18"/></name></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <name pos:line="12" pos:column="21">errno<pos:position pos:line="12" pos:column="26"/></name></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debugs<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">5<pos:position pos:line="14" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="15">3<pos:position pos:line="14" pos:column="16"/></literal></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="18">params<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">.<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="25">conn<pos:position pos:line="14" pos:column="29"/></name></name> <operator pos:line="14" pos:column="30">&lt;&lt;<pos:position pos:line="14" pos:column="38"/></operator> <literal type="string" pos:line="14" pos:column="33">", size "<pos:position pos:line="14" pos:column="42"/></literal> <operator pos:line="14" pos:column="43">&lt;&lt;<pos:position pos:line="14" pos:column="51"/></operator> <name pos:line="14" pos:column="46">sz<pos:position pos:line="14" pos:column="48"/></name> <operator pos:line="14" pos:column="49">&lt;&lt;<pos:position pos:line="14" pos:column="57"/></operator> <literal type="string" pos:line="14" pos:column="52">", retval "<pos:position pos:line="14" pos:column="63"/></literal> <operator pos:line="14" pos:column="64">&lt;&lt;<pos:position pos:line="14" pos:column="72"/></operator> <name pos:line="14" pos:column="67">retval<pos:position pos:line="14" pos:column="73"/></name> <operator pos:line="14" pos:column="74">&lt;&lt;<pos:position pos:line="14" pos:column="82"/></operator> <literal type="string" pos:line="14" pos:column="77">", errno "<pos:position pos:line="14" pos:column="87"/></literal> <operator pos:line="14" pos:column="88">&lt;&lt;<pos:position pos:line="14" pos:column="96"/></operator> <name><name pos:line="14" pos:column="91">params<pos:position pos:line="14" pos:column="97"/></name><operator pos:line="14" pos:column="97">.<pos:position pos:line="14" pos:column="98"/></operator><name pos:line="14" pos:column="98">xerrno<pos:position pos:line="14" pos:column="104"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="106"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">retval<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">&gt;<pos:position pos:line="16" pos:column="20"/></operator> <literal type="number" pos:line="16" pos:column="18">0<pos:position pos:line="16" pos:column="19"/></literal></expr>)<pos:position pos:line="16" pos:column="20"/></condition><then pos:line="16" pos:column="20"> <block pos:line="16" pos:column="21">{ <comment type="line" pos:line="16" pos:column="23">// data read most common case</comment>
        <expr_stmt><expr><call><name><name pos:line="17" pos:column="9">buf<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">.<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">append<pos:position pos:line="17" pos:column="19"/></name></name><argument_list pos:line="17" pos:column="19">(<argument><expr><name pos:line="17" pos:column="20">inbuf<pos:position pos:line="17" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="27">retval<pos:position pos:line="17" pos:column="33"/></name></expr></argument>)<pos:position pos:line="17" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">fd_bytes<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name><name pos:line="18" pos:column="18">params<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">.<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">conn<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">fd<pos:position pos:line="18" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">retval<pos:position pos:line="18" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">FD_READ<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">params<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">flag<pos:position pos:line="19" pos:column="20"/></name></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <name><name pos:line="19" pos:column="23">Comm<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">::<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="29">OK<pos:position pos:line="19" pos:column="31"/></name></name></expr>;<pos:position pos:line="19" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">params<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">.<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">size<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">retval<pos:position pos:line="20" pos:column="29"/></name></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>

    }<pos:position pos:line="22" pos:column="6"/></block></then> <elseif pos:line="22" pos:column="7">else <if pos:line="22" pos:column="12">if <condition pos:line="22" pos:column="15">(<expr><name pos:line="22" pos:column="16">retval<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">==<pos:position pos:line="22" pos:column="25"/></operator> <literal type="number" pos:line="22" pos:column="26">0<pos:position pos:line="22" pos:column="27"/></literal></expr>)<pos:position pos:line="22" pos:column="28"/></condition><then pos:line="22" pos:column="28"> <block pos:line="22" pos:column="29">{ <comment type="line" pos:line="22" pos:column="31">// remote closure (somewhat less) common</comment>
        <comment type="line" pos:line="23" pos:column="9">// Note - read 0 == socket EOF, which is a valid read.</comment>
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">params<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">.<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">flag<pos:position pos:line="24" pos:column="20"/></name></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <name><name pos:line="24" pos:column="23">Comm<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">::<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="29">ENDFILE<pos:position pos:line="24" pos:column="36"/></name></name></expr>;<pos:position pos:line="24" pos:column="37"/></expr_stmt>

    }<pos:position pos:line="26" pos:column="6"/></block></then></if></elseif> <elseif pos:line="26" pos:column="7">else <if pos:line="26" pos:column="12">if <condition pos:line="26" pos:column="15">(<expr><name pos:line="26" pos:column="16">retval<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&lt;<pos:position pos:line="26" pos:column="27"/></operator> <literal type="number" pos:line="26" pos:column="25">0<pos:position pos:line="26" pos:column="26"/></literal></expr>)<pos:position pos:line="26" pos:column="27"/></condition><then pos:line="26" pos:column="27"> <block pos:line="26" pos:column="28">{ <comment type="line" pos:line="26" pos:column="30">// connection errors are worst-case</comment>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">debugs<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="number" pos:line="27" pos:column="16">5<pos:position pos:line="27" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="19">3<pos:position pos:line="27" pos:column="20"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="22">params<pos:position pos:line="27" pos:column="28"/></name><operator pos:line="27" pos:column="28">.<pos:position pos:line="27" pos:column="29"/></operator><name pos:line="27" pos:column="29">conn<pos:position pos:line="27" pos:column="33"/></name></name> <operator pos:line="27" pos:column="34">&lt;&lt;<pos:position pos:line="27" pos:column="42"/></operator> <literal type="string" pos:line="27" pos:column="37">" Comm::COMM_ERROR: "<pos:position pos:line="27" pos:column="58"/></literal> <operator pos:line="27" pos:column="59">&lt;&lt;<pos:position pos:line="27" pos:column="67"/></operator> <call><name pos:line="27" pos:column="62">xstrerr<pos:position pos:line="27" pos:column="69"/></name><argument_list pos:line="27" pos:column="69">(<argument><expr><name><name pos:line="27" pos:column="70">params<pos:position pos:line="27" pos:column="76"/></name><operator pos:line="27" pos:column="76">.<pos:position pos:line="27" pos:column="77"/></operator><name pos:line="27" pos:column="77">xerrno<pos:position pos:line="27" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="86"/></expr_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">ignoreErrno<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name><name pos:line="28" pos:column="25">params<pos:position pos:line="28" pos:column="31"/></name><operator pos:line="28" pos:column="31">.<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="32">xerrno<pos:position pos:line="28" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="40"/></condition><then pos:line="28" pos:column="40">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="29" pos:column="13">params<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">.<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">flag<pos:position pos:line="29" pos:column="24"/></name></name> <operator pos:line="29" pos:column="25">=<pos:position pos:line="29" pos:column="26"/></operator>  <name><name pos:line="29" pos:column="28">Comm<pos:position pos:line="29" pos:column="32"/></name><operator pos:line="29" pos:column="32">::<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="34">INPROGRESS<pos:position pos:line="29" pos:column="44"/></name></name></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt></block></then>
        <else pos:line="30" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="13">params<pos:position pos:line="31" pos:column="19"/></name><operator pos:line="31" pos:column="19">.<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="20">flag<pos:position pos:line="31" pos:column="24"/></name></name> <operator pos:line="31" pos:column="25">=<pos:position pos:line="31" pos:column="26"/></operator>  <name><name pos:line="31" pos:column="28">Comm<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">::<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">COMM_ERROR<pos:position pos:line="31" pos:column="44"/></name></name></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt></block></else></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if></elseif></if>

    <return pos:line="34" pos:column="5">return <expr><name><name pos:line="34" pos:column="12">params<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">.<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="19">flag<pos:position pos:line="34" pos:column="23"/></name></name></expr>;<pos:position pos:line="34" pos:column="24"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
