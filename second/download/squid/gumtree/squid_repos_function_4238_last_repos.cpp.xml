<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4238_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">compileOptimisedREs<pos:position pos:line="2" pos:column="20"/></name><parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name><name pos:line="2" pos:column="21">std<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name><name pos:line="2" pos:column="26">list<pos:position pos:line="2" pos:column="30"/></name><argument_list type="generic" pos:line="2" pos:column="30">&lt;<argument><expr><name pos:line="2" pos:column="31">RegexPattern<pos:position pos:line="2" pos:column="43"/></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="47"/></argument_list></name></name> <modifier pos:line="2" pos:column="45">&amp;<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="46">curlist<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="55">const<pos:position pos:line="2" pos:column="60"/></specifier> <name pos:line="2" pos:column="61">SBufList<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">&amp;<pos:position pos:line="2" pos:column="75"/></modifier></type><name pos:line="2" pos:column="71">sl<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">std<pos:position pos:line="4" pos:column="8"/></name><operator pos:line="4" pos:column="8">::<pos:position pos:line="4" pos:column="10"/></operator><name><name pos:line="4" pos:column="10">list<pos:position pos:line="4" pos:column="14"/></name><argument_list type="generic" pos:line="4" pos:column="14">&lt;<argument><expr><name pos:line="4" pos:column="15">RegexPattern<pos:position pos:line="4" pos:column="27"/></name></expr></argument>&gt;<pos:position pos:line="4" pos:column="31"/></argument_list></name></name></type> <name pos:line="4" pos:column="29">newlist<pos:position pos:line="4" pos:column="36"/></name></decl>;<pos:position pos:line="4" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">numREs<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">flags<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><name pos:line="6" pos:column="17">REG_EXTENDED<pos:position pos:line="6" pos:column="29"/></name> <operator pos:line="6" pos:column="30">|<pos:position pos:line="6" pos:column="31"/></operator> <name pos:line="6" pos:column="32">REG_NOSUB<pos:position pos:line="6" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">largeREindex<pos:position pos:line="7" pos:column="21"/></name> <init pos:line="7" pos:column="22">= <expr><literal type="number" pos:line="7" pos:column="24">0<pos:position pos:line="7" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">largeRE<pos:position pos:line="8" pos:column="17"/></name><index pos:line="8" pos:column="17">[<expr><name pos:line="8" pos:column="18">BUFSIZ<pos:position pos:line="8" pos:column="24"/></name></expr>]<pos:position pos:line="8" pos:column="25"/></index></name></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="9" pos:column="5">*<pos:position pos:line="9" pos:column="6"/></operator><name pos:line="9" pos:column="6">largeRE<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>

    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><decl><type><specifier pos:line="11" pos:column="10">const<pos:position pos:line="11" pos:column="15"/></specifier> <name pos:line="11" pos:column="16">SBuf<pos:position pos:line="11" pos:column="20"/></name> <modifier pos:line="11" pos:column="21">&amp;<pos:position pos:line="11" pos:column="26"/></modifier></type> <name pos:line="11" pos:column="23">configurationLineWord<pos:position pos:line="11" pos:column="44"/></name> <range pos:line="11" pos:column="45">: <expr><name pos:line="11" pos:column="47">sl<pos:position pos:line="11" pos:column="49"/></name></expr></range></decl></init>)<pos:position pos:line="11" pos:column="50"/></control> <block pos:line="11" pos:column="51">{
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">int<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">RElen<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">RElen<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name><name pos:line="13" pos:column="17">configurationLineWord<pos:position pos:line="13" pos:column="38"/></name><operator pos:line="13" pos:column="38">.<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="39">length<pos:position pos:line="13" pos:column="45"/></name></name><argument_list pos:line="13" pos:column="45">()<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>

        <decl_stmt><decl><specifier pos:line="15" pos:column="9">static<pos:position pos:line="15" pos:column="15"/></specifier> <type><specifier pos:line="15" pos:column="16">const<pos:position pos:line="15" pos:column="21"/></specifier> <name pos:line="15" pos:column="22">SBuf<pos:position pos:line="15" pos:column="26"/></name></type> <name pos:line="15" pos:column="27">minus_i<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><literal type="string" pos:line="15" pos:column="35">"-i"<pos:position pos:line="15" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></decl>;<pos:position pos:line="15" pos:column="41"/></decl_stmt>
        <decl_stmt><decl><specifier pos:line="16" pos:column="9">static<pos:position pos:line="16" pos:column="15"/></specifier> <type><specifier pos:line="16" pos:column="16">const<pos:position pos:line="16" pos:column="21"/></specifier> <name pos:line="16" pos:column="22">SBuf<pos:position pos:line="16" pos:column="26"/></name></type> <name pos:line="16" pos:column="27">plus_i<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">(<argument><expr><literal type="string" pos:line="16" pos:column="34">"+i"<pos:position pos:line="16" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></decl>;<pos:position pos:line="16" pos:column="40"/></decl_stmt>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">configurationLineWord<pos:position pos:line="17" pos:column="34"/></name> <operator pos:line="17" pos:column="35">==<pos:position pos:line="17" pos:column="37"/></operator> <name pos:line="17" pos:column="38">minus_i<pos:position pos:line="17" pos:column="45"/></name></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46"> <block pos:line="17" pos:column="47">{
            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><name pos:line="18" pos:column="17">flags<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">&amp;<pos:position pos:line="18" pos:column="28"/></operator> <name pos:line="18" pos:column="25">REG_ICASE<pos:position pos:line="18" pos:column="34"/></name></expr>)<pos:position pos:line="18" pos:column="35"/></condition><then pos:line="18" pos:column="35"> <block pos:line="18" pos:column="36">{
                <comment type="block" pos:line="19" pos:column="17">/* optimisation of  -i ... -i */</comment>
                <expr_stmt><expr><call><name pos:line="20" pos:column="17">debugs<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><literal type="number" pos:line="20" pos:column="24">28<pos:position pos:line="20" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="28">2<pos:position pos:line="20" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="31">"optimisation of -i ... -i"<pos:position pos:line="20" pos:column="58"/></literal></expr></argument> )<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>
            }<pos:position pos:line="21" pos:column="14"/></block></then> <else pos:line="21" pos:column="15">else <block pos:line="21" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="22" pos:column="17">debugs<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><literal type="number" pos:line="22" pos:column="24">28<pos:position pos:line="22" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="28">2<pos:position pos:line="22" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="31">"-i"<pos:position pos:line="22" pos:column="35"/></literal></expr></argument> )<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="38"/></expr_stmt>
                <if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><operator pos:line="23" pos:column="21">!<pos:position pos:line="23" pos:column="22"/></operator><call><name pos:line="23" pos:column="22">compileRE<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">newlist<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">largeRE<pos:position pos:line="23" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="50">flags<pos:position pos:line="23" pos:column="55"/></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="57"/></condition><then pos:line="23" pos:column="57">
                    <block type="pseudo"><return pos:line="24" pos:column="21">return <expr><literal type="number" pos:line="24" pos:column="28">0<pos:position pos:line="24" pos:column="29"/></literal></expr>;<pos:position pos:line="24" pos:column="30"/></return></block></then></if>
                <expr_stmt><expr><name pos:line="25" pos:column="17">flags<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">|=<pos:position pos:line="25" pos:column="25"/></operator> <name pos:line="25" pos:column="26">REG_ICASE<pos:position pos:line="25" pos:column="35"/></name></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="26" pos:column="17">largeRE<pos:position pos:line="26" pos:column="24"/></name><index pos:line="26" pos:column="24">[<expr><name pos:line="26" pos:column="25">largeREindex<pos:position pos:line="26" pos:column="37"/></name><operator pos:line="26" pos:column="37">=<pos:position pos:line="26" pos:column="38"/></operator><literal type="number" pos:line="26" pos:column="38">0<pos:position pos:line="26" pos:column="39"/></literal></expr>]<pos:position pos:line="26" pos:column="40"/></index></name> <operator pos:line="26" pos:column="41">=<pos:position pos:line="26" pos:column="42"/></operator> <literal type="char" pos:line="26" pos:column="43">'\0'<pos:position pos:line="26" pos:column="47"/></literal></expr>;<pos:position pos:line="26" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="27" pos:column="14"/></block></else></if>
        }<pos:position pos:line="28" pos:column="10"/></block></then> <elseif pos:line="28" pos:column="11">else <if pos:line="28" pos:column="16">if <condition pos:line="28" pos:column="19">(<expr><name pos:line="28" pos:column="20">configurationLineWord<pos:position pos:line="28" pos:column="41"/></name> <operator pos:line="28" pos:column="42">==<pos:position pos:line="28" pos:column="44"/></operator> <name pos:line="28" pos:column="45">plus_i<pos:position pos:line="28" pos:column="51"/></name></expr>)<pos:position pos:line="28" pos:column="52"/></condition><then pos:line="28" pos:column="52"> <block pos:line="28" pos:column="53">{
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><operator pos:line="29" pos:column="17">(<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">flags<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">&amp;<pos:position pos:line="29" pos:column="29"/></operator> <name pos:line="29" pos:column="26">REG_ICASE<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">)<pos:position pos:line="29" pos:column="36"/></operator> <operator pos:line="29" pos:column="37">==<pos:position pos:line="29" pos:column="39"/></operator> <literal type="number" pos:line="29" pos:column="40">0<pos:position pos:line="29" pos:column="41"/></literal></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <block pos:line="29" pos:column="43">{
                <comment type="block" pos:line="30" pos:column="17">/* optimisation of  +i ... +i */</comment>
                <expr_stmt><expr><call><name pos:line="31" pos:column="17">debugs<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><literal type="number" pos:line="31" pos:column="24">28<pos:position pos:line="31" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="28">2<pos:position pos:line="31" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="31">"optimisation of +i ... +i"<pos:position pos:line="31" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="60"/></expr_stmt>
            }<pos:position pos:line="32" pos:column="14"/></block></then> <else pos:line="32" pos:column="15">else <block pos:line="32" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="33" pos:column="17">debugs<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><literal type="number" pos:line="33" pos:column="24">28<pos:position pos:line="33" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="28">2<pos:position pos:line="33" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="31">"+i"<pos:position pos:line="33" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt>
                <if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><operator pos:line="34" pos:column="21">!<pos:position pos:line="34" pos:column="22"/></operator><call><name pos:line="34" pos:column="22">compileRE<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">newlist<pos:position pos:line="34" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="41">largeRE<pos:position pos:line="34" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="50">flags<pos:position pos:line="34" pos:column="55"/></name></expr></argument>)<pos:position pos:line="34" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="57"/></condition><then pos:line="34" pos:column="57">
                    <block type="pseudo"><return pos:line="35" pos:column="21">return <expr><literal type="number" pos:line="35" pos:column="28">0<pos:position pos:line="35" pos:column="29"/></literal></expr>;<pos:position pos:line="35" pos:column="30"/></return></block></then></if>
                <expr_stmt><expr><name pos:line="36" pos:column="17">flags<pos:position pos:line="36" pos:column="22"/></name> <operator pos:line="36" pos:column="23">&amp;=<pos:position pos:line="36" pos:column="29"/></operator> <operator pos:line="36" pos:column="26">~<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="27">REG_ICASE<pos:position pos:line="36" pos:column="36"/></name></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="37" pos:column="17">largeRE<pos:position pos:line="37" pos:column="24"/></name><index pos:line="37" pos:column="24">[<expr><name pos:line="37" pos:column="25">largeREindex<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">=<pos:position pos:line="37" pos:column="38"/></operator><literal type="number" pos:line="37" pos:column="38">0<pos:position pos:line="37" pos:column="39"/></literal></expr>]<pos:position pos:line="37" pos:column="40"/></index></name> <operator pos:line="37" pos:column="41">=<pos:position pos:line="37" pos:column="42"/></operator> <literal type="char" pos:line="37" pos:column="43">'\0'<pos:position pos:line="37" pos:column="47"/></literal></expr>;<pos:position pos:line="37" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="38" pos:column="14"/></block></else></if>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if></elseif> <elseif pos:line="39" pos:column="11">else <if pos:line="39" pos:column="16">if <condition pos:line="39" pos:column="19">(<expr><name pos:line="39" pos:column="20">RElen<pos:position pos:line="39" pos:column="25"/></name> <operator pos:line="39" pos:column="26">+<pos:position pos:line="39" pos:column="27"/></operator> <name pos:line="39" pos:column="28">largeREindex<pos:position pos:line="39" pos:column="40"/></name> <operator pos:line="39" pos:column="41">+<pos:position pos:line="39" pos:column="42"/></operator> <literal type="number" pos:line="39" pos:column="43">3<pos:position pos:line="39" pos:column="44"/></literal> <operator pos:line="39" pos:column="45">&lt;<pos:position pos:line="39" pos:column="49"/></operator> <name pos:line="39" pos:column="47">BUFSIZ<pos:position pos:line="39" pos:column="53"/></name><operator pos:line="39" pos:column="53">-<pos:position pos:line="39" pos:column="54"/></operator><literal type="number" pos:line="39" pos:column="54">1<pos:position pos:line="39" pos:column="55"/></literal></expr>)<pos:position pos:line="39" pos:column="56"/></condition><then pos:line="39" pos:column="56"> <block pos:line="39" pos:column="57">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">debugs<pos:position pos:line="40" pos:column="19"/></name><argument_list pos:line="40" pos:column="19">(<argument><expr><literal type="number" pos:line="40" pos:column="20">28<pos:position pos:line="40" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="24">2<pos:position pos:line="40" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="27">"adding RE '"<pos:position pos:line="40" pos:column="40"/></literal> <operator pos:line="40" pos:column="41">&lt;&lt;<pos:position pos:line="40" pos:column="49"/></operator> <name pos:line="40" pos:column="44">configurationLineWord<pos:position pos:line="40" pos:column="65"/></name> <operator pos:line="40" pos:column="66">&lt;&lt;<pos:position pos:line="40" pos:column="74"/></operator> <literal type="string" pos:line="40" pos:column="69">"'"<pos:position pos:line="40" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="74"/></expr_stmt>
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><name pos:line="41" pos:column="17">largeREindex<pos:position pos:line="41" pos:column="29"/></name> <operator pos:line="41" pos:column="30">&gt;<pos:position pos:line="41" pos:column="34"/></operator> <literal type="number" pos:line="41" pos:column="32">0<pos:position pos:line="41" pos:column="33"/></literal></expr>)<pos:position pos:line="41" pos:column="34"/></condition><then pos:line="41" pos:column="34"> <block pos:line="41" pos:column="35">{
                <expr_stmt><expr><name><name pos:line="42" pos:column="17">largeRE<pos:position pos:line="42" pos:column="24"/></name><index pos:line="42" pos:column="24">[<expr><name pos:line="42" pos:column="25">largeREindex<pos:position pos:line="42" pos:column="37"/></name></expr>]<pos:position pos:line="42" pos:column="38"/></index></name> <operator pos:line="42" pos:column="39">=<pos:position pos:line="42" pos:column="40"/></operator> <literal type="char" pos:line="42" pos:column="41">'|'<pos:position pos:line="42" pos:column="44"/></literal></expr>;<pos:position pos:line="42" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="43" pos:column="17">++<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">largeREindex<pos:position pos:line="43" pos:column="31"/></name></expr>;<pos:position pos:line="43" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="44" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name><name pos:line="45" pos:column="13">largeRE<pos:position pos:line="45" pos:column="20"/></name><index pos:line="45" pos:column="20">[<expr><name pos:line="45" pos:column="21">largeREindex<pos:position pos:line="45" pos:column="33"/></name></expr>]<pos:position pos:line="45" pos:column="34"/></index></name> <operator pos:line="45" pos:column="35">=<pos:position pos:line="45" pos:column="36"/></operator> <literal type="char" pos:line="45" pos:column="37">'('<pos:position pos:line="45" pos:column="40"/></literal></expr>;<pos:position pos:line="45" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="46" pos:column="13">++<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">largeREindex<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="47" pos:column="13">configurationLineWord<pos:position pos:line="47" pos:column="34"/></name><operator pos:line="47" pos:column="34">.<pos:position pos:line="47" pos:column="35"/></operator><name pos:line="47" pos:column="35">copy<pos:position pos:line="47" pos:column="39"/></name></name><argument_list pos:line="47" pos:column="39">(<argument><expr><name pos:line="47" pos:column="40">largeRE<pos:position pos:line="47" pos:column="47"/></name><operator pos:line="47" pos:column="47">+<pos:position pos:line="47" pos:column="48"/></operator><name pos:line="47" pos:column="48">largeREindex<pos:position pos:line="47" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="62">BUFSIZ<pos:position pos:line="47" pos:column="68"/></name><operator pos:line="47" pos:column="68">-<pos:position pos:line="47" pos:column="69"/></operator><name pos:line="47" pos:column="69">largeREindex<pos:position pos:line="47" pos:column="81"/></name></expr></argument>)<pos:position pos:line="47" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="83"/></expr_stmt>
            <expr_stmt><expr><name pos:line="48" pos:column="13">largeREindex<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">+=<pos:position pos:line="48" pos:column="28"/></operator> <call><name><name pos:line="48" pos:column="29">configurationLineWord<pos:position pos:line="48" pos:column="50"/></name><operator pos:line="48" pos:column="50">.<pos:position pos:line="48" pos:column="51"/></operator><name pos:line="48" pos:column="51">length<pos:position pos:line="48" pos:column="57"/></name></name><argument_list pos:line="48" pos:column="57">()<pos:position pos:line="48" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="49" pos:column="13">largeRE<pos:position pos:line="49" pos:column="20"/></name><index pos:line="49" pos:column="20">[<expr><name pos:line="49" pos:column="21">largeREindex<pos:position pos:line="49" pos:column="33"/></name></expr>]<pos:position pos:line="49" pos:column="34"/></index></name> <operator pos:line="49" pos:column="35">=<pos:position pos:line="49" pos:column="36"/></operator> <literal type="char" pos:line="49" pos:column="37">')'<pos:position pos:line="49" pos:column="40"/></literal></expr>;<pos:position pos:line="49" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="50" pos:column="13">++<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="15">largeREindex<pos:position pos:line="50" pos:column="27"/></name></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="51" pos:column="13">largeRE<pos:position pos:line="51" pos:column="20"/></name><index pos:line="51" pos:column="20">[<expr><name pos:line="51" pos:column="21">largeREindex<pos:position pos:line="51" pos:column="33"/></name></expr>]<pos:position pos:line="51" pos:column="34"/></index></name> <operator pos:line="51" pos:column="35">=<pos:position pos:line="51" pos:column="36"/></operator> <literal type="char" pos:line="51" pos:column="37">'\0'<pos:position pos:line="51" pos:column="41"/></literal></expr>;<pos:position pos:line="51" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="52" pos:column="13">++<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="15">numREs<pos:position pos:line="52" pos:column="21"/></name></expr>;<pos:position pos:line="52" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if></elseif> <else pos:line="53" pos:column="11">else <block pos:line="53" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">debugs<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><literal type="number" pos:line="54" pos:column="20">28<pos:position pos:line="54" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="24">2<pos:position pos:line="54" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="27">"buffer full, generating new optimised RE..."<pos:position pos:line="54" pos:column="72"/></literal></expr></argument> )<pos:position pos:line="54" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="75"/></expr_stmt>
            <if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><operator pos:line="55" pos:column="17">!<pos:position pos:line="55" pos:column="18"/></operator><call><name pos:line="55" pos:column="18">compileRE<pos:position pos:line="55" pos:column="27"/></name><argument_list pos:line="55" pos:column="27">(<argument><expr><name pos:line="55" pos:column="28">newlist<pos:position pos:line="55" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="37">largeRE<pos:position pos:line="55" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="46">flags<pos:position pos:line="55" pos:column="51"/></name></expr></argument>)<pos:position pos:line="55" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="53"/></condition><then pos:line="55" pos:column="53">
                <block type="pseudo"><return pos:line="56" pos:column="17">return <expr><literal type="number" pos:line="56" pos:column="24">0<pos:position pos:line="56" pos:column="25"/></literal></expr>;<pos:position pos:line="56" pos:column="26"/></return></block></then></if>
            <expr_stmt><expr><name><name pos:line="57" pos:column="13">largeRE<pos:position pos:line="57" pos:column="20"/></name><index pos:line="57" pos:column="20">[<expr><name pos:line="57" pos:column="21">largeREindex<pos:position pos:line="57" pos:column="33"/></name><operator pos:line="57" pos:column="33">=<pos:position pos:line="57" pos:column="34"/></operator><literal type="number" pos:line="57" pos:column="34">0<pos:position pos:line="57" pos:column="35"/></literal></expr>]<pos:position pos:line="57" pos:column="36"/></index></name> <operator pos:line="57" pos:column="37">=<pos:position pos:line="57" pos:column="38"/></operator> <literal type="char" pos:line="57" pos:column="39">'\0'<pos:position pos:line="57" pos:column="43"/></literal></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt>
            <continue pos:line="58" pos:column="13">continue;<pos:position pos:line="58" pos:column="22"/></continue>    <comment type="block" pos:line="58" pos:column="26">/* do the loop again to add the RE to largeRE */</comment>
        }<pos:position pos:line="59" pos:column="10"/></block></else></if>
    }<pos:position pos:line="60" pos:column="6"/></block></for>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><operator pos:line="62" pos:column="9">!<pos:position pos:line="62" pos:column="10"/></operator><call><name pos:line="62" pos:column="10">compileRE<pos:position pos:line="62" pos:column="19"/></name><argument_list pos:line="62" pos:column="19">(<argument><expr><name pos:line="62" pos:column="20">newlist<pos:position pos:line="62" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="29">largeRE<pos:position pos:line="62" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="38">flags<pos:position pos:line="62" pos:column="43"/></name></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="45"/></condition><then pos:line="62" pos:column="45">
        <block type="pseudo"><return pos:line="63" pos:column="9">return <expr><literal type="number" pos:line="63" pos:column="16">0<pos:position pos:line="63" pos:column="17"/></literal></expr>;<pos:position pos:line="63" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="65" pos:column="5">/* all was successful, so put the new list at the tail */</comment>
    <expr_stmt><expr><call><name><name pos:line="66" pos:column="5">curlist<pos:position pos:line="66" pos:column="12"/></name><operator pos:line="66" pos:column="12">.<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="13">splice<pos:position pos:line="66" pos:column="19"/></name></name><argument_list pos:line="66" pos:column="19">(<argument><expr><call><name><name pos:line="66" pos:column="20">curlist<pos:position pos:line="66" pos:column="27"/></name><operator pos:line="66" pos:column="27">.<pos:position pos:line="66" pos:column="28"/></operator><name pos:line="66" pos:column="28">end<pos:position pos:line="66" pos:column="31"/></name></name><argument_list pos:line="66" pos:column="31">()<pos:position pos:line="66" pos:column="33"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="66" pos:column="35">newlist<pos:position pos:line="66" pos:column="42"/></name></expr></argument>)<pos:position pos:line="66" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">debugs<pos:position pos:line="68" pos:column="11"/></name><argument_list pos:line="68" pos:column="11">(<argument><expr><literal type="number" pos:line="68" pos:column="12">28<pos:position pos:line="68" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="16">2<pos:position pos:line="68" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="19">numREs<pos:position pos:line="68" pos:column="25"/></name> <operator pos:line="68" pos:column="26">&lt;&lt;<pos:position pos:line="68" pos:column="34"/></operator> <literal type="string" pos:line="68" pos:column="29">" REs are optimised into one RE."<pos:position pos:line="68" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="64"/></expr_stmt>
    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">numREs<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">&gt;<pos:position pos:line="69" pos:column="20"/></operator> <literal type="number" pos:line="69" pos:column="18">100<pos:position pos:line="69" pos:column="21"/></literal></expr>)<pos:position pos:line="69" pos:column="22"/></condition><then pos:line="69" pos:column="22"> <block pos:line="69" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="70" pos:column="9">debugs<pos:position pos:line="70" pos:column="15"/></name><argument_list pos:line="70" pos:column="15">(<argument><expr><literal type="number" pos:line="70" pos:column="16">28<pos:position pos:line="70" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="70" pos:column="20">(<pos:position pos:line="70" pos:column="21"/></operator><ternary><condition><expr><name pos:line="70" pos:column="21">opt_parse_cfg_only<pos:position pos:line="70" pos:column="39"/></name></expr>?<pos:position pos:line="70" pos:column="40"/></condition><then><expr><name pos:line="70" pos:column="40">DBG_IMPORTANT<pos:position pos:line="70" pos:column="53"/></name></expr></then><else pos:line="70" pos:column="53">:<expr><literal type="number" pos:line="70" pos:column="54">2<pos:position pos:line="70" pos:column="55"/></literal></expr></else></ternary><operator pos:line="70" pos:column="55">)<pos:position pos:line="70" pos:column="56"/></operator></expr></argument>, <argument><expr><name pos:line="70" pos:column="58">cfg_filename<pos:position pos:line="70" pos:column="70"/></name> <operator pos:line="70" pos:column="71">&lt;&lt;<pos:position pos:line="70" pos:column="79"/></operator> <literal type="string" pos:line="70" pos:column="74">" line "<pos:position pos:line="70" pos:column="82"/></literal> <operator pos:line="70" pos:column="83">&lt;&lt;<pos:position pos:line="70" pos:column="91"/></operator> <name pos:line="70" pos:column="86">config_lineno<pos:position pos:line="70" pos:column="99"/></name> <operator pos:line="70" pos:column="100">&lt;&lt;<pos:position pos:line="70" pos:column="108"/></operator> <literal type="string" pos:line="70" pos:column="103">": "<pos:position pos:line="70" pos:column="107"/></literal> <operator pos:line="70" pos:column="108">&lt;&lt;<pos:position pos:line="70" pos:column="116"/></operator> <name pos:line="70" pos:column="111">config_input_line<pos:position pos:line="70" pos:column="128"/></name></expr></argument>)<pos:position pos:line="70" pos:column="129"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="130"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">debugs<pos:position pos:line="71" pos:column="15"/></name><argument_list pos:line="71" pos:column="15">(<argument><expr><literal type="number" pos:line="71" pos:column="16">28<pos:position pos:line="71" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="71" pos:column="20">(<pos:position pos:line="71" pos:column="21"/></operator><ternary><condition><expr><name pos:line="71" pos:column="21">opt_parse_cfg_only<pos:position pos:line="71" pos:column="39"/></name></expr>?<pos:position pos:line="71" pos:column="40"/></condition><then><expr><name pos:line="71" pos:column="40">DBG_IMPORTANT<pos:position pos:line="71" pos:column="53"/></name></expr></then><else pos:line="71" pos:column="53">:<expr><literal type="number" pos:line="71" pos:column="54">2<pos:position pos:line="71" pos:column="55"/></literal></expr></else></ternary><operator pos:line="71" pos:column="55">)<pos:position pos:line="71" pos:column="56"/></operator></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="58">"WARNING: there are more than 100 regular expressions. "<pos:position pos:line="71" pos:column="114"/></literal> <operator pos:line="71" pos:column="115">&lt;&lt;<pos:position pos:line="71" pos:column="123"/></operator>
               <literal type="string" pos:line="72" pos:column="16">"Consider using less REs or use rules without expressions like 'dstdomain'."<pos:position pos:line="72" pos:column="92"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="94"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <return pos:line="75" pos:column="5">return <expr><literal type="number" pos:line="75" pos:column="12">1<pos:position pos:line="75" pos:column="13"/></literal></expr>;<pos:position pos:line="75" pos:column="14"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
