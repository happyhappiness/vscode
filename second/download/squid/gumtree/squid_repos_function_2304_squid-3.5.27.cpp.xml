<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2304_squid-3.5.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">storeDigestSwapOutStep<pos:position pos:line="2" pos:column="23"/></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">void<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">data<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="35"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">StoreEntry<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">e<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><cast type="static" pos:line="4" pos:column="21">static_cast<argument_list type="generic" pos:line="4" pos:column="32">&lt;<argument><expr><name pos:line="4" pos:column="33">StoreEntry<pos:position pos:line="4" pos:column="43"/></name> <operator pos:line="4" pos:column="44">*<pos:position pos:line="4" pos:column="45"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="49"/></argument_list><argument_list pos:line="4" pos:column="46">(<argument><expr><name pos:line="4" pos:column="47">data<pos:position pos:line="4" pos:column="51"/></name></expr></argument>)<pos:position pos:line="4" pos:column="52"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="4" pos:column="53"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">chunk_size<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name><name pos:line="5" pos:column="22">Config<pos:position pos:line="5" pos:column="28"/></name><operator pos:line="5" pos:column="28">.<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="29">digest<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">.<pos:position pos:line="5" pos:column="36"/></operator><name pos:line="5" pos:column="36">swapout_chunk_size<pos:position pos:line="5" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="55"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name pos:line="6" pos:column="12">e<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">==<pos:position pos:line="6" pos:column="16"/></operator> <name><name pos:line="6" pos:column="17">sd_state<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">.<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="26">rewrite_lock<pos:position pos:line="6" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">e<pos:position pos:line="7" pos:column="13"/></name></expr></argument>)<pos:position pos:line="7" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="15"/></expr_stmt>
    <comment type="block" pos:line="8" pos:column="5">/* _add_ check that nothing bad happened while we were waiting @?@ @?@ */</comment>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><cast type="static" pos:line="10" pos:column="9">static_cast<argument_list type="generic" pos:line="10" pos:column="20">&lt;<argument><expr><name pos:line="10" pos:column="21">uint32_t<pos:position pos:line="10" pos:column="29"/></name></expr></argument>&gt;<pos:position pos:line="10" pos:column="33"/></argument_list><argument_list pos:line="10" pos:column="30">(<argument><expr><name><name pos:line="10" pos:column="31">sd_state<pos:position pos:line="10" pos:column="39"/></name><operator pos:line="10" pos:column="39">.<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="40">rewrite_offset<pos:position pos:line="10" pos:column="54"/></name></name> <operator pos:line="10" pos:column="55">+<pos:position pos:line="10" pos:column="56"/></operator> <name pos:line="10" pos:column="57">chunk_size<pos:position pos:line="10" pos:column="67"/></name></expr></argument>)<pos:position pos:line="10" pos:column="68"/></argument_list></cast> <operator pos:line="10" pos:column="69">&gt;<pos:position pos:line="10" pos:column="73"/></operator> <name><name pos:line="10" pos:column="71">store_digest<pos:position pos:line="10" pos:column="83"/></name><operator pos:line="10" pos:column="83">-&gt;<pos:position pos:line="10" pos:column="88"/></operator><name pos:line="10" pos:column="85">mask_size<pos:position pos:line="10" pos:column="94"/></name></name></expr>)<pos:position pos:line="10" pos:column="95"/></condition><then pos:line="10" pos:column="95">
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">chunk_size<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <name><name pos:line="11" pos:column="22">store_digest<pos:position pos:line="11" pos:column="34"/></name><operator pos:line="11" pos:column="34">-&gt;<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="36">mask_size<pos:position pos:line="11" pos:column="45"/></name></name> <operator pos:line="11" pos:column="46">-<pos:position pos:line="11" pos:column="47"/></operator> <name><name pos:line="11" pos:column="48">sd_state<pos:position pos:line="11" pos:column="56"/></name><operator pos:line="11" pos:column="56">.<pos:position pos:line="11" pos:column="57"/></operator><name pos:line="11" pos:column="57">rewrite_offset<pos:position pos:line="11" pos:column="71"/></name></name></expr>;<pos:position pos:line="11" pos:column="72"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="13" pos:column="5">e<pos:position pos:line="13" pos:column="6"/></name><operator pos:line="13" pos:column="6">-&gt;<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="8">append<pos:position pos:line="13" pos:column="14"/></name></name><argument_list pos:line="13" pos:column="14">(<argument><expr><name><name pos:line="13" pos:column="15">store_digest<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">mask<pos:position pos:line="13" pos:column="33"/></name></name> <operator pos:line="13" pos:column="34">+<pos:position pos:line="13" pos:column="35"/></operator> <name><name pos:line="13" pos:column="36">sd_state<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">.<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="45">rewrite_offset<pos:position pos:line="13" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="61">chunk_size<pos:position pos:line="13" pos:column="71"/></name></expr></argument>)<pos:position pos:line="13" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="73"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">debugs<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="number" pos:line="15" pos:column="12">71<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="16">3<pos:position pos:line="15" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="19">"storeDigestSwapOutStep: size: "<pos:position pos:line="15" pos:column="51"/></literal> <operator pos:line="15" pos:column="52">&lt;&lt;<pos:position pos:line="15" pos:column="60"/></operator> <name><name pos:line="15" pos:column="55">store_digest<pos:position pos:line="15" pos:column="67"/></name><operator pos:line="15" pos:column="67">-&gt;<pos:position pos:line="15" pos:column="72"/></operator><name pos:line="15" pos:column="69">mask_size<pos:position pos:line="15" pos:column="78"/></name></name> <operator pos:line="15" pos:column="79">&lt;&lt;<pos:position pos:line="15" pos:column="87"/></operator>
           <literal type="string" pos:line="16" pos:column="12">" offset: "<pos:position pos:line="16" pos:column="23"/></literal> <operator pos:line="16" pos:column="24">&lt;&lt;<pos:position pos:line="16" pos:column="32"/></operator> <name><name pos:line="16" pos:column="27">sd_state<pos:position pos:line="16" pos:column="35"/></name><operator pos:line="16" pos:column="35">.<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="36">rewrite_offset<pos:position pos:line="16" pos:column="50"/></name></name> <operator pos:line="16" pos:column="51">&lt;&lt;<pos:position pos:line="16" pos:column="59"/></operator> <literal type="string" pos:line="16" pos:column="54">" chunk: "<pos:position pos:line="16" pos:column="64"/></literal> <operator pos:line="16" pos:column="65">&lt;&lt;<pos:position pos:line="16" pos:column="73"/></operator>
           <name pos:line="17" pos:column="12">chunk_size<pos:position pos:line="17" pos:column="22"/></name> <operator pos:line="17" pos:column="23">&lt;&lt;<pos:position pos:line="17" pos:column="31"/></operator> <literal type="string" pos:line="17" pos:column="26">" bytes"<pos:position pos:line="17" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="19" pos:column="5">sd_state<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">.<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">rewrite_offset<pos:position pos:line="19" pos:column="28"/></name></name> <operator pos:line="19" pos:column="29">+=<pos:position pos:line="19" pos:column="31"/></operator> <name pos:line="19" pos:column="32">chunk_size<pos:position pos:line="19" pos:column="42"/></name></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>

    <comment type="block" pos:line="21" pos:column="5">/* are we done ? */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><cast type="static" pos:line="22" pos:column="9">static_cast<argument_list type="generic" pos:line="22" pos:column="20">&lt;<argument><expr><name pos:line="22" pos:column="21">uint32_t<pos:position pos:line="22" pos:column="29"/></name></expr></argument>&gt;<pos:position pos:line="22" pos:column="33"/></argument_list><argument_list pos:line="22" pos:column="30">(<argument><expr><name><name pos:line="22" pos:column="31">sd_state<pos:position pos:line="22" pos:column="39"/></name><operator pos:line="22" pos:column="39">.<pos:position pos:line="22" pos:column="40"/></operator><name pos:line="22" pos:column="40">rewrite_offset<pos:position pos:line="22" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="55"/></argument_list></cast> <operator pos:line="22" pos:column="56">&gt;=<pos:position pos:line="22" pos:column="61"/></operator> <name><name pos:line="22" pos:column="59">store_digest<pos:position pos:line="22" pos:column="71"/></name><operator pos:line="22" pos:column="71">-&gt;<pos:position pos:line="22" pos:column="76"/></operator><name pos:line="22" pos:column="73">mask_size<pos:position pos:line="22" pos:column="82"/></name></name></expr>)<pos:position pos:line="22" pos:column="83"/></condition><then pos:line="22" pos:column="83">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="9">storeDigestRewriteFinish<pos:position pos:line="23" pos:column="33"/></name><argument_list pos:line="23" pos:column="33">(<argument><expr><name pos:line="23" pos:column="34">e<pos:position pos:line="23" pos:column="35"/></name></expr></argument>)<pos:position pos:line="23" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt></block></then>
    <else pos:line="24" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="9">eventAdd<pos:position pos:line="25" pos:column="17"/></name><argument_list pos:line="25" pos:column="17">(<argument><expr><literal type="string" pos:line="25" pos:column="18">"storeDigestSwapOutStep"<pos:position pos:line="25" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="44">storeDigestSwapOutStep<pos:position pos:line="25" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="68">data<pos:position pos:line="25" pos:column="72"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="74">0.0<pos:position pos:line="25" pos:column="77"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="79">1<pos:position pos:line="25" pos:column="80"/></literal></expr></argument>, <argument><expr><literal type="boolean" pos:line="25" pos:column="82">false<pos:position pos:line="25" pos:column="87"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="89"/></expr_stmt></block></else></if>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
