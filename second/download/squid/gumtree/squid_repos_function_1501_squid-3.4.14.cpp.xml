<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1501_squid-3.4.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">sendSignal<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">void<pos:position pos:line="2" pos:column="16"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="17"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">pid_t<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">pid<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><name pos:line="5" pos:column="5">debug_log<pos:position pos:line="5" pos:column="14"/></name> <operator pos:line="5" pos:column="15">=<pos:position pos:line="5" pos:column="16"/></operator> <name pos:line="5" pos:column="17">stderr<pos:position pos:line="5" pos:column="23"/></name></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><call><name pos:line="7" pos:column="9">strcmp<pos:position pos:line="7" pos:column="15"/></name><argument_list pos:line="7" pos:column="15">(<argument><expr><name><name pos:line="7" pos:column="16">Config<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">.<pos:position pos:line="7" pos:column="23"/></operator><name pos:line="7" pos:column="23">pidFilename<pos:position pos:line="7" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="36">"none"<pos:position pos:line="7" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call> <operator pos:line="7" pos:column="44">==<pos:position pos:line="7" pos:column="46"/></operator> <literal type="number" pos:line="7" pos:column="47">0<pos:position pos:line="7" pos:column="48"/></literal></expr>)<pos:position pos:line="7" pos:column="49"/></condition><then pos:line="7" pos:column="49"> <block pos:line="7" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="19">DBG_IMPORTANT<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="34">"No pid_filename specified. Trusting you know what you are doing."<pos:position pos:line="8" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="102"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="11" pos:column="5">pid<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <call><name pos:line="11" pos:column="11">readPidFile<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">()<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">pid<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">&gt;<pos:position pos:line="13" pos:column="17"/></operator> <literal type="number" pos:line="13" pos:column="15">1<pos:position pos:line="13" pos:column="16"/></literal></expr>)<pos:position pos:line="13" pos:column="17"/></condition><then pos:line="13" pos:column="17"> <block pos:line="13" pos:column="18">{
<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">USE_WIN32_SERVICE<pos:position pos:line="14" pos:column="22"/></name></expr></cpp:if>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">opt_signal_service<pos:position pos:line="15" pos:column="31"/></name></expr>)<pos:position pos:line="15" pos:column="32"/></condition><then pos:line="15" pos:column="32"> <block pos:line="15" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">WIN32_sendSignal<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">opt_send_signal<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">exit<pos:position pos:line="17" pos:column="17"/></name><argument_list pos:line="17" pos:column="17">(<argument><expr><literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></then> <else pos:line="18" pos:column="11">else <block pos:line="18" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">fprintf<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">stderr<pos:position pos:line="19" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="29">"%s: ERROR: Could not send "<pos:position pos:line="19" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="59">APP_SHORTNAME<pos:position pos:line="19" pos:column="72"/></name></expr></argument>)<pos:position pos:line="19" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="74"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">fprintf<pos:position pos:line="20" pos:column="20"/></name><argument_list pos:line="20" pos:column="20">(<argument><expr><name pos:line="20" pos:column="21">stderr<pos:position pos:line="20" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="29">"signal to Squid Service:\n"<pos:position pos:line="20" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">fprintf<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><name pos:line="21" pos:column="21">stderr<pos:position pos:line="21" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="29">"missing -n command line switch.\n"<pos:position pos:line="21" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">exit<pos:position pos:line="22" pos:column="17"/></name><argument_list pos:line="22" pos:column="17">(<argument><expr><literal type="number" pos:line="22" pos:column="18">1<pos:position pos:line="22" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></else></if>
        <comment type="block" pos:line="24" pos:column="9">/* NOTREACHED */</comment>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><call><name pos:line="27" pos:column="13">kill<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">pid<pos:position pos:line="27" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="23">opt_send_signal<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call> <operator pos:line="27" pos:column="40">&amp;&amp;<pos:position pos:line="27" pos:column="50"/></operator>
                <comment type="block" pos:line="28" pos:column="17">/* ignore permissions if just running check */</comment>
                <operator pos:line="29" pos:column="17">!<pos:position pos:line="29" pos:column="18"/></operator><operator pos:line="29" pos:column="18">(<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">opt_send_signal<pos:position pos:line="29" pos:column="34"/></name> <operator pos:line="29" pos:column="35">==<pos:position pos:line="29" pos:column="37"/></operator> <literal type="number" pos:line="29" pos:column="38">0<pos:position pos:line="29" pos:column="39"/></literal> <operator pos:line="29" pos:column="40">&amp;&amp;<pos:position pos:line="29" pos:column="50"/></operator> <name pos:line="29" pos:column="43">errno<pos:position pos:line="29" pos:column="48"/></name> <operator pos:line="29" pos:column="49">==<pos:position pos:line="29" pos:column="51"/></operator> <name pos:line="29" pos:column="52">EPERM<pos:position pos:line="29" pos:column="57"/></name><operator pos:line="29" pos:column="57">)<pos:position pos:line="29" pos:column="58"/></operator></expr>)<pos:position pos:line="29" pos:column="59"/></condition><then pos:line="29" pos:column="59"> <block pos:line="29" pos:column="60">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">fprintf<pos:position pos:line="30" pos:column="20"/></name><argument_list pos:line="30" pos:column="20">(<argument><expr><name pos:line="30" pos:column="21">stderr<pos:position pos:line="30" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="29">"%s: ERROR: Could not send "<pos:position pos:line="30" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="59">APP_SHORTNAME<pos:position pos:line="30" pos:column="72"/></name></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">fprintf<pos:position pos:line="31" pos:column="20"/></name><argument_list pos:line="31" pos:column="20">(<argument><expr><name pos:line="31" pos:column="21">stderr<pos:position pos:line="31" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="29">"signal %d to process %d: %s\n"<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>,
                    <argument><expr><name pos:line="32" pos:column="21">opt_send_signal<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="38">(<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="39">int<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">)<pos:position pos:line="32" pos:column="43"/></operator> <name pos:line="32" pos:column="44">pid<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="49">xstrerror<pos:position pos:line="32" pos:column="58"/></name><argument_list pos:line="32" pos:column="58">()<pos:position pos:line="32" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">exit<pos:position pos:line="33" pos:column="17"/></name><argument_list pos:line="33" pos:column="17">(<argument><expr><literal type="number" pos:line="33" pos:column="18">1<pos:position pos:line="33" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then> <else pos:line="35" pos:column="7">else <block pos:line="35" pos:column="12">{
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">opt_send_signal<pos:position pos:line="36" pos:column="28"/></name> <operator pos:line="36" pos:column="29">!=<pos:position pos:line="36" pos:column="31"/></operator> <name pos:line="36" pos:column="32">SIGTERM<pos:position pos:line="36" pos:column="39"/></name></expr>)<pos:position pos:line="36" pos:column="40"/></condition><then pos:line="36" pos:column="40"> <block pos:line="36" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="37" pos:column="13">fprintf<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">stderr<pos:position pos:line="37" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="29">"%s: ERROR: No running copy\n"<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="61">APP_SHORTNAME<pos:position pos:line="37" pos:column="74"/></name></expr></argument>)<pos:position pos:line="37" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">exit<pos:position pos:line="38" pos:column="17"/></name><argument_list pos:line="38" pos:column="17">(<argument><expr><literal type="number" pos:line="38" pos:column="18">1<pos:position pos:line="38" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="39" pos:column="10"/></block></then> <else pos:line="39" pos:column="11">else <block pos:line="39" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">fprintf<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><name pos:line="40" pos:column="21">stderr<pos:position pos:line="40" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="29">"%s: No running copy\n"<pos:position pos:line="40" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="54">APP_SHORTNAME<pos:position pos:line="40" pos:column="67"/></name></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">exit<pos:position pos:line="41" pos:column="17"/></name><argument_list pos:line="41" pos:column="17">(<argument><expr><literal type="number" pos:line="41" pos:column="18">0<pos:position pos:line="41" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></else></if>
    }<pos:position pos:line="43" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="45" pos:column="5">/* signal successfully sent */</comment>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">exit<pos:position pos:line="46" pos:column="9"/></name><argument_list pos:line="46" pos:column="9">(<argument><expr><literal type="number" pos:line="46" pos:column="10">0<pos:position pos:line="46" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="13"/></expr_stmt>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
