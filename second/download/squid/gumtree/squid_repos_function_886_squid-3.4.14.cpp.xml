<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_886_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">comm_openex<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">int<pos:position pos:line="2" pos:column="16"/></name></type> <name pos:line="2" pos:column="17">sock_type<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>,
            <parameter><decl><type><name pos:line="3" pos:column="13">int<pos:position pos:line="3" pos:column="16"/></name></type> <name pos:line="3" pos:column="17">proto<pos:position pos:line="3" pos:column="22"/></name></decl></parameter>,
            <parameter><decl><type><name><name pos:line="4" pos:column="13">Ip<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">::<pos:position pos:line="4" pos:column="17"/></operator><name pos:line="4" pos:column="17">Address<pos:position pos:line="4" pos:column="24"/></name></name> <modifier pos:line="4" pos:column="25">&amp;<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="26">addr<pos:position pos:line="4" pos:column="30"/></name></decl></parameter>,
            <parameter><decl><type><name pos:line="5" pos:column="13">int<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">flags<pos:position pos:line="5" pos:column="22"/></name></decl></parameter>,
            <parameter><decl><type><name pos:line="6" pos:column="13">tos_t<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">tos<pos:position pos:line="6" pos:column="22"/></name></decl></parameter>,
            <parameter><decl><type><name pos:line="7" pos:column="13">nfmark_t<pos:position pos:line="7" pos:column="21"/></name></type> <name pos:line="7" pos:column="22">nfmark<pos:position pos:line="7" pos:column="28"/></name></decl></parameter>,
            <parameter><decl><type><specifier pos:line="8" pos:column="13">const<pos:position pos:line="8" pos:column="18"/></specifier> <name pos:line="8" pos:column="19">char<pos:position pos:line="8" pos:column="23"/></name> <modifier pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></modifier></type><name pos:line="8" pos:column="25">note<pos:position pos:line="8" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="8" pos:column="30"/></parameter_list>
<block pos:line="9" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">new_socket<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">addrinfo<pos:position pos:line="11" pos:column="20"/></name></name> <modifier pos:line="11" pos:column="21">*<pos:position pos:line="11" pos:column="22"/></modifier></type><name pos:line="11" pos:column="22">AI<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><name pos:line="11" pos:column="27">NULL<pos:position pos:line="11" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">PROF_start<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><name pos:line="13" pos:column="16">comm_open<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="14" pos:column="5">/* Create socket for accepting new connections. */</comment>
    <expr_stmt><expr><operator pos:line="15" pos:column="5">++<pos:position pos:line="15" pos:column="7"/></operator> <name><name pos:line="15" pos:column="8">statCounter<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">.<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="20">syscalls<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">.<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">sock<pos:position pos:line="15" pos:column="33"/></name><operator pos:line="15" pos:column="33">.<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="34">sockets<pos:position pos:line="15" pos:column="41"/></name></name></expr>;<pos:position pos:line="15" pos:column="42"/></expr_stmt>

    <comment type="block" pos:line="17" pos:column="5">/* Setup the socket addrinfo details for use */</comment>
    <expr_stmt><expr><call><name><name pos:line="18" pos:column="5">addr<pos:position pos:line="18" pos:column="9"/></name><operator pos:line="18" pos:column="9">.<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">getAddrInfo<pos:position pos:line="18" pos:column="21"/></name></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">AI<pos:position pos:line="18" pos:column="24"/></name></expr></argument>)<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">AI<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">-&gt;<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="9">ai_socktype<pos:position pos:line="19" pos:column="20"/></name></name> <operator pos:line="19" pos:column="21">=<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">sock_type<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="20" pos:column="5">AI<pos:position pos:line="20" pos:column="7"/></name><operator pos:line="20" pos:column="7">-&gt;<pos:position pos:line="20" pos:column="12"/></operator><name pos:line="20" pos:column="9">ai_protocol<pos:position pos:line="20" pos:column="20"/></name></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">proto<pos:position pos:line="20" pos:column="28"/></name></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">debugs<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="number" pos:line="22" pos:column="12">50<pos:position pos:line="22" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="16">3<pos:position pos:line="22" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="19">"comm_openex: Attempt open socket for: "<pos:position pos:line="22" pos:column="59"/></literal> <operator pos:line="22" pos:column="60">&lt;&lt;<pos:position pos:line="22" pos:column="68"/></operator> <name pos:line="22" pos:column="63">addr<pos:position pos:line="22" pos:column="67"/></name></expr></argument> )<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="70"/></expr_stmt>

    <expr_stmt><expr><name pos:line="24" pos:column="5">new_socket<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <call><name pos:line="24" pos:column="18">socket<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name><name pos:line="24" pos:column="25">AI<pos:position pos:line="24" pos:column="27"/></name><operator pos:line="24" pos:column="27">-&gt;<pos:position pos:line="24" pos:column="32"/></operator><name pos:line="24" pos:column="29">ai_family<pos:position pos:line="24" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="40">AI<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">-&gt;<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="44">ai_socktype<pos:position pos:line="24" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="57">AI<pos:position pos:line="24" pos:column="59"/></name><operator pos:line="24" pos:column="59">-&gt;<pos:position pos:line="24" pos:column="64"/></operator><name pos:line="24" pos:column="61">ai_protocol<pos:position pos:line="24" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="74"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* under IPv6 there is the possibility IPv6 is present but disabled. */</comment>
    <comment type="block" pos:line="27" pos:column="5">/* try again as IPv4-native if possible */</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">( <expr><name pos:line="28" pos:column="10">new_socket<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">&lt;<pos:position pos:line="28" pos:column="25"/></operator> <literal type="number" pos:line="28" pos:column="23">0<pos:position pos:line="28" pos:column="24"/></literal> <operator pos:line="28" pos:column="25">&amp;&amp;<pos:position pos:line="28" pos:column="35"/></operator> <name><name pos:line="28" pos:column="28">Ip<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">::<pos:position pos:line="28" pos:column="32"/></operator><name pos:line="28" pos:column="32">EnableIpv6<pos:position pos:line="28" pos:column="42"/></name></name> <operator pos:line="28" pos:column="43">&amp;&amp;<pos:position pos:line="28" pos:column="53"/></operator> <call><name><name pos:line="28" pos:column="46">addr<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">.<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="51">isIPv6<pos:position pos:line="28" pos:column="57"/></name></name><argument_list pos:line="28" pos:column="57">()<pos:position pos:line="28" pos:column="59"/></argument_list></call> <operator pos:line="28" pos:column="60">&amp;&amp;<pos:position pos:line="28" pos:column="70"/></operator> <call><name><name pos:line="28" pos:column="63">addr<pos:position pos:line="28" pos:column="67"/></name><operator pos:line="28" pos:column="67">.<pos:position pos:line="28" pos:column="68"/></operator><name pos:line="28" pos:column="68">setIPv4<pos:position pos:line="28" pos:column="75"/></name></name><argument_list pos:line="28" pos:column="75">()<pos:position pos:line="28" pos:column="77"/></argument_list></call></expr> )<pos:position pos:line="28" pos:column="79"/></condition><then pos:line="28" pos:column="79"> <block pos:line="28" pos:column="80">{
        <comment type="block" pos:line="29" pos:column="9">/* attempt to open this IPv4-only. */</comment>
        <expr_stmt><expr><call><name><name pos:line="30" pos:column="9">Ip<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">::<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">Address<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">::<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="22">FreeAddrInfo<pos:position pos:line="30" pos:column="34"/></name></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name pos:line="30" pos:column="35">AI<pos:position pos:line="30" pos:column="37"/></name></expr></argument>)<pos:position pos:line="30" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="39"/></expr_stmt>
        <comment type="block" pos:line="31" pos:column="9">/* Setup the socket addrinfo details for use */</comment>
        <expr_stmt><expr><call><name><name pos:line="32" pos:column="9">addr<pos:position pos:line="32" pos:column="13"/></name><operator pos:line="32" pos:column="13">.<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">getAddrInfo<pos:position pos:line="32" pos:column="25"/></name></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">AI<pos:position pos:line="32" pos:column="28"/></name></expr></argument>)<pos:position pos:line="32" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">AI<pos:position pos:line="33" pos:column="11"/></name><operator pos:line="33" pos:column="11">-&gt;<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="13">ai_socktype<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">=<pos:position pos:line="33" pos:column="26"/></operator> <name pos:line="33" pos:column="27">sock_type<pos:position pos:line="33" pos:column="36"/></name></expr>;<pos:position pos:line="33" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">AI<pos:position pos:line="34" pos:column="11"/></name><operator pos:line="34" pos:column="11">-&gt;<pos:position pos:line="34" pos:column="16"/></operator><name pos:line="34" pos:column="13">ai_protocol<pos:position pos:line="34" pos:column="24"/></name></name> <operator pos:line="34" pos:column="25">=<pos:position pos:line="34" pos:column="26"/></operator> <name pos:line="34" pos:column="27">proto<pos:position pos:line="34" pos:column="32"/></name></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debugs<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><literal type="number" pos:line="35" pos:column="16">50<pos:position pos:line="35" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="20">3<pos:position pos:line="35" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="23">"comm_openex: Attempt fallback open socket for: "<pos:position pos:line="35" pos:column="72"/></literal> <operator pos:line="35" pos:column="73">&lt;&lt;<pos:position pos:line="35" pos:column="81"/></operator> <name pos:line="35" pos:column="76">addr<pos:position pos:line="35" pos:column="80"/></name></expr></argument> )<pos:position pos:line="35" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><name pos:line="36" pos:column="9">new_socket<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <call><name pos:line="36" pos:column="22">socket<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><name><name pos:line="36" pos:column="29">AI<pos:position pos:line="36" pos:column="31"/></name><operator pos:line="36" pos:column="31">-&gt;<pos:position pos:line="36" pos:column="36"/></operator><name pos:line="36" pos:column="33">ai_family<pos:position pos:line="36" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="44">AI<pos:position pos:line="36" pos:column="46"/></name><operator pos:line="36" pos:column="46">-&gt;<pos:position pos:line="36" pos:column="51"/></operator><name pos:line="36" pos:column="48">ai_socktype<pos:position pos:line="36" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="61">AI<pos:position pos:line="36" pos:column="63"/></name><operator pos:line="36" pos:column="63">-&gt;<pos:position pos:line="36" pos:column="68"/></operator><name pos:line="36" pos:column="65">ai_protocol<pos:position pos:line="36" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">debugs<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><literal type="number" pos:line="37" pos:column="16">50<pos:position pos:line="37" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="20">2<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="23">HERE<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">&lt;&lt;<pos:position pos:line="37" pos:column="36"/></operator> <literal type="string" pos:line="37" pos:column="31">"attempt open "<pos:position pos:line="37" pos:column="46"/></literal> <operator pos:line="37" pos:column="47">&lt;&lt;<pos:position pos:line="37" pos:column="55"/></operator> <name pos:line="37" pos:column="50">note<pos:position pos:line="37" pos:column="54"/></name> <operator pos:line="37" pos:column="55">&lt;&lt;<pos:position pos:line="37" pos:column="63"/></operator> <literal type="string" pos:line="37" pos:column="58">" socket on: "<pos:position pos:line="37" pos:column="72"/></literal> <operator pos:line="37" pos:column="73">&lt;&lt;<pos:position pos:line="37" pos:column="81"/></operator> <name pos:line="37" pos:column="76">addr<pos:position pos:line="37" pos:column="80"/></name></expr></argument>)<pos:position pos:line="37" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="82"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">new_socket<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">&lt;<pos:position pos:line="40" pos:column="24"/></operator> <literal type="number" pos:line="40" pos:column="22">0<pos:position pos:line="40" pos:column="23"/></literal></expr>)<pos:position pos:line="40" pos:column="24"/></condition><then pos:line="40" pos:column="24"> <block pos:line="40" pos:column="25">{
        <comment type="block" pos:line="41" pos:column="9">/* Increase the number of reserved fd's if calls to socket()
         * are failing because the open file table is full.  This
         * limits the number of simultaneous clients */</comment>

        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">limitError<pos:position pos:line="45" pos:column="23"/></name><argument_list pos:line="45" pos:column="23">(<argument><expr><name pos:line="45" pos:column="24">errno<pos:position pos:line="45" pos:column="29"/></name></expr></argument>)<pos:position pos:line="45" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="31"/></condition><then pos:line="45" pos:column="31"> <block pos:line="45" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">debugs<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">(<argument><expr><literal type="number" pos:line="46" pos:column="20">50<pos:position pos:line="46" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="24">DBG_IMPORTANT<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="39">"comm_open: socket failure: "<pos:position pos:line="46" pos:column="68"/></literal> <operator pos:line="46" pos:column="69">&lt;&lt;<pos:position pos:line="46" pos:column="77"/></operator> <call><name pos:line="46" pos:column="72">xstrerror<pos:position pos:line="46" pos:column="81"/></name><argument_list pos:line="46" pos:column="81">()<pos:position pos:line="46" pos:column="83"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="85"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">fdAdjustReserved<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">()<pos:position pos:line="47" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></then> <else pos:line="48" pos:column="11">else <block pos:line="48" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">debugs<pos:position pos:line="49" pos:column="19"/></name><argument_list pos:line="49" pos:column="19">(<argument><expr><literal type="number" pos:line="49" pos:column="20">50<pos:position pos:line="49" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="24">DBG_CRITICAL<pos:position pos:line="49" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="38">"comm_open: socket failure: "<pos:position pos:line="49" pos:column="67"/></literal> <operator pos:line="49" pos:column="68">&lt;&lt;<pos:position pos:line="49" pos:column="76"/></operator> <call><name pos:line="49" pos:column="71">xstrerror<pos:position pos:line="49" pos:column="80"/></name><argument_list pos:line="49" pos:column="80">()<pos:position pos:line="49" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="84"/></expr_stmt>
        }<pos:position pos:line="50" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name><name pos:line="52" pos:column="9">Ip<pos:position pos:line="52" pos:column="11"/></name><operator pos:line="52" pos:column="11">::<pos:position pos:line="52" pos:column="13"/></operator><name pos:line="52" pos:column="13">Address<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">::<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">FreeAddrInfo<pos:position pos:line="52" pos:column="34"/></name></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">AI<pos:position pos:line="52" pos:column="37"/></name></expr></argument>)<pos:position pos:line="52" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="39"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="54" pos:column="9">PROF_stop<pos:position pos:line="54" pos:column="18"/></name><argument_list pos:line="54" pos:column="18">(<argument><expr><name pos:line="54" pos:column="19">comm_open<pos:position pos:line="54" pos:column="28"/></name></expr></argument>)<pos:position pos:line="54" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="30"/></expr_stmt>
        <return pos:line="55" pos:column="9">return <expr><operator pos:line="55" pos:column="16">-<pos:position pos:line="55" pos:column="17"/></operator><literal type="number" pos:line="55" pos:column="17">1<pos:position pos:line="55" pos:column="18"/></literal></expr>;<pos:position pos:line="55" pos:column="19"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="58" pos:column="5">// XXX: temporary for the transition. comm_openex will eventually have a conn to play with.</comment>
    <decl_stmt><decl><type><name><name pos:line="59" pos:column="5">Comm<pos:position pos:line="59" pos:column="9"/></name><operator pos:line="59" pos:column="9">::<pos:position pos:line="59" pos:column="11"/></operator><name pos:line="59" pos:column="11">ConnectionPointer<pos:position pos:line="59" pos:column="28"/></name></name></type> <name pos:line="59" pos:column="29">conn<pos:position pos:line="59" pos:column="33"/></name> <init pos:line="59" pos:column="34">= <expr><operator pos:line="59" pos:column="36">new<pos:position pos:line="59" pos:column="39"/></operator> <name><name pos:line="59" pos:column="40">Comm<pos:position pos:line="59" pos:column="44"/></name><operator pos:line="59" pos:column="44">::<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="46">Connection<pos:position pos:line="59" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="59" pos:column="57"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="60" pos:column="5">conn<pos:position pos:line="60" pos:column="9"/></name><operator pos:line="60" pos:column="9">-&gt;<pos:position pos:line="60" pos:column="14"/></operator><name pos:line="60" pos:column="11">local<pos:position pos:line="60" pos:column="16"/></name></name> <operator pos:line="60" pos:column="17">=<pos:position pos:line="60" pos:column="18"/></operator> <name pos:line="60" pos:column="19">addr<pos:position pos:line="60" pos:column="23"/></name></expr>;<pos:position pos:line="60" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">conn<pos:position pos:line="61" pos:column="9"/></name><operator pos:line="61" pos:column="9">-&gt;<pos:position pos:line="61" pos:column="14"/></operator><name pos:line="61" pos:column="11">fd<pos:position pos:line="61" pos:column="13"/></name></name> <operator pos:line="61" pos:column="14">=<pos:position pos:line="61" pos:column="15"/></operator> <name pos:line="61" pos:column="16">new_socket<pos:position pos:line="61" pos:column="26"/></name></expr>;<pos:position pos:line="61" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="63" pos:column="5">debugs<pos:position pos:line="63" pos:column="11"/></name><argument_list pos:line="63" pos:column="11">(<argument><expr><literal type="number" pos:line="63" pos:column="12">50<pos:position pos:line="63" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="16">3<pos:position pos:line="63" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="19">"comm_openex: Opened socket "<pos:position pos:line="63" pos:column="48"/></literal> <operator pos:line="63" pos:column="49">&lt;&lt;<pos:position pos:line="63" pos:column="57"/></operator> <name pos:line="63" pos:column="52">conn<pos:position pos:line="63" pos:column="56"/></name> <operator pos:line="63" pos:column="57">&lt;&lt;<pos:position pos:line="63" pos:column="65"/></operator> <literal type="string" pos:line="63" pos:column="60">" : family="<pos:position pos:line="63" pos:column="72"/></literal> <operator pos:line="63" pos:column="73">&lt;&lt;<pos:position pos:line="63" pos:column="81"/></operator> <name><name pos:line="63" pos:column="76">AI<pos:position pos:line="63" pos:column="78"/></name><operator pos:line="63" pos:column="78">-&gt;<pos:position pos:line="63" pos:column="83"/></operator><name pos:line="63" pos:column="80">ai_family<pos:position pos:line="63" pos:column="89"/></name></name> <operator pos:line="63" pos:column="90">&lt;&lt;<pos:position pos:line="63" pos:column="98"/></operator> <literal type="string" pos:line="63" pos:column="93">", type="<pos:position pos:line="63" pos:column="102"/></literal> <operator pos:line="63" pos:column="103">&lt;&lt;<pos:position pos:line="63" pos:column="111"/></operator> <name><name pos:line="63" pos:column="106">AI<pos:position pos:line="63" pos:column="108"/></name><operator pos:line="63" pos:column="108">-&gt;<pos:position pos:line="63" pos:column="113"/></operator><name pos:line="63" pos:column="110">ai_socktype<pos:position pos:line="63" pos:column="121"/></name></name> <operator pos:line="63" pos:column="122">&lt;&lt;<pos:position pos:line="63" pos:column="130"/></operator> <literal type="string" pos:line="63" pos:column="125">", protocol="<pos:position pos:line="63" pos:column="138"/></literal> <operator pos:line="63" pos:column="139">&lt;&lt;<pos:position pos:line="63" pos:column="147"/></operator> <name><name pos:line="63" pos:column="142">AI<pos:position pos:line="63" pos:column="144"/></name><operator pos:line="63" pos:column="144">-&gt;<pos:position pos:line="63" pos:column="149"/></operator><name pos:line="63" pos:column="146">ai_protocol<pos:position pos:line="63" pos:column="157"/></name></name></expr></argument> )<pos:position pos:line="63" pos:column="159"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="160"/></expr_stmt>

    <comment type="block" pos:line="65" pos:column="5">/* set TOS if needed */</comment>
    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><name pos:line="66" pos:column="9">tos<pos:position pos:line="66" pos:column="12"/></name></expr>)<pos:position pos:line="66" pos:column="13"/></condition><then pos:line="66" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="67" pos:column="9">Ip<pos:position pos:line="67" pos:column="11"/></name><operator pos:line="67" pos:column="11">::<pos:position pos:line="67" pos:column="13"/></operator><name pos:line="67" pos:column="13">Qos<pos:position pos:line="67" pos:column="16"/></name><operator pos:line="67" pos:column="16">::<pos:position pos:line="67" pos:column="18"/></operator><name pos:line="67" pos:column="18">setSockTos<pos:position pos:line="67" pos:column="28"/></name></name><argument_list pos:line="67" pos:column="28">(<argument><expr><name pos:line="67" pos:column="29">conn<pos:position pos:line="67" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="35">tos<pos:position pos:line="67" pos:column="38"/></name></expr></argument>)<pos:position pos:line="67" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="40"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="69" pos:column="5">/* set netfilter mark if needed */</comment>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">nfmark<pos:position pos:line="70" pos:column="15"/></name></expr>)<pos:position pos:line="70" pos:column="16"/></condition><then pos:line="70" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="71" pos:column="9">Ip<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">::<pos:position pos:line="71" pos:column="13"/></operator><name pos:line="71" pos:column="13">Qos<pos:position pos:line="71" pos:column="16"/></name><operator pos:line="71" pos:column="16">::<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">setSockNfmark<pos:position pos:line="71" pos:column="31"/></name></name><argument_list pos:line="71" pos:column="31">(<argument><expr><name pos:line="71" pos:column="32">conn<pos:position pos:line="71" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="38">nfmark<pos:position pos:line="71" pos:column="44"/></name></expr></argument>)<pos:position pos:line="71" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="46"/></expr_stmt></block></then></if>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">( <expr><name><name pos:line="73" pos:column="10">Ip<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">::<pos:position pos:line="73" pos:column="14"/></operator><name pos:line="73" pos:column="14">EnableIpv6<pos:position pos:line="73" pos:column="24"/></name></name><operator pos:line="73" pos:column="24">&amp;<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="25">IPV6_SPECIAL_SPLITSTACK<pos:position pos:line="73" pos:column="48"/></name> <operator pos:line="73" pos:column="49">&amp;&amp;<pos:position pos:line="73" pos:column="59"/></operator> <call><name><name pos:line="73" pos:column="52">addr<pos:position pos:line="73" pos:column="56"/></name><operator pos:line="73" pos:column="56">.<pos:position pos:line="73" pos:column="57"/></operator><name pos:line="73" pos:column="57">isIPv6<pos:position pos:line="73" pos:column="63"/></name></name><argument_list pos:line="73" pos:column="63">()<pos:position pos:line="73" pos:column="65"/></argument_list></call></expr> )<pos:position pos:line="73" pos:column="67"/></condition><then pos:line="73" pos:column="67">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="74" pos:column="9">comm_set_v6only<pos:position pos:line="74" pos:column="24"/></name><argument_list pos:line="74" pos:column="24">(<argument><expr><name><name pos:line="74" pos:column="25">conn<pos:position pos:line="74" pos:column="29"/></name><operator pos:line="74" pos:column="29">-&gt;<pos:position pos:line="74" pos:column="34"/></operator><name pos:line="74" pos:column="31">fd<pos:position pos:line="74" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="35">1<pos:position pos:line="74" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="38"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="76" pos:column="5">/* Windows Vista supports Dual-Sockets. BUT defaults them to V6ONLY. Turn it OFF. */</comment>
    <comment type="block" pos:line="77" pos:column="5">/* Other OS may have this administratively disabled for general use. Same deal. */</comment>
    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">( <expr><name><name pos:line="78" pos:column="10">Ip<pos:position pos:line="78" pos:column="12"/></name><operator pos:line="78" pos:column="12">::<pos:position pos:line="78" pos:column="14"/></operator><name pos:line="78" pos:column="14">EnableIpv6<pos:position pos:line="78" pos:column="24"/></name></name><operator pos:line="78" pos:column="24">&amp;<pos:position pos:line="78" pos:column="29"/></operator><name pos:line="78" pos:column="25">IPV6_SPECIAL_V4MAPPING<pos:position pos:line="78" pos:column="47"/></name> <operator pos:line="78" pos:column="48">&amp;&amp;<pos:position pos:line="78" pos:column="58"/></operator> <call><name><name pos:line="78" pos:column="51">addr<pos:position pos:line="78" pos:column="55"/></name><operator pos:line="78" pos:column="55">.<pos:position pos:line="78" pos:column="56"/></operator><name pos:line="78" pos:column="56">isIPv6<pos:position pos:line="78" pos:column="62"/></name></name><argument_list pos:line="78" pos:column="62">()<pos:position pos:line="78" pos:column="64"/></argument_list></call></expr> )<pos:position pos:line="78" pos:column="66"/></condition><then pos:line="78" pos:column="66">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="9">comm_set_v6only<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument><expr><name><name pos:line="79" pos:column="25">conn<pos:position pos:line="79" pos:column="29"/></name><operator pos:line="79" pos:column="29">-&gt;<pos:position pos:line="79" pos:column="34"/></operator><name pos:line="79" pos:column="31">fd<pos:position pos:line="79" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="35">0<pos:position pos:line="79" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="38"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="81" pos:column="5">comm_init_opened<pos:position pos:line="81" pos:column="21"/></name><argument_list pos:line="81" pos:column="21">(<argument><expr><name pos:line="81" pos:column="22">conn<pos:position pos:line="81" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="28">tos<pos:position pos:line="81" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="33">nfmark<pos:position pos:line="81" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="41">note<pos:position pos:line="81" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="47">AI<pos:position pos:line="81" pos:column="49"/></name></expr></argument>)<pos:position pos:line="81" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="82" pos:column="5">new_socket<pos:position pos:line="82" pos:column="15"/></name> <operator pos:line="82" pos:column="16">=<pos:position pos:line="82" pos:column="17"/></operator> <call><name pos:line="82" pos:column="18">comm_apply_flags<pos:position pos:line="82" pos:column="34"/></name><argument_list pos:line="82" pos:column="34">(<argument><expr><name><name pos:line="82" pos:column="35">conn<pos:position pos:line="82" pos:column="39"/></name><operator pos:line="82" pos:column="39">-&gt;<pos:position pos:line="82" pos:column="44"/></operator><name pos:line="82" pos:column="41">fd<pos:position pos:line="82" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="45">addr<pos:position pos:line="82" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="51">flags<pos:position pos:line="82" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="58">AI<pos:position pos:line="82" pos:column="60"/></name></expr></argument>)<pos:position pos:line="82" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="84" pos:column="5">Ip<pos:position pos:line="84" pos:column="7"/></name><operator pos:line="84" pos:column="7">::<pos:position pos:line="84" pos:column="9"/></operator><name pos:line="84" pos:column="9">Address<pos:position pos:line="84" pos:column="16"/></name><operator pos:line="84" pos:column="16">::<pos:position pos:line="84" pos:column="18"/></operator><name pos:line="84" pos:column="18">FreeAddrInfo<pos:position pos:line="84" pos:column="30"/></name></name><argument_list pos:line="84" pos:column="30">(<argument><expr><name pos:line="84" pos:column="31">AI<pos:position pos:line="84" pos:column="33"/></name></expr></argument>)<pos:position pos:line="84" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">PROF_stop<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">(<argument><expr><name pos:line="86" pos:column="15">comm_open<pos:position pos:line="86" pos:column="24"/></name></expr></argument>)<pos:position pos:line="86" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="26"/></expr_stmt>

    <comment type="line" pos:line="88" pos:column="5">// XXX transition only. prevent conn from closing the new FD on function exit.</comment>
    <expr_stmt><expr><name><name pos:line="89" pos:column="5">conn<pos:position pos:line="89" pos:column="9"/></name><operator pos:line="89" pos:column="9">-&gt;<pos:position pos:line="89" pos:column="14"/></operator><name pos:line="89" pos:column="11">fd<pos:position pos:line="89" pos:column="13"/></name></name> <operator pos:line="89" pos:column="14">=<pos:position pos:line="89" pos:column="15"/></operator> <operator pos:line="89" pos:column="16">-<pos:position pos:line="89" pos:column="17"/></operator><literal type="number" pos:line="89" pos:column="17">1<pos:position pos:line="89" pos:column="18"/></literal></expr>;<pos:position pos:line="89" pos:column="19"/></expr_stmt>
    <return pos:line="90" pos:column="5">return <expr><name pos:line="90" pos:column="12">new_socket<pos:position pos:line="90" pos:column="22"/></name></expr>;<pos:position pos:line="90" pos:column="23"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
