<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3203_squid-3.1.23.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type>
<name pos:line="2" pos:column="1">urlCanonical<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">HttpRequest<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type> <name pos:line="2" pos:column="28">request<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">LOCAL_ARRAY<pos:position pos:line="4" pos:column="16"/></name><argument_list pos:line="4" pos:column="16">(<argument><expr><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="23">portbuf<pos:position pos:line="4" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="32">32<pos:position pos:line="4" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="36"/></expr_stmt>
<comment type="line" format="doxygen" pos:line="5" pos:column="1">/// \todo AYJ: Performance: making this a ptr and allocating when needed will be better than a write and future xstrdup().</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">LOCAL_ARRAY<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><name pos:line="6" pos:column="17">char<pos:position pos:line="6" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="23">urlbuf<pos:position pos:line="6" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="31">MAX_URL<pos:position pos:line="6" pos:column="38"/></name></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="40"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name><name pos:line="8" pos:column="9">request<pos:position pos:line="8" pos:column="16"/></name><operator pos:line="8" pos:column="16">-&gt;<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="18">canonical<pos:position pos:line="8" pos:column="27"/></name></name></expr>)<pos:position pos:line="8" pos:column="28"/></condition><then pos:line="8" pos:column="28">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><name><name pos:line="9" pos:column="16">request<pos:position pos:line="9" pos:column="23"/></name><operator pos:line="9" pos:column="23">-&gt;<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="25">canonical<pos:position pos:line="9" pos:column="34"/></name></name></expr>;<pos:position pos:line="9" pos:column="35"/></return></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">request<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">protocol<pos:position pos:line="11" pos:column="26"/></name></name> <operator pos:line="11" pos:column="27">==<pos:position pos:line="11" pos:column="29"/></operator> <name pos:line="11" pos:column="30">PROTO_URN<pos:position pos:line="11" pos:column="39"/></name></expr>)<pos:position pos:line="11" pos:column="40"/></condition><then pos:line="11" pos:column="40"> <block pos:line="11" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">snprintf<pos:position pos:line="12" pos:column="17"/></name><argument_list pos:line="12" pos:column="17">(<argument><expr><name pos:line="12" pos:column="18">urlbuf<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">MAX_URL<pos:position pos:line="12" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="35">"urn:"<pos:position pos:line="12" pos:column="41"/></literal> <name pos:line="12" pos:column="42">SQUIDSTRINGPH<pos:position pos:line="12" pos:column="55"/></name></expr></argument>,
                 <argument><expr><call><name pos:line="13" pos:column="18">SQUIDSTRINGPRINT<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><name><name pos:line="13" pos:column="35">request<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">-&gt;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="44">urlpath<pos:position pos:line="13" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <else pos:line="14" pos:column="7">else <block pos:line="14" pos:column="12">{
<comment type="line" format="doxygen" pos:line="15" pos:column="1">/// \todo AYJ: this could use "if..else and method == METHOD_CONNECT" easier.</comment>
        <switch pos:line="16" pos:column="9">switch <condition pos:line="16" pos:column="16">(<expr><call><name><name pos:line="16" pos:column="17">request<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">-&gt;<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="26">method<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">.<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="33">id<pos:position pos:line="16" pos:column="35"/></name></name><argument_list pos:line="16" pos:column="35">()<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="38"/></condition> <block pos:line="16" pos:column="39">{

        <case pos:line="18" pos:column="9">case <expr><name pos:line="18" pos:column="14">METHOD_CONNECT<pos:position pos:line="18" pos:column="28"/></name></expr>:<pos:position pos:line="18" pos:column="29"/></case>
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">snprintf<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">urlbuf<pos:position pos:line="19" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="30">MAX_URL<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="39">"%s:%d"<pos:position pos:line="19" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="19" pos:column="48">request<pos:position pos:line="19" pos:column="55"/></name><operator pos:line="19" pos:column="55">-&gt;<pos:position pos:line="19" pos:column="60"/></operator><name pos:line="19" pos:column="57">GetHost<pos:position pos:line="19" pos:column="64"/></name></name><argument_list pos:line="19" pos:column="64">()<pos:position pos:line="19" pos:column="66"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="68">request<pos:position pos:line="19" pos:column="75"/></name><operator pos:line="19" pos:column="75">-&gt;<pos:position pos:line="19" pos:column="80"/></operator><name pos:line="19" pos:column="77">port<pos:position pos:line="19" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="83"/></expr_stmt>
            <break pos:line="20" pos:column="13">break;<pos:position pos:line="20" pos:column="19"/></break>

        <default pos:line="22" pos:column="9">default:<pos:position pos:line="22" pos:column="17"/></default>
            <expr_stmt><expr><name><name pos:line="23" pos:column="13">portbuf<pos:position pos:line="23" pos:column="20"/></name><index pos:line="23" pos:column="20">[<expr><literal type="number" pos:line="23" pos:column="21">0<pos:position pos:line="23" pos:column="22"/></literal></expr>]<pos:position pos:line="23" pos:column="23"/></index></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <literal type="char" pos:line="23" pos:column="26">'\0'<pos:position pos:line="23" pos:column="30"/></literal></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>

            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name><name pos:line="25" pos:column="17">request<pos:position pos:line="25" pos:column="24"/></name><operator pos:line="25" pos:column="24">-&gt;<pos:position pos:line="25" pos:column="29"/></operator><name pos:line="25" pos:column="26">port<pos:position pos:line="25" pos:column="30"/></name></name> <operator pos:line="25" pos:column="31">!=<pos:position pos:line="25" pos:column="33"/></operator> <call><name pos:line="25" pos:column="34">urlDefaultPort<pos:position pos:line="25" pos:column="48"/></name><argument_list pos:line="25" pos:column="48">(<argument><expr><name><name pos:line="25" pos:column="49">request<pos:position pos:line="25" pos:column="56"/></name><operator pos:line="25" pos:column="56">-&gt;<pos:position pos:line="25" pos:column="61"/></operator><name pos:line="25" pos:column="58">protocol<pos:position pos:line="25" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="68"/></condition><then pos:line="25" pos:column="68">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="26" pos:column="17">snprintf<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">portbuf<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="35">32<pos:position pos:line="26" pos:column="37"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="39">":%d"<pos:position pos:line="26" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="46">request<pos:position pos:line="26" pos:column="53"/></name><operator pos:line="26" pos:column="53">-&gt;<pos:position pos:line="26" pos:column="58"/></operator><name pos:line="26" pos:column="55">port<pos:position pos:line="26" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="61"/></expr_stmt></block></then></if>

            <expr_stmt><expr><call><name pos:line="28" pos:column="13">snprintf<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">urlbuf<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="30">MAX_URL<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="39">"%s://%s%s%s%s"<pos:position pos:line="28" pos:column="54"/></literal> <name pos:line="28" pos:column="55">SQUIDSTRINGPH<pos:position pos:line="28" pos:column="68"/></name></expr></argument>,
                     <argument><expr><name><name pos:line="29" pos:column="22">ProtocolStr<pos:position pos:line="29" pos:column="33"/></name><index pos:line="29" pos:column="33">[<expr><name><name pos:line="29" pos:column="34">request<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">-&gt;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="43">protocol<pos:position pos:line="29" pos:column="51"/></name></name></expr>]<pos:position pos:line="29" pos:column="52"/></index></name></expr></argument>,
                     <argument><expr><name><name pos:line="30" pos:column="22">request<pos:position pos:line="30" pos:column="29"/></name><operator pos:line="30" pos:column="29">-&gt;<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="31">login<pos:position pos:line="30" pos:column="36"/></name></name></expr></argument>,
                     <argument><expr><ternary><condition><expr><operator pos:line="31" pos:column="22">*<pos:position pos:line="31" pos:column="23"/></operator><name><name pos:line="31" pos:column="23">request<pos:position pos:line="31" pos:column="30"/></name><operator pos:line="31" pos:column="30">-&gt;<pos:position pos:line="31" pos:column="35"/></operator><name pos:line="31" pos:column="32">login<pos:position pos:line="31" pos:column="37"/></name></name></expr> ?<pos:position pos:line="31" pos:column="39"/></condition><then pos:line="31" pos:column="39"> <expr><literal type="string" pos:line="31" pos:column="40">"@"<pos:position pos:line="31" pos:column="43"/></literal></expr> <pos:position pos:line="31" pos:column="44"/></then><else pos:line="31" pos:column="44">: <expr><name pos:line="31" pos:column="46">null_string<pos:position pos:line="31" pos:column="57"/></name></expr></else></ternary></expr></argument>,
                     <argument><expr><call><name><name pos:line="32" pos:column="22">request<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">-&gt;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="31">GetHost<pos:position pos:line="32" pos:column="38"/></name></name><argument_list pos:line="32" pos:column="38">()<pos:position pos:line="32" pos:column="40"/></argument_list></call></expr></argument>,
                     <argument><expr><name pos:line="33" pos:column="22">portbuf<pos:position pos:line="33" pos:column="29"/></name></expr></argument>,
                     <argument><expr><call><name pos:line="34" pos:column="22">SQUIDSTRINGPRINT<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><name><name pos:line="34" pos:column="39">request<pos:position pos:line="34" pos:column="46"/></name><operator pos:line="34" pos:column="46">-&gt;<pos:position pos:line="34" pos:column="51"/></operator><name pos:line="34" pos:column="48">urlpath<pos:position pos:line="34" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="58"/></expr_stmt>

            <break pos:line="36" pos:column="13">break;<pos:position pos:line="36" pos:column="19"/></break>
        }<pos:position pos:line="37" pos:column="10"/></block></switch>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>

    <return pos:line="40" pos:column="5">return <expr><operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><name><name pos:line="40" pos:column="13">request<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">-&gt;<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="22">canonical<pos:position pos:line="40" pos:column="31"/></name></name> <operator pos:line="40" pos:column="32">=<pos:position pos:line="40" pos:column="33"/></operator> <call><name pos:line="40" pos:column="34">xstrdup<pos:position pos:line="40" pos:column="41"/></name><argument_list pos:line="40" pos:column="41">(<argument><expr><name pos:line="40" pos:column="42">urlbuf<pos:position pos:line="40" pos:column="48"/></name></expr></argument>)<pos:position pos:line="40" pos:column="49"/></argument_list></call><operator pos:line="40" pos:column="49">)<pos:position pos:line="40" pos:column="50"/></operator></expr>;<pos:position pos:line="40" pos:column="51"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
