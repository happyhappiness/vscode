<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3055_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">peerUserHashInit<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">void<pos:position pos:line="2" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="23"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">W<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><literal type="number" pos:line="4" pos:column="13">0<pos:position pos:line="4" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">K<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">k<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">double<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">P_last<pos:position pos:line="7" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="20">X_last<pos:position pos:line="7" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="28">Xn<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">CachePeer<pos:position pos:line="8" pos:column="14"/></name> <modifier pos:line="8" pos:column="15">*<pos:position pos:line="8" pos:column="16"/></modifier></type><name pos:line="8" pos:column="16">p<pos:position pos:line="8" pos:column="17"/></name></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">CachePeer<pos:position pos:line="9" pos:column="14"/></name> <modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier><modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">P<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">t<pos:position pos:line="10" pos:column="12"/></name></decl>;<pos:position pos:line="10" pos:column="13"/></decl_stmt>
    <comment type="block" pos:line="11" pos:column="5">/* Clean up */</comment>

    <for pos:line="13" pos:column="5">for <control pos:line="13" pos:column="9">(<init><expr><name pos:line="13" pos:column="10">k<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>;<pos:position pos:line="13" pos:column="16"/></init> <condition><expr><name pos:line="13" pos:column="17">k<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&lt;<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="21">n_userhash_peers<pos:position pos:line="13" pos:column="37"/></name></expr>;<pos:position pos:line="13" pos:column="38"/></condition> <incr><expr><operator pos:line="13" pos:column="39">++<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">k<pos:position pos:line="13" pos:column="42"/></name></expr></incr>)<pos:position pos:line="13" pos:column="43"/></control> <block pos:line="13" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">cbdataReferenceDone<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name><name pos:line="14" pos:column="29">userhash_peers<pos:position pos:line="14" pos:column="43"/></name><index pos:line="14" pos:column="43">[<expr><name pos:line="14" pos:column="44">k<pos:position pos:line="14" pos:column="45"/></name></expr>]<pos:position pos:line="14" pos:column="46"/></index></name></expr></argument>)<pos:position pos:line="14" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">safe_free<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name pos:line="17" pos:column="15">userhash_peers<pos:position pos:line="17" pos:column="29"/></name></expr></argument>)<pos:position pos:line="17" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">n_userhash_peers<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <literal type="number" pos:line="18" pos:column="24">0<pos:position pos:line="18" pos:column="25"/></literal></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="19" pos:column="5">/* find out which peers we have */</comment>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">peerUserHashRegisterWithCacheManager<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">()<pos:position pos:line="21" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="44"/></expr_stmt>

    <for pos:line="23" pos:column="5">for <control pos:line="23" pos:column="9">(<init><expr><name pos:line="23" pos:column="10">p<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <name><name pos:line="23" pos:column="14">Config<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">.<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="21">peers<pos:position pos:line="23" pos:column="26"/></name></name></expr>;<pos:position pos:line="23" pos:column="27"/></init> <condition><expr><name pos:line="23" pos:column="28">p<pos:position pos:line="23" pos:column="29"/></name></expr>;<pos:position pos:line="23" pos:column="30"/></condition> <incr><expr><name pos:line="23" pos:column="31">p<pos:position pos:line="23" pos:column="32"/></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <name><name pos:line="23" pos:column="35">p<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">next<pos:position pos:line="23" pos:column="42"/></name></name></expr></incr>)<pos:position pos:line="23" pos:column="43"/></control> <block pos:line="23" pos:column="44">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">!<pos:position pos:line="24" pos:column="14"/></operator><name><name pos:line="24" pos:column="14">p<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">options<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">.<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="25">userhash<pos:position pos:line="24" pos:column="33"/></name></name></expr>)<pos:position pos:line="24" pos:column="34"/></condition><then pos:line="24" pos:column="34">
            <block type="pseudo"><continue pos:line="25" pos:column="13">continue;<pos:position pos:line="25" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><call><name pos:line="27" pos:column="9">assert<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name><name pos:line="27" pos:column="16">p<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">-&gt;<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="19">type<pos:position pos:line="27" pos:column="23"/></name></name> <operator pos:line="27" pos:column="24">==<pos:position pos:line="27" pos:column="26"/></operator> <name pos:line="27" pos:column="27">PEER_PARENT<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name><name pos:line="29" pos:column="13">p<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">weight<pos:position pos:line="29" pos:column="22"/></name></name> <operator pos:line="29" pos:column="23">==<pos:position pos:line="29" pos:column="25"/></operator> <literal type="number" pos:line="29" pos:column="26">0<pos:position pos:line="29" pos:column="27"/></literal></expr>)<pos:position pos:line="29" pos:column="28"/></condition><then pos:line="29" pos:column="28">
            <block type="pseudo"><continue pos:line="30" pos:column="13">continue;<pos:position pos:line="30" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><operator pos:line="32" pos:column="9">++<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="11">n_userhash_peers<pos:position pos:line="32" pos:column="27"/></name></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>

        <expr_stmt><expr><name pos:line="34" pos:column="9">W<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">+=<pos:position pos:line="34" pos:column="13"/></operator> <name><name pos:line="34" pos:column="14">p<pos:position pos:line="34" pos:column="15"/></name><operator pos:line="34" pos:column="15">-&gt;<pos:position pos:line="34" pos:column="20"/></operator><name pos:line="34" pos:column="17">weight<pos:position pos:line="34" pos:column="23"/></name></name></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></for>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">n_userhash_peers<pos:position pos:line="37" pos:column="25"/></name> <operator pos:line="37" pos:column="26">==<pos:position pos:line="37" pos:column="28"/></operator> <literal type="number" pos:line="37" pos:column="29">0<pos:position pos:line="37" pos:column="30"/></literal></expr>)<pos:position pos:line="37" pos:column="31"/></condition><then pos:line="37" pos:column="31">
        <block type="pseudo"><return pos:line="38" pos:column="9">return;<pos:position pos:line="38" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="40" pos:column="5">userhash_peers<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator> <operator pos:line="40" pos:column="22">(<pos:position pos:line="40" pos:column="23"/></operator><name pos:line="40" pos:column="23">CachePeer<pos:position pos:line="40" pos:column="32"/></name> <operator pos:line="40" pos:column="33">*<pos:position pos:line="40" pos:column="34"/></operator><operator pos:line="40" pos:column="34">*<pos:position pos:line="40" pos:column="35"/></operator><operator pos:line="40" pos:column="35">)<pos:position pos:line="40" pos:column="36"/></operator><call><name pos:line="40" pos:column="36">xcalloc<pos:position pos:line="40" pos:column="43"/></name><argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">n_userhash_peers<pos:position pos:line="40" pos:column="60"/></name></expr></argument>, <argument><expr><sizeof pos:line="40" pos:column="62">sizeof<argument_list pos:line="40" pos:column="68">(<argument><expr><operator pos:line="40" pos:column="69">*<pos:position pos:line="40" pos:column="70"/></operator><name pos:line="40" pos:column="70">userhash_peers<pos:position pos:line="40" pos:column="84"/></name></expr></argument>)<pos:position pos:line="40" pos:column="85"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="40" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="87"/></expr_stmt>

    <comment type="block" pos:line="42" pos:column="5">/* Build a list of the found peers and calculate hashes and load factors */</comment>
    <for pos:line="43" pos:column="5">for <control pos:line="43" pos:column="9">(<init><expr><name pos:line="43" pos:column="10">P<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <name pos:line="43" pos:column="14">userhash_peers<pos:position pos:line="43" pos:column="28"/></name></expr><operator pos:line="43" pos:column="28">,<pos:position pos:line="43" pos:column="29"/></operator> <expr><name pos:line="43" pos:column="30">p<pos:position pos:line="43" pos:column="31"/></name> <operator pos:line="43" pos:column="32">=<pos:position pos:line="43" pos:column="33"/></operator> <name><name pos:line="43" pos:column="34">Config<pos:position pos:line="43" pos:column="40"/></name><operator pos:line="43" pos:column="40">.<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="41">peers<pos:position pos:line="43" pos:column="46"/></name></name></expr>;<pos:position pos:line="43" pos:column="47"/></init> <condition><expr><name pos:line="43" pos:column="48">p<pos:position pos:line="43" pos:column="49"/></name></expr>;<pos:position pos:line="43" pos:column="50"/></condition> <incr><expr><name pos:line="43" pos:column="51">p<pos:position pos:line="43" pos:column="52"/></name> <operator pos:line="43" pos:column="53">=<pos:position pos:line="43" pos:column="54"/></operator> <name><name pos:line="43" pos:column="55">p<pos:position pos:line="43" pos:column="56"/></name><operator pos:line="43" pos:column="56">-&gt;<pos:position pos:line="43" pos:column="61"/></operator><name pos:line="43" pos:column="58">next<pos:position pos:line="43" pos:column="62"/></name></name></expr></incr>)<pos:position pos:line="43" pos:column="63"/></control> <block pos:line="43" pos:column="64">{
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><name><name pos:line="44" pos:column="14">p<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">options<pos:position pos:line="44" pos:column="24"/></name><operator pos:line="44" pos:column="24">.<pos:position pos:line="44" pos:column="25"/></operator><name pos:line="44" pos:column="25">userhash<pos:position pos:line="44" pos:column="33"/></name></name></expr>)<pos:position pos:line="44" pos:column="34"/></condition><then pos:line="44" pos:column="34">
            <block type="pseudo"><continue pos:line="45" pos:column="13">continue;<pos:position pos:line="45" pos:column="22"/></continue></block></then></if>

        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name><name pos:line="47" pos:column="13">p<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">weight<pos:position pos:line="47" pos:column="22"/></name></name> <operator pos:line="47" pos:column="23">==<pos:position pos:line="47" pos:column="25"/></operator> <literal type="number" pos:line="47" pos:column="26">0<pos:position pos:line="47" pos:column="27"/></literal></expr>)<pos:position pos:line="47" pos:column="28"/></condition><then pos:line="47" pos:column="28">
            <block type="pseudo"><continue pos:line="48" pos:column="13">continue;<pos:position pos:line="48" pos:column="22"/></continue></block></then></if>

        <comment type="block" pos:line="50" pos:column="9">/* calculate this peers hash */</comment>
        <expr_stmt><expr><name><name pos:line="51" pos:column="9">p<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">-&gt;<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="12">userhash<pos:position pos:line="51" pos:column="20"/></name><operator pos:line="51" pos:column="20">.<pos:position pos:line="51" pos:column="21"/></operator><name pos:line="51" pos:column="21">hash<pos:position pos:line="51" pos:column="25"/></name></name> <operator pos:line="51" pos:column="26">=<pos:position pos:line="51" pos:column="27"/></operator> <literal type="number" pos:line="51" pos:column="28">0<pos:position pos:line="51" pos:column="29"/></literal></expr>;<pos:position pos:line="51" pos:column="30"/></expr_stmt>

        <for pos:line="53" pos:column="9">for <control pos:line="53" pos:column="13">(<init><expr><name pos:line="53" pos:column="14">t<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <name><name pos:line="53" pos:column="18">p<pos:position pos:line="53" pos:column="19"/></name><operator pos:line="53" pos:column="19">-&gt;<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="21">name<pos:position pos:line="53" pos:column="25"/></name></name></expr>;<pos:position pos:line="53" pos:column="26"/></init> <condition><expr><operator pos:line="53" pos:column="27">*<pos:position pos:line="53" pos:column="28"/></operator><name pos:line="53" pos:column="28">t<pos:position pos:line="53" pos:column="29"/></name> <operator pos:line="53" pos:column="30">!=<pos:position pos:line="53" pos:column="32"/></operator> <literal type="number" pos:line="53" pos:column="33">0<pos:position pos:line="53" pos:column="34"/></literal></expr>;<pos:position pos:line="53" pos:column="35"/></condition> <incr><expr><operator pos:line="53" pos:column="36">++<pos:position pos:line="53" pos:column="38"/></operator><name pos:line="53" pos:column="38">t<pos:position pos:line="53" pos:column="39"/></name></expr></incr>)<pos:position pos:line="53" pos:column="40"/></control>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="13">p<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">-&gt;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="16">userhash<pos:position pos:line="54" pos:column="24"/></name><operator pos:line="54" pos:column="24">.<pos:position pos:line="54" pos:column="25"/></operator><name pos:line="54" pos:column="25">hash<pos:position pos:line="54" pos:column="29"/></name></name> <operator pos:line="54" pos:column="30">+=<pos:position pos:line="54" pos:column="32"/></operator> <call><name pos:line="54" pos:column="33">ROTATE_LEFT<pos:position pos:line="54" pos:column="44"/></name><argument_list pos:line="54" pos:column="44">(<argument><expr><name><name pos:line="54" pos:column="45">p<pos:position pos:line="54" pos:column="46"/></name><operator pos:line="54" pos:column="46">-&gt;<pos:position pos:line="54" pos:column="51"/></operator><name pos:line="54" pos:column="48">userhash<pos:position pos:line="54" pos:column="56"/></name><operator pos:line="54" pos:column="56">.<pos:position pos:line="54" pos:column="57"/></operator><name pos:line="54" pos:column="57">hash<pos:position pos:line="54" pos:column="61"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="63">19<pos:position pos:line="54" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="66"/></argument_list></call> <operator pos:line="54" pos:column="67">+<pos:position pos:line="54" pos:column="68"/></operator> <operator pos:line="54" pos:column="69">(<pos:position pos:line="54" pos:column="70"/></operator><name pos:line="54" pos:column="70">unsigned<pos:position pos:line="54" pos:column="78"/></name> <name pos:line="54" pos:column="79">int<pos:position pos:line="54" pos:column="82"/></name><operator pos:line="54" pos:column="82">)<pos:position pos:line="54" pos:column="83"/></operator> <operator pos:line="54" pos:column="84">*<pos:position pos:line="54" pos:column="85"/></operator><name pos:line="54" pos:column="85">t<pos:position pos:line="54" pos:column="86"/></name></expr>;<pos:position pos:line="54" pos:column="87"/></expr_stmt></block></for>

        <expr_stmt><expr><name><name pos:line="56" pos:column="9">p<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">userhash<pos:position pos:line="56" pos:column="20"/></name><operator pos:line="56" pos:column="20">.<pos:position pos:line="56" pos:column="21"/></operator><name pos:line="56" pos:column="21">hash<pos:position pos:line="56" pos:column="25"/></name></name> <operator pos:line="56" pos:column="26">+=<pos:position pos:line="56" pos:column="28"/></operator> <name><name pos:line="56" pos:column="29">p<pos:position pos:line="56" pos:column="30"/></name><operator pos:line="56" pos:column="30">-&gt;<pos:position pos:line="56" pos:column="35"/></operator><name pos:line="56" pos:column="32">userhash<pos:position pos:line="56" pos:column="40"/></name><operator pos:line="56" pos:column="40">.<pos:position pos:line="56" pos:column="41"/></operator><name pos:line="56" pos:column="41">hash<pos:position pos:line="56" pos:column="45"/></name></name> <operator pos:line="56" pos:column="46">*<pos:position pos:line="56" pos:column="47"/></operator> <literal type="number" pos:line="56" pos:column="48">0x62531965<pos:position pos:line="56" pos:column="58"/></literal></expr>;<pos:position pos:line="56" pos:column="59"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="58" pos:column="9">p<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">userhash<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">.<pos:position pos:line="58" pos:column="21"/></operator><name pos:line="58" pos:column="21">hash<pos:position pos:line="58" pos:column="25"/></name></name> <operator pos:line="58" pos:column="26">=<pos:position pos:line="58" pos:column="27"/></operator> <call><name pos:line="58" pos:column="28">ROTATE_LEFT<pos:position pos:line="58" pos:column="39"/></name><argument_list pos:line="58" pos:column="39">(<argument><expr><name><name pos:line="58" pos:column="40">p<pos:position pos:line="58" pos:column="41"/></name><operator pos:line="58" pos:column="41">-&gt;<pos:position pos:line="58" pos:column="46"/></operator><name pos:line="58" pos:column="43">userhash<pos:position pos:line="58" pos:column="51"/></name><operator pos:line="58" pos:column="51">.<pos:position pos:line="58" pos:column="52"/></operator><name pos:line="58" pos:column="52">hash<pos:position pos:line="58" pos:column="56"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="58">21<pos:position pos:line="58" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="62"/></expr_stmt>

        <comment type="block" pos:line="60" pos:column="9">/* and load factor */</comment>
        <expr_stmt><expr><name><name pos:line="61" pos:column="9">p<pos:position pos:line="61" pos:column="10"/></name><operator pos:line="61" pos:column="10">-&gt;<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="12">userhash<pos:position pos:line="61" pos:column="20"/></name><operator pos:line="61" pos:column="20">.<pos:position pos:line="61" pos:column="21"/></operator><name pos:line="61" pos:column="21">load_factor<pos:position pos:line="61" pos:column="32"/></name></name> <operator pos:line="61" pos:column="33">=<pos:position pos:line="61" pos:column="34"/></operator> <operator pos:line="61" pos:column="35">(<pos:position pos:line="61" pos:column="36"/></operator><operator pos:line="61" pos:column="36">(<pos:position pos:line="61" pos:column="37"/></operator><name pos:line="61" pos:column="37">double<pos:position pos:line="61" pos:column="43"/></name><operator pos:line="61" pos:column="43">)<pos:position pos:line="61" pos:column="44"/></operator> <name><name pos:line="61" pos:column="45">p<pos:position pos:line="61" pos:column="46"/></name><operator pos:line="61" pos:column="46">-&gt;<pos:position pos:line="61" pos:column="51"/></operator><name pos:line="61" pos:column="48">weight<pos:position pos:line="61" pos:column="54"/></name></name><operator pos:line="61" pos:column="54">)<pos:position pos:line="61" pos:column="55"/></operator> <operator pos:line="61" pos:column="56">/<pos:position pos:line="61" pos:column="57"/></operator> <operator pos:line="61" pos:column="58">(<pos:position pos:line="61" pos:column="59"/></operator><name pos:line="61" pos:column="59">double<pos:position pos:line="61" pos:column="65"/></name><operator pos:line="61" pos:column="65">)<pos:position pos:line="61" pos:column="66"/></operator> <name pos:line="61" pos:column="67">W<pos:position pos:line="61" pos:column="68"/></name></expr>;<pos:position pos:line="61" pos:column="69"/></expr_stmt>

        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><call><name pos:line="63" pos:column="13">floor<pos:position pos:line="63" pos:column="18"/></name><argument_list pos:line="63" pos:column="18">(<argument><expr><name><name pos:line="63" pos:column="19">p<pos:position pos:line="63" pos:column="20"/></name><operator pos:line="63" pos:column="20">-&gt;<pos:position pos:line="63" pos:column="25"/></operator><name pos:line="63" pos:column="22">userhash<pos:position pos:line="63" pos:column="30"/></name><operator pos:line="63" pos:column="30">.<pos:position pos:line="63" pos:column="31"/></operator><name pos:line="63" pos:column="31">load_factor<pos:position pos:line="63" pos:column="42"/></name></name> <operator pos:line="63" pos:column="43">*<pos:position pos:line="63" pos:column="44"/></operator> <literal type="number" pos:line="63" pos:column="45">1000.0<pos:position pos:line="63" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="52"/></argument_list></call> <operator pos:line="63" pos:column="53">==<pos:position pos:line="63" pos:column="55"/></operator> <literal type="number" pos:line="63" pos:column="56">0.0<pos:position pos:line="63" pos:column="59"/></literal></expr>)<pos:position pos:line="63" pos:column="60"/></condition><then pos:line="63" pos:column="60">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="64" pos:column="13">p<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">-&gt;<pos:position pos:line="64" pos:column="19"/></operator><name pos:line="64" pos:column="16">userhash<pos:position pos:line="64" pos:column="24"/></name><operator pos:line="64" pos:column="24">.<pos:position pos:line="64" pos:column="25"/></operator><name pos:line="64" pos:column="25">load_factor<pos:position pos:line="64" pos:column="36"/></name></name> <operator pos:line="64" pos:column="37">=<pos:position pos:line="64" pos:column="38"/></operator> <literal type="number" pos:line="64" pos:column="39">0.0<pos:position pos:line="64" pos:column="42"/></literal></expr>;<pos:position pos:line="64" pos:column="43"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="66" pos:column="9">/* add it to our list of peers */</comment>
        <expr_stmt><expr><operator pos:line="67" pos:column="9">*<pos:position pos:line="67" pos:column="10"/></operator><name pos:line="67" pos:column="10">P<pos:position pos:line="67" pos:column="11"/></name><operator pos:line="67" pos:column="11">++<pos:position pos:line="67" pos:column="13"/></operator> <operator pos:line="67" pos:column="14">=<pos:position pos:line="67" pos:column="15"/></operator> <call><name pos:line="67" pos:column="16">cbdataReference<pos:position pos:line="67" pos:column="31"/></name><argument_list pos:line="67" pos:column="31">(<argument><expr><name pos:line="67" pos:column="32">p<pos:position pos:line="67" pos:column="33"/></name></expr></argument>)<pos:position pos:line="67" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="68" pos:column="6"/></block></for>

    <comment type="block" pos:line="70" pos:column="5">/* Sort our list on weight */</comment>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">qsort<pos:position pos:line="71" pos:column="10"/></name><argument_list pos:line="71" pos:column="10">(<argument><expr><name pos:line="71" pos:column="11">userhash_peers<pos:position pos:line="71" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="27">n_userhash_peers<pos:position pos:line="71" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="71" pos:column="45">sizeof<argument_list pos:line="71" pos:column="51">(<argument><expr><operator pos:line="71" pos:column="52">*<pos:position pos:line="71" pos:column="53"/></operator><name pos:line="71" pos:column="53">userhash_peers<pos:position pos:line="71" pos:column="67"/></name></expr></argument>)<pos:position pos:line="71" pos:column="68"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="71" pos:column="70">peerSortWeight<pos:position pos:line="71" pos:column="84"/></name></expr></argument>)<pos:position pos:line="71" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="86"/></expr_stmt>

    <comment type="block" pos:line="73" pos:column="5">/* Calculate the load factor multipliers X_k
     *
     * X_1 = pow ((K*p_1), (1/K))
     * X_k = ([K-k+1] * [P_k - P_{k-1}])/(X_1 * X_2 * ... * X_{k-1})
     * X_k += pow ((X_{k-1}, {K-k+1})
     * X_k = pow (X_k, {1/(K-k+1)})
     * simplified to have X_1 part of the loop
     */</comment>
    <expr_stmt><expr><name pos:line="81" pos:column="5">K<pos:position pos:line="81" pos:column="6"/></name> <operator pos:line="81" pos:column="7">=<pos:position pos:line="81" pos:column="8"/></operator> <name pos:line="81" pos:column="9">n_userhash_peers<pos:position pos:line="81" pos:column="25"/></name></expr>;<pos:position pos:line="81" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><name pos:line="83" pos:column="5">P_last<pos:position pos:line="83" pos:column="11"/></name> <operator pos:line="83" pos:column="12">=<pos:position pos:line="83" pos:column="13"/></operator> <literal type="number" pos:line="83" pos:column="14">0.0<pos:position pos:line="83" pos:column="17"/></literal></expr>;<pos:position pos:line="83" pos:column="18"/></expr_stmt>		<comment type="block" pos:line="83" pos:column="33">/* Empty P_0 */</comment>

    <expr_stmt><expr><name pos:line="85" pos:column="5">Xn<pos:position pos:line="85" pos:column="7"/></name> <operator pos:line="85" pos:column="8">=<pos:position pos:line="85" pos:column="9"/></operator> <literal type="number" pos:line="85" pos:column="10">1.0<pos:position pos:line="85" pos:column="13"/></literal></expr>;<pos:position pos:line="85" pos:column="14"/></expr_stmt>			<comment type="block" pos:line="85" pos:column="33">/* Empty starting point of X_1 * X_2 * ... * X_{x-1} */</comment>

    <expr_stmt><expr><name pos:line="87" pos:column="5">X_last<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">=<pos:position pos:line="87" pos:column="13"/></operator> <literal type="number" pos:line="87" pos:column="14">0.0<pos:position pos:line="87" pos:column="17"/></literal></expr>;<pos:position pos:line="87" pos:column="18"/></expr_stmt>		<comment type="block" pos:line="87" pos:column="33">/* Empty X_0, nullifies the first pow statement */</comment>

    <for pos:line="89" pos:column="5">for <control pos:line="89" pos:column="9">(<init><expr><name pos:line="89" pos:column="10">k<pos:position pos:line="89" pos:column="11"/></name> <operator pos:line="89" pos:column="12">=<pos:position pos:line="89" pos:column="13"/></operator> <literal type="number" pos:line="89" pos:column="14">1<pos:position pos:line="89" pos:column="15"/></literal></expr>;<pos:position pos:line="89" pos:column="16"/></init> <condition><expr><name pos:line="89" pos:column="17">k<pos:position pos:line="89" pos:column="18"/></name> <operator pos:line="89" pos:column="19">&lt;=<pos:position pos:line="89" pos:column="24"/></operator> <name pos:line="89" pos:column="22">K<pos:position pos:line="89" pos:column="23"/></name></expr>;<pos:position pos:line="89" pos:column="24"/></condition> <incr><expr><operator pos:line="89" pos:column="25">++<pos:position pos:line="89" pos:column="27"/></operator><name pos:line="89" pos:column="27">k<pos:position pos:line="89" pos:column="28"/></name></expr></incr>)<pos:position pos:line="89" pos:column="29"/></control> <block pos:line="89" pos:column="30">{
        <decl_stmt><decl><type><name pos:line="90" pos:column="9">double<pos:position pos:line="90" pos:column="15"/></name></type> <name pos:line="90" pos:column="16">Kk1<pos:position pos:line="90" pos:column="19"/></name> <init pos:line="90" pos:column="20">= <expr><call pos:line="90" pos:column="22">(<name pos:line="90" pos:column="23">double<pos:position pos:line="90" pos:column="29"/></name>) <argument_list pos:line="90" pos:column="31">(<argument><expr><name pos:line="90" pos:column="32">K<pos:position pos:line="90" pos:column="33"/></name> <operator pos:line="90" pos:column="34">-<pos:position pos:line="90" pos:column="35"/></operator> <name pos:line="90" pos:column="36">k<pos:position pos:line="90" pos:column="37"/></name> <operator pos:line="90" pos:column="38">+<pos:position pos:line="90" pos:column="39"/></operator> <literal type="number" pos:line="90" pos:column="40">1<pos:position pos:line="90" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="90" pos:column="43"/></decl_stmt>
        <expr_stmt><expr><name pos:line="91" pos:column="9">p<pos:position pos:line="91" pos:column="10"/></name> <operator pos:line="91" pos:column="11">=<pos:position pos:line="91" pos:column="12"/></operator> <name><name pos:line="91" pos:column="13">userhash_peers<pos:position pos:line="91" pos:column="27"/></name><index pos:line="91" pos:column="27">[<expr><name pos:line="91" pos:column="28">k<pos:position pos:line="91" pos:column="29"/></name> <operator pos:line="91" pos:column="30">-<pos:position pos:line="91" pos:column="31"/></operator> <literal type="number" pos:line="91" pos:column="32">1<pos:position pos:line="91" pos:column="33"/></literal></expr>]<pos:position pos:line="91" pos:column="34"/></index></name></expr>;<pos:position pos:line="91" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="92" pos:column="9">p<pos:position pos:line="92" pos:column="10"/></name><operator pos:line="92" pos:column="10">-&gt;<pos:position pos:line="92" pos:column="15"/></operator><name pos:line="92" pos:column="12">userhash<pos:position pos:line="92" pos:column="20"/></name><operator pos:line="92" pos:column="20">.<pos:position pos:line="92" pos:column="21"/></operator><name pos:line="92" pos:column="21">load_multiplier<pos:position pos:line="92" pos:column="36"/></name></name> <operator pos:line="92" pos:column="37">=<pos:position pos:line="92" pos:column="38"/></operator> <operator pos:line="92" pos:column="39">(<pos:position pos:line="92" pos:column="40"/></operator><name pos:line="92" pos:column="40">Kk1<pos:position pos:line="92" pos:column="43"/></name> <operator pos:line="92" pos:column="44">*<pos:position pos:line="92" pos:column="45"/></operator> <operator pos:line="92" pos:column="46">(<pos:position pos:line="92" pos:column="47"/></operator><name><name pos:line="92" pos:column="47">p<pos:position pos:line="92" pos:column="48"/></name><operator pos:line="92" pos:column="48">-&gt;<pos:position pos:line="92" pos:column="53"/></operator><name pos:line="92" pos:column="50">userhash<pos:position pos:line="92" pos:column="58"/></name><operator pos:line="92" pos:column="58">.<pos:position pos:line="92" pos:column="59"/></operator><name pos:line="92" pos:column="59">load_factor<pos:position pos:line="92" pos:column="70"/></name></name> <operator pos:line="92" pos:column="71">-<pos:position pos:line="92" pos:column="72"/></operator> <name pos:line="92" pos:column="73">P_last<pos:position pos:line="92" pos:column="79"/></name><operator pos:line="92" pos:column="79">)<pos:position pos:line="92" pos:column="80"/></operator><operator pos:line="92" pos:column="80">)<pos:position pos:line="92" pos:column="81"/></operator> <operator pos:line="92" pos:column="82">/<pos:position pos:line="92" pos:column="83"/></operator> <name pos:line="92" pos:column="84">Xn<pos:position pos:line="92" pos:column="86"/></name></expr>;<pos:position pos:line="92" pos:column="87"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="93" pos:column="9">p<pos:position pos:line="93" pos:column="10"/></name><operator pos:line="93" pos:column="10">-&gt;<pos:position pos:line="93" pos:column="15"/></operator><name pos:line="93" pos:column="12">userhash<pos:position pos:line="93" pos:column="20"/></name><operator pos:line="93" pos:column="20">.<pos:position pos:line="93" pos:column="21"/></operator><name pos:line="93" pos:column="21">load_multiplier<pos:position pos:line="93" pos:column="36"/></name></name> <operator pos:line="93" pos:column="37">+=<pos:position pos:line="93" pos:column="39"/></operator> <call><name pos:line="93" pos:column="40">pow<pos:position pos:line="93" pos:column="43"/></name><argument_list pos:line="93" pos:column="43">(<argument><expr><name pos:line="93" pos:column="44">X_last<pos:position pos:line="93" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="52">Kk1<pos:position pos:line="93" pos:column="55"/></name></expr></argument>)<pos:position pos:line="93" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="94" pos:column="9">p<pos:position pos:line="94" pos:column="10"/></name><operator pos:line="94" pos:column="10">-&gt;<pos:position pos:line="94" pos:column="15"/></operator><name pos:line="94" pos:column="12">userhash<pos:position pos:line="94" pos:column="20"/></name><operator pos:line="94" pos:column="20">.<pos:position pos:line="94" pos:column="21"/></operator><name pos:line="94" pos:column="21">load_multiplier<pos:position pos:line="94" pos:column="36"/></name></name> <operator pos:line="94" pos:column="37">=<pos:position pos:line="94" pos:column="38"/></operator> <call><name pos:line="94" pos:column="39">pow<pos:position pos:line="94" pos:column="42"/></name><argument_list pos:line="94" pos:column="42">(<argument><expr><name><name pos:line="94" pos:column="43">p<pos:position pos:line="94" pos:column="44"/></name><operator pos:line="94" pos:column="44">-&gt;<pos:position pos:line="94" pos:column="49"/></operator><name pos:line="94" pos:column="46">userhash<pos:position pos:line="94" pos:column="54"/></name><operator pos:line="94" pos:column="54">.<pos:position pos:line="94" pos:column="55"/></operator><name pos:line="94" pos:column="55">load_multiplier<pos:position pos:line="94" pos:column="70"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="72">1.0<pos:position pos:line="94" pos:column="75"/></literal> <operator pos:line="94" pos:column="76">/<pos:position pos:line="94" pos:column="77"/></operator> <name pos:line="94" pos:column="78">Kk1<pos:position pos:line="94" pos:column="81"/></name></expr></argument>)<pos:position pos:line="94" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><name pos:line="95" pos:column="9">Xn<pos:position pos:line="95" pos:column="11"/></name> <operator pos:line="95" pos:column="12">*=<pos:position pos:line="95" pos:column="14"/></operator> <name><name pos:line="95" pos:column="15">p<pos:position pos:line="95" pos:column="16"/></name><operator pos:line="95" pos:column="16">-&gt;<pos:position pos:line="95" pos:column="21"/></operator><name pos:line="95" pos:column="18">userhash<pos:position pos:line="95" pos:column="26"/></name><operator pos:line="95" pos:column="26">.<pos:position pos:line="95" pos:column="27"/></operator><name pos:line="95" pos:column="27">load_multiplier<pos:position pos:line="95" pos:column="42"/></name></name></expr>;<pos:position pos:line="95" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="96" pos:column="9">X_last<pos:position pos:line="96" pos:column="15"/></name> <operator pos:line="96" pos:column="16">=<pos:position pos:line="96" pos:column="17"/></operator> <name><name pos:line="96" pos:column="18">p<pos:position pos:line="96" pos:column="19"/></name><operator pos:line="96" pos:column="19">-&gt;<pos:position pos:line="96" pos:column="24"/></operator><name pos:line="96" pos:column="21">userhash<pos:position pos:line="96" pos:column="29"/></name><operator pos:line="96" pos:column="29">.<pos:position pos:line="96" pos:column="30"/></operator><name pos:line="96" pos:column="30">load_multiplier<pos:position pos:line="96" pos:column="45"/></name></name></expr>;<pos:position pos:line="96" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name pos:line="97" pos:column="9">P_last<pos:position pos:line="97" pos:column="15"/></name> <operator pos:line="97" pos:column="16">=<pos:position pos:line="97" pos:column="17"/></operator> <name><name pos:line="97" pos:column="18">p<pos:position pos:line="97" pos:column="19"/></name><operator pos:line="97" pos:column="19">-&gt;<pos:position pos:line="97" pos:column="24"/></operator><name pos:line="97" pos:column="21">userhash<pos:position pos:line="97" pos:column="29"/></name><operator pos:line="97" pos:column="29">.<pos:position pos:line="97" pos:column="30"/></operator><name pos:line="97" pos:column="30">load_factor<pos:position pos:line="97" pos:column="41"/></name></name></expr>;<pos:position pos:line="97" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></for>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
