<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3301_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">AccessCheck<pos:position pos:line="2" pos:column="24"/></name><operator pos:line="2" pos:column="24">::<pos:position pos:line="2" pos:column="26"/></operator><name pos:line="2" pos:column="26">Start<pos:position pos:line="2" pos:column="31"/></name></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><name pos:line="2" pos:column="32">Method<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">method<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">VectPoint<pos:position pos:line="2" pos:column="56"/></name></type> <name pos:line="2" pos:column="57">vp<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="3" pos:column="32">HttpRequest<pos:position pos:line="3" pos:column="43"/></name> <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="45">req<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="50">HttpReply<pos:position pos:line="3" pos:column="59"/></name> <modifier pos:line="3" pos:column="60">*<pos:position pos:line="3" pos:column="61"/></modifier></type><name pos:line="3" pos:column="61">rep<pos:position pos:line="3" pos:column="64"/></name></decl></parameter>,
                               <parameter><decl><type><name><name pos:line="4" pos:column="32">AccessLogEntry<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">::<pos:position pos:line="4" pos:column="48"/></operator><name pos:line="4" pos:column="48">Pointer<pos:position pos:line="4" pos:column="55"/></name></name> <modifier pos:line="4" pos:column="56">&amp;<pos:position pos:line="4" pos:column="61"/></modifier></type><name pos:line="4" pos:column="57">al<pos:position pos:line="4" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="4" pos:column="61">Adaptation<pos:position pos:line="4" pos:column="71"/></name><operator pos:line="4" pos:column="71">::<pos:position pos:line="4" pos:column="73"/></operator><name pos:line="4" pos:column="73">Initiator<pos:position pos:line="4" pos:column="82"/></name></name> <modifier pos:line="4" pos:column="83">*<pos:position pos:line="4" pos:column="84"/></modifier></type><name pos:line="4" pos:column="84">initiator<pos:position pos:line="4" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="94"/></parameter_list>
<block pos:line="5" pos:column="1">{

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">Config<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">::<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">Enabled<pos:position pos:line="7" pos:column="24"/></name></name></expr>)<pos:position pos:line="7" pos:column="25"/></condition><then pos:line="7" pos:column="25"> <block pos:line="7" pos:column="26">{
        <comment type="line" pos:line="8" pos:column="9">// the new check will call the callback and delete self, eventually</comment>
        <expr_stmt><expr><call><name><name pos:line="9" pos:column="9">AsyncJob<pos:position pos:line="9" pos:column="17"/></name><operator pos:line="9" pos:column="17">::<pos:position pos:line="9" pos:column="19"/></operator><name pos:line="9" pos:column="19">Start<pos:position pos:line="9" pos:column="24"/></name></name><argument_list pos:line="9" pos:column="24">(<argument><expr><operator pos:line="9" pos:column="25">new<pos:position pos:line="9" pos:column="28"/></operator> <call><name pos:line="9" pos:column="29">AccessCheck<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">( <comment type="line" pos:line="9" pos:column="42">// we do not store so not a CbcPointer</comment>
                            <argument><expr><call><name pos:line="10" pos:column="29">ServiceFilter<pos:position pos:line="10" pos:column="42"/></name><argument_list pos:line="10" pos:column="42">(<argument><expr><name pos:line="10" pos:column="43">method<pos:position pos:line="10" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="51">vp<pos:position pos:line="10" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="55">req<pos:position pos:line="10" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="60">rep<pos:position pos:line="10" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="65">al<pos:position pos:line="10" pos:column="67"/></name></expr></argument>)<pos:position pos:line="10" pos:column="68"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="10" pos:column="70">initiator<pos:position pos:line="10" pos:column="79"/></name></expr></argument>)<pos:position pos:line="10" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="82"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><literal type="boolean" pos:line="11" pos:column="16">true<pos:position pos:line="11" pos:column="20"/></literal></expr>;<pos:position pos:line="11" pos:column="21"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">debugs<pos:position pos:line="14" pos:column="11"/></name><argument_list pos:line="14" pos:column="11">(<argument><expr><literal type="number" pos:line="14" pos:column="12">83<pos:position pos:line="14" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="16">3<pos:position pos:line="14" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="19">HERE<pos:position pos:line="14" pos:column="23"/></name> <operator pos:line="14" pos:column="24">&lt;&lt;<pos:position pos:line="14" pos:column="32"/></operator> <literal type="string" pos:line="14" pos:column="27">"adaptation off, skipping"<pos:position pos:line="14" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="55"/></expr_stmt>
    <return pos:line="15" pos:column="5">return <expr><literal type="boolean" pos:line="15" pos:column="12">false<pos:position pos:line="15" pos:column="17"/></literal></expr>;<pos:position pos:line="15" pos:column="18"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
