<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3498_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">httpAccept<pos:position pos:line="2" pos:column="11"/></name><parameter_list pos:line="2" pos:column="11">(<parameter><decl><type><name pos:line="2" pos:column="12">int<pos:position pos:line="2" pos:column="15"/></name></type> <name pos:line="2" pos:column="16">sock<pos:position pos:line="2" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="22">int<pos:position pos:line="2" pos:column="25"/></name></type> <name pos:line="2" pos:column="26">newfd<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">ConnectionDetail<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">details<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
           <parameter><decl><type><name pos:line="3" pos:column="12">comm_err_t<pos:position pos:line="3" pos:column="22"/></name></type> <name pos:line="3" pos:column="23">flag<pos:position pos:line="3" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="29">int<pos:position pos:line="3" pos:column="32"/></name></type> <name pos:line="3" pos:column="33">xerrno<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="41">void<pos:position pos:line="3" pos:column="45"/></name> <modifier pos:line="3" pos:column="46">*<pos:position pos:line="3" pos:column="47"/></modifier></type><name pos:line="3" pos:column="47">data<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="52"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">http_port_list<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">s<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><operator pos:line="5" pos:column="25">(<pos:position pos:line="5" pos:column="26"/></operator><name pos:line="5" pos:column="26">http_port_list<pos:position pos:line="5" pos:column="40"/></name> <operator pos:line="5" pos:column="41">*<pos:position pos:line="5" pos:column="42"/></operator><operator pos:line="5" pos:column="42">)<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="43">data<pos:position pos:line="5" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">ConnStateData<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">connState<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name pos:line="6" pos:column="32">NULL<pos:position pos:line="6" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">flag<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">==<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">COMM_ERR_CLOSING<pos:position pos:line="8" pos:column="33"/></name></expr>)<pos:position pos:line="8" pos:column="34"/></condition><then pos:line="8" pos:column="34"> <block pos:line="8" pos:column="35">{
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><call><name pos:line="12" pos:column="10">okToAccept<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">()<pos:position pos:line="12" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="13" pos:column="9">AcceptLimiter<pos:position pos:line="13" pos:column="22"/></name><operator pos:line="13" pos:column="22">::<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">Instance<pos:position pos:line="13" pos:column="32"/></name></name><argument_list pos:line="13" pos:column="32">()<pos:position pos:line="13" pos:column="34"/></argument_list></call><operator pos:line="13" pos:column="34">.<pos:position pos:line="13" pos:column="35"/></operator><call><name pos:line="13" pos:column="35">defer<pos:position pos:line="13" pos:column="40"/></name> <argument_list pos:line="13" pos:column="41">(<argument><expr><name pos:line="13" pos:column="42">sock<pos:position pos:line="13" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">httpAccept<pos:position pos:line="13" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="60">data<pos:position pos:line="13" pos:column="64"/></name></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt></block></then>
    <else pos:line="14" pos:column="5">else
        <comment type="block" pos:line="15" pos:column="9">/* kick off another one for later */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">comm_accept<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">sock<pos:position pos:line="16" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="27">httpAccept<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">data<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt></block></else></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">flag<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">!=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">COMM_OK<pos:position pos:line="18" pos:column="24"/></name></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25"> <block pos:line="18" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">33<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="20">1<pos:position pos:line="19" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="23">"httpAccept: FD "<pos:position pos:line="19" pos:column="40"/></literal> <operator pos:line="19" pos:column="41">&lt;&lt;<pos:position pos:line="19" pos:column="49"/></operator> <name pos:line="19" pos:column="44">sock<pos:position pos:line="19" pos:column="48"/></name> <operator pos:line="19" pos:column="49">&lt;&lt;<pos:position pos:line="19" pos:column="57"/></operator> <literal type="string" pos:line="19" pos:column="52">": accept failure: "<pos:position pos:line="19" pos:column="72"/></literal> <operator pos:line="19" pos:column="73">&lt;&lt;<pos:position pos:line="19" pos:column="81"/></operator> <call><name pos:line="19" pos:column="76">xstrerr<pos:position pos:line="19" pos:column="83"/></name><argument_list pos:line="19" pos:column="83">(<argument><expr><name pos:line="19" pos:column="84">xerrno<pos:position pos:line="19" pos:column="90"/></name></expr></argument>)<pos:position pos:line="19" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="93"/></expr_stmt>
        <return pos:line="20" pos:column="9">return;<pos:position pos:line="20" pos:column="16"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">debugs<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><literal type="number" pos:line="23" pos:column="12">33<pos:position pos:line="23" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="16">4<pos:position pos:line="23" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="19">"httpAccept: FD "<pos:position pos:line="23" pos:column="36"/></literal> <operator pos:line="23" pos:column="37">&lt;&lt;<pos:position pos:line="23" pos:column="45"/></operator> <name pos:line="23" pos:column="40">newfd<pos:position pos:line="23" pos:column="45"/></name> <operator pos:line="23" pos:column="46">&lt;&lt;<pos:position pos:line="23" pos:column="54"/></operator> <literal type="string" pos:line="23" pos:column="49">": accepted"<pos:position pos:line="23" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">fd_note<pos:position pos:line="24" pos:column="12"/></name><argument_list pos:line="24" pos:column="12">(<argument><expr><name pos:line="24" pos:column="13">newfd<pos:position pos:line="24" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="20">"client http connect"<pos:position pos:line="24" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">connState<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <call><name pos:line="25" pos:column="17">connStateCreate<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><operator pos:line="25" pos:column="33">&amp;<pos:position pos:line="25" pos:column="38"/></operator><name><name pos:line="25" pos:column="34">details<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">-&gt;<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="43">peer<pos:position pos:line="25" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="49">&amp;<pos:position pos:line="25" pos:column="54"/></operator><name><name pos:line="25" pos:column="50">details<pos:position pos:line="25" pos:column="57"/></name><operator pos:line="25" pos:column="57">-&gt;<pos:position pos:line="25" pos:column="62"/></operator><name pos:line="25" pos:column="59">me<pos:position pos:line="25" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="63">newfd<pos:position pos:line="25" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="70">s<pos:position pos:line="25" pos:column="71"/></name></expr></argument>)<pos:position pos:line="25" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="73"/></expr_stmt>

    <typedef pos:line="27" pos:column="5">typedef <type><name><name pos:line="27" pos:column="13">CommCbMemFunT<pos:position pos:line="27" pos:column="26"/></name><argument_list type="generic" pos:line="27" pos:column="26">&lt;<argument><expr><name pos:line="27" pos:column="27">ConnStateData<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="42">CommCloseCbParams<pos:position pos:line="27" pos:column="59"/></name></expr></argument>&gt;<pos:position pos:line="27" pos:column="63"/></argument_list></name></type> <name pos:line="27" pos:column="61">Dialer<pos:position pos:line="27" pos:column="67"/></name>;<pos:position pos:line="27" pos:column="68"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="28" pos:column="5">AsyncCall<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">::<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">Pointer<pos:position pos:line="28" pos:column="23"/></name></name></type> <name pos:line="28" pos:column="24">call<pos:position pos:line="28" pos:column="28"/></name> <init pos:line="28" pos:column="29">= <expr><call><name pos:line="28" pos:column="31">JobCallback<pos:position pos:line="28" pos:column="42"/></name><argument_list pos:line="28" pos:column="42">(<argument><expr><literal type="number" pos:line="28" pos:column="43">33<pos:position pos:line="28" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="47">5<pos:position pos:line="28" pos:column="48"/></literal></expr></argument>,
                                          <argument><expr><name pos:line="29" pos:column="43">Dialer<pos:position pos:line="29" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="51">connState<pos:position pos:line="29" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="62">ConnStateData<pos:position pos:line="29" pos:column="75"/></name><operator pos:line="29" pos:column="75">::<pos:position pos:line="29" pos:column="77"/></operator><name pos:line="29" pos:column="77">connStateClosed<pos:position pos:line="29" pos:column="92"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="93"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="94"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">comm_add_close_handler<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">newfd<pos:position pos:line="30" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="35">call<pos:position pos:line="30" pos:column="39"/></name></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name><name pos:line="32" pos:column="9">Config<pos:position pos:line="32" pos:column="15"/></name><operator pos:line="32" pos:column="15">.<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">onoff<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">.<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="22">log_fqdn<pos:position pos:line="32" pos:column="30"/></name></name></expr>)<pos:position pos:line="32" pos:column="31"/></condition><then pos:line="32" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="9">fqdncache_gethostbyaddr<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name><name pos:line="33" pos:column="33">details<pos:position pos:line="33" pos:column="40"/></name><operator pos:line="33" pos:column="40">-&gt;<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="42">peer<pos:position pos:line="33" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="48">FQDN_LOOKUP_IF_MISS<pos:position pos:line="33" pos:column="67"/></name></expr></argument>)<pos:position pos:line="33" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="69"/></expr_stmt></block></then></if>

    <typedef pos:line="35" pos:column="5">typedef <type><name><name pos:line="35" pos:column="13">CommCbMemFunT<pos:position pos:line="35" pos:column="26"/></name><argument_list type="generic" pos:line="35" pos:column="26">&lt;<argument><expr><name pos:line="35" pos:column="27">ConnStateData<pos:position pos:line="35" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="42">CommTimeoutCbParams<pos:position pos:line="35" pos:column="61"/></name></expr></argument>&gt;<pos:position pos:line="35" pos:column="65"/></argument_list></name></type> <name pos:line="35" pos:column="63">TimeoutDialer<pos:position pos:line="35" pos:column="76"/></name>;<pos:position pos:line="35" pos:column="77"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="36" pos:column="5">AsyncCall<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">::<pos:position pos:line="36" pos:column="16"/></operator><name pos:line="36" pos:column="16">Pointer<pos:position pos:line="36" pos:column="23"/></name></name></type> <name pos:line="36" pos:column="24">timeoutCall<pos:position pos:line="36" pos:column="35"/></name> <init pos:line="36" pos:column="36">=  <expr><call><name pos:line="36" pos:column="39">JobCallback<pos:position pos:line="36" pos:column="50"/></name><argument_list pos:line="36" pos:column="50">(<argument><expr><literal type="number" pos:line="36" pos:column="51">33<pos:position pos:line="36" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="55">5<pos:position pos:line="36" pos:column="56"/></literal></expr></argument>,
                                      <argument><expr><name pos:line="37" pos:column="39">TimeoutDialer<pos:position pos:line="37" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="54">connState<pos:position pos:line="37" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="65">ConnStateData<pos:position pos:line="37" pos:column="78"/></name><operator pos:line="37" pos:column="78">::<pos:position pos:line="37" pos:column="80"/></operator><name pos:line="37" pos:column="80">requestTimeout<pos:position pos:line="37" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="96"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">commSetTimeout<pos:position pos:line="38" pos:column="19"/></name><argument_list pos:line="38" pos:column="19">(<argument><expr><name pos:line="38" pos:column="20">newfd<pos:position pos:line="38" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="27">Config<pos:position pos:line="38" pos:column="33"/></name><operator pos:line="38" pos:column="33">.<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="34">Timeout<pos:position pos:line="38" pos:column="41"/></name><operator pos:line="38" pos:column="41">.<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="42">request<pos:position pos:line="38" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="51">timeoutCall<pos:position pos:line="38" pos:column="62"/></name></expr></argument>)<pos:position pos:line="38" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="64"/></expr_stmt>

<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><name pos:line="40" pos:column="5">USE_IDENT<pos:position pos:line="40" pos:column="14"/></name></expr></cpp:if>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name><name pos:line="41" pos:column="9">Ident<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">::<pos:position pos:line="41" pos:column="16"/></operator><name pos:line="41" pos:column="16">TheConfig<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">.<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="26">identLookup<pos:position pos:line="41" pos:column="37"/></name></name></expr>)<pos:position pos:line="41" pos:column="38"/></condition><then pos:line="41" pos:column="38"> <block pos:line="41" pos:column="39">{
        <decl_stmt><decl><type><name pos:line="42" pos:column="9">ACLFilledChecklist<pos:position pos:line="42" pos:column="27"/></name></type> <name pos:line="42" pos:column="28">identChecklist<pos:position pos:line="42" pos:column="42"/></name><argument_list pos:line="42" pos:column="42">(<argument><expr><name><name pos:line="42" pos:column="43">Ident<pos:position pos:line="42" pos:column="48"/></name><operator pos:line="42" pos:column="48">::<pos:position pos:line="42" pos:column="50"/></operator><name pos:line="42" pos:column="50">TheConfig<pos:position pos:line="42" pos:column="59"/></name><operator pos:line="42" pos:column="59">.<pos:position pos:line="42" pos:column="60"/></operator><name pos:line="42" pos:column="60">identLookup<pos:position pos:line="42" pos:column="71"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="73">NULL<pos:position pos:line="42" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="79">NULL<pos:position pos:line="42" pos:column="83"/></name></expr></argument>)<pos:position pos:line="42" pos:column="84"/></argument_list></decl>;<pos:position pos:line="42" pos:column="85"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">identChecklist<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">.<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="24">src_addr<pos:position pos:line="43" pos:column="32"/></name></name> <operator pos:line="43" pos:column="33">=<pos:position pos:line="43" pos:column="34"/></operator> <name><name pos:line="43" pos:column="35">details<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">-&gt;<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="44">peer<pos:position pos:line="43" pos:column="48"/></name></name></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="44" pos:column="9">identChecklist<pos:position pos:line="44" pos:column="23"/></name><operator pos:line="44" pos:column="23">.<pos:position pos:line="44" pos:column="24"/></operator><name pos:line="44" pos:column="24">my_addr<pos:position pos:line="44" pos:column="31"/></name></name> <operator pos:line="44" pos:column="32">=<pos:position pos:line="44" pos:column="33"/></operator> <name><name pos:line="44" pos:column="34">details<pos:position pos:line="44" pos:column="41"/></name><operator pos:line="44" pos:column="41">-&gt;<pos:position pos:line="44" pos:column="46"/></operator><name pos:line="44" pos:column="43">me<pos:position pos:line="44" pos:column="45"/></name></name></expr>;<pos:position pos:line="44" pos:column="46"/></expr_stmt>
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name><name pos:line="45" pos:column="13">identChecklist<pos:position pos:line="45" pos:column="27"/></name><operator pos:line="45" pos:column="27">.<pos:position pos:line="45" pos:column="28"/></operator><name pos:line="45" pos:column="28">fastCheck<pos:position pos:line="45" pos:column="37"/></name></name><argument_list pos:line="45" pos:column="37">()<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="40"/></condition><then pos:line="45" pos:column="40">
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="46" pos:column="13">Ident<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">::<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="20">Start<pos:position pos:line="46" pos:column="25"/></name></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name><name pos:line="46" pos:column="26">details<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">me<pos:position pos:line="46" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="39">details<pos:position pos:line="46" pos:column="46"/></name><operator pos:line="46" pos:column="46">-&gt;<pos:position pos:line="46" pos:column="51"/></operator><name pos:line="46" pos:column="48">peer<pos:position pos:line="46" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="54">clientIdentDone<pos:position pos:line="46" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="71">connState<pos:position pos:line="46" pos:column="80"/></name></expr></argument>)<pos:position pos:line="46" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="82"/></expr_stmt></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
<cpp:endif pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">endif<pos:position pos:line="48" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name><name pos:line="50" pos:column="9">s<pos:position pos:line="50" pos:column="10"/></name><operator pos:line="50" pos:column="10">-&gt;<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="12">tcp_keepalive<pos:position pos:line="50" pos:column="25"/></name><operator pos:line="50" pos:column="25">.<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="26">enabled<pos:position pos:line="50" pos:column="33"/></name></name></expr>)<pos:position pos:line="50" pos:column="34"/></condition><then pos:line="50" pos:column="34"> <block pos:line="50" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">commSetTcpKeepalive<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">newfd<pos:position pos:line="51" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="36">s<pos:position pos:line="51" pos:column="37"/></name><operator pos:line="51" pos:column="37">-&gt;<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="39">tcp_keepalive<pos:position pos:line="51" pos:column="52"/></name><operator pos:line="51" pos:column="52">.<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="53">idle<pos:position pos:line="51" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="59">s<pos:position pos:line="51" pos:column="60"/></name><operator pos:line="51" pos:column="60">-&gt;<pos:position pos:line="51" pos:column="65"/></operator><name pos:line="51" pos:column="62">tcp_keepalive<pos:position pos:line="51" pos:column="75"/></name><operator pos:line="51" pos:column="75">.<pos:position pos:line="51" pos:column="76"/></operator><name pos:line="51" pos:column="76">interval<pos:position pos:line="51" pos:column="84"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="86">s<pos:position pos:line="51" pos:column="87"/></name><operator pos:line="51" pos:column="87">-&gt;<pos:position pos:line="51" pos:column="92"/></operator><name pos:line="51" pos:column="89">tcp_keepalive<pos:position pos:line="51" pos:column="102"/></name><operator pos:line="51" pos:column="102">.<pos:position pos:line="51" pos:column="103"/></operator><name pos:line="51" pos:column="103">timeout<pos:position pos:line="51" pos:column="110"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="112"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="54" pos:column="5">connState<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">-&gt;<pos:position pos:line="54" pos:column="19"/></operator><name pos:line="54" pos:column="16">readSomeData<pos:position pos:line="54" pos:column="28"/></name></name><argument_list pos:line="54" pos:column="28">()<pos:position pos:line="54" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="56" pos:column="5">clientdbEstablished<pos:position pos:line="56" pos:column="24"/></name><argument_list pos:line="56" pos:column="24">(<argument><expr><name><name pos:line="56" pos:column="25">details<pos:position pos:line="56" pos:column="32"/></name><operator pos:line="56" pos:column="32">-&gt;<pos:position pos:line="56" pos:column="37"/></operator><name pos:line="56" pos:column="34">peer<pos:position pos:line="56" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="40">1<pos:position pos:line="56" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><name pos:line="58" pos:column="5">incoming_sockets_accepted<pos:position pos:line="58" pos:column="30"/></name><operator pos:line="58" pos:column="30">++<pos:position pos:line="58" pos:column="32"/></operator></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
