<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1676_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">peerDigestSwapInMask<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">void<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">data<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">buf<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">ssize_t<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">size<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DigestFetchState<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">fetch<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><operator pos:line="4" pos:column="31">(<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">DigestFetchState<pos:position pos:line="4" pos:column="48"/></name> <operator pos:line="4" pos:column="49">*<pos:position pos:line="4" pos:column="50"/></operator><operator pos:line="4" pos:column="50">)<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="51">data<pos:position pos:line="4" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">PeerDigest<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">pd<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">pd<pos:position pos:line="7" pos:column="7"/></name> <operator pos:line="7" pos:column="8">=<pos:position pos:line="7" pos:column="9"/></operator> <name><name pos:line="7" pos:column="10">fetch<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">-&gt;<pos:position pos:line="7" pos:column="20"/></operator><name pos:line="7" pos:column="17">pd<pos:position pos:line="7" pos:column="19"/></name></name></expr>;<pos:position pos:line="7" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name><name pos:line="8" pos:column="12">pd<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">-&gt;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="16">cd<pos:position pos:line="8" pos:column="18"/></name></name> <operator pos:line="8" pos:column="19">&amp;&amp;<pos:position pos:line="8" pos:column="29"/></operator> <name><name pos:line="8" pos:column="22">pd<pos:position pos:line="8" pos:column="24"/></name><operator pos:line="8" pos:column="24">-&gt;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="26">cd<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">-&gt;<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="30">mask<pos:position pos:line="8" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="10" pos:column="5">/*
     * NOTENOTENOTENOTENOTE: buf doesn't point to pd-&gt;cd-&gt;mask anymore!
     * we need to do the copy ourselves!
     */</comment>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">xmemcpy<pos:position pos:line="14" pos:column="12"/></name><argument_list pos:line="14" pos:column="12">(<argument><expr><name><name pos:line="14" pos:column="13">pd<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">-&gt;<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="17">cd<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">-&gt;<pos:position pos:line="14" pos:column="24"/></operator><name pos:line="14" pos:column="21">mask<pos:position pos:line="14" pos:column="25"/></name></name> <operator pos:line="14" pos:column="26">+<pos:position pos:line="14" pos:column="27"/></operator> <name><name pos:line="14" pos:column="28">fetch<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">-&gt;<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="35">mask_offset<pos:position pos:line="14" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">buf<pos:position pos:line="14" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="53">size<pos:position pos:line="14" pos:column="57"/></name></expr></argument>)<pos:position pos:line="14" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="59"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* NOTE! buf points to the middle of pd-&gt;cd-&gt;mask! */</comment>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">peerDigestFetchedEnough<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><name pos:line="18" pos:column="33">fetch<pos:position pos:line="18" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="40">NULL<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">size<pos:position pos:line="18" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="52">"peerDigestSwapInMask"<pos:position pos:line="18" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="76"/></condition><then pos:line="18" pos:column="76">
        <block type="pseudo"><return pos:line="19" pos:column="9">return <expr><operator pos:line="19" pos:column="16">-<pos:position pos:line="19" pos:column="17"/></operator><literal type="number" pos:line="19" pos:column="17">1<pos:position pos:line="19" pos:column="18"/></literal></expr>;<pos:position pos:line="19" pos:column="19"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="21" pos:column="5">fetch<pos:position pos:line="21" pos:column="10"/></name><operator pos:line="21" pos:column="10">-&gt;<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="12">mask_offset<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">+=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">size<pos:position pos:line="21" pos:column="31"/></name></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">fetch<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">mask_offset<pos:position pos:line="23" pos:column="27"/></name></name> <operator pos:line="23" pos:column="28">&gt;=<pos:position pos:line="23" pos:column="33"/></operator> <name><name pos:line="23" pos:column="31">pd<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">-&gt;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="35">cd<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">-&gt;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="39">mask_size<pos:position pos:line="23" pos:column="48"/></name></name></expr>)<pos:position pos:line="23" pos:column="49"/></condition><then pos:line="23" pos:column="49"> <block pos:line="23" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">debugs<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="number" pos:line="24" pos:column="16">72<pos:position pos:line="24" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="20">2<pos:position pos:line="24" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="23">"peerDigestSwapInMask: Done! Got "<pos:position pos:line="24" pos:column="57"/></literal> <operator pos:line="24" pos:column="58">&lt;&lt;<pos:position pos:line="24" pos:column="66"/></operator>
               <name><name pos:line="25" pos:column="16">fetch<pos:position pos:line="25" pos:column="21"/></name><operator pos:line="25" pos:column="21">-&gt;<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="23">mask_offset<pos:position pos:line="25" pos:column="34"/></name></name> <operator pos:line="25" pos:column="35">&lt;&lt;<pos:position pos:line="25" pos:column="43"/></operator> <literal type="string" pos:line="25" pos:column="38">", expected "<pos:position pos:line="25" pos:column="51"/></literal> <operator pos:line="25" pos:column="52">&lt;&lt;<pos:position pos:line="25" pos:column="60"/></operator> <name><name pos:line="25" pos:column="55">pd<pos:position pos:line="25" pos:column="57"/></name><operator pos:line="25" pos:column="57">-&gt;<pos:position pos:line="25" pos:column="62"/></operator><name pos:line="25" pos:column="59">cd<pos:position pos:line="25" pos:column="61"/></name><operator pos:line="25" pos:column="61">-&gt;<pos:position pos:line="25" pos:column="66"/></operator><name pos:line="25" pos:column="63">mask_size<pos:position pos:line="25" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">assert<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name><name pos:line="26" pos:column="16">fetch<pos:position pos:line="26" pos:column="21"/></name><operator pos:line="26" pos:column="21">-&gt;<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="23">mask_offset<pos:position pos:line="26" pos:column="34"/></name></name> <operator pos:line="26" pos:column="35">==<pos:position pos:line="26" pos:column="37"/></operator> <name><name pos:line="26" pos:column="38">pd<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">-&gt;<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="42">cd<pos:position pos:line="26" pos:column="44"/></name><operator pos:line="26" pos:column="44">-&gt;<pos:position pos:line="26" pos:column="49"/></operator><name pos:line="26" pos:column="46">mask_size<pos:position pos:line="26" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">assert<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><call><name pos:line="27" pos:column="16">peerDigestFetchedEnough<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><name pos:line="27" pos:column="40">fetch<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">NULL<pos:position pos:line="27" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="53">0<pos:position pos:line="27" pos:column="54"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="56">"peerDigestSwapInMask"<pos:position pos:line="27" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="81"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><operator pos:line="28" pos:column="16">-<pos:position pos:line="28" pos:column="17"/></operator><literal type="number" pos:line="28" pos:column="17">1<pos:position pos:line="28" pos:column="18"/></literal></expr>;<pos:position pos:line="28" pos:column="19"/></return>		<comment type="block" pos:line="28" pos:column="33">/* XXX! */</comment>
    }<pos:position pos:line="29" pos:column="6"/></block></then> <else pos:line="29" pos:column="7">else <block pos:line="29" pos:column="12">{
        <comment type="block" pos:line="30" pos:column="9">/* We always read everything, so return so */</comment>
        <return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">size<pos:position pos:line="31" pos:column="20"/></name></expr>;<pos:position pos:line="31" pos:column="21"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">fatal<pos:position pos:line="34" pos:column="10"/></name><argument_list pos:line="34" pos:column="10">(<argument><expr><literal type="string" pos:line="34" pos:column="11">"peerDigestSwapInMask(): shouldn't get here!\n"<pos:position pos:line="34" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><literal type="number" pos:line="35" pos:column="12">0<pos:position pos:line="35" pos:column="13"/></literal></expr>;<pos:position pos:line="35" pos:column="14"/></return> <comment type="block" pos:line="35" pos:column="15">/* keep gcc happy */</comment>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
