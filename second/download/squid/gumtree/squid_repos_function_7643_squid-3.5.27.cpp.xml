<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_7643_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">boolean<pos:position pos:line="1" pos:column="8"/></name></type>
<name pos:line="2" pos:column="1">common_op_match_null_string_p<pos:position pos:line="2" pos:column="30"/></name><parameter_list pos:line="2" pos:column="30">( <parameter><decl><type><name pos:line="2" pos:column="32">unsigned<pos:position pos:line="2" pos:column="40"/></name> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier><modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">p<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="51">unsigned<pos:position pos:line="2" pos:column="59"/></name> <name pos:line="2" pos:column="60">char<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">end<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="71">register_info_type<pos:position pos:line="2" pos:column="89"/></name> <modifier pos:line="2" pos:column="90">*<pos:position pos:line="2" pos:column="91"/></modifier></type><name pos:line="2" pos:column="91">reg_info<pos:position pos:line="2" pos:column="99"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="100"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">mcnt<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">boolean<pos:position pos:line="5" pos:column="12"/></name></type> <name pos:line="5" pos:column="13">ret<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">reg_no<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">char<pos:position pos:line="7" pos:column="18"/></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">p1<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><operator pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="26">p<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

    <switch pos:line="9" pos:column="5">switch <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">(<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">re_opcode_t<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">)<pos:position pos:line="9" pos:column="26"/></operator> <operator pos:line="9" pos:column="27">*<pos:position pos:line="9" pos:column="28"/></operator> <name pos:line="9" pos:column="29">p1<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">++<pos:position pos:line="9" pos:column="33"/></operator></expr>)<pos:position pos:line="9" pos:column="34"/></condition> <block pos:line="9" pos:column="35">{
    <case pos:line="10" pos:column="5">case <expr><name pos:line="10" pos:column="10">no_op<pos:position pos:line="10" pos:column="15"/></name></expr>:<pos:position pos:line="10" pos:column="16"/></case>
    <case pos:line="11" pos:column="5">case <expr><name pos:line="11" pos:column="10">begline<pos:position pos:line="11" pos:column="17"/></name></expr>:<pos:position pos:line="11" pos:column="18"/></case>
    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">endline<pos:position pos:line="12" pos:column="17"/></name></expr>:<pos:position pos:line="12" pos:column="18"/></case>
    <case pos:line="13" pos:column="5">case <expr><name pos:line="13" pos:column="10">begbuf<pos:position pos:line="13" pos:column="16"/></name></expr>:<pos:position pos:line="13" pos:column="17"/></case>
    <case pos:line="14" pos:column="5">case <expr><name pos:line="14" pos:column="10">endbuf<pos:position pos:line="14" pos:column="16"/></name></expr>:<pos:position pos:line="14" pos:column="17"/></case>
    <case pos:line="15" pos:column="5">case <expr><name pos:line="15" pos:column="10">wordbeg<pos:position pos:line="15" pos:column="17"/></name></expr>:<pos:position pos:line="15" pos:column="18"/></case>
    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">wordend<pos:position pos:line="16" pos:column="17"/></name></expr>:<pos:position pos:line="16" pos:column="18"/></case>
    <case pos:line="17" pos:column="5">case <expr><name pos:line="17" pos:column="10">wordbound<pos:position pos:line="17" pos:column="19"/></name></expr>:<pos:position pos:line="17" pos:column="20"/></case>
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">notwordbound<pos:position pos:line="18" pos:column="22"/></name></expr>:<pos:position pos:line="18" pos:column="23"/></case>
        <break pos:line="19" pos:column="9">break;<pos:position pos:line="19" pos:column="15"/></break>

    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">start_memory<pos:position pos:line="21" pos:column="22"/></name></expr>:<pos:position pos:line="21" pos:column="23"/></case>
        <expr_stmt><expr><name pos:line="22" pos:column="9">reg_no<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <operator pos:line="22" pos:column="18">*<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">p1<pos:position pos:line="22" pos:column="21"/></name></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">assert<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">reg_no<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">&gt;<pos:position pos:line="23" pos:column="27"/></operator> <literal type="number" pos:line="23" pos:column="25">0<pos:position pos:line="23" pos:column="26"/></literal> <operator pos:line="23" pos:column="27">&amp;&amp;<pos:position pos:line="23" pos:column="37"/></operator> <name pos:line="23" pos:column="30">reg_no<pos:position pos:line="23" pos:column="36"/></name> <operator pos:line="23" pos:column="37">&lt;=<pos:position pos:line="23" pos:column="42"/></operator> <name pos:line="23" pos:column="40">MAX_REGNUM<pos:position pos:line="23" pos:column="50"/></name></expr></argument>)<pos:position pos:line="23" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">ret<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <call><name pos:line="24" pos:column="15">group_match_null_string_p<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><operator pos:line="24" pos:column="41">&amp;<pos:position pos:line="24" pos:column="46"/></operator><name pos:line="24" pos:column="42">p1<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="46">end<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="51">reg_info<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="61"/></expr_stmt>

        <comment type="block" pos:line="26" pos:column="9">/* Have to set this here in case we're checking a group which
         * contains a group and a back reference to it.  */</comment>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">REG_MATCH_NULL_STRING_P<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name><name pos:line="29" pos:column="37">reg_info<pos:position pos:line="29" pos:column="45"/></name><index pos:line="29" pos:column="45">[<expr><name pos:line="29" pos:column="46">reg_no<pos:position pos:line="29" pos:column="52"/></name></expr>]<pos:position pos:line="29" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call> <operator pos:line="29" pos:column="55">==<pos:position pos:line="29" pos:column="57"/></operator> <name pos:line="29" pos:column="58">MATCH_NULL_UNSET_VALUE<pos:position pos:line="29" pos:column="80"/></name></expr>)<pos:position pos:line="29" pos:column="81"/></condition><then pos:line="29" pos:column="81">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="13">REG_MATCH_NULL_STRING_P<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><name><name pos:line="30" pos:column="37">reg_info<pos:position pos:line="30" pos:column="45"/></name><index pos:line="30" pos:column="45">[<expr><name pos:line="30" pos:column="46">reg_no<pos:position pos:line="30" pos:column="52"/></name></expr>]<pos:position pos:line="30" pos:column="53"/></index></name></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call> <operator pos:line="30" pos:column="55">=<pos:position pos:line="30" pos:column="56"/></operator> <name pos:line="30" pos:column="57">ret<pos:position pos:line="30" pos:column="60"/></name></expr>;<pos:position pos:line="30" pos:column="61"/></expr_stmt></block></then></if>

        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">!<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">ret<pos:position pos:line="32" pos:column="17"/></name></expr>)<pos:position pos:line="32" pos:column="18"/></condition><then pos:line="32" pos:column="18">
            <block type="pseudo"><return pos:line="33" pos:column="13">return <expr><literal type="boolean" pos:line="33" pos:column="20">false<pos:position pos:line="33" pos:column="25"/></literal></expr>;<pos:position pos:line="33" pos:column="26"/></return></block></then></if>
        <break pos:line="34" pos:column="9">break;<pos:position pos:line="34" pos:column="15"/></break>

    <comment type="block" pos:line="36" pos:column="5">/* If this is an optimized succeed_n for zero times, make the jump.  */</comment>
    <case pos:line="37" pos:column="5">case <expr><name pos:line="37" pos:column="10">jump<pos:position pos:line="37" pos:column="14"/></name></expr>:<pos:position pos:line="37" pos:column="15"/></case>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">mcnt<pos:position pos:line="38" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="39">p1<pos:position pos:line="38" pos:column="41"/></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">mcnt<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">&gt;=<pos:position pos:line="39" pos:column="23"/></operator> <literal type="number" pos:line="39" pos:column="21">0<pos:position pos:line="39" pos:column="22"/></literal></expr>)<pos:position pos:line="39" pos:column="23"/></condition><then pos:line="39" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="13">p1<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">+=<pos:position pos:line="40" pos:column="18"/></operator> <name pos:line="40" pos:column="19">mcnt<pos:position pos:line="40" pos:column="23"/></name></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt></block></then>
        <else pos:line="41" pos:column="9">else
            <block type="pseudo"><return pos:line="42" pos:column="13">return <expr><literal type="boolean" pos:line="42" pos:column="20">false<pos:position pos:line="42" pos:column="25"/></literal></expr>;<pos:position pos:line="42" pos:column="26"/></return></block></else></if>
        <break pos:line="43" pos:column="9">break;<pos:position pos:line="43" pos:column="15"/></break>

    <case pos:line="45" pos:column="5">case <expr><name pos:line="45" pos:column="10">succeed_n<pos:position pos:line="45" pos:column="19"/></name></expr>:<pos:position pos:line="45" pos:column="20"/></case>
        <comment type="block" pos:line="46" pos:column="9">/* Get to the number of times to succeed.  */</comment>
        <expr_stmt><expr><name pos:line="47" pos:column="9">p1<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">+=<pos:position pos:line="47" pos:column="14"/></operator> <literal type="number" pos:line="47" pos:column="15">2<pos:position pos:line="47" pos:column="16"/></literal></expr>;<pos:position pos:line="47" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="48" pos:column="32"/></name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">mcnt<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="39">p1<pos:position pos:line="48" pos:column="41"/></name></expr></argument>)<pos:position pos:line="48" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="43"/></expr_stmt>

        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">mcnt<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">==<pos:position pos:line="50" pos:column="20"/></operator> <literal type="number" pos:line="50" pos:column="21">0<pos:position pos:line="50" pos:column="22"/></literal></expr>)<pos:position pos:line="50" pos:column="23"/></condition><then pos:line="50" pos:column="23"> <block pos:line="50" pos:column="24">{
            <expr_stmt><expr><name pos:line="51" pos:column="13">p1<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">-=<pos:position pos:line="51" pos:column="18"/></operator> <literal type="number" pos:line="51" pos:column="19">4<pos:position pos:line="51" pos:column="20"/></literal></expr>;<pos:position pos:line="51" pos:column="21"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="52" pos:column="13">EXTRACT_NUMBER_AND_INCR<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name pos:line="52" pos:column="37">mcnt<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="43">p1<pos:position pos:line="52" pos:column="45"/></name></expr></argument>)<pos:position pos:line="52" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name pos:line="53" pos:column="13">p1<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">+=<pos:position pos:line="53" pos:column="18"/></operator> <name pos:line="53" pos:column="19">mcnt<pos:position pos:line="53" pos:column="23"/></name></expr>;<pos:position pos:line="53" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></then> <else pos:line="54" pos:column="11">else
            <block type="pseudo"><return pos:line="55" pos:column="13">return <expr><literal type="boolean" pos:line="55" pos:column="20">false<pos:position pos:line="55" pos:column="25"/></literal></expr>;<pos:position pos:line="55" pos:column="26"/></return></block></else></if>
        <break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break>

    <case pos:line="58" pos:column="5">case <expr><name pos:line="58" pos:column="10">duplicate<pos:position pos:line="58" pos:column="19"/></name></expr>:<pos:position pos:line="58" pos:column="20"/></case>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><operator pos:line="59" pos:column="13">!<pos:position pos:line="59" pos:column="14"/></operator><call><name pos:line="59" pos:column="14">REG_MATCH_NULL_STRING_P<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name><name pos:line="59" pos:column="38">reg_info<pos:position pos:line="59" pos:column="46"/></name><index pos:line="59" pos:column="46">[<expr><operator pos:line="59" pos:column="47">*<pos:position pos:line="59" pos:column="48"/></operator><name pos:line="59" pos:column="48">p1<pos:position pos:line="59" pos:column="50"/></name></expr>]<pos:position pos:line="59" pos:column="51"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="53"/></condition><then pos:line="59" pos:column="53">
            <block type="pseudo"><return pos:line="60" pos:column="13">return <expr><literal type="boolean" pos:line="60" pos:column="20">false<pos:position pos:line="60" pos:column="25"/></literal></expr>;<pos:position pos:line="60" pos:column="26"/></return></block></then></if>
        <break pos:line="61" pos:column="9">break;<pos:position pos:line="61" pos:column="15"/></break>

    <case pos:line="63" pos:column="5">case <expr><name pos:line="63" pos:column="10">set_number_at<pos:position pos:line="63" pos:column="23"/></name></expr>:<pos:position pos:line="63" pos:column="24"/></case>
        <expr_stmt><expr><name pos:line="64" pos:column="9">p1<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">+=<pos:position pos:line="64" pos:column="14"/></operator> <literal type="number" pos:line="64" pos:column="15">4<pos:position pos:line="64" pos:column="16"/></literal></expr>;<pos:position pos:line="64" pos:column="17"/></expr_stmt>

    <default pos:line="66" pos:column="5">default:<pos:position pos:line="66" pos:column="13"/></default>
        <comment type="block" pos:line="67" pos:column="9">/* All other opcodes mean we cannot match the empty string.  */</comment>
        <return pos:line="68" pos:column="9">return <expr><literal type="boolean" pos:line="68" pos:column="16">false<pos:position pos:line="68" pos:column="21"/></literal></expr>;<pos:position pos:line="68" pos:column="22"/></return>
    }<pos:position pos:line="69" pos:column="6"/></block></switch>

    <expr_stmt><expr><operator pos:line="71" pos:column="5">*<pos:position pos:line="71" pos:column="6"/></operator><name pos:line="71" pos:column="6">p<pos:position pos:line="71" pos:column="7"/></name> <operator pos:line="71" pos:column="8">=<pos:position pos:line="71" pos:column="9"/></operator> <name pos:line="71" pos:column="10">p1<pos:position pos:line="71" pos:column="12"/></name></expr>;<pos:position pos:line="71" pos:column="13"/></expr_stmt>
    <return pos:line="72" pos:column="5">return <expr><literal type="boolean" pos:line="72" pos:column="12">true<pos:position pos:line="72" pos:column="16"/></literal></expr>;<pos:position pos:line="72" pos:column="17"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
