<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1298_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">EventLoop<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">checkEngine<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">(<parameter><decl><type><name pos:line="2" pos:column="24">AsyncEngine<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type> <name pos:line="2" pos:column="38">engine<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">bool<pos:position pos:line="2" pos:column="50"/></name> <specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier></type> <name pos:line="2" pos:column="57">primary<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">requested_delay<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">primary<pos:position pos:line="6" pos:column="17"/></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="7" pos:column="9">requested_delay<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">=<pos:position pos:line="7" pos:column="26"/></operator> <call><name><name pos:line="7" pos:column="27">engine<pos:position pos:line="7" pos:column="33"/></name><operator pos:line="7" pos:column="33">-&gt;<pos:position pos:line="7" pos:column="38"/></operator><name pos:line="7" pos:column="35">checkEvents<pos:position pos:line="7" pos:column="46"/></name></name><argument_list pos:line="7" pos:column="46">(<argument><expr><literal type="number" pos:line="7" pos:column="47">0<pos:position pos:line="7" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="50"/></expr_stmt></block></then>
    <else pos:line="8" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="9" pos:column="9">requested_delay<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">=<pos:position pos:line="9" pos:column="26"/></operator> <call><name><name pos:line="9" pos:column="27">engine<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">-&gt;<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="35">checkEvents<pos:position pos:line="9" pos:column="46"/></name></name><argument_list pos:line="9" pos:column="46">(<argument><expr><name pos:line="9" pos:column="47">loop_delay<pos:position pos:line="9" pos:column="57"/></name></expr></argument>)<pos:position pos:line="9" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="59"/></expr_stmt></block></else></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">requested_delay<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">&lt;<pos:position pos:line="11" pos:column="29"/></operator> <literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr>)<pos:position pos:line="11" pos:column="29"/></condition><then pos:line="11" pos:column="29">
        <block type="pseudo"><switch pos:line="12" pos:column="9">switch <condition pos:line="12" pos:column="16">(<expr><name pos:line="12" pos:column="17">requested_delay<pos:position pos:line="12" pos:column="32"/></name></expr>)<pos:position pos:line="12" pos:column="33"/></condition> <block pos:line="12" pos:column="34">{

        <case pos:line="14" pos:column="9">case <expr><name><name pos:line="14" pos:column="14">AsyncEngine<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">::<pos:position pos:line="14" pos:column="27"/></operator><name pos:line="14" pos:column="27">EVENT_IDLE<pos:position pos:line="14" pos:column="37"/></name></name></expr>:<pos:position pos:line="14" pos:column="38"/></case>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">debugs<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="number" pos:line="15" pos:column="20">1<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="23">9<pos:position pos:line="15" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"Engine "<pos:position pos:line="15" pos:column="35"/></literal> <operator pos:line="15" pos:column="36">&lt;&lt;<pos:position pos:line="15" pos:column="44"/></operator> <name pos:line="15" pos:column="39">engine<pos:position pos:line="15" pos:column="45"/></name> <operator pos:line="15" pos:column="46">&lt;&lt;<pos:position pos:line="15" pos:column="54"/></operator> <literal type="string" pos:line="15" pos:column="49">" is idle."<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
            <break pos:line="16" pos:column="13">break;<pos:position pos:line="16" pos:column="19"/></break>

        <case pos:line="18" pos:column="9">case <expr><name><name pos:line="18" pos:column="14">AsyncEngine<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">::<pos:position pos:line="18" pos:column="27"/></operator><name pos:line="18" pos:column="27">EVENT_ERROR<pos:position pos:line="18" pos:column="38"/></name></name></expr>:<pos:position pos:line="18" pos:column="39"/></case>
            <expr_stmt><expr><name pos:line="19" pos:column="13">runOnceResult<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <literal type="boolean" pos:line="19" pos:column="29">false<pos:position pos:line="19" pos:column="34"/></literal></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name pos:line="20" pos:column="13">error<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">=<pos:position pos:line="20" pos:column="20"/></operator> <literal type="boolean" pos:line="20" pos:column="21">true<pos:position pos:line="20" pos:column="25"/></literal></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt>
            <break pos:line="21" pos:column="13">break;<pos:position pos:line="21" pos:column="19"/></break>

        <default pos:line="23" pos:column="9">default:<pos:position pos:line="23" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">fatal_dump<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><literal type="string" pos:line="24" pos:column="24">"unknown AsyncEngine result"<pos:position pos:line="24" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="25" pos:column="10"/></block></switch></block></then>
    <else pos:line="26" pos:column="5">else <block pos:line="26" pos:column="10">{
        <comment type="block" pos:line="27" pos:column="9">/* not idle or error */</comment>
        <expr_stmt><expr><name pos:line="28" pos:column="9">runOnceResult<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <literal type="boolean" pos:line="28" pos:column="25">false<pos:position pos:line="28" pos:column="30"/></literal></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>

        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">requested_delay<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">&lt;<pos:position pos:line="30" pos:column="33"/></operator> <name pos:line="30" pos:column="31">loop_delay<pos:position pos:line="30" pos:column="41"/></name></expr>)<pos:position pos:line="30" pos:column="42"/></condition><then pos:line="30" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="13">loop_delay<pos:position pos:line="31" pos:column="23"/></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">requested_delay<pos:position pos:line="31" pos:column="41"/></name></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
