<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6545_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ESIContext<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">fail<pos:position pos:line="2" pos:column="17"/></name></name> <parameter_list pos:line="2" pos:column="18">()<pos:position pos:line="2" pos:column="20"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">debugs<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="number" pos:line="4" pos:column="12">86<pos:position pos:line="4" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="16">5<pos:position pos:line="4" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="19">"ESIContext::fail: this="<pos:position pos:line="4" pos:column="44"/></literal> <operator pos:line="4" pos:column="45">&lt;&lt;<pos:position pos:line="4" pos:column="53"/></operator> <name pos:line="4" pos:column="48">this<pos:position pos:line="4" pos:column="52"/></name></expr></argument>)<pos:position pos:line="4" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="54"/></expr_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* check preconditions */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name> <argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">pos<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">==<pos:position pos:line="6" pos:column="19"/></operator> <literal type="number" pos:line="6" pos:column="20">0<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="23"/></expr_stmt>
    <comment type="block" pos:line="7" pos:column="5">/* cleanup current state */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">freeResources<pos:position pos:line="8" pos:column="18"/></name> <argument_list pos:line="8" pos:column="19">()<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>
    <comment type="block" pos:line="9" pos:column="5">/* Stop altering thisNode request */</comment>
    <expr_stmt><expr><name><name pos:line="10" pos:column="5">flags<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">.<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="11">oktosend<pos:position pos:line="10" pos:column="19"/></name></name> <operator pos:line="10" pos:column="20">=<pos:position pos:line="10" pos:column="21"/></operator> <literal type="number" pos:line="10" pos:column="22">1<pos:position pos:line="10" pos:column="23"/></literal></expr>;<pos:position pos:line="10" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">flags<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">.<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">finished<pos:position pos:line="11" pos:column="19"/></name></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <literal type="number" pos:line="11" pos:column="22">1<pos:position pos:line="11" pos:column="23"/></literal></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
    <comment type="block" pos:line="12" pos:column="5">/* don't honour range requests - for errors we send it all */</comment>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">flags<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">.<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">error<pos:position pos:line="13" pos:column="16"/></name></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <literal type="number" pos:line="13" pos:column="19">1<pos:position pos:line="13" pos:column="20"/></literal></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>
    <comment type="block" pos:line="14" pos:column="5">/* create an error object */</comment>
    <comment type="line" pos:line="15" pos:column="5">// XXX: with the in-direction on remote IP. does the http-&gt;getConn()-&gt;clientConnection exist?</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">ErrorState<pos:position pos:line="16" pos:column="15"/></name> <modifier pos:line="16" pos:column="16">*<pos:position pos:line="16" pos:column="17"/></modifier></type> <name pos:line="16" pos:column="18">err<pos:position pos:line="16" pos:column="21"/></name> <init pos:line="16" pos:column="22">= <expr><call><name pos:line="16" pos:column="24">clientBuildError<pos:position pos:line="16" pos:column="40"/></name><argument_list pos:line="16" pos:column="40">(<argument><expr><name pos:line="16" pos:column="41">errorpage<pos:position pos:line="16" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="52">errorstatus<pos:position pos:line="16" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="65">NULL<pos:position pos:line="16" pos:column="69"/></name></expr></argument>, <argument><expr><call><name><name pos:line="16" pos:column="71">http<pos:position pos:line="16" pos:column="75"/></name><operator pos:line="16" pos:column="75">-&gt;<pos:position pos:line="16" pos:column="80"/></operator><name pos:line="16" pos:column="77">getConn<pos:position pos:line="16" pos:column="84"/></name></name><argument_list pos:line="16" pos:column="84">()<pos:position pos:line="16" pos:column="86"/></argument_list></call><operator pos:line="16" pos:column="86">-&gt;<pos:position pos:line="16" pos:column="91"/></operator><name><name pos:line="16" pos:column="88">clientConnection<pos:position pos:line="16" pos:column="104"/></name><operator pos:line="16" pos:column="104">-&gt;<pos:position pos:line="16" pos:column="109"/></operator><name pos:line="16" pos:column="106">remote<pos:position pos:line="16" pos:column="112"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="114">http<pos:position pos:line="16" pos:column="118"/></name><operator pos:line="16" pos:column="118">-&gt;<pos:position pos:line="16" pos:column="123"/></operator><name pos:line="16" pos:column="120">request<pos:position pos:line="16" pos:column="127"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="128"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="129"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">err<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">-&gt;<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="10">err_msg<pos:position pos:line="17" pos:column="17"/></name></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <name pos:line="17" pos:column="20">errormessage<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">errormessage<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <name pos:line="18" pos:column="20">NULL<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">rep<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <call><name><name pos:line="19" pos:column="11">err<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">-&gt;<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="16">BuildHttpReply<pos:position pos:line="19" pos:column="30"/></name></name><argument_list pos:line="19" pos:column="30">()<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">assert<pos:position pos:line="20" pos:column="11"/></name> <argument_list pos:line="20" pos:column="12">(<argument><expr><call><name><name pos:line="20" pos:column="13">rep<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">body<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">.<pos:position pos:line="20" pos:column="23"/></operator><name pos:line="20" pos:column="23">hasContent<pos:position pos:line="20" pos:column="33"/></name></name><argument_list pos:line="20" pos:column="33">()<pos:position pos:line="20" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">size_t<pos:position pos:line="21" pos:column="11"/></name></type> <name pos:line="21" pos:column="12">errorprogress<pos:position pos:line="21" pos:column="25"/></name> <init pos:line="21" pos:column="26">= <expr><call><name><name pos:line="21" pos:column="28">rep<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">body<pos:position pos:line="21" pos:column="37"/></name><operator pos:line="21" pos:column="37">.<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="38">contentSize<pos:position pos:line="21" pos:column="49"/></name></name><argument_list pos:line="21" pos:column="49">()<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="52"/></decl_stmt>
    <comment type="block" pos:line="22" pos:column="5">/* Tell esiSend where to start sending from */</comment>
    <expr_stmt><expr><name pos:line="23" pos:column="5">outbound_offset<pos:position pos:line="23" pos:column="20"/></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <literal type="number" pos:line="23" pos:column="23">0<pos:position pos:line="23" pos:column="24"/></literal></expr>;<pos:position pos:line="23" pos:column="25"/></expr_stmt>
    <comment type="block" pos:line="24" pos:column="5">/* copy the membuf from the reply to outbound */</comment>

    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><name pos:line="26" pos:column="12">errorprogress<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">&lt;<pos:position pos:line="26" pos:column="30"/></operator> <operator pos:line="26" pos:column="28">(<pos:position pos:line="26" pos:column="29"/></operator><name pos:line="26" pos:column="29">size_t<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">)<pos:position pos:line="26" pos:column="36"/></operator><call><name><name pos:line="26" pos:column="36">rep<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">-&gt;<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="41">body<pos:position pos:line="26" pos:column="45"/></name><operator pos:line="26" pos:column="45">.<pos:position pos:line="26" pos:column="46"/></operator><name pos:line="26" pos:column="46">contentSize<pos:position pos:line="26" pos:column="57"/></name></name><argument_list pos:line="26" pos:column="57">()<pos:position pos:line="26" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="60"/></condition> <block pos:line="26" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">appendOutboundData<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><operator pos:line="27" pos:column="28">new<pos:position pos:line="27" pos:column="31"/></operator> <name pos:line="27" pos:column="32">ESISegment<pos:position pos:line="27" pos:column="42"/></name></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">errorprogress<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">+=<pos:position pos:line="28" pos:column="25"/></operator> <call><name><name pos:line="28" pos:column="26">outboundtail<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">-&gt;<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="40">append<pos:position pos:line="28" pos:column="46"/></name></name><argument_list pos:line="28" pos:column="46">(<argument><expr><call><name><name pos:line="28" pos:column="47">rep<pos:position pos:line="28" pos:column="50"/></name><operator pos:line="28" pos:column="50">-&gt;<pos:position pos:line="28" pos:column="55"/></operator><name pos:line="28" pos:column="52">body<pos:position pos:line="28" pos:column="56"/></name><operator pos:line="28" pos:column="56">.<pos:position pos:line="28" pos:column="57"/></operator><name pos:line="28" pos:column="57">content<pos:position pos:line="28" pos:column="64"/></name></name><argument_list pos:line="28" pos:column="64">()<pos:position pos:line="28" pos:column="66"/></argument_list></call> <operator pos:line="28" pos:column="67">+<pos:position pos:line="28" pos:column="68"/></operator> <name pos:line="28" pos:column="69">errorprogress<pos:position pos:line="28" pos:column="82"/></name></expr></argument>, <argument><expr><call><name><name pos:line="28" pos:column="84">rep<pos:position pos:line="28" pos:column="87"/></name><operator pos:line="28" pos:column="87">-&gt;<pos:position pos:line="28" pos:column="92"/></operator><name pos:line="28" pos:column="89">body<pos:position pos:line="28" pos:column="93"/></name><operator pos:line="28" pos:column="93">.<pos:position pos:line="28" pos:column="94"/></operator><name pos:line="28" pos:column="94">contentSize<pos:position pos:line="28" pos:column="105"/></name></name><argument_list pos:line="28" pos:column="105">()<pos:position pos:line="28" pos:column="107"/></argument_list></call> <operator pos:line="28" pos:column="108">-<pos:position pos:line="28" pos:column="109"/></operator> <name pos:line="28" pos:column="110">errorprogress<pos:position pos:line="28" pos:column="123"/></name></expr></argument>)<pos:position pos:line="28" pos:column="124"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="125"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></while>

    <comment type="block" pos:line="31" pos:column="5">/* the esiCode now thinks that the error is the outbound,
     * and all processing has finished. */</comment>
    <comment type="block" pos:line="33" pos:column="5">/* Send as much as we can */</comment>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">send<pos:position pos:line="34" pos:column="9"/></name> <argument_list pos:line="34" pos:column="10">()<pos:position pos:line="34" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="13"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* don't cancel anything. The stream nodes will clean up after
     * themselves when the reply is freed - and we don't know what to
     * clean anyway.
     */</comment>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
