<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_533_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Transients<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">startWriting<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">StoreEntry<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">e<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">RequestFlags<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">&amp;<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="61">reqFlags<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
                         <parameter><decl><type><specifier pos:line="3" pos:column="26">const<pos:position pos:line="3" pos:column="31"/></specifier> <name pos:line="3" pos:column="32">HttpRequestMethod<pos:position pos:line="3" pos:column="49"/></name> <modifier pos:line="3" pos:column="50">&amp;<pos:position pos:line="3" pos:column="55"/></modifier></type><name pos:line="3" pos:column="51">reqMethod<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="61"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">assert<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><name pos:line="5" pos:column="12">e<pos:position pos:line="5" pos:column="13"/></name></expr></argument>)<pos:position pos:line="5" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><name><name pos:line="6" pos:column="12">e<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">mem_obj<pos:position pos:line="6" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">assert<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name><name pos:line="7" pos:column="12">e<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">-&gt;<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="15">mem_obj<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">-&gt;<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="24">xitTable<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">.<pos:position pos:line="7" pos:column="33"/></operator><name pos:line="7" pos:column="33">index<pos:position pos:line="7" pos:column="38"/></name></name> <operator pos:line="7" pos:column="39">&lt;<pos:position pos:line="7" pos:column="43"/></operator> <literal type="number" pos:line="7" pos:column="41">0<pos:position pos:line="7" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">map<pos:position pos:line="9" pos:column="13"/></name></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14"> <block pos:line="9" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">debugs<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><literal type="number" pos:line="10" pos:column="16">20<pos:position pos:line="10" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="20">5<pos:position pos:line="10" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="23">"No map to add "<pos:position pos:line="10" pos:column="39"/></literal> <operator pos:line="10" pos:column="40">&lt;&lt;<pos:position pos:line="10" pos:column="48"/></operator> <operator pos:line="10" pos:column="43">*<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="44">e<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>
        <return pos:line="11" pos:column="9">return;<pos:position pos:line="11" pos:column="16"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">sfileno<pos:position pos:line="14" pos:column="12"/></name></type> <name pos:line="14" pos:column="13">index<pos:position pos:line="14" pos:column="18"/></name> <init pos:line="14" pos:column="19">= <expr><literal type="number" pos:line="14" pos:column="21">0<pos:position pos:line="14" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="15" pos:column="5">Ipc<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">::<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">StoreMapAnchor<pos:position pos:line="15" pos:column="24"/></name></name> <modifier pos:line="15" pos:column="25">*<pos:position pos:line="15" pos:column="26"/></modifier></type><name pos:line="15" pos:column="26">slot<pos:position pos:line="15" pos:column="30"/></name> <init pos:line="15" pos:column="31">= <expr><call><name><name pos:line="15" pos:column="33">map<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">openForWriting<pos:position pos:line="15" pos:column="52"/></name></name><argument_list pos:line="15" pos:column="52">(<argument><expr><cast type="reinterpret" pos:line="15" pos:column="53">reinterpret_cast<argument_list type="generic" pos:line="15" pos:column="69">&lt;<argument><expr><specifier pos:line="15" pos:column="70">const<pos:position pos:line="15" pos:column="75"/></specifier> <name pos:line="15" pos:column="76">cache_key<pos:position pos:line="15" pos:column="85"/></name> <operator pos:line="15" pos:column="86">*<pos:position pos:line="15" pos:column="87"/></operator></expr></argument>&gt;<pos:position pos:line="15" pos:column="91"/></argument_list><argument_list pos:line="15" pos:column="88">(<argument><expr><name><name pos:line="15" pos:column="89">e<pos:position pos:line="15" pos:column="90"/></name><operator pos:line="15" pos:column="90">-&gt;<pos:position pos:line="15" pos:column="95"/></operator><name pos:line="15" pos:column="92">key<pos:position pos:line="15" pos:column="95"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="96"/></argument_list></cast></expr></argument>, <argument><expr><name pos:line="15" pos:column="98">index<pos:position pos:line="15" pos:column="103"/></name></expr></argument>)<pos:position pos:line="15" pos:column="104"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="105"/></decl_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">!<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">slot<pos:position pos:line="16" pos:column="14"/></name></expr>)<pos:position pos:line="16" pos:column="15"/></condition><then pos:line="16" pos:column="15"> <block pos:line="16" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">debugs<pos:position pos:line="17" pos:column="15"/></name><argument_list pos:line="17" pos:column="15">(<argument><expr><literal type="number" pos:line="17" pos:column="16">20<pos:position pos:line="17" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="20">5<pos:position pos:line="17" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="23">"collision registering "<pos:position pos:line="17" pos:column="47"/></literal> <operator pos:line="17" pos:column="48">&lt;&lt;<pos:position pos:line="17" pos:column="56"/></operator> <operator pos:line="17" pos:column="51">*<pos:position pos:line="17" pos:column="52"/></operator><name pos:line="17" pos:column="52">e<pos:position pos:line="17" pos:column="53"/></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="55"/></expr_stmt>
        <return pos:line="18" pos:column="9">return;<pos:position pos:line="18" pos:column="16"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <try pos:line="21" pos:column="5">try <block pos:line="21" pos:column="9">{
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">copyToShm<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><operator pos:line="22" pos:column="23">*<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">e<pos:position pos:line="22" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="27">index<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">reqFlags<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="44">reqMethod<pos:position pos:line="22" pos:column="53"/></name></expr></argument>)<pos:position pos:line="22" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="55"/></condition><then pos:line="22" pos:column="55"> <block pos:line="22" pos:column="56">{
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">slot<pos:position pos:line="23" pos:column="17"/></name><operator pos:line="23" pos:column="17">-&gt;<pos:position pos:line="23" pos:column="22"/></operator><name pos:line="23" pos:column="19">set<pos:position pos:line="23" pos:column="22"/></name></name><argument_list pos:line="23" pos:column="22">(<argument><expr><operator pos:line="23" pos:column="23">*<pos:position pos:line="23" pos:column="24"/></operator><name pos:line="23" pos:column="24">e<pos:position pos:line="23" pos:column="25"/></name></expr></argument>)<pos:position pos:line="23" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="24" pos:column="13">e<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">-&gt;<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="16">mem_obj<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">xitTable<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">.<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="34">io<pos:position pos:line="24" pos:column="36"/></name></name> <operator pos:line="24" pos:column="37">=<pos:position pos:line="24" pos:column="38"/></operator> <name><name pos:line="24" pos:column="39">MemObject<pos:position pos:line="24" pos:column="48"/></name><operator pos:line="24" pos:column="48">::<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="50">ioWriting<pos:position pos:line="24" pos:column="59"/></name></name></expr>;<pos:position pos:line="24" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="25" pos:column="13">e<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">mem_obj<pos:position pos:line="25" pos:column="23"/></name><operator pos:line="25" pos:column="23">-&gt;<pos:position pos:line="25" pos:column="28"/></operator><name pos:line="25" pos:column="25">xitTable<pos:position pos:line="25" pos:column="33"/></name><operator pos:line="25" pos:column="33">.<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="34">index<pos:position pos:line="25" pos:column="39"/></name></name> <operator pos:line="25" pos:column="40">=<pos:position pos:line="25" pos:column="41"/></operator> <name pos:line="25" pos:column="42">index<pos:position pos:line="25" pos:column="47"/></name></expr>;<pos:position pos:line="25" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="26" pos:column="13">map<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">startAppending<pos:position pos:line="26" pos:column="32"/></name></name><argument_list pos:line="26" pos:column="32">(<argument><expr><name pos:line="26" pos:column="33">index<pos:position pos:line="26" pos:column="38"/></name></expr></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="40"/></expr_stmt>
            <comment type="line" pos:line="27" pos:column="13">// keep write lock -- we will be supplying others with updates</comment>
            <return pos:line="28" pos:column="13">return;<pos:position pos:line="28" pos:column="20"/></return>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
        <comment type="line" pos:line="30" pos:column="9">// fall through to the error handling code</comment>
    }<pos:position pos:line="31" pos:column="6"/></block> <catch pos:line="31" pos:column="7">catch <parameter_list pos:line="31" pos:column="13">(<parameter><decl><type><specifier pos:line="31" pos:column="14">const<pos:position pos:line="31" pos:column="19"/></specifier> <name><name pos:line="31" pos:column="20">std<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">::<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="25">exception<pos:position pos:line="31" pos:column="34"/></name></name> <modifier pos:line="31" pos:column="35">&amp;<pos:position pos:line="31" pos:column="40"/></modifier></type><name pos:line="31" pos:column="36">x<pos:position pos:line="31" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="31" pos:column="38"/></parameter_list> <block pos:line="31" pos:column="39">{ <comment type="line" pos:line="31" pos:column="41">// TODO: should we catch ... as well?</comment>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">debugs<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="number" pos:line="32" pos:column="16">20<pos:position pos:line="32" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="20">2<pos:position pos:line="32" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"error keeping entry "<pos:position pos:line="32" pos:column="45"/></literal> <operator pos:line="32" pos:column="46">&lt;&lt;<pos:position pos:line="32" pos:column="54"/></operator> <name pos:line="32" pos:column="49">index<pos:position pos:line="32" pos:column="54"/></name> <operator pos:line="32" pos:column="55">&lt;&lt;<pos:position pos:line="32" pos:column="63"/></operator>
               <literal type="char" pos:line="33" pos:column="16">' '<pos:position pos:line="33" pos:column="19"/></literal> <operator pos:line="33" pos:column="20">&lt;&lt;<pos:position pos:line="33" pos:column="28"/></operator> <operator pos:line="33" pos:column="23">*<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">e<pos:position pos:line="33" pos:column="25"/></name> <operator pos:line="33" pos:column="26">&lt;&lt;<pos:position pos:line="33" pos:column="34"/></operator> <literal type="string" pos:line="33" pos:column="29">": "<pos:position pos:line="33" pos:column="33"/></literal> <operator pos:line="33" pos:column="34">&lt;&lt;<pos:position pos:line="33" pos:column="42"/></operator> <call><name><name pos:line="33" pos:column="37">x<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">.<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="39">what<pos:position pos:line="33" pos:column="43"/></name></name><argument_list pos:line="33" pos:column="43">()<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>
        <comment type="line" pos:line="34" pos:column="9">// fall through to the error handling code</comment>
    }<pos:position pos:line="35" pos:column="6"/></block></catch></try>

    <expr_stmt><expr><call><name><name pos:line="37" pos:column="5">map<pos:position pos:line="37" pos:column="8"/></name><operator pos:line="37" pos:column="8">-&gt;<pos:position pos:line="37" pos:column="13"/></operator><name pos:line="37" pos:column="10">abortWriting<pos:position pos:line="37" pos:column="22"/></name></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">index<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
