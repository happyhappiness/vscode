<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3741_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ip<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Address<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">GetAddrInfo<pos:position pos:line="2" pos:column="25"/></name></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name><name pos:line="2" pos:column="26">struct<pos:position pos:line="2" pos:column="32"/></name> <name pos:line="2" pos:column="33">addrinfo<pos:position pos:line="2" pos:column="41"/></name></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier><modifier pos:line="2" pos:column="43">&amp;<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="44">dst<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">force<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="59"/></parameter_list> <specifier pos:line="2" pos:column="60">const<pos:position pos:line="2" pos:column="65"/></specifier>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">dst<pos:position pos:line="4" pos:column="12"/></name> <operator pos:line="4" pos:column="13">==<pos:position pos:line="4" pos:column="15"/></operator> <name pos:line="4" pos:column="16">NULL<pos:position pos:line="4" pos:column="20"/></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21"> <block pos:line="4" pos:column="22">{
        <expr_stmt><expr><name pos:line="5" pos:column="9">dst<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <operator pos:line="5" pos:column="15">new<pos:position pos:line="5" pos:column="18"/></operator> <name pos:line="5" pos:column="19">addrinfo<pos:position pos:line="5" pos:column="27"/></name></expr>;<pos:position pos:line="5" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="6" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">memset<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">dst<pos:position pos:line="8" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="17">0<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="20">sizeof<argument_list pos:line="8" pos:column="26">(<argument><expr pos:line="8" pos:column="27">struct <name pos:line="8" pos:column="34">addrinfo<pos:position pos:line="8" pos:column="42"/></name></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="45"/></expr_stmt>

    <comment type="line" pos:line="10" pos:column="5">// set defaults</comment>
    <comment type="line" pos:line="11" pos:column="5">// Mac OS X does not emit a flag indicating the output is numeric (IP address)</comment>
<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><name pos:line="12" pos:column="5">_SQUID_APPLE_<pos:position pos:line="12" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">dst<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">-&gt;<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="10">ai_flags<pos:position pos:line="13" pos:column="18"/></name></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="21">0<pos:position pos:line="13" pos:column="22"/></literal></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
<cpp:else pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">else<pos:position pos:line="14" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">dst<pos:position pos:line="15" pos:column="8"/></name><operator pos:line="15" pos:column="8">-&gt;<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="10">ai_flags<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">AI_NUMERICHOST<pos:position pos:line="15" pos:column="35"/></name></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">dst<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">ai_socktype<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">==<pos:position pos:line="18" pos:column="28"/></operator> <literal type="number" pos:line="18" pos:column="29">0<pos:position pos:line="18" pos:column="30"/></literal></expr>)<pos:position pos:line="18" pos:column="31"/></condition><then pos:line="18" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="19" pos:column="9">dst<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">ai_socktype<pos:position pos:line="19" pos:column="25"/></name></name> <operator pos:line="19" pos:column="26">=<pos:position pos:line="19" pos:column="27"/></operator> <name pos:line="19" pos:column="28">SOCK_STREAM<pos:position pos:line="19" pos:column="39"/></name></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">dst<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">ai_socktype<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">==<pos:position pos:line="21" pos:column="28"/></operator> <name pos:line="21" pos:column="29">SOCK_STREAM<pos:position pos:line="21" pos:column="40"/></name> <comment type="line" pos:line="21" pos:column="41">// implies TCP</comment>
            <operator pos:line="22" pos:column="13">&amp;&amp;<pos:position pos:line="22" pos:column="23"/></operator> <name><name pos:line="22" pos:column="16">dst<pos:position pos:line="22" pos:column="19"/></name><operator pos:line="22" pos:column="19">-&gt;<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="21">ai_protocol<pos:position pos:line="22" pos:column="32"/></name></name> <operator pos:line="22" pos:column="33">==<pos:position pos:line="22" pos:column="35"/></operator> <literal type="number" pos:line="22" pos:column="36">0<pos:position pos:line="22" pos:column="37"/></literal></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="23" pos:column="9">dst<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">ai_protocol<pos:position pos:line="23" pos:column="25"/></name></name> <operator pos:line="23" pos:column="26">=<pos:position pos:line="23" pos:column="27"/></operator> <name pos:line="23" pos:column="28">IPPROTO_TCP<pos:position pos:line="23" pos:column="39"/></name></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name><name pos:line="25" pos:column="9">dst<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">ai_socktype<pos:position pos:line="25" pos:column="25"/></name></name> <operator pos:line="25" pos:column="26">==<pos:position pos:line="25" pos:column="28"/></operator> <name pos:line="25" pos:column="29">SOCK_DGRAM<pos:position pos:line="25" pos:column="39"/></name> <comment type="line" pos:line="25" pos:column="40">// implies UDP</comment>
            <operator pos:line="26" pos:column="13">&amp;&amp;<pos:position pos:line="26" pos:column="23"/></operator> <name><name pos:line="26" pos:column="16">dst<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">-&gt;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="21">ai_protocol<pos:position pos:line="26" pos:column="32"/></name></name> <operator pos:line="26" pos:column="33">==<pos:position pos:line="26" pos:column="35"/></operator> <literal type="number" pos:line="26" pos:column="36">0<pos:position pos:line="26" pos:column="37"/></literal></expr>)<pos:position pos:line="26" pos:column="38"/></condition><then pos:line="26" pos:column="38">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="27" pos:column="9">dst<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">ai_protocol<pos:position pos:line="27" pos:column="25"/></name></name> <operator pos:line="27" pos:column="26">=<pos:position pos:line="27" pos:column="27"/></operator> <name pos:line="27" pos:column="28">IPPROTO_UDP<pos:position pos:line="27" pos:column="39"/></name></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">force<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">==<pos:position pos:line="29" pos:column="17"/></operator> <name pos:line="29" pos:column="18">AF_INET6<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">||<pos:position pos:line="29" pos:column="29"/></operator> <operator pos:line="29" pos:column="30">(<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="31">force<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">==<pos:position pos:line="29" pos:column="39"/></operator> <name pos:line="29" pos:column="40">AF_UNSPEC<pos:position pos:line="29" pos:column="49"/></name> <operator pos:line="29" pos:column="50">&amp;&amp;<pos:position pos:line="29" pos:column="60"/></operator> <name><name pos:line="29" pos:column="53">Ip<pos:position pos:line="29" pos:column="55"/></name><operator pos:line="29" pos:column="55">::<pos:position pos:line="29" pos:column="57"/></operator><name pos:line="29" pos:column="57">EnableIpv6<pos:position pos:line="29" pos:column="67"/></name></name> <operator pos:line="29" pos:column="68">&amp;&amp;<pos:position pos:line="29" pos:column="78"/></operator> <call><name pos:line="29" pos:column="71">IsIPv6<pos:position pos:line="29" pos:column="77"/></name><argument_list pos:line="29" pos:column="77">()<pos:position pos:line="29" pos:column="79"/></argument_list></call><operator pos:line="29" pos:column="79">)<pos:position pos:line="29" pos:column="80"/></operator></expr> )<pos:position pos:line="29" pos:column="82"/></condition><then pos:line="29" pos:column="82"> <block pos:line="29" pos:column="83">{
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">dst<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">ai_addr<pos:position pos:line="30" pos:column="21"/></name></name> <operator pos:line="30" pos:column="22">=<pos:position pos:line="30" pos:column="23"/></operator> <operator pos:line="30" pos:column="24">(<pos:position pos:line="30" pos:column="25"/></operator>struct <name pos:line="30" pos:column="32">sockaddr<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">*<pos:position pos:line="30" pos:column="41"/></operator><operator pos:line="30" pos:column="41">)<pos:position pos:line="30" pos:column="42"/></operator><operator pos:line="30" pos:column="42">new<pos:position pos:line="30" pos:column="45"/></operator> <name pos:line="30" pos:column="46">sockaddr_in6<pos:position pos:line="30" pos:column="58"/></name></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="32" pos:column="9">memset<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name><name pos:line="32" pos:column="16">dst<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">ai_addr<pos:position pos:line="32" pos:column="28"/></name></name></expr></argument>,<argument><expr><literal type="number" pos:line="32" pos:column="29">0<pos:position pos:line="32" pos:column="30"/></literal></expr></argument>,<argument><expr><sizeof pos:line="32" pos:column="31">sizeof<argument_list pos:line="32" pos:column="37">(<argument><expr pos:line="32" pos:column="38">struct <name pos:line="32" pos:column="45">sockaddr_in6<pos:position pos:line="32" pos:column="57"/></name></expr></argument>)<pos:position pos:line="32" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="60"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="34" pos:column="9">GetSockAddr<pos:position pos:line="34" pos:column="20"/></name><argument_list pos:line="34" pos:column="20">(<argument><expr><operator pos:line="34" pos:column="21">*<pos:position pos:line="34" pos:column="22"/></operator><operator pos:line="34" pos:column="22">(<pos:position pos:line="34" pos:column="23"/></operator><operator pos:line="34" pos:column="23">(<pos:position pos:line="34" pos:column="24"/></operator>struct <name pos:line="34" pos:column="31">sockaddr_in6<pos:position pos:line="34" pos:column="43"/></name><operator pos:line="34" pos:column="43">*<pos:position pos:line="34" pos:column="44"/></operator><operator pos:line="34" pos:column="44">)<pos:position pos:line="34" pos:column="45"/></operator><name><name pos:line="34" pos:column="45">dst<pos:position pos:line="34" pos:column="48"/></name><operator pos:line="34" pos:column="48">-&gt;<pos:position pos:line="34" pos:column="53"/></operator><name pos:line="34" pos:column="50">ai_addr<pos:position pos:line="34" pos:column="57"/></name></name><operator pos:line="34" pos:column="57">)<pos:position pos:line="34" pos:column="58"/></operator></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="36" pos:column="9">dst<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">-&gt;<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="14">ai_addrlen<pos:position pos:line="36" pos:column="24"/></name></name> <operator pos:line="36" pos:column="25">=<pos:position pos:line="36" pos:column="26"/></operator> <sizeof pos:line="36" pos:column="27">sizeof<argument_list pos:line="36" pos:column="33">(<argument><expr pos:line="36" pos:column="34">struct <name pos:line="36" pos:column="41">sockaddr_in6<pos:position pos:line="36" pos:column="53"/></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></sizeof></expr>;<pos:position pos:line="36" pos:column="55"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="38" pos:column="9">dst<pos:position pos:line="38" pos:column="12"/></name><operator pos:line="38" pos:column="12">-&gt;<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="14">ai_family<pos:position pos:line="38" pos:column="23"/></name></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <operator pos:line="38" pos:column="26">(<pos:position pos:line="38" pos:column="27"/></operator><operator pos:line="38" pos:column="27">(<pos:position pos:line="38" pos:column="28"/></operator>struct <name pos:line="38" pos:column="35">sockaddr_in6<pos:position pos:line="38" pos:column="47"/></name><operator pos:line="38" pos:column="47">*<pos:position pos:line="38" pos:column="48"/></operator><operator pos:line="38" pos:column="48">)<pos:position pos:line="38" pos:column="49"/></operator><name><name pos:line="38" pos:column="49">dst<pos:position pos:line="38" pos:column="52"/></name><operator pos:line="38" pos:column="52">-&gt;<pos:position pos:line="38" pos:column="57"/></operator><name pos:line="38" pos:column="54">ai_addr<pos:position pos:line="38" pos:column="61"/></name></name><operator pos:line="38" pos:column="61">)<pos:position pos:line="38" pos:column="62"/></operator><operator pos:line="38" pos:column="62">-&gt;<pos:position pos:line="38" pos:column="67"/></operator><name pos:line="38" pos:column="64">sin6_family<pos:position pos:line="38" pos:column="75"/></name></expr>;<pos:position pos:line="38" pos:column="76"/></expr_stmt>

<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="40" pos:column="5">0<pos:position pos:line="40" pos:column="6"/></literal></expr></cpp:if>
        <comment type="block" format="doxygen" pos:line="41" pos:column="9">/**
         * Enable only if you must and please report to squid-dev if you find a need for this.
         *
         * Vista may need this to cope with dual-stack (unsetting IP6_V6ONLY).
         *         http://msdn.microsoft.com/en-us/library/ms738574(VS.85).aspx
         * Linux appears to only do some things when its present.
         *         (93) Bad Protocol
         * FreeBSD dies horribly when using dual-stack with it set.
         *         (43) Protocol not supported
         */</comment>
        dst-&gt;ai_protocol = IPPROTO_IPV6;
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>

    }<pos:position pos:line="54" pos:column="6"/></block></then> <elseif pos:line="54" pos:column="7">else <if pos:line="54" pos:column="12">if <condition pos:line="54" pos:column="15">( <expr><name pos:line="54" pos:column="17">force<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">==<pos:position pos:line="54" pos:column="25"/></operator> <name pos:line="54" pos:column="26">AF_INET<pos:position pos:line="54" pos:column="33"/></name> <operator pos:line="54" pos:column="34">||<pos:position pos:line="54" pos:column="36"/></operator> <operator pos:line="54" pos:column="37">(<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="38">force<pos:position pos:line="54" pos:column="43"/></name> <operator pos:line="54" pos:column="44">==<pos:position pos:line="54" pos:column="46"/></operator> <name pos:line="54" pos:column="47">AF_UNSPEC<pos:position pos:line="54" pos:column="56"/></name> <operator pos:line="54" pos:column="57">&amp;&amp;<pos:position pos:line="54" pos:column="67"/></operator> <call><name pos:line="54" pos:column="60">IsIPv4<pos:position pos:line="54" pos:column="66"/></name><argument_list pos:line="54" pos:column="66">()<pos:position pos:line="54" pos:column="68"/></argument_list></call><operator pos:line="54" pos:column="68">)<pos:position pos:line="54" pos:column="69"/></operator></expr> )<pos:position pos:line="54" pos:column="71"/></condition><then pos:line="54" pos:column="71"> <block pos:line="54" pos:column="72">{

        <expr_stmt><expr><name><name pos:line="56" pos:column="9">dst<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">-&gt;<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="14">ai_addr<pos:position pos:line="56" pos:column="21"/></name></name> <operator pos:line="56" pos:column="22">=<pos:position pos:line="56" pos:column="23"/></operator> <operator pos:line="56" pos:column="24">(<pos:position pos:line="56" pos:column="25"/></operator>struct <name pos:line="56" pos:column="32">sockaddr<pos:position pos:line="56" pos:column="40"/></name><operator pos:line="56" pos:column="40">*<pos:position pos:line="56" pos:column="41"/></operator><operator pos:line="56" pos:column="41">)<pos:position pos:line="56" pos:column="42"/></operator><operator pos:line="56" pos:column="42">new<pos:position pos:line="56" pos:column="45"/></operator> <name pos:line="56" pos:column="46">sockaddr_in<pos:position pos:line="56" pos:column="57"/></name></expr>;<pos:position pos:line="56" pos:column="58"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="58" pos:column="9">memset<pos:position pos:line="58" pos:column="15"/></name><argument_list pos:line="58" pos:column="15">(<argument><expr><name><name pos:line="58" pos:column="16">dst<pos:position pos:line="58" pos:column="19"/></name><operator pos:line="58" pos:column="19">-&gt;<pos:position pos:line="58" pos:column="24"/></operator><name pos:line="58" pos:column="21">ai_addr<pos:position pos:line="58" pos:column="28"/></name></name></expr></argument>,<argument><expr><literal type="number" pos:line="58" pos:column="29">0<pos:position pos:line="58" pos:column="30"/></literal></expr></argument>,<argument><expr><sizeof pos:line="58" pos:column="31">sizeof<argument_list pos:line="58" pos:column="37">(<argument><expr pos:line="58" pos:column="38">struct <name pos:line="58" pos:column="45">sockaddr_in<pos:position pos:line="58" pos:column="56"/></name></expr></argument>)<pos:position pos:line="58" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="58" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="59"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="60" pos:column="9">GetSockAddr<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><operator pos:line="60" pos:column="21">*<pos:position pos:line="60" pos:column="22"/></operator><operator pos:line="60" pos:column="22">(<pos:position pos:line="60" pos:column="23"/></operator><operator pos:line="60" pos:column="23">(<pos:position pos:line="60" pos:column="24"/></operator>struct <name pos:line="60" pos:column="31">sockaddr_in<pos:position pos:line="60" pos:column="42"/></name><operator pos:line="60" pos:column="42">*<pos:position pos:line="60" pos:column="43"/></operator><operator pos:line="60" pos:column="43">)<pos:position pos:line="60" pos:column="44"/></operator><name><name pos:line="60" pos:column="44">dst<pos:position pos:line="60" pos:column="47"/></name><operator pos:line="60" pos:column="47">-&gt;<pos:position pos:line="60" pos:column="52"/></operator><name pos:line="60" pos:column="49">ai_addr<pos:position pos:line="60" pos:column="56"/></name></name><operator pos:line="60" pos:column="56">)<pos:position pos:line="60" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="60" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="59"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="62" pos:column="9">dst<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">-&gt;<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="14">ai_addrlen<pos:position pos:line="62" pos:column="24"/></name></name> <operator pos:line="62" pos:column="25">=<pos:position pos:line="62" pos:column="26"/></operator> <sizeof pos:line="62" pos:column="27">sizeof<argument_list pos:line="62" pos:column="33">(<argument><expr pos:line="62" pos:column="34">struct <name pos:line="62" pos:column="41">sockaddr_in<pos:position pos:line="62" pos:column="52"/></name></expr></argument>)<pos:position pos:line="62" pos:column="53"/></argument_list></sizeof></expr>;<pos:position pos:line="62" pos:column="54"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="64" pos:column="9">dst<pos:position pos:line="64" pos:column="12"/></name><operator pos:line="64" pos:column="12">-&gt;<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="14">ai_family<pos:position pos:line="64" pos:column="23"/></name></name> <operator pos:line="64" pos:column="24">=<pos:position pos:line="64" pos:column="25"/></operator> <operator pos:line="64" pos:column="26">(<pos:position pos:line="64" pos:column="27"/></operator><operator pos:line="64" pos:column="27">(<pos:position pos:line="64" pos:column="28"/></operator>struct <name pos:line="64" pos:column="35">sockaddr_in<pos:position pos:line="64" pos:column="46"/></name><operator pos:line="64" pos:column="46">*<pos:position pos:line="64" pos:column="47"/></operator><operator pos:line="64" pos:column="47">)<pos:position pos:line="64" pos:column="48"/></operator><name><name pos:line="64" pos:column="48">dst<pos:position pos:line="64" pos:column="51"/></name><operator pos:line="64" pos:column="51">-&gt;<pos:position pos:line="64" pos:column="56"/></operator><name pos:line="64" pos:column="53">ai_addr<pos:position pos:line="64" pos:column="60"/></name></name><operator pos:line="64" pos:column="60">)<pos:position pos:line="64" pos:column="61"/></operator><operator pos:line="64" pos:column="61">-&gt;<pos:position pos:line="64" pos:column="66"/></operator><name pos:line="64" pos:column="63">sin_family<pos:position pos:line="64" pos:column="73"/></name></expr>;<pos:position pos:line="64" pos:column="74"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if></elseif> <else pos:line="65" pos:column="7">else <block pos:line="65" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">IASSERT<pos:position pos:line="66" pos:column="16"/></name><argument_list pos:line="66" pos:column="16">(<argument><expr><literal type="string" pos:line="66" pos:column="17">"false"<pos:position pos:line="66" pos:column="24"/></literal></expr></argument>,<argument><expr><literal type="boolean" pos:line="66" pos:column="25">false<pos:position pos:line="66" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></else></if>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
