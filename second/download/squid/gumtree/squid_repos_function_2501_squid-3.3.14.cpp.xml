<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2501_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">FtpStateData<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">listingFinish<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">()<pos:position pos:line="2" pos:column="30"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// TODO: figure out what this means and how to show it ...</comment>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">flags<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">.<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">listformat_unknown<pos:position pos:line="6" pos:column="33"/></name></name> <operator pos:line="6" pos:column="34">&amp;&amp;<pos:position pos:line="6" pos:column="44"/></operator> <operator pos:line="6" pos:column="37">!<pos:position pos:line="6" pos:column="38"/></operator><name><name pos:line="6" pos:column="38">flags<pos:position pos:line="6" pos:column="43"/></name><operator pos:line="6" pos:column="43">.<pos:position pos:line="6" pos:column="44"/></operator><name pos:line="6" pos:column="44">tried_nlst<pos:position pos:line="6" pos:column="54"/></name></name></expr>)<pos:position pos:line="6" pos:column="55"/></condition><then pos:line="6" pos:column="55"> <block pos:line="6" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">printfReplyBody<pos:position pos:line="7" pos:column="24"/></name><argument_list pos:line="7" pos:column="24">(<argument><expr><literal type="string" pos:line="7" pos:column="25">"&lt;a href=\"%s/;type=d\"&gt;[As plain directory]&lt;/a&gt;\n"<pos:position pos:line="7" pos:column="88"/></literal></expr></argument>,
                        <argument><expr><ternary><condition><expr><name><name pos:line="8" pos:column="25">flags<pos:position pos:line="8" pos:column="30"/></name><operator pos:line="8" pos:column="30">.<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="31">dir_slash<pos:position pos:line="8" pos:column="40"/></name></name></expr> ?<pos:position pos:line="8" pos:column="42"/></condition><then pos:line="8" pos:column="42"> <expr><call><name pos:line="8" pos:column="43">rfc1738_escape_part<pos:position pos:line="8" pos:column="62"/></name><argument_list pos:line="8" pos:column="62">(<argument><expr><name pos:line="8" pos:column="63">old_filepath<pos:position pos:line="8" pos:column="75"/></name></expr></argument>)<pos:position pos:line="8" pos:column="76"/></argument_list></call></expr> <pos:position pos:line="8" pos:column="77"/></then><else pos:line="8" pos:column="77">: <expr><literal type="string" pos:line="8" pos:column="79">"."<pos:position pos:line="8" pos:column="82"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="8" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="84"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then> <elseif pos:line="9" pos:column="7">else <if pos:line="9" pos:column="12">if <condition pos:line="9" pos:column="15">(<expr><name pos:line="9" pos:column="16">typecode<pos:position pos:line="9" pos:column="24"/></name> <operator pos:line="9" pos:column="25">==<pos:position pos:line="9" pos:column="27"/></operator> <literal type="char" pos:line="9" pos:column="28">'D'<pos:position pos:line="9" pos:column="31"/></literal></expr>)<pos:position pos:line="9" pos:column="32"/></condition><then pos:line="9" pos:column="32"> <block pos:line="9" pos:column="33">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">path<pos:position pos:line="10" pos:column="25"/></name> <init pos:line="10" pos:column="26">= <expr><ternary><condition><expr><name><name pos:line="10" pos:column="28">flags<pos:position pos:line="10" pos:column="33"/></name><operator pos:line="10" pos:column="33">.<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="34">dir_slash<pos:position pos:line="10" pos:column="43"/></name></name></expr> ?<pos:position pos:line="10" pos:column="45"/></condition><then pos:line="10" pos:column="45"> <expr><name pos:line="10" pos:column="46">filepath<pos:position pos:line="10" pos:column="54"/></name></expr> <pos:position pos:line="10" pos:column="55"/></then><else pos:line="10" pos:column="55">: <expr><literal type="string" pos:line="10" pos:column="57">"."<pos:position pos:line="10" pos:column="60"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="10" pos:column="61"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">printfReplyBody<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><literal type="string" pos:line="11" pos:column="25">"&lt;a href=\"%s/\"&gt;[As extended directory]&lt;/a&gt;\n"<pos:position pos:line="11" pos:column="84"/></literal></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="74">rfc1738_escape_part<pos:position pos:line="11" pos:column="93"/></name><argument_list pos:line="11" pos:column="93">(<argument><expr><name pos:line="11" pos:column="94">path<pos:position pos:line="11" pos:column="98"/></name></expr></argument>)<pos:position pos:line="11" pos:column="99"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="101"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if></elseif></if>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
