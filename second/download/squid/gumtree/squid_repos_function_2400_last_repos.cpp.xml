<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2400_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpRequest<pos:position pos:line="2" pos:column="12"/></name><operator pos:line="2" pos:column="12">::<pos:position pos:line="2" pos:column="14"/></operator><name pos:line="2" pos:column="14">parseFirstLine<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">start<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name pos:line="2" pos:column="54">char<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">end<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">method<pos:position pos:line="4" pos:column="11"/></name><operator pos:line="4" pos:column="11">.<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="12">HttpRequestMethodXXX<pos:position pos:line="4" pos:column="32"/></name></name><argument_list pos:line="4" pos:column="32">(<argument><expr><name pos:line="4" pos:column="33">start<pos:position pos:line="4" pos:column="38"/></name></expr></argument>)<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="40"/></expr_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">method<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">==<pos:position pos:line="6" pos:column="18"/></operator> <name><name pos:line="6" pos:column="19">Http<pos:position pos:line="6" pos:column="23"/></name><operator pos:line="6" pos:column="23">::<pos:position pos:line="6" pos:column="25"/></operator><name pos:line="6" pos:column="25">METHOD_NONE<pos:position pos:line="6" pos:column="36"/></name></name></expr>)<pos:position pos:line="6" pos:column="37"/></condition><then pos:line="6" pos:column="37">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><literal type="boolean" pos:line="7" pos:column="16">false<pos:position pos:line="7" pos:column="21"/></literal></expr>;<pos:position pos:line="7" pos:column="22"/></return></block></then></if>

    <comment type="line" pos:line="9" pos:column="5">// XXX: performance regression, strcspn() over the method bytes a second time.</comment>
    <comment type="line" pos:line="10" pos:column="5">// cheaper than allocate+copy+deallocate cycle to SBuf convert a piece of start.</comment>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">char<pos:position pos:line="11" pos:column="15"/></name> <modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier></type><name pos:line="11" pos:column="17">t<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><name pos:line="11" pos:column="21">start<pos:position pos:line="11" pos:column="26"/></name> <operator pos:line="11" pos:column="27">+<pos:position pos:line="11" pos:column="28"/></operator> <call><name pos:line="11" pos:column="29">strcspn<pos:position pos:line="11" pos:column="36"/></name><argument_list pos:line="11" pos:column="36">(<argument><expr><name pos:line="11" pos:column="37">start<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">w_space<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="53"/></decl_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">start<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">t<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">+<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">strspn<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">t<pos:position pos:line="13" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="27">w_space<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt> <comment type="line" pos:line="13" pos:column="37">// skip w_space after method</comment>

    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">char<pos:position pos:line="15" pos:column="15"/></name> <modifier pos:line="15" pos:column="16">*<pos:position pos:line="15" pos:column="17"/></modifier></type><name pos:line="15" pos:column="17">ver<pos:position pos:line="15" pos:column="20"/></name> <init pos:line="15" pos:column="21">= <expr><call><name pos:line="15" pos:column="23">findTrailingHTTPVersion<pos:position pos:line="15" pos:column="46"/></name><argument_list pos:line="15" pos:column="46">(<argument><expr><name pos:line="15" pos:column="47">start<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="54">end<pos:position pos:line="15" pos:column="57"/></name></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="59"/></decl_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">ver<pos:position pos:line="17" pos:column="12"/></name></expr>)<pos:position pos:line="17" pos:column="13"/></condition><then pos:line="17" pos:column="13"> <block pos:line="17" pos:column="14">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">end<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <name pos:line="18" pos:column="15">ver<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">-<pos:position pos:line="18" pos:column="20"/></operator> <literal type="number" pos:line="18" pos:column="21">1<pos:position pos:line="18" pos:column="22"/></literal></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>

        <while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><call><name pos:line="20" pos:column="16">xisspace<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><operator pos:line="20" pos:column="25">*<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">end<pos:position pos:line="20" pos:column="29"/></name></expr></argument>)<pos:position pos:line="20" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="31"/></condition> <comment type="line" pos:line="20" pos:column="32">// find prev non-space</comment>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="13">--<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">end<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></expr_stmt></block></while>

        <expr_stmt><expr><operator pos:line="23" pos:column="9">++<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">end<pos:position pos:line="23" pos:column="14"/></name></expr>;<pos:position pos:line="23" pos:column="15"/></expr_stmt>                 <comment type="line" pos:line="23" pos:column="32">// back to space</comment>

        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><literal type="number" pos:line="25" pos:column="13">2<pos:position pos:line="25" pos:column="14"/></literal> <operator pos:line="25" pos:column="15">!=<pos:position pos:line="25" pos:column="17"/></operator> <call><name pos:line="25" pos:column="18">sscanf<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name pos:line="25" pos:column="25">ver<pos:position pos:line="25" pos:column="28"/></name> <operator pos:line="25" pos:column="29">+<pos:position pos:line="25" pos:column="30"/></operator> <literal type="number" pos:line="25" pos:column="31">5<pos:position pos:line="25" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="34">"%d.%d"<pos:position pos:line="25" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="25" pos:column="43">&amp;<pos:position pos:line="25" pos:column="48"/></operator><name><name pos:line="25" pos:column="44">http_ver<pos:position pos:line="25" pos:column="52"/></name><operator pos:line="25" pos:column="52">.<pos:position pos:line="25" pos:column="53"/></operator><name pos:line="25" pos:column="53">major<pos:position pos:line="25" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="60">&amp;<pos:position pos:line="25" pos:column="65"/></operator><name><name pos:line="25" pos:column="61">http_ver<pos:position pos:line="25" pos:column="69"/></name><operator pos:line="25" pos:column="69">.<pos:position pos:line="25" pos:column="70"/></operator><name pos:line="25" pos:column="70">minor<pos:position pos:line="25" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="76"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="77"/></condition><then pos:line="25" pos:column="77"> <block pos:line="25" pos:column="78">{
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">debugs<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="number" pos:line="26" pos:column="20">73<pos:position pos:line="26" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="24">DBG_IMPORTANT<pos:position pos:line="26" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="39">"parseRequestLine: Invalid HTTP identifier."<pos:position pos:line="26" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="85"/></expr_stmt>
            <return pos:line="27" pos:column="13">return <expr><literal type="boolean" pos:line="27" pos:column="20">false<pos:position pos:line="27" pos:column="25"/></literal></expr>;<pos:position pos:line="27" pos:column="26"/></return>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
    }<pos:position pos:line="29" pos:column="6"/></block></then> <else pos:line="29" pos:column="7">else <block pos:line="29" pos:column="12">{
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">http_ver<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">.<pos:position pos:line="30" pos:column="18"/></operator><name pos:line="30" pos:column="18">major<pos:position pos:line="30" pos:column="23"/></name></name> <operator pos:line="30" pos:column="24">=<pos:position pos:line="30" pos:column="25"/></operator> <literal type="number" pos:line="30" pos:column="26">0<pos:position pos:line="30" pos:column="27"/></literal></expr>;<pos:position pos:line="30" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="31" pos:column="9">http_ver<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">.<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">minor<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <literal type="number" pos:line="31" pos:column="26">9<pos:position pos:line="31" pos:column="27"/></literal></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">end<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">&lt;<pos:position pos:line="34" pos:column="17"/></operator> <name pos:line="34" pos:column="15">start<pos:position pos:line="34" pos:column="20"/></name></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21">   <comment type="line" pos:line="34" pos:column="24">// missing URI</comment>
        <block type="pseudo"><return pos:line="35" pos:column="9">return <expr><literal type="boolean" pos:line="35" pos:column="16">false<pos:position pos:line="35" pos:column="21"/></literal></expr>;<pos:position pos:line="35" pos:column="22"/></return></block></then></if>

    <decl_stmt><decl><type><name pos:line="37" pos:column="5">char<pos:position pos:line="37" pos:column="9"/></name></type> <name pos:line="37" pos:column="10">save<pos:position pos:line="37" pos:column="14"/></name> <init pos:line="37" pos:column="15">= <expr><operator pos:line="37" pos:column="17">*<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="18">end<pos:position pos:line="37" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="37" pos:column="22"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="39" pos:column="5">*<pos:position pos:line="39" pos:column="6"/></operator> <operator pos:line="39" pos:column="7">(<pos:position pos:line="39" pos:column="8"/></operator><name pos:line="39" pos:column="8">char<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">*<pos:position pos:line="39" pos:column="14"/></operator><operator pos:line="39" pos:column="14">)<pos:position pos:line="39" pos:column="15"/></operator> <name pos:line="39" pos:column="16">end<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <literal type="char" pos:line="39" pos:column="22">'\0'<pos:position pos:line="39" pos:column="26"/></literal></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>     <comment type="line" pos:line="39" pos:column="32">// temp terminate URI, XXX dangerous?</comment>

    <decl_stmt><decl><type><specifier pos:line="41" pos:column="5">const<pos:position pos:line="41" pos:column="10"/></specifier> <name pos:line="41" pos:column="11">bool<pos:position pos:line="41" pos:column="15"/></name></type> <name pos:line="41" pos:column="16">ret<pos:position pos:line="41" pos:column="19"/></name> <init pos:line="41" pos:column="20">= <expr><call><name><name pos:line="41" pos:column="22">url<pos:position pos:line="41" pos:column="25"/></name><operator pos:line="41" pos:column="25">.<pos:position pos:line="41" pos:column="26"/></operator><name pos:line="41" pos:column="26">parse<pos:position pos:line="41" pos:column="31"/></name></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">method<pos:position pos:line="41" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="40">(<pos:position pos:line="41" pos:column="41"/></operator><name pos:line="41" pos:column="41">char<pos:position pos:line="41" pos:column="45"/></name> <operator pos:line="41" pos:column="46">*<pos:position pos:line="41" pos:column="47"/></operator><operator pos:line="41" pos:column="47">)<pos:position pos:line="41" pos:column="48"/></operator> <name pos:line="41" pos:column="49">start<pos:position pos:line="41" pos:column="54"/></name></expr></argument>)<pos:position pos:line="41" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="41" pos:column="56"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="43" pos:column="5">*<pos:position pos:line="43" pos:column="6"/></operator> <operator pos:line="43" pos:column="7">(<pos:position pos:line="43" pos:column="8"/></operator><name pos:line="43" pos:column="8">char<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">*<pos:position pos:line="43" pos:column="14"/></operator><operator pos:line="43" pos:column="14">)<pos:position pos:line="43" pos:column="15"/></operator> <name pos:line="43" pos:column="16">end<pos:position pos:line="43" pos:column="19"/></name> <operator pos:line="43" pos:column="20">=<pos:position pos:line="43" pos:column="21"/></operator> <name pos:line="43" pos:column="22">save<pos:position pos:line="43" pos:column="26"/></name></expr>;<pos:position pos:line="43" pos:column="27"/></expr_stmt>

    <return pos:line="45" pos:column="5">return <expr><name pos:line="45" pos:column="12">ret<pos:position pos:line="45" pos:column="15"/></name></expr>;<pos:position pos:line="45" pos:column="16"/></return>
}<pos:position pos:line="46" pos:column="2"/></block></function></unit>
