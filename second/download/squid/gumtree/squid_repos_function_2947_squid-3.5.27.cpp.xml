<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2947_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">mime_get_header_field<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">mime<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">char<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">name<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="59">const<pos:position pos:line="2" pos:column="64"/></specifier> <name pos:line="2" pos:column="65">char<pos:position pos:line="2" pos:column="69"/></name> <modifier pos:line="2" pos:column="70">*<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="71">prefix<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="78"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">LOCAL_ARRAY<pos:position pos:line="4" pos:column="16"/></name><argument_list pos:line="4" pos:column="16">(<argument><expr><name pos:line="4" pos:column="17">char<pos:position pos:line="4" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="23">header<pos:position pos:line="4" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="31">GET_HDR_SZ<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="43"/></expr_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">p<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">q<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">got<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">int<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">namelen<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><ternary><condition><expr><name pos:line="8" pos:column="25">name<pos:position pos:line="8" pos:column="29"/></name></expr> ?<pos:position pos:line="8" pos:column="31"/></condition><then pos:line="8" pos:column="31"> <expr><call><name pos:line="8" pos:column="32">strlen<pos:position pos:line="8" pos:column="38"/></name><argument_list pos:line="8" pos:column="38">(<argument><expr><name pos:line="8" pos:column="39">name<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call></expr> <pos:position pos:line="8" pos:column="45"/></then><else pos:line="8" pos:column="45">: <expr><literal type="number" pos:line="8" pos:column="47">0<pos:position pos:line="8" pos:column="48"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="8" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">int<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">preflen<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><ternary><condition><expr><name pos:line="9" pos:column="25">prefix<pos:position pos:line="9" pos:column="31"/></name></expr> ?<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33"> <expr><call><name pos:line="9" pos:column="34">strlen<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><name pos:line="9" pos:column="41">prefix<pos:position pos:line="9" pos:column="47"/></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></call></expr> <pos:position pos:line="9" pos:column="49"/></then><else pos:line="9" pos:column="49">: <expr><literal type="number" pos:line="9" pos:column="51">0<pos:position pos:line="9" pos:column="52"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="9" pos:column="53"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">l<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">NULL<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">==<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">mime<pos:position pos:line="12" pos:column="21"/></name></expr>)<pos:position pos:line="12" pos:column="22"/></condition><then pos:line="12" pos:column="22">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name></expr>;<pos:position pos:line="13" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><name pos:line="15" pos:column="12">NULL<pos:position pos:line="15" pos:column="16"/></name> <operator pos:line="15" pos:column="17">!=<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="20">name<pos:position pos:line="15" pos:column="24"/></name></expr></argument>)<pos:position pos:line="15" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">debugs<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="number" pos:line="17" pos:column="12">25<pos:position pos:line="17" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="16">5<pos:position pos:line="17" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="19">"mime_get_header: looking for '"<pos:position pos:line="17" pos:column="51"/></literal> <operator pos:line="17" pos:column="52">&lt;&lt;<pos:position pos:line="17" pos:column="60"/></operator> <name pos:line="17" pos:column="55">name<pos:position pos:line="17" pos:column="59"/></name> <operator pos:line="17" pos:column="60">&lt;&lt;<pos:position pos:line="17" pos:column="68"/></operator> <literal type="string" pos:line="17" pos:column="63">"'"<pos:position pos:line="17" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="68"/></expr_stmt>

    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init><expr><name pos:line="19" pos:column="10">p<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <name pos:line="19" pos:column="14">mime<pos:position pos:line="19" pos:column="18"/></name></expr>;<pos:position pos:line="19" pos:column="19"/></init> <condition><expr><operator pos:line="19" pos:column="20">*<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">p<pos:position pos:line="19" pos:column="22"/></name></expr>;<pos:position pos:line="19" pos:column="23"/></condition> <incr><expr><name pos:line="19" pos:column="24">p<pos:position pos:line="19" pos:column="25"/></name> <operator pos:line="19" pos:column="26">+=<pos:position pos:line="19" pos:column="28"/></operator> <call><name pos:line="19" pos:column="29">strcspn<pos:position pos:line="19" pos:column="36"/></name><argument_list pos:line="19" pos:column="36">(<argument><expr><name pos:line="19" pos:column="37">p<pos:position pos:line="19" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="40">"\n"<pos:position pos:line="19" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr></incr>)<pos:position pos:line="19" pos:column="46"/></control> <block pos:line="19" pos:column="47">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">strcmp<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name pos:line="20" pos:column="20">p<pos:position pos:line="20" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="23">"\n\r\n"<pos:position pos:line="20" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="32"/></argument_list></call> <operator pos:line="20" pos:column="33">==<pos:position pos:line="20" pos:column="35"/></operator> <literal type="number" pos:line="20" pos:column="36">0<pos:position pos:line="20" pos:column="37"/></literal> <operator pos:line="20" pos:column="38">||<pos:position pos:line="20" pos:column="40"/></operator> <call><name pos:line="20" pos:column="41">strcmp<pos:position pos:line="20" pos:column="47"/></name><argument_list pos:line="20" pos:column="47">(<argument><expr><name pos:line="20" pos:column="48">p<pos:position pos:line="20" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="51">"\n\n"<pos:position pos:line="20" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call> <operator pos:line="20" pos:column="59">==<pos:position pos:line="20" pos:column="61"/></operator> <literal type="number" pos:line="20" pos:column="62">0<pos:position pos:line="20" pos:column="63"/></literal></expr>)<pos:position pos:line="20" pos:column="64"/></condition><then pos:line="20" pos:column="64">
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><name pos:line="21" pos:column="20">NULL<pos:position pos:line="21" pos:column="24"/></name></expr>;<pos:position pos:line="21" pos:column="25"/></return></block></then></if>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">*<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">p<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">==<pos:position pos:line="23" pos:column="18"/></operator> <literal type="char" pos:line="23" pos:column="19">'\n'<pos:position pos:line="23" pos:column="23"/></literal></expr>)<pos:position pos:line="23" pos:column="24"/></condition><then pos:line="23" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="24" pos:column="13">++<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="15">p<pos:position pos:line="24" pos:column="16"/></name></expr>;<pos:position pos:line="24" pos:column="17"/></expr_stmt></block></then></if>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><call><name pos:line="26" pos:column="13">strncasecmp<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name pos:line="26" pos:column="25">p<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">name<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">namelen<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43">
            <block type="pseudo"><continue pos:line="27" pos:column="13">continue;<pos:position pos:line="27" pos:column="22"/></continue></block></then></if>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><call><name pos:line="29" pos:column="14">xisspace<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name><name pos:line="29" pos:column="23">p<pos:position pos:line="29" pos:column="24"/></name><index pos:line="29" pos:column="24">[<expr><name pos:line="29" pos:column="25">namelen<pos:position pos:line="29" pos:column="32"/></name></expr>]<pos:position pos:line="29" pos:column="33"/></index></name></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call> <operator pos:line="29" pos:column="35">&amp;&amp;<pos:position pos:line="29" pos:column="45"/></operator> <name><name pos:line="29" pos:column="38">p<pos:position pos:line="29" pos:column="39"/></name><index pos:line="29" pos:column="39">[<expr><name pos:line="29" pos:column="40">namelen<pos:position pos:line="29" pos:column="47"/></name></expr>]<pos:position pos:line="29" pos:column="48"/></index></name> <operator pos:line="29" pos:column="49">!=<pos:position pos:line="29" pos:column="51"/></operator> <literal type="char" pos:line="29" pos:column="52">':'<pos:position pos:line="29" pos:column="55"/></literal></expr>)<pos:position pos:line="29" pos:column="56"/></condition><then pos:line="29" pos:column="56">
            <block type="pseudo"><continue pos:line="30" pos:column="13">continue;<pos:position pos:line="30" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><name pos:line="32" pos:column="9">l<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <call><name pos:line="32" pos:column="13">strcspn<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">p<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="24">"\n\r"<pos:position pos:line="32" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="31"/></argument_list></call> <operator pos:line="32" pos:column="32">+<pos:position pos:line="32" pos:column="33"/></operator> <literal type="number" pos:line="32" pos:column="34">1<pos:position pos:line="32" pos:column="35"/></literal></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">l<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">&gt;<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="17">GET_HDR_SZ<pos:position pos:line="34" pos:column="27"/></name></expr>)<pos:position pos:line="34" pos:column="28"/></condition><then pos:line="34" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><name pos:line="35" pos:column="13">l<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">GET_HDR_SZ<pos:position pos:line="35" pos:column="27"/></name></expr>;<pos:position pos:line="35" pos:column="28"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="37" pos:column="9">xstrncpy<pos:position pos:line="37" pos:column="17"/></name><argument_list pos:line="37" pos:column="17">(<argument><expr><name pos:line="37" pos:column="18">header<pos:position pos:line="37" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="26">p<pos:position pos:line="37" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="29">l<pos:position pos:line="37" pos:column="30"/></name></expr></argument>)<pos:position pos:line="37" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="32"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="39" pos:column="9">debugs<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="number" pos:line="39" pos:column="16">25<pos:position pos:line="39" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="20">5<pos:position pos:line="39" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="23">"mime_get_header: checking '"<pos:position pos:line="39" pos:column="52"/></literal> <operator pos:line="39" pos:column="53">&lt;&lt;<pos:position pos:line="39" pos:column="61"/></operator> <name pos:line="39" pos:column="56">header<pos:position pos:line="39" pos:column="62"/></name> <operator pos:line="39" pos:column="63">&lt;&lt;<pos:position pos:line="39" pos:column="71"/></operator> <literal type="string" pos:line="39" pos:column="66">"'"<pos:position pos:line="39" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="71"/></expr_stmt>

        <expr_stmt><expr><name pos:line="41" pos:column="9">q<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator> <name pos:line="41" pos:column="13">header<pos:position pos:line="41" pos:column="19"/></name></expr>;<pos:position pos:line="41" pos:column="20"/></expr_stmt>

        <expr_stmt><expr><name pos:line="43" pos:column="9">q<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">+=<pos:position pos:line="43" pos:column="13"/></operator> <name pos:line="43" pos:column="14">namelen<pos:position pos:line="43" pos:column="21"/></name></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>

        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><operator pos:line="45" pos:column="13">*<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="14">q<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">==<pos:position pos:line="45" pos:column="18"/></operator> <literal type="char" pos:line="45" pos:column="19">':'<pos:position pos:line="45" pos:column="22"/></literal></expr>)<pos:position pos:line="45" pos:column="23"/></condition><then pos:line="45" pos:column="23"> <block pos:line="45" pos:column="24">{
            <expr_stmt><expr><operator pos:line="46" pos:column="13">++<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">q<pos:position pos:line="46" pos:column="16"/></name></expr>;<pos:position pos:line="46" pos:column="17"/></expr_stmt>
            <expr_stmt><expr><name pos:line="47" pos:column="13">got<pos:position pos:line="47" pos:column="16"/></name> <operator pos:line="47" pos:column="17">=<pos:position pos:line="47" pos:column="18"/></operator> <literal type="number" pos:line="47" pos:column="19">1<pos:position pos:line="47" pos:column="20"/></literal></expr>;<pos:position pos:line="47" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>

        <while pos:line="50" pos:column="9">while <condition pos:line="50" pos:column="15">(<expr><call><name pos:line="50" pos:column="16">xisspace<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><operator pos:line="50" pos:column="25">*<pos:position pos:line="50" pos:column="26"/></operator><name pos:line="50" pos:column="26">q<pos:position pos:line="50" pos:column="27"/></name></expr></argument>)<pos:position pos:line="50" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="29"/></condition> <block pos:line="50" pos:column="30">{
            <expr_stmt><expr><operator pos:line="51" pos:column="13">++<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="15">q<pos:position pos:line="51" pos:column="16"/></name></expr>;<pos:position pos:line="51" pos:column="17"/></expr_stmt>
            <expr_stmt><expr><name pos:line="52" pos:column="13">got<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">=<pos:position pos:line="52" pos:column="18"/></operator> <literal type="number" pos:line="52" pos:column="19">1<pos:position pos:line="52" pos:column="20"/></literal></expr>;<pos:position pos:line="52" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="53" pos:column="10"/></block></while>

        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">got<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">&amp;&amp;<pos:position pos:line="55" pos:column="27"/></operator> <name pos:line="55" pos:column="20">prefix<pos:position pos:line="55" pos:column="26"/></name></expr>)<pos:position pos:line="55" pos:column="27"/></condition><then pos:line="55" pos:column="27"> <block pos:line="55" pos:column="28">{
            <comment type="block" pos:line="56" pos:column="13">/* we could process list entries here if we had strcasestr(). */</comment>
            <comment type="block" pos:line="57" pos:column="13">/* make sure we did not match a part of another field-value */</comment>
            <expr_stmt><expr><name pos:line="58" pos:column="13">got<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <operator pos:line="58" pos:column="19">!<pos:position pos:line="58" pos:column="20"/></operator><call><name pos:line="58" pos:column="20">strncasecmp<pos:position pos:line="58" pos:column="31"/></name><argument_list pos:line="58" pos:column="31">(<argument><expr><name pos:line="58" pos:column="32">q<pos:position pos:line="58" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="35">prefix<pos:position pos:line="58" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="43">preflen<pos:position pos:line="58" pos:column="50"/></name></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call> <operator pos:line="58" pos:column="52">&amp;&amp;<pos:position pos:line="58" pos:column="62"/></operator> <operator pos:line="58" pos:column="55">!<pos:position pos:line="58" pos:column="56"/></operator><call><name pos:line="58" pos:column="56">xisalpha<pos:position pos:line="58" pos:column="64"/></name><argument_list pos:line="58" pos:column="64">(<argument><expr><name><name pos:line="58" pos:column="65">q<pos:position pos:line="58" pos:column="66"/></name><index pos:line="58" pos:column="66">[<expr><name pos:line="58" pos:column="67">preflen<pos:position pos:line="58" pos:column="74"/></name></expr>]<pos:position pos:line="58" pos:column="75"/></index></name></expr></argument>)<pos:position pos:line="58" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="77"/></expr_stmt>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if>

        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">got<pos:position pos:line="61" pos:column="16"/></name></expr>)<pos:position pos:line="61" pos:column="17"/></condition><then pos:line="61" pos:column="17"> <block pos:line="61" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">debugs<pos:position pos:line="62" pos:column="19"/></name><argument_list pos:line="62" pos:column="19">(<argument><expr><literal type="number" pos:line="62" pos:column="20">25<pos:position pos:line="62" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="24">5<pos:position pos:line="62" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="27">"mime_get_header: returning '"<pos:position pos:line="62" pos:column="57"/></literal> <operator pos:line="62" pos:column="58">&lt;&lt;<pos:position pos:line="62" pos:column="66"/></operator> <name pos:line="62" pos:column="61">q<pos:position pos:line="62" pos:column="62"/></name> <operator pos:line="62" pos:column="63">&lt;&lt;<pos:position pos:line="62" pos:column="71"/></operator> <literal type="string" pos:line="62" pos:column="66">"'"<pos:position pos:line="62" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="71"/></expr_stmt>
            <return pos:line="63" pos:column="13">return <expr><name pos:line="63" pos:column="20">q<pos:position pos:line="63" pos:column="21"/></name></expr>;<pos:position pos:line="63" pos:column="22"/></return>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>
    }<pos:position pos:line="65" pos:column="6"/></block></for>

    <return pos:line="67" pos:column="5">return <expr><name pos:line="67" pos:column="12">NULL<pos:position pos:line="67" pos:column="16"/></name></expr>;<pos:position pos:line="67" pos:column="17"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
