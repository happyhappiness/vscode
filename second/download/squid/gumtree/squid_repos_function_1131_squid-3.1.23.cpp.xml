<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1131_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">parse_IpAddress_list_token<pos:position pos:line="2" pos:column="27"/></name><parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><name pos:line="2" pos:column="28">IpAddress_list<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier><modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type> <name pos:line="2" pos:column="46">head<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">token<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">t<pos:position pos:line="4" pos:column="12"/></name></decl>;<pos:position pos:line="4" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">host<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">tmp<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">IpAddress<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">ipa<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">unsigned<pos:position pos:line="9" pos:column="13"/></name> <name pos:line="9" pos:column="14">short<pos:position pos:line="9" pos:column="19"/></name></type> <name pos:line="9" pos:column="20">port<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">IpAddress_list<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">s<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="12" pos:column="5">host<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <name pos:line="12" pos:column="12">NULL<pos:position pos:line="12" pos:column="16"/></name></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">port<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <literal type="number" pos:line="13" pos:column="12">0<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">token<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">==<pos:position pos:line="15" pos:column="18"/></operator> <literal type="char" pos:line="15" pos:column="19">'['<pos:position pos:line="15" pos:column="22"/></literal></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23"> <block pos:line="15" pos:column="24">{
        <comment type="block" pos:line="16" pos:column="9">/* [host]:port */</comment>
        <expr_stmt><expr><name pos:line="17" pos:column="9">host<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <name pos:line="17" pos:column="16">token<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">+<pos:position pos:line="17" pos:column="23"/></operator> <literal type="number" pos:line="17" pos:column="24">1<pos:position pos:line="17" pos:column="25"/></literal></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="18" pos:column="9">t<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <call><name pos:line="18" pos:column="13">strchr<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">host<pos:position pos:line="18" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="18" pos:column="26">']'<pos:position pos:line="18" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">t<pos:position pos:line="19" pos:column="15"/></name></expr>)<pos:position pos:line="19" pos:column="16"/></condition><then pos:line="19" pos:column="16">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="13">self_destruct<pos:position pos:line="20" pos:column="26"/></name><argument_list pos:line="20" pos:column="26">()<pos:position pos:line="20" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt></block></then></if>
        <expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">t<pos:position pos:line="21" pos:column="11"/></name><operator pos:line="21" pos:column="11">++<pos:position pos:line="21" pos:column="13"/></operator> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <literal type="char" pos:line="21" pos:column="16">'\0'<pos:position pos:line="21" pos:column="20"/></literal></expr>;<pos:position pos:line="21" pos:column="21"/></expr_stmt>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">*<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">t<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">!=<pos:position pos:line="22" pos:column="18"/></operator> <literal type="char" pos:line="22" pos:column="19">':'<pos:position pos:line="22" pos:column="22"/></literal></expr>)<pos:position pos:line="22" pos:column="23"/></condition><then pos:line="22" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="13">self_destruct<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">()<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="24" pos:column="9">port<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <call><name pos:line="24" pos:column="16">xatos<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">t<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">+<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="26">1<pos:position pos:line="24" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">!<pos:position pos:line="25" pos:column="14"/></operator><name><name pos:line="25" pos:column="14">Ip<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">::<pos:position pos:line="25" pos:column="18"/></operator><name pos:line="25" pos:column="18">EnableIpv6<pos:position pos:line="25" pos:column="28"/></name></name></expr>)<pos:position pos:line="25" pos:column="29"/></condition><then pos:line="25" pos:column="29"> <block pos:line="25" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">debugs<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="number" pos:line="26" pos:column="20">3<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="23">DBG_CRITICAL<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="37">"FATAL: IPv6 is not enabled."<pos:position pos:line="26" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="68"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">self_destruct<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">()<pos:position pos:line="27" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
    }<pos:position pos:line="29" pos:column="6"/></block></then> <elseif pos:line="29" pos:column="7">else <if pos:line="29" pos:column="12">if <condition pos:line="29" pos:column="15">(<expr><operator pos:line="29" pos:column="16">(<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="17">t<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">=<pos:position pos:line="29" pos:column="20"/></operator> <call><name pos:line="29" pos:column="21">strchr<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name pos:line="29" pos:column="28">token<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="29" pos:column="35">':'<pos:position pos:line="29" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call><operator pos:line="29" pos:column="39">)<pos:position pos:line="29" pos:column="40"/></operator></expr>)<pos:position pos:line="29" pos:column="41"/></condition><then pos:line="29" pos:column="41"> <block pos:line="29" pos:column="42">{
        <comment type="block" pos:line="30" pos:column="9">/* host:port */</comment>
        <expr_stmt><expr><name pos:line="31" pos:column="9">host<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">token<pos:position pos:line="31" pos:column="21"/></name></expr>;<pos:position pos:line="31" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="32" pos:column="9">*<pos:position pos:line="32" pos:column="10"/></operator><name pos:line="32" pos:column="10">t<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <literal type="char" pos:line="32" pos:column="14">'\0'<pos:position pos:line="32" pos:column="18"/></literal></expr>;<pos:position pos:line="32" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name pos:line="33" pos:column="9">port<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <call><name pos:line="33" pos:column="16">xatos<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">t<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">+<pos:position pos:line="33" pos:column="25"/></operator> <literal type="number" pos:line="33" pos:column="26">1<pos:position pos:line="33" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>

        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><literal type="number" pos:line="35" pos:column="13">0<pos:position pos:line="35" pos:column="14"/></literal> <operator pos:line="35" pos:column="15">==<pos:position pos:line="35" pos:column="17"/></operator> <name pos:line="35" pos:column="18">port<pos:position pos:line="35" pos:column="22"/></name></expr>)<pos:position pos:line="35" pos:column="23"/></condition><then pos:line="35" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="36" pos:column="13">self_destruct<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">()<pos:position pos:line="36" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt></block></then></if>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if></elseif> <elseif pos:line="37" pos:column="7">else <if pos:line="37" pos:column="12">if <condition pos:line="37" pos:column="15">(<expr><operator pos:line="37" pos:column="16">(<pos:position pos:line="37" pos:column="17"/></operator><name pos:line="37" pos:column="17">port<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <call><name pos:line="37" pos:column="24">strtol<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name pos:line="37" pos:column="31">token<pos:position pos:line="37" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="38">&amp;<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="39">tmp<pos:position pos:line="37" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="44">10<pos:position pos:line="37" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="47"/></argument_list></call><operator pos:line="37" pos:column="47">)<pos:position pos:line="37" pos:column="48"/></operator></expr><operator pos:line="37" pos:column="48">,<pos:position pos:line="37" pos:column="49"/></operator> <expr><operator pos:line="37" pos:column="50">!<pos:position pos:line="37" pos:column="51"/></operator><operator pos:line="37" pos:column="51">*<pos:position pos:line="37" pos:column="52"/></operator><name pos:line="37" pos:column="52">tmp<pos:position pos:line="37" pos:column="55"/></name></expr>)<pos:position pos:line="37" pos:column="56"/></condition><then pos:line="37" pos:column="56"> <block pos:line="37" pos:column="57">{
        <comment type="block" pos:line="38" pos:column="9">/* port */</comment>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif> <else pos:line="39" pos:column="7">else <block pos:line="39" pos:column="12">{
        <expr_stmt><expr><name pos:line="40" pos:column="9">host<pos:position pos:line="40" pos:column="13"/></name> <operator pos:line="40" pos:column="14">=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">token<pos:position pos:line="40" pos:column="21"/></name></expr>;<pos:position pos:line="40" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">port<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <literal type="number" pos:line="41" pos:column="16">0<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></else></if>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">NULL<pos:position pos:line="44" pos:column="13"/></name> <operator pos:line="44" pos:column="14">==<pos:position pos:line="44" pos:column="16"/></operator> <name pos:line="44" pos:column="17">host<pos:position pos:line="44" pos:column="21"/></name></expr>)<pos:position pos:line="44" pos:column="22"/></condition><then pos:line="44" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="45" pos:column="9">ipa<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">.<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="13">SetAnyAddr<pos:position pos:line="45" pos:column="23"/></name></name><argument_list pos:line="45" pos:column="23">()<pos:position pos:line="45" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt></block></then>
    <elseif pos:line="46" pos:column="5">else <if pos:line="46" pos:column="10">if <condition pos:line="46" pos:column="13">( <expr><call><name><name pos:line="46" pos:column="15">ipa<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">.<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="19">GetHostByName<pos:position pos:line="46" pos:column="32"/></name></name><argument_list pos:line="46" pos:column="32">(<argument><expr><name pos:line="46" pos:column="33">host<pos:position pos:line="46" pos:column="37"/></name></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call></expr> )<pos:position pos:line="46" pos:column="40"/></condition><then pos:line="46" pos:column="40">	<comment type="block" pos:line="46" pos:column="41">/* dont use ipcache. Accept either FQDN or IPA. */</comment>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="47" pos:column="9">(<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">void<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">)<pos:position pos:line="47" pos:column="15"/></operator> <literal type="number" pos:line="47" pos:column="16">0<pos:position pos:line="47" pos:column="17"/></literal></expr>;<pos:position pos:line="47" pos:column="18"/></expr_stmt></block></then></if></elseif>
    <else pos:line="48" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="49" pos:column="9">self_destruct<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">()<pos:position pos:line="49" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="51" pos:column="5">/* port MUST be set after the IPA lookup/conversion is perofrmed. */</comment>
    <expr_stmt><expr><call><name><name pos:line="52" pos:column="5">ipa<pos:position pos:line="52" pos:column="8"/></name><operator pos:line="52" pos:column="8">.<pos:position pos:line="52" pos:column="9"/></operator><name pos:line="52" pos:column="9">SetPort<pos:position pos:line="52" pos:column="16"/></name></name><argument_list pos:line="52" pos:column="16">(<argument><expr><name pos:line="52" pos:column="17">port<pos:position pos:line="52" pos:column="21"/></name></expr></argument>)<pos:position pos:line="52" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>

    <while pos:line="54" pos:column="5">while <condition pos:line="54" pos:column="11">(<expr><operator pos:line="54" pos:column="12">*<pos:position pos:line="54" pos:column="13"/></operator><name pos:line="54" pos:column="13">head<pos:position pos:line="54" pos:column="17"/></name></expr>)<pos:position pos:line="54" pos:column="18"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="9">head<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">=<pos:position pos:line="55" pos:column="15"/></operator> <operator pos:line="55" pos:column="16">&amp;<pos:position pos:line="55" pos:column="21"/></operator><name><operator pos:line="55" pos:column="17">(<pos:position pos:line="55" pos:column="18"/></operator><operator pos:line="55" pos:column="18">*<pos:position pos:line="55" pos:column="19"/></operator><name pos:line="55" pos:column="19">head<pos:position pos:line="55" pos:column="23"/></name><operator pos:line="55" pos:column="23">)<pos:position pos:line="55" pos:column="24"/></operator><operator pos:line="55" pos:column="24">-&gt;<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="26">next<pos:position pos:line="55" pos:column="30"/></name></name></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt></block></while>

    <expr_stmt><expr><name pos:line="57" pos:column="5">s<pos:position pos:line="57" pos:column="6"/></name> <operator pos:line="57" pos:column="7">=<pos:position pos:line="57" pos:column="8"/></operator> <cast type="static" pos:line="57" pos:column="9">static_cast<argument_list type="generic" pos:line="57" pos:column="20">&lt;<argument><expr><name pos:line="57" pos:column="21">IpAddress_list<pos:position pos:line="57" pos:column="35"/></name> <operator pos:line="57" pos:column="36">*<pos:position pos:line="57" pos:column="37"/></operator></expr></argument>&gt;<pos:position pos:line="57" pos:column="41"/></argument_list><argument_list pos:line="57" pos:column="38">(<argument><expr><call><name pos:line="57" pos:column="39">xcalloc<pos:position pos:line="57" pos:column="46"/></name><argument_list pos:line="57" pos:column="46">(<argument><expr><literal type="number" pos:line="57" pos:column="47">1<pos:position pos:line="57" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="50">sizeof<argument_list pos:line="57" pos:column="56">(<argument><expr><operator pos:line="57" pos:column="57">*<pos:position pos:line="57" pos:column="58"/></operator><name pos:line="57" pos:column="58">s<pos:position pos:line="57" pos:column="59"/></name></expr></argument>)<pos:position pos:line="57" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr></argument>)<pos:position pos:line="57" pos:column="62"/></argument_list></cast></expr>;<pos:position pos:line="57" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">s<pos:position pos:line="58" pos:column="6"/></name><operator pos:line="58" pos:column="6">-&gt;<pos:position pos:line="58" pos:column="11"/></operator><name pos:line="58" pos:column="8">s<pos:position pos:line="58" pos:column="9"/></name></name> <operator pos:line="58" pos:column="10">=<pos:position pos:line="58" pos:column="11"/></operator> <name pos:line="58" pos:column="12">ipa<pos:position pos:line="58" pos:column="15"/></name></expr>;<pos:position pos:line="58" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="60" pos:column="5">*<pos:position pos:line="60" pos:column="6"/></operator><name pos:line="60" pos:column="6">head<pos:position pos:line="60" pos:column="10"/></name> <operator pos:line="60" pos:column="11">=<pos:position pos:line="60" pos:column="12"/></operator> <name pos:line="60" pos:column="13">s<pos:position pos:line="60" pos:column="14"/></name></expr>;<pos:position pos:line="60" pos:column="15"/></expr_stmt>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
