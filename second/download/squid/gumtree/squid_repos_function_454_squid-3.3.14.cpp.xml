<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_454_squid-3.3.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">berEncodePasswordData<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(
    <parameter><decl><type><name><name pos:line="2" pos:column="5">struct<pos:position pos:line="2" pos:column="11"/></name> <name pos:line="2" pos:column="12">berval<pos:position pos:line="2" pos:column="18"/></name></name> <modifier pos:line="2" pos:column="19">*<pos:position pos:line="2" pos:column="20"/></modifier><modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">requestBV<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>,
    <parameter><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name>    <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">objectDN<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>,
    <parameter><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name>    <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">password<pos:position pos:line="4" pos:column="28"/></name></decl></parameter>,
    <parameter><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name>    <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">password2<pos:position pos:line="5" pos:column="29"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="30"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">err<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><literal type="number" pos:line="7" pos:column="15">0<pos:position pos:line="7" pos:column="16"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="18">rc<pos:position pos:line="7" pos:column="20"/></name><init pos:line="7" pos:column="20">=<expr><literal type="number" pos:line="7" pos:column="21">0<pos:position pos:line="7" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">BerElement<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">requestBer<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><name pos:line="8" pos:column="30">NULL<pos:position pos:line="8" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name>    <modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type> <name pos:line="10" pos:column="21">utf8ObjPtr<pos:position pos:line="10" pos:column="31"/></name> <init pos:line="10" pos:column="32">= <expr><name pos:line="10" pos:column="34">NULL<pos:position pos:line="10" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type>     <name pos:line="11" pos:column="13">utf8ObjSize<pos:position pos:line="11" pos:column="24"/></name> <init pos:line="11" pos:column="25">= <expr><literal type="number" pos:line="11" pos:column="27">0<pos:position pos:line="11" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name>    <modifier pos:line="12" pos:column="19">*<pos:position pos:line="12" pos:column="20"/></modifier></type> <name pos:line="12" pos:column="21">utf8PwdPtr<pos:position pos:line="12" pos:column="31"/></name> <init pos:line="12" pos:column="32">= <expr><name pos:line="12" pos:column="34">NULL<pos:position pos:line="12" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type>     <name pos:line="13" pos:column="13">utf8PwdSize<pos:position pos:line="13" pos:column="24"/></name> <init pos:line="13" pos:column="25">= <expr><literal type="number" pos:line="13" pos:column="27">0<pos:position pos:line="13" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">char<pos:position pos:line="14" pos:column="15"/></name>    <modifier pos:line="14" pos:column="19">*<pos:position pos:line="14" pos:column="20"/></modifier></type> <name pos:line="14" pos:column="21">utf8Pwd2Ptr<pos:position pos:line="14" pos:column="32"/></name> <init pos:line="14" pos:column="33">= <expr><name pos:line="14" pos:column="35">NULL<pos:position pos:line="14" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type>     <name pos:line="15" pos:column="13">utf8Pwd2Size<pos:position pos:line="15" pos:column="25"/></name> <init pos:line="15" pos:column="26">= <expr><literal type="number" pos:line="15" pos:column="28">0<pos:position pos:line="15" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>

    <comment type="block" pos:line="17" pos:column="5">/* Convert objectDN and tag strings from Unicode to UTF-8 */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">utf8ObjSize<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <call><name pos:line="18" pos:column="19">strlen<pos:position pos:line="18" pos:column="25"/></name><argument_list pos:line="18" pos:column="25">(<argument><expr><name pos:line="18" pos:column="26">objectDN<pos:position pos:line="18" pos:column="34"/></name></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call><operator pos:line="18" pos:column="35">+<pos:position pos:line="18" pos:column="36"/></operator><literal type="number" pos:line="18" pos:column="36">1<pos:position pos:line="18" pos:column="37"/></literal></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">utf8ObjPtr<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">objectDN<pos:position pos:line="19" pos:column="26"/></name></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">password<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">!=<pos:position pos:line="21" pos:column="20"/></operator> <name pos:line="21" pos:column="21">NULL<pos:position pos:line="21" pos:column="25"/></name></expr>)<pos:position pos:line="21" pos:column="26"/></condition><then pos:line="21" pos:column="26"> <block pos:line="21" pos:column="27">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">utf8PwdSize<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <call><name pos:line="22" pos:column="23">strlen<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">password<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call><operator pos:line="22" pos:column="39">+<pos:position pos:line="22" pos:column="40"/></operator><literal type="number" pos:line="22" pos:column="40">1<pos:position pos:line="22" pos:column="41"/></literal></expr>;<pos:position pos:line="22" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">utf8PwdPtr<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <name pos:line="23" pos:column="22">password<pos:position pos:line="23" pos:column="30"/></name></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">password2<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">!=<pos:position pos:line="26" pos:column="21"/></operator> <name pos:line="26" pos:column="22">NULL<pos:position pos:line="26" pos:column="26"/></name></expr>)<pos:position pos:line="26" pos:column="27"/></condition><then pos:line="26" pos:column="27"> <block pos:line="26" pos:column="28">{
        <expr_stmt><expr><name pos:line="27" pos:column="9">utf8Pwd2Size<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">=<pos:position pos:line="27" pos:column="23"/></operator> <call><name pos:line="27" pos:column="24">strlen<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">password2<pos:position pos:line="27" pos:column="40"/></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call><operator pos:line="27" pos:column="41">+<pos:position pos:line="27" pos:column="42"/></operator><literal type="number" pos:line="27" pos:column="42">1<pos:position pos:line="27" pos:column="43"/></literal></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="28" pos:column="9">utf8Pwd2Ptr<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">password2<pos:position pos:line="28" pos:column="32"/></name></expr>;<pos:position pos:line="28" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="31" pos:column="5">/* Allocate a BerElement for the request parameters. */</comment>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><operator pos:line="32" pos:column="9">(<pos:position pos:line="32" pos:column="10"/></operator><name pos:line="32" pos:column="10">requestBer<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <call><name pos:line="32" pos:column="23">ber_alloc<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">()<pos:position pos:line="32" pos:column="34"/></argument_list></call><operator pos:line="32" pos:column="34">)<pos:position pos:line="32" pos:column="35"/></operator> <operator pos:line="32" pos:column="36">==<pos:position pos:line="32" pos:column="38"/></operator> <name pos:line="32" pos:column="39">NULL<pos:position pos:line="32" pos:column="43"/></name></expr>)<pos:position pos:line="32" pos:column="44"/></condition><then pos:line="32" pos:column="44"> <block pos:line="32" pos:column="45">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">err<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">LDAP_ENCODING_ERROR<pos:position pos:line="33" pos:column="34"/></name></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">ber_free<pos:position pos:line="34" pos:column="17"/></name><argument_list pos:line="34" pos:column="17">(<argument><expr><name pos:line="34" pos:column="18">requestBer<pos:position pos:line="34" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="30">1<pos:position pos:line="34" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>
        <return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">err<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">password<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">!=<pos:position pos:line="38" pos:column="20"/></operator> <name pos:line="38" pos:column="21">NULL<pos:position pos:line="38" pos:column="25"/></name> <operator pos:line="38" pos:column="26">&amp;&amp;<pos:position pos:line="38" pos:column="36"/></operator> <name pos:line="38" pos:column="29">password2<pos:position pos:line="38" pos:column="38"/></name> <operator pos:line="38" pos:column="39">!=<pos:position pos:line="38" pos:column="41"/></operator> <name pos:line="38" pos:column="42">NULL<pos:position pos:line="38" pos:column="46"/></name></expr>)<pos:position pos:line="38" pos:column="47"/></condition><then pos:line="38" pos:column="47"> <block pos:line="38" pos:column="48">{
        <comment type="block" pos:line="39" pos:column="9">/* BER encode the NMAS Version, the objectDN, and the password */</comment>
        <expr_stmt><expr><name pos:line="40" pos:column="9">rc<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator> <call><name pos:line="40" pos:column="14">ber_printf<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><name pos:line="40" pos:column="25">requestBer<pos:position pos:line="40" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="37">"{iooo}"<pos:position pos:line="40" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="47">NMAS_LDAP_EXT_VERSION<pos:position pos:line="40" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="70">utf8ObjPtr<pos:position pos:line="40" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="82">utf8ObjSize<pos:position pos:line="40" pos:column="93"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="95">utf8PwdPtr<pos:position pos:line="40" pos:column="105"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="107">utf8PwdSize<pos:position pos:line="40" pos:column="118"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="120">utf8Pwd2Ptr<pos:position pos:line="40" pos:column="131"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="133">utf8Pwd2Size<pos:position pos:line="40" pos:column="145"/></name></expr></argument>)<pos:position pos:line="40" pos:column="146"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="147"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then> <elseif pos:line="41" pos:column="7">else <if pos:line="41" pos:column="12">if <condition pos:line="41" pos:column="15">(<expr><name pos:line="41" pos:column="16">password<pos:position pos:line="41" pos:column="24"/></name> <operator pos:line="41" pos:column="25">!=<pos:position pos:line="41" pos:column="27"/></operator> <name pos:line="41" pos:column="28">NULL<pos:position pos:line="41" pos:column="32"/></name></expr>)<pos:position pos:line="41" pos:column="33"/></condition><then pos:line="41" pos:column="33"> <block pos:line="41" pos:column="34">{
        <comment type="block" pos:line="42" pos:column="9">/* BER encode the NMAS Version, the objectDN, and the password */</comment>
        <expr_stmt><expr><name pos:line="43" pos:column="9">rc<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <call><name pos:line="43" pos:column="14">ber_printf<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name pos:line="43" pos:column="25">requestBer<pos:position pos:line="43" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="37">"{ioo}"<pos:position pos:line="43" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="46">NMAS_LDAP_EXT_VERSION<pos:position pos:line="43" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="69">utf8ObjPtr<pos:position pos:line="43" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="81">utf8ObjSize<pos:position pos:line="43" pos:column="92"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="94">utf8PwdPtr<pos:position pos:line="43" pos:column="104"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="106">utf8PwdSize<pos:position pos:line="43" pos:column="117"/></name></expr></argument>)<pos:position pos:line="43" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="119"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if></elseif> <else pos:line="44" pos:column="7">else <block pos:line="44" pos:column="12">{
        <comment type="block" pos:line="45" pos:column="9">/* BER encode the NMAS Version and the objectDN */</comment>
        <expr_stmt><expr><name pos:line="46" pos:column="9">rc<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator> <call><name pos:line="46" pos:column="14">ber_printf<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">requestBer<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="37">"{io}"<pos:position pos:line="46" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="45">NMAS_LDAP_EXT_VERSION<pos:position pos:line="46" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="68">utf8ObjPtr<pos:position pos:line="46" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="80">utf8ObjSize<pos:position pos:line="46" pos:column="91"/></name></expr></argument>)<pos:position pos:line="46" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="93"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></else></if>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">rc<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">&lt;<pos:position pos:line="49" pos:column="16"/></operator> <literal type="number" pos:line="49" pos:column="14">0<pos:position pos:line="49" pos:column="15"/></literal></expr>)<pos:position pos:line="49" pos:column="16"/></condition><then pos:line="49" pos:column="16"> <block pos:line="49" pos:column="17">{
        <expr_stmt><expr><name pos:line="50" pos:column="9">err<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <name pos:line="50" pos:column="15">LDAP_ENCODING_ERROR<pos:position pos:line="50" pos:column="34"/></name></expr>;<pos:position pos:line="50" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then> <else pos:line="51" pos:column="7">else <block pos:line="51" pos:column="12">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">err<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <literal type="number" pos:line="52" pos:column="15">0<pos:position pos:line="52" pos:column="16"/></literal></expr>;<pos:position pos:line="52" pos:column="17"/></expr_stmt>
        <comment type="block" pos:line="53" pos:column="9">/* Convert the BER we just built to a berval that we'll send with the extended request. */</comment>
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><operator pos:line="54" pos:column="13">(<pos:position pos:line="54" pos:column="14"/></operator><name pos:line="54" pos:column="14">ber_tag_t<pos:position pos:line="54" pos:column="23"/></name><operator pos:line="54" pos:column="23">)<pos:position pos:line="54" pos:column="24"/></operator><call><name pos:line="54" pos:column="24">ber_flatten<pos:position pos:line="54" pos:column="35"/></name><argument_list pos:line="54" pos:column="35">(<argument><expr><name pos:line="54" pos:column="36">requestBer<pos:position pos:line="54" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="48">requestBV<pos:position pos:line="54" pos:column="57"/></name></expr></argument>)<pos:position pos:line="54" pos:column="58"/></argument_list></call> <operator pos:line="54" pos:column="59">==<pos:position pos:line="54" pos:column="61"/></operator> <name pos:line="54" pos:column="62">LBER_ERROR<pos:position pos:line="54" pos:column="72"/></name></expr>)<pos:position pos:line="54" pos:column="73"/></condition><then pos:line="54" pos:column="73"> <block pos:line="54" pos:column="74">{
            <expr_stmt><expr><name pos:line="55" pos:column="13">err<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">=<pos:position pos:line="55" pos:column="18"/></operator> <name pos:line="55" pos:column="19">LDAP_ENCODING_ERROR<pos:position pos:line="55" pos:column="38"/></name></expr>;<pos:position pos:line="55" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="56" pos:column="10"/></block></then></if>
    }<pos:position pos:line="57" pos:column="6"/></block></else></if>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">requestBer<pos:position pos:line="59" pos:column="19"/></name></expr>)<pos:position pos:line="59" pos:column="20"/></condition><then pos:line="59" pos:column="20"> <block pos:line="59" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">ber_free<pos:position pos:line="60" pos:column="17"/></name><argument_list pos:line="60" pos:column="17">(<argument><expr><name pos:line="60" pos:column="18">requestBer<pos:position pos:line="60" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="30">1<pos:position pos:line="60" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <return pos:line="63" pos:column="5">return <expr><name pos:line="63" pos:column="12">err<pos:position pos:line="63" pos:column="15"/></name></expr>;<pos:position pos:line="63" pos:column="16"/></return>
}<pos:position pos:line="64" pos:column="2"/></block></function></unit>
