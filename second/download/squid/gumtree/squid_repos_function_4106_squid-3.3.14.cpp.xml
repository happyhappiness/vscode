<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4106_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Adaptation<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">Icap<pos:position pos:line="1" pos:column="22"/></name><operator pos:line="1" pos:column="22">::<pos:position pos:line="1" pos:column="24"/></operator><name pos:line="1" pos:column="24">ModXactLauncher<pos:position pos:line="1" pos:column="39"/></name><operator pos:line="1" pos:column="39">::<pos:position pos:line="1" pos:column="41"/></operator><name pos:line="1" pos:column="41">updateHistory<pos:position pos:line="1" pos:column="54"/></name></name><parameter_list pos:line="1" pos:column="54">(<parameter><decl><type><name pos:line="1" pos:column="55">bool<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">doStart<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">HttpRequest<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">r<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><ternary><condition><expr><name><name pos:line="3" pos:column="22">virgin<pos:position pos:line="3" pos:column="28"/></name><operator pos:line="3" pos:column="28">.<pos:position pos:line="3" pos:column="29"/></operator><name pos:line="3" pos:column="29">cause<pos:position pos:line="3" pos:column="34"/></name></name></expr> ?<pos:position pos:line="3" pos:column="36"/></condition><then pos:line="3" pos:column="36">
                     <expr><name><name pos:line="4" pos:column="22">virgin<pos:position pos:line="4" pos:column="28"/></name><operator pos:line="4" pos:column="28">.<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="29">cause<pos:position pos:line="4" pos:column="34"/></name></name></expr> <pos:position pos:line="4" pos:column="35"/></then><else pos:line="4" pos:column="35">: <expr><cast type="dynamic" pos:line="4" pos:column="37">dynamic_cast<argument_list type="generic" pos:line="4" pos:column="49">&lt;<argument><expr><name pos:line="4" pos:column="50">HttpRequest<pos:position pos:line="4" pos:column="61"/></name><operator pos:line="4" pos:column="61">*<pos:position pos:line="4" pos:column="62"/></operator></expr></argument>&gt;<pos:position pos:line="4" pos:column="66"/></argument_list><argument_list pos:line="4" pos:column="63">(<argument><expr><name><name pos:line="4" pos:column="64">virgin<pos:position pos:line="4" pos:column="70"/></name><operator pos:line="4" pos:column="70">.<pos:position pos:line="4" pos:column="71"/></operator><name pos:line="4" pos:column="71">header<pos:position pos:line="4" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="78"/></argument_list></cast></expr></else></ternary></expr></init></decl>;<pos:position pos:line="4" pos:column="79"/></decl_stmt>

    <comment type="line" pos:line="6" pos:column="5">// r should never be NULL but we play safe; TODO: add Should()</comment>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">r<pos:position pos:line="7" pos:column="10"/></name></expr>)<pos:position pos:line="7" pos:column="11"/></condition><then pos:line="7" pos:column="11"> <block pos:line="7" pos:column="12">{
        <decl_stmt><decl><type><name><name pos:line="8" pos:column="9">Adaptation<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">::<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">Icap<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">::<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="27">History<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">::<pos:position pos:line="8" pos:column="36"/></operator><name pos:line="8" pos:column="36">Pointer<pos:position pos:line="8" pos:column="43"/></name></name></type> <name pos:line="8" pos:column="44">h<pos:position pos:line="8" pos:column="45"/></name> <init pos:line="8" pos:column="46">= <expr><call><name><name pos:line="8" pos:column="48">r<pos:position pos:line="8" pos:column="49"/></name><operator pos:line="8" pos:column="49">-&gt;<pos:position pos:line="8" pos:column="54"/></operator><name pos:line="8" pos:column="51">icapHistory<pos:position pos:line="8" pos:column="62"/></name></name><argument_list pos:line="8" pos:column="62">()<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="65"/></decl_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">h<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">!=<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="18">NULL<pos:position pos:line="9" pos:column="22"/></name></expr>)<pos:position pos:line="9" pos:column="23"/></condition><then pos:line="9" pos:column="23"> <block pos:line="9" pos:column="24">{
            <if pos:line="10" pos:column="13">if <condition pos:line="10" pos:column="16">(<expr><name pos:line="10" pos:column="17">doStart<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="11" pos:column="17">h<pos:position pos:line="11" pos:column="18"/></name><operator pos:line="11" pos:column="18">-&gt;<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="20">start<pos:position pos:line="11" pos:column="25"/></name></name><argument_list pos:line="11" pos:column="25">(<argument><expr><literal type="string" pos:line="11" pos:column="26">"ICAPModXactLauncher"<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt></block></then>
            <else pos:line="12" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="13" pos:column="17">h<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">-&gt;<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="20">stop<pos:position pos:line="13" pos:column="24"/></name></name><argument_list pos:line="13" pos:column="24">(<argument><expr><literal type="string" pos:line="13" pos:column="25">"ICAPModXactLauncher"<pos:position pos:line="13" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt></block></else></if>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
