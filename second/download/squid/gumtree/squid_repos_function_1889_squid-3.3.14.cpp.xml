<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1889_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">input_filename<pos:position pos:line="4" pos:column="25"/></name></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">output_filename<pos:position pos:line="5" pos:column="32"/></name> <init pos:line="5" pos:column="33">= <expr><name pos:line="5" pos:column="35">_PATH_PARSER<pos:position pos:line="5" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">conf_filename<pos:position pos:line="6" pos:column="30"/></name> <init pos:line="6" pos:column="31">= <expr><name pos:line="6" pos:column="33">_PATH_SQUID_CONF<pos:position pos:line="6" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">conf_filename_short<pos:position pos:line="7" pos:column="36"/></name> <init pos:line="7" pos:column="37">= <expr><name pos:line="7" pos:column="39">_PATH_SQUID_CONF_SHORT<pos:position pos:line="7" pos:column="61"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="62"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">type_depend<pos:position pos:line="8" pos:column="28"/></name></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">linenum<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><literal type="number" pos:line="9" pos:column="19">0<pos:position pos:line="9" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">EntryList<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">entries<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">TypeList<pos:position pos:line="11" pos:column="13"/></name></type> <name pos:line="11" pos:column="14">types<pos:position pos:line="11" pos:column="19"/></name></decl>;<pos:position pos:line="11" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">enum<pos:position pos:line="12" pos:column="9"/></name> <name pos:line="12" pos:column="10">State<pos:position pos:line="12" pos:column="15"/></name></name></type> <name pos:line="12" pos:column="16">state<pos:position pos:line="12" pos:column="21"/></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">rc<pos:position pos:line="13" pos:column="11"/></name> <init pos:line="13" pos:column="12">= <expr><literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name> <modifier pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></modifier></type><name pos:line="14" pos:column="11">ptr<pos:position pos:line="14" pos:column="14"/></name> <init pos:line="14" pos:column="15">= <expr><name pos:line="14" pos:column="17">NULL<pos:position pos:line="14" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">char<pos:position pos:line="15" pos:column="9"/></name></type> <name><name pos:line="15" pos:column="10">buff<pos:position pos:line="15" pos:column="14"/></name><index pos:line="15" pos:column="14">[<expr><name pos:line="15" pos:column="15">MAX_LINE<pos:position pos:line="15" pos:column="23"/></name></expr>]<pos:position pos:line="15" pos:column="24"/></index></name></decl>;<pos:position pos:line="15" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">std<pos:position pos:line="16" pos:column="8"/></name><operator pos:line="16" pos:column="8">::<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">ifstream<pos:position pos:line="16" pos:column="18"/></name></name></type> <name pos:line="16" pos:column="19">fp<pos:position pos:line="16" pos:column="21"/></name></decl>;<pos:position pos:line="16" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="17" pos:column="5">std<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">::<pos:position pos:line="17" pos:column="10"/></operator><name><name pos:line="17" pos:column="10">stack<pos:position pos:line="17" pos:column="15"/></name><argument_list type="generic" pos:line="17" pos:column="15">&lt;<argument><expr><name><name pos:line="17" pos:column="16">std<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">::<pos:position pos:line="17" pos:column="21"/></operator><name pos:line="17" pos:column="21">string<pos:position pos:line="17" pos:column="27"/></name></name></expr></argument>&gt;<pos:position pos:line="17" pos:column="31"/></argument_list></name></name></type> <name pos:line="17" pos:column="29">IFDEFS<pos:position pos:line="17" pos:column="35"/></name></decl>;<pos:position pos:line="17" pos:column="36"/></decl_stmt>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">argc<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">!=<pos:position pos:line="19" pos:column="16"/></operator> <literal type="number" pos:line="19" pos:column="17">3<pos:position pos:line="19" pos:column="18"/></literal></expr>)<pos:position pos:line="19" pos:column="19"/></condition><then pos:line="19" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="20" pos:column="9">usage<pos:position pos:line="20" pos:column="14"/></name><argument_list pos:line="20" pos:column="14">(<argument><expr><name><name pos:line="20" pos:column="15">argv<pos:position pos:line="20" pos:column="19"/></name><index pos:line="20" pos:column="19">[<expr><literal type="number" pos:line="20" pos:column="20">0<pos:position pos:line="20" pos:column="21"/></literal></expr>]<pos:position pos:line="20" pos:column="22"/></index></name></expr></argument>)<pos:position pos:line="20" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="24"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="22" pos:column="5">input_filename<pos:position pos:line="22" pos:column="19"/></name> <operator pos:line="22" pos:column="20">=<pos:position pos:line="22" pos:column="21"/></operator> <name><name pos:line="22" pos:column="22">argv<pos:position pos:line="22" pos:column="26"/></name><index pos:line="22" pos:column="26">[<expr><literal type="number" pos:line="22" pos:column="27">1<pos:position pos:line="22" pos:column="28"/></literal></expr>]<pos:position pos:line="22" pos:column="29"/></index></name></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name pos:line="23" pos:column="5">type_depend<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">=<pos:position pos:line="23" pos:column="18"/></operator> <name><name pos:line="23" pos:column="19">argv<pos:position pos:line="23" pos:column="23"/></name><index pos:line="23" pos:column="23">[<expr><literal type="number" pos:line="23" pos:column="24">2<pos:position pos:line="23" pos:column="25"/></literal></expr>]<pos:position pos:line="23" pos:column="26"/></index></name></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="25" pos:column="5">/*-------------------------------------------------------------------*
     * Parse type dependencies
     *-------------------------------------------------------------------*/</comment>
    <expr_stmt><expr><call><name><name pos:line="28" pos:column="5">fp<pos:position pos:line="28" pos:column="7"/></name><operator pos:line="28" pos:column="7">.<pos:position pos:line="28" pos:column="8"/></operator><name pos:line="28" pos:column="8">open<pos:position pos:line="28" pos:column="12"/></name></name><argument_list pos:line="28" pos:column="12">(<argument><expr><name pos:line="28" pos:column="13">type_depend<pos:position pos:line="28" pos:column="24"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="26">std<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">::<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="31">ifstream<pos:position pos:line="28" pos:column="39"/></name><operator pos:line="28" pos:column="39">::<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="41">in<pos:position pos:line="28" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></expr_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name><name pos:line="29" pos:column="9">fp<pos:position pos:line="29" pos:column="11"/></name><operator pos:line="29" pos:column="11">.<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">fail<pos:position pos:line="29" pos:column="16"/></name></name><argument_list pos:line="29" pos:column="16">()<pos:position pos:line="29" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="19"/></condition><then pos:line="29" pos:column="19"> <block pos:line="29" pos:column="20">{
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">std<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">::<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">cerr<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">&lt;&lt;<pos:position pos:line="30" pos:column="27"/></operator> <literal type="string" pos:line="30" pos:column="22">"Error while opening type dependencies file '"<pos:position pos:line="30" pos:column="68"/></literal> <operator pos:line="30" pos:column="69">&lt;&lt;<pos:position pos:line="30" pos:column="77"/></operator>
                  <name pos:line="31" pos:column="19">type_depend<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">&lt;&lt;<pos:position pos:line="31" pos:column="39"/></operator> <literal type="string" pos:line="31" pos:column="34">"': "<pos:position pos:line="31" pos:column="39"/></literal> <operator pos:line="31" pos:column="40">&lt;&lt;<pos:position pos:line="31" pos:column="48"/></operator> <call><name pos:line="31" pos:column="43">strerror<pos:position pos:line="31" pos:column="51"/></name><argument_list pos:line="31" pos:column="51">(<argument><expr><name pos:line="31" pos:column="52">errno<pos:position pos:line="31" pos:column="57"/></name></expr></argument>)<pos:position pos:line="31" pos:column="58"/></argument_list></call> <operator pos:line="31" pos:column="59">&lt;&lt;<pos:position pos:line="31" pos:column="67"/></operator> <name><name pos:line="31" pos:column="62">std<pos:position pos:line="31" pos:column="65"/></name><operator pos:line="31" pos:column="65">::<pos:position pos:line="31" pos:column="67"/></operator><name pos:line="31" pos:column="67">endl<pos:position pos:line="31" pos:column="71"/></name></name></expr>;<pos:position pos:line="31" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">exit<pos:position pos:line="32" pos:column="13"/></name><argument_list pos:line="32" pos:column="13">(<argument><expr><literal type="number" pos:line="32" pos:column="14">1<pos:position pos:line="32" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <while pos:line="35" pos:column="5">while <condition pos:line="35" pos:column="11">(<expr><call><name><name pos:line="35" pos:column="12">fp<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">.<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">good<pos:position pos:line="35" pos:column="19"/></name></name><argument_list pos:line="35" pos:column="19">()<pos:position pos:line="35" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="22"/></condition> <block pos:line="35" pos:column="23">{
        <expr_stmt><expr><call><name><name pos:line="36" pos:column="9">fp<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">.<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">getline<pos:position pos:line="36" pos:column="19"/></name></name><argument_list pos:line="36" pos:column="19">(<argument><expr><name pos:line="36" pos:column="20">buff<pos:position pos:line="36" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="36" pos:column="25">MAX_LINE<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="35"/></expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">const<pos:position pos:line="37" pos:column="14"/></specifier> <name pos:line="37" pos:column="15">char<pos:position pos:line="37" pos:column="19"/></name> <modifier pos:line="37" pos:column="20">*<pos:position pos:line="37" pos:column="21"/></modifier></type><name pos:line="37" pos:column="21">type<pos:position pos:line="37" pos:column="25"/></name> <init pos:line="37" pos:column="26">= <expr><call><name pos:line="37" pos:column="28">strtok<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name pos:line="37" pos:column="35">buff<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="41">WS<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="45"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="38" pos:column="9">const<pos:position pos:line="38" pos:column="14"/></specifier> <name pos:line="38" pos:column="15">char<pos:position pos:line="38" pos:column="19"/></name> <modifier pos:line="38" pos:column="20">*<pos:position pos:line="38" pos:column="21"/></modifier></type><name pos:line="38" pos:column="21">dep<pos:position pos:line="38" pos:column="24"/></name></decl>;<pos:position pos:line="38" pos:column="25"/></decl_stmt>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><operator pos:line="39" pos:column="13">!<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">type<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">||<pos:position pos:line="39" pos:column="21"/></operator> <name><name pos:line="39" pos:column="22">type<pos:position pos:line="39" pos:column="26"/></name><index pos:line="39" pos:column="26">[<expr><literal type="number" pos:line="39" pos:column="27">0<pos:position pos:line="39" pos:column="28"/></literal></expr>]<pos:position pos:line="39" pos:column="29"/></index></name> <operator pos:line="39" pos:column="30">==<pos:position pos:line="39" pos:column="32"/></operator> <literal type="char" pos:line="39" pos:column="33">'#'<pos:position pos:line="39" pos:column="36"/></literal></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37">
            <block type="pseudo"><continue pos:line="40" pos:column="13">continue;<pos:position pos:line="40" pos:column="22"/></continue></block></then></if>
        <decl_stmt><decl><type><name pos:line="41" pos:column="9">Type<pos:position pos:line="41" pos:column="13"/></name></type> <name pos:line="41" pos:column="14">t<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">type<pos:position pos:line="41" pos:column="20"/></name></expr></argument>)<pos:position pos:line="41" pos:column="21"/></argument_list></decl>;<pos:position pos:line="41" pos:column="22"/></decl_stmt>
        <while pos:line="42" pos:column="9">while <condition pos:line="42" pos:column="15">(<expr><operator pos:line="42" pos:column="16">(<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="17">dep<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <call><name pos:line="42" pos:column="23">strtok<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">NULL<pos:position pos:line="42" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="36">WS<pos:position pos:line="42" pos:column="38"/></name></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call><operator pos:line="42" pos:column="39">)<pos:position pos:line="42" pos:column="40"/></operator> <operator pos:line="42" pos:column="41">!=<pos:position pos:line="42" pos:column="43"/></operator> <name pos:line="42" pos:column="44">NULL<pos:position pos:line="42" pos:column="48"/></name></expr>)<pos:position pos:line="42" pos:column="49"/></condition> <block pos:line="42" pos:column="50">{
            <expr_stmt><expr><call><name><name pos:line="43" pos:column="13">t<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">.<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">depend<pos:position pos:line="43" pos:column="21"/></name><operator pos:line="43" pos:column="21">.<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="22">push_front<pos:position pos:line="43" pos:column="32"/></name></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">dep<pos:position pos:line="43" pos:column="36"/></name></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></while>
        <expr_stmt><expr><call><name><name pos:line="45" pos:column="9">types<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">.<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="15">push_front<pos:position pos:line="45" pos:column="25"/></name></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name pos:line="45" pos:column="26">t<pos:position pos:line="45" pos:column="27"/></name></expr></argument>)<pos:position pos:line="45" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name><name pos:line="47" pos:column="5">fp<pos:position pos:line="47" pos:column="7"/></name><operator pos:line="47" pos:column="7">.<pos:position pos:line="47" pos:column="8"/></operator><name pos:line="47" pos:column="8">close<pos:position pos:line="47" pos:column="13"/></name></name><argument_list pos:line="47" pos:column="13">()<pos:position pos:line="47" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="48" pos:column="5">fp<pos:position pos:line="48" pos:column="7"/></name><operator pos:line="48" pos:column="7">.<pos:position pos:line="48" pos:column="8"/></operator><name pos:line="48" pos:column="8">clear<pos:position pos:line="48" pos:column="13"/></name></name><argument_list pos:line="48" pos:column="13">()<pos:position pos:line="48" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="16"/></expr_stmt> <comment type="line" pos:line="48" pos:column="17">// BSD does not reset flags in close().</comment>

    <comment type="block" pos:line="50" pos:column="5">/*-------------------------------------------------------------------*
     * Parse input file
     *-------------------------------------------------------------------*/</comment>

    <comment type="block" pos:line="54" pos:column="5">/* Open input file */</comment>
    <expr_stmt><expr><call><name><name pos:line="55" pos:column="5">fp<pos:position pos:line="55" pos:column="7"/></name><operator pos:line="55" pos:column="7">.<pos:position pos:line="55" pos:column="8"/></operator><name pos:line="55" pos:column="8">open<pos:position pos:line="55" pos:column="12"/></name></name><argument_list pos:line="55" pos:column="12">(<argument><expr><name pos:line="55" pos:column="13">input_filename<pos:position pos:line="55" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="29">std<pos:position pos:line="55" pos:column="32"/></name><operator pos:line="55" pos:column="32">::<pos:position pos:line="55" pos:column="34"/></operator><name pos:line="55" pos:column="34">ifstream<pos:position pos:line="55" pos:column="42"/></name><operator pos:line="55" pos:column="42">::<pos:position pos:line="55" pos:column="44"/></operator><name pos:line="55" pos:column="44">in<pos:position pos:line="55" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="48"/></expr_stmt>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><call><name><name pos:line="56" pos:column="9">fp<pos:position pos:line="56" pos:column="11"/></name><operator pos:line="56" pos:column="11">.<pos:position pos:line="56" pos:column="12"/></operator><name pos:line="56" pos:column="12">fail<pos:position pos:line="56" pos:column="16"/></name></name><argument_list pos:line="56" pos:column="16">()<pos:position pos:line="56" pos:column="18"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="19"/></condition><then pos:line="56" pos:column="19"> <block pos:line="56" pos:column="20">{
        <expr_stmt><expr><name><name pos:line="57" pos:column="9">std<pos:position pos:line="57" pos:column="12"/></name><operator pos:line="57" pos:column="12">::<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">cerr<pos:position pos:line="57" pos:column="18"/></name></name> <operator pos:line="57" pos:column="19">&lt;&lt;<pos:position pos:line="57" pos:column="27"/></operator> <literal type="string" pos:line="57" pos:column="22">"Error while opening input file '"<pos:position pos:line="57" pos:column="56"/></literal> <operator pos:line="57" pos:column="57">&lt;&lt;<pos:position pos:line="57" pos:column="65"/></operator>
                  <name pos:line="58" pos:column="19">input_filename<pos:position pos:line="58" pos:column="33"/></name> <operator pos:line="58" pos:column="34">&lt;&lt;<pos:position pos:line="58" pos:column="42"/></operator> <literal type="string" pos:line="58" pos:column="37">"': "<pos:position pos:line="58" pos:column="42"/></literal> <operator pos:line="58" pos:column="43">&lt;&lt;<pos:position pos:line="58" pos:column="51"/></operator> <call><name pos:line="58" pos:column="46">strerror<pos:position pos:line="58" pos:column="54"/></name><argument_list pos:line="58" pos:column="54">(<argument><expr><name pos:line="58" pos:column="55">errno<pos:position pos:line="58" pos:column="60"/></name></expr></argument>)<pos:position pos:line="58" pos:column="61"/></argument_list></call> <operator pos:line="58" pos:column="62">&lt;&lt;<pos:position pos:line="58" pos:column="70"/></operator> <name><name pos:line="58" pos:column="65">std<pos:position pos:line="58" pos:column="68"/></name><operator pos:line="58" pos:column="68">::<pos:position pos:line="58" pos:column="70"/></operator><name pos:line="58" pos:column="70">endl<pos:position pos:line="58" pos:column="74"/></name></name></expr>;<pos:position pos:line="58" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">exit<pos:position pos:line="59" pos:column="13"/></name><argument_list pos:line="59" pos:column="13">(<argument><expr><literal type="number" pos:line="59" pos:column="14">1<pos:position pos:line="59" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="62" pos:column="5">state<pos:position pos:line="62" pos:column="10"/></name> <operator pos:line="62" pos:column="11">=<pos:position pos:line="62" pos:column="12"/></operator> <name pos:line="62" pos:column="13">sSTART<pos:position pos:line="62" pos:column="19"/></name></expr>;<pos:position pos:line="62" pos:column="20"/></expr_stmt>

    <while pos:line="64" pos:column="5">while <condition pos:line="64" pos:column="11">(<expr><call><name><name pos:line="64" pos:column="12">fp<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">.<pos:position pos:line="64" pos:column="15"/></operator><name pos:line="64" pos:column="15">getline<pos:position pos:line="64" pos:column="22"/></name></name><argument_list pos:line="64" pos:column="22">(<argument><expr><name pos:line="64" pos:column="23">buff<pos:position pos:line="64" pos:column="27"/></name></expr></argument>,<argument><expr><name pos:line="64" pos:column="28">MAX_LINE<pos:position pos:line="64" pos:column="36"/></name></expr></argument>)<pos:position pos:line="64" pos:column="37"/></argument_list></call></expr><operator pos:line="64" pos:column="37">,<pos:position pos:line="64" pos:column="38"/></operator> <expr><call><name><name pos:line="64" pos:column="39">fp<pos:position pos:line="64" pos:column="41"/></name><operator pos:line="64" pos:column="41">.<pos:position pos:line="64" pos:column="42"/></operator><name pos:line="64" pos:column="42">good<pos:position pos:line="64" pos:column="46"/></name></name><argument_list pos:line="64" pos:column="46">()<pos:position pos:line="64" pos:column="48"/></argument_list></call> <operator pos:line="64" pos:column="49">&amp;&amp;<pos:position pos:line="64" pos:column="59"/></operator> <name pos:line="64" pos:column="52">state<pos:position pos:line="64" pos:column="57"/></name> <operator pos:line="64" pos:column="58">!=<pos:position pos:line="64" pos:column="60"/></operator> <name pos:line="64" pos:column="61">sEXIT<pos:position pos:line="64" pos:column="66"/></name></expr>)<pos:position pos:line="64" pos:column="67"/></condition> <block pos:line="64" pos:column="68">{
        <decl_stmt><decl><type><name pos:line="65" pos:column="9">char<pos:position pos:line="65" pos:column="13"/></name> <modifier pos:line="65" pos:column="14">*<pos:position pos:line="65" pos:column="15"/></modifier></type><name pos:line="65" pos:column="15">t<pos:position pos:line="65" pos:column="16"/></name></decl>;<pos:position pos:line="65" pos:column="17"/></decl_stmt>

        <expr_stmt><expr><operator pos:line="67" pos:column="9">++<pos:position pos:line="67" pos:column="11"/></operator><name pos:line="67" pos:column="11">linenum<pos:position pos:line="67" pos:column="18"/></name></expr>;<pos:position pos:line="67" pos:column="19"/></expr_stmt>

        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><operator pos:line="69" pos:column="13">(<pos:position pos:line="69" pos:column="14"/></operator><name pos:line="69" pos:column="14">t<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">=<pos:position pos:line="69" pos:column="17"/></operator> <call><name pos:line="69" pos:column="18">strchr<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">buff<pos:position pos:line="69" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="69" pos:column="31">'\n'<pos:position pos:line="69" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="36"/></argument_list></call><operator pos:line="69" pos:column="36">)<pos:position pos:line="69" pos:column="37"/></operator></expr>)<pos:position pos:line="69" pos:column="38"/></condition><then pos:line="69" pos:column="38">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="70" pos:column="13">*<pos:position pos:line="70" pos:column="14"/></operator><name pos:line="70" pos:column="14">t<pos:position pos:line="70" pos:column="15"/></name> <operator pos:line="70" pos:column="16">=<pos:position pos:line="70" pos:column="17"/></operator> <literal type="char" pos:line="70" pos:column="18">'\0'<pos:position pos:line="70" pos:column="22"/></literal></expr>;<pos:position pos:line="70" pos:column="23"/></expr_stmt></block></then></if>

        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><call><name pos:line="72" pos:column="13">strncmp<pos:position pos:line="72" pos:column="20"/></name><argument_list pos:line="72" pos:column="20">(<argument><expr><name pos:line="72" pos:column="21">buff<pos:position pos:line="72" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="27">"IF "<pos:position pos:line="72" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="72" pos:column="34">3<pos:position pos:line="72" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="36"/></argument_list></call> <operator pos:line="72" pos:column="37">==<pos:position pos:line="72" pos:column="39"/></operator> <literal type="number" pos:line="72" pos:column="40">0<pos:position pos:line="72" pos:column="41"/></literal></expr>)<pos:position pos:line="72" pos:column="42"/></condition><then pos:line="72" pos:column="42"> <block pos:line="72" pos:column="43">{
            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">(<expr><operator pos:line="73" pos:column="17">(<pos:position pos:line="73" pos:column="18"/></operator><name pos:line="73" pos:column="18">ptr<pos:position pos:line="73" pos:column="21"/></name> <operator pos:line="73" pos:column="22">=<pos:position pos:line="73" pos:column="23"/></operator> <call><name pos:line="73" pos:column="24">strtok<pos:position pos:line="73" pos:column="30"/></name><argument_list pos:line="73" pos:column="30">(<argument><expr><name pos:line="73" pos:column="31">buff<pos:position pos:line="73" pos:column="35"/></name> <operator pos:line="73" pos:column="36">+<pos:position pos:line="73" pos:column="37"/></operator> <literal type="number" pos:line="73" pos:column="38">3<pos:position pos:line="73" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="41">WS<pos:position pos:line="73" pos:column="43"/></name></expr></argument>)<pos:position pos:line="73" pos:column="44"/></argument_list></call><operator pos:line="73" pos:column="44">)<pos:position pos:line="73" pos:column="45"/></operator> <operator pos:line="73" pos:column="46">==<pos:position pos:line="73" pos:column="48"/></operator> <name pos:line="73" pos:column="49">NULL<pos:position pos:line="73" pos:column="53"/></name></expr>)<pos:position pos:line="73" pos:column="54"/></condition><then pos:line="73" pos:column="54"> <block pos:line="73" pos:column="55">{
                <expr_stmt><expr><call><name pos:line="74" pos:column="17">errorMsg<pos:position pos:line="74" pos:column="25"/></name><argument_list pos:line="74" pos:column="25">(<argument><expr><name pos:line="74" pos:column="26">input_filename<pos:position pos:line="74" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="42">linenum<pos:position pos:line="74" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="51">"Missing IF parameter"<pos:position pos:line="74" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="75"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="75" pos:column="17">exit<pos:position pos:line="75" pos:column="21"/></name><argument_list pos:line="75" pos:column="21">(<argument><expr><literal type="number" pos:line="75" pos:column="22">1<pos:position pos:line="75" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="76" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name><name pos:line="77" pos:column="13">IFDEFS<pos:position pos:line="77" pos:column="19"/></name><operator pos:line="77" pos:column="19">.<pos:position pos:line="77" pos:column="20"/></operator><name pos:line="77" pos:column="20">push<pos:position pos:line="77" pos:column="24"/></name></name><argument_list pos:line="77" pos:column="24">(<argument><expr><name pos:line="77" pos:column="25">ptr<pos:position pos:line="77" pos:column="28"/></name></expr></argument>)<pos:position pos:line="77" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt>
            <continue pos:line="78" pos:column="13">continue;<pos:position pos:line="78" pos:column="22"/></continue>
        }<pos:position pos:line="79" pos:column="10"/></block></then> <elseif pos:line="79" pos:column="11">else <if pos:line="79" pos:column="16">if <condition pos:line="79" pos:column="19">(<expr><call><name pos:line="79" pos:column="20">strcmp<pos:position pos:line="79" pos:column="26"/></name><argument_list pos:line="79" pos:column="26">(<argument><expr><name pos:line="79" pos:column="27">buff<pos:position pos:line="79" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="33">"ENDIF"<pos:position pos:line="79" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="41"/></argument_list></call> <operator pos:line="79" pos:column="42">==<pos:position pos:line="79" pos:column="44"/></operator> <literal type="number" pos:line="79" pos:column="45">0<pos:position pos:line="79" pos:column="46"/></literal></expr>)<pos:position pos:line="79" pos:column="47"/></condition><then pos:line="79" pos:column="47"> <block pos:line="79" pos:column="48">{
            <if pos:line="80" pos:column="13">if <condition pos:line="80" pos:column="16">(<expr><call><name><name pos:line="80" pos:column="17">IFDEFS<pos:position pos:line="80" pos:column="23"/></name><operator pos:line="80" pos:column="23">.<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="24">size<pos:position pos:line="80" pos:column="28"/></name></name><argument_list pos:line="80" pos:column="28">()<pos:position pos:line="80" pos:column="30"/></argument_list></call> <operator pos:line="80" pos:column="31">==<pos:position pos:line="80" pos:column="33"/></operator> <literal type="number" pos:line="80" pos:column="34">0<pos:position pos:line="80" pos:column="35"/></literal></expr>)<pos:position pos:line="80" pos:column="36"/></condition><then pos:line="80" pos:column="36"> <block pos:line="80" pos:column="37">{
                <expr_stmt><expr><call><name pos:line="81" pos:column="17">errorMsg<pos:position pos:line="81" pos:column="25"/></name><argument_list pos:line="81" pos:column="25">(<argument><expr><name pos:line="81" pos:column="26">input_filename<pos:position pos:line="81" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="42">linenum<pos:position pos:line="81" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="51">"ENDIF without IF first"<pos:position pos:line="81" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="82" pos:column="17">exit<pos:position pos:line="82" pos:column="21"/></name><argument_list pos:line="82" pos:column="21">(<argument><expr><literal type="number" pos:line="82" pos:column="22">1<pos:position pos:line="82" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="83" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name><name pos:line="84" pos:column="13">IFDEFS<pos:position pos:line="84" pos:column="19"/></name><operator pos:line="84" pos:column="19">.<pos:position pos:line="84" pos:column="20"/></operator><name pos:line="84" pos:column="20">pop<pos:position pos:line="84" pos:column="23"/></name></name><argument_list pos:line="84" pos:column="23">()<pos:position pos:line="84" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="85" pos:column="10"/></block></then></if></elseif> <elseif pos:line="85" pos:column="11">else <if pos:line="85" pos:column="16">if <condition pos:line="85" pos:column="19">(<expr><operator pos:line="85" pos:column="20">!<pos:position pos:line="85" pos:column="21"/></operator><call><name><name pos:line="85" pos:column="21">IFDEFS<pos:position pos:line="85" pos:column="27"/></name><operator pos:line="85" pos:column="27">.<pos:position pos:line="85" pos:column="28"/></operator><name pos:line="85" pos:column="28">size<pos:position pos:line="85" pos:column="32"/></name></name><argument_list pos:line="85" pos:column="32">()<pos:position pos:line="85" pos:column="34"/></argument_list></call> <operator pos:line="85" pos:column="35">||<pos:position pos:line="85" pos:column="37"/></operator> <call><name pos:line="85" pos:column="38">isDefined<pos:position pos:line="85" pos:column="47"/></name><argument_list pos:line="85" pos:column="47">(<argument><expr><call><name><name pos:line="85" pos:column="48">IFDEFS<pos:position pos:line="85" pos:column="54"/></name><operator pos:line="85" pos:column="54">.<pos:position pos:line="85" pos:column="55"/></operator><name pos:line="85" pos:column="55">top<pos:position pos:line="85" pos:column="58"/></name></name><argument_list pos:line="85" pos:column="58">()<pos:position pos:line="85" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="85" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="85" pos:column="62"/></condition><then pos:line="85" pos:column="62">
            <block type="pseudo"><switch pos:line="86" pos:column="13">switch <condition pos:line="86" pos:column="20">(<expr><name pos:line="86" pos:column="21">state<pos:position pos:line="86" pos:column="26"/></name></expr>)<pos:position pos:line="86" pos:column="27"/></condition> <block pos:line="86" pos:column="28">{

            <case pos:line="88" pos:column="13">case <expr><name pos:line="88" pos:column="18">sSTART<pos:position pos:line="88" pos:column="24"/></name></expr>:<pos:position pos:line="88" pos:column="25"/></case>

                <if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><operator pos:line="90" pos:column="21">(<pos:position pos:line="90" pos:column="22"/></operator><call><name pos:line="90" pos:column="22">strlen<pos:position pos:line="90" pos:column="28"/></name><argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">buff<pos:position pos:line="90" pos:column="33"/></name></expr></argument>)<pos:position pos:line="90" pos:column="34"/></argument_list></call> <operator pos:line="90" pos:column="35">==<pos:position pos:line="90" pos:column="37"/></operator> <literal type="number" pos:line="90" pos:column="38">0<pos:position pos:line="90" pos:column="39"/></literal><operator pos:line="90" pos:column="39">)<pos:position pos:line="90" pos:column="40"/></operator> <operator pos:line="90" pos:column="41">||<pos:position pos:line="90" pos:column="43"/></operator> <operator pos:line="90" pos:column="44">(<pos:position pos:line="90" pos:column="45"/></operator><operator pos:line="90" pos:column="45">!<pos:position pos:line="90" pos:column="46"/></operator><call><name pos:line="90" pos:column="46">strncmp<pos:position pos:line="90" pos:column="53"/></name><argument_list pos:line="90" pos:column="53">(<argument><expr><name pos:line="90" pos:column="54">buff<pos:position pos:line="90" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="60">"#"<pos:position pos:line="90" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="65">1<pos:position pos:line="90" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="67"/></argument_list></call><operator pos:line="90" pos:column="67">)<pos:position pos:line="90" pos:column="68"/></operator></expr>)<pos:position pos:line="90" pos:column="69"/></condition><then pos:line="90" pos:column="69"> <block pos:line="90" pos:column="70">{
                    <comment type="block" pos:line="91" pos:column="21">/* ignore empty and comment lines */</comment>
                    <expr_stmt><expr><operator pos:line="92" pos:column="21">(<pos:position pos:line="92" pos:column="22"/></operator><name pos:line="92" pos:column="22">void<pos:position pos:line="92" pos:column="26"/></name><operator pos:line="92" pos:column="26">)<pos:position pos:line="92" pos:column="27"/></operator> <literal type="number" pos:line="92" pos:column="28">0<pos:position pos:line="92" pos:column="29"/></literal></expr>;<pos:position pos:line="92" pos:column="30"/></expr_stmt>
                }<pos:position pos:line="93" pos:column="18"/></block></then> <elseif pos:line="93" pos:column="19">else <if pos:line="93" pos:column="24">if <condition pos:line="93" pos:column="27">(<expr><operator pos:line="93" pos:column="28">!<pos:position pos:line="93" pos:column="29"/></operator><call><name pos:line="93" pos:column="29">strncmp<pos:position pos:line="93" pos:column="36"/></name><argument_list pos:line="93" pos:column="36">(<argument><expr><name pos:line="93" pos:column="37">buff<pos:position pos:line="93" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="43">"NAME:"<pos:position pos:line="93" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="52">5<pos:position pos:line="93" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="55"/></condition><then pos:line="93" pos:column="55"> <block pos:line="93" pos:column="56">{
                    <decl_stmt><decl><type><name pos:line="94" pos:column="21">char<pos:position pos:line="94" pos:column="25"/></name> <modifier pos:line="94" pos:column="26">*<pos:position pos:line="94" pos:column="27"/></modifier></type><name pos:line="94" pos:column="27">name<pos:position pos:line="94" pos:column="31"/></name></decl>, <modifier pos:line="94" pos:column="33">*<pos:position pos:line="94" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="94" pos:column="34">aliasname<pos:position pos:line="94" pos:column="43"/></name></decl>;<pos:position pos:line="94" pos:column="44"/></decl_stmt>

                    <if pos:line="96" pos:column="21">if <condition pos:line="96" pos:column="24">(<expr><operator pos:line="96" pos:column="25">(<pos:position pos:line="96" pos:column="26"/></operator><name pos:line="96" pos:column="26">name<pos:position pos:line="96" pos:column="30"/></name> <operator pos:line="96" pos:column="31">=<pos:position pos:line="96" pos:column="32"/></operator> <call><name pos:line="96" pos:column="33">strtok<pos:position pos:line="96" pos:column="39"/></name><argument_list pos:line="96" pos:column="39">(<argument><expr><name pos:line="96" pos:column="40">buff<pos:position pos:line="96" pos:column="44"/></name> <operator pos:line="96" pos:column="45">+<pos:position pos:line="96" pos:column="46"/></operator> <literal type="number" pos:line="96" pos:column="47">5<pos:position pos:line="96" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="50">WS<pos:position pos:line="96" pos:column="52"/></name></expr></argument>)<pos:position pos:line="96" pos:column="53"/></argument_list></call><operator pos:line="96" pos:column="53">)<pos:position pos:line="96" pos:column="54"/></operator> <operator pos:line="96" pos:column="55">==<pos:position pos:line="96" pos:column="57"/></operator> <name pos:line="96" pos:column="58">NULL<pos:position pos:line="96" pos:column="62"/></name></expr>)<pos:position pos:line="96" pos:column="63"/></condition><then pos:line="96" pos:column="63"> <block pos:line="96" pos:column="64">{
                        <expr_stmt><expr><call><name pos:line="97" pos:column="25">errorMsg<pos:position pos:line="97" pos:column="33"/></name><argument_list pos:line="97" pos:column="33">(<argument><expr><name pos:line="97" pos:column="34">input_filename<pos:position pos:line="97" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="50">linenum<pos:position pos:line="97" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="59">buff<pos:position pos:line="97" pos:column="63"/></name></expr></argument>)<pos:position pos:line="97" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="98" pos:column="25">exit<pos:position pos:line="98" pos:column="29"/></name><argument_list pos:line="98" pos:column="29">(<argument><expr><literal type="number" pos:line="98" pos:column="30">1<pos:position pos:line="98" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="33"/></expr_stmt>
                    }<pos:position pos:line="99" pos:column="22"/></block></then></if>

                    <expr_stmt><expr><call><name><name pos:line="101" pos:column="21">entries<pos:position pos:line="101" pos:column="28"/></name><operator pos:line="101" pos:column="28">.<pos:position pos:line="101" pos:column="29"/></operator><name pos:line="101" pos:column="29">push_back<pos:position pos:line="101" pos:column="38"/></name></name><argument_list pos:line="101" pos:column="38">(<argument><expr><name pos:line="101" pos:column="39">name<pos:position pos:line="101" pos:column="43"/></name></expr></argument>)<pos:position pos:line="101" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="45"/></expr_stmt>

                    <while pos:line="103" pos:column="21">while <condition pos:line="103" pos:column="27">(<expr><operator pos:line="103" pos:column="28">(<pos:position pos:line="103" pos:column="29"/></operator><name pos:line="103" pos:column="29">aliasname<pos:position pos:line="103" pos:column="38"/></name> <operator pos:line="103" pos:column="39">=<pos:position pos:line="103" pos:column="40"/></operator> <call><name pos:line="103" pos:column="41">strtok<pos:position pos:line="103" pos:column="47"/></name><argument_list pos:line="103" pos:column="47">(<argument><expr><name pos:line="103" pos:column="48">NULL<pos:position pos:line="103" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="54">WS<pos:position pos:line="103" pos:column="56"/></name></expr></argument>)<pos:position pos:line="103" pos:column="57"/></argument_list></call><operator pos:line="103" pos:column="57">)<pos:position pos:line="103" pos:column="58"/></operator> <operator pos:line="103" pos:column="59">!=<pos:position pos:line="103" pos:column="61"/></operator> <name pos:line="103" pos:column="62">NULL<pos:position pos:line="103" pos:column="66"/></name></expr>)<pos:position pos:line="103" pos:column="67"/></condition>
                        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="104" pos:column="25">entries<pos:position pos:line="104" pos:column="32"/></name><operator pos:line="104" pos:column="32">.<pos:position pos:line="104" pos:column="33"/></operator><name pos:line="104" pos:column="33">back<pos:position pos:line="104" pos:column="37"/></name></name><argument_list pos:line="104" pos:column="37">()<pos:position pos:line="104" pos:column="39"/></argument_list></call><operator pos:line="104" pos:column="39">.<pos:position pos:line="104" pos:column="40"/></operator><call><name><name pos:line="104" pos:column="40">alias<pos:position pos:line="104" pos:column="45"/></name><operator pos:line="104" pos:column="45">.<pos:position pos:line="104" pos:column="46"/></operator><name pos:line="104" pos:column="46">push_front<pos:position pos:line="104" pos:column="56"/></name></name><argument_list pos:line="104" pos:column="56">(<argument><expr><name pos:line="104" pos:column="57">aliasname<pos:position pos:line="104" pos:column="66"/></name></expr></argument>)<pos:position pos:line="104" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="68"/></expr_stmt></block></while>

                    <expr_stmt><expr><name pos:line="106" pos:column="21">state<pos:position pos:line="106" pos:column="26"/></name> <operator pos:line="106" pos:column="27">=<pos:position pos:line="106" pos:column="28"/></operator> <name pos:line="106" pos:column="29">s1<pos:position pos:line="106" pos:column="31"/></name></expr>;<pos:position pos:line="106" pos:column="32"/></expr_stmt>
                }<pos:position pos:line="107" pos:column="18"/></block></then></if></elseif> <elseif pos:line="107" pos:column="19">else <if pos:line="107" pos:column="24">if <condition pos:line="107" pos:column="27">(<expr><operator pos:line="107" pos:column="28">!<pos:position pos:line="107" pos:column="29"/></operator><call><name pos:line="107" pos:column="29">strcmp<pos:position pos:line="107" pos:column="35"/></name><argument_list pos:line="107" pos:column="35">(<argument><expr><name pos:line="107" pos:column="36">buff<pos:position pos:line="107" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="42">"EOF"<pos:position pos:line="107" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="107" pos:column="49"/></condition><then pos:line="107" pos:column="49"> <block pos:line="107" pos:column="50">{
                    <expr_stmt><expr><name pos:line="108" pos:column="21">state<pos:position pos:line="108" pos:column="26"/></name> <operator pos:line="108" pos:column="27">=<pos:position pos:line="108" pos:column="28"/></operator> <name pos:line="108" pos:column="29">sEXIT<pos:position pos:line="108" pos:column="34"/></name></expr>;<pos:position pos:line="108" pos:column="35"/></expr_stmt>
                }<pos:position pos:line="109" pos:column="18"/></block></then></if></elseif> <elseif pos:line="109" pos:column="19">else <if pos:line="109" pos:column="24">if <condition pos:line="109" pos:column="27">(<expr><operator pos:line="109" pos:column="28">!<pos:position pos:line="109" pos:column="29"/></operator><call><name pos:line="109" pos:column="29">strcmp<pos:position pos:line="109" pos:column="35"/></name><argument_list pos:line="109" pos:column="35">(<argument><expr><name pos:line="109" pos:column="36">buff<pos:position pos:line="109" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="42">"COMMENT_START"<pos:position pos:line="109" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="59"/></condition><then pos:line="109" pos:column="59"> <block pos:line="109" pos:column="60">{
                    <expr_stmt><expr><call><name><name pos:line="110" pos:column="21">entries<pos:position pos:line="110" pos:column="28"/></name><operator pos:line="110" pos:column="28">.<pos:position pos:line="110" pos:column="29"/></operator><name pos:line="110" pos:column="29">push_back<pos:position pos:line="110" pos:column="38"/></name></name><argument_list pos:line="110" pos:column="38">(<argument><expr><literal type="string" pos:line="110" pos:column="39">"comment"<pos:position pos:line="110" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="50"/></expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="111" pos:column="21">entries<pos:position pos:line="111" pos:column="28"/></name><operator pos:line="111" pos:column="28">.<pos:position pos:line="111" pos:column="29"/></operator><name pos:line="111" pos:column="29">back<pos:position pos:line="111" pos:column="33"/></name></name><argument_list pos:line="111" pos:column="33">()<pos:position pos:line="111" pos:column="35"/></argument_list></call><operator pos:line="111" pos:column="35">.<pos:position pos:line="111" pos:column="36"/></operator><name pos:line="111" pos:column="36">loc<pos:position pos:line="111" pos:column="39"/></name> <operator pos:line="111" pos:column="40">=<pos:position pos:line="111" pos:column="41"/></operator> <literal type="string" pos:line="111" pos:column="42">"none"<pos:position pos:line="111" pos:column="48"/></literal></expr>;<pos:position pos:line="111" pos:column="49"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="112" pos:column="21">state<pos:position pos:line="112" pos:column="26"/></name> <operator pos:line="112" pos:column="27">=<pos:position pos:line="112" pos:column="28"/></operator> <name pos:line="112" pos:column="29">sDOC<pos:position pos:line="112" pos:column="33"/></name></expr>;<pos:position pos:line="112" pos:column="34"/></expr_stmt>
                }<pos:position pos:line="113" pos:column="18"/></block></then></if></elseif> <else pos:line="113" pos:column="19">else <block pos:line="113" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="114" pos:column="21">errorMsg<pos:position pos:line="114" pos:column="29"/></name><argument_list pos:line="114" pos:column="29">(<argument><expr><name pos:line="114" pos:column="30">input_filename<pos:position pos:line="114" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="46">linenum<pos:position pos:line="114" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="55">buff<pos:position pos:line="114" pos:column="59"/></name></expr></argument>)<pos:position pos:line="114" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="61"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="115" pos:column="21">exit<pos:position pos:line="115" pos:column="25"/></name><argument_list pos:line="115" pos:column="25">(<argument><expr><literal type="number" pos:line="115" pos:column="26">1<pos:position pos:line="115" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="116" pos:column="18"/></block></else></if>

                <break pos:line="118" pos:column="17">break;<pos:position pos:line="118" pos:column="23"/></break>

            <case pos:line="120" pos:column="13">case <expr><name pos:line="120" pos:column="18">s1<pos:position pos:line="120" pos:column="20"/></name></expr>:<pos:position pos:line="120" pos:column="21"/></case> <block pos:line="120" pos:column="22">{
                <decl_stmt><decl><type><name pos:line="121" pos:column="17">Entry<pos:position pos:line="121" pos:column="22"/></name> <modifier pos:line="121" pos:column="23">&amp;<pos:position pos:line="121" pos:column="28"/></modifier></type><name pos:line="121" pos:column="24">curr<pos:position pos:line="121" pos:column="28"/></name> <init pos:line="121" pos:column="29">= <expr><call><name><name pos:line="121" pos:column="31">entries<pos:position pos:line="121" pos:column="38"/></name><operator pos:line="121" pos:column="38">.<pos:position pos:line="121" pos:column="39"/></operator><name pos:line="121" pos:column="39">back<pos:position pos:line="121" pos:column="43"/></name></name><argument_list pos:line="121" pos:column="43">()<pos:position pos:line="121" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="121" pos:column="46"/></decl_stmt>

                <if pos:line="123" pos:column="17">if <condition pos:line="123" pos:column="20">(<expr><operator pos:line="123" pos:column="21">(<pos:position pos:line="123" pos:column="22"/></operator><call><name pos:line="123" pos:column="22">strlen<pos:position pos:line="123" pos:column="28"/></name><argument_list pos:line="123" pos:column="28">(<argument><expr><name pos:line="123" pos:column="29">buff<pos:position pos:line="123" pos:column="33"/></name></expr></argument>)<pos:position pos:line="123" pos:column="34"/></argument_list></call> <operator pos:line="123" pos:column="35">==<pos:position pos:line="123" pos:column="37"/></operator> <literal type="number" pos:line="123" pos:column="38">0<pos:position pos:line="123" pos:column="39"/></literal><operator pos:line="123" pos:column="39">)<pos:position pos:line="123" pos:column="40"/></operator> <operator pos:line="123" pos:column="41">||<pos:position pos:line="123" pos:column="43"/></operator> <operator pos:line="123" pos:column="44">(<pos:position pos:line="123" pos:column="45"/></operator><operator pos:line="123" pos:column="45">!<pos:position pos:line="123" pos:column="46"/></operator><call><name pos:line="123" pos:column="46">strncmp<pos:position pos:line="123" pos:column="53"/></name><argument_list pos:line="123" pos:column="53">(<argument><expr><name pos:line="123" pos:column="54">buff<pos:position pos:line="123" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="60">"#"<pos:position pos:line="123" pos:column="63"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="123" pos:column="65">1<pos:position pos:line="123" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="67"/></argument_list></call><operator pos:line="123" pos:column="67">)<pos:position pos:line="123" pos:column="68"/></operator></expr>)<pos:position pos:line="123" pos:column="69"/></condition><then pos:line="123" pos:column="69"> <block pos:line="123" pos:column="70">{
                    <comment type="block" pos:line="124" pos:column="21">/* ignore empty and comment lines */</comment>
                    <expr_stmt><expr><operator pos:line="125" pos:column="21">(<pos:position pos:line="125" pos:column="22"/></operator><name pos:line="125" pos:column="22">void<pos:position pos:line="125" pos:column="26"/></name><operator pos:line="125" pos:column="26">)<pos:position pos:line="125" pos:column="27"/></operator> <literal type="number" pos:line="125" pos:column="28">0<pos:position pos:line="125" pos:column="29"/></literal></expr>;<pos:position pos:line="125" pos:column="30"/></expr_stmt>
                }<pos:position pos:line="126" pos:column="18"/></block></then> <elseif pos:line="126" pos:column="19">else <if pos:line="126" pos:column="24">if <condition pos:line="126" pos:column="27">(<expr><operator pos:line="126" pos:column="28">!<pos:position pos:line="126" pos:column="29"/></operator><call><name pos:line="126" pos:column="29">strncmp<pos:position pos:line="126" pos:column="36"/></name><argument_list pos:line="126" pos:column="36">(<argument><expr><name pos:line="126" pos:column="37">buff<pos:position pos:line="126" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="43">"COMMENT:"<pos:position pos:line="126" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="126" pos:column="55">8<pos:position pos:line="126" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="58"/></condition><then pos:line="126" pos:column="58"> <block pos:line="126" pos:column="59">{
                    <expr_stmt><expr><name pos:line="127" pos:column="21">ptr<pos:position pos:line="127" pos:column="24"/></name> <operator pos:line="127" pos:column="25">=<pos:position pos:line="127" pos:column="26"/></operator> <name pos:line="127" pos:column="27">buff<pos:position pos:line="127" pos:column="31"/></name> <operator pos:line="127" pos:column="32">+<pos:position pos:line="127" pos:column="33"/></operator> <literal type="number" pos:line="127" pos:column="34">8<pos:position pos:line="127" pos:column="35"/></literal></expr>;<pos:position pos:line="127" pos:column="36"/></expr_stmt>

                    <while pos:line="129" pos:column="21">while <condition pos:line="129" pos:column="27">(<expr><call><name pos:line="129" pos:column="28">isspace<pos:position pos:line="129" pos:column="35"/></name><argument_list pos:line="129" pos:column="35">(<argument><expr><operator pos:line="129" pos:column="36">(<pos:position pos:line="129" pos:column="37"/></operator><name pos:line="129" pos:column="37">unsigned<pos:position pos:line="129" pos:column="45"/></name> <name pos:line="129" pos:column="46">char<pos:position pos:line="129" pos:column="50"/></name><operator pos:line="129" pos:column="50">)<pos:position pos:line="129" pos:column="51"/></operator><operator pos:line="129" pos:column="51">*<pos:position pos:line="129" pos:column="52"/></operator><name pos:line="129" pos:column="52">ptr<pos:position pos:line="129" pos:column="55"/></name></expr></argument>)<pos:position pos:line="129" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="129" pos:column="57"/></condition>
                        <block type="pseudo"><expr_stmt><expr><operator pos:line="130" pos:column="25">++<pos:position pos:line="130" pos:column="27"/></operator><name pos:line="130" pos:column="27">ptr<pos:position pos:line="130" pos:column="30"/></name></expr>;<pos:position pos:line="130" pos:column="31"/></expr_stmt></block></while>

                    <expr_stmt><expr><name><name pos:line="132" pos:column="21">curr<pos:position pos:line="132" pos:column="25"/></name><operator pos:line="132" pos:column="25">.<pos:position pos:line="132" pos:column="26"/></operator><name pos:line="132" pos:column="26">comment<pos:position pos:line="132" pos:column="33"/></name></name> <operator pos:line="132" pos:column="34">=<pos:position pos:line="132" pos:column="35"/></operator> <name pos:line="132" pos:column="36">ptr<pos:position pos:line="132" pos:column="39"/></name></expr>;<pos:position pos:line="132" pos:column="40"/></expr_stmt>
                }<pos:position pos:line="133" pos:column="18"/></block></then></if></elseif> <elseif pos:line="133" pos:column="19">else <if pos:line="133" pos:column="24">if <condition pos:line="133" pos:column="27">(<expr><operator pos:line="133" pos:column="28">!<pos:position pos:line="133" pos:column="29"/></operator><call><name pos:line="133" pos:column="29">strncmp<pos:position pos:line="133" pos:column="36"/></name><argument_list pos:line="133" pos:column="36">(<argument><expr><name pos:line="133" pos:column="37">buff<pos:position pos:line="133" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="43">"DEFAULT:"<pos:position pos:line="133" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="133" pos:column="55">8<pos:position pos:line="133" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="58"/></condition><then pos:line="133" pos:column="58"> <block pos:line="133" pos:column="59">{
                    <expr_stmt><expr><name pos:line="134" pos:column="21">ptr<pos:position pos:line="134" pos:column="24"/></name> <operator pos:line="134" pos:column="25">=<pos:position pos:line="134" pos:column="26"/></operator> <name pos:line="134" pos:column="27">buff<pos:position pos:line="134" pos:column="31"/></name> <operator pos:line="134" pos:column="32">+<pos:position pos:line="134" pos:column="33"/></operator> <literal type="number" pos:line="134" pos:column="34">8<pos:position pos:line="134" pos:column="35"/></literal></expr>;<pos:position pos:line="134" pos:column="36"/></expr_stmt>

                    <while pos:line="136" pos:column="21">while <condition pos:line="136" pos:column="27">(<expr><call><name pos:line="136" pos:column="28">isspace<pos:position pos:line="136" pos:column="35"/></name><argument_list pos:line="136" pos:column="35">(<argument><expr><operator pos:line="136" pos:column="36">(<pos:position pos:line="136" pos:column="37"/></operator><name pos:line="136" pos:column="37">unsigned<pos:position pos:line="136" pos:column="45"/></name> <name pos:line="136" pos:column="46">char<pos:position pos:line="136" pos:column="50"/></name><operator pos:line="136" pos:column="50">)<pos:position pos:line="136" pos:column="51"/></operator><operator pos:line="136" pos:column="51">*<pos:position pos:line="136" pos:column="52"/></operator><name pos:line="136" pos:column="52">ptr<pos:position pos:line="136" pos:column="55"/></name></expr></argument>)<pos:position pos:line="136" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="136" pos:column="57"/></condition>
                        <block type="pseudo"><expr_stmt><expr><operator pos:line="137" pos:column="25">++<pos:position pos:line="137" pos:column="27"/></operator><name pos:line="137" pos:column="27">ptr<pos:position pos:line="137" pos:column="30"/></name></expr>;<pos:position pos:line="137" pos:column="31"/></expr_stmt></block></while>

                    <expr_stmt><expr><call><name><name pos:line="139" pos:column="21">curr<pos:position pos:line="139" pos:column="25"/></name><operator pos:line="139" pos:column="25">.<pos:position pos:line="139" pos:column="26"/></operator><name pos:line="139" pos:column="26">defaults<pos:position pos:line="139" pos:column="34"/></name><operator pos:line="139" pos:column="34">.<pos:position pos:line="139" pos:column="35"/></operator><name pos:line="139" pos:column="35">preset<pos:position pos:line="139" pos:column="41"/></name><operator pos:line="139" pos:column="41">.<pos:position pos:line="139" pos:column="42"/></operator><name pos:line="139" pos:column="42">push_back<pos:position pos:line="139" pos:column="51"/></name></name><argument_list pos:line="139" pos:column="51">(<argument><expr><name pos:line="139" pos:column="52">ptr<pos:position pos:line="139" pos:column="55"/></name></expr></argument>)<pos:position pos:line="139" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="57"/></expr_stmt>
                }<pos:position pos:line="140" pos:column="18"/></block></then></if></elseif> <elseif pos:line="140" pos:column="19">else <if pos:line="140" pos:column="24">if <condition pos:line="140" pos:column="27">(<expr><operator pos:line="140" pos:column="28">!<pos:position pos:line="140" pos:column="29"/></operator><call><name pos:line="140" pos:column="29">strncmp<pos:position pos:line="140" pos:column="36"/></name><argument_list pos:line="140" pos:column="36">(<argument><expr><name pos:line="140" pos:column="37">buff<pos:position pos:line="140" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="140" pos:column="43">"DEFAULT_IF_NONE:"<pos:position pos:line="140" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="140" pos:column="63">16<pos:position pos:line="140" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="140" pos:column="67"/></condition><then pos:line="140" pos:column="67"> <block pos:line="140" pos:column="68">{
                    <expr_stmt><expr><name pos:line="141" pos:column="21">ptr<pos:position pos:line="141" pos:column="24"/></name> <operator pos:line="141" pos:column="25">=<pos:position pos:line="141" pos:column="26"/></operator> <name pos:line="141" pos:column="27">buff<pos:position pos:line="141" pos:column="31"/></name> <operator pos:line="141" pos:column="32">+<pos:position pos:line="141" pos:column="33"/></operator> <literal type="number" pos:line="141" pos:column="34">16<pos:position pos:line="141" pos:column="36"/></literal></expr>;<pos:position pos:line="141" pos:column="37"/></expr_stmt>

                    <while pos:line="143" pos:column="21">while <condition pos:line="143" pos:column="27">(<expr><call><name pos:line="143" pos:column="28">isspace<pos:position pos:line="143" pos:column="35"/></name><argument_list pos:line="143" pos:column="35">(<argument><expr><operator pos:line="143" pos:column="36">(<pos:position pos:line="143" pos:column="37"/></operator><name pos:line="143" pos:column="37">unsigned<pos:position pos:line="143" pos:column="45"/></name> <name pos:line="143" pos:column="46">char<pos:position pos:line="143" pos:column="50"/></name><operator pos:line="143" pos:column="50">)<pos:position pos:line="143" pos:column="51"/></operator><operator pos:line="143" pos:column="51">*<pos:position pos:line="143" pos:column="52"/></operator><name pos:line="143" pos:column="52">ptr<pos:position pos:line="143" pos:column="55"/></name></expr></argument>)<pos:position pos:line="143" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="143" pos:column="57"/></condition>
                        <block type="pseudo"><expr_stmt><expr><operator pos:line="144" pos:column="25">++<pos:position pos:line="144" pos:column="27"/></operator><name pos:line="144" pos:column="27">ptr<pos:position pos:line="144" pos:column="30"/></name></expr>;<pos:position pos:line="144" pos:column="31"/></expr_stmt></block></while>

                    <expr_stmt><expr><call><name><name pos:line="146" pos:column="21">curr<pos:position pos:line="146" pos:column="25"/></name><operator pos:line="146" pos:column="25">.<pos:position pos:line="146" pos:column="26"/></operator><name pos:line="146" pos:column="26">defaults<pos:position pos:line="146" pos:column="34"/></name><operator pos:line="146" pos:column="34">.<pos:position pos:line="146" pos:column="35"/></operator><name pos:line="146" pos:column="35">if_none<pos:position pos:line="146" pos:column="42"/></name><operator pos:line="146" pos:column="42">.<pos:position pos:line="146" pos:column="43"/></operator><name pos:line="146" pos:column="43">push_back<pos:position pos:line="146" pos:column="52"/></name></name><argument_list pos:line="146" pos:column="52">(<argument><expr><name pos:line="146" pos:column="53">ptr<pos:position pos:line="146" pos:column="56"/></name></expr></argument>)<pos:position pos:line="146" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="58"/></expr_stmt>
                }<pos:position pos:line="147" pos:column="18"/></block></then></if></elseif> <elseif pos:line="147" pos:column="19">else <if pos:line="147" pos:column="24">if <condition pos:line="147" pos:column="27">(<expr><operator pos:line="147" pos:column="28">!<pos:position pos:line="147" pos:column="29"/></operator><call><name pos:line="147" pos:column="29">strncmp<pos:position pos:line="147" pos:column="36"/></name><argument_list pos:line="147" pos:column="36">(<argument><expr><name pos:line="147" pos:column="37">buff<pos:position pos:line="147" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="43">"POSTSCRIPTUM:"<pos:position pos:line="147" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="147" pos:column="60">13<pos:position pos:line="147" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="64"/></condition><then pos:line="147" pos:column="64"> <block pos:line="147" pos:column="65">{
                    <expr_stmt><expr><name pos:line="148" pos:column="21">ptr<pos:position pos:line="148" pos:column="24"/></name> <operator pos:line="148" pos:column="25">=<pos:position pos:line="148" pos:column="26"/></operator> <name pos:line="148" pos:column="27">buff<pos:position pos:line="148" pos:column="31"/></name> <operator pos:line="148" pos:column="32">+<pos:position pos:line="148" pos:column="33"/></operator> <literal type="number" pos:line="148" pos:column="34">13<pos:position pos:line="148" pos:column="36"/></literal></expr>;<pos:position pos:line="148" pos:column="37"/></expr_stmt>

                    <while pos:line="150" pos:column="21">while <condition pos:line="150" pos:column="27">(<expr><call><name pos:line="150" pos:column="28">isspace<pos:position pos:line="150" pos:column="35"/></name><argument_list pos:line="150" pos:column="35">(<argument><expr><operator pos:line="150" pos:column="36">(<pos:position pos:line="150" pos:column="37"/></operator><name pos:line="150" pos:column="37">unsigned<pos:position pos:line="150" pos:column="45"/></name> <name pos:line="150" pos:column="46">char<pos:position pos:line="150" pos:column="50"/></name><operator pos:line="150" pos:column="50">)<pos:position pos:line="150" pos:column="51"/></operator><operator pos:line="150" pos:column="51">*<pos:position pos:line="150" pos:column="52"/></operator><name pos:line="150" pos:column="52">ptr<pos:position pos:line="150" pos:column="55"/></name></expr></argument>)<pos:position pos:line="150" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="150" pos:column="57"/></condition>
                        <block type="pseudo"><expr_stmt><expr><operator pos:line="151" pos:column="25">++<pos:position pos:line="151" pos:column="27"/></operator><name pos:line="151" pos:column="27">ptr<pos:position pos:line="151" pos:column="30"/></name></expr>;<pos:position pos:line="151" pos:column="31"/></expr_stmt></block></while>

                    <expr_stmt><expr><call><name><name pos:line="153" pos:column="21">curr<pos:position pos:line="153" pos:column="25"/></name><operator pos:line="153" pos:column="25">.<pos:position pos:line="153" pos:column="26"/></operator><name pos:line="153" pos:column="26">defaults<pos:position pos:line="153" pos:column="34"/></name><operator pos:line="153" pos:column="34">.<pos:position pos:line="153" pos:column="35"/></operator><name pos:line="153" pos:column="35">postscriptum<pos:position pos:line="153" pos:column="47"/></name><operator pos:line="153" pos:column="47">.<pos:position pos:line="153" pos:column="48"/></operator><name pos:line="153" pos:column="48">push_back<pos:position pos:line="153" pos:column="57"/></name></name><argument_list pos:line="153" pos:column="57">(<argument><expr><name pos:line="153" pos:column="58">ptr<pos:position pos:line="153" pos:column="61"/></name></expr></argument>)<pos:position pos:line="153" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="63"/></expr_stmt>
                }<pos:position pos:line="154" pos:column="18"/></block></then></if></elseif> <elseif pos:line="154" pos:column="19">else <if pos:line="154" pos:column="24">if <condition pos:line="154" pos:column="27">(<expr><operator pos:line="154" pos:column="28">!<pos:position pos:line="154" pos:column="29"/></operator><call><name pos:line="154" pos:column="29">strncmp<pos:position pos:line="154" pos:column="36"/></name><argument_list pos:line="154" pos:column="36">(<argument><expr><name pos:line="154" pos:column="37">buff<pos:position pos:line="154" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="154" pos:column="43">"DEFAULT_DOC:"<pos:position pos:line="154" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="154" pos:column="59">12<pos:position pos:line="154" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="154" pos:column="63"/></condition><then pos:line="154" pos:column="63"> <block pos:line="154" pos:column="64">{
                    <expr_stmt><expr><name pos:line="155" pos:column="21">ptr<pos:position pos:line="155" pos:column="24"/></name> <operator pos:line="155" pos:column="25">=<pos:position pos:line="155" pos:column="26"/></operator> <name pos:line="155" pos:column="27">buff<pos:position pos:line="155" pos:column="31"/></name> <operator pos:line="155" pos:column="32">+<pos:position pos:line="155" pos:column="33"/></operator> <literal type="number" pos:line="155" pos:column="34">12<pos:position pos:line="155" pos:column="36"/></literal></expr>;<pos:position pos:line="155" pos:column="37"/></expr_stmt>

                    <while pos:line="157" pos:column="21">while <condition pos:line="157" pos:column="27">(<expr><call><name pos:line="157" pos:column="28">isspace<pos:position pos:line="157" pos:column="35"/></name><argument_list pos:line="157" pos:column="35">(<argument><expr><operator pos:line="157" pos:column="36">(<pos:position pos:line="157" pos:column="37"/></operator><name pos:line="157" pos:column="37">unsigned<pos:position pos:line="157" pos:column="45"/></name> <name pos:line="157" pos:column="46">char<pos:position pos:line="157" pos:column="50"/></name><operator pos:line="157" pos:column="50">)<pos:position pos:line="157" pos:column="51"/></operator><operator pos:line="157" pos:column="51">*<pos:position pos:line="157" pos:column="52"/></operator><name pos:line="157" pos:column="52">ptr<pos:position pos:line="157" pos:column="55"/></name></expr></argument>)<pos:position pos:line="157" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="157" pos:column="57"/></condition>
                        <block type="pseudo"><expr_stmt><expr><operator pos:line="158" pos:column="25">++<pos:position pos:line="158" pos:column="27"/></operator><name pos:line="158" pos:column="27">ptr<pos:position pos:line="158" pos:column="30"/></name></expr>;<pos:position pos:line="158" pos:column="31"/></expr_stmt></block></while>

                    <expr_stmt><expr><call><name><name pos:line="160" pos:column="21">curr<pos:position pos:line="160" pos:column="25"/></name><operator pos:line="160" pos:column="25">.<pos:position pos:line="160" pos:column="26"/></operator><name pos:line="160" pos:column="26">defaults<pos:position pos:line="160" pos:column="34"/></name><operator pos:line="160" pos:column="34">.<pos:position pos:line="160" pos:column="35"/></operator><name pos:line="160" pos:column="35">docs<pos:position pos:line="160" pos:column="39"/></name><operator pos:line="160" pos:column="39">.<pos:position pos:line="160" pos:column="40"/></operator><name pos:line="160" pos:column="40">push_back<pos:position pos:line="160" pos:column="49"/></name></name><argument_list pos:line="160" pos:column="49">(<argument><expr><name pos:line="160" pos:column="50">ptr<pos:position pos:line="160" pos:column="53"/></name></expr></argument>)<pos:position pos:line="160" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="55"/></expr_stmt>
                }<pos:position pos:line="161" pos:column="18"/></block></then></if></elseif> <elseif pos:line="161" pos:column="19">else <if pos:line="161" pos:column="24">if <condition pos:line="161" pos:column="27">(<expr><operator pos:line="161" pos:column="28">!<pos:position pos:line="161" pos:column="29"/></operator><call><name pos:line="161" pos:column="29">strncmp<pos:position pos:line="161" pos:column="36"/></name><argument_list pos:line="161" pos:column="36">(<argument><expr><name pos:line="161" pos:column="37">buff<pos:position pos:line="161" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="161" pos:column="43">"LOC:"<pos:position pos:line="161" pos:column="49"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="161" pos:column="51">4<pos:position pos:line="161" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="161" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="161" pos:column="54"/></condition><then pos:line="161" pos:column="54"> <block pos:line="161" pos:column="55">{
                    <if pos:line="162" pos:column="21">if <condition pos:line="162" pos:column="24">(<expr><operator pos:line="162" pos:column="25">(<pos:position pos:line="162" pos:column="26"/></operator><name pos:line="162" pos:column="26">ptr<pos:position pos:line="162" pos:column="29"/></name> <operator pos:line="162" pos:column="30">=<pos:position pos:line="162" pos:column="31"/></operator> <call><name pos:line="162" pos:column="32">strtok<pos:position pos:line="162" pos:column="38"/></name><argument_list pos:line="162" pos:column="38">(<argument><expr><name pos:line="162" pos:column="39">buff<pos:position pos:line="162" pos:column="43"/></name> <operator pos:line="162" pos:column="44">+<pos:position pos:line="162" pos:column="45"/></operator> <literal type="number" pos:line="162" pos:column="46">4<pos:position pos:line="162" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="49">WS<pos:position pos:line="162" pos:column="51"/></name></expr></argument>)<pos:position pos:line="162" pos:column="52"/></argument_list></call><operator pos:line="162" pos:column="52">)<pos:position pos:line="162" pos:column="53"/></operator> <operator pos:line="162" pos:column="54">==<pos:position pos:line="162" pos:column="56"/></operator> <name pos:line="162" pos:column="57">NULL<pos:position pos:line="162" pos:column="61"/></name></expr>)<pos:position pos:line="162" pos:column="62"/></condition><then pos:line="162" pos:column="62"> <block pos:line="162" pos:column="63">{
                        <expr_stmt><expr><call><name pos:line="163" pos:column="25">errorMsg<pos:position pos:line="163" pos:column="33"/></name><argument_list pos:line="163" pos:column="33">(<argument><expr><name pos:line="163" pos:column="34">input_filename<pos:position pos:line="163" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="50">linenum<pos:position pos:line="163" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="59">buff<pos:position pos:line="163" pos:column="63"/></name></expr></argument>)<pos:position pos:line="163" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="164" pos:column="25">exit<pos:position pos:line="164" pos:column="29"/></name><argument_list pos:line="164" pos:column="29">(<argument><expr><literal type="number" pos:line="164" pos:column="30">1<pos:position pos:line="164" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="164" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="33"/></expr_stmt>
                    }<pos:position pos:line="165" pos:column="22"/></block></then></if>

                    <expr_stmt><expr><name><name pos:line="167" pos:column="21">curr<pos:position pos:line="167" pos:column="25"/></name><operator pos:line="167" pos:column="25">.<pos:position pos:line="167" pos:column="26"/></operator><name pos:line="167" pos:column="26">loc<pos:position pos:line="167" pos:column="29"/></name></name> <operator pos:line="167" pos:column="30">=<pos:position pos:line="167" pos:column="31"/></operator> <name pos:line="167" pos:column="32">ptr<pos:position pos:line="167" pos:column="35"/></name></expr>;<pos:position pos:line="167" pos:column="36"/></expr_stmt>
                }<pos:position pos:line="168" pos:column="18"/></block></then></if></elseif> <elseif pos:line="168" pos:column="19">else <if pos:line="168" pos:column="24">if <condition pos:line="168" pos:column="27">(<expr><operator pos:line="168" pos:column="28">!<pos:position pos:line="168" pos:column="29"/></operator><call><name pos:line="168" pos:column="29">strncmp<pos:position pos:line="168" pos:column="36"/></name><argument_list pos:line="168" pos:column="36">(<argument><expr><name pos:line="168" pos:column="37">buff<pos:position pos:line="168" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="168" pos:column="43">"TYPE:"<pos:position pos:line="168" pos:column="50"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="168" pos:column="52">5<pos:position pos:line="168" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="168" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="168" pos:column="55"/></condition><then pos:line="168" pos:column="55"> <block pos:line="168" pos:column="56">{
                    <if pos:line="169" pos:column="21">if <condition pos:line="169" pos:column="24">(<expr><operator pos:line="169" pos:column="25">(<pos:position pos:line="169" pos:column="26"/></operator><name pos:line="169" pos:column="26">ptr<pos:position pos:line="169" pos:column="29"/></name> <operator pos:line="169" pos:column="30">=<pos:position pos:line="169" pos:column="31"/></operator> <call><name pos:line="169" pos:column="32">strtok<pos:position pos:line="169" pos:column="38"/></name><argument_list pos:line="169" pos:column="38">(<argument><expr><name pos:line="169" pos:column="39">buff<pos:position pos:line="169" pos:column="43"/></name> <operator pos:line="169" pos:column="44">+<pos:position pos:line="169" pos:column="45"/></operator> <literal type="number" pos:line="169" pos:column="46">5<pos:position pos:line="169" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="49">WS<pos:position pos:line="169" pos:column="51"/></name></expr></argument>)<pos:position pos:line="169" pos:column="52"/></argument_list></call><operator pos:line="169" pos:column="52">)<pos:position pos:line="169" pos:column="53"/></operator> <operator pos:line="169" pos:column="54">==<pos:position pos:line="169" pos:column="56"/></operator> <name pos:line="169" pos:column="57">NULL<pos:position pos:line="169" pos:column="61"/></name></expr>)<pos:position pos:line="169" pos:column="62"/></condition><then pos:line="169" pos:column="62"> <block pos:line="169" pos:column="63">{
                        <expr_stmt><expr><call><name pos:line="170" pos:column="25">errorMsg<pos:position pos:line="170" pos:column="33"/></name><argument_list pos:line="170" pos:column="33">(<argument><expr><name pos:line="170" pos:column="34">input_filename<pos:position pos:line="170" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="50">linenum<pos:position pos:line="170" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="59">buff<pos:position pos:line="170" pos:column="63"/></name></expr></argument>)<pos:position pos:line="170" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="170" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="171" pos:column="25">exit<pos:position pos:line="171" pos:column="29"/></name><argument_list pos:line="171" pos:column="29">(<argument><expr><literal type="number" pos:line="171" pos:column="30">1<pos:position pos:line="171" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="171" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="33"/></expr_stmt>
                    }<pos:position pos:line="172" pos:column="22"/></block></then></if>

                    <comment type="block" pos:line="174" pos:column="21">/* hack to support arrays, rather than pointers */</comment>
                    <if pos:line="175" pos:column="21">if <condition pos:line="175" pos:column="24">(<expr><literal type="number" pos:line="175" pos:column="25">0<pos:position pos:line="175" pos:column="26"/></literal> <operator pos:line="175" pos:column="27">==<pos:position pos:line="175" pos:column="29"/></operator> <call><name pos:line="175" pos:column="30">strcmp<pos:position pos:line="175" pos:column="36"/></name><argument_list pos:line="175" pos:column="36">(<argument><expr><name pos:line="175" pos:column="37">ptr<pos:position pos:line="175" pos:column="40"/></name> <operator pos:line="175" pos:column="41">+<pos:position pos:line="175" pos:column="42"/></operator> <call><name pos:line="175" pos:column="43">strlen<pos:position pos:line="175" pos:column="49"/></name><argument_list pos:line="175" pos:column="49">(<argument><expr><name pos:line="175" pos:column="50">ptr<pos:position pos:line="175" pos:column="53"/></name></expr></argument>)<pos:position pos:line="175" pos:column="54"/></argument_list></call> <operator pos:line="175" pos:column="55">-<pos:position pos:line="175" pos:column="56"/></operator> <literal type="number" pos:line="175" pos:column="57">2<pos:position pos:line="175" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="60">"[]"<pos:position pos:line="175" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="175" pos:column="66"/></condition><then pos:line="175" pos:column="66"> <block pos:line="175" pos:column="67">{
                        <expr_stmt><expr><name><name pos:line="176" pos:column="25">curr<pos:position pos:line="176" pos:column="29"/></name><operator pos:line="176" pos:column="29">.<pos:position pos:line="176" pos:column="30"/></operator><name pos:line="176" pos:column="30">array_flag<pos:position pos:line="176" pos:column="40"/></name></name> <operator pos:line="176" pos:column="41">=<pos:position pos:line="176" pos:column="42"/></operator> <literal type="number" pos:line="176" pos:column="43">1<pos:position pos:line="176" pos:column="44"/></literal></expr>;<pos:position pos:line="176" pos:column="45"/></expr_stmt>
                        <expr_stmt><expr><operator pos:line="177" pos:column="25">*<pos:position pos:line="177" pos:column="26"/></operator><operator pos:line="177" pos:column="26">(<pos:position pos:line="177" pos:column="27"/></operator><name pos:line="177" pos:column="27">ptr<pos:position pos:line="177" pos:column="30"/></name> <operator pos:line="177" pos:column="31">+<pos:position pos:line="177" pos:column="32"/></operator> <call><name pos:line="177" pos:column="33">strlen<pos:position pos:line="177" pos:column="39"/></name><argument_list pos:line="177" pos:column="39">(<argument><expr><name pos:line="177" pos:column="40">ptr<pos:position pos:line="177" pos:column="43"/></name></expr></argument>)<pos:position pos:line="177" pos:column="44"/></argument_list></call> <operator pos:line="177" pos:column="45">-<pos:position pos:line="177" pos:column="46"/></operator> <literal type="number" pos:line="177" pos:column="47">2<pos:position pos:line="177" pos:column="48"/></literal><operator pos:line="177" pos:column="48">)<pos:position pos:line="177" pos:column="49"/></operator> <operator pos:line="177" pos:column="50">=<pos:position pos:line="177" pos:column="51"/></operator> <literal type="char" pos:line="177" pos:column="52">'\0'<pos:position pos:line="177" pos:column="56"/></literal></expr>;<pos:position pos:line="177" pos:column="57"/></expr_stmt>
                    }<pos:position pos:line="178" pos:column="22"/></block></then></if>

                    <expr_stmt><expr><call><name pos:line="180" pos:column="21">checkDepend<pos:position pos:line="180" pos:column="32"/></name><argument_list pos:line="180" pos:column="32">(<argument><expr><name><name pos:line="180" pos:column="33">curr<pos:position pos:line="180" pos:column="37"/></name><operator pos:line="180" pos:column="37">.<pos:position pos:line="180" pos:column="38"/></operator><name pos:line="180" pos:column="38">name<pos:position pos:line="180" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="44">ptr<pos:position pos:line="180" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="49">types<pos:position pos:line="180" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="56">entries<pos:position pos:line="180" pos:column="63"/></name></expr></argument>)<pos:position pos:line="180" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="65"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="181" pos:column="21">curr<pos:position pos:line="181" pos:column="25"/></name><operator pos:line="181" pos:column="25">.<pos:position pos:line="181" pos:column="26"/></operator><name pos:line="181" pos:column="26">type<pos:position pos:line="181" pos:column="30"/></name></name> <operator pos:line="181" pos:column="31">=<pos:position pos:line="181" pos:column="32"/></operator> <name pos:line="181" pos:column="33">ptr<pos:position pos:line="181" pos:column="36"/></name></expr>;<pos:position pos:line="181" pos:column="37"/></expr_stmt>
                }<pos:position pos:line="182" pos:column="18"/></block></then></if></elseif> <elseif pos:line="182" pos:column="19">else <if pos:line="182" pos:column="24">if <condition pos:line="182" pos:column="27">(<expr><operator pos:line="182" pos:column="28">!<pos:position pos:line="182" pos:column="29"/></operator><call><name pos:line="182" pos:column="29">strncmp<pos:position pos:line="182" pos:column="36"/></name><argument_list pos:line="182" pos:column="36">(<argument><expr><name pos:line="182" pos:column="37">buff<pos:position pos:line="182" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="182" pos:column="43">"IFDEF:"<pos:position pos:line="182" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="182" pos:column="53">6<pos:position pos:line="182" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="182" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="182" pos:column="56"/></condition><then pos:line="182" pos:column="56"> <block pos:line="182" pos:column="57">{
                    <if pos:line="183" pos:column="21">if <condition pos:line="183" pos:column="24">(<expr><operator pos:line="183" pos:column="25">(<pos:position pos:line="183" pos:column="26"/></operator><name pos:line="183" pos:column="26">ptr<pos:position pos:line="183" pos:column="29"/></name> <operator pos:line="183" pos:column="30">=<pos:position pos:line="183" pos:column="31"/></operator> <call><name pos:line="183" pos:column="32">strtok<pos:position pos:line="183" pos:column="38"/></name><argument_list pos:line="183" pos:column="38">(<argument><expr><name pos:line="183" pos:column="39">buff<pos:position pos:line="183" pos:column="43"/></name> <operator pos:line="183" pos:column="44">+<pos:position pos:line="183" pos:column="45"/></operator> <literal type="number" pos:line="183" pos:column="46">6<pos:position pos:line="183" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="183" pos:column="49">WS<pos:position pos:line="183" pos:column="51"/></name></expr></argument>)<pos:position pos:line="183" pos:column="52"/></argument_list></call><operator pos:line="183" pos:column="52">)<pos:position pos:line="183" pos:column="53"/></operator> <operator pos:line="183" pos:column="54">==<pos:position pos:line="183" pos:column="56"/></operator> <name pos:line="183" pos:column="57">NULL<pos:position pos:line="183" pos:column="61"/></name></expr>)<pos:position pos:line="183" pos:column="62"/></condition><then pos:line="183" pos:column="62"> <block pos:line="183" pos:column="63">{
                        <expr_stmt><expr><call><name pos:line="184" pos:column="25">errorMsg<pos:position pos:line="184" pos:column="33"/></name><argument_list pos:line="184" pos:column="33">(<argument><expr><name pos:line="184" pos:column="34">input_filename<pos:position pos:line="184" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="50">linenum<pos:position pos:line="184" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="59">buff<pos:position pos:line="184" pos:column="63"/></name></expr></argument>)<pos:position pos:line="184" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="185" pos:column="25">exit<pos:position pos:line="185" pos:column="29"/></name><argument_list pos:line="185" pos:column="29">(<argument><expr><literal type="number" pos:line="185" pos:column="30">1<pos:position pos:line="185" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="185" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="33"/></expr_stmt>
                    }<pos:position pos:line="186" pos:column="22"/></block></then></if>

                    <expr_stmt><expr><name><name pos:line="188" pos:column="21">curr<pos:position pos:line="188" pos:column="25"/></name><operator pos:line="188" pos:column="25">.<pos:position pos:line="188" pos:column="26"/></operator><name pos:line="188" pos:column="26">ifdef<pos:position pos:line="188" pos:column="31"/></name></name> <operator pos:line="188" pos:column="32">=<pos:position pos:line="188" pos:column="33"/></operator> <name pos:line="188" pos:column="34">ptr<pos:position pos:line="188" pos:column="37"/></name></expr>;<pos:position pos:line="188" pos:column="38"/></expr_stmt>
                }<pos:position pos:line="189" pos:column="18"/></block></then></if></elseif> <elseif pos:line="189" pos:column="19">else <if pos:line="189" pos:column="24">if <condition pos:line="189" pos:column="27">(<expr><operator pos:line="189" pos:column="28">!<pos:position pos:line="189" pos:column="29"/></operator><call><name pos:line="189" pos:column="29">strcmp<pos:position pos:line="189" pos:column="35"/></name><argument_list pos:line="189" pos:column="35">(<argument><expr><name pos:line="189" pos:column="36">buff<pos:position pos:line="189" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="189" pos:column="42">"DOC_START"<pos:position pos:line="189" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="189" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="189" pos:column="55"/></condition><then pos:line="189" pos:column="55"> <block pos:line="189" pos:column="56">{
                    <expr_stmt><expr><name pos:line="190" pos:column="21">state<pos:position pos:line="190" pos:column="26"/></name> <operator pos:line="190" pos:column="27">=<pos:position pos:line="190" pos:column="28"/></operator> <name pos:line="190" pos:column="29">sDOC<pos:position pos:line="190" pos:column="33"/></name></expr>;<pos:position pos:line="190" pos:column="34"/></expr_stmt>
                }<pos:position pos:line="191" pos:column="18"/></block></then></if></elseif> <elseif pos:line="191" pos:column="19">else <if pos:line="191" pos:column="24">if <condition pos:line="191" pos:column="27">(<expr><operator pos:line="191" pos:column="28">!<pos:position pos:line="191" pos:column="29"/></operator><call><name pos:line="191" pos:column="29">strcmp<pos:position pos:line="191" pos:column="35"/></name><argument_list pos:line="191" pos:column="35">(<argument><expr><name pos:line="191" pos:column="36">buff<pos:position pos:line="191" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="191" pos:column="42">"DOC_NONE"<pos:position pos:line="191" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="191" pos:column="54"/></condition><then pos:line="191" pos:column="54"> <block pos:line="191" pos:column="55">{
                    <expr_stmt><expr><name pos:line="192" pos:column="21">state<pos:position pos:line="192" pos:column="26"/></name> <operator pos:line="192" pos:column="27">=<pos:position pos:line="192" pos:column="28"/></operator> <name pos:line="192" pos:column="29">sSTART<pos:position pos:line="192" pos:column="35"/></name></expr>;<pos:position pos:line="192" pos:column="36"/></expr_stmt>
                }<pos:position pos:line="193" pos:column="18"/></block></then></if></elseif> <else pos:line="193" pos:column="19">else <block pos:line="193" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="194" pos:column="21">errorMsg<pos:position pos:line="194" pos:column="29"/></name><argument_list pos:line="194" pos:column="29">(<argument><expr><name pos:line="194" pos:column="30">input_filename<pos:position pos:line="194" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="46">linenum<pos:position pos:line="194" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="55">buff<pos:position pos:line="194" pos:column="59"/></name></expr></argument>)<pos:position pos:line="194" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="61"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="195" pos:column="21">exit<pos:position pos:line="195" pos:column="25"/></name><argument_list pos:line="195" pos:column="25">(<argument><expr><literal type="number" pos:line="195" pos:column="26">1<pos:position pos:line="195" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="195" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="196" pos:column="18"/></block></else></if>
            }<pos:position pos:line="197" pos:column="14"/></block>
            <break pos:line="198" pos:column="13">break;<pos:position pos:line="198" pos:column="19"/></break>

            <case pos:line="200" pos:column="13">case <expr><name pos:line="200" pos:column="18">sDOC<pos:position pos:line="200" pos:column="22"/></name></expr>:<pos:position pos:line="200" pos:column="23"/></case>
                <if pos:line="201" pos:column="17">if <condition pos:line="201" pos:column="20">(<expr><operator pos:line="201" pos:column="21">!<pos:position pos:line="201" pos:column="22"/></operator><call><name pos:line="201" pos:column="22">strcmp<pos:position pos:line="201" pos:column="28"/></name><argument_list pos:line="201" pos:column="28">(<argument><expr><name pos:line="201" pos:column="29">buff<pos:position pos:line="201" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="201" pos:column="35">"DOC_END"<pos:position pos:line="201" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="201" pos:column="45"/></argument_list></call> <operator pos:line="201" pos:column="46">||<pos:position pos:line="201" pos:column="48"/></operator> <operator pos:line="201" pos:column="49">!<pos:position pos:line="201" pos:column="50"/></operator><call><name pos:line="201" pos:column="50">strcmp<pos:position pos:line="201" pos:column="56"/></name><argument_list pos:line="201" pos:column="56">(<argument><expr><name pos:line="201" pos:column="57">buff<pos:position pos:line="201" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="201" pos:column="63">"COMMENT_END"<pos:position pos:line="201" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="201" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="201" pos:column="78"/></condition><then pos:line="201" pos:column="78"> <block pos:line="201" pos:column="79">{
                    <expr_stmt><expr><name pos:line="202" pos:column="21">state<pos:position pos:line="202" pos:column="26"/></name> <operator pos:line="202" pos:column="27">=<pos:position pos:line="202" pos:column="28"/></operator> <name pos:line="202" pos:column="29">sSTART<pos:position pos:line="202" pos:column="35"/></name></expr>;<pos:position pos:line="202" pos:column="36"/></expr_stmt>
                }<pos:position pos:line="203" pos:column="18"/></block></then> <elseif pos:line="203" pos:column="19">else <if pos:line="203" pos:column="24">if <condition pos:line="203" pos:column="27">(<expr><operator pos:line="203" pos:column="28">!<pos:position pos:line="203" pos:column="29"/></operator><call><name pos:line="203" pos:column="29">strcmp<pos:position pos:line="203" pos:column="35"/></name><argument_list pos:line="203" pos:column="35">(<argument><expr><name pos:line="203" pos:column="36">buff<pos:position pos:line="203" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="203" pos:column="42">"NOCOMMENT_START"<pos:position pos:line="203" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="203" pos:column="61"/></condition><then pos:line="203" pos:column="61"> <block pos:line="203" pos:column="62">{
                    <expr_stmt><expr><name pos:line="204" pos:column="21">state<pos:position pos:line="204" pos:column="26"/></name> <operator pos:line="204" pos:column="27">=<pos:position pos:line="204" pos:column="28"/></operator> <name pos:line="204" pos:column="29">sNOCOMMENT<pos:position pos:line="204" pos:column="39"/></name></expr>;<pos:position pos:line="204" pos:column="40"/></expr_stmt>
                }<pos:position pos:line="205" pos:column="18"/></block></then></if></elseif> <else pos:line="205" pos:column="19">else <block pos:line="205" pos:column="24">{ <comment type="line" pos:line="205" pos:column="26">// if (buff != NULL) {</comment>
                    <expr_stmt><expr><call><name pos:line="206" pos:column="21">assert<pos:position pos:line="206" pos:column="27"/></name><argument_list pos:line="206" pos:column="27">(<argument><expr><name pos:line="206" pos:column="28">buff<pos:position pos:line="206" pos:column="32"/></name> <operator pos:line="206" pos:column="33">!=<pos:position pos:line="206" pos:column="35"/></operator> <name pos:line="206" pos:column="36">NULL<pos:position pos:line="206" pos:column="40"/></name></expr></argument>)<pos:position pos:line="206" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="42"/></expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="207" pos:column="21">entries<pos:position pos:line="207" pos:column="28"/></name><operator pos:line="207" pos:column="28">.<pos:position pos:line="207" pos:column="29"/></operator><name pos:line="207" pos:column="29">back<pos:position pos:line="207" pos:column="33"/></name></name><argument_list pos:line="207" pos:column="33">()<pos:position pos:line="207" pos:column="35"/></argument_list></call><operator pos:line="207" pos:column="35">.<pos:position pos:line="207" pos:column="36"/></operator><call><name><name pos:line="207" pos:column="36">doc<pos:position pos:line="207" pos:column="39"/></name><operator pos:line="207" pos:column="39">.<pos:position pos:line="207" pos:column="40"/></operator><name pos:line="207" pos:column="40">push_back<pos:position pos:line="207" pos:column="49"/></name></name><argument_list pos:line="207" pos:column="49">(<argument><expr><name pos:line="207" pos:column="50">buff<pos:position pos:line="207" pos:column="54"/></name></expr></argument>)<pos:position pos:line="207" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="208" pos:column="18"/></block></else></if>
                <break pos:line="209" pos:column="17">break;<pos:position pos:line="209" pos:column="23"/></break>

            <case pos:line="211" pos:column="13">case <expr><name pos:line="211" pos:column="18">sNOCOMMENT<pos:position pos:line="211" pos:column="28"/></name></expr>:<pos:position pos:line="211" pos:column="29"/></case>
                <if pos:line="212" pos:column="17">if <condition pos:line="212" pos:column="20">(<expr><operator pos:line="212" pos:column="21">!<pos:position pos:line="212" pos:column="22"/></operator><call><name pos:line="212" pos:column="22">strcmp<pos:position pos:line="212" pos:column="28"/></name><argument_list pos:line="212" pos:column="28">(<argument><expr><name pos:line="212" pos:column="29">buff<pos:position pos:line="212" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="212" pos:column="35">"NOCOMMENT_END"<pos:position pos:line="212" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="212" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="212" pos:column="52"/></condition><then pos:line="212" pos:column="52"> <block pos:line="212" pos:column="53">{
                    <expr_stmt><expr><name pos:line="213" pos:column="21">state<pos:position pos:line="213" pos:column="26"/></name> <operator pos:line="213" pos:column="27">=<pos:position pos:line="213" pos:column="28"/></operator> <name pos:line="213" pos:column="29">sDOC<pos:position pos:line="213" pos:column="33"/></name></expr>;<pos:position pos:line="213" pos:column="34"/></expr_stmt>
                }<pos:position pos:line="214" pos:column="18"/></block></then> <else pos:line="214" pos:column="19">else <block pos:line="214" pos:column="24">{ <comment type="line" pos:line="214" pos:column="26">// if (buff != NULL) {</comment>
                    <expr_stmt><expr><call><name pos:line="215" pos:column="21">assert<pos:position pos:line="215" pos:column="27"/></name><argument_list pos:line="215" pos:column="27">(<argument><expr><name pos:line="215" pos:column="28">buff<pos:position pos:line="215" pos:column="32"/></name> <operator pos:line="215" pos:column="33">!=<pos:position pos:line="215" pos:column="35"/></operator> <name pos:line="215" pos:column="36">NULL<pos:position pos:line="215" pos:column="40"/></name></expr></argument>)<pos:position pos:line="215" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="42"/></expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="216" pos:column="21">entries<pos:position pos:line="216" pos:column="28"/></name><operator pos:line="216" pos:column="28">.<pos:position pos:line="216" pos:column="29"/></operator><name pos:line="216" pos:column="29">back<pos:position pos:line="216" pos:column="33"/></name></name><argument_list pos:line="216" pos:column="33">()<pos:position pos:line="216" pos:column="35"/></argument_list></call><operator pos:line="216" pos:column="35">.<pos:position pos:line="216" pos:column="36"/></operator><call><name><name pos:line="216" pos:column="36">nocomment<pos:position pos:line="216" pos:column="45"/></name><operator pos:line="216" pos:column="45">.<pos:position pos:line="216" pos:column="46"/></operator><name pos:line="216" pos:column="46">push_back<pos:position pos:line="216" pos:column="55"/></name></name><argument_list pos:line="216" pos:column="55">(<argument><expr><name pos:line="216" pos:column="56">buff<pos:position pos:line="216" pos:column="60"/></name></expr></argument>)<pos:position pos:line="216" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="62"/></expr_stmt>
                }<pos:position pos:line="217" pos:column="18"/></block></else></if>
                <break pos:line="218" pos:column="17">break;<pos:position pos:line="218" pos:column="23"/></break>

            <case pos:line="220" pos:column="13">case <expr><name pos:line="220" pos:column="18">sEXIT<pos:position pos:line="220" pos:column="23"/></name></expr>:<pos:position pos:line="220" pos:column="24"/></case>
                <expr_stmt><expr><call><name pos:line="221" pos:column="17">assert<pos:position pos:line="221" pos:column="23"/></name><argument_list pos:line="221" pos:column="23">(<argument><expr><literal type="number" pos:line="221" pos:column="24">0<pos:position pos:line="221" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="221" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="27"/></expr_stmt>		<comment type="block" pos:line="221" pos:column="41">/* should never get here */</comment>
                <break pos:line="222" pos:column="17">break;<pos:position pos:line="222" pos:column="23"/></break>
            }<pos:position pos:line="223" pos:column="14"/></block></switch></block></then></if></elseif></if>

    }<pos:position pos:line="225" pos:column="6"/></block></while>

    <if pos:line="227" pos:column="5">if <condition pos:line="227" pos:column="8">(<expr><name pos:line="227" pos:column="9">state<pos:position pos:line="227" pos:column="14"/></name> <operator pos:line="227" pos:column="15">!=<pos:position pos:line="227" pos:column="17"/></operator> <name pos:line="227" pos:column="18">sEXIT<pos:position pos:line="227" pos:column="23"/></name></expr>)<pos:position pos:line="227" pos:column="24"/></condition><then pos:line="227" pos:column="24"> <block pos:line="227" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="228" pos:column="9">errorMsg<pos:position pos:line="228" pos:column="17"/></name><argument_list pos:line="228" pos:column="17">(<argument><expr><name pos:line="228" pos:column="18">input_filename<pos:position pos:line="228" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="228" pos:column="34">linenum<pos:position pos:line="228" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="228" pos:column="43">"Error: unexpected EOF"<pos:position pos:line="228" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="228" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="229" pos:column="9">exit<pos:position pos:line="229" pos:column="13"/></name><argument_list pos:line="229" pos:column="13">(<argument><expr><literal type="number" pos:line="229" pos:column="14">1<pos:position pos:line="229" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="229" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="229" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="230" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="232" pos:column="5">fp<pos:position pos:line="232" pos:column="7"/></name><operator pos:line="232" pos:column="7">.<pos:position pos:line="232" pos:column="8"/></operator><name pos:line="232" pos:column="8">close<pos:position pos:line="232" pos:column="13"/></name></name><argument_list pos:line="232" pos:column="13">()<pos:position pos:line="232" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="232" pos:column="16"/></expr_stmt>

    <comment type="block" pos:line="234" pos:column="5">/*-------------------------------------------------------------------*
     * Generate default_all()
     * Generate parse_line()
     * Generate dump_config()
     * Generate free_all()
     * Generate example squid.conf.default file
     *-------------------------------------------------------------------*/</comment>

    <comment type="block" pos:line="242" pos:column="5">/* Open output x.c file */</comment>

    <decl_stmt><decl><type><name><name pos:line="244" pos:column="5">std<pos:position pos:line="244" pos:column="8"/></name><operator pos:line="244" pos:column="8">::<pos:position pos:line="244" pos:column="10"/></operator><name pos:line="244" pos:column="10">ofstream<pos:position pos:line="244" pos:column="18"/></name></name></type> <name pos:line="244" pos:column="19">fout<pos:position pos:line="244" pos:column="23"/></name><argument_list pos:line="244" pos:column="23">(<argument><expr><name pos:line="244" pos:column="24">output_filename<pos:position pos:line="244" pos:column="39"/></name></expr></argument>,<argument><expr><name><name pos:line="244" pos:column="40">std<pos:position pos:line="244" pos:column="43"/></name><operator pos:line="244" pos:column="43">::<pos:position pos:line="244" pos:column="45"/></operator><name pos:line="244" pos:column="45">ostream<pos:position pos:line="244" pos:column="52"/></name><operator pos:line="244" pos:column="52">::<pos:position pos:line="244" pos:column="54"/></operator><name pos:line="244" pos:column="54">out<pos:position pos:line="244" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="244" pos:column="58"/></argument_list></decl>;<pos:position pos:line="244" pos:column="59"/></decl_stmt>
    <if pos:line="245" pos:column="5">if <condition pos:line="245" pos:column="8">(<expr><operator pos:line="245" pos:column="9">!<pos:position pos:line="245" pos:column="10"/></operator><call><name><name pos:line="245" pos:column="10">fout<pos:position pos:line="245" pos:column="14"/></name><operator pos:line="245" pos:column="14">.<pos:position pos:line="245" pos:column="15"/></operator><name pos:line="245" pos:column="15">good<pos:position pos:line="245" pos:column="19"/></name></name><argument_list pos:line="245" pos:column="19">()<pos:position pos:line="245" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="245" pos:column="22"/></condition><then pos:line="245" pos:column="22"> <block pos:line="245" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="246" pos:column="9">std<pos:position pos:line="246" pos:column="12"/></name><operator pos:line="246" pos:column="12">::<pos:position pos:line="246" pos:column="14"/></operator><name pos:line="246" pos:column="14">cerr<pos:position pos:line="246" pos:column="18"/></name></name> <operator pos:line="246" pos:column="19">&lt;&lt;<pos:position pos:line="246" pos:column="27"/></operator> <literal type="string" pos:line="246" pos:column="22">"Error while opening output .c file '"<pos:position pos:line="246" pos:column="60"/></literal> <operator pos:line="246" pos:column="61">&lt;&lt;<pos:position pos:line="246" pos:column="69"/></operator>
                  <name pos:line="247" pos:column="19">output_filename<pos:position pos:line="247" pos:column="34"/></name> <operator pos:line="247" pos:column="35">&lt;&lt;<pos:position pos:line="247" pos:column="43"/></operator> <literal type="string" pos:line="247" pos:column="38">"': "<pos:position pos:line="247" pos:column="43"/></literal> <operator pos:line="247" pos:column="44">&lt;&lt;<pos:position pos:line="247" pos:column="52"/></operator> <call><name pos:line="247" pos:column="47">strerror<pos:position pos:line="247" pos:column="55"/></name><argument_list pos:line="247" pos:column="55">(<argument><expr><name pos:line="247" pos:column="56">errno<pos:position pos:line="247" pos:column="61"/></name></expr></argument>)<pos:position pos:line="247" pos:column="62"/></argument_list></call> <operator pos:line="247" pos:column="63">&lt;&lt;<pos:position pos:line="247" pos:column="71"/></operator> <name><name pos:line="247" pos:column="66">std<pos:position pos:line="247" pos:column="69"/></name><operator pos:line="247" pos:column="69">::<pos:position pos:line="247" pos:column="71"/></operator><name pos:line="247" pos:column="71">endl<pos:position pos:line="247" pos:column="75"/></name></name></expr>;<pos:position pos:line="247" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="248" pos:column="9">exit<pos:position pos:line="248" pos:column="13"/></name><argument_list pos:line="248" pos:column="13">(<argument><expr><literal type="number" pos:line="248" pos:column="14">1<pos:position pos:line="248" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="249" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="251" pos:column="5">fout<pos:position pos:line="251" pos:column="9"/></name> <operator pos:line="251" pos:column="10">&lt;&lt;<pos:position pos:line="251" pos:column="18"/></operator>  <literal type="string" pos:line="251" pos:column="14">"/*\n"<pos:position pos:line="251" pos:column="20"/></literal> <operator pos:line="251" pos:column="21">&lt;&lt;<pos:position pos:line="251" pos:column="29"/></operator>
    <literal type="string" pos:line="252" pos:column="5">" * Generated automatically from "<pos:position pos:line="252" pos:column="39"/></literal> <operator pos:line="252" pos:column="40">&lt;&lt;<pos:position pos:line="252" pos:column="48"/></operator> <name pos:line="252" pos:column="43">input_filename<pos:position pos:line="252" pos:column="57"/></name> <operator pos:line="252" pos:column="58">&lt;&lt;<pos:position pos:line="252" pos:column="66"/></operator> <literal type="string" pos:line="252" pos:column="61">" by "<pos:position pos:line="252" pos:column="67"/></literal> <operator pos:line="252" pos:column="68">&lt;&lt;<pos:position pos:line="252" pos:column="76"/></operator>
    <name><name pos:line="253" pos:column="5">argv<pos:position pos:line="253" pos:column="9"/></name><index pos:line="253" pos:column="9">[<expr><literal type="number" pos:line="253" pos:column="10">0<pos:position pos:line="253" pos:column="11"/></literal></expr>]<pos:position pos:line="253" pos:column="12"/></index></name> <operator pos:line="253" pos:column="13">&lt;&lt;<pos:position pos:line="253" pos:column="21"/></operator> <literal type="string" pos:line="253" pos:column="16">"\n"<pos:position pos:line="253" pos:column="20"/></literal>
    <literal type="string" pos:line="254" pos:column="5">" *\n"<pos:position pos:line="254" pos:column="11"/></literal>
    <literal type="string" pos:line="255" pos:column="5">" * Abstract: This file contains routines used to configure the\n"<pos:position pos:line="255" pos:column="71"/></literal>
    <literal type="string" pos:line="256" pos:column="5">" *           variables in the squid server.\n"<pos:position pos:line="256" pos:column="52"/></literal>
    <literal type="string" pos:line="257" pos:column="5">" */\n"<pos:position pos:line="257" pos:column="12"/></literal>
    <literal type="string" pos:line="258" pos:column="5">"\n"<pos:position pos:line="258" pos:column="9"/></literal></expr>;<pos:position pos:line="258" pos:column="10"/></expr_stmt>

    <expr_stmt><expr><name pos:line="260" pos:column="5">rc<pos:position pos:line="260" pos:column="7"/></name> <operator pos:line="260" pos:column="8">=<pos:position pos:line="260" pos:column="9"/></operator> <call><name pos:line="260" pos:column="10">gen_default<pos:position pos:line="260" pos:column="21"/></name><argument_list pos:line="260" pos:column="21">(<argument><expr><name pos:line="260" pos:column="22">entries<pos:position pos:line="260" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="260" pos:column="31">fout<pos:position pos:line="260" pos:column="35"/></name></expr></argument>)<pos:position pos:line="260" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="260" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="262" pos:column="5">gen_default_if_none<pos:position pos:line="262" pos:column="24"/></name><argument_list pos:line="262" pos:column="24">(<argument><expr><name pos:line="262" pos:column="25">entries<pos:position pos:line="262" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="262" pos:column="34">fout<pos:position pos:line="262" pos:column="38"/></name></expr></argument>)<pos:position pos:line="262" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="264" pos:column="5">gen_default_postscriptum<pos:position pos:line="264" pos:column="29"/></name><argument_list pos:line="264" pos:column="29">(<argument><expr><name pos:line="264" pos:column="30">entries<pos:position pos:line="264" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="264" pos:column="39">fout<pos:position pos:line="264" pos:column="43"/></name></expr></argument>)<pos:position pos:line="264" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="264" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="266" pos:column="5">gen_parse<pos:position pos:line="266" pos:column="14"/></name><argument_list pos:line="266" pos:column="14">(<argument><expr><name pos:line="266" pos:column="15">entries<pos:position pos:line="266" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="266" pos:column="24">fout<pos:position pos:line="266" pos:column="28"/></name></expr></argument>)<pos:position pos:line="266" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="266" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="268" pos:column="5">gen_dump<pos:position pos:line="268" pos:column="13"/></name><argument_list pos:line="268" pos:column="13">(<argument><expr><name pos:line="268" pos:column="14">entries<pos:position pos:line="268" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="268" pos:column="23">fout<pos:position pos:line="268" pos:column="27"/></name></expr></argument>)<pos:position pos:line="268" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="270" pos:column="5">gen_free<pos:position pos:line="270" pos:column="13"/></name><argument_list pos:line="270" pos:column="13">(<argument><expr><name pos:line="270" pos:column="14">entries<pos:position pos:line="270" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="270" pos:column="23">fout<pos:position pos:line="270" pos:column="27"/></name></expr></argument>)<pos:position pos:line="270" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="272" pos:column="5">fout<pos:position pos:line="272" pos:column="9"/></name><operator pos:line="272" pos:column="9">.<pos:position pos:line="272" pos:column="10"/></operator><name pos:line="272" pos:column="10">close<pos:position pos:line="272" pos:column="15"/></name></name><argument_list pos:line="272" pos:column="15">()<pos:position pos:line="272" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="18"/></expr_stmt>

    <comment type="block" pos:line="274" pos:column="5">/* Open output x.conf file */</comment>
    <expr_stmt><expr><call><name><name pos:line="275" pos:column="5">fout<pos:position pos:line="275" pos:column="9"/></name><operator pos:line="275" pos:column="9">.<pos:position pos:line="275" pos:column="10"/></operator><name pos:line="275" pos:column="10">open<pos:position pos:line="275" pos:column="14"/></name></name><argument_list pos:line="275" pos:column="14">(<argument><expr><name pos:line="275" pos:column="15">conf_filename<pos:position pos:line="275" pos:column="28"/></name></expr></argument>,<argument><expr><name><name pos:line="275" pos:column="29">std<pos:position pos:line="275" pos:column="32"/></name><operator pos:line="275" pos:column="32">::<pos:position pos:line="275" pos:column="34"/></operator><name pos:line="275" pos:column="34">ostream<pos:position pos:line="275" pos:column="41"/></name><operator pos:line="275" pos:column="41">::<pos:position pos:line="275" pos:column="43"/></operator><name pos:line="275" pos:column="43">out<pos:position pos:line="275" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="275" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="275" pos:column="48"/></expr_stmt>
    <if pos:line="276" pos:column="5">if <condition pos:line="276" pos:column="8">(<expr><operator pos:line="276" pos:column="9">!<pos:position pos:line="276" pos:column="10"/></operator><call><name><name pos:line="276" pos:column="10">fout<pos:position pos:line="276" pos:column="14"/></name><operator pos:line="276" pos:column="14">.<pos:position pos:line="276" pos:column="15"/></operator><name pos:line="276" pos:column="15">good<pos:position pos:line="276" pos:column="19"/></name></name><argument_list pos:line="276" pos:column="19">()<pos:position pos:line="276" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="276" pos:column="22"/></condition><then pos:line="276" pos:column="22"> <block pos:line="276" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="277" pos:column="9">std<pos:position pos:line="277" pos:column="12"/></name><operator pos:line="277" pos:column="12">::<pos:position pos:line="277" pos:column="14"/></operator><name pos:line="277" pos:column="14">cerr<pos:position pos:line="277" pos:column="18"/></name></name> <operator pos:line="277" pos:column="19">&lt;&lt;<pos:position pos:line="277" pos:column="27"/></operator> <literal type="string" pos:line="277" pos:column="22">"Error while opening output conf file '"<pos:position pos:line="277" pos:column="62"/></literal> <operator pos:line="277" pos:column="63">&lt;&lt;<pos:position pos:line="277" pos:column="71"/></operator>
                  <name pos:line="278" pos:column="19">output_filename<pos:position pos:line="278" pos:column="34"/></name> <operator pos:line="278" pos:column="35">&lt;&lt;<pos:position pos:line="278" pos:column="43"/></operator> <literal type="string" pos:line="278" pos:column="38">"': "<pos:position pos:line="278" pos:column="43"/></literal> <operator pos:line="278" pos:column="44">&lt;&lt;<pos:position pos:line="278" pos:column="52"/></operator> <call><name pos:line="278" pos:column="47">strerror<pos:position pos:line="278" pos:column="55"/></name><argument_list pos:line="278" pos:column="55">(<argument><expr><name pos:line="278" pos:column="56">errno<pos:position pos:line="278" pos:column="61"/></name></expr></argument>)<pos:position pos:line="278" pos:column="62"/></argument_list></call> <operator pos:line="278" pos:column="63">&lt;&lt;<pos:position pos:line="278" pos:column="71"/></operator> <name><name pos:line="278" pos:column="66">std<pos:position pos:line="278" pos:column="69"/></name><operator pos:line="278" pos:column="69">::<pos:position pos:line="278" pos:column="71"/></operator><name pos:line="278" pos:column="71">endl<pos:position pos:line="278" pos:column="75"/></name></name></expr>;<pos:position pos:line="278" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="279" pos:column="9">exit<pos:position pos:line="279" pos:column="13"/></name><argument_list pos:line="279" pos:column="13">(<argument><expr><literal type="number" pos:line="279" pos:column="14">1<pos:position pos:line="279" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="279" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="280" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="282" pos:column="5">gen_conf<pos:position pos:line="282" pos:column="13"/></name><argument_list pos:line="282" pos:column="13">(<argument><expr><name pos:line="282" pos:column="14">entries<pos:position pos:line="282" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="282" pos:column="23">fout<pos:position pos:line="282" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="282" pos:column="29">1<pos:position pos:line="282" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="282" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="282" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="284" pos:column="5">fout<pos:position pos:line="284" pos:column="9"/></name><operator pos:line="284" pos:column="9">.<pos:position pos:line="284" pos:column="10"/></operator><name pos:line="284" pos:column="10">close<pos:position pos:line="284" pos:column="15"/></name></name><argument_list pos:line="284" pos:column="15">()<pos:position pos:line="284" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="18"/></expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="286" pos:column="5">fout<pos:position pos:line="286" pos:column="9"/></name><operator pos:line="286" pos:column="9">.<pos:position pos:line="286" pos:column="10"/></operator><name pos:line="286" pos:column="10">open<pos:position pos:line="286" pos:column="14"/></name></name><argument_list pos:line="286" pos:column="14">(<argument><expr><name pos:line="286" pos:column="15">conf_filename_short<pos:position pos:line="286" pos:column="34"/></name></expr></argument>,<argument><expr><name><name pos:line="286" pos:column="35">std<pos:position pos:line="286" pos:column="38"/></name><operator pos:line="286" pos:column="38">::<pos:position pos:line="286" pos:column="40"/></operator><name pos:line="286" pos:column="40">ostream<pos:position pos:line="286" pos:column="47"/></name><operator pos:line="286" pos:column="47">::<pos:position pos:line="286" pos:column="49"/></operator><name pos:line="286" pos:column="49">out<pos:position pos:line="286" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="286" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="286" pos:column="54"/></expr_stmt>
    <if pos:line="287" pos:column="5">if <condition pos:line="287" pos:column="8">(<expr><operator pos:line="287" pos:column="9">!<pos:position pos:line="287" pos:column="10"/></operator><call><name><name pos:line="287" pos:column="10">fout<pos:position pos:line="287" pos:column="14"/></name><operator pos:line="287" pos:column="14">.<pos:position pos:line="287" pos:column="15"/></operator><name pos:line="287" pos:column="15">good<pos:position pos:line="287" pos:column="19"/></name></name><argument_list pos:line="287" pos:column="19">()<pos:position pos:line="287" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="287" pos:column="22"/></condition><then pos:line="287" pos:column="22"> <block pos:line="287" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="288" pos:column="9">std<pos:position pos:line="288" pos:column="12"/></name><operator pos:line="288" pos:column="12">::<pos:position pos:line="288" pos:column="14"/></operator><name pos:line="288" pos:column="14">cerr<pos:position pos:line="288" pos:column="18"/></name></name> <operator pos:line="288" pos:column="19">&lt;&lt;<pos:position pos:line="288" pos:column="27"/></operator> <literal type="string" pos:line="288" pos:column="22">"Error while opening output short conf file '"<pos:position pos:line="288" pos:column="68"/></literal> <operator pos:line="288" pos:column="69">&lt;&lt;<pos:position pos:line="288" pos:column="77"/></operator>
                  <name pos:line="289" pos:column="19">output_filename<pos:position pos:line="289" pos:column="34"/></name> <operator pos:line="289" pos:column="35">&lt;&lt;<pos:position pos:line="289" pos:column="43"/></operator> <literal type="string" pos:line="289" pos:column="38">"': "<pos:position pos:line="289" pos:column="43"/></literal> <operator pos:line="289" pos:column="44">&lt;&lt;<pos:position pos:line="289" pos:column="52"/></operator> <call><name pos:line="289" pos:column="47">strerror<pos:position pos:line="289" pos:column="55"/></name><argument_list pos:line="289" pos:column="55">(<argument><expr><name pos:line="289" pos:column="56">errno<pos:position pos:line="289" pos:column="61"/></name></expr></argument>)<pos:position pos:line="289" pos:column="62"/></argument_list></call> <operator pos:line="289" pos:column="63">&lt;&lt;<pos:position pos:line="289" pos:column="71"/></operator> <name><name pos:line="289" pos:column="66">std<pos:position pos:line="289" pos:column="69"/></name><operator pos:line="289" pos:column="69">::<pos:position pos:line="289" pos:column="71"/></operator><name pos:line="289" pos:column="71">endl<pos:position pos:line="289" pos:column="75"/></name></name></expr>;<pos:position pos:line="289" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="290" pos:column="9">exit<pos:position pos:line="290" pos:column="13"/></name><argument_list pos:line="290" pos:column="13">(<argument><expr><literal type="number" pos:line="290" pos:column="14">1<pos:position pos:line="290" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="290" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="291" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="292" pos:column="5">gen_conf<pos:position pos:line="292" pos:column="13"/></name><argument_list pos:line="292" pos:column="13">(<argument><expr><name pos:line="292" pos:column="14">entries<pos:position pos:line="292" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="292" pos:column="23">fout<pos:position pos:line="292" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="292" pos:column="29">0<pos:position pos:line="292" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="292" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="292" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="293" pos:column="5">fout<pos:position pos:line="293" pos:column="9"/></name><operator pos:line="293" pos:column="9">.<pos:position pos:line="293" pos:column="10"/></operator><name pos:line="293" pos:column="10">close<pos:position pos:line="293" pos:column="15"/></name></name><argument_list pos:line="293" pos:column="15">()<pos:position pos:line="293" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="18"/></expr_stmt>

    <return pos:line="295" pos:column="5">return <expr><operator pos:line="295" pos:column="12">(<pos:position pos:line="295" pos:column="13"/></operator><name pos:line="295" pos:column="13">rc<pos:position pos:line="295" pos:column="15"/></name><operator pos:line="295" pos:column="15">)<pos:position pos:line="295" pos:column="16"/></operator></expr>;<pos:position pos:line="295" pos:column="17"/></return>
}<pos:position pos:line="296" pos:column="2"/></block></function></unit>
