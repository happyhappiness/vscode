<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6995_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">reg_errcode_t<pos:position pos:line="1" pos:column="14"/></name></type>
<name pos:line="2" pos:column="1">compile_range<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><specifier pos:line="2" pos:column="15">const<pos:position pos:line="2" pos:column="20"/></specifier> <name pos:line="2" pos:column="21">char<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier><modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">p_ptr<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">pend<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">char<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">translate<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="70">reg_syntax_t<pos:position pos:line="2" pos:column="82"/></name></type> <name pos:line="2" pos:column="83">syntax<pos:position pos:line="2" pos:column="89"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="91">unsigned<pos:position pos:line="2" pos:column="99"/></name> <name pos:line="2" pos:column="100">char<pos:position pos:line="2" pos:column="104"/></name> <modifier pos:line="2" pos:column="105">*<pos:position pos:line="2" pos:column="106"/></modifier></type><name pos:line="2" pos:column="106">b<pos:position pos:line="2" pos:column="107"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="108"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name></type> <name pos:line="4" pos:column="14">this_char<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">p<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><operator pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">p_ptr<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">range_start<pos:position pos:line="7" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="22">range_end<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">p<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">==<pos:position pos:line="9" pos:column="13"/></operator> <name pos:line="9" pos:column="14">pend<pos:position pos:line="9" pos:column="18"/></name></expr>)<pos:position pos:line="9" pos:column="19"/></condition><then pos:line="9" pos:column="19">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">REG_ERANGE<pos:position pos:line="10" pos:column="26"/></name></expr>;<pos:position pos:line="10" pos:column="27"/></return></block></then></if>

    <comment type="block" pos:line="12" pos:column="5">/* Even though the pattern is a signed `char *', we need to fetch
     * with unsigned char *'s; if the high bit of the pattern character
     * is set, the range endpoints will be negative if we fetch using a
     * signed char *.
     *
     * We also want to fetch the endpoints without translating them; the
     * appropriate translation is done in the bit-setting loop below.  */</comment>
    <expr_stmt><expr><name pos:line="19" pos:column="5">range_start<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <operator pos:line="19" pos:column="19">(<pos:position pos:line="19" pos:column="20"/></operator><operator pos:line="19" pos:column="20">(<pos:position pos:line="19" pos:column="21"/></operator><name pos:line="19" pos:column="21">unsigned<pos:position pos:line="19" pos:column="29"/></name> <name pos:line="19" pos:column="30">char<pos:position pos:line="19" pos:column="34"/></name> <operator pos:line="19" pos:column="35">*<pos:position pos:line="19" pos:column="36"/></operator><operator pos:line="19" pos:column="36">)<pos:position pos:line="19" pos:column="37"/></operator> <name pos:line="19" pos:column="38">p<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">)<pos:position pos:line="19" pos:column="40"/></operator><index pos:line="19" pos:column="40">[<expr><operator pos:line="19" pos:column="41">-<pos:position pos:line="19" pos:column="42"/></operator><literal type="number" pos:line="19" pos:column="42">2<pos:position pos:line="19" pos:column="43"/></literal></expr>]<pos:position pos:line="19" pos:column="44"/></index></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">range_end<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator><operator pos:line="20" pos:column="18">(<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">unsigned<pos:position pos:line="20" pos:column="27"/></name> <name pos:line="20" pos:column="28">char<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">*<pos:position pos:line="20" pos:column="34"/></operator><operator pos:line="20" pos:column="34">)<pos:position pos:line="20" pos:column="35"/></operator> <name pos:line="20" pos:column="36">p<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">)<pos:position pos:line="20" pos:column="38"/></operator><index pos:line="20" pos:column="38">[<expr><literal type="number" pos:line="20" pos:column="39">0<pos:position pos:line="20" pos:column="40"/></literal></expr>]<pos:position pos:line="20" pos:column="41"/></index></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* Have to increment the pointer into the pattern string, so the
     * caller isn't still at the ending character.  */</comment>
    <expr_stmt><expr><operator pos:line="24" pos:column="5">(<pos:position pos:line="24" pos:column="6"/></operator><operator pos:line="24" pos:column="6">*<pos:position pos:line="24" pos:column="7"/></operator><name pos:line="24" pos:column="7">p_ptr<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">)<pos:position pos:line="24" pos:column="13"/></operator><operator pos:line="24" pos:column="13">++<pos:position pos:line="24" pos:column="15"/></operator></expr>;<pos:position pos:line="24" pos:column="16"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* If the start is after the end, the range is empty.  */</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">range_start<pos:position pos:line="27" pos:column="20"/></name> <operator pos:line="27" pos:column="21">&gt;<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="23">range_end<pos:position pos:line="27" pos:column="32"/></name></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33">
        <block type="pseudo"><return pos:line="28" pos:column="9">return <expr><ternary><condition><expr><name pos:line="28" pos:column="16">syntax<pos:position pos:line="28" pos:column="22"/></name> <operator pos:line="28" pos:column="23">&amp;<pos:position pos:line="28" pos:column="28"/></operator> <name pos:line="28" pos:column="25">RE_NO_EMPTY_RANGES<pos:position pos:line="28" pos:column="43"/></name></expr> ?<pos:position pos:line="28" pos:column="45"/></condition><then pos:line="28" pos:column="45"> <expr><name pos:line="28" pos:column="46">REG_ERANGE<pos:position pos:line="28" pos:column="56"/></name></expr> <pos:position pos:line="28" pos:column="57"/></then><else pos:line="28" pos:column="57">: <expr><name pos:line="28" pos:column="59">REG_NOERROR<pos:position pos:line="28" pos:column="70"/></name></expr></else></ternary></expr>;<pos:position pos:line="28" pos:column="71"/></return></block></then></if>

    <comment type="block" pos:line="30" pos:column="5">/* Here we see why `this_char' has to be larger than an `unsigned
     * char' -- the range is inclusive, so if `range_end' == 0xff
     * (assuming 8-bit characters), we would otherwise go into an infinite
     * loop, since all characters &lt;= 0xff.  */</comment>
    <for pos:line="34" pos:column="5">for <control pos:line="34" pos:column="9">(<init><expr><name pos:line="34" pos:column="10">this_char<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">=<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">range_start<pos:position pos:line="34" pos:column="33"/></name></expr>;<pos:position pos:line="34" pos:column="34"/></init> <condition><expr><name pos:line="34" pos:column="35">this_char<pos:position pos:line="34" pos:column="44"/></name> <operator pos:line="34" pos:column="45">&lt;=<pos:position pos:line="34" pos:column="50"/></operator> <name pos:line="34" pos:column="48">range_end<pos:position pos:line="34" pos:column="57"/></name></expr>;<pos:position pos:line="34" pos:column="58"/></condition> <incr><expr><name pos:line="34" pos:column="59">this_char<pos:position pos:line="34" pos:column="68"/></name><operator pos:line="34" pos:column="68">++<pos:position pos:line="34" pos:column="70"/></operator></expr></incr>)<pos:position pos:line="34" pos:column="71"/></control> <block pos:line="34" pos:column="72">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">SET_LIST_BIT<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><call><name pos:line="35" pos:column="22">TRANSLATE<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">this_char<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="35" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></for>

    <return pos:line="38" pos:column="5">return <expr><name pos:line="38" pos:column="12">REG_NOERROR<pos:position pos:line="38" pos:column="23"/></name></expr>;<pos:position pos:line="38" pos:column="24"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
