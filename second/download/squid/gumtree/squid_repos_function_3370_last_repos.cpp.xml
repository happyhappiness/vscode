<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3370_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Config<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">ParseAccess<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">(<parameter><decl><type><name pos:line="2" pos:column="33">ConfigParser<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">&amp;<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="47">parser<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">String<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">groupId<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><call><name><name pos:line="4" pos:column="22">ConfigParser<pos:position pos:line="4" pos:column="34"/></name><operator pos:line="4" pos:column="34">::<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="36">NextToken<pos:position pos:line="4" pos:column="45"/></name></name><argument_list pos:line="4" pos:column="45">()<pos:position pos:line="4" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">AccessRule<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">r<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><operator pos:line="6" pos:column="10">(<pos:position pos:line="6" pos:column="11"/></operator><name pos:line="6" pos:column="11">r<pos:position pos:line="6" pos:column="12"/></name><operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator><call><name pos:line="6" pos:column="13">FindRuleByGroupId<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">groupId<pos:position pos:line="6" pos:column="38"/></name></expr></argument>)<pos:position pos:line="6" pos:column="39"/></argument_list></call><operator pos:line="6" pos:column="39">)<pos:position pos:line="6" pos:column="40"/></operator></expr>)<pos:position pos:line="6" pos:column="41"/></condition><then pos:line="6" pos:column="41"> <block pos:line="6" pos:column="42">{
        <expr_stmt><expr><name pos:line="7" pos:column="9">r<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <operator pos:line="7" pos:column="13">new<pos:position pos:line="7" pos:column="16"/></operator> <call><name pos:line="7" pos:column="17">AccessRule<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">groupId<pos:position pos:line="7" pos:column="35"/></name></expr></argument>)<pos:position pos:line="7" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">AllRules<pos:position pos:line="8" pos:column="17"/></name><argument_list pos:line="8" pos:column="17">()<pos:position pos:line="8" pos:column="19"/></argument_list></call><operator pos:line="8" pos:column="19">.<pos:position pos:line="8" pos:column="20"/></operator><call><name pos:line="8" pos:column="20">push_back<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">r<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="10" pos:column="5">r<pos:position pos:line="10" pos:column="6"/></name><operator pos:line="10" pos:column="6">-&gt;<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="8">parse<pos:position pos:line="10" pos:column="13"/></name></name><argument_list pos:line="10" pos:column="13">(<argument><expr><name pos:line="10" pos:column="14">parser<pos:position pos:line="10" pos:column="20"/></name></expr></argument>)<pos:position pos:line="10" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
}<pos:position pos:line="11" pos:column="2"/></block></function></unit>
