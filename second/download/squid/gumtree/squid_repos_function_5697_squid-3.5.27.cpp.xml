<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_5697_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Comm<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">AcceptLimiter<pos:position pos:line="2" pos:column="20"/></name><operator pos:line="2" pos:column="20">::<pos:position pos:line="2" pos:column="22"/></operator><name pos:line="2" pos:column="22">kick<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// TODO: this could be optimized further with an iterator to search</comment>
    <comment type="line" pos:line="5" pos:column="5">//       looking for first non-NULL, followed by dumping the first N</comment>
    <comment type="line" pos:line="6" pos:column="5">//       with only one shift()/pop_front operation</comment>
    <comment type="line" pos:line="7" pos:column="5">//  OR, by reimplementing as a list instead of Vector.</comment>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">5<pos:position pos:line="9" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="15">5<pos:position pos:line="9" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="18">"size="<pos:position pos:line="9" pos:column="25"/></literal> <operator pos:line="9" pos:column="26">&lt;&lt;<pos:position pos:line="9" pos:column="34"/></operator> <call><name><name pos:line="9" pos:column="29">deferred_<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">.<pos:position pos:line="9" pos:column="39"/></operator><name pos:line="9" pos:column="39">size<pos:position pos:line="9" pos:column="43"/></name></name><argument_list pos:line="9" pos:column="43">()<pos:position pos:line="9" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="47"/></expr_stmt>
    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><call><name><name pos:line="10" pos:column="12">deferred_<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">.<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="22">size<pos:position pos:line="10" pos:column="26"/></name></name><argument_list pos:line="10" pos:column="26">()<pos:position pos:line="10" pos:column="28"/></argument_list></call> <operator pos:line="10" pos:column="29">&gt;<pos:position pos:line="10" pos:column="33"/></operator> <literal type="number" pos:line="10" pos:column="31">0<pos:position pos:line="10" pos:column="32"/></literal> <operator pos:line="10" pos:column="33">&amp;&amp;<pos:position pos:line="10" pos:column="43"/></operator> <call><name pos:line="10" pos:column="36">fdNFree<pos:position pos:line="10" pos:column="43"/></name><argument_list pos:line="10" pos:column="43">()<pos:position pos:line="10" pos:column="45"/></argument_list></call> <operator pos:line="10" pos:column="46">&gt;=<pos:position pos:line="10" pos:column="51"/></operator> <name pos:line="10" pos:column="49">RESERVED_FD<pos:position pos:line="10" pos:column="60"/></name></expr>)<pos:position pos:line="10" pos:column="61"/></condition> <block pos:line="10" pos:column="62">{
        <comment type="block" pos:line="11" pos:column="9">/* NP: shift() is equivalent to pop_front(). Giving us a FIFO queue. */</comment>
        <decl_stmt><decl><type><name><name pos:line="12" pos:column="9">TcpAcceptor<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">::<pos:position pos:line="12" pos:column="22"/></operator><name pos:line="12" pos:column="22">Pointer<pos:position pos:line="12" pos:column="29"/></name></name></type> <name pos:line="12" pos:column="30">temp<pos:position pos:line="12" pos:column="34"/></name> <init pos:line="12" pos:column="35">= <expr><call><name><name pos:line="12" pos:column="37">deferred_<pos:position pos:line="12" pos:column="46"/></name><operator pos:line="12" pos:column="46">.<pos:position pos:line="12" pos:column="47"/></operator><name pos:line="12" pos:column="47">front<pos:position pos:line="12" pos:column="52"/></name></name><argument_list pos:line="12" pos:column="52">()<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="55"/></decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="13" pos:column="9">deferred_<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">.<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">erase<pos:position pos:line="13" pos:column="24"/></name></name><argument_list pos:line="13" pos:column="24">(<argument><expr><call><name><name pos:line="13" pos:column="25">deferred_<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">.<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="35">begin<pos:position pos:line="13" pos:column="40"/></name></name><argument_list pos:line="13" pos:column="40">()<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name><name pos:line="14" pos:column="13">temp<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">.<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="18">valid<pos:position pos:line="14" pos:column="23"/></name></name><argument_list pos:line="14" pos:column="23">()<pos:position pos:line="14" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26"> <block pos:line="14" pos:column="27">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">debugs<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="number" pos:line="15" pos:column="20">5<pos:position pos:line="15" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="23">5<pos:position pos:line="15" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"doing one."<pos:position pos:line="15" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="16" pos:column="13">--<pos:position pos:line="16" pos:column="15"/></operator> <name><name pos:line="16" pos:column="16">temp<pos:position pos:line="16" pos:column="20"/></name><operator pos:line="16" pos:column="20">-&gt;<pos:position pos:line="16" pos:column="25"/></operator><name pos:line="16" pos:column="22">isLimited<pos:position pos:line="16" pos:column="31"/></name></name></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="17" pos:column="13">temp<pos:position pos:line="17" pos:column="17"/></name><operator pos:line="17" pos:column="17">-&gt;<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="19">acceptNext<pos:position pos:line="17" pos:column="29"/></name></name><argument_list pos:line="17" pos:column="29">()<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
            <break pos:line="18" pos:column="13">break;<pos:position pos:line="18" pos:column="19"/></break>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>
    }<pos:position pos:line="20" pos:column="6"/></block></while>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
