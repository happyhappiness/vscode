<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3481_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">connCancelIncompleteRequests<pos:position pos:line="2" pos:column="29"/></name><parameter_list pos:line="2" pos:column="29">(<parameter><decl><type><name pos:line="2" pos:column="30">ConnStateData<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type> <name pos:line="2" pos:column="46">conn<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ClientSocketContext<pos:position pos:line="4" pos:column="24"/></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">context<pos:position pos:line="4" pos:column="33"/></name> <init pos:line="4" pos:column="34">= <expr><call><name pos:line="4" pos:column="36">parseHttpRequestAbort<pos:position pos:line="4" pos:column="57"/></name><argument_list pos:line="4" pos:column="57">(<argument><expr><name pos:line="4" pos:column="58">conn<pos:position pos:line="4" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="64">"error:request-too-large"<pos:position pos:line="4" pos:column="89"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="90"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="91"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">clientStreamNode<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">node<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><call><name><name pos:line="5" pos:column="30">context<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">getClientReplyContext<pos:position pos:line="5" pos:column="60"/></name></name><argument_list pos:line="5" pos:column="60">()<pos:position pos:line="5" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="63"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">assert<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><operator pos:line="6" pos:column="12">!<pos:position pos:line="6" pos:column="13"/></operator><call><name pos:line="6" pos:column="13">connKeepReadingIncompleteRequest<pos:position pos:line="6" pos:column="45"/></name><argument_list pos:line="6" pos:column="45">(<argument><expr><name pos:line="6" pos:column="46">conn<pos:position pos:line="6" pos:column="50"/></name></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="53"/></expr_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">conn<pos:position pos:line="7" pos:column="13"/></name><operator pos:line="7" pos:column="13">-&gt;<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="15">in<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">.<pos:position pos:line="7" pos:column="18"/></operator><name pos:line="7" pos:column="18">dechunkingState<pos:position pos:line="7" pos:column="33"/></name></name> <operator pos:line="7" pos:column="34">==<pos:position pos:line="7" pos:column="36"/></operator> <name><name pos:line="7" pos:column="37">ConnStateData<pos:position pos:line="7" pos:column="50"/></name><operator pos:line="7" pos:column="50">::<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="52">chunkParsing<pos:position pos:line="7" pos:column="64"/></name></name></expr>)<pos:position pos:line="7" pos:column="65"/></condition><then pos:line="7" pos:column="65"> <block pos:line="7" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">33<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="20">1<pos:position pos:line="8" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="23">"Chunked request is too large ("<pos:position pos:line="8" pos:column="55"/></literal> <operator pos:line="8" pos:column="56">&lt;&lt;<pos:position pos:line="8" pos:column="64"/></operator> <name><name pos:line="8" pos:column="59">conn<pos:position pos:line="8" pos:column="63"/></name><operator pos:line="8" pos:column="63">-&gt;<pos:position pos:line="8" pos:column="68"/></operator><name pos:line="8" pos:column="65">in<pos:position pos:line="8" pos:column="67"/></name><operator pos:line="8" pos:column="67">.<pos:position pos:line="8" pos:column="68"/></operator><name pos:line="8" pos:column="68">notYetUsed<pos:position pos:line="8" pos:column="78"/></name></name> <operator pos:line="8" pos:column="79">&lt;&lt;<pos:position pos:line="8" pos:column="87"/></operator> <literal type="string" pos:line="8" pos:column="82">" bytes)"<pos:position pos:line="8" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="93"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">33<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="20">1<pos:position pos:line="9" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="23">"Config 'chunked_request_body_max_size'= "<pos:position pos:line="9" pos:column="65"/></literal> <operator pos:line="9" pos:column="66">&lt;&lt;<pos:position pos:line="9" pos:column="74"/></operator> <name><name pos:line="9" pos:column="69">Config<pos:position pos:line="9" pos:column="75"/></name><operator pos:line="9" pos:column="75">.<pos:position pos:line="9" pos:column="76"/></operator><name pos:line="9" pos:column="76">maxChunkedRequestBodySize<pos:position pos:line="9" pos:column="101"/></name></name> <operator pos:line="9" pos:column="102">&lt;&lt;<pos:position pos:line="9" pos:column="110"/></operator> <literal type="string" pos:line="9" pos:column="105">" bytes."<pos:position pos:line="9" pos:column="114"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="116"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then> <else pos:line="10" pos:column="7">else <block pos:line="10" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">debugs<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="number" pos:line="11" pos:column="16">33<pos:position pos:line="11" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">1<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="23">"Request header is too large ("<pos:position pos:line="11" pos:column="54"/></literal> <operator pos:line="11" pos:column="55">&lt;&lt;<pos:position pos:line="11" pos:column="63"/></operator> <name><name pos:line="11" pos:column="58">conn<pos:position pos:line="11" pos:column="62"/></name><operator pos:line="11" pos:column="62">-&gt;<pos:position pos:line="11" pos:column="67"/></operator><name pos:line="11" pos:column="64">in<pos:position pos:line="11" pos:column="66"/></name><operator pos:line="11" pos:column="66">.<pos:position pos:line="11" pos:column="67"/></operator><name pos:line="11" pos:column="67">notYetUsed<pos:position pos:line="11" pos:column="77"/></name></name> <operator pos:line="11" pos:column="78">&lt;&lt;<pos:position pos:line="11" pos:column="86"/></operator> <literal type="string" pos:line="11" pos:column="81">" bytes)"<pos:position pos:line="11" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="92"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">debugs<pos:position pos:line="12" pos:column="15"/></name><argument_list pos:line="12" pos:column="15">(<argument><expr><literal type="number" pos:line="12" pos:column="16">33<pos:position pos:line="12" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="20">1<pos:position pos:line="12" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="23">"Config 'request_header_max_size'= "<pos:position pos:line="12" pos:column="59"/></literal> <operator pos:line="12" pos:column="60">&lt;&lt;<pos:position pos:line="12" pos:column="68"/></operator> <name><name pos:line="12" pos:column="63">Config<pos:position pos:line="12" pos:column="69"/></name><operator pos:line="12" pos:column="69">.<pos:position pos:line="12" pos:column="70"/></operator><name pos:line="12" pos:column="70">maxRequestHeaderSize<pos:position pos:line="12" pos:column="90"/></name></name> <operator pos:line="12" pos:column="91">&lt;&lt;<pos:position pos:line="12" pos:column="99"/></operator> <literal type="string" pos:line="12" pos:column="94">" bytes."<pos:position pos:line="12" pos:column="103"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="105"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></else></if>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">clientReplyContext<pos:position pos:line="14" pos:column="23"/></name> <modifier pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></modifier></type><name pos:line="14" pos:column="25">repContext<pos:position pos:line="14" pos:column="35"/></name> <init pos:line="14" pos:column="36">= <expr><cast type="dynamic" pos:line="14" pos:column="38">dynamic_cast<argument_list type="generic" pos:line="14" pos:column="50">&lt;<argument><expr><name pos:line="14" pos:column="51">clientReplyContext<pos:position pos:line="14" pos:column="69"/></name> <operator pos:line="14" pos:column="70">*<pos:position pos:line="14" pos:column="71"/></operator></expr></argument>&gt;<pos:position pos:line="14" pos:column="75"/></argument_list><argument_list pos:line="14" pos:column="72">(<argument><expr><call><name><name pos:line="14" pos:column="73">node<pos:position pos:line="14" pos:column="77"/></name><operator pos:line="14" pos:column="77">-&gt;<pos:position pos:line="14" pos:column="82"/></operator><name pos:line="14" pos:column="79">data<pos:position pos:line="14" pos:column="83"/></name><operator pos:line="14" pos:column="83">.<pos:position pos:line="14" pos:column="84"/></operator><name pos:line="14" pos:column="84">getRaw<pos:position pos:line="14" pos:column="90"/></name></name><argument_list pos:line="14" pos:column="90">()<pos:position pos:line="14" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="93"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="14" pos:column="94"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">assert<pos:position pos:line="15" pos:column="11"/></name> <argument_list pos:line="15" pos:column="12">(<argument><expr><name pos:line="15" pos:column="13">repContext<pos:position pos:line="15" pos:column="23"/></name></expr></argument>)<pos:position pos:line="15" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="16" pos:column="5">repContext<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">setReplyToError<pos:position pos:line="16" pos:column="32"/></name></name><argument_list pos:line="16" pos:column="32">(<argument><expr><name pos:line="16" pos:column="33">ERR_TOO_BIG<pos:position pos:line="16" pos:column="44"/></name></expr></argument>,
                                <argument><expr><name pos:line="17" pos:column="33">HTTP_REQUEST_ENTITY_TOO_LARGE<pos:position pos:line="17" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="64">METHOD_NONE<pos:position pos:line="17" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="77">NULL<pos:position pos:line="17" pos:column="81"/></name></expr></argument>,
                                <argument><expr><name><name pos:line="18" pos:column="33">conn<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">-&gt;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="39">peer<pos:position pos:line="18" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="45">NULL<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">NULL<pos:position pos:line="18" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="57">NULL<pos:position pos:line="18" pos:column="61"/></name></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">context<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">registerWithConn<pos:position pos:line="19" pos:column="30"/></name></name><argument_list pos:line="19" pos:column="30">()<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="20" pos:column="5">context<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">pullData<pos:position pos:line="20" pos:column="22"/></name></name><argument_list pos:line="20" pos:column="22">()<pos:position pos:line="20" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
