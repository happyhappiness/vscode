<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_905_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">commHandleWrite<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">int<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">fd<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">void<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">data<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="36"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">comm_io_callback_t<pos:position pos:line="4" pos:column="23"/></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">state<pos:position pos:line="4" pos:column="30"/></name> <init pos:line="4" pos:column="31">= <expr><operator pos:line="4" pos:column="33">(<pos:position pos:line="4" pos:column="34"/></operator><name pos:line="4" pos:column="34">comm_io_callback_t<pos:position pos:line="4" pos:column="52"/></name> <operator pos:line="4" pos:column="53">*<pos:position pos:line="4" pos:column="54"/></operator><operator pos:line="4" pos:column="54">)<pos:position pos:line="4" pos:column="55"/></operator><name pos:line="4" pos:column="55">data<pos:position pos:line="4" pos:column="59"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><literal type="number" pos:line="5" pos:column="15">0<pos:position pos:line="5" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">nleft<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">assert<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><name pos:line="8" pos:column="12">state<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">==<pos:position pos:line="8" pos:column="20"/></operator> <call><name pos:line="8" pos:column="21">COMMIO_FD_WRITECB<pos:position pos:line="8" pos:column="38"/></name><argument_list pos:line="8" pos:column="38">(<argument><expr><name pos:line="8" pos:column="39">fd<pos:position pos:line="8" pos:column="41"/></name></expr></argument>)<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">PROF_start<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">commHandleWrite<pos:position pos:line="10" pos:column="31"/></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">5<pos:position pos:line="11" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="15">5<pos:position pos:line="11" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="18">"commHandleWrite: FD "<pos:position pos:line="11" pos:column="40"/></literal> <operator pos:line="11" pos:column="41">&lt;&lt;<pos:position pos:line="11" pos:column="49"/></operator> <name pos:line="11" pos:column="44">fd<pos:position pos:line="11" pos:column="46"/></name> <operator pos:line="11" pos:column="47">&lt;&lt;<pos:position pos:line="11" pos:column="55"/></operator> <literal type="string" pos:line="11" pos:column="50">": off "<pos:position pos:line="11" pos:column="58"/></literal> <operator pos:line="11" pos:column="59">&lt;&lt;<pos:position pos:line="11" pos:column="67"/></operator>
           <operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">long<pos:position pos:line="12" pos:column="17"/></name> <name pos:line="12" pos:column="18">int<pos:position pos:line="12" pos:column="21"/></name><operator pos:line="12" pos:column="21">)<pos:position pos:line="12" pos:column="22"/></operator> <name><name pos:line="12" pos:column="23">state<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">offset<pos:position pos:line="12" pos:column="36"/></name></name> <operator pos:line="12" pos:column="37">&lt;&lt;<pos:position pos:line="12" pos:column="45"/></operator> <literal type="string" pos:line="12" pos:column="40">", sz "<pos:position pos:line="12" pos:column="47"/></literal> <operator pos:line="12" pos:column="48">&lt;&lt;<pos:position pos:line="12" pos:column="56"/></operator> <operator pos:line="12" pos:column="51">(<pos:position pos:line="12" pos:column="52"/></operator><name pos:line="12" pos:column="52">long<pos:position pos:line="12" pos:column="56"/></name> <name pos:line="12" pos:column="57">int<pos:position pos:line="12" pos:column="60"/></name><operator pos:line="12" pos:column="60">)<pos:position pos:line="12" pos:column="61"/></operator> <name><name pos:line="12" pos:column="62">state<pos:position pos:line="12" pos:column="67"/></name><operator pos:line="12" pos:column="67">-&gt;<pos:position pos:line="12" pos:column="72"/></operator><name pos:line="12" pos:column="69">size<pos:position pos:line="12" pos:column="73"/></name></name> <operator pos:line="12" pos:column="74">&lt;&lt;<pos:position pos:line="12" pos:column="82"/></operator> <literal type="string" pos:line="12" pos:column="77">"."<pos:position pos:line="12" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="82"/></expr_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">nleft<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <name><name pos:line="14" pos:column="13">state<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">size<pos:position pos:line="14" pos:column="24"/></name></name> <operator pos:line="14" pos:column="25">-<pos:position pos:line="14" pos:column="26"/></operator> <name><name pos:line="14" pos:column="27">state<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">-&gt;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="34">offset<pos:position pos:line="14" pos:column="40"/></name></name></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">len<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">FD_WRITE_METHOD<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">fd<pos:position pos:line="15" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="31">state<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">buf<pos:position pos:line="15" pos:column="41"/></name></name> <operator pos:line="15" pos:column="42">+<pos:position pos:line="15" pos:column="43"/></operator> <name><name pos:line="15" pos:column="44">state<pos:position pos:line="15" pos:column="49"/></name><operator pos:line="15" pos:column="49">-&gt;<pos:position pos:line="15" pos:column="54"/></operator><name pos:line="15" pos:column="51">offset<pos:position pos:line="15" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="59">nleft<pos:position pos:line="15" pos:column="64"/></name></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">debugs<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><literal type="number" pos:line="16" pos:column="12">5<pos:position pos:line="16" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="15">5<pos:position pos:line="16" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="18">"commHandleWrite: write() returns "<pos:position pos:line="16" pos:column="53"/></literal> <operator pos:line="16" pos:column="54">&lt;&lt;<pos:position pos:line="16" pos:column="62"/></operator> <name pos:line="16" pos:column="57">len<pos:position pos:line="16" pos:column="60"/></name></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">fd_bytes<pos:position pos:line="17" pos:column="13"/></name><argument_list pos:line="17" pos:column="13">(<argument><expr><name pos:line="17" pos:column="14">fd<pos:position pos:line="17" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="18">len<pos:position pos:line="17" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="23">FD_WRITE<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">statCounter<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">.<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">syscalls<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">.<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="26">sock<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">.<pos:position pos:line="18" pos:column="31"/></operator><name pos:line="18" pos:column="31">writes<pos:position pos:line="18" pos:column="37"/></name></name><operator pos:line="18" pos:column="37">++<pos:position pos:line="18" pos:column="39"/></operator></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">len<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">==<pos:position pos:line="20" pos:column="15"/></operator> <literal type="number" pos:line="20" pos:column="16">0<pos:position pos:line="20" pos:column="17"/></literal></expr>)<pos:position pos:line="20" pos:column="18"/></condition><then pos:line="20" pos:column="18"> <block pos:line="20" pos:column="19">{
        <comment type="block" pos:line="21" pos:column="9">/* Note we even call write if nleft == 0 */</comment>
        <comment type="block" pos:line="22" pos:column="9">/* We're done */</comment>

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">nleft<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">!=<pos:position pos:line="24" pos:column="21"/></operator> <literal type="number" pos:line="24" pos:column="22">0<pos:position pos:line="24" pos:column="23"/></literal></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then pos:line="24" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="25" pos:column="13">debugs<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="number" pos:line="25" pos:column="20">5<pos:position pos:line="25" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="23">1<pos:position pos:line="25" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="26">"commHandleWrite: FD "<pos:position pos:line="25" pos:column="48"/></literal> <operator pos:line="25" pos:column="49">&lt;&lt;<pos:position pos:line="25" pos:column="57"/></operator> <name pos:line="25" pos:column="52">fd<pos:position pos:line="25" pos:column="54"/></name> <operator pos:line="25" pos:column="55">&lt;&lt;<pos:position pos:line="25" pos:column="63"/></operator> <literal type="string" pos:line="25" pos:column="58">": write failure: connection closed with "<pos:position pos:line="25" pos:column="100"/></literal> <operator pos:line="25" pos:column="101">&lt;&lt;<pos:position pos:line="25" pos:column="109"/></operator> <name pos:line="25" pos:column="104">nleft<pos:position pos:line="25" pos:column="109"/></name> <operator pos:line="25" pos:column="110">&lt;&lt;<pos:position pos:line="25" pos:column="118"/></operator> <literal type="string" pos:line="25" pos:column="113">" bytes remaining."<pos:position pos:line="25" pos:column="132"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="134"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name pos:line="27" pos:column="9">commio_finish_callback<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">fd<pos:position pos:line="27" pos:column="34"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="36">COMMIO_FD_WRITECB<pos:position pos:line="27" pos:column="53"/></name><argument_list pos:line="27" pos:column="53">(<argument><expr><name pos:line="27" pos:column="54">fd<pos:position pos:line="27" pos:column="56"/></name></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="27" pos:column="59">nleft<pos:position pos:line="27" pos:column="64"/></name></expr> ?<pos:position pos:line="27" pos:column="66"/></condition><then pos:line="27" pos:column="66"> <expr><name pos:line="27" pos:column="67">COMM_ERROR<pos:position pos:line="27" pos:column="77"/></name></expr> <pos:position pos:line="27" pos:column="78"/></then><else pos:line="27" pos:column="78">: <expr><name pos:line="27" pos:column="80">COMM_OK<pos:position pos:line="27" pos:column="87"/></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="27" pos:column="89">errno<pos:position pos:line="27" pos:column="94"/></name></expr></argument>)<pos:position pos:line="27" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="96"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then> <elseif pos:line="28" pos:column="7">else <if pos:line="28" pos:column="12">if <condition pos:line="28" pos:column="15">(<expr><name pos:line="28" pos:column="16">len<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">&lt;<pos:position pos:line="28" pos:column="24"/></operator> <literal type="number" pos:line="28" pos:column="22">0<pos:position pos:line="28" pos:column="23"/></literal></expr>)<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24"> <block pos:line="28" pos:column="25">{
        <comment type="block" pos:line="29" pos:column="9">/* An error */</comment>

        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><name><name pos:line="31" pos:column="13">fd_table<pos:position pos:line="31" pos:column="21"/></name><index pos:line="31" pos:column="21">[<expr><name pos:line="31" pos:column="22">fd<pos:position pos:line="31" pos:column="24"/></name></expr>]<pos:position pos:line="31" pos:column="25"/></index></name><operator pos:line="31" pos:column="25">.<pos:position pos:line="31" pos:column="26"/></operator><name><name pos:line="31" pos:column="26">flags<pos:position pos:line="31" pos:column="31"/></name><operator pos:line="31" pos:column="31">.<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="32">socket_eof<pos:position pos:line="31" pos:column="42"/></name></name></expr>)<pos:position pos:line="31" pos:column="43"/></condition><then pos:line="31" pos:column="43"> <block pos:line="31" pos:column="44">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">debugs<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><literal type="number" pos:line="32" pos:column="20">50<pos:position pos:line="32" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="24">2<pos:position pos:line="32" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="27">"commHandleWrite: FD "<pos:position pos:line="32" pos:column="49"/></literal> <operator pos:line="32" pos:column="50">&lt;&lt;<pos:position pos:line="32" pos:column="58"/></operator> <name pos:line="32" pos:column="53">fd<pos:position pos:line="32" pos:column="55"/></name> <operator pos:line="32" pos:column="56">&lt;&lt;<pos:position pos:line="32" pos:column="64"/></operator> <literal type="string" pos:line="32" pos:column="59">": write failure: "<pos:position pos:line="32" pos:column="78"/></literal> <operator pos:line="32" pos:column="79">&lt;&lt;<pos:position pos:line="32" pos:column="87"/></operator> <call><name pos:line="32" pos:column="82">xstrerror<pos:position pos:line="32" pos:column="91"/></name><argument_list pos:line="32" pos:column="91">()<pos:position pos:line="32" pos:column="93"/></argument_list></call> <operator pos:line="32" pos:column="94">&lt;&lt;<pos:position pos:line="32" pos:column="102"/></operator> <literal type="string" pos:line="32" pos:column="97">"."<pos:position pos:line="32" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="102"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">commio_finish_callback<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><name pos:line="33" pos:column="36">fd<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="40">COMMIO_FD_WRITECB<pos:position pos:line="33" pos:column="57"/></name><argument_list pos:line="33" pos:column="57">(<argument><expr><name pos:line="33" pos:column="58">fd<pos:position pos:line="33" pos:column="60"/></name></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="33" pos:column="63">nleft<pos:position pos:line="33" pos:column="68"/></name></expr> ?<pos:position pos:line="33" pos:column="70"/></condition><then pos:line="33" pos:column="70"> <expr><name pos:line="33" pos:column="71">COMM_ERROR<pos:position pos:line="33" pos:column="81"/></name></expr> <pos:position pos:line="33" pos:column="82"/></then><else pos:line="33" pos:column="82">: <expr><name pos:line="33" pos:column="84">COMM_OK<pos:position pos:line="33" pos:column="91"/></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="33" pos:column="93">errno<pos:position pos:line="33" pos:column="98"/></name></expr></argument>)<pos:position pos:line="33" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="100"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then> <elseif pos:line="34" pos:column="11">else <if pos:line="34" pos:column="16">if <condition pos:line="34" pos:column="19">(<expr><call><name pos:line="34" pos:column="20">ignoreErrno<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">errno<pos:position pos:line="34" pos:column="37"/></name></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="39"/></condition><then pos:line="34" pos:column="39"> <block pos:line="34" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">debugs<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><literal type="number" pos:line="35" pos:column="20">50<pos:position pos:line="35" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="24">10<pos:position pos:line="35" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="28">"commHandleWrite: FD "<pos:position pos:line="35" pos:column="50"/></literal> <operator pos:line="35" pos:column="51">&lt;&lt;<pos:position pos:line="35" pos:column="59"/></operator> <name pos:line="35" pos:column="54">fd<pos:position pos:line="35" pos:column="56"/></name> <operator pos:line="35" pos:column="57">&lt;&lt;<pos:position pos:line="35" pos:column="65"/></operator> <literal type="string" pos:line="35" pos:column="60">": write failure: "<pos:position pos:line="35" pos:column="79"/></literal> <operator pos:line="35" pos:column="80">&lt;&lt;<pos:position pos:line="35" pos:column="88"/></operator> <call><name pos:line="35" pos:column="83">xstrerror<pos:position pos:line="35" pos:column="92"/></name><argument_list pos:line="35" pos:column="92">()<pos:position pos:line="35" pos:column="94"/></argument_list></call> <operator pos:line="35" pos:column="95">&lt;&lt;<pos:position pos:line="35" pos:column="103"/></operator> <literal type="string" pos:line="35" pos:column="98">"."<pos:position pos:line="35" pos:column="101"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="103"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">commSetSelect<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">fd<pos:position pos:line="36" pos:column="29"/></name></expr></argument>,
                          <argument><expr><name pos:line="37" pos:column="27">COMM_SELECT_WRITE<pos:position pos:line="37" pos:column="44"/></name></expr></argument>,
                          <argument><expr><name pos:line="38" pos:column="27">commHandleWrite<pos:position pos:line="38" pos:column="42"/></name></expr></argument>,
                          <argument><expr><name pos:line="39" pos:column="27">state<pos:position pos:line="39" pos:column="32"/></name></expr></argument>,
                          <argument><expr><literal type="number" pos:line="40" pos:column="27">0<pos:position pos:line="40" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if></elseif> <else pos:line="41" pos:column="11">else <block pos:line="41" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="42" pos:column="13">debugs<pos:position pos:line="42" pos:column="19"/></name><argument_list pos:line="42" pos:column="19">(<argument><expr><literal type="number" pos:line="42" pos:column="20">50<pos:position pos:line="42" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="24">2<pos:position pos:line="42" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="27">"commHandleWrite: FD "<pos:position pos:line="42" pos:column="49"/></literal> <operator pos:line="42" pos:column="50">&lt;&lt;<pos:position pos:line="42" pos:column="58"/></operator> <name pos:line="42" pos:column="53">fd<pos:position pos:line="42" pos:column="55"/></name> <operator pos:line="42" pos:column="56">&lt;&lt;<pos:position pos:line="42" pos:column="64"/></operator> <literal type="string" pos:line="42" pos:column="59">": write failure: "<pos:position pos:line="42" pos:column="78"/></literal> <operator pos:line="42" pos:column="79">&lt;&lt;<pos:position pos:line="42" pos:column="87"/></operator> <call><name pos:line="42" pos:column="82">xstrerror<pos:position pos:line="42" pos:column="91"/></name><argument_list pos:line="42" pos:column="91">()<pos:position pos:line="42" pos:column="93"/></argument_list></call> <operator pos:line="42" pos:column="94">&lt;&lt;<pos:position pos:line="42" pos:column="102"/></operator> <literal type="string" pos:line="42" pos:column="97">"."<pos:position pos:line="42" pos:column="100"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="102"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">commio_finish_callback<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name pos:line="43" pos:column="36">fd<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="43" pos:column="40">COMMIO_FD_WRITECB<pos:position pos:line="43" pos:column="57"/></name><argument_list pos:line="43" pos:column="57">(<argument><expr><name pos:line="43" pos:column="58">fd<pos:position pos:line="43" pos:column="60"/></name></expr></argument>)<pos:position pos:line="43" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="43" pos:column="63">nleft<pos:position pos:line="43" pos:column="68"/></name></expr> ?<pos:position pos:line="43" pos:column="70"/></condition><then pos:line="43" pos:column="70"> <expr><name pos:line="43" pos:column="71">COMM_ERROR<pos:position pos:line="43" pos:column="81"/></name></expr> <pos:position pos:line="43" pos:column="82"/></then><else pos:line="43" pos:column="82">: <expr><name pos:line="43" pos:column="84">COMM_OK<pos:position pos:line="43" pos:column="91"/></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="43" pos:column="93">errno<pos:position pos:line="43" pos:column="98"/></name></expr></argument>)<pos:position pos:line="43" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="100"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></else></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if></elseif> <else pos:line="45" pos:column="7">else <block pos:line="45" pos:column="12">{
        <comment type="block" pos:line="46" pos:column="9">/* A successful write, continue */</comment>
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">state<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">offset<pos:position pos:line="47" pos:column="22"/></name></name> <operator pos:line="47" pos:column="23">+=<pos:position pos:line="47" pos:column="25"/></operator> <name pos:line="47" pos:column="26">len<pos:position pos:line="47" pos:column="29"/></name></expr>;<pos:position pos:line="47" pos:column="30"/></expr_stmt>

        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name><name pos:line="49" pos:column="13">state<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">-&gt;<pos:position pos:line="49" pos:column="23"/></operator><name pos:line="49" pos:column="20">offset<pos:position pos:line="49" pos:column="26"/></name></name> <operator pos:line="49" pos:column="27">&lt;<pos:position pos:line="49" pos:column="31"/></operator> <name><name pos:line="49" pos:column="29">state<pos:position pos:line="49" pos:column="34"/></name><operator pos:line="49" pos:column="34">-&gt;<pos:position pos:line="49" pos:column="39"/></operator><name pos:line="49" pos:column="36">size<pos:position pos:line="49" pos:column="40"/></name></name></expr>)<pos:position pos:line="49" pos:column="41"/></condition><then pos:line="49" pos:column="41"> <block pos:line="49" pos:column="42">{
            <comment type="block" pos:line="50" pos:column="13">/* Not done, reinstall the write handler and write some more */</comment>
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">commSetSelect<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">fd<pos:position pos:line="51" pos:column="29"/></name></expr></argument>,
                          <argument><expr><name pos:line="52" pos:column="27">COMM_SELECT_WRITE<pos:position pos:line="52" pos:column="44"/></name></expr></argument>,
                          <argument><expr><name pos:line="53" pos:column="27">commHandleWrite<pos:position pos:line="53" pos:column="42"/></name></expr></argument>,
                          <argument><expr><name pos:line="54" pos:column="27">state<pos:position pos:line="54" pos:column="32"/></name></expr></argument>,
                          <argument><expr><literal type="number" pos:line="55" pos:column="27">0<pos:position pos:line="55" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="56" pos:column="10"/></block></then> <else pos:line="56" pos:column="11">else <block pos:line="56" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">commio_finish_callback<pos:position pos:line="57" pos:column="35"/></name><argument_list pos:line="57" pos:column="35">(<argument><expr><name pos:line="57" pos:column="36">fd<pos:position pos:line="57" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="57" pos:column="40">COMMIO_FD_WRITECB<pos:position pos:line="57" pos:column="57"/></name><argument_list pos:line="57" pos:column="57">(<argument><expr><name pos:line="57" pos:column="58">fd<pos:position pos:line="57" pos:column="60"/></name></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="57" pos:column="63">nleft<pos:position pos:line="57" pos:column="68"/></name></expr> ?<pos:position pos:line="57" pos:column="70"/></condition><then pos:line="57" pos:column="70"> <expr><name pos:line="57" pos:column="71">COMM_OK<pos:position pos:line="57" pos:column="78"/></name></expr> <pos:position pos:line="57" pos:column="79"/></then><else pos:line="57" pos:column="79">: <expr><name pos:line="57" pos:column="81">COMM_ERROR<pos:position pos:line="57" pos:column="91"/></name></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="57" pos:column="93">errno<pos:position pos:line="57" pos:column="98"/></name></expr></argument>)<pos:position pos:line="57" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="100"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></else></if>
    }<pos:position pos:line="59" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="61" pos:column="5">PROF_stop<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><name pos:line="61" pos:column="15">commHandleWrite<pos:position pos:line="61" pos:column="30"/></name></expr></argument>)<pos:position pos:line="61" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
