<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3036_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ConnStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">clientParseRequests<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">()<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">bool<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">parsed_req<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><literal type="boolean" pos:line="4" pos:column="23">false<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">debugs<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="number" pos:line="6" pos:column="12">33<pos:position pos:line="6" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="16">5<pos:position pos:line="6" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="19">HERE<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">&lt;&lt;<pos:position pos:line="6" pos:column="32"/></operator> <name pos:line="6" pos:column="27">clientConnection<pos:position pos:line="6" pos:column="43"/></name> <operator pos:line="6" pos:column="44">&lt;&lt;<pos:position pos:line="6" pos:column="52"/></operator> <literal type="string" pos:line="6" pos:column="47">": attempting to parse"<pos:position pos:line="6" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="72"/></expr_stmt>

    <comment type="line" pos:line="8" pos:column="5">// Loop while we have read bytes that are not needed for producing the body</comment>
    <comment type="line" pos:line="9" pos:column="5">// On errors, bodyPipe may become nil, but readMore will be cleared</comment>
    <while pos:line="10" pos:column="5">while <condition pos:line="10" pos:column="11">(<expr><operator pos:line="10" pos:column="12">!<pos:position pos:line="10" pos:column="13"/></operator><call><name><name pos:line="10" pos:column="13">inBuf<pos:position pos:line="10" pos:column="18"/></name><operator pos:line="10" pos:column="18">.<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">isEmpty<pos:position pos:line="10" pos:column="26"/></name></name><argument_list pos:line="10" pos:column="26">()<pos:position pos:line="10" pos:column="28"/></argument_list></call> <operator pos:line="10" pos:column="29">&amp;&amp;<pos:position pos:line="10" pos:column="39"/></operator> <operator pos:line="10" pos:column="32">!<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="33">bodyPipe<pos:position pos:line="10" pos:column="41"/></name> <operator pos:line="10" pos:column="42">&amp;&amp;<pos:position pos:line="10" pos:column="52"/></operator> <name><name pos:line="10" pos:column="45">flags<pos:position pos:line="10" pos:column="50"/></name><operator pos:line="10" pos:column="50">.<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="51">readMore<pos:position pos:line="10" pos:column="59"/></name></name></expr>)<pos:position pos:line="10" pos:column="60"/></condition> <block pos:line="10" pos:column="61">{

        <comment type="line" pos:line="12" pos:column="9">// Prohibit concurrent requests when using a pinned to-server connection</comment>
        <comment type="line" pos:line="13" pos:column="9">// because our Client classes do not support request pipelining.</comment>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">pinning<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">.<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="21">pinned<pos:position pos:line="14" pos:column="27"/></name></name> <operator pos:line="14" pos:column="28">&amp;&amp;<pos:position pos:line="14" pos:column="38"/></operator> <operator pos:line="14" pos:column="31">!<pos:position pos:line="14" pos:column="32"/></operator><name><name pos:line="14" pos:column="32">pinning<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">.<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="40">readHandler<pos:position pos:line="14" pos:column="51"/></name></name></expr>)<pos:position pos:line="14" pos:column="52"/></condition><then pos:line="14" pos:column="52"> <block pos:line="14" pos:column="53">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">debugs<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><literal type="number" pos:line="15" pos:column="20">33<pos:position pos:line="15" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="24">3<pos:position pos:line="15" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="27">clientConnection<pos:position pos:line="15" pos:column="43"/></name> <operator pos:line="15" pos:column="44">&lt;&lt;<pos:position pos:line="15" pos:column="52"/></operator> <literal type="string" pos:line="15" pos:column="47">" waits for busy "<pos:position pos:line="15" pos:column="65"/></literal> <operator pos:line="15" pos:column="66">&lt;&lt;<pos:position pos:line="15" pos:column="74"/></operator> <name><name pos:line="15" pos:column="69">pinning<pos:position pos:line="15" pos:column="76"/></name><operator pos:line="15" pos:column="76">.<pos:position pos:line="15" pos:column="77"/></operator><name pos:line="15" pos:column="77">serverConnection<pos:position pos:line="15" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="95"/></expr_stmt>
            <break pos:line="16" pos:column="13">break;<pos:position pos:line="16" pos:column="19"/></break>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="19" pos:column="9">/* Limit the number of concurrent requests */</comment>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">concurrentRequestQueueFilled<pos:position pos:line="20" pos:column="41"/></name><argument_list pos:line="20" pos:column="41">()<pos:position pos:line="20" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44">
            <block type="pseudo"><break pos:line="21" pos:column="13">break;<pos:position pos:line="21" pos:column="19"/></break></block></then></if>

        <comment type="line" pos:line="23" pos:column="9">// try to parse the PROXY protocol header magic bytes</comment>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">needProxyProtocolHeader_<pos:position pos:line="24" pos:column="37"/></name></expr>)<pos:position pos:line="24" pos:column="38"/></condition><then pos:line="24" pos:column="38"> <block pos:line="24" pos:column="39">{
            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><operator pos:line="25" pos:column="17">!<pos:position pos:line="25" pos:column="18"/></operator><call><name pos:line="25" pos:column="18">parseProxyProtocolHeader<pos:position pos:line="25" pos:column="42"/></name><argument_list pos:line="25" pos:column="42">()<pos:position pos:line="25" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="45"/></condition><then pos:line="25" pos:column="45">
                <block type="pseudo"><break pos:line="26" pos:column="17">break;<pos:position pos:line="26" pos:column="23"/></break></block></then></if>

            <comment type="line" pos:line="28" pos:column="13">// we have been waiting for PROXY to provide client-IP</comment>
            <comment type="line" pos:line="29" pos:column="13">// for some lookups, ie rDNS and IDENT.</comment>
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">whenClientIpKnown<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">()<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>

        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<decl><type><name><name pos:line="33" pos:column="13">Http<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">::<pos:position pos:line="33" pos:column="19"/></operator><name pos:line="33" pos:column="19">StreamPointer<pos:position pos:line="33" pos:column="32"/></name></name></type> <name pos:line="33" pos:column="33">context<pos:position pos:line="33" pos:column="40"/></name> <init pos:line="33" pos:column="41">= <expr><call><name pos:line="33" pos:column="43">parseOneRequest<pos:position pos:line="33" pos:column="58"/></name><argument_list pos:line="33" pos:column="58">()<pos:position pos:line="33" pos:column="60"/></argument_list></call></expr></init></decl>)<pos:position pos:line="33" pos:column="61"/></condition><then pos:line="33" pos:column="61"> <block pos:line="33" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">debugs<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">(<argument><expr><literal type="number" pos:line="34" pos:column="20">33<pos:position pos:line="34" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="24">5<pos:position pos:line="34" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="27">clientConnection<pos:position pos:line="34" pos:column="43"/></name> <operator pos:line="34" pos:column="44">&lt;&lt;<pos:position pos:line="34" pos:column="52"/></operator> <literal type="string" pos:line="34" pos:column="47">": done parsing a request"<pos:position pos:line="34" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="75"/></expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="36" pos:column="13">AsyncCall<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">::<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="24">Pointer<pos:position pos:line="36" pos:column="31"/></name></name></type> <name pos:line="36" pos:column="32">timeoutCall<pos:position pos:line="36" pos:column="43"/></name> <init pos:line="36" pos:column="44">= <expr><call><name pos:line="36" pos:column="46">commCbCall<pos:position pos:line="36" pos:column="56"/></name><argument_list pos:line="36" pos:column="56">(<argument><expr><literal type="number" pos:line="36" pos:column="57">5<pos:position pos:line="36" pos:column="58"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="60">4<pos:position pos:line="36" pos:column="61"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="63">"clientLifetimeTimeout"<pos:position pos:line="36" pos:column="86"/></literal></expr></argument>,
                                             <argument><expr><call><name pos:line="37" pos:column="46">CommTimeoutCbPtrFun<pos:position pos:line="37" pos:column="65"/></name><argument_list pos:line="37" pos:column="65">(<argument><expr><name pos:line="37" pos:column="66">clientLifetimeTimeout<pos:position pos:line="37" pos:column="87"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="89">context<pos:position pos:line="37" pos:column="96"/></name><operator pos:line="37" pos:column="96">-&gt;<pos:position pos:line="37" pos:column="101"/></operator><name pos:line="37" pos:column="98">http<pos:position pos:line="37" pos:column="102"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="103"/></argument_list></call></expr></argument>)<pos:position pos:line="37" pos:column="104"/></argument_list></call></expr></init></decl>;<pos:position pos:line="37" pos:column="105"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">commSetConnTimeout<pos:position pos:line="38" pos:column="31"/></name><argument_list pos:line="38" pos:column="31">(<argument><expr><name pos:line="38" pos:column="32">clientConnection<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="50">Config<pos:position pos:line="38" pos:column="56"/></name><operator pos:line="38" pos:column="56">.<pos:position pos:line="38" pos:column="57"/></operator><name pos:line="38" pos:column="57">Timeout<pos:position pos:line="38" pos:column="64"/></name><operator pos:line="38" pos:column="64">.<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="65">lifetime<pos:position pos:line="38" pos:column="73"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="75">timeoutCall<pos:position pos:line="38" pos:column="86"/></name></expr></argument>)<pos:position pos:line="38" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="88"/></expr_stmt>

            <expr_stmt><expr><call><name><name pos:line="40" pos:column="13">context<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">-&gt;<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="22">registerWithConn<pos:position pos:line="40" pos:column="38"/></name></name><argument_list pos:line="40" pos:column="38">()<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="42" pos:column="13">processParsedRequest<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">context<pos:position pos:line="42" pos:column="41"/></name></expr></argument>)<pos:position pos:line="42" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt>

            <expr_stmt><expr><name pos:line="44" pos:column="13">parsed_req<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <literal type="boolean" pos:line="44" pos:column="26">true<pos:position pos:line="44" pos:column="30"/></literal></expr>;<pos:position pos:line="44" pos:column="31"/></expr_stmt> <comment type="line" pos:line="44" pos:column="32">// XXX: do we really need to parse everything right NOW ?</comment>

            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><call><name><name pos:line="46" pos:column="17">context<pos:position pos:line="46" pos:column="24"/></name><operator pos:line="46" pos:column="24">-&gt;<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="26">mayUseConnection<pos:position pos:line="46" pos:column="42"/></name></name><argument_list pos:line="46" pos:column="42">()<pos:position pos:line="46" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="45"/></condition><then pos:line="46" pos:column="45"> <block pos:line="46" pos:column="46">{
                <expr_stmt><expr><call><name pos:line="47" pos:column="17">debugs<pos:position pos:line="47" pos:column="23"/></name><argument_list pos:line="47" pos:column="23">(<argument><expr><literal type="number" pos:line="47" pos:column="24">33<pos:position pos:line="47" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="28">3<pos:position pos:line="47" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="31">HERE<pos:position pos:line="47" pos:column="35"/></name> <operator pos:line="47" pos:column="36">&lt;&lt;<pos:position pos:line="47" pos:column="44"/></operator> <literal type="string" pos:line="47" pos:column="39">"Not parsing new requests, as this request may need the connection"<pos:position pos:line="47" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="108"/></expr_stmt>
                <break pos:line="48" pos:column="17">break;<pos:position pos:line="48" pos:column="23"/></break>
            }<pos:position pos:line="49" pos:column="14"/></block></then></if>
        }<pos:position pos:line="50" pos:column="10"/></block></then> <else pos:line="50" pos:column="11">else <block pos:line="50" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">debugs<pos:position pos:line="51" pos:column="19"/></name><argument_list pos:line="51" pos:column="19">(<argument><expr><literal type="number" pos:line="51" pos:column="20">33<pos:position pos:line="51" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="24">5<pos:position pos:line="51" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="27">clientConnection<pos:position pos:line="51" pos:column="43"/></name> <operator pos:line="51" pos:column="44">&lt;&lt;<pos:position pos:line="51" pos:column="52"/></operator> <literal type="string" pos:line="51" pos:column="47">": not enough request data: "<pos:position pos:line="51" pos:column="76"/></literal> <operator pos:line="51" pos:column="77">&lt;&lt;<pos:position pos:line="51" pos:column="85"/></operator>
                   <call><name><name pos:line="52" pos:column="20">inBuf<pos:position pos:line="52" pos:column="25"/></name><operator pos:line="52" pos:column="25">.<pos:position pos:line="52" pos:column="26"/></operator><name pos:line="52" pos:column="26">length<pos:position pos:line="52" pos:column="32"/></name></name><argument_list pos:line="52" pos:column="32">()<pos:position pos:line="52" pos:column="34"/></argument_list></call> <operator pos:line="52" pos:column="35">&lt;&lt;<pos:position pos:line="52" pos:column="43"/></operator> <literal type="string" pos:line="52" pos:column="38">" &lt; "<pos:position pos:line="52" pos:column="46"/></literal> <operator pos:line="52" pos:column="44">&lt;&lt;<pos:position pos:line="52" pos:column="52"/></operator> <name><name pos:line="52" pos:column="47">Config<pos:position pos:line="52" pos:column="53"/></name><operator pos:line="52" pos:column="53">.<pos:position pos:line="52" pos:column="54"/></operator><name pos:line="52" pos:column="54">maxRequestHeaderSize<pos:position pos:line="52" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">Must<pos:position pos:line="53" pos:column="17"/></name><argument_list pos:line="53" pos:column="17">(<argument><expr><call><name><name pos:line="53" pos:column="18">inBuf<pos:position pos:line="53" pos:column="23"/></name><operator pos:line="53" pos:column="23">.<pos:position pos:line="53" pos:column="24"/></operator><name pos:line="53" pos:column="24">length<pos:position pos:line="53" pos:column="30"/></name></name><argument_list pos:line="53" pos:column="30">()<pos:position pos:line="53" pos:column="32"/></argument_list></call> <operator pos:line="53" pos:column="33">&lt;<pos:position pos:line="53" pos:column="37"/></operator> <name><name pos:line="53" pos:column="35">Config<pos:position pos:line="53" pos:column="41"/></name><operator pos:line="53" pos:column="41">.<pos:position pos:line="53" pos:column="42"/></operator><name pos:line="53" pos:column="42">maxRequestHeaderSize<pos:position pos:line="53" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="64"/></expr_stmt>
            <break pos:line="54" pos:column="13">break;<pos:position pos:line="54" pos:column="19"/></break>
        }<pos:position pos:line="55" pos:column="10"/></block></else></if>
    }<pos:position pos:line="56" pos:column="6"/></block></while>

    <comment type="block" pos:line="58" pos:column="5">/* XXX where to 'finish' the parsing pass? */</comment>
    <return pos:line="59" pos:column="5">return <expr><name pos:line="59" pos:column="12">parsed_req<pos:position pos:line="59" pos:column="22"/></name></expr>;<pos:position pos:line="59" pos:column="23"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
