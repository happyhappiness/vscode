<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1805_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">peerProbeConnect<pos:position pos:line="2" pos:column="17"/></name><parameter_list pos:line="2" pos:column="17">(<parameter><decl><type><name pos:line="2" pos:column="18">peer<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type> <name pos:line="2" pos:column="25">p<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">fd<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">time_t<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">ctimeout<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><ternary><condition><expr><name><name pos:line="5" pos:column="23">p<pos:position pos:line="5" pos:column="24"/></name><operator pos:line="5" pos:column="24">-&gt;<pos:position pos:line="5" pos:column="29"/></operator><name pos:line="5" pos:column="26">connect_timeout<pos:position pos:line="5" pos:column="41"/></name></name> <operator pos:line="5" pos:column="42">&gt;<pos:position pos:line="5" pos:column="46"/></operator> <literal type="number" pos:line="5" pos:column="44">0<pos:position pos:line="5" pos:column="45"/></literal></expr> ?<pos:position pos:line="5" pos:column="47"/></condition><then pos:line="5" pos:column="47"> <expr><name><name pos:line="5" pos:column="48">p<pos:position pos:line="5" pos:column="49"/></name><operator pos:line="5" pos:column="49">-&gt;<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="51">connect_timeout<pos:position pos:line="5" pos:column="66"/></name></name></expr>
                      <pos:position pos:line="6" pos:column="23"/></then><else pos:line="6" pos:column="23">: <expr><name><name pos:line="6" pos:column="25">Config<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">.<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="32">Timeout<pos:position pos:line="6" pos:column="39"/></name><operator pos:line="6" pos:column="39">.<pos:position pos:line="6" pos:column="40"/></operator><name pos:line="6" pos:column="40">peer_connect<pos:position pos:line="6" pos:column="52"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="6" pos:column="53"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">ret<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><name pos:line="7" pos:column="15">squid_curtime<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">-<pos:position pos:line="7" pos:column="30"/></operator> <name><name pos:line="7" pos:column="31">p<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">stats<pos:position pos:line="7" pos:column="39"/></name><operator pos:line="7" pos:column="39">.<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="40">last_connect_failure<pos:position pos:line="7" pos:column="60"/></name></name> <operator pos:line="7" pos:column="61">&gt;<pos:position pos:line="7" pos:column="65"/></operator> <name pos:line="7" pos:column="63">ctimeout<pos:position pos:line="7" pos:column="71"/></name> <operator pos:line="7" pos:column="72">*<pos:position pos:line="7" pos:column="73"/></operator> <literal type="number" pos:line="7" pos:column="74">10<pos:position pos:line="7" pos:column="76"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="77"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">p<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">test_fd<pos:position pos:line="9" pos:column="19"/></name></name> <operator pos:line="9" pos:column="20">!=<pos:position pos:line="9" pos:column="22"/></operator> <operator pos:line="9" pos:column="23">-<pos:position pos:line="9" pos:column="24"/></operator><literal type="number" pos:line="9" pos:column="24">1<pos:position pos:line="9" pos:column="25"/></literal></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">ret<pos:position pos:line="10" pos:column="19"/></name></expr>;<pos:position pos:line="10" pos:column="20"/></return></block></then></if><comment type="block" pos:line="10" pos:column="20">/* probe already running */</comment>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">squid_curtime<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">-<pos:position pos:line="12" pos:column="24"/></operator> <name><name pos:line="12" pos:column="25">p<pos:position pos:line="12" pos:column="26"/></name><operator pos:line="12" pos:column="26">-&gt;<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="28">stats<pos:position pos:line="12" pos:column="33"/></name><operator pos:line="12" pos:column="33">.<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">last_connect_probe<pos:position pos:line="12" pos:column="52"/></name></name> <operator pos:line="12" pos:column="53">==<pos:position pos:line="12" pos:column="55"/></operator> <literal type="number" pos:line="12" pos:column="56">0<pos:position pos:line="12" pos:column="57"/></literal></expr>)<pos:position pos:line="12" pos:column="58"/></condition><then pos:line="12" pos:column="58">
        <block type="pseudo"><return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">ret<pos:position pos:line="13" pos:column="19"/></name></expr>;<pos:position pos:line="13" pos:column="20"/></return></block></then></if><comment type="block" pos:line="13" pos:column="20">/* don't probe to often */</comment>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">IpAddress<pos:position pos:line="15" pos:column="14"/></name></type> <name pos:line="15" pos:column="15">temp<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><call><name pos:line="15" pos:column="20">getOutgoingAddr<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">NULL<pos:position pos:line="15" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="15" pos:column="41">p<pos:position pos:line="15" pos:column="42"/></name></expr></argument>)<pos:position pos:line="15" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="44"/></argument_list></decl>;<pos:position pos:line="15" pos:column="45"/></decl_stmt>

    <comment type="line" pos:line="17" pos:column="5">// if IPv6 is disabled try to force IPv4-only outgoing.</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><name><name pos:line="18" pos:column="10">Ip<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">::<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">EnableIpv6<pos:position pos:line="18" pos:column="24"/></name></name> <operator pos:line="18" pos:column="25">&amp;&amp;<pos:position pos:line="18" pos:column="35"/></operator> <operator pos:line="18" pos:column="28">!<pos:position pos:line="18" pos:column="29"/></operator><call><name><name pos:line="18" pos:column="29">temp<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">.<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="34">SetIPv4<pos:position pos:line="18" pos:column="41"/></name></name><argument_list pos:line="18" pos:column="41">()<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="44"/></condition><then pos:line="18" pos:column="44"> <block pos:line="18" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">50<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">DBG_IMPORTANT<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="35">"WARNING: IPv6 is disabled. Failed to use "<pos:position pos:line="19" pos:column="78"/></literal> <operator pos:line="19" pos:column="79">&lt;&lt;<pos:position pos:line="19" pos:column="87"/></operator> <name pos:line="19" pos:column="82">temp<pos:position pos:line="19" pos:column="86"/></name> <operator pos:line="19" pos:column="87">&lt;&lt;<pos:position pos:line="19" pos:column="95"/></operator> <literal type="string" pos:line="19" pos:column="90">" to probe "<pos:position pos:line="19" pos:column="102"/></literal> <operator pos:line="19" pos:column="103">&lt;&lt;<pos:position pos:line="19" pos:column="111"/></operator> <name><name pos:line="19" pos:column="106">p<pos:position pos:line="19" pos:column="107"/></name><operator pos:line="19" pos:column="107">-&gt;<pos:position pos:line="19" pos:column="112"/></operator><name pos:line="19" pos:column="109">host<pos:position pos:line="19" pos:column="113"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="115"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">ret<pos:position pos:line="20" pos:column="19"/></name></expr>;<pos:position pos:line="20" pos:column="20"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="23" pos:column="5">// if IPv6 is split-stack, prefer IPv4</comment>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name><name pos:line="24" pos:column="9">Ip<pos:position pos:line="24" pos:column="11"/></name><operator pos:line="24" pos:column="11">::<pos:position pos:line="24" pos:column="13"/></operator><name pos:line="24" pos:column="13">EnableIpv6<pos:position pos:line="24" pos:column="23"/></name></name><operator pos:line="24" pos:column="23">&amp;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="24">IPV6_SPECIAL_SPLITSTACK<pos:position pos:line="24" pos:column="47"/></name></expr>)<pos:position pos:line="24" pos:column="48"/></condition><then pos:line="24" pos:column="48"> <block pos:line="24" pos:column="49">{
        <comment type="line" pos:line="25" pos:column="9">// NP: This is not a great choice of default,</comment>
        <comment type="line" pos:line="26" pos:column="9">// but with the current Internet being IPv4-majority has a higher success rate.</comment>
        <comment type="line" pos:line="27" pos:column="9">// if setting to IPv4 fails we dont care, that just means to use IPv6 outgoing.</comment>
        <expr_stmt><expr><call><name><name pos:line="28" pos:column="9">temp<pos:position pos:line="28" pos:column="13"/></name><operator pos:line="28" pos:column="13">.<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">SetIPv4<pos:position pos:line="28" pos:column="21"/></name></name><argument_list pos:line="28" pos:column="21">()<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">fd<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <call><name pos:line="31" pos:column="10">comm_open<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">SOCK_STREAM<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="33">IPPROTO_TCP<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="46">temp<pos:position pos:line="31" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="52">COMM_NONBLOCKING<pos:position pos:line="31" pos:column="68"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="70">p<pos:position pos:line="31" pos:column="71"/></name><operator pos:line="31" pos:column="71">-&gt;<pos:position pos:line="31" pos:column="76"/></operator><name pos:line="31" pos:column="73">host<pos:position pos:line="31" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="79"/></expr_stmt>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">fd<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">&lt;<pos:position pos:line="33" pos:column="16"/></operator> <literal type="number" pos:line="33" pos:column="14">0<pos:position pos:line="33" pos:column="15"/></literal></expr>)<pos:position pos:line="33" pos:column="16"/></condition><then pos:line="33" pos:column="16">
        <block type="pseudo"><return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">ret<pos:position pos:line="34" pos:column="19"/></name></expr>;<pos:position pos:line="34" pos:column="20"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">comm_add_close_handler<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">fd<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="32">&amp;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="33">peerProbeClosed<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="50">p<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">commSetTimeout<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><name pos:line="37" pos:column="20">fd<pos:position pos:line="37" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="24">ctimeout<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="34">peerProbeConnectTimeout<pos:position pos:line="37" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="59">p<pos:position pos:line="37" pos:column="60"/></name></expr></argument>)<pos:position pos:line="37" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="39" pos:column="5">p<pos:position pos:line="39" pos:column="6"/></name><operator pos:line="39" pos:column="6">-&gt;<pos:position pos:line="39" pos:column="11"/></operator><name pos:line="39" pos:column="8">test_fd<pos:position pos:line="39" pos:column="15"/></name></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <name pos:line="39" pos:column="18">fd<pos:position pos:line="39" pos:column="20"/></name></expr>;<pos:position pos:line="39" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="41" pos:column="5">p<pos:position pos:line="41" pos:column="6"/></name><operator pos:line="41" pos:column="6">-&gt;<pos:position pos:line="41" pos:column="11"/></operator><name pos:line="41" pos:column="8">stats<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">.<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">last_connect_probe<pos:position pos:line="41" pos:column="32"/></name></name> <operator pos:line="41" pos:column="33">=<pos:position pos:line="41" pos:column="34"/></operator> <name pos:line="41" pos:column="35">squid_curtime<pos:position pos:line="41" pos:column="48"/></name></expr>;<pos:position pos:line="41" pos:column="49"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="43" pos:column="5">commConnectStart<pos:position pos:line="43" pos:column="21"/></name><argument_list pos:line="43" pos:column="21">(<argument><expr><name><name pos:line="43" pos:column="22">p<pos:position pos:line="43" pos:column="23"/></name><operator pos:line="43" pos:column="23">-&gt;<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="25">test_fd<pos:position pos:line="43" pos:column="32"/></name></name></expr></argument>,
                     <argument><expr><name><name pos:line="44" pos:column="22">p<pos:position pos:line="44" pos:column="23"/></name><operator pos:line="44" pos:column="23">-&gt;<pos:position pos:line="44" pos:column="28"/></operator><name pos:line="44" pos:column="25">host<pos:position pos:line="44" pos:column="29"/></name></name></expr></argument>,
                     <argument><expr><name><name pos:line="45" pos:column="22">p<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">-&gt;<pos:position pos:line="45" pos:column="28"/></operator><name pos:line="45" pos:column="25">http_port<pos:position pos:line="45" pos:column="34"/></name></name></expr></argument>,
                     <argument><expr><name pos:line="46" pos:column="22">peerProbeConnectDone<pos:position pos:line="46" pos:column="42"/></name></expr></argument>,
                     <argument><expr><name pos:line="47" pos:column="22">p<pos:position pos:line="47" pos:column="23"/></name></expr></argument>)<pos:position pos:line="47" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="25"/></expr_stmt>

    <return pos:line="49" pos:column="5">return <expr><name pos:line="49" pos:column="12">ret<pos:position pos:line="49" pos:column="15"/></name></expr>;<pos:position pos:line="49" pos:column="16"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
