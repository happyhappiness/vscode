<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2030_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">diskHandleWrite<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">int<pos:position pos:line="2" pos:column="20"/></name></type> <name pos:line="2" pos:column="21">fd<pos:position pos:line="2" pos:column="23"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="25">void<pos:position pos:line="2" pos:column="29"/></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">notused<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="39"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">len<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><literal type="number" pos:line="4" pos:column="15">0<pos:position pos:line="4" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">fde<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">F<pos:position pos:line="5" pos:column="11"/></name> <init pos:line="5" pos:column="12">= <expr><operator pos:line="5" pos:column="14">&amp;<pos:position pos:line="5" pos:column="19"/></operator><name><name pos:line="5" pos:column="15">fd_table<pos:position pos:line="5" pos:column="23"/></name><index pos:line="5" pos:column="23">[<expr><name pos:line="5" pos:column="24">fd<pos:position pos:line="5" pos:column="26"/></name></expr>]<pos:position pos:line="5" pos:column="27"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">_fde_disk<pos:position pos:line="7" pos:column="21"/></name></name> <modifier pos:line="7" pos:column="22">*<pos:position pos:line="7" pos:column="23"/></modifier></type><name pos:line="7" pos:column="23">fdd<pos:position pos:line="7" pos:column="26"/></name> <init pos:line="7" pos:column="27">= <expr><operator pos:line="7" pos:column="29">&amp;<pos:position pos:line="7" pos:column="34"/></operator><name><name pos:line="7" pos:column="30">F<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">disk<pos:position pos:line="7" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">dwrite_q<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">q<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><name><name pos:line="8" pos:column="19">fdd<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">-&gt;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="24">write_q<pos:position pos:line="8" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">status<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><name pos:line="9" pos:column="18">DISK_OK<pos:position pos:line="9" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">do_close<pos:position pos:line="10" pos:column="17"/></name></decl>;<pos:position pos:line="10" pos:column="18"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">NULL<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">==<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">q<pos:position pos:line="12" pos:column="18"/></name></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19">
        <block type="pseudo"><return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">PROF_start<pos:position pos:line="15" pos:column="15"/></name><argument_list pos:line="15" pos:column="15">(<argument><expr><name pos:line="15" pos:column="16">diskHandleWrite<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">debugs<pos:position pos:line="17" pos:column="11"/></name><argument_list pos:line="17" pos:column="11">(<argument><expr><literal type="number" pos:line="17" pos:column="12">6<pos:position pos:line="17" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="15">3<pos:position pos:line="17" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="18">"diskHandleWrite: FD "<pos:position pos:line="17" pos:column="40"/></literal> <operator pos:line="17" pos:column="41">&lt;&lt;<pos:position pos:line="17" pos:column="49"/></operator> <name pos:line="17" pos:column="44">fd<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="19" pos:column="5">F<pos:position pos:line="19" pos:column="6"/></name><operator pos:line="19" pos:column="6">-&gt;<pos:position pos:line="19" pos:column="11"/></operator><name pos:line="19" pos:column="8">flags<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">.<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">write_daemon<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <literal type="number" pos:line="19" pos:column="29">0<pos:position pos:line="19" pos:column="30"/></literal></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name><name pos:line="21" pos:column="12">fdd<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">write_q<pos:position pos:line="21" pos:column="24"/></name></name> <operator pos:line="21" pos:column="25">!=<pos:position pos:line="21" pos:column="27"/></operator> <name pos:line="21" pos:column="28">NULL<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">assert<pos:position pos:line="23" pos:column="11"/></name><argument_list pos:line="23" pos:column="11">(<argument><expr><name><name pos:line="23" pos:column="12">fdd<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">-&gt;<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="17">write_q<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">-&gt;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="26">len<pos:position pos:line="23" pos:column="29"/></name></name> <operator pos:line="23" pos:column="30">&gt;<pos:position pos:line="23" pos:column="34"/></operator> <name><name pos:line="23" pos:column="32">fdd<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">-&gt;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="37">write_q<pos:position pos:line="23" pos:column="44"/></name><operator pos:line="23" pos:column="44">-&gt;<pos:position pos:line="23" pos:column="49"/></operator><name pos:line="23" pos:column="46">buf_offset<pos:position pos:line="23" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">debugs<pos:position pos:line="25" pos:column="11"/></name><argument_list pos:line="25" pos:column="11">(<argument><expr><literal type="number" pos:line="25" pos:column="12">6<pos:position pos:line="25" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="15">3<pos:position pos:line="25" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="18">"diskHandleWrite: FD "<pos:position pos:line="25" pos:column="40"/></literal> <operator pos:line="25" pos:column="41">&lt;&lt;<pos:position pos:line="25" pos:column="49"/></operator> <name pos:line="25" pos:column="44">fd<pos:position pos:line="25" pos:column="46"/></name> <operator pos:line="25" pos:column="47">&lt;&lt;<pos:position pos:line="25" pos:column="55"/></operator> <literal type="string" pos:line="25" pos:column="50">" writing "<pos:position pos:line="25" pos:column="61"/></literal> <operator pos:line="25" pos:column="62">&lt;&lt;<pos:position pos:line="25" pos:column="70"/></operator> <operator pos:line="25" pos:column="65">(<pos:position pos:line="25" pos:column="66"/></operator><name><name pos:line="25" pos:column="66">fdd<pos:position pos:line="25" pos:column="69"/></name><operator pos:line="25" pos:column="69">-&gt;<pos:position pos:line="25" pos:column="74"/></operator><name pos:line="25" pos:column="71">write_q<pos:position pos:line="25" pos:column="78"/></name><operator pos:line="25" pos:column="78">-&gt;<pos:position pos:line="25" pos:column="83"/></operator><name pos:line="25" pos:column="80">len<pos:position pos:line="25" pos:column="83"/></name></name> <operator pos:line="25" pos:column="84">-<pos:position pos:line="25" pos:column="85"/></operator> <name><name pos:line="25" pos:column="86">fdd<pos:position pos:line="25" pos:column="89"/></name><operator pos:line="25" pos:column="89">-&gt;<pos:position pos:line="25" pos:column="94"/></operator><name pos:line="25" pos:column="91">write_q<pos:position pos:line="25" pos:column="98"/></name><operator pos:line="25" pos:column="98">-&gt;<pos:position pos:line="25" pos:column="103"/></operator><name pos:line="25" pos:column="100">buf_offset<pos:position pos:line="25" pos:column="110"/></name></name><operator pos:line="25" pos:column="110">)<pos:position pos:line="25" pos:column="111"/></operator> <operator pos:line="25" pos:column="112">&lt;&lt;<pos:position pos:line="25" pos:column="120"/></operator> <literal type="string" pos:line="25" pos:column="115">" bytes"<pos:position pos:line="25" pos:column="123"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="124"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="125"/></expr_stmt>

    <expr_stmt><expr><name pos:line="27" pos:column="5">errno<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <literal type="number" pos:line="27" pos:column="13">0<pos:position pos:line="27" pos:column="14"/></literal></expr>;<pos:position pos:line="27" pos:column="15"/></expr_stmt>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name><name pos:line="29" pos:column="9">fdd<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">-&gt;<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="14">write_q<pos:position pos:line="29" pos:column="21"/></name><operator pos:line="29" pos:column="21">-&gt;<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="23">file_offset<pos:position pos:line="29" pos:column="34"/></name></name> <operator pos:line="29" pos:column="35">!=<pos:position pos:line="29" pos:column="37"/></operator> <operator pos:line="29" pos:column="38">-<pos:position pos:line="29" pos:column="39"/></operator><literal type="number" pos:line="29" pos:column="39">1<pos:position pos:line="29" pos:column="40"/></literal></expr>)<pos:position pos:line="29" pos:column="41"/></condition><then pos:line="29" pos:column="41">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="9">lseek<pos:position pos:line="30" pos:column="14"/></name><argument_list pos:line="30" pos:column="14">(<argument><expr><name pos:line="30" pos:column="15">fd<pos:position pos:line="30" pos:column="17"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="19">fdd<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">-&gt;<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="24">write_q<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">-&gt;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="33">file_offset<pos:position pos:line="30" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="46">SEEK_SET<pos:position pos:line="30" pos:column="54"/></name></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="56"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="32" pos:column="5">len<pos:position pos:line="32" pos:column="8"/></name> <operator pos:line="32" pos:column="9">=<pos:position pos:line="32" pos:column="10"/></operator> <call><name pos:line="32" pos:column="11">FD_WRITE_METHOD<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name pos:line="32" pos:column="27">fd<pos:position pos:line="32" pos:column="29"/></name></expr></argument>,
                          <argument><expr><name><name pos:line="33" pos:column="27">fdd<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">-&gt;<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="32">write_q<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">-&gt;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="41">buf<pos:position pos:line="33" pos:column="44"/></name></name> <operator pos:line="33" pos:column="45">+<pos:position pos:line="33" pos:column="46"/></operator> <name><name pos:line="33" pos:column="47">fdd<pos:position pos:line="33" pos:column="50"/></name><operator pos:line="33" pos:column="50">-&gt;<pos:position pos:line="33" pos:column="55"/></operator><name pos:line="33" pos:column="52">write_q<pos:position pos:line="33" pos:column="59"/></name><operator pos:line="33" pos:column="59">-&gt;<pos:position pos:line="33" pos:column="64"/></operator><name pos:line="33" pos:column="61">buf_offset<pos:position pos:line="33" pos:column="71"/></name></name></expr></argument>,
                          <argument><expr><name><name pos:line="34" pos:column="27">fdd<pos:position pos:line="34" pos:column="30"/></name><operator pos:line="34" pos:column="30">-&gt;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="32">write_q<pos:position pos:line="34" pos:column="39"/></name><operator pos:line="34" pos:column="39">-&gt;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="41">len<pos:position pos:line="34" pos:column="44"/></name></name> <operator pos:line="34" pos:column="45">-<pos:position pos:line="34" pos:column="46"/></operator> <name><name pos:line="34" pos:column="47">fdd<pos:position pos:line="34" pos:column="50"/></name><operator pos:line="34" pos:column="50">-&gt;<pos:position pos:line="34" pos:column="55"/></operator><name pos:line="34" pos:column="52">write_q<pos:position pos:line="34" pos:column="59"/></name><operator pos:line="34" pos:column="59">-&gt;<pos:position pos:line="34" pos:column="64"/></operator><name pos:line="34" pos:column="61">buf_offset<pos:position pos:line="34" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="73"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">debugs<pos:position pos:line="36" pos:column="11"/></name><argument_list pos:line="36" pos:column="11">(<argument><expr><literal type="number" pos:line="36" pos:column="12">6<pos:position pos:line="36" pos:column="13"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="15">3<pos:position pos:line="36" pos:column="16"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="18">"diskHandleWrite: FD "<pos:position pos:line="36" pos:column="40"/></literal> <operator pos:line="36" pos:column="41">&lt;&lt;<pos:position pos:line="36" pos:column="49"/></operator> <name pos:line="36" pos:column="44">fd<pos:position pos:line="36" pos:column="46"/></name> <operator pos:line="36" pos:column="47">&lt;&lt;<pos:position pos:line="36" pos:column="55"/></operator> <literal type="string" pos:line="36" pos:column="50">" len = "<pos:position pos:line="36" pos:column="59"/></literal> <operator pos:line="36" pos:column="60">&lt;&lt;<pos:position pos:line="36" pos:column="68"/></operator> <name pos:line="36" pos:column="63">len<pos:position pos:line="36" pos:column="66"/></name></expr></argument>)<pos:position pos:line="36" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="68"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="38" pos:column="5">statCounter<pos:position pos:line="38" pos:column="16"/></name><operator pos:line="38" pos:column="16">.<pos:position pos:line="38" pos:column="17"/></operator><name pos:line="38" pos:column="17">syscalls<pos:position pos:line="38" pos:column="25"/></name><operator pos:line="38" pos:column="25">.<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="26">disk<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">.<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="31">writes<pos:position pos:line="38" pos:column="37"/></name></name><operator pos:line="38" pos:column="37">++<pos:position pos:line="38" pos:column="39"/></operator></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">fd_bytes<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">fd<pos:position pos:line="40" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="18">len<pos:position pos:line="40" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="23">FD_WRITE<pos:position pos:line="40" pos:column="31"/></name></expr></argument>)<pos:position pos:line="40" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="33"/></expr_stmt>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">len<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">&lt;<pos:position pos:line="42" pos:column="17"/></operator> <literal type="number" pos:line="42" pos:column="15">0<pos:position pos:line="42" pos:column="16"/></literal></expr>)<pos:position pos:line="42" pos:column="17"/></condition><then pos:line="42" pos:column="17"> <block pos:line="42" pos:column="18">{
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">!<pos:position pos:line="43" pos:column="14"/></operator><call><name pos:line="43" pos:column="14">ignoreErrno<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><name pos:line="43" pos:column="26">errno<pos:position pos:line="43" pos:column="31"/></name></expr></argument>)<pos:position pos:line="43" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="33"/></condition><then pos:line="43" pos:column="33"> <block pos:line="43" pos:column="34">{
            <expr_stmt><expr><name pos:line="44" pos:column="13">status<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">=<pos:position pos:line="44" pos:column="21"/></operator> <ternary><condition><expr><name pos:line="44" pos:column="22">errno<pos:position pos:line="44" pos:column="27"/></name> <operator pos:line="44" pos:column="28">==<pos:position pos:line="44" pos:column="30"/></operator> <name pos:line="44" pos:column="31">ENOSPC<pos:position pos:line="44" pos:column="37"/></name></expr> ?<pos:position pos:line="44" pos:column="39"/></condition><then pos:line="44" pos:column="39"> <expr><name pos:line="44" pos:column="40">DISK_NO_SPACE_LEFT<pos:position pos:line="44" pos:column="58"/></name></expr> <pos:position pos:line="44" pos:column="59"/></then><else pos:line="44" pos:column="59">: <expr><name pos:line="44" pos:column="61">DISK_ERROR<pos:position pos:line="44" pos:column="71"/></name></expr></else></ternary></expr>;<pos:position pos:line="44" pos:column="72"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">debugs<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><literal type="number" pos:line="45" pos:column="20">50<pos:position pos:line="45" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="24">1<pos:position pos:line="45" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="27">"diskHandleWrite: FD "<pos:position pos:line="45" pos:column="49"/></literal> <operator pos:line="45" pos:column="50">&lt;&lt;<pos:position pos:line="45" pos:column="58"/></operator> <name pos:line="45" pos:column="53">fd<pos:position pos:line="45" pos:column="55"/></name> <operator pos:line="45" pos:column="56">&lt;&lt;<pos:position pos:line="45" pos:column="64"/></operator> <literal type="string" pos:line="45" pos:column="59">": disk write error: "<pos:position pos:line="45" pos:column="81"/></literal> <operator pos:line="45" pos:column="82">&lt;&lt;<pos:position pos:line="45" pos:column="90"/></operator> <call><name pos:line="45" pos:column="85">xstrerror<pos:position pos:line="45" pos:column="94"/></name><argument_list pos:line="45" pos:column="94">()<pos:position pos:line="45" pos:column="96"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="98"/></expr_stmt>

            <comment type="block" pos:line="47" pos:column="13">/*
             * If there is no write callback, then this file is
             * most likely something important like a log file, or
             * an interprocess pipe.  Its not a swapfile.  We feel
             * that a write failure on a log file is rather important,
             * and Squid doesn't otherwise deal with this condition.
             * So to get the administrators attention, we exit with
             * a fatal message.
             */</comment>

            <if pos:line="57" pos:column="13">if <condition pos:line="57" pos:column="16">(<expr><name><name pos:line="57" pos:column="17">fdd<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">-&gt;<pos:position pos:line="57" pos:column="25"/></operator><name pos:line="57" pos:column="22">wrt_handle<pos:position pos:line="57" pos:column="32"/></name></name> <operator pos:line="57" pos:column="33">==<pos:position pos:line="57" pos:column="35"/></operator> <name pos:line="57" pos:column="36">NULL<pos:position pos:line="57" pos:column="40"/></name></expr>)<pos:position pos:line="57" pos:column="41"/></condition><then pos:line="57" pos:column="41">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="58" pos:column="17">fatal<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><literal type="string" pos:line="58" pos:column="23">"Write failure -- check your disk space and cache.log"<pos:position pos:line="58" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="79"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="60" pos:column="13">/*
             * If there is a write failure, then we notify the
             * upper layer via the callback, at the end of this
             * function.  Meanwhile, flush all pending buffers
             * here.  Let the upper layer decide how to handle the
             * failure.  This will prevent experiencing multiple,
             * repeated write failures for the same FD because of
             * the queued data.
             */</comment>
            <do pos:line="69" pos:column="13">do <block pos:line="69" pos:column="16">{
                <expr_stmt><expr><name><name pos:line="70" pos:column="17">fdd<pos:position pos:line="70" pos:column="20"/></name><operator pos:line="70" pos:column="20">-&gt;<pos:position pos:line="70" pos:column="25"/></operator><name pos:line="70" pos:column="22">write_q<pos:position pos:line="70" pos:column="29"/></name></name> <operator pos:line="70" pos:column="30">=<pos:position pos:line="70" pos:column="31"/></operator> <name><name pos:line="70" pos:column="32">q<pos:position pos:line="70" pos:column="33"/></name><operator pos:line="70" pos:column="33">-&gt;<pos:position pos:line="70" pos:column="38"/></operator><name pos:line="70" pos:column="35">next<pos:position pos:line="70" pos:column="39"/></name></name></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt>

                <if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name><name pos:line="72" pos:column="21">q<pos:position pos:line="72" pos:column="22"/></name><operator pos:line="72" pos:column="22">-&gt;<pos:position pos:line="72" pos:column="27"/></operator><name pos:line="72" pos:column="24">free_func<pos:position pos:line="72" pos:column="33"/></name></name></expr>)<pos:position pos:line="72" pos:column="34"/></condition><then pos:line="72" pos:column="34">
                    <block type="pseudo"><expr_stmt><expr><call pos:line="73" pos:column="21">(<name><name pos:line="73" pos:column="22">q<pos:position pos:line="73" pos:column="23"/></name><operator pos:line="73" pos:column="23">-&gt;<pos:position pos:line="73" pos:column="28"/></operator><name pos:line="73" pos:column="25">free_func<pos:position pos:line="73" pos:column="34"/></name></name>) <argument_list pos:line="73" pos:column="36">(<argument><expr><name><name pos:line="73" pos:column="37">q<pos:position pos:line="73" pos:column="38"/></name><operator pos:line="73" pos:column="38">-&gt;<pos:position pos:line="73" pos:column="43"/></operator><name pos:line="73" pos:column="40">buf<pos:position pos:line="73" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="73" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="45"/></expr_stmt></block></then></if>

                <if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">q<pos:position pos:line="75" pos:column="22"/></name></expr>)<pos:position pos:line="75" pos:column="23"/></condition><then pos:line="75" pos:column="23"> <block pos:line="75" pos:column="24">{
                    <expr_stmt><expr><call><name pos:line="76" pos:column="21">memFree<pos:position pos:line="76" pos:column="28"/></name><argument_list pos:line="76" pos:column="28">(<argument><expr><name pos:line="76" pos:column="29">q<pos:position pos:line="76" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="32">MEM_DWRITE_Q<pos:position pos:line="76" pos:column="44"/></name></expr></argument>)<pos:position pos:line="76" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="46"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="77" pos:column="21">q<pos:position pos:line="77" pos:column="22"/></name> <operator pos:line="77" pos:column="23">=<pos:position pos:line="77" pos:column="24"/></operator> <name pos:line="77" pos:column="25">NULL<pos:position pos:line="77" pos:column="29"/></name></expr>;<pos:position pos:line="77" pos:column="30"/></expr_stmt>
                }<pos:position pos:line="78" pos:column="18"/></block></then></if>
            }<pos:position pos:line="79" pos:column="14"/></block> while <condition pos:line="79" pos:column="21">(<expr><operator pos:line="79" pos:column="22">(<pos:position pos:line="79" pos:column="23"/></operator><name pos:line="79" pos:column="23">q<pos:position pos:line="79" pos:column="24"/></name> <operator pos:line="79" pos:column="25">=<pos:position pos:line="79" pos:column="26"/></operator> <name><name pos:line="79" pos:column="27">fdd<pos:position pos:line="79" pos:column="30"/></name><operator pos:line="79" pos:column="30">-&gt;<pos:position pos:line="79" pos:column="35"/></operator><name pos:line="79" pos:column="32">write_q<pos:position pos:line="79" pos:column="39"/></name></name><operator pos:line="79" pos:column="39">)<pos:position pos:line="79" pos:column="40"/></operator></expr>)<pos:position pos:line="79" pos:column="41"/></condition>;<pos:position pos:line="79" pos:column="42"/></do>
        }<pos:position pos:line="80" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="82" pos:column="9">len<pos:position pos:line="82" pos:column="12"/></name> <operator pos:line="82" pos:column="13">=<pos:position pos:line="82" pos:column="14"/></operator> <literal type="number" pos:line="82" pos:column="15">0<pos:position pos:line="82" pos:column="16"/></literal></expr>;<pos:position pos:line="82" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>

    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name pos:line="85" pos:column="9">q<pos:position pos:line="85" pos:column="10"/></name> <operator pos:line="85" pos:column="11">!=<pos:position pos:line="85" pos:column="13"/></operator> <name pos:line="85" pos:column="14">NULL<pos:position pos:line="85" pos:column="18"/></name></expr>)<pos:position pos:line="85" pos:column="19"/></condition><then pos:line="85" pos:column="19"> <block pos:line="85" pos:column="20">{
        <comment type="block" pos:line="86" pos:column="9">/* q might become NULL from write failure above */</comment>
        <expr_stmt><expr><name><name pos:line="87" pos:column="9">q<pos:position pos:line="87" pos:column="10"/></name><operator pos:line="87" pos:column="10">-&gt;<pos:position pos:line="87" pos:column="15"/></operator><name pos:line="87" pos:column="12">buf_offset<pos:position pos:line="87" pos:column="22"/></name></name> <operator pos:line="87" pos:column="23">+=<pos:position pos:line="87" pos:column="25"/></operator> <name pos:line="87" pos:column="26">len<pos:position pos:line="87" pos:column="29"/></name></expr>;<pos:position pos:line="87" pos:column="30"/></expr_stmt>

        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name><name pos:line="89" pos:column="13">q<pos:position pos:line="89" pos:column="14"/></name><operator pos:line="89" pos:column="14">-&gt;<pos:position pos:line="89" pos:column="19"/></operator><name pos:line="89" pos:column="16">buf_offset<pos:position pos:line="89" pos:column="26"/></name></name> <operator pos:line="89" pos:column="27">&gt;<pos:position pos:line="89" pos:column="31"/></operator> <name><name pos:line="89" pos:column="29">q<pos:position pos:line="89" pos:column="30"/></name><operator pos:line="89" pos:column="30">-&gt;<pos:position pos:line="89" pos:column="35"/></operator><name pos:line="89" pos:column="32">len<pos:position pos:line="89" pos:column="35"/></name></name></expr>)<pos:position pos:line="89" pos:column="36"/></condition><then pos:line="89" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="13">debugs<pos:position pos:line="90" pos:column="19"/></name><argument_list pos:line="90" pos:column="19">(<argument><expr><literal type="number" pos:line="90" pos:column="20">50<pos:position pos:line="90" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="24">1<pos:position pos:line="90" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="27">"diskHandleWriteComplete: q-&gt;buf_offset &gt; q-&gt;len ("<pos:position pos:line="90" pos:column="87"/></literal> <operator pos:line="90" pos:column="79">&lt;&lt;<pos:position pos:line="90" pos:column="87"/></operator>
                   <name pos:line="91" pos:column="20">q<pos:position pos:line="91" pos:column="21"/></name> <operator pos:line="91" pos:column="22">&lt;&lt;<pos:position pos:line="91" pos:column="30"/></operator> <literal type="string" pos:line="91" pos:column="25">","<pos:position pos:line="91" pos:column="28"/></literal> <operator pos:line="91" pos:column="29">&lt;&lt;<pos:position pos:line="91" pos:column="37"/></operator> <operator pos:line="91" pos:column="32">(<pos:position pos:line="91" pos:column="33"/></operator><name pos:line="91" pos:column="33">int<pos:position pos:line="91" pos:column="36"/></name><operator pos:line="91" pos:column="36">)<pos:position pos:line="91" pos:column="37"/></operator> <name><name pos:line="91" pos:column="38">q<pos:position pos:line="91" pos:column="39"/></name><operator pos:line="91" pos:column="39">-&gt;<pos:position pos:line="91" pos:column="44"/></operator><name pos:line="91" pos:column="41">buf_offset<pos:position pos:line="91" pos:column="51"/></name></name> <operator pos:line="91" pos:column="52">&lt;&lt;<pos:position pos:line="91" pos:column="60"/></operator> <literal type="string" pos:line="91" pos:column="55">", "<pos:position pos:line="91" pos:column="59"/></literal> <operator pos:line="91" pos:column="60">&lt;&lt;<pos:position pos:line="91" pos:column="68"/></operator> <name><name pos:line="91" pos:column="63">q<pos:position pos:line="91" pos:column="64"/></name><operator pos:line="91" pos:column="64">-&gt;<pos:position pos:line="91" pos:column="69"/></operator><name pos:line="91" pos:column="66">len<pos:position pos:line="91" pos:column="69"/></name></name> <operator pos:line="91" pos:column="70">&lt;&lt;<pos:position pos:line="91" pos:column="78"/></operator> <literal type="string" pos:line="91" pos:column="73">", "<pos:position pos:line="91" pos:column="77"/></literal> <operator pos:line="91" pos:column="78">&lt;&lt;<pos:position pos:line="91" pos:column="86"/></operator>
                   <name pos:line="92" pos:column="20">len<pos:position pos:line="92" pos:column="23"/></name> <operator pos:line="92" pos:column="24">&lt;&lt;<pos:position pos:line="92" pos:column="32"/></operator> <literal type="string" pos:line="92" pos:column="27">" FD "<pos:position pos:line="92" pos:column="33"/></literal> <operator pos:line="92" pos:column="34">&lt;&lt;<pos:position pos:line="92" pos:column="42"/></operator> <name pos:line="92" pos:column="37">fd<pos:position pos:line="92" pos:column="39"/></name> <operator pos:line="92" pos:column="40">&lt;&lt;<pos:position pos:line="92" pos:column="48"/></operator> <literal type="string" pos:line="92" pos:column="43">")"<pos:position pos:line="92" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="48"/></expr_stmt></block></then></if>


        <expr_stmt><expr><call><name pos:line="95" pos:column="9">assert<pos:position pos:line="95" pos:column="15"/></name><argument_list pos:line="95" pos:column="15">(<argument><expr><name><name pos:line="95" pos:column="16">q<pos:position pos:line="95" pos:column="17"/></name><operator pos:line="95" pos:column="17">-&gt;<pos:position pos:line="95" pos:column="22"/></operator><name pos:line="95" pos:column="19">buf_offset<pos:position pos:line="95" pos:column="29"/></name></name> <operator pos:line="95" pos:column="30">&lt;=<pos:position pos:line="95" pos:column="35"/></operator> <name><name pos:line="95" pos:column="33">q<pos:position pos:line="95" pos:column="34"/></name><operator pos:line="95" pos:column="34">-&gt;<pos:position pos:line="95" pos:column="39"/></operator><name pos:line="95" pos:column="36">len<pos:position pos:line="95" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="95" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="41"/></expr_stmt>

        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name><name pos:line="97" pos:column="13">q<pos:position pos:line="97" pos:column="14"/></name><operator pos:line="97" pos:column="14">-&gt;<pos:position pos:line="97" pos:column="19"/></operator><name pos:line="97" pos:column="16">buf_offset<pos:position pos:line="97" pos:column="26"/></name></name> <operator pos:line="97" pos:column="27">==<pos:position pos:line="97" pos:column="29"/></operator> <name><name pos:line="97" pos:column="30">q<pos:position pos:line="97" pos:column="31"/></name><operator pos:line="97" pos:column="31">-&gt;<pos:position pos:line="97" pos:column="36"/></operator><name pos:line="97" pos:column="33">len<pos:position pos:line="97" pos:column="36"/></name></name></expr>)<pos:position pos:line="97" pos:column="37"/></condition><then pos:line="97" pos:column="37"> <block pos:line="97" pos:column="38">{
            <comment type="block" pos:line="98" pos:column="13">/* complete write */</comment>
            <expr_stmt><expr><name><name pos:line="99" pos:column="13">fdd<pos:position pos:line="99" pos:column="16"/></name><operator pos:line="99" pos:column="16">-&gt;<pos:position pos:line="99" pos:column="21"/></operator><name pos:line="99" pos:column="18">write_q<pos:position pos:line="99" pos:column="25"/></name></name> <operator pos:line="99" pos:column="26">=<pos:position pos:line="99" pos:column="27"/></operator> <name><name pos:line="99" pos:column="28">q<pos:position pos:line="99" pos:column="29"/></name><operator pos:line="99" pos:column="29">-&gt;<pos:position pos:line="99" pos:column="34"/></operator><name pos:line="99" pos:column="31">next<pos:position pos:line="99" pos:column="35"/></name></name></expr>;<pos:position pos:line="99" pos:column="36"/></expr_stmt>

            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><name><name pos:line="101" pos:column="17">q<pos:position pos:line="101" pos:column="18"/></name><operator pos:line="101" pos:column="18">-&gt;<pos:position pos:line="101" pos:column="23"/></operator><name pos:line="101" pos:column="20">free_func<pos:position pos:line="101" pos:column="29"/></name></name></expr>)<pos:position pos:line="101" pos:column="30"/></condition><then pos:line="101" pos:column="30">
                <block type="pseudo"><expr_stmt><expr><call pos:line="102" pos:column="17">(<name><name pos:line="102" pos:column="18">q<pos:position pos:line="102" pos:column="19"/></name><operator pos:line="102" pos:column="19">-&gt;<pos:position pos:line="102" pos:column="24"/></operator><name pos:line="102" pos:column="21">free_func<pos:position pos:line="102" pos:column="30"/></name></name>) <argument_list pos:line="102" pos:column="32">(<argument><expr><name><name pos:line="102" pos:column="33">q<pos:position pos:line="102" pos:column="34"/></name><operator pos:line="102" pos:column="34">-&gt;<pos:position pos:line="102" pos:column="39"/></operator><name pos:line="102" pos:column="36">buf<pos:position pos:line="102" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="41"/></expr_stmt></block></then></if>

            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name pos:line="104" pos:column="17">q<pos:position pos:line="104" pos:column="18"/></name></expr>)<pos:position pos:line="104" pos:column="19"/></condition><then pos:line="104" pos:column="19"> <block pos:line="104" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="105" pos:column="17">memFree<pos:position pos:line="105" pos:column="24"/></name><argument_list pos:line="105" pos:column="24">(<argument><expr><name pos:line="105" pos:column="25">q<pos:position pos:line="105" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="28">MEM_DWRITE_Q<pos:position pos:line="105" pos:column="40"/></name></expr></argument>)<pos:position pos:line="105" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="42"/></expr_stmt>
                <expr_stmt><expr><name pos:line="106" pos:column="17">q<pos:position pos:line="106" pos:column="18"/></name> <operator pos:line="106" pos:column="19">=<pos:position pos:line="106" pos:column="20"/></operator> <name pos:line="106" pos:column="21">NULL<pos:position pos:line="106" pos:column="25"/></name></expr>;<pos:position pos:line="106" pos:column="26"/></expr_stmt>
            }<pos:position pos:line="107" pos:column="14"/></block></then></if>
        }<pos:position pos:line="108" pos:column="10"/></block></then></if>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>

    <if pos:line="111" pos:column="5">if <condition pos:line="111" pos:column="8">(<expr><name><name pos:line="111" pos:column="9">fdd<pos:position pos:line="111" pos:column="12"/></name><operator pos:line="111" pos:column="12">-&gt;<pos:position pos:line="111" pos:column="17"/></operator><name pos:line="111" pos:column="14">write_q<pos:position pos:line="111" pos:column="21"/></name></name> <operator pos:line="111" pos:column="22">==<pos:position pos:line="111" pos:column="24"/></operator> <name pos:line="111" pos:column="25">NULL<pos:position pos:line="111" pos:column="29"/></name></expr>)<pos:position pos:line="111" pos:column="30"/></condition><then pos:line="111" pos:column="30"> <block pos:line="111" pos:column="31">{
        <comment type="block" pos:line="112" pos:column="9">/* no more data */</comment>
        <expr_stmt><expr><name><name pos:line="113" pos:column="9">fdd<pos:position pos:line="113" pos:column="12"/></name><operator pos:line="113" pos:column="12">-&gt;<pos:position pos:line="113" pos:column="17"/></operator><name pos:line="113" pos:column="14">write_q_tail<pos:position pos:line="113" pos:column="26"/></name></name> <operator pos:line="113" pos:column="27">=<pos:position pos:line="113" pos:column="28"/></operator> <name pos:line="113" pos:column="29">NULL<pos:position pos:line="113" pos:column="33"/></name></expr>;<pos:position pos:line="113" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="114" pos:column="6"/></block></then> <else pos:line="114" pos:column="7">else <block pos:line="114" pos:column="12">{
        <comment type="block" pos:line="115" pos:column="9">/* another block is queued */</comment>
        <expr_stmt><expr><call><name pos:line="116" pos:column="9">diskCombineWrites<pos:position pos:line="116" pos:column="26"/></name><argument_list pos:line="116" pos:column="26">(<argument><expr><name pos:line="116" pos:column="27">fdd<pos:position pos:line="116" pos:column="30"/></name></expr></argument>)<pos:position pos:line="116" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="117" pos:column="9">commSetSelect<pos:position pos:line="117" pos:column="22"/></name><argument_list pos:line="117" pos:column="22">(<argument><expr><name pos:line="117" pos:column="23">fd<pos:position pos:line="117" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="27">COMM_SELECT_WRITE<pos:position pos:line="117" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="46">diskHandleWrite<pos:position pos:line="117" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="63">NULL<pos:position pos:line="117" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="69">0<pos:position pos:line="117" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="118" pos:column="9">F<pos:position pos:line="118" pos:column="10"/></name><operator pos:line="118" pos:column="10">-&gt;<pos:position pos:line="118" pos:column="15"/></operator><name pos:line="118" pos:column="12">flags<pos:position pos:line="118" pos:column="17"/></name><operator pos:line="118" pos:column="17">.<pos:position pos:line="118" pos:column="18"/></operator><name pos:line="118" pos:column="18">write_daemon<pos:position pos:line="118" pos:column="30"/></name></name> <operator pos:line="118" pos:column="31">=<pos:position pos:line="118" pos:column="32"/></operator> <literal type="number" pos:line="118" pos:column="33">1<pos:position pos:line="118" pos:column="34"/></literal></expr>;<pos:position pos:line="118" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="119" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="121" pos:column="5">do_close<pos:position pos:line="121" pos:column="13"/></name> <operator pos:line="121" pos:column="14">=<pos:position pos:line="121" pos:column="15"/></operator> <name><name pos:line="121" pos:column="16">F<pos:position pos:line="121" pos:column="17"/></name><operator pos:line="121" pos:column="17">-&gt;<pos:position pos:line="121" pos:column="22"/></operator><name pos:line="121" pos:column="19">flags<pos:position pos:line="121" pos:column="24"/></name><operator pos:line="121" pos:column="24">.<pos:position pos:line="121" pos:column="25"/></operator><name pos:line="121" pos:column="25">close_request<pos:position pos:line="121" pos:column="38"/></name></name></expr>;<pos:position pos:line="121" pos:column="39"/></expr_stmt>

    <if pos:line="123" pos:column="5">if <condition pos:line="123" pos:column="8">(<expr><name><name pos:line="123" pos:column="9">fdd<pos:position pos:line="123" pos:column="12"/></name><operator pos:line="123" pos:column="12">-&gt;<pos:position pos:line="123" pos:column="17"/></operator><name pos:line="123" pos:column="14">wrt_handle<pos:position pos:line="123" pos:column="24"/></name></name></expr>)<pos:position pos:line="123" pos:column="25"/></condition><then pos:line="123" pos:column="25"> <block pos:line="123" pos:column="26">{
        <decl_stmt><decl><type><name pos:line="124" pos:column="9">DWCB<pos:position pos:line="124" pos:column="13"/></name> <modifier pos:line="124" pos:column="14">*<pos:position pos:line="124" pos:column="15"/></modifier></type><name pos:line="124" pos:column="15">callback<pos:position pos:line="124" pos:column="23"/></name> <init pos:line="124" pos:column="24">= <expr><name><name pos:line="124" pos:column="26">fdd<pos:position pos:line="124" pos:column="29"/></name><operator pos:line="124" pos:column="29">-&gt;<pos:position pos:line="124" pos:column="34"/></operator><name pos:line="124" pos:column="31">wrt_handle<pos:position pos:line="124" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="124" pos:column="42"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="125" pos:column="9">void<pos:position pos:line="125" pos:column="13"/></name> <modifier pos:line="125" pos:column="14">*<pos:position pos:line="125" pos:column="15"/></modifier></type><name pos:line="125" pos:column="15">cbdata<pos:position pos:line="125" pos:column="21"/></name></decl>;<pos:position pos:line="125" pos:column="22"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="126" pos:column="9">fdd<pos:position pos:line="126" pos:column="12"/></name><operator pos:line="126" pos:column="12">-&gt;<pos:position pos:line="126" pos:column="17"/></operator><name pos:line="126" pos:column="14">wrt_handle<pos:position pos:line="126" pos:column="24"/></name></name> <operator pos:line="126" pos:column="25">=<pos:position pos:line="126" pos:column="26"/></operator> <name pos:line="126" pos:column="27">NULL<pos:position pos:line="126" pos:column="31"/></name></expr>;<pos:position pos:line="126" pos:column="32"/></expr_stmt>

        <if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><call><name pos:line="128" pos:column="13">cbdataReferenceValidDone<pos:position pos:line="128" pos:column="37"/></name><argument_list pos:line="128" pos:column="37">(<argument><expr><name><name pos:line="128" pos:column="38">fdd<pos:position pos:line="128" pos:column="41"/></name><operator pos:line="128" pos:column="41">-&gt;<pos:position pos:line="128" pos:column="46"/></operator><name pos:line="128" pos:column="43">wrt_handle_data<pos:position pos:line="128" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="128" pos:column="60">&amp;<pos:position pos:line="128" pos:column="65"/></operator><name pos:line="128" pos:column="61">cbdata<pos:position pos:line="128" pos:column="67"/></name></expr></argument>)<pos:position pos:line="128" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="128" pos:column="69"/></condition><then pos:line="128" pos:column="69"> <block pos:line="128" pos:column="70">{
            <expr_stmt><expr><call><name pos:line="129" pos:column="13">callback<pos:position pos:line="129" pos:column="21"/></name><argument_list pos:line="129" pos:column="21">(<argument><expr><name pos:line="129" pos:column="22">fd<pos:position pos:line="129" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="26">status<pos:position pos:line="129" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="34">len<pos:position pos:line="129" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="39">cbdata<pos:position pos:line="129" pos:column="45"/></name></expr></argument>)<pos:position pos:line="129" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="47"/></expr_stmt>
            <comment type="block" pos:line="130" pos:column="13">/*
             * NOTE, this callback can close the FD, so we must
             * not touch 'F', 'fdd', etc. after this.
             */</comment>
            <expr_stmt><expr><call><name pos:line="134" pos:column="13">PROF_stop<pos:position pos:line="134" pos:column="22"/></name><argument_list pos:line="134" pos:column="22">(<argument><expr><name pos:line="134" pos:column="23">diskHandleWrite<pos:position pos:line="134" pos:column="38"/></name></expr></argument>)<pos:position pos:line="134" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="40"/></expr_stmt>
            <return pos:line="135" pos:column="13">return;<pos:position pos:line="135" pos:column="20"/></return>
            <comment type="block" pos:line="136" pos:column="13">/* XXX But what about close_request??? */</comment>
        }<pos:position pos:line="137" pos:column="10"/></block></then></if>
    }<pos:position pos:line="138" pos:column="6"/></block></then></if>

    <if pos:line="140" pos:column="5">if <condition pos:line="140" pos:column="8">(<expr><name pos:line="140" pos:column="9">do_close<pos:position pos:line="140" pos:column="17"/></name></expr>)<pos:position pos:line="140" pos:column="18"/></condition><then pos:line="140" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="141" pos:column="9">file_close<pos:position pos:line="141" pos:column="19"/></name><argument_list pos:line="141" pos:column="19">(<argument><expr><name pos:line="141" pos:column="20">fd<pos:position pos:line="141" pos:column="22"/></name></expr></argument>)<pos:position pos:line="141" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="24"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="143" pos:column="5">PROF_stop<pos:position pos:line="143" pos:column="14"/></name><argument_list pos:line="143" pos:column="14">(<argument><expr><name pos:line="143" pos:column="15">diskHandleWrite<pos:position pos:line="143" pos:column="30"/></name></expr></argument>)<pos:position pos:line="143" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="32"/></expr_stmt>
}<pos:position pos:line="144" pos:column="2"/></block></function></unit>
