<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2086_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">maybeReadVirginBody<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">()<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// too late to read</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><call><name><name pos:line="5" pos:column="10">Comm<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">::<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">IsConnOpen<pos:position pos:line="5" pos:column="26"/></name></name><argument_list pos:line="5" pos:column="26">(<argument><expr><name pos:line="5" pos:column="27">serverConnection<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call> <operator pos:line="5" pos:column="45">||<pos:position pos:line="5" pos:column="47"/></operator> <name><name pos:line="5" pos:column="48">fd_table<pos:position pos:line="5" pos:column="56"/></name><index pos:line="5" pos:column="56">[<expr><name><name pos:line="5" pos:column="57">serverConnection<pos:position pos:line="5" pos:column="73"/></name><operator pos:line="5" pos:column="73">-&gt;<pos:position pos:line="5" pos:column="78"/></operator><name pos:line="5" pos:column="75">fd<pos:position pos:line="5" pos:column="77"/></name></name></expr>]<pos:position pos:line="5" pos:column="78"/></index></name><operator pos:line="5" pos:column="78">.<pos:position pos:line="5" pos:column="79"/></operator><call><name pos:line="5" pos:column="79">closing<pos:position pos:line="5" pos:column="86"/></name><argument_list pos:line="5" pos:column="86">()<pos:position pos:line="5" pos:column="88"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="89"/></condition><then pos:line="5" pos:column="89">
        <block type="pseudo"><return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="8" pos:column="5">// we may need to grow the buffer if headers do not fit</comment>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">int<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">minRead<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><ternary><condition><expr><name><name pos:line="9" pos:column="25">flags<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">.<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="31">headers_parsed<pos:position pos:line="9" pos:column="45"/></name></name></expr> ?<pos:position pos:line="9" pos:column="47"/></condition><then pos:line="9" pos:column="47"> <expr><literal type="number" pos:line="9" pos:column="48">0<pos:position pos:line="9" pos:column="49"/></literal></expr> <pos:position pos:line="9" pos:column="50"/></then><else pos:line="9" pos:column="50">:<expr><literal type="number" pos:line="9" pos:column="51">1024<pos:position pos:line="9" pos:column="55"/></literal></expr></else></ternary></expr></init></decl>;<pos:position pos:line="9" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">int<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">read_size<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><call><name pos:line="10" pos:column="27">replyBodySpace<pos:position pos:line="10" pos:column="41"/></name><argument_list pos:line="10" pos:column="41">(<argument><expr><operator pos:line="10" pos:column="42">*<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="43">readBuf<pos:position pos:line="10" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="52">minRead<pos:position pos:line="10" pos:column="59"/></name></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="61"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">11<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="12" pos:column="15">9<pos:position pos:line="12" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="18">HERE<pos:position pos:line="12" pos:column="22"/></name> <operator pos:line="12" pos:column="23">&lt;&lt;<pos:position pos:line="12" pos:column="31"/></operator> <operator pos:line="12" pos:column="26">(<pos:position pos:line="12" pos:column="27"/></operator><ternary><condition><expr><name><name pos:line="12" pos:column="27">flags<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">.<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="33">do_next_read<pos:position pos:line="12" pos:column="45"/></name></name></expr> ?<pos:position pos:line="12" pos:column="47"/></condition><then pos:line="12" pos:column="47"> <expr><literal type="string" pos:line="12" pos:column="48">"may"<pos:position pos:line="12" pos:column="53"/></literal></expr> <pos:position pos:line="12" pos:column="54"/></then><else pos:line="12" pos:column="54">: <expr><literal type="string" pos:line="12" pos:column="56">"wont"<pos:position pos:line="12" pos:column="62"/></literal></expr></else></ternary><operator pos:line="12" pos:column="62">)<pos:position pos:line="12" pos:column="63"/></operator> <operator pos:line="12" pos:column="64">&lt;&lt;<pos:position pos:line="12" pos:column="72"/></operator>
           <literal type="string" pos:line="13" pos:column="12">" read up to "<pos:position pos:line="13" pos:column="26"/></literal> <operator pos:line="13" pos:column="27">&lt;&lt;<pos:position pos:line="13" pos:column="35"/></operator> <name pos:line="13" pos:column="30">read_size<pos:position pos:line="13" pos:column="39"/></name> <operator pos:line="13" pos:column="40">&lt;&lt;<pos:position pos:line="13" pos:column="48"/></operator> <literal type="string" pos:line="13" pos:column="43">" bytes from "<pos:position pos:line="13" pos:column="57"/></literal> <operator pos:line="13" pos:column="58">&lt;&lt;<pos:position pos:line="13" pos:column="66"/></operator> <name pos:line="13" pos:column="61">serverConnection<pos:position pos:line="13" pos:column="77"/></name></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/*
     * why &lt;2? Because delayAwareRead() won't actually read if
     * you ask it to read 1 byte.  The delayed read request
     * just gets re-queued until the client side drains, then
     * the I/O thread hangs.  Better to not register any read
     * handler until we get a notification from someone that
     * its okay to read again.
     */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">read_size<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">&lt;<pos:position pos:line="23" pos:column="23"/></operator> <literal type="number" pos:line="23" pos:column="21">2<pos:position pos:line="23" pos:column="22"/></literal></expr>)<pos:position pos:line="23" pos:column="23"/></condition><then pos:line="23" pos:column="23">
        <block type="pseudo"><return pos:line="24" pos:column="9">return;<pos:position pos:line="24" pos:column="16"/></return></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">flags<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">.<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">do_next_read<pos:position pos:line="26" pos:column="27"/></name></name></expr>)<pos:position pos:line="26" pos:column="28"/></condition><then pos:line="26" pos:column="28"> <block pos:line="26" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">flags<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">.<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="15">do_next_read<pos:position pos:line="27" pos:column="27"/></name></name> <operator pos:line="27" pos:column="28">=<pos:position pos:line="27" pos:column="29"/></operator> <literal type="boolean" pos:line="27" pos:column="30">false<pos:position pos:line="27" pos:column="35"/></literal></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>
        <typedef pos:line="28" pos:column="9">typedef <type><name><name pos:line="28" pos:column="17">CommCbMemFunT<pos:position pos:line="28" pos:column="30"/></name><argument_list type="generic" pos:line="28" pos:column="30">&lt;<argument><expr><name pos:line="28" pos:column="31">HttpStateData<pos:position pos:line="28" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="46">CommIoCbParams<pos:position pos:line="28" pos:column="60"/></name></expr></argument>&gt;<pos:position pos:line="28" pos:column="64"/></argument_list></name></type> <name pos:line="28" pos:column="62">Dialer<pos:position pos:line="28" pos:column="68"/></name>;<pos:position pos:line="28" pos:column="69"/></typedef>
        <expr_stmt><expr><call><name><name pos:line="29" pos:column="9">entry<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">-&gt;<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="16">delayAwareRead<pos:position pos:line="29" pos:column="30"/></name></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">serverConnection<pos:position pos:line="29" pos:column="47"/></name></expr></argument>, <argument><expr><call><name><name pos:line="29" pos:column="49">readBuf<pos:position pos:line="29" pos:column="56"/></name><operator pos:line="29" pos:column="56">-&gt;<pos:position pos:line="29" pos:column="61"/></operator><name pos:line="29" pos:column="58">space<pos:position pos:line="29" pos:column="63"/></name></name><argument_list pos:line="29" pos:column="63">(<argument><expr><name pos:line="29" pos:column="64">read_size<pos:position pos:line="29" pos:column="73"/></name></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="76">read_size<pos:position pos:line="29" pos:column="85"/></name></expr></argument>,
                              <argument><expr><call><name pos:line="30" pos:column="31">JobCallback<pos:position pos:line="30" pos:column="42"/></name><argument_list pos:line="30" pos:column="42">(<argument><expr><literal type="number" pos:line="30" pos:column="43">11<pos:position pos:line="30" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="30" pos:column="47">5<pos:position pos:line="30" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="50">Dialer<pos:position pos:line="30" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="58">this<pos:position pos:line="30" pos:column="62"/></name></expr></argument>,  <argument><expr><name><name pos:line="30" pos:column="65">HttpStateData<pos:position pos:line="30" pos:column="78"/></name><operator pos:line="30" pos:column="78">::<pos:position pos:line="30" pos:column="80"/></operator><name pos:line="30" pos:column="80">readReply<pos:position pos:line="30" pos:column="89"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="92"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
