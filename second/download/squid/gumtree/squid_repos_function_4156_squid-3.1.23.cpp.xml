<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4156_squid-3.1.23.cpp" pos:tabs="8"><function><type><name><name pos:line="1" pos:column="1">std<pos:position pos:line="1" pos:column="4"/></name><operator pos:line="1" pos:column="4">::<pos:position pos:line="1" pos:column="6"/></operator><name pos:line="1" pos:column="6">string<pos:position pos:line="1" pos:column="12"/></name></name></type> <name><name pos:line="1" pos:column="13">Ssl<pos:position pos:line="1" pos:column="16"/></name><operator pos:line="1" pos:column="16">::<pos:position pos:line="1" pos:column="18"/></operator><name pos:line="1" pos:column="18">CrtdMessage<pos:position pos:line="1" pos:column="29"/></name><operator pos:line="1" pos:column="29">::<pos:position pos:line="1" pos:column="31"/></operator><name pos:line="1" pos:column="31">compose<pos:position pos:line="1" pos:column="38"/></name></name><parameter_list pos:line="1" pos:column="38">()<pos:position pos:line="1" pos:column="40"/></parameter_list> <specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><call><name><name pos:line="3" pos:column="9">code<pos:position pos:line="3" pos:column="13"/></name><operator pos:line="3" pos:column="13">.<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">empty<pos:position pos:line="3" pos:column="19"/></name></name><argument_list pos:line="3" pos:column="19">()<pos:position pos:line="3" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="22"/></condition><then pos:line="3" pos:column="22"> <block type="pseudo"><return pos:line="3" pos:column="23">return <expr><call><name><name pos:line="3" pos:column="30">std<pos:position pos:line="3" pos:column="33"/></name><operator pos:line="3" pos:column="33">::<pos:position pos:line="3" pos:column="35"/></operator><name pos:line="3" pos:column="35">string<pos:position pos:line="3" pos:column="41"/></name></name><argument_list pos:line="3" pos:column="41">()<pos:position pos:line="3" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="44"/></return></block></then></if>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buffer<pos:position pos:line="4" pos:column="16"/></name><index pos:line="4" pos:column="16">[<expr><literal type="number" pos:line="4" pos:column="17">10<pos:position pos:line="4" pos:column="19"/></literal></expr>]<pos:position pos:line="4" pos:column="20"/></index></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">snprintf<pos:position pos:line="5" pos:column="13"/></name><argument_list pos:line="5" pos:column="13">(<argument><expr><name pos:line="5" pos:column="14">buffer<pos:position pos:line="5" pos:column="20"/></name></expr></argument>, <argument><expr><sizeof pos:line="5" pos:column="22">sizeof<argument_list pos:line="5" pos:column="28">(<argument><expr><name pos:line="5" pos:column="29">buffer<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="38">"%zd"<pos:position pos:line="5" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="5" pos:column="45">body<pos:position pos:line="5" pos:column="49"/></name><operator pos:line="5" pos:column="49">.<pos:position pos:line="5" pos:column="50"/></operator><name pos:line="5" pos:column="50">length<pos:position pos:line="5" pos:column="56"/></name></name><argument_list pos:line="5" pos:column="56">()<pos:position pos:line="5" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="60"/></expr_stmt>
    <return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">code<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">+<pos:position pos:line="6" pos:column="18"/></operator> <literal type="char" pos:line="6" pos:column="19">' '<pos:position pos:line="6" pos:column="22"/></literal> <operator pos:line="6" pos:column="23">+<pos:position pos:line="6" pos:column="24"/></operator> <name pos:line="6" pos:column="25">buffer<pos:position pos:line="6" pos:column="31"/></name> <operator pos:line="6" pos:column="32">+<pos:position pos:line="6" pos:column="33"/></operator> <literal type="char" pos:line="6" pos:column="34">' '<pos:position pos:line="6" pos:column="37"/></literal> <operator pos:line="6" pos:column="38">+<pos:position pos:line="6" pos:column="39"/></operator> <name pos:line="6" pos:column="40">body<pos:position pos:line="6" pos:column="44"/></name></expr>;<pos:position pos:line="6" pos:column="45"/></return>
}<pos:position pos:line="7" pos:column="2"/></block></function></unit>
