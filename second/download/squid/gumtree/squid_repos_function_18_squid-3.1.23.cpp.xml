<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_18_squid-3.1.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">cachemgr_request<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type>
<name pos:line="2" pos:column="1">read_request<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">void<pos:position pos:line="2" pos:column="18"/></name></type></decl></parameter>)<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">buf<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="6" pos:column="5">cachemgr_request<pos:position pos:line="6" pos:column="21"/></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">req<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">s<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">t<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">q<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">buf<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <call><name pos:line="11" pos:column="16">read_post_request<pos:position pos:line="11" pos:column="33"/></name><argument_list pos:line="11" pos:column="33">()<pos:position pos:line="11" pos:column="35"/></argument_list></call><operator pos:line="11" pos:column="35">)<pos:position pos:line="11" pos:column="36"/></operator> <operator pos:line="11" pos:column="37">!=<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">NULL<pos:position pos:line="11" pos:column="44"/></name></expr>)<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">void<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">)<pos:position pos:line="12" pos:column="15"/></operator> <literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></expr_stmt></block></then>
    <elseif pos:line="13" pos:column="5">else <if pos:line="13" pos:column="10">if <condition pos:line="13" pos:column="13">(<expr><operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="15">buf<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">=<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">read_get_request<pos:position pos:line="13" pos:column="37"/></name><argument_list pos:line="13" pos:column="37">()<pos:position pos:line="13" pos:column="39"/></argument_list></call><operator pos:line="13" pos:column="39">)<pos:position pos:line="13" pos:column="40"/></operator> <operator pos:line="13" pos:column="41">!=<pos:position pos:line="13" pos:column="43"/></operator> <name pos:line="13" pos:column="44">NULL<pos:position pos:line="13" pos:column="48"/></name></expr>)<pos:position pos:line="13" pos:column="49"/></condition><then pos:line="13" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="14" pos:column="9">(<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">void<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">)<pos:position pos:line="14" pos:column="15"/></operator> <literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt></block></then></if></elseif>
    <else pos:line="15" pos:column="5">else
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">NULL<pos:position pos:line="16" pos:column="20"/></name></expr>;<pos:position pos:line="16" pos:column="21"/></return></block></else></if>

<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef<pos:position pos:line="18" pos:column="7"/></cpp:directive> <name pos:line="18" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="18" pos:column="21"/></name></cpp:ifdef>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">strlen<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">buf<pos:position pos:line="20" pos:column="19"/></name></expr></argument>)<pos:position pos:line="20" pos:column="20"/></argument_list></call> <operator pos:line="20" pos:column="21">==<pos:position pos:line="20" pos:column="23"/></operator> <literal type="number" pos:line="20" pos:column="24">0<pos:position pos:line="20" pos:column="25"/></literal> <operator pos:line="20" pos:column="26">||<pos:position pos:line="20" pos:column="28"/></operator> <call><name pos:line="20" pos:column="29">strlen<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name pos:line="20" pos:column="36">buf<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call> <operator pos:line="20" pos:column="41">==<pos:position pos:line="20" pos:column="43"/></operator> <literal type="number" pos:line="20" pos:column="44">4000<pos:position pos:line="20" pos:column="48"/></literal></expr>)<pos:position pos:line="20" pos:column="49"/></condition><then pos:line="20" pos:column="49">
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>

    <block type="pseudo"><if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">strlen<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">buf<pos:position pos:line="23" pos:column="19"/></name></expr></argument>)<pos:position pos:line="23" pos:column="20"/></argument_list></call> <operator pos:line="23" pos:column="21">==<pos:position pos:line="23" pos:column="23"/></operator> <literal type="number" pos:line="23" pos:column="24">0<pos:position pos:line="23" pos:column="25"/></literal></expr>)<pos:position pos:line="23" pos:column="26"/></condition><then pos:line="23" pos:column="26">
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="25" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">free<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><name pos:line="26" pos:column="14">buf<pos:position pos:line="26" pos:column="17"/></name></expr></argument>)<pos:position pos:line="26" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="19"/></expr_stmt>
        <return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">NULL<pos:position pos:line="27" pos:column="20"/></name></expr>;<pos:position pos:line="27" pos:column="21"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if></block></then></if>

    <expr_stmt><expr><name pos:line="30" pos:column="5">req<pos:position pos:line="30" pos:column="8"/></name> <operator pos:line="30" pos:column="9">=<pos:position pos:line="30" pos:column="10"/></operator> <operator pos:line="30" pos:column="11">(<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">cachemgr_request<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">*<pos:position pos:line="30" pos:column="30"/></operator><operator pos:line="30" pos:column="30">)<pos:position pos:line="30" pos:column="31"/></operator><call><name pos:line="30" pos:column="31">xcalloc<pos:position pos:line="30" pos:column="38"/></name><argument_list pos:line="30" pos:column="38">(<argument><expr><literal type="number" pos:line="30" pos:column="39">1<pos:position pos:line="30" pos:column="40"/></literal></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="42">sizeof<argument_list pos:line="30" pos:column="48">(<argument><expr><name pos:line="30" pos:column="49">cachemgr_request<pos:position pos:line="30" pos:column="65"/></name></expr></argument>)<pos:position pos:line="30" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="68"/></expr_stmt>

    <for pos:line="32" pos:column="5">for <control pos:line="32" pos:column="9">(<init><expr><name pos:line="32" pos:column="10">s<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">strtok<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name pos:line="32" pos:column="21">buf<pos:position pos:line="32" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="26">"&amp;"<pos:position pos:line="32" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="31"/></init> <condition><expr><name pos:line="32" pos:column="32">s<pos:position pos:line="32" pos:column="33"/></name> <operator pos:line="32" pos:column="34">!=<pos:position pos:line="32" pos:column="36"/></operator> <name pos:line="32" pos:column="37">NULL<pos:position pos:line="32" pos:column="41"/></name></expr>;<pos:position pos:line="32" pos:column="42"/></condition> <incr><expr><name pos:line="32" pos:column="43">s<pos:position pos:line="32" pos:column="44"/></name> <operator pos:line="32" pos:column="45">=<pos:position pos:line="32" pos:column="46"/></operator> <call><name pos:line="32" pos:column="47">strtok<pos:position pos:line="32" pos:column="53"/></name><argument_list pos:line="32" pos:column="53">(<argument><expr><name pos:line="32" pos:column="54">NULL<pos:position pos:line="32" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="60">"&amp;"<pos:position pos:line="32" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="64"/></argument_list></call></expr></incr>)<pos:position pos:line="32" pos:column="65"/></control> <block pos:line="32" pos:column="66">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">t<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <call><name pos:line="33" pos:column="13">xstrdup<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">s<pos:position pos:line="33" pos:column="22"/></name></expr></argument>)<pos:position pos:line="33" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>

        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">(<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">q<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <call><name pos:line="35" pos:column="18">strchr<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">t<pos:position pos:line="35" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="28">'='<pos:position pos:line="35" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call><operator pos:line="35" pos:column="32">)<pos:position pos:line="35" pos:column="33"/></operator> <operator pos:line="35" pos:column="34">==<pos:position pos:line="35" pos:column="36"/></operator> <name pos:line="35" pos:column="37">NULL<pos:position pos:line="35" pos:column="41"/></name></expr>)<pos:position pos:line="35" pos:column="42"/></condition><then pos:line="35" pos:column="42">
            <block type="pseudo"><continue pos:line="36" pos:column="13">continue;<pos:position pos:line="36" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><operator pos:line="38" pos:column="9">*<pos:position pos:line="38" pos:column="10"/></operator><name pos:line="38" pos:column="10">q<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">++<pos:position pos:line="38" pos:column="13"/></operator> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <literal type="char" pos:line="38" pos:column="16">'\0'<pos:position pos:line="38" pos:column="20"/></literal></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="40" pos:column="9">rfc1738_unescape<pos:position pos:line="40" pos:column="25"/></name><argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">t<pos:position pos:line="40" pos:column="27"/></name></expr></argument>)<pos:position pos:line="40" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="29"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="42" pos:column="9">rfc1738_unescape<pos:position pos:line="42" pos:column="25"/></name><argument_list pos:line="42" pos:column="25">(<argument><expr><name pos:line="42" pos:column="26">q<pos:position pos:line="42" pos:column="27"/></name></expr></argument>)<pos:position pos:line="42" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><literal type="number" pos:line="44" pos:column="13">0<pos:position pos:line="44" pos:column="14"/></literal> <operator pos:line="44" pos:column="15">==<pos:position pos:line="44" pos:column="17"/></operator> <call><name pos:line="44" pos:column="18">strcasecmp<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">t<pos:position pos:line="44" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="32">"server"<pos:position pos:line="44" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="41"/></argument_list></call> <operator pos:line="44" pos:column="42">&amp;&amp;<pos:position pos:line="44" pos:column="52"/></operator> <call><name pos:line="44" pos:column="45">strlen<pos:position pos:line="44" pos:column="51"/></name><argument_list pos:line="44" pos:column="51">(<argument><expr><name pos:line="44" pos:column="52">q<pos:position pos:line="44" pos:column="53"/></name></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="55"/></condition><then pos:line="44" pos:column="55">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="45" pos:column="13">req<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">-&gt;<pos:position pos:line="45" pos:column="21"/></operator><name pos:line="45" pos:column="18">server<pos:position pos:line="45" pos:column="24"/></name></name> <operator pos:line="45" pos:column="25">=<pos:position pos:line="45" pos:column="26"/></operator> <call><name pos:line="45" pos:column="27">xstrdup<pos:position pos:line="45" pos:column="34"/></name><argument_list pos:line="45" pos:column="34">(<argument><expr><name pos:line="45" pos:column="35">q<pos:position pos:line="45" pos:column="36"/></name></expr></argument>)<pos:position pos:line="45" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="38"/></expr_stmt></block></then>
        <elseif pos:line="46" pos:column="9">else <if pos:line="46" pos:column="14">if <condition pos:line="46" pos:column="17">(<expr><literal type="number" pos:line="46" pos:column="18">0<pos:position pos:line="46" pos:column="19"/></literal> <operator pos:line="46" pos:column="20">==<pos:position pos:line="46" pos:column="22"/></operator> <call><name pos:line="46" pos:column="23">strcasecmp<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">t<pos:position pos:line="46" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="37">"host"<pos:position pos:line="46" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="44"/></argument_list></call> <operator pos:line="46" pos:column="45">&amp;&amp;<pos:position pos:line="46" pos:column="55"/></operator> <call><name pos:line="46" pos:column="48">strlen<pos:position pos:line="46" pos:column="54"/></name><argument_list pos:line="46" pos:column="54">(<argument><expr><name pos:line="46" pos:column="55">q<pos:position pos:line="46" pos:column="56"/></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="58"/></condition><then pos:line="46" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="13">req<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">-&gt;<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="18">hostname<pos:position pos:line="47" pos:column="26"/></name></name> <operator pos:line="47" pos:column="27">=<pos:position pos:line="47" pos:column="28"/></operator> <call><name pos:line="47" pos:column="29">xstrdup<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><name pos:line="47" pos:column="37">q<pos:position pos:line="47" pos:column="38"/></name></expr></argument>)<pos:position pos:line="47" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="48" pos:column="9">else <if pos:line="48" pos:column="14">if <condition pos:line="48" pos:column="17">(<expr><literal type="number" pos:line="48" pos:column="18">0<pos:position pos:line="48" pos:column="19"/></literal> <operator pos:line="48" pos:column="20">==<pos:position pos:line="48" pos:column="22"/></operator> <call><name pos:line="48" pos:column="23">strcasecmp<pos:position pos:line="48" pos:column="33"/></name><argument_list pos:line="48" pos:column="33">(<argument><expr><name pos:line="48" pos:column="34">t<pos:position pos:line="48" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="37">"port"<pos:position pos:line="48" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="44"/></argument_list></call> <operator pos:line="48" pos:column="45">&amp;&amp;<pos:position pos:line="48" pos:column="55"/></operator> <call><name pos:line="48" pos:column="48">strlen<pos:position pos:line="48" pos:column="54"/></name><argument_list pos:line="48" pos:column="54">(<argument><expr><name pos:line="48" pos:column="55">q<pos:position pos:line="48" pos:column="56"/></name></expr></argument>)<pos:position pos:line="48" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="58"/></condition><then pos:line="48" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="49" pos:column="13">req<pos:position pos:line="49" pos:column="16"/></name><operator pos:line="49" pos:column="16">-&gt;<pos:position pos:line="49" pos:column="21"/></operator><name pos:line="49" pos:column="18">port<pos:position pos:line="49" pos:column="22"/></name></name> <operator pos:line="49" pos:column="23">=<pos:position pos:line="49" pos:column="24"/></operator> <call><name pos:line="49" pos:column="25">atoi<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">q<pos:position pos:line="49" pos:column="31"/></name></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="50" pos:column="9">else <if pos:line="50" pos:column="14">if <condition pos:line="50" pos:column="17">(<expr><literal type="number" pos:line="50" pos:column="18">0<pos:position pos:line="50" pos:column="19"/></literal> <operator pos:line="50" pos:column="20">==<pos:position pos:line="50" pos:column="22"/></operator> <call><name pos:line="50" pos:column="23">strcasecmp<pos:position pos:line="50" pos:column="33"/></name><argument_list pos:line="50" pos:column="33">(<argument><expr><name pos:line="50" pos:column="34">t<pos:position pos:line="50" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="37">"user_name"<pos:position pos:line="50" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></call> <operator pos:line="50" pos:column="50">&amp;&amp;<pos:position pos:line="50" pos:column="60"/></operator> <call><name pos:line="50" pos:column="53">strlen<pos:position pos:line="50" pos:column="59"/></name><argument_list pos:line="50" pos:column="59">(<argument><expr><name pos:line="50" pos:column="60">q<pos:position pos:line="50" pos:column="61"/></name></expr></argument>)<pos:position pos:line="50" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="63"/></condition><then pos:line="50" pos:column="63">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="51" pos:column="13">req<pos:position pos:line="51" pos:column="16"/></name><operator pos:line="51" pos:column="16">-&gt;<pos:position pos:line="51" pos:column="21"/></operator><name pos:line="51" pos:column="18">user_name<pos:position pos:line="51" pos:column="27"/></name></name> <operator pos:line="51" pos:column="28">=<pos:position pos:line="51" pos:column="29"/></operator> <call><name pos:line="51" pos:column="30">xstrdup<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><name pos:line="51" pos:column="38">q<pos:position pos:line="51" pos:column="39"/></name></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="52" pos:column="9">else <if pos:line="52" pos:column="14">if <condition pos:line="52" pos:column="17">(<expr><literal type="number" pos:line="52" pos:column="18">0<pos:position pos:line="52" pos:column="19"/></literal> <operator pos:line="52" pos:column="20">==<pos:position pos:line="52" pos:column="22"/></operator> <call><name pos:line="52" pos:column="23">strcasecmp<pos:position pos:line="52" pos:column="33"/></name><argument_list pos:line="52" pos:column="33">(<argument><expr><name pos:line="52" pos:column="34">t<pos:position pos:line="52" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="37">"passwd"<pos:position pos:line="52" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="46"/></argument_list></call> <operator pos:line="52" pos:column="47">&amp;&amp;<pos:position pos:line="52" pos:column="57"/></operator> <call><name pos:line="52" pos:column="50">strlen<pos:position pos:line="52" pos:column="56"/></name><argument_list pos:line="52" pos:column="56">(<argument><expr><name pos:line="52" pos:column="57">q<pos:position pos:line="52" pos:column="58"/></name></expr></argument>)<pos:position pos:line="52" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="60"/></condition><then pos:line="52" pos:column="60">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="53" pos:column="13">req<pos:position pos:line="53" pos:column="16"/></name><operator pos:line="53" pos:column="16">-&gt;<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="18">passwd<pos:position pos:line="53" pos:column="24"/></name></name> <operator pos:line="53" pos:column="25">=<pos:position pos:line="53" pos:column="26"/></operator> <call><name pos:line="53" pos:column="27">xstrdup<pos:position pos:line="53" pos:column="34"/></name><argument_list pos:line="53" pos:column="34">(<argument><expr><name pos:line="53" pos:column="35">q<pos:position pos:line="53" pos:column="36"/></name></expr></argument>)<pos:position pos:line="53" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="38"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="54" pos:column="9">else <if pos:line="54" pos:column="14">if <condition pos:line="54" pos:column="17">(<expr><literal type="number" pos:line="54" pos:column="18">0<pos:position pos:line="54" pos:column="19"/></literal> <operator pos:line="54" pos:column="20">==<pos:position pos:line="54" pos:column="22"/></operator> <call><name pos:line="54" pos:column="23">strcasecmp<pos:position pos:line="54" pos:column="33"/></name><argument_list pos:line="54" pos:column="33">(<argument><expr><name pos:line="54" pos:column="34">t<pos:position pos:line="54" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="37">"auth"<pos:position pos:line="54" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call> <operator pos:line="54" pos:column="45">&amp;&amp;<pos:position pos:line="54" pos:column="55"/></operator> <call><name pos:line="54" pos:column="48">strlen<pos:position pos:line="54" pos:column="54"/></name><argument_list pos:line="54" pos:column="54">(<argument><expr><name pos:line="54" pos:column="55">q<pos:position pos:line="54" pos:column="56"/></name></expr></argument>)<pos:position pos:line="54" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="58"/></condition><then pos:line="54" pos:column="58">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="55" pos:column="13">req<pos:position pos:line="55" pos:column="16"/></name><operator pos:line="55" pos:column="16">-&gt;<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="18">pub_auth<pos:position pos:line="55" pos:column="26"/></name></name> <operator pos:line="55" pos:column="27">=<pos:position pos:line="55" pos:column="28"/></operator> <call><name pos:line="55" pos:column="29">xstrdup<pos:position pos:line="55" pos:column="36"/></name><argument_list pos:line="55" pos:column="36">(<argument><expr><name pos:line="55" pos:column="37">q<pos:position pos:line="55" pos:column="38"/></name></expr></argument>)<pos:position pos:line="55" pos:column="39"/></argument_list></call></expr><operator pos:line="55" pos:column="39">,<pos:position pos:line="55" pos:column="40"/></operator> <expr><call><name pos:line="55" pos:column="41">decode_pub_auth<pos:position pos:line="55" pos:column="56"/></name><argument_list pos:line="55" pos:column="56">(<argument><expr><name pos:line="55" pos:column="57">req<pos:position pos:line="55" pos:column="60"/></name></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="62"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="56" pos:column="9">else <if pos:line="56" pos:column="14">if <condition pos:line="56" pos:column="17">(<expr><literal type="number" pos:line="56" pos:column="18">0<pos:position pos:line="56" pos:column="19"/></literal> <operator pos:line="56" pos:column="20">==<pos:position pos:line="56" pos:column="22"/></operator> <call><name pos:line="56" pos:column="23">strcasecmp<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">t<pos:position pos:line="56" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="37">"operation"<pos:position pos:line="56" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="50"/></condition><then pos:line="56" pos:column="50">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="57" pos:column="13">req<pos:position pos:line="57" pos:column="16"/></name><operator pos:line="57" pos:column="16">-&gt;<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="18">action<pos:position pos:line="57" pos:column="24"/></name></name> <operator pos:line="57" pos:column="25">=<pos:position pos:line="57" pos:column="26"/></operator> <call><name pos:line="57" pos:column="27">xstrdup<pos:position pos:line="57" pos:column="34"/></name><argument_list pos:line="57" pos:column="34">(<argument><expr><name pos:line="57" pos:column="35">q<pos:position pos:line="57" pos:column="36"/></name></expr></argument>)<pos:position pos:line="57" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="38"/></expr_stmt></block></then></if></elseif></if>
    }<pos:position pos:line="58" pos:column="6"/></block></for>

    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name><name pos:line="60" pos:column="9">req<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">-&gt;<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="14">server<pos:position pos:line="60" pos:column="20"/></name></name> <operator pos:line="60" pos:column="21">&amp;&amp;<pos:position pos:line="60" pos:column="31"/></operator> <operator pos:line="60" pos:column="24">!<pos:position pos:line="60" pos:column="25"/></operator><name><name pos:line="60" pos:column="25">req<pos:position pos:line="60" pos:column="28"/></name><operator pos:line="60" pos:column="28">-&gt;<pos:position pos:line="60" pos:column="33"/></operator><name pos:line="60" pos:column="30">hostname<pos:position pos:line="60" pos:column="38"/></name></name></expr>)<pos:position pos:line="60" pos:column="39"/></condition><then pos:line="60" pos:column="39"> <block pos:line="60" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="61" pos:column="9">char<pos:position pos:line="61" pos:column="13"/></name> <modifier pos:line="61" pos:column="14">*<pos:position pos:line="61" pos:column="15"/></modifier></type><name pos:line="61" pos:column="15">p<pos:position pos:line="61" pos:column="16"/></name></decl>;<pos:position pos:line="61" pos:column="17"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">req<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">-&gt;<pos:position pos:line="62" pos:column="17"/></operator><name pos:line="62" pos:column="14">hostname<pos:position pos:line="62" pos:column="22"/></name></name> <operator pos:line="62" pos:column="23">=<pos:position pos:line="62" pos:column="24"/></operator> <call><name pos:line="62" pos:column="25">strtok<pos:position pos:line="62" pos:column="31"/></name><argument_list pos:line="62" pos:column="31">(<argument><expr><name><name pos:line="62" pos:column="32">req<pos:position pos:line="62" pos:column="35"/></name><operator pos:line="62" pos:column="35">-&gt;<pos:position pos:line="62" pos:column="40"/></operator><name pos:line="62" pos:column="37">server<pos:position pos:line="62" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="45">":"<pos:position pos:line="62" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="50"/></expr_stmt>

        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><operator pos:line="64" pos:column="13">(<pos:position pos:line="64" pos:column="14"/></operator><name pos:line="64" pos:column="14">p<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">=<pos:position pos:line="64" pos:column="17"/></operator> <call><name pos:line="64" pos:column="18">strtok<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">NULL<pos:position pos:line="64" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="31">":"<pos:position pos:line="64" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="35"/></argument_list></call><operator pos:line="64" pos:column="35">)<pos:position pos:line="64" pos:column="36"/></operator></expr>)<pos:position pos:line="64" pos:column="37"/></condition><then pos:line="64" pos:column="37">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="65" pos:column="13">req<pos:position pos:line="65" pos:column="16"/></name><operator pos:line="65" pos:column="16">-&gt;<pos:position pos:line="65" pos:column="21"/></operator><name pos:line="65" pos:column="18">port<pos:position pos:line="65" pos:column="22"/></name></name> <operator pos:line="65" pos:column="23">=<pos:position pos:line="65" pos:column="24"/></operator> <call><name pos:line="65" pos:column="25">atoi<pos:position pos:line="65" pos:column="29"/></name><argument_list pos:line="65" pos:column="29">(<argument><expr><name pos:line="65" pos:column="30">p<pos:position pos:line="65" pos:column="31"/></name></expr></argument>)<pos:position pos:line="65" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt></block></then></if>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">make_pub_auth<pos:position pos:line="68" pos:column="18"/></name><argument_list pos:line="68" pos:column="18">(<argument><expr><name pos:line="68" pos:column="19">req<pos:position pos:line="68" pos:column="22"/></name></expr></argument>)<pos:position pos:line="68" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="24"/></expr_stmt>
    <macro><name pos:line="69" pos:column="5">debug<pos:position pos:line="69" pos:column="10"/></name><argument_list pos:line="69" pos:column="10">(<argument><literal type="number" pos:line="69" pos:column="11">1<pos:position pos:line="69" pos:column="12"/></literal></argument>)<pos:position pos:line="69" pos:column="13"/></argument_list></macro> <expr_stmt><expr><call><name pos:line="69" pos:column="14">fprintf<pos:position pos:line="69" pos:column="21"/></name><argument_list pos:line="69" pos:column="21">(<argument><expr><name pos:line="69" pos:column="22">stderr<pos:position pos:line="69" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="30">"cmgr: got req: host: '%s' port: %d uname: '%s' passwd: '%s' auth: '%s' oper: '%s'\n"<pos:position pos:line="69" pos:column="115"/></literal></expr></argument>,
                     <argument><expr><call><name pos:line="70" pos:column="22">safe_str<pos:position pos:line="70" pos:column="30"/></name><argument_list pos:line="70" pos:column="30">(<argument><expr><name><name pos:line="70" pos:column="31">req<pos:position pos:line="70" pos:column="34"/></name><operator pos:line="70" pos:column="34">-&gt;<pos:position pos:line="70" pos:column="39"/></operator><name pos:line="70" pos:column="36">hostname<pos:position pos:line="70" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="45"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="47">req<pos:position pos:line="70" pos:column="50"/></name><operator pos:line="70" pos:column="50">-&gt;<pos:position pos:line="70" pos:column="55"/></operator><name pos:line="70" pos:column="52">port<pos:position pos:line="70" pos:column="56"/></name></name></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="58">safe_str<pos:position pos:line="70" pos:column="66"/></name><argument_list pos:line="70" pos:column="66">(<argument><expr><name><name pos:line="70" pos:column="67">req<pos:position pos:line="70" pos:column="70"/></name><operator pos:line="70" pos:column="70">-&gt;<pos:position pos:line="70" pos:column="75"/></operator><name pos:line="70" pos:column="72">user_name<pos:position pos:line="70" pos:column="81"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="82"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="84">safe_str<pos:position pos:line="70" pos:column="92"/></name><argument_list pos:line="70" pos:column="92">(<argument><expr><name><name pos:line="70" pos:column="93">req<pos:position pos:line="70" pos:column="96"/></name><operator pos:line="70" pos:column="96">-&gt;<pos:position pos:line="70" pos:column="101"/></operator><name pos:line="70" pos:column="98">passwd<pos:position pos:line="70" pos:column="104"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="105"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="107">safe_str<pos:position pos:line="70" pos:column="115"/></name><argument_list pos:line="70" pos:column="115">(<argument><expr><name><name pos:line="70" pos:column="116">req<pos:position pos:line="70" pos:column="119"/></name><operator pos:line="70" pos:column="119">-&gt;<pos:position pos:line="70" pos:column="124"/></operator><name pos:line="70" pos:column="121">pub_auth<pos:position pos:line="70" pos:column="129"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="130"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="70" pos:column="132">safe_str<pos:position pos:line="70" pos:column="140"/></name><argument_list pos:line="70" pos:column="140">(<argument><expr><name><name pos:line="70" pos:column="141">req<pos:position pos:line="70" pos:column="144"/></name><operator pos:line="70" pos:column="144">-&gt;<pos:position pos:line="70" pos:column="149"/></operator><name pos:line="70" pos:column="146">action<pos:position pos:line="70" pos:column="152"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="153"/></argument_list></call></expr></argument>)<pos:position pos:line="70" pos:column="154"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="155"/></expr_stmt>
    <return pos:line="71" pos:column="5">return <expr><name pos:line="71" pos:column="12">req<pos:position pos:line="71" pos:column="15"/></name></expr>;<pos:position pos:line="71" pos:column="16"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
