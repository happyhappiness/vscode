<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3732_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ip<pos:position pos:line="2" pos:column="3"/></name><operator pos:line="2" pos:column="3">::<pos:position pos:line="2" pos:column="5"/></operator><name pos:line="2" pos:column="5">Intercept<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">Lookup<pos:position pos:line="2" pos:column="22"/></name></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name><name pos:line="2" pos:column="29">Comm<pos:position pos:line="2" pos:column="33"/></name><operator pos:line="2" pos:column="33">::<pos:position pos:line="2" pos:column="35"/></operator><name pos:line="2" pos:column="35">ConnectionPointer<pos:position pos:line="2" pos:column="52"/></name></name> <modifier pos:line="2" pos:column="53">&amp;<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="54">newConn<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="63">const<pos:position pos:line="2" pos:column="68"/></specifier> <name><name pos:line="2" pos:column="69">Comm<pos:position pos:line="2" pos:column="73"/></name><operator pos:line="2" pos:column="73">::<pos:position pos:line="2" pos:column="75"/></operator><name pos:line="2" pos:column="75">ConnectionPointer<pos:position pos:line="2" pos:column="92"/></name></name> <modifier pos:line="2" pos:column="93">&amp;<pos:position pos:line="2" pos:column="98"/></modifier></type><name pos:line="2" pos:column="94">listenConn<pos:position pos:line="2" pos:column="104"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="105"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* --enable-linux-netfilter    */</comment>
    <comment type="block" pos:line="5" pos:column="5">/* --enable-ipfw-transparent   */</comment>
    <comment type="block" pos:line="6" pos:column="5">/* --enable-ipf-transparent    */</comment>
    <comment type="block" pos:line="7" pos:column="5">/* --enable-pf-transparent     */</comment>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><name pos:line="8" pos:column="5">IPF_TRANSPARENT<pos:position pos:line="8" pos:column="20"/></name> <operator pos:line="8" pos:column="21">||<pos:position pos:line="8" pos:column="23"/></operator> <name pos:line="8" pos:column="24">LINUX_NETFILTER<pos:position pos:line="8" pos:column="39"/></name> <operator pos:line="8" pos:column="40">||<pos:position pos:line="8" pos:column="42"/></operator> <name pos:line="8" pos:column="43">IPFW_TRANSPARENT<pos:position pos:line="8" pos:column="59"/></name> <operator pos:line="8" pos:column="60">||<pos:position pos:line="8" pos:column="62"/></operator> <name pos:line="8" pos:column="63">PF_TRANSPARENT<pos:position pos:line="8" pos:column="77"/></name></expr></cpp:if>

<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="10" pos:column="5">0<pos:position pos:line="10" pos:column="6"/></literal></expr></cpp:if>
    <comment type="line" pos:line="11" pos:column="5">// Crop interception errors down to one per minute.</comment>
    int silent = (squid_curtime - lastReported_ &gt; 60 ? 0 : 1);
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else<pos:position pos:line="13" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="line" pos:line="14" pos:column="5">// Show all interception errors.</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">silent<pos:position pos:line="15" pos:column="15"/></name> <init pos:line="15" pos:column="16">= <expr><literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="20"/></decl_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">debugs<pos:position pos:line="18" pos:column="11"/></name><argument_list pos:line="18" pos:column="11">(<argument><expr><literal type="number" pos:line="18" pos:column="12">89<pos:position pos:line="18" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="16">5<pos:position pos:line="18" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="19">HERE<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">&lt;&lt;<pos:position pos:line="18" pos:column="32"/></operator> <literal type="string" pos:line="18" pos:column="27">"address BEGIN: me/client= "<pos:position pos:line="18" pos:column="55"/></literal> <operator pos:line="18" pos:column="56">&lt;&lt;<pos:position pos:line="18" pos:column="64"/></operator> <name><name pos:line="18" pos:column="59">newConn<pos:position pos:line="18" pos:column="66"/></name><operator pos:line="18" pos:column="66">-&gt;<pos:position pos:line="18" pos:column="71"/></operator><name pos:line="18" pos:column="68">local<pos:position pos:line="18" pos:column="73"/></name></name> <operator pos:line="18" pos:column="74">&lt;&lt;<pos:position pos:line="18" pos:column="82"/></operator> <literal type="string" pos:line="18" pos:column="77">", destination/me= "<pos:position pos:line="18" pos:column="97"/></literal> <operator pos:line="18" pos:column="98">&lt;&lt;<pos:position pos:line="18" pos:column="106"/></operator> <name><name pos:line="18" pos:column="101">newConn<pos:position pos:line="18" pos:column="108"/></name><operator pos:line="18" pos:column="108">-&gt;<pos:position pos:line="18" pos:column="113"/></operator><name pos:line="18" pos:column="110">remote<pos:position pos:line="18" pos:column="116"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="117"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="118"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="20" pos:column="5">newConn<pos:position pos:line="20" pos:column="12"/></name><operator pos:line="20" pos:column="12">-&gt;<pos:position pos:line="20" pos:column="17"/></operator><name pos:line="20" pos:column="14">flags<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">|=<pos:position pos:line="20" pos:column="22"/></operator> <operator pos:line="20" pos:column="23">(<pos:position pos:line="20" pos:column="24"/></operator><name><name pos:line="20" pos:column="24">listenConn<pos:position pos:line="20" pos:column="34"/></name><operator pos:line="20" pos:column="34">-&gt;<pos:position pos:line="20" pos:column="39"/></operator><name pos:line="20" pos:column="36">flags<pos:position pos:line="20" pos:column="41"/></name></name> <operator pos:line="20" pos:column="42">&amp;<pos:position pos:line="20" pos:column="47"/></operator> <operator pos:line="20" pos:column="44">(<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="45">COMM_TRANSPARENT<pos:position pos:line="20" pos:column="61"/></name><operator pos:line="20" pos:column="61">|<pos:position pos:line="20" pos:column="62"/></operator><name pos:line="20" pos:column="62">COMM_INTERCEPTION<pos:position pos:line="20" pos:column="79"/></name><operator pos:line="20" pos:column="79">)<pos:position pos:line="20" pos:column="80"/></operator><operator pos:line="20" pos:column="80">)<pos:position pos:line="20" pos:column="81"/></operator></expr>;<pos:position pos:line="20" pos:column="82"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* NP: try TPROXY first, its much quieter than NAT when non-matching */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">transparentActive_<pos:position pos:line="23" pos:column="27"/></name> <operator pos:line="23" pos:column="28">&amp;&amp;<pos:position pos:line="23" pos:column="38"/></operator> <name><name pos:line="23" pos:column="31">listenConn<pos:position pos:line="23" pos:column="41"/></name><operator pos:line="23" pos:column="41">-&gt;<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="43">flags<pos:position pos:line="23" pos:column="48"/></name></name><operator pos:line="23" pos:column="48">&amp;<pos:position pos:line="23" pos:column="53"/></operator><name pos:line="23" pos:column="49">COMM_TRANSPARENT<pos:position pos:line="23" pos:column="65"/></name></expr>)<pos:position pos:line="23" pos:column="66"/></condition><then pos:line="23" pos:column="66"> <block pos:line="23" pos:column="67">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">TproxyTransparent<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name pos:line="24" pos:column="31">newConn<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">silent<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="48"/></condition><then pos:line="24" pos:column="48"> <block type="pseudo"><return pos:line="24" pos:column="49">return <expr><literal type="boolean" pos:line="24" pos:column="56">true<pos:position pos:line="24" pos:column="60"/></literal></expr>;<pos:position pos:line="24" pos:column="61"/></return></block></then></if>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">interceptActive_<pos:position pos:line="27" pos:column="25"/></name> <operator pos:line="27" pos:column="26">&amp;&amp;<pos:position pos:line="27" pos:column="36"/></operator> <name><name pos:line="27" pos:column="29">listenConn<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">-&gt;<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="41">flags<pos:position pos:line="27" pos:column="46"/></name></name><operator pos:line="27" pos:column="46">&amp;<pos:position pos:line="27" pos:column="51"/></operator><name pos:line="27" pos:column="47">COMM_INTERCEPTION<pos:position pos:line="27" pos:column="64"/></name></expr>)<pos:position pos:line="27" pos:column="65"/></condition><then pos:line="27" pos:column="65"> <block pos:line="27" pos:column="66">{
        <comment type="block" pos:line="28" pos:column="9">/* NAT methods that use sock-opts to return client address */</comment>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">NetfilterInterception<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">newConn<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="44">silent<pos:position pos:line="29" pos:column="50"/></name></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="52"/></condition><then pos:line="29" pos:column="52"> <block type="pseudo"><return pos:line="29" pos:column="53">return <expr><literal type="boolean" pos:line="29" pos:column="60">true<pos:position pos:line="29" pos:column="64"/></literal></expr>;<pos:position pos:line="29" pos:column="65"/></return></block></then></if>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">IpfwInterception<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">newConn<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="39">silent<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="47"/></condition><then pos:line="30" pos:column="47"> <block type="pseudo"><return pos:line="30" pos:column="48">return <expr><literal type="boolean" pos:line="30" pos:column="55">true<pos:position pos:line="30" pos:column="59"/></literal></expr>;<pos:position pos:line="30" pos:column="60"/></return></block></then></if>

        <comment type="block" pos:line="32" pos:column="9">/* NAT methods that use ioctl to return client address AND destination address */</comment>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">PfInterception<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">newConn<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">silent<pos:position pos:line="33" pos:column="43"/></name></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="45"/></condition><then pos:line="33" pos:column="45"> <block type="pseudo"><return pos:line="33" pos:column="46">return <expr><literal type="boolean" pos:line="33" pos:column="53">true<pos:position pos:line="33" pos:column="57"/></literal></expr>;<pos:position pos:line="33" pos:column="58"/></return></block></then></if>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">IpfInterception<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">newConn<pos:position pos:line="34" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="38">silent<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="46"/></condition><then pos:line="34" pos:column="46"> <block type="pseudo"><return pos:line="34" pos:column="47">return <expr><literal type="boolean" pos:line="34" pos:column="54">true<pos:position pos:line="34" pos:column="58"/></literal></expr>;<pos:position pos:line="34" pos:column="59"/></return></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

<cpp:else pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">else<pos:position pos:line="37" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="37" pos:column="7">/* none of the transparent options configured */</comment>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">debugs<pos:position pos:line="38" pos:column="11"/></name><argument_list pos:line="38" pos:column="11">(<argument><expr><literal type="number" pos:line="38" pos:column="12">89<pos:position pos:line="38" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="16">DBG_IMPORTANT<pos:position pos:line="38" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="31">"WARNING: transparent proxying not supported"<pos:position pos:line="38" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="41" pos:column="5">return <expr><literal type="boolean" pos:line="41" pos:column="12">false<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
