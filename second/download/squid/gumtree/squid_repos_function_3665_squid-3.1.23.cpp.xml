<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3665_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">IpAddress<pos:position pos:line="1" pos:column="15"/></name><operator pos:line="1" pos:column="15">::<pos:position pos:line="1" pos:column="17"/></operator><name pos:line="1" pos:column="17">InitAddrInfo<pos:position pos:line="1" pos:column="29"/></name></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name><name pos:line="1" pos:column="30">struct<pos:position pos:line="1" pos:column="36"/></name> <name pos:line="1" pos:column="37">addrinfo<pos:position pos:line="1" pos:column="45"/></name></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier><modifier pos:line="1" pos:column="47">&amp;<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="48">ai<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list> <specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">ai<pos:position pos:line="3" pos:column="11"/></name> <operator pos:line="3" pos:column="12">==<pos:position pos:line="3" pos:column="14"/></operator> <name pos:line="3" pos:column="15">NULL<pos:position pos:line="3" pos:column="19"/></name></expr>)<pos:position pos:line="3" pos:column="20"/></condition><then pos:line="3" pos:column="20"> <block pos:line="3" pos:column="21">{
        <expr_stmt><expr><name pos:line="4" pos:column="9">ai<pos:position pos:line="4" pos:column="11"/></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <operator pos:line="4" pos:column="14">new<pos:position pos:line="4" pos:column="17"/></operator> <name pos:line="4" pos:column="18">addrinfo<pos:position pos:line="4" pos:column="26"/></name></expr>;<pos:position pos:line="4" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="5" pos:column="9">memset<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">ai<pos:position pos:line="5" pos:column="18"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="5" pos:column="19">0<pos:position pos:line="5" pos:column="20"/></literal></expr></argument>,<argument><expr><sizeof pos:line="5" pos:column="21">sizeof<argument_list pos:line="5" pos:column="27">(<argument><expr pos:line="5" pos:column="28">struct <name pos:line="5" pos:column="35">addrinfo<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="5" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="6" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="8" pos:column="5">// remove any existing data.</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">ai<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">-&gt;<pos:position pos:line="9" pos:column="16"/></operator><name pos:line="9" pos:column="13">ai_addr<pos:position pos:line="9" pos:column="20"/></name></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21"> <block type="pseudo"><expr_stmt><expr><operator pos:line="9" pos:column="22">delete<pos:position pos:line="9" pos:column="28"/></operator> <name><name pos:line="9" pos:column="29">ai<pos:position pos:line="9" pos:column="31"/></name><operator pos:line="9" pos:column="31">-&gt;<pos:position pos:line="9" pos:column="36"/></operator><name pos:line="9" pos:column="33">ai_addr<pos:position pos:line="9" pos:column="40"/></name></name></expr>;<pos:position pos:line="9" pos:column="41"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="11" pos:column="5">ai<pos:position pos:line="11" pos:column="7"/></name><operator pos:line="11" pos:column="7">-&gt;<pos:position pos:line="11" pos:column="12"/></operator><name pos:line="11" pos:column="9">ai_addr<pos:position pos:line="11" pos:column="16"/></name></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <operator pos:line="11" pos:column="19">(<pos:position pos:line="11" pos:column="20"/></operator>struct <name pos:line="11" pos:column="27">sockaddr<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">*<pos:position pos:line="11" pos:column="36"/></operator><operator pos:line="11" pos:column="36">)<pos:position pos:line="11" pos:column="37"/></operator><operator pos:line="11" pos:column="37">new<pos:position pos:line="11" pos:column="40"/></operator> <name pos:line="11" pos:column="41">sockaddr_in6<pos:position pos:line="11" pos:column="53"/></name></expr>;<pos:position pos:line="11" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">memset<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name><name pos:line="12" pos:column="12">ai<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">ai_addr<pos:position pos:line="12" pos:column="23"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="25">0<pos:position pos:line="12" pos:column="26"/></literal></expr></argument>, <argument><expr><sizeof pos:line="12" pos:column="28">sizeof<argument_list pos:line="12" pos:column="34">(<argument><expr pos:line="12" pos:column="35">struct <name pos:line="12" pos:column="42">sockaddr_in6<pos:position pos:line="12" pos:column="54"/></name></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="57"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="14" pos:column="5">ai<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">-&gt;<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="9">ai_addrlen<pos:position pos:line="14" pos:column="19"/></name></name> <operator pos:line="14" pos:column="20">=<pos:position pos:line="14" pos:column="21"/></operator> <sizeof pos:line="14" pos:column="22">sizeof<argument_list pos:line="14" pos:column="28">(<argument><expr pos:line="14" pos:column="29">struct <name pos:line="14" pos:column="36">sockaddr_in6<pos:position pos:line="14" pos:column="48"/></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></sizeof></expr>;<pos:position pos:line="14" pos:column="50"/></expr_stmt>

}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
