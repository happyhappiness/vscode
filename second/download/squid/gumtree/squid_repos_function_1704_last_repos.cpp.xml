<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1704_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">maybeReadVirginBody<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">()<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// too late to read</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><call><name><name pos:line="5" pos:column="10">Comm<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">::<pos:position pos:line="5" pos:column="16"/></operator><name pos:line="5" pos:column="16">IsConnOpen<pos:position pos:line="5" pos:column="26"/></name></name><argument_list pos:line="5" pos:column="26">(<argument><expr><name pos:line="5" pos:column="27">serverConnection<pos:position pos:line="5" pos:column="43"/></name></expr></argument>)<pos:position pos:line="5" pos:column="44"/></argument_list></call> <operator pos:line="5" pos:column="45">||<pos:position pos:line="5" pos:column="47"/></operator> <name><name pos:line="5" pos:column="48">fd_table<pos:position pos:line="5" pos:column="56"/></name><index pos:line="5" pos:column="56">[<expr><name><name pos:line="5" pos:column="57">serverConnection<pos:position pos:line="5" pos:column="73"/></name><operator pos:line="5" pos:column="73">-&gt;<pos:position pos:line="5" pos:column="78"/></operator><name pos:line="5" pos:column="75">fd<pos:position pos:line="5" pos:column="77"/></name></name></expr>]<pos:position pos:line="5" pos:column="78"/></index></name><operator pos:line="5" pos:column="78">.<pos:position pos:line="5" pos:column="79"/></operator><call><name pos:line="5" pos:column="79">closing<pos:position pos:line="5" pos:column="86"/></name><argument_list pos:line="5" pos:column="86">()<pos:position pos:line="5" pos:column="88"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="89"/></condition><then pos:line="5" pos:column="89">
        <block type="pseudo"><return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name pos:line="8" pos:column="10">maybeMakeSpaceAvailable<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><literal type="boolean" pos:line="8" pos:column="34">false<pos:position pos:line="8" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="41"/></condition><then pos:line="8" pos:column="41">
        <block type="pseudo"><return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return></block></then></if>

    <comment type="line" pos:line="11" pos:column="5">// XXX: get rid of the do_next_read flag</comment>
    <comment type="line" pos:line="12" pos:column="5">// check for the proper reasons preventing read(2)</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><name><name pos:line="13" pos:column="10">flags<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">do_next_read<pos:position pos:line="13" pos:column="28"/></name></name></expr>)<pos:position pos:line="13" pos:column="29"/></condition><then pos:line="13" pos:column="29">
        <block type="pseudo"><return pos:line="14" pos:column="9">return;<pos:position pos:line="14" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="16" pos:column="5">flags<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">.<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="11">do_next_read<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">=<pos:position pos:line="16" pos:column="25"/></operator> <literal type="boolean" pos:line="16" pos:column="26">false<pos:position pos:line="16" pos:column="31"/></literal></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>

    <comment type="line" pos:line="18" pos:column="5">// must not already be waiting for read(2) ...</comment>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">assert<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><operator pos:line="19" pos:column="12">!<pos:position pos:line="19" pos:column="13"/></operator><call><name><name pos:line="19" pos:column="13">Comm<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">::<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">MonitorsRead<pos:position pos:line="19" pos:column="31"/></name></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name><name pos:line="19" pos:column="32">serverConnection<pos:position pos:line="19" pos:column="48"/></name><operator pos:line="19" pos:column="48">-&gt;<pos:position pos:line="19" pos:column="53"/></operator><name pos:line="19" pos:column="50">fd<pos:position pos:line="19" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="55"/></expr_stmt>

    <comment type="line" pos:line="21" pos:column="5">// wait for read(2) to be possible.</comment>
    <typedef pos:line="22" pos:column="5">typedef <type><name><name pos:line="22" pos:column="13">CommCbMemFunT<pos:position pos:line="22" pos:column="26"/></name><argument_list type="generic" pos:line="22" pos:column="26">&lt;<argument><expr><name pos:line="22" pos:column="27">HttpStateData<pos:position pos:line="22" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="42">CommIoCbParams<pos:position pos:line="22" pos:column="56"/></name></expr></argument>&gt;<pos:position pos:line="22" pos:column="60"/></argument_list></name></type> <name pos:line="22" pos:column="58">Dialer<pos:position pos:line="22" pos:column="64"/></name>;<pos:position pos:line="22" pos:column="65"/></typedef>
    <decl_stmt><decl><type><name><name pos:line="23" pos:column="5">AsyncCall<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">::<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="16">Pointer<pos:position pos:line="23" pos:column="23"/></name></name></type> <name pos:line="23" pos:column="24">call<pos:position pos:line="23" pos:column="28"/></name> <init pos:line="23" pos:column="29">= <expr><call><name pos:line="23" pos:column="31">JobCallback<pos:position pos:line="23" pos:column="42"/></name><argument_list pos:line="23" pos:column="42">(<argument><expr><literal type="number" pos:line="23" pos:column="43">11<pos:position pos:line="23" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="47">5<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="50">Dialer<pos:position pos:line="23" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="58">this<pos:position pos:line="23" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="64">HttpStateData<pos:position pos:line="23" pos:column="77"/></name><operator pos:line="23" pos:column="77">::<pos:position pos:line="23" pos:column="79"/></operator><name pos:line="23" pos:column="79">readReply<pos:position pos:line="23" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="90"/></decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="24" pos:column="5">Comm<pos:position pos:line="24" pos:column="9"/></name><operator pos:line="24" pos:column="9">::<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="11">Read<pos:position pos:line="24" pos:column="15"/></name></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">serverConnection<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">call<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
