<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_function_1500.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">MemObject<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">stat<pos:position pos:line="2" pos:column="16"/></name></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">MemBuf<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type> <name pos:line="2" pos:column="26">mb<pos:position pos:line="2" pos:column="28"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list> <specifier pos:line="2" pos:column="30">const<pos:position pos:line="2" pos:column="35"/></specifier>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name><name pos:line="4" pos:column="5">mb<pos:position pos:line="4" pos:column="7"/></name><operator pos:line="4" pos:column="7">-&gt;<pos:position pos:line="4" pos:column="12"/></operator><name pos:line="4" pos:column="9">Printf<pos:position pos:line="4" pos:column="15"/></name></name><argument_list pos:line="4" pos:column="15">(<argument><expr><literal type="string" pos:line="4" pos:column="16">"\t"<pos:position pos:line="4" pos:column="20"/></literal> <name pos:line="4" pos:column="21">SQUIDSBUFPH<pos:position pos:line="4" pos:column="32"/></name> <literal type="string" pos:line="4" pos:column="33">" %s\n"<pos:position pos:line="4" pos:column="40"/></literal></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="42">SQUIDSBUFPRINT<pos:position pos:line="4" pos:column="56"/></name><argument_list pos:line="4" pos:column="56">(<argument><expr><call><name><name pos:line="4" pos:column="57">method<pos:position pos:line="4" pos:column="63"/></name><operator pos:line="4" pos:column="63">.<pos:position pos:line="4" pos:column="64"/></operator><name pos:line="4" pos:column="64">image<pos:position pos:line="4" pos:column="69"/></name></name><argument_list pos:line="4" pos:column="69">()<pos:position pos:line="4" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="74">logUri<pos:position pos:line="4" pos:column="80"/></name><argument_list pos:line="4" pos:column="80">()<pos:position pos:line="4" pos:column="82"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="84"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><call><name><name pos:line="5" pos:column="10">vary_headers<pos:position pos:line="5" pos:column="22"/></name><operator pos:line="5" pos:column="22">.<pos:position pos:line="5" pos:column="23"/></operator><name pos:line="5" pos:column="23">isEmpty<pos:position pos:line="5" pos:column="30"/></name></name><argument_list pos:line="5" pos:column="30">()<pos:position pos:line="5" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="33"/></condition><then pos:line="5" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="6" pos:column="9">mb<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">Printf<pos:position pos:line="6" pos:column="19"/></name></name><argument_list pos:line="6" pos:column="19">(<argument><expr><literal type="string" pos:line="6" pos:column="20">"\tvary_headers: "<pos:position pos:line="6" pos:column="38"/></literal> <name pos:line="6" pos:column="39">SQUIDSBUFPH<pos:position pos:line="6" pos:column="50"/></name> <literal type="string" pos:line="6" pos:column="51">"\n"<pos:position pos:line="6" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="57">SQUIDSBUFPRINT<pos:position pos:line="6" pos:column="71"/></name><argument_list pos:line="6" pos:column="71">(<argument><expr><name pos:line="6" pos:column="72">vary_headers<pos:position pos:line="6" pos:column="84"/></name></expr></argument>)<pos:position pos:line="6" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="87"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="7" pos:column="5">mb<pos:position pos:line="7" pos:column="7"/></name><operator pos:line="7" pos:column="7">-&gt;<pos:position pos:line="7" pos:column="12"/></operator><name pos:line="7" pos:column="9">Printf<pos:position pos:line="7" pos:column="15"/></name></name><argument_list pos:line="7" pos:column="15">(<argument><expr><literal type="string" pos:line="7" pos:column="16">"\tinmem_lo: %"<pos:position pos:line="7" pos:column="31"/></literal> <name pos:line="7" pos:column="32">PRId64<pos:position pos:line="7" pos:column="38"/></name> <literal type="string" pos:line="7" pos:column="39">"\n"<pos:position pos:line="7" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="45">inmem_lo<pos:position pos:line="7" pos:column="53"/></name></expr></argument>)<pos:position pos:line="7" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="8" pos:column="5">mb<pos:position pos:line="8" pos:column="7"/></name><operator pos:line="8" pos:column="7">-&gt;<pos:position pos:line="8" pos:column="12"/></operator><name pos:line="8" pos:column="9">Printf<pos:position pos:line="8" pos:column="15"/></name></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="string" pos:line="8" pos:column="16">"\tinmem_hi: %"<pos:position pos:line="8" pos:column="31"/></literal> <name pos:line="8" pos:column="32">PRId64<pos:position pos:line="8" pos:column="38"/></name> <literal type="string" pos:line="8" pos:column="39">"\n"<pos:position pos:line="8" pos:column="43"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="8" pos:column="45">data_hdr<pos:position pos:line="8" pos:column="53"/></name><operator pos:line="8" pos:column="53">.<pos:position pos:line="8" pos:column="54"/></operator><name pos:line="8" pos:column="54">endOffset<pos:position pos:line="8" pos:column="63"/></name></name><argument_list pos:line="8" pos:column="63">()<pos:position pos:line="8" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="9" pos:column="5">mb<pos:position pos:line="9" pos:column="7"/></name><operator pos:line="9" pos:column="7">-&gt;<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="9">Printf<pos:position pos:line="9" pos:column="15"/></name></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="string" pos:line="9" pos:column="16">"\tswapout: %"<pos:position pos:line="9" pos:column="30"/></literal> <name pos:line="9" pos:column="31">PRId64<pos:position pos:line="9" pos:column="37"/></name> <literal type="string" pos:line="9" pos:column="38">" bytes queued\n"<pos:position pos:line="9" pos:column="55"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="10" pos:column="16">swapout<pos:position pos:line="10" pos:column="23"/></name><operator pos:line="10" pos:column="23">.<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="24">queue_offset<pos:position pos:line="10" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="38"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name><name pos:line="12" pos:column="9">swapout<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">sio<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">.<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">getRaw<pos:position pos:line="12" pos:column="27"/></name></name><argument_list pos:line="12" pos:column="27">()<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="13" pos:column="9">mb<pos:position pos:line="13" pos:column="11"/></name><operator pos:line="13" pos:column="11">-&gt;<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="13">Printf<pos:position pos:line="13" pos:column="19"/></name></name><argument_list pos:line="13" pos:column="19">(<argument><expr><literal type="string" pos:line="13" pos:column="20">"\tswapout: %"<pos:position pos:line="13" pos:column="34"/></literal> <name pos:line="13" pos:column="35">PRId64<pos:position pos:line="13" pos:column="41"/></name> <literal type="string" pos:line="13" pos:column="42">" bytes written\n"<pos:position pos:line="13" pos:column="60"/></literal></expr></argument>,
                   <argument><expr><operator pos:line="14" pos:column="20">(<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="21">int64_t<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">)<pos:position pos:line="14" pos:column="29"/></operator> <call><name><name pos:line="14" pos:column="30">swapout<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">.<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="38">sio<pos:position pos:line="14" pos:column="41"/></name><operator pos:line="14" pos:column="41">-&gt;<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="43">offset<pos:position pos:line="14" pos:column="49"/></name></name><argument_list pos:line="14" pos:column="49">()<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">xitTable<pos:position pos:line="16" pos:column="17"/></name><operator pos:line="16" pos:column="17">.<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="18">index<pos:position pos:line="16" pos:column="23"/></name></name> <operator pos:line="16" pos:column="24">&gt;=<pos:position pos:line="16" pos:column="29"/></operator> <literal type="number" pos:line="16" pos:column="27">0<pos:position pos:line="16" pos:column="28"/></literal></expr>)<pos:position pos:line="16" pos:column="29"/></condition><then pos:line="16" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="17" pos:column="9">mb<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">Printf<pos:position pos:line="17" pos:column="19"/></name></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="string" pos:line="17" pos:column="20">"\ttransient index: %d state: %d\n"<pos:position pos:line="17" pos:column="55"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="18" pos:column="20">xitTable<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">.<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="29">index<pos:position pos:line="18" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="36">xitTable<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">.<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="45">io<pos:position pos:line="18" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="49"/></expr_stmt></block></then></if>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">memCache<pos:position pos:line="19" pos:column="17"/></name><operator pos:line="19" pos:column="17">.<pos:position pos:line="19" pos:column="18"/></operator><name pos:line="19" pos:column="18">index<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">&gt;=<pos:position pos:line="19" pos:column="29"/></operator> <literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr>)<pos:position pos:line="19" pos:column="29"/></condition><then pos:line="19" pos:column="29">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="20" pos:column="9">mb<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">-&gt;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="13">Printf<pos:position pos:line="20" pos:column="19"/></name></name><argument_list pos:line="20" pos:column="19">(<argument><expr><literal type="string" pos:line="20" pos:column="20">"\tmem-cache index: %d state: %d offset: %"<pos:position pos:line="20" pos:column="63"/></literal> <name pos:line="20" pos:column="64">PRId64<pos:position pos:line="20" pos:column="70"/></name> <literal type="string" pos:line="20" pos:column="71">"\n"<pos:position pos:line="20" pos:column="75"/></literal></expr></argument>,
                   <argument><expr><name><name pos:line="21" pos:column="20">memCache<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">.<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">index<pos:position pos:line="21" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="36">memCache<pos:position pos:line="21" pos:column="44"/></name><operator pos:line="21" pos:column="44">.<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="45">io<pos:position pos:line="21" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="49">memCache<pos:position pos:line="21" pos:column="57"/></name><operator pos:line="21" pos:column="57">.<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="58">offset<pos:position pos:line="21" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="66"/></expr_stmt></block></then></if>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">object_sz<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">&gt;=<pos:position pos:line="22" pos:column="24"/></operator> <literal type="number" pos:line="22" pos:column="22">0<pos:position pos:line="22" pos:column="23"/></literal></expr>)<pos:position pos:line="22" pos:column="24"/></condition><then pos:line="22" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="23" pos:column="9">mb<pos:position pos:line="23" pos:column="11"/></name><operator pos:line="23" pos:column="11">-&gt;<pos:position pos:line="23" pos:column="16"/></operator><name pos:line="23" pos:column="13">Printf<pos:position pos:line="23" pos:column="19"/></name></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="string" pos:line="23" pos:column="20">"\tobject_sz: %"<pos:position pos:line="23" pos:column="36"/></literal> <name pos:line="23" pos:column="37">PRId64<pos:position pos:line="23" pos:column="43"/></name> <literal type="string" pos:line="23" pos:column="44">"\n"<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="50">object_sz<pos:position pos:line="23" pos:column="59"/></name></expr></argument>)<pos:position pos:line="23" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="61"/></expr_stmt></block></then></if>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">smpCollapsed<pos:position pos:line="24" pos:column="21"/></name></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="25" pos:column="9">mb<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">Printf<pos:position pos:line="25" pos:column="19"/></name></name><argument_list pos:line="25" pos:column="19">(<argument><expr><literal type="string" pos:line="25" pos:column="20">"\tsmp-collapsed\n"<pos:position pos:line="25" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="41"/></expr_stmt></block></then></if>

    <decl_stmt><decl><type><name pos:line="27" pos:column="5">StoreClientStats<pos:position pos:line="27" pos:column="21"/></name></type> <name pos:line="27" pos:column="22">statsVisitor<pos:position pos:line="27" pos:column="34"/></name><argument_list pos:line="27" pos:column="34">(<argument><expr><name pos:line="27" pos:column="35">mb<pos:position pos:line="27" pos:column="37"/></name></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></decl>;<pos:position pos:line="27" pos:column="39"/></decl_stmt>

    <expr_stmt><expr><call><name><name pos:line="29" pos:column="5">for_each<pos:position pos:line="29" pos:column="13"/></name><argument_list type="generic" pos:line="29" pos:column="13">&lt;<argument><expr><name pos:line="29" pos:column="14">StoreClientStats<pos:position pos:line="29" pos:column="30"/></name></expr></argument>&gt;<pos:position pos:line="29" pos:column="34"/></argument_list></name><argument_list pos:line="29" pos:column="31">(<argument><expr><name pos:line="29" pos:column="32">clients<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="41">statsVisitor<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
