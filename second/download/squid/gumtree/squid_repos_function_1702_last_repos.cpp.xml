<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1702_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">HttpStateData<pos:position pos:line="2" pos:column="14"/></name><operator pos:line="2" pos:column="14">::<pos:position pos:line="2" pos:column="16"/></operator><name pos:line="2" pos:column="16">processReplyBody<pos:position pos:line="2" pos:column="32"/></name></name><parameter_list pos:line="2" pos:column="32">()<pos:position pos:line="2" pos:column="34"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name><name pos:line="4" pos:column="10">flags<pos:position pos:line="4" pos:column="15"/></name><operator pos:line="4" pos:column="15">.<pos:position pos:line="4" pos:column="16"/></operator><name pos:line="4" pos:column="16">headers_parsed<pos:position pos:line="4" pos:column="30"/></name></name></expr>)<pos:position pos:line="4" pos:column="31"/></condition><then pos:line="4" pos:column="31"> <block pos:line="4" pos:column="32">{
        <expr_stmt><expr><name><name pos:line="5" pos:column="9">flags<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">.<pos:position pos:line="5" pos:column="15"/></operator><name pos:line="5" pos:column="15">do_next_read<pos:position pos:line="5" pos:column="27"/></name></name> <operator pos:line="5" pos:column="28">=<pos:position pos:line="5" pos:column="29"/></operator> <literal type="boolean" pos:line="5" pos:column="30">true<pos:position pos:line="5" pos:column="34"/></literal></expr>;<pos:position pos:line="5" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">maybeReadVirginBody<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">()<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="31"/></expr_stmt>
        <return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">USE_ADAPTATION<pos:position pos:line="10" pos:column="19"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">11<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="11" pos:column="15">5<pos:position pos:line="11" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="18">HERE<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">&lt;&lt;<pos:position pos:line="11" pos:column="31"/></operator> <literal type="string" pos:line="11" pos:column="26">"adaptationAccessCheckPending="<pos:position pos:line="11" pos:column="57"/></literal> <operator pos:line="11" pos:column="58">&lt;&lt;<pos:position pos:line="11" pos:column="66"/></operator> <name pos:line="11" pos:column="61">adaptationAccessCheckPending<pos:position pos:line="11" pos:column="89"/></name></expr></argument>)<pos:position pos:line="11" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="91"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">adaptationAccessCheckPending<pos:position pos:line="12" pos:column="37"/></name></expr>)<pos:position pos:line="12" pos:column="38"/></condition><then pos:line="12" pos:column="38">
        <block type="pseudo"><return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return></block></then></if>

<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="17" pos:column="5">/*
     * At this point the reply headers have been parsed and consumed.
     * That means header content has been removed from readBuf and
     * it contains only body data.
     */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name><name pos:line="22" pos:column="9">entry<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">-&gt;<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="16">isAccepting<pos:position pos:line="22" pos:column="27"/></name></name><argument_list pos:line="22" pos:column="27">()<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30"> <block pos:line="22" pos:column="31">{
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name><name pos:line="23" pos:column="13">flags<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">.<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">chunked<pos:position pos:line="23" pos:column="26"/></name></name></expr>)<pos:position pos:line="23" pos:column="27"/></condition><then pos:line="23" pos:column="27"> <block pos:line="23" pos:column="28">{
            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><operator pos:line="24" pos:column="17">!<pos:position pos:line="24" pos:column="18"/></operator><call><name pos:line="24" pos:column="18">decodeAndWriteReplyBody<pos:position pos:line="24" pos:column="41"/></name><argument_list pos:line="24" pos:column="41">()<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="44"/></condition><then pos:line="24" pos:column="44"> <block pos:line="24" pos:column="45">{
                <expr_stmt><expr><name><name pos:line="25" pos:column="17">flags<pos:position pos:line="25" pos:column="22"/></name><operator pos:line="25" pos:column="22">.<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="23">do_next_read<pos:position pos:line="25" pos:column="35"/></name></name> <operator pos:line="25" pos:column="36">=<pos:position pos:line="25" pos:column="37"/></operator> <literal type="boolean" pos:line="25" pos:column="38">false<pos:position pos:line="25" pos:column="43"/></literal></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="26" pos:column="17">serverComplete<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">()<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
                <return pos:line="27" pos:column="17">return;<pos:position pos:line="27" pos:column="24"/></return>
            }<pos:position pos:line="28" pos:column="14"/></block></then></if>
        }<pos:position pos:line="29" pos:column="10"/></block></then> <else pos:line="29" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="30" pos:column="13">writeReplyBody<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">()<pos:position pos:line="30" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="30"/></expr_stmt></block></else></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="33" pos:column="5">// storing/sending methods like earlier adaptOrFinalizeReply() or</comment>
    <comment type="line" pos:line="34" pos:column="5">// above writeReplyBody() may release/abort the store entry.</comment>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">EBIT_TEST<pos:position pos:line="35" pos:column="18"/></name><argument_list pos:line="35" pos:column="18">(<argument><expr><name><name pos:line="35" pos:column="19">entry<pos:position pos:line="35" pos:column="24"/></name><operator pos:line="35" pos:column="24">-&gt;<pos:position pos:line="35" pos:column="29"/></operator><name pos:line="35" pos:column="26">flags<pos:position pos:line="35" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="33">ENTRY_ABORTED<pos:position pos:line="35" pos:column="46"/></name></expr></argument>)<pos:position pos:line="35" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="48"/></condition><then pos:line="35" pos:column="48"> <block pos:line="35" pos:column="49">{
        <comment type="line" pos:line="36" pos:column="9">// TODO: In some cases (e.g., 304), we should keep persistent conn open.</comment>
        <comment type="line" pos:line="37" pos:column="9">// Detect end-of-reply (and, hence, pool our idle pconn) earlier (ASAP).</comment>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">abortTransaction<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><literal type="string" pos:line="38" pos:column="26">"store entry aborted while storing reply"<pos:position pos:line="38" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="69"/></expr_stmt>
        <return pos:line="39" pos:column="9">return;<pos:position pos:line="39" pos:column="16"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then> <else pos:line="40" pos:column="7">else
        <block type="pseudo"><switch pos:line="41" pos:column="9">switch <condition pos:line="41" pos:column="16">(<expr><call><name pos:line="41" pos:column="17">persistentConnStatus<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">()<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="40"/></condition> <block pos:line="41" pos:column="41">{
        <case pos:line="42" pos:column="9">case <expr><name pos:line="42" pos:column="14">INCOMPLETE_MSG<pos:position pos:line="42" pos:column="28"/></name></expr>:<pos:position pos:line="42" pos:column="29"/></case> <block pos:line="42" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">debugs<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><literal type="number" pos:line="43" pos:column="20">11<pos:position pos:line="43" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="24">5<pos:position pos:line="43" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="27">"processReplyBody: INCOMPLETE_MSG from "<pos:position pos:line="43" pos:column="67"/></literal> <operator pos:line="43" pos:column="68">&lt;&lt;<pos:position pos:line="43" pos:column="76"/></operator> <name pos:line="43" pos:column="71">serverConnection<pos:position pos:line="43" pos:column="87"/></name></expr></argument>)<pos:position pos:line="43" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="89"/></expr_stmt>
            <comment type="block" pos:line="44" pos:column="13">/* Wait for more data or EOF condition */</comment>
            <decl_stmt><decl><type><name><name pos:line="45" pos:column="13">AsyncCall<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">::<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="24">Pointer<pos:position pos:line="45" pos:column="31"/></name></name></type> <name pos:line="45" pos:column="32">nil<pos:position pos:line="45" pos:column="35"/></name></decl>;<pos:position pos:line="45" pos:column="36"/></decl_stmt>
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><name><name pos:line="46" pos:column="17">flags<pos:position pos:line="46" pos:column="22"/></name><operator pos:line="46" pos:column="22">.<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="23">keepalive_broken<pos:position pos:line="46" pos:column="39"/></name></name></expr>)<pos:position pos:line="46" pos:column="40"/></condition><then pos:line="46" pos:column="40"> <block pos:line="46" pos:column="41">{
                <expr_stmt><expr><call><name pos:line="47" pos:column="17">commSetConnTimeout<pos:position pos:line="47" pos:column="35"/></name><argument_list pos:line="47" pos:column="35">(<argument><expr><name pos:line="47" pos:column="36">serverConnection<pos:position pos:line="47" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="54">10<pos:position pos:line="47" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="58">nil<pos:position pos:line="47" pos:column="61"/></name></expr></argument>)<pos:position pos:line="47" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="63"/></expr_stmt>
            }<pos:position pos:line="48" pos:column="14"/></block></then> <else pos:line="48" pos:column="15">else <block pos:line="48" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="49" pos:column="17">commSetConnTimeout<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">serverConnection<pos:position pos:line="49" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="54">Config<pos:position pos:line="49" pos:column="60"/></name><operator pos:line="49" pos:column="60">.<pos:position pos:line="49" pos:column="61"/></operator><name pos:line="49" pos:column="61">Timeout<pos:position pos:line="49" pos:column="68"/></name><operator pos:line="49" pos:column="68">.<pos:position pos:line="49" pos:column="69"/></operator><name pos:line="49" pos:column="69">read<pos:position pos:line="49" pos:column="73"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="75">nil<pos:position pos:line="49" pos:column="78"/></name></expr></argument>)<pos:position pos:line="49" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="80"/></expr_stmt>
            }<pos:position pos:line="50" pos:column="14"/></block></else></if>

            <expr_stmt><expr><name><name pos:line="52" pos:column="13">flags<pos:position pos:line="52" pos:column="18"/></name><operator pos:line="52" pos:column="18">.<pos:position pos:line="52" pos:column="19"/></operator><name pos:line="52" pos:column="19">do_next_read<pos:position pos:line="52" pos:column="31"/></name></name> <operator pos:line="52" pos:column="32">=<pos:position pos:line="52" pos:column="33"/></operator> <literal type="boolean" pos:line="52" pos:column="34">true<pos:position pos:line="52" pos:column="38"/></literal></expr>;<pos:position pos:line="52" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="53" pos:column="10"/></block>
        <break pos:line="54" pos:column="9">break;<pos:position pos:line="54" pos:column="15"/></break>

        <case pos:line="56" pos:column="9">case <expr><name pos:line="56" pos:column="14">COMPLETE_PERSISTENT_MSG<pos:position pos:line="56" pos:column="37"/></name></expr>:<pos:position pos:line="56" pos:column="38"/></case> <block pos:line="56" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">debugs<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><literal type="number" pos:line="57" pos:column="20">11<pos:position pos:line="57" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="24">5<pos:position pos:line="57" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="27">"processReplyBody: COMPLETE_PERSISTENT_MSG from "<pos:position pos:line="57" pos:column="76"/></literal> <operator pos:line="57" pos:column="77">&lt;&lt;<pos:position pos:line="57" pos:column="85"/></operator> <name pos:line="57" pos:column="80">serverConnection<pos:position pos:line="57" pos:column="96"/></name></expr></argument>)<pos:position pos:line="57" pos:column="97"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="98"/></expr_stmt>

            <comment type="line" pos:line="59" pos:column="13">// TODO: Remove serverConnectionSaved but preserve exception safety.</comment>

            <expr_stmt><expr><call><name pos:line="61" pos:column="13">commUnsetConnTimeout<pos:position pos:line="61" pos:column="33"/></name><argument_list pos:line="61" pos:column="33">(<argument><expr><name pos:line="61" pos:column="34">serverConnection<pos:position pos:line="61" pos:column="50"/></name></expr></argument>)<pos:position pos:line="61" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="62" pos:column="13">flags<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">.<pos:position pos:line="62" pos:column="19"/></operator><name pos:line="62" pos:column="19">do_next_read<pos:position pos:line="62" pos:column="31"/></name></name> <operator pos:line="62" pos:column="32">=<pos:position pos:line="62" pos:column="33"/></operator> <literal type="boolean" pos:line="62" pos:column="34">false<pos:position pos:line="62" pos:column="39"/></literal></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="64" pos:column="13">comm_remove_close_handler<pos:position pos:line="64" pos:column="38"/></name><argument_list pos:line="64" pos:column="38">(<argument><expr><name><name pos:line="64" pos:column="39">serverConnection<pos:position pos:line="64" pos:column="55"/></name><operator pos:line="64" pos:column="55">-&gt;<pos:position pos:line="64" pos:column="60"/></operator><name pos:line="64" pos:column="57">fd<pos:position pos:line="64" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="61">closeHandler<pos:position pos:line="64" pos:column="73"/></name></expr></argument>)<pos:position pos:line="64" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="75"/></expr_stmt>
            <expr_stmt><expr><name pos:line="65" pos:column="13">closeHandler<pos:position pos:line="65" pos:column="25"/></name> <operator pos:line="65" pos:column="26">=<pos:position pos:line="65" pos:column="27"/></operator> <name pos:line="65" pos:column="28">NULL<pos:position pos:line="65" pos:column="32"/></name></expr>;<pos:position pos:line="65" pos:column="33"/></expr_stmt>

            <decl_stmt><decl><type><name><name pos:line="67" pos:column="13">Ip<pos:position pos:line="67" pos:column="15"/></name><operator pos:line="67" pos:column="15">::<pos:position pos:line="67" pos:column="17"/></operator><name pos:line="67" pos:column="17">Address<pos:position pos:line="67" pos:column="24"/></name></name></type> <name pos:line="67" pos:column="25">client_addr<pos:position pos:line="67" pos:column="36"/></name></decl>;<pos:position pos:line="67" pos:column="37"/></decl_stmt> <comment type="line" pos:line="67" pos:column="38">// XXX: Remove as unused. Why was it added?</comment>
            <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><name><name pos:line="68" pos:column="17">request<pos:position pos:line="68" pos:column="24"/></name><operator pos:line="68" pos:column="24">-&gt;<pos:position pos:line="68" pos:column="29"/></operator><name pos:line="68" pos:column="26">flags<pos:position pos:line="68" pos:column="31"/></name><operator pos:line="68" pos:column="31">.<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="32">spoofClientIp<pos:position pos:line="68" pos:column="45"/></name></name></expr>)<pos:position pos:line="68" pos:column="46"/></condition><then pos:line="68" pos:column="46">
                <block type="pseudo"><expr_stmt><expr><name pos:line="69" pos:column="17">client_addr<pos:position pos:line="69" pos:column="28"/></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <name><name pos:line="69" pos:column="31">request<pos:position pos:line="69" pos:column="38"/></name><operator pos:line="69" pos:column="38">-&gt;<pos:position pos:line="69" pos:column="43"/></operator><name pos:line="69" pos:column="40">client_addr<pos:position pos:line="69" pos:column="51"/></name></name></expr>;<pos:position pos:line="69" pos:column="52"/></expr_stmt></block></then></if>

            <decl_stmt><decl><type><name pos:line="71" pos:column="13">auto<pos:position pos:line="71" pos:column="17"/></name></type> <name pos:line="71" pos:column="18">serverConnectionSaved<pos:position pos:line="71" pos:column="39"/></name> <init pos:line="71" pos:column="40">= <expr><name pos:line="71" pos:column="42">serverConnection<pos:position pos:line="71" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="71" pos:column="59"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">fwd<pos:position pos:line="72" pos:column="16"/></name><operator pos:line="72" pos:column="16">-&gt;<pos:position pos:line="72" pos:column="21"/></operator><name pos:line="72" pos:column="18">unregister<pos:position pos:line="72" pos:column="28"/></name></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">serverConnection<pos:position pos:line="72" pos:column="45"/></name></expr></argument>)<pos:position pos:line="72" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name pos:line="73" pos:column="13">serverConnection<pos:position pos:line="73" pos:column="29"/></name> <operator pos:line="73" pos:column="30">=<pos:position pos:line="73" pos:column="31"/></operator> <literal type="null" pos:line="73" pos:column="32">nullptr<pos:position pos:line="73" pos:column="39"/></literal></expr>;<pos:position pos:line="73" pos:column="40"/></expr_stmt>

            <decl_stmt><decl><type><name pos:line="75" pos:column="13">bool<pos:position pos:line="75" pos:column="17"/></name></type> <name pos:line="75" pos:column="18">ispinned<pos:position pos:line="75" pos:column="26"/></name> <init pos:line="75" pos:column="27">= <expr><literal type="boolean" pos:line="75" pos:column="29">false<pos:position pos:line="75" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="75" pos:column="35"/></decl_stmt> <comment type="line" pos:line="75" pos:column="36">// TODO: Rename to isOrShouldBePinned</comment>
            <if pos:line="76" pos:column="13">if <condition pos:line="76" pos:column="16">(<expr><name><name pos:line="76" pos:column="17">request<pos:position pos:line="76" pos:column="24"/></name><operator pos:line="76" pos:column="24">-&gt;<pos:position pos:line="76" pos:column="29"/></operator><name pos:line="76" pos:column="26">flags<pos:position pos:line="76" pos:column="31"/></name><operator pos:line="76" pos:column="31">.<pos:position pos:line="76" pos:column="32"/></operator><name pos:line="76" pos:column="32">pinned<pos:position pos:line="76" pos:column="38"/></name></name></expr>)<pos:position pos:line="76" pos:column="39"/></condition><then pos:line="76" pos:column="39"> <block pos:line="76" pos:column="40">{
                <expr_stmt><expr><name pos:line="77" pos:column="17">ispinned<pos:position pos:line="77" pos:column="25"/></name> <operator pos:line="77" pos:column="26">=<pos:position pos:line="77" pos:column="27"/></operator> <literal type="boolean" pos:line="77" pos:column="28">true<pos:position pos:line="77" pos:column="32"/></literal></expr>;<pos:position pos:line="77" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="78" pos:column="14"/></block></then> <elseif pos:line="78" pos:column="15">else <if pos:line="78" pos:column="20">if <condition pos:line="78" pos:column="23">(<expr><name><name pos:line="78" pos:column="24">request<pos:position pos:line="78" pos:column="31"/></name><operator pos:line="78" pos:column="31">-&gt;<pos:position pos:line="78" pos:column="36"/></operator><name pos:line="78" pos:column="33">flags<pos:position pos:line="78" pos:column="38"/></name><operator pos:line="78" pos:column="38">.<pos:position pos:line="78" pos:column="39"/></operator><name pos:line="78" pos:column="39">connectionAuth<pos:position pos:line="78" pos:column="53"/></name></name> <operator pos:line="78" pos:column="54">&amp;&amp;<pos:position pos:line="78" pos:column="64"/></operator> <name><name pos:line="78" pos:column="57">request<pos:position pos:line="78" pos:column="64"/></name><operator pos:line="78" pos:column="64">-&gt;<pos:position pos:line="78" pos:column="69"/></operator><name pos:line="78" pos:column="66">flags<pos:position pos:line="78" pos:column="71"/></name><operator pos:line="78" pos:column="71">.<pos:position pos:line="78" pos:column="72"/></operator><name pos:line="78" pos:column="72">authSent<pos:position pos:line="78" pos:column="80"/></name></name></expr>)<pos:position pos:line="78" pos:column="81"/></condition><then pos:line="78" pos:column="81"> <block pos:line="78" pos:column="82">{
                <expr_stmt><expr><name pos:line="79" pos:column="17">ispinned<pos:position pos:line="79" pos:column="25"/></name> <operator pos:line="79" pos:column="26">=<pos:position pos:line="79" pos:column="27"/></operator> <literal type="boolean" pos:line="79" pos:column="28">true<pos:position pos:line="79" pos:column="32"/></literal></expr>;<pos:position pos:line="79" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="80" pos:column="14"/></block></then></if></elseif></if>

            <if pos:line="82" pos:column="13">if <condition pos:line="82" pos:column="16">(<expr><name pos:line="82" pos:column="17">ispinned<pos:position pos:line="82" pos:column="25"/></name></expr>)<pos:position pos:line="82" pos:column="26"/></condition><then pos:line="82" pos:column="26"> <block pos:line="82" pos:column="27">{
                <if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><call><name><name pos:line="83" pos:column="21">request<pos:position pos:line="83" pos:column="28"/></name><operator pos:line="83" pos:column="28">-&gt;<pos:position pos:line="83" pos:column="33"/></operator><name pos:line="83" pos:column="30">clientConnectionManager<pos:position pos:line="83" pos:column="53"/></name><operator pos:line="83" pos:column="53">.<pos:position pos:line="83" pos:column="54"/></operator><name pos:line="83" pos:column="54">valid<pos:position pos:line="83" pos:column="59"/></name></name><argument_list pos:line="83" pos:column="59">()<pos:position pos:line="83" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="62"/></condition><then pos:line="83" pos:column="62"> <block pos:line="83" pos:column="63">{
                    <expr_stmt><expr><call><name pos:line="84" pos:column="21">CallJobHere1<pos:position pos:line="84" pos:column="33"/></name><argument_list pos:line="84" pos:column="33">(<argument><expr><literal type="number" pos:line="84" pos:column="34">11<pos:position pos:line="84" pos:column="36"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="38">4<pos:position pos:line="84" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="41">request<pos:position pos:line="84" pos:column="48"/></name><operator pos:line="84" pos:column="48">-&gt;<pos:position pos:line="84" pos:column="53"/></operator><name pos:line="84" pos:column="50">clientConnectionManager<pos:position pos:line="84" pos:column="73"/></name></name></expr></argument>,
                                 <argument><expr><name pos:line="85" pos:column="34">ConnStateData<pos:position pos:line="85" pos:column="47"/></name></expr></argument>,
                                 <argument><expr><name pos:line="86" pos:column="34">notePinnedConnectionBecameIdle<pos:position pos:line="86" pos:column="64"/></name></expr></argument>,
                                 <argument><expr><call><name><name pos:line="87" pos:column="34">ConnStateData<pos:position pos:line="87" pos:column="47"/></name><operator pos:line="87" pos:column="47">::<pos:position pos:line="87" pos:column="49"/></operator><name pos:line="87" pos:column="49">PinnedIdleContext<pos:position pos:line="87" pos:column="66"/></name></name><argument_list pos:line="87" pos:column="66">(<argument><expr><name pos:line="87" pos:column="67">serverConnectionSaved<pos:position pos:line="87" pos:column="88"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="90">request<pos:position pos:line="87" pos:column="97"/></name></expr></argument>)<pos:position pos:line="87" pos:column="98"/></argument_list></call></expr></argument>)<pos:position pos:line="87" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="100"/></expr_stmt>
                }<pos:position pos:line="88" pos:column="18"/></block></then> <else pos:line="88" pos:column="19">else <block pos:line="88" pos:column="24">{
                    <comment type="line" pos:line="89" pos:column="21">// must not pool/share ispinned connections, even orphaned ones</comment>
                    <expr_stmt><expr><call><name><name pos:line="90" pos:column="21">serverConnectionSaved<pos:position pos:line="90" pos:column="42"/></name><operator pos:line="90" pos:column="42">-&gt;<pos:position pos:line="90" pos:column="47"/></operator><name pos:line="90" pos:column="44">close<pos:position pos:line="90" pos:column="49"/></name></name><argument_list pos:line="90" pos:column="49">()<pos:position pos:line="90" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="52"/></expr_stmt>
                }<pos:position pos:line="91" pos:column="18"/></block></else></if>
            }<pos:position pos:line="92" pos:column="14"/></block></then> <else pos:line="92" pos:column="15">else <block pos:line="92" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="93" pos:column="17">fwd<pos:position pos:line="93" pos:column="20"/></name><operator pos:line="93" pos:column="20">-&gt;<pos:position pos:line="93" pos:column="25"/></operator><name pos:line="93" pos:column="22">pconnPush<pos:position pos:line="93" pos:column="31"/></name></name><argument_list pos:line="93" pos:column="31">(<argument><expr><name pos:line="93" pos:column="32">serverConnectionSaved<pos:position pos:line="93" pos:column="53"/></name></expr></argument>, <argument><expr><call><name><name pos:line="93" pos:column="55">request<pos:position pos:line="93" pos:column="62"/></name><operator pos:line="93" pos:column="62">-&gt;<pos:position pos:line="93" pos:column="67"/></operator><name pos:line="93" pos:column="64">url<pos:position pos:line="93" pos:column="67"/></name><operator pos:line="93" pos:column="67">.<pos:position pos:line="93" pos:column="68"/></operator><name pos:line="93" pos:column="68">host<pos:position pos:line="93" pos:column="72"/></name></name><argument_list pos:line="93" pos:column="72">()<pos:position pos:line="93" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="93" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="76"/></expr_stmt>
            }<pos:position pos:line="94" pos:column="14"/></block></else></if>

            <expr_stmt><expr><call><name pos:line="96" pos:column="13">serverComplete<pos:position pos:line="96" pos:column="27"/></name><argument_list pos:line="96" pos:column="27">()<pos:position pos:line="96" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="30"/></expr_stmt>
            <return pos:line="97" pos:column="13">return;<pos:position pos:line="97" pos:column="20"/></return>
        }<pos:position pos:line="98" pos:column="10"/></block>

        <case pos:line="100" pos:column="9">case <expr><name pos:line="100" pos:column="14">COMPLETE_NONPERSISTENT_MSG<pos:position pos:line="100" pos:column="40"/></name></expr>:<pos:position pos:line="100" pos:column="41"/></case>
            <expr_stmt><expr><call><name pos:line="101" pos:column="13">debugs<pos:position pos:line="101" pos:column="19"/></name><argument_list pos:line="101" pos:column="19">(<argument><expr><literal type="number" pos:line="101" pos:column="20">11<pos:position pos:line="101" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="24">5<pos:position pos:line="101" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="27">"processReplyBody: COMPLETE_NONPERSISTENT_MSG from "<pos:position pos:line="101" pos:column="79"/></literal> <operator pos:line="101" pos:column="80">&lt;&lt;<pos:position pos:line="101" pos:column="88"/></operator> <name pos:line="101" pos:column="83">serverConnection<pos:position pos:line="101" pos:column="99"/></name></expr></argument>)<pos:position pos:line="101" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="101"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="102" pos:column="13">serverComplete<pos:position pos:line="102" pos:column="27"/></name><argument_list pos:line="102" pos:column="27">()<pos:position pos:line="102" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="30"/></expr_stmt>
            <return pos:line="103" pos:column="13">return;<pos:position pos:line="103" pos:column="20"/></return>
        }<pos:position pos:line="104" pos:column="10"/></block></switch></block></else></if>

    <expr_stmt><expr><call><name pos:line="106" pos:column="5">maybeReadVirginBody<pos:position pos:line="106" pos:column="24"/></name><argument_list pos:line="106" pos:column="24">()<pos:position pos:line="106" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="27"/></expr_stmt>
}<pos:position pos:line="107" pos:column="2"/></block></function></unit>
