<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4543_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLCertificateData<pos:position pos:line="2" pos:column="19"/></name><operator pos:line="2" pos:column="19">::<pos:position pos:line="2" pos:column="21"/></operator><name pos:line="2" pos:column="21">parse<pos:position pos:line="2" pos:column="26"/></name></name><parameter_list pos:line="2" pos:column="26">()<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name pos:line="4" pos:column="9">validAttributesStr<pos:position pos:line="4" pos:column="27"/></name></expr>)<pos:position pos:line="4" pos:column="28"/></condition><then pos:line="4" pos:column="28"> <block pos:line="4" pos:column="29">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">newAttribute<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><call><name pos:line="5" pos:column="30">strtokFile<pos:position pos:line="5" pos:column="40"/></name><argument_list pos:line="5" pos:column="40">()<pos:position pos:line="5" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>

        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">!<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">newAttribute<pos:position pos:line="7" pos:column="26"/></name></expr>)<pos:position pos:line="7" pos:column="27"/></condition><then pos:line="7" pos:column="27"> <block pos:line="7" pos:column="28">{
            <if pos:line="8" pos:column="13">if <condition pos:line="8" pos:column="16">(<expr><name pos:line="8" pos:column="17">attributeIsOptional<pos:position pos:line="8" pos:column="36"/></name></expr>)<pos:position pos:line="8" pos:column="37"/></condition><then pos:line="8" pos:column="37">
                <block type="pseudo"><return pos:line="9" pos:column="17">return;<pos:position pos:line="9" pos:column="24"/></return></block></then></if>

            <expr_stmt><expr><call><name pos:line="11" pos:column="13">debugs<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="number" pos:line="11" pos:column="20">28<pos:position pos:line="11" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="24">DBG_CRITICAL<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="38">"FATAL: required attribute argument missing"<pos:position pos:line="11" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="84"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">self_destruct<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">()<pos:position pos:line="12" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="13" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="15" pos:column="9">// Handle the cases where we have optional -x type attributes</comment>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">attributeIsOptional<pos:position pos:line="16" pos:column="32"/></name> <operator pos:line="16" pos:column="33">&amp;&amp;<pos:position pos:line="16" pos:column="43"/></operator> <name><name pos:line="16" pos:column="36">newAttribute<pos:position pos:line="16" pos:column="48"/></name><index pos:line="16" pos:column="48">[<expr><literal type="number" pos:line="16" pos:column="49">0<pos:position pos:line="16" pos:column="50"/></literal></expr>]<pos:position pos:line="16" pos:column="51"/></index></name> <operator pos:line="16" pos:column="52">!=<pos:position pos:line="16" pos:column="54"/></operator> <literal type="char" pos:line="16" pos:column="55">'-'<pos:position pos:line="16" pos:column="58"/></literal></expr>)<pos:position pos:line="16" pos:column="59"/></condition><then pos:line="16" pos:column="59">
            <comment type="line" pos:line="17" pos:column="13">// The read token is not an attribute/option, so add it to values list</comment>
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="18" pos:column="13">values<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">.<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="20">insert<pos:position pos:line="18" pos:column="26"/></name></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">newAttribute<pos:position pos:line="18" pos:column="39"/></name></expr></argument>)<pos:position pos:line="18" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt></block></then>
        <else pos:line="19" pos:column="9">else <block pos:line="19" pos:column="14">{
            <decl_stmt><decl><type><name pos:line="20" pos:column="13">bool<pos:position pos:line="20" pos:column="17"/></name></type> <name pos:line="20" pos:column="18">valid<pos:position pos:line="20" pos:column="23"/></name> <init pos:line="20" pos:column="24">= <expr><literal type="boolean" pos:line="20" pos:column="26">false<pos:position pos:line="20" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="32"/></decl_stmt>
            <for pos:line="21" pos:column="13">for <control pos:line="21" pos:column="17">(<init><decl><type><name><name pos:line="21" pos:column="18">std<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">::<pos:position pos:line="21" pos:column="23"/></operator><name><name pos:line="21" pos:column="23">list<pos:position pos:line="21" pos:column="27"/></name><argument_list type="generic" pos:line="21" pos:column="27">&lt;<argument><expr><name><name pos:line="21" pos:column="28">std<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">::<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">string<pos:position pos:line="21" pos:column="39"/></name></name></expr></argument>&gt;<pos:position pos:line="21" pos:column="43"/></argument_list></name><operator pos:line="21" pos:column="40">::<pos:position pos:line="21" pos:column="42"/></operator><name pos:line="21" pos:column="42">const_iterator<pos:position pos:line="21" pos:column="56"/></name></name></type> <name pos:line="21" pos:column="57">it<pos:position pos:line="21" pos:column="59"/></name> <init pos:line="21" pos:column="60">= <expr><call><name><name pos:line="21" pos:column="62">validAttributes<pos:position pos:line="21" pos:column="77"/></name><operator pos:line="21" pos:column="77">.<pos:position pos:line="21" pos:column="78"/></operator><name pos:line="21" pos:column="78">begin<pos:position pos:line="21" pos:column="83"/></name></name><argument_list pos:line="21" pos:column="83">()<pos:position pos:line="21" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="21" pos:column="86"/></init> <condition><expr><name pos:line="21" pos:column="87">it<pos:position pos:line="21" pos:column="89"/></name> <operator pos:line="21" pos:column="90">!=<pos:position pos:line="21" pos:column="92"/></operator> <call><name><name pos:line="21" pos:column="93">validAttributes<pos:position pos:line="21" pos:column="108"/></name><operator pos:line="21" pos:column="108">.<pos:position pos:line="21" pos:column="109"/></operator><name pos:line="21" pos:column="109">end<pos:position pos:line="21" pos:column="112"/></name></name><argument_list pos:line="21" pos:column="112">()<pos:position pos:line="21" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="115"/></condition> <incr><expr><operator pos:line="21" pos:column="116">++<pos:position pos:line="21" pos:column="118"/></operator><name pos:line="21" pos:column="118">it<pos:position pos:line="21" pos:column="120"/></name></expr></incr>)<pos:position pos:line="21" pos:column="121"/></control> <block pos:line="21" pos:column="122">{
                <if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><operator pos:line="22" pos:column="21">*<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="22">it<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">==<pos:position pos:line="22" pos:column="27"/></operator> <literal type="string" pos:line="22" pos:column="28">"*"<pos:position pos:line="22" pos:column="31"/></literal> <operator pos:line="22" pos:column="32">||<pos:position pos:line="22" pos:column="34"/></operator> <operator pos:line="22" pos:column="35">*<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="36">it<pos:position pos:line="22" pos:column="38"/></name> <operator pos:line="22" pos:column="39">==<pos:position pos:line="22" pos:column="41"/></operator> <name pos:line="22" pos:column="42">newAttribute<pos:position pos:line="22" pos:column="54"/></name></expr>)<pos:position pos:line="22" pos:column="55"/></condition><then pos:line="22" pos:column="55"> <block pos:line="22" pos:column="56">{
                    <expr_stmt><expr><name pos:line="23" pos:column="21">valid<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">=<pos:position pos:line="23" pos:column="28"/></operator> <literal type="boolean" pos:line="23" pos:column="29">true<pos:position pos:line="23" pos:column="33"/></literal></expr>;<pos:position pos:line="23" pos:column="34"/></expr_stmt>
                    <break pos:line="24" pos:column="21">break;<pos:position pos:line="24" pos:column="27"/></break>
                }<pos:position pos:line="25" pos:column="18"/></block></then></if>
            }<pos:position pos:line="26" pos:column="14"/></block></for>

            <if pos:line="28" pos:column="13">if <condition pos:line="28" pos:column="16">(<expr><operator pos:line="28" pos:column="17">!<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">valid<pos:position pos:line="28" pos:column="23"/></name></expr>)<pos:position pos:line="28" pos:column="24"/></condition><then pos:line="28" pos:column="24"> <block pos:line="28" pos:column="25">{
                <expr_stmt><expr><call><name pos:line="29" pos:column="17">debugs<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><literal type="number" pos:line="29" pos:column="24">28<pos:position pos:line="29" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="28">DBG_CRITICAL<pos:position pos:line="29" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="42">"FATAL: Unknown option. Supported option(s) are: "<pos:position pos:line="29" pos:column="92"/></literal> <operator pos:line="29" pos:column="93">&lt;&lt;<pos:position pos:line="29" pos:column="101"/></operator> <name pos:line="29" pos:column="96">validAttributesStr<pos:position pos:line="29" pos:column="114"/></name></expr></argument>)<pos:position pos:line="29" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="116"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="30" pos:column="17">self_destruct<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">()<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="31" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="33" pos:column="13">/* an acl must use consistent attributes in all config lines */</comment>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name pos:line="34" pos:column="17">attribute<pos:position pos:line="34" pos:column="26"/></name></expr>)<pos:position pos:line="34" pos:column="27"/></condition><then pos:line="34" pos:column="27"> <block pos:line="34" pos:column="28">{
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><call><name pos:line="35" pos:column="21">strcasecmp<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">newAttribute<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="46">attribute<pos:position pos:line="35" pos:column="55"/></name></expr></argument>)<pos:position pos:line="35" pos:column="56"/></argument_list></call> <operator pos:line="35" pos:column="57">!=<pos:position pos:line="35" pos:column="59"/></operator> <literal type="number" pos:line="35" pos:column="60">0<pos:position pos:line="35" pos:column="61"/></literal></expr>)<pos:position pos:line="35" pos:column="62"/></condition><then pos:line="35" pos:column="62"> <block pos:line="35" pos:column="63">{
                    <expr_stmt><expr><call><name pos:line="36" pos:column="21">debugs<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><literal type="number" pos:line="36" pos:column="28">28<pos:position pos:line="36" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="32">DBG_CRITICAL<pos:position pos:line="36" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="46">"FATAL: An acl must use consistent attributes in all config lines ("<pos:position pos:line="36" pos:column="114"/></literal> <operator pos:line="36" pos:column="115">&lt;&lt;<pos:position pos:line="36" pos:column="123"/></operator> <name pos:line="36" pos:column="118">newAttribute<pos:position pos:line="36" pos:column="130"/></name> <operator pos:line="36" pos:column="131">&lt;&lt;<pos:position pos:line="36" pos:column="139"/></operator> <literal type="string" pos:line="36" pos:column="134">"!="<pos:position pos:line="36" pos:column="138"/></literal> <operator pos:line="36" pos:column="139">&lt;&lt;<pos:position pos:line="36" pos:column="147"/></operator> <name pos:line="36" pos:column="142">attribute<pos:position pos:line="36" pos:column="151"/></name> <operator pos:line="36" pos:column="152">&lt;&lt;<pos:position pos:line="36" pos:column="160"/></operator> <literal type="string" pos:line="36" pos:column="155">")."<pos:position pos:line="36" pos:column="159"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="160"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="161"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="37" pos:column="21">self_destruct<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">()<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
                }<pos:position pos:line="38" pos:column="18"/></block></then></if>
            }<pos:position pos:line="39" pos:column="14"/></block></then> <else pos:line="39" pos:column="15">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="17">attribute<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <call><name pos:line="40" pos:column="29">xstrdup<pos:position pos:line="40" pos:column="36"/></name><argument_list pos:line="40" pos:column="36">(<argument><expr><name pos:line="40" pos:column="37">newAttribute<pos:position pos:line="40" pos:column="49"/></name></expr></argument>)<pos:position pos:line="40" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="51"/></expr_stmt></block></else></if>
        }<pos:position pos:line="41" pos:column="10"/></block></else></if>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name><name pos:line="44" pos:column="5">values<pos:position pos:line="44" pos:column="11"/></name><operator pos:line="44" pos:column="11">.<pos:position pos:line="44" pos:column="12"/></operator><name pos:line="44" pos:column="12">parse<pos:position pos:line="44" pos:column="17"/></name></name><argument_list pos:line="44" pos:column="17">()<pos:position pos:line="44" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
