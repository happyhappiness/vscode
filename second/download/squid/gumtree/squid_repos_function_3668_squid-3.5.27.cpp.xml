<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3668_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">httpsSslBumpStep2AccessCheckDone<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">allow_t<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">answer<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">void<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">data<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">ConnStateData<pos:position pos:line="3" pos:column="18"/></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">connState<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><operator pos:line="3" pos:column="32">(<pos:position pos:line="3" pos:column="33"/></operator><name pos:line="3" pos:column="33">ConnStateData<pos:position pos:line="3" pos:column="46"/></name> <operator pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></operator><operator pos:line="3" pos:column="48">)<pos:position pos:line="3" pos:column="49"/></operator> <name pos:line="3" pos:column="50">data<pos:position pos:line="3" pos:column="54"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="55"/></decl_stmt>

    <comment type="line" pos:line="5" pos:column="5">// if the connection is closed or closing, just return.</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name><name pos:line="6" pos:column="10">connState<pos:position pos:line="6" pos:column="19"/></name><operator pos:line="6" pos:column="19">-&gt;<pos:position pos:line="6" pos:column="24"/></operator><name pos:line="6" pos:column="21">isOpen<pos:position pos:line="6" pos:column="27"/></name></name><argument_list pos:line="6" pos:column="27">()<pos:position pos:line="6" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="30"/></condition><then pos:line="6" pos:column="30">
        <block type="pseudo"><return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debugs<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="number" pos:line="9" pos:column="12">33<pos:position pos:line="9" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="16">5<pos:position pos:line="9" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="19">"Answer: "<pos:position pos:line="9" pos:column="29"/></literal> <operator pos:line="9" pos:column="30">&lt;&lt;<pos:position pos:line="9" pos:column="38"/></operator> <name pos:line="9" pos:column="33">answer<pos:position pos:line="9" pos:column="39"/></name> <operator pos:line="9" pos:column="40">&lt;&lt;<pos:position pos:line="9" pos:column="48"/></operator> <literal type="string" pos:line="9" pos:column="43">" kind:"<pos:position pos:line="9" pos:column="51"/></literal> <operator pos:line="9" pos:column="52">&lt;&lt;<pos:position pos:line="9" pos:column="60"/></operator> <name><name pos:line="9" pos:column="55">answer<pos:position pos:line="9" pos:column="61"/></name><operator pos:line="9" pos:column="61">.<pos:position pos:line="9" pos:column="62"/></operator><name pos:line="9" pos:column="62">kind<pos:position pos:line="9" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><call><name><name pos:line="10" pos:column="12">connState<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">serverBump<pos:position pos:line="10" pos:column="33"/></name></name><argument_list pos:line="10" pos:column="33">()<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">Ssl<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">::<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">BumpMode<pos:position pos:line="11" pos:column="18"/></name></name></type> <name pos:line="11" pos:column="19">bumpAction<pos:position pos:line="11" pos:column="29"/></name></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">answer<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">ACCESS_ALLOWED<pos:position pos:line="12" pos:column="33"/></name></expr>)<pos:position pos:line="12" pos:column="34"/></condition><then pos:line="12" pos:column="34"> <block pos:line="12" pos:column="35">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">bumpAction<pos:position pos:line="13" pos:column="19"/></name> <operator pos:line="13" pos:column="20">=<pos:position pos:line="13" pos:column="21"/></operator> <operator pos:line="13" pos:column="22">(<pos:position pos:line="13" pos:column="23"/></operator><name><name pos:line="13" pos:column="23">Ssl<pos:position pos:line="13" pos:column="26"/></name><operator pos:line="13" pos:column="26">::<pos:position pos:line="13" pos:column="28"/></operator><name pos:line="13" pos:column="28">BumpMode<pos:position pos:line="13" pos:column="36"/></name></name><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator><name><name pos:line="13" pos:column="37">answer<pos:position pos:line="13" pos:column="43"/></name><operator pos:line="13" pos:column="43">.<pos:position pos:line="13" pos:column="44"/></operator><name pos:line="13" pos:column="44">kind<pos:position pos:line="13" pos:column="48"/></name></name></expr>;<pos:position pos:line="13" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then> <else pos:line="14" pos:column="7">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">bumpAction<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">=<pos:position pos:line="15" pos:column="21"/></operator> <name><name pos:line="15" pos:column="22">Ssl<pos:position pos:line="15" pos:column="25"/></name><operator pos:line="15" pos:column="25">::<pos:position pos:line="15" pos:column="27"/></operator><name pos:line="15" pos:column="27">bumpSplice<pos:position pos:line="15" pos:column="37"/></name></name></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name><name pos:line="17" pos:column="5">connState<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">serverBump<pos:position pos:line="17" pos:column="26"/></name></name><argument_list pos:line="17" pos:column="26">()<pos:position pos:line="17" pos:column="28"/></argument_list></call><operator pos:line="17" pos:column="28">-&gt;<pos:position pos:line="17" pos:column="33"/></operator><name><name pos:line="17" pos:column="30">act<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">.<pos:position pos:line="17" pos:column="34"/></operator><name pos:line="17" pos:column="34">step2<pos:position pos:line="17" pos:column="39"/></name></name> <operator pos:line="17" pos:column="40">=<pos:position pos:line="17" pos:column="41"/></operator> <name pos:line="17" pos:column="42">bumpAction<pos:position pos:line="17" pos:column="52"/></name></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">connState<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">sslBumpMode<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">=<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="30">bumpAction<pos:position pos:line="18" pos:column="40"/></name></expr>;<pos:position pos:line="18" pos:column="41"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">bumpAction<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">==<pos:position pos:line="20" pos:column="22"/></operator> <name><name pos:line="20" pos:column="23">Ssl<pos:position pos:line="20" pos:column="26"/></name><operator pos:line="20" pos:column="26">::<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="28">bumpTerminate<pos:position pos:line="20" pos:column="41"/></name></name></expr>)<pos:position pos:line="20" pos:column="42"/></condition><then pos:line="20" pos:column="42"> <block pos:line="20" pos:column="43">{
        <expr_stmt><expr><call><name><name pos:line="21" pos:column="9">connState<pos:position pos:line="21" pos:column="18"/></name><operator pos:line="21" pos:column="18">-&gt;<pos:position pos:line="21" pos:column="23"/></operator><name pos:line="21" pos:column="20">clientConnection<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">close<pos:position pos:line="21" pos:column="43"/></name></name><argument_list pos:line="21" pos:column="43">()<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then> <elseif pos:line="22" pos:column="7">else <if pos:line="22" pos:column="12">if <condition pos:line="22" pos:column="15">(<expr><name pos:line="22" pos:column="16">bumpAction<pos:position pos:line="22" pos:column="26"/></name> <operator pos:line="22" pos:column="27">!=<pos:position pos:line="22" pos:column="29"/></operator> <name><name pos:line="22" pos:column="30">Ssl<pos:position pos:line="22" pos:column="33"/></name><operator pos:line="22" pos:column="33">::<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="35">bumpSplice<pos:position pos:line="22" pos:column="45"/></name></name></expr>)<pos:position pos:line="22" pos:column="46"/></condition><then pos:line="22" pos:column="46"> <block pos:line="22" pos:column="47">{
        <expr_stmt><expr><call><name><name pos:line="23" pos:column="9">connState<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">startPeekAndSpliceDone<pos:position pos:line="23" pos:column="42"/></name></name><argument_list pos:line="23" pos:column="42">()<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if></elseif> <else pos:line="24" pos:column="7">else <block pos:line="24" pos:column="12">{
        <comment type="line" pos:line="25" pos:column="9">//Normally we can splice here, because we just got client hello message</comment>
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">SSL<pos:position pos:line="26" pos:column="12"/></name> <modifier pos:line="26" pos:column="13">*<pos:position pos:line="26" pos:column="14"/></modifier></type><name pos:line="26" pos:column="14">ssl<pos:position pos:line="26" pos:column="17"/></name> <init pos:line="26" pos:column="18">= <expr><name><name pos:line="26" pos:column="20">fd_table<pos:position pos:line="26" pos:column="28"/></name><index pos:line="26" pos:column="28">[<expr><name><name pos:line="26" pos:column="29">connState<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">-&gt;<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="40">clientConnection<pos:position pos:line="26" pos:column="56"/></name><operator pos:line="26" pos:column="56">-&gt;<pos:position pos:line="26" pos:column="61"/></operator><name pos:line="26" pos:column="58">fd<pos:position pos:line="26" pos:column="60"/></name></name></expr>]<pos:position pos:line="26" pos:column="61"/></index></name><operator pos:line="26" pos:column="61">.<pos:position pos:line="26" pos:column="62"/></operator><name pos:line="26" pos:column="62">ssl<pos:position pos:line="26" pos:column="65"/></name></expr></init></decl>;<pos:position pos:line="26" pos:column="66"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="27" pos:column="9">BIO<pos:position pos:line="27" pos:column="12"/></name> <modifier pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></modifier></type><name pos:line="27" pos:column="14">b<pos:position pos:line="27" pos:column="15"/></name> <init pos:line="27" pos:column="16">= <expr><call><name pos:line="27" pos:column="18">SSL_get_rbio<pos:position pos:line="27" pos:column="30"/></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">ssl<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="36"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="28" pos:column="9">Ssl<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">::<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">ClientBio<pos:position pos:line="28" pos:column="23"/></name></name> <modifier pos:line="28" pos:column="24">*<pos:position pos:line="28" pos:column="25"/></modifier></type><name pos:line="28" pos:column="25">bio<pos:position pos:line="28" pos:column="28"/></name> <init pos:line="28" pos:column="29">= <expr><cast type="static" pos:line="28" pos:column="31">static_cast<argument_list type="generic" pos:line="28" pos:column="42">&lt;<argument><expr><name><name pos:line="28" pos:column="43">Ssl<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">::<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="48">ClientBio<pos:position pos:line="28" pos:column="57"/></name></name> <operator pos:line="28" pos:column="58">*<pos:position pos:line="28" pos:column="59"/></operator></expr></argument>&gt;<pos:position pos:line="28" pos:column="63"/></argument_list><argument_list pos:line="28" pos:column="60">(<argument><expr><name><name pos:line="28" pos:column="61">b<pos:position pos:line="28" pos:column="62"/></name><operator pos:line="28" pos:column="62">-&gt;<pos:position pos:line="28" pos:column="67"/></operator><name pos:line="28" pos:column="64">ptr<pos:position pos:line="28" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="68"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="28" pos:column="69"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">MemBuf<pos:position pos:line="29" pos:column="15"/></name> <specifier pos:line="29" pos:column="16">const<pos:position pos:line="29" pos:column="21"/></specifier> <modifier pos:line="29" pos:column="22">&amp;<pos:position pos:line="29" pos:column="27"/></modifier></type><name pos:line="29" pos:column="23">rbuf<pos:position pos:line="29" pos:column="27"/></name> <init pos:line="29" pos:column="28">= <expr><call><name><name pos:line="29" pos:column="30">bio<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">-&gt;<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="35">rBufData<pos:position pos:line="29" pos:column="43"/></name></name><argument_list pos:line="29" pos:column="43">()<pos:position pos:line="29" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="46"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">debugs<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><literal type="number" pos:line="30" pos:column="16">83<pos:position pos:line="30" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="30" pos:column="19">5<pos:position pos:line="30" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="22">"Bio for  "<pos:position pos:line="30" pos:column="33"/></literal> <operator pos:line="30" pos:column="34">&lt;&lt;<pos:position pos:line="30" pos:column="42"/></operator> <name><name pos:line="30" pos:column="37">connState<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">-&gt;<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="48">clientConnection<pos:position pos:line="30" pos:column="64"/></name></name> <operator pos:line="30" pos:column="65">&lt;&lt;<pos:position pos:line="30" pos:column="73"/></operator> <literal type="string" pos:line="30" pos:column="68">" read "<pos:position pos:line="30" pos:column="76"/></literal> <operator pos:line="30" pos:column="77">&lt;&lt;<pos:position pos:line="30" pos:column="85"/></operator> <call><name><name pos:line="30" pos:column="80">rbuf<pos:position pos:line="30" pos:column="84"/></name><operator pos:line="30" pos:column="84">.<pos:position pos:line="30" pos:column="85"/></operator><name pos:line="30" pos:column="85">contentSize<pos:position pos:line="30" pos:column="96"/></name></name><argument_list pos:line="30" pos:column="96">()<pos:position pos:line="30" pos:column="98"/></argument_list></call> <operator pos:line="30" pos:column="99">&lt;&lt;<pos:position pos:line="30" pos:column="107"/></operator> <literal type="string" pos:line="30" pos:column="102">" helo bytes"<pos:position pos:line="30" pos:column="115"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="117"/></expr_stmt>
        <comment type="line" pos:line="31" pos:column="9">// Do splice:</comment>
        <expr_stmt><expr><name><name pos:line="32" pos:column="9">fd_table<pos:position pos:line="32" pos:column="17"/></name><index pos:line="32" pos:column="17">[<expr><name><name pos:line="32" pos:column="18">connState<pos:position pos:line="32" pos:column="27"/></name><operator pos:line="32" pos:column="27">-&gt;<pos:position pos:line="32" pos:column="32"/></operator><name pos:line="32" pos:column="29">clientConnection<pos:position pos:line="32" pos:column="45"/></name><operator pos:line="32" pos:column="45">-&gt;<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="47">fd<pos:position pos:line="32" pos:column="49"/></name></name></expr>]<pos:position pos:line="32" pos:column="50"/></index></name><operator pos:line="32" pos:column="50">.<pos:position pos:line="32" pos:column="51"/></operator><name pos:line="32" pos:column="51">read_method<pos:position pos:line="32" pos:column="62"/></name> <operator pos:line="32" pos:column="63">=<pos:position pos:line="32" pos:column="64"/></operator> <operator pos:line="32" pos:column="65">&amp;<pos:position pos:line="32" pos:column="70"/></operator><name pos:line="32" pos:column="66">default_read_method<pos:position pos:line="32" pos:column="85"/></name></expr>;<pos:position pos:line="32" pos:column="86"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="33" pos:column="9">fd_table<pos:position pos:line="33" pos:column="17"/></name><index pos:line="33" pos:column="17">[<expr><name><name pos:line="33" pos:column="18">connState<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">clientConnection<pos:position pos:line="33" pos:column="45"/></name><operator pos:line="33" pos:column="45">-&gt;<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="47">fd<pos:position pos:line="33" pos:column="49"/></name></name></expr>]<pos:position pos:line="33" pos:column="50"/></index></name><operator pos:line="33" pos:column="50">.<pos:position pos:line="33" pos:column="51"/></operator><name pos:line="33" pos:column="51">write_method<pos:position pos:line="33" pos:column="63"/></name> <operator pos:line="33" pos:column="64">=<pos:position pos:line="33" pos:column="65"/></operator> <operator pos:line="33" pos:column="66">&amp;<pos:position pos:line="33" pos:column="71"/></operator><name pos:line="33" pos:column="67">default_write_method<pos:position pos:line="33" pos:column="87"/></name></expr>;<pos:position pos:line="33" pos:column="88"/></expr_stmt>

        <decl_stmt><decl><type><name><name pos:line="35" pos:column="9">ClientSocketContext<pos:position pos:line="35" pos:column="28"/></name><operator pos:line="35" pos:column="28">::<pos:position pos:line="35" pos:column="30"/></operator><name pos:line="35" pos:column="30">Pointer<pos:position pos:line="35" pos:column="37"/></name></name></type> <name pos:line="35" pos:column="38">context<pos:position pos:line="35" pos:column="45"/></name> <init pos:line="35" pos:column="46">= <expr><call><name><name pos:line="35" pos:column="48">connState<pos:position pos:line="35" pos:column="57"/></name><operator pos:line="35" pos:column="57">-&gt;<pos:position pos:line="35" pos:column="62"/></operator><name pos:line="35" pos:column="59">getCurrentContext<pos:position pos:line="35" pos:column="76"/></name></name><argument_list pos:line="35" pos:column="76">()<pos:position pos:line="35" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="79"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">Must<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><name pos:line="36" pos:column="14">context<pos:position pos:line="36" pos:column="21"/></name> <operator pos:line="36" pos:column="22">!=<pos:position pos:line="36" pos:column="24"/></operator> <name pos:line="36" pos:column="25">NULL<pos:position pos:line="36" pos:column="29"/></name></expr></argument>)<pos:position pos:line="36" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name><name pos:line="37" pos:column="13">connState<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">-&gt;<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="24">transparent<pos:position pos:line="37" pos:column="35"/></name></name><argument_list pos:line="37" pos:column="35">()<pos:position pos:line="37" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="38"/></condition><then pos:line="37" pos:column="38"> <block pos:line="37" pos:column="39">{
            <comment type="line" pos:line="38" pos:column="13">// If we are going to fake the second CONNECT, clear the first one.</comment>
            <expr_stmt><expr><call><name><name pos:line="39" pos:column="13">context<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">-&gt;<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="22">connIsFinished<pos:position pos:line="39" pos:column="36"/></name></name><argument_list pos:line="39" pos:column="36">()<pos:position pos:line="39" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="39"/></expr_stmt>

            <comment type="line" pos:line="41" pos:column="13">// fake a CONNECT request to force connState to tunnel</comment>
            <comment type="line" pos:line="42" pos:column="13">// XXX: copy from MemBuf reallocates, not a regression since old code did too</comment>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">SBuf<pos:position pos:line="43" pos:column="17"/></name></type> <name pos:line="43" pos:column="18">temp<pos:position pos:line="43" pos:column="22"/></name></decl>;<pos:position pos:line="43" pos:column="23"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="44" pos:column="13">temp<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">.<pos:position pos:line="44" pos:column="18"/></operator><name pos:line="44" pos:column="18">append<pos:position pos:line="44" pos:column="24"/></name></name><argument_list pos:line="44" pos:column="24">(<argument><expr><call><name><name pos:line="44" pos:column="25">rbuf<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">.<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">content<pos:position pos:line="44" pos:column="37"/></name></name><argument_list pos:line="44" pos:column="37">()<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="44" pos:column="41">rbuf<pos:position pos:line="44" pos:column="45"/></name><operator pos:line="44" pos:column="45">.<pos:position pos:line="44" pos:column="46"/></operator><name pos:line="44" pos:column="46">contentSize<pos:position pos:line="44" pos:column="57"/></name></name><argument_list pos:line="44" pos:column="57">()<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="45" pos:column="13">connState<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">-&gt;<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="24">fakeAConnectRequest<pos:position pos:line="45" pos:column="43"/></name></name><argument_list pos:line="45" pos:column="43">(<argument><expr><literal type="string" pos:line="45" pos:column="44">"intercepted TLS spliced"<pos:position pos:line="45" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="71">temp<pos:position pos:line="45" pos:column="75"/></name></expr></argument>)<pos:position pos:line="45" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="77"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></then> <else pos:line="46" pos:column="11">else <block pos:line="46" pos:column="16">{
            <comment type="line" pos:line="47" pos:column="13">// in.buf still has the "CONNECT ..." request data, reset it to SSL hello message</comment>
            <expr_stmt><expr><call><name><name pos:line="48" pos:column="13">connState<pos:position pos:line="48" pos:column="22"/></name><operator pos:line="48" pos:column="22">-&gt;<pos:position pos:line="48" pos:column="27"/></operator><name pos:line="48" pos:column="24">in<pos:position pos:line="48" pos:column="26"/></name><operator pos:line="48" pos:column="26">.<pos:position pos:line="48" pos:column="27"/></operator><name pos:line="48" pos:column="27">buf<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">.<pos:position pos:line="48" pos:column="31"/></operator><name pos:line="48" pos:column="31">append<pos:position pos:line="48" pos:column="37"/></name></name><argument_list pos:line="48" pos:column="37">(<argument><expr><call><name><name pos:line="48" pos:column="38">rbuf<pos:position pos:line="48" pos:column="42"/></name><operator pos:line="48" pos:column="42">.<pos:position pos:line="48" pos:column="43"/></operator><name pos:line="48" pos:column="43">content<pos:position pos:line="48" pos:column="50"/></name></name><argument_list pos:line="48" pos:column="50">()<pos:position pos:line="48" pos:column="52"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="48" pos:column="54">rbuf<pos:position pos:line="48" pos:column="58"/></name><operator pos:line="48" pos:column="58">.<pos:position pos:line="48" pos:column="59"/></operator><name pos:line="48" pos:column="59">contentSize<pos:position pos:line="48" pos:column="70"/></name></name><argument_list pos:line="48" pos:column="70">()<pos:position pos:line="48" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="74"/></expr_stmt>
            <decl_stmt><decl><type><name pos:line="49" pos:column="13">ClientHttpRequest<pos:position pos:line="49" pos:column="30"/></name> <modifier pos:line="49" pos:column="31">*<pos:position pos:line="49" pos:column="32"/></modifier></type><name pos:line="49" pos:column="32">http<pos:position pos:line="49" pos:column="36"/></name> <init pos:line="49" pos:column="37">= <expr><name><name pos:line="49" pos:column="39">context<pos:position pos:line="49" pos:column="46"/></name><operator pos:line="49" pos:column="46">-&gt;<pos:position pos:line="49" pos:column="51"/></operator><name pos:line="49" pos:column="48">http<pos:position pos:line="49" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="49" pos:column="53"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">tunnelStart<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">http<pos:position pos:line="50" pos:column="29"/></name></expr></argument>)<pos:position pos:line="50" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="51" pos:column="10"/></block></else></if>
    }<pos:position pos:line="52" pos:column="6"/></block></else></if>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
