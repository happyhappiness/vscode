<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2334_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">store_client<pos:position pos:line="2" pos:column="13"/></name><operator pos:line="2" pos:column="13">::<pos:position pos:line="2" pos:column="15"/></operator><name pos:line="2" pos:column="15">doCopy<pos:position pos:line="2" pos:column="21"/></name></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">StoreEntry<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">anEntry<pos:position pos:line="2" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="42"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">assert<pos:position pos:line="4" pos:column="11"/></name> <argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">anEntry<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">==<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="24">entry<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="5" pos:column="5">flags<pos:position pos:line="5" pos:column="10"/></name><operator pos:line="5" pos:column="10">.<pos:position pos:line="5" pos:column="11"/></operator><name pos:line="5" pos:column="11">store_copying<pos:position pos:line="5" pos:column="24"/></name></name> <operator pos:line="5" pos:column="25">=<pos:position pos:line="5" pos:column="26"/></operator> <literal type="number" pos:line="5" pos:column="27">1<pos:position pos:line="5" pos:column="28"/></literal></expr>;<pos:position pos:line="5" pos:column="29"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">MemObject<pos:position pos:line="6" pos:column="14"/></name> <modifier pos:line="6" pos:column="15">*<pos:position pos:line="6" pos:column="16"/></modifier></type><name pos:line="6" pos:column="16">mem<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name><name pos:line="6" pos:column="22">entry<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">-&gt;<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="29">mem_obj<pos:position pos:line="6" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="37"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">debugs<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="number" pos:line="8" pos:column="12">33<pos:position pos:line="8" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="16">5<pos:position pos:line="8" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="19">"store_client::doCopy: co: "<pos:position pos:line="8" pos:column="47"/></literal> <operator pos:line="8" pos:column="48">&lt;&lt;<pos:position pos:line="8" pos:column="56"/></operator>
           <name><name pos:line="9" pos:column="12">copyInto<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">.<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="21">offset<pos:position pos:line="9" pos:column="27"/></name></name> <operator pos:line="9" pos:column="28">&lt;&lt;<pos:position pos:line="9" pos:column="36"/></operator> <literal type="string" pos:line="9" pos:column="31">", hi: "<pos:position pos:line="9" pos:column="39"/></literal> <operator pos:line="9" pos:column="40">&lt;&lt;<pos:position pos:line="9" pos:column="48"/></operator>
           <call><name><name pos:line="10" pos:column="12">mem<pos:position pos:line="10" pos:column="15"/></name><operator pos:line="10" pos:column="15">-&gt;<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="17">endOffset<pos:position pos:line="10" pos:column="26"/></name></name><argument_list pos:line="10" pos:column="26">()<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">storeClientNoMoreToSend<pos:position pos:line="12" pos:column="32"/></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">entry<pos:position pos:line="12" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="40">this<pos:position pos:line="12" pos:column="44"/></name></expr></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="46"/></condition><then pos:line="12" pos:column="46"> <block pos:line="12" pos:column="47">{
        <comment type="block" pos:line="13" pos:column="9">/* There is no more to send! */</comment>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">debugs<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><literal type="number" pos:line="14" pos:column="16">33<pos:position pos:line="14" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="20">3<pos:position pos:line="14" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="23">HERE<pos:position pos:line="14" pos:column="27"/></name> <operator pos:line="14" pos:column="28">&lt;&lt;<pos:position pos:line="14" pos:column="36"/></operator> <literal type="string" pos:line="14" pos:column="31">"There is no more to send!"<pos:position pos:line="14" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">callback<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">flags<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">.<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">store_copying<pos:position pos:line="16" pos:column="28"/></name></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <literal type="number" pos:line="16" pos:column="31">0<pos:position pos:line="16" pos:column="32"/></literal></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
        <return pos:line="17" pos:column="9">return;<pos:position pos:line="17" pos:column="16"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="20" pos:column="5">/* Check that we actually have data */</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">anEntry<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">store_status<pos:position pos:line="21" pos:column="30"/></name></name> <operator pos:line="21" pos:column="31">==<pos:position pos:line="21" pos:column="33"/></operator> <name pos:line="21" pos:column="34">STORE_PENDING<pos:position pos:line="21" pos:column="47"/></name> <operator pos:line="21" pos:column="48">&amp;&amp;<pos:position pos:line="21" pos:column="58"/></operator> <name><name pos:line="21" pos:column="51">copyInto<pos:position pos:line="21" pos:column="59"/></name><operator pos:line="21" pos:column="59">.<pos:position pos:line="21" pos:column="60"/></operator><name pos:line="21" pos:column="60">offset<pos:position pos:line="21" pos:column="66"/></name></name> <operator pos:line="21" pos:column="67">&gt;=<pos:position pos:line="21" pos:column="72"/></operator> <call><name><name pos:line="21" pos:column="70">mem<pos:position pos:line="21" pos:column="73"/></name><operator pos:line="21" pos:column="73">-&gt;<pos:position pos:line="21" pos:column="78"/></operator><name pos:line="21" pos:column="75">endOffset<pos:position pos:line="21" pos:column="84"/></name></name><argument_list pos:line="21" pos:column="84">()<pos:position pos:line="21" pos:column="86"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="87"/></condition><then pos:line="21" pos:column="87"> <block pos:line="21" pos:column="88">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">debugs<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><literal type="number" pos:line="22" pos:column="16">90<pos:position pos:line="22" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="20">3<pos:position pos:line="22" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="23">"store_client::doCopy: Waiting for more"<pos:position pos:line="22" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">flags<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">.<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">store_copying<pos:position pos:line="23" pos:column="28"/></name></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <literal type="number" pos:line="23" pos:column="31">0<pos:position pos:line="23" pos:column="32"/></literal></expr>;<pos:position pos:line="23" pos:column="33"/></expr_stmt>
        <return pos:line="24" pos:column="9">return;<pos:position pos:line="24" pos:column="16"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="27" pos:column="5">/*
     * Slight weirdness here.  We open a swapin file for any
     * STORE_DISK_CLIENT, even if we can copy the requested chunk
     * from memory in the next block.  We must try to open the
     * swapin file before sending any data to the client side.  If
     * we postpone the open, and then can not open the file later
     * on, the client loses big time.  Its transfer just gets cut
     * off.  Better to open it early (while the client side handler
     * is clientCacheHit) so that we can fall back to a cache miss
     * if needed.
     */</comment>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">STORE_DISK_CLIENT<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">==<pos:position pos:line="39" pos:column="29"/></operator> <call><name pos:line="39" pos:column="30">getType<pos:position pos:line="39" pos:column="37"/></name><argument_list pos:line="39" pos:column="37">()<pos:position pos:line="39" pos:column="39"/></argument_list></call> <operator pos:line="39" pos:column="40">&amp;&amp;<pos:position pos:line="39" pos:column="50"/></operator> <name pos:line="39" pos:column="43">swapin_sio<pos:position pos:line="39" pos:column="53"/></name> <operator pos:line="39" pos:column="54">==<pos:position pos:line="39" pos:column="56"/></operator> <name pos:line="39" pos:column="57">NULL<pos:position pos:line="39" pos:column="61"/></name></expr>)<pos:position pos:line="39" pos:column="62"/></condition><then pos:line="39" pos:column="62">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="40" pos:column="9">startSwapin<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">()<pos:position pos:line="40" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt></block></then>
    <else pos:line="41" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="9">scheduleRead<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">()<pos:position pos:line="42" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt></block></else></if>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
