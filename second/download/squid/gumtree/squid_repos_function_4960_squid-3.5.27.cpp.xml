<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4960_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">ACLProtocolData<pos:position pos:line="2" pos:column="16"/></name><operator pos:line="2" pos:column="16">::<pos:position pos:line="2" pos:column="18"/></operator><name pos:line="2" pos:column="18">parse<pos:position pos:line="2" pos:column="23"/></name></name><parameter_list pos:line="2" pos:column="23">()<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">CbDataList<pos:position pos:line="4" pos:column="15"/></name><argument_list type="generic" pos:line="4" pos:column="15">&lt;<argument><expr><name><name pos:line="4" pos:column="16">AnyP<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">::<pos:position pos:line="4" pos:column="22"/></operator><name pos:line="4" pos:column="22">ProtocolType<pos:position pos:line="4" pos:column="34"/></name></name></expr></argument>&gt;<pos:position pos:line="4" pos:column="38"/></argument_list></name> <modifier pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></modifier><modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">Tail<pos:position pos:line="4" pos:column="42"/></name></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">t<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">NULL<pos:position pos:line="5" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

    <for pos:line="7" pos:column="5">for <control pos:line="7" pos:column="9">(<init><expr><name pos:line="7" pos:column="10">Tail<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <operator pos:line="7" pos:column="17">&amp;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="18">values<pos:position pos:line="7" pos:column="24"/></name></expr>;<pos:position pos:line="7" pos:column="25"/></init> <condition><expr><operator pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="27">Tail<pos:position pos:line="7" pos:column="31"/></name></expr>;<pos:position pos:line="7" pos:column="32"/></condition> <incr><expr><name pos:line="7" pos:column="33">Tail<pos:position pos:line="7" pos:column="37"/></name> <operator pos:line="7" pos:column="38">=<pos:position pos:line="7" pos:column="39"/></operator> <operator pos:line="7" pos:column="40">&amp;<pos:position pos:line="7" pos:column="45"/></operator><operator pos:line="7" pos:column="41">(<pos:position pos:line="7" pos:column="42"/></operator><name><operator pos:line="7" pos:column="42">(<pos:position pos:line="7" pos:column="43"/></operator><operator pos:line="7" pos:column="43">*<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">Tail<pos:position pos:line="7" pos:column="48"/></name><operator pos:line="7" pos:column="48">)<pos:position pos:line="7" pos:column="49"/></operator><operator pos:line="7" pos:column="49">-&gt;<pos:position pos:line="7" pos:column="54"/></operator><name pos:line="7" pos:column="51">next<pos:position pos:line="7" pos:column="55"/></name></name><operator pos:line="7" pos:column="55">)<pos:position pos:line="7" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="7" pos:column="57"/></control><block type="pseudo"><empty_stmt pos:line="7" pos:column="57">;<pos:position pos:line="7" pos:column="58"/></empty_stmt></block></for>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">t<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <call><name pos:line="8" pos:column="17">strtokFile<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">()<pos:position pos:line="8" pos:column="29"/></argument_list></call><operator pos:line="8" pos:column="29">)<pos:position pos:line="8" pos:column="30"/></operator></expr>)<pos:position pos:line="8" pos:column="31"/></condition> <block pos:line="8" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">int<pos:position pos:line="9" pos:column="12"/></name></type> <name pos:line="9" pos:column="13">p<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><name><name pos:line="9" pos:column="17">AnyP<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">::<pos:position pos:line="9" pos:column="23"/></operator><name pos:line="9" pos:column="23">PROTO_NONE<pos:position pos:line="9" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
        <for pos:line="10" pos:column="9">for <control pos:line="10" pos:column="13">(<init pos:line="10" pos:column="14">;<pos:position pos:line="10" pos:column="15"/></init> <condition><expr><name pos:line="10" pos:column="16">p<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">&lt;<pos:position pos:line="10" pos:column="22"/></operator> <name><name pos:line="10" pos:column="20">AnyP<pos:position pos:line="10" pos:column="24"/></name><operator pos:line="10" pos:column="24">::<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="26">PROTO_UNKNOWN<pos:position pos:line="10" pos:column="39"/></name></name></expr>;<pos:position pos:line="10" pos:column="40"/></condition> <incr><expr><operator pos:line="10" pos:column="41">++<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="43">p<pos:position pos:line="10" pos:column="44"/></name></expr></incr>)<pos:position pos:line="10" pos:column="45"/></control> <block pos:line="10" pos:column="46">{
            <if pos:line="11" pos:column="13">if <condition pos:line="11" pos:column="16">(<expr><call><name pos:line="11" pos:column="17">strcasecmp<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">t<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="31">AnyP<pos:position pos:line="11" pos:column="35"/></name><operator pos:line="11" pos:column="35">::<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="37">ProtocolType_str<pos:position pos:line="11" pos:column="53"/></name><index pos:line="11" pos:column="53">[<expr><name pos:line="11" pos:column="54">p<pos:position pos:line="11" pos:column="55"/></name></expr>]<pos:position pos:line="11" pos:column="56"/></index></name></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call> <operator pos:line="11" pos:column="58">==<pos:position pos:line="11" pos:column="60"/></operator> <literal type="number" pos:line="11" pos:column="61">0<pos:position pos:line="11" pos:column="62"/></literal></expr>)<pos:position pos:line="11" pos:column="63"/></condition><then pos:line="11" pos:column="63"> <block pos:line="11" pos:column="64">{
                <decl_stmt><decl><type><name><name pos:line="12" pos:column="17">CbDataList<pos:position pos:line="12" pos:column="27"/></name><argument_list type="generic" pos:line="12" pos:column="27">&lt;<argument><expr><name><name pos:line="12" pos:column="28">AnyP<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">::<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">ProtocolType<pos:position pos:line="12" pos:column="46"/></name></name></expr></argument>&gt;<pos:position pos:line="12" pos:column="50"/></argument_list></name> <modifier pos:line="12" pos:column="48">*<pos:position pos:line="12" pos:column="49"/></modifier></type><name pos:line="12" pos:column="49">q<pos:position pos:line="12" pos:column="50"/></name> <init pos:line="12" pos:column="51">= <expr><operator pos:line="12" pos:column="53">new<pos:position pos:line="12" pos:column="56"/></operator> <call><name><name pos:line="12" pos:column="57">CbDataList<pos:position pos:line="12" pos:column="67"/></name><argument_list type="generic" pos:line="12" pos:column="67">&lt;<argument><expr><name><name pos:line="12" pos:column="68">AnyP<pos:position pos:line="12" pos:column="72"/></name><operator pos:line="12" pos:column="72">::<pos:position pos:line="12" pos:column="74"/></operator><name pos:line="12" pos:column="74">ProtocolType<pos:position pos:line="12" pos:column="86"/></name></name></expr></argument>&gt;<pos:position pos:line="12" pos:column="90"/></argument_list></name><argument_list pos:line="12" pos:column="87">(<argument><expr><cast type="static" pos:line="12" pos:column="88">static_cast<argument_list type="generic" pos:line="12" pos:column="99">&lt;<argument><expr><name><name pos:line="12" pos:column="100">AnyP<pos:position pos:line="12" pos:column="104"/></name><operator pos:line="12" pos:column="104">::<pos:position pos:line="12" pos:column="106"/></operator><name pos:line="12" pos:column="106">ProtocolType<pos:position pos:line="12" pos:column="118"/></name></name></expr></argument>&gt;<pos:position pos:line="12" pos:column="122"/></argument_list><argument_list pos:line="12" pos:column="119">(<argument><expr><name pos:line="12" pos:column="120">p<pos:position pos:line="12" pos:column="121"/></name></expr></argument>)<pos:position pos:line="12" pos:column="122"/></argument_list></cast></expr></argument>)<pos:position pos:line="12" pos:column="123"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="124"/></decl_stmt>
                <expr_stmt><expr><operator pos:line="13" pos:column="17">*<pos:position pos:line="13" pos:column="18"/></operator><operator pos:line="13" pos:column="18">(<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">Tail<pos:position pos:line="13" pos:column="23"/></name><operator pos:line="13" pos:column="23">)<pos:position pos:line="13" pos:column="24"/></operator> <operator pos:line="13" pos:column="25">=<pos:position pos:line="13" pos:column="26"/></operator> <name pos:line="13" pos:column="27">q<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><name pos:line="14" pos:column="17">Tail<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <operator pos:line="14" pos:column="24">&amp;<pos:position pos:line="14" pos:column="29"/></operator><name><name pos:line="14" pos:column="25">q<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">-&gt;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="28">next<pos:position pos:line="14" pos:column="32"/></name></name></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
                <break pos:line="15" pos:column="17">break;<pos:position pos:line="15" pos:column="23"/></break>
            }<pos:position pos:line="16" pos:column="14"/></block></then></if>
        }<pos:position pos:line="17" pos:column="10"/></block></for>
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">p<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">==<pos:position pos:line="18" pos:column="17"/></operator> <name><name pos:line="18" pos:column="18">AnyP<pos:position pos:line="18" pos:column="22"/></name><operator pos:line="18" pos:column="22">::<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">PROTO_UNKNOWN<pos:position pos:line="18" pos:column="37"/></name></name></expr>)<pos:position pos:line="18" pos:column="38"/></condition><then pos:line="18" pos:column="38"> <block pos:line="18" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">debugs<pos:position pos:line="19" pos:column="19"/></name><argument_list pos:line="19" pos:column="19">(<argument><expr><literal type="number" pos:line="19" pos:column="20">28<pos:position pos:line="19" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="24">DBG_IMPORTANT<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="39">"WARNING: Ignoring unknown protocol '"<pos:position pos:line="19" pos:column="77"/></literal> <operator pos:line="19" pos:column="78">&lt;&lt;<pos:position pos:line="19" pos:column="86"/></operator> <name pos:line="19" pos:column="81">t<pos:position pos:line="19" pos:column="82"/></name> <operator pos:line="19" pos:column="83">&lt;&lt;<pos:position pos:line="19" pos:column="91"/></operator> <literal type="string" pos:line="19" pos:column="86">"' in the ACL named '"<pos:position pos:line="19" pos:column="108"/></literal> <operator pos:line="19" pos:column="109">&lt;&lt;<pos:position pos:line="19" pos:column="117"/></operator> <name pos:line="19" pos:column="112">AclMatchedName<pos:position pos:line="19" pos:column="126"/></name> <operator pos:line="19" pos:column="127">&lt;&lt;<pos:position pos:line="19" pos:column="135"/></operator> <literal type="string" pos:line="19" pos:column="130">"'"<pos:position pos:line="19" pos:column="133"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="134"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="135"/></expr_stmt>
            <comment type="line" pos:line="20" pos:column="13">// XXX: store the text pattern of this protocol name for live comparisons</comment>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></while>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
