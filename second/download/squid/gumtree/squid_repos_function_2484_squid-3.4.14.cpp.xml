<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2484_squid-3.4.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">StoreMetaUnpacker<pos:position pos:line="2" pos:column="18"/></name><operator pos:line="2" pos:column="18">::<pos:position pos:line="2" pos:column="20"/></operator><name pos:line="2" pos:column="20">doOneEntry<pos:position pos:line="2" pos:column="30"/></name></name><parameter_list pos:line="2" pos:column="30">()<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">getType<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">()<pos:position pos:line="4" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">getLength<pos:position pos:line="5" pos:column="14"/></name><argument_list pos:line="5" pos:column="14">()<pos:position pos:line="5" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="17"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">position<pos:position pos:line="7" pos:column="17"/></name> <operator pos:line="7" pos:column="18">+<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">length<pos:position pos:line="7" pos:column="26"/></name> <operator pos:line="7" pos:column="27">&gt;<pos:position pos:line="7" pos:column="31"/></operator> <operator pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">hdr_len<pos:position pos:line="7" pos:column="37"/></name></expr>)<pos:position pos:line="7" pos:column="38"/></condition><then pos:line="7" pos:column="38"> <block pos:line="7" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">debugs<pos:position pos:line="8" pos:column="15"/></name><argument_list pos:line="8" pos:column="15">(<argument><expr><literal type="number" pos:line="8" pos:column="16">20<pos:position pos:line="8" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="20">DBG_CRITICAL<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="34">"storeSwapMetaUnpack: overflow!"<pos:position pos:line="8" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">debugs<pos:position pos:line="9" pos:column="15"/></name><argument_list pos:line="9" pos:column="15">(<argument><expr><literal type="number" pos:line="9" pos:column="16">20<pos:position pos:line="9" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="20">DBG_CRITICAL<pos:position pos:line="9" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="34">"\ttype="<pos:position pos:line="9" pos:column="43"/></literal> <operator pos:line="9" pos:column="44">&lt;&lt;<pos:position pos:line="9" pos:column="52"/></operator> <name pos:line="9" pos:column="47">type<pos:position pos:line="9" pos:column="51"/></name> <operator pos:line="9" pos:column="52">&lt;&lt;<pos:position pos:line="9" pos:column="60"/></operator> <literal type="string" pos:line="9" pos:column="55">", length="<pos:position pos:line="9" pos:column="66"/></literal> <operator pos:line="9" pos:column="67">&lt;&lt;<pos:position pos:line="9" pos:column="75"/></operator> <name pos:line="9" pos:column="70">length<pos:position pos:line="9" pos:column="76"/></name> <operator pos:line="9" pos:column="77">&lt;&lt;<pos:position pos:line="9" pos:column="85"/></operator> <literal type="string" pos:line="9" pos:column="80">", *hdr_len="<pos:position pos:line="9" pos:column="93"/></literal> <operator pos:line="9" pos:column="94">&lt;&lt;<pos:position pos:line="9" pos:column="102"/></operator> <operator pos:line="9" pos:column="97">*<pos:position pos:line="9" pos:column="98"/></operator><name pos:line="9" pos:column="98">hdr_len<pos:position pos:line="9" pos:column="105"/></name> <operator pos:line="9" pos:column="106">&lt;&lt;<pos:position pos:line="9" pos:column="114"/></operator> <literal type="string" pos:line="9" pos:column="109">", offset="<pos:position pos:line="9" pos:column="120"/></literal> <operator pos:line="9" pos:column="121">&lt;&lt;<pos:position pos:line="9" pos:column="129"/></operator> <name pos:line="9" pos:column="124">position<pos:position pos:line="9" pos:column="132"/></name></expr></argument>)<pos:position pos:line="9" pos:column="133"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="134"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><literal type="boolean" pos:line="10" pos:column="16">false<pos:position pos:line="10" pos:column="21"/></literal></expr>;<pos:position pos:line="10" pos:column="22"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="13" pos:column="5">StoreMeta<pos:position pos:line="13" pos:column="14"/></name> <modifier pos:line="13" pos:column="15">*<pos:position pos:line="13" pos:column="16"/></modifier></type><name pos:line="13" pos:column="16">newNode<pos:position pos:line="13" pos:column="23"/></name> <init pos:line="13" pos:column="24">= <expr><call><name><name pos:line="13" pos:column="26">StoreMeta<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">::<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">Factory<pos:position pos:line="13" pos:column="44"/></name></name><argument_list pos:line="13" pos:column="44">(<argument><expr><name pos:line="13" pos:column="45">type<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="51">length<pos:position pos:line="13" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="59">&amp;<pos:position pos:line="13" pos:column="64"/></operator><name><name pos:line="13" pos:column="60">buf<pos:position pos:line="13" pos:column="63"/></name><index pos:line="13" pos:column="63">[<expr><name pos:line="13" pos:column="64">position<pos:position pos:line="13" pos:column="72"/></name></expr>]<pos:position pos:line="13" pos:column="73"/></index></name></expr></argument>)<pos:position pos:line="13" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="75"/></decl_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">newNode<pos:position pos:line="15" pos:column="16"/></name></expr>)<pos:position pos:line="15" pos:column="17"/></condition><then pos:line="15" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">tail<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name><name pos:line="16" pos:column="16">StoreMeta<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">::<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="27">Add<pos:position pos:line="16" pos:column="30"/></name></name> <argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">tail<pos:position pos:line="16" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="38">newNode<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="18" pos:column="5">position<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">+=<pos:position pos:line="18" pos:column="16"/></operator> <name pos:line="18" pos:column="17">length<pos:position pos:line="18" pos:column="23"/></name></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>

    <return pos:line="20" pos:column="5">return <expr><literal type="boolean" pos:line="20" pos:column="12">true<pos:position pos:line="20" pos:column="16"/></literal></expr>;<pos:position pos:line="20" pos:column="17"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
