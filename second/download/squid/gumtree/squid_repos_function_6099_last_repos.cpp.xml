<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_6099_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">File<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">writeAll<pos:position pos:line="2" pos:column="15"/></name></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name pos:line="2" pos:column="22">SBuf<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">&amp;<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="28">data<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="33"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="4" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">DWORD<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">nBytesWritten<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><literal type="number" pos:line="5" pos:column="27">0<pos:position pos:line="5" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><call><name pos:line="6" pos:column="10">WriteFile<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name pos:line="6" pos:column="20">fd_<pos:position pos:line="6" pos:column="23"/></name></expr></argument>, <argument><expr><call><name><name pos:line="6" pos:column="25">data<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">.<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="30">rawContent<pos:position pos:line="6" pos:column="40"/></name></name><argument_list pos:line="6" pos:column="40">()<pos:position pos:line="6" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="6" pos:column="44">data<pos:position pos:line="6" pos:column="48"/></name><operator pos:line="6" pos:column="48">.<pos:position pos:line="6" pos:column="49"/></operator><name pos:line="6" pos:column="49">length<pos:position pos:line="6" pos:column="55"/></name></name><argument_list pos:line="6" pos:column="55">()<pos:position pos:line="6" pos:column="57"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="6" pos:column="59">&amp;<pos:position pos:line="6" pos:column="64"/></operator><name pos:line="6" pos:column="60">nBytesWritten<pos:position pos:line="6" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="null" pos:line="6" pos:column="75">nullptr<pos:position pos:line="6" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="83"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="84"/></condition><then pos:line="6" pos:column="84"> <block pos:line="6" pos:column="85">{
        <decl_stmt><decl><type><specifier pos:line="7" pos:column="9">const<pos:position pos:line="7" pos:column="14"/></specifier> <specifier pos:line="7" pos:column="15">auto<pos:position pos:line="7" pos:column="19"/></specifier></type> <name pos:line="7" pos:column="20">savedError<pos:position pos:line="7" pos:column="30"/></name> <init pos:line="7" pos:column="31">= <expr><call><name pos:line="7" pos:column="33">GetLastError<pos:position pos:line="7" pos:column="45"/></name><argument_list pos:line="7" pos:column="45">()<pos:position pos:line="7" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="48"/></decl_stmt>
        <throw pos:line="8" pos:column="9">throw <expr><call><name pos:line="8" pos:column="15">TexcHere<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><call><name pos:line="8" pos:column="24">sysCallFailure<pos:position pos:line="8" pos:column="38"/></name><argument_list pos:line="8" pos:column="38">(<argument><expr><literal type="string" pos:line="8" pos:column="39">"WriteFile"<pos:position pos:line="8" pos:column="50"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="52">WindowsErrorMessage<pos:position pos:line="8" pos:column="71"/></name><argument_list pos:line="8" pos:column="71">(<argument><expr><name pos:line="8" pos:column="72">savedError<pos:position pos:line="8" pos:column="82"/></name></expr></argument>)<pos:position pos:line="8" pos:column="83"/></argument_list></call><operator pos:line="8" pos:column="83">.<pos:position pos:line="8" pos:column="84"/></operator><call><name pos:line="8" pos:column="84">c_str<pos:position pos:line="8" pos:column="89"/></name><argument_list pos:line="8" pos:column="89">()<pos:position pos:line="8" pos:column="91"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="92"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="94"/></throw>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <specifier pos:line="10" pos:column="11">auto<pos:position pos:line="10" pos:column="15"/></specifier></type> <name pos:line="10" pos:column="16">bytesWritten<pos:position pos:line="10" pos:column="28"/></name> <init pos:line="10" pos:column="29">= <expr><cast type="static" pos:line="10" pos:column="31">static_cast<argument_list type="generic" pos:line="10" pos:column="42">&lt;<argument><expr><name pos:line="10" pos:column="43">size_t<pos:position pos:line="10" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="10" pos:column="53"/></argument_list><argument_list pos:line="10" pos:column="50">(<argument><expr><name pos:line="10" pos:column="51">nBytesWritten<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="10" pos:column="66"/></decl_stmt>
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <specifier pos:line="12" pos:column="11">auto<pos:position pos:line="12" pos:column="15"/></specifier></type> <name pos:line="12" pos:column="16">result<pos:position pos:line="12" pos:column="22"/></name> <init pos:line="12" pos:column="23">= <expr><call><name><operator pos:line="12" pos:column="25">::<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="27">write<pos:position pos:line="12" pos:column="32"/></name></name><argument_list pos:line="12" pos:column="32">(<argument><expr><name pos:line="12" pos:column="33">fd_<pos:position pos:line="12" pos:column="36"/></name></expr></argument>, <argument><expr><call><name><name pos:line="12" pos:column="38">data<pos:position pos:line="12" pos:column="42"/></name><operator pos:line="12" pos:column="42">.<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="43">rawContent<pos:position pos:line="12" pos:column="53"/></name></name><argument_list pos:line="12" pos:column="53">()<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="12" pos:column="57">data<pos:position pos:line="12" pos:column="61"/></name><operator pos:line="12" pos:column="61">.<pos:position pos:line="12" pos:column="62"/></operator><name pos:line="12" pos:column="62">length<pos:position pos:line="12" pos:column="68"/></name></name><argument_list pos:line="12" pos:column="68">()<pos:position pos:line="12" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="72"/></decl_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">result<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">&lt;<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="18">0<pos:position pos:line="13" pos:column="19"/></literal></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block pos:line="13" pos:column="21">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <specifier pos:line="14" pos:column="15">auto<pos:position pos:line="14" pos:column="19"/></specifier></type> <name pos:line="14" pos:column="20">savedErrno<pos:position pos:line="14" pos:column="30"/></name> <init pos:line="14" pos:column="31">= <expr><name pos:line="14" pos:column="33">errno<pos:position pos:line="14" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="39"/></decl_stmt>
        <throw pos:line="15" pos:column="9">throw <expr><call><name pos:line="15" pos:column="15">TexcHere<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><call><name pos:line="15" pos:column="24">sysCallError<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><literal type="string" pos:line="15" pos:column="37">"write"<pos:position pos:line="15" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">savedErrno<pos:position pos:line="15" pos:column="56"/></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="59"/></throw>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <decl_stmt><decl><type><specifier pos:line="17" pos:column="5">const<pos:position pos:line="17" pos:column="10"/></specifier> <specifier pos:line="17" pos:column="11">auto<pos:position pos:line="17" pos:column="15"/></specifier></type> <name pos:line="17" pos:column="16">bytesWritten<pos:position pos:line="17" pos:column="28"/></name> <init pos:line="17" pos:column="29">= <expr><cast type="static" pos:line="17" pos:column="31">static_cast<argument_list type="generic" pos:line="17" pos:column="42">&lt;<argument><expr><name pos:line="17" pos:column="43">size_t<pos:position pos:line="17" pos:column="49"/></name></expr></argument>&gt;<pos:position pos:line="17" pos:column="53"/></argument_list><argument_list pos:line="17" pos:column="50">(<argument><expr><name pos:line="17" pos:column="51">result<pos:position pos:line="17" pos:column="57"/></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></cast></expr></init></decl>;<pos:position pos:line="17" pos:column="59"/></decl_stmt>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">bytesWritten<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">!=<pos:position pos:line="19" pos:column="24"/></operator> <call><name><name pos:line="19" pos:column="25">data<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">.<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">length<pos:position pos:line="19" pos:column="36"/></name></name><argument_list pos:line="19" pos:column="36">()<pos:position pos:line="19" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="39"/></condition><then pos:line="19" pos:column="39">
        <block type="pseudo"><throw pos:line="20" pos:column="9">throw <expr><call><name pos:line="20" pos:column="15">TexcHere<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><call><name pos:line="20" pos:column="24">sysCallFailure<pos:position pos:line="20" pos:column="38"/></name><argument_list pos:line="20" pos:column="38">(<argument><expr><literal type="string" pos:line="20" pos:column="39">"write"<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="48">"partial write"<pos:position pos:line="20" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="66"/></throw></block></then></if>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
