<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1662_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name pos:line="2" pos:column="1">cbdataRealFree<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">cbdata<pos:position pos:line="2" pos:column="22"/></name> <modifier pos:line="2" pos:column="23">*<pos:position pos:line="2" pos:column="24"/></modifier></type><name pos:line="2" pos:column="24">c<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">file<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">int<pos:position pos:line="2" pos:column="54"/></name></type> <name pos:line="2" pos:column="55">line<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">WITH_VALGRIND<pos:position pos:line="4" pos:column="18"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">void<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">p<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name><name pos:line="5" pos:column="15">c<pos:position pos:line="5" pos:column="16"/></name><operator pos:line="5" pos:column="16">-&gt;<pos:position pos:line="5" pos:column="21"/></operator><name pos:line="5" pos:column="18">data<pos:position pos:line="5" pos:column="22"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">void<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">p<pos:position pos:line="7" pos:column="12"/></name> <init pos:line="7" pos:column="13">= <expr><operator pos:line="7" pos:column="15">(<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="16">void<pos:position pos:line="7" pos:column="20"/></name> <operator pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></operator><operator pos:line="7" pos:column="22">)<pos:position pos:line="7" pos:column="23"/></operator><operator pos:line="7" pos:column="23">&amp;<pos:position pos:line="7" pos:column="28"/></operator><name><name pos:line="7" pos:column="24">c<pos:position pos:line="7" pos:column="25"/></name><operator pos:line="7" pos:column="25">-&gt;<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="27">data<pos:position pos:line="7" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><operator pos:line="10" pos:column="5">--<pos:position pos:line="10" pos:column="7"/></operator><name pos:line="10" pos:column="7">cbdataCount<pos:position pos:line="10" pos:column="18"/></name></expr>;<pos:position pos:line="10" pos:column="19"/></expr_stmt>
<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if<pos:position pos:line="11" pos:column="4"/></cpp:directive> <expr><name pos:line="11" pos:column="5">USE_CBDATA_DEBUG<pos:position pos:line="11" pos:column="21"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">debugs<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><literal type="number" pos:line="12" pos:column="12">45<pos:position pos:line="12" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="16">3<pos:position pos:line="12" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="19">"Freeing "<pos:position pos:line="12" pos:column="29"/></literal> <operator pos:line="12" pos:column="30">&lt;&lt;<pos:position pos:line="12" pos:column="38"/></operator> <name pos:line="12" pos:column="33">p<pos:position pos:line="12" pos:column="34"/></name> <operator pos:line="12" pos:column="35">&lt;&lt;<pos:position pos:line="12" pos:column="43"/></operator> <literal type="char" pos:line="12" pos:column="38">' '<pos:position pos:line="12" pos:column="41"/></literal> <operator pos:line="12" pos:column="42">&lt;&lt;<pos:position pos:line="12" pos:column="50"/></operator> <name pos:line="12" pos:column="45">file<pos:position pos:line="12" pos:column="49"/></name> <operator pos:line="12" pos:column="50">&lt;&lt;<pos:position pos:line="12" pos:column="58"/></operator> <literal type="char" pos:line="12" pos:column="53">':'<pos:position pos:line="12" pos:column="56"/></literal> <operator pos:line="12" pos:column="57">&lt;&lt;<pos:position pos:line="12" pos:column="65"/></operator> <name pos:line="12" pos:column="60">line<pos:position pos:line="12" pos:column="64"/></name></expr></argument>)<pos:position pos:line="12" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">dlinkDelete<pos:position pos:line="13" pos:column="16"/></name><argument_list pos:line="13" pos:column="16">(<argument><expr><operator pos:line="13" pos:column="17">&amp;<pos:position pos:line="13" pos:column="22"/></operator><name><name pos:line="13" pos:column="18">c<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="21">link<pos:position pos:line="13" pos:column="25"/></name></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="27">&amp;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="28">cbdataEntries<pos:position pos:line="13" pos:column="41"/></name></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>
<cpp:else pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">else<pos:position pos:line="14" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">debugs<pos:position pos:line="15" pos:column="11"/></name><argument_list pos:line="15" pos:column="11">(<argument><expr><literal type="number" pos:line="15" pos:column="12">45<pos:position pos:line="15" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="16">9<pos:position pos:line="15" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="19">"Freeing "<pos:position pos:line="15" pos:column="29"/></literal> <operator pos:line="15" pos:column="30">&lt;&lt;<pos:position pos:line="15" pos:column="38"/></operator> <name pos:line="15" pos:column="33">p<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">if<pos:position pos:line="18" pos:column="4"/></cpp:directive> <expr><name pos:line="18" pos:column="5">WITH_VALGRIND<pos:position pos:line="18" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name><name pos:line="19" pos:column="5">cbdata_htable<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">.<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="19">erase<pos:position pos:line="19" pos:column="24"/></name></name><argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">p<pos:position pos:line="19" pos:column="26"/></name></expr></argument>)<pos:position pos:line="19" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="20" pos:column="5">delete<pos:position pos:line="20" pos:column="11"/></operator> <name pos:line="20" pos:column="12">c<pos:position pos:line="20" pos:column="13"/></name></expr>;<pos:position pos:line="20" pos:column="14"/></expr_stmt>
<cpp:else pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">else<pos:position pos:line="21" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="22" pos:column="5">/* This is ugly. But: operator delete doesn't get
     * the type parameter, so we can't use that
     * to free the memory.
     * So, we free it ourselves.
     * Note that this means a non-placement
     * new would be a seriously bad idea.
     * Lastly, if we where a templated class,
     * we could use the normal delete operator
     * and it would Just Work. RBC 20030902
     */</comment>
    <expr_stmt><expr><call><name><name pos:line="32" pos:column="5">c<pos:position pos:line="32" pos:column="6"/></name><operator pos:line="32" pos:column="6">-&gt;<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="8">cbdata<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">::<pos:position pos:line="32" pos:column="16"/></operator>~<name pos:line="32" pos:column="17">cbdata<pos:position pos:line="32" pos:column="23"/></name></name><argument_list pos:line="32" pos:column="23">()<pos:position pos:line="32" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
