<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4098_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">Ssl<pos:position pos:line="1" pos:column="9"/></name><operator pos:line="1" pos:column="9">::<pos:position pos:line="1" pos:column="11"/></operator><name pos:line="1" pos:column="11">Helper<pos:position pos:line="1" pos:column="17"/></name><operator pos:line="1" pos:column="17">::<pos:position pos:line="1" pos:column="19"/></operator><name pos:line="1" pos:column="19">Init<pos:position pos:line="1" pos:column="23"/></name></name><parameter_list pos:line="1" pos:column="23">()<pos:position pos:line="1" pos:column="25"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">ssl_crtd<pos:position pos:line="3" pos:column="17"/></name> <operator pos:line="3" pos:column="18">==<pos:position pos:line="3" pos:column="20"/></operator> <name pos:line="3" pos:column="21">NULL<pos:position pos:line="3" pos:column="25"/></name></expr>)<pos:position pos:line="3" pos:column="26"/></condition><then pos:line="3" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name pos:line="4" pos:column="9">ssl_crtd<pos:position pos:line="4" pos:column="17"/></name> <operator pos:line="4" pos:column="18">=<pos:position pos:line="4" pos:column="19"/></operator> <call><name pos:line="4" pos:column="20">helperCreate<pos:position pos:line="4" pos:column="32"/></name><argument_list pos:line="4" pos:column="32">(<argument><expr><literal type="string" pos:line="4" pos:column="33">"ssl_crtd"<pos:position pos:line="4" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="45"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="5" pos:column="5">ssl_crtd<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">-&gt;<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="15">n_to_start<pos:position pos:line="5" pos:column="25"/></name></name> <operator pos:line="5" pos:column="26">=<pos:position pos:line="5" pos:column="27"/></operator> <name><name pos:line="5" pos:column="28">Ssl<pos:position pos:line="5" pos:column="31"/></name><operator pos:line="5" pos:column="31">::<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="33">TheConfig<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">.<pos:position pos:line="5" pos:column="43"/></operator><name pos:line="5" pos:column="43">ssl_crtd_n_running<pos:position pos:line="5" pos:column="61"/></name></name></expr>;<pos:position pos:line="5" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">ssl_crtd<pos:position pos:line="6" pos:column="13"/></name><operator pos:line="6" pos:column="13">-&gt;<pos:position pos:line="6" pos:column="18"/></operator><name pos:line="6" pos:column="15">ipc_type<pos:position pos:line="6" pos:column="23"/></name></name> <operator pos:line="6" pos:column="24">=<pos:position pos:line="6" pos:column="25"/></operator> <name pos:line="6" pos:column="26">IPC_STREAM<pos:position pos:line="6" pos:column="36"/></name></expr>;<pos:position pos:line="6" pos:column="37"/></expr_stmt>
    <comment type="line" pos:line="7" pos:column="5">// The crtd messages may contain the eol ('\n') character. We are</comment>
    <comment type="line" pos:line="8" pos:column="5">// going to use the '\1' char as the end-of-message mark.</comment>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">ssl_crtd<pos:position pos:line="9" pos:column="13"/></name><operator pos:line="9" pos:column="13">-&gt;<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="15">eom<pos:position pos:line="9" pos:column="18"/></name></name> <operator pos:line="9" pos:column="19">=<pos:position pos:line="9" pos:column="20"/></operator> <literal type="char" pos:line="9" pos:column="21">'\1'<pos:position pos:line="9" pos:column="25"/></literal></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">assert<pos:position pos:line="10" pos:column="11"/></name><argument_list pos:line="10" pos:column="11">(<argument><expr><name><name pos:line="10" pos:column="12">ssl_crtd<pos:position pos:line="10" pos:column="20"/></name><operator pos:line="10" pos:column="20">-&gt;<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="22">cmdline<pos:position pos:line="10" pos:column="29"/></name></name> <operator pos:line="10" pos:column="30">==<pos:position pos:line="10" pos:column="32"/></operator> <name pos:line="10" pos:column="33">NULL<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="39"/></expr_stmt>
    <block pos:line="11" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">tmp<pos:position pos:line="12" pos:column="18"/></name> <init pos:line="12" pos:column="19">= <expr><call><name pos:line="12" pos:column="21">xstrdup<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name><name pos:line="12" pos:column="29">Ssl<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">::<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">TheConfig<pos:position pos:line="12" pos:column="43"/></name><operator pos:line="12" pos:column="43">.<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="44">ssl_crtd<pos:position pos:line="12" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="54"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name> <modifier pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></modifier></type><name pos:line="13" pos:column="15">tmp_begin<pos:position pos:line="13" pos:column="24"/></name> <init pos:line="13" pos:column="25">= <expr><name pos:line="13" pos:column="27">tmp<pos:position pos:line="13" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="31"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type> <name pos:line="14" pos:column="16">token<pos:position pos:line="14" pos:column="21"/></name> <init pos:line="14" pos:column="22">= <expr><name pos:line="14" pos:column="24">NULL<pos:position pos:line="14" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">bool<pos:position pos:line="15" pos:column="13"/></name></type> <name pos:line="15" pos:column="14">db_path_was_found<pos:position pos:line="15" pos:column="31"/></name> <init pos:line="15" pos:column="32">= <expr><literal type="boolean" pos:line="15" pos:column="34">false<pos:position pos:line="15" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="40"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">bool<pos:position pos:line="16" pos:column="13"/></name></type> <name pos:line="16" pos:column="14">block_size_was_found<pos:position pos:line="16" pos:column="34"/></name> <init pos:line="16" pos:column="35">= <expr><literal type="boolean" pos:line="16" pos:column="37">false<pos:position pos:line="16" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="43"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name></type> <name><name pos:line="17" pos:column="14">buffer<pos:position pos:line="17" pos:column="20"/></name><index pos:line="17" pos:column="20">[<expr><literal type="number" pos:line="17" pos:column="21">20<pos:position pos:line="17" pos:column="23"/></literal></expr>]<pos:position pos:line="17" pos:column="24"/></index></name> <init pos:line="17" pos:column="25">= <expr><literal type="string" pos:line="17" pos:column="27">"2048"<pos:position pos:line="17" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="34"/></decl_stmt>
        <while pos:line="18" pos:column="9">while <condition pos:line="18" pos:column="15">(<expr><operator pos:line="18" pos:column="16">(<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="17">token<pos:position pos:line="18" pos:column="22"/></name> <operator pos:line="18" pos:column="23">=<pos:position pos:line="18" pos:column="24"/></operator> <call><name pos:line="18" pos:column="25">strwordtok<pos:position pos:line="18" pos:column="35"/></name><argument_list pos:line="18" pos:column="35">(<argument><expr><name pos:line="18" pos:column="36">NULL<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="42">&amp;<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="43">tmp<pos:position pos:line="18" pos:column="46"/></name></expr></argument>)<pos:position pos:line="18" pos:column="47"/></argument_list></call><operator pos:line="18" pos:column="47">)<pos:position pos:line="18" pos:column="48"/></operator></expr>)<pos:position pos:line="18" pos:column="49"/></condition> <block pos:line="18" pos:column="50">{
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">wordlistAdd<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><operator pos:line="19" pos:column="25">&amp;<pos:position pos:line="19" pos:column="30"/></operator><name><name pos:line="19" pos:column="26">ssl_crtd<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">-&gt;<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="36">cmdline<pos:position pos:line="19" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="45">token<pos:position pos:line="19" pos:column="50"/></name></expr></argument>)<pos:position pos:line="19" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="52"/></expr_stmt>
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><operator pos:line="20" pos:column="17">!<pos:position pos:line="20" pos:column="18"/></operator><call><name pos:line="20" pos:column="18">strcmp<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><name pos:line="20" pos:column="25">token<pos:position pos:line="20" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="32">"-b"<pos:position pos:line="20" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38">
                <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">block_size_was_found<pos:position pos:line="21" pos:column="37"/></name> <operator pos:line="21" pos:column="38">=<pos:position pos:line="21" pos:column="39"/></operator> <literal type="boolean" pos:line="21" pos:column="40">true<pos:position pos:line="21" pos:column="44"/></literal></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt></block></then></if>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><operator pos:line="22" pos:column="17">!<pos:position pos:line="22" pos:column="18"/></operator><call><name pos:line="22" pos:column="18">strcmp<pos:position pos:line="22" pos:column="24"/></name><argument_list pos:line="22" pos:column="24">(<argument><expr><name pos:line="22" pos:column="25">token<pos:position pos:line="22" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="32">"-s"<pos:position pos:line="22" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38"> <block pos:line="22" pos:column="39">{
                <expr_stmt><expr><name pos:line="23" pos:column="17">db_path_was_found<pos:position pos:line="23" pos:column="34"/></name> <operator pos:line="23" pos:column="35">=<pos:position pos:line="23" pos:column="36"/></operator> <literal type="boolean" pos:line="23" pos:column="37">true<pos:position pos:line="23" pos:column="41"/></literal></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="24" pos:column="14"/></block></then> <elseif pos:line="24" pos:column="15">else <if pos:line="24" pos:column="20">if <condition pos:line="24" pos:column="23">(<expr><name pos:line="24" pos:column="24">db_path_was_found<pos:position pos:line="24" pos:column="41"/></name></expr>)<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42"> <block pos:line="24" pos:column="43">{
                <expr_stmt><expr><name pos:line="25" pos:column="17">db_path_was_found<pos:position pos:line="25" pos:column="34"/></name> <operator pos:line="25" pos:column="35">=<pos:position pos:line="25" pos:column="36"/></operator> <literal type="boolean" pos:line="25" pos:column="37">false<pos:position pos:line="25" pos:column="42"/></literal></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
                <decl_stmt><decl><type><name pos:line="26" pos:column="17">int<pos:position pos:line="26" pos:column="20"/></name></type> <name pos:line="26" pos:column="21">fs_block_size<pos:position pos:line="26" pos:column="34"/></name> <init pos:line="26" pos:column="35">= <expr><literal type="number" pos:line="26" pos:column="37">0<pos:position pos:line="26" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="39"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="27" pos:column="17">storeDirGetBlkSize<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">token<pos:position pos:line="27" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="43">&amp;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="44">fs_block_size<pos:position pos:line="27" pos:column="57"/></name></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="28" pos:column="17">snprintf<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><name pos:line="28" pos:column="26">buffer<pos:position pos:line="28" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="34">sizeof<argument_list pos:line="28" pos:column="40">(<argument><expr><name pos:line="28" pos:column="41">buffer<pos:position pos:line="28" pos:column="47"/></name></expr></argument>)<pos:position pos:line="28" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="50">"%i"<pos:position pos:line="28" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="56">fs_block_size<pos:position pos:line="28" pos:column="69"/></name></expr></argument>)<pos:position pos:line="28" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="71"/></expr_stmt>
            }<pos:position pos:line="29" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="30" pos:column="10"/></block></while>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">block_size_was_found<pos:position pos:line="31" pos:column="34"/></name></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35"> <block pos:line="31" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">wordlistAdd<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><operator pos:line="32" pos:column="25">&amp;<pos:position pos:line="32" pos:column="30"/></operator><name><name pos:line="32" pos:column="26">ssl_crtd<pos:position pos:line="32" pos:column="34"/></name><operator pos:line="32" pos:column="34">-&gt;<pos:position pos:line="32" pos:column="39"/></operator><name pos:line="32" pos:column="36">cmdline<pos:position pos:line="32" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="45">"-b"<pos:position pos:line="32" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">wordlistAdd<pos:position pos:line="33" pos:column="24"/></name><argument_list pos:line="33" pos:column="24">(<argument><expr><operator pos:line="33" pos:column="25">&amp;<pos:position pos:line="33" pos:column="30"/></operator><name><name pos:line="33" pos:column="26">ssl_crtd<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">-&gt;<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="36">cmdline<pos:position pos:line="33" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="45">buffer<pos:position pos:line="33" pos:column="51"/></name></expr></argument>)<pos:position pos:line="33" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">safe_free<pos:position pos:line="35" pos:column="18"/></name><argument_list pos:line="35" pos:column="18">(<argument><expr><name pos:line="35" pos:column="19">tmp_begin<pos:position pos:line="35" pos:column="28"/></name></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">helperOpenServers<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">ssl_crtd<pos:position pos:line="37" pos:column="31"/></name></expr></argument>)<pos:position pos:line="37" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="33"/></expr_stmt>
}<pos:position pos:line="38" pos:column="2"/></block></function></unit>
