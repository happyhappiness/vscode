<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3585_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">request<pos:position pos:line="4" pos:column="17"/></name><index pos:line="4" pos:column="17">[<expr><literal type="number" pos:line="4" pos:column="18">512<pos:position pos:line="4" pos:column="21"/></literal></expr>]<pos:position pos:line="4" pos:column="22"/></index></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">t<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><name pos:line="5" pos:column="15">NULL<pos:position pos:line="5" pos:column="19"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">c<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">opt_s<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><literal type="number" pos:line="7" pos:column="17">0<pos:position pos:line="7" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>

<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">HAVE_RES_INIT<pos:position pos:line="9" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">res_init<pos:position pos:line="10" pos:column="13"/></name><argument_list pos:line="10" pos:column="13">()<pos:position pos:line="10" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><name pos:line="13" pos:column="5">USE_IPV6<pos:position pos:line="13" pos:column="13"/></name></expr></cpp:if>
    <comment type="block" pos:line="14" pos:column="5">/* perform AAAA lookups *before* A lookups in IPv6 mode. */</comment>
    <expr_stmt><expr><name><name pos:line="15" pos:column="5">_res<pos:position pos:line="15" pos:column="9"/></name><operator pos:line="15" pos:column="9">.<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">options<pos:position pos:line="15" pos:column="17"/></name></name> <operator pos:line="15" pos:column="18">|=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">RES_USE_INET6<pos:position pos:line="15" pos:column="34"/></name></expr>;<pos:position pos:line="15" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

    <while pos:line="18" pos:column="5">while <condition pos:line="18" pos:column="11">(<expr><operator pos:line="18" pos:column="12">(<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">c<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">=<pos:position pos:line="18" pos:column="16"/></operator> <call><name pos:line="18" pos:column="17">getopt<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name pos:line="18" pos:column="24">argc<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">argv<pos:position pos:line="18" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="36">"Dhs:v"<pos:position pos:line="18" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call><operator pos:line="18" pos:column="44">)<pos:position pos:line="18" pos:column="45"/></operator> <operator pos:line="18" pos:column="46">!=<pos:position pos:line="18" pos:column="48"/></operator> <operator pos:line="18" pos:column="49">-<pos:position pos:line="18" pos:column="50"/></operator><literal type="number" pos:line="18" pos:column="50">1<pos:position pos:line="18" pos:column="51"/></literal></expr>)<pos:position pos:line="18" pos:column="52"/></condition> <block pos:line="18" pos:column="53">{
        <switch pos:line="19" pos:column="9">switch <condition pos:line="19" pos:column="16">(<expr><name pos:line="19" pos:column="17">c<pos:position pos:line="19" pos:column="18"/></name></expr>)<pos:position pos:line="19" pos:column="19"/></condition> <block pos:line="19" pos:column="20">{

        <case pos:line="21" pos:column="9">case <expr><literal type="char" pos:line="21" pos:column="14">'D'<pos:position pos:line="21" pos:column="17"/></literal></expr>:<pos:position pos:line="21" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">fprintf<pos:position pos:line="22" pos:column="20"/></name><argument_list pos:line="22" pos:column="20">(<argument><expr><name pos:line="22" pos:column="21">stderr<pos:position pos:line="22" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="29">"-D is now default behaviour from this tool.\n"<pos:position pos:line="22" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="78"/></expr_stmt>
            <break pos:line="23" pos:column="13">break;<pos:position pos:line="23" pos:column="19"/></break>

        <case pos:line="25" pos:column="9">case <expr><literal type="char" pos:line="25" pos:column="14">'s'<pos:position pos:line="25" pos:column="17"/></literal></expr>:<pos:position pos:line="25" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">squid_res_setservers<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name pos:line="26" pos:column="34">opt_s<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name pos:line="27" pos:column="13">opt_s<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <literal type="number" pos:line="27" pos:column="21">1<pos:position pos:line="27" pos:column="22"/></literal></expr>;<pos:position pos:line="27" pos:column="23"/></expr_stmt>
            <break pos:line="28" pos:column="13">break;<pos:position pos:line="28" pos:column="19"/></break>

        <case pos:line="30" pos:column="9">case <expr><literal type="char" pos:line="30" pos:column="14">'v'<pos:position pos:line="30" pos:column="17"/></literal></expr>:<pos:position pos:line="30" pos:column="18"/></case>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">printf<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><literal type="string" pos:line="31" pos:column="20">"dnsserver version %s\n"<pos:position pos:line="31" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="46">VERSION<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="55"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="33" pos:column="13">exit<pos:position pos:line="33" pos:column="17"/></name><argument_list pos:line="33" pos:column="17">(<argument><expr><literal type="number" pos:line="33" pos:column="18">0<pos:position pos:line="33" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>

            <break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break>

        <case pos:line="37" pos:column="9">case <expr><literal type="char" pos:line="37" pos:column="14">'h'<pos:position pos:line="37" pos:column="17"/></literal></expr>:<pos:position pos:line="37" pos:column="18"/></case>

        <default pos:line="39" pos:column="9">default:<pos:position pos:line="39" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">usage<pos:position pos:line="40" pos:column="18"/></name><argument_list pos:line="40" pos:column="18">()<pos:position pos:line="40" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="42" pos:column="13">exit<pos:position pos:line="42" pos:column="17"/></name><argument_list pos:line="42" pos:column="17">(<argument><expr><literal type="number" pos:line="42" pos:column="18">1<pos:position pos:line="42" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>

            <break pos:line="44" pos:column="13">break;<pos:position pos:line="44" pos:column="19"/></break>
        }<pos:position pos:line="45" pos:column="10"/></block></switch>
    }<pos:position pos:line="46" pos:column="6"/></block></while>

<cpp:ifdef pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">ifdef<pos:position pos:line="48" pos:column="7"/></cpp:directive> <name pos:line="48" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="48" pos:column="21"/></name></cpp:ifdef>
    <block pos:line="49" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">WSADATA<pos:position pos:line="50" pos:column="16"/></name></type> <name pos:line="50" pos:column="17">wsaData<pos:position pos:line="50" pos:column="24"/></name></decl>;<pos:position pos:line="50" pos:column="25"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="52" pos:column="9">WSAStartup<pos:position pos:line="52" pos:column="19"/></name><argument_list pos:line="52" pos:column="19">(<argument><expr><literal type="number" pos:line="52" pos:column="20">2<pos:position pos:line="52" pos:column="21"/></literal></expr></argument>, <argument><expr><operator pos:line="52" pos:column="23">&amp;<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="24">wsaData<pos:position pos:line="52" pos:column="31"/></name></expr></argument>)<pos:position pos:line="52" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">fflush<pos:position pos:line="55" pos:column="11"/></name><argument_list pos:line="55" pos:column="11">(<argument><expr><name pos:line="55" pos:column="12">stderr<pos:position pos:line="55" pos:column="18"/></name></expr></argument>)<pos:position pos:line="55" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif<pos:position pos:line="56" pos:column="7"/></cpp:directive></cpp:endif>

    <for pos:line="58" pos:column="5">for <control pos:line="58" pos:column="9">(<init pos:line="58" pos:column="10">;<pos:position pos:line="58" pos:column="11"/></init><condition pos:line="58" pos:column="11">;<pos:position pos:line="58" pos:column="12"/></condition><incr/>)<pos:position pos:line="58" pos:column="13"/></control> <block pos:line="58" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">memset<pos:position pos:line="59" pos:column="15"/></name><argument_list pos:line="59" pos:column="15">(<argument><expr><name pos:line="59" pos:column="16">request<pos:position pos:line="59" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="59" pos:column="25">'\0'<pos:position pos:line="59" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="31">REQ_SZ<pos:position pos:line="59" pos:column="37"/></name></expr></argument>)<pos:position pos:line="59" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="39"/></expr_stmt>

        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><call><name pos:line="61" pos:column="13">fgets<pos:position pos:line="61" pos:column="18"/></name><argument_list pos:line="61" pos:column="18">(<argument><expr><name pos:line="61" pos:column="19">request<pos:position pos:line="61" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="28">REQ_SZ<pos:position pos:line="61" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="36">stdin<pos:position pos:line="61" pos:column="41"/></name></expr></argument>)<pos:position pos:line="61" pos:column="42"/></argument_list></call> <operator pos:line="61" pos:column="43">==<pos:position pos:line="61" pos:column="45"/></operator> <name pos:line="61" pos:column="46">NULL<pos:position pos:line="61" pos:column="50"/></name></expr>)<pos:position pos:line="61" pos:column="51"/></condition><then pos:line="61" pos:column="51"> <block pos:line="61" pos:column="52">{
<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">_SQUID_MSWIN_<pos:position pos:line="62" pos:column="21"/></name></cpp:ifdef>
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">WSACleanup<pos:position pos:line="63" pos:column="23"/></name><argument_list pos:line="63" pos:column="23">()<pos:position pos:line="63" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">endif<pos:position pos:line="64" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">exit<pos:position pos:line="65" pos:column="17"/></name><argument_list pos:line="65" pos:column="17">(<argument><expr><literal type="number" pos:line="65" pos:column="18">1<pos:position pos:line="65" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="66" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="68" pos:column="9">t<pos:position pos:line="68" pos:column="10"/></name> <operator pos:line="68" pos:column="11">=<pos:position pos:line="68" pos:column="12"/></operator> <call><name pos:line="68" pos:column="13">strrchr<pos:position pos:line="68" pos:column="20"/></name><argument_list pos:line="68" pos:column="20">(<argument><expr><name pos:line="68" pos:column="21">request<pos:position pos:line="68" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="68" pos:column="30">'\n'<pos:position pos:line="68" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="36"/></expr_stmt>

        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">t<pos:position pos:line="70" pos:column="14"/></name> <operator pos:line="70" pos:column="15">==<pos:position pos:line="70" pos:column="17"/></operator> <name pos:line="70" pos:column="18">NULL<pos:position pos:line="70" pos:column="22"/></name></expr>)<pos:position pos:line="70" pos:column="23"/></condition><then pos:line="70" pos:column="23">		<comment type="block" pos:line="70" pos:column="33">/* Ignore if no newline */</comment>
            <block type="pseudo"><continue pos:line="71" pos:column="13">continue;<pos:position pos:line="71" pos:column="22"/></continue></block></then></if>

        <expr_stmt><expr><operator pos:line="73" pos:column="9">*<pos:position pos:line="73" pos:column="10"/></operator><name pos:line="73" pos:column="10">t<pos:position pos:line="73" pos:column="11"/></name> <operator pos:line="73" pos:column="12">=<pos:position pos:line="73" pos:column="13"/></operator> <literal type="char" pos:line="73" pos:column="14">'\0'<pos:position pos:line="73" pos:column="18"/></literal></expr>;<pos:position pos:line="73" pos:column="19"/></expr_stmt>		<comment type="block" pos:line="73" pos:column="33">/* strip NL */</comment>

        <if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><operator pos:line="75" pos:column="13">(<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="14">t<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">=<pos:position pos:line="75" pos:column="17"/></operator> <call><name pos:line="75" pos:column="18">strrchr<pos:position pos:line="75" pos:column="25"/></name><argument_list pos:line="75" pos:column="25">(<argument><expr><name pos:line="75" pos:column="26">request<pos:position pos:line="75" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="75" pos:column="35">'\r'<pos:position pos:line="75" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="40"/></argument_list></call><operator pos:line="75" pos:column="40">)<pos:position pos:line="75" pos:column="41"/></operator> <operator pos:line="75" pos:column="42">!=<pos:position pos:line="75" pos:column="44"/></operator> <name pos:line="75" pos:column="45">NULL<pos:position pos:line="75" pos:column="49"/></name></expr>)<pos:position pos:line="75" pos:column="50"/></condition><then pos:line="75" pos:column="50">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="76" pos:column="13">*<pos:position pos:line="76" pos:column="14"/></operator><name pos:line="76" pos:column="14">t<pos:position pos:line="76" pos:column="15"/></name> <operator pos:line="76" pos:column="16">=<pos:position pos:line="76" pos:column="17"/></operator> <literal type="char" pos:line="76" pos:column="18">'\0'<pos:position pos:line="76" pos:column="22"/></literal></expr>;<pos:position pos:line="76" pos:column="23"/></expr_stmt></block></then></if>		<comment type="block" pos:line="76" pos:column="33">/* strip CR */</comment>

        <expr_stmt><expr><call><name pos:line="78" pos:column="9">lookup<pos:position pos:line="78" pos:column="15"/></name><argument_list pos:line="78" pos:column="15">(<argument><expr><name pos:line="78" pos:column="16">request<pos:position pos:line="78" pos:column="23"/></name></expr></argument>)<pos:position pos:line="78" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="25"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="80" pos:column="9">fflush<pos:position pos:line="80" pos:column="15"/></name><argument_list pos:line="80" pos:column="15">(<argument><expr><name pos:line="80" pos:column="16">stdout<pos:position pos:line="80" pos:column="22"/></name></expr></argument>)<pos:position pos:line="80" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="81" pos:column="6"/></block></for>

    <comment type="block" pos:line="83" pos:column="5">/* NOTREACHED */</comment>
    <return pos:line="84" pos:column="5">return <expr><literal type="number" pos:line="84" pos:column="12">0<pos:position pos:line="84" pos:column="13"/></literal></expr>;<pos:position pos:line="84" pos:column="14"/></return>
}<pos:position pos:line="85" pos:column="2"/></block></function></unit>
