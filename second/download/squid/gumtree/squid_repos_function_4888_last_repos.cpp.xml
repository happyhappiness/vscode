<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4888_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Http<pos:position pos:line="2" pos:column="5"/></name><operator pos:line="2" pos:column="5">::<pos:position pos:line="2" pos:column="7"/></operator><name pos:line="2" pos:column="7">One<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">RequestParser<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">parseHttpVersionField<pos:position pos:line="2" pos:column="48"/></name></name><parameter_list pos:line="2" pos:column="48">(<parameter><decl><type><name><name pos:line="2" pos:column="49">Http1<pos:position pos:line="2" pos:column="54"/></name><operator pos:line="2" pos:column="54">::<pos:position pos:line="2" pos:column="56"/></operator><name pos:line="2" pos:column="56">Tokenizer<pos:position pos:line="2" pos:column="65"/></name></name> <modifier pos:line="2" pos:column="66">&amp;<pos:position pos:line="2" pos:column="71"/></modifier></type><name pos:line="2" pos:column="67">tok<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><specifier pos:line="4" pos:column="12">const<pos:position pos:line="4" pos:column="17"/></specifier> <name pos:line="4" pos:column="18">SBuf<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">http1p0<pos:position pos:line="4" pos:column="30"/></name><argument_list pos:line="4" pos:column="30">(<argument><expr><literal type="string" pos:line="4" pos:column="31">"HTTP/1.0"<pos:position pos:line="4" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><specifier pos:line="5" pos:column="12">const<pos:position pos:line="5" pos:column="17"/></specifier> <name pos:line="5" pos:column="18">SBuf<pos:position pos:line="5" pos:column="22"/></name></type> <name pos:line="5" pos:column="23">http1p1<pos:position pos:line="5" pos:column="30"/></name><argument_list pos:line="5" pos:column="30">(<argument><expr><literal type="string" pos:line="5" pos:column="31">"HTTP/1.1"<pos:position pos:line="5" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="42"/></argument_list></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <specifier pos:line="6" pos:column="11">auto<pos:position pos:line="6" pos:column="15"/></specifier></type> <name pos:line="6" pos:column="16">savedTok<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><name pos:line="6" pos:column="27">tok<pos:position pos:line="6" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>

    <comment type="line" pos:line="8" pos:column="5">// Optimization: Expect (and quickly parse) HTTP/1.1 or HTTP/1.0 in</comment>
    <comment type="line" pos:line="9" pos:column="5">// the vast majority of cases.</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name><name pos:line="10" pos:column="9">tok<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">.<pos:position pos:line="10" pos:column="13"/></operator><name pos:line="10" pos:column="13">skipSuffix<pos:position pos:line="10" pos:column="23"/></name></name><argument_list pos:line="10" pos:column="23">(<argument><expr><name pos:line="10" pos:column="24">http1p1<pos:position pos:line="10" pos:column="31"/></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="33"/></condition><then pos:line="10" pos:column="33"> <block pos:line="10" pos:column="34">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">msgProtocol_<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">=<pos:position pos:line="11" pos:column="23"/></operator> <call><name><name pos:line="11" pos:column="24">Http<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">::<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">ProtocolVersion<pos:position pos:line="11" pos:column="45"/></name></name><argument_list pos:line="11" pos:column="45">(<argument><expr><literal type="number" pos:line="11" pos:column="46">1<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="49">1<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><literal type="boolean" pos:line="12" pos:column="16">true<pos:position pos:line="12" pos:column="20"/></literal></expr>;<pos:position pos:line="12" pos:column="21"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <elseif pos:line="13" pos:column="7">else <if pos:line="13" pos:column="12">if <condition pos:line="13" pos:column="15">(<expr><call><name><name pos:line="13" pos:column="16">tok<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">skipSuffix<pos:position pos:line="13" pos:column="30"/></name></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name pos:line="13" pos:column="31">http1p0<pos:position pos:line="13" pos:column="38"/></name></expr></argument>)<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="40"/></condition><then pos:line="13" pos:column="40"> <block pos:line="13" pos:column="41">{
        <expr_stmt><expr><name pos:line="14" pos:column="9">msgProtocol_<pos:position pos:line="14" pos:column="21"/></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <call><name><name pos:line="14" pos:column="24">Http<pos:position pos:line="14" pos:column="28"/></name><operator pos:line="14" pos:column="28">::<pos:position pos:line="14" pos:column="30"/></operator><name pos:line="14" pos:column="30">ProtocolVersion<pos:position pos:line="14" pos:column="45"/></name></name><argument_list pos:line="14" pos:column="45">(<argument><expr><literal type="number" pos:line="14" pos:column="46">1<pos:position pos:line="14" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="49">0<pos:position pos:line="14" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="52"/></expr_stmt>
        <return pos:line="15" pos:column="9">return <expr><literal type="boolean" pos:line="15" pos:column="16">true<pos:position pos:line="15" pos:column="20"/></literal></expr>;<pos:position pos:line="15" pos:column="21"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if></elseif> <else pos:line="16" pos:column="7">else <block pos:line="16" pos:column="12">{
        <comment type="line" pos:line="17" pos:column="9">// RFC 7230 section 2.6:</comment>
        <comment type="line" pos:line="18" pos:column="9">// HTTP-version  = HTTP-name "/" DIGIT "." DIGIT</comment>
        <decl_stmt><decl><specifier pos:line="19" pos:column="9">static<pos:position pos:line="19" pos:column="15"/></specifier> <type><specifier pos:line="19" pos:column="16">const<pos:position pos:line="19" pos:column="21"/></specifier> <name pos:line="19" pos:column="22">CharacterSet<pos:position pos:line="19" pos:column="34"/></name></type> <name pos:line="19" pos:column="35">period<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><literal type="string" pos:line="19" pos:column="42">"Decimal point"<pos:position pos:line="19" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="59">"."<pos:position pos:line="19" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="63"/></argument_list></decl>;<pos:position pos:line="19" pos:column="64"/></decl_stmt>
        <decl_stmt><decl><specifier pos:line="20" pos:column="9">static<pos:position pos:line="20" pos:column="15"/></specifier> <type><specifier pos:line="20" pos:column="16">const<pos:position pos:line="20" pos:column="21"/></specifier> <name pos:line="20" pos:column="22">SBuf<pos:position pos:line="20" pos:column="26"/></name></type> <name pos:line="20" pos:column="27">proto<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><literal type="string" pos:line="20" pos:column="33">"HTTP/"<pos:position pos:line="20" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></decl>;<pos:position pos:line="20" pos:column="42"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="21" pos:column="9">SBuf<pos:position pos:line="21" pos:column="13"/></name></type> <name pos:line="21" pos:column="14">majorDigit<pos:position pos:line="21" pos:column="24"/></name></decl>;<pos:position pos:line="21" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">SBuf<pos:position pos:line="22" pos:column="13"/></name></type> <name pos:line="22" pos:column="14">minorDigit<pos:position pos:line="22" pos:column="24"/></name></decl>;<pos:position pos:line="22" pos:column="25"/></decl_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name><name pos:line="23" pos:column="13">tok<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">.<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="17">suffix<pos:position pos:line="23" pos:column="23"/></name></name><argument_list pos:line="23" pos:column="23">(<argument><expr><name pos:line="23" pos:column="24">minorDigit<pos:position pos:line="23" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="36">CharacterSet<pos:position pos:line="23" pos:column="48"/></name><operator pos:line="23" pos:column="48">::<pos:position pos:line="23" pos:column="50"/></operator><name pos:line="23" pos:column="50">DIGIT<pos:position pos:line="23" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call> <operator pos:line="23" pos:column="57">&amp;&amp;<pos:position pos:line="23" pos:column="67"/></operator>
                <call><name><name pos:line="24" pos:column="17">tok<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">.<pos:position pos:line="24" pos:column="21"/></operator><name pos:line="24" pos:column="21">skipOneTrailing<pos:position pos:line="24" pos:column="36"/></name></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name pos:line="24" pos:column="37">period<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call> <operator pos:line="24" pos:column="45">&amp;&amp;<pos:position pos:line="24" pos:column="55"/></operator>
                <call><name><name pos:line="25" pos:column="17">tok<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">.<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="21">suffix<pos:position pos:line="25" pos:column="27"/></name></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">majorDigit<pos:position pos:line="25" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="40">CharacterSet<pos:position pos:line="25" pos:column="52"/></name><operator pos:line="25" pos:column="52">::<pos:position pos:line="25" pos:column="54"/></operator><name pos:line="25" pos:column="54">DIGIT<pos:position pos:line="25" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="60"/></argument_list></call> <operator pos:line="25" pos:column="61">&amp;&amp;<pos:position pos:line="25" pos:column="71"/></operator>
                <call><name><name pos:line="26" pos:column="17">tok<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">.<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="21">skipSuffix<pos:position pos:line="26" pos:column="31"/></name></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">proto<pos:position pos:line="26" pos:column="37"/></name></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39"> <block pos:line="26" pos:column="40">{
            <decl_stmt><decl><type><specifier pos:line="27" pos:column="13">const<pos:position pos:line="27" pos:column="18"/></specifier> <name pos:line="27" pos:column="19">bool<pos:position pos:line="27" pos:column="23"/></name></type> <name pos:line="27" pos:column="24">multiDigits<pos:position pos:line="27" pos:column="35"/></name> <init pos:line="27" pos:column="36">= <expr><call><name><name pos:line="27" pos:column="38">majorDigit<pos:position pos:line="27" pos:column="48"/></name><operator pos:line="27" pos:column="48">.<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="49">length<pos:position pos:line="27" pos:column="55"/></name></name><argument_list pos:line="27" pos:column="55">()<pos:position pos:line="27" pos:column="57"/></argument_list></call> <operator pos:line="27" pos:column="58">&gt;<pos:position pos:line="27" pos:column="62"/></operator> <literal type="number" pos:line="27" pos:column="60">1<pos:position pos:line="27" pos:column="61"/></literal> <operator pos:line="27" pos:column="62">||<pos:position pos:line="27" pos:column="64"/></operator> <call><name><name pos:line="27" pos:column="65">minorDigit<pos:position pos:line="27" pos:column="75"/></name><operator pos:line="27" pos:column="75">.<pos:position pos:line="27" pos:column="76"/></operator><name pos:line="27" pos:column="76">length<pos:position pos:line="27" pos:column="82"/></name></name><argument_list pos:line="27" pos:column="82">()<pos:position pos:line="27" pos:column="84"/></argument_list></call> <operator pos:line="27" pos:column="85">&gt;<pos:position pos:line="27" pos:column="89"/></operator> <literal type="number" pos:line="27" pos:column="87">1<pos:position pos:line="27" pos:column="88"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="89"/></decl_stmt>
            <comment type="line" pos:line="28" pos:column="13">// use '0.0' for unsupported multiple digit version numbers</comment>
            <decl_stmt><decl><type><specifier pos:line="29" pos:column="13">const<pos:position pos:line="29" pos:column="18"/></specifier> <name pos:line="29" pos:column="19">unsigned<pos:position pos:line="29" pos:column="27"/></name> <name pos:line="29" pos:column="28">int<pos:position pos:line="29" pos:column="31"/></name></type> <name pos:line="29" pos:column="32">major<pos:position pos:line="29" pos:column="37"/></name> <init pos:line="29" pos:column="38">= <expr><ternary><condition><expr><name pos:line="29" pos:column="40">multiDigits<pos:position pos:line="29" pos:column="51"/></name></expr> ?<pos:position pos:line="29" pos:column="53"/></condition><then pos:line="29" pos:column="53"> <expr><literal type="number" pos:line="29" pos:column="54">0<pos:position pos:line="29" pos:column="55"/></literal></expr> <pos:position pos:line="29" pos:column="56"/></then><else pos:line="29" pos:column="56">: <expr><operator pos:line="29" pos:column="58">(<pos:position pos:line="29" pos:column="59"/></operator><operator pos:line="29" pos:column="59">*<pos:position pos:line="29" pos:column="60"/></operator><call><name><name pos:line="29" pos:column="60">majorDigit<pos:position pos:line="29" pos:column="70"/></name><operator pos:line="29" pos:column="70">.<pos:position pos:line="29" pos:column="71"/></operator><name pos:line="29" pos:column="71">rawContent<pos:position pos:line="29" pos:column="81"/></name></name><argument_list pos:line="29" pos:column="81">()<pos:position pos:line="29" pos:column="83"/></argument_list></call> <operator pos:line="29" pos:column="84">-<pos:position pos:line="29" pos:column="85"/></operator> <literal type="char" pos:line="29" pos:column="86">'0'<pos:position pos:line="29" pos:column="89"/></literal><operator pos:line="29" pos:column="89">)<pos:position pos:line="29" pos:column="90"/></operator></expr></else></ternary></expr></init></decl>;<pos:position pos:line="29" pos:column="91"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="30" pos:column="13">const<pos:position pos:line="30" pos:column="18"/></specifier> <name pos:line="30" pos:column="19">unsigned<pos:position pos:line="30" pos:column="27"/></name> <name pos:line="30" pos:column="28">int<pos:position pos:line="30" pos:column="31"/></name></type> <name pos:line="30" pos:column="32">minor<pos:position pos:line="30" pos:column="37"/></name> <init pos:line="30" pos:column="38">= <expr><ternary><condition><expr><name pos:line="30" pos:column="40">multiDigits<pos:position pos:line="30" pos:column="51"/></name></expr> ?<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53"> <expr><literal type="number" pos:line="30" pos:column="54">0<pos:position pos:line="30" pos:column="55"/></literal></expr> <pos:position pos:line="30" pos:column="56"/></then><else pos:line="30" pos:column="56">: <expr><operator pos:line="30" pos:column="58">(<pos:position pos:line="30" pos:column="59"/></operator><operator pos:line="30" pos:column="59">*<pos:position pos:line="30" pos:column="60"/></operator><call><name><name pos:line="30" pos:column="60">minorDigit<pos:position pos:line="30" pos:column="70"/></name><operator pos:line="30" pos:column="70">.<pos:position pos:line="30" pos:column="71"/></operator><name pos:line="30" pos:column="71">rawContent<pos:position pos:line="30" pos:column="81"/></name></name><argument_list pos:line="30" pos:column="81">()<pos:position pos:line="30" pos:column="83"/></argument_list></call> <operator pos:line="30" pos:column="84">-<pos:position pos:line="30" pos:column="85"/></operator> <literal type="char" pos:line="30" pos:column="86">'0'<pos:position pos:line="30" pos:column="89"/></literal><operator pos:line="30" pos:column="89">)<pos:position pos:line="30" pos:column="90"/></operator></expr></else></ternary></expr></init></decl>;<pos:position pos:line="30" pos:column="91"/></decl_stmt>
            <expr_stmt><expr><name pos:line="31" pos:column="13">msgProtocol_<pos:position pos:line="31" pos:column="25"/></name> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <call><name><name pos:line="31" pos:column="28">Http<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">::<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">ProtocolVersion<pos:position pos:line="31" pos:column="49"/></name></name><argument_list pos:line="31" pos:column="49">(<argument><expr><name pos:line="31" pos:column="50">major<pos:position pos:line="31" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="57">minor<pos:position pos:line="31" pos:column="62"/></name></expr></argument>)<pos:position pos:line="31" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="64"/></expr_stmt>
            <return pos:line="32" pos:column="13">return <expr><literal type="boolean" pos:line="32" pos:column="20">true<pos:position pos:line="32" pos:column="24"/></literal></expr>;<pos:position pos:line="32" pos:column="25"/></return>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>

    <comment type="line" pos:line="36" pos:column="5">// A GET request might use HTTP/0.9 syntax</comment>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><name pos:line="37" pos:column="9">method_<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">==<pos:position pos:line="37" pos:column="19"/></operator> <name><name pos:line="37" pos:column="20">Http<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">::<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="26">METHOD_GET<pos:position pos:line="37" pos:column="36"/></name></name></expr>)<pos:position pos:line="37" pos:column="37"/></condition><then pos:line="37" pos:column="37"> <block pos:line="37" pos:column="38">{
        <comment type="line" pos:line="38" pos:column="9">// RFC 1945 - no HTTP version field at all</comment>
        <expr_stmt><expr><name pos:line="39" pos:column="9">tok<pos:position pos:line="39" pos:column="12"/></name> <operator pos:line="39" pos:column="13">=<pos:position pos:line="39" pos:column="14"/></operator> <name pos:line="39" pos:column="15">savedTok<pos:position pos:line="39" pos:column="23"/></name></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt> <comment type="line" pos:line="39" pos:column="25">// in case the URI ends with a digit</comment>
        <comment type="line" pos:line="40" pos:column="9">// report this assumption as an error if configured to triage parsing</comment>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">debugs<pos:position pos:line="41" pos:column="15"/></name><argument_list pos:line="41" pos:column="15">(<argument><expr><literal type="number" pos:line="41" pos:column="16">33<pos:position pos:line="41" pos:column="18"/></literal></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="20">ErrorLevel<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">()<pos:position pos:line="41" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="34">"assuming HTTP/0.9 request-line"<pos:position pos:line="41" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name pos:line="42" pos:column="9">msgProtocol_<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">=<pos:position pos:line="42" pos:column="23"/></operator> <call><name><name pos:line="42" pos:column="24">Http<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">::<pos:position pos:line="42" pos:column="30"/></operator><name pos:line="42" pos:column="30">ProtocolVersion<pos:position pos:line="42" pos:column="45"/></name></name><argument_list pos:line="42" pos:column="45">(<argument><expr><literal type="number" pos:line="42" pos:column="46">0<pos:position pos:line="42" pos:column="47"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="42" pos:column="48">9<pos:position pos:line="42" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="51"/></expr_stmt>
        <return pos:line="43" pos:column="9">return <expr><literal type="boolean" pos:line="43" pos:column="16">true<pos:position pos:line="43" pos:column="20"/></literal></expr>;<pos:position pos:line="43" pos:column="21"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">debugs<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="number" pos:line="46" pos:column="12">33<pos:position pos:line="46" pos:column="14"/></literal></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="16">ErrorLevel<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">()<pos:position pos:line="46" pos:column="28"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="30">"invalid request-line: not HTTP"<pos:position pos:line="46" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><name pos:line="47" pos:column="5">parseStatusCode<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">=<pos:position pos:line="47" pos:column="22"/></operator> <name><name pos:line="47" pos:column="23">Http<pos:position pos:line="47" pos:column="27"/></name><operator pos:line="47" pos:column="27">::<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="29">scBadRequest<pos:position pos:line="47" pos:column="41"/></name></name></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt>
    <return pos:line="48" pos:column="5">return <expr><literal type="boolean" pos:line="48" pos:column="12">false<pos:position pos:line="48" pos:column="17"/></literal></expr>;<pos:position pos:line="48" pos:column="18"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
