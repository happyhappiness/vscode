<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3799_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">Bio<pos:position pos:line="2" pos:column="9"/></name><operator pos:line="2" pos:column="9">::<pos:position pos:line="2" pos:column="11"/></operator><name pos:line="2" pos:column="11">read<pos:position pos:line="2" pos:column="15"/></name></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">buf<pos:position pos:line="2" pos:column="25"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">size<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="37">BIO<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">table<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="48"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name pos:line="4" pos:column="5">errno<pos:position pos:line="4" pos:column="10"/></name> <operator pos:line="4" pos:column="11">=<pos:position pos:line="4" pos:column="12"/></operator> <literal type="number" pos:line="4" pos:column="13">0<pos:position pos:line="4" pos:column="14"/></literal></expr>;<pos:position pos:line="4" pos:column="15"/></expr_stmt>
<cpp:if pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">if<pos:position pos:line="5" pos:column="4"/></cpp:directive> <expr><name pos:line="5" pos:column="5">_SQUID_WINDOWS_<pos:position pos:line="5" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">int<pos:position pos:line="6" pos:column="14"/></name></type> <name pos:line="6" pos:column="15">result<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><call><name pos:line="6" pos:column="24">socket_read_method<pos:position pos:line="6" pos:column="42"/></name><argument_list pos:line="6" pos:column="42">(<argument><expr><name pos:line="6" pos:column="43">fd_<pos:position pos:line="6" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="48">buf<pos:position pos:line="6" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="53">size<pos:position pos:line="6" pos:column="57"/></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>
<cpp:else pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">else<pos:position pos:line="7" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">int<pos:position pos:line="8" pos:column="14"/></name></type> <name pos:line="8" pos:column="15">result<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><call><name pos:line="8" pos:column="24">default_read_method<pos:position pos:line="8" pos:column="43"/></name><argument_list pos:line="8" pos:column="43">(<argument><expr><name pos:line="8" pos:column="44">fd_<pos:position pos:line="8" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="49">buf<pos:position pos:line="8" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="54">size<pos:position pos:line="8" pos:column="58"/></name></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">int<pos:position pos:line="10" pos:column="14"/></name></type> <name pos:line="10" pos:column="15">xerrno<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><name pos:line="10" pos:column="24">errno<pos:position pos:line="10" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">debugs<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="number" pos:line="11" pos:column="12">83<pos:position pos:line="11" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="16">5<pos:position pos:line="11" pos:column="17"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="19">"FD "<pos:position pos:line="11" pos:column="24"/></literal> <operator pos:line="11" pos:column="25">&lt;&lt;<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="28">fd_<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">&lt;&lt;<pos:position pos:line="11" pos:column="40"/></operator> <literal type="string" pos:line="11" pos:column="35">" read "<pos:position pos:line="11" pos:column="43"/></literal> <operator pos:line="11" pos:column="44">&lt;&lt;<pos:position pos:line="11" pos:column="52"/></operator> <name pos:line="11" pos:column="47">result<pos:position pos:line="11" pos:column="53"/></name> <operator pos:line="11" pos:column="54">&lt;&lt;<pos:position pos:line="11" pos:column="62"/></operator> <literal type="string" pos:line="11" pos:column="57">" &lt;= "<pos:position pos:line="11" pos:column="66"/></literal> <operator pos:line="11" pos:column="64">&lt;&lt;<pos:position pos:line="11" pos:column="72"/></operator> <name pos:line="11" pos:column="67">size<pos:position pos:line="11" pos:column="71"/></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="73"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">BIO_clear_retry_flags<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">table<pos:position pos:line="13" pos:column="32"/></name></expr></argument>)<pos:position pos:line="13" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="34"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">result<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">&lt;<pos:position pos:line="14" pos:column="20"/></operator> <literal type="number" pos:line="14" pos:column="18">0<pos:position pos:line="14" pos:column="19"/></literal></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <name pos:line="15" pos:column="15">bool<pos:position pos:line="15" pos:column="19"/></name></type> <name pos:line="15" pos:column="20">ignoreError<pos:position pos:line="15" pos:column="31"/></name> <init pos:line="15" pos:column="32">= <expr><call><name pos:line="15" pos:column="34">ignoreErrno<pos:position pos:line="15" pos:column="45"/></name><argument_list pos:line="15" pos:column="45">(<argument><expr><name pos:line="15" pos:column="46">xerrno<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call> <operator pos:line="15" pos:column="54">!=<pos:position pos:line="15" pos:column="56"/></operator> <literal type="number" pos:line="15" pos:column="57">0<pos:position pos:line="15" pos:column="58"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="59"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">debugs<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="number" pos:line="16" pos:column="16">83<pos:position pos:line="16" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="20">5<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="23">"error: "<pos:position pos:line="16" pos:column="32"/></literal> <operator pos:line="16" pos:column="33">&lt;&lt;<pos:position pos:line="16" pos:column="41"/></operator> <name pos:line="16" pos:column="36">xerrno<pos:position pos:line="16" pos:column="42"/></name> <operator pos:line="16" pos:column="43">&lt;&lt;<pos:position pos:line="16" pos:column="51"/></operator> <literal type="string" pos:line="16" pos:column="46">" ignored: "<pos:position pos:line="16" pos:column="58"/></literal> <operator pos:line="16" pos:column="59">&lt;&lt;<pos:position pos:line="16" pos:column="67"/></operator> <name pos:line="16" pos:column="62">ignoreError<pos:position pos:line="16" pos:column="73"/></name></expr></argument>)<pos:position pos:line="16" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="75"/></expr_stmt>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">ignoreError<pos:position pos:line="17" pos:column="24"/></name></expr>)<pos:position pos:line="17" pos:column="25"/></condition><then pos:line="17" pos:column="25">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="18" pos:column="13">BIO_set_retry_read<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">table<pos:position pos:line="18" pos:column="37"/></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">result<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
