<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1007_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">DelaySpec<pos:position pos:line="2" pos:column="10"/></name><operator pos:line="2" pos:column="10">::<pos:position pos:line="2" pos:column="12"/></operator><name pos:line="2" pos:column="12">parse<pos:position pos:line="2" pos:column="17"/></name></name><parameter_list pos:line="2" pos:column="17">()<pos:position pos:line="2" pos:column="19"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// get the token.</comment>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">token<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><call><name><name pos:line="5" pos:column="19">ConfigParser<pos:position pos:line="5" pos:column="31"/></name><operator pos:line="5" pos:column="31">::<pos:position pos:line="5" pos:column="33"/></operator><name pos:line="5" pos:column="33">NextToken<pos:position pos:line="5" pos:column="42"/></name></name><argument_list pos:line="5" pos:column="42">()<pos:position pos:line="5" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="45"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">token<pos:position pos:line="6" pos:column="14"/></name> <operator pos:line="6" pos:column="15">==<pos:position pos:line="6" pos:column="17"/></operator> <name pos:line="6" pos:column="18">NULL<pos:position pos:line="6" pos:column="22"/></name></expr>)<pos:position pos:line="6" pos:column="23"/></condition><then pos:line="6" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="7" pos:column="9">self_destruct<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">()<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="9" pos:column="5">// no-limit value</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">strcmp<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">token<pos:position pos:line="10" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="23">"none"<pos:position pos:line="10" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call> <operator pos:line="10" pos:column="31">==<pos:position pos:line="10" pos:column="33"/></operator> <literal type="number" pos:line="10" pos:column="34">0<pos:position pos:line="10" pos:column="35"/></literal> <operator pos:line="10" pos:column="36">||<pos:position pos:line="10" pos:column="38"/></operator> <name><name pos:line="10" pos:column="39">token<pos:position pos:line="10" pos:column="44"/></name><index pos:line="10" pos:column="44">[<expr><literal type="number" pos:line="10" pos:column="45">0<pos:position pos:line="10" pos:column="46"/></literal></expr>]<pos:position pos:line="10" pos:column="47"/></index></name> <operator pos:line="10" pos:column="48">==<pos:position pos:line="10" pos:column="50"/></operator> <literal type="char" pos:line="10" pos:column="51">'-'<pos:position pos:line="10" pos:column="54"/></literal></expr>)<pos:position pos:line="10" pos:column="55"/></condition><then pos:line="10" pos:column="55"> <block pos:line="10" pos:column="56">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">restore_bps<pos:position pos:line="11" pos:column="20"/></name> <operator pos:line="11" pos:column="21">=<pos:position pos:line="11" pos:column="22"/></operator> <operator pos:line="11" pos:column="23">-<pos:position pos:line="11" pos:column="24"/></operator><literal type="number" pos:line="11" pos:column="24">1<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">max_bytes<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <operator pos:line="12" pos:column="21">-<pos:position pos:line="12" pos:column="22"/></operator><literal type="number" pos:line="12" pos:column="22">1<pos:position pos:line="12" pos:column="23"/></literal></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
        <return pos:line="13" pos:column="9">return;<pos:position pos:line="13" pos:column="16"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="line" pos:line="16" pos:column="5">// parse the first digits into restore_bps</comment>
    <decl_stmt><decl><type><specifier pos:line="17" pos:column="5">const<pos:position pos:line="17" pos:column="10"/></specifier> <name pos:line="17" pos:column="11">char<pos:position pos:line="17" pos:column="15"/></name> <modifier pos:line="17" pos:column="16">*<pos:position pos:line="17" pos:column="17"/></modifier></type><name pos:line="17" pos:column="17">p<pos:position pos:line="17" pos:column="18"/></name> <init pos:line="17" pos:column="19">= <expr><name pos:line="17" pos:column="21">NULL<pos:position pos:line="17" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><call><name pos:line="18" pos:column="10">StringToInt<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">token<pos:position pos:line="18" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="29">restore_bps<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="42">&amp;<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="43">p<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="46">10<pos:position pos:line="18" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call> <operator pos:line="18" pos:column="50">||<pos:position pos:line="18" pos:column="52"/></operator> <operator pos:line="18" pos:column="53">*<pos:position pos:line="18" pos:column="54"/></operator><name pos:line="18" pos:column="54">p<pos:position pos:line="18" pos:column="55"/></name> <operator pos:line="18" pos:column="56">!=<pos:position pos:line="18" pos:column="58"/></operator> <literal type="char" pos:line="18" pos:column="59">'/'<pos:position pos:line="18" pos:column="62"/></literal></expr>)<pos:position pos:line="18" pos:column="63"/></condition><then pos:line="18" pos:column="63"> <block pos:line="18" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">debugs<pos:position pos:line="19" pos:column="15"/></name><argument_list pos:line="19" pos:column="15">(<argument><expr><literal type="number" pos:line="19" pos:column="16">77<pos:position pos:line="19" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="19" pos:column="20">DBG_CRITICAL<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="34">"ERROR: invalid delay rate '"<pos:position pos:line="19" pos:column="63"/></literal> <operator pos:line="19" pos:column="64">&lt;&lt;<pos:position pos:line="19" pos:column="72"/></operator> <name pos:line="19" pos:column="67">token<pos:position pos:line="19" pos:column="72"/></name> <operator pos:line="19" pos:column="73">&lt;&lt;<pos:position pos:line="19" pos:column="81"/></operator> <literal type="string" pos:line="19" pos:column="76">"'. Expecting restore/max or 'none'."<pos:position pos:line="19" pos:column="113"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="114"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="115"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">self_destruct<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">()<pos:position pos:line="20" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="22" pos:column="5">p<pos:position pos:line="22" pos:column="6"/></name><operator pos:line="22" pos:column="6">++<pos:position pos:line="22" pos:column="8"/></operator></expr>;<pos:position pos:line="22" pos:column="9"/></expr_stmt> <comment type="line" pos:line="22" pos:column="10">// increment past the '/'</comment>

    <comment type="line" pos:line="24" pos:column="5">// parse the rest into max_bytes</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><call><name pos:line="25" pos:column="10">StringToInt64<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name pos:line="25" pos:column="24">p<pos:position pos:line="25" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="27">max_bytes<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">NULL<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="44">10<pos:position pos:line="25" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="48"/></condition><then pos:line="25" pos:column="48"> <block pos:line="25" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">debugs<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="number" pos:line="26" pos:column="16">77<pos:position pos:line="26" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="20">DBG_CRITICAL<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="34">"ERROR: restore rate in '"<pos:position pos:line="26" pos:column="60"/></literal> <operator pos:line="26" pos:column="61">&lt;&lt;<pos:position pos:line="26" pos:column="69"/></operator> <name pos:line="26" pos:column="64">token<pos:position pos:line="26" pos:column="69"/></name> <operator pos:line="26" pos:column="70">&lt;&lt;<pos:position pos:line="26" pos:column="78"/></operator> <literal type="string" pos:line="26" pos:column="73">"' is not a number."<pos:position pos:line="26" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="95"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">self_destruct<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">()<pos:position pos:line="27" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
}<pos:position pos:line="29" pos:column="2"/></block></function></unit>
