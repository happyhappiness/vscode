<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_362_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">search_group_tree<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name><name pos:line="2" pos:column="19">struct<pos:position pos:line="2" pos:column="25"/></name> <name pos:line="2" pos:column="26">main_args<pos:position pos:line="2" pos:column="35"/></name></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">margs<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">LDAP<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type> <name pos:line="2" pos:column="51">ld<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">bindp<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="68">char<pos:position pos:line="2" pos:column="72"/></name> <modifier pos:line="2" pos:column="73">*<pos:position pos:line="2" pos:column="74"/></modifier></type><name pos:line="2" pos:column="74">ldap_group<pos:position pos:line="2" pos:column="84"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="86">char<pos:position pos:line="2" pos:column="90"/></name> <modifier pos:line="2" pos:column="91">*<pos:position pos:line="2" pos:column="92"/></modifier></type><name pos:line="2" pos:column="92">group<pos:position pos:line="2" pos:column="97"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="99">int<pos:position pos:line="2" pos:column="102"/></name></type> <name pos:line="2" pos:column="103">depth<pos:position pos:line="2" pos:column="108"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="109"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">LDAPMessage<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">res<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><name pos:line="4" pos:column="24">NULL<pos:position pos:line="4" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier><modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">attr_value<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name pos:line="5" pos:column="25">NULL<pos:position pos:line="5" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">max_attr<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">filter<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><name pos:line="7" pos:column="20">NULL<pos:position pos:line="7" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">search_exp<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><name pos:line="8" pos:column="24">NULL<pos:position pos:line="8" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">size_t<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">se_len<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><literal type="number" pos:line="9" pos:column="21">0<pos:position pos:line="9" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">rc<pos:position pos:line="10" pos:column="11"/></name> <init pos:line="10" pos:column="12">= <expr><literal type="number" pos:line="10" pos:column="14">0<pos:position pos:line="10" pos:column="15"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="17">retval<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><literal type="number" pos:line="10" pos:column="26">0<pos:position pos:line="10" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">ldepth<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type><name pos:line="12" pos:column="11">ldap_filter_esc<pos:position pos:line="12" pos:column="26"/></name> <init pos:line="12" pos:column="27">= <expr><name pos:line="12" pos:column="29">NULL<pos:position pos:line="12" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">struct<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">timeval<pos:position pos:line="13" pos:column="19"/></name></name></type> <name pos:line="13" pos:column="20">searchtime<pos:position pos:line="13" pos:column="30"/></name></decl>;<pos:position pos:line="13" pos:column="31"/></decl_stmt>

<cpp:define pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">define<pos:position pos:line="15" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="15" pos:column="9">FILTER_GROUP_AD<pos:position pos:line="15" pos:column="24"/></name></cpp:macro> <cpp:value pos:line="15" pos:column="25">"(&amp;(%s)(objectclass=group))"<pos:position pos:line="15" pos:column="57"/></cpp:value></cpp:define>
<cpp:define pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">define<pos:position pos:line="16" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="16" pos:column="9">FILTER_GROUP<pos:position pos:line="16" pos:column="21"/></name></cpp:macro> <cpp:value pos:line="16" pos:column="22">"(&amp;(memberuid=%s)(objectclass=posixgroup))"<pos:position pos:line="16" pos:column="69"/></cpp:value></cpp:define>

    <expr_stmt><expr><name><name pos:line="18" pos:column="5">searchtime<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">.<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">tv_sec<pos:position pos:line="18" pos:column="22"/></name></name> <operator pos:line="18" pos:column="23">=<pos:position pos:line="18" pos:column="24"/></operator> <name pos:line="18" pos:column="25">SEARCH_TIMEOUT<pos:position pos:line="18" pos:column="39"/></name></expr>;<pos:position pos:line="18" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">searchtime<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">.<pos:position pos:line="19" pos:column="16"/></operator><name pos:line="19" pos:column="16">tv_usec<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <literal type="number" pos:line="19" pos:column="26">0<pos:position pos:line="19" pos:column="27"/></literal></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name><name pos:line="21" pos:column="9">margs<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">AD<pos:position pos:line="21" pos:column="18"/></name></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="22" pos:column="9">filter<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <operator pos:line="22" pos:column="18">(<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="19">char<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">*<pos:position pos:line="22" pos:column="25"/></operator><operator pos:line="22" pos:column="25">)<pos:position pos:line="22" pos:column="26"/></operator> <name pos:line="22" pos:column="27">FILTER_GROUP_AD<pos:position pos:line="22" pos:column="42"/></name></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt></block></then>
    <else pos:line="23" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="9">filter<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">=<pos:position pos:line="24" pos:column="17"/></operator> <operator pos:line="24" pos:column="18">(<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="19">char<pos:position pos:line="24" pos:column="23"/></name> <operator pos:line="24" pos:column="24">*<pos:position pos:line="24" pos:column="25"/></operator><operator pos:line="24" pos:column="25">)<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">FILTER_GROUP<pos:position pos:line="24" pos:column="39"/></name></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt></block></else></if>

    <expr_stmt><expr><name pos:line="26" pos:column="5">ldap_filter_esc<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">=<pos:position pos:line="26" pos:column="22"/></operator> <call><name pos:line="26" pos:column="23">escape_filter<pos:position pos:line="26" pos:column="36"/></name><argument_list pos:line="26" pos:column="36">(<argument><expr><name pos:line="26" pos:column="37">ldap_group<pos:position pos:line="26" pos:column="47"/></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt>

    <expr_stmt><expr><name pos:line="28" pos:column="5">se_len<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <call><name pos:line="28" pos:column="14">strlen<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">filter<pos:position pos:line="28" pos:column="27"/></name></expr></argument>)<pos:position pos:line="28" pos:column="28"/></argument_list></call> <operator pos:line="28" pos:column="29">+<pos:position pos:line="28" pos:column="30"/></operator> <call><name pos:line="28" pos:column="31">strlen<pos:position pos:line="28" pos:column="37"/></name><argument_list pos:line="28" pos:column="37">(<argument><expr><name pos:line="28" pos:column="38">ldap_filter_esc<pos:position pos:line="28" pos:column="53"/></name></expr></argument>)<pos:position pos:line="28" pos:column="54"/></argument_list></call> <operator pos:line="28" pos:column="55">+<pos:position pos:line="28" pos:column="56"/></operator> <literal type="number" pos:line="28" pos:column="57">1<pos:position pos:line="28" pos:column="58"/></literal></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">search_exp<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <operator pos:line="29" pos:column="18">(<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">char<pos:position pos:line="29" pos:column="23"/></name> <operator pos:line="29" pos:column="24">*<pos:position pos:line="29" pos:column="25"/></operator><operator pos:line="29" pos:column="25">)<pos:position pos:line="29" pos:column="26"/></operator> <call><name pos:line="29" pos:column="27">xmalloc<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">se_len<pos:position pos:line="29" pos:column="41"/></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">snprintf<pos:position pos:line="30" pos:column="13"/></name><argument_list pos:line="30" pos:column="13">(<argument><expr><name pos:line="30" pos:column="14">search_exp<pos:position pos:line="30" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="26">se_len<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="34">filter<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="42">ldap_filter_esc<pos:position pos:line="30" pos:column="57"/></name></expr></argument>)<pos:position pos:line="30" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="59"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">xfree<pos:position pos:line="32" pos:column="10"/></name><argument_list pos:line="32" pos:column="10">(<argument><expr><name pos:line="32" pos:column="11">ldap_filter_esc<pos:position pos:line="32" pos:column="26"/></name></expr></argument>)<pos:position pos:line="32" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">depth<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">&gt;<pos:position pos:line="34" pos:column="19"/></operator> <name><name pos:line="34" pos:column="17">margs<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">-&gt;<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="24">mdepth<pos:position pos:line="34" pos:column="30"/></name></name></expr>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31"> <block pos:line="34" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">debug<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">(<argument><expr><operator pos:line="35" pos:column="15">(<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">char<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">*<pos:position pos:line="35" pos:column="22"/></operator><operator pos:line="35" pos:column="22">)<pos:position pos:line="35" pos:column="23"/></operator> <literal type="string" pos:line="35" pos:column="24">"%s| %s: DEBUG: Max search depth reached %d&gt;%d\n"<pos:position pos:line="35" pos:column="76"/></literal></expr></argument>, <argument><expr><call><name pos:line="35" pos:column="75">LogTime<pos:position pos:line="35" pos:column="82"/></name><argument_list pos:line="35" pos:column="82">()<pos:position pos:line="35" pos:column="84"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="35" pos:column="86">PROGRAM<pos:position pos:line="35" pos:column="93"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="95">depth<pos:position pos:line="35" pos:column="100"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="102">margs<pos:position pos:line="35" pos:column="107"/></name><operator pos:line="35" pos:column="107">-&gt;<pos:position pos:line="35" pos:column="112"/></operator><name pos:line="35" pos:column="109">mdepth<pos:position pos:line="35" pos:column="115"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="117"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">xfree<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">search_exp<pos:position pos:line="36" pos:column="25"/></name></expr></argument>)<pos:position pos:line="36" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
        <return pos:line="37" pos:column="9">return <expr><literal type="number" pos:line="37" pos:column="16">0<pos:position pos:line="37" pos:column="17"/></literal></expr>;<pos:position pos:line="37" pos:column="18"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">debug<pos:position pos:line="39" pos:column="10"/></name><argument_list pos:line="39" pos:column="10">(<argument><expr><operator pos:line="39" pos:column="11">(<pos:position pos:line="39" pos:column="12"/></operator><name pos:line="39" pos:column="12">char<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">*<pos:position pos:line="39" pos:column="18"/></operator><operator pos:line="39" pos:column="18">)<pos:position pos:line="39" pos:column="19"/></operator> <literal type="string" pos:line="39" pos:column="20">"%s| %s: DEBUG: Search ldap server with bind path %s and filter : %s\n"<pos:position pos:line="39" pos:column="91"/></literal></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="93">LogTime<pos:position pos:line="39" pos:column="100"/></name><argument_list pos:line="39" pos:column="100">()<pos:position pos:line="39" pos:column="102"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="39" pos:column="104">PROGRAM<pos:position pos:line="39" pos:column="111"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="113">bindp<pos:position pos:line="39" pos:column="118"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="120">search_exp<pos:position pos:line="39" pos:column="130"/></name></expr></argument>)<pos:position pos:line="39" pos:column="131"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="132"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">rc<pos:position pos:line="40" pos:column="7"/></name> <operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator> <call><name pos:line="40" pos:column="10">ldap_search_ext_s<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">ld<pos:position pos:line="40" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="32">bindp<pos:position pos:line="40" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="39">LDAP_SCOPE_SUBTREE<pos:position pos:line="40" pos:column="57"/></name></expr></argument>,
                           <argument><expr><name pos:line="41" pos:column="28">search_exp<pos:position pos:line="41" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="40">NULL<pos:position pos:line="41" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="46">0<pos:position pos:line="41" pos:column="47"/></literal></expr></argument>,
                           <argument><expr><name pos:line="42" pos:column="28">NULL<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="34">NULL<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="42" pos:column="40">&amp;<pos:position pos:line="42" pos:column="45"/></operator><name pos:line="42" pos:column="41">searchtime<pos:position pos:line="42" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="53">0<pos:position pos:line="42" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="42" pos:column="56">&amp;<pos:position pos:line="42" pos:column="61"/></operator><name pos:line="42" pos:column="57">res<pos:position pos:line="42" pos:column="60"/></name></expr></argument>)<pos:position pos:line="42" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">xfree<pos:position pos:line="43" pos:column="10"/></name><argument_list pos:line="43" pos:column="10">(<argument><expr><name pos:line="43" pos:column="11">search_exp<pos:position pos:line="43" pos:column="21"/></name></expr></argument>)<pos:position pos:line="43" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">rc<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">!=<pos:position pos:line="45" pos:column="14"/></operator> <name pos:line="45" pos:column="15">LDAP_SUCCESS<pos:position pos:line="45" pos:column="27"/></name></expr>)<pos:position pos:line="45" pos:column="28"/></condition><then pos:line="45" pos:column="28"> <block pos:line="45" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">error<pos:position pos:line="46" pos:column="14"/></name><argument_list pos:line="46" pos:column="14">(<argument><expr><operator pos:line="46" pos:column="15">(<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="16">char<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">*<pos:position pos:line="46" pos:column="22"/></operator><operator pos:line="46" pos:column="22">)<pos:position pos:line="46" pos:column="23"/></operator> <literal type="string" pos:line="46" pos:column="24">"%s| %s: ERROR: Error searching ldap server: %s\n"<pos:position pos:line="46" pos:column="74"/></literal></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="76">LogTime<pos:position pos:line="46" pos:column="83"/></name><argument_list pos:line="46" pos:column="83">()<pos:position pos:line="46" pos:column="85"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="46" pos:column="87">PROGRAM<pos:position pos:line="46" pos:column="94"/></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="96">ldap_err2string<pos:position pos:line="46" pos:column="111"/></name><argument_list pos:line="46" pos:column="111">(<argument><expr><name pos:line="46" pos:column="112">rc<pos:position pos:line="46" pos:column="114"/></name></expr></argument>)<pos:position pos:line="46" pos:column="115"/></argument_list></call></expr></argument>)<pos:position pos:line="46" pos:column="116"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="117"/></expr_stmt>
        <return pos:line="47" pos:column="9">return <expr><literal type="number" pos:line="47" pos:column="16">0<pos:position pos:line="47" pos:column="17"/></literal></expr>;<pos:position pos:line="47" pos:column="18"/></return>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">debug<pos:position pos:line="49" pos:column="10"/></name><argument_list pos:line="49" pos:column="10">(<argument><expr><operator pos:line="49" pos:column="11">(<pos:position pos:line="49" pos:column="12"/></operator><name pos:line="49" pos:column="12">char<pos:position pos:line="49" pos:column="16"/></name> <operator pos:line="49" pos:column="17">*<pos:position pos:line="49" pos:column="18"/></operator><operator pos:line="49" pos:column="18">)<pos:position pos:line="49" pos:column="19"/></operator> <literal type="string" pos:line="49" pos:column="20">"%s| %s: DEBUG: Found %d ldap entr%s\n"<pos:position pos:line="49" pos:column="59"/></literal></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="61">LogTime<pos:position pos:line="49" pos:column="68"/></name><argument_list pos:line="49" pos:column="68">()<pos:position pos:line="49" pos:column="70"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="49" pos:column="72">PROGRAM<pos:position pos:line="49" pos:column="79"/></name></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="81">ldap_count_entries<pos:position pos:line="49" pos:column="99"/></name><argument_list pos:line="49" pos:column="99">(<argument><expr><name pos:line="49" pos:column="100">ld<pos:position pos:line="49" pos:column="102"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="104">res<pos:position pos:line="49" pos:column="107"/></name></expr></argument>)<pos:position pos:line="49" pos:column="108"/></argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name pos:line="49" pos:column="110">ldap_count_entries<pos:position pos:line="49" pos:column="128"/></name><argument_list pos:line="49" pos:column="128">(<argument><expr><name pos:line="49" pos:column="129">ld<pos:position pos:line="49" pos:column="131"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="133">res<pos:position pos:line="49" pos:column="136"/></name></expr></argument>)<pos:position pos:line="49" pos:column="137"/></argument_list></call> <operator pos:line="49" pos:column="138">&gt;<pos:position pos:line="49" pos:column="142"/></operator> <literal type="number" pos:line="49" pos:column="140">1<pos:position pos:line="49" pos:column="141"/></literal> <operator pos:line="49" pos:column="142">||<pos:position pos:line="49" pos:column="144"/></operator> <call><name pos:line="49" pos:column="145">ldap_count_entries<pos:position pos:line="49" pos:column="163"/></name><argument_list pos:line="49" pos:column="163">(<argument><expr><name pos:line="49" pos:column="164">ld<pos:position pos:line="49" pos:column="166"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="168">res<pos:position pos:line="49" pos:column="171"/></name></expr></argument>)<pos:position pos:line="49" pos:column="172"/></argument_list></call> <operator pos:line="49" pos:column="173">==<pos:position pos:line="49" pos:column="175"/></operator> <literal type="number" pos:line="49" pos:column="176">0<pos:position pos:line="49" pos:column="177"/></literal></expr> ?<pos:position pos:line="49" pos:column="179"/></condition><then pos:line="49" pos:column="179"> <expr><literal type="string" pos:line="49" pos:column="180">"ies"<pos:position pos:line="49" pos:column="185"/></literal></expr> <pos:position pos:line="49" pos:column="186"/></then><else pos:line="49" pos:column="186">: <expr><literal type="string" pos:line="49" pos:column="188">"y"<pos:position pos:line="49" pos:column="191"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="49" pos:column="192"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="193"/></expr_stmt>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name><name pos:line="51" pos:column="9">margs<pos:position pos:line="51" pos:column="14"/></name><operator pos:line="51" pos:column="14">-&gt;<pos:position pos:line="51" pos:column="19"/></operator><name pos:line="51" pos:column="16">AD<pos:position pos:line="51" pos:column="18"/></name></name></expr>)<pos:position pos:line="51" pos:column="19"/></condition><then pos:line="51" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="9">max_attr<pos:position pos:line="52" pos:column="17"/></name> <operator pos:line="52" pos:column="18">=<pos:position pos:line="52" pos:column="19"/></operator> <call><name pos:line="52" pos:column="20">get_attributes<pos:position pos:line="52" pos:column="34"/></name><argument_list pos:line="52" pos:column="34">(<argument><expr><name pos:line="52" pos:column="35">ld<pos:position pos:line="52" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="39">res<pos:position pos:line="52" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="44">ATTRIBUTE_AD<pos:position pos:line="52" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="58">&amp;<pos:position pos:line="52" pos:column="63"/></operator><name pos:line="52" pos:column="59">attr_value<pos:position pos:line="52" pos:column="69"/></name></expr></argument>)<pos:position pos:line="52" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="71"/></expr_stmt></block></then>
    <else pos:line="53" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="9">max_attr<pos:position pos:line="54" pos:column="17"/></name> <operator pos:line="54" pos:column="18">=<pos:position pos:line="54" pos:column="19"/></operator> <call><name pos:line="54" pos:column="20">get_attributes<pos:position pos:line="54" pos:column="34"/></name><argument_list pos:line="54" pos:column="34">(<argument><expr><name pos:line="54" pos:column="35">ld<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="39">res<pos:position pos:line="54" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="44">ATTRIBUTE<pos:position pos:line="54" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="55">&amp;<pos:position pos:line="54" pos:column="60"/></operator><name pos:line="54" pos:column="56">attr_value<pos:position pos:line="54" pos:column="66"/></name></expr></argument>)<pos:position pos:line="54" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="68"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="56" pos:column="5">/*
     * Compare group names
     */</comment>
    <expr_stmt><expr><name pos:line="59" pos:column="5">retval<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">=<pos:position pos:line="59" pos:column="13"/></operator> <literal type="number" pos:line="59" pos:column="14">0<pos:position pos:line="59" pos:column="15"/></literal></expr>;<pos:position pos:line="59" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">ldepth<pos:position pos:line="60" pos:column="11"/></name> <operator pos:line="60" pos:column="12">=<pos:position pos:line="60" pos:column="13"/></operator> <name pos:line="60" pos:column="14">depth<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">+<pos:position pos:line="60" pos:column="21"/></operator> <literal type="number" pos:line="60" pos:column="22">1<pos:position pos:line="60" pos:column="23"/></literal></expr>;<pos:position pos:line="60" pos:column="24"/></expr_stmt>
    <for pos:line="61" pos:column="5">for <control pos:line="61" pos:column="9">(<init><decl><type><name pos:line="61" pos:column="10">size_t<pos:position pos:line="61" pos:column="16"/></name></type> <name pos:line="61" pos:column="17">j<pos:position pos:line="61" pos:column="18"/></name> <init pos:line="61" pos:column="19">= <expr><literal type="number" pos:line="61" pos:column="21">0<pos:position pos:line="61" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="61" pos:column="23"/></init> <condition><expr><name pos:line="61" pos:column="24">j<pos:position pos:line="61" pos:column="25"/></name> <operator pos:line="61" pos:column="26">&lt;<pos:position pos:line="61" pos:column="30"/></operator> <name pos:line="61" pos:column="28">max_attr<pos:position pos:line="61" pos:column="36"/></name></expr>;<pos:position pos:line="61" pos:column="37"/></condition> <incr><expr><operator pos:line="61" pos:column="38">++<pos:position pos:line="61" pos:column="40"/></operator><name pos:line="61" pos:column="40">j<pos:position pos:line="61" pos:column="41"/></name></expr></incr>)<pos:position pos:line="61" pos:column="42"/></control> <block pos:line="61" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="62" pos:column="9">char<pos:position pos:line="62" pos:column="13"/></name> <modifier pos:line="62" pos:column="14">*<pos:position pos:line="62" pos:column="15"/></modifier></type><name pos:line="62" pos:column="15">av<pos:position pos:line="62" pos:column="17"/></name> <init pos:line="62" pos:column="18">= <expr><name pos:line="62" pos:column="20">NULL<pos:position pos:line="62" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="62" pos:column="25"/></decl_stmt>

        <comment type="block" pos:line="64" pos:column="9">/* Compare first CN= value assuming it is the same as the group name itself */</comment>
        <expr_stmt><expr><name pos:line="65" pos:column="9">av<pos:position pos:line="65" pos:column="11"/></name> <operator pos:line="65" pos:column="12">=<pos:position pos:line="65" pos:column="13"/></operator> <name><name pos:line="65" pos:column="14">attr_value<pos:position pos:line="65" pos:column="24"/></name><index pos:line="65" pos:column="24">[<expr><name pos:line="65" pos:column="25">j<pos:position pos:line="65" pos:column="26"/></name></expr>]<pos:position pos:line="65" pos:column="27"/></index></name></expr>;<pos:position pos:line="65" pos:column="28"/></expr_stmt>
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><operator pos:line="66" pos:column="13">!<pos:position pos:line="66" pos:column="14"/></operator><call><name pos:line="66" pos:column="14">strncasecmp<pos:position pos:line="66" pos:column="25"/></name><argument_list pos:line="66" pos:column="25">(<argument><expr><literal type="string" pos:line="66" pos:column="26">"CN="<pos:position pos:line="66" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="33">av<pos:position pos:line="66" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="37">3<pos:position pos:line="66" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="40"/></condition><then pos:line="66" pos:column="40"> <block pos:line="66" pos:column="41">{
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">char<pos:position pos:line="67" pos:column="17"/></name> <modifier pos:line="67" pos:column="18">*<pos:position pos:line="67" pos:column="19"/></modifier></type><name pos:line="67" pos:column="19">avp<pos:position pos:line="67" pos:column="22"/></name> <init pos:line="67" pos:column="23">= <expr><name pos:line="67" pos:column="25">NULL<pos:position pos:line="67" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="67" pos:column="30"/></decl_stmt>
            <expr_stmt><expr><name pos:line="68" pos:column="13">av<pos:position pos:line="68" pos:column="15"/></name> <operator pos:line="68" pos:column="16">+=<pos:position pos:line="68" pos:column="18"/></operator> <literal type="number" pos:line="68" pos:column="19">3<pos:position pos:line="68" pos:column="20"/></literal></expr>;<pos:position pos:line="68" pos:column="21"/></expr_stmt>
            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><operator pos:line="69" pos:column="17">(<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="18">avp<pos:position pos:line="69" pos:column="21"/></name> <operator pos:line="69" pos:column="22">=<pos:position pos:line="69" pos:column="23"/></operator> <call><name pos:line="69" pos:column="24">strchr<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">av<pos:position pos:line="69" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="69" pos:column="35">','<pos:position pos:line="69" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="39"/></argument_list></call><operator pos:line="69" pos:column="39">)<pos:position pos:line="69" pos:column="40"/></operator></expr>)<pos:position pos:line="69" pos:column="41"/></condition><then pos:line="69" pos:column="41"> <block pos:line="69" pos:column="42">{
                <expr_stmt><expr><operator pos:line="70" pos:column="17">*<pos:position pos:line="70" pos:column="18"/></operator><name pos:line="70" pos:column="18">avp<pos:position pos:line="70" pos:column="21"/></name> <operator pos:line="70" pos:column="22">=<pos:position pos:line="70" pos:column="23"/></operator> <literal type="char" pos:line="70" pos:column="24">'\0'<pos:position pos:line="70" pos:column="28"/></literal></expr>;<pos:position pos:line="70" pos:column="29"/></expr_stmt>
            }<pos:position pos:line="71" pos:column="14"/></block></then></if>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">debug_enabled<pos:position pos:line="73" pos:column="26"/></name></expr>)<pos:position pos:line="73" pos:column="27"/></condition><then pos:line="73" pos:column="27"> <block pos:line="73" pos:column="28">{
            <decl_stmt><decl><type><name pos:line="74" pos:column="13">int<pos:position pos:line="74" pos:column="16"/></name></type> <name pos:line="74" pos:column="17">n<pos:position pos:line="74" pos:column="18"/></name></decl>;<pos:position pos:line="74" pos:column="19"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">debug<pos:position pos:line="75" pos:column="18"/></name><argument_list pos:line="75" pos:column="18">(<argument><expr><operator pos:line="75" pos:column="19">(<pos:position pos:line="75" pos:column="20"/></operator><name pos:line="75" pos:column="20">char<pos:position pos:line="75" pos:column="24"/></name> <operator pos:line="75" pos:column="25">*<pos:position pos:line="75" pos:column="26"/></operator><operator pos:line="75" pos:column="26">)<pos:position pos:line="75" pos:column="27"/></operator> <literal type="string" pos:line="75" pos:column="28">"%s| %s: DEBUG: Entry %"<pos:position pos:line="75" pos:column="52"/></literal> <name pos:line="75" pos:column="53">PRIuSIZE<pos:position pos:line="75" pos:column="61"/></name> <literal type="string" pos:line="75" pos:column="62">" \"%s\" in hex UTF-8 is "<pos:position pos:line="75" pos:column="88"/></literal></expr></argument>, <argument><expr><call><name pos:line="75" pos:column="90">LogTime<pos:position pos:line="75" pos:column="97"/></name><argument_list pos:line="75" pos:column="97">()<pos:position pos:line="75" pos:column="99"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="75" pos:column="101">PROGRAM<pos:position pos:line="75" pos:column="108"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="110">j<pos:position pos:line="75" pos:column="111"/></name> <operator pos:line="75" pos:column="112">+<pos:position pos:line="75" pos:column="113"/></operator> <literal type="number" pos:line="75" pos:column="114">1<pos:position pos:line="75" pos:column="115"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="117">av<pos:position pos:line="75" pos:column="119"/></name></expr></argument>)<pos:position pos:line="75" pos:column="120"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="121"/></expr_stmt>
            <for pos:line="76" pos:column="13">for <control pos:line="76" pos:column="17">(<init><expr><name pos:line="76" pos:column="18">n<pos:position pos:line="76" pos:column="19"/></name> <operator pos:line="76" pos:column="20">=<pos:position pos:line="76" pos:column="21"/></operator> <literal type="number" pos:line="76" pos:column="22">0<pos:position pos:line="76" pos:column="23"/></literal></expr>;<pos:position pos:line="76" pos:column="24"/></init> <condition><expr><name><name pos:line="76" pos:column="25">av<pos:position pos:line="76" pos:column="27"/></name><index pos:line="76" pos:column="27">[<expr><name pos:line="76" pos:column="28">n<pos:position pos:line="76" pos:column="29"/></name></expr>]<pos:position pos:line="76" pos:column="30"/></index></name> <operator pos:line="76" pos:column="31">!=<pos:position pos:line="76" pos:column="33"/></operator> <literal type="char" pos:line="76" pos:column="34">'\0'<pos:position pos:line="76" pos:column="38"/></literal></expr>;<pos:position pos:line="76" pos:column="39"/></condition> <incr><expr><operator pos:line="76" pos:column="40">++<pos:position pos:line="76" pos:column="42"/></operator><name pos:line="76" pos:column="42">n<pos:position pos:line="76" pos:column="43"/></name></expr></incr>)<pos:position pos:line="76" pos:column="44"/></control>
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="17">fprintf<pos:position pos:line="77" pos:column="24"/></name><argument_list pos:line="77" pos:column="24">(<argument><expr><name pos:line="77" pos:column="25">stderr<pos:position pos:line="77" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="33">"%02x"<pos:position pos:line="77" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="77" pos:column="41">(<pos:position pos:line="77" pos:column="42"/></operator><name pos:line="77" pos:column="42">unsigned<pos:position pos:line="77" pos:column="50"/></name> <name pos:line="77" pos:column="51">char<pos:position pos:line="77" pos:column="55"/></name><operator pos:line="77" pos:column="55">)<pos:position pos:line="77" pos:column="56"/></operator> <name><name pos:line="77" pos:column="57">av<pos:position pos:line="77" pos:column="59"/></name><index pos:line="77" pos:column="59">[<expr><name pos:line="77" pos:column="60">n<pos:position pos:line="77" pos:column="61"/></name></expr>]<pos:position pos:line="77" pos:column="62"/></index></name></expr></argument>)<pos:position pos:line="77" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="64"/></expr_stmt></block></for>
            <expr_stmt><expr><call><name pos:line="78" pos:column="13">fprintf<pos:position pos:line="78" pos:column="20"/></name><argument_list pos:line="78" pos:column="20">(<argument><expr><name pos:line="78" pos:column="21">stderr<pos:position pos:line="78" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="29">"\n"<pos:position pos:line="78" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="79" pos:column="10"/></block></then></if>
        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><operator pos:line="80" pos:column="13">!<pos:position pos:line="80" pos:column="14"/></operator><call><name pos:line="80" pos:column="14">strcasecmp<pos:position pos:line="80" pos:column="24"/></name><argument_list pos:line="80" pos:column="24">(<argument><expr><name pos:line="80" pos:column="25">group<pos:position pos:line="80" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="32">av<pos:position pos:line="80" pos:column="34"/></name></expr></argument>)<pos:position pos:line="80" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="36"/></condition><then pos:line="80" pos:column="36"> <block pos:line="80" pos:column="37">{
            <expr_stmt><expr><name pos:line="81" pos:column="13">retval<pos:position pos:line="81" pos:column="19"/></name> <operator pos:line="81" pos:column="20">=<pos:position pos:line="81" pos:column="21"/></operator> <literal type="number" pos:line="81" pos:column="22">1<pos:position pos:line="81" pos:column="23"/></literal></expr>;<pos:position pos:line="81" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">debug<pos:position pos:line="82" pos:column="18"/></name><argument_list pos:line="82" pos:column="18">(<argument><expr><operator pos:line="82" pos:column="19">(<pos:position pos:line="82" pos:column="20"/></operator><name pos:line="82" pos:column="20">char<pos:position pos:line="82" pos:column="24"/></name> <operator pos:line="82" pos:column="25">*<pos:position pos:line="82" pos:column="26"/></operator><operator pos:line="82" pos:column="26">)<pos:position pos:line="82" pos:column="27"/></operator> <literal type="string" pos:line="82" pos:column="28">"%s| %s: DEBUG: Entry %"<pos:position pos:line="82" pos:column="52"/></literal> <name pos:line="82" pos:column="53">PRIuSIZE<pos:position pos:line="82" pos:column="61"/></name> <literal type="string" pos:line="82" pos:column="62">" \"%s\" matches group name \"%s\"\n"<pos:position pos:line="82" pos:column="99"/></literal></expr></argument>, <argument><expr><call><name pos:line="82" pos:column="101">LogTime<pos:position pos:line="82" pos:column="108"/></name><argument_list pos:line="82" pos:column="108">()<pos:position pos:line="82" pos:column="110"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="82" pos:column="112">PROGRAM<pos:position pos:line="82" pos:column="119"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="121">j<pos:position pos:line="82" pos:column="122"/></name> <operator pos:line="82" pos:column="123">+<pos:position pos:line="82" pos:column="124"/></operator> <literal type="number" pos:line="82" pos:column="125">1<pos:position pos:line="82" pos:column="126"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="128">av<pos:position pos:line="82" pos:column="130"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="132">group<pos:position pos:line="82" pos:column="137"/></name></expr></argument>)<pos:position pos:line="82" pos:column="138"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="139"/></expr_stmt>
            <break pos:line="83" pos:column="13">break;<pos:position pos:line="83" pos:column="19"/></break>
        }<pos:position pos:line="84" pos:column="10"/></block></then> <else pos:line="84" pos:column="11">else
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="85" pos:column="13">debug<pos:position pos:line="85" pos:column="18"/></name><argument_list pos:line="85" pos:column="18">(<argument><expr><operator pos:line="85" pos:column="19">(<pos:position pos:line="85" pos:column="20"/></operator><name pos:line="85" pos:column="20">char<pos:position pos:line="85" pos:column="24"/></name> <operator pos:line="85" pos:column="25">*<pos:position pos:line="85" pos:column="26"/></operator><operator pos:line="85" pos:column="26">)<pos:position pos:line="85" pos:column="27"/></operator> <literal type="string" pos:line="85" pos:column="28">"%s| %s: DEBUG: Entry %"<pos:position pos:line="85" pos:column="52"/></literal> <name pos:line="85" pos:column="53">PRIuSIZE<pos:position pos:line="85" pos:column="61"/></name> <literal type="string" pos:line="85" pos:column="62">" \"%s\" does not match group name \"%s\"\n"<pos:position pos:line="85" pos:column="106"/></literal></expr></argument>, <argument><expr><call><name pos:line="85" pos:column="108">LogTime<pos:position pos:line="85" pos:column="115"/></name><argument_list pos:line="85" pos:column="115">()<pos:position pos:line="85" pos:column="117"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="85" pos:column="119">PROGRAM<pos:position pos:line="85" pos:column="126"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="128">j<pos:position pos:line="85" pos:column="129"/></name> <operator pos:line="85" pos:column="130">+<pos:position pos:line="85" pos:column="131"/></operator> <literal type="number" pos:line="85" pos:column="132">1<pos:position pos:line="85" pos:column="133"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="135">av<pos:position pos:line="85" pos:column="137"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="139">group<pos:position pos:line="85" pos:column="144"/></name></expr></argument>)<pos:position pos:line="85" pos:column="145"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="146"/></expr_stmt></block></else></if>
        <comment type="block" pos:line="86" pos:column="9">/*
         * Do recursive group search
         */</comment>
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">debug<pos:position pos:line="89" pos:column="14"/></name><argument_list pos:line="89" pos:column="14">(<argument><expr><operator pos:line="89" pos:column="15">(<pos:position pos:line="89" pos:column="16"/></operator><name pos:line="89" pos:column="16">char<pos:position pos:line="89" pos:column="20"/></name> <operator pos:line="89" pos:column="21">*<pos:position pos:line="89" pos:column="22"/></operator><operator pos:line="89" pos:column="22">)<pos:position pos:line="89" pos:column="23"/></operator> <literal type="string" pos:line="89" pos:column="24">"%s| %s: DEBUG: Perform recursive group search for group \"%s\"\n"<pos:position pos:line="89" pos:column="90"/></literal></expr></argument>, <argument><expr><call><name pos:line="89" pos:column="92">LogTime<pos:position pos:line="89" pos:column="99"/></name><argument_list pos:line="89" pos:column="99">()<pos:position pos:line="89" pos:column="101"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="89" pos:column="103">PROGRAM<pos:position pos:line="89" pos:column="110"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="112">av<pos:position pos:line="89" pos:column="114"/></name></expr></argument>)<pos:position pos:line="89" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="116"/></expr_stmt>
        <expr_stmt><expr><name pos:line="90" pos:column="9">av<pos:position pos:line="90" pos:column="11"/></name> <operator pos:line="90" pos:column="12">=<pos:position pos:line="90" pos:column="13"/></operator> <name><name pos:line="90" pos:column="14">attr_value<pos:position pos:line="90" pos:column="24"/></name><index pos:line="90" pos:column="24">[<expr><name pos:line="90" pos:column="25">j<pos:position pos:line="90" pos:column="26"/></name></expr>]<pos:position pos:line="90" pos:column="27"/></index></name></expr>;<pos:position pos:line="90" pos:column="28"/></expr_stmt>
        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><call><name pos:line="91" pos:column="13">search_group_tree<pos:position pos:line="91" pos:column="30"/></name><argument_list pos:line="91" pos:column="30">(<argument><expr><name pos:line="91" pos:column="31">margs<pos:position pos:line="91" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="38">ld<pos:position pos:line="91" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="42">bindp<pos:position pos:line="91" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="49">av<pos:position pos:line="91" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="53">group<pos:position pos:line="91" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="60">ldepth<pos:position pos:line="91" pos:column="66"/></name></expr></argument>)<pos:position pos:line="91" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="91" pos:column="68"/></condition><then pos:line="91" pos:column="68"> <block pos:line="91" pos:column="69">{
            <expr_stmt><expr><name pos:line="92" pos:column="13">retval<pos:position pos:line="92" pos:column="19"/></name> <operator pos:line="92" pos:column="20">=<pos:position pos:line="92" pos:column="21"/></operator> <literal type="number" pos:line="92" pos:column="22">1<pos:position pos:line="92" pos:column="23"/></literal></expr>;<pos:position pos:line="92" pos:column="24"/></expr_stmt>
            <if pos:line="93" pos:column="13">if <condition pos:line="93" pos:column="16">(<expr><operator pos:line="93" pos:column="17">!<pos:position pos:line="93" pos:column="18"/></operator><call><name pos:line="93" pos:column="18">strncasecmp<pos:position pos:line="93" pos:column="29"/></name><argument_list pos:line="93" pos:column="29">(<argument><expr><literal type="string" pos:line="93" pos:column="30">"CN="<pos:position pos:line="93" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="37">av<pos:position pos:line="93" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="41">3<pos:position pos:line="93" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="44"/></condition><then pos:line="93" pos:column="44"> <block pos:line="93" pos:column="45">{
                <decl_stmt><decl><type><name pos:line="94" pos:column="17">char<pos:position pos:line="94" pos:column="21"/></name> <modifier pos:line="94" pos:column="22">*<pos:position pos:line="94" pos:column="23"/></modifier></type><name pos:line="94" pos:column="23">avp<pos:position pos:line="94" pos:column="26"/></name> <init pos:line="94" pos:column="27">= <expr><name pos:line="94" pos:column="29">NULL<pos:position pos:line="94" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="94" pos:column="34"/></decl_stmt>
                <expr_stmt><expr><name pos:line="95" pos:column="17">av<pos:position pos:line="95" pos:column="19"/></name> <operator pos:line="95" pos:column="20">+=<pos:position pos:line="95" pos:column="22"/></operator> <literal type="number" pos:line="95" pos:column="23">3<pos:position pos:line="95" pos:column="24"/></literal></expr>;<pos:position pos:line="95" pos:column="25"/></expr_stmt>
                <if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><operator pos:line="96" pos:column="21">(<pos:position pos:line="96" pos:column="22"/></operator><name pos:line="96" pos:column="22">avp<pos:position pos:line="96" pos:column="25"/></name> <operator pos:line="96" pos:column="26">=<pos:position pos:line="96" pos:column="27"/></operator> <call><name pos:line="96" pos:column="28">strchr<pos:position pos:line="96" pos:column="34"/></name><argument_list pos:line="96" pos:column="34">(<argument><expr><name pos:line="96" pos:column="35">av<pos:position pos:line="96" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="96" pos:column="39">','<pos:position pos:line="96" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="43"/></argument_list></call><operator pos:line="96" pos:column="43">)<pos:position pos:line="96" pos:column="44"/></operator></expr>)<pos:position pos:line="96" pos:column="45"/></condition><then pos:line="96" pos:column="45"> <block pos:line="96" pos:column="46">{
                    <expr_stmt><expr><operator pos:line="97" pos:column="21">*<pos:position pos:line="97" pos:column="22"/></operator><name pos:line="97" pos:column="22">avp<pos:position pos:line="97" pos:column="25"/></name> <operator pos:line="97" pos:column="26">=<pos:position pos:line="97" pos:column="27"/></operator> <literal type="char" pos:line="97" pos:column="28">'\0'<pos:position pos:line="97" pos:column="32"/></literal></expr>;<pos:position pos:line="97" pos:column="33"/></expr_stmt>
                }<pos:position pos:line="98" pos:column="18"/></block></then></if>
            }<pos:position pos:line="99" pos:column="14"/></block></then></if>
            <if pos:line="100" pos:column="13">if <condition pos:line="100" pos:column="16">(<expr><name pos:line="100" pos:column="17">debug_enabled<pos:position pos:line="100" pos:column="30"/></name></expr>)<pos:position pos:line="100" pos:column="31"/></condition><then pos:line="100" pos:column="31">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="101" pos:column="17">debug<pos:position pos:line="101" pos:column="22"/></name><argument_list pos:line="101" pos:column="22">(<argument><expr><operator pos:line="101" pos:column="23">(<pos:position pos:line="101" pos:column="24"/></operator><name pos:line="101" pos:column="24">char<pos:position pos:line="101" pos:column="28"/></name> <operator pos:line="101" pos:column="29">*<pos:position pos:line="101" pos:column="30"/></operator><operator pos:line="101" pos:column="30">)<pos:position pos:line="101" pos:column="31"/></operator> <literal type="string" pos:line="101" pos:column="32">"%s| %s: DEBUG: Entry %"<pos:position pos:line="101" pos:column="56"/></literal> <name pos:line="101" pos:column="57">PRIuSIZE<pos:position pos:line="101" pos:column="65"/></name> <literal type="string" pos:line="101" pos:column="66">" \"%s\" is member of group named \"%s\"\n"<pos:position pos:line="101" pos:column="109"/></literal></expr></argument>, <argument><expr><call><name pos:line="101" pos:column="111">LogTime<pos:position pos:line="101" pos:column="118"/></name><argument_list pos:line="101" pos:column="118">()<pos:position pos:line="101" pos:column="120"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="101" pos:column="122">PROGRAM<pos:position pos:line="101" pos:column="129"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="131">j<pos:position pos:line="101" pos:column="132"/></name> <operator pos:line="101" pos:column="133">+<pos:position pos:line="101" pos:column="134"/></operator> <literal type="number" pos:line="101" pos:column="135">1<pos:position pos:line="101" pos:column="136"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="138">av<pos:position pos:line="101" pos:column="140"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="142">group<pos:position pos:line="101" pos:column="147"/></name></expr></argument>)<pos:position pos:line="101" pos:column="148"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="149"/></expr_stmt></block></then>
            <else pos:line="102" pos:column="13">else
                <block type="pseudo"><break pos:line="103" pos:column="17">break;<pos:position pos:line="103" pos:column="23"/></break></block></else></if>

        }<pos:position pos:line="105" pos:column="10"/></block></then></if>
    }<pos:position pos:line="106" pos:column="6"/></block></for>

    <comment type="block" pos:line="108" pos:column="5">/*
     * Cleanup
     */</comment>
    <if pos:line="111" pos:column="5">if <condition pos:line="111" pos:column="8">(<expr><name pos:line="111" pos:column="9">attr_value<pos:position pos:line="111" pos:column="19"/></name></expr>)<pos:position pos:line="111" pos:column="20"/></condition><then pos:line="111" pos:column="20"> <block pos:line="111" pos:column="21">{
        <for pos:line="112" pos:column="9">for <control pos:line="112" pos:column="13">(<init><decl><type><name pos:line="112" pos:column="14">size_t<pos:position pos:line="112" pos:column="20"/></name></type> <name pos:line="112" pos:column="21">j<pos:position pos:line="112" pos:column="22"/></name> <init pos:line="112" pos:column="23">= <expr><literal type="number" pos:line="112" pos:column="25">0<pos:position pos:line="112" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="112" pos:column="27"/></init> <condition><expr><name pos:line="112" pos:column="28">j<pos:position pos:line="112" pos:column="29"/></name> <operator pos:line="112" pos:column="30">&lt;<pos:position pos:line="112" pos:column="34"/></operator> <name pos:line="112" pos:column="32">max_attr<pos:position pos:line="112" pos:column="40"/></name></expr>;<pos:position pos:line="112" pos:column="41"/></condition> <incr><expr><operator pos:line="112" pos:column="42">++<pos:position pos:line="112" pos:column="44"/></operator><name pos:line="112" pos:column="44">j<pos:position pos:line="112" pos:column="45"/></name></expr></incr>)<pos:position pos:line="112" pos:column="46"/></control> <block pos:line="112" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="113" pos:column="13">xfree<pos:position pos:line="113" pos:column="18"/></name><argument_list pos:line="113" pos:column="18">(<argument><expr><name><name pos:line="113" pos:column="19">attr_value<pos:position pos:line="113" pos:column="29"/></name><index pos:line="113" pos:column="29">[<expr><name pos:line="113" pos:column="30">j<pos:position pos:line="113" pos:column="31"/></name></expr>]<pos:position pos:line="113" pos:column="32"/></index></name></expr></argument>)<pos:position pos:line="113" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="114" pos:column="10"/></block></for>
        <expr_stmt><expr><call><name pos:line="115" pos:column="9">safe_free<pos:position pos:line="115" pos:column="18"/></name><argument_list pos:line="115" pos:column="18">(<argument><expr><name pos:line="115" pos:column="19">attr_value<pos:position pos:line="115" pos:column="29"/></name></expr></argument>)<pos:position pos:line="115" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="116" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="117" pos:column="5">ldap_msgfree<pos:position pos:line="117" pos:column="17"/></name><argument_list pos:line="117" pos:column="17">(<argument><expr><name pos:line="117" pos:column="18">res<pos:position pos:line="117" pos:column="21"/></name></expr></argument>)<pos:position pos:line="117" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="23"/></expr_stmt>

    <return pos:line="119" pos:column="5">return <expr><name pos:line="119" pos:column="12">retval<pos:position pos:line="119" pos:column="18"/></name></expr>;<pos:position pos:line="119" pos:column="19"/></return>
}<pos:position pos:line="120" pos:column="2"/></block></function></unit>
