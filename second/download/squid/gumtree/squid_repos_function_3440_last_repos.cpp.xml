<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3440_last_repos.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">Ecap<pos:position pos:line="2" pos:column="17"/></name><operator pos:line="2" pos:column="17">::<pos:position pos:line="2" pos:column="19"/></operator><name pos:line="2" pos:column="19">Host<pos:position pos:line="2" pos:column="23"/></name><operator pos:line="2" pos:column="23">::<pos:position pos:line="2" pos:column="25"/></operator><name pos:line="2" pos:column="25">noteVersionedService<pos:position pos:line="2" pos:column="45"/></name></name><parameter_list pos:line="2" pos:column="45">(<parameter><decl><type><specifier pos:line="2" pos:column="46">const<pos:position pos:line="2" pos:column="51"/></specifier> <name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">vGiven<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="66">const<pos:position pos:line="2" pos:column="71"/></specifier> <name><name pos:line="2" pos:column="72">libecap<pos:position pos:line="2" pos:column="79"/></name><operator pos:line="2" pos:column="79">::<pos:position pos:line="2" pos:column="81"/></operator><name><name pos:line="2" pos:column="81">weak_ptr<pos:position pos:line="2" pos:column="89"/></name><argument_list type="generic" pos:line="2" pos:column="89">&lt;<argument><expr><name><name pos:line="2" pos:column="90">libecap<pos:position pos:line="2" pos:column="97"/></name><operator pos:line="2" pos:column="97">::<pos:position pos:line="2" pos:column="99"/></operator><name pos:line="2" pos:column="99">adapter<pos:position pos:line="2" pos:column="106"/></name><operator pos:line="2" pos:column="106">::<pos:position pos:line="2" pos:column="108"/></operator><name pos:line="2" pos:column="108">Service<pos:position pos:line="2" pos:column="115"/></name></name></expr></argument>&gt;<pos:position pos:line="2" pos:column="119"/></argument_list></name></name> <modifier pos:line="2" pos:column="117">&amp;<pos:position pos:line="2" pos:column="122"/></modifier></type><name pos:line="2" pos:column="118">weak<pos:position pos:line="2" pos:column="122"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="123"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/*
     * Check that libecap used to build the service is compatible with ours.
     * This has to be done using vGiven string and not Service object itself
     * because dereferencing a Service pointer coming from an unsupported
     * version is unsafe.
     */</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><call><name pos:line="10" pos:column="9">SupportedVersion<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">vGiven<pos:position pos:line="10" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="34">"eCAP service built"<pos:position pos:line="10" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="56"/></condition><then pos:line="10" pos:column="56"> <block pos:line="10" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">Must<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><operator pos:line="11" pos:column="14">!<pos:position pos:line="11" pos:column="15"/></operator><call><name><name pos:line="11" pos:column="15">weak<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">.<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">expired<pos:position pos:line="11" pos:column="27"/></name></name><argument_list pos:line="11" pos:column="27">()<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">RegisterAdapterService<pos:position pos:line="12" pos:column="31"/></name><argument_list pos:line="12" pos:column="31">(<argument><expr><call><name><name pos:line="12" pos:column="32">weak<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">.<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="37">lock<pos:position pos:line="12" pos:column="41"/></name></name><argument_list pos:line="12" pos:column="41">()<pos:position pos:line="12" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
