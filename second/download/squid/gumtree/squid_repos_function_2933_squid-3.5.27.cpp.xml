<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2933_squid-3.5.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">ChunkedCodingParser<pos:position pos:line="1" pos:column="25"/></name><operator pos:line="1" pos:column="25">::<pos:position pos:line="1" pos:column="27"/></operator><name pos:line="1" pos:column="27">parseChunkSize<pos:position pos:line="1" pos:column="41"/></name></name><parameter_list pos:line="1" pos:column="41">()<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">Must<pos:position pos:line="3" pos:column="9"/></name><argument_list pos:line="3" pos:column="9">(<argument><expr><name pos:line="3" pos:column="10">theChunkSize<pos:position pos:line="3" pos:column="22"/></name> <operator pos:line="3" pos:column="23">&lt;=<pos:position pos:line="3" pos:column="28"/></operator> <literal type="number" pos:line="3" pos:column="26">0<pos:position pos:line="3" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="29"/></expr_stmt> <comment type="line" pos:line="3" pos:column="30">// Should(), really</comment>

    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">p<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><call><name><name pos:line="5" pos:column="21">theIn<pos:position pos:line="5" pos:column="26"/></name><operator pos:line="5" pos:column="26">-&gt;<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="28">content<pos:position pos:line="5" pos:column="35"/></name></name><argument_list pos:line="5" pos:column="35">()<pos:position pos:line="5" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><name pos:line="6" pos:column="12">p<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">&lt;<pos:position pos:line="6" pos:column="18"/></operator> <call><name><name pos:line="6" pos:column="16">theIn<pos:position pos:line="6" pos:column="21"/></name><operator pos:line="6" pos:column="21">-&gt;<pos:position pos:line="6" pos:column="26"/></operator><name pos:line="6" pos:column="23">space<pos:position pos:line="6" pos:column="28"/></name></name><argument_list pos:line="6" pos:column="28">()<pos:position pos:line="6" pos:column="30"/></argument_list></call> <operator pos:line="6" pos:column="31">&amp;&amp;<pos:position pos:line="6" pos:column="41"/></operator> <call><name pos:line="6" pos:column="34">xisxdigit<pos:position pos:line="6" pos:column="43"/></name><argument_list pos:line="6" pos:column="43">(<argument><expr><operator pos:line="6" pos:column="44">*<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="45">p<pos:position pos:line="6" pos:column="46"/></name></expr></argument>)<pos:position pos:line="6" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="48"/></condition> <block type="pseudo"><expr_stmt><expr><operator pos:line="6" pos:column="49">++<pos:position pos:line="6" pos:column="51"/></operator><name pos:line="6" pos:column="51">p<pos:position pos:line="6" pos:column="52"/></name></expr>;<pos:position pos:line="6" pos:column="53"/></expr_stmt></block></while>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">p<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">&gt;=<pos:position pos:line="7" pos:column="16"/></operator> <call><name><name pos:line="7" pos:column="14">theIn<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">-&gt;<pos:position pos:line="7" pos:column="24"/></operator><name pos:line="7" pos:column="21">space<pos:position pos:line="7" pos:column="26"/></name></name><argument_list pos:line="7" pos:column="26">()<pos:position pos:line="7" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29"> <block pos:line="7" pos:column="30">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">doNeedMoreData<pos:position pos:line="8" pos:column="23"/></name> <operator pos:line="8" pos:column="24">=<pos:position pos:line="8" pos:column="25"/></operator> <literal type="boolean" pos:line="8" pos:column="26">true<pos:position pos:line="8" pos:column="30"/></literal></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>
        <return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int64_t<pos:position pos:line="12" pos:column="12"/></name></type> <name pos:line="12" pos:column="13">size<pos:position pos:line="12" pos:column="17"/></name> <init pos:line="12" pos:column="18">= <expr><operator pos:line="12" pos:column="20">-<pos:position pos:line="12" pos:column="21"/></operator><literal type="number" pos:line="12" pos:column="21">1<pos:position pos:line="12" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name pos:line="13" pos:column="9">StringToInt64<pos:position pos:line="13" pos:column="22"/></name><argument_list pos:line="13" pos:column="22">(<argument><expr><call><name><name pos:line="13" pos:column="23">theIn<pos:position pos:line="13" pos:column="28"/></name><operator pos:line="13" pos:column="28">-&gt;<pos:position pos:line="13" pos:column="33"/></operator><name pos:line="13" pos:column="30">content<pos:position pos:line="13" pos:column="37"/></name></name><argument_list pos:line="13" pos:column="37">()<pos:position pos:line="13" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="13" pos:column="41">size<pos:position pos:line="13" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="47">&amp;<pos:position pos:line="13" pos:column="52"/></operator><name pos:line="13" pos:column="48">p<pos:position pos:line="13" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="51">16<pos:position pos:line="13" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="55"/></condition><then pos:line="13" pos:column="55"> <block pos:line="13" pos:column="56">{
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">size<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">&lt;<pos:position pos:line="14" pos:column="22"/></operator> <literal type="number" pos:line="14" pos:column="20">0<pos:position pos:line="14" pos:column="21"/></literal></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22">
            <block type="pseudo"><throw pos:line="15" pos:column="13">throw <expr><call><name pos:line="15" pos:column="19">TexcHere<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><literal type="string" pos:line="15" pos:column="28">"negative chunk size"<pos:position pos:line="15" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="51"/></throw></block></then></if>

        <expr_stmt><expr><name pos:line="17" pos:column="9">theChunkSize<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="24">theLeftBodySize<pos:position pos:line="17" pos:column="39"/></name> <operator pos:line="17" pos:column="40">=<pos:position pos:line="17" pos:column="41"/></operator> <name pos:line="17" pos:column="42">size<pos:position pos:line="17" pos:column="46"/></name></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">debugs<pos:position pos:line="18" pos:column="15"/></name><argument_list pos:line="18" pos:column="15">(<argument><expr><literal type="number" pos:line="18" pos:column="16">94<pos:position pos:line="18" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="18" pos:column="19">7<pos:position pos:line="18" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="22">"found chunk: "<pos:position pos:line="18" pos:column="37"/></literal> <operator pos:line="18" pos:column="38">&lt;&lt;<pos:position pos:line="18" pos:column="46"/></operator> <name pos:line="18" pos:column="41">theChunkSize<pos:position pos:line="18" pos:column="53"/></name></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt>
        <comment type="line" pos:line="19" pos:column="9">// parse chunk extensions only in the last-chunk</comment>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">theChunkSize<pos:position pos:line="20" pos:column="25"/></name></expr>)<pos:position pos:line="20" pos:column="26"/></condition><then pos:line="20" pos:column="26">
            <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="13">theStep<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <name pos:line="21" pos:column="23">psUnusedChunkExtension<pos:position pos:line="21" pos:column="45"/></name></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt></block></then>
        <else pos:line="22" pos:column="9">else <block pos:line="22" pos:column="14">{
            <expr_stmt><expr><call><name><name pos:line="23" pos:column="13">theIn<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">consume<pos:position pos:line="23" pos:column="27"/></name></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">p<pos:position pos:line="23" pos:column="29"/></name> <operator pos:line="23" pos:column="30">-<pos:position pos:line="23" pos:column="31"/></operator> <call><name><name pos:line="23" pos:column="32">theIn<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">-&gt;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="39">content<pos:position pos:line="23" pos:column="46"/></name></name><argument_list pos:line="23" pos:column="46">()<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name pos:line="24" pos:column="13">theStep<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">psLastChunkExtension<pos:position pos:line="24" pos:column="43"/></name></expr>;<pos:position pos:line="24" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="25" pos:column="10"/></block></else></if>
    }<pos:position pos:line="26" pos:column="6"/></block></then> <else pos:line="26" pos:column="7">else
        <block type="pseudo"><throw pos:line="27" pos:column="9">throw <expr><call><name pos:line="27" pos:column="15">TexcHere<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><literal type="string" pos:line="27" pos:column="24">"corrupted chunk size"<pos:position pos:line="27" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></throw></block></else></if>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
