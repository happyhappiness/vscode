<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1378_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">SubmissionFailure<pos:position pos:line="2" pos:column="18"/></name><parameter_list pos:line="2" pos:column="18">(<parameter><decl><type><name pos:line="2" pos:column="19">helper<pos:position pos:line="2" pos:column="25"/></name> <modifier pos:line="2" pos:column="26">*<pos:position pos:line="2" pos:column="27"/></modifier></type><name pos:line="2" pos:column="27">hlp<pos:position pos:line="2" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="32">HLPCB<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">callback<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">void<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">data<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">auto<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">result<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name><name pos:line="4" pos:column="19">Helper<pos:position pos:line="4" pos:column="25"/></name><operator pos:line="4" pos:column="25">::<pos:position pos:line="4" pos:column="27"/></operator><name pos:line="4" pos:column="27">Error<pos:position pos:line="4" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">hlp<pos:position pos:line="5" pos:column="13"/></name></expr>)<pos:position pos:line="5" pos:column="14"/></condition><then pos:line="5" pos:column="14"> <block pos:line="5" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">debugs<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="number" pos:line="6" pos:column="16">84<pos:position pos:line="6" pos:column="18"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="20">3<pos:position pos:line="6" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="23">"no helper"<pos:position pos:line="6" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="7" pos:column="9">result<pos:position pos:line="7" pos:column="15"/></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <name><name pos:line="7" pos:column="18">Helper<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">::<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="26">Unknown<pos:position pos:line="7" pos:column="33"/></name></name></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <comment type="line" pos:line="9" pos:column="5">// else pretend the helper has responded with ERR</comment>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">callback<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument><expr><name pos:line="11" pos:column="14">data<pos:position pos:line="11" pos:column="18"/></name></expr></argument>, <argument><expr><call><name><name pos:line="11" pos:column="20">Helper<pos:position pos:line="11" pos:column="26"/></name><operator pos:line="11" pos:column="26">::<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="28">Reply<pos:position pos:line="11" pos:column="33"/></name></name><argument_list pos:line="11" pos:column="33">(<argument><expr><name pos:line="11" pos:column="34">result<pos:position pos:line="11" pos:column="40"/></name></expr></argument>)<pos:position pos:line="11" pos:column="41"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="43"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
