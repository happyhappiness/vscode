<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3712_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Adaptation<pos:position pos:line="2" pos:column="11"/></name><operator pos:line="2" pos:column="11">::<pos:position pos:line="2" pos:column="13"/></operator><name pos:line="2" pos:column="13">ServiceGroup<pos:position pos:line="2" pos:column="25"/></name><operator pos:line="2" pos:column="25">::<pos:position pos:line="2" pos:column="27"/></operator><name pos:line="2" pos:column="27">finalize<pos:position pos:line="2" pos:column="35"/></name></name><parameter_list pos:line="2" pos:column="35">()<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="line" pos:line="4" pos:column="5">// 1) warn if services have different methods or vectoring point</comment>
    <comment type="line" pos:line="5" pos:column="5">// 2) warn if all-same services have different bypass status</comment>
    <comment type="line" pos:line="6" pos:column="5">// 3) warn if there are seemingly identical services in the group</comment>
    <comment type="line" pos:line="7" pos:column="5">// TODO: optimize by remembering ServicePointers rather than IDs</comment>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">String<pos:position pos:line="9" pos:column="11"/></name></type> <name pos:line="9" pos:column="12">baselineKey<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">bool<pos:position pos:line="10" pos:column="9"/></name></type> <name pos:line="10" pos:column="10">baselineBypass<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><literal type="boolean" pos:line="10" pos:column="27">false<pos:position pos:line="10" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><decl><type><name pos:line="11" pos:column="10">Pos<pos:position pos:line="11" pos:column="13"/></name></type> <name pos:line="11" pos:column="14">pos<pos:position pos:line="11" pos:column="17"/></name> <init pos:line="11" pos:column="18">= <expr><literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="22"/></init> <condition><expr><call><name pos:line="11" pos:column="23">has<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">pos<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="32"/></condition> <incr><expr><operator pos:line="11" pos:column="33">++<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="35">pos<pos:position pos:line="11" pos:column="38"/></name></expr></incr>)<pos:position pos:line="11" pos:column="39"/></control> <block pos:line="11" pos:column="40">{
        <comment type="line" pos:line="12" pos:column="9">// TODO: quit on all errors</comment>
        <decl_stmt><decl><type><specifier pos:line="13" pos:column="9">const<pos:position pos:line="13" pos:column="14"/></specifier> <name pos:line="13" pos:column="15">String<pos:position pos:line="13" pos:column="21"/></name> <modifier pos:line="13" pos:column="22">&amp;<pos:position pos:line="13" pos:column="27"/></modifier></type><name pos:line="13" pos:column="23">serviceId<pos:position pos:line="13" pos:column="32"/></name> <init pos:line="13" pos:column="33">= <expr><name><name pos:line="13" pos:column="35">services<pos:position pos:line="13" pos:column="43"/></name><index pos:line="13" pos:column="43">[<expr><name pos:line="13" pos:column="44">pos<pos:position pos:line="13" pos:column="47"/></name></expr>]<pos:position pos:line="13" pos:column="48"/></index></name></expr></init></decl>;<pos:position pos:line="13" pos:column="49"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">ServicePointer<pos:position pos:line="14" pos:column="23"/></name></type> <name pos:line="14" pos:column="24">service<pos:position pos:line="14" pos:column="31"/></name> <init pos:line="14" pos:column="32">= <expr><call><name pos:line="14" pos:column="34">at<pos:position pos:line="14" pos:column="36"/></name><argument_list pos:line="14" pos:column="36">(<argument><expr><name pos:line="14" pos:column="37">pos<pos:position pos:line="14" pos:column="40"/></name></expr></argument>)<pos:position pos:line="14" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="42"/></decl_stmt>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">service<pos:position pos:line="15" pos:column="20"/></name> <operator pos:line="15" pos:column="21">!=<pos:position pos:line="15" pos:column="23"/></operator> <name pos:line="15" pos:column="24">NULL<pos:position pos:line="15" pos:column="28"/></name></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29"> <block pos:line="15" pos:column="30">{
            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><name pos:line="16" pos:column="17">method<pos:position pos:line="16" pos:column="23"/></name> <operator pos:line="16" pos:column="24">==<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="27">methodNone<pos:position pos:line="16" pos:column="37"/></name></expr>)<pos:position pos:line="16" pos:column="38"/></condition><then pos:line="16" pos:column="38"> <block pos:line="16" pos:column="39">{
                <comment type="line" pos:line="17" pos:column="17">// optimization: cache values that should be the same</comment>
                <expr_stmt><expr><name pos:line="18" pos:column="17">method<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <call><name><name pos:line="18" pos:column="26">service<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">-&gt;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="35">cfg<pos:position pos:line="18" pos:column="38"/></name></name><argument_list pos:line="18" pos:column="38">()<pos:position pos:line="18" pos:column="40"/></argument_list></call><operator pos:line="18" pos:column="40">.<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="41">method<pos:position pos:line="18" pos:column="47"/></name></expr>;<pos:position pos:line="18" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name pos:line="19" pos:column="17">point<pos:position pos:line="19" pos:column="22"/></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <call><name><name pos:line="19" pos:column="25">service<pos:position pos:line="19" pos:column="32"/></name><operator pos:line="19" pos:column="32">-&gt;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="34">cfg<pos:position pos:line="19" pos:column="37"/></name></name><argument_list pos:line="19" pos:column="37">()<pos:position pos:line="19" pos:column="39"/></argument_list></call><operator pos:line="19" pos:column="39">.<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="40">point<pos:position pos:line="19" pos:column="45"/></name></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="20" pos:column="14"/></block></then> <else pos:line="20" pos:column="15">else <block pos:line="20" pos:column="20">{
                <if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">method<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">!=<pos:position pos:line="21" pos:column="30"/></operator> <call><name><name pos:line="21" pos:column="31">service<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">-&gt;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="40">cfg<pos:position pos:line="21" pos:column="43"/></name></name><argument_list pos:line="21" pos:column="43">()<pos:position pos:line="21" pos:column="45"/></argument_list></call><operator pos:line="21" pos:column="45">.<pos:position pos:line="21" pos:column="46"/></operator><name pos:line="21" pos:column="46">method<pos:position pos:line="21" pos:column="52"/></name></expr>)<pos:position pos:line="21" pos:column="53"/></condition><then pos:line="21" pos:column="53">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="21">finalizeMsg<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><literal type="string" pos:line="22" pos:column="33">"Inconsistent service method for"<pos:position pos:line="22" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="68">serviceId<pos:position pos:line="22" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="22" pos:column="79">true<pos:position pos:line="22" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="85"/></expr_stmt></block></then></if>
                <if pos:line="23" pos:column="17">if <condition pos:line="23" pos:column="20">(<expr><name pos:line="23" pos:column="21">point<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">!=<pos:position pos:line="23" pos:column="29"/></operator> <call><name><name pos:line="23" pos:column="30">service<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">-&gt;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="39">cfg<pos:position pos:line="23" pos:column="42"/></name></name><argument_list pos:line="23" pos:column="42">()<pos:position pos:line="23" pos:column="44"/></argument_list></call><operator pos:line="23" pos:column="44">.<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="45">point<pos:position pos:line="23" pos:column="50"/></name></expr>)<pos:position pos:line="23" pos:column="51"/></condition><then pos:line="23" pos:column="51">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="21">finalizeMsg<pos:position pos:line="24" pos:column="32"/></name><argument_list pos:line="24" pos:column="32">(<argument><expr><literal type="string" pos:line="24" pos:column="33">"Inconsistent vectoring point for"<pos:position pos:line="24" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="69">serviceId<pos:position pos:line="24" pos:column="78"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="24" pos:column="80">true<pos:position pos:line="24" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="86"/></expr_stmt></block></then></if>
            }<pos:position pos:line="25" pos:column="14"/></block></else></if>

            <expr_stmt><expr><call><name pos:line="27" pos:column="13">checkUniqueness<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">pos<pos:position pos:line="27" pos:column="32"/></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>

            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">allServicesSame<pos:position pos:line="29" pos:column="32"/></name></expr>)<pos:position pos:line="29" pos:column="33"/></condition><then pos:line="29" pos:column="33"> <block pos:line="29" pos:column="34">{
                <if pos:line="30" pos:column="17">if <condition pos:line="30" pos:column="20">(<expr><operator pos:line="30" pos:column="21">!<pos:position pos:line="30" pos:column="22"/></operator><call><name><name pos:line="30" pos:column="22">baselineKey<pos:position pos:line="30" pos:column="33"/></name><operator pos:line="30" pos:column="33">.<pos:position pos:line="30" pos:column="34"/></operator><name pos:line="30" pos:column="34">size<pos:position pos:line="30" pos:column="38"/></name></name><argument_list pos:line="30" pos:column="38">()<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="41"/></condition><then pos:line="30" pos:column="41"> <block pos:line="30" pos:column="42">{
                    <expr_stmt><expr><name pos:line="31" pos:column="21">baselineKey<pos:position pos:line="31" pos:column="32"/></name> <operator pos:line="31" pos:column="33">=<pos:position pos:line="31" pos:column="34"/></operator> <call><name><name pos:line="31" pos:column="35">service<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">-&gt;<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="44">cfg<pos:position pos:line="31" pos:column="47"/></name></name><argument_list pos:line="31" pos:column="47">()<pos:position pos:line="31" pos:column="49"/></argument_list></call><operator pos:line="31" pos:column="49">.<pos:position pos:line="31" pos:column="50"/></operator><name pos:line="31" pos:column="50">key<pos:position pos:line="31" pos:column="53"/></name></expr>;<pos:position pos:line="31" pos:column="54"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="32" pos:column="21">baselineBypass<pos:position pos:line="32" pos:column="35"/></name> <operator pos:line="32" pos:column="36">=<pos:position pos:line="32" pos:column="37"/></operator> <call><name><name pos:line="32" pos:column="38">service<pos:position pos:line="32" pos:column="45"/></name><operator pos:line="32" pos:column="45">-&gt;<pos:position pos:line="32" pos:column="50"/></operator><name pos:line="32" pos:column="47">cfg<pos:position pos:line="32" pos:column="50"/></name></name><argument_list pos:line="32" pos:column="50">()<pos:position pos:line="32" pos:column="52"/></argument_list></call><operator pos:line="32" pos:column="52">.<pos:position pos:line="32" pos:column="53"/></operator><name pos:line="32" pos:column="53">bypass<pos:position pos:line="32" pos:column="59"/></name></expr>;<pos:position pos:line="32" pos:column="60"/></expr_stmt>
                }<pos:position pos:line="33" pos:column="18"/></block></then> <elseif pos:line="33" pos:column="19">else <if pos:line="33" pos:column="24">if <condition pos:line="33" pos:column="27">(<expr><name pos:line="33" pos:column="28">baselineBypass<pos:position pos:line="33" pos:column="42"/></name> <operator pos:line="33" pos:column="43">!=<pos:position pos:line="33" pos:column="45"/></operator> <call><name><name pos:line="33" pos:column="46">service<pos:position pos:line="33" pos:column="53"/></name><operator pos:line="33" pos:column="53">-&gt;<pos:position pos:line="33" pos:column="58"/></operator><name pos:line="33" pos:column="55">cfg<pos:position pos:line="33" pos:column="58"/></name></name><argument_list pos:line="33" pos:column="58">()<pos:position pos:line="33" pos:column="60"/></argument_list></call><operator pos:line="33" pos:column="60">.<pos:position pos:line="33" pos:column="61"/></operator><name pos:line="33" pos:column="61">bypass<pos:position pos:line="33" pos:column="67"/></name></expr>)<pos:position pos:line="33" pos:column="68"/></condition><then pos:line="33" pos:column="68"> <block pos:line="33" pos:column="69">{
                    <expr_stmt><expr><call><name pos:line="34" pos:column="21">debugs<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><literal type="number" pos:line="34" pos:column="28">93<pos:position pos:line="34" pos:column="30"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="34" pos:column="31">0<pos:position pos:line="34" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="34">"WARNING: Inconsistent bypass in "<pos:position pos:line="34" pos:column="68"/></literal> <operator pos:line="34" pos:column="69">&lt;&lt;<pos:position pos:line="34" pos:column="77"/></operator> <name pos:line="34" pos:column="72">kind<pos:position pos:line="34" pos:column="76"/></name> <operator pos:line="34" pos:column="77">&lt;&lt;<pos:position pos:line="34" pos:column="85"/></operator>
                           <literal type="char" pos:line="35" pos:column="28">' '<pos:position pos:line="35" pos:column="31"/></literal> <operator pos:line="35" pos:column="32">&lt;&lt;<pos:position pos:line="35" pos:column="40"/></operator> <name pos:line="35" pos:column="35">id<pos:position pos:line="35" pos:column="37"/></name> <operator pos:line="35" pos:column="38">&lt;&lt;<pos:position pos:line="35" pos:column="46"/></operator> <literal type="string" pos:line="35" pos:column="41">" may produce surprising results: "<pos:position pos:line="35" pos:column="76"/></literal> <operator pos:line="35" pos:column="77">&lt;&lt;<pos:position pos:line="35" pos:column="85"/></operator>
                           <name pos:line="36" pos:column="28">baselineKey<pos:position pos:line="36" pos:column="39"/></name> <operator pos:line="36" pos:column="40">&lt;&lt;<pos:position pos:line="36" pos:column="48"/></operator> <literal type="string" pos:line="36" pos:column="43">" vs. "<pos:position pos:line="36" pos:column="50"/></literal> <operator pos:line="36" pos:column="51">&lt;&lt;<pos:position pos:line="36" pos:column="59"/></operator> <name pos:line="36" pos:column="54">serviceId<pos:position pos:line="36" pos:column="63"/></name></expr></argument>)<pos:position pos:line="36" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="65"/></expr_stmt>
                }<pos:position pos:line="37" pos:column="18"/></block></then></if></elseif></if>
            }<pos:position pos:line="38" pos:column="14"/></block></then></if>
        }<pos:position pos:line="39" pos:column="10"/></block></then> <else pos:line="39" pos:column="11">else <block pos:line="39" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">finalizeMsg<pos:position pos:line="40" pos:column="24"/></name><argument_list pos:line="40" pos:column="24">(<argument><expr><literal type="string" pos:line="40" pos:column="25">"ERROR: Unknown adaptation name"<pos:position pos:line="40" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="59">serviceId<pos:position pos:line="40" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="boolean" pos:line="40" pos:column="70">true<pos:position pos:line="40" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="76"/></expr_stmt>
        }<pos:position pos:line="41" pos:column="10"/></block></else></if>
    }<pos:position pos:line="42" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">debugs<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><literal type="number" pos:line="43" pos:column="12">93<pos:position pos:line="43" pos:column="14"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="43" pos:column="15">7<pos:position pos:line="43" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="18">HERE<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">&lt;&lt;<pos:position pos:line="43" pos:column="31"/></operator> <literal type="string" pos:line="43" pos:column="26">"finalized "<pos:position pos:line="43" pos:column="38"/></literal> <operator pos:line="43" pos:column="39">&lt;&lt;<pos:position pos:line="43" pos:column="47"/></operator> <name pos:line="43" pos:column="42">kind<pos:position pos:line="43" pos:column="46"/></name> <operator pos:line="43" pos:column="47">&lt;&lt;<pos:position pos:line="43" pos:column="55"/></operator> <literal type="string" pos:line="43" pos:column="50">": "<pos:position pos:line="43" pos:column="54"/></literal> <operator pos:line="43" pos:column="55">&lt;&lt;<pos:position pos:line="43" pos:column="63"/></operator> <name pos:line="43" pos:column="58">id<pos:position pos:line="43" pos:column="60"/></name></expr></argument>)<pos:position pos:line="43" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="62"/></expr_stmt>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
