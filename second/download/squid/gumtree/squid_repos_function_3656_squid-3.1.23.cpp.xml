<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3656_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">IpAddress<pos:position pos:line="1" pos:column="15"/></name><operator pos:line="1" pos:column="15">::<pos:position pos:line="1" pos:column="17"/></operator><name pos:line="1" pos:column="17">LookupHostIP<pos:position pos:line="1" pos:column="29"/></name></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><specifier pos:line="1" pos:column="30">const<pos:position pos:line="1" pos:column="35"/></specifier> <name pos:line="1" pos:column="36">char<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">s<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">bool<pos:position pos:line="1" pos:column="49"/></name></type> <name pos:line="1" pos:column="50">nodns<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">err<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><literal type="number" pos:line="3" pos:column="15">0<pos:position pos:line="3" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="5" pos:column="5">short<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">port<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">addrinfo<pos:position pos:line="7" pos:column="20"/></name></name> <modifier pos:line="7" pos:column="21">*<pos:position pos:line="7" pos:column="22"/></modifier></type><name pos:line="7" pos:column="22">res<pos:position pos:line="7" pos:column="25"/></name> <init pos:line="7" pos:column="26">= <expr><name pos:line="7" pos:column="28">NULL<pos:position pos:line="7" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">addrinfo<pos:position pos:line="9" pos:column="20"/></name></name></type> <name pos:line="9" pos:column="21">want<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">memset<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><operator pos:line="11" pos:column="12">&amp;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="13">want<pos:position pos:line="11" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="22">sizeof<argument_list pos:line="11" pos:column="28">(<argument><expr pos:line="11" pos:column="29">struct <name pos:line="11" pos:column="36">addrinfo<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="47"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">nodns<pos:position pos:line="12" pos:column="14"/></name></expr>)<pos:position pos:line="12" pos:column="15"/></condition><then pos:line="12" pos:column="15"> <block pos:line="12" pos:column="16">{
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">want<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">.<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">ai_flags<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">AI_NUMERICHOST<pos:position pos:line="13" pos:column="39"/></name></expr>;<pos:position pos:line="13" pos:column="40"/></expr_stmt> <comment type="line" pos:line="13" pos:column="41">// prevent actual DNS lookups!</comment>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="15" pos:column="5">0<pos:position pos:line="15" pos:column="6"/></literal></expr></cpp:if>
    else if (!Ip::EnableIpv6)
        want.ai_family = AF_INET;  <comment type="line" pos:line="17" pos:column="36">// maybe prevent IPv6 DNS lookups.</comment>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">( <expr><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">err<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <call><name pos:line="20" pos:column="17">xgetaddrinfo<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">s<pos:position pos:line="20" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="33">NULL<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="39">&amp;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="40">want<pos:position pos:line="20" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="46">&amp;<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="47">res<pos:position pos:line="20" pos:column="50"/></name></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call><operator pos:line="20" pos:column="51">)<pos:position pos:line="20" pos:column="52"/></operator> <operator pos:line="20" pos:column="53">!=<pos:position pos:line="20" pos:column="55"/></operator> <literal type="number" pos:line="20" pos:column="56">0<pos:position pos:line="20" pos:column="57"/></literal></expr>)<pos:position pos:line="20" pos:column="58"/></condition><then pos:line="20" pos:column="58"> <block pos:line="20" pos:column="59">{
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">debugs<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="number" pos:line="21" pos:column="16">14<pos:position pos:line="21" pos:column="18"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="21" pos:column="19">3<pos:position pos:line="21" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="22">HERE<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">&lt;&lt;<pos:position pos:line="21" pos:column="35"/></operator> <literal type="string" pos:line="21" pos:column="30">"Given Non-IP '"<pos:position pos:line="21" pos:column="46"/></literal> <operator pos:line="21" pos:column="47">&lt;&lt;<pos:position pos:line="21" pos:column="55"/></operator> <name pos:line="21" pos:column="50">s<pos:position pos:line="21" pos:column="51"/></name> <operator pos:line="21" pos:column="52">&lt;&lt;<pos:position pos:line="21" pos:column="60"/></operator> <literal type="string" pos:line="21" pos:column="55">"': "<pos:position pos:line="21" pos:column="60"/></literal> <operator pos:line="21" pos:column="61">&lt;&lt;<pos:position pos:line="21" pos:column="69"/></operator> <call><name pos:line="21" pos:column="64">xgai_strerror<pos:position pos:line="21" pos:column="77"/></name><argument_list pos:line="21" pos:column="77">(<argument><expr><name pos:line="21" pos:column="78">err<pos:position pos:line="21" pos:column="81"/></name></expr></argument>)<pos:position pos:line="21" pos:column="82"/></argument_list></call></expr></argument> )<pos:position pos:line="21" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="85"/></expr_stmt>
        <comment type="block" pos:line="22" pos:column="9">/* free the memory xgetaddrinfo() dynamically allocated. */</comment>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">res<pos:position pos:line="23" pos:column="16"/></name></expr>)<pos:position pos:line="23" pos:column="17"/></condition><then pos:line="23" pos:column="17"> <block pos:line="23" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">xfreeaddrinfo<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">res<pos:position pos:line="24" pos:column="30"/></name></expr></argument>)<pos:position pos:line="24" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name pos:line="25" pos:column="13">res<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">NULL<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
        <return pos:line="27" pos:column="9">return <expr><literal type="boolean" pos:line="27" pos:column="16">false<pos:position pos:line="27" pos:column="21"/></literal></expr>;<pos:position pos:line="27" pos:column="22"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="30" pos:column="5">/*
     *  NP: =(sockaddr_*) may alter the port. we don't want that.
     *      all we have been given as input was an IPA.
     */</comment>
    <expr_stmt><expr><name pos:line="34" pos:column="5">port<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <call><name pos:line="34" pos:column="12">GetPort<pos:position pos:line="34" pos:column="19"/></name><argument_list pos:line="34" pos:column="19">()<pos:position pos:line="34" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">operator<name pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></name></name><argument_list pos:line="35" pos:column="14">(<argument><expr><operator pos:line="35" pos:column="15">*<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="16">res<pos:position pos:line="35" pos:column="19"/></name></expr></argument>)<pos:position pos:line="35" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">SetPort<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">port<pos:position pos:line="36" pos:column="17"/></name></expr></argument>)<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* free the memory xgetaddrinfo() dynamically allocated. */</comment>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">xfreeaddrinfo<pos:position pos:line="39" pos:column="18"/></name><argument_list pos:line="39" pos:column="18">(<argument><expr><name pos:line="39" pos:column="19">res<pos:position pos:line="39" pos:column="22"/></name></expr></argument>)<pos:position pos:line="39" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name pos:line="41" pos:column="5">res<pos:position pos:line="41" pos:column="8"/></name> <operator pos:line="41" pos:column="9">=<pos:position pos:line="41" pos:column="10"/></operator> <name pos:line="41" pos:column="11">NULL<pos:position pos:line="41" pos:column="15"/></name></expr>;<pos:position pos:line="41" pos:column="16"/></expr_stmt>

    <return pos:line="43" pos:column="5">return <expr><literal type="boolean" pos:line="43" pos:column="12">true<pos:position pos:line="43" pos:column="16"/></literal></expr>;<pos:position pos:line="43" pos:column="17"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
