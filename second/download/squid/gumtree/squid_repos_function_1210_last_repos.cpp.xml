<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_1210_last_repos.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">watch_child<pos:position pos:line="2" pos:column="12"/></name><parameter_list pos:line="2" pos:column="12">(<parameter><decl><type><name pos:line="2" pos:column="13">char<pos:position pos:line="2" pos:column="17"/></name> <modifier pos:line="2" pos:column="18">*<pos:position pos:line="2" pos:column="19"/></modifier></type><name><name pos:line="2" pos:column="19">argv<pos:position pos:line="2" pos:column="23"/></name><index pos:line="2" pos:column="23">[]<pos:position pos:line="2" pos:column="25"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="26"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><operator pos:line="4" pos:column="5">!<pos:position pos:line="4" pos:column="6"/></operator><name pos:line="4" pos:column="6">_SQUID_WINDOWS_<pos:position pos:line="4" pos:column="21"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">prog<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">pid_t<pos:position pos:line="6" pos:column="10"/></name></type> <name pos:line="6" pos:column="11">pid<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">TIOCNOTTY<pos:position pos:line="7" pos:column="17"/></name></cpp:ifdef>

    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">i<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">nullfd<pos:position pos:line="12" pos:column="15"/></name></decl>;<pos:position pos:line="12" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="14" pos:column="5">enter_suid<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">()<pos:position pos:line="14" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">openlog<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">APP_SHORTNAME<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="28">LOG_PID<pos:position pos:line="16" pos:column="35"/></name> <operator pos:line="16" pos:column="36">|<pos:position pos:line="16" pos:column="37"/></operator> <name pos:line="16" pos:column="38">LOG_NDELAY<pos:position pos:line="16" pos:column="48"/></name> <operator pos:line="16" pos:column="49">|<pos:position pos:line="16" pos:column="50"/></operator> <name pos:line="16" pos:column="51">LOG_CONS<pos:position pos:line="16" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="61">LOG_LOCAL4<pos:position pos:line="16" pos:column="71"/></name></expr></argument>)<pos:position pos:line="16" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="73"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">opt_foreground<pos:position pos:line="18" pos:column="24"/></name></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="19" pos:column="9">GoIntoBackground<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">()<pos:position pos:line="19" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="28"/></expr_stmt></block></then></if>

    <comment type="line" pos:line="21" pos:column="5">// TODO: Fails with --foreground if the calling process is process group</comment>
    <comment type="line" pos:line="22" pos:column="5">//       leader, which is always (?) the case. Should probably moved to</comment>
    <comment type="line" pos:line="23" pos:column="5">//       GoIntoBackground and executed only after successfully forking</comment>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><call><name pos:line="24" pos:column="9">setsid<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">()<pos:position pos:line="24" pos:column="17"/></argument_list></call> <operator pos:line="24" pos:column="18">&lt;<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="20">0<pos:position pos:line="24" pos:column="21"/></literal></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22"> <block pos:line="24" pos:column="23">{
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">int<pos:position pos:line="25" pos:column="12"/></name></type> <name pos:line="25" pos:column="13">xerrno<pos:position pos:line="25" pos:column="19"/></name> <init pos:line="25" pos:column="20">= <expr><name pos:line="25" pos:column="22">errno<pos:position pos:line="25" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="25" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">syslog<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">LOG_ALERT<pos:position pos:line="26" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="27">"setsid failed: %s"<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="48">xstrerr<pos:position pos:line="26" pos:column="55"/></name><argument_list pos:line="26" pos:column="55">(<argument><expr><name pos:line="26" pos:column="56">xerrno<pos:position pos:line="26" pos:column="62"/></name></expr></argument>)<pos:position pos:line="26" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">closelog<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">()<pos:position pos:line="29" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="16"/></expr_stmt>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">TIOCNOTTY<pos:position pos:line="31" pos:column="17"/></name></cpp:ifdef>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">(<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">i<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <call><name pos:line="33" pos:column="14">open<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><literal type="string" pos:line="33" pos:column="19">"/dev/tty"<pos:position pos:line="33" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="31">O_RDWR<pos:position pos:line="33" pos:column="37"/></name> <operator pos:line="33" pos:column="38">|<pos:position pos:line="33" pos:column="39"/></operator> <name pos:line="33" pos:column="40">O_TEXT<pos:position pos:line="33" pos:column="46"/></name></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call><operator pos:line="33" pos:column="47">)<pos:position pos:line="33" pos:column="48"/></operator> <operator pos:line="33" pos:column="49">&gt;=<pos:position pos:line="33" pos:column="54"/></operator> <literal type="number" pos:line="33" pos:column="52">0<pos:position pos:line="33" pos:column="53"/></literal></expr>)<pos:position pos:line="33" pos:column="54"/></condition><then pos:line="33" pos:column="54"> <block pos:line="33" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">ioctl<pos:position pos:line="34" pos:column="14"/></name><argument_list pos:line="34" pos:column="14">(<argument><expr><name pos:line="34" pos:column="15">i<pos:position pos:line="34" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="18">TIOCNOTTY<pos:position pos:line="34" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="29">NULL<pos:position pos:line="34" pos:column="33"/></name></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">close<pos:position pos:line="35" pos:column="14"/></name><argument_list pos:line="35" pos:column="14">(<argument><expr><name pos:line="35" pos:column="15">i<pos:position pos:line="35" pos:column="16"/></name></expr></argument>)<pos:position pos:line="35" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="40" pos:column="5">/*
     * RBCOLLINS - if cygwin stackdumps when squid is run without
     * -N, check the cygwin1.dll version, it needs to be AT LEAST
     * 1.1.3.  execvp had a bit overflow error in a loop..
     */</comment>
    <comment type="block" pos:line="45" pos:column="5">/* Connect stdio to /dev/null in daemon mode */</comment>
    <expr_stmt><expr><name pos:line="46" pos:column="5">nullfd<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator> <call><name pos:line="46" pos:column="14">open<pos:position pos:line="46" pos:column="18"/></name><argument_list pos:line="46" pos:column="18">(<argument><expr><name pos:line="46" pos:column="19">_PATH_DEVNULL<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">O_RDWR<pos:position pos:line="46" pos:column="40"/></name> <operator pos:line="46" pos:column="41">|<pos:position pos:line="46" pos:column="42"/></operator> <name pos:line="46" pos:column="43">O_TEXT<pos:position pos:line="46" pos:column="49"/></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">nullfd<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">&lt;<pos:position pos:line="48" pos:column="20"/></operator> <literal type="number" pos:line="48" pos:column="18">0<pos:position pos:line="48" pos:column="19"/></literal></expr>)<pos:position pos:line="48" pos:column="20"/></condition><then pos:line="48" pos:column="20"> <block pos:line="48" pos:column="21">{
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">int<pos:position pos:line="49" pos:column="12"/></name></type> <name pos:line="49" pos:column="13">xerrno<pos:position pos:line="49" pos:column="19"/></name> <init pos:line="49" pos:column="20">= <expr><name pos:line="49" pos:column="22">errno<pos:position pos:line="49" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="49" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">fatalf<pos:position pos:line="50" pos:column="15"/></name><argument_list pos:line="50" pos:column="15">(<argument><expr><name pos:line="50" pos:column="16">_PATH_DEVNULL<pos:position pos:line="50" pos:column="29"/></name> <literal type="string" pos:line="50" pos:column="30">" %s\n"<pos:position pos:line="50" pos:column="37"/></literal></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="39">xstrerr<pos:position pos:line="50" pos:column="46"/></name><argument_list pos:line="50" pos:column="46">(<argument><expr><name pos:line="50" pos:column="47">xerrno<pos:position pos:line="50" pos:column="53"/></name></expr></argument>)<pos:position pos:line="50" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="53" pos:column="5">dup2<pos:position pos:line="53" pos:column="9"/></name><argument_list pos:line="53" pos:column="9">(<argument><expr><name pos:line="53" pos:column="10">nullfd<pos:position pos:line="53" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="18">0<pos:position pos:line="53" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="21"/></expr_stmt>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name><name pos:line="55" pos:column="9">Debug<pos:position pos:line="55" pos:column="14"/></name><operator pos:line="55" pos:column="14">::<pos:position pos:line="55" pos:column="16"/></operator><name pos:line="55" pos:column="16">log_stderr<pos:position pos:line="55" pos:column="26"/></name></name> <operator pos:line="55" pos:column="27">&lt;<pos:position pos:line="55" pos:column="31"/></operator> <literal type="number" pos:line="55" pos:column="29">0<pos:position pos:line="55" pos:column="30"/></literal></expr>)<pos:position pos:line="55" pos:column="31"/></condition><then pos:line="55" pos:column="31"> <block pos:line="55" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">dup2<pos:position pos:line="56" pos:column="13"/></name><argument_list pos:line="56" pos:column="13">(<argument><expr><name pos:line="56" pos:column="14">nullfd<pos:position pos:line="56" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="22">1<pos:position pos:line="56" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">dup2<pos:position pos:line="57" pos:column="13"/></name><argument_list pos:line="57" pos:column="13">(<argument><expr><name pos:line="57" pos:column="14">nullfd<pos:position pos:line="57" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="22">2<pos:position pos:line="57" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">leave_suid<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">()<pos:position pos:line="60" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="61" pos:column="5">Instance<pos:position pos:line="61" pos:column="13"/></name><operator pos:line="61" pos:column="13">::<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="15">WriteOurPid<pos:position pos:line="61" pos:column="26"/></name></name><argument_list pos:line="61" pos:column="26">()<pos:position pos:line="61" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">StartUsingConfig<pos:position pos:line="62" pos:column="21"/></name><argument_list pos:line="62" pos:column="21">()<pos:position pos:line="62" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">enter_suid<pos:position pos:line="63" pos:column="15"/></name><argument_list pos:line="63" pos:column="15">()<pos:position pos:line="63" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="18"/></expr_stmt>

<cpp:if pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">if<pos:position pos:line="65" pos:column="4"/></cpp:directive> <expr><call><name pos:line="65" pos:column="5">defined<pos:position pos:line="65" pos:column="12"/></name><argument_list pos:line="65" pos:column="12">(<argument><expr><name pos:line="65" pos:column="13">_SQUID_LINUX_THREADS_<pos:position pos:line="65" pos:column="34"/></name></expr></argument>)<pos:position pos:line="65" pos:column="35"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">squid_signal<pos:position pos:line="66" pos:column="17"/></name><argument_list pos:line="66" pos:column="17">(<argument><expr><name pos:line="66" pos:column="18">SIGQUIT<pos:position pos:line="66" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="27">rotate_logs<pos:position pos:line="66" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="40">0<pos:position pos:line="66" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">squid_signal<pos:position pos:line="67" pos:column="17"/></name><argument_list pos:line="67" pos:column="17">(<argument><expr><name pos:line="67" pos:column="18">SIGTRAP<pos:position pos:line="67" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="27">sigusr2_handle<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="43">0<pos:position pos:line="67" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="46"/></expr_stmt>
<cpp:else pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">else<pos:position pos:line="68" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">squid_signal<pos:position pos:line="69" pos:column="17"/></name><argument_list pos:line="69" pos:column="17">(<argument><expr><name pos:line="69" pos:column="18">SIGUSR1<pos:position pos:line="69" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="27">rotate_logs<pos:position pos:line="69" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="40">0<pos:position pos:line="69" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">squid_signal<pos:position pos:line="70" pos:column="17"/></name><argument_list pos:line="70" pos:column="17">(<argument><expr><name pos:line="70" pos:column="18">SIGUSR2<pos:position pos:line="70" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="27">sigusr2_handle<pos:position pos:line="70" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="43">0<pos:position pos:line="70" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="46"/></expr_stmt>
<cpp:endif pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">endif<pos:position pos:line="71" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="73" pos:column="5">squid_signal<pos:position pos:line="73" pos:column="17"/></name><argument_list pos:line="73" pos:column="17">(<argument><expr><name pos:line="73" pos:column="18">SIGHUP<pos:position pos:line="73" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="26">reconfigure<pos:position pos:line="73" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="39">0<pos:position pos:line="73" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="75" pos:column="5">squid_signal<pos:position pos:line="75" pos:column="17"/></name><argument_list pos:line="75" pos:column="17">(<argument><expr><name pos:line="75" pos:column="18">SIGTERM<pos:position pos:line="75" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="27">master_shutdown<pos:position pos:line="75" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="44">0<pos:position pos:line="75" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="76" pos:column="5">squid_signal<pos:position pos:line="76" pos:column="17"/></name><argument_list pos:line="76" pos:column="17">(<argument><expr><name pos:line="76" pos:column="18">SIGINT<pos:position pos:line="76" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="26">master_shutdown<pos:position pos:line="76" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="43">0<pos:position pos:line="76" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="46"/></expr_stmt>
<cpp:ifdef pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">ifdef<pos:position pos:line="77" pos:column="7"/></cpp:directive> <name pos:line="77" pos:column="8">SIGTTIN<pos:position pos:line="77" pos:column="15"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="78" pos:column="5">squid_signal<pos:position pos:line="78" pos:column="17"/></name><argument_list pos:line="78" pos:column="17">(<argument><expr><name pos:line="78" pos:column="18">SIGTTIN<pos:position pos:line="78" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="27">master_shutdown<pos:position pos:line="78" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="78" pos:column="44">0<pos:position pos:line="78" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">endif<pos:position pos:line="79" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name><name pos:line="81" pos:column="9">Config<pos:position pos:line="81" pos:column="15"/></name><operator pos:line="81" pos:column="15">.<pos:position pos:line="81" pos:column="16"/></operator><name pos:line="81" pos:column="16">workers<pos:position pos:line="81" pos:column="23"/></name></name> <operator pos:line="81" pos:column="24">&gt;<pos:position pos:line="81" pos:column="28"/></operator> <literal type="number" pos:line="81" pos:column="26">128<pos:position pos:line="81" pos:column="29"/></literal></expr>)<pos:position pos:line="81" pos:column="30"/></condition><then pos:line="81" pos:column="30"> <block pos:line="81" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">syslog<pos:position pos:line="82" pos:column="15"/></name><argument_list pos:line="82" pos:column="15">(<argument><expr><name pos:line="82" pos:column="16">LOG_ALERT<pos:position pos:line="82" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="27">"Suspiciously high workers value: %d"<pos:position pos:line="82" pos:column="64"/></literal></expr></argument>,
               <argument><expr><name><name pos:line="83" pos:column="16">Config<pos:position pos:line="83" pos:column="22"/></name><operator pos:line="83" pos:column="22">.<pos:position pos:line="83" pos:column="23"/></operator><name pos:line="83" pos:column="23">workers<pos:position pos:line="83" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="32"/></expr_stmt>
        <comment type="line" pos:line="84" pos:column="9">// but we keep going in hope that user knows best</comment>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name><name pos:line="86" pos:column="5">TheKids<pos:position pos:line="86" pos:column="12"/></name><operator pos:line="86" pos:column="12">.<pos:position pos:line="86" pos:column="13"/></operator><name pos:line="86" pos:column="13">init<pos:position pos:line="86" pos:column="17"/></name></name><argument_list pos:line="86" pos:column="17">()<pos:position pos:line="86" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="20"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="88" pos:column="5">syslog<pos:position pos:line="88" pos:column="11"/></name><argument_list pos:line="88" pos:column="11">(<argument><expr><name pos:line="88" pos:column="12">LOG_NOTICE<pos:position pos:line="88" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="24">"Squid Parent: will start %d kids"<pos:position pos:line="88" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="88" pos:column="60">(<pos:position pos:line="88" pos:column="61"/></operator><name pos:line="88" pos:column="61">int<pos:position pos:line="88" pos:column="64"/></name><operator pos:line="88" pos:column="64">)<pos:position pos:line="88" pos:column="65"/></operator><call><name><name pos:line="88" pos:column="65">TheKids<pos:position pos:line="88" pos:column="72"/></name><operator pos:line="88" pos:column="72">.<pos:position pos:line="88" pos:column="73"/></operator><name pos:line="88" pos:column="73">count<pos:position pos:line="88" pos:column="78"/></name></name><argument_list pos:line="88" pos:column="78">()<pos:position pos:line="88" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="88" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="82"/></expr_stmt>

    <comment type="line" pos:line="90" pos:column="5">// keep [re]starting kids until it is time to quit</comment>
    <for pos:line="91" pos:column="5">for <control pos:line="91" pos:column="9">(<init pos:line="91" pos:column="10">;<pos:position pos:line="91" pos:column="11"/></init><condition pos:line="91" pos:column="11">;<pos:position pos:line="91" pos:column="12"/></condition><incr/>)<pos:position pos:line="91" pos:column="13"/></control> <block pos:line="91" pos:column="14">{
        <decl_stmt><decl><type><name pos:line="92" pos:column="9">bool<pos:position pos:line="92" pos:column="13"/></name></type> <name pos:line="92" pos:column="14">mainStartScriptCalled<pos:position pos:line="92" pos:column="35"/></name> <init pos:line="92" pos:column="36">= <expr><literal type="boolean" pos:line="92" pos:column="38">false<pos:position pos:line="92" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="92" pos:column="44"/></decl_stmt>
        <comment type="line" pos:line="93" pos:column="9">// start each kid that needs to be [re]started; once</comment>
        <for pos:line="94" pos:column="9">for <control pos:line="94" pos:column="13">(<init><decl><type><name pos:line="94" pos:column="14">int<pos:position pos:line="94" pos:column="17"/></name></type> <name pos:line="94" pos:column="18">i<pos:position pos:line="94" pos:column="19"/></name> <init pos:line="94" pos:column="20">= <expr><call><name><name pos:line="94" pos:column="22">TheKids<pos:position pos:line="94" pos:column="29"/></name><operator pos:line="94" pos:column="29">.<pos:position pos:line="94" pos:column="30"/></operator><name pos:line="94" pos:column="30">count<pos:position pos:line="94" pos:column="35"/></name></name><argument_list pos:line="94" pos:column="35">()<pos:position pos:line="94" pos:column="37"/></argument_list></call> <operator pos:line="94" pos:column="38">-<pos:position pos:line="94" pos:column="39"/></operator> <literal type="number" pos:line="94" pos:column="40">1<pos:position pos:line="94" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="94" pos:column="42"/></init> <condition><expr><name pos:line="94" pos:column="43">i<pos:position pos:line="94" pos:column="44"/></name> <operator pos:line="94" pos:column="45">&gt;=<pos:position pos:line="94" pos:column="50"/></operator> <literal type="number" pos:line="94" pos:column="48">0<pos:position pos:line="94" pos:column="49"/></literal> <operator pos:line="94" pos:column="50">&amp;&amp;<pos:position pos:line="94" pos:column="60"/></operator> <operator pos:line="94" pos:column="53">!<pos:position pos:line="94" pos:column="54"/></operator><name pos:line="94" pos:column="54">shutting_down<pos:position pos:line="94" pos:column="67"/></name></expr>;<pos:position pos:line="94" pos:column="68"/></condition> <incr><expr><operator pos:line="94" pos:column="69">--<pos:position pos:line="94" pos:column="71"/></operator><name pos:line="94" pos:column="71">i<pos:position pos:line="94" pos:column="72"/></name></expr></incr>)<pos:position pos:line="94" pos:column="73"/></control> <block pos:line="94" pos:column="74">{
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">Kid<pos:position pos:line="95" pos:column="16"/></name><modifier pos:line="95" pos:column="16">&amp;<pos:position pos:line="95" pos:column="21"/></modifier></type> <name pos:line="95" pos:column="18">kid<pos:position pos:line="95" pos:column="21"/></name> <init pos:line="95" pos:column="22">= <expr><call><name><name pos:line="95" pos:column="24">TheKids<pos:position pos:line="95" pos:column="31"/></name><operator pos:line="95" pos:column="31">.<pos:position pos:line="95" pos:column="32"/></operator><name pos:line="95" pos:column="32">get<pos:position pos:line="95" pos:column="35"/></name></name><argument_list pos:line="95" pos:column="35">(<argument><expr><name pos:line="95" pos:column="36">i<pos:position pos:line="95" pos:column="37"/></name></expr></argument>)<pos:position pos:line="95" pos:column="38"/></argument_list></call></expr></init></decl>;<pos:position pos:line="95" pos:column="39"/></decl_stmt>
            <if pos:line="96" pos:column="13">if <condition pos:line="96" pos:column="16">(<expr><operator pos:line="96" pos:column="17">!<pos:position pos:line="96" pos:column="18"/></operator><call><name><name pos:line="96" pos:column="18">kid<pos:position pos:line="96" pos:column="21"/></name><operator pos:line="96" pos:column="21">.<pos:position pos:line="96" pos:column="22"/></operator><name pos:line="96" pos:column="22">shouldRestart<pos:position pos:line="96" pos:column="35"/></name></name><argument_list pos:line="96" pos:column="35">()<pos:position pos:line="96" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="38"/></condition><then pos:line="96" pos:column="38">
                <block type="pseudo"><continue pos:line="97" pos:column="17">continue;<pos:position pos:line="97" pos:column="26"/></continue></block></then></if>

            <if pos:line="99" pos:column="13">if <condition pos:line="99" pos:column="16">(<expr><operator pos:line="99" pos:column="17">!<pos:position pos:line="99" pos:column="18"/></operator><name pos:line="99" pos:column="18">mainStartScriptCalled<pos:position pos:line="99" pos:column="39"/></name></expr>)<pos:position pos:line="99" pos:column="40"/></condition><then pos:line="99" pos:column="40"> <block pos:line="99" pos:column="41">{
                <expr_stmt><expr><call><name pos:line="100" pos:column="17">mainStartScript<pos:position pos:line="100" pos:column="32"/></name><argument_list pos:line="100" pos:column="32">(<argument><expr><name><name pos:line="100" pos:column="33">argv<pos:position pos:line="100" pos:column="37"/></name><index pos:line="100" pos:column="37">[<expr><literal type="number" pos:line="100" pos:column="38">0<pos:position pos:line="100" pos:column="39"/></literal></expr>]<pos:position pos:line="100" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="100" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="42"/></expr_stmt>
                <expr_stmt><expr><name pos:line="101" pos:column="17">mainStartScriptCalled<pos:position pos:line="101" pos:column="38"/></name> <operator pos:line="101" pos:column="39">=<pos:position pos:line="101" pos:column="40"/></operator> <literal type="boolean" pos:line="101" pos:column="41">true<pos:position pos:line="101" pos:column="45"/></literal></expr>;<pos:position pos:line="101" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="102" pos:column="14"/></block></then></if>

            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><operator pos:line="104" pos:column="17">(<pos:position pos:line="104" pos:column="18"/></operator><name pos:line="104" pos:column="18">pid<pos:position pos:line="104" pos:column="21"/></name> <operator pos:line="104" pos:column="22">=<pos:position pos:line="104" pos:column="23"/></operator> <call><name pos:line="104" pos:column="24">fork<pos:position pos:line="104" pos:column="28"/></name><argument_list pos:line="104" pos:column="28">()<pos:position pos:line="104" pos:column="30"/></argument_list></call><operator pos:line="104" pos:column="30">)<pos:position pos:line="104" pos:column="31"/></operator> <operator pos:line="104" pos:column="32">==<pos:position pos:line="104" pos:column="34"/></operator> <literal type="number" pos:line="104" pos:column="35">0<pos:position pos:line="104" pos:column="36"/></literal></expr>)<pos:position pos:line="104" pos:column="37"/></condition><then pos:line="104" pos:column="37"> <block pos:line="104" pos:column="38">{
                <comment type="block" pos:line="105" pos:column="17">/* child */</comment>
                <expr_stmt><expr><call><name pos:line="106" pos:column="17">openlog<pos:position pos:line="106" pos:column="24"/></name><argument_list pos:line="106" pos:column="24">(<argument><expr><name pos:line="106" pos:column="25">APP_SHORTNAME<pos:position pos:line="106" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="40">LOG_PID<pos:position pos:line="106" pos:column="47"/></name> <operator pos:line="106" pos:column="48">|<pos:position pos:line="106" pos:column="49"/></operator> <name pos:line="106" pos:column="50">LOG_NDELAY<pos:position pos:line="106" pos:column="60"/></name> <operator pos:line="106" pos:column="61">|<pos:position pos:line="106" pos:column="62"/></operator> <name pos:line="106" pos:column="63">LOG_CONS<pos:position pos:line="106" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="73">LOG_LOCAL4<pos:position pos:line="106" pos:column="83"/></name></expr></argument>)<pos:position pos:line="106" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="85"/></expr_stmt>
                <expr_stmt><expr><name pos:line="107" pos:column="17">prog<pos:position pos:line="107" pos:column="21"/></name> <operator pos:line="107" pos:column="22">=<pos:position pos:line="107" pos:column="23"/></operator> <name><name pos:line="107" pos:column="24">argv<pos:position pos:line="107" pos:column="28"/></name><index pos:line="107" pos:column="28">[<expr><literal type="number" pos:line="107" pos:column="29">0<pos:position pos:line="107" pos:column="30"/></literal></expr>]<pos:position pos:line="107" pos:column="31"/></index></name></expr>;<pos:position pos:line="107" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="108" pos:column="17">argv<pos:position pos:line="108" pos:column="21"/></name><index pos:line="108" pos:column="21">[<expr><literal type="number" pos:line="108" pos:column="22">0<pos:position pos:line="108" pos:column="23"/></literal></expr>]<pos:position pos:line="108" pos:column="24"/></index></name> <operator pos:line="108" pos:column="25">=<pos:position pos:line="108" pos:column="26"/></operator> <cast type="const" pos:line="108" pos:column="27">const_cast<argument_list type="generic" pos:line="108" pos:column="37">&lt;<argument><expr><name pos:line="108" pos:column="38">char<pos:position pos:line="108" pos:column="42"/></name><operator pos:line="108" pos:column="42">*<pos:position pos:line="108" pos:column="43"/></operator></expr></argument>&gt;<pos:position pos:line="108" pos:column="47"/></argument_list><argument_list pos:line="108" pos:column="44">(<argument><expr><call><name><name pos:line="108" pos:column="45">kid<pos:position pos:line="108" pos:column="48"/></name><operator pos:line="108" pos:column="48">.<pos:position pos:line="108" pos:column="49"/></operator><name pos:line="108" pos:column="49">name<pos:position pos:line="108" pos:column="53"/></name></name><argument_list pos:line="108" pos:column="53">()<pos:position pos:line="108" pos:column="55"/></argument_list></call><operator pos:line="108" pos:column="55">.<pos:position pos:line="108" pos:column="56"/></operator><call><name pos:line="108" pos:column="56">termedBuf<pos:position pos:line="108" pos:column="65"/></name><argument_list pos:line="108" pos:column="65">()<pos:position pos:line="108" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="108" pos:column="68"/></argument_list></cast></expr>;<pos:position pos:line="108" pos:column="69"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="109" pos:column="17">execvp<pos:position pos:line="109" pos:column="23"/></name><argument_list pos:line="109" pos:column="23">(<argument><expr><name pos:line="109" pos:column="24">prog<pos:position pos:line="109" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="30">argv<pos:position pos:line="109" pos:column="34"/></name></expr></argument>)<pos:position pos:line="109" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="36"/></expr_stmt>
                <decl_stmt><decl><type><name pos:line="110" pos:column="17">int<pos:position pos:line="110" pos:column="20"/></name></type> <name pos:line="110" pos:column="21">xerrno<pos:position pos:line="110" pos:column="27"/></name> <init pos:line="110" pos:column="28">= <expr><name pos:line="110" pos:column="30">errno<pos:position pos:line="110" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="110" pos:column="36"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="111" pos:column="17">syslog<pos:position pos:line="111" pos:column="23"/></name><argument_list pos:line="111" pos:column="23">(<argument><expr><name pos:line="111" pos:column="24">LOG_ALERT<pos:position pos:line="111" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="35">"execvp failed: %s"<pos:position pos:line="111" pos:column="54"/></literal></expr></argument>, <argument><expr><call><name pos:line="111" pos:column="56">xstrerr<pos:position pos:line="111" pos:column="63"/></name><argument_list pos:line="111" pos:column="63">(<argument><expr><name pos:line="111" pos:column="64">xerrno<pos:position pos:line="111" pos:column="70"/></name></expr></argument>)<pos:position pos:line="111" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="111" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="73"/></expr_stmt>
            }<pos:position pos:line="112" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name><name pos:line="114" pos:column="13">kid<pos:position pos:line="114" pos:column="16"/></name><operator pos:line="114" pos:column="16">.<pos:position pos:line="114" pos:column="17"/></operator><name pos:line="114" pos:column="17">start<pos:position pos:line="114" pos:column="22"/></name></name><argument_list pos:line="114" pos:column="22">(<argument><expr><name pos:line="114" pos:column="23">pid<pos:position pos:line="114" pos:column="26"/></name></expr></argument>)<pos:position pos:line="114" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">syslog<pos:position pos:line="115" pos:column="19"/></name><argument_list pos:line="115" pos:column="19">(<argument><expr><name pos:line="115" pos:column="20">LOG_NOTICE<pos:position pos:line="115" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="32">"Squid Parent: %s process %d started"<pos:position pos:line="115" pos:column="69"/></literal></expr></argument>,
                   <argument><expr><call><name><name pos:line="116" pos:column="20">kid<pos:position pos:line="116" pos:column="23"/></name><operator pos:line="116" pos:column="23">.<pos:position pos:line="116" pos:column="24"/></operator><name pos:line="116" pos:column="24">name<pos:position pos:line="116" pos:column="28"/></name></name><argument_list pos:line="116" pos:column="28">()<pos:position pos:line="116" pos:column="30"/></argument_list></call><operator pos:line="116" pos:column="30">.<pos:position pos:line="116" pos:column="31"/></operator><call><name pos:line="116" pos:column="31">termedBuf<pos:position pos:line="116" pos:column="40"/></name><argument_list pos:line="116" pos:column="40">()<pos:position pos:line="116" pos:column="42"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="116" pos:column="44">pid<pos:position pos:line="116" pos:column="47"/></name></expr></argument>)<pos:position pos:line="116" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="117" pos:column="10"/></block></for>

        <comment type="block" pos:line="119" pos:column="9">/* parent */</comment>
        <expr_stmt><expr><call><name pos:line="120" pos:column="9">openlog<pos:position pos:line="120" pos:column="16"/></name><argument_list pos:line="120" pos:column="16">(<argument><expr><name pos:line="120" pos:column="17">APP_SHORTNAME<pos:position pos:line="120" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="32">LOG_PID<pos:position pos:line="120" pos:column="39"/></name> <operator pos:line="120" pos:column="40">|<pos:position pos:line="120" pos:column="41"/></operator> <name pos:line="120" pos:column="42">LOG_NDELAY<pos:position pos:line="120" pos:column="52"/></name> <operator pos:line="120" pos:column="53">|<pos:position pos:line="120" pos:column="54"/></operator> <name pos:line="120" pos:column="55">LOG_CONS<pos:position pos:line="120" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="65">LOG_LOCAL4<pos:position pos:line="120" pos:column="75"/></name></expr></argument>)<pos:position pos:line="120" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="77"/></expr_stmt>

        <comment type="line" pos:line="122" pos:column="9">// If Squid received a signal while checking for dying kids (below) or</comment>
        <comment type="line" pos:line="123" pos:column="9">// starting new kids (above), then do a fast check for a new dying kid</comment>
        <comment type="line" pos:line="124" pos:column="9">// (WaitForAnyPid with the WNOHANG option) and continue to forward</comment>
        <comment type="line" pos:line="125" pos:column="9">// signals to kids. Otherwise, wait for a kid to die or for a signal</comment>
        <comment type="line" pos:line="126" pos:column="9">// to abort the blocking WaitForAnyPid() call.</comment>
        <comment type="line" pos:line="127" pos:column="9">// With the WNOHANG option, we could check whether WaitForAnyPid() was</comment>
        <comment type="line" pos:line="128" pos:column="9">// aborted by a dying kid or a signal, but it is not required: The</comment>
        <comment type="line" pos:line="129" pos:column="9">// next do/while loop will check again for any dying kids.</comment>
        <decl_stmt><decl><type><name pos:line="130" pos:column="9">int<pos:position pos:line="130" pos:column="12"/></name></type> <name pos:line="130" pos:column="13">waitFlag<pos:position pos:line="130" pos:column="21"/></name> <init pos:line="130" pos:column="22">= <expr><literal type="number" pos:line="130" pos:column="24">0<pos:position pos:line="130" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="130" pos:column="26"/></decl_stmt>
        <if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><call><name pos:line="131" pos:column="13">masterSignaled<pos:position pos:line="131" pos:column="27"/></name><argument_list pos:line="131" pos:column="27">()<pos:position pos:line="131" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="131" pos:column="30"/></condition><then pos:line="131" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><name pos:line="132" pos:column="13">waitFlag<pos:position pos:line="132" pos:column="21"/></name> <operator pos:line="132" pos:column="22">=<pos:position pos:line="132" pos:column="23"/></operator> <name pos:line="132" pos:column="24">WNOHANG<pos:position pos:line="132" pos:column="31"/></name></expr>;<pos:position pos:line="132" pos:column="32"/></expr_stmt></block></then></if>
        <decl_stmt><decl><type><name pos:line="133" pos:column="9">PidStatus<pos:position pos:line="133" pos:column="18"/></name></type> <name pos:line="133" pos:column="19">status<pos:position pos:line="133" pos:column="25"/></name></decl>;<pos:position pos:line="133" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><name pos:line="134" pos:column="9">pid<pos:position pos:line="134" pos:column="12"/></name> <operator pos:line="134" pos:column="13">=<pos:position pos:line="134" pos:column="14"/></operator> <call><name pos:line="134" pos:column="15">WaitForAnyPid<pos:position pos:line="134" pos:column="28"/></name><argument_list pos:line="134" pos:column="28">(<argument><expr><name pos:line="134" pos:column="29">status<pos:position pos:line="134" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="37">waitFlag<pos:position pos:line="134" pos:column="45"/></name></expr></argument>)<pos:position pos:line="134" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="47"/></expr_stmt>

        <comment type="line" pos:line="136" pos:column="9">// check for a stopped kid</comment>
        <decl_stmt><decl><type><name pos:line="137" pos:column="9">Kid<pos:position pos:line="137" pos:column="12"/></name><modifier pos:line="137" pos:column="12">*<pos:position pos:line="137" pos:column="13"/></modifier></type> <name pos:line="137" pos:column="14">kid<pos:position pos:line="137" pos:column="17"/></name> <init pos:line="137" pos:column="18">= <expr><ternary><condition><expr><name pos:line="137" pos:column="20">pid<pos:position pos:line="137" pos:column="23"/></name> <operator pos:line="137" pos:column="24">&gt;<pos:position pos:line="137" pos:column="28"/></operator> <literal type="number" pos:line="137" pos:column="26">0<pos:position pos:line="137" pos:column="27"/></literal></expr> ?<pos:position pos:line="137" pos:column="29"/></condition><then pos:line="137" pos:column="29"> <expr><call><name><name pos:line="137" pos:column="30">TheKids<pos:position pos:line="137" pos:column="37"/></name><operator pos:line="137" pos:column="37">.<pos:position pos:line="137" pos:column="38"/></operator><name pos:line="137" pos:column="38">find<pos:position pos:line="137" pos:column="42"/></name></name><argument_list pos:line="137" pos:column="42">(<argument><expr><name pos:line="137" pos:column="43">pid<pos:position pos:line="137" pos:column="46"/></name></expr></argument>)<pos:position pos:line="137" pos:column="47"/></argument_list></call></expr> <pos:position pos:line="137" pos:column="48"/></then><else pos:line="137" pos:column="48">: <expr><name pos:line="137" pos:column="50">NULL<pos:position pos:line="137" pos:column="54"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="137" pos:column="55"/></decl_stmt>
        <if pos:line="138" pos:column="9">if <condition pos:line="138" pos:column="12">(<expr><name pos:line="138" pos:column="13">kid<pos:position pos:line="138" pos:column="16"/></name></expr>)<pos:position pos:line="138" pos:column="17"/></condition><then pos:line="138" pos:column="17"> <block pos:line="138" pos:column="18">{
            <expr_stmt><expr><call><name><name pos:line="139" pos:column="13">kid<pos:position pos:line="139" pos:column="16"/></name><operator pos:line="139" pos:column="16">-&gt;<pos:position pos:line="139" pos:column="21"/></operator><name pos:line="139" pos:column="18">stop<pos:position pos:line="139" pos:column="22"/></name></name><argument_list pos:line="139" pos:column="22">(<argument><expr><name pos:line="139" pos:column="23">status<pos:position pos:line="139" pos:column="29"/></name></expr></argument>)<pos:position pos:line="139" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="31"/></expr_stmt>
            <if pos:line="140" pos:column="13">if <condition pos:line="140" pos:column="16">(<expr><call><name><name pos:line="140" pos:column="17">kid<pos:position pos:line="140" pos:column="20"/></name><operator pos:line="140" pos:column="20">-&gt;<pos:position pos:line="140" pos:column="25"/></operator><name pos:line="140" pos:column="22">calledExit<pos:position pos:line="140" pos:column="32"/></name></name><argument_list pos:line="140" pos:column="32">()<pos:position pos:line="140" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="140" pos:column="35"/></condition><then pos:line="140" pos:column="35"> <block pos:line="140" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="141" pos:column="17">syslog<pos:position pos:line="141" pos:column="23"/></name><argument_list pos:line="141" pos:column="23">(<argument><expr><name pos:line="141" pos:column="24">LOG_NOTICE<pos:position pos:line="141" pos:column="34"/></name></expr></argument>,
                       <argument><expr><literal type="string" pos:line="142" pos:column="24">"Squid Parent: %s process %d exited with status %d"<pos:position pos:line="142" pos:column="75"/></literal></expr></argument>,
                       <argument><expr><call><name><name pos:line="143" pos:column="24">kid<pos:position pos:line="143" pos:column="27"/></name><operator pos:line="143" pos:column="27">-&gt;<pos:position pos:line="143" pos:column="32"/></operator><name pos:line="143" pos:column="29">name<pos:position pos:line="143" pos:column="33"/></name></name><argument_list pos:line="143" pos:column="33">()<pos:position pos:line="143" pos:column="35"/></argument_list></call><operator pos:line="143" pos:column="35">.<pos:position pos:line="143" pos:column="36"/></operator><call><name pos:line="143" pos:column="36">termedBuf<pos:position pos:line="143" pos:column="45"/></name><argument_list pos:line="143" pos:column="45">()<pos:position pos:line="143" pos:column="47"/></argument_list></call></expr></argument>,
                       <argument><expr><call><name><name pos:line="144" pos:column="24">kid<pos:position pos:line="144" pos:column="27"/></name><operator pos:line="144" pos:column="27">-&gt;<pos:position pos:line="144" pos:column="32"/></operator><name pos:line="144" pos:column="29">getPid<pos:position pos:line="144" pos:column="35"/></name></name><argument_list pos:line="144" pos:column="35">()<pos:position pos:line="144" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="144" pos:column="39">kid<pos:position pos:line="144" pos:column="42"/></name><operator pos:line="144" pos:column="42">-&gt;<pos:position pos:line="144" pos:column="47"/></operator><name pos:line="144" pos:column="44">exitStatus<pos:position pos:line="144" pos:column="54"/></name></name><argument_list pos:line="144" pos:column="54">()<pos:position pos:line="144" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="144" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="58"/></expr_stmt>
            }<pos:position pos:line="145" pos:column="14"/></block></then> <elseif pos:line="145" pos:column="15">else <if pos:line="145" pos:column="20">if <condition pos:line="145" pos:column="23">(<expr><call><name><name pos:line="145" pos:column="24">kid<pos:position pos:line="145" pos:column="27"/></name><operator pos:line="145" pos:column="27">-&gt;<pos:position pos:line="145" pos:column="32"/></operator><name pos:line="145" pos:column="29">signaled<pos:position pos:line="145" pos:column="37"/></name></name><argument_list pos:line="145" pos:column="37">()<pos:position pos:line="145" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="145" pos:column="40"/></condition><then pos:line="145" pos:column="40"> <block pos:line="145" pos:column="41">{
                <expr_stmt><expr><call><name pos:line="146" pos:column="17">syslog<pos:position pos:line="146" pos:column="23"/></name><argument_list pos:line="146" pos:column="23">(<argument><expr><name pos:line="146" pos:column="24">LOG_NOTICE<pos:position pos:line="146" pos:column="34"/></name></expr></argument>,
                       <argument><expr><literal type="string" pos:line="147" pos:column="24">"Squid Parent: %s process %d exited due to signal %d with status %d"<pos:position pos:line="147" pos:column="92"/></literal></expr></argument>,
                       <argument><expr><call><name><name pos:line="148" pos:column="24">kid<pos:position pos:line="148" pos:column="27"/></name><operator pos:line="148" pos:column="27">-&gt;<pos:position pos:line="148" pos:column="32"/></operator><name pos:line="148" pos:column="29">name<pos:position pos:line="148" pos:column="33"/></name></name><argument_list pos:line="148" pos:column="33">()<pos:position pos:line="148" pos:column="35"/></argument_list></call><operator pos:line="148" pos:column="35">.<pos:position pos:line="148" pos:column="36"/></operator><call><name pos:line="148" pos:column="36">termedBuf<pos:position pos:line="148" pos:column="45"/></name><argument_list pos:line="148" pos:column="45">()<pos:position pos:line="148" pos:column="47"/></argument_list></call></expr></argument>,
                       <argument><expr><call><name><name pos:line="149" pos:column="24">kid<pos:position pos:line="149" pos:column="27"/></name><operator pos:line="149" pos:column="27">-&gt;<pos:position pos:line="149" pos:column="32"/></operator><name pos:line="149" pos:column="29">getPid<pos:position pos:line="149" pos:column="35"/></name></name><argument_list pos:line="149" pos:column="35">()<pos:position pos:line="149" pos:column="37"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="149" pos:column="39">kid<pos:position pos:line="149" pos:column="42"/></name><operator pos:line="149" pos:column="42">-&gt;<pos:position pos:line="149" pos:column="47"/></operator><name pos:line="149" pos:column="44">termSignal<pos:position pos:line="149" pos:column="54"/></name></name><argument_list pos:line="149" pos:column="54">()<pos:position pos:line="149" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="149" pos:column="58">kid<pos:position pos:line="149" pos:column="61"/></name><operator pos:line="149" pos:column="61">-&gt;<pos:position pos:line="149" pos:column="66"/></operator><name pos:line="149" pos:column="63">exitStatus<pos:position pos:line="149" pos:column="73"/></name></name><argument_list pos:line="149" pos:column="73">()<pos:position pos:line="149" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="149" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="77"/></expr_stmt>
            }<pos:position pos:line="150" pos:column="14"/></block></then></if></elseif> <else pos:line="150" pos:column="15">else <block pos:line="150" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="151" pos:column="17">syslog<pos:position pos:line="151" pos:column="23"/></name><argument_list pos:line="151" pos:column="23">(<argument><expr><name pos:line="151" pos:column="24">LOG_NOTICE<pos:position pos:line="151" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="151" pos:column="36">"Squid Parent: %s process %d exited"<pos:position pos:line="151" pos:column="72"/></literal></expr></argument>,
                       <argument><expr><call><name><name pos:line="152" pos:column="24">kid<pos:position pos:line="152" pos:column="27"/></name><operator pos:line="152" pos:column="27">-&gt;<pos:position pos:line="152" pos:column="32"/></operator><name pos:line="152" pos:column="29">name<pos:position pos:line="152" pos:column="33"/></name></name><argument_list pos:line="152" pos:column="33">()<pos:position pos:line="152" pos:column="35"/></argument_list></call><operator pos:line="152" pos:column="35">.<pos:position pos:line="152" pos:column="36"/></operator><call><name pos:line="152" pos:column="36">termedBuf<pos:position pos:line="152" pos:column="45"/></name><argument_list pos:line="152" pos:column="45">()<pos:position pos:line="152" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="152" pos:column="49">kid<pos:position pos:line="152" pos:column="52"/></name><operator pos:line="152" pos:column="52">-&gt;<pos:position pos:line="152" pos:column="57"/></operator><name pos:line="152" pos:column="54">getPid<pos:position pos:line="152" pos:column="60"/></name></name><argument_list pos:line="152" pos:column="60">()<pos:position pos:line="152" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="152" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="64"/></expr_stmt>
            }<pos:position pos:line="153" pos:column="14"/></block></else></if>
            <if pos:line="154" pos:column="13">if <condition pos:line="154" pos:column="16">(<expr><call><name><name pos:line="154" pos:column="17">kid<pos:position pos:line="154" pos:column="20"/></name><operator pos:line="154" pos:column="20">-&gt;<pos:position pos:line="154" pos:column="25"/></operator><name pos:line="154" pos:column="22">hopeless<pos:position pos:line="154" pos:column="30"/></name></name><argument_list pos:line="154" pos:column="30">()<pos:position pos:line="154" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="154" pos:column="33"/></condition><then pos:line="154" pos:column="33"> <block pos:line="154" pos:column="34">{
                <expr_stmt><expr><call><name pos:line="155" pos:column="17">syslog<pos:position pos:line="155" pos:column="23"/></name><argument_list pos:line="155" pos:column="23">(<argument><expr><name pos:line="155" pos:column="24">LOG_NOTICE<pos:position pos:line="155" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="155" pos:column="36">"Squid Parent: %s process %d will not"<pos:position pos:line="155" pos:column="74"/></literal>
                       <literal type="string" pos:line="156" pos:column="24">" be restarted due to repeated, frequent failures"<pos:position pos:line="156" pos:column="74"/></literal></expr></argument>,
                       <argument><expr><call><name><name pos:line="157" pos:column="24">kid<pos:position pos:line="157" pos:column="27"/></name><operator pos:line="157" pos:column="27">-&gt;<pos:position pos:line="157" pos:column="32"/></operator><name pos:line="157" pos:column="29">name<pos:position pos:line="157" pos:column="33"/></name></name><argument_list pos:line="157" pos:column="33">()<pos:position pos:line="157" pos:column="35"/></argument_list></call><operator pos:line="157" pos:column="35">.<pos:position pos:line="157" pos:column="36"/></operator><call><name pos:line="157" pos:column="36">termedBuf<pos:position pos:line="157" pos:column="45"/></name><argument_list pos:line="157" pos:column="45">()<pos:position pos:line="157" pos:column="47"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="157" pos:column="49">kid<pos:position pos:line="157" pos:column="52"/></name><operator pos:line="157" pos:column="52">-&gt;<pos:position pos:line="157" pos:column="57"/></operator><name pos:line="157" pos:column="54">getPid<pos:position pos:line="157" pos:column="60"/></name></name><argument_list pos:line="157" pos:column="60">()<pos:position pos:line="157" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="157" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="64"/></expr_stmt>
            }<pos:position pos:line="158" pos:column="14"/></block></then></if>
        }<pos:position pos:line="159" pos:column="10"/></block></then> <elseif pos:line="159" pos:column="11">else <if pos:line="159" pos:column="16">if <condition pos:line="159" pos:column="19">(<expr><name pos:line="159" pos:column="20">pid<pos:position pos:line="159" pos:column="23"/></name> <operator pos:line="159" pos:column="24">&gt;<pos:position pos:line="159" pos:column="28"/></operator> <literal type="number" pos:line="159" pos:column="26">0<pos:position pos:line="159" pos:column="27"/></literal></expr>)<pos:position pos:line="159" pos:column="28"/></condition><then pos:line="159" pos:column="28"> <block pos:line="159" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="160" pos:column="13">syslog<pos:position pos:line="160" pos:column="19"/></name><argument_list pos:line="160" pos:column="19">(<argument><expr><name pos:line="160" pos:column="20">LOG_NOTICE<pos:position pos:line="160" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="160" pos:column="32">"Squid Parent: unknown child process %d exited"<pos:position pos:line="160" pos:column="79"/></literal></expr></argument>, <argument><expr><name pos:line="160" pos:column="81">pid<pos:position pos:line="160" pos:column="84"/></name></expr></argument>)<pos:position pos:line="160" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="86"/></expr_stmt>
        }<pos:position pos:line="161" pos:column="10"/></block></then></if></elseif></if>

        <if pos:line="163" pos:column="9">if <condition pos:line="163" pos:column="12">(<expr><operator pos:line="163" pos:column="13">!<pos:position pos:line="163" pos:column="14"/></operator><call><name><name pos:line="163" pos:column="14">TheKids<pos:position pos:line="163" pos:column="21"/></name><operator pos:line="163" pos:column="21">.<pos:position pos:line="163" pos:column="22"/></operator><name pos:line="163" pos:column="22">someRunning<pos:position pos:line="163" pos:column="33"/></name></name><argument_list pos:line="163" pos:column="33">()<pos:position pos:line="163" pos:column="35"/></argument_list></call> <operator pos:line="163" pos:column="36">&amp;&amp;<pos:position pos:line="163" pos:column="46"/></operator> <operator pos:line="163" pos:column="39">!<pos:position pos:line="163" pos:column="40"/></operator><call><name><name pos:line="163" pos:column="40">TheKids<pos:position pos:line="163" pos:column="47"/></name><operator pos:line="163" pos:column="47">.<pos:position pos:line="163" pos:column="48"/></operator><name pos:line="163" pos:column="48">shouldRestartSome<pos:position pos:line="163" pos:column="65"/></name></name><argument_list pos:line="163" pos:column="65">()<pos:position pos:line="163" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="163" pos:column="68"/></condition><then pos:line="163" pos:column="68"> <block pos:line="163" pos:column="69">{
            <expr_stmt><expr><call><name pos:line="164" pos:column="13">leave_suid<pos:position pos:line="164" pos:column="23"/></name><argument_list pos:line="164" pos:column="23">()<pos:position pos:line="164" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="26"/></expr_stmt>
            <comment type="line" pos:line="165" pos:column="13">// XXX: Master process has no main loop and, hence, should not call</comment>
            <comment type="line" pos:line="166" pos:column="13">// RegisteredRunner::startShutdown which promises a loop iteration.</comment>
            <expr_stmt><expr><call><name pos:line="167" pos:column="13">RunRegisteredHere<pos:position pos:line="167" pos:column="30"/></name><argument_list pos:line="167" pos:column="30">(<argument><expr><name><name pos:line="167" pos:column="31">RegisteredRunner<pos:position pos:line="167" pos:column="47"/></name><operator pos:line="167" pos:column="47">::<pos:position pos:line="167" pos:column="49"/></operator><name pos:line="167" pos:column="49">finishShutdown<pos:position pos:line="167" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="167" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="168" pos:column="13">enter_suid<pos:position pos:line="168" pos:column="23"/></name><argument_list pos:line="168" pos:column="23">()<pos:position pos:line="168" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="26"/></expr_stmt>

            <if pos:line="170" pos:column="13">if <condition pos:line="170" pos:column="16">(<expr><call><name><name pos:line="170" pos:column="17">TheKids<pos:position pos:line="170" pos:column="24"/></name><operator pos:line="170" pos:column="24">.<pos:position pos:line="170" pos:column="25"/></operator><name pos:line="170" pos:column="25">someSignaled<pos:position pos:line="170" pos:column="37"/></name></name><argument_list pos:line="170" pos:column="37">(<argument><expr><name pos:line="170" pos:column="38">SIGINT<pos:position pos:line="170" pos:column="44"/></name></expr></argument>)<pos:position pos:line="170" pos:column="45"/></argument_list></call> <operator pos:line="170" pos:column="46">||<pos:position pos:line="170" pos:column="48"/></operator> <call><name><name pos:line="170" pos:column="49">TheKids<pos:position pos:line="170" pos:column="56"/></name><operator pos:line="170" pos:column="56">.<pos:position pos:line="170" pos:column="57"/></operator><name pos:line="170" pos:column="57">someSignaled<pos:position pos:line="170" pos:column="69"/></name></name><argument_list pos:line="170" pos:column="69">(<argument><expr><name pos:line="170" pos:column="70">SIGTERM<pos:position pos:line="170" pos:column="77"/></name></expr></argument>)<pos:position pos:line="170" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="170" pos:column="79"/></condition><then pos:line="170" pos:column="79"> <block pos:line="170" pos:column="80">{
                <expr_stmt><expr><call><name pos:line="171" pos:column="17">syslog<pos:position pos:line="171" pos:column="23"/></name><argument_list pos:line="171" pos:column="23">(<argument><expr><name pos:line="171" pos:column="24">LOG_ALERT<pos:position pos:line="171" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="171" pos:column="35">"Exiting due to unexpected forced shutdown"<pos:position pos:line="171" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="171" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="80"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="172" pos:column="17">exit<pos:position pos:line="172" pos:column="21"/></name><argument_list pos:line="172" pos:column="21">(<argument><expr><literal type="number" pos:line="172" pos:column="22">1<pos:position pos:line="172" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="173" pos:column="14"/></block></then></if>

            <if pos:line="175" pos:column="13">if <condition pos:line="175" pos:column="16">(<expr><call><name><name pos:line="175" pos:column="17">TheKids<pos:position pos:line="175" pos:column="24"/></name><operator pos:line="175" pos:column="24">.<pos:position pos:line="175" pos:column="25"/></operator><name pos:line="175" pos:column="25">allHopeless<pos:position pos:line="175" pos:column="36"/></name></name><argument_list pos:line="175" pos:column="36">()<pos:position pos:line="175" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="175" pos:column="39"/></condition><then pos:line="175" pos:column="39"> <block pos:line="175" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="176" pos:column="17">syslog<pos:position pos:line="176" pos:column="23"/></name><argument_list pos:line="176" pos:column="23">(<argument><expr><name pos:line="176" pos:column="24">LOG_ALERT<pos:position pos:line="176" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="176" pos:column="35">"Exiting due to repeated, frequent failures"<pos:position pos:line="176" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="176" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="81"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="177" pos:column="17">exit<pos:position pos:line="177" pos:column="21"/></name><argument_list pos:line="177" pos:column="21">(<argument><expr><literal type="number" pos:line="177" pos:column="22">1<pos:position pos:line="177" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="178" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="180" pos:column="13">exit<pos:position pos:line="180" pos:column="17"/></name><argument_list pos:line="180" pos:column="17">(<argument><expr><literal type="number" pos:line="180" pos:column="18">0<pos:position pos:line="180" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="181" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="183" pos:column="9">masterCheckAndBroadcastSignals<pos:position pos:line="183" pos:column="39"/></name><argument_list pos:line="183" pos:column="39">()<pos:position pos:line="183" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="184" pos:column="6"/></block></for>

    <comment type="block" pos:line="186" pos:column="5">/* NOTREACHED */</comment>
<cpp:endif pos:line="187" pos:column="1">#<cpp:directive pos:line="187" pos:column="2">endif<pos:position pos:line="187" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="187" pos:column="8">/* _SQUID_WINDOWS_ */</comment>

}<pos:position pos:line="189" pos:column="2"/></block></function></unit>
