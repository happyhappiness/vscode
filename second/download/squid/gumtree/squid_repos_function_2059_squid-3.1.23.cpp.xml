<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_2059_squid-3.1.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">mem_node<pos:position pos:line="1" pos:column="9"/></name> <specifier pos:line="1" pos:column="10">const<pos:position pos:line="1" pos:column="15"/></specifier> <modifier pos:line="1" pos:column="16">*<pos:position pos:line="1" pos:column="17"/></modifier></type>
<name><name pos:line="2" pos:column="1">mem_hdr<pos:position pos:line="2" pos:column="8"/></name><operator pos:line="2" pos:column="8">::<pos:position pos:line="2" pos:column="10"/></operator><name pos:line="2" pos:column="10">start<pos:position pos:line="2" pos:column="15"/></name></name><parameter_list pos:line="2" pos:column="15">()<pos:position pos:line="2" pos:column="17"/></parameter_list> <specifier pos:line="2" pos:column="18">const<pos:position pos:line="2" pos:column="23"/></specifier>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name><name pos:line="4" pos:column="11">SplayNode<pos:position pos:line="4" pos:column="20"/></name><argument_list type="generic" pos:line="4" pos:column="20">&lt;<argument><expr><name pos:line="4" pos:column="21">mem_node<pos:position pos:line="4" pos:column="29"/></name> <modifier pos:line="4" pos:column="30">*<pos:position pos:line="4" pos:column="31"/></modifier></expr></argument>&gt;<pos:position pos:line="4" pos:column="35"/></argument_list></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type> <name pos:line="4" pos:column="35">result<pos:position pos:line="4" pos:column="41"/></name> <init pos:line="4" pos:column="42">= <expr><call><name><name pos:line="4" pos:column="44">nodes<pos:position pos:line="4" pos:column="49"/></name><operator pos:line="4" pos:column="49">.<pos:position pos:line="4" pos:column="50"/></operator><name pos:line="4" pos:column="50">start<pos:position pos:line="4" pos:column="55"/></name></name><argument_list pos:line="4" pos:column="55">()<pos:position pos:line="4" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="58"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">result<pos:position pos:line="6" pos:column="15"/></name></expr>)<pos:position pos:line="6" pos:column="16"/></condition><then pos:line="6" pos:column="16">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><name><name pos:line="7" pos:column="16">result<pos:position pos:line="7" pos:column="22"/></name><operator pos:line="7" pos:column="22">-&gt;<pos:position pos:line="7" pos:column="27"/></operator><name pos:line="7" pos:column="24">data<pos:position pos:line="7" pos:column="28"/></name></name></expr>;<pos:position pos:line="7" pos:column="29"/></return></block></then></if>

    <return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">NULL<pos:position pos:line="9" pos:column="16"/></name></expr>;<pos:position pos:line="9" pos:column="17"/></return>
}<pos:position pos:line="10" pos:column="2"/></block></function></unit>
