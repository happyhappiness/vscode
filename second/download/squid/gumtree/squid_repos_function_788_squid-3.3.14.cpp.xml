<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_788_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name><name pos:line="1" pos:column="6">HttpReply<pos:position pos:line="1" pos:column="15"/></name><operator pos:line="1" pos:column="15">::<pos:position pos:line="1" pos:column="17"/></operator><name pos:line="1" pos:column="17">reset<pos:position pos:line="1" pos:column="22"/></name></name><parameter_list pos:line="1" pos:column="22">()<pos:position pos:line="1" pos:column="24"/></parameter_list>
<block pos:line="2" pos:column="1">{

    <comment type="line" pos:line="4" pos:column="5">// reset should not reset the protocol; could have made protoPrefix a</comment>
    <comment type="line" pos:line="5" pos:column="5">// virtual function instead, but it is not clear whether virtual methods</comment>
    <comment type="line" pos:line="6" pos:column="5">// are allowed with MEMPROXY_CLASS() and whether some cbdata void*</comment>
    <comment type="line" pos:line="7" pos:column="5">// conversions are not going to kill virtual tables</comment>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">String<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">pfx<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><name pos:line="8" pos:column="24">protoPrefix<pos:position pos:line="8" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">clean<pos:position pos:line="9" pos:column="10"/></name><argument_list pos:line="9" pos:column="10">()<pos:position pos:line="9" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">init<pos:position pos:line="10" pos:column="9"/></name><argument_list pos:line="10" pos:column="9">()<pos:position pos:line="10" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="12"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">protoPrefix<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">pfx<pos:position pos:line="11" pos:column="22"/></name></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt>
}<pos:position pos:line="12" pos:column="2"/></block></function></unit>
