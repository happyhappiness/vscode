<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_3426_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name><name pos:line="2" pos:column="22">argv<pos:position pos:line="2" pos:column="26"/></name><index pos:line="2" pos:column="26">[]<pos:position pos:line="2" pos:column="28"/></index></name></decl></parameter>)<pos:position pos:line="2" pos:column="29"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">buf<pos:position pos:line="4" pos:column="13"/></name><index pos:line="4" pos:column="13">[<expr><name pos:line="4" pos:column="14">RECV_BUF_SIZE<pos:position pos:line="4" pos:column="27"/></name></expr>]<pos:position pos:line="4" pos:column="28"/></index></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">sockaddr_in<pos:position pos:line="6" pos:column="23"/></name></name></type> <name pos:line="6" pos:column="24">R<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">socklen_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">len<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>

    <decl_stmt><decl><type><name><name pos:line="9" pos:column="5">struct<pos:position pos:line="9" pos:column="11"/></name> <name pos:line="9" pos:column="12">hostent<pos:position pos:line="9" pos:column="19"/></name></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">hp<pos:position pos:line="9" pos:column="23"/></name> <init pos:line="9" pos:column="24">= <expr><name pos:line="9" pos:column="26">NULL<pos:position pos:line="9" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">logfile<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name></type> <name><name pos:line="11" pos:column="10">ip<pos:position pos:line="11" pos:column="12"/></name><index pos:line="11" pos:column="12">[<expr><literal type="number" pos:line="11" pos:column="13">4<pos:position pos:line="11" pos:column="14"/></literal></expr>]<pos:position pos:line="11" pos:column="15"/></index></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>

    <for pos:line="13" pos:column="5">for <control pos:line="13" pos:column="9">(<init><expr><name pos:line="13" pos:column="10">len<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>;<pos:position pos:line="13" pos:column="18"/></init> <condition><expr><name pos:line="13" pos:column="19">len<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&lt;<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="25">32<pos:position pos:line="13" pos:column="27"/></literal></expr>;<pos:position pos:line="13" pos:column="28"/></condition> <incr><expr><operator pos:line="13" pos:column="29">++<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">len<pos:position pos:line="13" pos:column="34"/></name></expr></incr>)<pos:position pos:line="13" pos:column="35"/></control> <block pos:line="13" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">signal<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">len<pos:position pos:line="14" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="21">sig_handle<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></for>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">argc<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">&gt;<pos:position pos:line="17" pos:column="18"/></operator> <literal type="number" pos:line="17" pos:column="16">1<pos:position pos:line="17" pos:column="17"/></literal></expr>)<pos:position pos:line="17" pos:column="18"/></condition><then pos:line="17" pos:column="18">
        <block type="pseudo"><expr_stmt><expr><name pos:line="18" pos:column="9">logfile<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <name><name pos:line="18" pos:column="19">argv<pos:position pos:line="18" pos:column="23"/></name><index pos:line="18" pos:column="23">[<expr><literal type="number" pos:line="18" pos:column="24">1<pos:position pos:line="18" pos:column="25"/></literal></expr>]<pos:position pos:line="18" pos:column="26"/></index></name></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt></block></then>
    <else pos:line="19" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="9">logfile<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <literal type="string" pos:line="20" pos:column="19">"/tmp/recv-announce.log"<pos:position pos:line="20" pos:column="43"/></literal></expr>;<pos:position pos:line="20" pos:column="44"/></expr_stmt></block></else></if>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">close<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><literal type="number" pos:line="22" pos:column="11">1<pos:position pos:line="22" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="14"/></expr_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><call><name pos:line="24" pos:column="9">open<pos:position pos:line="24" pos:column="13"/></name><argument_list pos:line="24" pos:column="13">(<argument><expr><name pos:line="24" pos:column="14">logfile<pos:position pos:line="24" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="23">O_WRONLY<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">|<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="34">O_CREAT<pos:position pos:line="24" pos:column="41"/></name> <operator pos:line="24" pos:column="42">|<pos:position pos:line="24" pos:column="43"/></operator> <name pos:line="24" pos:column="44">O_APPEND<pos:position pos:line="24" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="54">0660<pos:position pos:line="24" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></call> <operator pos:line="24" pos:column="60">&lt;<pos:position pos:line="24" pos:column="64"/></operator> <literal type="number" pos:line="24" pos:column="62">0<pos:position pos:line="24" pos:column="63"/></literal></expr>)<pos:position pos:line="24" pos:column="64"/></condition><then pos:line="24" pos:column="64"> <block pos:line="24" pos:column="65">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">perror<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">logfile<pos:position pos:line="25" pos:column="23"/></name></expr></argument>)<pos:position pos:line="25" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">exit<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><literal type="number" pos:line="26" pos:column="14">1<pos:position pos:line="26" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">close<pos:position pos:line="29" pos:column="10"/></name><argument_list pos:line="29" pos:column="10">(<argument><expr><literal type="number" pos:line="29" pos:column="11">2<pos:position pos:line="29" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">dup<pos:position pos:line="30" pos:column="8"/></name><argument_list pos:line="30" pos:column="8">(<argument><expr><literal type="number" pos:line="30" pos:column="9">1<pos:position pos:line="30" pos:column="10"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="11"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="12"/></expr_stmt>

    <decl_stmt><decl><type><name pos:line="32" pos:column="5">IPAddress<pos:position pos:line="32" pos:column="14"/></name></type> <name pos:line="32" pos:column="15">ipa<pos:position pos:line="32" pos:column="18"/></name></decl>;<pos:position pos:line="32" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">chat<pos:position pos:line="33" pos:column="9"/></name></type> <name><name pos:line="33" pos:column="10">tmp<pos:position pos:line="33" pos:column="13"/></name><index pos:line="33" pos:column="13">[<expr><name pos:line="33" pos:column="14">MAX_HOSTNAMELEN<pos:position pos:line="33" pos:column="29"/></name></expr>]<pos:position pos:line="33" pos:column="30"/></index></name></decl>;<pos:position pos:line="33" pos:column="31"/></decl_stmt>
    <for pos:line="34" pos:column="5">for <control pos:line="34" pos:column="9">(<init pos:line="34" pos:column="10">;<pos:position pos:line="34" pos:column="11"/></init><condition pos:line="34" pos:column="11">;<pos:position pos:line="34" pos:column="12"/></condition><incr/>)<pos:position pos:line="34" pos:column="13"/></control> <block pos:line="34" pos:column="14">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">memset<pos:position pos:line="35" pos:column="15"/></name><argument_list pos:line="35" pos:column="15">(<argument><expr><name pos:line="35" pos:column="16">buf<pos:position pos:line="35" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="35" pos:column="21">'\0'<pos:position pos:line="35" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="27">RECV_BUF_SIZE<pos:position pos:line="35" pos:column="40"/></name></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">memset<pos:position pos:line="36" pos:column="15"/></name><argument_list pos:line="36" pos:column="15">(<argument><expr><operator pos:line="36" pos:column="16">&amp;<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="17">R<pos:position pos:line="36" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="36" pos:column="20">'\0'<pos:position pos:line="36" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="26">len<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">=<pos:position pos:line="36" pos:column="31"/></operator> <sizeof pos:line="36" pos:column="32">sizeof<argument_list pos:line="36" pos:column="38">(<argument><expr><name pos:line="36" pos:column="39">R<pos:position pos:line="36" pos:column="40"/></name></expr></argument>)<pos:position pos:line="36" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="43"/></expr_stmt>

        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">recvfrom<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><literal type="number" pos:line="38" pos:column="22">0<pos:position pos:line="38" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="25">buf<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="30">RECV_BUF_SIZE<pos:position pos:line="38" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="45">0<pos:position pos:line="38" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="38" pos:column="48">(<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="49">sockaddr<pos:position pos:line="38" pos:column="57"/></name> <operator pos:line="38" pos:column="58">*<pos:position pos:line="38" pos:column="59"/></operator><operator pos:line="38" pos:column="59">)<pos:position pos:line="38" pos:column="60"/></operator><operator pos:line="38" pos:column="60">&amp;<pos:position pos:line="38" pos:column="65"/></operator><name pos:line="38" pos:column="61">R<pos:position pos:line="38" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="64">&amp;<pos:position pos:line="38" pos:column="69"/></operator><name pos:line="38" pos:column="65">len<pos:position pos:line="38" pos:column="68"/></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call> <operator pos:line="38" pos:column="70">&lt;<pos:position pos:line="38" pos:column="74"/></operator> <literal type="number" pos:line="38" pos:column="72">0<pos:position pos:line="38" pos:column="73"/></literal></expr>)<pos:position pos:line="38" pos:column="74"/></condition><then pos:line="38" pos:column="74"> <block pos:line="38" pos:column="75">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">perror<pos:position pos:line="39" pos:column="19"/></name><argument_list pos:line="39" pos:column="19">(<argument><expr><literal type="string" pos:line="39" pos:column="20">"recv"<pos:position pos:line="39" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">exit<pos:position pos:line="40" pos:column="17"/></name><argument_list pos:line="40" pos:column="17">(<argument><expr><literal type="number" pos:line="40" pos:column="18">2<pos:position pos:line="40" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="43" pos:column="9">memcpy<pos:position pos:line="43" pos:column="15"/></name><argument_list pos:line="43" pos:column="15">(<argument><expr><name pos:line="43" pos:column="16">ip<pos:position pos:line="43" pos:column="18"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="20">&amp;<pos:position pos:line="43" pos:column="25"/></operator><name><name pos:line="43" pos:column="21">R<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">.<pos:position pos:line="43" pos:column="23"/></operator><name pos:line="43" pos:column="23">sin_addr<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">.<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="32">s_addr<pos:position pos:line="43" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="40">4<pos:position pos:line="43" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="44" pos:column="9">hp<pos:position pos:line="44" pos:column="11"/></name> <operator pos:line="44" pos:column="12">=<pos:position pos:line="44" pos:column="13"/></operator> <call><name pos:line="44" pos:column="14">gethostbyaddr<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">ip<pos:position pos:line="44" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="32">4<pos:position pos:line="44" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="35">AF_INET<pos:position pos:line="44" pos:column="42"/></name></expr></argument>)<pos:position pos:line="44" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="45" pos:column="9">ipa<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <name><name pos:line="45" pos:column="15">R<pos:position pos:line="45" pos:column="16"/></name><operator pos:line="45" pos:column="16">.<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">sin_addr<pos:position pos:line="45" pos:column="25"/></name></name></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">printf<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><literal type="string" pos:line="46" pos:column="16">"==============================================================================\n"<pos:position pos:line="46" pos:column="98"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="99"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="100"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">printf<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><literal type="string" pos:line="47" pos:column="16">"Received from %s [%s]\n"<pos:position pos:line="47" pos:column="41"/></literal></expr></argument>,
               <argument><expr><call><name><name pos:line="48" pos:column="16">ipa<pos:position pos:line="48" pos:column="19"/></name><operator pos:line="48" pos:column="19">.<pos:position pos:line="48" pos:column="20"/></operator><name pos:line="48" pos:column="20">NtoA<pos:position pos:line="48" pos:column="24"/></name></name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">tmp<pos:position pos:line="48" pos:column="28"/></name></expr></argument>,<argument><expr><name pos:line="48" pos:column="29">MAX_HOSTNAMELEN<pos:position pos:line="48" pos:column="44"/></name></expr></argument>)<pos:position pos:line="48" pos:column="45"/></argument_list></call></expr></argument>,
               <argument><expr><ternary><condition><expr><operator pos:line="49" pos:column="16">(<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="17">hp<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">&amp;&amp;<pos:position pos:line="49" pos:column="30"/></operator> <name><name pos:line="49" pos:column="23">hp<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">-&gt;<pos:position pos:line="49" pos:column="30"/></operator><name pos:line="49" pos:column="27">h_name<pos:position pos:line="49" pos:column="33"/></name></name><operator pos:line="49" pos:column="33">)<pos:position pos:line="49" pos:column="34"/></operator></expr> ?<pos:position pos:line="49" pos:column="36"/></condition><then pos:line="49" pos:column="36"> <expr><name><name pos:line="49" pos:column="37">hp<pos:position pos:line="49" pos:column="39"/></name><operator pos:line="49" pos:column="39">-&gt;<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="41">h_name<pos:position pos:line="49" pos:column="47"/></name></name></expr> <pos:position pos:line="49" pos:column="48"/></then><else pos:line="49" pos:column="48">: <expr><literal type="string" pos:line="49" pos:column="50">"Unknown"<pos:position pos:line="49" pos:column="59"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="49" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">fputs<pos:position pos:line="50" pos:column="14"/></name><argument_list pos:line="50" pos:column="14">(<argument><expr><name pos:line="50" pos:column="15">buf<pos:position pos:line="50" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="20">stdout<pos:position pos:line="50" pos:column="26"/></name></expr></argument>)<pos:position pos:line="50" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">fflush<pos:position pos:line="51" pos:column="15"/></name><argument_list pos:line="51" pos:column="15">(<argument><expr><name pos:line="51" pos:column="16">stdout<pos:position pos:line="51" pos:column="22"/></name></expr></argument>)<pos:position pos:line="51" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></for>

    <return pos:line="54" pos:column="5">return <expr><literal type="number" pos:line="54" pos:column="12">0<pos:position pos:line="54" pos:column="13"/></literal></expr>;<pos:position pos:line="54" pos:column="14"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
