<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/squid/gumtree/squid_repos_function_4336_squid-3.3.14.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type>
<name><name pos:line="2" pos:column="1">Ssl<pos:position pos:line="2" pos:column="4"/></name><operator pos:line="2" pos:column="4">::<pos:position pos:line="2" pos:column="6"/></operator><name pos:line="2" pos:column="6">ErrorDetailFile<pos:position pos:line="2" pos:column="21"/></name><operator pos:line="2" pos:column="21">::<pos:position pos:line="2" pos:column="23"/></operator><name pos:line="2" pos:column="23">parse<pos:position pos:line="2" pos:column="28"/></name></name><parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">buffer<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">len<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="58">bool<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">eof<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><operator pos:line="4" pos:column="9">!<pos:position pos:line="4" pos:column="10"/></operator><name pos:line="4" pos:column="10">theDetails<pos:position pos:line="4" pos:column="20"/></name></expr>)<pos:position pos:line="4" pos:column="21"/></condition><then pos:line="4" pos:column="21">
        <block type="pseudo"><return pos:line="5" pos:column="9">return <expr><literal type="boolean" pos:line="5" pos:column="16">false<pos:position pos:line="5" pos:column="21"/></literal></expr>;<pos:position pos:line="5" pos:column="22"/></return></block></then></if>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">len<pos:position pos:line="7" pos:column="12"/></name></expr>)<pos:position pos:line="7" pos:column="13"/></condition><then pos:line="7" pos:column="13"> <block pos:line="7" pos:column="14">{
        <expr_stmt><expr><call><name><name pos:line="8" pos:column="9">buf<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">.<pos:position pos:line="8" pos:column="13"/></operator><name pos:line="8" pos:column="13">append<pos:position pos:line="8" pos:column="19"/></name></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">buffer<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">len<pos:position pos:line="8" pos:column="31"/></name></expr></argument>)<pos:position pos:line="8" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">eof<pos:position pos:line="11" pos:column="12"/></name></expr>)<pos:position pos:line="11" pos:column="13"/></condition><then pos:line="11" pos:column="13">
        <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="12" pos:column="9">buf<pos:position pos:line="12" pos:column="12"/></name><operator pos:line="12" pos:column="12">.<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="13">append<pos:position pos:line="12" pos:column="19"/></name></name><argument_list pos:line="12" pos:column="19">(<argument><expr><literal type="string" pos:line="12" pos:column="20">"\n\n"<pos:position pos:line="12" pos:column="26"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="28">1<pos:position pos:line="12" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="31"/></expr_stmt></block></then></if>

    <while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<decl><type><name pos:line="14" pos:column="12">size_t<pos:position pos:line="14" pos:column="18"/></name></type> <name pos:line="14" pos:column="19">size<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><call><name pos:line="14" pos:column="26">detailEntryEnd<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><call><name><name pos:line="14" pos:column="41">buf<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">.<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="45">content<pos:position pos:line="14" pos:column="52"/></name></name><argument_list pos:line="14" pos:column="52">()<pos:position pos:line="14" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="14" pos:column="56">buf<pos:position pos:line="14" pos:column="59"/></name><operator pos:line="14" pos:column="59">.<pos:position pos:line="14" pos:column="60"/></operator><name pos:line="14" pos:column="60">contentSize<pos:position pos:line="14" pos:column="71"/></name></name><argument_list pos:line="14" pos:column="71">()<pos:position pos:line="14" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="14" pos:column="74"/></argument_list></call></expr></init></decl>)<pos:position pos:line="14" pos:column="75"/></condition> <block pos:line="14" pos:column="76">{
        <decl_stmt><decl><type><specifier pos:line="15" pos:column="9">const<pos:position pos:line="15" pos:column="14"/></specifier> <name pos:line="15" pos:column="15">char<pos:position pos:line="15" pos:column="19"/></name> <modifier pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></modifier></type><name pos:line="15" pos:column="21">e<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><call><name><name pos:line="15" pos:column="25">buf<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">.<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="29">content<pos:position pos:line="15" pos:column="36"/></name></name><argument_list pos:line="15" pos:column="36">()<pos:position pos:line="15" pos:column="38"/></argument_list></call> <operator pos:line="15" pos:column="39">+<pos:position pos:line="15" pos:column="40"/></operator> <name pos:line="15" pos:column="41">size<pos:position pos:line="15" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="46"/></decl_stmt>

        <comment type="line" pos:line="17" pos:column="9">//ignore spaces, new lines and comment lines (starting with #) at the beggining</comment>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">const<pos:position pos:line="18" pos:column="14"/></specifier> <name pos:line="18" pos:column="15">char<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">s<pos:position pos:line="18" pos:column="22"/></name></decl>;<pos:position pos:line="18" pos:column="23"/></decl_stmt>
        <for pos:line="19" pos:column="9">for <control pos:line="19" pos:column="13">(<init><expr><name pos:line="19" pos:column="14">s<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name><name pos:line="19" pos:column="18">buf<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">content<pos:position pos:line="19" pos:column="29"/></name></name><argument_list pos:line="19" pos:column="29">()<pos:position pos:line="19" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="32"/></init> <condition><expr><operator pos:line="19" pos:column="33">(<pos:position pos:line="19" pos:column="34"/></operator><operator pos:line="19" pos:column="34">*<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="35">s<pos:position pos:line="19" pos:column="36"/></name> <operator pos:line="19" pos:column="37">==<pos:position pos:line="19" pos:column="39"/></operator> <literal type="char" pos:line="19" pos:column="40">'\n'<pos:position pos:line="19" pos:column="44"/></literal> <operator pos:line="19" pos:column="45">||<pos:position pos:line="19" pos:column="47"/></operator> <operator pos:line="19" pos:column="48">*<pos:position pos:line="19" pos:column="49"/></operator><name pos:line="19" pos:column="49">s<pos:position pos:line="19" pos:column="50"/></name> <operator pos:line="19" pos:column="51">==<pos:position pos:line="19" pos:column="53"/></operator> <literal type="char" pos:line="19" pos:column="54">' '<pos:position pos:line="19" pos:column="57"/></literal>  <operator pos:line="19" pos:column="59">||<pos:position pos:line="19" pos:column="61"/></operator> <operator pos:line="19" pos:column="62">*<pos:position pos:line="19" pos:column="63"/></operator><name pos:line="19" pos:column="63">s<pos:position pos:line="19" pos:column="64"/></name> <operator pos:line="19" pos:column="65">==<pos:position pos:line="19" pos:column="67"/></operator> <literal type="char" pos:line="19" pos:column="68">'\t'<pos:position pos:line="19" pos:column="72"/></literal> <operator pos:line="19" pos:column="73">||<pos:position pos:line="19" pos:column="75"/></operator> <operator pos:line="19" pos:column="76">*<pos:position pos:line="19" pos:column="77"/></operator><name pos:line="19" pos:column="77">s<pos:position pos:line="19" pos:column="78"/></name> <operator pos:line="19" pos:column="79">==<pos:position pos:line="19" pos:column="81"/></operator> <literal type="char" pos:line="19" pos:column="82">'#'<pos:position pos:line="19" pos:column="85"/></literal><operator pos:line="19" pos:column="85">)<pos:position pos:line="19" pos:column="86"/></operator>  <operator pos:line="19" pos:column="88">&amp;&amp;<pos:position pos:line="19" pos:column="98"/></operator> <name pos:line="19" pos:column="91">s<pos:position pos:line="19" pos:column="92"/></name> <operator pos:line="19" pos:column="93">&lt;<pos:position pos:line="19" pos:column="97"/></operator> <name pos:line="19" pos:column="95">e<pos:position pos:line="19" pos:column="96"/></name></expr>;<pos:position pos:line="19" pos:column="97"/></condition> <incr><expr><operator pos:line="19" pos:column="98">++<pos:position pos:line="19" pos:column="100"/></operator><name pos:line="19" pos:column="100">s<pos:position pos:line="19" pos:column="101"/></name></expr></incr>)<pos:position pos:line="19" pos:column="102"/></control> <block pos:line="19" pos:column="103">{
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><operator pos:line="20" pos:column="17">*<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">s<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">==<pos:position pos:line="20" pos:column="22"/></operator> <literal type="char" pos:line="20" pos:column="23">'#'<pos:position pos:line="20" pos:column="26"/></literal></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27">
                <block type="pseudo"><while pos:line="21" pos:column="17">while <condition pos:line="21" pos:column="23">(<expr><name pos:line="21" pos:column="24">s<pos:position pos:line="21" pos:column="25"/></name><operator pos:line="21" pos:column="25">&lt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">e<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">&amp;&amp;<pos:position pos:line="21" pos:column="38"/></operator>  <operator pos:line="21" pos:column="32">*<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">s<pos:position pos:line="21" pos:column="34"/></name> <operator pos:line="21" pos:column="35">!=<pos:position pos:line="21" pos:column="37"/></operator> <literal type="char" pos:line="21" pos:column="38">'\n'<pos:position pos:line="21" pos:column="42"/></literal></expr>)<pos:position pos:line="21" pos:column="43"/></condition>
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="22" pos:column="21">++<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="23">s<pos:position pos:line="22" pos:column="24"/></name></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt></block></while></block></then></if> <comment type="line" pos:line="22" pos:column="26">// skip untill the end of line</comment>
        }<pos:position pos:line="23" pos:column="10"/></block></for>

        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">( <expr><name pos:line="25" pos:column="14">s<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">!=<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">e<pos:position pos:line="25" pos:column="20"/></name></expr>)<pos:position pos:line="25" pos:column="21"/></condition><then pos:line="25" pos:column="21"> <block pos:line="25" pos:column="22">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">DetailEntryParser<pos:position pos:line="26" pos:column="30"/></name></type> <name pos:line="26" pos:column="31">parser<pos:position pos:line="26" pos:column="37"/></name></decl>;<pos:position pos:line="26" pos:column="38"/></decl_stmt>
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><operator pos:line="27" pos:column="17">!<pos:position pos:line="27" pos:column="18"/></operator><call><name><name pos:line="27" pos:column="18">parser<pos:position pos:line="27" pos:column="24"/></name><operator pos:line="27" pos:column="24">.<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="25">parse<pos:position pos:line="27" pos:column="30"/></name></name><argument_list pos:line="27" pos:column="30">(<argument><expr><name pos:line="27" pos:column="31">s<pos:position pos:line="27" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="34">e<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37"> <block pos:line="27" pos:column="38">{
                <expr_stmt><expr><call><name pos:line="28" pos:column="17">debugs<pos:position pos:line="28" pos:column="23"/></name><argument_list pos:line="28" pos:column="23">(<argument><expr><literal type="number" pos:line="28" pos:column="24">83<pos:position pos:line="28" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="28">DBG_IMPORTANT<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="43">HERE<pos:position pos:line="28" pos:column="47"/></name> <operator pos:line="28" pos:column="48">&lt;&lt;<pos:position pos:line="28" pos:column="56"/></operator>
                       <literal type="string" pos:line="29" pos:column="24">"WARNING! parse error on:"<pos:position pos:line="29" pos:column="50"/></literal> <operator pos:line="29" pos:column="51">&lt;&lt;<pos:position pos:line="29" pos:column="59"/></operator> <name pos:line="29" pos:column="54">s<pos:position pos:line="29" pos:column="55"/></name></expr></argument>)<pos:position pos:line="29" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="57"/></expr_stmt>
                <return pos:line="30" pos:column="17">return <expr><literal type="boolean" pos:line="30" pos:column="24">false<pos:position pos:line="30" pos:column="29"/></literal></expr>;<pos:position pos:line="30" pos:column="30"/></return>
            }<pos:position pos:line="31" pos:column="14"/></block></then></if>

            <decl_stmt><decl><type><specifier pos:line="33" pos:column="13">const<pos:position pos:line="33" pos:column="18"/></specifier> <name pos:line="33" pos:column="19">String<pos:position pos:line="33" pos:column="25"/></name></type> <name pos:line="33" pos:column="26">errorName<pos:position pos:line="33" pos:column="35"/></name> <init pos:line="33" pos:column="36">= <expr><call><name><name pos:line="33" pos:column="38">parser<pos:position pos:line="33" pos:column="44"/></name><operator pos:line="33" pos:column="44">.<pos:position pos:line="33" pos:column="45"/></operator><name pos:line="33" pos:column="45">getByName<pos:position pos:line="33" pos:column="54"/></name></name><argument_list pos:line="33" pos:column="54">(<argument><expr><literal type="string" pos:line="33" pos:column="55">"name"<pos:position pos:line="33" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="63"/></decl_stmt>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><operator pos:line="34" pos:column="17">!<pos:position pos:line="34" pos:column="18"/></operator><call><name><name pos:line="34" pos:column="18">errorName<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">.<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="28">size<pos:position pos:line="34" pos:column="32"/></name></name><argument_list pos:line="34" pos:column="32">()<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="35"/></condition><then pos:line="34" pos:column="35"> <block pos:line="34" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="35" pos:column="17">debugs<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><literal type="number" pos:line="35" pos:column="24">83<pos:position pos:line="35" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="28">DBG_IMPORTANT<pos:position pos:line="35" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="43">HERE<pos:position pos:line="35" pos:column="47"/></name> <operator pos:line="35" pos:column="48">&lt;&lt;<pos:position pos:line="35" pos:column="56"/></operator>
                       <literal type="string" pos:line="36" pos:column="24">"WARNING! invalid or no error detail name on:"<pos:position pos:line="36" pos:column="70"/></literal> <operator pos:line="36" pos:column="71">&lt;&lt;<pos:position pos:line="36" pos:column="79"/></operator> <name pos:line="36" pos:column="74">s<pos:position pos:line="36" pos:column="75"/></name></expr></argument>)<pos:position pos:line="36" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="77"/></expr_stmt>
                <return pos:line="37" pos:column="17">return <expr><literal type="boolean" pos:line="37" pos:column="24">false<pos:position pos:line="37" pos:column="29"/></literal></expr>;<pos:position pos:line="37" pos:column="30"/></return>
            }<pos:position pos:line="38" pos:column="14"/></block></then></if>

            <decl_stmt><decl><type><name><name pos:line="40" pos:column="13">Ssl<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">::<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="18">ssl_error_t<pos:position pos:line="40" pos:column="29"/></name></name></type> <name pos:line="40" pos:column="30">ssl_error<pos:position pos:line="40" pos:column="39"/></name> <init pos:line="40" pos:column="40">= <expr><call><name><name pos:line="40" pos:column="42">Ssl<pos:position pos:line="40" pos:column="45"/></name><operator pos:line="40" pos:column="45">::<pos:position pos:line="40" pos:column="47"/></operator><name pos:line="40" pos:column="47">GetErrorCode<pos:position pos:line="40" pos:column="59"/></name></name><argument_list pos:line="40" pos:column="59">(<argument><expr><call><name><name pos:line="40" pos:column="60">errorName<pos:position pos:line="40" pos:column="69"/></name><operator pos:line="40" pos:column="69">.<pos:position pos:line="40" pos:column="70"/></operator><name pos:line="40" pos:column="70">termedBuf<pos:position pos:line="40" pos:column="79"/></name></name><argument_list pos:line="40" pos:column="79">()<pos:position pos:line="40" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="40" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="83"/></decl_stmt>
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><name pos:line="41" pos:column="17">ssl_error<pos:position pos:line="41" pos:column="26"/></name> <operator pos:line="41" pos:column="27">!=<pos:position pos:line="41" pos:column="29"/></operator> <name pos:line="41" pos:column="30">SSL_ERROR_NONE<pos:position pos:line="41" pos:column="44"/></name></expr>)<pos:position pos:line="41" pos:column="45"/></condition><then pos:line="41" pos:column="45"> <block pos:line="41" pos:column="46">{

                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name><name pos:line="43" pos:column="21">theDetails<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">-&gt;<pos:position pos:line="43" pos:column="36"/></operator><name pos:line="43" pos:column="33">getErrorDetail<pos:position pos:line="43" pos:column="47"/></name></name><argument_list pos:line="43" pos:column="47">(<argument><expr><name pos:line="43" pos:column="48">ssl_error<pos:position pos:line="43" pos:column="57"/></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="59"/></condition><then pos:line="43" pos:column="59"> <block pos:line="43" pos:column="60">{
                    <expr_stmt><expr><call><name pos:line="44" pos:column="21">debugs<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><literal type="number" pos:line="44" pos:column="28">83<pos:position pos:line="44" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="32">DBG_IMPORTANT<pos:position pos:line="44" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="47">HERE<pos:position pos:line="44" pos:column="51"/></name> <operator pos:line="44" pos:column="52">&lt;&lt;<pos:position pos:line="44" pos:column="60"/></operator>
                           <literal type="string" pos:line="45" pos:column="28">"WARNING! duplicate entry: "<pos:position pos:line="45" pos:column="56"/></literal> <operator pos:line="45" pos:column="57">&lt;&lt;<pos:position pos:line="45" pos:column="65"/></operator> <name pos:line="45" pos:column="60">errorName<pos:position pos:line="45" pos:column="69"/></name></expr></argument>)<pos:position pos:line="45" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="71"/></expr_stmt>
                    <return pos:line="46" pos:column="21">return <expr><literal type="boolean" pos:line="46" pos:column="28">false<pos:position pos:line="46" pos:column="33"/></literal></expr>;<pos:position pos:line="46" pos:column="34"/></return>
                }<pos:position pos:line="47" pos:column="18"/></block></then></if>

                <decl_stmt><decl><type><name pos:line="49" pos:column="17">ErrorDetailEntry<pos:position pos:line="49" pos:column="33"/></name> <modifier pos:line="49" pos:column="34">&amp;<pos:position pos:line="49" pos:column="39"/></modifier></type><name pos:line="49" pos:column="35">entry<pos:position pos:line="49" pos:column="40"/></name> <init pos:line="49" pos:column="41">= <expr><name><name pos:line="49" pos:column="43">theDetails<pos:position pos:line="49" pos:column="53"/></name><operator pos:line="49" pos:column="53">-&gt;<pos:position pos:line="49" pos:column="58"/></operator><name pos:line="49" pos:column="55">theList<pos:position pos:line="49" pos:column="62"/></name><index pos:line="49" pos:column="62">[<expr><name pos:line="49" pos:column="63">ssl_error<pos:position pos:line="49" pos:column="72"/></name></expr>]<pos:position pos:line="49" pos:column="73"/></index></name></expr></init></decl>;<pos:position pos:line="49" pos:column="74"/></decl_stmt>
                <expr_stmt><expr><name><name pos:line="50" pos:column="17">entry<pos:position pos:line="50" pos:column="22"/></name><operator pos:line="50" pos:column="22">.<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">error_no<pos:position pos:line="50" pos:column="31"/></name></name> <operator pos:line="50" pos:column="32">=<pos:position pos:line="50" pos:column="33"/></operator> <name pos:line="50" pos:column="34">ssl_error<pos:position pos:line="50" pos:column="43"/></name></expr>;<pos:position pos:line="50" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="51" pos:column="17">entry<pos:position pos:line="51" pos:column="22"/></name><operator pos:line="51" pos:column="22">.<pos:position pos:line="51" pos:column="23"/></operator><name pos:line="51" pos:column="23">name<pos:position pos:line="51" pos:column="27"/></name></name> <operator pos:line="51" pos:column="28">=<pos:position pos:line="51" pos:column="29"/></operator> <name pos:line="51" pos:column="30">errorName<pos:position pos:line="51" pos:column="39"/></name></expr>;<pos:position pos:line="51" pos:column="40"/></expr_stmt>
                <decl_stmt><decl><type><name pos:line="52" pos:column="17">String<pos:position pos:line="52" pos:column="23"/></name></type> <name pos:line="52" pos:column="24">tmp<pos:position pos:line="52" pos:column="27"/></name> <init pos:line="52" pos:column="28">= <expr><call><name><name pos:line="52" pos:column="30">parser<pos:position pos:line="52" pos:column="36"/></name><operator pos:line="52" pos:column="36">.<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="37">getByName<pos:position pos:line="52" pos:column="46"/></name></name><argument_list pos:line="52" pos:column="46">(<argument><expr><literal type="string" pos:line="52" pos:column="47">"detail"<pos:position pos:line="52" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="57"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="53" pos:column="17">httpHeaderParseQuotedString<pos:position pos:line="53" pos:column="44"/></name><argument_list pos:line="53" pos:column="44">(<argument><expr><call><name><name pos:line="53" pos:column="45">tmp<pos:position pos:line="53" pos:column="48"/></name><operator pos:line="53" pos:column="48">.<pos:position pos:line="53" pos:column="49"/></operator><name pos:line="53" pos:column="49">termedBuf<pos:position pos:line="53" pos:column="58"/></name></name><argument_list pos:line="53" pos:column="58">()<pos:position pos:line="53" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="53" pos:column="62">tmp<pos:position pos:line="53" pos:column="65"/></name><operator pos:line="53" pos:column="65">.<pos:position pos:line="53" pos:column="66"/></operator><name pos:line="53" pos:column="66">size<pos:position pos:line="53" pos:column="70"/></name></name><argument_list pos:line="53" pos:column="70">()<pos:position pos:line="53" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="53" pos:column="74">&amp;<pos:position pos:line="53" pos:column="79"/></operator><name><name pos:line="53" pos:column="75">entry<pos:position pos:line="53" pos:column="80"/></name><operator pos:line="53" pos:column="80">.<pos:position pos:line="53" pos:column="81"/></operator><name pos:line="53" pos:column="81">detail<pos:position pos:line="53" pos:column="87"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="89"/></expr_stmt>
                <expr_stmt><expr><name pos:line="54" pos:column="17">tmp<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <call><name><name pos:line="54" pos:column="23">parser<pos:position pos:line="54" pos:column="29"/></name><operator pos:line="54" pos:column="29">.<pos:position pos:line="54" pos:column="30"/></operator><name pos:line="54" pos:column="30">getByName<pos:position pos:line="54" pos:column="39"/></name></name><argument_list pos:line="54" pos:column="39">(<argument><expr><literal type="string" pos:line="54" pos:column="40">"descr"<pos:position pos:line="54" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="55" pos:column="17">httpHeaderParseQuotedString<pos:position pos:line="55" pos:column="44"/></name><argument_list pos:line="55" pos:column="44">(<argument><expr><call><name><name pos:line="55" pos:column="45">tmp<pos:position pos:line="55" pos:column="48"/></name><operator pos:line="55" pos:column="48">.<pos:position pos:line="55" pos:column="49"/></operator><name pos:line="55" pos:column="49">termedBuf<pos:position pos:line="55" pos:column="58"/></name></name><argument_list pos:line="55" pos:column="58">()<pos:position pos:line="55" pos:column="60"/></argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="55" pos:column="62">tmp<pos:position pos:line="55" pos:column="65"/></name><operator pos:line="55" pos:column="65">.<pos:position pos:line="55" pos:column="66"/></operator><name pos:line="55" pos:column="66">size<pos:position pos:line="55" pos:column="70"/></name></name><argument_list pos:line="55" pos:column="70">()<pos:position pos:line="55" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="55" pos:column="74">&amp;<pos:position pos:line="55" pos:column="79"/></operator><name><name pos:line="55" pos:column="75">entry<pos:position pos:line="55" pos:column="80"/></name><operator pos:line="55" pos:column="80">.<pos:position pos:line="55" pos:column="81"/></operator><name pos:line="55" pos:column="81">descr<pos:position pos:line="55" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="88"/></expr_stmt>
                <decl_stmt><decl><type><name pos:line="56" pos:column="17">bool<pos:position pos:line="56" pos:column="21"/></name></type> <name pos:line="56" pos:column="22">parseOK<pos:position pos:line="56" pos:column="29"/></name> <init pos:line="56" pos:column="30">= <expr><call><name><name pos:line="56" pos:column="32">entry<pos:position pos:line="56" pos:column="37"/></name><operator pos:line="56" pos:column="37">.<pos:position pos:line="56" pos:column="38"/></operator><name pos:line="56" pos:column="38">descr<pos:position pos:line="56" pos:column="43"/></name><operator pos:line="56" pos:column="43">.<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="44">defined<pos:position pos:line="56" pos:column="51"/></name></name><argument_list pos:line="56" pos:column="51">()<pos:position pos:line="56" pos:column="53"/></argument_list></call> <operator pos:line="56" pos:column="54">&amp;&amp;<pos:position pos:line="56" pos:column="64"/></operator> <call><name><name pos:line="56" pos:column="57">entry<pos:position pos:line="56" pos:column="62"/></name><operator pos:line="56" pos:column="62">.<pos:position pos:line="56" pos:column="63"/></operator><name pos:line="56" pos:column="63">detail<pos:position pos:line="56" pos:column="69"/></name><operator pos:line="56" pos:column="69">.<pos:position pos:line="56" pos:column="70"/></operator><name pos:line="56" pos:column="70">defined<pos:position pos:line="56" pos:column="77"/></name></name><argument_list pos:line="56" pos:column="77">()<pos:position pos:line="56" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="56" pos:column="80"/></decl_stmt>

                <if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><operator pos:line="58" pos:column="21">!<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="22">parseOK<pos:position pos:line="58" pos:column="29"/></name></expr>)<pos:position pos:line="58" pos:column="30"/></condition><then pos:line="58" pos:column="30"> <block pos:line="58" pos:column="31">{
                    <expr_stmt><expr><call><name pos:line="59" pos:column="21">debugs<pos:position pos:line="59" pos:column="27"/></name><argument_list pos:line="59" pos:column="27">(<argument><expr><literal type="number" pos:line="59" pos:column="28">83<pos:position pos:line="59" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="32">DBG_IMPORTANT<pos:position pos:line="59" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="47">HERE<pos:position pos:line="59" pos:column="51"/></name> <operator pos:line="59" pos:column="52">&lt;&lt;<pos:position pos:line="59" pos:column="60"/></operator>
                           <literal type="string" pos:line="60" pos:column="28">"WARNING! missing important field for detail error: "<pos:position pos:line="60" pos:column="81"/></literal> <operator pos:line="60" pos:column="82">&lt;&lt;<pos:position pos:line="60" pos:column="90"/></operator>  <name pos:line="60" pos:column="86">errorName<pos:position pos:line="60" pos:column="95"/></name></expr></argument>)<pos:position pos:line="60" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="97"/></expr_stmt>
                    <return pos:line="61" pos:column="21">return <expr><literal type="boolean" pos:line="61" pos:column="28">false<pos:position pos:line="61" pos:column="33"/></literal></expr>;<pos:position pos:line="61" pos:column="34"/></return>
                }<pos:position pos:line="62" pos:column="18"/></block></then></if>

            }<pos:position pos:line="64" pos:column="14"/></block></then> <elseif pos:line="64" pos:column="15">else <if pos:line="64" pos:column="20">if <condition pos:line="64" pos:column="23">(<expr><operator pos:line="64" pos:column="24">!<pos:position pos:line="64" pos:column="25"/></operator><call><name><name pos:line="64" pos:column="25">Ssl<pos:position pos:line="64" pos:column="28"/></name><operator pos:line="64" pos:column="28">::<pos:position pos:line="64" pos:column="30"/></operator><name pos:line="64" pos:column="30">ErrorIsOptional<pos:position pos:line="64" pos:column="45"/></name></name><argument_list pos:line="64" pos:column="45">(<argument><expr><call><name><name pos:line="64" pos:column="46">errorName<pos:position pos:line="64" pos:column="55"/></name><operator pos:line="64" pos:column="55">.<pos:position pos:line="64" pos:column="56"/></operator><name pos:line="64" pos:column="56">termedBuf<pos:position pos:line="64" pos:column="65"/></name></name><argument_list pos:line="64" pos:column="65">()<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="64" pos:column="69"/></condition><then pos:line="64" pos:column="69"> <block pos:line="64" pos:column="70">{
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">debugs<pos:position pos:line="65" pos:column="23"/></name><argument_list pos:line="65" pos:column="23">(<argument><expr><literal type="number" pos:line="65" pos:column="24">83<pos:position pos:line="65" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="28">DBG_IMPORTANT<pos:position pos:line="65" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="43">HERE<pos:position pos:line="65" pos:column="47"/></name> <operator pos:line="65" pos:column="48">&lt;&lt;<pos:position pos:line="65" pos:column="56"/></operator>
                       <literal type="string" pos:line="66" pos:column="24">"WARNING! invalid error detail name: "<pos:position pos:line="66" pos:column="62"/></literal> <operator pos:line="66" pos:column="63">&lt;&lt;<pos:position pos:line="66" pos:column="71"/></operator> <name pos:line="66" pos:column="66">errorName<pos:position pos:line="66" pos:column="75"/></name></expr></argument>)<pos:position pos:line="66" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="77"/></expr_stmt>
                <return pos:line="67" pos:column="17">return <expr><literal type="boolean" pos:line="67" pos:column="24">false<pos:position pos:line="67" pos:column="29"/></literal></expr>;<pos:position pos:line="67" pos:column="30"/></return>
            }<pos:position pos:line="68" pos:column="14"/></block></then></if></elseif></if>

        }<pos:position pos:line="70" pos:column="10"/></block></then></if><comment type="line" pos:line="70" pos:column="10">// else {only spaces and black lines; just ignore}</comment>

        <expr_stmt><expr><call><name><name pos:line="72" pos:column="9">buf<pos:position pos:line="72" pos:column="12"/></name><operator pos:line="72" pos:column="12">.<pos:position pos:line="72" pos:column="13"/></operator><name pos:line="72" pos:column="13">consume<pos:position pos:line="72" pos:column="20"/></name></name><argument_list pos:line="72" pos:column="20">(<argument><expr><name pos:line="72" pos:column="21">size<pos:position pos:line="72" pos:column="25"/></name></expr></argument>)<pos:position pos:line="72" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">debugs<pos:position pos:line="74" pos:column="11"/></name><argument_list pos:line="74" pos:column="11">(<argument><expr><literal type="number" pos:line="74" pos:column="12">83<pos:position pos:line="74" pos:column="14"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="16">9<pos:position pos:line="74" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="74" pos:column="19">HERE<pos:position pos:line="74" pos:column="23"/></name> <operator pos:line="74" pos:column="24">&lt;&lt;<pos:position pos:line="74" pos:column="32"/></operator> <literal type="string" pos:line="74" pos:column="27">" Remain size: "<pos:position pos:line="74" pos:column="43"/></literal> <operator pos:line="74" pos:column="44">&lt;&lt;<pos:position pos:line="74" pos:column="52"/></operator> <call><name><name pos:line="74" pos:column="47">buf<pos:position pos:line="74" pos:column="50"/></name><operator pos:line="74" pos:column="50">.<pos:position pos:line="74" pos:column="51"/></operator><name pos:line="74" pos:column="51">contentSize<pos:position pos:line="74" pos:column="62"/></name></name><argument_list pos:line="74" pos:column="62">()<pos:position pos:line="74" pos:column="64"/></argument_list></call> <operator pos:line="74" pos:column="65">&lt;&lt;<pos:position pos:line="74" pos:column="73"/></operator> <literal type="string" pos:line="74" pos:column="68">" Content: "<pos:position pos:line="74" pos:column="80"/></literal> <operator pos:line="74" pos:column="81">&lt;&lt;<pos:position pos:line="74" pos:column="89"/></operator> <call><name><name pos:line="74" pos:column="84">buf<pos:position pos:line="74" pos:column="87"/></name><operator pos:line="74" pos:column="87">.<pos:position pos:line="74" pos:column="88"/></operator><name pos:line="74" pos:column="88">content<pos:position pos:line="74" pos:column="95"/></name></name><argument_list pos:line="74" pos:column="95">()<pos:position pos:line="74" pos:column="97"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="99"/></expr_stmt>
    <return pos:line="75" pos:column="5">return <expr><literal type="boolean" pos:line="75" pos:column="12">true<pos:position pos:line="75" pos:column="16"/></literal></expr>;<pos:position pos:line="75" pos:column="17"/></return>
}<pos:position pos:line="76" pos:column="2"/></block></function></unit>
